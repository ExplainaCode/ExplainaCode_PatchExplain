record_number,buggy_code,fixed_code
20001,"public boolean onTouch(View v,MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    xClickOffset=(int)event.getX();
    yClickOffset=screenHeight - (int)event.getY();
    if (xClickOffset > screenWidth - 100 * Options.scale && xClickOffset < screenWidth) {
      if (yClickOffset < yClickFirstBorder * Options.scale && yClickOffset > 0) {
        hud.triggerClick(Hud.BUTTON_3);
      }
 else       if (yClickOffset < yClickSecondBorder * Options.scale && yClickOffset > 66 * Options.scale) {
        hud.triggerClick(Hud.BUTTON_2);
      }
 else       if (yClickOffset < yClickThirdBorder * Options.scale && yClickOffset > 132 * Options.scale) {
        hud.triggerClick(Hud.BUTTON_1);
      }
    }
 else     if (xClickOffset < 64 * Options.scale && xClickOffset > 0) {
      if (yClickOffset < yClickFirstBorder * Options.scale && yClickOffset > 0) {
        hud.triggerClick(Hud.SPECIAL_2);
      }
 else       if (yClickOffset < yClickSecondBorder * Options.scale && yClickOffset > 66 * Options.scale) {
        hud.triggerClick(Hud.SPECIAL_1);
      }
    }
 else {
      weaponManager.triggerShoot(convertCoords((int)event.getX(),(int)event.getY()));
    }
    return true;
  }
  if (event.getAction() == MotionEvent.ACTION_UP) {
    if (Math.abs(event.getX() - xClickOffset) < touchMarginal && Math.abs(event.getY() - yClickOffset) < touchMarginal) {
    }
    return true;
  }
  return false;
}","public boolean onTouch(View v,MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    xClickOffset=(int)event.getX();
    yClickOffset=screenHeight - (int)event.getY();
    if (xClickOffset > screenWidth - 100 * Options.scale && xClickOffset < screenWidth && yClickOffset < yClickThirdBorder * Options.scale) {
      if (yClickOffset < yClickFirstBorder * Options.scale && yClickOffset > 0) {
        hud.triggerClick(Hud.BUTTON_3);
      }
 else       if (yClickOffset < yClickSecondBorder * Options.scale && yClickOffset > 66 * Options.scale) {
        hud.triggerClick(Hud.BUTTON_2);
      }
 else       if (yClickOffset < yClickThirdBorder * Options.scale && yClickOffset > 132 * Options.scale) {
        hud.triggerClick(Hud.BUTTON_1);
      }
    }
 else     if (xClickOffset < screenWidth - 700 * Options.scale && xClickOffset > 0 && yClickOffset < yClickThirdBorder * Options.scale) {
      if (yClickOffset < yClickFirstBorder * Options.scale && yClickOffset > 0) {
        hud.triggerClick(Hud.SPECIAL_2);
      }
 else       if (yClickOffset < yClickSecondBorder * Options.scale && yClickOffset > 66 * Options.scale) {
        hud.triggerClick(Hud.SPECIAL_1);
      }
    }
 else {
      weaponManager.triggerShoot(convertCoords((int)event.getX(),(int)event.getY()));
    }
    return true;
  }
  if (event.getAction() == MotionEvent.ACTION_UP) {
    if (Math.abs(event.getX() - xClickOffset) < touchMarginal && Math.abs(event.getY() - yClickOffset) < touchMarginal) {
    }
    return true;
  }
  return false;
}"
20002,"/** 
 * K�sittelee ammuksen teko�lyn.
 */
public final void handleAi(){
  for (int i=wrapper.enemies.size() - 1; i >= 0; --i) {
    if (wrapper.enemyStates.get(i) == 1) {
      double distance=Math.sqrt(Math.pow(x - wrapper.enemies.get(i).x,2) + Math.pow(y - wrapper.enemies.get(i).y,2));
      if (distance - wrapper.enemies.get(i).collisionRadius - collisionRadius <= 0) {
        wrapper.projectileStates.set(listId,2);
        if (damageType == ProjectileLaser.DAMAGE_ON_TOUCH) {
          wrapper.enemies.get(i).triggerCollision(GameObject.COLLISION_WITH_PROJECTILE,damageOnTouch,armorPiercing);
          setAction(GLRenderer.ANIMATION_DESTROY,1,1);
        }
 else         if (damageType == ProjectileLaser.EXPLODE_ON_TOUCH) {
          setAction(GLRenderer.ANIMATION_DESTROY,1,1);
          causeExplosion();
        }
        break;
      }
      if (distance - wrapper.enemies.get(i).collisionRadius - damageRadius <= 0) {
        wrapper.enemies.get(i).health-=(damageOnRadius * (1 - 0.15 * wrapper.enemies.get(i).defence));
      }
    }
  }
  if (explodeTime > 0) {
    currentTime=android.os.SystemClock.uptimeMillis();
    if (currentTime - startTime >= explodeTime) {
      wrapper.projectileStates.set(listId,2);
      setAction(GLRenderer.ANIMATION_DESTROY,1,1);
      causeExplosion();
    }
  }
  if (wrapper.player.x + x < -400 || wrapper.player.x + x > 400 || wrapper.player.y + y < -240 || wrapper.player.y + y > 240) {
    setUnactive();
  }
}","/** 
 * K�sittelee ammuksen teko�lyn.
 */
public final void handleAi(){
  for (int i=wrapper.enemies.size() - 1; i >= 0; --i) {
    if (wrapper.enemyStates.get(i) == 1) {
      double distance=Math.sqrt(Math.pow(x - wrapper.enemies.get(i).x,2) + Math.pow(y - wrapper.enemies.get(i).y,2));
      if (distance - wrapper.enemies.get(i).collisionRadius - collisionRadius <= 0) {
        wrapper.projectileStates.set(listId,2);
        if (damageType == ProjectileLaser.DAMAGE_ON_TOUCH) {
          wrapper.enemies.get(i).triggerCollision(GameObject.COLLISION_WITH_PROJECTILE,damageOnTouch,armorPiercing);
          setAction(GLRenderer.ANIMATION_DESTROY,1,1);
        }
 else         if (damageType == ProjectileLaser.EXPLODE_ON_TOUCH) {
          setAction(GLRenderer.ANIMATION_DESTROY,1,1);
          causeExplosion();
        }
        break;
      }
      if (distance - wrapper.enemies.get(i).collisionRadius - damageRadius <= 0) {
        wrapper.enemies.get(i).health-=(damageOnRadius * (1 - 0.15 * wrapper.enemies.get(i).defence));
      }
    }
  }
  if (explodeTime > 0) {
    currentTime=android.os.SystemClock.uptimeMillis();
    if (currentTime - startTime >= explodeTime) {
      wrapper.projectileStates.set(listId,2);
      setAction(GLRenderer.ANIMATION_DESTROY,1,1);
      causeExplosion();
    }
  }
  if (wrapper.player.x + x < -400 * Options.scale || wrapper.player.x + x > 400 * Options.scale || wrapper.player.y + y < -240 * Options.scale || wrapper.player.y + y > 240 * Options.scale) {
    setUnactive();
  }
}"
20003,"/** 
 * Piirt�� framen ruudulle.
 * @param GL10  OpenGL-konteksti
 * @param float X-koordinaatti
 * @param float Y-koordinaatti
 * @param int   Suunta
 * @param int   Kuvaruudun j�rjestysnumero
 */
public final void draw(GL10 _gl,float _x,float _y,int _direction,int _frame){
  _gl.glLoadIdentity();
  _gl.glTranslatef(_x,_y,0);
  _gl.glRotatef((float)_direction - 90.0f,0.0f,0.0f,1.0f);
  _gl.glBindTexture(GL10.GL_TEXTURE_2D,frames[_frame]);
  _gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  _gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  _gl.glFrontFace(GL10.GL_CW);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,vertexBuffer);
  _gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,textureBuffer);
  _gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,vertices.length / 3);
  _gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
  _gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
}","/** 
 * Piirt�� framen ruudulle.
 * @param GL10  OpenGL-konteksti
 * @param float X-koordinaatti
 * @param float Y-koordinaatti
 * @param int   Suunta
 * @param int   Kuvaruudun j�rjestysnumero
 */
public final void draw(GL10 _gl,float _x,float _y,int _direction,int _frame){
  _gl.glLoadIdentity();
  _gl.glTranslatef(_x,_y,0);
  _gl.glRotatef((float)_direction - 90.0f,0.0f,0.0f,1.0f);
  _gl.glScalef(Options.scale,Options.scale,Options.scale);
  _gl.glBindTexture(GL10.GL_TEXTURE_2D,frames[_frame]);
  _gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  _gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  _gl.glFrontFace(GL10.GL_CW);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,vertexBuffer);
  _gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,textureBuffer);
  _gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,vertices.length / 3);
  _gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
  _gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
}"
20004,"/** 
 * Alustaa luokan muuttujat.
 * @param int El�m�t/kest�vyys
 * @param int Puolustus
 * @param int Nopeus
 * @param int Hy�kk�ysvoima t�rm�tess� pelaajaan
 * @param int Taso
 */
public Enemy(int _health,int _defence,int _speed,int _attack,int _ai,int _rank){
  super();
  healthMax=_health;
  health=_health;
  attackMax=_attack;
  attack=_attack;
  speedMax=_speed;
  speed=_speed;
  defenceMax=_defence;
  defence=_defence;
  rank=_rank;
  if (rank == 1) {
    collisionRadius=20;
  }
 else   if (rank == 2) {
  }
  for (int i=0; i < 4; ++i) {
    if (GLRenderer.enemyAnimations[rank - 1][i] != null) {
      animationLength[i]=GLRenderer.enemyAnimations[rank - 1][i].length;
    }
  }
  wrapper=Wrapper.getInstance();
  listId=wrapper.addToList(this,Wrapper.CLASS_TYPE_ENEMY,1);
  if (_ai == 0) {
    priority=1;
    ai=new LinearAi(listId);
  }
}","/** 
 * Alustaa luokan muuttujat.
 * @param int El�m�t/kest�vyys
 * @param int Puolustus
 * @param int Nopeus
 * @param int Hy�kk�ysvoima t�rm�tess� pelaajaan
 * @param int Taso
 */
public Enemy(int _health,int _defence,int _speed,int _attack,int _ai,int _rank){
  super();
  healthMax=_health;
  health=_health;
  attackMax=_attack;
  attack=_attack;
  speedMax=_speed;
  speed=_speed;
  defenceMax=_defence;
  defence=_defence;
  rank=_rank;
  if (rank == 1) {
    collisionRadius=(int)(20 * Options.scale);
  }
 else   if (rank == 2) {
  }
  for (int i=0; i < 4; ++i) {
    if (GLRenderer.enemyAnimations[rank - 1][i] != null) {
      animationLength[i]=GLRenderer.enemyAnimations[rank - 1][i].length;
    }
  }
  wrapper=Wrapper.getInstance();
  listId=wrapper.addToList(this,Wrapper.CLASS_TYPE_ENEMY,1);
  if (_ai == 0) {
    priority=1;
    ai=new LinearAi(listId);
  }
}"
20005,"/** 
 * P�ivitt�� liikkumisen ja k��ntymisen.
 * @param long T�m�n hetkinen aika
 */
public void updateMovement(long _time){
  if (_time - movementTime >= movementDelay) {
    movementTime=_time;
    x+=Math.cos((direction * Math.PI) / 180) * movementSpeed;
    y+=Math.sin((direction * Math.PI) / 180) * movementSpeed;
    movementDelay-=movementAcceleration;
  }
  if (_time - turningTime >= turningDelay) {
    turningTime=_time;
    if (turningDirection == TO_THE_LEFT) {
      ++direction;
      if (direction == 360) {
        direction=0;
      }
    }
 else     if (turningDirection == TO_THE_RIGHT) {
      --direction;
      if (direction < 0) {
        direction=359;
      }
    }
    turningDelay-=turningAcceleration;
  }
}","/** 
 * P�ivitt�� liikkumisen ja k��ntymisen.
 * @param long T�m�n hetkinen aika
 */
public void updateMovement(long _time){
  if (_time - movementTime >= movementDelay) {
    movementTime=_time;
    x+=Math.cos((direction * Math.PI) / 180) * movementSpeed * Options.scale;
    y+=Math.sin((direction * Math.PI) / 180) * movementSpeed * Options.scale;
    movementDelay-=movementAcceleration;
  }
  if (_time - turningTime >= turningDelay) {
    turningTime=_time;
    if (turningDirection == TO_THE_LEFT) {
      ++direction;
      if (direction == 360) {
        direction=0;
      }
    }
 else     if (turningDirection == TO_THE_RIGHT) {
      --direction;
      if (direction < 0) {
        direction=359;
      }
    }
    turningDelay-=turningAcceleration;
  }
}"
20006,"/** 
 * Kutsutaan kun aktiviteetti luodaan. 
 */
@Override public void onCreate(Bundle _savedInstanceState){
  super.onCreate(_savedInstanceState);
  setContentView(R.layout.main);
  context=getApplicationContext();
  Options options=Options.getInstance();
  SoundManager.getInstance();
  SoundManager.initSounds(this);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  setVolumeControlStream(AudioManager.STREAM_MUSIC);
  View storyButton=findViewById(R.id.button_story);
  storyButton.setOnClickListener(this);
  View survivalButton=findViewById(R.id.button_survival);
  survivalButton.setOnClickListener(this);
  View helpButton=findViewById(R.id.button_help);
  helpButton.setOnClickListener(this);
  View highscoresButton=findViewById(R.id.button_highscores);
  highscoresButton.setOnClickListener(this);
  View quitButton=findViewById(R.id.button_quit);
  quitButton.setOnClickListener(this);
  particleCheckBox=(CheckBox)findViewById(R.id.checkBoxParticle);
  particleCheckBox.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (((CheckBox)v).isChecked()) {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        Options.settings[0]=false;
      }
 else {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  musicCheckBox=(CheckBox)findViewById(R.id.checkBoxMusic);
  musicCheckBox.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (((CheckBox)v).isChecked()) {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        Options.settings[1]=false;
      }
 else {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  soundCheckBox=(CheckBox)findViewById(R.id.checkBoxSound);
  soundCheckBox.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (((CheckBox)v).isChecked()) {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
 else {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  if (!settingsLoaded) {
    XmlReader reader=new XmlReader(getBaseContext());
    boolean[] settingsTemp=reader.readSettings();
    particleCheckBox.setChecked(settingsTemp[0]);
    musicCheckBox.setChecked(settingsTemp[1]);
    soundCheckBox.setChecked(settingsTemp[2]);
    settingsLoaded=true;
  }
}","/** 
 * Kutsutaan kun aktiviteetti luodaan. 
 */
@Override public void onCreate(Bundle _savedInstanceState){
  super.onCreate(_savedInstanceState);
  setContentView(R.layout.main);
  context=getApplicationContext();
  DisplayMetrics dm=new DisplayMetrics();
  getWindowManager().getDefaultDisplay().getMetrics(dm);
  Options.getInstance().scaleConversion(dm.densityDpi);
  SoundManager.getInstance();
  SoundManager.initSounds(this);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  setVolumeControlStream(AudioManager.STREAM_MUSIC);
  View storyButton=findViewById(R.id.button_story);
  storyButton.setOnClickListener(this);
  View survivalButton=findViewById(R.id.button_survival);
  survivalButton.setOnClickListener(this);
  View helpButton=findViewById(R.id.button_help);
  helpButton.setOnClickListener(this);
  View highscoresButton=findViewById(R.id.button_highscores);
  highscoresButton.setOnClickListener(this);
  View quitButton=findViewById(R.id.button_quit);
  quitButton.setOnClickListener(this);
  particleCheckBox=(CheckBox)findViewById(R.id.checkBoxParticle);
  particleCheckBox.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (((CheckBox)v).isChecked()) {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        Options.settings[0]=false;
      }
 else {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  musicCheckBox=(CheckBox)findViewById(R.id.checkBoxMusic);
  musicCheckBox.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (((CheckBox)v).isChecked()) {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        Options.settings[1]=false;
      }
 else {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  soundCheckBox=(CheckBox)findViewById(R.id.checkBoxSound);
  soundCheckBox.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      if (((CheckBox)v).isChecked()) {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
 else {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
  if (!settingsLoaded) {
    XmlReader reader=new XmlReader(getBaseContext());
    boolean[] settingsTemp=reader.readSettings();
    particleCheckBox.setChecked(settingsTemp[0]);
    musicCheckBox.setChecked(settingsTemp[1]);
    soundCheckBox.setChecked(settingsTemp[2]);
    settingsLoaded=true;
  }
}"
20007,"/** 
 * Alustaa luokan muuttujat.
 * @param int Pelaajan el�m�t/kest�vyys
 * @param int Pelaajan puolustus
 */
public Player(int _health,int _defence){
  super();
  health=_health;
  defence=_defence;
  collisionRadius=25;
  for (int i=0; i < 4; ++i) {
    if (GLRenderer.playerAnimations[i] != null) {
      animationLength[i]=GLRenderer.playerAnimations[i].length;
    }
  }
  wrapper=Wrapper.getInstance();
  wrapper.addToList(this,Wrapper.CLASS_TYPE_PLAYER,1);
}","/** 
 * Alustaa luokan muuttujat.
 * @param int Pelaajan el�m�t/kest�vyys
 * @param int Pelaajan puolustus
 */
public Player(int _health,int _defence){
  super();
  health=_health;
  defence=_defence;
  collisionRadius=(int)(25 * Options.scale);
  for (int i=0; i < 4; ++i) {
    if (GLRenderer.playerAnimations[i] != null) {
      animationLength[i]=GLRenderer.playerAnimations[i].length;
    }
  }
  wrapper=Wrapper.getInstance();
  wrapper.addToList(this,Wrapper.CLASS_TYPE_PLAYER,1);
}"
20008,"/** 
 * P�ivitt�� vihollisten aloituspisteet kameran koordinaattien perusteella.
 */
@Override protected void updateSpawnPoints(){
  spawnPoints[1][0][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[1][0][1]=camera.y;
  spawnPoints[1][1][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[1][1][1]=camera.y + 128;
  spawnPoints[1][2][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[1][2][1]=camera.y - 128;
  spawnPoints[2][0][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[2][0][1]=halfOfScreenHeight + camera.y;
  spawnPoints[2][1][0]=-halfOfScreenWidth + camera.x + 64;
  spawnPoints[2][1][1]=halfOfScreenHeight + camera.y + 64;
  spawnPoints[2][2][0]=-halfOfScreenWidth + camera.x - 64;
  spawnPoints[2][2][1]=halfOfScreenHeight + camera.y - 64;
  spawnPoints[3][0][0]=camera.x;
  spawnPoints[3][0][1]=halfOfScreenHeight + camera.y;
  spawnPoints[3][1][0]=camera.x + 128;
  spawnPoints[3][1][1]=halfOfScreenHeight + camera.y;
  spawnPoints[3][2][0]=camera.x - 128;
  spawnPoints[3][2][1]=halfOfScreenHeight + camera.y;
  spawnPoints[4][0][0]=halfOfScreenWidth + camera.x;
  spawnPoints[3][0][1]=halfOfScreenHeight + camera.y;
  spawnPoints[4][1][0]=halfOfScreenWidth + camera.x + 64;
  spawnPoints[3][1][1]=halfOfScreenHeight + camera.y - 64;
  spawnPoints[4][2][0]=halfOfScreenWidth + camera.x - 64;
  spawnPoints[3][2][1]=halfOfScreenHeight + camera.y + 64;
  spawnPoints[5][0][0]=halfOfScreenWidth + camera.x;
  spawnPoints[4][0][1]=0 + camera.y;
  spawnPoints[5][1][0]=halfOfScreenWidth + camera.x;
  spawnPoints[4][1][1]=0 + camera.y + 128;
  spawnPoints[5][2][0]=halfOfScreenWidth + camera.x;
  spawnPoints[4][2][1]=0 + camera.y - 128;
  spawnPoints[6][0][0]=halfOfScreenWidth + camera.x;
  spawnPoints[5][0][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[6][1][0]=halfOfScreenWidth + camera.x + 64;
  spawnPoints[5][1][1]=-halfOfScreenHeight + camera.y + 64;
  spawnPoints[6][2][0]=halfOfScreenWidth + camera.x - 64;
  spawnPoints[5][2][1]=-halfOfScreenHeight + camera.y - 64;
  spawnPoints[7][0][0]=camera.x;
  spawnPoints[7][0][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[7][1][0]=camera.x + 128;
  spawnPoints[7][1][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[7][2][0]=camera.x - 128;
  spawnPoints[7][2][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[8][0][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[8][0][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[8][1][0]=-halfOfScreenWidth + camera.x + 64;
  spawnPoints[8][1][1]=-halfOfScreenHeight + camera.y - 64;
  spawnPoints[8][2][0]=-halfOfScreenWidth + camera.x - 64;
  spawnPoints[8][2][1]=-halfOfScreenHeight + camera.y + 64;
}","/** 
 * P�ivitt�� vihollisten aloituspisteet kameran koordinaattien perusteella.
 */
@Override protected void updateSpawnPoints(){
  spawnPoints[1][0][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[1][0][1]=camera.y;
  spawnPoints[1][1][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[1][1][1]=(int)(camera.y + 128 * Options.scale);
  spawnPoints[1][2][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[1][2][1]=(int)(camera.y - 128 * Options.scale);
  spawnPoints[2][0][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[2][0][1]=halfOfScreenHeight + camera.y;
  spawnPoints[2][1][0]=(int)(-halfOfScreenWidth + camera.x + 64 * Options.scale);
  spawnPoints[2][1][1]=(int)(halfOfScreenHeight + camera.y + 64 * Options.scale);
  spawnPoints[2][2][0]=(int)(-halfOfScreenWidth + camera.x - 64 * Options.scale);
  spawnPoints[2][2][1]=(int)(halfOfScreenHeight + camera.y - 64 * Options.scale);
  spawnPoints[3][0][0]=camera.x;
  spawnPoints[3][0][1]=halfOfScreenHeight + camera.y;
  spawnPoints[3][1][0]=(int)(camera.x + 128 * Options.scale);
  spawnPoints[3][1][1]=halfOfScreenHeight + camera.y;
  spawnPoints[3][2][0]=(int)(camera.x - 128 * Options.scale);
  spawnPoints[3][2][1]=halfOfScreenHeight + camera.y;
  spawnPoints[4][0][0]=halfOfScreenWidth + camera.x;
  spawnPoints[3][0][1]=halfOfScreenHeight + camera.y;
  spawnPoints[4][1][0]=(int)(halfOfScreenWidth + camera.x + 64 * Options.scale);
  spawnPoints[3][1][1]=(int)(halfOfScreenHeight + camera.y - 64 * Options.scale);
  spawnPoints[4][2][0]=(int)(halfOfScreenWidth + camera.x - 64 * Options.scale);
  spawnPoints[3][2][1]=(int)(halfOfScreenHeight + camera.y + 64 * Options.scale);
  spawnPoints[5][0][0]=halfOfScreenWidth + camera.x;
  spawnPoints[4][0][1]=0 + camera.y;
  spawnPoints[5][1][0]=halfOfScreenWidth + camera.x;
  spawnPoints[4][1][1]=(int)(0 + camera.y + 128 * Options.scale);
  spawnPoints[5][2][0]=halfOfScreenWidth + camera.x;
  spawnPoints[4][2][1]=(int)(0 + camera.y - 128 * Options.scale);
  spawnPoints[6][0][0]=halfOfScreenWidth + camera.x;
  spawnPoints[5][0][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[6][1][0]=(int)(halfOfScreenWidth + camera.x + 64 * Options.scale);
  spawnPoints[5][1][1]=(int)(-halfOfScreenHeight + camera.y + 64 * Options.scale);
  spawnPoints[6][2][0]=(int)(halfOfScreenWidth + camera.x - 64 * Options.scale);
  spawnPoints[5][2][1]=(int)(-halfOfScreenHeight + camera.y - 64 * Options.scale);
  spawnPoints[7][0][0]=camera.x;
  spawnPoints[7][0][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[7][1][0]=(int)(camera.x + 128 * Options.scale);
  spawnPoints[7][1][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[7][2][0]=(int)(camera.x - 128 * Options.scale);
  spawnPoints[7][2][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[8][0][0]=-halfOfScreenWidth + camera.x;
  spawnPoints[8][0][1]=-halfOfScreenHeight + camera.y;
  spawnPoints[8][1][0]=(int)(-halfOfScreenWidth + camera.x + 64 * Options.scale);
  spawnPoints[8][1][1]=(int)(-halfOfScreenHeight + camera.y - 64 * Options.scale);
  spawnPoints[8][2][0]=(int)(-halfOfScreenWidth + camera.x - 64 * Options.scale);
  spawnPoints[8][2][1]=(int)(-halfOfScreenHeight + camera.y + 64 * Options.scale);
}"
20009,"/** 
 * Piirt�� tekstuurin ruudulle.
 * @param GL10  OpenGL-konteksti
 * @param float Tekstuurin X-koordinaatti
 * @param float Tekstuurin Y-koordinaatti
 * @param int   Tekstuurin suunta (0 = oikealle)
 */
public final void draw(GL10 _gl,float _x,float _y,int _direction){
  _gl.glLoadIdentity();
  _gl.glTranslatef(_x,_y,0);
  _gl.glRotatef((float)_direction - 90.0f,0.0f,0.0f,1.0f);
  _gl.glScalef(scale,scale,scale);
  _gl.glBindTexture(GL10.GL_TEXTURE_2D,sprite[0]);
  _gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  _gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  _gl.glFrontFace(GL10.GL_CW);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,vertexBuffer);
  _gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,textureBuffer);
  _gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,vertices.length / 3);
  _gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
  _gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
}","/** 
 * Piirt�� tekstuurin ruudulle.
 * @param GL10  OpenGL-konteksti
 * @param float Tekstuurin X-koordinaatti
 * @param float Tekstuurin Y-koordinaatti
 * @param int   Tekstuurin suunta (0 = oikealle)
 */
public final void draw(GL10 _gl,float _x,float _y,int _direction){
  _gl.glLoadIdentity();
  _gl.glTranslatef(_x,_y,0);
  _gl.glRotatef((float)_direction - 90.0f,0.0f,0.0f,1.0f);
  _gl.glScalef(Options.scale,Options.scale,Options.scale);
  _gl.glBindTexture(GL10.GL_TEXTURE_2D,sprite[0]);
  _gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  _gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  _gl.glFrontFace(GL10.GL_CW);
  _gl.glVertexPointer(3,GL10.GL_FLOAT,0,vertexBuffer);
  _gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,textureBuffer);
  _gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,vertices.length / 3);
  _gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
  _gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
}"
20010,"/** 
 * Asettaa TouchListenerit ja k�sittelee kosketustapahtumat.
 * @param GLSurfaceView OpenGL-pinta
 */
public final void setSurfaceListeners(GLSurfaceView _surface){
  surface=_surface;
  surface.setOnTouchListener(new OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        xClickOffset=(int)event.getX();
        yClickOffset=screenHeight - (int)event.getY();
        if (xClickOffset > screenWidth - 100 && xClickOffset < screenWidth) {
          if (yClickOffset < yClickFirstBorder && yClickOffset > 0) {
            hud.triggerClick(Hud.BUTTON_3);
          }
 else           if (yClickOffset < yClickSecondBorder && yClickOffset > 66) {
            hud.triggerClick(Hud.BUTTON_2);
          }
 else           if (yClickOffset < yClickThirdBorder && yClickOffset > 132) {
            hud.triggerClick(Hud.BUTTON_1);
          }
        }
 else         if (xClickOffset < 64 && xClickOffset > 0) {
          if (yClickOffset < yClickFirstBorder && yClickOffset > 0) {
            hud.triggerClick(Hud.SPECIAL_2);
          }
 else           if (yClickOffset < yClickSecondBorder && yClickOffset > 66) {
            hud.triggerClick(Hud.SPECIAL_1);
          }
        }
 else {
          weaponManager.triggerShoot(convertCoords((int)event.getX(),(int)event.getY()));
        }
        return true;
      }
      if (event.getAction() == MotionEvent.ACTION_UP) {
        if (Math.abs(event.getX() - xClickOffset) < touchMarginal && Math.abs(event.getY() - yClickOffset) < touchMarginal) {
        }
        return true;
      }
      return false;
    }
  }
);
}","/** 
 * Asettaa TouchListenerit ja k�sittelee kosketustapahtumat.
 * @param GLSurfaceView OpenGL-pinta
 */
public final void setSurfaceListeners(GLSurfaceView _surface){
  surface=_surface;
  surface.setOnTouchListener(new OnTouchListener(){
    public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        xClickOffset=(int)event.getX();
        yClickOffset=screenHeight - (int)event.getY();
        if (xClickOffset > screenWidth - 100 * Options.scale && xClickOffset < screenWidth) {
          if (yClickOffset < yClickFirstBorder * Options.scale && yClickOffset > 0) {
            hud.triggerClick(Hud.BUTTON_3);
          }
 else           if (yClickOffset < yClickSecondBorder * Options.scale && yClickOffset > 66 * Options.scale) {
            hud.triggerClick(Hud.BUTTON_2);
          }
 else           if (yClickOffset < yClickThirdBorder * Options.scale && yClickOffset > 132 * Options.scale) {
            hud.triggerClick(Hud.BUTTON_1);
          }
        }
 else         if (xClickOffset < 64 * Options.scale && xClickOffset > 0) {
          if (yClickOffset < yClickFirstBorder * Options.scale && yClickOffset > 0) {
            hud.triggerClick(Hud.SPECIAL_2);
          }
 else           if (yClickOffset < yClickSecondBorder * Options.scale && yClickOffset > 66 * Options.scale) {
            hud.triggerClick(Hud.SPECIAL_1);
          }
        }
 else {
          weaponManager.triggerShoot(convertCoords((int)event.getX(),(int)event.getY()));
        }
        return true;
      }
      if (event.getAction() == MotionEvent.ACTION_UP) {
        if (Math.abs(event.getX() - xClickOffset) < touchMarginal && Math.abs(event.getY() - yClickOffset) < touchMarginal) {
        }
        return true;
      }
      return false;
    }
  }
);
}"
20011,"public boolean onTouch(View v,MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    xClickOffset=(int)event.getX();
    yClickOffset=screenHeight - (int)event.getY();
    if (xClickOffset > screenWidth - 100 && xClickOffset < screenWidth) {
      if (yClickOffset < yClickFirstBorder && yClickOffset > 0) {
        hud.triggerClick(Hud.BUTTON_3);
      }
 else       if (yClickOffset < yClickSecondBorder && yClickOffset > 66) {
        hud.triggerClick(Hud.BUTTON_2);
      }
 else       if (yClickOffset < yClickThirdBorder && yClickOffset > 132) {
        hud.triggerClick(Hud.BUTTON_1);
      }
    }
 else     if (xClickOffset < 64 && xClickOffset > 0) {
      if (yClickOffset < yClickFirstBorder && yClickOffset > 0) {
        hud.triggerClick(Hud.SPECIAL_2);
      }
 else       if (yClickOffset < yClickSecondBorder && yClickOffset > 66) {
        hud.triggerClick(Hud.SPECIAL_1);
      }
    }
 else {
      weaponManager.triggerShoot(convertCoords((int)event.getX(),(int)event.getY()));
    }
    return true;
  }
  if (event.getAction() == MotionEvent.ACTION_UP) {
    if (Math.abs(event.getX() - xClickOffset) < touchMarginal && Math.abs(event.getY() - yClickOffset) < touchMarginal) {
    }
    return true;
  }
  return false;
}","public boolean onTouch(View v,MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    xClickOffset=(int)event.getX();
    yClickOffset=screenHeight - (int)event.getY();
    if (xClickOffset > screenWidth - 100 * Options.scale && xClickOffset < screenWidth) {
      if (yClickOffset < yClickFirstBorder * Options.scale && yClickOffset > 0) {
        hud.triggerClick(Hud.BUTTON_3);
      }
 else       if (yClickOffset < yClickSecondBorder * Options.scale && yClickOffset > 66 * Options.scale) {
        hud.triggerClick(Hud.BUTTON_2);
      }
 else       if (yClickOffset < yClickThirdBorder * Options.scale && yClickOffset > 132 * Options.scale) {
        hud.triggerClick(Hud.BUTTON_1);
      }
    }
 else     if (xClickOffset < 64 * Options.scale && xClickOffset > 0) {
      if (yClickOffset < yClickFirstBorder * Options.scale && yClickOffset > 0) {
        hud.triggerClick(Hud.SPECIAL_2);
      }
 else       if (yClickOffset < yClickSecondBorder * Options.scale && yClickOffset > 66 * Options.scale) {
        hud.triggerClick(Hud.SPECIAL_1);
      }
    }
 else {
      weaponManager.triggerShoot(convertCoords((int)event.getX(),(int)event.getY()));
    }
    return true;
  }
  if (event.getAction() == MotionEvent.ACTION_UP) {
    if (Math.abs(event.getX() - xClickOffset) < touchMarginal && Math.abs(event.getY() - yClickOffset) < touchMarginal) {
    }
    return true;
  }
  return false;
}"
20012,"/** 
 * Alustaa luokan muuttujat, lukee pelitilan tarvitsemat tiedot ja k�ynnist�� pelin.
 * @param DisplayMetrics N�yt�n tiedot
 * @param Context		 Ohjelman konteksti
 */
public SurvivalMode(DisplayMetrics _dm,Context _context){
  waves=new int[AMOUNT_OF_WAVES][AMOUNT_OF_ENEMIES_PER_WAVE];
  enemies=new ArrayList<Enemy>();
  enemyStats=new int[5][5];
  scoreCounter=new GuiObject();
  spawnPoints=new int[9][3][2];
  halfOfScreenWidth=_dm.widthPixels;
  halfOfScreenHeight=_dm.heightPixels;
  XmlReader reader=new XmlReader(_context);
  ArrayList<Integer> enemyStatsTemp=reader.readRanks();
  int rank=0;
  for (int i=0; i < enemyStatsTemp.size() - 1; ++i) {
    enemyStats[rank][i - rank * 5]=enemyStatsTemp.get(i);
    rank=(int)(i / 5);
  }
  reader.readSurvivalMode(this);
  weaponManager=new WeaponManager();
  weaponManager.initialize(WeaponManager.SURVIVAL_MODE);
  camera=CameraManager.getInstance();
  updateSpawnPoints();
  startWave();
}","/** 
 * Alustaa luokan muuttujat, lukee pelitilan tarvitsemat tiedot ja k�ynnist�� pelin.
 * @param DisplayMetrics N�yt�n tiedot
 * @param Context		 Ohjelman konteksti
 */
public SurvivalMode(DisplayMetrics _dm,Context _context){
  waves=new int[AMOUNT_OF_WAVES][AMOUNT_OF_ENEMIES_PER_WAVE];
  enemies=new ArrayList<Enemy>();
  enemyStats=new int[5][5];
  scoreCounter=new GuiObject();
  spawnPoints=new int[9][3][2];
  halfOfScreenWidth=_dm.widthPixels;
  halfOfScreenHeight=_dm.heightPixels;
  XmlReader reader=new XmlReader(_context);
  ArrayList<Integer> enemyStatsTemp=reader.readRanks();
  int rank=0;
  for (int i=0; i < enemyStatsTemp.size(); ++i) {
    rank=(int)(i / 5);
    enemyStats[rank][i - rank * 5]=enemyStatsTemp.get(i);
  }
  reader.readSurvivalMode(this);
  weaponManager=new WeaponManager();
  weaponManager.initialize(WeaponManager.SURVIVAL_MODE);
  camera=CameraManager.getInstance();
  updateSpawnPoints();
  startWave();
}"
20013,"/** 
 * Kutsutaan kun aktiviteetti luodaan. 
 */
@Override public void onCreate(Bundle _savedInstanceState){
  super.onCreate(_savedInstanceState);
  setContentView(R.layout.main);
  context=getApplicationContext();
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  View storyButton=findViewById(R.id.button_story);
  storyButton.setOnClickListener(this);
  View survivalButton=findViewById(R.id.button_survival);
  survivalButton.setOnClickListener(this);
  View helpButton=findViewById(R.id.button_help);
  helpButton.setOnClickListener(this);
  View highscoresButton=findViewById(R.id.button_highscores);
  highscoresButton.setOnClickListener(this);
  View optionsButton=findViewById(R.id.button_options);
  optionsButton.setOnClickListener(this);
  View quitButton=findViewById(R.id.button_quit);
  quitButton.setOnClickListener(this);
  SoundManager.getInstance();
  SoundManager.initSounds(this);
  SoundManager.loadSounds();
}","/** 
 * Kutsutaan kun aktiviteetti luodaan. 
 */
@Override public void onCreate(Bundle _savedInstanceState){
  super.onCreate(_savedInstanceState);
  setContentView(R.layout.main);
  context=getApplicationContext();
  Options options=Options.getInstance();
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  View storyButton=findViewById(R.id.button_story);
  storyButton.setOnClickListener(this);
  View survivalButton=findViewById(R.id.button_survival);
  survivalButton.setOnClickListener(this);
  View helpButton=findViewById(R.id.button_help);
  helpButton.setOnClickListener(this);
  View highscoresButton=findViewById(R.id.button_highscores);
  highscoresButton.setOnClickListener(this);
  View optionsButton=findViewById(R.id.button_options);
  optionsButton.setOnClickListener(this);
  View quitButton=findViewById(R.id.button_quit);
  quitButton.setOnClickListener(this);
  SoundManager.getInstance();
  SoundManager.initSounds(this);
}"
20014,"@Override protected void onCreate(Bundle _savedInstanceState){
  final XmlWriter writer=new XmlWriter();
  super.onCreate(_savedInstanceState);
  addPreferencesFromResource(R.layout.settings);
  final Preference particlesPref=(Preference)findPreference(""String_Node_Str"");
  final Preference musicPref=(Preference)findPreference(""String_Node_Str"");
  final Preference soundsPref=(Preference)findPreference(""String_Node_Str"");
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  particleState=prefs.getBoolean(""String_Node_Str"",false);
  musicState=prefs.getBoolean(""String_Node_Str"",true);
  soundState=prefs.getBoolean(""String_Node_Str"",true);
  writer.saveSettings(particleState,musicState,soundState);
  particlesPref.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      particleState=((CheckBoxPreference)particlesPref).isChecked();
      musicState=((CheckBoxPreference)musicPref).isChecked();
      soundState=((CheckBoxPreference)soundsPref).isChecked();
      writer.saveSettings(particleState,musicState,soundState);
      return true;
    }
  }
);
  musicPref.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      particleState=((CheckBoxPreference)particlesPref).isChecked();
      musicState=((CheckBoxPreference)musicPref).isChecked();
      soundState=((CheckBoxPreference)soundsPref).isChecked();
      XmlWriter writer=new XmlWriter();
      writer.saveSettings(particleState,musicState,soundState);
      return true;
    }
  }
);
  soundsPref.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      particleState=((CheckBoxPreference)particlesPref).isChecked();
      musicState=((CheckBoxPreference)musicPref).isChecked();
      soundState=((CheckBoxPreference)soundsPref).isChecked();
      XmlWriter writer=new XmlWriter();
      writer.saveSettings(particleState,musicState,soundState);
      return true;
    }
  }
);
}","@Override protected void onCreate(Bundle _savedInstanceState){
  final XmlWriter writer=new XmlWriter();
  super.onCreate(_savedInstanceState);
  addPreferencesFromResource(R.layout.settings);
  final Preference particlesPref=(Preference)findPreference(""String_Node_Str"");
  final Preference musicPref=(Preference)findPreference(""String_Node_Str"");
  final Preference soundsPref=(Preference)findPreference(""String_Node_Str"");
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  particleState=prefs.getBoolean(""String_Node_Str"",false);
  musicState=prefs.getBoolean(""String_Node_Str"",true);
  soundState=prefs.getBoolean(""String_Node_Str"",true);
  writer.saveSettings(particleState,musicState,soundState);
  particlesPref.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      particleState=((CheckBoxPreference)particlesPref).isChecked();
      musicState=((CheckBoxPreference)musicPref).isChecked();
      soundState=((CheckBoxPreference)soundsPref).isChecked();
      Options.particles=((CheckBoxPreference)particlesPref).isChecked();
      writer.saveSettings(particleState,musicState,soundState);
      return true;
    }
  }
);
  musicPref.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      particleState=((CheckBoxPreference)particlesPref).isChecked();
      musicState=((CheckBoxPreference)musicPref).isChecked();
      soundState=((CheckBoxPreference)soundsPref).isChecked();
      Options.music=((CheckBoxPreference)soundsPref).isChecked();
      writer.saveSettings(particleState,musicState,soundState);
      return true;
    }
  }
);
  soundsPref.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      particleState=((CheckBoxPreference)particlesPref).isChecked();
      musicState=((CheckBoxPreference)musicPref).isChecked();
      soundState=((CheckBoxPreference)soundsPref).isChecked();
      Options.sounds=((CheckBoxPreference)soundsPref).isChecked();
      writer.saveSettings(particleState,musicState,soundState);
      return true;
    }
  }
);
}"
20015,"public boolean onPreferenceClick(Preference preference){
  particleState=((CheckBoxPreference)particlesPref).isChecked();
  musicState=((CheckBoxPreference)musicPref).isChecked();
  soundState=((CheckBoxPreference)soundsPref).isChecked();
  XmlWriter writer=new XmlWriter();
  writer.saveSettings(particleState,musicState,soundState);
  return true;
}","public boolean onPreferenceClick(Preference preference){
  particleState=((CheckBoxPreference)particlesPref).isChecked();
  musicState=((CheckBoxPreference)musicPref).isChecked();
  soundState=((CheckBoxPreference)soundsPref).isChecked();
  Options.sounds=((CheckBoxPreference)soundsPref).isChecked();
  writer.saveSettings(particleState,musicState,soundState);
  return true;
}"
20016,"public static final void initSounds(Context _context){
  context=_context;
  soundPool=new SoundPool(4,AudioManager.STREAM_MUSIC,0);
  soundPoolMap=new HashMap<Integer,Integer>();
  audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
}","public static final void initSounds(Context _context){
  context=_context;
  soundPool=new SoundPool(4,AudioManager.STREAM_MUSIC,0);
  soundPoolMap=new HashMap<Integer,Integer>();
  audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  loadSounds();
}"
20017,"public final boolean[] readSettings(){
  XmlResourceParser settings=null;
  boolean particles=false, music=false, sounds=false;
  settings=context.getResources().getXml(R.xml.settings);
  try {
    while (settings.getEventType() != XmlPullParser.END_DOCUMENT) {
      if (settings.getEventType() == XmlPullParser.START_TAG) {
        if (settings.getName().equals(""String_Node_Str"")) {
          if (settings.getAttributeValue(null,""String_Node_Str"") == ""String_Node_Str"") {
            particles=true;
          }
 else           particles=false;
        }
 else         if (settings.getName().equals(""String_Node_Str"")) {
          if (settings.getAttributeValue(null,""String_Node_Str"") == ""String_Node_Str"") {
            music=true;
          }
 else           music=false;
        }
 else         if (settings.getName().equals(""String_Node_Str"")) {
          if (settings.getAttributeValue(null,""String_Node_Str"") == ""String_Node_Str"") {
            sounds=true;
          }
 else           sounds=false;
        }
      }
 else       if (settings.getEventType() == XmlPullParser.END_TAG) {
      }
    }
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
  boolean settingValues[]={particles,music,sounds};
  return settingValues;
}","public final boolean[] readSettings(){
  XmlResourceParser settings=null;
  boolean particles=false, music=false, sounds=false;
  settings=context.getResources().getXml(R.xml.settings);
  try {
    while (settings.getEventType() != XmlPullParser.END_DOCUMENT) {
      if (settings.getEventType() == XmlPullParser.START_TAG) {
        if (settings.getName().equals(""String_Node_Str"")) {
          if (settings.getAttributeValue(null,""String_Node_Str"") == ""String_Node_Str"") {
            particles=true;
          }
 else           particles=false;
        }
 else         if (settings.getName().equals(""String_Node_Str"")) {
          if (settings.getAttributeValue(null,""String_Node_Str"") == ""String_Node_Str"") {
            music=true;
          }
 else           music=false;
        }
 else         if (settings.getName().equals(""String_Node_Str"")) {
          if (settings.getAttributeValue(null,""String_Node_Str"") == ""String_Node_Str"") {
            sounds=true;
          }
 else           sounds=false;
        }
      }
 else       if (settings.getEventType() == XmlPullParser.END_TAG) {
      }
      settings.next();
    }
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  boolean settingValues[]={particles,music,sounds};
  return settingValues;
}"
20018,"/** 
 * M��ritt�� asetukset ja luo tarvittavat oliot, kuten render�ij�n, HUDin, GameThreadin ja TouchManagerin.
 * @param Bundle Pelin aiempi tila
 */
@Override public void onCreate(Bundle _savedInstanceState){
  super.onCreate(_savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  surfaceView=new GLSurfaceView(this);
  renderer=new GLRenderer(this);
  surfaceView.setEGLConfigChooser(8,8,8,8,0,0);
  surfaceView.getHolder().setFormat(PixelFormat.TRANSLUCENT);
  surfaceView.setRenderer(renderer);
  dm=new DisplayMetrics();
  getWindowManager().getDefaultDisplay().getMetrics(dm);
  setContentView(surfaceView);
  gameThread=new GameThread(dm,getBaseContext());
  renderer.connectToGameThread(gameThread);
  touchManager=new TouchManager(surfaceView,getBaseContext());
  hud=new HUD(getBaseContext());
}","/** 
 * M��ritt�� asetukset ja luo tarvittavat oliot, kuten render�ij�n, HUDin, GameThreadin ja TouchManagerin.
 * @param Bundle Pelin aiempi tila
 */
@Override public void onCreate(Bundle _savedInstanceState){
  super.onCreate(_savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  surfaceView=new GLSurfaceView(this);
  renderer=new GLRenderer(this);
  surfaceView.setEGLConfigChooser(8,8,8,8,0,0);
  surfaceView.getHolder().setFormat(PixelFormat.TRANSLUCENT);
  surfaceView.setRenderer(renderer);
  dm=new DisplayMetrics();
  getWindowManager().getDefaultDisplay().getMetrics(dm);
  setContentView(surfaceView);
  gameThread=new GameThread(dm,getBaseContext());
  renderer.connectToGameThread(gameThread);
  hud=new HUD(getBaseContext());
  touchManager=new TouchManager(surfaceView,getBaseContext(),hud);
}"
20019,"/** 
 * Kutsutaan kun aktiviteetti luodaan. 
 */
@Override public void onCreate(Bundle _savedInstanceState){
  super.onCreate(_savedInstanceState);
  setContentView(R.layout.main);
  context=getApplicationContext();
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  View storyButton=findViewById(R.id.button_story);
  storyButton.setOnClickListener(this);
  View survivalButton=findViewById(R.id.button_survival);
  survivalButton.setOnClickListener(this);
  View helpButton=findViewById(R.id.button_help);
  helpButton.setOnClickListener(this);
  View highscoresButton=findViewById(R.id.button_highscores);
  highscoresButton.setOnClickListener(this);
  View optionsButton=findViewById(R.id.button_options);
  optionsButton.setOnClickListener(this);
  View quitButton=findViewById(R.id.button_quit);
  quitButton.setOnClickListener(this);
  SoundManager.getInstance();
  SoundManager.initSounds(this);
}","/** 
 * Kutsutaan kun aktiviteetti luodaan. 
 */
@Override public void onCreate(Bundle _savedInstanceState){
  super.onCreate(_savedInstanceState);
  setContentView(R.layout.main);
  context=getApplicationContext();
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  View storyButton=findViewById(R.id.button_story);
  storyButton.setOnClickListener(this);
  View survivalButton=findViewById(R.id.button_survival);
  survivalButton.setOnClickListener(this);
  View helpButton=findViewById(R.id.button_help);
  helpButton.setOnClickListener(this);
  View highscoresButton=findViewById(R.id.button_highscores);
  highscoresButton.setOnClickListener(this);
  View optionsButton=findViewById(R.id.button_options);
  optionsButton.setOnClickListener(this);
  View quitButton=findViewById(R.id.button_quit);
  quitButton.setOnClickListener(this);
  SoundManager.getInstance();
  SoundManager.initSounds(this);
  SoundManager.loadSounds();
}"
20020,"public static final void playSound(int _index,float _speed){
  float streamVolume=audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
  streamVolume=streamVolume / audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
  soundPool.play((Integer)soundPoolMap.get(_index),streamVolume,streamVolume,1,0,_speed);
}","public static final void playSound(int _index,float _speed){
  if (Options.sounds) {
    float streamVolume=audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
    streamVolume=streamVolume / audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
    soundPool.play((Integer)soundPoolMap.get(_index),streamVolume,streamVolume,1,0,_speed);
  }
}"
20021,"public static final void initSounds(Context _context){
  context=_context;
  soundPool=new SoundPool(4,AudioManager.STREAM_MUSIC,0);
  soundPoolMap=new HashMap<Integer,Integer>();
  audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  loadSounds();
}","public static final void initSounds(Context _context){
  context=_context;
  soundPool=new SoundPool(4,AudioManager.STREAM_MUSIC,0);
  soundPoolMap=new HashMap<Integer,Integer>();
  audioManager=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
}"
20022,"protected TouchManager(GLSurfaceView _glSurfaceView,Context _context){
  weaponManager=WeaponManager.getConnection();
  hud=HUD.getConnection();
  screenWidth=GameActivity.dm.widthPixels;
  screenHeight=GameActivity.dm.heightPixels;
  setSurfaceListeners(_glSurfaceView);
}","protected TouchManager(GLSurfaceView _glSurfaceView,Context _context,HUD _hud){
  weaponManager=WeaponManager.getConnection();
  hud=_hud;
  screenWidth=GameActivity.dm.widthPixels;
  screenHeight=GameActivity.dm.heightPixels;
  setSurfaceListeners(_glSurfaceView);
}"
20023,"public void readLevel(int _id){
  XmlResourceParser level;
  try {
    level=context.getResources().getXml(R.xml.class.getField(""String_Node_Str"" + _id).getInt(getClass()));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    while (level.getEventType() != XmlPullParser.END_DOCUMENT) {
      if (level.getEventType() == XmlPullParser.START_TAG) {
        if (level.getName().equals(""String_Node_Str"")) {
          renderer.players.add(new Player(gl,context,level.getAttributeResourceValue(null,""String_Node_Str"",0),level.getAttributeIntValue(null,""String_Node_Str"",10),level.getAttributeIntValue(null,""String_Node_Str"",0)));
        }
 else         if (level.getName().equals(""String_Node_Str"")) {
        }
      }
 else       if (level.getEventType() == XmlPullParser.END_TAG) {
      }
 else       if (level.getEventType() == XmlPullParser.TEXT) {
      }
      level.next();
    }
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public void readLevel(int _id){
  XmlResourceParser level=null;
  try {
    level=context.getResources().getXml(R.xml.class.getField(""String_Node_Str"" + _id).getInt(getClass()));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    while (level.getEventType() != XmlPullParser.END_DOCUMENT) {
      if (level.getEventType() == XmlPullParser.START_TAG) {
        if (level.getName().equals(""String_Node_Str"")) {
          renderer.players.add(new Player(gl,context,level.getAttributeResourceValue(null,""String_Node_Str"",0),level.getAttributeIntValue(null,""String_Node_Str"",10),level.getAttributeIntValue(null,""String_Node_Str"",0)));
        }
 else         if (level.getName().equals(""String_Node_Str"")) {
        }
      }
 else       if (level.getEventType() == XmlPullParser.END_TAG) {
      }
 else       if (level.getEventType() == XmlPullParser.TEXT) {
      }
      level.next();
    }
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}"
20024,"public BeanDefinition parse(Element element,ParserContext parserContext){
  BeanDefinitionBuilder beanBuilder=BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);
  String jdbcTemplate=element.getAttribute(""String_Node_Str"");
  beanBuilder.addConstructorArgReference(jdbcTemplate);
  String stringEncryptor=element.getAttribute(""String_Node_Str"");
  if (stringEncryptor != null && !stringEncryptor.isEmpty()) {
    beanBuilder.addConstructorArgReference(stringEncryptor);
  }
 else {
    beanBuilder.addConstructorArgValue(Encryptors.noOpText());
  }
  AbstractBeanDefinition beanDefinition=beanBuilder.getBeanDefinition();
  parserContext.getRegistry().registerBeanDefinition(""String_Node_Str"",beanDefinition);
  return beanDefinition;
}","public BeanDefinition parse(Element element,ParserContext parserContext){
  BeanDefinitionBuilder beanBuilder=BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);
  String dataSource=element.getAttribute(""String_Node_Str"");
  beanBuilder.addConstructorArgReference(dataSource);
  String stringEncryptor=element.getAttribute(""String_Node_Str"");
  if (stringEncryptor != null && !stringEncryptor.isEmpty()) {
    beanBuilder.addConstructorArgReference(stringEncryptor);
  }
 else {
    beanBuilder.addConstructorArgValue(Encryptors.noOpText());
  }
  AbstractBeanDefinition beanDefinition=beanBuilder.getBeanDefinition();
  parserContext.getRegistry().registerBeanDefinition(""String_Node_Str"",beanDefinition);
  return beanDefinition;
}"
20025,"public void retweet(long tweetId){
  @SuppressWarnings(""String_Node_Str"") ResponseEntity<Map> response=restOperations.postForEntity(RETWEET_URL,Collections.emptyMap(),Map.class,Collections.singletonMap(""String_Node_Str"",Long.toString(tweetId)));
  handleResponseErrors(response);
}","public void retweet(long tweetId){
  @SuppressWarnings(""String_Node_Str"") ResponseEntity<Map> response=restOperations.postForEntity(RETWEET_URL,""String_Node_Str"",Map.class,Collections.singletonMap(""String_Node_Str"",Long.toString(tweetId)));
  handleResponseErrors(response);
}"
20026,"/** 
 * Create a new instance of ScribeOAuth1RequestSigner.
 * @param accessToken the access token value
 * @param accessTokenSecret the access token secret
 * @param apiKey the API key assigned by the provider
 * @param apiSecret the API secret assigned by the provider
 */
public ScribeOAuth1RequestSigner(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  this.accessToken=accessToken;
  this.accessTokenSecret=accessTokenSecret;
  this.service=new ServiceBuilder().provider(TwitterApi.class).apiKey(apiKey).apiSecret(apiSecret).callback(""String_Node_Str"").build();
}","/** 
 * Create a new instance of ScribeOAuth1RequestSigner.
 * @param accessToken the access token value
 * @param accessTokenSecret the access token secret
 * @param apiKey the API key assigned by the provider
 * @param apiSecret the API secret assigned by the provider
 */
public ScribeOAuth1RequestSigner(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  this.accessToken=accessToken;
  this.accessTokenSecret=accessTokenSecret;
  this.service=new ServiceBuilder().provider(LinkedInApi.class).apiKey(apiKey).apiSecret(apiSecret).callback(""String_Node_Str"").build();
}"
20027,"/** 
 * Create a new instance of TwitterTemplate. This constructor creates a new TwitterTemplate given the minimal amount of information required to sign a request and builds up a  {@link RestOperations} internally using this information.
 * @param apiKey the application's API key.
 * @param apiSecret the application's API secret.
 * @param accessToken the user's access token, given after successful OAuth authentication.
 * @param accessTokenSecret the access token secret, given along with the access token after successful OAuth authentication.
 */
public TwitterTemplate(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  this.restOperations=new RestTemplate(new OAuthSigningClientHttpRequestFactory(new ScribeOAuth1RequestSigner(apiKey,apiSecret,accessToken,accessTokenSecret)));
}","/** 
 * Create a new instance of TwitterTemplate. This constructor creates a new TwitterTemplate given the minimal amount of information required to sign a request and builds up a  {@link RestOperations} internally using this information.
 * @param apiKey the application's API key.
 * @param apiSecret the application's API secret.
 * @param accessToken the user's access token, given after successful OAuth authentication.
 * @param accessTokenSecret the access token secret, given along with the access token after successful OAuth authentication.
 */
public TwitterTemplate(String apiKey,String apiSecret,String accessToken,String accessTokenSecret){
  RestTemplate restTemplate=new RestTemplate(new OAuthSigningClientHttpRequestFactory(new ScribeOAuth1RequestSigner(apiKey,apiSecret,accessToken,accessTokenSecret)));
  restTemplate.setErrorHandler(new TwitterErrorHandler());
  this.restOperations=restTemplate;
  this.statusCodeTranslator=new TwitterResponseStatusCodeTranslator();
}"
20028,"SearchResults buildSearchResults(Map<String,Object> response,List<Tweet> tweets){
  Long maxId=response.containsKey(""String_Node_Str"") ? NumberUtils.parseNumber((String)response.get(""String_Node_Str""),Long.class) : 0;
  Long sinceId=response.containsKey(""String_Node_Str"") ? NumberUtils.parseNumber((String)response.get(""String_Node_Str""),Long.class) : 0;
  return new SearchResults(tweets,maxId,sinceId,response.get(""String_Node_Str"") == null);
}","SearchResults buildSearchResults(Map<String,Object> response,List<Tweet> tweets){
  Number maxId=response.containsKey(""String_Node_Str"") ? (Number)response.get(""String_Node_Str"") : 0;
  Number sinceId=response.containsKey(""String_Node_Str"") ? (Number)response.get(""String_Node_Str"") : 0;
  return new SearchResults(tweets,maxId.longValue(),sinceId.longValue(),response.get(""String_Node_Str"") == null);
}"
20029,"@Test public void buildSearchResults(){
  TwitterTemplate twitter=new TwitterTemplate(null);
  Map<String,Object> response=new HashMap<String,Object>();
  response.put(""String_Node_Str"",""String_Node_Str"");
  response.put(""String_Node_Str"",""String_Node_Str"");
  response.put(""String_Node_Str"",""String_Node_Str"");
  SearchResults results=twitter.buildSearchResults(response,new ArrayList<Tweet>());
  assertEquals(42,results.getMaxId());
  assertEquals(24,results.getSinceId());
  assertEquals(false,results.isLastPage());
}","@Test public void buildSearchResults(){
  TwitterTemplate twitter=new TwitterTemplate(null);
  Map<String,Object> response=new HashMap<String,Object>();
  response.put(""String_Node_Str"",42);
  response.put(""String_Node_Str"",24);
  response.put(""String_Node_Str"",""String_Node_Str"");
  SearchResults results=twitter.buildSearchResults(response,new ArrayList<Tweet>());
  assertEquals(42,results.getMaxId());
  assertEquals(24,results.getSinceId());
  assertEquals(false,results.isLastPage());
}"
20030,"static String getRelativePath(final File fromFile,final File toFile){
  final String[] fromSegments=getReversePathSegments(fromFile);
  final String[] toSegments=getReversePathSegments(toFile);
  String relativePath=""String_Node_Str"";
  int i=fromSegments.length - 1;
  int j=toSegments.length - 1;
  while ((i >= 0) && (j >= 0) && (fromSegments[i].equals(toSegments[j]))) {
    i--;
    j--;
  }
  for (; i >= 0; i--) {
    relativePath+=""String_Node_Str"" + File.separator;
  }
  for (; j >= 1; j--) {
    relativePath+=toSegments[j] + File.separator;
  }
  relativePath+=toSegments[j];
  return relativePath;
}","static String getRelativePath(final File fromFile,final File toFile){
  final String[] fromSegments=getReversePathSegments(fromFile);
  final String[] toSegments=getReversePathSegments(toFile);
  String relativePath=""String_Node_Str"";
  int i=fromSegments.length - 1;
  int j=toSegments.length - 1;
  while ((i >= 0) && (j >= 0) && (fromSegments[i].equals(toSegments[j]))) {
    i--;
    j--;
  }
  for (; i >= 0; i--) {
    relativePath+=""String_Node_Str"" + File.separator;
  }
  for (; j >= 1; j--) {
    relativePath+=toSegments[j] + File.separator;
  }
  relativePath+=toSegments[j];
  return relativePath.replace(File.separator,""String_Node_Str"");
}"
20031,"@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  Player player=event.getPlayer();
  if (Material.LEATHER_BOOTS.equals(Util.getPlayerBoots(player)) && permissions.canUseLeatherBoots(player)) {
    Entity entity=event.getRightClicked();
    if (!(entity instanceof Player) || permissions.canLaunchPlayers(player)) {
      Vector entityVelocity=entity.getVelocity();
      entityVelocity.setY(2);
      entity.setVelocity(entityVelocity);
    }
  }
}","@Override public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  Player player=event.getPlayer();
  if (Material.LEATHER_BOOTS.equals(Util.getPlayerBoots(player)) && permissions.canUseLeatherBoots(player)) {
    Entity entity=event.getRightClicked();
    if (entity instanceof LivingEntity) {
      if (!(entity instanceof Player) || permissions.canLaunchPlayers(player)) {
        Vector entityVelocity=entity.getVelocity();
        entityVelocity.setY(2);
        entity.setVelocity(entityVelocity);
      }
    }
  }
}"
20032,"@Override public void onPlayerToggleSneak(PlayerToggleSneakEvent event){
  Player player=event.getPlayer();
  if (player.isSneaking()) {
    Material playerBoots=Util.getPlayerBoots(player);
    if (Material.DIAMOND_BOOTS.equals(playerBoots) && permissions.canUseDiamondBoots(player)) {
      Vector playerDirection=player.getLocation().getDirection();
      playerDirection.multiply(0.5);
      playerDirection.setY(0.6);
      player.setVelocity(playerDirection);
    }
 else     if (Material.IRON_BOOTS.equals(playerBoots) && permissions.canUseIronBoots(player)) {
      List<Entity> nearbyEntities=player.getNearbyEntities(12,5,12);
      Location playerLocation=player.getLocation();
      for (      Entity entity : nearbyEntities) {
        if (entity instanceof Player && !permissions.canLaunchPlayers(player))         continue;
        Location entityLocation=entity.getLocation();
        double dX=entityLocation.getX() - playerLocation.getX();
        double dZ=entityLocation.getZ() - playerLocation.getZ();
        double angle=Math.atan(dZ / dX);
        double angleDegrees=Math.toDegrees(angle);
        int speed=2;
        double speedX=speed * Math.cos(angleDegrees);
        double speedZ=speed * Math.sin(angleDegrees);
        if (dX < 0)         speedX*=-1.0;
        if (dZ < 0)         speedZ*=-1.0;
        Vector entityVelocity=entity.getVelocity();
        entityVelocity.setX(speedX);
        entityVelocity.setZ(speedZ);
        entityVelocity.setY(0.7);
        entity.setVelocity(entityVelocity);
      }
    }
  }
}","@Override public void onPlayerToggleSneak(PlayerToggleSneakEvent event){
  Player player=event.getPlayer();
  if (player.isSneaking()) {
    Material playerBoots=Util.getPlayerBoots(player);
    if (Material.DIAMOND_BOOTS.equals(playerBoots) && permissions.canUseDiamondBoots(player)) {
      Vector playerDirection=player.getLocation().getDirection();
      playerDirection.multiply(0.5);
      playerDirection.setY(0.6);
      player.setVelocity(playerDirection);
    }
 else     if (Material.IRON_BOOTS.equals(playerBoots) && permissions.canUseIronBoots(player)) {
      List<Entity> nearbyEntities=player.getNearbyEntities(12,5,12);
      Location playerLocation=player.getLocation();
      for (      Entity entity : nearbyEntities) {
        if (entity instanceof Player && !permissions.canLaunchPlayers(player))         continue;
 else         if (!(entity instanceof LivingEntity))         continue;
        Location entityLocation=entity.getLocation();
        double dX=entityLocation.getX() - playerLocation.getX();
        double dZ=entityLocation.getZ() - playerLocation.getZ();
        double angle=Math.atan(dZ / dX);
        double angleDegrees=Math.toDegrees(angle);
        int speed=2;
        double speedX=speed * Math.cos(angleDegrees);
        double speedZ=speed * Math.sin(angleDegrees);
        if (dX < 0)         speedX*=-1.0;
        if (dZ < 0)         speedZ*=-1.0;
        Vector entityVelocity=entity.getVelocity();
        entityVelocity.setX(speedX);
        entityVelocity.setZ(speedZ);
        entityVelocity.setY(0.7);
        entity.setVelocity(entityVelocity);
      }
    }
  }
}"
20033,"public IOException wrap() throws IOException {
  IOException ex=new IOException(getMessage());
  if (getCause() != null) {
    ex.setStackTrace(ex.getStackTrace());
  }
  throw ex;
}","public IOException wrap() throws IOException {
  IOException ex=new IOException(getMessage());
  ex.setStackTrace(getStackTrace());
  if (getCause() != null) {
    ex.initCause(getCause());
  }
  throw ex;
}"
20034,"public CouchDBResponse(HttpMethod request,int result,IOException exception) throws IOException {
  this.request=request;
  this.result=result;
  this.exception=exception;
  boolean err=!isHttpOK();
  json=JSONValue.parse(new InputStreamReader(request.getResponseBodyAsStream()));
  if (err) {
    isArray=false;
  }
 else {
    isArray=json instanceof JSONArray;
  }
}","public CouchDBResponse(HttpMethod request,int result,IOException exception) throws IOException {
  this.request=request;
  this.result=result;
  this.exception=exception;
  boolean err=!isHttpOK();
  InputStream response=request.getResponseBodyAsStream();
  if (err) {
    if (exception != null) {
      throw new IOException(""String_Node_Str"",exception);
    }
    if (response == null) {
      throw new IOException(""String_Node_Str"" + result);
    }
  }
  json=JSONValue.parse(new InputStreamReader(request.getResponseBodyAsStream()));
  if (err) {
    isArray=false;
  }
 else {
    isArray=json instanceof JSONArray;
  }
}"
20035,"@Test public void testFeatureWriterAdd() throws Exception {
  db.postBulk(loadJSON(""String_Node_Str"",""String_Node_Str""));
  JSONArray data=loadJSON(""String_Node_Str"",""String_Node_Str"");
  JSONObject italy=(JSONObject)data.get(0);
  FeatureJSON json=new FeatureJSON();
  json.setFeatureType(CouchDBUtils.createFeatureType(italy,""String_Node_Str""));
  Feature feature=json.readFeature(italy.toString());
  ContentFeatureStore featureStore=(ContentFeatureStore)store.getFeatureSource(""String_Node_Str"");
  featureStore.addFeatures(Collections.singleton(feature));
  ContentFeatureCollection features=featureStore.getFeatures();
  assertEquals(2,features.size());
}","@Test public void testFeatureWriterAdd() throws Exception {
  db.postBulk(loadJSON(""String_Node_Str"",""String_Node_Str""));
  JSONArray data=loadJSON(""String_Node_Str"",""String_Node_Str"");
  JSONObject italy=(JSONObject)data.get(0);
  FeatureJSON json=new FeatureJSON();
  json.setFeatureType(CouchDBUtils.createFeatureType(italy,""String_Node_Str""));
  Feature feature=json.readFeature(italy.toString());
  ContentFeatureStore featureStore=(ContentFeatureStore)store.getFeatureSource(""String_Node_Str"");
  featureStore.addFeatures(Collections.singleton(feature));
  ContentFeatureCollection features=featureStore.getFeatures();
  assertEquals(2,features.size());
  featureStore.addFeatures(Arrays.asList(feature,feature));
  assertEquals(4,features.size());
}"
20036,"public static byte[][] getByteMap(File f) throws Exception {
  byte[] contents=new byte[(int)f.length()];
  FileInputStream in=new FileInputStream(f);
  in.read(contents);
  in.close();
  int width=getIntVal(0x12,contents);
  int pad=(width + 3 & -4) - width;
  int length=getIntVal(0x16,contents);
  byte[][] mapBytes=new byte[length][width];
  int pos=1078;
  for (int i=length - 1; i >= 0; i--) {
    for (int i2=0; i2 < mapBytes[i].length; i2++)     mapBytes[i][i2]=contents[pos++];
    pos+=pad;
  }
  return mapBytes;
}","public static byte[][] getByteMap(File f){
  byte[] contents=new byte[(int)f.length()];
  FileInputStream in=null;
  try {
    in=new FileInputStream(f);
    in.read(contents);
    in.close();
  }
 catch (  Exception e) {
  }
  int width=getIntVal(0x12,contents);
  int pad=(width + 3 & -4) - width;
  int length=getIntVal(0x16,contents);
  byte[][] mapBytes=new byte[length][width];
  int pos=1078;
  for (int i=length - 1; i >= 0; i--) {
    for (int i2=0; i2 < mapBytes[i].length; i2++)     mapBytes[i][i2]=contents[pos++];
    pos+=pad;
  }
  return mapBytes;
}"
20037,"public static byte[][] getByteMap(File f) throws Exception {
  byte[] contents=new byte[(int)f.length()];
  FileInputStream in=new FileInputStream(f);
  in.read(contents);
  in.close();
  int width=getIntVal(0x12,contents);
  int pad=(width + 3 & -4) - width;
  int length=getIntVal(0x16,contents);
  byte[][] mapBytes=new byte[length][width];
  int pos=1078;
  for (int i=length - 1; i >= 0; i--) {
    for (int i2=0; i2 < mapBytes[i].length; i2++)     mapBytes[i][i2]=contents[pos++];
    pos+=pad;
  }
  return mapBytes;
}","public static byte[][] getByteMap(File f){
  byte[] contents=new byte[(int)f.length()];
  FileInputStream in=null;
  try {
    in=new FileInputStream(f);
    in.read(contents);
    in.close();
  }
 catch (  Exception e) {
  }
  int width=getIntVal(0x12,contents);
  int pad=(width + 3 & -4) - width;
  int length=getIntVal(0x16,contents);
  byte[][] mapBytes=new byte[length][width];
  int pos=1078;
  for (int i=length - 1; i >= 0; i--) {
    for (int i2=0; i2 < mapBytes[i].length; i2++)     mapBytes[i][i2]=contents[pos++];
    pos+=pad;
  }
  return mapBytes;
}"
20038,"public Map(String url){
  File map_file=new File(url);
  map_name=map_file.getName();
  byte[][] map_raw=FileParser.getByteMap(map_file);
  height=map_raw.length;
  width=map_raw[0].length;
  map=new Square[y][x];
  obstacles=new ArrayList<Obstacle>();
  for (int y=0; y < height; y++)   for (int x=0; x < width; x++)   map[y][x]=new Square(map_raw[y][x]);
  for (int y=0; y < height; y++)   for (int x=0; x < width; x++)   if (map_raw[y][x] == OBSTACLE && map[y][x].obstacle == NULL)   map[y][x].obstacle=new Obstacle(map_raw,map,x,y);
  obstacles.add(map[y][x].obstacle);
}","public Map(String url){
  File map_file=new File(url);
  map_name=map_file.getName();
  byte[][] map_raw=FileParser.getByteMap(map_file);
  height=map_raw.length;
  width=map_raw[0].length;
  map=new Square[height][width];
  obstacles=new ArrayList<Obstacle>();
  for (int y=0; y < height; y++)   for (int x=0; x < width; x++)   map[y][x]=new Square(map_raw[y][x],x,y);
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      if (map_raw[y][x] == OBSTACLE && map[y][x].nullObstacle()) {
        map[y][x].setObstacle(new Obstacle(map_raw,map,x,y));
        obstacles.add(map[y][x].getObstacle());
      }
    }
  }
}"
20039,"public Map(String url){
  File map_file=new File(url);
  map_name=map_file.getName();
  byte[][] map_raw=FileParser.getByteMap(map_file);
  height=map_raw.length;
  width=map_raw[0].length;
  map=new Square[y][x];
  obstacles=new ArrayList<Obstacle>();
  for (int y=0; y < height; y++)   for (int x=0; x < width; x++)   map[y][x]=new Square(map_raw[y][x]);
  for (int y=0; y < height; y++)   for (int x=0; x < width; x++)   if (map_raw[y][x] == OBSTACLE && map[y][x].obstacle == NULL)   map[y][x].obstacle=new Obstacle(map_raw,map,x,y);
  obstacles.add(map[y][x].obstacle);
}","public Map(String url){
  File map_file=new File(url);
  map_name=map_file.getName();
  byte[][] map_raw=FileParser.getByteMap(map_file);
  height=map_raw.length;
  width=map_raw[0].length;
  map=new Square[height][width];
  obstacles=new ArrayList<Obstacle>();
  for (int y=0; y < height; y++)   for (int x=0; x < width; x++)   map[y][x]=new Square(map_raw[y][x],x,y);
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      if (map_raw[y][x] == OBSTACLE && map[y][x].nullObstacle()) {
        map[y][x].setObstacle(new Obstacle(map_raw,map,x,y));
        obstacles.add(map[y][x].getObstacle());
      }
    }
  }
}"
20040,"public Obstacle(byte[][] map_raw,Square[][] map,int x,int y){
  squares=new ArrayList<Square>();
  corners=new ArrayList<Points>();
  grow(map_raw,map,x,y);
}","public Obstacle(byte[][] map_raw,Square[][] map,int x,int y){
  squares=new ArrayList<Square>();
  corners=new ArrayList<Point>();
  grow(map_raw,map,x,y);
}"
20041,"public void grow(byte[][] map_raw,Square[][] map,int x,int y){
  squares.add(map[y][x]);
  map[y][x].addObstacle(this);
  int w=map[0].length;
  int h=map.length;
  int nw, wn, ne, en, se, es, sw, ws;
  if (isEmpty(x - 1,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
  }
  if (isEmpty(x,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y - 1,w,h,map_raw,map)) {
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y,w,h,map_raw,map)) {
    sw++;
    ws++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y,w,h,map_raw,map)) {
    se++;
    es++;
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y + 1,w,h,map_raw,map)) {
    sw++;
    ws++;
  }
  if (isEmpty(x,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
    sw++;
    ws++;
  }
  if (isEmpty(x + 1,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
  }
  if (nw == 4 || wn == 4)   corners.add(new Point(x - 0.5,y - 0.5));
  if (ne == 4 || en == 4)   corners.add(new Point(x + 0.5,y - 0.5));
  if (sw == 4 || ws == 4)   corners.add(new Point(x - 0.5,y + 0.5));
  if (se == 4 || es == 4)   corners.add(new Point(x + 0.5,y + 0.5));
}","public void grow(byte[][] map_raw,Square[][] map,int x,int y){
  squares.add(map[y][x]);
  map[y][x].setObstacle(this);
  int w=map[0].length;
  int h=map.length;
  int nw=0, wn=0, ne=0, en=0, se=0, es=0, sw=0, ws=0;
  if (isEmpty(x - 1,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
  }
  if (isEmpty(x,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y - 1,w,h,map_raw,map)) {
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y,w,h,map_raw,map)) {
    sw++;
    ws++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y,w,h,map_raw,map)) {
    se++;
    es++;
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y + 1,w,h,map_raw,map)) {
    sw++;
    ws++;
  }
  if (isEmpty(x,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
    sw++;
    ws++;
  }
  if (isEmpty(x + 1,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
  }
  if (nw == 4 || wn == 4)   corners.add(new Point(x - 0.5,y - 0.5));
  if (ne == 4 || en == 4)   corners.add(new Point(x + 1.5,y - 0.5));
  if (sw == 4 || ws == 4)   corners.add(new Point(x - 0.5,y + 1.5));
  if (se == 4 || es == 4)   corners.add(new Point(x + 1.5,y + 1.5));
}"
20042,"private boolean isEmpty(int x,int y,int w,int h,byte[][] m,Square[][] m2){
}","private boolean isEmpty(int x,int y,int w,int h,byte[][] m,Square[][] m2){
  if (x < 0 || y < 0 || x >= w || y >= h)   return false;
  if (m[y][x] == OBSTACLE && m2[y][x].nullObstacle()) {
    grow(m,m2,x,y);
    return false;
  }
  return true;
}"
20043,"public Obstacle(byte[][] map_raw,Square[][] map,int x,int y){
  squares=new ArrayList<Square>();
  corners=new ArrayList<Points>();
  grow(map_raw,map,x,y);
}","public Obstacle(byte[][] map_raw,Square[][] map,int x,int y){
  squares=new ArrayList<Square>();
  corners=new ArrayList<Point>();
  grow(map_raw,map,x,y);
}"
20044,"public void grow(byte[][] map_raw,Square[][] map,int x,int y){
  squares.add(map[y][x]);
  map[y][x].addObstacle(this);
  int w=map[0].length;
  int h=map.length;
  int nw, wn, ne, en, se, es, sw, ws;
  if (isEmpty(x - 1,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
  }
  if (isEmpty(x,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y - 1,w,h,map_raw,map)) {
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y,w,h,map_raw,map)) {
    sw++;
    ws++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y,w,h,map_raw,map)) {
    se++;
    es++;
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y + 1,w,h,map_raw,map)) {
    sw++;
    ws++;
  }
  if (isEmpty(x,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
    sw++;
    ws++;
  }
  if (isEmpty(x + 1,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
  }
  if (nw == 4 || wn == 4)   corners.add(new Point(x - 0.5,y - 0.5));
  if (ne == 4 || en == 4)   corners.add(new Point(x + 0.5,y - 0.5));
  if (sw == 4 || ws == 4)   corners.add(new Point(x - 0.5,y + 0.5));
  if (se == 4 || es == 4)   corners.add(new Point(x + 0.5,y + 0.5));
}","public void grow(byte[][] map_raw,Square[][] map,int x,int y){
  squares.add(map[y][x]);
  map[y][x].setObstacle(this);
  int w=map[0].length;
  int h=map.length;
  int nw=0, wn=0, ne=0, en=0, se=0, es=0, sw=0, ws=0;
  if (isEmpty(x - 1,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
  }
  if (isEmpty(x,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y - 1,w,h,map_raw,map)) {
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y,w,h,map_raw,map)) {
    sw++;
    ws++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y,w,h,map_raw,map)) {
    se++;
    es++;
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y + 1,w,h,map_raw,map)) {
    sw++;
    ws++;
  }
  if (isEmpty(x,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
    sw++;
    ws++;
  }
  if (isEmpty(x + 1,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
  }
  if (nw == 4 || wn == 4)   corners.add(new Point(x - 0.5,y - 0.5));
  if (ne == 4 || en == 4)   corners.add(new Point(x + 1.5,y - 0.5));
  if (sw == 4 || ws == 4)   corners.add(new Point(x - 0.5,y + 1.5));
  if (se == 4 || es == 4)   corners.add(new Point(x + 1.5,y + 1.5));
}"
20045,"private boolean isEmpty(int x,int y,int w,int h,byte[][] m,Square[][] m2){
}","private boolean isEmpty(int x,int y,int w,int h,byte[][] m,Square[][] m2){
  if (x < 0 || y < 0 || x >= w || y >= h)   return false;
  if (m[y][x] == OBSTACLE && m2[y][x].nullObstacle()) {
    grow(m,m2,x,y);
    return false;
  }
  return true;
}"
20046,"public Point(float x,float y){
  this.x=x;
  this.y=y;
}","public Point(double x,double y){
  this.x=x;
  this.y=y;
}"
20047,"public void grow(byte[][] map_raw,Square[][] map,int x,int y){
  squares.add(map[y][x]);
  map[y][x].setObstacle(this);
  int w=map[0].length;
  int h=map.length;
  int nw=0, wn=0, ne=0, en=0, se=0, es=0, sw=0, ws=0;
  if (isEmpty(x - 1,y - 1,w,h,map_raw,map)) {
    nw++;
    ne++;
    wn++;
    ws++;
  }
  if (isEmpty(x,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y - 1,w,h,map_raw,map)) {
    ne++;
    nw++;
    en++;
    es++;
  }
  if (isEmpty(x - 1,y,w,h,map_raw,map)) {
    sw++;
    ws++;
    nw++;
    wn++;
  }
  if (isEmpty(x + 1,y,w,h,map_raw,map)) {
    se++;
    es++;
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y + 1,w,h,map_raw,map)) {
    sw++;
    se++;
    ws++;
    wn++;
  }
  if (isEmpty(x,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
    sw++;
    ws++;
  }
  if (isEmpty(x + 1,y + 1,w,h,map_raw,map)) {
    se++;
    sw++;
    es++;
    en++;
  }
  if ((nw == 4 || wn == 4) && notHasCorner(x - 0.5,y - 0.5))   corners.add(new Point(x - 0.5,y - 0.5));
  if ((ne == 4 || en == 4) && notHasCorner(x - 0.5,y - 0.5))   corners.add(new Point(x + 1.5,y - 0.5));
  if ((sw == 4 || ws == 4) && notHasCorner(x - 0.5,y - 0.5))   corners.add(new Point(x - 0.5,y + 1.5));
  if ((se == 4 || es == 4) && notHasCorner(x - 0.5,y - 0.5))   corners.add(new Point(x + 1.5,y + 1.5));
}","public void grow(byte[][] map_raw,Square[][] map,int x,int y){
  squares.add(map[y][x]);
  map[y][x].setObstacle(this);
  int w=map[0].length;
  int h=map.length;
  int nw=0, wn=0, ne=0, en=0, se=0, es=0, sw=0, ws=0;
  if (isEmpty(x - 1,y - 1,w,h,map_raw,map)) {
    nw++;
    ne++;
    wn++;
    ws++;
  }
  if (isEmpty(x,y - 1,w,h,map_raw,map)) {
    nw++;
    wn++;
    ne++;
    en++;
  }
  if (isEmpty(x + 1,y - 1,w,h,map_raw,map)) {
    ne++;
    nw++;
    en++;
    es++;
  }
  if (isEmpty(x - 1,y,w,h,map_raw,map)) {
    sw++;
    ws++;
    nw++;
    wn++;
  }
  if (isEmpty(x + 1,y,w,h,map_raw,map)) {
    se++;
    es++;
    ne++;
    en++;
  }
  if (isEmpty(x - 1,y + 1,w,h,map_raw,map)) {
    sw++;
    se++;
    ws++;
    wn++;
  }
  if (isEmpty(x,y + 1,w,h,map_raw,map)) {
    se++;
    es++;
    sw++;
    ws++;
  }
  if (isEmpty(x + 1,y + 1,w,h,map_raw,map)) {
    se++;
    sw++;
    es++;
    en++;
  }
  if ((nw == 4 || wn == 4) && notHasCorner((int)(x - 0.5),(int)(y - 0.5)))   corners.add(new Point(x - 0.5,y - 0.5));
  if ((ne == 4 || en == 4) && notHasCorner((int)(x + 1.5),(int)(y - 0.5)))   corners.add(new Point(x + 1.5,y - 0.5));
  if ((sw == 4 || ws == 4) && notHasCorner((int)(x - 0.5),(int)(y + 1.5)))   corners.add(new Point(x - 0.5,y + 1.5));
  if ((se == 4 || es == 4) && notHasCorner((int)(x + 1.5),(int)(y + 1.5)))   corners.add(new Point(x + 1.5,y + 1.5));
}"
20048,"public boolean notHasCorner(int x,int y){
  for (  Point p : points)   if ((int)p.x == x && (int)p.y == y)   return false;
  return true;
}","public boolean notHasCorner(int x,int y){
  for (  Point p : corners)   if ((int)p.x == x && (int)p.y == y)   return false;
  return true;
}"
20049,"Element matrixToMathml(TokenInput slf,String openDelim,String closeDelim,boolean stretchy,String align){
  skipOuOptional(slf);
  Element mtable=matrixToMtable(slf,resultElement(""String_Node_Str"",0),align);
  if (openDelim != null || closeDelim != null) {
    Element mrow=resultElement(""String_Node_Str"",0);
    if (openDelim != null) {
      if (stretchy) {
        resultElementAppend(mrow,resultElement(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",openDelim));
      }
 else {
        resultElementAppend(mrow,resultElement(""String_Node_Str"",0,openDelim));
      }
    }
    resultElementAppend(mrow,mtable);
    if (closeDelim != null) {
      if (stretchy) {
        resultElementAppend(mrow,resultElement(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",closeDelim));
      }
 else {
        resultElementAppend(mrow,resultElement(""String_Node_Str"",0,closeDelim));
      }
    }
    return mrow;
  }
 else {
    return mtable;
  }
}","Element matrixToMathml(TokenInput slf,String openDelim,String closeDelim,boolean stretchy,String align){
  Element mtable=matrixToMtable(slf,resultElement(""String_Node_Str"",0),align);
  if (openDelim != null || closeDelim != null) {
    Element mrow=resultElement(""String_Node_Str"",0);
    if (openDelim != null) {
      if (stretchy) {
        resultElementAppend(mrow,resultElement(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",openDelim));
      }
 else {
        resultElementAppend(mrow,resultElement(""String_Node_Str"",0,openDelim));
      }
    }
    resultElementAppend(mrow,mtable);
    if (closeDelim != null) {
      if (stretchy) {
        resultElementAppend(mrow,resultElement(""String_Node_Str"",1,""String_Node_Str"",""String_Node_Str"",closeDelim));
      }
 else {
        resultElementAppend(mrow,resultElement(""String_Node_Str"",0,closeDelim));
      }
    }
    return mrow;
  }
 else {
    return mtable;
  }
}"
20050,"Element underToMathml(TokenInput slf,String chr){
  return resultElement(""String_Node_Str"",0,pieceToMathml(slf),resultElement(""String_Node_Str"",0,chr));
}","Element underToMathml(TokenInput slf,String chr,boolean resetSize){
  Element content=pieceToMathml(slf);
  if (resetSize) {
    content=resultElement(""String_Node_Str"",2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",content);
  }
  return resultElement(""String_Node_Str"",0,content,resultElement(""String_Node_Str"",0,chr));
}"
20051,"Element overToMathml(TokenInput slf,String chr){
  return resultElement(""String_Node_Str"",0,pieceToMathml(slf),resultElement(""String_Node_Str"",0,chr));
}","Element overToMathml(TokenInput slf,String chr,boolean resetSize){
  Element content=pieceToMathml(slf);
  if (resetSize) {
    content=resultElement(""String_Node_Str"",2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",content);
  }
  return resultElement(""String_Node_Str"",0,content,resultElement(""String_Node_Str"",0,chr));
}"
20052,"private void display(Node node) throws Exception {
  DOMSource in=new DOMSource(node);
  System.out.println();
  TransformerFactory.newInstance().newTransformer().transform(in,new StreamResult(System.out));
  System.out.println();
}","@SuppressWarnings(value=""String_Node_Str"") private void display(Node node) throws Exception {
  DOMSource in=new DOMSource(node);
  System.out.println();
  TransformerFactory.newInstance().newTransformer().transform(in,new StreamResult(System.out));
  System.out.println();
}"
20053,"private Element charEscapeToMathml(TokenInput slf){
  String token=slf.nextToken();
  if (CHAR_ESCAPE_CODES.containsKey(token)) {
    return resultElement(""String_Node_Str"",0,CHAR_ESCAPE_CODES.get(token));
  }
 else {
    return resultElement(""String_Node_Str"",0,""String_Node_Str"",token);
  }
}","private Element charEscapeToMathml(TokenInput slf){
  StringBuilder digits=new StringBuilder();
  int count;
  for (count=0; true; count++) {
    String digit=slf.peekToken(count);
    if (digit == null || !digit.matches(""String_Node_Str"")) {
      break;
    }
    digits.append(digit);
  }
  for (int i=0; i < count; i++) {
    slf.nextToken();
  }
  String digitString=digits.toString();
  if (CHAR_ESCAPE_CODES.containsKey(digitString)) {
    return resultElement(""String_Node_Str"",0,CHAR_ESCAPE_CODES.get(digitString));
  }
 else {
    return resultElement(""String_Node_Str"",0,""String_Node_Str"",digitString);
  }
}"
20054,"/** 
 * Loads all the sample equations and tests them. This test is basically a 'does it crash' kind of test - we don't examine the results.
 */
@Test public void testSampleLibrary() throws Exception {
  BufferedReader reader=new BufferedReader(new InputStreamReader(TestLatexToMathml.class.getResourceAsStream(""String_Node_Str""),""String_Node_Str""));
  int errors=0;
  while (true) {
    String line=reader.readLine();
    if (line == null) {
      break;
    }
    Matcher m=SAMPLES_REGEX.matcher(line);
    if (!m.matches()) {
      throw new IOException(""String_Node_Str"" + line);
    }
    String tex=m.group(2);
    String result=new TokenInput(tex).toMathml();
    if (result.contains(""String_Node_Str"")) {
      System.err.println(tex);
      errors++;
    }
  }
  assertEquals(0,errors);
}","/** 
 * Loads all the sample equations and tests them. This test is basically a 'does it crash' kind of test - we don't examine the results.
 */
@Test public void testSampleLibrary() throws Exception {
  BufferedReader reader=new BufferedReader(new InputStreamReader(TestLatexToMathml.class.getResourceAsStream(""String_Node_Str""),""String_Node_Str""));
  int errors=0;
  while (true) {
    String line=reader.readLine();
    if (line == null) {
      break;
    }
    if (line.equals(""String_Node_Str"") || line.startsWith(""String_Node_Str"")) {
      continue;
    }
    Matcher m=SAMPLES_REGEX.matcher(line);
    if (!m.matches()) {
      throw new IOException(""String_Node_Str"" + line);
    }
    String tex=m.group(2);
    String result=new TokenInput(tex).toMathml();
    if (result.contains(""String_Node_Str"")) {
      System.err.println(tex);
      errors++;
    }
  }
  assertEquals(0,errors);
}"
20055,"public void suck(){
  HashSet<UUID> sucked=new HashSet<UUID>();
  for (  SCLItem item : list.values()) {
    if (!item.isLocationDeferred()) {
      Block block=item.getLocation().getBlock();
      Chunk chunk=block.getChunk();
      if (chunk.isLoaded() && plugin.canSuck.contains(block.getType())) {
        if (block.getState() instanceof InventoryHolder) {
          InventoryHolder container=(InventoryHolder)block.getState();
          Inventory inventory=container.getInventory();
          if (inventory.firstEmpty() != -1) {
            ArrayList<Entity> entityList=new ArrayList<Entity>();
            for (            Chunk inChunk : getNearbyChunks(block,plugin.cfg.suckRange())) {
              for (              Entity entity : inChunk.getEntities()) {
                if (entity instanceof Item && entity.getLocation().distance(block.getLocation()) <= plugin.cfg.suckRange()) {
                  entityList.add(entity);
                }
              }
            }
            for (            Entity entity : entityList) {
              ItemStack original=((Item)entity).getItemStack();
              ItemStack itemFound=original.clone();
              if (inventory.firstEmpty() != -1 && !sucked.contains(entity.getUniqueId())) {
                if (entity.getTicksLived() >= plugin.cfg.suckInterval()) {
                  inventory.addItem(itemFound);
                  entity.remove();
                  if (plugin.cfg.suckEffect()) {
                    item.getLocation().getWorld().playEffect(item.getLocation(),Effect.CLICK2,0);
                  }
                }
                sucked.add(entity.getUniqueId());
              }
 else {
                break;
              }
            }
          }
        }
      }
    }
  }
}","public void suck(){
  HashSet<UUID> sucked=new HashSet<UUID>();
  for (  SCLItem item : list.values()) {
    if (!item.isLocationDeferred()) {
      Block block=item.getLocation().getBlock();
      Chunk chunk=block.getChunk();
      if (chunk.isLoaded() && plugin.canSuck.contains(block.getType())) {
        if (block.getState() instanceof InventoryHolder) {
          InventoryHolder container=(InventoryHolder)block.getState();
          Inventory inventory=container.getInventory();
          if (inventory.firstEmpty() != -1) {
            ArrayList<Entity> entityList=new ArrayList<Entity>();
            for (            Chunk inChunk : getNearbyChunks(block,plugin.cfg.suckRange())) {
              for (              Entity entity : inChunk.getEntities()) {
                if (entity instanceof Item && entity.getLocation().distance(block.getLocation()) <= plugin.cfg.suckRange()) {
                  entityList.add(entity);
                }
              }
            }
            for (            Entity entity : entityList) {
              if (entity instanceof Item) {
                Item pickup=(Item)entity;
                pickup.setPickupDelay(plugin.cfg.suckInterval());
                ItemStack original=pickup.getItemStack();
                ItemStack itemFound=original.clone();
                if (inventory.firstEmpty() != -1 && !sucked.contains(entity.getUniqueId())) {
                  if (entity.getTicksLived() >= plugin.cfg.suckInterval()) {
                    inventory.addItem(itemFound);
                    entity.remove();
                    if (plugin.cfg.suckEffect()) {
                      item.getLocation().getWorld().playEffect(item.getLocation(),Effect.CLICK2,0);
                    }
                  }
                  sucked.add(entity.getUniqueId());
                }
 else {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
}"
20056,"private void setupLockables(){
  lockable.clear();
  leftLocked.clear();
  canSuck.clear();
  reloadConfig();
  List<String> lockables=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String lockableBlockName : lockables) {
    Material mat=Material.valueOf(lockableBlockName);
    if (mat != null) {
      lockable.add(mat);
      verbose(""String_Node_Str"" + lockableBlockName);
    }
 else {
      SCL.crap(""String_Node_Str"" + lockableBlockName + ""String_Node_Str"");
    }
  }
  List<String> doubles=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String lockableBlockName : doubles) {
    Material mat=Material.valueOf(lockableBlockName);
    if (mat != null && lockable.contains(mat)) {
      doubleLock.add(mat);
      verbose(""String_Node_Str"" + lockableBlockName);
    }
 else {
      SCL.crap(""String_Node_Str"" + lockableBlockName + ""String_Node_Str"");
    }
  }
  List<String> leftLockable=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String blockName : leftLockable) {
    Material mat=Material.valueOf(blockName);
    if (mat != null && lockable.contains(mat)) {
      leftLocked.add(mat);
      verbose(""String_Node_Str"" + blockName);
    }
 else {
      SCL.crap(""String_Node_Str"" + blockName + ""String_Node_Str"");
    }
  }
  List<String> verticalLockable=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String blockName : verticalLockable) {
    Material mat=Material.valueOf(blockName);
    if (mat != null && lockable.contains(mat)) {
      lockIncludeVertical.add(mat);
      verbose(""String_Node_Str"" + blockName);
    }
 else {
      crap(""String_Node_Str"" + blockName + ""String_Node_Str"");
    }
  }
  List<String> omgThisSucks=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String sucks : omgThisSucks) {
    Material mat=Material.valueOf(sucks);
    if (mat != null && lockable.contains(mat)) {
      canSuck.add(mat);
      verbose(""String_Node_Str"" + sucks);
    }
 else {
      crap(""String_Node_Str"" + sucks + ""String_Node_Str"");
    }
  }
  verbose(""String_Node_Str"");
  Permission allBlocksPermission=new Permission(""String_Node_Str"");
  for (  Material mat : lockable) {
    if (mat.isBlock()) {
      String permissionName=""String_Node_Str"" + mat.toString().toLowerCase();
      verbose(""String_Node_Str"" + permissionName);
      Permission thisBlockPermission=new Permission(permissionName,PermissionDefault.OP);
      thisBlockPermission.addParent(allBlocksPermission,true);
    }
  }
  getServer().getPluginManager().addPermission(allBlocksPermission);
}","private void setupLockables(){
  lockable.clear();
  leftLocked.clear();
  canSuck.clear();
  reloadConfig();
  List<String> lockables=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String lockableBlockName : lockables) {
    Material mat=null;
    try {
      mat=Material.valueOf(lockableBlockName);
    }
 catch (    IllegalArgumentException e) {
      try {
        int i=Integer.parseInt(lockableBlockName.trim());
        mat=Material.getMaterial(i);
      }
 catch (      NumberFormatException nfe) {
      }
    }
    if (mat != null) {
      lockable.add(mat);
      verbose(""String_Node_Str"" + lockableBlockName);
    }
 else {
      SCL.crap(""String_Node_Str"" + lockableBlockName + ""String_Node_Str"");
    }
  }
  List<String> doubles=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String lockableBlockName : doubles) {
    Material mat=Material.valueOf(lockableBlockName);
    if (mat != null && lockable.contains(mat)) {
      doubleLock.add(mat);
      verbose(""String_Node_Str"" + lockableBlockName);
    }
 else {
      SCL.crap(""String_Node_Str"" + lockableBlockName + ""String_Node_Str"");
    }
  }
  List<String> leftLockable=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String blockName : leftLockable) {
    Material mat=Material.valueOf(blockName);
    if (mat != null && lockable.contains(mat)) {
      leftLocked.add(mat);
      verbose(""String_Node_Str"" + blockName);
    }
 else {
      SCL.crap(""String_Node_Str"" + blockName + ""String_Node_Str"");
    }
  }
  List<String> verticalLockable=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String blockName : verticalLockable) {
    Material mat=Material.valueOf(blockName);
    if (mat != null && lockable.contains(mat)) {
      lockIncludeVertical.add(mat);
      verbose(""String_Node_Str"" + blockName);
    }
 else {
      crap(""String_Node_Str"" + blockName + ""String_Node_Str"");
    }
  }
  List<String> omgThisSucks=getConfig().getStringList(""String_Node_Str"");
  verbose(""String_Node_Str"");
  for (  String sucks : omgThisSucks) {
    Material mat=Material.valueOf(sucks);
    if (mat != null && lockable.contains(mat)) {
      canSuck.add(mat);
      verbose(""String_Node_Str"" + sucks);
    }
 else {
      crap(""String_Node_Str"" + sucks + ""String_Node_Str"");
    }
  }
  verbose(""String_Node_Str"");
  Permission allBlocksPermission=new Permission(""String_Node_Str"");
  for (  Material mat : lockable) {
    if (mat.isBlock()) {
      String permissionName=""String_Node_Str"" + mat.toString().toLowerCase();
      verbose(""String_Node_Str"" + permissionName);
      Permission thisBlockPermission=new Permission(permissionName,PermissionDefault.OP);
      thisBlockPermission.addParent(allBlocksPermission,true);
    }
  }
  getServer().getPluginManager().addPermission(allBlocksPermission);
}"
20057,"private Integer addNeighboring(Block block,String ownerName){
  Integer additionalItemsLocked=0;
  for (  Block currentNeighbour : this.getNeighbours(block)) {
    if (currentNeighbour.getType().equals(block.getType())) {
      if (list.containsKey(currentNeighbour.getLocation())) {
        plugin.babble(""String_Node_Str"" + currentNeighbour.getType().toString().toLowerCase() + ""String_Node_Str"");
      }
 else {
        plugin.babble(""String_Node_Str"" + currentNeighbour.getType().toString().toLowerCase() + ""String_Node_Str""+ currentNeighbour.getLocation().toString());
        SCLItem newItem=new SCLItem(ownerName,currentNeighbour);
        newItem.setTrusted(plugin.trustHandler.getTrustees(ownerName));
        list.put(currentNeighbour.getLocation(),newItem);
        additionalItemsLocked++;
      }
    }
 else {
      plugin.babble(""String_Node_Str"" + currentNeighbour.getType().toString().toLowerCase() + ""String_Node_Str""+ block.getType().toString().toLowerCase());
    }
  }
  return additionalItemsLocked;
}","private Integer addNeighboring(Block block,String ownerName){
  Integer additionalItemsLocked=0;
  for (  Block currentNeighbour : this.getNeighbours(block)) {
    if (currentNeighbour.getType().equals(block.getType())) {
      if (list.containsKey(currentNeighbour.getLocation())) {
        plugin.babble(""String_Node_Str"" + currentNeighbour.getType().toString().toLowerCase() + ""String_Node_Str"");
      }
 else {
        plugin.babble(""String_Node_Str"" + currentNeighbour.getType().toString().toLowerCase() + ""String_Node_Str""+ currentNeighbour.getLocation().toString());
        SCLItem newItem=new SCLItem(ownerName,currentNeighbour);
        newItem.setTrusted(plugin.trustHandler.getTrusteesCopy(ownerName));
        list.put(currentNeighbour.getLocation(),newItem);
        additionalItemsLocked++;
      }
    }
 else {
      plugin.babble(""String_Node_Str"" + currentNeighbour.getType().toString().toLowerCase() + ""String_Node_Str""+ block.getType().toString().toLowerCase());
    }
  }
  return additionalItemsLocked;
}"
20058,"public Integer lock(Player player,Block block,DyeColor[] combo){
  if (player == null || block == null || list == null || combo.length != 3)   return 0;
  if (plugin.canLock(block)) {
    int lockedItems=0;
    String lockAs=player.getName();
    if (plugin.locksAs.containsKey(lockAs)) {
      lockAs=plugin.locksAs.get(lockAs);
    }
    if (plugin.lockpair && plugin.canDoubleLock(block)) {
      lockedItems=this.addNeighboring(block,lockAs,combo);
    }
 else {
      SCLItem newItem=new SCLItem(lockAs,block,combo);
      newItem.setTrusted(plugin.trustHandler.getTrustees(lockAs));
      list.put(block.getLocation(),newItem);
      lockedItems=1;
    }
    return lockedItems;
  }
 else {
    return 0;
  }
}","public Integer lock(Player player,Block block,DyeColor[] combo){
  if (player == null || block == null || list == null || combo.length != 3)   return 0;
  if (plugin.canLock(block)) {
    int lockedItems=0;
    String lockAs=player.getName();
    if (plugin.locksAs.containsKey(lockAs)) {
      lockAs=plugin.locksAs.get(lockAs);
    }
    if (plugin.lockpair && plugin.canDoubleLock(block)) {
      lockedItems=this.addNeighboring(block,lockAs,combo);
    }
 else {
      SCLItem newItem=new SCLItem(lockAs,block,combo);
      newItem.setTrusted(plugin.trustHandler.getTrusteesCopy(lockAs));
      list.put(block.getLocation(),newItem);
      lockedItems=1;
    }
    return lockedItems;
  }
 else {
    return 0;
  }
}"
20059,"public HashSet<String> getTrusteesCopy(String playerName){
  HashSet<String> original=trust.get(playerName.toLowerCase());
  HashSet<String> safeCopy=new HashSet<String>();
  for (  String trusted : original) {
    safeCopy.add(trusted);
  }
  return safeCopy;
}","public HashSet<String> getTrusteesCopy(String playerName){
  HashSet<String> original=trust.get(playerName.toLowerCase());
  HashSet<String> safeCopy=new HashSet<String>();
  if (original == null) {
    return safeCopy;
  }
  for (  String trusted : original) {
    safeCopy.add(trusted);
  }
  return safeCopy;
}"
20060,"static void sendMessage(Player player,String message,String context){
  PlayerData data=SRPG.playerDataManager.get(player);
  ArrayList<String> messageList=(ArrayList<String>)Settings.localization.get(SRPG.playerDataManager.get(player).locale).getStringList(""String_Node_Str"" + message,new ArrayList<String>());
  if (messageList.isEmpty()) {
    messageList.add(Settings.localization.get(SRPG.playerDataManager.get(player).locale).getString(""String_Node_Str"" + message,""String_Node_Str"" + message + ""String_Node_Str""));
  }
  if (Settings.localization.get(SRPG.playerDataManager.get(player).locale).getStringList(""String_Node_Str"",(new ArrayList<String>())).contains(message)) {
    String choice=messageList.get(SRPG.generator.nextInt(messageList.size()));
    messageList.clear();
    messageList.add(choice);
  }
  for (  String line : messageList) {
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(line);
    StringBuffer sb=new StringBuffer();
    while (matcher.find()) {
      String match=matcher.group();
      if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,Integer.toString(data.free + data.spent));
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,data.xp.toString());
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,PlayerData.xpToLevel.toString());
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,data.free.toString());
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,Settings.nameReplacements.get(data.locale).get(""String_Node_Str"" + context));
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,data.skillpoints.get(context).toString());
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,context);
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,Settings.nameReplacements.get(data.locale).get(""String_Node_Str"" + context));
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        ArrayList<String> milestones=data.getMilestones(context);
        matcher.appendReplacement(sb,Settings.nameReplacements.get(data.locale).get(""String_Node_Str"" + milestones.get(milestones.size() - 1)));
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,data.charges.get(context).toString());
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,data.chargeProgress.get(context).toString());
      }
 else       if (match.startsWith(""String_Node_Str"")) {
        matcher.appendReplacement(sb,Settings.advanced.getString(match.substring(2,match.length() - 1)));
      }
 else       if (match.startsWith(""String_Node_Str"")) {
        double value=Settings.advanced.getDouble(match.substring(2,match.length() - 1),0.0);
        String result=""String_Node_Str"";
        if (value < 0.01) {
          result=""String_Node_Str"" + Integer.toString((int)(value * 1000));
        }
 else {
          result=Integer.toString((int)(value * 100));
        }
        matcher.appendReplacement(sb,result + ""String_Node_Str"");
      }
 else       if (Settings.nameReplacements.get(data.locale).containsKey(match.substring(1,match.length() - 1))) {
        matcher.appendReplacement(sb,Settings.nameReplacements.get(data.locale).get(match.substring(1,match.length() - 1)));
      }
    }
    matcher.appendTail(sb);
    pattern=Pattern.compile(""String_Node_Str"");
    matcher=pattern.matcher(sb.toString());
    sb=new StringBuffer();
    while (matcher.find()) {
      if (Settings.colorMap.containsKey(matcher.group())) {
        matcher.appendReplacement(sb,Settings.colorMap.get(matcher.group()));
      }
    }
    matcher.appendTail(sb);
    player.sendMessage(sb.toString());
  }
}","static void sendMessage(Player player,String message,String context){
  PlayerData data=SRPG.playerDataManager.get(player);
  ArrayList<String> messageList=(ArrayList<String>)Settings.localization.get(SRPG.playerDataManager.get(player).locale).getStringList(""String_Node_Str"" + message,new ArrayList<String>());
  if (messageList.isEmpty()) {
    messageList.add(Settings.localization.get(SRPG.playerDataManager.get(player).locale).getString(""String_Node_Str"" + message,""String_Node_Str"" + message + ""String_Node_Str""));
  }
  if (Settings.localization.get(SRPG.playerDataManager.get(player).locale).getStringList(""String_Node_Str"",(new ArrayList<String>())).contains(message)) {
    String choice=messageList.get(SRPG.generator.nextInt(messageList.size()));
    messageList.clear();
    messageList.add(choice);
  }
  for (  String line : messageList) {
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(line);
    StringBuffer sb=new StringBuffer();
    while (matcher.find()) {
      String match=matcher.group();
      if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,Integer.toString(data.free + data.spent));
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,Integer.toString(data.xp % PlayerData.xpToLevel));
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,PlayerData.xpToLevel.toString());
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,data.free.toString());
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,Settings.nameReplacements.get(data.locale).get(""String_Node_Str"" + context));
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,data.skillpoints.get(context).toString());
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,context);
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,Settings.nameReplacements.get(data.locale).get(""String_Node_Str"" + context));
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        ArrayList<String> milestones=data.getMilestones(context);
        matcher.appendReplacement(sb,Settings.nameReplacements.get(data.locale).get(""String_Node_Str"" + milestones.get(milestones.size() - 1)));
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,data.charges.get(context).toString());
      }
 else       if (match.equalsIgnoreCase(""String_Node_Str"")) {
        matcher.appendReplacement(sb,data.chargeProgress.get(context).toString());
      }
 else       if (match.startsWith(""String_Node_Str"")) {
        matcher.appendReplacement(sb,Settings.advanced.getString(match.substring(2,match.length() - 1)));
      }
 else       if (match.startsWith(""String_Node_Str"")) {
        double value=Settings.advanced.getDouble(match.substring(2,match.length() - 1),0.0);
        String result=""String_Node_Str"";
        if (value < 0.01) {
          result=""String_Node_Str"" + Integer.toString((int)(value * 1000));
        }
 else {
          result=Integer.toString((int)(value * 100));
        }
        matcher.appendReplacement(sb,result + ""String_Node_Str"");
      }
 else       if (Settings.nameReplacements.get(data.locale).containsKey(match.substring(1,match.length() - 1))) {
        matcher.appendReplacement(sb,Settings.nameReplacements.get(data.locale).get(match.substring(1,match.length() - 1)));
      }
    }
    matcher.appendTail(sb);
    pattern=Pattern.compile(""String_Node_Str"");
    matcher=pattern.matcher(sb.toString());
    sb=new StringBuffer();
    while (matcher.find()) {
      if (Settings.colorMap.containsKey(matcher.group())) {
        matcher.appendReplacement(sb,Settings.colorMap.get(matcher.group()));
      }
    }
    matcher.appendTail(sb);
    player.sendMessage(sb.toString());
  }
}"
20061,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.event_detail_layout);
  Log.d(TAG,""String_Node_Str"");
  Button button=(Button)findViewById(R.id.backbutton);
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    String event_name=bundle.getString(""String_Node_Str"");
    String selection=Clause.QUERY_BASIC_INFO_BY_EVENT_NAME;
    String[] selectionArgs=new String[]{event_name};
    Cursor c=managedQuery(EPGProvider.CONTENT_URI_EVENTS,null,selection,selectionArgs,null);
    String short_description;
    long startTime=0;
    int duration=0;
    if (c.getCount() < 1) {
      short_description=""String_Node_Str"";
    }
 else {
      c.moveToFirst();
      short_description=c.getString(c.getColumnIndexOrThrow(BasicColumns.SHORT_DESCRIPTION));
      startTime=c.getInt(c.getColumnIndexOrThrow(BasicColumns.START_TIME));
      duration=c.getInt(c.getColumnIndexOrThrow(BasicColumns.DURATION));
      String eguid=c.getString(c.getColumnIndexOrThrow(BasicColumns._ID));
      Log.d(TAG,""String_Node_Str"");
      Cursor c2=managedQuery(Uri.parse(EPGProvider.CONTENT_URI_QUERY_EXTENED + ""String_Node_Str"" + eguid),null,null,null,null);
      String extended_description=""String_Node_Str"";
      if (c2 != null) {
        extended_description=c2.getString(c2.getColumnIndexOrThrow(ExtendedFTSColumns.ITEM_DES)) + ""String_Node_Str"" + c2.getString(c2.getColumnIndexOrThrow(ExtendedFTSColumns.ITEM_CONTENT));
      }
      ListView detailListView=(ListView)findViewById(R.id.event_detail_list);
      String[] info=new String[]{(new Date(startTime)).toLocaleString(),Integer.toString(duration / 60) + ""String_Node_Str"",short_description,extended_description};
      detailListView.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_expandable_list_item_1,info));
    }
    ;
  }
 else {
  }
  context=this;
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(context,EPGProviderActivity.class));
      finish();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.event_detail_layout);
  Log.d(TAG,""String_Node_Str"");
  Button button=(Button)findViewById(R.id.backbutton);
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    String event_name=bundle.getString(""String_Node_Str"");
    String selection=Clause.QUERY_BASIC_INFO_BY_EVENT_NAME;
    String[] selectionArgs=new String[]{event_name};
    Cursor c=managedQuery(EPGProvider.CONTENT_URI_EVENTS,null,selection,selectionArgs,null);
    String short_description;
    long startTime=0;
    int duration=0;
    if (c.getCount() < 1) {
      short_description=""String_Node_Str"";
    }
 else {
      c.moveToFirst();
      short_description=c.getString(c.getColumnIndexOrThrow(BasicColumns.SHORT_DESCRIPTION));
      startTime=c.getInt(c.getColumnIndexOrThrow(BasicColumns.START_TIME));
      duration=c.getInt(c.getColumnIndexOrThrow(BasicColumns.DURATION));
      String eguid=c.getString(c.getColumnIndexOrThrow(BasicColumns._ID));
      Log.d(TAG,""String_Node_Str"");
      Cursor c2=managedQuery(Uri.parse(EPGProvider.CONTENT_URI_QUERY_EXTENED + ""String_Node_Str"" + eguid),null,null,null,null);
      String extended_description=""String_Node_Str"";
      if (c2 != null) {
        extended_description=c2.getString(c2.getColumnIndexOrThrow(ExtendedFTSColumns.ITEM_DES)) + ""String_Node_Str"" + c2.getString(c2.getColumnIndexOrThrow(ExtendedFTSColumns.ITEM_CONTENT));
      }
      ListView detailListView=(ListView)findViewById(R.id.event_detail_list);
      String[] info=new String[]{(new Date(startTime * 1000)).toLocaleString(),Integer.toString(duration / 60) + ""String_Node_Str"",short_description,extended_description};
      detailListView.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_expandable_list_item_1,info));
    }
    ;
  }
 else {
  }
  context=this;
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(context,EPGProviderActivity.class));
      finish();
    }
  }
);
}"
20062,"/** 
 * Finds a file by name in classpath
 * @param fileName
 * @return
 */
private static InputStream findFileInClasspath(String fileName){
  InputStream is=null;
  try {
    ClassLoader classLoader=ConfigLoader.class.getClassLoader();
    is=classLoader.getResourceAsStream(fileName);
    return is == null ? null : is;
  }
 catch (  Exception ex) {
    log.error(String.format(""String_Node_Str"",fileName),ex);
    return null;
  }
}","/** 
 * Finds a file by name in classpath
 * @param fileName
 * @return
 */
private static InputStream findFileInClasspath(String fileName){
  InputStream is=null;
  try {
    ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
    is=classLoader.getResourceAsStream(fileName);
    return is;
  }
 catch (  Exception ex) {
    log.error(String.format(""String_Node_Str"",fileName),ex);
    return null;
  }
}"
20063,"@GET @Path(""String_Node_Str"") @Produces(MediaType.TEXT_HTML) public Object doGetByPathHTML(@PathParam(""String_Node_Str"") String endpointId,@PathParam(""String_Node_Str"") String page,@QueryParam(""String_Node_Str"") String subprojectId,@QueryParam(""String_Node_Str"") String visibility) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  Pagination pagination=new Pagination();
  if (endpointId == null || ""String_Node_Str"".equals(endpointId)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int pageNumber;
  try {
    pageNumber=Integer.parseInt(page) - 1;
    if (pageNumber < 1) {
      pageNumber=0;
    }
  }
 catch (  Exception ex) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DocumentModel endpoint=session.getDocument(new IdRef(endpointId));
  String serviceId=endpoint.getProperty(ServiceImplementation.XPATH_PROVIDED_INFORMATION_SERVICE).getValue(String.class);
  DocumentModel service=session.getDocument(new IdRef(serviceId));
  String slaOrOlaSubprojectId=(String)service.getPropertyValue(SubprojectNode.XPATH_SUBPROJECT);
  EndpointStateService endpointStateService=new EndpointStateServiceImpl();
  List<SlaOrOlaIndicator> indicators=endpointStateService.getSlaOrOlaIndicators(endpointId,""String_Node_Str"",null,null,RESULTS_PER_PAGE,pageNumber).getSlaOrOlaIndicatorList();
  List<String> endpointIds=new ArrayList<String>();
  endpointIds.add(endpointId);
  int totalIndicatorNumber=endpointStateService.getTotalNumberOfSlaOrOlaindicators(endpointIds,null,null);
  pagination.setTotalPageNumber(totalIndicatorNumber % RESULTS_PER_PAGE);
  pagination.setCurrentPage(pageNumber + 1);
  if (totalIndicatorNumber > RESULTS_PER_PAGE) {
    pagination.setHasNextPage(true);
  }
  if (pageNumber > 0) {
    pagination.setHasPreviousPage(true);
  }
  for (  SlaOrOlaIndicator indicator : indicators) {
    indicator.setDescription(""String_Node_Str"");
    DocumentModel slaOrOla;
    slaOrOla=docService.findSoaNode(session,new SoaNodeId(slaOrOlaSubprojectId,org.easysoa.registry.types.SlaOrOlaIndicator.SLA_DOCTYPE,indicator.getSlaOrOlaName()),true);
    if (slaOrOla == null) {
      slaOrOla=docService.findSoaNode(session,new SoaNodeId(slaOrOlaSubprojectId,org.easysoa.registry.types.SlaOrOlaIndicator.OLA_DOCTYPE,indicator.getSlaOrOlaName()),true);
    }
    if (slaOrOla != null) {
      indicator.setDescription(slaOrOla.getProperty(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_SLA_OR_OLA_DESCRIPTION).getValue(String.class));
      indicator.setPath(slaOrOla.getPathAsString());
    }
  }
  Template view=getView(""String_Node_Str"");
  if (indicators != null) {
    view.arg(""String_Node_Str"",indicators);
  }
  view.arg(""String_Node_Str"",subprojectId).arg(""String_Node_Str"",visibility).arg(""String_Node_Str"",ContextData.getVersionData(session,subprojectId)).arg(""String_Node_Str"",service).arg(""String_Node_Str"",service.getPathAsString()).arg(""String_Node_Str"",endpoint).arg(""String_Node_Str"",pagination).arg(""String_Node_Str"",new freemarker.template.utility.ObjectConstructor());
  return view;
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.TEXT_HTML) public Object doGetByPathHTML(@PathParam(""String_Node_Str"") String endpointId,@PathParam(""String_Node_Str"") String page,@QueryParam(""String_Node_Str"") String subprojectId,@QueryParam(""String_Node_Str"") String visibility) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  Pagination pagination=new Pagination();
  if (endpointId == null || ""String_Node_Str"".equals(endpointId)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int pageNumber;
  try {
    pageNumber=Integer.parseInt(page) - 1;
    if (pageNumber < 1) {
      pageNumber=0;
    }
  }
 catch (  Exception ex) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DocumentModel endpoint=session.getDocument(new IdRef(endpointId));
  String serviceId=endpoint.getProperty(ServiceImplementation.XPATH_PROVIDED_INFORMATION_SERVICE).getValue(String.class);
  DocumentModel service=session.getDocument(new IdRef(serviceId));
  String slaOrOlaSubprojectId=(String)service.getPropertyValue(SubprojectNode.XPATH_SUBPROJECT);
  EndpointStateService endpointStateService=new EndpointStateServiceImpl();
  List<SlaOrOlaIndicator> indicators=endpointStateService.getSlaOrOlaIndicators(endpointId,""String_Node_Str"",null,null,RESULTS_PER_PAGE,pageNumber).getSlaOrOlaIndicatorList();
  List<String> endpointIds=new ArrayList<String>();
  endpointIds.add(endpointId);
  int totalIndicatorNumber=endpointStateService.getTotalNumberOfSlaOrOlaindicators(endpointIds,null,null);
  int totalPageNumber=Math.round(totalIndicatorNumber / RESULTS_PER_PAGE);
  if (totalIndicatorNumber % RESULTS_PER_PAGE > 0) {
    totalPageNumber++;
  }
  pagination.setTotalPageNumber(totalPageNumber);
  if (indicators.size() > 0) {
    pagination.setCurrentPage(pageNumber + 1);
  }
 else {
    pagination.setCurrentPage(0);
  }
  if (totalIndicatorNumber - ((pageNumber + 1) * RESULTS_PER_PAGE) > 0) {
    pagination.setHasNextPage(true);
  }
  if (pageNumber > 0) {
    pagination.setHasPreviousPage(true);
  }
  for (  SlaOrOlaIndicator indicator : indicators) {
    indicator.setDescription(""String_Node_Str"");
    DocumentModel slaOrOla;
    slaOrOla=docService.findSoaNode(session,new SoaNodeId(slaOrOlaSubprojectId,org.easysoa.registry.types.SlaOrOlaIndicator.SLA_DOCTYPE,indicator.getSlaOrOlaName()),true);
    if (slaOrOla == null) {
      slaOrOla=docService.findSoaNode(session,new SoaNodeId(slaOrOlaSubprojectId,org.easysoa.registry.types.SlaOrOlaIndicator.OLA_DOCTYPE,indicator.getSlaOrOlaName()),true);
    }
    if (slaOrOla != null) {
      indicator.setDescription(slaOrOla.getProperty(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_SLA_OR_OLA_DESCRIPTION).getValue(String.class));
      indicator.setPath(slaOrOla.getPathAsString());
    }
  }
  Template view=getView(""String_Node_Str"");
  if (indicators != null) {
    view.arg(""String_Node_Str"",indicators);
  }
  view.arg(""String_Node_Str"",subprojectId).arg(""String_Node_Str"",visibility).arg(""String_Node_Str"",ContextData.getVersionData(session,subprojectId)).arg(""String_Node_Str"",service).arg(""String_Node_Str"",service.getPathAsString()).arg(""String_Node_Str"",endpoint).arg(""String_Node_Str"",pagination).arg(""String_Node_Str"",new freemarker.template.utility.ObjectConstructor());
  return view;
}"
20064,"@Test public void getList() throws Exception {
  logTestName(logger);
  Client client=createAuthenticatedHTTPClient();
  WebResource discoveryRequest=client.resource(discoveryApiUrl).path(InformationService.DOCTYPE);
  SoaNodeInformation[] soaNodes=discoveryRequest.get(SoaNodeInformation[].class);
  Assert.assertEquals(""String_Node_Str"",SERVICE_COUNT,soaNodes.length);
  SoaNodeId firstSoaNodeId=soaNodes[0].getSoaNodeId();
  Assert.assertEquals(""String_Node_Str"",InformationService.DOCTYPE,firstSoaNodeId.getType());
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",firstSoaNodeId.getName());
}","@Test public void getList() throws Exception {
  logTestName(logger);
  Client client=createAuthenticatedHTTPClient();
  WebResource discoveryRequest=client.resource(discoveryApiUrl).path(InformationService.DOCTYPE);
  SoaNodeInformations soaNodes=discoveryRequest.get(SoaNodeInformations.class);
  Assert.assertEquals(""String_Node_Str"",SERVICE_COUNT,soaNodes.getSoaNodeInformationList().size());
  SoaNodeId firstSoaNodeId=soaNodes.getSoaNodeInformationList().get(0).getSoaNodeId();
  Assert.assertEquals(""String_Node_Str"",InformationService.DOCTYPE,firstSoaNodeId.getType());
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",firstSoaNodeId.getName());
}"
20065,"@Test public void query() throws Exception {
  logTestName(logger);
  EndpointId endpointToQuery=new EndpointId(""String_Node_Str"",""String_Node_Str"");
  documentService.create(documentManager,endpointToQuery);
  Client client=createAuthenticatedHTTPClient();
  Builder discoveryRequest=client.resource(discoveryApiUrl).path(""String_Node_Str"").type(MediaType.TEXT_PLAIN);
  SoaNodeInformation[] foundEndpoints=discoveryRequest.post(SoaNodeInformation[].class,""String_Node_Str"" + Endpoint.XPATH_URL + ""String_Node_Str"");
  Assert.assertEquals(1,foundEndpoints.length);
  Assert.assertEquals(endpointToQuery.getEnvironment(),foundEndpoints[0].getProperties().get(Endpoint.XPATH_ENDP_ENVIRONMENT));
}","@Test public void query() throws Exception {
  logTestName(logger);
  EndpointId endpointToQuery=new EndpointId(""String_Node_Str"",""String_Node_Str"");
  documentService.create(documentManager,endpointToQuery);
  Client client=createAuthenticatedHTTPClient();
  Builder discoveryRequest=client.resource(discoveryApiUrl).path(""String_Node_Str"").type(MediaType.TEXT_PLAIN);
  SoaNodeInformations foundEndpoints=discoveryRequest.post(SoaNodeInformations.class,""String_Node_Str"" + Endpoint.XPATH_URL + ""String_Node_Str"");
  Assert.assertEquals(1,foundEndpoints.getSoaNodeInformationList().size());
  Assert.assertEquals(endpointToQuery.getEnvironment(),foundEndpoints.getSoaNodeInformationList().get(0).getProperties().get(Endpoint.XPATH_ENDP_ENVIRONMENT));
}"
20066,"/** 
 * Format the method documentation for Nuxeo registry, especially by adding doclets (eg : @param) ommitted by qdox
 * @param method Java method
 * @return formatted comment bloc with doctlets tags
 */
protected String formatDoc(JavaMethod method){
  StringBuilder formattedDoc=new StringBuilder();
  if (method.getComment() != null) {
    formattedDoc.append(method.getComment());
  }
  for (  JavaParameter param : method.getParameters()) {
    if (formattedDoc.length() > 0) {
      formattedDoc.append(""String_Node_Str"");
    }
    formattedDoc.append(""String_Node_Str"");
    formattedDoc.append(param.getName());
  }
  return formattedDoc.toString();
}","/** 
 * Format the method documentation for Nuxeo registry, especially by adding doclets (eg : @param) ommitted by qdox
 * @param method Java method
 * @return formatted comment bloc with doctlets tags
 */
protected String formatDoc(JavaMethod method){
  StringBuilder formattedDoc=new StringBuilder();
  if (method.getComment() != null) {
    formattedDoc.append(method.getComment());
  }
  for (  DocletTag tag : method.getTags()) {
    if (formattedDoc.length() > 0) {
      formattedDoc.append(""String_Node_Str"");
    }
    formattedDoc.append(""String_Node_Str"");
    formattedDoc.append(tag.getName());
    formattedDoc.append(""String_Node_Str"");
    formattedDoc.append(tag.getValue());
  }
  return formattedDoc.toString();
}"
20067,"@Override public ResourceDownloadInfo get(ResourceDownloadInfo rdi) throws Exception {
  return get(new URL(rdi.getDownloadableUrl()));
}","@Override public ResourceDownloadInfo get(ResourceDownloadInfo rdi) throws Exception {
  rdi=get(new URL(rdi.getDownloadableUrl()));
  return rdi;
}"
20068,"/** 
 * @param url
 * @return
 * @throws Exception
 */
private File delegatedDownload(URL url) throws Exception {
  WebResource webResource=client.resource(delegateResourceDownloadServiceUrl);
  String callback=url.toString().substring(url.toString().indexOf(""String_Node_Str""));
  String urlWithoutCallback=url.toString().substring(0,url.toString().indexOf(""String_Node_Str""));
  webResource=webResource.queryParam(""String_Node_Str"",URLEncoder.encode(urlWithoutCallback,""String_Node_Str""));
  File resourceFile=webResource.get(File.class);
  return resourceFile;
}","/** 
 * @param url
 * @return
 * @throws Exception
 */
private File delegatedDownload(URL url) throws Exception {
  WebResource webResource=client.resource(delegateResourceDownloadServiceUrl);
  String urlString=url.toString();
  String urlWithoutCallback=urlString;
  if (urlString.contains(""String_Node_Str"")) {
    urlWithoutCallback=urlString.substring(0,urlString.indexOf(""String_Node_Str""));
  }
  webResource=webResource.queryParam(""String_Node_Str"",URLEncoder.encode(urlWithoutCallback,""String_Node_Str""));
  File resourceFile=webResource.get(File.class);
  return resourceFile;
}"
20069,"/** 
 * @param session
 * @param subprojectId
 * @return 
 */
public final static ContextData getVersionData(CoreSession session,String subprojectId) throws ClientException {
  ContextData versionData=new ContextData();
  DocumentModel contextInfo=SubprojectServiceImpl.getSubprojectById(session,subprojectId);
  DocumentModel liveVersion=session.getWorkingCopy(contextInfo.getRef());
  String versionPath=liveVersion.getPathAsString();
  DocumentModelList documentList=session.query(DocumentService.NXQL_SELECT_FROM + Project.DOCTYPE);
  for (  DocumentModel project : documentList) {
    if (versionPath.startsWith(project.getPathAsString())) {
      versionData.setProject(project.getName());
      break;
    }
  }
  versionData.setPhase(contextInfo.getName());
  if (contextInfo.isVersion()) {
    versionData.setVersion(contextInfo.getProperty(""String_Node_Str"").getValue() + ""String_Node_Str"" + contextInfo.getProperty(""String_Node_Str"").getValue());
  }
  return versionData;
}","/** 
 * @param session
 * @param subprojectId
 * @return
 */
public final static ContextData getVersionData(CoreSession session,String subprojectId) throws ClientException {
  ContextData versionData=new ContextData();
  DocumentModel contextInfo=SubprojectServiceImpl.getSubprojectById(session,subprojectId);
  if (contextInfo == null) {
    throw new ClientException(""String_Node_Str"" + subprojectId);
  }
  DocumentModel liveVersion=session.getWorkingCopy(contextInfo.getRef());
  String versionPath=liveVersion.getPathAsString();
  DocumentModelList documentList=session.query(DocumentService.NXQL_SELECT_FROM + Project.DOCTYPE);
  for (  DocumentModel project : documentList) {
    if (versionPath.startsWith(project.getPathAsString())) {
      versionData.setProject(project.getName());
      break;
    }
  }
  versionData.setPhase(contextInfo.getTitle());
  if (contextInfo.isVersion()) {
    versionData.setVersion(contextInfo.getProperty(""String_Node_Str"").getValue() + ""String_Node_Str"" + contextInfo.getProperty(""String_Node_Str"").getValue());
  }
  return versionData;
}"
20070,"/** 
 * @param url
 * @return
 * @throws Exception 
 */
private File localDownload(URL url) throws Exception {
  HttpDownloaderService httpDownloaderService=new HttpDownloaderServiceImpl();
  HttpDownloader fileDownloader=httpDownloaderService.createHttpDownloader(url);
  fileDownloader.download();
  return fileDownloader.getFile();
}","/** 
 * @param url
 * @return
 * @throws Exception
 */
private File localDownload(URL url) throws Exception {
  HttpDownloaderService httpDownloaderService=new HttpDownloaderServiceImpl();
  HttpDownloader fileDownloader=httpDownloaderService.createHttpDownloader(url);
  fileDownloader.download();
  return fileDownloader.getFile();
}"
20071,"@Override public ResourceDownloadInfo get(URL url) throws Exception {
  ResourceDownloadInfoImpl resourceDownloadInfo=new ResourceDownloadInfoImpl();
  File file=null;
  if (!isDelegatedDownloadDisabled) {
    try {
      file=delegatedDownload(url);
    }
 catch (    Exception ex) {
      isDelegatedDownloadDisabled=true;
    }
  }
 else {
    file=localDownload(url);
  }
  if (file != null) {
    Date date=new Date();
    SimpleDateFormat sdf=new SimpleDateFormat(ResourceDownloadInfo.TIMESTAMP_DATETIME_PATTERN);
    resourceDownloadInfo.setTimestamp(sdf.format(date));
    resourceDownloadInfo.setFile(file);
  }
  return resourceDownloadInfo;
}","@Override public ResourceDownloadInfo get(URL url) throws Exception {
  ResourceDownloadInfoImpl resourceDownloadInfo=new ResourceDownloadInfoImpl();
  File file=null;
  if (!isDelegatedDownloadDisabled) {
    try {
      file=delegatedDownload(url);
    }
 catch (    Exception ex) {
      isDelegatedDownloadDisabled=true;
    }
  }
  if (file == null) {
    file=localDownload(url);
  }
  if (file != null) {
    Date date=new Date();
    SimpleDateFormat sdf=new SimpleDateFormat(ResourceDownloadInfo.TIMESTAMP_DATETIME_PATTERN);
    resourceDownloadInfo.setTimestamp(sdf.format(date));
    resourceDownloadInfo.setFile(file);
  }
  return resourceDownloadInfo;
}"
20072,"/** 
 * @param url
 * @return
 * @throws Exception 
 */
private File delegatedDownload(URL url) throws Exception {
  WebResource webResource=client.resource(delegateResourceDownloadServiceUrl);
  webResource.setProperty(""String_Node_Str"",url.toURI().toString());
  File resourceFile=webResource.get(File.class);
  return resourceFile;
}","/** 
 * @param url
 * @return
 * @throws Exception
 */
private File delegatedDownload(URL url) throws Exception {
  WebResource webResource=client.resource(delegateResourceDownloadServiceUrl);
  webResource.setProperty(""String_Node_Str"",url.toURI().toString());
  File resourceFile=webResource.get(File.class);
  return resourceFile;
}"
20073,"/** 
 * Read data from File
 * @param file
 * @return 
 */
@Override public String getData(File file) throws Exception {
  String data;
  FileInputStream fis=null;
  try {
    if (file == null) {
      return ""String_Node_Str"";
    }
    fis=new FileInputStream(file);
    StringBuilder dataBuffer=new StringBuilder();
    int c;
    while ((c=fis.read()) != -1) {
      dataBuffer.append((char)c);
    }
    data=dataBuffer.toString();
  }
 catch (  Exception e) {
    data=null;
  }
 finally {
    if (fis != null) {
      fis.close();
    }
  }
  return data;
}","/** 
 * Read data from File
 * @param file
 * @return
 */
@Override public String getData(File file) throws Exception {
  String data;
  FileInputStream fis=null;
  try {
    if (file == null) {
      return ""String_Node_Str"";
    }
    fis=new FileInputStream(file);
    StringBuilder dataBuffer=new StringBuilder();
    int c;
    while ((c=fis.read()) != -1) {
      dataBuffer.append((char)c);
    }
    data=dataBuffer.toString();
  }
 catch (  Exception e) {
    data=null;
  }
 finally {
    if (fis != null) {
      fis.close();
    }
  }
  return data;
}"
20074,"@Override public ResourceDownloadInfo get(URL url) throws Exception {
  ResourceDownloadInfoImpl resourceDownloadInfo=new ResourceDownloadInfoImpl();
  File file=null;
  if (!isDelegatedDownloadDisabled) {
    try {
      file=delegatedDownload(url);
    }
 catch (    Exception ex) {
      isDelegatedDownloadDisabled=true;
      file=localDownload(url);
    }
  }
  Date date=new Date();
  SimpleDateFormat sdf=new SimpleDateFormat(ResourceDownloadInfo.TIMESTAMP_DATETIME_PATTERN);
  resourceDownloadInfo.setTimestamp(sdf.format(date));
  resourceDownloadInfo.setFile(file);
  return resourceDownloadInfo;
}","@Override public ResourceDownloadInfo get(URL url) throws Exception {
  ResourceDownloadInfoImpl resourceDownloadInfo=new ResourceDownloadInfoImpl();
  File file=null;
  if (!isDelegatedDownloadDisabled) {
    try {
      file=delegatedDownload(url);
    }
 catch (    Exception ex) {
      isDelegatedDownloadDisabled=true;
    }
  }
 else {
    file=localDownload(url);
  }
  if (file != null) {
    Date date=new Date();
    SimpleDateFormat sdf=new SimpleDateFormat(ResourceDownloadInfo.TIMESTAMP_DATETIME_PATTERN);
    resourceDownloadInfo.setTimestamp(sdf.format(date));
    resourceDownloadInfo.setFile(file);
  }
  return resourceDownloadInfo;
}"
20075,"@GET public Template viewDashboard(@QueryParam(""String_Node_Str"") String subprojectId,@QueryParam(""String_Node_Str"") String visibility){
  CoreSession session=SessionFactory.getSession(request);
  try {
    DocumentService docService=Framework.getService(DocumentService.class);
    Template view=getView(""String_Node_Str"");
    String subprojectCriteria=""String_Node_Str"" + NXQLQueryHelper.buildSubprojectPathCriteria(session,subprojectId,visibility);
    DocumentModelList allInfoServices=docService.query(session,""String_Node_Str"" + InformationService.DOCTYPE + subprojectCriteria,true,false);
    Map<String,DocumentModel> infoServicesById=new HashMap<String,DocumentModel>();
    for (    DocumentModel infoService : allInfoServices) {
      infoServicesById.put(infoService.getId(),infoService);
    }
    DocumentModelList matchedImpls=docService.query(session,""String_Node_Str"" + ServiceImplementation.DOCTYPE + subprojectCriteria+ ""String_Node_Str""+ ServiceImplementation.XPATH_PROVIDED_INFORMATION_SERVICE+ ""String_Node_Str"",true,false);
    view.arg(""String_Node_Str"",matchedImpls);
    view.arg(""String_Node_Str"",infoServicesById);
    Map<String,DocumentModel> unimplementedServsMap=new HashMap<String,DocumentModel>(infoServicesById);
    for (    DocumentModel matchedImpl : matchedImpls) {
      unimplementedServsMap.remove(matchedImpl.getPropertyValue(ServiceImplementation.XPATH_PROVIDED_INFORMATION_SERVICE));
    }
    view.arg(""String_Node_Str"",unimplementedServsMap.values());
    DocumentModelList unmatchedEndpoints=docService.query(session,""String_Node_Str"" + Endpoint.DOCTYPE + subprojectCriteria+ ""String_Node_Str""+ Endpoint.XPATH_PARENTSIDS+ ""String_Node_Str""+ ServiceImplementation.DOCTYPE+ ""String_Node_Str"",true,false);
    view.arg(""String_Node_Str"",unmatchedEndpoints);
    DocumentModelList servWithoutSpecs=docService.query(session,""String_Node_Str"" + ServiceImplementation.DOCTYPE + subprojectCriteria+ ""String_Node_Str""+ ServiceImplementation.XPATH_PROVIDED_INFORMATION_SERVICE+ ""String_Node_Str"",true,false);
    view.arg(""String_Node_Str"",servWithoutSpecs);
    view.arg(""String_Node_Str"",subprojectId);
    view.arg(""String_Node_Str"",visibility);
    view.arg(""String_Node_Str"",ContextData.getVersionData(session,subprojectId));
    return view;
  }
 catch (  Exception e) {
    return getView(""String_Node_Str"").arg(""String_Node_Str"",e);
  }
}","@GET public Template viewDashboard(@QueryParam(""String_Node_Str"") String subprojectId,@QueryParam(""String_Node_Str"") String visibility){
  CoreSession session=SessionFactory.getSession(request);
  try {
    DocumentService docService=Framework.getService(DocumentService.class);
    Template view=getView(""String_Node_Str"");
    String subprojectCriteria=NXQLQueryHelper.buildSubprojectPathCriteria(session,subprojectId,visibility);
    if (!""String_Node_Str"".equals(subprojectCriteria)) {
      subprojectCriteria=""String_Node_Str"" + subprojectCriteria;
    }
    DocumentModelList allInfoServices=docService.query(session,""String_Node_Str"" + InformationService.DOCTYPE + subprojectCriteria,true,false);
    Map<String,DocumentModel> infoServicesById=new HashMap<String,DocumentModel>();
    for (    DocumentModel infoService : allInfoServices) {
      infoServicesById.put(infoService.getId(),infoService);
    }
    DocumentModelList matchedImpls=docService.query(session,""String_Node_Str"" + ServiceImplementation.DOCTYPE + subprojectCriteria+ ""String_Node_Str""+ ServiceImplementation.XPATH_PROVIDED_INFORMATION_SERVICE+ ""String_Node_Str"",true,false);
    view.arg(""String_Node_Str"",matchedImpls);
    view.arg(""String_Node_Str"",infoServicesById);
    Map<String,DocumentModel> unimplementedServsMap=new HashMap<String,DocumentModel>(infoServicesById);
    for (    DocumentModel matchedImpl : matchedImpls) {
      unimplementedServsMap.remove(matchedImpl.getPropertyValue(ServiceImplementation.XPATH_PROVIDED_INFORMATION_SERVICE));
    }
    view.arg(""String_Node_Str"",unimplementedServsMap.values());
    DocumentModelList unmatchedEndpoints=docService.query(session,""String_Node_Str"" + Endpoint.DOCTYPE + subprojectCriteria+ ""String_Node_Str""+ Endpoint.XPATH_PARENTSIDS+ ""String_Node_Str""+ ServiceImplementation.DOCTYPE+ ""String_Node_Str"",true,false);
    view.arg(""String_Node_Str"",unmatchedEndpoints);
    DocumentModelList servWithoutSpecs=docService.query(session,""String_Node_Str"" + ServiceImplementation.DOCTYPE + subprojectCriteria+ ""String_Node_Str""+ ServiceImplementation.XPATH_PROVIDED_INFORMATION_SERVICE+ ""String_Node_Str"",true,false);
    view.arg(""String_Node_Str"",servWithoutSpecs);
    view.arg(""String_Node_Str"",subprojectId);
    view.arg(""String_Node_Str"",visibility);
    view.arg(""String_Node_Str"",ContextData.getVersionData(session,subprojectId));
    return view;
  }
 catch (  Exception e) {
    return getView(""String_Node_Str"").arg(""String_Node_Str"",e);
  }
}"
20076,"@GET @Produces(MediaType.TEXT_HTML) public Object doGetHTML(@QueryParam(""String_Node_Str"") String subProjectId,@QueryParam(""String_Node_Str"") String visibility) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  List<String> envs=new ArrayList<String>();
  DocumentModelList environments=session.query(""String_Node_Str"" + Endpoint.XPATH_ENDP_ENVIRONMENT + ""String_Node_Str""+ Endpoint.DOCTYPE);
  for (  DocumentModel model : environments) {
    envs.add((String)model.getPropertyValue(Endpoint.XPATH_ENDP_ENVIRONMENT));
  }
  String query=""String_Node_Str"" + InformationService.DOCTYPE;
  String subProjectPathCriteria=NXQLQueryHelper.buildSubprojectPathCriteria(session,subProjectId,visibility);
  if (!""String_Node_Str"".equals(subProjectPathCriteria)) {
    query=query + DocumentService.NXQL_WHERE + subProjectPathCriteria;
  }
  DocumentModelList services=docService.query(session,query,true,false);
  Map<String,DocumentModelList> endpoints=new HashMap<String,DocumentModelList>();
  for (  DocumentModel service : services) {
    DocumentModelList endpointsList=docService.query(session,""String_Node_Str"" + Endpoint.DOCTYPE + DocumentService.NXQL_WHERE_NO_PROXY+ DocumentService.NXQL_AND+ ""String_Node_Str""+ service.getId()+ ""String_Node_Str"",true,false);
    endpoints.put(service.getName(),endpointsList);
  }
  return getView(""String_Node_Str"").arg(""String_Node_Str"",envs).arg(""String_Node_Str"",endpoints).arg(""String_Node_Str"",subProjectId).arg(""String_Node_Str"",visibility).arg(""String_Node_Str"",ContextData.getVersionData(session,subProjectId));
}","@GET @Produces(MediaType.TEXT_HTML) public Object doGetHTML(@QueryParam(""String_Node_Str"") String subProjectId,@QueryParam(""String_Node_Str"") String visibility) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  List<String> envs=new ArrayList<String>();
  DocumentModelList environments=session.query(""String_Node_Str"" + Endpoint.XPATH_ENDP_ENVIRONMENT + ""String_Node_Str""+ Endpoint.DOCTYPE);
  for (  DocumentModel model : environments) {
    envs.add((String)model.getPropertyValue(Endpoint.XPATH_ENDP_ENVIRONMENT));
  }
  String query=""String_Node_Str"" + InformationService.DOCTYPE;
  String subProjectPathCriteria=NXQLQueryHelper.buildSubprojectPathCriteria(session,subProjectId,visibility);
  if (!""String_Node_Str"".equals(subProjectPathCriteria)) {
    query=query + DocumentService.NXQL_WHERE + subProjectPathCriteria;
  }
  DocumentModelList services=docService.query(session,query,true,false);
  Map<String,DocumentModelList> endpoints=new HashMap<String,DocumentModelList>();
  for (  DocumentModel service : services) {
    query=""String_Node_Str"" + Endpoint.DOCTYPE + DocumentService.NXQL_WHERE+ ""String_Node_Str""+ service.getId()+ ""String_Node_Str"";
    if (!""String_Node_Str"".equals(subProjectPathCriteria)) {
      query=query + DocumentService.NXQL_AND + subProjectPathCriteria;
    }
    DocumentModelList endpointsList=docService.query(session,query,true,false);
    endpoints.put(service.getName(),endpointsList);
  }
  return getView(""String_Node_Str"").arg(""String_Node_Str"",envs).arg(""String_Node_Str"",endpoints).arg(""String_Node_Str"",subProjectId).arg(""String_Node_Str"",visibility).arg(""String_Node_Str"",ContextData.getVersionData(session,subProjectId));
}"
20077,"/** 
 * @see org.easysoa.registry.rest.integration.EndpointStateService#getSlaOrOlaIndicators(String,String,Date,Date,int,int)
 */
@Override public SlaOrOlaIndicators getSlaOrOlaIndicators(String endpointId,String slaOrOlaName,String periodStart,String periodEnd,int pageSize,int pageStart) throws Exception {
  DirectoryService directoryService=Framework.getService(DirectoryService.class);
  Session session=directoryService.open(org.easysoa.registry.types.SlaOrOlaIndicator.DOCTYPE);
  if (session == null) {
    throw new Exception(""String_Node_Str"" + org.easysoa.registry.types.SlaOrOlaIndicator.DOCTYPE + ""String_Node_Str"");
  }
  Map<String,Serializable> parameters=new HashMap<String,Serializable>();
  if (endpointId != null && !""String_Node_Str"".equals(endpointId)) {
    parameters.put(""String_Node_Str"",endpointId);
  }
  if (slaOrOlaName != null && !""String_Node_Str"".equals(slaOrOlaName)) {
    parameters.put(""String_Node_Str"",slaOrOlaName);
  }
  SlaOrOlaIndicators slaOrOlaIndicators=new SlaOrOlaIndicators();
  try {
    Map<String,String> orderByParams=new HashMap<String,String>();
    Set<String> fullTextSearchParams=new HashSet<String>();
    SimpleDateFormat dateFormater=new SimpleDateFormat(""String_Node_Str"");
    Calendar calendarFrom=new GregorianCalendar();
    Calendar calendarTo=new GregorianCalendar();
    Calendar currentDate=new GregorianCalendar();
    if (periodEnd == null && periodStart == null) {
      calendarTo.clear();
      calendarTo.set(currentDate.get(Calendar.YEAR),currentDate.get(Calendar.MONTH),currentDate.get(Calendar.DAY_OF_MONTH),23,59,59);
    }
 else     if (periodEnd == null && periodStart != null) {
      calendarTo.setTime(currentDate.getTime());
    }
 else {
      calendarTo.setTime(dateFormater.parse(periodEnd));
    }
    if (periodStart != null) {
      calendarFrom.setTime(dateFormater.parse(periodStart));
    }
 else {
      calendarFrom.clear();
      calendarFrom.set(currentDate.get(Calendar.YEAR) - 1,currentDate.get(Calendar.MONTH),currentDate.get(Calendar.DAY_OF_MONTH));
    }
    SQLBetweenFilter dateRangeFilter=new SQLBetweenFilter(calendarFrom,calendarTo);
    parameters.put(""String_Node_Str"",dateRangeFilter);
    DocumentModelList soaNodeModelList=session.query(parameters,fullTextSearchParams,orderByParams,false,pageSize,pageStart * pageSize);
    SlaOrOlaIndicator indicator;
    for (    DocumentModel model : soaNodeModelList) {
      indicator=new SlaOrOlaIndicator();
      indicator.setEndpointId((String)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_ENDPOINT_ID));
      indicator.setType(model.getType());
      indicator.setServiceLevelHealth(ServiceLevelHealth.valueOf((String)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_SERVICE_LEVEL_HEALTH)));
      indicator.setServiceLevelViolation((Boolean)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_SERVICE_LEVEL_VIOLATION));
      indicator.setSlaOrOlaName((String)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_SLA_OR_OLA_NAME));
      GregorianCalendar calendar=(GregorianCalendar)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_TIMESTAMP);
      indicator.setTimestamp(calendar.getTime());
      slaOrOlaIndicators.getSlaOrOlaIndicatorList().add(indicator);
    }
  }
 catch (  ClientException ex) {
    ex.printStackTrace();
    throw ex;
  }
  return slaOrOlaIndicators;
}","/** 
 * @see org.easysoa.registry.rest.integration.EndpointStateService#getSlaOrOlaIndicators(String,String,Date,Date,int,int)
 */
@Override public SlaOrOlaIndicators getSlaOrOlaIndicators(String endpointId,String slaOrOlaName,String periodStart,String periodEnd,int pageSize,int pageStart) throws Exception {
  DirectoryService directoryService=Framework.getService(DirectoryService.class);
  Session session=directoryService.open(org.easysoa.registry.types.SlaOrOlaIndicator.DOCTYPE);
  if (session == null) {
    throw new Exception(""String_Node_Str"" + org.easysoa.registry.types.SlaOrOlaIndicator.DOCTYPE + ""String_Node_Str"");
  }
  Map<String,Serializable> parameters=new HashMap<String,Serializable>();
  if (endpointId != null && !""String_Node_Str"".equals(endpointId)) {
    parameters.put(""String_Node_Str"",endpointId);
  }
  if (slaOrOlaName != null && !""String_Node_Str"".equals(slaOrOlaName)) {
    parameters.put(""String_Node_Str"",slaOrOlaName);
  }
  SlaOrOlaIndicators slaOrOlaIndicators=new SlaOrOlaIndicators();
  try {
    Map<String,String> orderByParams=new HashMap<String,String>();
    Set<String> fullTextSearchParams=new HashSet<String>();
    SimpleDateFormat dateFormater=new SimpleDateFormat(""String_Node_Str"");
    Calendar calendarFrom=new GregorianCalendar();
    Calendar calendarTo=new GregorianCalendar();
    Calendar currentDate=new GregorianCalendar();
    if (periodEnd == null && periodStart == null) {
      calendarTo.clear();
      calendarTo.set(currentDate.get(Calendar.YEAR),currentDate.get(Calendar.MONTH),currentDate.get(Calendar.DAY_OF_MONTH),23,59,59);
    }
 else     if (periodEnd == null && periodStart != null) {
      calendarTo.setTime(currentDate.getTime());
    }
 else {
      calendarTo.setTime(dateFormater.parse(periodEnd));
    }
    if (periodStart != null) {
      calendarFrom.setTime(dateFormater.parse(periodStart));
    }
 else {
      calendarFrom.clear();
      calendarFrom.set(currentDate.get(Calendar.YEAR),currentDate.get(Calendar.MONTH),currentDate.get(Calendar.DAY_OF_MONTH));
    }
    SQLBetweenFilter dateRangeFilter=new SQLBetweenFilter(calendarFrom,calendarTo);
    parameters.put(""String_Node_Str"",dateRangeFilter);
    DocumentModelList soaNodeModelList=session.query(parameters,fullTextSearchParams,orderByParams,false,pageSize,pageStart * pageSize);
    SlaOrOlaIndicator indicator;
    for (    DocumentModel model : soaNodeModelList) {
      indicator=new SlaOrOlaIndicator();
      indicator.setEndpointId((String)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_ENDPOINT_ID));
      indicator.setType(model.getType());
      indicator.setServiceLevelHealth(ServiceLevelHealth.valueOf((String)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_SERVICE_LEVEL_HEALTH)));
      indicator.setServiceLevelViolation((Boolean)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_SERVICE_LEVEL_VIOLATION));
      indicator.setSlaOrOlaName((String)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_SLA_OR_OLA_NAME));
      GregorianCalendar calendar=(GregorianCalendar)model.getPropertyValue(org.easysoa.registry.types.SlaOrOlaIndicator.XPATH_TIMESTAMP);
      indicator.setTimestamp(calendar.getTime());
      slaOrOlaIndicators.getSlaOrOlaIndicatorList().add(indicator);
    }
  }
 catch (  ClientException ex) {
    ex.printStackTrace();
    throw ex;
  }
  return slaOrOlaIndicators;
}"
20078,"@Override public IndicatorValue compute(CoreSession session,String subprojectId,Map<String,IndicatorValue> computedIndicators,String visibility) throws ClientException {
  String subprojectPathCriteria;
  if (subprojectId == null) {
    subprojectPathCriteria=""String_Node_Str"";
  }
 else {
    if (ContextVisibility.STRICT.getValue().equals(visibility)) {
      subprojectPathCriteria=DocumentService.NXQL_AND + SubprojectServiceImpl.buildCriteriaInSubproject(subprojectId);
    }
 else {
      subprojectPathCriteria=DocumentService.NXQL_AND + SubprojectServiceImpl.buildCriteriaSeenFromSubproject(SubprojectServiceImpl.getSubprojectById(session,subprojectId));
    }
  }
  IterableQueryResult queryResult=session.queryAndFetch(valueQuery + subprojectPathCriteria,NXQL.NXQL);
  try {
    if (this.totalQuery == null) {
      return new IndicatorValue((int)queryResult.size(),-1);
    }
 else {
      IterableQueryResult totalQueryResult=null;
      try {
        totalQueryResult=session.queryAndFetch(totalQuery,NXQL.NXQL);
        return new IndicatorValue((int)queryResult.size(),(int)totalQueryResult.size());
      }
  finally {
        if (totalQueryResult != null) {
          totalQueryResult.close();
        }
      }
    }
  }
  finally {
    queryResult.close();
  }
}","@Override public IndicatorValue compute(CoreSession session,String subprojectId,Map<String,IndicatorValue> computedIndicators,String visibility) throws ClientException {
  String subprojectPathCriteria;
  if (subprojectId == null) {
    subprojectPathCriteria=""String_Node_Str"";
  }
 else {
    if (ContextVisibility.STRICT.getValue().equals(visibility)) {
      subprojectPathCriteria=DocumentService.NXQL_AND + SubprojectServiceImpl.buildCriteriaInSubproject(subprojectId);
    }
 else {
      subprojectPathCriteria=DocumentService.NXQL_AND + SubprojectServiceImpl.buildCriteriaSeenFromSubproject(SubprojectServiceImpl.getSubprojectById(session,subprojectId));
    }
  }
  IterableQueryResult queryResult=session.queryAndFetch(valueQuery + subprojectPathCriteria,NXQL.NXQL);
  try {
    if (this.totalQuery == null) {
      return new IndicatorValue((int)queryResult.size(),-1);
    }
 else {
      IterableQueryResult totalQueryResult=null;
      try {
        totalQueryResult=session.queryAndFetch(totalQuery,NXQL.NXQL);
        int percentage=Math.round(queryResult.size() * 100 / totalQueryResult.size());
        return new IndicatorValue((int)queryResult.size(),percentage);
      }
  finally {
        if (totalQueryResult != null) {
          totalQueryResult.close();
        }
      }
    }
  }
  finally {
    queryResult.close();
  }
}"
20079,"public static String getName(String doctype){
  return doctype + ""String_Node_Str"";
}","public static String getName(String doctype){
  return doctype;
}"
20080,"public String createSubprojectVersion() throws ClientException {
  DocumentModel subproject=navigationContext.getCurrentDocument();
  if (subproject == null || !subproject.getType().equals(Subproject.DOCTYPE)) {
    outputMessage=""String_Node_Str"";
    return null;
  }
  DocumentModel versionedSubprojectModel=SubprojectServiceImpl.createSubprojectVersion(subproject,VersioningOption.MINOR);
  CoreSession coreSession=subproject.getCoreSession();
  String publishedSectionName=coreSession.getDocument(versionedSubprojectModel.getParentRef()).getName() + ""String_Node_Str"" + versionedSubprojectModel.getName()+ ""String_Node_Str""+ versionedSubprojectModel.getVersionLabel();
  DocumentModel publishedSection=coreSession.createDocumentModel(""String_Node_Str"");
  publishedSection.setPathInfo(""String_Node_Str"",publishedSectionName);
  publishedSection.setPropertyValue(""String_Node_Str"",publishedSectionName);
  publishedSection=coreSession.createDocument(publishedSection);
  coreSession.save();
  DocumentModel versionedSubprojectProxy=coreSession.createProxy(versionedSubprojectModel.getRef(),publishedSection.getRef());
  outputMessage=""String_Node_Str"" + versionedSubprojectModel.getVersionLabel();
  Object[] params={versionedSubprojectModel.getVersionLabel()};
  facesMessages.add(StatusMessage.Severity.INFO,resourcesAccessor.getMessages().get(""String_Node_Str""),params);
  DocumentModel publishedVersion=subproject;
  if (publishedVersion != null) {
    return navigationContext.navigateToDocument(publishedVersion,""String_Node_Str"");
  }
 else {
    return null;
  }
}","public String createSubprojectVersion() throws ClientException {
  DocumentModel subproject=navigationContext.getCurrentDocument();
  if (subproject == null || !subproject.getType().equals(Subproject.DOCTYPE)) {
    outputMessage=""String_Node_Str"";
    return null;
  }
  DocumentModel versionedSubprojectModel=SubprojectServiceImpl.createSubprojectVersion(subproject,VersioningOption.MINOR);
  CoreSession coreSession=subproject.getCoreSession();
  String publishedSectionName=coreSession.getDocument(versionedSubprojectModel.getParentRef()).getName() + ""String_Node_Str"" + versionedSubprojectModel.getName()+ ""String_Node_Str""+ versionedSubprojectModel.getVersionLabel();
  DocumentModel publishedSection=coreSession.createDocumentModel(""String_Node_Str"");
  publishedSection.setPathInfo(""String_Node_Str"",publishedSectionName);
  publishedSection.setPropertyValue(""String_Node_Str"",publishedSectionName);
  publishedSection=coreSession.createDocument(publishedSection);
  coreSession.save();
  DocumentModel versionedSubprojectProxy=coreSession.createProxy(versionedSubprojectModel.getRef(),publishedSection.getRef());
  outputMessage=""String_Node_Str"" + versionedSubprojectModel.getVersionLabel();
  Object[] params={versionedSubprojectModel.getVersionLabel()};
  facesMessages.add(StatusMessage.Severity.INFO,resourcesAccessor.getMessages().get(""String_Node_Str""),params);
  navigationContext.invalidateCurrentDocument();
  DocumentModel publishedVersion=subproject;
  if (publishedVersion != null) {
    return navigationContext.navigateToDocument(publishedVersion,""String_Node_Str"");
  }
 else {
    return null;
  }
}"
20081,"/** 
 * This test's goal is only to help understand nuxeo versioning.
 * @throws Exception
 */
public void testCheckin() throws Exception {
  DocumentModel testFile=documentManager.createDocumentModel(""String_Node_Str"");
  testFile.setPathInfo(""String_Node_Str"",""String_Node_Str"");
  documentManager.createDocument(testFile);
  documentManager.save();
  System.err.println(""String_Node_Str"" + testFile.getVersionLabel());
  DocumentModel projectModel=SubprojectServiceImpl.createProject(documentManager,""String_Node_Str"");
  DocumentModel otherProjectModel=SubprojectServiceImpl.createProject(documentManager,""String_Node_Str"");
  documentManager.save();
  DocumentModel specificationsSubprojectModel=SubprojectServiceImpl.getSubprojectByName(documentManager,projectModel,""String_Node_Str"");
  String specificationsSubprojectId=SubprojectServiceImpl.buildSubprojectId(specificationsSubprojectModel);
  DocumentModel realisationSubprojectModel=SubprojectServiceImpl.createSubproject(documentManager,""String_Node_Str"",projectModel,list(specificationsSubprojectModel));
  String realisationSubprojectId=SubprojectServiceImpl.buildSubprojectId(realisationSubprojectModel);
  DocumentModel anotherRealisationSubprojectModel=SubprojectServiceImpl.createSubproject(documentManager,""String_Node_Str"",projectModel,null);
  documentManager.save();
  String anotherRealisationSubprojectId=anotherRealisationSubprojectModel.getId();
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectModel + ""String_Node_Str""+ anotherRealisationSubprojectModel.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionSeriesId());
  DocumentRef anotherRealisationSubprojectv01Ref=anotherRealisationSubprojectModel.checkIn(VersioningOption.MINOR,""String_Node_Str"");
  DocumentModel anotherRealisationSubprojectv01Model=documentManager.getDocument(anotherRealisationSubprojectv01Ref);
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectv01Ref + ""String_Node_Str""+ anotherRealisationSubprojectv01Model+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getVersionSeriesId());
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectModel + ""String_Node_Str""+ anotherRealisationSubprojectModel.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionSeriesId());
  anotherRealisationSubprojectModel.checkOut();
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectModel + ""String_Node_Str""+ anotherRealisationSubprojectModel.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionSeriesId());
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectv01Ref + ""String_Node_Str""+ anotherRealisationSubprojectv01Model+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getVersionSeriesId());
  anotherRealisationSubprojectModel=documentManager.getDocument(new IdRef(anotherRealisationSubprojectId));
  DocumentRef anotherRealisationSubprojectv10Ref=anotherRealisationSubprojectModel.checkIn(VersioningOption.MAJOR,""String_Node_Str"");
  DocumentModel anotherRealisationSubprojectv10Model=documentManager.getDocument(anotherRealisationSubprojectv10Ref);
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectv10Ref + ""String_Node_Str""+ anotherRealisationSubprojectv10Model+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.getVersionSeriesId());
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectModel + ""String_Node_Str""+ anotherRealisationSubprojectModel.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionSeriesId());
}","/** 
 * This test's goal is only to help understand nuxeo versioning.
 * @throws Exception
 */
public void testCheckin() throws Exception {
  DocumentModel testFile=documentManager.createDocumentModel(""String_Node_Str"");
  testFile.setPathInfo(""String_Node_Str"",""String_Node_Str"");
  documentManager.createDocument(testFile);
  documentManager.save();
  System.err.println(""String_Node_Str"" + testFile.getVersionLabel());
  DocumentModel projectModel=SubprojectServiceImpl.createProject(documentManager,""String_Node_Str"");
  DocumentModel otherProjectModel=SubprojectServiceImpl.createProject(documentManager,""String_Node_Str"");
  documentManager.save();
  DocumentModel specificationsSubprojectModel=SubprojectServiceImpl.getSubprojectByName(documentManager,projectModel,""String_Node_Str"");
  String specificationsSubprojectId=SubprojectServiceImpl.buildSubprojectId(specificationsSubprojectModel);
  DocumentModel realisationSubprojectModel=SubprojectServiceImpl.createSubproject(documentManager,""String_Node_Str"",projectModel,list(specificationsSubprojectModel));
  String realisationSubprojectId=SubprojectServiceImpl.buildSubprojectId(realisationSubprojectModel);
  DocumentModel anotherRealisationSubprojectModel=SubprojectServiceImpl.createSubproject(documentManager,""String_Node_Str"",projectModel,null);
  documentManager.save();
  String anotherRealisationSubprojectId=anotherRealisationSubprojectModel.getId();
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectModel + ""String_Node_Str""+ anotherRealisationSubprojectModel.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionSeriesId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class)+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class));
  DocumentRef anotherRealisationSubprojectv01Ref=anotherRealisationSubprojectModel.checkIn(VersioningOption.MINOR,""String_Node_Str"");
  DocumentModel anotherRealisationSubprojectv01Model=documentManager.getDocument(anotherRealisationSubprojectv01Ref);
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectv01Ref + ""String_Node_Str""+ anotherRealisationSubprojectv01Model+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getVersionSeriesId()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getProperty(""String_Node_Str"").getValue(String.class)+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getProperty(""String_Node_Str"").getValue(String.class));
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectModel + ""String_Node_Str""+ anotherRealisationSubprojectModel.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionSeriesId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class)+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class));
  anotherRealisationSubprojectModel.checkOut();
  DocumentRef anotherRealisationSubprojectv02Ref=anotherRealisationSubprojectModel.checkIn(VersioningOption.MINOR,""String_Node_Str"");
  DocumentModel anotherRealisationSubprojectv02Model=documentManager.getDocument(anotherRealisationSubprojectv02Ref);
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectv02Ref + ""String_Node_Str""+ anotherRealisationSubprojectv02Model+ ""String_Node_Str""+ anotherRealisationSubprojectv02Model.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectv02Model.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv02Model.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv02Model.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv02Model.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv02Model.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectv02Model.getVersionSeriesId()+ ""String_Node_Str""+ anotherRealisationSubprojectv02Model.getProperty(""String_Node_Str"").getValue(String.class)+ ""String_Node_Str""+ anotherRealisationSubprojectv02Model.getProperty(""String_Node_Str"").getValue(String.class));
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectModel + ""String_Node_Str""+ anotherRealisationSubprojectModel.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionSeriesId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class)+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class));
  anotherRealisationSubprojectModel.checkOut();
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectModel + ""String_Node_Str""+ anotherRealisationSubprojectModel.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionSeriesId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class)+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class));
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectv01Ref + ""String_Node_Str""+ anotherRealisationSubprojectv01Model+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getVersionSeriesId()+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getProperty(""String_Node_Str"").getValue(String.class)+ ""String_Node_Str""+ anotherRealisationSubprojectv01Model.getProperty(""String_Node_Str"").getValue(String.class));
  anotherRealisationSubprojectModel=documentManager.getDocument(new IdRef(anotherRealisationSubprojectId));
  DocumentRef anotherRealisationSubprojectv10Ref=anotherRealisationSubprojectModel.checkIn(VersioningOption.MAJOR,""String_Node_Str"");
  DocumentModel anotherRealisationSubprojectv10Model=documentManager.getDocument(anotherRealisationSubprojectv10Ref);
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectv10Ref + ""String_Node_Str""+ anotherRealisationSubprojectv10Model+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.getVersionSeriesId()+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.getProperty(""String_Node_Str"").getValue(String.class)+ ""String_Node_Str""+ anotherRealisationSubprojectv10Model.getProperty(""String_Node_Str"").getValue(String.class));
  System.err.println(""String_Node_Str"" + anotherRealisationSubprojectModel + ""String_Node_Str""+ anotherRealisationSubprojectModel.getId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isLatestVersion()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.isVersionSeriesCheckedOut()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionLabel()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getVersionSeriesId()+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class)+ ""String_Node_Str""+ anotherRealisationSubprojectModel.getProperty(""String_Node_Str"").getValue(String.class));
}"
20082,"@Override public ServiceInformations queryServicesWithEndpoints(String search,String subProjectId,String visibility) throws Exception {
  ServiceInformations serviceInformations=this.queryWSDLInterfaces(search,subProjectId,visibility);
  for (  ServiceInformation serviceInformation : serviceInformations.getServiceInformationList()) {
    EndpointInformations endpoints=this.queryServiceEndpoints(serviceInformation.getNuxeoID());
    serviceInformation.setEndpoints(endpoints);
  }
  return serviceInformations;
}","public ServiceInformations queryServicesWithEndpoints(String search,String subProjectId) throws Exception {
  ServiceInformations serviceInformations=this.queryWSDLInterfaces(search,subProjectId);
  for (  ServiceInformation serviceInformation : serviceInformations.getServiceInformationList()) {
    EndpointInformations endpoints=this.queryServiceEndpoints(serviceInformation.getNuxeoID());
    serviceInformation.setEndpoints(endpoints);
  }
  return serviceInformations;
}"
20083,"/** 
 */
@Override public ServiceInformations queryWSDLInterfaces(String search,String subProjectId,String visibility) throws Exception {
  CoreSession documentManager=SessionFactory.getSession(request);
  DocumentService documentService=Framework.getService(DocumentService.class);
  boolean searchParamIncluded=false;
  ArrayList<String> parameters=new ArrayList<String>();
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (search != null && !""String_Node_Str"".equals(search)) {
    String searchParam=""String_Node_Str"" + search + ""String_Node_Str"";
    query.append(""String_Node_Str"" + ""String_Node_Str"" + SoaNode.XPATH_SOANAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ WsdlInfoFacet.XPATH_WSDL_PORTTYPE_NAME+ ""String_Node_Str"");
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    searchParamIncluded=true;
  }
  if (subProjectId != null && !""String_Node_Str"".equals(subProjectId)) {
    String subProjectCriterias=""String_Node_Str"";
    DocumentModel subProjectModel=SubprojectServiceImpl.getSubprojectById(documentManager,subProjectId);
    if (subProjectModel != null) {
      subProjectCriterias=SubprojectServiceImpl.buildCriteriaSeenFromSubproject(subProjectModel);
      if (searchParamIncluded) {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
 else {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + subProjectId + ""String_Node_Str"");
    }
  }
  String nxqlQuery=NXQLQueryBuilder.getQuery(query.toString(),parameters.toArray(),false,true);
  DocumentModelList soaNodeModelList=documentService.query(documentManager,nxqlQuery,true,false);
  ServiceInformations serviceInformations=new ServiceInformations();
  for (  DocumentModel soaNodeModel : soaNodeModelList) {
    serviceInformations.addServiceInformation(SoaNodeInformationToWSDLInformationMapper.mapToServiceInformation(soaNodeModel,NUXEO_BASE_URL,documentManager));
  }
  return serviceInformations;
}","/** 
 */
@Override public ServiceInformations queryWSDLInterfaces(String search,String subProjectId) throws Exception {
  CoreSession documentManager=SessionFactory.getSession(request);
  DocumentService documentService=Framework.getService(DocumentService.class);
  boolean searchParamIncluded=false;
  ArrayList<String> parameters=new ArrayList<String>();
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (search != null && !""String_Node_Str"".equals(search)) {
    String searchParam=""String_Node_Str"" + search + ""String_Node_Str"";
    query.append(""String_Node_Str"" + ""String_Node_Str"" + SoaNode.XPATH_SOANAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ WsdlInfoFacet.XPATH_WSDL_PORTTYPE_NAME+ ""String_Node_Str"");
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    searchParamIncluded=true;
  }
  if (subProjectId != null && !""String_Node_Str"".equals(subProjectId)) {
    String subProjectCriterias=""String_Node_Str"";
    DocumentModel subProjectModel=SubprojectServiceImpl.getSubprojectById(documentManager,subProjectId);
    if (subProjectModel != null) {
      subProjectCriterias=SubprojectServiceImpl.buildCriteriaSeenFromSubproject(subProjectModel);
      if (searchParamIncluded) {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
 else {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + subProjectId + ""String_Node_Str"");
    }
  }
  String nxqlQuery=NXQLQueryBuilder.getQuery(query.toString(),parameters.toArray(),false,true);
  DocumentModelList soaNodeModelList=documentService.query(documentManager,nxqlQuery,true,false);
  ServiceInformations serviceInformations=new ServiceInformations();
  for (  DocumentModel soaNodeModel : soaNodeModelList) {
    serviceInformations.addServiceInformation(SoaNodeInformationToWSDLInformationMapper.mapToServiceInformation(soaNodeModel,NUXEO_BASE_URL,documentManager));
  }
  return serviceInformations;
}"
20084,"public static EndpointInformations queryEndpoints(CoreSession documentManager,String search,String subProjectId,String visibility) throws Exception {
  DocumentService documentService=Framework.getService(DocumentService.class);
  boolean searchParamIncluded=false;
  ArrayList<String> parameters=new ArrayList<String>();
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (search != null && !""String_Node_Str"".equals(search)) {
    String searchParam=""String_Node_Str"" + search + ""String_Node_Str"";
    query.append(""String_Node_Str"" + ""String_Node_Str"" + SoaNode.XPATH_SOANAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ WsdlInfoFacet.XPATH_WSDL_PORTTYPE_NAME+ ""String_Node_Str"");
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    searchParamIncluded=true;
  }
  if (subProjectId != null && !""String_Node_Str"".equals(subProjectId)) {
    String subProjectCriterias=""String_Node_Str"";
    DocumentModel subProjectModel=SubprojectServiceImpl.getSubprojectById(documentManager,subProjectId);
    if (subProjectModel != null) {
      subProjectCriterias=SubprojectServiceImpl.buildCriteriaSeenFromSubproject(subProjectModel);
      if (searchParamIncluded) {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
 else {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + subProjectId + ""String_Node_Str"");
    }
  }
  String nxqlQuery=NXQLQueryBuilder.getQuery(query.toString(),parameters.toArray(),false,true);
  DocumentModelList soaNodeModelList=documentService.query(documentManager,nxqlQuery,true,false);
  EndpointInformations endpointInformations=new EndpointInformations();
  for (  DocumentModel soaNodeModel : soaNodeModelList) {
    endpointInformations.addEndpointInformation(SoaNodeInformationToWSDLInformationMapper.mapToEndpointInformation(soaNodeModel,NUXEO_BASE_URL));
  }
  return endpointInformations;
}","public static EndpointInformations queryEndpoints(CoreSession documentManager,String search,String subProjectId) throws Exception {
  DocumentService documentService=Framework.getService(DocumentService.class);
  boolean searchParamIncluded=false;
  ArrayList<String> parameters=new ArrayList<String>();
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (search != null && !""String_Node_Str"".equals(search)) {
    String searchParam=""String_Node_Str"" + search + ""String_Node_Str"";
    query.append(""String_Node_Str"" + ""String_Node_Str"" + SoaNode.XPATH_SOANAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ WsdlInfoFacet.XPATH_WSDL_PORTTYPE_NAME+ ""String_Node_Str"");
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    searchParamIncluded=true;
  }
  if (subProjectId != null && !""String_Node_Str"".equals(subProjectId)) {
    String subProjectCriterias=""String_Node_Str"";
    DocumentModel subProjectModel=SubprojectServiceImpl.getSubprojectById(documentManager,subProjectId);
    if (subProjectModel != null) {
      subProjectCriterias=SubprojectServiceImpl.buildCriteriaSeenFromSubproject(subProjectModel);
      if (searchParamIncluded) {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
 else {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + subProjectId + ""String_Node_Str"");
    }
  }
  String nxqlQuery=NXQLQueryBuilder.getQuery(query.toString(),parameters.toArray(),false,true);
  DocumentModelList soaNodeModelList=documentService.query(documentManager,nxqlQuery,true,false);
  EndpointInformations endpointInformations=new EndpointInformations();
  for (  DocumentModel soaNodeModel : soaNodeModelList) {
    endpointInformations.addEndpointInformation(SoaNodeInformationToWSDLInformationMapper.mapToEndpointInformation(soaNodeModel,NUXEO_BASE_URL));
  }
  return endpointInformations;
}"
20085,"@GET @Produces(MediaType.TEXT_HTML) public Object doGetHTML(@QueryParam(""String_Node_Str"") String subProjectId,@QueryParam(""String_Node_Str"") String visibility) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  List<String> envs=new ArrayList<String>();
  DocumentModelList environments=session.query(""String_Node_Str"" + Endpoint.XPATH_ENDP_ENVIRONMENT + ""String_Node_Str""+ Endpoint.DOCTYPE);
  for (  DocumentModel model : environments) {
    envs.add((String)model.getPropertyValue(Endpoint.XPATH_ENDP_ENVIRONMENT));
  }
  CoreSession documentManager=SessionFactory.getSession(request);
  List<EndpointInformation> endpoints=SimpleRegistryServiceImpl.queryEndpoints(documentManager,""String_Node_Str"",subProjectId,visibility).getEndpointInformationList();
  return getView(""String_Node_Str"").arg(""String_Node_Str"",envs).arg(""String_Node_Str"",endpoints).arg(""String_Node_Str"",subProjectId).arg(""String_Node_Str"",visibility);
}","@GET @Produces(MediaType.TEXT_HTML) public Object doGetHTML(@QueryParam(""String_Node_Str"") String subProjectId,@QueryParam(""String_Node_Str"") String visibility) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  List<String> envs=new ArrayList<String>();
  DocumentModelList environments=session.query(""String_Node_Str"" + Endpoint.XPATH_ENDP_ENVIRONMENT + ""String_Node_Str""+ Endpoint.DOCTYPE);
  for (  DocumentModel model : environments) {
    envs.add((String)model.getPropertyValue(Endpoint.XPATH_ENDP_ENVIRONMENT));
  }
  CoreSession documentManager=SessionFactory.getSession(request);
  List<EndpointInformation> endpoints=SimpleRegistryServiceImpl.queryEndpoints(documentManager,""String_Node_Str"",subProjectId).getEndpointInformationList();
  return getView(""String_Node_Str"").arg(""String_Node_Str"",envs).arg(""String_Node_Str"",endpoints).arg(""String_Node_Str"",subProjectId).arg(""String_Node_Str"",visibility);
}"
20086,"public static EndpointInformations queryEndpoints(CoreSession documentManager,String search,String subProjectId,String visibility) throws Exception {
  DocumentService documentService=Framework.getService(DocumentService.class);
  boolean searchParamIncluded=false;
  ArrayList<String> parameters=new ArrayList<String>();
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (search != null && !""String_Node_Str"".equals(search)) {
    String searchParam=""String_Node_Str"" + search + ""String_Node_Str"";
    query.append(""String_Node_Str"" + ""String_Node_Str"" + SoaNode.XPATH_SOANAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ WsdlInfoFacet.XPATH_WSDL_PORTTYPE_NAME+ ""String_Node_Str"");
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    searchParamIncluded=true;
  }
  if (subProjectId != null && !""String_Node_Str"".equals(subProjectId)) {
    String subProjectCriterias=""String_Node_Str"";
    DocumentModel subProjectModel=SubprojectServiceImpl.getSubprojectById(documentManager,subProjectId);
    if (subProjectModel != null) {
      subProjectCriterias=SubprojectServiceImpl.buildCriteriaSeenFromSubproject(subProjectModel,visibility);
      if (searchParamIncluded) {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
 else {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + subProjectId + ""String_Node_Str"");
    }
  }
  String nxqlQuery=NXQLQueryBuilder.getQuery(query.toString(),parameters.toArray(),false,true);
  DocumentModelList soaNodeModelList=documentService.query(documentManager,nxqlQuery,true,false);
  EndpointInformations endpointInformations=new EndpointInformations();
  for (  DocumentModel soaNodeModel : soaNodeModelList) {
    endpointInformations.addEndpointInformation(SoaNodeInformationToWSDLInformationMapper.mapToEndpointInformation(soaNodeModel,NUXEO_BASE_URL));
  }
  return endpointInformations;
}","public static EndpointInformations queryEndpoints(CoreSession documentManager,String search,String subProjectId,String visibility) throws Exception {
  DocumentService documentService=Framework.getService(DocumentService.class);
  boolean searchParamIncluded=false;
  ArrayList<String> parameters=new ArrayList<String>();
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (search != null && !""String_Node_Str"".equals(search)) {
    String searchParam=""String_Node_Str"" + search + ""String_Node_Str"";
    query.append(""String_Node_Str"" + ""String_Node_Str"" + SoaNode.XPATH_SOANAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ WsdlInfoFacet.XPATH_WSDL_PORTTYPE_NAME+ ""String_Node_Str"");
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    searchParamIncluded=true;
  }
  if (subProjectId != null && !""String_Node_Str"".equals(subProjectId)) {
    String subProjectCriterias=""String_Node_Str"";
    DocumentModel subProjectModel=SubprojectServiceImpl.getSubprojectById(documentManager,subProjectId);
    if (subProjectModel != null) {
      subProjectCriterias=SubprojectServiceImpl.buildCriteriaSeenFromSubproject(subProjectModel);
      if (searchParamIncluded) {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
 else {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + subProjectId + ""String_Node_Str"");
    }
  }
  String nxqlQuery=NXQLQueryBuilder.getQuery(query.toString(),parameters.toArray(),false,true);
  DocumentModelList soaNodeModelList=documentService.query(documentManager,nxqlQuery,true,false);
  EndpointInformations endpointInformations=new EndpointInformations();
  for (  DocumentModel soaNodeModel : soaNodeModelList) {
    endpointInformations.addEndpointInformation(SoaNodeInformationToWSDLInformationMapper.mapToEndpointInformation(soaNodeModel,NUXEO_BASE_URL));
  }
  return endpointInformations;
}"
20087,"/** 
 */
@Override public ServiceInformations queryWSDLInterfaces(String search,String subProjectId,String visibility) throws Exception {
  CoreSession documentManager=SessionFactory.getSession(request);
  DocumentService documentService=Framework.getService(DocumentService.class);
  boolean searchParamIncluded=false;
  ArrayList<String> parameters=new ArrayList<String>();
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (search != null && !""String_Node_Str"".equals(search)) {
    String searchParam=""String_Node_Str"" + search + ""String_Node_Str"";
    query.append(""String_Node_Str"" + ""String_Node_Str"" + SoaNode.XPATH_SOANAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ WsdlInfoFacet.XPATH_WSDL_PORTTYPE_NAME+ ""String_Node_Str"");
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    searchParamIncluded=true;
  }
  if (subProjectId != null && !""String_Node_Str"".equals(subProjectId)) {
    String subProjectCriterias=""String_Node_Str"";
    DocumentModel subProjectModel=SubprojectServiceImpl.getSubprojectById(documentManager,subProjectId);
    if (subProjectModel != null) {
      subProjectCriterias=SubprojectServiceImpl.buildCriteriaSeenFromSubproject(subProjectModel,visibility);
      if (searchParamIncluded) {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
 else {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + subProjectId + ""String_Node_Str"");
    }
  }
  String nxqlQuery=NXQLQueryBuilder.getQuery(query.toString(),parameters.toArray(),false,true);
  DocumentModelList soaNodeModelList=documentService.query(documentManager,nxqlQuery,true,false);
  ServiceInformations serviceInformations=new ServiceInformations();
  for (  DocumentModel soaNodeModel : soaNodeModelList) {
    serviceInformations.addServiceInformation(SoaNodeInformationToWSDLInformationMapper.mapToServiceInformation(soaNodeModel,NUXEO_BASE_URL,documentManager));
  }
  return serviceInformations;
}","/** 
 */
@Override public ServiceInformations queryWSDLInterfaces(String search,String subProjectId,String visibility) throws Exception {
  CoreSession documentManager=SessionFactory.getSession(request);
  DocumentService documentService=Framework.getService(DocumentService.class);
  boolean searchParamIncluded=false;
  ArrayList<String> parameters=new ArrayList<String>();
  StringBuilder query=new StringBuilder();
  query.append(""String_Node_Str"");
  if (search != null && !""String_Node_Str"".equals(search)) {
    String searchParam=""String_Node_Str"" + search + ""String_Node_Str"";
    query.append(""String_Node_Str"" + ""String_Node_Str"" + SoaNode.XPATH_SOANAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ WsdlInfoFacet.XPATH_WSDL_PORTTYPE_NAME+ ""String_Node_Str"");
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    parameters.add(searchParam);
    searchParamIncluded=true;
  }
  if (subProjectId != null && !""String_Node_Str"".equals(subProjectId)) {
    String subProjectCriterias=""String_Node_Str"";
    DocumentModel subProjectModel=SubprojectServiceImpl.getSubprojectById(documentManager,subProjectId);
    if (subProjectModel != null) {
      subProjectCriterias=SubprojectServiceImpl.buildCriteriaSeenFromSubproject(subProjectModel);
      if (searchParamIncluded) {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
 else {
        query.append(""String_Node_Str"").append(subProjectCriterias);
      }
    }
 else {
      throw new Exception(""String_Node_Str"" + subProjectId + ""String_Node_Str"");
    }
  }
  String nxqlQuery=NXQLQueryBuilder.getQuery(query.toString(),parameters.toArray(),false,true);
  DocumentModelList soaNodeModelList=documentService.query(documentManager,nxqlQuery,true,false);
  ServiceInformations serviceInformations=new ServiceInformations();
  for (  DocumentModel soaNodeModel : soaNodeModelList) {
    serviceInformations.addServiceInformation(SoaNodeInformationToWSDLInformationMapper.mapToServiceInformation(soaNodeModel,NUXEO_BASE_URL,documentManager));
  }
  return serviceInformations;
}"
20088,"@GET @Path(""String_Node_Str"") @Produces(MediaType.TEXT_HTML) public Object doGetByTagHTML(@PathParam(""String_Node_Str"") String tagName,@QueryParam(""String_Node_Str"") String subprojectId) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  String subprojectPathCriteria;
  if (subprojectId == null || subprojectId.length() == 0) {
    subprojectPathCriteria=""String_Node_Str"";
  }
 else {
    subprojectPathCriteria=DocumentService.NXQL_AND + SubprojectServiceImpl.buildCriteriaInSubprojectUsingPathFromId(subprojectId);
  }
  String query=DocumentService.NXQL_SELECT_FROM + InformationService.DOCTYPE + DocumentService.NXQL_WHERE+ InformationService.XPATH_PARENTSIDS+ ""String_Node_Str""+ TaggingFolder.DOCTYPE+ ""String_Node_Str""+ tagName+ ""String_Node_Str""+ subprojectPathCriteria;
  DocumentModelList tagServices=docService.query(session,query,true,false);
  Template view=getView(""String_Node_Str"");
  return view.arg(""String_Node_Str"",docService.find(session,new SoaNodeId(subprojectId,TaggingFolder.DOCTYPE,tagName))).arg(""String_Node_Str"",tagServices).arg(""String_Node_Str"",subprojectId);
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.TEXT_HTML) public Object doGetByTagHTML(@PathParam(""String_Node_Str"") String tagName,@QueryParam(""String_Node_Str"") String subprojectId,@QueryParam(""String_Node_Str"") String contextSubprojectId) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  String subprojectPathCriteria;
  if (subprojectId == null || subprojectId.length() == 0) {
    subprojectPathCriteria=""String_Node_Str"";
  }
 else {
    subprojectPathCriteria=DocumentService.NXQL_AND + SubprojectServiceImpl.buildCriteriaInSubprojectUsingPathFromId(subprojectId);
  }
  String query=DocumentService.NXQL_SELECT_FROM + InformationService.DOCTYPE + DocumentService.NXQL_WHERE+ InformationService.XPATH_PARENTSIDS+ ""String_Node_Str""+ TaggingFolder.DOCTYPE+ ""String_Node_Str""+ tagName+ ""String_Node_Str""+ subprojectPathCriteria;
  DocumentModelList tagServices=docService.query(session,query,true,false);
  Template view=getView(""String_Node_Str"");
  return view.arg(""String_Node_Str"",docService.find(session,new SoaNodeId(subprojectId,TaggingFolder.DOCTYPE,tagName))).arg(""String_Node_Str"",tagServices).arg(""String_Node_Str"",subprojectId).arg(""String_Node_Str"",contextSubprojectId);
}"
20089,"@GET @Path(""String_Node_Str"") @Produces(MediaType.TEXT_HTML) public Object doGetTagsHTML(@PathParam(""String_Node_Str"") String serviceName,@QueryParam(""String_Node_Str"") String subprojectId) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  String subprojectPathCriteria;
  if (subprojectId == null || subprojectId.length() == 0) {
    subprojectPathCriteria=""String_Node_Str"";
  }
 else {
    subprojectPathCriteria=DocumentService.NXQL_AND + SubprojectServiceImpl.buildCriteriaInSubprojectUsingPathFromId(subprojectId);
  }
  DocumentModel service=docService.find(session,new SoaNodeId(subprojectId,InformationService.DOCTYPE,serviceName));
  DocumentModelList tags=session.query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + TaggingFolder.DOCTYPE + DocumentService.NXQL_WHERE_NO_PROXY+ subprojectPathCriteria);
  Template view=getView(""String_Node_Str"");
  if (service != null) {
    view.arg(""String_Node_Str"",service);
  }
  return view.arg(""String_Node_Str"",tags).arg(""String_Node_Str"",subprojectId);
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.TEXT_HTML) public Object doGetTagsHTML(@PathParam(""String_Node_Str"") String serviceName,@QueryParam(""String_Node_Str"") String subprojectId) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  String subprojectPathCriteria;
  if (subprojectId == null || subprojectId.length() == 0) {
    subprojectPathCriteria=""String_Node_Str"";
  }
 else {
    subprojectPathCriteria=DocumentService.NXQL_AND + SubprojectServiceImpl.buildCriteriaInSubprojectUsingPathFromId(subprojectId);
  }
  DocumentModel service=docService.find(session,new SoaNodeId(subprojectId,InformationService.DOCTYPE,serviceName));
  DocumentModelList tags=session.query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + TaggingFolder.DOCTYPE + DocumentService.NXQL_WHERE_NO_PROXY+ subprojectPathCriteria);
  Template view=getView(""String_Node_Str"");
  view.arg(""String_Node_Str"",service);
  return view.arg(""String_Node_Str"",tags).arg(""String_Node_Str"",subprojectId);
}"
20090,"@GET @Path(""String_Node_Str"") @Produces(MediaType.TEXT_HTML) public Object doGetByPathHTML(@PathParam(""String_Node_Str"") String serviceName,@QueryParam(""String_Node_Str"") String subprojectId) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  subprojectId=SubprojectServiceImpl.getSubprojectIdOrCreateDefault(session,subprojectId);
  DocumentModel service=docService.find(session,new SoaNodeId(subprojectId,InformationService.DOCTYPE,serviceName));
  Template view=getView(""String_Node_Str"");
  if (service != null) {
    List<DocumentModel> actualImpls=new java.util.ArrayList<DocumentModel>();
    List<DocumentModel> mockImpls=session.query(DocumentService.NXQL_SELECT_FROM + ServiceImplementation.DOCTYPE + DocumentService.NXQL_WHERE+ ""String_Node_Str""+ DocumentService.NXQL_AND+ ""String_Node_Str""+ service.getId()+ ""String_Node_Str""+ DocumentService.NXQL_AND+ ServiceImplementation.XPATH_ISMOCK+ ""String_Node_Str"");
    if (!mockImpls.isEmpty()) {
      actualImpls=session.query(DocumentService.NXQL_SELECT_FROM + ServiceImplementation.DOCTYPE + DocumentService.NXQL_WHERE_NO_PROXY+ DocumentService.NXQL_AND+ ""String_Node_Str""+ toLiteral(getIds(mockImpls)));
    }
    view=view.arg(""String_Node_Str"",service).arg(""String_Node_Str"",actualImpls).arg(""String_Node_Str"",mockImpls).arg(""String_Node_Str"",service.getAdapter(SoaNodeAdapter.class)).arg(""String_Node_Str"",subprojectId);
  }
  return view;
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.TEXT_HTML) public Object doGetByPathHTML(@PathParam(""String_Node_Str"") String serviceName,@QueryParam(""String_Node_Str"") String subprojectId,@QueryParam(""String_Node_Str"") String contextSubprojectId) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  DocumentService docService=Framework.getService(DocumentService.class);
  subprojectId=SubprojectServiceImpl.getSubprojectIdOrCreateDefault(session,subprojectId);
  DocumentModel service=docService.find(session,new SoaNodeId(subprojectId,InformationService.DOCTYPE,serviceName));
  Template view=getView(""String_Node_Str"");
  if (service != null) {
    List<DocumentModel> actualImpls=new java.util.ArrayList<DocumentModel>();
    List<DocumentModel> mockImpls=session.query(DocumentService.NXQL_SELECT_FROM + ServiceImplementation.DOCTYPE + DocumentService.NXQL_WHERE+ ""String_Node_Str""+ DocumentService.NXQL_AND+ ""String_Node_Str""+ service.getId()+ ""String_Node_Str""+ DocumentService.NXQL_AND+ ServiceImplementation.XPATH_ISMOCK+ ""String_Node_Str"");
    if (!mockImpls.isEmpty()) {
      actualImpls=session.query(DocumentService.NXQL_SELECT_FROM + ServiceImplementation.DOCTYPE + DocumentService.NXQL_WHERE_NO_PROXY+ DocumentService.NXQL_AND+ ""String_Node_Str""+ toLiteral(getIds(mockImpls)));
    }
    view=view.arg(""String_Node_Str"",service).arg(""String_Node_Str"",actualImpls).arg(""String_Node_Str"",mockImpls).arg(""String_Node_Str"",service.getAdapter(SoaNodeAdapter.class)).arg(""String_Node_Str"",subprojectId).arg(""String_Node_Str"",contextSubprojectId);
  }
  return view;
}"
20091,"@Override public void handleEvent(Event event) throws ClientException {
  EventContext context=event.getContext();
  if (!(context instanceof DocumentEventContext)) {
    return;
  }
  DocumentEventContext documentContext=(DocumentEventContext)context;
  DocumentModel sourceDocument=documentContext.getSourceDocument();
  CoreSession documentManager=documentContext.getCoreSession();
  if (sourceDocument.isVersion()) {
    return;
  }
  DocumentModel previousDocumentModel=(DocumentModel)documentContext.getProperty(""String_Node_Str"");
  match(documentManager,sourceDocument,""String_Node_Str"");
}","@Override public void handleEvent(Event event) throws ClientException {
  EventContext context=event.getContext();
  if (!(context instanceof DocumentEventContext)) {
    return;
  }
  DocumentEventContext documentContext=(DocumentEventContext)context;
  DocumentModel sourceDocument=documentContext.getSourceDocument();
  CoreSession documentManager=documentContext.getCoreSession();
  if (sourceDocument.isVersion()) {
    return;
  }
  DocumentModel previousDocumentModel=(DocumentModel)documentContext.getProperty(""String_Node_Str"");
  match(documentManager,sourceDocument,ContextVisibility.DEPTH.getValue());
}"
20092,"@Test public void testCorrelationDiscovery() throws Exception {
  List<SoaNodeId> parentDocuments=new LinkedList<SoaNodeId>();
  SoaNodeId deliverableId=new SoaNodeId(Deliverable.DOCTYPE,""String_Node_Str"");
  parentDocuments.add(deliverableId);
  SoaNodeId serviceImplId=new SoaNodeId(ServiceImplementation.DOCTYPE,""String_Node_Str"");
  parentDocuments.add(serviceImplId);
  SoaNodeId softwareCompId=new SoaNodeId(SoftwareComponent.DOCTYPE,""String_Node_Str"");
  parentDocuments.add(softwareCompId);
  discoveryService.runDiscovery(documentManager,discoveredEndpointId,null,parentDocuments,""String_Node_Str"");
  documentManager.save();
  DocumentModel foundSoftComp=documentService.find(documentManager,softwareCompId);
  Assert.assertTrue(softwareCompId + ""String_Node_Str"" + deliverableId,documentService.hasChild(documentManager,foundSoftComp,deliverableId));
  DocumentModel foundDeliverable=documentService.find(documentManager,deliverableId);
  Assert.assertTrue(deliverableId + ""String_Node_Str"" + serviceImplId,documentService.hasChild(documentManager,foundDeliverable,serviceImplId));
  DocumentModel foundServiceImpl=documentService.find(documentManager,serviceImplId);
  Assert.assertTrue(serviceImplId + ""String_Node_Str"" + discoveredEndpointId,documentService.hasChild(documentManager,foundServiceImpl,discoveredEndpointId));
  Assert.assertFalse(foundSoftComp + ""String_Node_Str"" + discoveredEndpointId,documentService.hasChild(documentManager,foundSoftComp,discoveredEndpointId));
}","@Test public void testCorrelationDiscovery() throws Exception {
  List<SoaNodeId> parentDocuments=new LinkedList<SoaNodeId>();
  SoaNodeId deliverableId=new SoaNodeId(Deliverable.DOCTYPE,""String_Node_Str"");
  parentDocuments.add(deliverableId);
  SoaNodeId serviceImplId=new SoaNodeId(ServiceImplementation.DOCTYPE,""String_Node_Str"");
  parentDocuments.add(serviceImplId);
  SoaNodeId softwareCompId=new SoaNodeId(SoftwareComponent.DOCTYPE,""String_Node_Str"");
  parentDocuments.add(softwareCompId);
  discoveryService.runDiscovery(documentManager,discoveredEndpointId,null,parentDocuments,ContextVisibility.DEPTH.getValue());
  documentManager.save();
  DocumentModel foundSoftComp=documentService.find(documentManager,softwareCompId);
  Assert.assertTrue(softwareCompId + ""String_Node_Str"" + deliverableId,documentService.hasChild(documentManager,foundSoftComp,deliverableId));
  DocumentModel foundDeliverable=documentService.find(documentManager,deliverableId);
  Assert.assertTrue(deliverableId + ""String_Node_Str"" + serviceImplId,documentService.hasChild(documentManager,foundDeliverable,serviceImplId));
  DocumentModel foundServiceImpl=documentService.find(documentManager,serviceImplId);
  Assert.assertTrue(serviceImplId + ""String_Node_Str"" + discoveredEndpointId,documentService.hasChild(documentManager,foundServiceImpl,discoveredEndpointId));
  Assert.assertFalse(foundSoftComp + ""String_Node_Str"" + discoveredEndpointId,documentService.hasChild(documentManager,foundSoftComp,discoveredEndpointId));
}"
20093,"@Test public void testMerge() throws Exception {
  properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  discoveryService.runDiscovery(documentManager,discoveredEndpointId,properties,null,""String_Node_Str"");
  documentManager.save();
  DocumentModel foundEndpoint=documentService.find(documentManager,discoveredEndpointId);
  Assert.assertEquals(""String_Node_Str"",foundEndpoint.getPropertyValue(Endpoint.XPATH_URL));
  Assert.assertEquals(""String_Node_Str"",foundEndpoint.getPropertyValue(""String_Node_Str""));
}","@Test public void testMerge() throws Exception {
  properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",""String_Node_Str"");
  discoveryService.runDiscovery(documentManager,discoveredEndpointId,properties,null,ContextVisibility.DEPTH.getValue());
  documentManager.save();
  DocumentModel foundEndpoint=documentService.find(documentManager,discoveredEndpointId);
  Assert.assertEquals(""String_Node_Str"",foundEndpoint.getPropertyValue(Endpoint.XPATH_URL));
  Assert.assertEquals(""String_Node_Str"",foundEndpoint.getPropertyValue(""String_Node_Str""));
}"
20094,"@Test public void testSimpleDiscovery() throws Exception {
  discoveredEndpointId=new EndpointId(""String_Node_Str"",""String_Node_Str"");
  properties=new HashMap<String,Object>();
  properties.put(Endpoint.XPATH_TITLE,""String_Node_Str"");
  discoveryService.runDiscovery(documentManager,discoveredEndpointId,properties,null,""String_Node_Str"");
  documentManager.save();
  foundEndpoint=documentService.find(documentManager,discoveredEndpointId);
  Assert.assertNotNull(""String_Node_Str"",foundEndpoint);
  properties.put(Endpoint.XPATH_URL,""String_Node_Str"");
  for (  Entry<String,Object> property : properties.entrySet()) {
    Assert.assertEquals(""String_Node_Str"" + property.getKey() + ""String_Node_Str"",property.getValue(),foundEndpoint.getPropertyValue(property.getKey()));
  }
}","@Test public void testSimpleDiscovery() throws Exception {
  discoveredEndpointId=new EndpointId(""String_Node_Str"",""String_Node_Str"");
  properties=new HashMap<String,Object>();
  properties.put(Endpoint.XPATH_TITLE,""String_Node_Str"");
  discoveryService.runDiscovery(documentManager,discoveredEndpointId,properties,null,ContextVisibility.DEPTH.getValue());
  documentManager.save();
  foundEndpoint=documentService.find(documentManager,discoveredEndpointId);
  Assert.assertNotNull(""String_Node_Str"",foundEndpoint);
  properties.put(Endpoint.XPATH_URL,""String_Node_Str"");
  for (  Entry<String,Object> property : properties.entrySet()) {
    Assert.assertEquals(""String_Node_Str"" + property.getKey() + ""String_Node_Str"",property.getValue(),foundEndpoint.getPropertyValue(property.getKey()));
  }
}"
20095,"@Test public void testInvalidDiscovery() throws Exception {
  properties=new HashMap<String,Object>();
  properties.put(Endpoint.XPATH_URL,""String_Node_Str"");
  try {
    discoveryService.runDiscovery(documentManager,endpointId,properties,null,""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  ModelIntegrityException e) {
    logger.info(""String_Node_Str"");
  }
  properties=new HashMap<String,Object>();
  properties.put(Endpoint.XPATH_SOANAME,""String_Node_Str"");
  try {
    discoveryService.runDiscovery(documentManager,endpointId,properties,null,""String_Node_Str"");
    Assert.fail(""String_Node_Str"");
  }
 catch (  ModelIntegrityException e) {
    logger.info(""String_Node_Str"" + e.getMessage());
  }
}","@Test public void testInvalidDiscovery() throws Exception {
  properties=new HashMap<String,Object>();
  properties.put(Endpoint.XPATH_URL,""String_Node_Str"");
  try {
    discoveryService.runDiscovery(documentManager,endpointId,properties,null,ContextVisibility.DEPTH.getValue());
    Assert.fail(""String_Node_Str"");
  }
 catch (  ModelIntegrityException e) {
    logger.info(""String_Node_Str"");
  }
  properties=new HashMap<String,Object>();
  properties.put(Endpoint.XPATH_SOANAME,""String_Node_Str"");
  try {
    discoveryService.runDiscovery(documentManager,endpointId,properties,null,ContextVisibility.DEPTH.getValue());
    Assert.fail(""String_Node_Str"");
  }
 catch (  ModelIntegrityException e) {
    logger.info(""String_Node_Str"" + e.getMessage());
  }
}"
20096,"@GET @Produces(MediaType.TEXT_HTML) public Object doGetHTML(@QueryParam(""String_Node_Str"") String subprojectId) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  Map<String,Map<String,IndicatorValue>> indicatorsByCategory=computeIndicators(subprojectId);
  HashMap<String,Integer> nbMap=new HashMap<String,Integer>();
  HashMap<String,Integer> percentMap=new HashMap<String,Integer>();
  for (  Map<String,IndicatorValue> indicatorCategory : indicatorsByCategory.values()) {
    for (    Entry<String,IndicatorValue> indicator : indicatorCategory.entrySet()) {
      if (indicator.getValue().getCount() != -1) {
        nbMap.put(indicator.getKey(),indicator.getValue().getCount());
      }
      if (indicator.getValue().getPercentage() != -1) {
        percentMap.put(indicator.getKey(),indicator.getValue().getPercentage());
      }
    }
  }
  return getView(""String_Node_Str"").arg(""String_Node_Str"",nbMap).arg(""String_Node_Str"",percentMap).arg(""String_Node_Str"",subprojectId);
}","@GET @Produces(MediaType.TEXT_HTML) public Object doGetHTML(@QueryParam(""String_Node_Str"") String subprojectId) throws Exception {
  CoreSession session=SessionFactory.getSession(request);
  if (""String_Node_Str"".equals(subprojectId)) {
    subprojectId=null;
  }
  Map<String,Map<String,IndicatorValue>> indicatorsByCategory=computeIndicators(subprojectId);
  HashMap<String,Integer> nbMap=new HashMap<String,Integer>();
  HashMap<String,Integer> percentMap=new HashMap<String,Integer>();
  for (  Map<String,IndicatorValue> indicatorCategory : indicatorsByCategory.values()) {
    for (    Entry<String,IndicatorValue> indicator : indicatorCategory.entrySet()) {
      if (indicator.getValue().getCount() != -1) {
        nbMap.put(indicator.getKey(),indicator.getValue().getCount());
      }
      if (indicator.getValue().getPercentage() != -1) {
        percentMap.put(indicator.getKey(),indicator.getValue().getPercentage());
      }
    }
  }
  return getView(""String_Node_Str"").arg(""String_Node_Str"",nbMap).arg(""String_Node_Str"",percentMap).arg(""String_Node_Str"",subprojectId);
}"
20097,"@Override public void computeTdb(Tdr tdr){
  TdrTdb tdrTdb=tdr.getTdrTdb();
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  List<Projet> projets=tdr.getProjets();
  double sommeUtilisee=0;
  int nbBeneficiaires=0;
  int nbAdultesIsoles=0;
  int nbEnfants=0;
  int nbJeunes=0;
  int nbSeniors=0;
  for (  Projet projet : projets) {
    if (""String_Node_Str"".equals(projet.getStatus())) {
      sommeUtilisee=sommeUtilisee + projet.getTotalBenefs().getMontantApv();
      nbBeneficiaires=nbBeneficiaires + projet.getTotalBenefs().getNbBeneficiaires();
      nbAdultesIsoles=nbAdultesIsoles + projet.getAdultesIsolesBenefs().getNbBeneficiaires();
      nbEnfants=nbEnfants + projet.getEnfantsBenefs().getNbBeneficiaires();
      nbJeunes=nbJeunes + projet.getJeunesBenefs().getNbBeneficiaires();
      nbSeniors=nbSeniors + projet.getSeniorsBenefs().getNbBeneficiaires();
    }
  }
  tdrTdb.setNbAdultesIsoles(nbAdultesIsoles);
  tdrTdb.setNbEnfants(nbEnfants);
  tdrTdb.setNbJeunes(nbJeunes);
  tdrTdb.setNbSeniors(nbSeniors);
  tdrTdb.setSommeUtilisee(sommeUtilisee);
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  tdrTdb.setNbBeneficiairesApv(nbBeneficiaires);
  this.update(tdr);
  this.publish(tdr);
}","@Override public void computeTdb(Tdr tdr){
  TdrTdb tdrTdb=tdr.getTdrTdb();
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  List<Projet> projets=tdr.getProjets();
  double sommeUtilisee=0;
  int nbBeneficiaires=0;
  int nbAdultesIsoles=0;
  int nbEnfants=0;
  int nbJeunes=0;
  int nbSeniors=0;
  for (  Projet projet : projets) {
    if (""String_Node_Str"".equals(projet.getStatus())) {
      sommeUtilisee=sommeUtilisee + projet.getTotalBenefs().getMontantApv();
      nbBeneficiaires=nbBeneficiaires + projet.getTotalBenefs().getNbBeneficiaires();
      nbAdultesIsoles=nbAdultesIsoles + projet.getAdultesIsolesBenefs().getNbBeneficiaires();
      nbEnfants=nbEnfants + projet.getEnfantsBenefs().getNbBeneficiaires();
      nbJeunes=nbJeunes + projet.getJeunesBenefs().getNbBeneficiaires();
      nbSeniors=nbSeniors + projet.getSeniorsBenefs().getNbBeneficiaires();
    }
  }
  tdrTdb.setNbAdultesIsoles(nbAdultesIsoles);
  tdrTdb.setNbEnfants(nbEnfants);
  tdrTdb.setNbJeunes(nbJeunes);
  tdrTdb.setNbSeniors(nbSeniors);
  tdrTdb.setSommeUtilisee(sommeUtilisee);
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  tdrTdb.setNbBeneficiairesApv(nbBeneficiaires);
  tdr.setVille(""String_Node_Str"");
  tdrDao.update(tdr);
  this.publish(tdr);
}"
20098,"@Override public void computeTdb(Tdr tdr){
  TdrTdb tdrTdb=tdr.getTdrTdb();
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  List<Projet> projets=tdr.getProjets();
  double sommeUtilisee=0;
  int nbBeneficiaires=0;
  int nbAdultesIsoles=0;
  int nbEnfants=0;
  int nbJeunes=0;
  int nbSeniors=0;
  for (  Projet projet : projets) {
    if (""String_Node_Str"".equals(projet.getStatus())) {
      sommeUtilisee=sommeUtilisee + projet.getTotalBenefs().getMontantApv();
      nbBeneficiaires=nbBeneficiaires + projet.getTotalBenefs().getNbBeneficiaires();
      nbAdultesIsoles=nbAdultesIsoles + projet.getAdultesIsolesBenefs().getNbBeneficiaires();
      nbEnfants=nbEnfants + projet.getEnfantsBenefs().getNbBeneficiaires();
      nbJeunes=nbJeunes + projet.getJeunesBenefs().getNbBeneficiaires();
      nbSeniors=nbSeniors + projet.getSeniorsBenefs().getNbBeneficiaires();
    }
  }
  tdrTdb.setNbAdultesIsoles(nbAdultesIsoles);
  tdrTdb.setNbEnfants(nbEnfants);
  tdrTdb.setNbJeunes(nbJeunes);
  tdrTdb.setNbSeniors(nbSeniors);
  tdrTdb.setSommeUtilisee(sommeUtilisee);
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  tdrTdb.setNbBeneficiairesApv(nbBeneficiaires);
  tdr.setVille(""String_Node_Str"");
  tdrDao.update(tdr);
  this.publish(tdr);
}","@Override public void computeTdb(Tdr tdr){
  TdrTdb tdrTdb=tdr.getTdrTdb();
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  List<Projet> projets=tdr.getProjets();
  double sommeUtilisee=0;
  int nbBeneficiaires=0;
  int nbAdultesIsoles=0;
  int nbEnfants=0;
  int nbJeunes=0;
  int nbSeniors=0;
  for (  Projet projet : projets) {
    if (""String_Node_Str"".equals(projet.getStatus())) {
      sommeUtilisee=sommeUtilisee + projet.getTotalBenefs().getMontantApv();
      nbBeneficiaires=nbBeneficiaires + projet.getTotalBenefs().getNbBeneficiaires();
      nbAdultesIsoles=nbAdultesIsoles + projet.getAdultesIsolesBenefs().getNbBeneficiaires();
      nbEnfants=nbEnfants + projet.getEnfantsBenefs().getNbBeneficiaires();
      nbJeunes=nbJeunes + projet.getJeunesBenefs().getNbBeneficiaires();
      nbSeniors=nbSeniors + projet.getSeniorsBenefs().getNbBeneficiaires();
    }
  }
  tdrTdb.setNbAdultesIsoles(nbAdultesIsoles);
  tdrTdb.setNbEnfants(nbEnfants);
  tdrTdb.setNbJeunes(nbJeunes);
  tdrTdb.setNbSeniors(nbSeniors);
  tdrTdb.setSommeUtilisee(sommeUtilisee);
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  tdrTdb.setNbBeneficiairesApv(nbBeneficiaires);
  tdrDao.update(tdr);
  this.publish(tdr);
}"
20099,"@Override public InformationAPV createOrUpdateInformationApv(String identifiantClient,String bilanLibelle,Integer nombre,Integer bilanAnnee) throws Exception {
  if (!InformationAPV.checkBilanLibelleValue(bilanLibelle)) {
    throw new IllegalArgumentException(""String_Node_Str"" + InformationAPV.BILAN_LIBELLE_ADULTESISOLES + ""String_Node_Str""+ InformationAPV.BILAN_LIBELLE_FAMILLES+ ""String_Node_Str""+ InformationAPV.BILAN_LIBELLE_JEUNES+ ""String_Node_Str""+ InformationAPV.BILAN_LIBELLE_SENIORS);
  }
  if (getClient(identifiantClient) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityManager entityManager=database.get();
  InformationAPV informationAPV=null;
  informationAPV=this.getInformationAPV(identifiantClient,bilanLibelle,String.valueOf(bilanAnnee));
  if (informationAPV == null) {
    informationAPV=new InformationAPV();
  }
  try {
    informationAPV.setIdentifiantClient(identifiantClient);
    informationAPV.setBilanLibelle(bilanLibelle);
    informationAPV.setNombre(nombre);
    informationAPV.setBilanAnnee(bilanAnnee);
    entityManager.getTransaction().begin();
    entityManager.persist(informationAPV);
    entityManager.getTransaction().commit();
  }
 catch (  Exception ex) {
    entityManager.getTransaction().rollback();
    LOG.log(Level.SEVERE,""String_Node_Str"" + ex.getMessage(),ex);
    throw ex;
  }
  return informationAPV;
}","@Override public InformationAPV createOrUpdateInformationApv(String identifiantClient,String bilanLibelle,Integer nombre,Integer bilanAnnee) throws Exception {
  if (!InformationAPV.checkBilanLibelleValue(bilanLibelle)) {
    throw new IllegalArgumentException(""String_Node_Str"" + InformationAPV.BILAN_LIBELLE_ADULTESISOLES + ""String_Node_Str""+ InformationAPV.BILAN_LIBELLE_ENFANTS+ ""String_Node_Str""+ InformationAPV.BILAN_LIBELLE_JEUNES+ ""String_Node_Str""+ InformationAPV.BILAN_LIBELLE_SENIORS);
  }
  if (getClient(identifiantClient) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  EntityManager entityManager=database.get();
  InformationAPV informationAPV=null;
  informationAPV=this.getInformationAPV(identifiantClient,bilanLibelle,String.valueOf(bilanAnnee));
  if (informationAPV == null) {
    informationAPV=new InformationAPV();
  }
  try {
    informationAPV.setIdentifiantClient(identifiantClient);
    informationAPV.setBilanLibelle(bilanLibelle);
    informationAPV.setNombre(nombre);
    informationAPV.setBilanAnnee(bilanAnnee);
    entityManager.getTransaction().begin();
    entityManager.persist(informationAPV);
    entityManager.getTransaction().commit();
  }
 catch (  Exception ex) {
    entityManager.getTransaction().rollback();
    LOG.log(Level.SEVERE,""String_Node_Str"" + ex.getMessage(),ex);
    throw ex;
  }
  return informationAPV;
}"
20100,"/** 
 * Check if the value of bilan libelle can be used
 * @param bilanLibelle
 * @return ture if the value can be used, false otherwise
 */
public static boolean checkBilanLibelleValue(String bilanLibelle){
  if (BILAN_LIBELLE_ADULTESISOLES.equals(bilanLibelle) || BILAN_LIBELLE_FAMILLES.equals(bilanLibelle) || BILAN_LIBELLE_JEUNES.equals(bilanLibelle)|| BILAN_LIBELLE_SENIORS.equals(bilanLibelle)) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * Check if the value of bilan libelle can be used
 * @param bilanLibelle
 * @return ture if the value can be used, false otherwise
 */
public static boolean checkBilanLibelleValue(String bilanLibelle){
  if (BILAN_LIBELLE_ADULTESISOLES.equals(bilanLibelle) || BILAN_LIBELLE_ENFANTS.equals(bilanLibelle) || BILAN_LIBELLE_JEUNES.equals(bilanLibelle)|| BILAN_LIBELLE_SENIORS.equals(bilanLibelle)) {
    return true;
  }
 else {
    return false;
  }
}"
20101,"@Override public void computeTdb(Tdr tdr){
  TdrTdb tdrTdb=tdr.getTdrTdb();
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  List<Projet> projets=tdr.getProjets();
  double sommeUtilisee=0;
  int nbBeneficiaires=0;
  int nbAdultesIsoles=0;
  int nbEnfants=0;
  int nbJeunes=0;
  int nbSeniors=0;
  for (  Projet projet : projets) {
    if (""String_Node_Str"".equals(projet.getStatus())) {
      sommeUtilisee=sommeUtilisee + projet.getTotalBenefs().getMontantApv();
      nbBeneficiaires=nbBeneficiaires + projet.getTotalBenefs().getNbBeneficiaires();
      nbAdultesIsoles=nbAdultesIsoles + projet.getAdultesIsolesBenefs().getNbBeneficiaires();
      nbEnfants=nbEnfants + projet.getEnfantsBenefs().getNbBeneficiaires();
      nbJeunes=nbJeunes + projet.getJeunesBenefs().getNbBeneficiaires();
      nbSeniors=nbSeniors + projet.getSeniorsBenefs().getNbBeneficiaires();
    }
  }
  tdrTdb.setNbAdultesIsoles(nbAdultesIsoles);
  tdrTdb.setNbEnfants(nbEnfants);
  tdrTdb.setNbJeunes(nbJeunes);
  tdrTdb.setNbSeniors(nbSeniors);
  tdrTdb.setSommeUtilisee(sommeUtilisee);
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  tdrTdb.setNbBeneficiairesApv(nbBeneficiaires);
  tdrDao.update(tdr);
  this.publish(tdr);
}","@Override public void computeTdb(Tdr tdr){
  TdrTdb tdrTdb=tdr.getTdrTdb();
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  List<Projet> projets=tdr.getProjets();
  double sommeUtilisee=0;
  int nbBeneficiaires=0;
  int nbAdultesIsoles=0;
  int nbEnfants=0;
  int nbJeunes=0;
  int nbSeniors=0;
  for (  Projet projet : projets) {
    if (""String_Node_Str"".equals(projet.getStatus())) {
      sommeUtilisee=sommeUtilisee + projet.getTotalBenefs().getMontantApv();
      nbBeneficiaires=nbBeneficiaires + projet.getTotalBenefs().getNbBeneficiaires();
      nbAdultesIsoles=nbAdultesIsoles + projet.getAdultesIsolesBenefs().getNbBeneficiaires();
      nbEnfants=nbEnfants + projet.getEnfantsBenefs().getNbBeneficiaires();
      nbJeunes=nbJeunes + projet.getJeunesBenefs().getNbBeneficiaires();
      nbSeniors=nbSeniors + projet.getSeniorsBenefs().getNbBeneficiaires();
    }
  }
  tdrTdb.setNbAdultesIsoles(nbAdultesIsoles);
  tdrTdb.setNbEnfants(nbEnfants);
  tdrTdb.setNbJeunes(nbJeunes);
  tdrTdb.setNbSeniors(nbSeniors);
  tdrTdb.setSommeUtilisee(sommeUtilisee);
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  tdrTdb.setNbBeneficiairesApv(nbBeneficiaires);
  this.update(tdr);
  this.publish(tdr);
}"
20102,"/** 
 * Get the InformationAPV with corresponding id
 * @param id
 * @return The informationAPV or null
 */
private InformationAPV getInformationAPV(String identifiantClient,String bilanLibelle,String bilanAnnee){
  try {
    Query query=this.database.get().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",identifiantClient);
    query.setParameter(""String_Node_Str"",bilanLibelle);
    query.setParameter(""String_Node_Str"",bilanAnnee);
    InformationAPV informationAPV=(InformationAPV)query.getSingleResult();
    return informationAPV;
  }
 catch (  Exception ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"" + ex.getMessage(),ex);
    return null;
  }
}","/** 
 * Get the InformationAPV with corresponding id
 * @param id
 * @return The informationAPV or null
 */
private InformationAPV getInformationAPV(String identifiantClient,String bilanLibelle,String bilanAnnee){
  try {
    Query query=this.database.get().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",identifiantClient);
    query.setParameter(""String_Node_Str"",bilanLibelle);
    query.setParameter(""String_Node_Str"",Integer.valueOf(bilanAnnee));
    InformationAPV informationAPV=(InformationAPV)query.getSingleResult();
    return informationAPV;
  }
 catch (  Exception ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"" + ex.getMessage(),ex);
    return null;
  }
}"
20103,"@Override public void approve(Projet projet){
}","@Transactional @Override public void approve(Projet projet){
}"
20104,"@Override public void approve(Tdr tdr){
}","@Transactional @Override public void approve(Tdr tdr){
}"
20105,"@Override public void computeTdb(Tdr tdr){
  TdrTdb tdrTdb=tdr.getTdrTdb();
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  List<Projet> projets=tdr.getProjets();
  double sommeUtilisee=0;
  int nbBeneficiaires=0;
  int nbAdultesIsoles=0;
  int nbEnfants=0;
  int nbJeunes=0;
  int nbSeniors=0;
  for (  Projet projet : projets) {
    if (""String_Node_Str"".equals(projet.getStatus())) {
      sommeUtilisee=sommeUtilisee + projet.getTotalBenefs().getMontantApv();
      nbBeneficiaires=nbBeneficiaires + projet.getTotalBenefs().getNbBeneficiaires();
      nbAdultesIsoles=nbAdultesIsoles + projet.getAdultesIsolesBenefs().getNbBeneficiaires();
      nbEnfants=nbEnfants + projet.getEnfantsBenefs().getNbBeneficiaires();
      nbJeunes=nbJeunes + projet.getJeunesBenefs().getNbBeneficiaires();
      nbSeniors=nbSeniors + projet.getSeniorsBenefs().getNbBeneficiaires();
    }
  }
  tdrTdb.setNbAdultesIsoles(nbAdultesIsoles);
  tdrTdb.setNbEnfants(nbEnfants);
  tdrTdb.setNbJeunes(nbJeunes);
  tdrTdb.setNbSeniors(nbSeniors);
  tdrTdb.setSommeUtilisee(sommeUtilisee);
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  tdrTdb.setNbBeneficiairesApv(nbBeneficiaires);
  this.update(tdr);
  this.publish(tdr);
}","@Transactional @Override public void computeTdb(Tdr tdr){
  TdrTdb tdrTdb=tdr.getTdrTdb();
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  List<Projet> projets=tdr.getProjets();
  double sommeUtilisee=0;
  int nbBeneficiaires=0;
  int nbAdultesIsoles=0;
  int nbEnfants=0;
  int nbJeunes=0;
  int nbSeniors=0;
  for (  Projet projet : projets) {
    if (""String_Node_Str"".equals(projet.getStatus())) {
      sommeUtilisee=sommeUtilisee + projet.getTotalBenefs().getMontantApv();
      nbBeneficiaires=nbBeneficiaires + projet.getTotalBenefs().getNbBeneficiaires();
      nbAdultesIsoles=nbAdultesIsoles + projet.getAdultesIsolesBenefs().getNbBeneficiaires();
      nbEnfants=nbEnfants + projet.getEnfantsBenefs().getNbBeneficiaires();
      nbJeunes=nbJeunes + projet.getJeunesBenefs().getNbBeneficiaires();
      nbSeniors=nbSeniors + projet.getSeniorsBenefs().getNbBeneficiaires();
    }
  }
  tdrTdb.setNbAdultesIsoles(nbAdultesIsoles);
  tdrTdb.setNbEnfants(nbEnfants);
  tdrTdb.setNbJeunes(nbJeunes);
  tdrTdb.setNbSeniors(nbSeniors);
  tdrTdb.setSommeUtilisee(sommeUtilisee);
  tdrTdb.setMontantDisponible(tdrTdb.getDotationGlobale() - tdrTdb.getSommeUtilisee());
  tdrTdb.setNbBeneficiairesApv(nbBeneficiaires);
  this.update(tdr);
  this.publish(tdr);
}"
20106,"/** 
 * Returns level indicators, in the given period (default : daily) TODO add criteria as required by UI : * endpointId & slaOrOlaName * or wider : at least environment and subprojectId (or only global environment) ; possibly componentId...  OPT paginated navigation
 * @param periodStart : if null day start, if both null returns all in the current day
 * @param periodEnd : if null now, if both null returns all in the current day
 * @param pageSize OPT pagination : number of indicators per page
 * @param pageStart OPT pagination : index of the first indicator to return (starts with 0)
 * @return SlaOrOlaIndicators array of SlaOrOlaIndicator
 * @throws Exception 
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public SlaOrOlaIndicators getSlaOrOlaIndicators(@QueryParam(""String_Node_Str"") String endpointId,@QueryParam(""String_Node_Str"") String slaOrOlaName,@QueryParam(""String_Node_Str"") String environment,@QueryParam(""String_Node_Str"") String projectId,@QueryParam(""String_Node_Str"") Date periodStart,@QueryParam(""String_Node_Str"") Date periodEnd,@QueryParam(""String_Node_Str"") int pageSize,@QueryParam(""String_Node_Str"") int pageStart) throws Exception ;","/** 
 * Returns level indicators, in the given period (default : daily) TODO add criteria as required by UI : * endpointId & slaOrOlaName * or wider : at least environment and subprojectId (or only global environment) ; possibly componentId...  OPT paginated navigation Produces : { ""slaOrOlaIndicators"":[ { ""timestamp"":1358093865529, ""endpointId"":""test"", ""slaOrOlaName"":""testSlaIndicator"", ""serviceLevelHealth"":""gold"", ""serviceLevelViolation"":false } ] }
 * @param periodStart : if null day start, if both null returns all in the current day
 * @param periodEnd : if null now, if both null returns all in the current day
 * @param pageSize OPT pagination : number of indicators per page
 * @param pageStart OPT pagination : index of the first indicator to return (starts with 0)
 * @return SlaOrOlaIndicators array of SlaOrOlaIndicator
 * @throws Exception 
 */
@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public SlaOrOlaIndicators getSlaOrOlaIndicators(@QueryParam(""String_Node_Str"") String endpointId,@QueryParam(""String_Node_Str"") String slaOrOlaName,@QueryParam(""String_Node_Str"") String environment,@QueryParam(""String_Node_Str"") String projectId,@QueryParam(""String_Node_Str"") Date periodStart,@QueryParam(""String_Node_Str"") Date periodEnd,@QueryParam(""String_Node_Str"") int pageSize,@QueryParam(""String_Node_Str"") int pageStart) throws Exception ;"
20107,"/** 
 * Creates (OPT or udpdates) each of the given indicator, for the given endpointId, levelName and timestamp. NB. endpointId et slaOrOlaName sont à récupérer du modèle EasySOA des Specifications et mettre dans la configuration de la plateforme de monitoring (d'abord manuellement puis récupérés automatiquement au démarrage étant donné l'id du sous-projet de déploiement versionné) 
 * @param SlaOrOlaIndicators : array of SlaOrOlaIndicator{endpointId, slaOrOlaName, timestamp, serviceLevelHealth=gold/silver/bronze, serviceLevelViolation=true/false}) where endpointId is the nuxeo id of the endpoint
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public void updateSlaOlaIndicators(@FormParam(""String_Node_Str"") SlaOrOlaIndicators SlaOrOlaIndicators) throws Exception ;","/** 
 * Creates (OPT or udpdates) each of the given indicator, for the given endpointId, levelName and timestamp. NB. endpointId et slaOrOlaName sont à récupérer du modèle EasySOA des Specifications et mettre dans la configuration de la plateforme de monitoring (d'abord manuellement puis récupérés automatiquement au démarrage étant donné l'id du sous-projet de déploiement versionné) 
 * @param SlaOrOlaIndicators : array of SlaOrOlaIndicatorConsumes : { ""slaOrOlaIndicators"":[ { ""timestamp"":1358093865529, ""endpointId"":""test"", ""slaOrOlaName"":""testSlaIndicator"", ""serviceLevelHealth"":""gold"", ""serviceLevelViolation"":false } ] } where endpointId is the nuxeo id of the endpoint
 * @throws Exception
 */
@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public void updateSlaOlaIndicators(SlaOrOlaIndicators SlaOrOlaIndicators) throws Exception ;"
20108,"/** 
 * @see org.easysoa.registry.rest.integration.EndpointStateService#updateSlaOlaIndicators(SlaOrOlaIndicator[])
 */
@Override public void updateSlaOlaIndicators(SlaOrOlaIndicators slaOrOlaIndicators) throws Exception {
  DirectoryService directoryService=Framework.getService(DirectoryService.class);
  if (slaOrOlaIndicators != null) {
    Session session=directoryService.open(""String_Node_Str"");
    if (session == null) {
      throw new Exception(""String_Node_Str"");
    }
    try {
      for (      SlaOrOlaIndicator indicator : slaOrOlaIndicators.getSlaOrOlaIndicatorList()) {
        Map<String,Serializable> parameters=new HashMap<String,Serializable>();
        parameters.put(""String_Node_Str"",indicator.getSlaOrOlaName());
        parameters.put(""String_Node_Str"",indicator.getEndpointId());
        DocumentModelList documentModelList=session.query(parameters);
        DocumentModel indicatorModel;
        if (documentModelList != null) {
          indicatorModel=documentModelList.get(0);
          indicatorModel.setPropertyValue(""String_Node_Str"",indicator.getServiceLevelHealth());
          indicatorModel.setPropertyValue(""String_Node_Str"",indicator.isServiceLevelViolation());
          indicatorModel.setPropertyValue(""String_Node_Str"",indicator.getTimestamp());
          session.updateEntry(indicatorModel);
        }
 else {
          Map<String,Object> properties=new HashMap<String,Object>();
          properties.put(""String_Node_Str"",indicator.getEndpointId());
          properties.put(""String_Node_Str"",indicator.getSlaOrOlaName());
          properties.put(""String_Node_Str"",indicator.getServiceLevelHealth().toString());
          properties.put(""String_Node_Str"",String.valueOf(indicator.isServiceLevelViolation()));
          Calendar calendar=new GregorianCalendar();
          calendar.setTime(indicator.getTimestamp());
          properties.put(""String_Node_Str"",calendar);
          session.createEntry(properties);
        }
      }
      session.commit();
      session.close();
    }
 catch (    Exception ex) {
      session.rollback();
      session.close();
      throw new Exception(""String_Node_Str"",ex);
    }
  }
}","/** 
 * @see org.easysoa.registry.rest.integration.EndpointStateService#updateSlaOlaIndicators(SlaOrOlaIndicator[])
 */
@Override public void updateSlaOlaIndicators(SlaOrOlaIndicators slaOrOlaIndicators) throws Exception {
  DirectoryService directoryService=Framework.getService(DirectoryService.class);
  if (slaOrOlaIndicators != null) {
    Session session=directoryService.open(""String_Node_Str"");
    if (session == null) {
      throw new Exception(""String_Node_Str"");
    }
    try {
      for (      SlaOrOlaIndicator indicator : slaOrOlaIndicators.getSlaOrOlaIndicatorList()) {
        Map<String,Serializable> parameters=new HashMap<String,Serializable>();
        parameters.put(""String_Node_Str"",indicator.getSlaOrOlaName());
        parameters.put(""String_Node_Str"",indicator.getEndpointId());
        DocumentModelList documentModelList=session.query(parameters);
        DocumentModel indicatorModel;
        if (documentModelList != null && documentModelList.size() > 0) {
          indicatorModel=documentModelList.get(0);
          indicatorModel.setPropertyValue(""String_Node_Str"",indicator.getServiceLevelHealth().toString());
          indicatorModel.setPropertyValue(""String_Node_Str"",String.valueOf(indicator.isServiceLevelViolation()));
          indicatorModel.setPropertyValue(""String_Node_Str"",indicator.getTimestamp());
          session.updateEntry(indicatorModel);
        }
 else {
          Map<String,Object> properties=new HashMap<String,Object>();
          properties.put(""String_Node_Str"",indicator.getEndpointId());
          properties.put(""String_Node_Str"",indicator.getSlaOrOlaName());
          properties.put(""String_Node_Str"",indicator.getServiceLevelHealth().toString());
          properties.put(""String_Node_Str"",indicator.isServiceLevelViolation());
          if (indicator.getTimestamp() != null) {
            GregorianCalendar calendar=new GregorianCalendar();
            calendar.setTime(indicator.getTimestamp());
            properties.put(""String_Node_Str"",calendar);
          }
          session.createEntry(properties);
        }
      }
      session.commit();
      session.close();
    }
 catch (    Exception ex) {
      session.rollback();
      session.close();
      throw new Exception(""String_Node_Str"",ex);
    }
  }
}"
20109,"/** 
 * Init the tests
 * @throws Exception
 */
@Before public void init() throws Exception {
  Session session=directoryService.open(""String_Node_Str"");
  try {
    Map<String,Object> properties=new HashMap<String,Object>();
    properties.put(""String_Node_Str"",ENDPOINT_ID);
    properties.put(""String_Node_Str"",INDICATOR_NAME);
    properties.put(""String_Node_Str"",SERVICE_LEVEL_HEALTH);
    properties.put(""String_Node_Str"",false);
    Calendar calendar=new GregorianCalendar();
    calendar.set(2012,12,13,17,17,45);
    properties.put(""String_Node_Str"",calendar);
    session.createEntry(properties);
    session.commit();
    session.close();
  }
 catch (  Exception ex) {
    session.rollback();
    session.close();
    ex.printStackTrace();
  }
}","/** 
 * Init the tests
 * @throws Exception
 */
@Before public void init() throws Exception {
  if (!initDone) {
    Session session=directoryService.open(""String_Node_Str"");
    try {
      Map<String,Object> properties=new HashMap<String,Object>();
      properties.put(""String_Node_Str"",ENDPOINT_ID);
      properties.put(""String_Node_Str"",INDICATOR_NAME);
      properties.put(""String_Node_Str"",SERVICE_LEVEL_HEALTH);
      properties.put(""String_Node_Str"",false);
      Calendar calendar=new GregorianCalendar();
      calendar.set(2012,12,13,17,17,45);
      properties.put(""String_Node_Str"",calendar);
      session.createEntry(properties);
      session.commit();
      session.close();
    }
 catch (    Exception ex) {
      session.rollback();
      session.close();
      ex.printStackTrace();
    }
    initDone=true;
  }
}"
20110,"/** 
 * Test the updateSlaOlaIndicators REST operation
 */
@Test @Ignore public void updateSlaOlaIndicatorsTest(){
  logTestName(logger);
  Client client=createAuthenticatedHTTPClient();
  WebResource discoveryRequest=client.resource(endpointStateService.getRootURL()).path(""String_Node_Str"");
}","/** 
 * Test the updateSlaOlaIndicators REST operation
 */
@Test public void updateSlaOlaIndicatorsTest(){
  logTestName(logger);
  Client client=createAuthenticatedHTTPClient();
  WebResource discoveryRequest=client.resource(endpointStateService.getRootURL()).path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
  SlaOrOlaIndicators slaOrOlaIndicators=discoveryRequest.get(SlaOrOlaIndicators.class);
  Assert.assertNotNull(slaOrOlaIndicators);
  Assert.assertEquals(1,slaOrOlaIndicators.getSlaOrOlaIndicatorList().size());
  SlaOrOlaIndicator indicator=slaOrOlaIndicators.getSlaOrOlaIndicatorList().get(0);
  Assert.assertEquals(""String_Node_Str"",indicator.getEndpointId());
  Assert.assertEquals(""String_Node_Str"",indicator.getSlaOrOlaName());
  Assert.assertEquals(""String_Node_Str"",indicator.getServiceLevelHealth().toString());
  Assert.assertEquals(false,indicator.isServiceLevelViolation());
  discoveryRequest=client.resource(endpointStateService.getRootURL()).path(""String_Node_Str"");
  SlaOrOlaIndicators slaOrOlaIndicatorsUpdate=new SlaOrOlaIndicators();
  SlaOrOlaIndicator indicatorUpdate=new SlaOrOlaIndicator();
  indicatorUpdate.setEndpointId(ENDPOINT_ID);
  indicatorUpdate.setSlaOrOlaName(INDICATOR_NAME);
  indicatorUpdate.setServiceLevelViolation(true);
  indicatorUpdate.setServiceLevelHealth(ServiceLevelHealth.bronze);
  Calendar calendar=new GregorianCalendar();
  calendar.set(2012,12,13,17,17,45);
  indicatorUpdate.setTimestamp(calendar.getTime());
  slaOrOlaIndicatorsUpdate.getSlaOrOlaIndicatorList().add(indicatorUpdate);
  discoveryRequest.post(slaOrOlaIndicatorsUpdate);
  discoveryRequest=client.resource(endpointStateService.getRootURL()).path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
  slaOrOlaIndicators=discoveryRequest.get(SlaOrOlaIndicators.class);
  Assert.assertNotNull(slaOrOlaIndicators);
  Assert.assertEquals(1,slaOrOlaIndicators.getSlaOrOlaIndicatorList().size());
  indicator=slaOrOlaIndicators.getSlaOrOlaIndicatorList().get(0);
  Assert.assertEquals(""String_Node_Str"",indicator.getEndpointId());
  Assert.assertEquals(""String_Node_Str"",indicator.getSlaOrOlaName());
  Assert.assertEquals(""String_Node_Str"",indicator.getServiceLevelHealth().toString());
  Assert.assertEquals(true,indicator.isServiceLevelViolation());
  discoveryRequest=client.resource(endpointStateService.getRootURL()).path(""String_Node_Str"");
  SlaOrOlaIndicators slaOrOlaIndicatorsCreate=new SlaOrOlaIndicators();
  SlaOrOlaIndicator indicatorCreate=new SlaOrOlaIndicator();
  indicatorCreate.setEndpointId(""String_Node_Str"");
  indicatorCreate.setSlaOrOlaName(""String_Node_Str"");
  indicatorCreate.setServiceLevelViolation(true);
  indicatorCreate.setServiceLevelHealth(ServiceLevelHealth.silver);
  calendar=new GregorianCalendar();
  calendar.set(2012,10,10,23,47,13);
  indicatorCreate.setTimestamp(calendar.getTime());
  slaOrOlaIndicatorsCreate.getSlaOrOlaIndicatorList().add(indicatorCreate);
  discoveryRequest.post(slaOrOlaIndicatorsCreate);
  discoveryRequest=client.resource(endpointStateService.getRootURL()).path(""String_Node_Str"");
  slaOrOlaIndicators=discoveryRequest.get(SlaOrOlaIndicators.class);
  Assert.assertNotNull(slaOrOlaIndicators);
  Assert.assertEquals(2,slaOrOlaIndicators.getSlaOrOlaIndicatorList().size());
  discoveryRequest=client.resource(endpointStateService.getRootURL()).path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
  slaOrOlaIndicators=discoveryRequest.get(SlaOrOlaIndicators.class);
  indicator=slaOrOlaIndicators.getSlaOrOlaIndicatorList().get(0);
  Assert.assertEquals(""String_Node_Str"",indicator.getEndpointId());
  Assert.assertEquals(""String_Node_Str"",indicator.getSlaOrOlaName());
  Assert.assertEquals(""String_Node_Str"",indicator.getServiceLevelHealth().toString());
  Assert.assertEquals(true,indicator.isServiceLevelViolation());
}"
20111,"@Override public Collection<SoaNodeInformation> findWSImplementations(JavaSource[] sources,Map<String,JavaServiceInterfaceInformation> wsInterfaces,MavenDeliverableInformation mavenDeliverable,CodeDiscoveryRegistryClient registryClient,Log log) throws Exception {
  List<SoaNodeInformation> discoveredNodes=new ArrayList<SoaNodeInformation>();
  for (  JavaSource source : sources) {
    JavaClass[] classes=source.getClasses();
    for (    JavaClass c : classes) {
      JavaClass itfClass=getWsItf(c,wsInterfaces);
      if (!c.isInterface() && (ParsingUtils.hasAnnotation(c,ANN_WS) || itfClass != null)) {
        JavaServiceInterfaceInformation interfaceInfo=null;
        String wsNamespace=null, wsName=null, serviceName=null;
        if (itfClass != null) {
          implsToInterfaces.put(c.asType(),itfClass.asType().getFullyQualifiedName());
          interfaceInfo=wsInterfaces.get(itfClass.getFullyQualifiedName());
          wsNamespace=interfaceInfo.getWsNamespace();
          wsName=interfaceInfo.getWsName();
          if (wsName == null) {
            wsName=itfClass.getName();
          }
        }
 else {
          log.warn(""String_Node_Str"" + c.getFullyQualifiedName());
        }
        if (ParsingUtils.hasAnnotation(c,ANN_WS)) {
          Annotation wsAnnotation=ParsingUtils.getAnnotation(c,ANN_WS);
          if (wsAnnotation.getNamedParameter(""String_Node_Str"") != null) {
            wsName=(String)wsAnnotation.getNamedParameter(""String_Node_Str"");
          }
          if (wsAnnotation.getNamedParameter(""String_Node_Str"") != null) {
            wsNamespace=(String)wsAnnotation.getNamedParameter(""String_Node_Str"");
          }
          serviceName=(String)wsAnnotation.getNamedParameter(""String_Node_Str"");
        }
        if (serviceName == null) {
          serviceName=c.getName();
        }
        JavaServiceImplementationInformation serviceImpl=new JavaServiceImplementationInformation(wsNamespace + ""String_Node_Str"" + wsName+ ""String_Node_Str""+ serviceName);
        serviceImpl.setTitle(c.getName());
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_WSDL_PORTTYPE_NAME,""String_Node_Str"" + wsNamespace + ""String_Node_Str""+ wsName);
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_WSDL_SERVICE_NAME,""String_Node_Str"" + wsNamespace + ""String_Node_Str""+ serviceName);
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_TECHNOLOGY,""String_Node_Str"");
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_ISMOCK,c.getSource().getURL().getPath().contains(""String_Node_Str""));
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_IMPLEMENTATIONCLASS,c.getFullyQualifiedName());
        if (itfClass != null) {
          serviceImpl.setProperty(JavaServiceImplementation.XPATH_IMPLEMENTEDINTERFACE,itfClass.getFullyQualifiedName());
          if (interfaceInfo != null) {
            serviceImpl.setProperty(JavaServiceImplementation.XPATH_IMPLEMENTEDINTERFACELOCATION,interfaceInfo.getMavenDeliverableId().getName());
          }
        }
        serviceImpl.addParentDocument(mavenDeliverable.getSoaNodeId());
        if (itfClass != null) {
          String itfClassName=itfClass.getName();
          InformationServiceInformation informationService=new InformationServiceInformation(wsNamespace + ""String_Node_Str"" + wsName);
          informationService.setProperty(InformationService.XPATH_WSDL_PORTTYPE_NAME,""String_Node_Str"" + wsNamespace + ""String_Node_Str""+ wsName);
          informationService.setTitle(itfClassName.substring(itfClassName.lastIndexOf(""String_Node_Str"") + 1));
          serviceImpl.setProperty(JavaServiceImplementation.XPATH_DOCUMENTATION,itfClass.getComment());
          discoveredNodes.add(informationService);
          List<OperationImplementation> operations=serviceImpl.getOperations();
          for (          JavaMethod method : itfClass.getMethods()) {
            if (ParsingUtils.hasAnnotation(method,ANN_WEBRESULT)) {
              Annotation webResultAnn=ParsingUtils.getAnnotation(method,ANN_WEBRESULT);
              StringBuilder parametersInfo=new StringBuilder();
              for (              JavaParameter parameter : method.getParameters()) {
                Annotation webParamAnn=ParsingUtils.getAnnotation(parameter,ANN_WEBPARAM);
                parametersInfo.append(webParamAnn.getProperty(""String_Node_Str"").getParameterValue() + ""String_Node_Str"" + parameter.getType().toString()+ ""String_Node_Str"");
              }
              operations.add(new OperationImplementation(webResultAnn.getProperty(""String_Node_Str"").toString(),parametersInfo.delete(parametersInfo.length() - 2,parametersInfo.length()).toString(),method.getComment()));
            }
          }
          serviceImpl.setOperations(operations);
        }
        discoveredNodes.add(serviceImpl);
      }
    }
  }
  return discoveredNodes;
}","@Override public Collection<SoaNodeInformation> findWSImplementations(JavaSource[] sources,Map<String,JavaServiceInterfaceInformation> wsInterfaces,MavenDeliverableInformation mavenDeliverable,CodeDiscoveryRegistryClient registryClient,Log log) throws Exception {
  List<SoaNodeInformation> discoveredNodes=new ArrayList<SoaNodeInformation>();
  for (  JavaSource source : sources) {
    JavaClass[] classes=source.getClasses();
    for (    JavaClass c : classes) {
      JavaClass itfClass=getWsItf(c,wsInterfaces);
      if (!c.isInterface() && (ParsingUtils.hasAnnotation(c,ANN_WS) || itfClass != null)) {
        JavaServiceInterfaceInformation interfaceInfo=null;
        String wsNamespace=null, wsName=null, serviceName=null;
        if (itfClass != null) {
          implsToInterfaces.put(c.asType(),itfClass.asType().getFullyQualifiedName());
          interfaceInfo=wsInterfaces.get(itfClass.getFullyQualifiedName());
          wsNamespace=interfaceInfo.getWsNamespace();
          wsName=interfaceInfo.getWsName();
          if (wsName == null) {
            wsName=itfClass.getName();
          }
        }
 else {
          log.warn(""String_Node_Str"" + c.getFullyQualifiedName());
        }
        if (ParsingUtils.hasAnnotation(c,ANN_WS)) {
          Annotation wsAnnotation=ParsingUtils.getAnnotation(c,ANN_WS);
          if (wsAnnotation.getNamedParameter(""String_Node_Str"") != null) {
            wsName=(String)wsAnnotation.getNamedParameter(""String_Node_Str"");
          }
          if (wsAnnotation.getNamedParameter(""String_Node_Str"") != null) {
            wsNamespace=(String)wsAnnotation.getNamedParameter(""String_Node_Str"");
          }
          serviceName=(String)wsAnnotation.getNamedParameter(""String_Node_Str"");
        }
        if (serviceName == null) {
          serviceName=c.getName();
        }
        JavaServiceImplementationInformation serviceImpl=new JavaServiceImplementationInformation(wsNamespace + ""String_Node_Str"" + wsName+ ""String_Node_Str""+ serviceName);
        serviceImpl.setTitle(c.getName());
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_WSDL_PORTTYPE_NAME,""String_Node_Str"" + wsNamespace + ""String_Node_Str""+ wsName);
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_WSDL_SERVICE_NAME,""String_Node_Str"" + wsNamespace + ""String_Node_Str""+ serviceName);
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_TECHNOLOGY,""String_Node_Str"");
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_ISMOCK,c.getSource().getURL().getPath().contains(""String_Node_Str""));
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_IMPLEMENTATIONCLASS,c.getFullyQualifiedName());
        if (itfClass != null) {
          serviceImpl.setProperty(JavaServiceImplementation.XPATH_IMPLEMENTEDINTERFACE,itfClass.getFullyQualifiedName());
          if (interfaceInfo != null) {
            serviceImpl.setProperty(JavaServiceImplementation.XPATH_IMPLEMENTEDINTERFACELOCATION,interfaceInfo.getMavenDeliverableId().getName());
          }
        }
        serviceImpl.addParentDocument(mavenDeliverable.getSoaNodeId());
        if (itfClass != null) {
          String itfClassName=itfClass.getName();
          InformationServiceInformation informationService=new InformationServiceInformation(wsNamespace + ""String_Node_Str"" + wsName);
          informationService.setProperty(InformationService.XPATH_WSDL_PORTTYPE_NAME,""String_Node_Str"" + wsNamespace + ""String_Node_Str""+ wsName);
          informationService.setTitle(itfClassName.substring(itfClassName.lastIndexOf(""String_Node_Str"") + 1));
          serviceImpl.setProperty(JavaServiceImplementation.XPATH_DOCUMENTATION,itfClass.getComment());
          discoveredNodes.add(informationService);
          List<OperationImplementation> operations=serviceImpl.getOperations();
          for (          JavaMethod method : itfClass.getMethods()) {
            if (ParsingUtils.hasAnnotation(method,ANN_WEBRESULT)) {
              Annotation webResultAnn=ParsingUtils.getAnnotation(method,ANN_WEBRESULT);
              StringBuilder parametersInfo=new StringBuilder();
              for (              JavaParameter parameter : method.getParameters()) {
                Annotation webParamAnn=ParsingUtils.getAnnotation(parameter,ANN_WEBPARAM);
                parametersInfo.append(webParamAnn.getProperty(""String_Node_Str"").getParameterValue() + ""String_Node_Str"" + parameter.getType().toString()+ ""String_Node_Str"");
              }
              operations.add(new OperationImplementation(webResultAnn.getProperty(""String_Node_Str"").toString(),(parametersInfo.length() > 2) ? parametersInfo.delete(parametersInfo.length() - 2,parametersInfo.length()).toString() : null,method.getComment()));
            }
          }
          serviceImpl.setOperations(operations);
        }
        discoveredNodes.add(serviceImpl);
      }
    }
  }
  return discoveredNodes;
}"
20112,"@Override public ArrayOfString contactClient(String identifiantClient,String nomContact,String prenomContact,String fonctionContact,String telephone,String email,String numEtVoie,String codePostal,String ville,String pays){
  ArrayOfString arrayOfString=new ArrayOfString();
  ContactClient contactClient=clientService.createContactClient(identifiantClient,nomContact,prenomContact,fonctionContact,telephone,email,numEtVoie,codePostal,ville,pays);
  arrayOfString.string.add(contactClient.getIdentifiantClient());
  return arrayOfString;
}","@Override public ArrayOfString contactClient(String identifiantClient,String nomContact,String prenomContact,String fonctionContact,String telephone,String email,String numEtVoie,String codePostal,String ville,String pays){
  ArrayOfString arrayOfString=new ArrayOfString();
  ContactClient contactClient=clientService.createContactClient(identifiantClient,nomContact,prenomContact,fonctionContact,telephone,email,numEtVoie,codePostal,ville,pays);
  arrayOfString.getString().add(contactClient.getIdentifiantClient());
  return arrayOfString;
}"
20113,"@Override public ArrayOfString informationAPV(String identifiantClient,String bilanLibelle,Integer nombre,Integer bilanAnnee){
  ArrayOfString arrayOfString=new ArrayOfString();
  InformationAPV informationApv=clientService.createInformationApv(identifiantClient,bilanLibelle,nombre,bilanAnnee);
  arrayOfString.string.add(informationApv.getIdentifiantClient());
  return arrayOfString;
}","@Override public ArrayOfString informationAPV(String identifiantClient,String bilanLibelle,Integer nombre,Integer bilanAnnee){
  ArrayOfString arrayOfString=new ArrayOfString();
  InformationAPV informationApv=clientService.createInformationApv(identifiantClient,bilanLibelle,nombre,bilanAnnee);
  arrayOfString.getString().add(informationApv.getIdentifiantClient());
  return arrayOfString;
}"
20114,"@Override public ArrayOfString client(String identifiantClient,String raisonSociale,Integer anciennete,String typeStructure,String numEtVoie,String email,String codePostal,String ville,String pays,String tel,String rib,String formeJuridique,String siren,BigDecimal dotGlobAPVN,BigDecimal dontReliquatN1,BigDecimal dontDotN,BigDecimal nbBenefPrevN,BigDecimal montantUtiliseN,BigDecimal nbBenefN){
  ArrayOfString arrayOfString=new ArrayOfString();
  Client client=clientService.createClient(identifiantClient,raisonSociale,siren,email);
  arrayOfString.string.add(client.getIdentifiantClient());
  return arrayOfString;
}","@Override public ArrayOfString client(String identifiantClient,String raisonSociale,Integer anciennete,String typeStructure,String numEtVoie,String email,String codePostal,String ville,String pays,String tel,String rib,String formeJuridique,String siren,BigDecimal dotGlobAPVN,BigDecimal dontReliquatN1,BigDecimal dontDotN,BigDecimal nbBenefPrevN,BigDecimal montantUtiliseN,BigDecimal nbBenefN){
  ArrayOfString arrayOfString=new ArrayOfString();
  Client client=clientService.createClient(identifiantClient,raisonSociale,siren,email);
  arrayOfString.getString().add(client.getIdentifiantClient());
  return arrayOfString;
}"
20115,"@Override public String classify(CoreSession documentManager,DocumentModel model) throws Exception {
  if (!Deliverable.DOCTYPE.equals(model.getType())) {
    return null;
  }
  Deliverable deliverable=model.getAdapter(Deliverable.class);
  if (!MavenDeliverable.NATURE.equals(deliverable.getNature())) {
    return null;
  }
  try {
    MavenDeliverable mavenDeliverable=model.getAdapter(MavenDeliverable.class);
    String groupId=mavenDeliverable.getGroupId();
    String classification=""String_Node_Str"", groupPrefix=""String_Node_Str"";
    String[] groups=groupId.split(""String_Node_Str"");
    for (    String group : groups) {
      classification+=groupPrefix + group + ""String_Node_Str"";
      groupPrefix+=group + ""String_Node_Str"";
    }
    if (groups.length > 1) {
      classification=classification.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
    return classification;
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
}","@Override public String classify(CoreSession documentManager,DocumentModel model) throws Exception {
  if (!Deliverable.DOCTYPE.equals(model.getType())) {
    return null;
  }
  Deliverable deliverable=model.getAdapter(Deliverable.class);
  if (!MavenDeliverable.NATURE.equals(deliverable.getNature())) {
    return null;
  }
  try {
    MavenDeliverable mavenDeliverable=model.getAdapter(MavenDeliverable.class);
    if (mavenDeliverable == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    String groupId=mavenDeliverable.getGroupId();
    String classification=""String_Node_Str"", groupPrefix=""String_Node_Str"";
    String[] groups=groupId.split(""String_Node_Str"");
    for (    String group : groups) {
      classification+=groupPrefix + group + ""String_Node_Str"";
      groupPrefix+=group + ""String_Node_Str"";
    }
    if (groups.length > 1) {
      classification=classification.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
    return classification;
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"" + e.getMessage());
    return null;
  }
}"
20116,"public void resetInheritedFacets(DocumentModel model) throws Exception {
  SchemaManager schemaManager=Framework.getService(SchemaManager.class);
  for (  String inheritedFacet : getInheritedFacets(model.getFacets())) {
    CompositeType facetToReset=schemaManager.getFacet(inheritedFacet);
    for (    Schema schemaToReset : facetToReset.getSchemas()) {
      for (      Field fieldToReset : schemaToReset.getFields()) {
        model.setPropertyValue(fieldToReset.getName().toString(),null);
      }
    }
  }
}","public void resetInheritedFacets(DocumentModel model) throws Exception {
  SchemaManager schemaManager=Framework.getService(SchemaManager.class);
  for (  String inheritedFacet : getInheritedFacets(model.getFacets())) {
    CompositeType facetToReset=schemaManager.getFacet(inheritedFacet);
    InheritedFacetDescriptor inheritedFacetDesc=inheritedFacets.get(inheritedFacet);
    boolean isFacetInherited=false;
    for (    TransferLogic transferLogic : inheritedFacetDesc.transferLogicList) {
      if (model.getType().equals(transferLogic.to)) {
        isFacetInherited=true;
        break;
      }
    }
    if (isFacetInherited) {
      for (      Schema schemaToReset : facetToReset.getSchemas()) {
        for (        Field fieldToReset : schemaToReset.getFields()) {
          model.setPropertyValue(fieldToReset.getName().toString(),null);
        }
      }
    }
  }
}"
20117,"/** 
 * Transform a SoaNodeInformation object to a WSDLInformation object
 * @param nodeInformation
 * @return
 */
public static WSDLInformation mapToWSDLInformation(DocumentModel nodeModel,String nuxeoBaseUrl) throws Exception {
  WSDLInformation wsdlInformation=new WSDLInformation();
  wsdlInformation.setSoaName((String)nodeModel.getPropertyValue(""String_Node_Str""));
  wsdlInformation.setProjectID(""String_Node_Str"");
  wsdlInformation.setName((String)nodeModel.getPropertyValue(""String_Node_Str""));
  wsdlInformation.setDescription((String)nodeModel.getPropertyValue(""String_Node_Str""));
  wsdlInformation.setNuxeoID(nodeModel.getId());
  wsdlInformation.setObjectType(nodeModel.getType());
  wsdlInformation.setEndpoint(""String_Node_Str"");
  Blob blob=(Blob)nodeModel.getPropertyValue(""String_Node_Str"");
  if (blob != null) {
    wsdlInformation.setWsdlDownloadUrl(buildWsdlDownloadUrl(nuxeoBaseUrl,nodeModel.getId(),blob.getFilename()));
  }
 else {
    wsdlInformation.setWsdlDownloadUrl(""String_Node_Str"");
  }
  return wsdlInformation;
}","/** 
 * Transform a SoaNodeInformation object to a WSDLInformation object
 * @param nodeInformation
 * @return
 */
public static WSDLInformation mapToWSDLInformation(DocumentModel nodeModel,String nuxeoBaseUrl) throws Exception {
  WSDLInformation wsdlInformation=new WSDLInformation();
  wsdlInformation.setSoaName((String)nodeModel.getPropertyValue(""String_Node_Str""));
  wsdlInformation.setProjectID(""String_Node_Str"");
  wsdlInformation.setName((String)nodeModel.getPropertyValue(""String_Node_Str""));
  wsdlInformation.setDescription((String)nodeModel.getPropertyValue(""String_Node_Str""));
  wsdlInformation.setNuxeoID(nodeModel.getId());
  wsdlInformation.setObjectType(nodeModel.getType());
  wsdlInformation.setEndpoint(""String_Node_Str"");
  try {
    Blob blob=(Blob)nodeModel.getPropertyValue(""String_Node_Str"");
    if (blob != null) {
      wsdlInformation.setWsdlDownloadUrl(buildWsdlDownloadUrl(nuxeoBaseUrl,nodeModel.getId(),blob.getFilename()));
    }
 else {
      wsdlInformation.setWsdlDownloadUrl(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    wsdlInformation.setWsdlDownloadUrl(""String_Node_Str"");
  }
  return wsdlInformation;
}"
20118,"/** 
 * Init the tests
 * @throws Exception
 */
@Before public void init() throws Exception {
  if (!initDone) {
    HashMap<String,Object> isProperties=new HashMap<String,Object>();
    discoveryService.runDiscovery(documentManager,INFORMATIONSERVICE_TEST_WITHOUT_POPRTTYPE_ID,isProperties,null);
    isProperties.put(WsdlInfo.XPATH_WSDL_PORTTYPE_NAME,""String_Node_Str"");
    discoveryService.runDiscovery(documentManager,INFORMATIONSERVICE_TEST_ID,isProperties,null);
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    DocumentModel infoService=discoveryService.runDiscovery(documentManager,INFORMATIONSERVICE_TEST_WITH_PLATFORM_METAS_ID,isProperties,null);
    infoService.setPropertyValue(SoaNode.XPATH_SOANAME,anotherName);
    infoService.setPropertyValue(""String_Node_Str"",anotherTitle);
    infoService.setPropertyValue(""String_Node_Str"",anotherDescription);
    StringBlob blob=new StringBlob(""String_Node_Str"");
    blob.setFilename(""String_Node_Str"");
    infoService.setPropertyValue(""String_Node_Str"",blob);
    documentManager.saveDocument(infoService);
    isProperties=new HashMap<String,Object>();
    discoveryService.runDiscovery(documentManager,ENDPOINT_TEST,isProperties,null);
    documentManager.save();
    initDone=true;
  }
}","/** 
 * Init the tests
 * @throws Exception
 */
@Before public void init() throws Exception {
  if (!initDone) {
    HashMap<String,Object> isProperties=new HashMap<String,Object>();
    discoveryService.runDiscovery(documentManager,INFORMATIONSERVICE_TEST_WITHOUT_POPRTTYPE_ID,isProperties,null);
    isProperties.put(WsdlInfo.XPATH_WSDL_PORTTYPE_NAME,""String_Node_Str"");
    discoveryService.runDiscovery(documentManager,INFORMATIONSERVICE_TEST_ID,isProperties,null);
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    isProperties.put(""String_Node_Str"",""String_Node_Str"");
    DocumentModel infoService=discoveryService.runDiscovery(documentManager,INFORMATIONSERVICE_TEST_WITH_PLATFORM_METAS_ID,isProperties,null);
    infoService.setPropertyValue(SoaNode.XPATH_SOANAME,anotherName);
    infoService.setPropertyValue(""String_Node_Str"",anotherTitle);
    infoService.setPropertyValue(""String_Node_Str"",anotherDescription);
    documentManager.saveDocument(infoService);
    isProperties=new HashMap<String,Object>();
    discoveryService.runDiscovery(documentManager,ENDPOINT_TEST,isProperties,null);
    documentManager.save();
    initDone=true;
  }
}"
20119,"/** 
 * Test the queryWSDLInterfaces REST operation
 */
@Test public void queryWSDLInterfacesTest(){
  logTestName(logger);
  Client client=createAuthenticatedHTTPClient();
  WebResource discoveryRequest=client.resource(simpleRegistryService.getRootURL()).path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
  WSDLInformation[] wsdlInformations=discoveryRequest.get(WSDLInformation[].class);
  Assert.assertNotNull(wsdlInformations);
  WSDLInformation firstWSDLInformation=wsdlInformations[0];
  Assert.assertEquals(""String_Node_Str"",firstWSDLInformation.getSoaName());
  WSDLInformation secondWSDLInformation=wsdlInformations[1];
  Assert.assertEquals(""String_Node_Str"",secondWSDLInformation.getSoaName());
  discoveryRequest=client.resource(simpleRegistryService.getRootURL()).path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
  wsdlInformations=discoveryRequest.get(WSDLInformation[].class);
  Assert.assertNotNull(wsdlInformations);
  firstWSDLInformation=wsdlInformations[0];
  Assert.assertEquals(""String_Node_Str"",firstWSDLInformation.getSoaName());
  Assert.assertEquals(""String_Node_Str"",firstWSDLInformation.getDescription());
}","/** 
 * Test the queryWSDLInterfaces REST operation
 */
@Test public void queryWSDLInterfacesTest(){
  logTestName(logger);
  Client client=createAuthenticatedHTTPClient();
  WebResource discoveryRequest=client.resource(simpleRegistryService.getRootURL()).path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
  WSDLInformation[] wsdlInformations=discoveryRequest.get(WSDLInformation[].class);
  Assert.assertNotNull(wsdlInformations);
  WSDLInformation firstWSDLInformation=wsdlInformations[0];
  Assert.assertEquals(""String_Node_Str"",firstWSDLInformation.getSoaName());
  WSDLInformation secondWSDLInformation=wsdlInformations[1];
  Assert.assertEquals(""String_Node_Str"",secondWSDLInformation.getSoaName());
  discoveryRequest=client.resource(simpleRegistryService.getRootURL()).path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"");
  wsdlInformations=discoveryRequest.get(WSDLInformation[].class);
  Assert.assertNotNull(wsdlInformations);
  firstWSDLInformation=wsdlInformations[0];
  Assert.assertEquals(""String_Node_Str"",firstWSDLInformation.getSoaName());
  Assert.assertEquals(""String_Node_Str"",firstWSDLInformation.getDescription());
  discoveryRequest=client.resource(simpleRegistryService.getRootURL()).path(""String_Node_Str"");
  wsdlInformations=discoveryRequest.get(WSDLInformation[].class);
  Assert.assertNotNull(wsdlInformations);
  Assert.assertEquals(3,wsdlInformations.length);
}"
20120,"@Test public void testSourceHandlers() throws Exception {
  ClientBuilder clientBuilder=new ClientBuilder();
  clientBuilder.setNuxeoSitesUrl(NUXEO_URL);
  RegistryApi registryApi=clientBuilder.constructRegistryApi();
  JavaDocBuilder builder=new JavaDocBuilder();
  builder.addSourceTree(new File(""String_Node_Str""));
  JavaSource[] sources=builder.getSources();
  MavenDeliverableInformation mavenDeliverable=new MavenDeliverableInformation(""String_Node_Str"");
  List<SoaNodeInformation> soaNodeResults=runHandlers(sources,mavenDeliverable,new CodeDiscoveryRegistryClient(registryApi),new SystemStreamLog());
  Assert.assertTrue(""String_Node_Str"",soaNodeResults.size() > 0);
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"");
  for (  SoaNodeInformation soaNode : soaNodeResults) {
    logger.info(""String_Node_Str"" + soaNode.getSoaNodeId());
    logger.info(""String_Node_Str"" + soaNode.getProperties());
    logger.info(""String_Node_Str"" + soaNode.getParentDocuments());
  }
}","@Test public void testSourceHandlers() throws Exception {
  ClientBuilder clientBuilder=new ClientBuilder();
  clientBuilder.setNuxeoSitesUrl(EasySOAWebEngineFeature.NUXEO_URL);
  RegistryApi registryApi=clientBuilder.constructRegistryApi();
  JavaDocBuilder builder=new JavaDocBuilder();
  builder.addSourceTree(new File(""String_Node_Str""));
  JavaSource[] sources=builder.getSources();
  MavenDeliverableInformation mavenDeliverable=new MavenDeliverableInformation(""String_Node_Str"");
  List<SoaNodeInformation> soaNodeResults=runHandlers(sources,mavenDeliverable,new CodeDiscoveryRegistryClient(registryApi),new SystemStreamLog());
  Assert.assertTrue(""String_Node_Str"",soaNodeResults.size() > 0);
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"");
  for (  SoaNodeInformation soaNode : soaNodeResults) {
    logger.info(""String_Node_Str"" + soaNode.getSoaNodeId());
    logger.info(""String_Node_Str"" + soaNode.getProperties());
    logger.info(""String_Node_Str"" + soaNode.getParentDocuments());
  }
}"
20121,"@Override public Collection<SoaNodeInformation> findWSImplementations(JavaSource[] sources,Map<String,JavaServiceInterfaceInformation> wsInterfaces,MavenDeliverableInformation mavenDeliverable,CodeDiscoveryRegistryClient registryClient,Log log) throws Exception {
  List<SoaNodeInformation> discoveredNodes=new ArrayList<SoaNodeInformation>();
  for (  JavaSource source : sources) {
    JavaClass[] classes=source.getClasses();
    for (    JavaClass c : classes) {
      if (!c.isInterface() && (ParsingUtils.hasAnnotation(c,ANN_WS) || getWsItf(c,wsInterfaces) != null)) {
        JavaClass itfClass=getWsItf(c,wsInterfaces);
        implsToInterfaces.put(c.asType(),itfClass.asType());
        JavaServiceImplementationInformation serviceImpl=new JavaServiceImplementationInformation(c.getFullyQualifiedName());
        serviceImpl.setTitle(c.getName());
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_TECHNOLOGY,""String_Node_Str"");
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_ISMOCK,c.getSource().getURL().getPath().contains(""String_Node_Str""));
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_IMPLEMENTEDINTERFACE,itfClass.getFullyQualifiedName());
        serviceImpl.addParentDocument(mavenDeliverable.getSoaNodeId());
        discoveredNodes.add(serviceImpl);
        ServiceInformation serviceDef=new ServiceInformation(itfClass.getName());
        serviceImpl.addParentDocument(serviceDef.getSoaNodeId());
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_DOCUMENTATION,itfClass.getComment());
        discoveredNodes.add(serviceDef);
        List<OperationImplementation> operations=serviceImpl.getOperations();
        for (        JavaMethod method : itfClass.getMethods()) {
          if (ParsingUtils.hasAnnotation(method,ANN_WEBRESULT)) {
            Annotation webResultAnn=ParsingUtils.getAnnotation(method,ANN_WEBRESULT);
            StringBuilder parametersInfo=new StringBuilder();
            for (            JavaParameter parameter : method.getParameters()) {
              Annotation webParamAnn=ParsingUtils.getAnnotation(parameter,ANN_WEBPARAM);
              parametersInfo.append(webParamAnn.getProperty(""String_Node_Str"").getParameterValue() + ""String_Node_Str"" + parameter.getType().toString()+ ""String_Node_Str"");
            }
            operations.add(new OperationImplementation(webResultAnn.getProperty(""String_Node_Str"").toString(),parametersInfo.delete(parametersInfo.length() - 2,parametersInfo.length()).toString(),method.getComment()));
          }
        }
        serviceImpl.setOperations(operations);
      }
    }
  }
  return discoveredNodes;
}","@Override public Collection<SoaNodeInformation> findWSImplementations(JavaSource[] sources,Map<String,JavaServiceInterfaceInformation> wsInterfaces,MavenDeliverableInformation mavenDeliverable,CodeDiscoveryRegistryClient registryClient,Log log) throws Exception {
  List<SoaNodeInformation> discoveredNodes=new ArrayList<SoaNodeInformation>();
  for (  JavaSource source : sources) {
    JavaClass[] classes=source.getClasses();
    for (    JavaClass c : classes) {
      if (!c.isInterface() && (ParsingUtils.hasAnnotation(c,ANN_WS) || getWsItf(c,wsInterfaces) != null)) {
        JavaClass itfClass=getWsItf(c,wsInterfaces);
        if (itfClass != null) {
          implsToInterfaces.put(c.asType(),itfClass.asType());
        }
 else {
          log.warn(""String_Node_Str"" + c.getFullyQualifiedName());
        }
        JavaServiceImplementationInformation serviceImpl=new JavaServiceImplementationInformation(c.getFullyQualifiedName());
        serviceImpl.setTitle(c.getName());
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_TECHNOLOGY,""String_Node_Str"");
        serviceImpl.setProperty(JavaServiceImplementation.XPATH_ISMOCK,c.getSource().getURL().getPath().contains(""String_Node_Str""));
        if (itfClass != null) {
          serviceImpl.setProperty(JavaServiceImplementation.XPATH_IMPLEMENTEDINTERFACE,itfClass.getFullyQualifiedName());
        }
        serviceImpl.addParentDocument(mavenDeliverable.getSoaNodeId());
        discoveredNodes.add(serviceImpl);
        if (itfClass != null) {
          ServiceInformation serviceDef=new ServiceInformation(itfClass.getName());
          serviceImpl.addParentDocument(serviceDef.getSoaNodeId());
          serviceImpl.setProperty(JavaServiceImplementation.XPATH_DOCUMENTATION,itfClass.getComment());
          discoveredNodes.add(serviceDef);
          List<OperationImplementation> operations=serviceImpl.getOperations();
          for (          JavaMethod method : itfClass.getMethods()) {
            if (ParsingUtils.hasAnnotation(method,ANN_WEBRESULT)) {
              Annotation webResultAnn=ParsingUtils.getAnnotation(method,ANN_WEBRESULT);
              StringBuilder parametersInfo=new StringBuilder();
              for (              JavaParameter parameter : method.getParameters()) {
                Annotation webParamAnn=ParsingUtils.getAnnotation(parameter,ANN_WEBPARAM);
                parametersInfo.append(webParamAnn.getProperty(""String_Node_Str"").getParameterValue() + ""String_Node_Str"" + parameter.getType().toString()+ ""String_Node_Str"");
              }
              operations.add(new OperationImplementation(webResultAnn.getProperty(""String_Node_Str"").toString(),parametersInfo.delete(parametersInfo.length() - 2,parametersInfo.length()).toString(),method.getComment()));
            }
          }
          serviceImpl.setOperations(operations);
        }
      }
    }
  }
  return discoveredNodes;
}"
20122,"@Override public Map<String,JavaServiceInterfaceInformation> findWSInterfaces(CodeDiscoveryMojo codeDiscovery,JavaSource[] sources,MavenDeliverableInformation mavenDeliverable,CodeDiscoveryRegistryClient registryClient,Log log) throws Exception {
  Map<String,JavaServiceInterfaceInformation> wsInjectableTypeSet=new HashMap<String,JavaServiceInterfaceInformation>();
  for (  JavaSource source : sources) {
    JavaClass[] classes=source.getClasses();
    for (    JavaClass c : classes) {
      boolean isWs=ParsingUtils.hasAnnotation(c,ANN_WS);
      boolean isInterface=c.isInterface();
      if (isWs && isInterface || ParsingUtils.hasAnnotation(c,ANN_XML_WSCLIENT) || ParsingUtils.hasAnnotation(c,ANN_WSPROVIDER) || ParsingUtils.hasAnnotation(c,ANN_XML_WSPROVIDER)) {
        wsInjectableTypeSet.put(c.getFullyQualifiedName(),new JavaServiceInterfaceInformation(mavenDeliverable.getGroupId(),mavenDeliverable.getArtifactId(),c.getFullyQualifiedName()));
      }
    }
  }
  Map<Type,MavenDeliverableInformation> mavenInfos=new HashMap<Type,MavenDeliverableInformation>();
  MavenProject mavenProject=codeDiscovery.getMavenProject();
  if (mavenProject != null) {
    for (    Object dependencyObject : mavenProject.getDependencyArtifacts()) {
      Artifact dependency=(Artifact)dependencyObject;
      URLClassLoader jarClassloader=new URLClassLoader(new URL[]{dependency.getFile().toURI().toURL()});
      Enumeration<URL> resources=jarClassloader.getResources(""String_Node_Str"");
      wsInjectableTypeSet.putAll(exploreResourcesForInterfaces(jarClassloader,resources));
    }
  }
  return wsInjectableTypeSet;
}","@Override public Map<String,JavaServiceInterfaceInformation> findWSInterfaces(CodeDiscoveryMojo codeDiscovery,JavaSource[] sources,MavenDeliverableInformation mavenDeliverable,CodeDiscoveryRegistryClient registryClient,Log log) throws Exception {
  Map<String,JavaServiceInterfaceInformation> wsInjectableTypeSet=new HashMap<String,JavaServiceInterfaceInformation>();
  for (  JavaSource source : sources) {
    JavaClass[] classes=source.getClasses();
    for (    JavaClass c : classes) {
      boolean isWs=ParsingUtils.hasAnnotation(c,ANN_WS);
      boolean isInterface=c.isInterface();
      if (isWs && isInterface || ParsingUtils.hasAnnotation(c,ANN_XML_WSCLIENT) || ParsingUtils.hasAnnotation(c,ANN_WSPROVIDER) || ParsingUtils.hasAnnotation(c,ANN_XML_WSPROVIDER)) {
        wsInjectableTypeSet.put(c.getFullyQualifiedName(),new JavaServiceInterfaceInformation(mavenDeliverable.getGroupId(),mavenDeliverable.getArtifactId(),c.getFullyQualifiedName()));
      }
    }
  }
  return wsInjectableTypeSet;
}"
20123,"private void addConsumerFoundInInjectedMember(List<JavaServiceConsumptionInformation> discoveredConsumptions,AbstractJavaEntity injectedMember,Type injectedType,String beanPropertyName,HashSet<String> injectedBeanProperties,Map<String,JavaServiceInterfaceInformation> serviceInterfaces,MavenDeliverable mavenDeliverable) throws Exception {
  if (injectedBeanProperties.contains(beanPropertyName)) {
    return;
  }
  String injectionAnnotation=getInjectionAnnotation(injectedMember);
  if (allInjected || injectionAnnotation != null) {
    if (serviceInterfaces.containsKey(injectedType)) {
      discoveredConsumptions.add(new JavaServiceConsumptionInformation(mavenDeliverable.getSoaNodeId(),null,injectedType.toGenericString(),injectedType.getJavaClass().getSource().getURL().toString()));
      injectedBeanProperties.add(beanPropertyName);
    }
  }
}","private void addConsumerFoundInInjectedMember(List<JavaServiceConsumptionInformation> discoveredConsumptions,AbstractJavaEntity injectedMember,Type injectedType,String beanPropertyName,HashSet<String> injectedBeanProperties,Map<String,JavaServiceInterfaceInformation> serviceInterfaces,MavenDeliverable mavenDeliverable) throws Exception {
  if (injectedBeanProperties.contains(beanPropertyName)) {
    return;
  }
  String injectionAnnotation=getInjectionAnnotation(injectedMember);
  if (allInjected || injectionAnnotation != null) {
    if (serviceInterfaces.containsKey(injectedType.getFullyQualifiedName())) {
      discoveredConsumptions.add(new JavaServiceConsumptionInformation(mavenDeliverable.getSoaNodeId(),null,injectedType.toGenericString(),injectedType.getJavaClass().getSource().getURL().toString()));
      injectedBeanProperties.add(beanPropertyName);
    }
  }
}"
20124,"public List<JavaServiceConsumptionInformation> find(JavaClass c,MavenDeliverable mavenDeliverable,Map<String,JavaServiceInterfaceInformation> serviceInterfaces) throws Exception {
  List<JavaServiceConsumptionInformation> foundConsumptions=new ArrayList<JavaServiceConsumptionInformation>();
  for (  String importedClassName : c.getSource().getImports()) {
    Type importedClassType=new Type(importedClassName);
    for (    String serviceInterface : serviceInterfaces.keySet()) {
      if (importedClassType.equals(serviceInterface)) {
        foundConsumptions.add(new JavaServiceConsumptionInformation(mavenDeliverable.getSoaNodeId(),c.getFullyQualifiedName(),importedClassName,serviceInterface));
      }
    }
  }
  return foundConsumptions;
}","public List<JavaServiceConsumptionInformation> find(JavaClass c,MavenDeliverable mavenDeliverable,Map<String,JavaServiceInterfaceInformation> serviceInterfaces) throws Exception {
  List<JavaServiceConsumptionInformation> foundConsumptions=new ArrayList<JavaServiceConsumptionInformation>();
  for (  String importedClassName : c.getSource().getImports()) {
    Type importedClassType=new Type(importedClassName);
    for (    String serviceInterface : serviceInterfaces.keySet()) {
      if (importedClassType.getFullyQualifiedName().equals(serviceInterface)) {
        foundConsumptions.add(new JavaServiceConsumptionInformation(mavenDeliverable.getSoaNodeId(),c.getFullyQualifiedName(),importedClassName,serviceInterface));
      }
    }
  }
  return foundConsumptions;
}"
20125,"@Override public void handleEvent(Event event) throws ClientException {
  EventContext context=event.getContext();
  if (!(context instanceof DocumentEventContext)) {
    return;
  }
  DocumentEventContext documentContext=(DocumentEventContext)context;
  DocumentModel sourceDocument=documentContext.getSourceDocument();
  if (!sourceDocument.hasFacet(""String_Node_Str"")) {
    return;
  }
  try {
    CoreSession documentManager=documentContext.getCoreSession();
    DocumentService documentService=Framework.getService(DocumentService.class);
    String sourceFolderPath=documentService.getSourceFolderPath(sourceDocument.getType());
    DocumentModel parentModel=documentManager.getDocument(sourceDocument.getParentRef());
    if (!sourceDocument.isProxy() && !sourceDocument.getPathAsString().startsWith(sourceFolderPath) || sourceDocument.isProxy() && parentModel.hasFacet(SoaNode.FACET) && !sourceDocument.getPathAsString().startsWith(Repository.REPOSITORY_PATH)) {
      documentService.ensureSourceFolderExists(documentManager,sourceDocument.getType());
      String soaName=(String)sourceDocument.getPropertyValue(SoaNode.XPATH_SOANAME);
      if (soaName == null || soaName.isEmpty()) {
        sourceDocument.setPropertyValue(SoaNode.XPATH_SOANAME,sourceDocument.getName());
      }
      PathRef sourcePathRef=new PathRef(documentService.getSourcePath(documentService.createSoaNodeId(sourceDocument)));
      DocumentModel repositoryDocument;
      if (documentManager.exists(sourcePathRef)) {
        repositoryDocument=documentManager.getDocument(sourcePathRef);
        repositoryDocument.copyContent(sourceDocument);
        documentManager.saveDocument(repositoryDocument);
        documentManager.save();
        documentManager.removeDocument(sourceDocument.getRef());
      }
 else {
        repositoryDocument=documentManager.move(sourceDocument.getRef(),new PathRef(sourceFolderPath),sourceDocument.getName());
      }
      if (documentService.isSoaNode(documentManager,parentModel.getType())) {
        parentModel=documentService.find(documentManager,documentService.createSoaNodeId(parentModel));
      }
      documentManager.createProxy(repositoryDocument.getRef(),parentModel.getRef());
    }
    documentManager.save();
    IntelligentSystemTreeService intelligentSystemTreeServiceCache=Framework.getService(IntelligentSystemTreeService.class);
    intelligentSystemTreeServiceCache.handleDocumentModel(documentManager,sourceDocument,!DocumentEventTypes.DOCUMENT_CREATED.equals(event.getName()));
    documentManager.save();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","@Override public void handleEvent(Event event) throws ClientException {
  EventContext context=event.getContext();
  if (!(context instanceof DocumentEventContext)) {
    return;
  }
  DocumentEventContext documentContext=(DocumentEventContext)context;
  DocumentModel sourceDocument=documentContext.getSourceDocument();
  if (!sourceDocument.hasFacet(""String_Node_Str"")) {
    return;
  }
  try {
    CoreSession documentManager=documentContext.getCoreSession();
    DocumentService documentService=Framework.getService(DocumentService.class);
    String sourceFolderPath=documentService.getSourceFolderPath(sourceDocument.getType());
    DocumentModel parentModel=documentManager.getDocument(sourceDocument.getParentRef());
    if (!sourceDocument.isProxy() && !parentModel.getPathAsString().equals(sourceFolderPath) || sourceDocument.isProxy() && parentModel.hasFacet(SoaNode.FACET) && !sourceDocument.getPathAsString().startsWith(Repository.REPOSITORY_PATH)) {
      documentService.ensureSourceFolderExists(documentManager,sourceDocument.getType());
      String soaName=(String)sourceDocument.getPropertyValue(SoaNode.XPATH_SOANAME);
      if (soaName == null || soaName.isEmpty()) {
        sourceDocument.setPropertyValue(SoaNode.XPATH_SOANAME,sourceDocument.getName());
      }
      PathRef sourcePathRef=new PathRef(documentService.getSourcePath(documentService.createSoaNodeId(sourceDocument)));
      DocumentModel repositoryDocument;
      if (documentManager.exists(sourcePathRef)) {
        repositoryDocument=documentManager.getDocument(sourcePathRef);
        repositoryDocument.copyContent(sourceDocument);
        documentManager.saveDocument(repositoryDocument);
        documentManager.save();
        documentManager.removeDocument(sourceDocument.getRef());
      }
 else {
        repositoryDocument=documentManager.move(sourceDocument.getRef(),new PathRef(sourceFolderPath),sourceDocument.getName());
      }
      if (documentService.isSoaNode(documentManager,parentModel.getType())) {
        parentModel=documentService.find(documentManager,documentService.createSoaNodeId(parentModel));
      }
      documentManager.createProxy(repositoryDocument.getRef(),parentModel.getRef());
    }
    documentManager.save();
    IntelligentSystemTreeService intelligentSystemTreeServiceCache=Framework.getService(IntelligentSystemTreeService.class);
    intelligentSystemTreeServiceCache.handleDocumentModel(documentManager,sourceDocument,!DocumentEventTypes.DOCUMENT_CREATED.equals(event.getName()));
    documentManager.save();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
20126,"private void runValidation(){
  timestamp_begin=System.currentTimeMillis();
  gui.clearLog();
  Calendar cal=Calendar.getInstance();
  cal.setTime(new Date());
  DateFormat formater=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG);
  gui.addLogMessageToTextLog(formater.format(cal.getTime()) + ""String_Node_Str"");
  gui.addLogMessageToTextLog(""String_Node_Str"");
  gui.disableButtonsDuringValidation();
  gui.getStatusBar().update(FileManager.iconLoading,__(""String_Node_Str""));
  gui.setBorderStateNormal();
  SwingWorker<Void,Void> validationWorker=new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      EpubCheck epubcheck=new EpubCheck(epubFile,report);
      epubcheckResult=epubcheck.validate();
      return null;
    }
    @Override protected void done(){
      if (epubcheckResult == false) {
        gui.setBorderStateError();
        gui.addLogMessageToTextLog(""String_Node_Str"" + ""String_Node_Str"");
        if (report.getErrorCount() > 0 && report.getWarningCount() > 0) {
          resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount(),report.getErrorCount());
        }
 else         if (report.getErrorCount() > 0) {
          resultMessage=String.format(__(""String_Node_Str""),report.getErrorCount());
        }
 else         if (report.getWarningCount() > 0) {
          gui.setBorderStateWarning();
          resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount());
        }
 else {
          resultMessage=__(""String_Node_Str"");
        }
        gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
        if (guiManager.getMacApp() != null) {
          if (report.getWarningCount() + report.getErrorCount() > 0) {
            guiManager.getMacApp().setDockIconBadge(new Integer(report.getWarningCount() + report.getErrorCount()).toString());
          }
 else {
            guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
          }
        }
        if (guiManager.getExpandedSave() == ExpandedSaveMode.ALWAYS) {
          saveEpubFromExpandedFolder();
        }
 else {
          if (expanded && epubFile.exists()) {
            epubFile.delete();
            gui.addLogMessage(Severity.WARNING,""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
 else {
        gui.setBorderStateValid();
        resultMessage=__(""String_Node_Str"");
        gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
        if (guiManager.getMacApp() != null) {
          guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
        }
        if (guiManager.getExpandedSave() != ExpandedSaveMode.NEVER) {
          saveEpubFromExpandedFolder();
        }
      }
      gui.scrollToBottom();
      timestamp_end=System.currentTimeMillis();
      double timestamp_diff=timestamp_end - timestamp_begin;
      DecimalFormat df=new DecimalFormat(""String_Node_Str"");
      String timestamp_result=df.format(timestamp_diff / 1000);
      gui.getStatusBar().update(null,__(""String_Node_Str"") + ""String_Node_Str"" + String.format(__(""String_Node_Str""),timestamp_result)+ ""String_Node_Str""+ resultMessage);
      gui.enableButtonsAfterValidation();
      if (guiManager.getMenuOptionAutoSaveLogfile()) {
        if (expanded && expandedBasedir != null && expandedBasedir.exists()) {
          gui.saveLogfile(new File(expandedBasedir,epubFile.getName().replaceAll(epubFileExtRegex,""String_Node_Str"")));
        }
 else {
          gui.saveLogfile(new File(epubFile.getAbsolutePath().replaceAll(epubFileExtRegex,""String_Node_Str"")));
        }
      }
    }
  }
;
  validationWorker.execute();
}","private void runValidation(){
  timestamp_begin=System.currentTimeMillis();
  gui.clearLog();
  Calendar cal=Calendar.getInstance();
  cal.setTime(new Date());
  DateFormat formater=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG);
  gui.addLogMessageToTextLog(formater.format(cal.getTime()) + ""String_Node_Str"");
  gui.addLogMessageToTextLog(""String_Node_Str"");
  gui.disableButtonsDuringValidation();
  gui.getStatusBar().update(FileManager.iconLoading,__(""String_Node_Str""));
  gui.setBorderStateNormal();
  SwingWorker<Void,Void> validationWorker=new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      EpubCheck epubcheck=new EpubCheck(epubFile,report);
      epubcheckResult=epubcheck.validate();
      return null;
    }
    @Override protected void done(){
      if (epubcheckResult == false) {
        gui.setBorderStateError();
        gui.addLogMessageToTextLog(""String_Node_Str"" + ""String_Node_Str"");
        if (report.getErrorCount() > 0 && report.getWarningCount() > 0) {
          resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount(),report.getErrorCount());
        }
 else         if (report.getErrorCount() > 0) {
          resultMessage=String.format(__(""String_Node_Str""),report.getErrorCount());
        }
 else         if (report.getWarningCount() > 0) {
          gui.setBorderStateWarning();
          resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount());
        }
 else {
          resultMessage=__(""String_Node_Str"");
        }
        gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
        if (guiManager.getMacApp() != null) {
          if (report.getWarningCount() + report.getErrorCount() > 0) {
            guiManager.getMacApp().setDockIconBadge(new Integer(report.getWarningCount() + report.getErrorCount()).toString());
          }
 else {
            guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
          }
        }
        if (expanded) {
          if (guiManager.getExpandedSave() == ExpandedSaveMode.ALWAYS) {
            saveEpubFromExpandedFolder();
          }
 else           if (epubFile.exists()) {
            epubFile.delete();
            gui.addLogMessage(Severity.WARNING,""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
 else {
        gui.setBorderStateValid();
        resultMessage=__(""String_Node_Str"");
        gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
        if (guiManager.getMacApp() != null) {
          guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
        }
        if (expanded && guiManager.getExpandedSave() != ExpandedSaveMode.NEVER) {
          saveEpubFromExpandedFolder();
        }
      }
      gui.scrollToBottom();
      timestamp_end=System.currentTimeMillis();
      double timestamp_diff=timestamp_end - timestamp_begin;
      DecimalFormat df=new DecimalFormat(""String_Node_Str"");
      String timestamp_result=df.format(timestamp_diff / 1000);
      gui.getStatusBar().update(null,__(""String_Node_Str"") + ""String_Node_Str"" + String.format(__(""String_Node_Str""),timestamp_result)+ ""String_Node_Str""+ resultMessage);
      gui.enableButtonsAfterValidation();
      if (guiManager.getMenuOptionAutoSaveLogfile()) {
        if (expanded && expandedBasedir != null && expandedBasedir.exists()) {
          gui.saveLogfile(new File(expandedBasedir,epubFile.getName().replaceAll(epubFileExtRegex,""String_Node_Str"")));
        }
 else {
          gui.saveLogfile(new File(epubFile.getAbsolutePath().replaceAll(epubFileExtRegex,""String_Node_Str"")));
        }
      }
      gui.scrollToBottom();
    }
  }
;
  validationWorker.execute();
}"
20127,"@Override protected void done(){
  if (epubcheckResult == false) {
    gui.setBorderStateError();
    gui.addLogMessageToTextLog(""String_Node_Str"" + ""String_Node_Str"");
    if (report.getErrorCount() > 0 && report.getWarningCount() > 0) {
      resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount(),report.getErrorCount());
    }
 else     if (report.getErrorCount() > 0) {
      resultMessage=String.format(__(""String_Node_Str""),report.getErrorCount());
    }
 else     if (report.getWarningCount() > 0) {
      gui.setBorderStateWarning();
      resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount());
    }
 else {
      resultMessage=__(""String_Node_Str"");
    }
    gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
    if (guiManager.getMacApp() != null) {
      if (report.getWarningCount() + report.getErrorCount() > 0) {
        guiManager.getMacApp().setDockIconBadge(new Integer(report.getWarningCount() + report.getErrorCount()).toString());
      }
 else {
        guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
      }
    }
    if (guiManager.getExpandedSave() == ExpandedSaveMode.ALWAYS) {
      saveEpubFromExpandedFolder();
    }
 else {
      if (expanded && epubFile.exists()) {
        epubFile.delete();
        gui.addLogMessage(Severity.WARNING,""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
 else {
    gui.setBorderStateValid();
    resultMessage=__(""String_Node_Str"");
    gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
    if (guiManager.getMacApp() != null) {
      guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
    }
    if (guiManager.getExpandedSave() != ExpandedSaveMode.NEVER) {
      saveEpubFromExpandedFolder();
    }
  }
  gui.scrollToBottom();
  timestamp_end=System.currentTimeMillis();
  double timestamp_diff=timestamp_end - timestamp_begin;
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  String timestamp_result=df.format(timestamp_diff / 1000);
  gui.getStatusBar().update(null,__(""String_Node_Str"") + ""String_Node_Str"" + String.format(__(""String_Node_Str""),timestamp_result)+ ""String_Node_Str""+ resultMessage);
  gui.enableButtonsAfterValidation();
  if (guiManager.getMenuOptionAutoSaveLogfile()) {
    if (expanded && expandedBasedir != null && expandedBasedir.exists()) {
      gui.saveLogfile(new File(expandedBasedir,epubFile.getName().replaceAll(epubFileExtRegex,""String_Node_Str"")));
    }
 else {
      gui.saveLogfile(new File(epubFile.getAbsolutePath().replaceAll(epubFileExtRegex,""String_Node_Str"")));
    }
  }
}","@Override protected void done(){
  if (epubcheckResult == false) {
    gui.setBorderStateError();
    gui.addLogMessageToTextLog(""String_Node_Str"" + ""String_Node_Str"");
    if (report.getErrorCount() > 0 && report.getWarningCount() > 0) {
      resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount(),report.getErrorCount());
    }
 else     if (report.getErrorCount() > 0) {
      resultMessage=String.format(__(""String_Node_Str""),report.getErrorCount());
    }
 else     if (report.getWarningCount() > 0) {
      gui.setBorderStateWarning();
      resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount());
    }
 else {
      resultMessage=__(""String_Node_Str"");
    }
    gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
    if (guiManager.getMacApp() != null) {
      if (report.getWarningCount() + report.getErrorCount() > 0) {
        guiManager.getMacApp().setDockIconBadge(new Integer(report.getWarningCount() + report.getErrorCount()).toString());
      }
 else {
        guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
      }
    }
    if (expanded) {
      if (guiManager.getExpandedSave() == ExpandedSaveMode.ALWAYS) {
        saveEpubFromExpandedFolder();
      }
 else       if (epubFile.exists()) {
        epubFile.delete();
        gui.addLogMessage(Severity.WARNING,""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
 else {
    gui.setBorderStateValid();
    resultMessage=__(""String_Node_Str"");
    gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
    if (guiManager.getMacApp() != null) {
      guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
    }
    if (expanded && guiManager.getExpandedSave() != ExpandedSaveMode.NEVER) {
      saveEpubFromExpandedFolder();
    }
  }
  gui.scrollToBottom();
  timestamp_end=System.currentTimeMillis();
  double timestamp_diff=timestamp_end - timestamp_begin;
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  String timestamp_result=df.format(timestamp_diff / 1000);
  gui.getStatusBar().update(null,__(""String_Node_Str"") + ""String_Node_Str"" + String.format(__(""String_Node_Str""),timestamp_result)+ ""String_Node_Str""+ resultMessage);
  gui.enableButtonsAfterValidation();
  if (guiManager.getMenuOptionAutoSaveLogfile()) {
    if (expanded && expandedBasedir != null && expandedBasedir.exists()) {
      gui.saveLogfile(new File(expandedBasedir,epubFile.getName().replaceAll(epubFileExtRegex,""String_Node_Str"")));
    }
 else {
      gui.saveLogfile(new File(epubFile.getAbsolutePath().replaceAll(epubFileExtRegex,""String_Node_Str"")));
    }
  }
  gui.scrollToBottom();
}"
20128,"@Override protected void done(){
  if (epubcheckResult == false) {
    gui.setBorderStateError();
    gui.addLogMessageToTextLog(""String_Node_Str"" + ""String_Node_Str"");
    if (report.getErrorCount() > 0 && report.getWarningCount() > 0) {
      resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount(),report.getErrorCount());
    }
 else     if (report.getErrorCount() > 0) {
      resultMessage=String.format(__(""String_Node_Str""),report.getErrorCount());
    }
 else     if (report.getWarningCount() > 0) {
      gui.setBorderStateWarning();
      resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount());
    }
 else {
      resultMessage=__(""String_Node_Str"");
    }
    gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
    if (guiManager.getMacApp() != null) {
      if (report.getWarningCount() + report.getErrorCount() > 0) {
        guiManager.getMacApp().setDockIconBadge(new Integer(report.getWarningCount() + report.getErrorCount()).toString());
      }
 else {
        guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
      }
    }
    if (expanded && epubFile.exists()) {
      epubFile.delete();
      gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
    }
  }
 else {
    gui.setBorderStateValid();
    resultMessage=__(""String_Node_Str"");
    gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
    if (guiManager.getMacApp() != null) {
      guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
    }
    if (expanded && epubFile.exists() && keepArchive) {
      if (expandedBasedir != null && expandedBasedir.exists()) {
        File destEpubFile=new File(expandedBasedir,epubFile.getName().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        if (destEpubFile.exists()) {
          destEpubFile.delete();
        }
        epubFile.renameTo(destEpubFile);
        if (destEpubFile.exists()) {
          gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str""+ destEpubFile.getAbsolutePath()+ ""String_Node_Str"");
        }
 else {
          gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
 else {
        gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
  gui.scrollToBottom();
  timestamp_end=System.currentTimeMillis();
  double timestamp_diff=timestamp_end - timestamp_begin;
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  String timestamp_result=df.format(timestamp_diff / 1000);
  gui.getStatusBar().update(null,__(""String_Node_Str"") + ""String_Node_Str"" + String.format(__(""String_Node_Str""),timestamp_result)+ ""String_Node_Str""+ resultMessage);
  gui.enableButtonsAfterValidation();
  if (guiManager.getMenuOptionAutoSaveLogfile()) {
    gui.saveLogfile(new File(epubFile.getAbsolutePath().replaceAll(""String_Node_Str"",""String_Node_Str"")));
  }
}","@Override protected void done(){
  if (epubcheckResult == false) {
    gui.setBorderStateError();
    gui.addLogMessageToTextLog(""String_Node_Str"" + ""String_Node_Str"");
    if (report.getErrorCount() > 0 && report.getWarningCount() > 0) {
      resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount(),report.getErrorCount());
    }
 else     if (report.getErrorCount() > 0) {
      resultMessage=String.format(__(""String_Node_Str""),report.getErrorCount());
    }
 else     if (report.getWarningCount() > 0) {
      gui.setBorderStateWarning();
      resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount());
    }
 else {
      resultMessage=__(""String_Node_Str"");
    }
    gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
    if (guiManager.getMacApp() != null) {
      if (report.getWarningCount() + report.getErrorCount() > 0) {
        guiManager.getMacApp().setDockIconBadge(new Integer(report.getWarningCount() + report.getErrorCount()).toString());
      }
 else {
        guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
      }
    }
    if (expanded && epubFile.exists()) {
      epubFile.delete();
      gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
    }
  }
 else {
    gui.setBorderStateValid();
    resultMessage=__(""String_Node_Str"");
    gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
    if (guiManager.getMacApp() != null) {
      guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
    }
    if (expanded && epubFile.exists() && keepArchive) {
      if (expandedBasedir != null && expandedBasedir.exists()) {
        File destEpubFile=new File(expandedBasedir,epubFile.getName().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        if (destEpubFile.exists()) {
          destEpubFile.delete();
        }
        epubFile.renameTo(destEpubFile);
        if (destEpubFile.exists()) {
          gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str""+ destEpubFile.getAbsolutePath()+ ""String_Node_Str"");
        }
 else {
          gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
 else {
        gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
  gui.scrollToBottom();
  timestamp_end=System.currentTimeMillis();
  double timestamp_diff=timestamp_end - timestamp_begin;
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  String timestamp_result=df.format(timestamp_diff / 1000);
  gui.getStatusBar().update(null,__(""String_Node_Str"") + ""String_Node_Str"" + String.format(__(""String_Node_Str""),timestamp_result)+ ""String_Node_Str""+ resultMessage);
  gui.enableButtonsAfterValidation();
  if (guiManager.getMenuOptionAutoSaveLogfile()) {
    if (expanded && expandedBasedir != null && expandedBasedir.exists()) {
      gui.saveLogfile(new File(expandedBasedir,epubFile.getName().replaceAll(epubFileExtRegex,""String_Node_Str"")));
    }
 else {
      gui.saveLogfile(new File(epubFile.getAbsolutePath().replaceAll(epubFileExtRegex,""String_Node_Str"")));
    }
  }
}"
20129,"public void validate(File file){
  this.epubFile=file;
  timestamp_begin=System.currentTimeMillis();
  gui.clearLog();
  Calendar cal=Calendar.getInstance();
  cal.setTime(new Date());
  DateFormat formater=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG);
  gui.addLogMessageToTextLog(formater.format(cal.getTime()) + ""String_Node_Str"");
  gui.addLogMessageToTextLog(""String_Node_Str"");
  gui.disableButtonsDuringValidation();
  gui.getStatusBar().update(FileManager.iconLoading,__(""String_Node_Str""));
  gui.setBorderStateNormal();
  SwingWorker<Void,Void> validationWorker=new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      EpubCheck epubcheck=new EpubCheck(epubFile,report);
      epubcheckResult=epubcheck.validate();
      return null;
    }
    @Override protected void done(){
      if (epubcheckResult == false) {
        gui.setBorderStateError();
        gui.addLogMessageToTextLog(""String_Node_Str"" + ""String_Node_Str"");
        if (report.getErrorCount() > 0 && report.getWarningCount() > 0) {
          resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount(),report.getErrorCount());
        }
 else         if (report.getErrorCount() > 0) {
          resultMessage=String.format(__(""String_Node_Str""),report.getErrorCount());
        }
 else         if (report.getWarningCount() > 0) {
          gui.setBorderStateWarning();
          resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount());
        }
 else {
          resultMessage=__(""String_Node_Str"");
        }
        gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
        if (guiManager.getMacApp() != null) {
          if (report.getWarningCount() + report.getErrorCount() > 0) {
            guiManager.getMacApp().setDockIconBadge(new Integer(report.getWarningCount() + report.getErrorCount()).toString());
          }
 else {
            guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
          }
        }
        if (expanded && epubFile.exists()) {
          epubFile.delete();
          gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
 else {
        gui.setBorderStateValid();
        resultMessage=__(""String_Node_Str"");
        gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
        if (guiManager.getMacApp() != null) {
          guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
        }
        if (expanded && epubFile.exists() && keepArchive) {
          if (expandedBasedir != null && expandedBasedir.exists()) {
            File destEpubFile=new File(expandedBasedir,epubFile.getName().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
            if (destEpubFile.exists()) {
              destEpubFile.delete();
            }
            epubFile.renameTo(destEpubFile);
            if (destEpubFile.exists()) {
              gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str""+ destEpubFile.getAbsolutePath()+ ""String_Node_Str"");
            }
 else {
              gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
            }
          }
 else {
            gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          }
        }
      }
      gui.scrollToBottom();
      timestamp_end=System.currentTimeMillis();
      double timestamp_diff=timestamp_end - timestamp_begin;
      DecimalFormat df=new DecimalFormat(""String_Node_Str"");
      String timestamp_result=df.format(timestamp_diff / 1000);
      gui.getStatusBar().update(null,__(""String_Node_Str"") + ""String_Node_Str"" + String.format(__(""String_Node_Str""),timestamp_result)+ ""String_Node_Str""+ resultMessage);
      gui.enableButtonsAfterValidation();
      if (guiManager.getMenuOptionAutoSaveLogfile()) {
        gui.saveLogfile(new File(epubFile.getAbsolutePath().replaceAll(""String_Node_Str"",""String_Node_Str"")));
      }
    }
  }
;
  validationWorker.execute();
}","public void validate(File file){
  this.epubFile=file;
  timestamp_begin=System.currentTimeMillis();
  gui.clearLog();
  Calendar cal=Calendar.getInstance();
  cal.setTime(new Date());
  DateFormat formater=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG);
  gui.addLogMessageToTextLog(formater.format(cal.getTime()) + ""String_Node_Str"");
  gui.addLogMessageToTextLog(""String_Node_Str"");
  gui.disableButtonsDuringValidation();
  gui.getStatusBar().update(FileManager.iconLoading,__(""String_Node_Str""));
  gui.setBorderStateNormal();
  SwingWorker<Void,Void> validationWorker=new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      EpubCheck epubcheck=new EpubCheck(epubFile,report);
      epubcheckResult=epubcheck.validate();
      return null;
    }
    @Override protected void done(){
      if (epubcheckResult == false) {
        gui.setBorderStateError();
        gui.addLogMessageToTextLog(""String_Node_Str"" + ""String_Node_Str"");
        if (report.getErrorCount() > 0 && report.getWarningCount() > 0) {
          resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount(),report.getErrorCount());
        }
 else         if (report.getErrorCount() > 0) {
          resultMessage=String.format(__(""String_Node_Str""),report.getErrorCount());
        }
 else         if (report.getWarningCount() > 0) {
          gui.setBorderStateWarning();
          resultMessage=String.format(__(""String_Node_Str""),report.getWarningCount());
        }
 else {
          resultMessage=__(""String_Node_Str"");
        }
        gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
        if (guiManager.getMacApp() != null) {
          if (report.getWarningCount() + report.getErrorCount() > 0) {
            guiManager.getMacApp().setDockIconBadge(new Integer(report.getWarningCount() + report.getErrorCount()).toString());
          }
 else {
            guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
          }
        }
        if (expanded && epubFile.exists()) {
          epubFile.delete();
          gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
        }
      }
 else {
        gui.setBorderStateValid();
        resultMessage=__(""String_Node_Str"");
        gui.addLogMessage(""String_Node_Str"" + resultMessage + ""String_Node_Str"");
        if (guiManager.getMacApp() != null) {
          guiManager.getMacApp().setDockIconBadge(""String_Node_Str"");
        }
        if (expanded && epubFile.exists() && keepArchive) {
          if (expandedBasedir != null && expandedBasedir.exists()) {
            File destEpubFile=new File(expandedBasedir,epubFile.getName().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
            if (destEpubFile.exists()) {
              destEpubFile.delete();
            }
            epubFile.renameTo(destEpubFile);
            if (destEpubFile.exists()) {
              gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str""+ destEpubFile.getAbsolutePath()+ ""String_Node_Str"");
            }
 else {
              gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str"");
            }
          }
 else {
            gui.addLogMessage(""String_Node_Str"" + __(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
          }
        }
      }
      gui.scrollToBottom();
      timestamp_end=System.currentTimeMillis();
      double timestamp_diff=timestamp_end - timestamp_begin;
      DecimalFormat df=new DecimalFormat(""String_Node_Str"");
      String timestamp_result=df.format(timestamp_diff / 1000);
      gui.getStatusBar().update(null,__(""String_Node_Str"") + ""String_Node_Str"" + String.format(__(""String_Node_Str""),timestamp_result)+ ""String_Node_Str""+ resultMessage);
      gui.enableButtonsAfterValidation();
      if (guiManager.getMenuOptionAutoSaveLogfile()) {
        if (expanded && expandedBasedir != null && expandedBasedir.exists()) {
          gui.saveLogfile(new File(expandedBasedir,epubFile.getName().replaceAll(epubFileExtRegex,""String_Node_Str"")));
        }
 else {
          gui.saveLogfile(new File(epubFile.getAbsolutePath().replaceAll(epubFileExtRegex,""String_Node_Str"")));
        }
      }
    }
  }
;
  validationWorker.execute();
}"
20130,"public void createNewLocalizationObject(){
  this.l10n=new Localization(getCurrentLanguage());
  setCurrentLanguage(l10n.getCurrentLanguage());
}","public void createNewLocalizationObject(){
  this.l10n=new Localization(getCurrentLanguage());
  this.l10n.setRegexEngine(new RegexSearchReplace());
}"
20131,"public Localization(String initialLanguage){
  if (initialLanguage == null || initialLanguage.equals(""String_Node_Str"")) {
    String currentUserLang=System.getProperty(""String_Node_Str"").toLowerCase();
    if (currentUserLang.equals(""String_Node_Str"")) {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
 else     if (currentUserLang.equals(""String_Node_Str"")) {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
 else     if (currentUserLang.equals(""String_Node_Str"")) {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
 else     if (currentUserLang.equals(""String_Node_Str"")) {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
 else {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
  }
 else {
    currentLanguage=initialLanguage;
    currentLanguageJSON=loadLanguageFile(initialLanguage);
  }
  regexEngine=new RegexSearchReplace();
}","public Localization(String initialLanguage){
  if (initialLanguage == null || initialLanguage.equals(""String_Node_Str"")) {
    String currentUserLang=System.getProperty(""String_Node_Str"").toLowerCase();
    if (currentUserLang.equals(""String_Node_Str"")) {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
 else     if (currentUserLang.equals(""String_Node_Str"")) {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
 else     if (currentUserLang.equals(""String_Node_Str"")) {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
 else     if (currentUserLang.equals(""String_Node_Str"")) {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
 else {
      currentLanguage=""String_Node_Str"";
      currentLanguageJSON=loadLanguageFile(""String_Node_Str"");
    }
  }
 else {
    currentLanguage=initialLanguage;
    currentLanguageJSON=loadLanguageFile(initialLanguage);
  }
  GuiManager.getInstance().setCurrentLanguage(currentLanguage);
  GuiManager.getInstance().setCurrentLanguageJSONObject(currentLanguageJSON);
}"
20132,"/** 
 * Returns the component used for drawing the cell.  This method is used to configure the renderer appropriately before drawing.
 * @param table      - JTable object
 * @param value      - the value of the cell to be rendered.
 * @param isSelected - isSelected   true if the cell is to be rendered with the selection highlighted;otherwise false.
 * @param hasFocus   - if true, render cell appropriately.
 * @param row        - The row index of the cell being drawn.
 * @param column     - The column index of the cell being drawn.
 * @return - Returns the component used for drawing the cell.
 */
public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  renderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  setForeground(renderer.getForeground());
  setBackground(renderer.getBackground());
  setBorder(new CompoundBorder(new MatteBorder(0,0,1,1,Color.WHITE),new EmptyBorder(new Insets(5,5,5,5))));
  setFont(renderer.getFont());
  setText(renderer.getText());
  TableColumnModel columnModel=table.getColumnModel();
  setSize(columnModel.getColumn(column).getWidth(),0);
  int height_wanted=(int)getPreferredSize().getHeight();
  addSize(table,row,column,height_wanted);
  height_wanted=findTotalMaximumRowSize(table,row);
  if (height_wanted != table.getRowHeight(row)) {
    table.setRowHeight(row,height_wanted);
  }
  return this;
}","/** 
 * Returns the component used for drawing the cell.  This method is used to configure the renderer appropriately before drawing.
 * @param table      - JTable object
 * @param value      - the value of the cell to be rendered.
 * @param isSelected - isSelected   true if the cell is to be rendered with the selection highlighted;otherwise false.
 * @param hasFocus   - if true, render cell appropriately.
 * @param row        - The row index of the cell being drawn.
 * @param column     - The column index of the cell being drawn.
 * @return - Returns the component used for drawing the cell.
 */
public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  renderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  setForeground(renderer.getForeground());
  setBackground(renderer.getBackground());
  setBorder(new CompoundBorder(new MatteBorder(0,0,1,1,Color.WHITE),new EmptyBorder(new Insets(5,5,5,5))));
  setFont(renderer.getFont());
  setText(renderer.getText());
  TableColumnModel columnModel=table.getColumnModel();
  setSize(columnModel.getColumn(column).getWidth(),26);
  int height_wanted=(int)getPreferredSize().getHeight();
  addSize(table,row,column,height_wanted);
  height_wanted=findTotalMaximumRowSize(table,row);
  if (height_wanted != table.getRowHeight(row)) {
    table.setRowHeight(row,height_wanted);
  }
  return this;
}"
20133,"public mainGUI(){
  super(""String_Node_Str"");
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  setIconImage(paginaEPUBChecker.logoImg32);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (paginaEPUBChecker.MainGuiDimension == null) {
    setSize(775,650);
  }
 else {
    setSize(paginaEPUBChecker.MainGuiDimension);
  }
  setMinimumSize(new Dimension(650,500));
  if (paginaEPUBChecker.MainGuiPosition == null) {
    setLocation(50,50);
  }
 else {
    setLocation(paginaEPUBChecker.MainGuiPosition);
  }
  setAlwaysOnTop(false);
  Container parent=getContentPane();
  BorderLayout borderLayout=new BorderLayout();
  parent.setLayout(borderLayout);
  Container main=new JPanel();
  GridBagLayout gridBagLayout=new GridBagLayout();
  gridBagLayout.columnWidths=new int[]{25,50,103,50,25,0};
  gridBagLayout.rowHeights=new int[]{25,45,15,25,14,15,250,25};
  gridBagLayout.columnWeights=new double[]{0.0,0.0,1.0,0.0,0.0,Double.MIN_VALUE};
  gridBagLayout.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0};
  main.setLayout(gridBagLayout);
  parent.add(main,BorderLayout.CENTER);
  btn_chooseEpubFile=new JButton(__(""String_Node_Str""));
  btn_chooseEpubFile.setFont(btn_chooseEpubFile.getFont().deriveFont(12f));
  btn_chooseEpubFile.addActionListener(this);
  GridBagConstraints gbc_btn_chooseEpubFile=new GridBagConstraints();
  gbc_btn_chooseEpubFile.anchor=GridBagConstraints.WEST;
  gbc_btn_chooseEpubFile.insets=new Insets(0,0,5,5);
  gbc_btn_chooseEpubFile.gridx=1;
  gbc_btn_chooseEpubFile.gridy=1;
  main.add(btn_chooseEpubFile,gbc_btn_chooseEpubFile);
  input_filePath=new JTextField();
  input_filePath.addActionListener(this);
  input_filePath.setFont(input_filePath.getFont().deriveFont(12f));
  GridBagConstraints gbc_input_filePath=new GridBagConstraints();
  gbc_input_filePath.ipady=5;
  gbc_input_filePath.ipadx=5;
  gbc_input_filePath.fill=GridBagConstraints.HORIZONTAL;
  gbc_input_filePath.insets=new Insets(0,0,5,5);
  gbc_input_filePath.gridwidth=2;
  gbc_input_filePath.gridx=2;
  gbc_input_filePath.gridy=1;
  main.add(input_filePath,gbc_input_filePath);
  KeyListener keyListener=new KeyListener(){
    public void keyPressed(    KeyEvent keyEvent){
    }
    public void keyTyped(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent keyEvent){
      if (input_filePath.getText().length() > 0) {
        if (btn_validateEpub.isEnabled() == false) {
          btn_validateEpub.setEnabled(true);
        }
      }
 else {
        if (btn_validateEpub.isEnabled() == true) {
          btn_validateEpub.setEnabled(false);
        }
      }
    }
  }
;
  input_filePath.addKeyListener(keyListener);
  btn_validateEpub=new JButton(__(""String_Node_Str""));
  btn_validateEpub.setEnabled(false);
  btn_validateEpub.addActionListener(this);
  btn_validateEpub.setFont(btn_validateEpub.getFont().deriveFont(btn_validateEpub.getFont().getStyle() | Font.BOLD,btn_validateEpub.getFont().getSize() + 3f));
  GridBagConstraints gbc_btn_validateEpub=new GridBagConstraints();
  gbc_btn_validateEpub.ipady=15;
  gbc_btn_validateEpub.ipadx=10;
  gbc_btn_validateEpub.gridwidth=3;
  gbc_btn_validateEpub.insets=new Insets(0,0,5,5);
  gbc_btn_validateEpub.gridx=1;
  gbc_btn_validateEpub.gridy=3;
  main.add(btn_validateEpub,gbc_btn_validateEpub);
  JLabel lbl_epubcheckVersion=new JLabel(""String_Node_Str"" + __(String.format(""String_Node_Str"",EpubCheck.version())) + ""String_Node_Str"");
  lbl_epubcheckVersion.setForeground(Color.DARK_GRAY);
  lbl_epubcheckVersion.setFont(lbl_epubcheckVersion.getFont().deriveFont(10f));
  lbl_epubcheckVersion.setHorizontalAlignment(SwingConstants.CENTER);
  GridBagConstraints gbc_lbl_epubcheckVersion=new GridBagConstraints();
  gbc_lbl_epubcheckVersion.gridwidth=3;
  gbc_lbl_epubcheckVersion.fill=GridBagConstraints.BOTH;
  gbc_lbl_epubcheckVersion.insets=new Insets(0,0,5,5);
  gbc_lbl_epubcheckVersion.gridx=1;
  gbc_lbl_epubcheckVersion.gridy=4;
  main.add(lbl_epubcheckVersion,gbc_lbl_epubcheckVersion);
  txtarea_results=new JTextArea();
  txtarea_results.setFont(UIManager.getFont(""String_Node_Str""));
  txtarea_results.setDropMode(DropMode.INSERT);
  txtarea_results.setEditable(false);
  txtarea_results.setWrapStyleWord(true);
  txtarea_results.setLineWrap(true);
  txtarea_results.setBackground(new Color(255,255,240));
  txtarea_results.setMargin(new Insets(10,10,10,15));
  try {
    txtarea_results.setText(__(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  GridBagConstraints gbc_txtarea_results=new GridBagConstraints();
  gbc_txtarea_results.insets=new Insets(0,0,5,5);
  gbc_txtarea_results.fill=GridBagConstraints.BOTH;
  gbc_txtarea_results.gridwidth=3;
  gbc_txtarea_results.gridx=1;
  gbc_txtarea_results.gridy=6;
  tableModel=new DefaultTableModel();
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  table_results=new JTable(tableModel){
    private static final long serialVersionUID=-4430174981226468686L;
    @Override public boolean isCellEditable(    int arg0,    int arg1){
      return false;
    }
  }
;
  table_results.setAutoCreateRowSorter(true);
  table_results.getTableHeader().setReorderingAllowed(false);
  table_results.setFillsViewportHeight(true);
  table_results.setOpaque(false);
  table_results.setBackground(Color.GREEN);
  table_results.setRowHeight(25);
  table_results.getColumnModel().getColumn(0).setResizable(false);
  table_results.getColumnModel().getColumn(1).setResizable(false);
  table_results.getColumnModel().getColumn(0).setMaxWidth(100);
  table_results.getColumnModel().getColumn(0).setMinWidth(100);
  table_results.getColumnModel().getColumn(1).setMaxWidth(100);
  table_results.getColumnModel().getColumn(1).setMinWidth(100);
  table_results.getColumnModel().getColumn(2).setMinWidth(130);
  table_results.getColumnModel().getColumn(2).setPreferredWidth(130);
  table_results.getColumnModel().getColumn(3).setMinWidth(270);
  table_results.getColumnModel().getColumn(3).setPreferredWidth(270);
  table_results.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  table_results.getColumnModel().getColumn(0).setCellRenderer(new IconTableCellRenderer());
  table_results.getColumnModel().getColumn(1).setCellRenderer(new BoardTableCellRenderer());
  table_results.getColumnModel().getColumn(2).setCellRenderer(new MultiLineCellRenderer());
  table_results.getColumnModel().getColumn(3).setCellRenderer(new MultiLineCellRenderer());
  scroll_results=new JScrollPane(table_results);
  setBorderStateNormal();
  GridBagConstraints gbc_scroll_results=new GridBagConstraints();
  gbc_scroll_results.insets=new Insets(0,0,5,5);
  gbc_scroll_results.fill=GridBagConstraints.BOTH;
  gbc_scroll_results.gridwidth=3;
  gbc_scroll_results.gridx=1;
  gbc_scroll_results.gridy=6;
  main.add(scroll_results,gbc_scroll_results);
  DragDropListener txtareaDNDListener=new DragDropListener();
  new DropTarget(txtarea_results,txtareaDNDListener);
  if (System.getProperty(""String_Node_Str"").indexOf(""String_Node_Str"") > -1) {
    statusBar=new StatusBar(null,""String_Node_Str"",true);
  }
 else {
    statusBar=new StatusBar(null,""String_Node_Str"",false);
  }
  parent.add(statusBar,BorderLayout.PAGE_END);
  lbl_test=new JLabel();
  GridBagConstraints gbc_lbl_test=new GridBagConstraints();
  gbc_lbl_test.insets=new Insets(0,0,5,5);
  gbc_lbl_test.gridx=3;
  gbc_lbl_test.gridy=2;
  main.add(lbl_test,gbc_lbl_test);
  JMenuBar menuBar=new JMenuBar();
  setJMenuBar(menuBar);
  mn_File=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_File);
  mnItem_Open=new JMenuItem(__(""String_Node_Str""));
  if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mnItem_Open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.META_MASK));
  }
 else {
    mnItem_Open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.CTRL_MASK));
  }
  mnItem_Open.addActionListener(this);
  mn_File.add(mnItem_Open);
  if (!paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mn_File.addSeparator();
    mnItem_Exit=new JMenuItem(__(""String_Node_Str""));
    if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
      mnItem_Exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4,InputEvent.ALT_MASK));
    }
 else {
      mnItem_Exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.CTRL_MASK));
    }
    mnItem_Exit.addActionListener(this);
    mn_File.add(mnItem_Exit);
  }
  mn_Log=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Log);
  mnItem_Save=new JMenuItem(__(""String_Node_Str""));
  if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mnItem_Save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.META_MASK));
  }
 else {
    mnItem_Save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.CTRL_MASK));
  }
  mnItem_Save.setEnabled(false);
  mnItem_Save.addActionListener(this);
  mn_Log.add(mnItem_Save);
  mn_Log.addSeparator();
  opt_AutoSave=new JRadioButtonMenuItem(__(""String_Node_Str""));
  opt_AutoSave.addActionListener(this);
  mn_Log.add(opt_AutoSave);
  mn_Language=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Language);
  opt_Lang=new JRadioButtonMenuItem[paginaEPUBChecker.availableLanguages.length];
  availableLanguagesOriginal=new String[paginaEPUBChecker.availableLanguages.length];
  for (int i=0; i < paginaEPUBChecker.availableLanguages.length; i++) {
    availableLanguagesOriginal[i]=__(paginaEPUBChecker.availableLanguages[i]);
    opt_Lang[i]=new JRadioButtonMenuItem(__(paginaEPUBChecker.availableLanguages[i]));
    if (paginaEPUBChecker.programLanguage.equals(paginaEPUBChecker.availableLanguages[i].toLowerCase())) {
      opt_Lang[i].setSelected(true);
    }
    mn_Language.add(opt_Lang[i]);
    opt_Lang[i].addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        int index=getIndex(availableLanguagesOriginal,e.paramString().split(""String_Node_Str"")[1].replaceAll(""String_Node_Str"",""String_Node_Str""));
        restartWithNewLanguage(paginaEPUBChecker.availableLanguages[index].toLowerCase());
      }
    }
);
  }
  mn_Language.addSeparator();
  opt_Translate=new JRadioButtonMenuItem(__(""String_Node_Str""));
  opt_Translate.addActionListener(this);
  mn_Language.add(opt_Translate);
  mn_Help=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Help);
  mnItem_About=new JMenuItem(__(""String_Node_Str""));
  mnItem_About.addActionListener(this);
  mn_Help.add(mnItem_About);
  mnItem_Translations=new JMenuItem(__(""String_Node_Str""));
  mnItem_Translations.addActionListener(this);
  mn_Help.add(mnItem_Translations);
  mnItem_licenceInformation=new JMenuItem(__(""String_Node_Str""));
  mnItem_licenceInformation.addActionListener(this);
  mn_Help.add(mnItem_licenceInformation);
  mn_Help.addSeparator();
  mnItem_WebsiteEpubcheck=new JMenuItem(__(""String_Node_Str""));
  mnItem_WebsiteEpubcheck.addActionListener(this);
  mn_Help.add(mnItem_WebsiteEpubcheck);
  mnItem_WebsitePagina=new JMenuItem(__(""String_Node_Str""));
  mnItem_WebsitePagina.addActionListener(this);
  mn_Help.add(mnItem_WebsitePagina);
  mn_Help.addSeparator();
  mnItem_Updates=new JMenuItem(__(""String_Node_Str""));
  mnItem_Updates.addActionListener(this);
  mn_Help.add(mnItem_Updates);
  setVisible(true);
  paginaEPUBChecker.guiReady=true;
  validateImmediatelyIfFileIsSet();
  SwingWorker<Void,Void> setOptionsWorker=new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      if (new File(paginaEPUBChecker.path_AutoSaveFile).exists()) {
        try {
          paginaEPUBChecker.AutoSave=Boolean.valueOf(updateCheck.readFileAsString(paginaEPUBChecker.path_AutoSaveFile));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        if (paginaEPUBChecker.AutoSave) {
          opt_AutoSave.setSelected(true);
        }
      }
      if (new File(paginaEPUBChecker.path_TranslateFile).exists()) {
        try {
          paginaEPUBChecker.epubcheck_translate=Boolean.valueOf(updateCheck.readFileAsString(paginaEPUBChecker.path_TranslateFile));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
 else       if (paginaEPUBChecker.programLanguage.equals(""String_Node_Str"")) {
        paginaEPUBChecker.epubcheck_translate=true;
      }
 else {
        paginaEPUBChecker.epubcheck_translate=false;
      }
      opt_Translate.setSelected(paginaEPUBChecker.epubcheck_translate);
      return null;
    }
  }
;
  setOptionsWorker.execute();
}","public mainGUI(){
  super(""String_Node_Str"");
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  setIconImage(paginaEPUBChecker.logoImg32);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (paginaEPUBChecker.MainGuiDimension == null) {
    setSize(775,650);
  }
 else {
    setSize(paginaEPUBChecker.MainGuiDimension);
  }
  setMinimumSize(new Dimension(650,500));
  if (paginaEPUBChecker.MainGuiPosition == null) {
    setLocation(50,50);
  }
 else {
    setLocation(paginaEPUBChecker.MainGuiPosition);
  }
  setAlwaysOnTop(false);
  Container parent=getContentPane();
  BorderLayout borderLayout=new BorderLayout();
  parent.setLayout(borderLayout);
  Container main=new JPanel();
  GridBagLayout gridBagLayout=new GridBagLayout();
  gridBagLayout.columnWidths=new int[]{25,50,103,50,25,0};
  gridBagLayout.rowHeights=new int[]{25,45,15,25,14,15,250,25};
  gridBagLayout.columnWeights=new double[]{0.0,0.0,1.0,0.0,0.0,Double.MIN_VALUE};
  gridBagLayout.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0};
  main.setLayout(gridBagLayout);
  parent.add(main,BorderLayout.CENTER);
  btn_chooseEpubFile=new JButton(__(""String_Node_Str""));
  btn_chooseEpubFile.setFont(btn_chooseEpubFile.getFont().deriveFont(12f));
  btn_chooseEpubFile.addActionListener(this);
  GridBagConstraints gbc_btn_chooseEpubFile=new GridBagConstraints();
  gbc_btn_chooseEpubFile.anchor=GridBagConstraints.WEST;
  gbc_btn_chooseEpubFile.insets=new Insets(0,0,5,5);
  gbc_btn_chooseEpubFile.gridx=1;
  gbc_btn_chooseEpubFile.gridy=1;
  main.add(btn_chooseEpubFile,gbc_btn_chooseEpubFile);
  input_filePath=new JTextField();
  input_filePath.addActionListener(this);
  input_filePath.setFont(input_filePath.getFont().deriveFont(12f));
  GridBagConstraints gbc_input_filePath=new GridBagConstraints();
  gbc_input_filePath.ipady=5;
  gbc_input_filePath.ipadx=5;
  gbc_input_filePath.fill=GridBagConstraints.HORIZONTAL;
  gbc_input_filePath.insets=new Insets(0,0,5,5);
  gbc_input_filePath.gridwidth=2;
  gbc_input_filePath.gridx=2;
  gbc_input_filePath.gridy=1;
  main.add(input_filePath,gbc_input_filePath);
  KeyListener keyListener=new KeyListener(){
    public void keyPressed(    KeyEvent keyEvent){
    }
    public void keyTyped(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent keyEvent){
      if (input_filePath.getText().length() > 0) {
        if (btn_validateEpub.isEnabled() == false) {
          btn_validateEpub.setEnabled(true);
        }
      }
 else {
        if (btn_validateEpub.isEnabled() == true) {
          btn_validateEpub.setEnabled(false);
        }
      }
    }
  }
;
  input_filePath.addKeyListener(keyListener);
  btn_validateEpub=new JButton(__(""String_Node_Str""));
  btn_validateEpub.setEnabled(false);
  btn_validateEpub.addActionListener(this);
  btn_validateEpub.setFont(btn_validateEpub.getFont().deriveFont(btn_validateEpub.getFont().getStyle() | Font.BOLD,btn_validateEpub.getFont().getSize() + 3f));
  GridBagConstraints gbc_btn_validateEpub=new GridBagConstraints();
  gbc_btn_validateEpub.ipady=15;
  gbc_btn_validateEpub.ipadx=10;
  gbc_btn_validateEpub.gridwidth=3;
  gbc_btn_validateEpub.insets=new Insets(0,0,5,5);
  gbc_btn_validateEpub.gridx=1;
  gbc_btn_validateEpub.gridy=3;
  main.add(btn_validateEpub,gbc_btn_validateEpub);
  JLabel lbl_epubcheckVersion=new JLabel(""String_Node_Str"" + __(String.format(""String_Node_Str"",EpubCheck.version())) + ""String_Node_Str"");
  lbl_epubcheckVersion.setForeground(Color.DARK_GRAY);
  lbl_epubcheckVersion.setFont(lbl_epubcheckVersion.getFont().deriveFont(10f));
  lbl_epubcheckVersion.setHorizontalAlignment(SwingConstants.CENTER);
  GridBagConstraints gbc_lbl_epubcheckVersion=new GridBagConstraints();
  gbc_lbl_epubcheckVersion.gridwidth=3;
  gbc_lbl_epubcheckVersion.fill=GridBagConstraints.BOTH;
  gbc_lbl_epubcheckVersion.insets=new Insets(0,0,5,5);
  gbc_lbl_epubcheckVersion.gridx=1;
  gbc_lbl_epubcheckVersion.gridy=4;
  main.add(lbl_epubcheckVersion,gbc_lbl_epubcheckVersion);
  txtarea_results=new JTextArea();
  txtarea_results.setFont(UIManager.getFont(""String_Node_Str""));
  txtarea_results.setDropMode(DropMode.INSERT);
  txtarea_results.setEditable(false);
  txtarea_results.setWrapStyleWord(true);
  txtarea_results.setLineWrap(true);
  txtarea_results.setBackground(new Color(255,255,240));
  txtarea_results.setMargin(new Insets(10,10,10,15));
  try {
    txtarea_results.setText(__(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  GridBagConstraints gbc_txtarea_results=new GridBagConstraints();
  gbc_txtarea_results.insets=new Insets(0,0,5,5);
  gbc_txtarea_results.fill=GridBagConstraints.BOTH;
  gbc_txtarea_results.gridwidth=3;
  gbc_txtarea_results.gridx=1;
  gbc_txtarea_results.gridy=6;
  tableModel=new DefaultTableModel();
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  table_results=new JTable(tableModel){
    private static final long serialVersionUID=-4430174981226468686L;
    @Override public boolean isCellEditable(    int arg0,    int arg1){
      return false;
    }
  }
;
  table_results.setAutoCreateRowSorter(true);
  table_results.getTableHeader().setReorderingAllowed(false);
  table_results.setFillsViewportHeight(true);
  table_results.setOpaque(true);
  table_results.setRowHeight(25);
  table_results.getColumnModel().getColumn(0).setResizable(false);
  table_results.getColumnModel().getColumn(1).setResizable(false);
  table_results.getColumnModel().getColumn(0).setMaxWidth(100);
  table_results.getColumnModel().getColumn(0).setMinWidth(100);
  table_results.getColumnModel().getColumn(1).setMaxWidth(100);
  table_results.getColumnModel().getColumn(1).setMinWidth(100);
  table_results.getColumnModel().getColumn(2).setMinWidth(130);
  table_results.getColumnModel().getColumn(2).setPreferredWidth(130);
  table_results.getColumnModel().getColumn(3).setMinWidth(270);
  table_results.getColumnModel().getColumn(3).setPreferredWidth(270);
  table_results.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  table_results.getColumnModel().getColumn(0).setCellRenderer(new IconTableCellRenderer());
  table_results.getColumnModel().getColumn(1).setCellRenderer(new BoardTableCellRenderer());
  table_results.getColumnModel().getColumn(2).setCellRenderer(new MultiLineCellRenderer());
  table_results.getColumnModel().getColumn(3).setCellRenderer(new MultiLineCellRenderer());
  scroll_results=new JScrollPane(table_results);
  setBorderStateNormal();
  GridBagConstraints gbc_scroll_results=new GridBagConstraints();
  gbc_scroll_results.insets=new Insets(0,0,5,5);
  gbc_scroll_results.fill=GridBagConstraints.BOTH;
  gbc_scroll_results.gridwidth=3;
  gbc_scroll_results.gridx=1;
  gbc_scroll_results.gridy=6;
  main.add(scroll_results,gbc_scroll_results);
  DragDropListener txtareaDNDListener=new DragDropListener();
  new DropTarget(txtarea_results,txtareaDNDListener);
  if (System.getProperty(""String_Node_Str"").indexOf(""String_Node_Str"") > -1) {
    statusBar=new StatusBar(null,""String_Node_Str"",true);
  }
 else {
    statusBar=new StatusBar(null,""String_Node_Str"",false);
  }
  parent.add(statusBar,BorderLayout.PAGE_END);
  lbl_test=new JLabel();
  GridBagConstraints gbc_lbl_test=new GridBagConstraints();
  gbc_lbl_test.insets=new Insets(0,0,5,5);
  gbc_lbl_test.gridx=3;
  gbc_lbl_test.gridy=2;
  main.add(lbl_test,gbc_lbl_test);
  JMenuBar menuBar=new JMenuBar();
  setJMenuBar(menuBar);
  mn_File=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_File);
  mnItem_Open=new JMenuItem(__(""String_Node_Str""));
  if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mnItem_Open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.META_MASK));
  }
 else {
    mnItem_Open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.CTRL_MASK));
  }
  mnItem_Open.addActionListener(this);
  mn_File.add(mnItem_Open);
  if (!paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mn_File.addSeparator();
    mnItem_Exit=new JMenuItem(__(""String_Node_Str""));
    if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
      mnItem_Exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4,InputEvent.ALT_MASK));
    }
 else {
      mnItem_Exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.CTRL_MASK));
    }
    mnItem_Exit.addActionListener(this);
    mn_File.add(mnItem_Exit);
  }
  mn_Log=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Log);
  mnItem_Save=new JMenuItem(__(""String_Node_Str""));
  if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mnItem_Save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.META_MASK));
  }
 else {
    mnItem_Save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.CTRL_MASK));
  }
  mnItem_Save.setEnabled(false);
  mnItem_Save.addActionListener(this);
  mn_Log.add(mnItem_Save);
  mn_Log.addSeparator();
  opt_AutoSave=new JRadioButtonMenuItem(__(""String_Node_Str""));
  opt_AutoSave.addActionListener(this);
  mn_Log.add(opt_AutoSave);
  mn_Language=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Language);
  opt_Lang=new JRadioButtonMenuItem[paginaEPUBChecker.availableLanguages.length];
  availableLanguagesOriginal=new String[paginaEPUBChecker.availableLanguages.length];
  for (int i=0; i < paginaEPUBChecker.availableLanguages.length; i++) {
    availableLanguagesOriginal[i]=__(paginaEPUBChecker.availableLanguages[i]);
    opt_Lang[i]=new JRadioButtonMenuItem(__(paginaEPUBChecker.availableLanguages[i]));
    if (paginaEPUBChecker.programLanguage.equals(paginaEPUBChecker.availableLanguages[i].toLowerCase())) {
      opt_Lang[i].setSelected(true);
    }
    mn_Language.add(opt_Lang[i]);
    opt_Lang[i].addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        int index=getIndex(availableLanguagesOriginal,e.paramString().split(""String_Node_Str"")[1].replaceAll(""String_Node_Str"",""String_Node_Str""));
        restartWithNewLanguage(paginaEPUBChecker.availableLanguages[index].toLowerCase());
      }
    }
);
  }
  mn_Language.addSeparator();
  opt_Translate=new JRadioButtonMenuItem(__(""String_Node_Str""));
  opt_Translate.addActionListener(this);
  mn_Language.add(opt_Translate);
  mn_Help=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Help);
  mnItem_About=new JMenuItem(__(""String_Node_Str""));
  mnItem_About.addActionListener(this);
  mn_Help.add(mnItem_About);
  mnItem_Translations=new JMenuItem(__(""String_Node_Str""));
  mnItem_Translations.addActionListener(this);
  mn_Help.add(mnItem_Translations);
  mnItem_licenceInformation=new JMenuItem(__(""String_Node_Str""));
  mnItem_licenceInformation.addActionListener(this);
  mn_Help.add(mnItem_licenceInformation);
  mn_Help.addSeparator();
  mnItem_WebsiteEpubcheck=new JMenuItem(__(""String_Node_Str""));
  mnItem_WebsiteEpubcheck.addActionListener(this);
  mn_Help.add(mnItem_WebsiteEpubcheck);
  mnItem_WebsitePagina=new JMenuItem(__(""String_Node_Str""));
  mnItem_WebsitePagina.addActionListener(this);
  mn_Help.add(mnItem_WebsitePagina);
  mn_Help.addSeparator();
  mnItem_Updates=new JMenuItem(__(""String_Node_Str""));
  mnItem_Updates.addActionListener(this);
  mn_Help.add(mnItem_Updates);
  setVisible(true);
  paginaEPUBChecker.guiReady=true;
  validateImmediatelyIfFileIsSet();
  SwingWorker<Void,Void> setOptionsWorker=new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      if (new File(paginaEPUBChecker.path_AutoSaveFile).exists()) {
        try {
          paginaEPUBChecker.AutoSave=Boolean.valueOf(updateCheck.readFileAsString(paginaEPUBChecker.path_AutoSaveFile));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        if (paginaEPUBChecker.AutoSave) {
          opt_AutoSave.setSelected(true);
        }
      }
      if (new File(paginaEPUBChecker.path_TranslateFile).exists()) {
        try {
          paginaEPUBChecker.epubcheck_translate=Boolean.valueOf(updateCheck.readFileAsString(paginaEPUBChecker.path_TranslateFile));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
 else       if (paginaEPUBChecker.programLanguage.equals(""String_Node_Str"")) {
        paginaEPUBChecker.epubcheck_translate=true;
      }
 else {
        paginaEPUBChecker.epubcheck_translate=false;
      }
      opt_Translate.setSelected(paginaEPUBChecker.epubcheck_translate);
      return null;
    }
  }
;
  setOptionsWorker.execute();
}"
20134,"public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int col){
  renderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,col);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  setVerticalAlignment(NORTH);
  setForeground(renderer.getForeground());
  setBackground(renderer.getBackground());
  setFont(renderer.getFont());
  setText(value.toString());
  return this;
}","public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int col){
  renderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,col);
  setBorder(new CompoundBorder(new MatteBorder(0,0,1,1,Color.WHITE),new EmptyBorder(new Insets(5,5,5,5))));
  setVerticalAlignment(NORTH);
  setForeground(renderer.getForeground());
  setBackground(renderer.getBackground());
  setFont(renderer.getFont());
  setText(value.toString());
  return this;
}"
20135,"public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  renderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  setVerticalAlignment(NORTH);
  setForeground(renderer.getForeground());
  setBackground(renderer.getBackground());
  setFont(renderer.getFont());
  if (value instanceof Severity) {
    setText(paginaEPUBChecker.l10n.getString(((Severity)value).toString()));
    setIcon(iconForLogLevel((Severity)value));
  }
  return this;
}","public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  renderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  setBorder(new CompoundBorder(new MatteBorder(0,1,1,1,Color.WHITE),new EmptyBorder(new Insets(5,5,5,5))));
  setVerticalAlignment(NORTH);
  setForeground(renderer.getForeground());
  setBackground(renderer.getBackground());
  setFont(renderer.getFont());
  if (value instanceof Severity) {
    setText(paginaEPUBChecker.l10n.getString(((Severity)value).toString()));
    setIcon(iconForLogLevel((Severity)value));
  }
  return this;
}"
20136,"/** 
 * Returns the component used for drawing the cell.  This method is used to configure the renderer appropriately before drawing.
 * @param table      - JTable object
 * @param value      - the value of the cell to be rendered.
 * @param isSelected - isSelected   true if the cell is to be rendered with the selection highlighted;otherwise false.
 * @param hasFocus   - if true, render cell appropriately.
 * @param row        - The row index of the cell being drawn.
 * @param column     - The column index of the cell being drawn.
 * @return - Returns the component used for drawing the cell.
 */
public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  renderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  setForeground(renderer.getForeground());
  setBackground(renderer.getBackground());
  setBorder(new EmptyBorder(5,5,5,5));
  setFont(renderer.getFont());
  setText(renderer.getText());
  TableColumnModel columnModel=table.getColumnModel();
  setSize(columnModel.getColumn(column).getWidth(),0);
  int height_wanted=(int)getPreferredSize().getHeight();
  addSize(table,row,column,height_wanted);
  height_wanted=findTotalMaximumRowSize(table,row);
  if (height_wanted != table.getRowHeight(row)) {
    table.setRowHeight(row,height_wanted);
  }
  return this;
}","/** 
 * Returns the component used for drawing the cell.  This method is used to configure the renderer appropriately before drawing.
 * @param table      - JTable object
 * @param value      - the value of the cell to be rendered.
 * @param isSelected - isSelected   true if the cell is to be rendered with the selection highlighted;otherwise false.
 * @param hasFocus   - if true, render cell appropriately.
 * @param row        - The row index of the cell being drawn.
 * @param column     - The column index of the cell being drawn.
 * @return - Returns the component used for drawing the cell.
 */
public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  renderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  setForeground(renderer.getForeground());
  setBackground(renderer.getBackground());
  setBorder(new CompoundBorder(new MatteBorder(0,0,1,1,Color.WHITE),new EmptyBorder(new Insets(5,5,5,5))));
  setFont(renderer.getFont());
  setText(renderer.getText());
  TableColumnModel columnModel=table.getColumnModel();
  setSize(columnModel.getColumn(column).getWidth(),0);
  int height_wanted=(int)getPreferredSize().getHeight();
  addSize(table,row,column,height_wanted);
  height_wanted=findTotalMaximumRowSize(table,row);
  if (height_wanted != table.getRowHeight(row)) {
    table.setRowHeight(row,height_wanted);
  }
  return this;
}"
20137,"public mainGUI(){
  super(""String_Node_Str"");
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  setIconImage(paginaEPUBChecker.logoImg32);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (paginaEPUBChecker.MainGuiDimension == null) {
    setSize(775,650);
  }
 else {
    setSize(paginaEPUBChecker.MainGuiDimension);
  }
  setMinimumSize(new Dimension(650,500));
  if (paginaEPUBChecker.MainGuiPosition == null) {
    setLocation(50,50);
  }
 else {
    setLocation(paginaEPUBChecker.MainGuiPosition);
  }
  setAlwaysOnTop(false);
  Container parent=getContentPane();
  BorderLayout borderLayout=new BorderLayout();
  parent.setLayout(borderLayout);
  Container main=new JPanel();
  GridBagLayout gridBagLayout=new GridBagLayout();
  gridBagLayout.columnWidths=new int[]{25,50,103,50,25,0};
  gridBagLayout.rowHeights=new int[]{25,45,15,25,14,15,250,25};
  gridBagLayout.columnWeights=new double[]{0.0,0.0,1.0,0.0,0.0,Double.MIN_VALUE};
  gridBagLayout.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0};
  main.setLayout(gridBagLayout);
  parent.add(main,BorderLayout.CENTER);
  btn_chooseEpubFile=new JButton(__(""String_Node_Str""));
  btn_chooseEpubFile.setFont(btn_chooseEpubFile.getFont().deriveFont(12f));
  btn_chooseEpubFile.addActionListener(this);
  GridBagConstraints gbc_btn_chooseEpubFile=new GridBagConstraints();
  gbc_btn_chooseEpubFile.anchor=GridBagConstraints.WEST;
  gbc_btn_chooseEpubFile.insets=new Insets(0,0,5,5);
  gbc_btn_chooseEpubFile.gridx=1;
  gbc_btn_chooseEpubFile.gridy=1;
  main.add(btn_chooseEpubFile,gbc_btn_chooseEpubFile);
  input_filePath=new JTextField();
  input_filePath.addActionListener(this);
  input_filePath.setFont(input_filePath.getFont().deriveFont(12f));
  GridBagConstraints gbc_input_filePath=new GridBagConstraints();
  gbc_input_filePath.ipady=5;
  gbc_input_filePath.ipadx=5;
  gbc_input_filePath.fill=GridBagConstraints.HORIZONTAL;
  gbc_input_filePath.insets=new Insets(0,0,5,5);
  gbc_input_filePath.gridwidth=2;
  gbc_input_filePath.gridx=2;
  gbc_input_filePath.gridy=1;
  main.add(input_filePath,gbc_input_filePath);
  KeyListener keyListener=new KeyListener(){
    public void keyPressed(    KeyEvent keyEvent){
    }
    public void keyTyped(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent keyEvent){
      if (input_filePath.getText().length() > 0) {
        if (btn_validateEpub.isEnabled() == false) {
          btn_validateEpub.setEnabled(true);
        }
      }
 else {
        if (btn_validateEpub.isEnabled() == true) {
          btn_validateEpub.setEnabled(false);
        }
      }
    }
  }
;
  input_filePath.addKeyListener(keyListener);
  btn_validateEpub=new JButton(__(""String_Node_Str""));
  btn_validateEpub.setEnabled(false);
  btn_validateEpub.addActionListener(this);
  btn_validateEpub.setFont(btn_validateEpub.getFont().deriveFont(btn_validateEpub.getFont().getStyle() | Font.BOLD,btn_validateEpub.getFont().getSize() + 3f));
  GridBagConstraints gbc_btn_validateEpub=new GridBagConstraints();
  gbc_btn_validateEpub.ipady=15;
  gbc_btn_validateEpub.ipadx=10;
  gbc_btn_validateEpub.gridwidth=3;
  gbc_btn_validateEpub.insets=new Insets(0,0,5,5);
  gbc_btn_validateEpub.gridx=1;
  gbc_btn_validateEpub.gridy=3;
  main.add(btn_validateEpub,gbc_btn_validateEpub);
  JLabel lbl_epubcheckVersion=new JLabel(""String_Node_Str"" + __(String.format(""String_Node_Str"",EpubCheck.version())) + ""String_Node_Str"");
  lbl_epubcheckVersion.setForeground(Color.DARK_GRAY);
  lbl_epubcheckVersion.setFont(lbl_epubcheckVersion.getFont().deriveFont(10f));
  lbl_epubcheckVersion.setHorizontalAlignment(SwingConstants.CENTER);
  GridBagConstraints gbc_lbl_epubcheckVersion=new GridBagConstraints();
  gbc_lbl_epubcheckVersion.gridwidth=3;
  gbc_lbl_epubcheckVersion.fill=GridBagConstraints.BOTH;
  gbc_lbl_epubcheckVersion.insets=new Insets(0,0,5,5);
  gbc_lbl_epubcheckVersion.gridx=1;
  gbc_lbl_epubcheckVersion.gridy=4;
  main.add(lbl_epubcheckVersion,gbc_lbl_epubcheckVersion);
  txtarea_results=new JTextArea();
  txtarea_results.setFont(UIManager.getFont(""String_Node_Str""));
  txtarea_results.setDropMode(DropMode.INSERT);
  txtarea_results.setEditable(false);
  txtarea_results.setWrapStyleWord(true);
  txtarea_results.setLineWrap(true);
  txtarea_results.setBackground(new Color(255,255,240));
  txtarea_results.setMargin(new Insets(10,10,10,15));
  try {
    txtarea_results.setText(__(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  GridBagConstraints gbc_txtarea_results=new GridBagConstraints();
  gbc_txtarea_results.insets=new Insets(0,0,5,5);
  gbc_txtarea_results.fill=GridBagConstraints.BOTH;
  gbc_txtarea_results.gridwidth=3;
  gbc_txtarea_results.gridx=1;
  gbc_txtarea_results.gridy=6;
  tableModel=new DefaultTableModel();
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  table_results=new JTable(tableModel){
    private static final long serialVersionUID=-4430174981226468686L;
    @Override public boolean isCellEditable(    int arg0,    int arg1){
      return false;
    }
  }
;
  table_results.setAutoCreateRowSorter(true);
  table_results.getTableHeader().setReorderingAllowed(false);
  table_results.setFillsViewportHeight(true);
  table_results.setOpaque(true);
  table_results.setRowHeight(25);
  table_results.getColumnModel().getColumn(0).setResizable(false);
  table_results.getColumnModel().getColumn(1).setResizable(false);
  table_results.getColumnModel().getColumn(0).setMaxWidth(100);
  table_results.getColumnModel().getColumn(0).setMinWidth(100);
  table_results.getColumnModel().getColumn(1).setMaxWidth(100);
  table_results.getColumnModel().getColumn(1).setMinWidth(100);
  table_results.getColumnModel().getColumn(2).setMinWidth(130);
  table_results.getColumnModel().getColumn(2).setPreferredWidth(130);
  table_results.getColumnModel().getColumn(3).setMinWidth(270);
  table_results.getColumnModel().getColumn(3).setPreferredWidth(270);
  table_results.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  table_results.getColumnModel().getColumn(0).setCellRenderer(new IconTableCellRenderer());
  table_results.getColumnModel().getColumn(1).setCellRenderer(new BoardTableCellRenderer());
  table_results.getColumnModel().getColumn(2).setCellRenderer(new MultiLineCellRenderer());
  table_results.getColumnModel().getColumn(3).setCellRenderer(new MultiLineCellRenderer());
  scroll_results=new JScrollPane(table_results);
  setBorderStateNormal();
  GridBagConstraints gbc_scroll_results=new GridBagConstraints();
  gbc_scroll_results.insets=new Insets(0,0,5,5);
  gbc_scroll_results.fill=GridBagConstraints.BOTH;
  gbc_scroll_results.gridwidth=3;
  gbc_scroll_results.gridx=1;
  gbc_scroll_results.gridy=6;
  main.add(scroll_results,gbc_scroll_results);
  DragDropListener txtareaDNDListener=new DragDropListener();
  new DropTarget(txtarea_results,txtareaDNDListener);
  if (System.getProperty(""String_Node_Str"").indexOf(""String_Node_Str"") > -1) {
    statusBar=new StatusBar(null,""String_Node_Str"",true);
  }
 else {
    statusBar=new StatusBar(null,""String_Node_Str"",false);
  }
  parent.add(statusBar,BorderLayout.PAGE_END);
  lbl_test=new JLabel();
  GridBagConstraints gbc_lbl_test=new GridBagConstraints();
  gbc_lbl_test.insets=new Insets(0,0,5,5);
  gbc_lbl_test.gridx=3;
  gbc_lbl_test.gridy=2;
  main.add(lbl_test,gbc_lbl_test);
  JMenuBar menuBar=new JMenuBar();
  setJMenuBar(menuBar);
  mn_File=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_File);
  mnItem_Open=new JMenuItem(__(""String_Node_Str""));
  if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mnItem_Open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.META_MASK));
  }
 else {
    mnItem_Open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.CTRL_MASK));
  }
  mnItem_Open.addActionListener(this);
  mn_File.add(mnItem_Open);
  if (!paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mn_File.addSeparator();
    mnItem_Exit=new JMenuItem(__(""String_Node_Str""));
    if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
      mnItem_Exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4,InputEvent.ALT_MASK));
    }
 else {
      mnItem_Exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.CTRL_MASK));
    }
    mnItem_Exit.addActionListener(this);
    mn_File.add(mnItem_Exit);
  }
  mn_Log=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Log);
  mnItem_Save=new JMenuItem(__(""String_Node_Str""));
  if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mnItem_Save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.META_MASK));
  }
 else {
    mnItem_Save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.CTRL_MASK));
  }
  mnItem_Save.setEnabled(false);
  mnItem_Save.addActionListener(this);
  mn_Log.add(mnItem_Save);
  mn_Log.addSeparator();
  opt_AutoSave=new JRadioButtonMenuItem(__(""String_Node_Str""));
  opt_AutoSave.addActionListener(this);
  mn_Log.add(opt_AutoSave);
  mn_Language=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Language);
  opt_Lang=new JRadioButtonMenuItem[paginaEPUBChecker.availableLanguages.length];
  availableLanguagesOriginal=new String[paginaEPUBChecker.availableLanguages.length];
  for (int i=0; i < paginaEPUBChecker.availableLanguages.length; i++) {
    availableLanguagesOriginal[i]=__(paginaEPUBChecker.availableLanguages[i]);
    opt_Lang[i]=new JRadioButtonMenuItem(__(paginaEPUBChecker.availableLanguages[i]));
    if (paginaEPUBChecker.programLanguage.equals(paginaEPUBChecker.availableLanguages[i].toLowerCase())) {
      opt_Lang[i].setSelected(true);
    }
    mn_Language.add(opt_Lang[i]);
    opt_Lang[i].addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        int index=getIndex(availableLanguagesOriginal,e.paramString().split(""String_Node_Str"")[1].replaceAll(""String_Node_Str"",""String_Node_Str""));
        restartWithNewLanguage(paginaEPUBChecker.availableLanguages[index].toLowerCase());
      }
    }
);
  }
  mn_Language.addSeparator();
  opt_Translate=new JRadioButtonMenuItem(__(""String_Node_Str""));
  opt_Translate.addActionListener(this);
  mn_Language.add(opt_Translate);
  mn_Help=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Help);
  mnItem_About=new JMenuItem(__(""String_Node_Str""));
  mnItem_About.addActionListener(this);
  mn_Help.add(mnItem_About);
  mnItem_Translations=new JMenuItem(__(""String_Node_Str""));
  mnItem_Translations.addActionListener(this);
  mn_Help.add(mnItem_Translations);
  mnItem_licenceInformation=new JMenuItem(__(""String_Node_Str""));
  mnItem_licenceInformation.addActionListener(this);
  mn_Help.add(mnItem_licenceInformation);
  mn_Help.addSeparator();
  mnItem_WebsiteEpubcheck=new JMenuItem(__(""String_Node_Str""));
  mnItem_WebsiteEpubcheck.addActionListener(this);
  mn_Help.add(mnItem_WebsiteEpubcheck);
  mnItem_WebsitePagina=new JMenuItem(__(""String_Node_Str""));
  mnItem_WebsitePagina.addActionListener(this);
  mn_Help.add(mnItem_WebsitePagina);
  mn_Help.addSeparator();
  mnItem_Updates=new JMenuItem(__(""String_Node_Str""));
  mnItem_Updates.addActionListener(this);
  mn_Help.add(mnItem_Updates);
  setVisible(true);
  paginaEPUBChecker.guiReady=true;
  validateImmediatelyIfFileIsSet();
  SwingWorker<Void,Void> setOptionsWorker=new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      if (new File(paginaEPUBChecker.path_AutoSaveFile).exists()) {
        try {
          paginaEPUBChecker.AutoSave=Boolean.valueOf(updateCheck.readFileAsString(paginaEPUBChecker.path_AutoSaveFile));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        if (paginaEPUBChecker.AutoSave) {
          opt_AutoSave.setSelected(true);
        }
      }
      if (new File(paginaEPUBChecker.path_TranslateFile).exists()) {
        try {
          paginaEPUBChecker.epubcheck_translate=Boolean.valueOf(updateCheck.readFileAsString(paginaEPUBChecker.path_TranslateFile));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
 else       if (paginaEPUBChecker.programLanguage.equals(""String_Node_Str"")) {
        paginaEPUBChecker.epubcheck_translate=true;
      }
 else {
        paginaEPUBChecker.epubcheck_translate=false;
      }
      opt_Translate.setSelected(paginaEPUBChecker.epubcheck_translate);
      return null;
    }
  }
;
  setOptionsWorker.execute();
}","public mainGUI(){
  super(""String_Node_Str"");
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  setIconImage(paginaEPUBChecker.logoImg32);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (paginaEPUBChecker.MainGuiDimension == null) {
    setSize(775,650);
  }
 else {
    setSize(paginaEPUBChecker.MainGuiDimension);
  }
  setMinimumSize(new Dimension(650,500));
  if (paginaEPUBChecker.MainGuiPosition == null) {
    setLocation(50,50);
  }
 else {
    setLocation(paginaEPUBChecker.MainGuiPosition);
  }
  setAlwaysOnTop(false);
  Container parent=getContentPane();
  BorderLayout borderLayout=new BorderLayout();
  parent.setLayout(borderLayout);
  Container main=new JPanel();
  GridBagLayout gridBagLayout=new GridBagLayout();
  gridBagLayout.columnWidths=new int[]{25,50,103,50,25,0};
  gridBagLayout.rowHeights=new int[]{25,45,15,25,14,15,250,25};
  gridBagLayout.columnWeights=new double[]{0.0,0.0,1.0,0.0,0.0,Double.MIN_VALUE};
  gridBagLayout.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0};
  main.setLayout(gridBagLayout);
  parent.add(main,BorderLayout.CENTER);
  btn_chooseEpubFile=new JButton(__(""String_Node_Str""));
  btn_chooseEpubFile.setFont(btn_chooseEpubFile.getFont().deriveFont(12f));
  btn_chooseEpubFile.addActionListener(this);
  GridBagConstraints gbc_btn_chooseEpubFile=new GridBagConstraints();
  gbc_btn_chooseEpubFile.anchor=GridBagConstraints.WEST;
  gbc_btn_chooseEpubFile.insets=new Insets(0,0,5,5);
  gbc_btn_chooseEpubFile.gridx=1;
  gbc_btn_chooseEpubFile.gridy=1;
  main.add(btn_chooseEpubFile,gbc_btn_chooseEpubFile);
  input_filePath=new JTextField();
  input_filePath.addActionListener(this);
  input_filePath.setFont(input_filePath.getFont().deriveFont(12f));
  GridBagConstraints gbc_input_filePath=new GridBagConstraints();
  gbc_input_filePath.ipady=5;
  gbc_input_filePath.ipadx=5;
  gbc_input_filePath.fill=GridBagConstraints.HORIZONTAL;
  gbc_input_filePath.insets=new Insets(0,0,5,5);
  gbc_input_filePath.gridwidth=2;
  gbc_input_filePath.gridx=2;
  gbc_input_filePath.gridy=1;
  main.add(input_filePath,gbc_input_filePath);
  KeyListener keyListener=new KeyListener(){
    public void keyPressed(    KeyEvent keyEvent){
    }
    public void keyTyped(    KeyEvent e){
    }
    public void keyReleased(    KeyEvent keyEvent){
      if (input_filePath.getText().length() > 0) {
        if (btn_validateEpub.isEnabled() == false) {
          btn_validateEpub.setEnabled(true);
        }
      }
 else {
        if (btn_validateEpub.isEnabled() == true) {
          btn_validateEpub.setEnabled(false);
        }
      }
    }
  }
;
  input_filePath.addKeyListener(keyListener);
  btn_validateEpub=new JButton(__(""String_Node_Str""));
  btn_validateEpub.setEnabled(false);
  btn_validateEpub.addActionListener(this);
  btn_validateEpub.setFont(btn_validateEpub.getFont().deriveFont(btn_validateEpub.getFont().getStyle() | Font.BOLD,btn_validateEpub.getFont().getSize() + 3f));
  GridBagConstraints gbc_btn_validateEpub=new GridBagConstraints();
  gbc_btn_validateEpub.ipady=15;
  gbc_btn_validateEpub.ipadx=10;
  gbc_btn_validateEpub.gridwidth=3;
  gbc_btn_validateEpub.insets=new Insets(0,0,5,5);
  gbc_btn_validateEpub.gridx=1;
  gbc_btn_validateEpub.gridy=3;
  main.add(btn_validateEpub,gbc_btn_validateEpub);
  JLabel lbl_epubcheckVersion=new JLabel(""String_Node_Str"" + __(String.format(""String_Node_Str"",EpubCheck.version())) + ""String_Node_Str"");
  lbl_epubcheckVersion.setForeground(Color.DARK_GRAY);
  lbl_epubcheckVersion.setFont(lbl_epubcheckVersion.getFont().deriveFont(10f));
  lbl_epubcheckVersion.setHorizontalAlignment(SwingConstants.CENTER);
  GridBagConstraints gbc_lbl_epubcheckVersion=new GridBagConstraints();
  gbc_lbl_epubcheckVersion.gridwidth=3;
  gbc_lbl_epubcheckVersion.fill=GridBagConstraints.BOTH;
  gbc_lbl_epubcheckVersion.insets=new Insets(0,0,5,5);
  gbc_lbl_epubcheckVersion.gridx=1;
  gbc_lbl_epubcheckVersion.gridy=4;
  main.add(lbl_epubcheckVersion,gbc_lbl_epubcheckVersion);
  txtarea_results=new JTextArea();
  txtarea_results.setFont(UIManager.getFont(""String_Node_Str""));
  txtarea_results.setDropMode(DropMode.INSERT);
  txtarea_results.setEditable(false);
  txtarea_results.setWrapStyleWord(true);
  txtarea_results.setLineWrap(true);
  txtarea_results.setBackground(new Color(255,255,240));
  txtarea_results.setMargin(new Insets(10,10,10,15));
  try {
    txtarea_results.setText(__(""String_Node_Str""));
  }
 catch (  Exception e) {
  }
  GridBagConstraints gbc_txtarea_results=new GridBagConstraints();
  gbc_txtarea_results.insets=new Insets(0,0,5,5);
  gbc_txtarea_results.fill=GridBagConstraints.BOTH;
  gbc_txtarea_results.gridwidth=3;
  gbc_txtarea_results.gridx=1;
  gbc_txtarea_results.gridy=6;
  tableModel=new DefaultTableModel();
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  tableModel.addColumn(""String_Node_Str"");
  table_results=new JTable(tableModel){
    private static final long serialVersionUID=-4430174981226468686L;
    @Override public boolean isCellEditable(    int arg0,    int arg1){
      return false;
    }
  }
;
  table_results.setAutoCreateRowSorter(true);
  table_results.getTableHeader().setReorderingAllowed(false);
  table_results.setFillsViewportHeight(true);
  table_results.setOpaque(true);
  table_results.setRowHeight(25);
  table_results.setShowGrid(false);
  table_results.setIntercellSpacing(new Dimension(0,0));
  table_results.setRowMargin(0);
  table_results.getColumnModel().getColumn(0).setResizable(false);
  table_results.getColumnModel().getColumn(1).setResizable(false);
  table_results.getColumnModel().getColumn(0).setMaxWidth(100);
  table_results.getColumnModel().getColumn(0).setMinWidth(100);
  table_results.getColumnModel().getColumn(1).setMaxWidth(100);
  table_results.getColumnModel().getColumn(1).setMinWidth(100);
  table_results.getColumnModel().getColumn(2).setMinWidth(130);
  table_results.getColumnModel().getColumn(2).setPreferredWidth(130);
  table_results.getColumnModel().getColumn(3).setMinWidth(270);
  table_results.getColumnModel().getColumn(3).setPreferredWidth(270);
  table_results.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  table_results.getColumnModel().getColumn(0).setCellRenderer(new IconTableCellRenderer());
  table_results.getColumnModel().getColumn(1).setCellRenderer(new BoardTableCellRenderer());
  table_results.getColumnModel().getColumn(2).setCellRenderer(new MultiLineCellRenderer());
  table_results.getColumnModel().getColumn(3).setCellRenderer(new MultiLineCellRenderer());
  scroll_results=new JScrollPane(table_results);
  setBorderStateNormal();
  GridBagConstraints gbc_scroll_results=new GridBagConstraints();
  gbc_scroll_results.insets=new Insets(0,0,5,5);
  gbc_scroll_results.fill=GridBagConstraints.BOTH;
  gbc_scroll_results.gridwidth=3;
  gbc_scroll_results.gridx=1;
  gbc_scroll_results.gridy=6;
  main.add(scroll_results,gbc_scroll_results);
  DragDropListener txtareaDNDListener=new DragDropListener();
  new DropTarget(txtarea_results,txtareaDNDListener);
  if (System.getProperty(""String_Node_Str"").indexOf(""String_Node_Str"") > -1) {
    statusBar=new StatusBar(null,""String_Node_Str"",true);
  }
 else {
    statusBar=new StatusBar(null,""String_Node_Str"",false);
  }
  parent.add(statusBar,BorderLayout.PAGE_END);
  lbl_test=new JLabel();
  GridBagConstraints gbc_lbl_test=new GridBagConstraints();
  gbc_lbl_test.insets=new Insets(0,0,5,5);
  gbc_lbl_test.gridx=3;
  gbc_lbl_test.gridy=2;
  main.add(lbl_test,gbc_lbl_test);
  JMenuBar menuBar=new JMenuBar();
  setJMenuBar(menuBar);
  mn_File=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_File);
  mnItem_Open=new JMenuItem(__(""String_Node_Str""));
  if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mnItem_Open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.META_MASK));
  }
 else {
    mnItem_Open.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.CTRL_MASK));
  }
  mnItem_Open.addActionListener(this);
  mn_File.add(mnItem_Open);
  if (!paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mn_File.addSeparator();
    mnItem_Exit=new JMenuItem(__(""String_Node_Str""));
    if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
      mnItem_Exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4,InputEvent.ALT_MASK));
    }
 else {
      mnItem_Exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.CTRL_MASK));
    }
    mnItem_Exit.addActionListener(this);
    mn_File.add(mnItem_Exit);
  }
  mn_Log=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Log);
  mnItem_Save=new JMenuItem(__(""String_Node_Str""));
  if (paginaEPUBChecker.os_name.equals(""String_Node_Str"")) {
    mnItem_Save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.META_MASK));
  }
 else {
    mnItem_Save.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.CTRL_MASK));
  }
  mnItem_Save.setEnabled(false);
  mnItem_Save.addActionListener(this);
  mn_Log.add(mnItem_Save);
  mn_Log.addSeparator();
  opt_AutoSave=new JRadioButtonMenuItem(__(""String_Node_Str""));
  opt_AutoSave.addActionListener(this);
  mn_Log.add(opt_AutoSave);
  mn_Language=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Language);
  opt_Lang=new JRadioButtonMenuItem[paginaEPUBChecker.availableLanguages.length];
  availableLanguagesOriginal=new String[paginaEPUBChecker.availableLanguages.length];
  for (int i=0; i < paginaEPUBChecker.availableLanguages.length; i++) {
    availableLanguagesOriginal[i]=__(paginaEPUBChecker.availableLanguages[i]);
    opt_Lang[i]=new JRadioButtonMenuItem(__(paginaEPUBChecker.availableLanguages[i]));
    if (paginaEPUBChecker.programLanguage.equals(paginaEPUBChecker.availableLanguages[i].toLowerCase())) {
      opt_Lang[i].setSelected(true);
    }
    mn_Language.add(opt_Lang[i]);
    opt_Lang[i].addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        int index=getIndex(availableLanguagesOriginal,e.paramString().split(""String_Node_Str"")[1].replaceAll(""String_Node_Str"",""String_Node_Str""));
        restartWithNewLanguage(paginaEPUBChecker.availableLanguages[index].toLowerCase());
      }
    }
);
  }
  mn_Language.addSeparator();
  opt_Translate=new JRadioButtonMenuItem(__(""String_Node_Str""));
  opt_Translate.addActionListener(this);
  mn_Language.add(opt_Translate);
  mn_Help=new JMenu(__(""String_Node_Str""));
  menuBar.add(mn_Help);
  mnItem_About=new JMenuItem(__(""String_Node_Str""));
  mnItem_About.addActionListener(this);
  mn_Help.add(mnItem_About);
  mnItem_Translations=new JMenuItem(__(""String_Node_Str""));
  mnItem_Translations.addActionListener(this);
  mn_Help.add(mnItem_Translations);
  mnItem_licenceInformation=new JMenuItem(__(""String_Node_Str""));
  mnItem_licenceInformation.addActionListener(this);
  mn_Help.add(mnItem_licenceInformation);
  mn_Help.addSeparator();
  mnItem_WebsiteEpubcheck=new JMenuItem(__(""String_Node_Str""));
  mnItem_WebsiteEpubcheck.addActionListener(this);
  mn_Help.add(mnItem_WebsiteEpubcheck);
  mnItem_WebsitePagina=new JMenuItem(__(""String_Node_Str""));
  mnItem_WebsitePagina.addActionListener(this);
  mn_Help.add(mnItem_WebsitePagina);
  mn_Help.addSeparator();
  mnItem_Updates=new JMenuItem(__(""String_Node_Str""));
  mnItem_Updates.addActionListener(this);
  mn_Help.add(mnItem_Updates);
  setVisible(true);
  paginaEPUBChecker.guiReady=true;
  validateImmediatelyIfFileIsSet();
  SwingWorker<Void,Void> setOptionsWorker=new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      if (new File(paginaEPUBChecker.path_AutoSaveFile).exists()) {
        try {
          paginaEPUBChecker.AutoSave=Boolean.valueOf(updateCheck.readFileAsString(paginaEPUBChecker.path_AutoSaveFile));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
        if (paginaEPUBChecker.AutoSave) {
          opt_AutoSave.setSelected(true);
        }
      }
      if (new File(paginaEPUBChecker.path_TranslateFile).exists()) {
        try {
          paginaEPUBChecker.epubcheck_translate=Boolean.valueOf(updateCheck.readFileAsString(paginaEPUBChecker.path_TranslateFile));
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
 else       if (paginaEPUBChecker.programLanguage.equals(""String_Node_Str"")) {
        paginaEPUBChecker.epubcheck_translate=true;
      }
 else {
        paginaEPUBChecker.epubcheck_translate=false;
      }
      opt_Translate.setSelected(paginaEPUBChecker.epubcheck_translate);
      return null;
    }
  }
;
  setOptionsWorker.execute();
}"
20138,"public updateCheck(Boolean performInBackground){
  if (performInBackground) {
    backgroundTask=true;
  }
 else {
    backgroundTask=false;
  }
  Calendar cal=Calendar.getInstance();
  SimpleDateFormat sdfCheck=new SimpleDateFormat(""String_Node_Str"");
  String UpdateCheckToday=sdfCheck.format(cal.getTime()).toString();
  if (backgroundTask && new File(paginaEPUBChecker.path_LastUpdateCheckFile).exists()) {
    String UpdateCheckLast=null;
    try {
      UpdateCheckLast=readFileAsString(paginaEPUBChecker.path_LastUpdateCheckFile);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (Integer.parseInt(UpdateCheckLast) == Integer.parseInt(UpdateCheckToday) && UpdateCheckLast != null) {
      return;
    }
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  try {
    NetTest internetTest=new NetTest(""String_Node_Str"");
    boolean hasInternetConnection=internetTest.testInternetConnection();
    if (hasInternetConnection == false) {
      errorInternetConnectionNotAvailable();
      return;
    }
  }
 catch (  MalformedURLException e1) {
    errorUpdateCheck(e1);
    return;
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  try {
    NetTest updateserverTest=new NetTest(updateCheckURL);
    boolean updateserverReady=updateserverTest.testWebsiteConnection(NetTest.HTTP_OK);
    if (updateserverReady == false) {
      errorUpdateServerNotAvailable();
      return;
    }
  }
 catch (  MalformedURLException e2) {
    errorUpdateCheck(e2);
    return;
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  DocumentBuilderFactory domFactory=DocumentBuilderFactory.newInstance();
  domFactory.setNamespaceAware(true);
  try {
    builder=domFactory.newDocumentBuilder();
    XPathFactory factory=XPathFactory.newInstance();
    xpath=factory.newXPath();
    writeStringToFile(paginaEPUBChecker.path_LastUpdateCheckFile,UpdateCheckToday);
    String[] UpdateInfo=retrieve_UpdateInfo(paginaEPUBChecker.os_name);
    if (Integer.parseInt(paginaEPUBChecker.PROGRAMVERSION.replace(""String_Node_Str"",""String_Node_Str"")) < Integer.parseInt(UpdateInfo[0].replace(""String_Node_Str"",""String_Node_Str""))) {
      mainGUI.statusBar.reset();
      messageGUI msg=new messageGUI();
      int answer=msg.showQuestion(__(""String_Node_Str"").replaceAll(""String_Node_Str"",UpdateInfo[0]) + ""String_Node_Str"" + __(""String_Node_Str"").replaceAll(""String_Node_Str"",paginaEPUBChecker.PROGRAMVERSION)+ ""String_Node_Str""+ __(""String_Node_Str"").replaceAll(""String_Node_Str"",UpdateInfo[0])+ ""String_Node_Str""+ UpdateInfo[3]+ ""String_Node_Str""+ __(""String_Node_Str""));
      if (answer == JOptionPane.YES_OPTION) {
        dlgui=new FileDownloader(UpdateInfo[2],System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str"",String.format(__(""String_Node_Str""),UpdateInfo[0],UpdateInfo[1],paginaEPUBChecker.PROGRAMVERSION,paginaEPUBChecker.VERSIONDATE));
      }
 else {
        return;
      }
    }
 else {
      if (backgroundTask) {
        mainGUI.statusBar.update(null,__(""String_Node_Str""));
      }
 else {
        messageGUI msg=new messageGUI();
        mainGUI.statusBar.reset();
        msg.showMessage(__(""String_Node_Str""),__(""String_Node_Str""));
      }
      return;
    }
  }
 catch (  Exception e) {
    errorUpdateCheck(e);
    return;
  }
}","public updateCheck(Boolean performInBackground){
  if (performInBackground) {
    backgroundTask=true;
  }
 else {
    backgroundTask=false;
  }
  Calendar cal=Calendar.getInstance();
  SimpleDateFormat sdfCheck=new SimpleDateFormat(""String_Node_Str"");
  String UpdateCheckToday=sdfCheck.format(cal.getTime()).toString();
  if (backgroundTask && new File(paginaEPUBChecker.path_LastUpdateCheckFile).exists()) {
    String UpdateCheckLast=null;
    try {
      UpdateCheckLast=readFileAsString(paginaEPUBChecker.path_LastUpdateCheckFile);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (Integer.parseInt(UpdateCheckLast) == Integer.parseInt(UpdateCheckToday) && UpdateCheckLast != null) {
      return;
    }
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  try {
    NetTest internetTest=new NetTest(""String_Node_Str"");
    boolean hasInternetConnection=internetTest.testInternetConnection();
    if (hasInternetConnection == false) {
      errorInternetConnectionNotAvailable();
      return;
    }
  }
 catch (  MalformedURLException e1) {
    errorUpdateCheck(e1);
    return;
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  try {
    NetTest updateserverTest=new NetTest(updateCheckURL);
    boolean updateserverReady=updateserverTest.testWebsiteConnection(NetTest.HTTP_OK);
    if (updateserverReady == false) {
      errorUpdateServerNotAvailable();
      return;
    }
  }
 catch (  MalformedURLException e2) {
    errorUpdateCheck(e2);
    return;
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  DocumentBuilderFactory domFactory=DocumentBuilderFactory.newInstance();
  domFactory.setNamespaceAware(true);
  try {
    builder=domFactory.newDocumentBuilder();
    XPathFactory factory=XPathFactory.newInstance(XPathFactory.DEFAULT_OBJECT_MODEL_URI,""String_Node_Str"",ClassLoader.getSystemClassLoader());
    xpath=factory.newXPath();
    writeStringToFile(paginaEPUBChecker.path_LastUpdateCheckFile,UpdateCheckToday);
    String[] UpdateInfo=retrieve_UpdateInfo(paginaEPUBChecker.os_name);
    if (Integer.parseInt(paginaEPUBChecker.PROGRAMVERSION.replace(""String_Node_Str"",""String_Node_Str"")) < Integer.parseInt(UpdateInfo[0].replace(""String_Node_Str"",""String_Node_Str""))) {
      mainGUI.statusBar.reset();
      messageGUI msg=new messageGUI();
      int answer=msg.showQuestion(__(""String_Node_Str"").replaceAll(""String_Node_Str"",UpdateInfo[0]) + ""String_Node_Str"" + __(""String_Node_Str"").replaceAll(""String_Node_Str"",paginaEPUBChecker.PROGRAMVERSION)+ ""String_Node_Str""+ __(""String_Node_Str"").replaceAll(""String_Node_Str"",UpdateInfo[0])+ ""String_Node_Str""+ UpdateInfo[3]+ ""String_Node_Str""+ __(""String_Node_Str""));
      if (answer == JOptionPane.YES_OPTION) {
        dlgui=new FileDownloader(UpdateInfo[2],System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str"",String.format(__(""String_Node_Str""),UpdateInfo[0],UpdateInfo[1],paginaEPUBChecker.PROGRAMVERSION,paginaEPUBChecker.VERSIONDATE));
      }
 else {
        return;
      }
    }
 else {
      if (backgroundTask) {
        mainGUI.statusBar.update(null,__(""String_Node_Str""));
      }
 else {
        messageGUI msg=new messageGUI();
        mainGUI.statusBar.reset();
        msg.showMessage(__(""String_Node_Str""),__(""String_Node_Str""));
      }
      return;
    }
  }
 catch (  Exception e) {
    errorUpdateCheck(e);
    return;
  }
}"
20139,"private static JSONObject loadLanguageFile(String language) throws IOException {
  return JSON.parseString(JSON.readResourceAsString(Localization.class,""String_Node_Str"" + language + ""String_Node_Str""));
}","private static JSONObject loadLanguageFile(String language){
  try {
    return JSON.parseString(JSON.readResourceAsString(Localization.class,""String_Node_Str"" + language + ""String_Node_Str""));
  }
 catch (  IOException e) {
    paginaEPUBChecker.programLanguage=""String_Node_Str"";
    return loadLanguageFile(""String_Node_Str"");
  }
}"
20140,"public Localization(){
  lang=null;
  try {
    if (paginaEPUBChecker.programLanguage.equals(""String_Node_Str"")) {
      String locale=System.getProperty(""String_Node_Str"");
      if (locale.equals(""String_Node_Str"")) {
        paginaEPUBChecker.programLanguage=""String_Node_Str"";
        lang=loadLanguageFile(""String_Node_Str"");
      }
 else       if (locale.equals(""String_Node_Str"")) {
        paginaEPUBChecker.programLanguage=""String_Node_Str"";
        lang=loadLanguageFile(""String_Node_Str"");
      }
 else {
        paginaEPUBChecker.programLanguage=""String_Node_Str"";
        lang=loadLanguageFile(""String_Node_Str"");
      }
    }
 else {
      lang=loadLanguageFile(paginaEPUBChecker.programLanguage);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
}","public Localization(){
  lang=null;
  if (paginaEPUBChecker.programLanguage.equals(""String_Node_Str"")) {
    String locale=System.getProperty(""String_Node_Str"");
    if (locale.equals(""String_Node_Str"")) {
      paginaEPUBChecker.programLanguage=""String_Node_Str"";
      lang=loadLanguageFile(""String_Node_Str"");
    }
 else     if (locale.equals(""String_Node_Str"")) {
      paginaEPUBChecker.programLanguage=""String_Node_Str"";
      lang=loadLanguageFile(""String_Node_Str"");
    }
 else     if (locale.equals(""String_Node_Str"")) {
      paginaEPUBChecker.programLanguage=""String_Node_Str"";
      lang=loadLanguageFile(""String_Node_Str"");
    }
 else {
      paginaEPUBChecker.programLanguage=""String_Node_Str"";
      lang=loadLanguageFile(""String_Node_Str"");
    }
  }
 else {
    lang=loadLanguageFile(paginaEPUBChecker.programLanguage);
  }
}"
20141,"public updateCheck(Boolean performInBackground){
  if (performInBackground) {
    backgroundTask=true;
  }
 else {
    backgroundTask=false;
  }
  Calendar cal=Calendar.getInstance();
  SimpleDateFormat sdfCheck=new SimpleDateFormat(""String_Node_Str"");
  String UpdateCheckToday=sdfCheck.format(cal.getTime()).toString();
  if (backgroundTask && new File(paginaEPUBChecker.path_LastUpdateCheckFile).exists()) {
    String UpdateCheckLast=null;
    try {
      UpdateCheckLast=readFileAsString(paginaEPUBChecker.path_LastUpdateCheckFile);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (Integer.parseInt(UpdateCheckLast) == Integer.parseInt(UpdateCheckToday) && UpdateCheckLast != null) {
      return;
    }
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  if (!new NetTest().InternetTester(""String_Node_Str"")) {
    if (backgroundTask) {
      mainGUI.statusBar.update(null,__(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      return;
    }
 else {
      messageGUI msg=new messageGUI();
      mainGUI.statusBar.update(null,null);
      msg.showError(__(""String_Node_Str""));
      return;
    }
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  if (!new NetTest().InternetTester(updateCheckURL)) {
    if (backgroundTask) {
      mainGUI.statusBar.update(null,__(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      return;
    }
 else {
      messageGUI msg=new messageGUI();
      mainGUI.statusBar.update(null,null);
      msg.showError(__(""String_Node_Str""));
      return;
    }
  }
  DocumentBuilderFactory domFactory=DocumentBuilderFactory.newInstance();
  domFactory.setNamespaceAware(true);
  try {
    builder=domFactory.newDocumentBuilder();
    XPathFactory factory=XPathFactory.newInstance();
    xpath=factory.newXPath();
    writeStringToFile(paginaEPUBChecker.path_LastUpdateCheckFile,UpdateCheckToday);
    mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
    String[] UpdateInfo=retrieve_UpdateInfo(paginaEPUBChecker.os_name);
    if (Integer.parseInt(paginaEPUBChecker.PROGRAMVERSION.replace(""String_Node_Str"",""String_Node_Str"")) < Integer.parseInt(UpdateInfo[0].replace(""String_Node_Str"",""String_Node_Str""))) {
      mainGUI.statusBar.update(null,null);
      messageGUI msg=new messageGUI();
      int answer=msg.showQuestion(__(""String_Node_Str"").replaceAll(""String_Node_Str"",UpdateInfo[0]) + ""String_Node_Str"" + __(""String_Node_Str"").replaceAll(""String_Node_Str"",paginaEPUBChecker.PROGRAMVERSION)+ ""String_Node_Str""+ __(""String_Node_Str"").replaceAll(""String_Node_Str"",UpdateInfo[0])+ ""String_Node_Str""+ UpdateInfo[3]+ ""String_Node_Str""+ __(""String_Node_Str""));
      if (answer == JOptionPane.YES_OPTION) {
        dlgui=new FileDownloader(UpdateInfo[2],System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str"",""String_Node_Str"" + UpdateInfo[0] + ""String_Node_Str""+ UpdateInfo[1]+ ""String_Node_Str""+ paginaEPUBChecker.PROGRAMVERSION+ ""String_Node_Str""+ paginaEPUBChecker.VERSIONDATE+ ""String_Node_Str"");
      }
 else {
        return;
      }
    }
 else {
      if (backgroundTask) {
        mainGUI.statusBar.update(null,__(""String_Node_Str""));
        return;
      }
 else {
        messageGUI msg=new messageGUI();
        mainGUI.statusBar.update(null,null);
        msg.showMessage(__(""String_Node_Str""));
        return;
      }
    }
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  XPathExpressionException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public updateCheck(Boolean performInBackground){
  if (performInBackground) {
    backgroundTask=true;
  }
 else {
    backgroundTask=false;
  }
  Calendar cal=Calendar.getInstance();
  SimpleDateFormat sdfCheck=new SimpleDateFormat(""String_Node_Str"");
  String UpdateCheckToday=sdfCheck.format(cal.getTime()).toString();
  if (backgroundTask && new File(paginaEPUBChecker.path_LastUpdateCheckFile).exists()) {
    String UpdateCheckLast=null;
    try {
      UpdateCheckLast=readFileAsString(paginaEPUBChecker.path_LastUpdateCheckFile);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (Integer.parseInt(UpdateCheckLast) == Integer.parseInt(UpdateCheckToday) && UpdateCheckLast != null) {
      return;
    }
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  if (!new NetTest().InternetTester(""String_Node_Str"")) {
    if (backgroundTask) {
      mainGUI.statusBar.update(null,__(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      return;
    }
 else {
      messageGUI msg=new messageGUI();
      mainGUI.statusBar.update(null,null);
      msg.showError(__(""String_Node_Str""));
      return;
    }
  }
  mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
  if (!new NetTest().InternetTester(updateCheckURL)) {
    if (backgroundTask) {
      mainGUI.statusBar.update(null,__(""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
      return;
    }
 else {
      messageGUI msg=new messageGUI();
      mainGUI.statusBar.update(null,null);
      msg.showError(__(""String_Node_Str""));
      return;
    }
  }
  DocumentBuilderFactory domFactory=DocumentBuilderFactory.newInstance();
  domFactory.setNamespaceAware(true);
  try {
    builder=domFactory.newDocumentBuilder();
    XPathFactory factory=XPathFactory.newInstance();
    xpath=factory.newXPath();
    writeStringToFile(paginaEPUBChecker.path_LastUpdateCheckFile,UpdateCheckToday);
    mainGUI.statusBar.update(paginaEPUBChecker.loadingIcon,__(""String_Node_Str""));
    String[] UpdateInfo=retrieve_UpdateInfo(paginaEPUBChecker.os_name);
    if (Integer.parseInt(paginaEPUBChecker.PROGRAMVERSION.replace(""String_Node_Str"",""String_Node_Str"")) < Integer.parseInt(UpdateInfo[0].replace(""String_Node_Str"",""String_Node_Str""))) {
      mainGUI.statusBar.update(null,null);
      messageGUI msg=new messageGUI();
      int answer=msg.showQuestion(__(""String_Node_Str"").replaceAll(""String_Node_Str"",UpdateInfo[0]) + ""String_Node_Str"" + __(""String_Node_Str"").replaceAll(""String_Node_Str"",paginaEPUBChecker.PROGRAMVERSION)+ ""String_Node_Str""+ __(""String_Node_Str"").replaceAll(""String_Node_Str"",UpdateInfo[0])+ ""String_Node_Str""+ UpdateInfo[3]+ ""String_Node_Str""+ __(""String_Node_Str""));
      if (answer == JOptionPane.YES_OPTION) {
        dlgui=new FileDownloader(UpdateInfo[2],System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str"",String.format(__(""String_Node_Str""),UpdateInfo[0],UpdateInfo[1],paginaEPUBChecker.PROGRAMVERSION,paginaEPUBChecker.VERSIONDATE));
      }
 else {
        return;
      }
    }
 else {
      if (backgroundTask) {
        mainGUI.statusBar.update(null,__(""String_Node_Str""));
        return;
      }
 else {
        messageGUI msg=new messageGUI();
        mainGUI.statusBar.update(null,null);
        msg.showMessage(__(""String_Node_Str""));
        return;
      }
    }
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  XPathExpressionException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}"
20142,"/** 
 * Creates a new   {@link ComplianceMatcher} against the provided {@link RuleSet}.
 * @param ruleSet
 */
public ComplianceMatcher(RuleSet ruleSet){
  this.ruleSet=ruleSet;
}","/** 
 * Creates a new   {@link ComplianceMatcher} against the provided {@link RuleSet}.
 * @param ruleSet the {@link RuleSet} to be used
 */
public ComplianceMatcher(RuleSet ruleSet){
  this.ruleSet=ruleSet;
}"
20143,"/** 
 * Delete a message that does not exist.
 */
public void testDeleteAMessageThatDoesNotExist() throws BurrowException {
  String id=""String_Node_Str"";
  try {
    backend.execute(queue.deleteMessage(id));
    fail(""String_Node_Str"");
  }
 catch (  CommandException e) {
  }
}","/** 
 * Delete a message that does not exist.
 */
public void testDeleteAMessageThatDoesNotExist() throws BurrowException {
  String id=""String_Node_Str"";
  try {
    backend.execute(queue.deleteMessage(id));
    fail(""String_Node_Str"");
  }
 catch (  MessageNotFoundException e) {
  }
}"
20144,"/** 
 * Implicitly create two queues then delete them one at a time.
 */
public void testDeleteQueuesWithDetail() throws BurrowException {
  String messageId=""String_Node_Str"";
  String messageBody=""String_Node_Str"";
  String queueIds[]={""String_Node_Str"",""String_Node_Str""};
  Queue queues[]={account.Queue(queueIds[0]),account.Queue(queueIds[1])};
  boolean[] seenQueues;
  try {
    backend.execute(account.deleteQueues());
  }
 catch (  CommandException ce) {
  }
  backend.execute(queues[0].createMessage(messageId,messageBody));
  backend.execute(queues[1].createMessage(messageId,messageBody));
  seenQueues=scanQueues(backend.execute(account.getQueues()),queueIds);
  assertTrue(seenQueues[0]);
  assertTrue(seenQueues[1]);
  seenQueues=scanQueues(backend.execute(account.deleteQueues().withLimit(1).withDetail(""String_Node_Str"")),queueIds);
  assertTrue(seenQueues[0] || seenQueues[1]);
  assertFalse(seenQueues[0] && seenQueues[1]);
  seenQueues=scanQueues(backend.execute(account.deleteQueues().withLimit(1).withDetail(""String_Node_Str"")),queueIds);
  assertTrue(seenQueues[0] || seenQueues[1]);
  assertFalse(seenQueues[0] && seenQueues[1]);
}","/** 
 * Implicitly create two queues then delete them one at a time.
 */
public void testDeleteQueuesWithDetail() throws BurrowException {
  String messageId=""String_Node_Str"";
  String messageBody=""String_Node_Str"";
  String queueIds[]={""String_Node_Str"",""String_Node_Str""};
  Queue queues[]={account.Queue(queueIds[0]),account.Queue(queueIds[1])};
  boolean[] seenQueues;
  try {
    backend.execute(account.deleteQueues());
  }
 catch (  AccountNotFoundException e) {
  }
  backend.execute(queues[0].createMessage(messageId,messageBody));
  backend.execute(queues[1].createMessage(messageId,messageBody));
  seenQueues=scanQueues(backend.execute(account.getQueues()),queueIds);
  assertTrue(""String_Node_Str"",seenQueues[0]);
  assertTrue(""String_Node_Str"",seenQueues[1]);
  seenQueues=scanQueues(backend.execute(account.deleteQueues().withLimit(1).withDetail(""String_Node_Str"")),queueIds);
  assertTrue(""String_Node_Str"",seenQueues[0] || seenQueues[1]);
  assertFalse(""String_Node_Str"",seenQueues[0] && seenQueues[1]);
  seenQueues=scanQueues(backend.execute(account.deleteQueues().withLimit(1).withDetail(""String_Node_Str"")),queueIds);
  assertTrue(seenQueues[0] || seenQueues[1]);
  assertFalse(seenQueues[0] && seenQueues[1]);
}"
20145,"/** 
 * Create a message, verify the queue exists, then delete all messages in the queue and verify it goes away.
 */
public void testGetQueuesDeleteMessages() throws BurrowException {
  String messageId=""String_Node_Str"";
  String messageBody=""String_Node_Str"";
  String queueIds[]={queue.getId()};
  boolean[] seen;
  try {
    backend.execute(queue.createMessage(messageId,messageBody));
    seen=scanQueues(backend.execute(account.getQueues()),queueIds);
    assertTrue(seen[0]);
  }
 catch (  CommandException ce) {
    fail(""String_Node_Str"");
  }
  try {
    backend.execute(queue.deleteMessages().withMatchHidden(true));
    List<Queue> queues=backend.execute(account.getQueues());
    seen=scanQueues(queues,queueIds);
    assertFalse(seen[0]);
  }
 catch (  CommandException ce) {
  }
}","/** 
 * Create a message, verify the queue exists, then delete all messages in the queue and verify it goes away.
 */
public void testGetQueuesDeleteMessages() throws BurrowException {
  String messageId=""String_Node_Str"";
  String messageBody=""String_Node_Str"";
  String queueIds[]={queue.getId()};
  boolean[] seen;
  backend.execute(queue.createMessage(messageId,messageBody));
  seen=scanQueues(backend.execute(account.getQueues()),queueIds);
  assertTrue(seen[0]);
  try {
    backend.execute(queue.deleteMessages().withMatchHidden(true));
    List<Queue> queues=backend.execute(account.getQueues());
    seen=scanQueues(queues,queueIds);
    assertFalse(seen[0]);
  }
 catch (  AccountNotFoundException e) {
  }
}"
20146,"/** 
 * Create then delete a message, then verify that a second delete fails.
 */
public void testCreateDeleteMessage() throws BurrowException {
  String id=""String_Node_Str"";
  String body=""String_Node_Str"";
  try {
    backend.execute(queue.createMessage(id,body));
    backend.execute(queue.deleteMessage(id));
  }
 catch (  CommandException ce) {
    fail(""String_Node_Str"");
  }
  try {
    backend.execute(queue.deleteMessage(id));
    fail(""String_Node_Str"");
  }
 catch (  CommandException ce) {
  }
}","/** 
 * Create then delete a message, then verify that a second delete fails.
 */
public void testCreateDeleteMessage() throws BurrowException {
  String id=""String_Node_Str"";
  String body=""String_Node_Str"";
  backend.execute(queue.createMessage(id,body));
  backend.execute(queue.deleteMessage(id));
  try {
    backend.execute(queue.deleteMessage(id));
    fail(""String_Node_Str"");
  }
 catch (  MessageNotFoundException e) {
  }
}"
20147,"/** 
 * Implicitly create two queues, then delete all queues on the account.
 */
public void testDeleteQueues() throws BurrowException {
  String messageId=""String_Node_Str"";
  String queueIds[]={""String_Node_Str"",""String_Node_Str""};
  Queue queues[]={account.Queue(queueIds[0]),account.Queue(queueIds[1])};
  String body=""String_Node_Str"";
  boolean[] seenQueues;
  try {
    backend.execute(queues[0].createMessage(messageId,body));
    backend.execute(queues[1].createMessage(messageId,body));
    seenQueues=scanQueues(backend.execute(account.getQueues()),queueIds);
    assertTrue(seenQueues[0]);
    assertTrue(seenQueues[1]);
    backend.execute(account.deleteQueues());
  }
 catch (  CommandException ce) {
    fail(""String_Node_Str"");
  }
  try {
    backend.execute(account.getQueues());
    fail(""String_Node_Str"");
  }
 catch (  CommandException e) {
  }
}","/** 
 * Implicitly create two queues, then delete all queues on the account.
 */
public void testDeleteQueues() throws BurrowException {
  String messageId=""String_Node_Str"";
  String queueIds[]={""String_Node_Str"",""String_Node_Str""};
  Queue queues[]={account.Queue(queueIds[0]),account.Queue(queueIds[1])};
  String body=""String_Node_Str"";
  boolean[] seenQueues;
  backend.execute(queues[0].createMessage(messageId,body));
  backend.execute(queues[1].createMessage(messageId,body));
  seenQueues=scanQueues(backend.execute(account.getQueues()),queueIds);
  assertTrue(""String_Node_Str"",seenQueues[0]);
  assertTrue(""String_Node_Str"",seenQueues[1]);
  backend.execute(account.deleteQueues());
  try {
    backend.execute(account.getQueues());
    fail(""String_Node_Str"");
  }
 catch (  AccountNotFoundException e) {
  }
}"
20148,"/** 
 * Create and delete a hidden message.
 */
public void testCreateDeleteMessageWithMatchHidden() throws BurrowException {
  String id=""String_Node_Str"";
  String body=""String_Node_Str"";
  try {
    backend.execute(queue.createMessage(id,body).withHide((100L)));
    backend.execute(queue.deleteMessage(id).withMatchHidden(true));
  }
 catch (  CommandException ce) {
    fail(""String_Node_Str"");
  }
  try {
    backend.execute(queue.deleteMessage(id).withMatchHidden(true));
    fail(""String_Node_Str"");
  }
 catch (  CommandException ce) {
  }
}","/** 
 * Create and delete a hidden message.
 */
public void testCreateDeleteMessageWithMatchHidden() throws BurrowException {
  String id=""String_Node_Str"";
  String body=""String_Node_Str"";
  backend.execute(queue.createMessage(id,body).withHide((100L)));
  backend.execute(queue.deleteMessage(id).withMatchHidden(true));
  try {
    backend.execute(queue.deleteMessage(id).withMatchHidden(true));
    fail(""String_Node_Str"");
  }
 catch (  MessageNotFoundException e) {
  }
}"
20149,"/** 
 * Get a message that does not exist.
 */
public void testGetAMessageThatDoesNotExist() throws BurrowException {
  String id=""String_Node_Str"";
  try {
    backend.execute(queue.getMessage(id));
    fail(""String_Node_Str"");
  }
 catch (  CommandException ce) {
  }
}","/** 
 * Get a message that does not exist.
 */
public void testGetAMessageThatDoesNotExist() throws BurrowException {
  String id=""String_Node_Str"";
  try {
    backend.execute(queue.getMessage(id));
    fail(""String_Node_Str"");
  }
 catch (  MessageNotFoundException e) {
  }
}"
20150,"synchronized List<Message> get(String marker,Long limit,Boolean matchHidden,Long wait){
  clean();
  List<Message> messages=new ArrayList<Message>();
  Iterator<Entry<String,MessageRecord>> iter;
  if (marker != null)   iter=queue.newIteratorFrom(marker);
 else   iter=queue.newIterator();
  if (limit == null)   limit=-1l;
  if (matchHidden == null)   matchHidden=false;
  while ((limit != 0) && (iter.hasNext())) {
    MessageRecord msg=iter.next().getValue();
    if (matchHidden || (msg.getHide() == 0)) {
      messages.add(msg);
      limit--;
    }
  }
  return messages;
}","synchronized List<Message> get(String marker,Long limit,Boolean matchHidden,Long wait,Long hide){
  clean();
  List<Message> messages=new ArrayList<Message>();
  Iterator<Entry<String,MessageRecord>> iter;
  if (marker != null)   iter=queue.newIteratorFrom(marker);
 else   iter=queue.newIterator();
  if (limit == null)   limit=-1l;
  if (matchHidden == null)   matchHidden=false;
  while ((limit != 0) && (iter.hasNext())) {
    MessageRecord msg=iter.next().getValue();
    if (matchHidden || (msg.getHide() == 0)) {
      messages.add(msg);
      if (hide != null)       msg.hide=limit--;
    }
  }
  return messages;
}"
20151,"public GetMessage withDetail(String detail){
  return new GetMessage(queue,id,matchHidden,detail,wait);
}","public GetMessage withDetail(String detail){
  return new GetMessage(queue,id,matchHidden,detail,wait,hide);
}"
20152,"public GetMessage withWait(long wait){
  return new GetMessage(queue,id,matchHidden,detail,wait);
}","public GetMessage withWait(long wait){
  return new GetMessage(queue,id,matchHidden,detail,wait,hide);
}"
20153,"public GetMessage withMatchHidden(boolean matchHidden){
  return new GetMessage(queue,id,matchHidden,detail,wait);
}","public GetMessage withMatchHidden(boolean matchHidden){
  return new GetMessage(queue,id,matchHidden,detail,wait,hide);
}"
20154,"private GetMessage(Queue queue,String id,Boolean matchHidden,String detail,Long wait){
  this.queue=queue;
  this.id=id;
  this.matchHidden=matchHidden;
  this.detail=detail;
  this.wait=wait;
}","private GetMessage(Queue queue,String id,Boolean matchHidden,String detail,Long wait,Long hide){
  this.queue=queue;
  this.id=id;
  this.matchHidden=matchHidden;
  this.detail=detail;
  this.wait=wait;
  this.hide=hide;
}"
20155,"/** 
 * Executes the algorithm on the graph set earlier by setGraph()
 */
public void run() throws ClusterONEException {
  Double minDensity=parameters.getMinDensity();
  AbstractNodeSetMerger merger;
  Seed seed;
  Seed pendingSeed=null;
  ValuedNodeSet cluster;
  Ordered<ValuedNodeSet> orderedCluster;
  State state;
  UsedNodeSet usedNodes;
  int numGeneratedSeeds;
  int numPostedSeeds;
  int numProcessedClusters;
  ValuedNodeSetList result=new ValuedNodeSetList();
  List<Seed> submittedSeeds=new ArrayList<Seed>();
  List<Ordered<ValuedNodeSet>> tmpList=new ArrayList<Ordered<ValuedNodeSet>>();
  HashSet<NodeSet> addedNodeSets=new HashSet<NodeSet>();
  if (ArrayUtils.min(graph.getEdgeWeights()) < 0.0)   throw new ClusterONEException(""String_Node_Str"");
  try {
    merger=AbstractNodeSetMerger.fromString(parameters.getMergingMethodName());
  }
 catch (  InstantiationException ex) {
    throw new ClusterONEException(ex.getMessage());
  }
  if (minDensity == null) {
    monitor.setStatus(""String_Node_Str"");
    monitor.setPercentCompleted(0);
    if (graph.isWeighted())     minDensity=0.3;
 else {
      TransitivityCalculator calc=new TransitivityCalculator(graph);
      if (calc.getGlobalTransitivity() < 0.1)       minDensity=0.6;
 else       minDensity=0.5;
    }
    monitor.setPercentCompleted(100);
  }
  int numThreads=parameters.getNumThreads();
  if (numThreads <= 0) {
    numThreads=Math.max(1,Runtime.getRuntime().availableProcessors());
  }
  ExecutorService executor=Executors.newFixedThreadPool(numThreads);
  LinkedBlockingQueue<Ordered<Seed>> seedQueue=new LinkedBlockingQueue<Ordered<Seed>>(numThreads);
  LinkedBlockingQueue<Ordered<ValuedNodeSet>> clusterQueue=new LinkedBlockingQueue<Ordered<ValuedNodeSet>>();
  for (int i=0; i < numThreads; i++) {
    ClusterGrowthWorker worker=new ClusterGrowthWorker(graph,parameters,minDensity,seedQueue,clusterQueue);
    worker.setDebugMode(debugMode);
    executor.execute(worker);
  }
  SeedGenerator seedGenerator=parameters.getSeedGenerator();
  seedGenerator.setGraph(graph);
  usedNodes=new UsedNodeSet(graph);
  if (numThreads > 1) {
    monitor.setStatus(""String_Node_Str"" + numThreads + ""String_Node_Str"");
  }
 else {
    monitor.setStatus(""String_Node_Str"");
  }
  monitor.setPercentCompleted(0);
  SeedIterator it=seedGenerator.iterator();
  numGeneratedSeeds=0;
  numPostedSeeds=0;
  numProcessedClusters=0;
  state=State.START;
  while (!state.isTerminal) {
switch (state) {
case START:
      state=State.GENERATING_SEEDS;
    break;
case GENERATING_SEEDS:
  boolean shouldEnqueue=true;
while (shouldEnqueue) {
  boolean seedAccepted=false;
  seed=null;
  while (!seedAccepted) {
    if (pendingSeed != null) {
      seed=pendingSeed;
      numGeneratedSeeds++;
      pendingSeed=null;
    }
 else     if (it.hasNext()) {
      seed=it.next();
      numGeneratedSeeds++;
    }
 else {
      seed=null;
    }
    seedAccepted=(seed == null || !parameters.shouldRejectSeedsWithOnlyUsedNodes() || !usedNodes.areAllNodesUsedFromSeed(seed));
  }
  if (seed == null) {
    state=State.NOTIFYING_WORKERS_NO_MORE_SEEDS;
    shouldEnqueue=false;
  }
 else {
    if (seedQueue.offer(new Ordered<Seed>(numPostedSeeds,seed))) {
      usedNodes.markSeedAsUsed(seed);
      numPostedSeeds++;
      submittedSeeds.add(seed);
    }
 else {
      pendingSeed=seed;
      numGeneratedSeeds--;
      shouldEnqueue=false;
    }
  }
}
break;
case NOTIFYING_WORKERS_NO_MORE_SEEDS:
if (seedQueue.offer(new Ordered<Seed>(numPostedSeeds,ClusterGrowthWorker.NO_MORE_SEEDS))) {
state=State.WAITING_FOR_CLUSTERS;
}
break;
case WAITING_FOR_CLUSTERS:
if (numPostedSeeds == numProcessedClusters) {
state=State.FINISHED;
}
break;
case FINISHED:
case CANCELLED:
}
if (shouldStop) {
state=State.CANCELLED;
}
if (state == State.GENERATING_SEEDS || state == State.NOTIFYING_WORKERS_NO_MORE_SEEDS || state == State.WAITING_FOR_CLUSTERS) {
orderedCluster=null;
if (numProcessedClusters < numPostedSeeds) {
try {
orderedCluster=clusterQueue.take();
}
 catch (InterruptedException ignored) {
}
}
if (orderedCluster != null) {
cluster=orderedCluster.object;
if (cluster != ClusterGrowthWorker.EMPTY_CLUSTER) {
if (!addedNodeSets.contains(cluster)) {
tmpList.add(orderedCluster);
addedNodeSets.add(cluster);
usedNodes.markNodeSetAsUsed(cluster);
}
}
numProcessedClusters++;
}
}
monitor.setPercentCompleted((int)(numGeneratedSeeds * 100.0 / it.getEstimatedLength()));
if (shouldStop) {
state=State.CANCELLED;
}
}
addedNodeSets.clear();
if (state == State.FINISHED) {
Collections.sort(tmpList);
if (parameters.shouldRejectSeedsWithOnlyUsedNodes()) {
int seqNumber=0;
usedNodes.clear();
for (Ordered<ValuedNodeSet> orderedCluster2 : tmpList) {
while (seqNumber < orderedCluster2.sequenceNumber) {
usedNodes.markSeedAsUsed(submittedSeeds.get(seqNumber));
seqNumber++;
}
seed=submittedSeeds.get(seqNumber);
if (usedNodes.areAllNodesUsedFromSeed(seed)) {
continue;
}
usedNodes.markSeedAsUsed(seed);
usedNodes.markNodeSetAsUsed(orderedCluster2.object);
result.add(orderedCluster2.object);
}
}
 else {
for (Ordered<ValuedNodeSet> nodeSet : tmpList) {
result.add(nodeSet.object);
}
}
merger.setTaskMonitor(monitor);
this.result=merger.mergeOverlapping(result,parameters.getSimilarityFunction(),parameters.getOverlapThreshold());
}
executor.shutdown();
while (true) {
try {
executor.awaitTermination(1,TimeUnit.DAYS);
break;
}
 catch (InterruptedException ignored) {
}
}
}","/** 
 * Executes the algorithm on the graph set earlier by setGraph()
 */
public void run() throws ClusterONEException {
  Double minDensity=parameters.getMinDensity();
  AbstractNodeSetMerger merger;
  Seed seed;
  Seed pendingSeed=null;
  ValuedNodeSet cluster;
  Ordered<ValuedNodeSet> orderedCluster;
  State state;
  UsedNodeSet usedNodes;
  int numGeneratedSeeds;
  int numPostedSeeds;
  int numProcessedClusters;
  ValuedNodeSetList result=new ValuedNodeSetList();
  List<Seed> submittedSeeds=new ArrayList<Seed>();
  OrderMaintainingQueue<ValuedNodeSet> receivedClusters=new OrderMaintainingQueue<ValuedNodeSet>();
  List<Ordered<ValuedNodeSet>> tmpList=new ArrayList<Ordered<ValuedNodeSet>>();
  HashSet<NodeSet> addedNodeSets=new HashSet<NodeSet>();
  if (ArrayUtils.min(graph.getEdgeWeights()) < 0.0)   throw new ClusterONEException(""String_Node_Str"");
  try {
    merger=AbstractNodeSetMerger.fromString(parameters.getMergingMethodName());
  }
 catch (  InstantiationException ex) {
    throw new ClusterONEException(ex.getMessage());
  }
  if (minDensity == null) {
    monitor.setStatus(""String_Node_Str"");
    monitor.setPercentCompleted(0);
    if (graph.isWeighted())     minDensity=0.3;
 else {
      TransitivityCalculator calc=new TransitivityCalculator(graph);
      calc.setTaskMonitor(monitor);
      if (calc.getGlobalTransitivity() < 0.1)       minDensity=0.6;
 else       minDensity=0.5;
    }
    monitor.setPercentCompleted(100);
  }
  int numThreads=parameters.getNumThreads();
  if (numThreads <= 0) {
    numThreads=Math.max(1,Runtime.getRuntime().availableProcessors());
  }
  ExecutorService executor=Executors.newFixedThreadPool(numThreads);
  LinkedBlockingQueue<Ordered<Seed>> seedQueue=new LinkedBlockingQueue<Ordered<Seed>>(numThreads);
  LinkedBlockingQueue<Ordered<ValuedNodeSet>> clusterQueue=new LinkedBlockingQueue<Ordered<ValuedNodeSet>>();
  for (int i=0; i < numThreads; i++) {
    ClusterGrowthWorker worker=new ClusterGrowthWorker(graph,parameters,minDensity,seedQueue,clusterQueue);
    worker.setDebugMode(debugMode);
    executor.execute(worker);
  }
  SeedGenerator seedGenerator=parameters.getSeedGenerator();
  seedGenerator.setGraph(graph);
  usedNodes=new UsedNodeSet(graph);
  if (numThreads > 1) {
    monitor.setStatus(""String_Node_Str"" + numThreads + ""String_Node_Str"");
  }
 else {
    monitor.setStatus(""String_Node_Str"");
  }
  monitor.setPercentCompleted(0);
  SeedIterator it=seedGenerator.iterator();
  numGeneratedSeeds=0;
  numPostedSeeds=0;
  numProcessedClusters=0;
  state=State.START;
  while (!state.isTerminal) {
switch (state) {
case START:
      state=State.GENERATING_SEEDS;
    break;
case GENERATING_SEEDS:
  boolean shouldEnqueue=true;
while (shouldEnqueue) {
  boolean seedAccepted=false;
  seed=null;
  while (!seedAccepted) {
    if (pendingSeed != null) {
      seed=pendingSeed;
      numGeneratedSeeds++;
      pendingSeed=null;
    }
 else     if (it.hasNext()) {
      seed=it.next();
      numGeneratedSeeds++;
    }
 else {
      seed=null;
    }
    seedAccepted=(seed == null || !parameters.shouldRejectSeedsWithOnlyUsedNodes() || !usedNodes.areAllNodesUsedFromSeed(seed));
  }
  if (seed == null) {
    state=State.NOTIFYING_WORKERS_NO_MORE_SEEDS;
    shouldEnqueue=false;
  }
 else {
    if (seedQueue.offer(new Ordered<Seed>(numPostedSeeds,seed))) {
      numPostedSeeds++;
      submittedSeeds.add(seed);
    }
 else {
      pendingSeed=seed;
      numGeneratedSeeds--;
      shouldEnqueue=false;
    }
  }
}
break;
case NOTIFYING_WORKERS_NO_MORE_SEEDS:
if (seedQueue.offer(new Ordered<Seed>(numPostedSeeds,ClusterGrowthWorker.NO_MORE_SEEDS))) {
state=State.WAITING_FOR_CLUSTERS;
}
break;
case WAITING_FOR_CLUSTERS:
if (numPostedSeeds == numProcessedClusters) {
state=State.FINISHED;
}
break;
case FINISHED:
case CANCELLED:
}
if (shouldStop) {
state=State.CANCELLED;
}
if (state == State.GENERATING_SEEDS || state == State.NOTIFYING_WORKERS_NO_MORE_SEEDS || state == State.WAITING_FOR_CLUSTERS) {
orderedCluster=null;
if (numProcessedClusters < numPostedSeeds) {
try {
orderedCluster=clusterQueue.take();
}
 catch (InterruptedException ignored) {
}
}
if (orderedCluster != null) {
receivedClusters.add(orderedCluster);
while (!receivedClusters.isEmpty()) {
orderedCluster=receivedClusters.remove();
cluster=orderedCluster.object;
if (cluster != ClusterGrowthWorker.EMPTY_CLUSTER) {
Seed originalSeed=submittedSeeds.get(orderedCluster.sequenceNumber);
if (!usedNodes.areAllNodesUsedFromSeed(originalSeed)) {
result.add(cluster);
usedNodes.markSeedAsUsed(originalSeed);
usedNodes.markNodeSetAsUsed(cluster);
}
}
numProcessedClusters++;
}
}
}
monitor.setPercentCompleted((int)(numGeneratedSeeds * 100.0 / it.getEstimatedLength()));
if (shouldStop) {
state=State.CANCELLED;
}
}
if (state == State.FINISHED) {
merger.setTaskMonitor(monitor);
this.result=merger.mergeOverlapping(result,parameters.getSimilarityFunction(),parameters.getOverlapThreshold());
}
executor.shutdown();
while (true) {
try {
executor.awaitTermination(1,TimeUnit.DAYS);
break;
}
 catch (InterruptedException ignored) {
}
}
}"
20156,"/** 
 * Given a   {@link ValuedNodeSetList} that fails the verification tests,finds a minimal subset subset that still fails but none of its subsets fail. For debugging purposes only.
 */
public static ValuedNodeSetList getMinimalSubsetThatFails(ValuedNodeSetList nodeSets,SimilarityFunction<NodeSet> similarityFunc,double threshold){
  ValuedNodeSetList result;
  boolean changed=true;
  MultiPassNodeSetMerger merger=new MultiPassNodeSetMerger();
  merger.setDebugging(false);
  merger.setVerificationMode(VerificationMode.VERIFY);
  try {
    result=merger.mergeOverlapping(nodeSets,similarityFunc,threshold);
    return null;
  }
 catch (  RuntimeException ex) {
  }
  result=(ValuedNodeSetList)nodeSets.clone();
  while (changed && !result.isEmpty()) {
    Iterator<ValuedNodeSet> it;
    changed=false;
    it=result.iterator();
    while (it.hasNext()) {
      ValuedNodeSet nodeSet=it.next();
      boolean failing=false;
      ValuedNodeSetList nodeSetsCopy=(ValuedNodeSetList)result.clone();
      nodeSetsCopy.remove(nodeSet);
      try {
        merger.mergeOverlapping(nodeSetsCopy,similarityFunc,threshold);
      }
 catch (      RuntimeException ex) {
        failing=true;
      }
      if (failing) {
        it.remove();
        changed=true;
        break;
      }
    }
  }
  try {
    merger.mergeOverlapping(result,similarityFunc,threshold);
    System.err.println(""String_Node_Str"");
  }
 catch (  RuntimeException ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"");
  }
  return result;
}","/** 
 * Given a   {@link ValuedNodeSetList} that fails the verification tests,finds a minimal subset subset that still fails but none of its subsets fail. For debugging purposes only.
 */
public static ValuedNodeSetList getMinimalSubsetThatFails(ValuedNodeSetList nodeSets,SimilarityFunction<NodeSet> similarityFunc,double threshold){
  ValuedNodeSetList result;
  boolean changed=true;
  MultiPassNodeSetMerger merger=new MultiPassNodeSetMerger();
  merger.setDebugging(false);
  merger.setVerificationMode(VerificationMode.VERIFY);
  try {
    merger.mergeOverlapping(nodeSets,similarityFunc,threshold);
    return null;
  }
 catch (  RuntimeException ignored) {
  }
  result=(ValuedNodeSetList)nodeSets.clone();
  while (changed && !result.isEmpty()) {
    Iterator<ValuedNodeSet> it;
    changed=false;
    it=result.iterator();
    while (it.hasNext()) {
      ValuedNodeSet nodeSet=it.next();
      boolean failing=false;
      ValuedNodeSetList nodeSetsCopy=(ValuedNodeSetList)result.clone();
      nodeSetsCopy.remove(nodeSet);
      try {
        merger.mergeOverlapping(nodeSetsCopy,similarityFunc,threshold);
      }
 catch (      RuntimeException ex) {
        failing=true;
      }
      if (failing) {
        it.remove();
        changed=true;
        break;
      }
    }
  }
  try {
    merger.mergeOverlapping(result,similarityFunc,threshold);
    System.err.println(""String_Node_Str"");
  }
 catch (  RuntimeException ex) {
    ex.printStackTrace();
    System.err.println(""String_Node_Str"");
  }
  return result;
}"
20157,"/** 
 * Returns the global transitivity of the graph. Global transitivity is defined as three times the number of triangles (or, simply the number of closed triplets) divided by the number of connected triplets.
 * @return  the transitivity or null if the calculation was interrupted
 */
public Double getGlobalTransitivity(){
  long triangles=0;
  long triplets=0;
  int nodeCount=graph.getNodeCount();
  int i;
  shouldStop=false;
  for (i=0; i < nodeCount; i++) {
    if (shouldStop)     return null;
    int[] neis=graph.getAdjacentNodeIndicesArray(i,Directedness.ALL);
    for (    int j : neis) {
      if (j <= i)       continue;
      for (      int k : neis) {
        if (j < k && graph.areConnected(j,k))         triangles++;
      }
    }
    triplets+=(neis.length * (neis.length - 1)) / 2;
  }
  return (triplets == 0) ? 0 : (3.0 * triangles / triplets);
}","/** 
 * Returns the global transitivity of the graph. Global transitivity is defined as three times the number of triangles (or, simply the number of closed triplets) divided by the number of connected triplets.
 * @return  the transitivity or null if the calculation was interrupted
 */
public Double getGlobalTransitivity(){
  long triangles=0;
  long triplets=0;
  int nodeCount=graph.getNodeCount();
  int i;
  shouldStop=false;
  monitor.setPercentCompleted(0);
  for (i=0; i < nodeCount; i++) {
    if (shouldStop)     return null;
    int[] neis=graph.getAdjacentNodeIndicesArray(i,Directedness.ALL);
    for (    int j : neis) {
      if (j <= i)       continue;
      for (      int k : neis) {
        if (j < k && graph.areConnected(j,k))         triangles++;
      }
    }
    triplets+=(neis.length * (neis.length - 1)) / 2;
    monitor.setPercentCompleted((int)(i * 100.0 / nodeCount));
  }
  monitor.setPercentCompleted(100);
  return (triplets == 0) ? 0 : (3.0 * triangles / triplets);
}"
20158,"/** 
 * Executes the algorithm on the graph set earlier by setGraph()
 */
public void run() throws ClusterONEException {
  Double minDensity=parameters.getMinDensity();
  AbstractNodeSetMerger merger;
  Seed seed;
  ValuedNodeSet cluster;
  Ordered<ValuedNodeSet> orderedCluster;
  State state;
  UsedNodeSet usedNodes;
  int numGeneratedSeeds;
  int numPostedSeeds;
  int numProcessedClusters;
  ValuedNodeSetList result=new ValuedNodeSetList();
  List<Seed> submittedSeeds=new ArrayList<Seed>();
  List<Ordered<ValuedNodeSet>> tmpList=new ArrayList<Ordered<ValuedNodeSet>>();
  HashSet<NodeSet> addedNodeSets=new HashSet<NodeSet>();
  if (ArrayUtils.min(graph.getEdgeWeights()) < 0.0)   throw new ClusterONEException(""String_Node_Str"");
  try {
    merger=AbstractNodeSetMerger.fromString(parameters.getMergingMethodName());
  }
 catch (  InstantiationException ex) {
    throw new ClusterONEException(ex.getMessage());
  }
  if (minDensity == null) {
    monitor.setStatus(""String_Node_Str"");
    monitor.setPercentCompleted(0);
    if (graph.isWeighted())     minDensity=0.3;
 else {
      TransitivityCalculator calc=new TransitivityCalculator(graph);
      if (calc.getGlobalTransitivity() < 0.1)       minDensity=0.6;
 else       minDensity=0.5;
    }
    monitor.setPercentCompleted(100);
  }
  int numThreads=parameters.getNumThreads();
  if (numThreads <= 0) {
    numThreads=Math.max(1,Runtime.getRuntime().availableProcessors());
  }
  ExecutorService executor=Executors.newFixedThreadPool(numThreads);
  LinkedBlockingQueue<Ordered<Seed>> seedQueue=new LinkedBlockingQueue<Ordered<Seed>>(numThreads);
  LinkedBlockingQueue<Ordered<ValuedNodeSet>> clusterQueue=new LinkedBlockingQueue<Ordered<ValuedNodeSet>>();
  for (int i=0; i < numThreads; i++) {
    ClusterGrowthWorker worker=new ClusterGrowthWorker(graph,parameters,minDensity,seedQueue,clusterQueue);
    worker.setDebugMode(debugMode);
    executor.execute(worker);
  }
  SeedGenerator seedGenerator=parameters.getSeedGenerator();
  seedGenerator.setGraph(graph);
  usedNodes=new UsedNodeSet(graph);
  if (numThreads > 1) {
    monitor.setStatus(""String_Node_Str"" + numThreads + ""String_Node_Str"");
  }
 else {
    monitor.setStatus(""String_Node_Str"");
  }
  monitor.setPercentCompleted(0);
  SeedIterator it=seedGenerator.iterator();
  numGeneratedSeeds=0;
  numPostedSeeds=0;
  numProcessedClusters=0;
  state=State.START;
  while (!state.isTerminal) {
switch (state) {
case START:
      state=State.GENERATING_SEEDS;
    break;
case GENERATING_SEEDS:
  boolean seedAccepted=false;
seed=null;
while (!seedAccepted) {
if (it.hasNext()) {
  seed=it.next();
  numGeneratedSeeds++;
}
 else {
  seed=null;
}
seedAccepted=(seed == null || !parameters.shouldRejectSeedsWithOnlyUsedNodes() || !usedNodes.areAllNodesUsedFromSeed(seed));
}
if (seed == null) {
state=State.NOTIFYING_WORKERS_NO_MORE_SEEDS;
}
 else {
if (seedQueue.offer(new Ordered<Seed>(numPostedSeeds,seed))) {
usedNodes.markSeedAsUsed(seed);
numPostedSeeds++;
submittedSeeds.add(seed);
}
}
break;
case NOTIFYING_WORKERS_NO_MORE_SEEDS:
if (seedQueue.offer(new Ordered<Seed>(numPostedSeeds,ClusterGrowthWorker.NO_MORE_SEEDS))) {
state=State.WAITING_FOR_CLUSTERS;
}
break;
case WAITING_FOR_CLUSTERS:
if (numPostedSeeds == numProcessedClusters) {
state=State.FINISHED;
}
break;
case FINISHED:
case CANCELLED:
}
if (shouldStop) {
state=State.CANCELLED;
}
if (state == State.GENERATING_SEEDS || state == State.NOTIFYING_WORKERS_NO_MORE_SEEDS || state == State.WAITING_FOR_CLUSTERS) {
orderedCluster=null;
if (numProcessedClusters < numPostedSeeds) {
try {
orderedCluster=clusterQueue.take();
}
 catch (InterruptedException ignored) {
}
}
if (orderedCluster != null) {
cluster=orderedCluster.object;
if (cluster != ClusterGrowthWorker.EMPTY_CLUSTER) {
if (!addedNodeSets.contains(cluster)) {
tmpList.add(orderedCluster);
addedNodeSets.add(cluster);
usedNodes.markNodeSetAsUsed(cluster);
}
}
numProcessedClusters++;
}
}
monitor.setPercentCompleted((int)(numGeneratedSeeds * 100.0 / it.getEstimatedLength()));
if (shouldStop) {
state=State.CANCELLED;
}
}
addedNodeSets.clear();
if (state == State.FINISHED) {
Collections.sort(tmpList);
if (parameters.shouldRejectSeedsWithOnlyUsedNodes()) {
int seqNumber=0;
usedNodes.clear();
for (Ordered<ValuedNodeSet> orderedCluster2 : tmpList) {
while (seqNumber < orderedCluster2.sequenceNumber) {
usedNodes.markSeedAsUsed(submittedSeeds.get(seqNumber));
seqNumber++;
}
seed=submittedSeeds.get(seqNumber);
if (usedNodes.areAllNodesUsedFromSeed(seed)) {
continue;
}
usedNodes.markSeedAsUsed(seed);
usedNodes.markNodeSetAsUsed(orderedCluster2.object);
result.add(orderedCluster2.object);
}
}
 else {
for (Ordered<ValuedNodeSet> nodeSet : tmpList) {
result.add(nodeSet.object);
}
}
merger.setTaskMonitor(monitor);
this.result=merger.mergeOverlapping(result,parameters.getSimilarityFunction(),parameters.getOverlapThreshold());
}
executor.shutdown();
while (true) {
try {
executor.awaitTermination(1,TimeUnit.DAYS);
break;
}
 catch (InterruptedException ignored) {
}
}
}","/** 
 * Executes the algorithm on the graph set earlier by setGraph()
 */
public void run() throws ClusterONEException {
  Double minDensity=parameters.getMinDensity();
  AbstractNodeSetMerger merger;
  Seed seed;
  Seed pendingSeed=null;
  ValuedNodeSet cluster;
  Ordered<ValuedNodeSet> orderedCluster;
  State state;
  UsedNodeSet usedNodes;
  int numGeneratedSeeds;
  int numPostedSeeds;
  int numProcessedClusters;
  ValuedNodeSetList result=new ValuedNodeSetList();
  List<Seed> submittedSeeds=new ArrayList<Seed>();
  List<Ordered<ValuedNodeSet>> tmpList=new ArrayList<Ordered<ValuedNodeSet>>();
  HashSet<NodeSet> addedNodeSets=new HashSet<NodeSet>();
  if (ArrayUtils.min(graph.getEdgeWeights()) < 0.0)   throw new ClusterONEException(""String_Node_Str"");
  try {
    merger=AbstractNodeSetMerger.fromString(parameters.getMergingMethodName());
  }
 catch (  InstantiationException ex) {
    throw new ClusterONEException(ex.getMessage());
  }
  if (minDensity == null) {
    monitor.setStatus(""String_Node_Str"");
    monitor.setPercentCompleted(0);
    if (graph.isWeighted())     minDensity=0.3;
 else {
      TransitivityCalculator calc=new TransitivityCalculator(graph);
      if (calc.getGlobalTransitivity() < 0.1)       minDensity=0.6;
 else       minDensity=0.5;
    }
    monitor.setPercentCompleted(100);
  }
  int numThreads=parameters.getNumThreads();
  if (numThreads <= 0) {
    numThreads=Math.max(1,Runtime.getRuntime().availableProcessors());
  }
  ExecutorService executor=Executors.newFixedThreadPool(numThreads);
  LinkedBlockingQueue<Ordered<Seed>> seedQueue=new LinkedBlockingQueue<Ordered<Seed>>(numThreads);
  LinkedBlockingQueue<Ordered<ValuedNodeSet>> clusterQueue=new LinkedBlockingQueue<Ordered<ValuedNodeSet>>();
  for (int i=0; i < numThreads; i++) {
    ClusterGrowthWorker worker=new ClusterGrowthWorker(graph,parameters,minDensity,seedQueue,clusterQueue);
    worker.setDebugMode(debugMode);
    executor.execute(worker);
  }
  SeedGenerator seedGenerator=parameters.getSeedGenerator();
  seedGenerator.setGraph(graph);
  usedNodes=new UsedNodeSet(graph);
  if (numThreads > 1) {
    monitor.setStatus(""String_Node_Str"" + numThreads + ""String_Node_Str"");
  }
 else {
    monitor.setStatus(""String_Node_Str"");
  }
  monitor.setPercentCompleted(0);
  SeedIterator it=seedGenerator.iterator();
  numGeneratedSeeds=0;
  numPostedSeeds=0;
  numProcessedClusters=0;
  state=State.START;
  while (!state.isTerminal) {
switch (state) {
case START:
      state=State.GENERATING_SEEDS;
    break;
case GENERATING_SEEDS:
  boolean shouldEnqueue=true;
while (shouldEnqueue) {
  boolean seedAccepted=false;
  seed=null;
  while (!seedAccepted) {
    if (pendingSeed != null) {
      seed=pendingSeed;
      numGeneratedSeeds++;
      pendingSeed=null;
    }
 else     if (it.hasNext()) {
      seed=it.next();
      numGeneratedSeeds++;
    }
 else {
      seed=null;
    }
    seedAccepted=(seed == null || !parameters.shouldRejectSeedsWithOnlyUsedNodes() || !usedNodes.areAllNodesUsedFromSeed(seed));
  }
  if (seed == null) {
    state=State.NOTIFYING_WORKERS_NO_MORE_SEEDS;
    shouldEnqueue=false;
  }
 else {
    if (seedQueue.offer(new Ordered<Seed>(numPostedSeeds,seed))) {
      usedNodes.markSeedAsUsed(seed);
      numPostedSeeds++;
      submittedSeeds.add(seed);
    }
 else {
      pendingSeed=seed;
      numGeneratedSeeds--;
      shouldEnqueue=false;
    }
  }
}
break;
case NOTIFYING_WORKERS_NO_MORE_SEEDS:
if (seedQueue.offer(new Ordered<Seed>(numPostedSeeds,ClusterGrowthWorker.NO_MORE_SEEDS))) {
state=State.WAITING_FOR_CLUSTERS;
}
break;
case WAITING_FOR_CLUSTERS:
if (numPostedSeeds == numProcessedClusters) {
state=State.FINISHED;
}
break;
case FINISHED:
case CANCELLED:
}
if (shouldStop) {
state=State.CANCELLED;
}
if (state == State.GENERATING_SEEDS || state == State.NOTIFYING_WORKERS_NO_MORE_SEEDS || state == State.WAITING_FOR_CLUSTERS) {
orderedCluster=null;
if (numProcessedClusters < numPostedSeeds) {
try {
orderedCluster=clusterQueue.take();
}
 catch (InterruptedException ignored) {
}
}
if (orderedCluster != null) {
cluster=orderedCluster.object;
if (cluster != ClusterGrowthWorker.EMPTY_CLUSTER) {
if (!addedNodeSets.contains(cluster)) {
tmpList.add(orderedCluster);
addedNodeSets.add(cluster);
usedNodes.markNodeSetAsUsed(cluster);
}
}
numProcessedClusters++;
}
}
monitor.setPercentCompleted((int)(numGeneratedSeeds * 100.0 / it.getEstimatedLength()));
if (shouldStop) {
state=State.CANCELLED;
}
}
addedNodeSets.clear();
if (state == State.FINISHED) {
Collections.sort(tmpList);
if (parameters.shouldRejectSeedsWithOnlyUsedNodes()) {
int seqNumber=0;
usedNodes.clear();
for (Ordered<ValuedNodeSet> orderedCluster2 : tmpList) {
while (seqNumber < orderedCluster2.sequenceNumber) {
usedNodes.markSeedAsUsed(submittedSeeds.get(seqNumber));
seqNumber++;
}
seed=submittedSeeds.get(seqNumber);
if (usedNodes.areAllNodesUsedFromSeed(seed)) {
continue;
}
usedNodes.markSeedAsUsed(seed);
usedNodes.markNodeSetAsUsed(orderedCluster2.object);
result.add(orderedCluster2.object);
}
}
 else {
for (Ordered<ValuedNodeSet> nodeSet : tmpList) {
result.add(nodeSet.object);
}
}
merger.setTaskMonitor(monitor);
this.result=merger.mergeOverlapping(result,parameters.getSimilarityFunction(),parameters.getOverlapThreshold());
}
executor.shutdown();
while (true) {
try {
executor.awaitTermination(1,TimeUnit.DAYS);
break;
}
 catch (InterruptedException ignored) {
}
}
}"
20159,"/** 
 * Reads a graph specified by an edge list representation from the given reader object.
 * @param reader  the reader being used
 */
public Graph readGraph(Reader reader) throws IOException {
  Graph result=new Graph();
  UniqueIDGenerator<String> nodeGen=new UniqueIDGenerator<String>(result);
  BufferedReader bufferedReader=new BufferedReader(reader);
  String line;
  String[] parts;
  int node1, node2;
  double weight;
  while ((line=bufferedReader.readLine()) != null) {
    if (line.length() == 0)     continue;
    if (line.charAt(0) == '#' || line.charAt(0) == '%')     continue;
    parts=line.split(""String_Node_Str"");
    if (parts.length == 1)     continue;
    node1=nodeGen.get(parts[0]);
    node2=nodeGen.get(parts[1]);
    if (parts.length >= 3)     weight=Double.parseDouble(parts[2]);
 else     weight=1.0;
    result.createEdge(node1,node2,weight);
  }
  return result;
}","/** 
 * Reads a graph specified by an edge list representation from the given reader object.
 * @param reader  the reader being used
 */
public Graph readGraph(Reader reader) throws IOException {
  Graph result=new Graph();
  UniqueIDGenerator<String> nodeGen=new UniqueIDGenerator<String>(result);
  BufferedReader bufferedReader=new BufferedReader(reader);
  String line;
  String[] parts;
  int node1, node2;
  double weight;
  while ((line=bufferedReader.readLine()) != null) {
    if (line.length() == 0)     continue;
    if (line.charAt(0) == '#' || line.charAt(0) == '%')     continue;
    parts=line.split(""String_Node_Str"");
    if (parts.length <= 1)     continue;
    node1=nodeGen.get(parts[0]);
    node2=nodeGen.get(parts[1]);
    if (parts.length >= 3)     weight=Double.parseDouble(parts[2]);
 else     weight=1.0;
    result.createEdge(node1,node2,weight);
  }
  return result;
}"
20160,"private void processLine(){
  currentNodeSet=new MutableNodeSet(graph);
  if (line == null && generateUnusedNodesAsSeeds) {
    Integer id=unusedNodes.pollFirst();
    if (id == null)     currentNodeSet=null;
 else     currentNodeSet.add(id);
    return;
  }
  boolean isConnected=false;
  while (!isConnected) {
    StringTokenizer st=new StringTokenizer(line);
    while (st.hasMoreTokens()) {
      String name=st.nextToken();
      int idx=namesToIndices.get(name);
      if (idx >= 0) {
        currentNodeSet.add(idx);
        unusedNodes.remove(idx);
      }
    }
    readNextLine();
    isConnected=currentNodeSet.size() > 0 && currentNodeSet.isConnected();
    if (!isConnected) {
      currentNodeSet.clear();
      if (line == null) {
        if (generateUnusedNodesAsSeeds) {
          Integer id=unusedNodes.pollFirst();
          currentNodeSet.add(id);
        }
 else         currentNodeSet=null;
        return;
      }
    }
  }
  if (isConnected)   return;
  currentNodeSet=null;
}","private void processLine(){
  currentNodeSet=new MutableNodeSet(graph);
  if (line == null) {
    if (generateUnusedNodesAsSeeds) {
      Integer id=unusedNodes.pollFirst();
      if (id == null)       currentNodeSet=null;
 else       currentNodeSet.add(id);
    }
 else {
      currentNodeSet=null;
    }
    return;
  }
  boolean isConnected=false;
  while (!isConnected) {
    StringTokenizer st=new StringTokenizer(line);
    while (st.hasMoreTokens()) {
      String name=st.nextToken();
      int idx=namesToIndices.get(name);
      if (idx >= 0) {
        currentNodeSet.add(idx);
        unusedNodes.remove(idx);
      }
    }
    readNextLine();
    isConnected=currentNodeSet.size() > 0 && currentNodeSet.isConnected();
    if (!isConnected) {
      currentNodeSet.clear();
      if (line == null) {
        if (generateUnusedNodesAsSeeds) {
          Integer id=unusedNodes.pollFirst();
          currentNodeSet.add(id);
        }
 else         currentNodeSet=null;
        return;
      }
    }
  }
  if (isConnected)   return;
  currentNodeSet=null;
}"
20161,"public ValuedNodeSetList mergeOverlapping(ValuedNodeSetList nodeSets,SimilarityFunction<NodeSet> similarityFunc,double threshold){
  int i, j, n=nodeSets.size();
  long stepsTotal=n * (n - 1) / 2, stepsTaken=0;
  double similarity;
  ValuedNodeSetList result=new ValuedNodeSetList();
  HashSet<ValuedNodeSet> activeNodesets=new HashSet<ValuedNodeSet>();
  if (n == 0)   return result;
  if (verificationMode) {
    prepareForVerification(nodeSets);
  }
  Graph graph=nodeSets.get(0).getGraph();
  PriorityQueue<NodeSetPair> pairs=new PriorityQueue<NodeSetPair>();
  HashMultimap<ValuedNodeSet,NodeSetPair> nodesetsToPairs=new HashMultimap<ValuedNodeSet,NodeSetPair>();
  if (taskMonitor != null) {
    taskMonitor.setPercentCompleted(0);
    taskMonitor.setStatus(""String_Node_Str"");
  }
  for (i=0; i < n; i++) {
    ValuedNodeSet v1=nodeSets.get(i);
    for (j=i + 1; j < n; j++) {
      ValuedNodeSet v2=nodeSets.get(j);
      similarity=similarityFunc.getSimilarity(v1,v2);
      if (similarity > 0) {
        NodeSetPair pair=new NodeSetPair(v1,v2,similarity);
        pairs.add(pair);
        debug(""String_Node_Str"" + pair + ""String_Node_Str""+ v1);
        nodesetsToPairs.put(v1,pair);
        debug(""String_Node_Str"" + v1 + ""String_Node_Str""+ nodesetsToPairs.get(v1));
        debug(""String_Node_Str"" + pair + ""String_Node_Str""+ v2);
        nodesetsToPairs.put(v2,pair);
        debug(""String_Node_Str"" + v2 + ""String_Node_Str""+ nodesetsToPairs.get(v2));
      }
    }
    if (!nodesetsToPairs.containsKey(v1)) {
      result.add(v1);
    }
    stepsTaken+=(n - i - 1);
    if (stepsTaken > stepsTotal)     stepsTaken=stepsTotal;
    if (taskMonitor != null) {
      taskMonitor.setPercentCompleted((int)(100 * (((float)stepsTaken) / stepsTotal)));
    }
  }
  activeNodesets.addAll(nodesetsToPairs.keySet());
  if (debugging) {
    System.err.println(""String_Node_Str"");
    System.err.println(result);
    System.err.println(""String_Node_Str"");
    System.err.println(pairs);
  }
  if (isVerificationMode()) {
    ValuedNodeSetList tmpResult=new ValuedNodeSetList();
    tmpResult.addAll(result);
    tmpResult.addAll(activeNodesets);
    verifyResult(tmpResult,similarityFunc,-1);
  }
  if (taskMonitor != null) {
    taskMonitor.setPercentCompleted(-1);
    taskMonitor.setStatus(""String_Node_Str"");
  }
  stepsTotal=pairs.size();
  stepsTaken=0;
  while (!pairs.isEmpty()) {
    NodeSetPair pair=pairs.poll();
    ValuedNodeSet v1=pair.getLeft();
    ValuedNodeSet v2=pair.getRight();
    if (pair.similarity < threshold)     break;
    debug(""String_Node_Str"" + pair);
    debug(""String_Node_Str"" + activeNodesets);
    if (!activeNodesets.contains(v1)) {
      debug(""String_Node_Str"" + v1 + ""String_Node_Str"");
      nodesetsToPairs.remove(v2,pair);
      continue;
    }
    if (!activeNodesets.contains(v2)) {
      debug(""String_Node_Str"" + v2 + ""String_Node_Str"");
      nodesetsToPairs.remove(v1,pair);
      continue;
    }
    nodesetsToPairs.remove(v1,pair);
    nodesetsToPairs.remove(v2,pair);
    Multiset<Integer> unionMembers=new TreeMultiset<Integer>();
    unionMembers.addAll(v1.getMembers());
    unionMembers.addAll(v2.getMembers());
    ValuedNodeSet unionNodeset=new ValuedNodeSet(graph,unionMembers.elementSet());
    for (    Multiset.Entry<Integer> entry : unionMembers.entrySet()) {
      Integer elt=entry.getElement();
      int count=v1.getValue(elt,0) + v2.getValue(elt,0);
      unionNodeset.setValue(elt,count);
    }
    boolean v1SubsetOfv2=unionNodeset.equals(v2);
    boolean v2SubsetOfv1=unionNodeset.equals(v1);
    if (!v1SubsetOfv2 && !v2SubsetOfv1) {
      debug(""String_Node_Str"");
      for (      NodeSetPair oldPair : nodesetsToPairs.get(v1)) {
        ValuedNodeSet v3=oldPair.getOtherThan(v1);
        similarity=similarityFunc.getSimilarity(unionNodeset,v3);
        nodesetsToPairs.remove(v3,oldPair);
        if (similarity < threshold)         continue;
        NodeSetPair newPair=new NodeSetPair(unionNodeset,v3,similarity);
        debug(""String_Node_Str"" + oldPair + ""String_Node_Str""+ newPair);
        pairs.add(newPair);
        nodesetsToPairs.put(unionNodeset,newPair);
        nodesetsToPairs.put(v3,newPair);
      }
      debug(""String_Node_Str"" + nodesetsToPairs.get(v1));
      for (      NodeSetPair oldPair : nodesetsToPairs.get(v2)) {
        ValuedNodeSet v3=oldPair.getOtherThan(v2);
        if (unionNodeset == v3) {
          continue;
        }
        similarity=similarityFunc.getSimilarity(unionNodeset,v3);
        nodesetsToPairs.remove(v3,oldPair);
        if (similarity < threshold)         continue;
        NodeSetPair newPair=new NodeSetPair(unionNodeset,v3,similarity);
        debug(""String_Node_Str"" + oldPair + ""String_Node_Str""+ newPair);
        pairs.add(newPair);
        nodesetsToPairs.put(unionNodeset,newPair);
        nodesetsToPairs.put(v3,newPair);
      }
      nodesetsToPairs.removeAll(v1);
      nodesetsToPairs.removeAll(v2);
      activeNodesets.remove(v1);
      activeNodesets.remove(v2);
      activeNodesets.add(unionNodeset);
    }
 else     if (v1SubsetOfv2 && !v2SubsetOfv1) {
      debug(""String_Node_Str"");
      for (      int member : v1)       v2.setValue(member,v1.getValue(member) + v2.getValue(member));
      Collection<NodeSetPair> v2Pairs=nodesetsToPairs.get(v2);
      for (      NodeSetPair oldPair : nodesetsToPairs.get(v1)) {
        ValuedNodeSet v3=oldPair.getOtherThan(v1);
        similarity=similarityFunc.getSimilarity(v2,v3);
        nodesetsToPairs.remove(v3,oldPair);
        debug(""String_Node_Str"" + v2 + ""String_Node_Str""+ v3+ ""String_Node_Str""+ similarity);
        if (similarity == 0)         continue;
        NodeSetPair newPair=new NodeSetPair(v2,v3,similarity);
        if (v2Pairs.contains(newPair)) {
          debug(""String_Node_Str"");
          continue;
        }
        debug(""String_Node_Str"" + oldPair + ""String_Node_Str""+ newPair);
        pairs.add(newPair);
        nodesetsToPairs.put(v2,newPair);
        nodesetsToPairs.put(v3,newPair);
      }
      nodesetsToPairs.removeAll(v1);
      activeNodesets.remove(v1);
    }
 else     if (v2SubsetOfv1 && !v1SubsetOfv2) {
      debug(""String_Node_Str"");
      for (      int member : v2)       v1.setValue(member,v2.getValue(member) + v1.getValue(member));
      Collection<NodeSetPair> v1Pairs=nodesetsToPairs.get(v1);
      for (      NodeSetPair oldPair : nodesetsToPairs.get(v2)) {
        ValuedNodeSet v3=oldPair.getOtherThan(v2);
        similarity=similarityFunc.getSimilarity(v1,v3);
        nodesetsToPairs.remove(v3,oldPair);
        if (similarity == 0)         continue;
        NodeSetPair newPair=new NodeSetPair(v1,v3,similarity);
        if (v1Pairs.contains(newPair))         continue;
        debug(""String_Node_Str"" + oldPair + ""String_Node_Str""+ newPair);
        pairs.add(newPair);
        nodesetsToPairs.put(v1,newPair);
        nodesetsToPairs.put(v3,newPair);
      }
      nodesetsToPairs.removeAll(v2);
      activeNodesets.remove(v2);
    }
 else {
      debug(""String_Node_Str"");
      for (      int member : v2)       v1.setValue(member,v2.getValue(member) + v1.getValue(member));
      nodesetsToPairs.removeAll(v2);
      activeNodesets.remove(v2);
    }
    debug(""String_Node_Str"" + activeNodesets);
    debug(""String_Node_Str"" + pairs);
    if (isVerificationMode()) {
      ValuedNodeSetList tmpResult=new ValuedNodeSetList();
      tmpResult.addAll(result);
      tmpResult.addAll(activeNodesets);
      debug(""String_Node_Str"" + tmpResult);
      try {
        verifyResult(tmpResult,similarityFunc,-1);
      }
 catch (      RuntimeException ex) {
        System.err.println(""String_Node_Str"" + stepsTaken + ""String_Node_Str""+ ""String_Node_Str""+ v1+ ""String_Node_Str""+ v2);
        throw ex;
      }
    }
  }
  result.addAll(activeNodesets);
  if (verificationMode) {
    verifyResult(result,similarityFunc,threshold);
  }
  if (taskMonitor != null) {
    taskMonitor.setPercentCompleted(100);
  }
  return result;
}","public ValuedNodeSetList mergeOverlapping(ValuedNodeSetList nodeSets,SimilarityFunction<NodeSet> similarityFunc,double threshold){
  int i, j, n=nodeSets.size();
  long stepsTotal=n * (n - 1) / 2, stepsTaken=0;
  double similarity;
  ValuedNodeSetList result=new ValuedNodeSetList();
  HashSet<ValuedNodeSet> activeNodesets=new HashSet<ValuedNodeSet>();
  if (n == 0)   return result;
  if (verificationMode) {
    prepareForVerification(nodeSets);
  }
  Graph graph=nodeSets.get(0).getGraph();
  PriorityQueue<NodeSetPair> pairs=new PriorityQueue<NodeSetPair>();
  HashMultimap<ValuedNodeSet,NodeSetPair> nodesetsToPairs=new HashMultimap<ValuedNodeSet,NodeSetPair>();
  if (taskMonitor != null) {
    taskMonitor.setPercentCompleted(0);
    taskMonitor.setStatus(""String_Node_Str"");
  }
  for (i=0; i < n; i++) {
    ValuedNodeSet v1=nodeSets.get(i);
    for (j=i + 1; j < n; j++) {
      ValuedNodeSet v2=nodeSets.get(j);
      similarity=similarityFunc.getSimilarity(v1,v2);
      if (similarity > 0) {
        NodeSetPair pair=new NodeSetPair(v1,v2,similarity);
        pairs.add(pair);
        debug(""String_Node_Str"" + pair + ""String_Node_Str""+ v1);
        nodesetsToPairs.put(v1,pair);
        debug(""String_Node_Str"" + pair + ""String_Node_Str""+ v2);
        nodesetsToPairs.put(v2,pair);
      }
    }
    if (!nodesetsToPairs.containsKey(v1)) {
      result.add(v1);
    }
    stepsTaken+=(n - i - 1);
    if (stepsTaken > stepsTotal)     stepsTaken=stepsTotal;
    if (taskMonitor != null) {
      taskMonitor.setPercentCompleted((int)(100 * (((float)stepsTaken) / stepsTotal)));
    }
  }
  activeNodesets.addAll(nodesetsToPairs.keySet());
  if (debugging) {
    System.err.println(""String_Node_Str"");
    System.err.println(result);
    System.err.println(""String_Node_Str"");
    System.err.println(pairs);
  }
  if (isVerificationMode()) {
    ValuedNodeSetList tmpResult=new ValuedNodeSetList();
    tmpResult.addAll(result);
    tmpResult.addAll(activeNodesets);
    verifyResult(tmpResult,similarityFunc,-1);
  }
  if (taskMonitor != null) {
    taskMonitor.setPercentCompleted(-1);
    taskMonitor.setStatus(""String_Node_Str"");
  }
  stepsTotal=pairs.size();
  stepsTaken=0;
  while (!pairs.isEmpty()) {
    NodeSetPair pair=pairs.poll();
    ValuedNodeSet v1=pair.getLeft();
    ValuedNodeSet v2=pair.getRight();
    if (pair.similarity < threshold)     break;
    debug(""String_Node_Str"" + pair);
    if (!activeNodesets.contains(v1)) {
      debug(""String_Node_Str"" + v1 + ""String_Node_Str"");
      nodesetsToPairs.remove(v2,pair);
      continue;
    }
    if (!activeNodesets.contains(v2)) {
      debug(""String_Node_Str"" + v2 + ""String_Node_Str"");
      nodesetsToPairs.remove(v1,pair);
      continue;
    }
    nodesetsToPairs.remove(v1,pair);
    nodesetsToPairs.remove(v2,pair);
    Multiset<Integer> unionMembers=new TreeMultiset<Integer>();
    unionMembers.addAll(v1.getMembers());
    unionMembers.addAll(v2.getMembers());
    ValuedNodeSet unionNodeset=new ValuedNodeSet(graph,unionMembers.elementSet());
    for (    Multiset.Entry<Integer> entry : unionMembers.entrySet()) {
      Integer elt=entry.getElement();
      int count=v1.getValue(elt,0) + v2.getValue(elt,0);
      unionNodeset.setValue(elt,count);
    }
    boolean v1SubsetOfv2=unionNodeset.equals(v2);
    boolean v2SubsetOfv1=unionNodeset.equals(v1);
    if (!v1SubsetOfv2 && !v2SubsetOfv1) {
      debug(""String_Node_Str"");
      for (      NodeSetPair oldPair : nodesetsToPairs.get(v1)) {
        ValuedNodeSet v3=oldPair.getOtherThan(v1);
        similarity=similarityFunc.getSimilarity(unionNodeset,v3);
        nodesetsToPairs.remove(v3,oldPair);
        if (similarity < threshold)         continue;
        NodeSetPair newPair=new NodeSetPair(unionNodeset,v3,similarity);
        debug(""String_Node_Str"" + oldPair + ""String_Node_Str""+ newPair);
        pairs.add(newPair);
        nodesetsToPairs.put(unionNodeset,newPair);
        nodesetsToPairs.put(v3,newPair);
      }
      debug(""String_Node_Str"" + nodesetsToPairs.get(v1));
      for (      NodeSetPair oldPair : nodesetsToPairs.get(v2)) {
        ValuedNodeSet v3=oldPair.getOtherThan(v2);
        if (unionNodeset == v3) {
          continue;
        }
        similarity=similarityFunc.getSimilarity(unionNodeset,v3);
        nodesetsToPairs.remove(v3,oldPair);
        if (similarity < threshold)         continue;
        NodeSetPair newPair=new NodeSetPair(unionNodeset,v3,similarity);
        debug(""String_Node_Str"" + oldPair + ""String_Node_Str""+ newPair);
        pairs.add(newPair);
        nodesetsToPairs.put(unionNodeset,newPair);
        nodesetsToPairs.put(v3,newPair);
      }
      nodesetsToPairs.removeAll(v1);
      nodesetsToPairs.removeAll(v2);
      activeNodesets.remove(v1);
      activeNodesets.remove(v2);
      activeNodesets.add(unionNodeset);
    }
 else     if (v1SubsetOfv2 && !v2SubsetOfv1) {
      debug(""String_Node_Str"");
      for (      int member : v1)       v2.setValue(member,v1.getValue(member) + v2.getValue(member));
      Collection<NodeSetPair> v2Pairs=nodesetsToPairs.get(v2);
      for (      NodeSetPair oldPair : nodesetsToPairs.get(v1)) {
        ValuedNodeSet v3=oldPair.getOtherThan(v1);
        if (v3 == v2)         continue;
        similarity=similarityFunc.getSimilarity(v2,v3);
        nodesetsToPairs.remove(v3,oldPair);
        debug(""String_Node_Str"" + v2 + ""String_Node_Str""+ v3+ ""String_Node_Str""+ similarity);
        if (similarity == 0)         continue;
        NodeSetPair newPair=new NodeSetPair(v2,v3,similarity);
        if (v2Pairs.contains(newPair)) {
          debug(""String_Node_Str"");
          continue;
        }
        debug(""String_Node_Str"" + oldPair + ""String_Node_Str""+ newPair);
        pairs.add(newPair);
        nodesetsToPairs.put(v2,newPair);
        nodesetsToPairs.put(v3,newPair);
      }
      nodesetsToPairs.removeAll(v1);
      activeNodesets.remove(v1);
    }
 else     if (v2SubsetOfv1 && !v1SubsetOfv2) {
      debug(""String_Node_Str"");
      for (      int member : v2)       v1.setValue(member,v2.getValue(member) + v1.getValue(member));
      Collection<NodeSetPair> v1Pairs=nodesetsToPairs.get(v1);
      for (      NodeSetPair oldPair : nodesetsToPairs.get(v2)) {
        ValuedNodeSet v3=oldPair.getOtherThan(v2);
        if (v3 == v1)         continue;
        similarity=similarityFunc.getSimilarity(v1,v3);
        nodesetsToPairs.remove(v3,oldPair);
        if (similarity == 0)         continue;
        NodeSetPair newPair=new NodeSetPair(v1,v3,similarity);
        if (v1Pairs.contains(newPair))         continue;
        debug(""String_Node_Str"" + oldPair + ""String_Node_Str""+ newPair);
        pairs.add(newPair);
        nodesetsToPairs.put(v1,newPair);
        nodesetsToPairs.put(v3,newPair);
      }
      nodesetsToPairs.removeAll(v2);
      activeNodesets.remove(v2);
    }
 else {
      debug(""String_Node_Str"");
      for (      int member : v2)       v1.setValue(member,v2.getValue(member) + v1.getValue(member));
      nodesetsToPairs.removeAll(v2);
      activeNodesets.remove(v2);
    }
    if (isVerificationMode()) {
      ValuedNodeSetList tmpResult=new ValuedNodeSetList();
      tmpResult.addAll(result);
      tmpResult.addAll(activeNodesets);
      try {
        verifyResult(tmpResult,similarityFunc,-1);
      }
 catch (      RuntimeException ex) {
        System.err.println(""String_Node_Str"" + stepsTaken + ""String_Node_Str""+ ""String_Node_Str""+ v1+ ""String_Node_Str""+ v2);
        throw ex;
      }
    }
    stepsTaken++;
  }
  result.addAll(activeNodesets);
  if (verificationMode) {
    verifyResult(result,similarityFunc,threshold);
  }
  if (taskMonitor != null) {
    taskMonitor.setPercentCompleted(100);
  }
  return result;
}"
20162,"public int compareTo(NodeSetPair other){
  if (this.equals(other))   return 0;
  if (this.similarity < other.similarity)   return 1;
  if (this.similarity > other.similarity)   return -1;
  if (this.getLeft().equals(this.getRight()))   return 0;
  return System.identityHashCode(this.getLeft()) - System.identityHashCode(this.getRight());
}","public int compareTo(NodeSetPair other){
  if (this.equals(other))   return 0;
  if (this.similarity < other.similarity)   return 1;
  if (this.similarity > other.similarity)   return -1;
  return this.getLeft().compareTo(this.getRight());
}"
20163,"/** 
 * Obtains the algorithm parameters from the user using a standard ProCope dialog box
 * @return  the parameters
 */
protected ClusterONEAlgorithmParameters getAlgorithmParameters(){
  ClusterONEAlgorithmParametersDialog dialog=new ClusterONEAlgorithmParametersDialog();
  dialog.setLocationRelativeTo(null);
  if (!dialog.execute())   return null;
  return dialog.getParameters();
}","/** 
 * Obtains the algorithm parameters from the user using a standard ProCope dialog box
 * @return  the parameters
 */
protected ClusterONEAlgorithmParameters getAlgorithmParameters(){
  ClusterONEAlgorithmParametersDialog dialog=new ClusterONEAlgorithmParametersDialog();
  dialog.getParametersPanel().expandAll();
  dialog.pack();
  dialog.setLocationRelativeTo(null);
  if (!dialog.execute())   return null;
  return dialog.getParameters();
}"
20164,"/** 
 * Merges highly overlapping nodesets and returns a new nodeset list. The algorithm progresses by creating a graph where each node refers to one of the nodesets. Any two nodes in the graph will be connected if the corresponding clusters overlap by at least the given threshold. The connected components of the graph will be used to derive the new nodesets in the result.
 * @param mergingMethod  Determines which method to use to calculate thesize of overlap between two nodesets. <tt>match</tt> means the matching coefficient, <tt>meet/min</tt> means the meet/min coefficient.
 * @param threshold  the overlap threshold. Nodesets will be mergedif their overlap is at least as large as the given threshold.
 * @param monitor    a {@link TaskMonitor} to report our progress to
 * @return  a new nodeset list where no two nodesets have an overlaplarger than or equal to the given threshold, and no nodeset has a density smaller than minDensity
 * @see NodeSet.getMeetMinCoefficientWith()
 */
public ValuedNodeSetList mergeOverlapping(String mergingMethod,double threshold,TaskMonitor monitor){
  int i, n=this.size();
  long stepsTotal=n * (n - 1) / 2, stepsTaken=0;
  ValuedNodeSetList result=new ValuedNodeSetList();
  if (n == 0)   return result;
  Graph graph=this.get(0).getGraph();
  Graph overlapGraph=new Graph();
  overlapGraph.createNodes(n);
  if (monitor != null) {
    monitor.setPercentCompleted(0);
    monitor.setStatus(""String_Node_Str"");
  }
  for (i=0; i < n; i++) {
    NodeSet v1=this.get(i);
    if (mergingMethod.equals(""String_Node_Str"")) {
      for (int j=i + 1; j < n; j++) {
        if (v1.getMatchingRatioWith(this.get(j)) >= threshold)         overlapGraph.createEdge(i,j);
      }
    }
 else     if (mergingMethod.equals(""String_Node_Str"")) {
      for (int j=i + 1; j < n; j++) {
        if (v1.getMeetMinCoefficientWith(this.get(j)) >= threshold)         overlapGraph.createEdge(i,j);
      }
    }
    stepsTaken+=(n - i - 1);
    if (stepsTaken > stepsTotal)     stepsTaken=stepsTotal;
    if (monitor != null) {
      monitor.setPercentCompleted((int)(100 * (((float)stepsTaken) / stepsTotal)));
    }
  }
  if (monitor != null) {
    monitor.setPercentCompleted(0);
    monitor.setStatus(""String_Node_Str"");
  }
  boolean[] visited=new boolean[n];
  Arrays.fill(visited,false);
  i=0;
  while (i < n) {
    while (i < n && visited[i]) {
      i++;
    }
    if (i == n)     break;
    if (overlapGraph.getDegree(i) == 0) {
      result.add(this.get(i));
      visited[i]=true;
    }
 else {
      BreadthFirstSearch bfs=new BreadthFirstSearch(overlapGraph,i);
      Multiset<Integer> members=new TreeMultiset<Integer>();
      System.out.println(""String_Node_Str"");
      for (      int j : bfs) {
        SortedSet<Integer> newMembers=this.get(j).getMembers();
        members.addAll(newMembers);
        this.set(j,null);
        visited[j]=true;
        System.out.println(""String_Node_Str"" + newMembers);
        System.out.println(""String_Node_Str"" + members);
      }
      System.out.println(""String_Node_Str"");
      ValuedNodeSet newNodeSet=new ValuedNodeSet(graph,members.elementSet());
      for (      Multiset.Entry<Integer> entry : members.entrySet())       newNodeSet.setValue(entry.getElement(),entry.getCount());
      result.add(newNodeSet);
    }
    i++;
    if (monitor != null)     monitor.setPercentCompleted(100 * i / n);
  }
  if (monitor != null) {
    monitor.setPercentCompleted(100);
  }
  return result;
}","/** 
 * Merges highly overlapping nodesets and returns a new nodeset list. The algorithm progresses by creating a graph where each node refers to one of the nodesets. Any two nodes in the graph will be connected if the corresponding clusters overlap by at least the given threshold. The connected components of the graph will be used to derive the new nodesets in the result.
 * @param mergingMethod  Determines which method to use to calculate thesize of overlap between two nodesets. <tt>match</tt> means the matching coefficient, <tt>meet/min</tt> means the meet/min coefficient.
 * @param threshold  the overlap threshold. Nodesets will be mergedif their overlap is at least as large as the given threshold.
 * @param monitor    a {@link TaskMonitor} to report our progress to
 * @return  a new nodeset list where no two nodesets have an overlaplarger than or equal to the given threshold, and no nodeset has a density smaller than minDensity
 * @see NodeSet.getMeetMinCoefficientWith()
 */
public ValuedNodeSetList mergeOverlapping(String mergingMethod,double threshold,TaskMonitor monitor){
  int i, n=this.size();
  long stepsTotal=n * (n - 1) / 2, stepsTaken=0;
  ValuedNodeSetList result=new ValuedNodeSetList();
  if (n == 0)   return result;
  Graph graph=this.get(0).getGraph();
  Graph overlapGraph=new Graph();
  overlapGraph.createNodes(n);
  if (monitor != null) {
    monitor.setPercentCompleted(0);
    monitor.setStatus(""String_Node_Str"");
  }
  for (i=0; i < n; i++) {
    NodeSet v1=this.get(i);
    if (mergingMethod.equals(""String_Node_Str"")) {
      for (int j=i + 1; j < n; j++) {
        if (v1.getMatchingRatioWith(this.get(j)) >= threshold)         overlapGraph.createEdge(i,j);
      }
    }
 else     if (mergingMethod.equals(""String_Node_Str"")) {
      for (int j=i + 1; j < n; j++) {
        if (v1.getMeetMinCoefficientWith(this.get(j)) >= threshold)         overlapGraph.createEdge(i,j);
      }
    }
    stepsTaken+=(n - i - 1);
    if (stepsTaken > stepsTotal)     stepsTaken=stepsTotal;
    if (monitor != null) {
      monitor.setPercentCompleted((int)(100 * (((float)stepsTaken) / stepsTotal)));
    }
  }
  if (monitor != null) {
    monitor.setPercentCompleted(0);
    monitor.setStatus(""String_Node_Str"");
  }
  boolean[] visited=new boolean[n];
  Arrays.fill(visited,false);
  i=0;
  while (i < n) {
    while (i < n && visited[i]) {
      i++;
    }
    if (i == n)     break;
    if (overlapGraph.getDegree(i) == 0) {
      result.add(this.get(i));
      visited[i]=true;
    }
 else {
      BreadthFirstSearch bfs=new BreadthFirstSearch(overlapGraph,i);
      Multiset<Integer> members=new TreeMultiset<Integer>();
      for (      int j : bfs) {
        SortedSet<Integer> newMembers=this.get(j).getMembers();
        members.addAll(newMembers);
        this.set(j,null);
        visited[j]=true;
      }
      ValuedNodeSet newNodeSet=new ValuedNodeSet(graph,members.elementSet());
      for (      Multiset.Entry<Integer> entry : members.entrySet())       newNodeSet.setValue(entry.getElement(),entry.getCount());
      result.add(newNodeSet);
    }
    i++;
    if (monitor != null)     monitor.setPercentCompleted(100 * i / n);
  }
  if (monitor != null) {
    monitor.setPercentCompleted(100);
  }
  return result;
}"
20165,"@Override public Set<Multiset.Entry<E>> entrySet(){
  Set<Multiset.Entry<E>> result=new HashSet<Multiset.Entry<E>>();
  for (  Map.Entry<E,Integer> entry : data.entrySet())   result.add(new Entry(entry));
  return result;
}","public Set<Multiset.Entry<E>> entrySet(){
  Set<Multiset.Entry<E>> result=new HashSet<Multiset.Entry<E>>();
  for (  Map.Entry<E,Integer> entry : data.entrySet())   result.add(new Entry(entry));
  return result;
}"
20166,"@Override public int count(Object element){
  Integer count=data.get(element);
  if (count == null)   return 0;
  return count;
}","public int count(Object element){
  Integer count=data.get(element);
  if (count == null)   return 0;
  return count;
}"
20167,"@Override public Set<E> elementSet(){
  return data.keySet();
}","public Set<E> elementSet(){
  return data.keySet();
}"
20168,"@Override public int setCount(E element,int count){
  if (count < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int oldCount=this.count(element);
  if (count == 0)   data.remove(element);
 else   data.put(element,count);
  return oldCount;
}","public int setCount(E element,int count){
  if (count < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  int oldCount=this.count(element);
  if (count == 0)   data.remove(element);
 else   data.put(element,count);
  return oldCount;
}"
20169,"/** 
 * Executes the algorithm on the graph set earlier by setGraph()
 */
public void run(){
  boolean needHaircut=params.isHaircutNeeded();
  double minSize=params.getMinSize();
  double minDensity=params.getMinDensity();
  double haircutThreshold=params.getHaircutThreshold();
  NodeSetList result=new NodeSetList();
  HashSet<NodeSet> addedNodeSets=new HashSet<NodeSet>();
  SeedGenerator seedGenerator=params.getSeedGenerator();
  seedGenerator.setGraph(graph);
  int step=0;
  int numExpectedSeeds=seedGenerator.size();
  monitor.setStatus(""String_Node_Str"");
  monitor.setPercentCompleted(0);
  SeedIterator it=seedGenerator.iterator();
  while (it.hasNext()) {
    MutableNodeSet cluster=it.next();
    ClusterGrowthProcess growthProcess=new GreedyClusterGrowthProcess(cluster,minDensity);
    while (!shouldStop && growthProcess.step())     ;
    if (shouldStop)     return;
    if (cluster.size() < minSize)     continue;
    if (cluster.getDensity() < minDensity)     continue;
    if (needHaircut)     cluster.haircut(haircutThreshold);
    NodeSet frozenCluster=cluster.freeze();
    cluster=null;
    if (!addedNodeSets.contains(frozenCluster)) {
      result.add(frozenCluster);
      addedNodeSets.add(frozenCluster);
      it.processFoundCluster(frozenCluster);
    }
    step++;
    if (step > numExpectedSeeds) {
      monitor.setPercentCompleted(-1);
    }
 else {
      monitor.setPercentCompleted(100 * step / numExpectedSeeds);
    }
  }
  monitor.setPercentCompleted(100);
  addedNodeSets.clear();
  addedNodeSets=null;
  if (params.getMergingMethod() != null && !params.getMergingMethod().equals(""String_Node_Str"")) {
    monitor.setPercentCompleted(0);
    monitor.setStatus(""String_Node_Str"");
    result=result.mergeOverlapping(params.getMergingMethod(),params.getOverlapThreshold(),monitor);
    monitor.setPercentCompleted(100);
  }
  this.result=result;
}","/** 
 * Executes the algorithm on the graph set earlier by setGraph()
 */
public void run(){
  boolean needHaircut=params.isHaircutNeeded();
  double minSize=params.getMinSize();
  double minDensity=params.getMinDensity();
  double haircutThreshold=params.getHaircutThreshold();
  NodeSetList result=new NodeSetList();
  HashSet<NodeSet> addedNodeSets=new HashSet<NodeSet>();
  SeedGenerator seedGenerator=params.getSeedGenerator();
  seedGenerator.setGraph(graph);
  int step=0;
  int numExpectedSeeds=seedGenerator.size();
  monitor.setStatus(""String_Node_Str"");
  monitor.setPercentCompleted(0);
  SeedIterator it=seedGenerator.iterator();
  while (it.hasNext()) {
    MutableNodeSet cluster=it.next();
    ClusterGrowthProcess growthProcess=new GreedyClusterGrowthProcess(cluster,minDensity);
    while (!shouldStop && growthProcess.step())     ;
    if (shouldStop)     return;
    if (needHaircut)     cluster.haircut(haircutThreshold);
    if (cluster.size() < minSize)     continue;
    if (cluster.getDensity() < minDensity)     continue;
    NodeSet frozenCluster=cluster.freeze();
    cluster=null;
    if (!addedNodeSets.contains(frozenCluster)) {
      result.add(frozenCluster);
      addedNodeSets.add(frozenCluster);
      it.processFoundCluster(frozenCluster);
    }
    step++;
    if (step > numExpectedSeeds) {
      monitor.setPercentCompleted(-1);
    }
 else {
      monitor.setPercentCompleted(100 * step / numExpectedSeeds);
    }
  }
  monitor.setPercentCompleted(100);
  addedNodeSets.clear();
  addedNodeSets=null;
  if (params.getMergingMethod() != null && !params.getMergingMethod().equals(""String_Node_Str"")) {
    monitor.setPercentCompleted(0);
    monitor.setStatus(""String_Node_Str"");
    result=result.mergeOverlapping(params.getMergingMethod(),params.getOverlapThreshold(),monitor);
    monitor.setPercentCompleted(100);
  }
  this.result=result;
}"
20170,"/** 
 * Performs a haircut operation on the nodeset The haircut operation tries to eliminate vertices that connect only loosely to the rest of the nodeset. This is achieved by removing vertices whose internal weight is less than some percentage (e.g., 20%) of the average internal weight of the cluster.
 */
public void haircut(double threshold){
  if (this.size() == 0)   return;
  do {
    int minIdx=this.members.first();
    double minInWeight=this.inWeights[minIdx];
    double limit=2 * this.totalInternalEdgeWeight / this.size() * threshold;
    for (    int i : this.members) {
      if (this.inWeights[i] < minInWeight) {
        minInWeight=this.inWeights[i];
        minIdx=i;
      }
    }
    if (minInWeight < limit)     this.remove(minIdx);
 else     break;
  }
 while (true);
}","/** 
 * Performs a haircut operation on the nodeset The haircut operation tries to eliminate vertices that connect only loosely to the rest of the nodeset. This is achieved by removing vertices whose internal weight is less than some percentage (e.g., 20%) of the average internal weight of the cluster.
 */
public void haircut(double threshold){
  while (!this.members.isEmpty()) {
    int minIdx=this.members.first();
    double minInWeight=this.inWeights[minIdx];
    double limit=2 * this.totalInternalEdgeWeight / this.size() * threshold;
    for (    int i : this.members) {
      if (this.inWeights[i] < minInWeight) {
        minInWeight=this.inWeights[i];
        minIdx=i;
      }
    }
    if (minInWeight < limit)     this.remove(minIdx);
 else     break;
  }
}"
20171,"/** 
 * Prints the nodes in this set to a string
 */
public String toString(){
  StringArray names=new StringArray();
  for (  Integer member : this.members) {
    names.add(this.graph.getNodeName(member));
  }
  return StringUtils.join(names.iterator(),' ');
}","/** 
 * Prints the nodes in this set to a string
 */
public String toString(){
  return StringUtils.join(getMemberNames(),' ');
}"
20172,"public int run(String[] args){
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=null;
  ClusterONEAlgorithmParameters params=new ClusterONEAlgorithmParameters();
  try {
    cmd=parser.parse(this.options,args);
    if (cmd.hasOption(""String_Node_Str""))     params.setMinSize(Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")));
    if (cmd.hasOption(""String_Node_Str""))     params.setMinDensity(Double.parseDouble(cmd.getOptionValue(""String_Node_Str"")));
    if (cmd.hasOption(""String_Node_Str""))     params.setMergingMethod(""String_Node_Str"");
    if (cmd.hasOption(""String_Node_Str""))     params.setOverlapThreshold(Double.parseDouble(cmd.getOptionValue(""String_Node_Str"")));
    if (cmd.hasOption(""String_Node_Str""))     params.setOverlapThreshold(Double.parseDouble(cmd.getOptionValue(""String_Node_Str"")));
    if (cmd.hasOption(""String_Node_Str""))     params.setSeedGenerator(cmd.getOptionValue(""String_Node_Str"").toString());
  }
 catch (  ParseException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    return 1;
  }
catch (  InstantiationException ex) {
    System.err.println(""String_Node_Str"" + cmd.getOptionValue(""String_Node_Str"").toString());
    ex.printStackTrace();
    return 2;
  }
  if (cmd.getArgList().size() == 0 || cmd.hasOption('h')) {
    usage();
    return 0;
  }
  if (cmd.getArgList().size() > 1) {
    System.err.println(""String_Node_Str"");
    return 2;
  }
  Graph graph=null;
  try {
    graph=loadGraph(cmd.getArgs()[0]);
  }
 catch (  IOException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    return 3;
  }
  System.err.println(""String_Node_Str"" + graph.getNodeCount() + ""String_Node_Str""+ graph.getEdgeCount()+ ""String_Node_Str"");
  ClusterONE algorithm=new ClusterONE(params);
  algorithm.setTaskMonitor(new ConsoleTaskMonitor());
  algorithm.runOnGraph(graph);
  System.err.println(""String_Node_Str"" + algorithm.getResults().size() + ""String_Node_Str"");
  for (  NodeSet nodeSet : algorithm.getResults()) {
    System.out.println(nodeSet);
  }
  return 0;
}","public int run(String[] args){
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=null;
  ClusterONEAlgorithmParameters params=new ClusterONEAlgorithmParameters();
  try {
    cmd=parser.parse(this.options,args);
    if (cmd.hasOption(""String_Node_Str""))     params.setMinSize(Integer.parseInt(cmd.getOptionValue(""String_Node_Str"")));
    if (cmd.hasOption(""String_Node_Str""))     params.setMinDensity(Double.parseDouble(cmd.getOptionValue(""String_Node_Str"")));
    if (cmd.hasOption(""String_Node_Str""))     params.setMergingMethod(""String_Node_Str"");
    if (cmd.hasOption(""String_Node_Str""))     params.setHaircutThreshold(Double.parseDouble(cmd.getOptionValue(""String_Node_Str"")));
    if (cmd.hasOption(""String_Node_Str""))     params.setOverlapThreshold(Double.parseDouble(cmd.getOptionValue(""String_Node_Str"")));
    if (cmd.hasOption(""String_Node_Str""))     params.setSeedGenerator(cmd.getOptionValue(""String_Node_Str"").toString());
  }
 catch (  ParseException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    return 1;
  }
catch (  InstantiationException ex) {
    System.err.println(""String_Node_Str"" + cmd.getOptionValue(""String_Node_Str"").toString());
    ex.printStackTrace();
    return 2;
  }
  if (cmd.getArgList().size() == 0 || cmd.hasOption('h')) {
    usage();
    return 0;
  }
  if (cmd.getArgList().size() > 1) {
    System.err.println(""String_Node_Str"");
    return 2;
  }
  Graph graph=null;
  try {
    graph=loadGraph(cmd.getArgs()[0]);
  }
 catch (  IOException ex) {
    System.err.println(""String_Node_Str"" + ex.getMessage());
    return 3;
  }
  System.err.println(""String_Node_Str"" + graph.getNodeCount() + ""String_Node_Str""+ graph.getEdgeCount()+ ""String_Node_Str"");
  ClusterONE algorithm=new ClusterONE(params);
  algorithm.setTaskMonitor(new ConsoleTaskMonitor());
  algorithm.runOnGraph(graph);
  System.err.println(""String_Node_Str"" + algorithm.getResults().size() + ""String_Node_Str"");
  for (  NodeSet nodeSet : algorithm.getResults()) {
    System.out.println(nodeSet);
  }
  return 0;
}"
20173,"@Override public Edge next(){
  Edge result=new Edge(this.graph,this.edgeIndex);
  this.edgeIndex++;
  return result;
}","public Edge next(){
  Edge result=new Edge(this.graph,this.edgeIndex);
  this.edgeIndex++;
  return result;
}"
20174,"@Override public boolean hasNext(){
  return this.edgeIndex < this.graph.getEdgeCount();
}","public boolean hasNext(){
  return this.edgeIndex < this.graph.getEdgeCount();
}"
20175,"@Override public void remove(){
  throw new UnsupportedOperationException();
}","public void remove(){
  throw new UnsupportedOperationException();
}"
20176,"@Override public Iterator<Edge> iterator(){
  return new EdgeIterator(this);
}","public Iterator<Edge> iterator(){
  return new EdgeIterator(this);
}"
20177,"public static boolean checkCC(String cardNumber){
  int sum=0;
  if (!StringUtils.isNumber(cardNumber)) {
    return false;
  }
  for (int i=0; i < cardNumber.length(); i++) {
    int k=Integer.parseInt(cardNumber.substring(i,i + 1));
    if (i % 2 == 0) {
      k*=2;
      if (k > 9) {
        k-=9;
      }
    }
    sum+=k;
  }
  return (sum % 10 == 0);
}","public static boolean checkCC(String cardNumber){
  int sum=0;
  int flip=0;
  if (!StringUtils.isNumber(cardNumber)) {
    return false;
  }
  for (int i=cardNumber.length() - 1; i >= 0; i--) {
    int k=Character.digit(cardNumber.charAt(i),10);
    flip++;
    if (flip % 2 == 0) {
      k*=2;
      if (k > 9) {
        k-=9;
      }
    }
    sum+=k;
  }
  return (sum % 10 == 0);
}"
20178,"public void readValues(DataRead dr) throws BasicException {
  m_sTicket=dr.getString(1);
  m_iLine=dr.getInt(2).intValue();
  productid=dr.getString(3);
  attsetinstid=dr.getString(4);
  multiply=dr.getDouble(5);
  price=dr.getDouble(6);
  tax=new TaxInfo(dr.getString(7),dr.getString(8),dr.getString(9),dr.getTimestamp(10),dr.getString(11),dr.getString(12),dr.getDouble(13),dr.getBoolean(14),dr.getInt(15));
  attributes=new Properties();
  try {
    byte[] img=dr.getBytes(15);
    if (img != null) {
      attributes.loadFromXML(new ByteArrayInputStream(img));
    }
  }
 catch (  IOException e) {
  }
}","public void readValues(DataRead dr) throws BasicException {
  m_sTicket=dr.getString(1);
  m_iLine=dr.getInt(2).intValue();
  productid=dr.getString(3);
  attsetinstid=dr.getString(4);
  multiply=dr.getDouble(5);
  price=dr.getDouble(6);
  tax=new TaxInfo(dr.getString(7),dr.getString(8),dr.getString(9),dr.getTimestamp(10),dr.getString(11),dr.getString(12),dr.getDouble(13),dr.getBoolean(14),dr.getInt(15));
  attributes=new Properties();
  try {
    byte[] img=dr.getBytes(16);
    if (img != null) {
      attributes.loadFromXML(new ByteArrayInputStream(img));
    }
  }
 catch (  IOException e) {
  }
}"
20179,"public String printName(){
  return m_sProdName;
}","public String printName(){
  return StringUtils.encodeXML(m_sProdName);
}"
20180,"public BigDecimal getTotalOfaTicket(String place){
  double total=0;
  for (  TicketLineInfo line : findTicket(place).getM_aLines()) {
    try {
      total+=line.getMultiply() * (line.getPrice() + line.getPrice() * line.getTax().getRate());
    }
 catch (    NullPointerException e) {
      total+=line.getMultiply() * line.getPrice();
    }
  }
  return BigDecimal.valueOf(total);
}","public BigDecimal getTotalOfaTicket(String place){
  double total=0;
  for (  TicketLineInfo line : findTicket(place).getM_aLines()) {
    total+=line.getMultiply() * line.getPrice();
  }
  return BigDecimal.valueOf(total);
}"
20181,"public void addLineToTicket(String ticketId,String productId){
  ticket=new TicketDAO();
  product=new ProductDAO();
  category=new CategoryDAO();
  tax=new TaxDAO();
  taxesLogic=new TaxesLogic(tax.getTaxList());
  TicketInfo obj=ticket.getTicket(ticketId);
  ProductInfo productObj=product.findProductById(productId);
  TicketLineInfo line=new TicketLineInfo(productObj,productObj.getPriceSell(),taxesLogic.getTaxInfo(productObj.getCategoryId()));
  obj.addLine(line);
  ticket.updateTicket(ticketId,obj);
  refreshTax(obj);
}","public void addLineToTicket(String ticketId,String productId){
  ticket=new TicketDAO();
  product=new ProductDAO();
  category=new CategoryDAO();
  tax=new TaxDAO();
  taxesLogic=new TaxesLogic(tax.getTaxList());
  TicketInfo obj=ticket.getTicket(ticketId);
  ProductInfo productObj=product.findProductById(productId);
  TicketLineInfo line=new TicketLineInfo(productObj,productObj.getPriceSell(),taxesLogic.getTaxInfo(productObj.getTaxcat()));
  obj.addLine(line);
  ticket.updateTicket(ticketId,obj);
  refreshTax(obj);
}"
20182,"public double getPrice(){
  return price;
}","public double getPrice(){
  try {
    return price + (price * getTax().getRate());
  }
 catch (  NullPointerException ex) {
    return price;
  }
}"
20183,"public double getValue(){
  return price * multiply;
}","public double getValue(){
  return getPrice() * multiply;
}"
20184,"public List<Place> findAllBusyTable(String floor){
  place=new PlaceDAO();
  return place.findAllBusyPlaceByFloor(floor);
}","public List<Place> findAllBusyTable(String floor){
  place=new PlaceDAO();
  return place.findAllBusyPlacesByFloor(floor);
}"
20185,"public String printHost(){
  return m_sHost;
}","public String printHost(){
  return StringUtils.encodeXML(m_sHost);
}"
20186,"public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(m_sCommerceID);
    sb.append(""String_Node_Str"");
    sb.append(m_sCommercePassword);
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(getCardType(payinfo.getCardNumber()));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    String tmp=payinfo.getExpirationDate();
    sb.append(tmp.substring(0,2));
    sb.append(""String_Node_Str"");
    sb.append(tmp.substring(2,tmp.length()));
    String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    if (cc_name.length > 0) {
      sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    if (cc_name.length > 1) {
      sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    sb.append(payinfo.getHolderName());
    if (payinfo.getTrack1(true) != null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getTrack1(true),""String_Node_Str""));
    }
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(SALE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(REFUND);
    }
    sb.append(""String_Node_Str"");
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=""String_Node_Str"", aux;
    while ((aux=in.readLine()) != null) {
      returned+=""String_Node_Str"" + aux;
    }
    payinfo.setReturnMessage(returned);
    in.close();
    Map props=new HashMap();
    StringTokenizer tk=new java.util.StringTokenizer(returned,""String_Node_Str"");
    while (tk.hasMoreTokens()) {
      String sToken=tk.nextToken();
      int i=sToken.indexOf('=');
      if (i >= 0) {
        props.put(URLDecoder.decode(sToken.substring(0,i),""String_Node_Str""),URLDecoder.decode(sToken.substring(i + 1),""String_Node_Str""));
      }
 else {
        props.put(URLDecoder.decode(sToken,""String_Node_Str""),null);
      }
    }
    if (APPROVED.equals(props.get(""String_Node_Str""))) {
      payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
    }
 else {
      String sCode=(String)props.get(""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),sCode);
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}","public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(m_sCommerceID);
    sb.append(""String_Node_Str"");
    sb.append(m_sCommercePassword);
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    if (payinfo.getTrack1(true) != null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getTrack1(true),""String_Node_Str""));
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(getCardType(payinfo.getCardNumber()));
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
      sb.append(""String_Node_Str"");
      String tmp=payinfo.getExpirationDate();
      sb.append(tmp.substring(0,2));
      sb.append(""String_Node_Str"");
      sb.append(tmp.substring(2,tmp.length()));
      String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (cc_name.length > 0) {
        sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      if (cc_name.length > 1) {
        sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getHolderName());
    }
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(SALE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(REFUND);
    }
    sb.append(""String_Node_Str"");
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=""String_Node_Str"", aux;
    while ((aux=in.readLine()) != null) {
      returned+=""String_Node_Str"" + aux;
    }
    payinfo.setReturnMessage(returned);
    in.close();
    Map props=new HashMap();
    StringTokenizer tk=new java.util.StringTokenizer(returned,""String_Node_Str"");
    while (tk.hasMoreTokens()) {
      String sToken=tk.nextToken();
      int i=sToken.indexOf('=');
      if (i >= 0) {
        props.put(URLDecoder.decode(sToken.substring(0,i),""String_Node_Str""),URLDecoder.decode(sToken.substring(i + 1),""String_Node_Str""));
      }
 else {
        props.put(URLDecoder.decode(sToken,""String_Node_Str""),null);
      }
    }
    if (APPROVED.equals(props.get(""String_Node_Str""))) {
      payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
    }
 else {
      String sCode=(String)props.get(""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),sCode);
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}"
20187,"void btnPrintActionPerformed(java.awt.event.ActionEvent evt){
  Thread thread=new Thread(new Runnable(){
    public void run(){
      try {
        btnPrint.setEnabled(false);
        JRViewer300.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        JasperPrintManager.printReport(jasperPrint,true);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(JRViewer300.this,getBundleString(""String_Node_Str""));
      }
 finally {
        JRViewer300.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        btnPrint.setEnabled(true);
      }
    }
  }
);
  thread.start();
}","void btnPrintActionPerformed(java.awt.event.ActionEvent evt){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      try {
        btnPrint.setEnabled(false);
        JRViewer300.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        JasperPrintManager.printReport(jasperPrint,true);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(JRViewer300.this,getBundleString(""String_Node_Str""));
      }
 finally {
        JRViewer300.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        btnPrint.setEnabled(true);
      }
    }
  }
);
}"
20188,"public void beginReceipt(){
  m_ticketcurrent=new BasicTicket();
}","public void beginReceipt(){
  m_ticketcurrent=new BasicTicketForScreen();
}"
20189,"public void printImage(BufferedImage image){
  PrintItem pi=new PrintItemImage(image,IMAGE_SCALE);
  m_aCommands.add(pi);
  m_iBodyHeight+=pi.getHeight();
}","public void printImage(BufferedImage image){
  PrintItem pi=new PrintItemImage(image,getImageScale());
  m_aCommands.add(pi);
  m_iBodyHeight+=pi.getHeight();
}"
20190,"public void printBarCode(String type,String position,String code){
  PrintItem pi=new PrintItemBarcode(type,position,code,IMAGE_SCALE);
  m_aCommands.add(pi);
  m_iBodyHeight+=pi.getHeight();
}","public void printBarCode(String type,String position,String code){
  PrintItem pi=new PrintItemBarcode(type,position,code,getImageScale());
  m_aCommands.add(pi);
  m_iBodyHeight+=pi.getHeight();
}"
20191,"public void beginLine(int iTextSize){
  pil=new PrintItemLine(iTextSize,BASEFONT,FONTHEIGHT);
}","public void beginLine(int iTextSize){
  pil=new PrintItemLine(iTextSize,getBaseFont(),getFontHeight());
}"
20192,"public String printReason(){
  return m_reason.toString();
}","public String printReason(){
  return StringUtils.encodeXML(m_reason.toString());
}"
20193,"public String printLocation(){
  return m_locationOri.toString();
}","public String printLocation(){
  return StringUtils.encodeXML(m_locationOri.toString());
}"
20194,"protected void internalWrite(byte[] data){
  try {
    if (m_out == null) {
      m_PortIdPrinter=CommPortIdentifier.getPortIdentifier(m_sPortPrinter);
      m_CommPortPrinter=m_PortIdPrinter.open(""String_Node_Str"",2000);
      m_out=m_CommPortPrinter.getOutputStream();
      if (m_PortIdPrinter.getPortType() == CommPortIdentifier.PORT_SERIAL) {
        ((SerialPort)m_CommPortPrinter).setSerialPortParams(9600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
        ((SerialPort)m_CommPortPrinter).setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN);
      }
    }
    m_out.write(data);
  }
 catch (  NoSuchPortException e) {
    System.err.println(e);
  }
catch (  PortInUseException e) {
    System.err.println(e);
  }
catch (  UnsupportedCommOperationException e) {
    System.err.println(e);
  }
catch (  IOException e) {
    System.err.println(e);
  }
}","protected void internalWrite(byte[] data){
  try {
    if (m_out == null) {
      m_PortIdPrinter=CommPortIdentifier.getPortIdentifier(m_sPortPrinter);
      m_CommPortPrinter=m_PortIdPrinter.open(""String_Node_Str"",2000);
      m_out=m_CommPortPrinter.getOutputStream();
      if (m_PortIdPrinter.getPortType() == CommPortIdentifier.PORT_SERIAL) {
        ((SerialPort)m_CommPortPrinter).setSerialPortParams(9600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
      }
    }
    m_out.write(data);
  }
 catch (  NoSuchPortException e) {
    System.err.println(e);
  }
catch (  PortInUseException e) {
    System.err.println(e);
  }
catch (  UnsupportedCommOperationException e) {
    System.err.println(e);
  }
catch (  IOException e) {
    System.err.println(e);
  }
}"
20195,"protected Connection getConnection() throws Exception {
  try {
    Class.forName(properties.getDriverName());
    return DriverManager.getConnection(properties.getUrl(),properties.getDBUser(),properties.getDBPassword());
  }
 catch (  SQLException sqlex) {
    sqlex.printStackTrace();
  }
catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}","protected Connection getConnection() throws Exception {
  try {
    Class.forName(properties.getDriverName());
    boolean ju=isPostgre();
    return DriverManager.getConnection(properties.getUrl(),properties.getDBUser(),properties.getDBPassword());
  }
 catch (  SQLException sqlex) {
    sqlex.printStackTrace();
  }
catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}"
20196,"public List<ProductInfo> findProductsByCategory(String categoryId){
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  List<ProductInfo> vos=null;
  String sqlStr=""String_Node_Str"" + ""String_Node_Str"";
  try {
    con=getConnection();
    ps=con.prepareStatement(sqlStr);
    ps.setString(1,categoryId);
    rs=ps.executeQuery();
    vos=transformSet(rs);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (con != null) {
        con.close();
      }
    }
 catch (    SQLException sqlee) {
      sqlee.printStackTrace();
    }
  }
  return vos;
}","public List<ProductInfo> findProductsByCategory(String categoryId){
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  List<ProductInfo> vos=null;
  String sqlStr=isPostgre() ? ""String_Node_Str"" + ""String_Node_Str"" : ""String_Node_Str"" + ""String_Node_Str"";
  try {
    con=getConnection();
    ps=con.prepareStatement(sqlStr);
    ps.setString(1,categoryId);
    rs=ps.executeQuery();
    vos=transformSet(rs);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (con != null) {
        con.close();
      }
    }
 catch (    SQLException sqlee) {
      sqlee.printStackTrace();
    }
  }
  return vos;
}"
20197,"protected void paintComponent(Graphics g){
  paintBorder(g);
  Graphics2D g2d=(Graphics2D)g;
  Insets i=getInsets();
  g2d.setPaint(new GradientPaint(getWidth() - i.left - i.right- 100,getHeight() - i.top - i.bottom- 100,getBackground(),getWidth() - i.left - i.right,getHeight() - i.top - i.bottom,new Color(0xf0f0f0),true));
  g2d.fillRect(i.left,i.top,getWidth() - i.left - i.right,getHeight() - i.top - i.bottom);
  g.setColor(getForeground());
  basict.draw(g2d,i.left + H_GAP,i.top + V_GAP,LINEWIDTH);
}","protected void paintComponent(Graphics g){
  paintBorder(g);
  Graphics2D g2d=(Graphics2D)g;
  if (desktophints != null) {
    g2d.addRenderingHints(desktophints);
  }
  Insets i=getInsets();
  g2d.setPaint(new GradientPaint(getWidth() - i.left - i.right- 100,getHeight() - i.top - i.bottom- 100,getBackground(),getWidth() - i.left - i.right,getHeight() - i.top - i.bottom,new Color(0xf0f0f0),true));
  g2d.fillRect(i.left,i.top,getWidth() - i.left - i.right,getHeight() - i.top - i.bottom);
  g.setColor(getForeground());
  basict.draw(g2d,i.left + H_GAP,i.top + V_GAP,LINEWIDTH);
}"
20198,"/** 
 * Creates new form JTicket 
 */
public JTicket(BasicTicket t){
  basict=t;
  initComponents();
}","/** 
 * Creates new form JTicket 
 */
public JTicket(BasicTicket t){
  basict=t;
  desktophints=(Map)Toolkit.getDefaultToolkit().getDesktopProperty(""String_Node_Str"");
  initComponents();
}"
20199,"public UserInfo findUser(String login,String password){
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  UserInfo user=null;
  String sqlStr=""String_Node_Str"";
  try {
    con=getConnection();
    ps=con.prepareStatement(sqlStr);
    ps.setString(1,login);
    ps.setString(2,StringUtils.hashString(password));
    rs=ps.executeQuery();
    user=map2VO(rs);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (con != null) {
        con.close();
      }
    }
 catch (    SQLException sqlee) {
      sqlee.printStackTrace();
    }
  }
  return user;
}","public UserInfo findUser(String login,String password){
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  UserInfo user=null;
  String sqlStr=""String_Node_Str"";
  try {
    con=getConnection();
    ps=con.prepareStatement(sqlStr);
    ps.setString(1,login);
    if (password.equals(""String_Node_Str"")) {
      ps.setString(2,null);
    }
 else {
      ps.setString(2,StringUtils.hashString(password));
    }
    rs=ps.executeQuery();
    user=map2VO(rs);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (con != null) {
        con.close();
      }
    }
 catch (    SQLException sqlee) {
      sqlee.printStackTrace();
    }
  }
  return user;
}"
20200,"public String printCardNumber(){
  if (m_sCardNumber.length() > 4) {
    return ""String_Node_Str"" + m_sCardNumber.substring(m_sCardNumber.length() - 4);
  }
 else {
    return ""String_Node_Str"";
  }
}","public String printCardNumber(){
  if (m_sCardNumber.length() > 4) {
    return m_sCardNumber.substring(0,m_sCardNumber.length() - 4).replaceAll(""String_Node_Str"",""String_Node_Str"") + m_sCardNumber.substring(m_sCardNumber.length() - 4);
  }
 else {
    return ""String_Node_Str"";
  }
}"
20201,"private String formatDouble(Double dvalue){
  String sNumber=dvalue.toString();
  if (sNumber.endsWith(""String_Node_Str"")) {
    sNumber=sNumber.substring(0,sNumber.length() - 2);
  }
  return sNumber;
}","private String formatDouble(Double value){
  String sNumber=Double.toString(DoubleUtils.fixDecimals(value));
  if (sNumber.endsWith(""String_Node_Str"")) {
    sNumber=sNumber.substring(0,sNumber.length() - 2);
  }
  return sNumber;
}"
20202,"public void writeValues(DataWrite dp) throws BasicException {
  dp.setString(1,m_sTicket);
  dp.setInt(2,new Integer(m_iLine));
  dp.setString(3,productid);
  dp.setDouble(4,new Double(multiply));
  dp.setDouble(5,new Double(price));
  dp.setString(6,tax.getId());
  try {
    ByteArrayOutputStream o=new ByteArrayOutputStream();
    attributes.storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
    dp.setBytes(7,o.toByteArray());
  }
 catch (  IOException e) {
    dp.setBytes(7,null);
  }
}","public void writeValues(DataWrite dp) throws BasicException {
  dp.setString(1,m_sTicket);
  dp.setInt(2,new Integer(m_iLine));
  dp.setString(3,productid);
  dp.setString(4,attsetinstid);
  dp.setDouble(5,new Double(multiply));
  dp.setDouble(6,new Double(price));
  dp.setString(7,tax.getId());
  try {
    ByteArrayOutputStream o=new ByteArrayOutputStream();
    attributes.storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
    dp.setBytes(8,o.toByteArray());
  }
 catch (  IOException e) {
    dp.setBytes(8,null);
  }
}"
20203,"public void readValues(DataRead dr) throws BasicException {
  m_sTicket=dr.getString(1);
  m_iLine=dr.getInt(2).intValue();
  productid=dr.getString(3);
  multiply=dr.getDouble(4);
  price=dr.getDouble(5);
  tax=new TaxInfo(dr.getString(6),dr.getString(7),dr.getString(8),dr.getString(9),dr.getString(10),dr.getDouble(11),dr.getBoolean(12),dr.getInt(13));
  attributes=new Properties();
  try {
    byte[] img=dr.getBytes(14);
    if (img != null) {
      attributes.loadFromXML(new ByteArrayInputStream(img));
    }
  }
 catch (  IOException e) {
  }
}","public void readValues(DataRead dr) throws BasicException {
  m_sTicket=dr.getString(1);
  m_iLine=dr.getInt(2).intValue();
  productid=dr.getString(3);
  attsetinstid=dr.getString(4);
  multiply=dr.getDouble(5);
  price=dr.getDouble(6);
  tax=new TaxInfo(dr.getString(7),dr.getString(8),dr.getString(9),dr.getString(10),dr.getString(11),dr.getDouble(12),dr.getBoolean(13),dr.getInt(14));
  attributes=new Properties();
  try {
    byte[] img=dr.getBytes(15);
    if (img != null) {
      attributes.loadFromXML(new ByteArrayInputStream(img));
    }
  }
 catch (  IOException e) {
  }
}"
20204,"/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  FloorForm floorForm=(FloorForm)form;
  RestaurantManager manager=new RestaurantManager();
  String floorId=(String)floorForm.getFloorId();
  String place=(String)floorForm.getId();
  String str=(String)floorForm.getMode();
  String[] array=null;
  int mode=0;
  if (!str.equals(""String_Node_Str"")) {
    mode=Integer.valueOf(str);
  }
  List<TicketLineInfo> linesList=new ArrayList<TicketLineInfo>();
  List products=new ArrayList<ProductInfoExt>();
  TicketInfo ticket;
switch (mode) {
case 1:
    ticket=manager.findTicket(place);
  linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
for (int i=0; i < array.length; i++) {
  if (linesList.get(Integer.valueOf(array[i])).getMultiply() > 0) {
    linesList.get(Integer.valueOf(array[i])).setMultiply(linesList.get(Integer.valueOf(array[i])).getMultiply() - 1);
  }
}
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",products.get(0));
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",linesList.get(Integer.valueOf(array[0])));
request.setAttribute(""String_Node_Str"",array[0]);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(UPDATE);
case 4:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
linesList.remove(Integer.parseInt(array[0]));
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",manager.findFloorById(manager.findPlaceById(place).getFloor()).getName());
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",floorId);
request.setAttribute(""String_Node_Str"",linesList);
request.setAttribute(""String_Node_Str"",products);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(SUCCESS);
case 2:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
String[] index=floorForm.getParameters();
linesList.get(Integer.valueOf(index[0])).setMultiply(Double.valueOf(index[1]));
manager.updateLineFromTicket(floorForm.getId(),ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
break;
case 3:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
for (int i=0; i < array.length; i++) {
linesList.get(Integer.valueOf(array[i])).setMultiply(linesList.get(Integer.valueOf(array[i])).getMultiply() + 1);
}
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",products.get(0));
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",linesList.get(Integer.valueOf(array[0])));
request.setAttribute(""String_Node_Str"",array[0]);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(UPDATE);
default :
if (manager.findTicket(place) == null) {
manager.initTicket(place);
}
 else {
linesList=manager.findTicketLines(place);
}
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
break;
}
request.setAttribute(""String_Node_Str"",manager.findFloorById(manager.findPlaceById(place).getFloor()).getName());
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",floorId);
request.setAttribute(""String_Node_Str"",linesList);
request.setAttribute(""String_Node_Str"",products);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(SUCCESS);
}","/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  FloorForm floorForm=(FloorForm)form;
  RestaurantManager manager=new RestaurantManager();
  String floorId=(String)floorForm.getFloorId();
  String place=(String)floorForm.getId();
  String str=(String)floorForm.getMode();
  String[] array=null;
  int mode=0;
  if (!str.equals(""String_Node_Str"")) {
    mode=Integer.valueOf(str);
  }
  List<TicketLineInfo> linesList=new ArrayList<TicketLineInfo>();
  List products=new ArrayList<ProductInfoExt>();
  TicketInfo ticket;
switch (mode) {
case 1:
    ticket=manager.findTicket(place);
  linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
for (int i=0; i < array.length; i++) {
  if (linesList.get(Integer.valueOf(array[i])).getMultiply() > 1) {
    linesList.get(Integer.valueOf(array[i])).setMultiply(linesList.get(Integer.valueOf(array[i])).getMultiply() - 1);
  }
}
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",products.get(0));
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",linesList.get(Integer.valueOf(array[0])));
request.setAttribute(""String_Node_Str"",array[0]);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(UPDATE);
case 4:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
array=floorForm.getParameters();
int var=Integer.parseInt(array[0]);
linesList.remove(var);
if (linesList.size() > var && manager.findProductById(linesList.get(var).getProductid()).isCom()) {
linesList.remove(var);
while (linesList.size() > var && manager.findProductById(linesList.get(var).getProductid()).isCom()) {
linesList.remove(var);
if (linesList.size() == var) {
break;
}
}
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",manager.findFloorById(manager.findPlaceById(place).getFloor()).getName());
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",floorId);
request.setAttribute(""String_Node_Str"",linesList);
request.setAttribute(""String_Node_Str"",products);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(SUCCESS);
case 2:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
String[] index=floorForm.getParameters();
linesList.get(Integer.valueOf(index[0])).setMultiply(Double.valueOf(index[1]));
manager.updateLineFromTicket(floorForm.getId(),ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
break;
case 3:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
for (int i=0; i < array.length; i++) {
linesList.get(Integer.valueOf(array[i])).setMultiply(linesList.get(Integer.valueOf(array[i])).getMultiply() + 1);
}
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",products.get(0));
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",linesList.get(Integer.valueOf(array[0])));
request.setAttribute(""String_Node_Str"",array[0]);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(UPDATE);
default :
if (manager.findTicket(place) == null) {
manager.initTicket(place);
}
 else {
linesList=manager.findTicketLines(place);
}
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
break;
}
request.setAttribute(""String_Node_Str"",manager.findFloorById(manager.findPlaceById(place).getFloor()).getName());
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",floorId);
request.setAttribute(""String_Node_Str"",linesList);
request.setAttribute(""String_Node_Str"",products);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(SUCCESS);
}"
20205,"/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  FloorForm floorForm=(FloorForm)form;
  RestaurantManager manager=new RestaurantManager();
  String floorId=(String)floorForm.getFloorId();
  String place=(String)floorForm.getId();
  String str=(String)floorForm.getMode();
  String[] array=null;
  int mode=0;
  if (!str.equals(""String_Node_Str"")) {
    mode=Integer.valueOf(str);
  }
  List<TicketLineInfo> linesList=new ArrayList<TicketLineInfo>();
  List products=new ArrayList<ProductInfoExt>();
  TicketInfo ticket;
switch (mode) {
case 1:
    ticket=manager.findTicket(place);
  linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
for (int i=0; i < array.length; i++) {
  if (linesList.get(Integer.valueOf(array[i]) - 0).getMultiply() > 0) {
    linesList.get(Integer.valueOf(array[i]) - 0).setMultiply(linesList.get(Integer.valueOf(array[i]) - 0).getMultiply() - 1);
  }
}
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",products.get(0));
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",linesList.get(Integer.valueOf(array[0])));
request.setAttribute(""String_Node_Str"",array[0]);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(UPDATE);
case 4:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
linesList.remove(Integer.parseInt(array[0]));
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",manager.findFloorById(manager.findPlaceById(place).getFloor()).getName());
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",floorId);
request.setAttribute(""String_Node_Str"",linesList);
request.setAttribute(""String_Node_Str"",products);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(SUCCESS);
case 2:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
String[] index=floorForm.getParameters();
linesList.get(Integer.valueOf(index[0])).setMultiply(Double.valueOf(index[1]));
manager.updateLineFromTicket(floorForm.getId(),ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
break;
case 3:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
for (int i=0; i < array.length; i++) {
linesList.get(Integer.valueOf(array[i]) - 0).setMultiply(linesList.get(Integer.valueOf(array[i]) - 0).getMultiply() + 1);
}
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",products.get(0));
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",linesList.get(Integer.valueOf(array[0])));
request.setAttribute(""String_Node_Str"",array[0]);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(UPDATE);
default :
if (manager.findTicket(place) == null) {
manager.initTicket(place);
}
 else {
linesList=manager.findTicketLines(place);
}
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
break;
}
request.setAttribute(""String_Node_Str"",manager.findFloorById(manager.findPlaceById(place).getFloor()).getName());
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",floorId);
request.setAttribute(""String_Node_Str"",linesList);
request.setAttribute(""String_Node_Str"",products);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(SUCCESS);
}","/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  FloorForm floorForm=(FloorForm)form;
  RestaurantManager manager=new RestaurantManager();
  String floorId=(String)floorForm.getFloorId();
  String place=(String)floorForm.getId();
  String str=(String)floorForm.getMode();
  String[] array=null;
  int mode=0;
  if (!str.equals(""String_Node_Str"")) {
    mode=Integer.valueOf(str);
  }
  List<TicketLineInfo> linesList=new ArrayList<TicketLineInfo>();
  List products=new ArrayList<ProductInfoExt>();
  TicketInfo ticket;
switch (mode) {
case 1:
    ticket=manager.findTicket(place);
  linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
for (int i=0; i < array.length; i++) {
  if (linesList.get(Integer.valueOf(array[i])).getMultiply() > 0) {
    linesList.get(Integer.valueOf(array[i])).setMultiply(linesList.get(Integer.valueOf(array[i])).getMultiply() - 1);
  }
}
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",products.get(0));
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",linesList.get(Integer.valueOf(array[0])));
request.setAttribute(""String_Node_Str"",array[0]);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(UPDATE);
case 4:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
linesList.remove(Integer.parseInt(array[0]));
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",manager.findFloorById(manager.findPlaceById(place).getFloor()).getName());
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",floorId);
request.setAttribute(""String_Node_Str"",linesList);
request.setAttribute(""String_Node_Str"",products);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(SUCCESS);
case 2:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
String[] index=floorForm.getParameters();
linesList.get(Integer.valueOf(index[0])).setMultiply(Double.valueOf(index[1]));
manager.updateLineFromTicket(floorForm.getId(),ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
break;
case 3:
ticket=manager.findTicket(place);
linesList=ticket.getM_aLines();
array=floorForm.getParameters();
if (array != null) {
for (int i=0; i < array.length; i++) {
linesList.get(Integer.valueOf(array[i])).setMultiply(linesList.get(Integer.valueOf(array[i])).getMultiply() + 1);
}
}
manager.updateLineFromTicket(place,ticket);
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
request.setAttribute(""String_Node_Str"",products.get(0));
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",linesList.get(Integer.valueOf(array[0])));
request.setAttribute(""String_Node_Str"",array[0]);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(UPDATE);
default :
if (manager.findTicket(place) == null) {
manager.initTicket(place);
}
 else {
linesList=manager.findTicketLines(place);
}
for (Object line : linesList) {
TicketLineInfo li=(TicketLineInfo)line;
products.add(manager.findProductById(li.getProductid()));
}
break;
}
request.setAttribute(""String_Node_Str"",manager.findFloorById(manager.findPlaceById(place).getFloor()).getName());
request.setAttribute(""String_Node_Str"",place);
request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
request.setAttribute(""String_Node_Str"",floorId);
request.setAttribute(""String_Node_Str"",linesList);
request.setAttribute(""String_Node_Str"",products);
request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
return mapping.findForward(SUCCESS);
}"
20206,"/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  DynaActionForm inputFormPlace=(DynaActionForm)form;
  RestaurantManager manager=new RestaurantManager();
  List<CategoryInfo> categories=new ArrayList<CategoryInfo>();
  categories=manager.findAllCategories();
  List products=new ArrayList<ProductInfoExt>();
  products=manager.findProductsByCategory(categories.get(0).getId());
  List subcategories=new ArrayList<CategoryInfo>();
  subcategories=manager.findAllSubcategories(categories.get(0).getId());
  request.setAttribute(""String_Node_Str"",products);
  request.getSession().setAttribute(""String_Node_Str"",(String)inputFormPlace.get(""String_Node_Str""));
  request.setAttribute(""String_Node_Str"",manager.findPlaceNameById((String)inputFormPlace.get(""String_Node_Str"")));
  request.setAttribute(""String_Node_Str"",categories);
  request.setAttribute(""String_Node_Str"",request.getAttribute(""String_Node_Str""));
  request.setAttribute(""String_Node_Str"",subcategories);
  return mapping.findForward(SUCCESS);
}","/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  DynaActionForm inputFormPlace=(DynaActionForm)form;
  RestaurantManager manager=new RestaurantManager();
  List<CategoryInfo> categories=new ArrayList<CategoryInfo>();
  categories=manager.findAllCategories();
  List products=new ArrayList<ProductInfoExt>();
  products=manager.findProductsByCategory(categories.get(0).getId());
  List subcategories=new ArrayList<CategoryInfo>();
  subcategories=manager.findAllSubcategories(categories.get(0).getId());
  request.setAttribute(""String_Node_Str"",products);
  request.getSession().setAttribute(""String_Node_Str"",(String)inputFormPlace.get(""String_Node_Str""));
  request.setAttribute(""String_Node_Str"",manager.findPlaceNameById((String)inputFormPlace.get(""String_Node_Str"")));
  request.setAttribute(""String_Node_Str"",categories);
  request.getSession().setAttribute(""String_Node_Str"",(String)inputFormPlace.get(""String_Node_Str""));
  return mapping.findForward(SUCCESS);
}"
20207,"private String getCardType(String sCardNumber){
  String c=""String_Node_Str"";
  if (sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"") || sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"") || sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
  return c;
}","private String getCardType(String sCardNumber){
  String c=""String_Node_Str"";
  if (sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"") || sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"") || sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
 else   if (sCardNumber.startsWith(""String_Node_Str"")) {
    c=""String_Node_Str"";
  }
  return c;
}"
20208,"@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommerceID,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommercePassword,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    if (payinfo.getTrack1(true) == null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
      sb.append(""String_Node_Str"");
      String tmp=payinfo.getExpirationDate();
      sb.append(URLEncoder.encode(tmp,""String_Node_Str""));
      String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (cc_name.length > 0) {
        sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      if (cc_name.length > 1) {
        sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTrack1(false));
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(m_bTestMode);
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    in.close();
    AuthorizeNetParser anp=new AuthorizeNetParser(returned);
    Map props=anp.splitXML();
    if (anp.getResult().equals(LocalRes.getIntString(""String_Node_Str""))) {
      if (APPROVED.equals(props.get(""String_Node_Str""))) {
        payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
      }
 else {
        StringBuilder errorLine=new StringBuilder();
        if (anp.getNumErrors() > 0) {
          for (int i=1; i <= anp.getNumErrors(); i++) {
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
          }
        }
        payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),errorLine.toString());
      }
    }
 else {
      payinfo.paymentError(anp.getResult(),""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}","@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommerceID,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommercePassword,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    if (payinfo.getTrack1(true) == null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
      sb.append(""String_Node_Str"");
      String tmp=payinfo.getExpirationDate();
      sb.append(URLEncoder.encode(tmp,""String_Node_Str""));
      String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (cc_name.length > 0) {
        sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      if (cc_name.length > 1) {
        sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTrack1(false));
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTrack2(false));
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(m_bTestMode);
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    in.close();
    AuthorizeNetParser anp=new AuthorizeNetParser(returned);
    Map props=anp.splitXML();
    if (anp.getResult().equals(LocalRes.getIntString(""String_Node_Str""))) {
      if (APPROVED.equals(props.get(""String_Node_Str""))) {
        payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
      }
 else {
        StringBuilder errorLine=new StringBuilder();
        if (anp.getNumErrors() > 0) {
          for (int i=1; i <= anp.getNumErrors(); i++) {
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
          }
        }
        payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),errorLine.toString());
      }
    }
 else {
      payinfo.paymentError(anp.getResult(),""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}"
20209,"@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(m_sCommerceID);
    sb.append(""String_Node_Str"");
    sb.append(m_sCommercePassword);
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    if (3 == 4) {
      String a=""String_Node_Str"";
      String b=""String_Node_Str"";
      String c=""String_Node_Str"";
      sb.append(""String_Node_Str"" + URLEncoder.encode(a,""String_Node_Str""));
      sb.append(""String_Node_Str"" + URLEncoder.encode(b,""String_Node_Str""));
      sb.append(""String_Node_Str"" + URLEncoder.encode(c,""String_Node_Str""));
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getExpirationDate());
      String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (cc_name.length > 0) {
        sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      if (cc_name.length > 1) {
        sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
      }
    }
    if (payinfo.getTotal() > 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setAllowUserInteraction(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    payinfo.setReturnMessage(returned);
    in.close();
    if (returned == null) {
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),""String_Node_Str"");
    }
 else {
      Map props=new HashMap();
      StringTokenizer tk=new StringTokenizer(returned,""String_Node_Str"");
      while (tk.hasMoreTokens()) {
        String sToken=tk.nextToken();
        int i=sToken.indexOf('=');
        if (i >= 0) {
          props.put(URLDecoder.decode(sToken.substring(0,i),""String_Node_Str""),URLDecoder.decode(sToken.substring(i + 1),""String_Node_Str""));
        }
 else {
          props.put(URLDecoder.decode(sToken,""String_Node_Str""),null);
        }
      }
      if (""String_Node_Str"".equals(props.get(""String_Node_Str""))) {
        payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
      }
 else {
        payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),(String)props.get(""String_Node_Str""));
      }
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}","@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(m_sCommerceID);
    sb.append(""String_Node_Str"");
    sb.append(m_sCommercePassword);
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    if (payinfo.getTrack1(true) == null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getExpirationDate());
      String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (cc_name.length > 0) {
        sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      if (cc_name.length > 1) {
        sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
      }
    }
 else {
      sb.append(""String_Node_Str"" + URLEncoder.encode(payinfo.getTrack1(true),""String_Node_Str""));
      sb.append(""String_Node_Str"" + URLEncoder.encode(payinfo.getTrack2(true),""String_Node_Str""));
    }
    if (payinfo.getTotal() > 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setAllowUserInteraction(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    payinfo.setReturnMessage(returned);
    in.close();
    if (returned == null) {
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),""String_Node_Str"");
    }
 else {
      Map props=new HashMap();
      StringTokenizer tk=new StringTokenizer(returned,""String_Node_Str"");
      while (tk.hasMoreTokens()) {
        String sToken=tk.nextToken();
        int i=sToken.indexOf('=');
        if (i >= 0) {
          props.put(URLDecoder.decode(sToken.substring(0,i),""String_Node_Str""),URLDecoder.decode(sToken.substring(i + 1),""String_Node_Str""));
        }
 else {
          props.put(URLDecoder.decode(sToken,""String_Node_Str""),null);
        }
      }
      if (""String_Node_Str"".equals(props.get(""String_Node_Str""))) {
        payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
      }
 else {
        payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),(String)props.get(""String_Node_Str""));
      }
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}"
20210,"@Override public void execute(PaymentInfoMagcard payinfo){
  String sReturned=""String_Node_Str"";
  URL url;
  System.setProperty(""String_Node_Str"",sClientCertPath);
  System.setProperty(""String_Node_Str"",sPasswordCert);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String sTransactionType=(payinfo.getTotal() > 0.0) ? SALE : REFUND;
  try {
    url=new URL(""String_Node_Str"" + HOST + ""String_Node_Str""+ PORT);
    HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();
    connection.setHostnameVerifier(new NullHostNameVerifier());
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setAllowUserInteraction(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    String tmp=payinfo.getExpirationDate();
    String refundLine=(sTransactionType.equals(""String_Node_Str"")) ? ""String_Node_Str"" + payinfo.getTransactionID() + ""String_Node_Str"" : ""String_Node_Str"";
    String xml=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + sConfigfile + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ sTransactionType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ URLEncoder.encode(amount.replace(',','.'),""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ payinfo.getCardNumber()+ ""String_Node_Str""+ ""String_Node_Str""+ tmp.charAt(0)+ ""String_Node_Str""+ tmp.charAt(1)+ ""String_Node_Str""+ ""String_Node_Str""+ tmp.charAt(2)+ ""String_Node_Str""+ tmp.charAt(3)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ refundLine+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(xml.getBytes());
    out.flush();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    sReturned=in.readLine();
  }
 catch (  IOException exIoe) {
    payinfo.paymentError(LocalRes.getIntString(""String_Node_Str""),exIoe.getMessage());
  }
  LinkPointParser lpp=new LinkPointParser(sReturned);
  Map props=lpp.splitXML();
  if (lpp.getResult().equals(LocalRes.getIntString(""String_Node_Str""))) {
    if (APPROVED.equals(props.get(""String_Node_Str""))) {
      payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),sReturned);
    }
 else {
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),(String)props.get(""String_Node_Str""));
    }
  }
 else {
    payinfo.paymentError(lpp.getResult(),""String_Node_Str"");
  }
}","@Override public void execute(PaymentInfoMagcard payinfo){
  String sReturned=""String_Node_Str"";
  URL url;
  System.setProperty(""String_Node_Str"",sClientCertPath);
  System.setProperty(""String_Node_Str"",sPasswordCert);
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    url=new URL(""String_Node_Str"" + HOST + ""String_Node_Str""+ PORT);
    HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();
    connection.setHostnameVerifier(new NullHostNameVerifier());
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setAllowUserInteraction(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    StringBuilder xml=createOrder(payinfo);
    String a=xml.toString();
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(xml.toString().getBytes());
    out.flush();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    sReturned=in.readLine();
  }
 catch (  IOException exIoe) {
    payinfo.paymentError(LocalRes.getIntString(""String_Node_Str""),exIoe.getMessage());
  }
  LinkPointParser lpp=new LinkPointParser(sReturned);
  Map props=lpp.splitXML();
  if (lpp.getResult().equals(LocalRes.getIntString(""String_Node_Str""))) {
    if (APPROVED.equals(props.get(""String_Node_Str""))) {
      payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),sReturned);
    }
 else {
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),(String)props.get(""String_Node_Str""));
    }
  }
 else {
    payinfo.paymentError(lpp.getResult(),""String_Node_Str"");
  }
}"
20211,"public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(m_sCommerceID);
    sb.append(""String_Node_Str"");
    sb.append(m_sCommercePassword);
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(getCardType(payinfo.getCardNumber()));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    String tmp=payinfo.getExpirationDate();
    sb.append(tmp.substring(0,2));
    sb.append(""String_Node_Str"");
    sb.append(tmp.substring(2,tmp.length()));
    String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    if (cc_name.length > 0) {
      sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    if (cc_name.length > 1) {
      sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    sb.append(payinfo.getHolderName());
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(SALE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(REFUND);
    }
    sb.append(""String_Node_Str"");
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=""String_Node_Str"", aux;
    while ((aux=in.readLine()) != null) {
      returned+=""String_Node_Str"" + aux;
    }
    payinfo.setReturnMessage(returned);
    in.close();
    Map props=new HashMap();
    StringTokenizer tk=new java.util.StringTokenizer(returned,""String_Node_Str"");
    while (tk.hasMoreTokens()) {
      String sToken=tk.nextToken();
      int i=sToken.indexOf('=');
      if (i >= 0) {
        props.put(URLDecoder.decode(sToken.substring(0,i),""String_Node_Str""),URLDecoder.decode(sToken.substring(i + 1),""String_Node_Str""));
      }
 else {
        props.put(URLDecoder.decode(sToken,""String_Node_Str""),null);
      }
    }
    if (APPROVED.equals(props.get(""String_Node_Str""))) {
      payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
    }
 else {
      String sCode=(String)props.get(""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),sCode);
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}","public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(m_sCommerceID);
    sb.append(""String_Node_Str"");
    sb.append(m_sCommercePassword);
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(getCardType(payinfo.getCardNumber()));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    String tmp=payinfo.getExpirationDate();
    sb.append(tmp.substring(0,2));
    sb.append(""String_Node_Str"");
    sb.append(tmp.substring(2,tmp.length()));
    String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    if (cc_name.length > 0) {
      sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    if (cc_name.length > 1) {
      sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    sb.append(payinfo.getHolderName());
    if (payinfo.getTrack1(true) != null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getTrack1(true),""String_Node_Str""));
    }
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(SALE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(REFUND);
    }
    sb.append(""String_Node_Str"");
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=""String_Node_Str"", aux;
    while ((aux=in.readLine()) != null) {
      returned+=""String_Node_Str"" + aux;
    }
    payinfo.setReturnMessage(returned);
    in.close();
    Map props=new HashMap();
    StringTokenizer tk=new java.util.StringTokenizer(returned,""String_Node_Str"");
    while (tk.hasMoreTokens()) {
      String sToken=tk.nextToken();
      int i=sToken.indexOf('=');
      if (i >= 0) {
        props.put(URLDecoder.decode(sToken.substring(0,i),""String_Node_Str""),URLDecoder.decode(sToken.substring(i + 1),""String_Node_Str""));
      }
 else {
        props.put(URLDecoder.decode(sToken,""String_Node_Str""),null);
      }
    }
    if (APPROVED.equals(props.get(""String_Node_Str""))) {
      payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
    }
 else {
      String sCode=(String)props.get(""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      sCode=sCode.replace(""String_Node_Str"",""String_Node_Str"");
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),sCode);
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}"
20212,"/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  DynaActionForm inputFormPlace=(DynaActionForm)form;
  RestaurantManager manager=new RestaurantManager();
  List<CategoryInfo> categories=new ArrayList<CategoryInfo>();
  categories=manager.findAllCategories();
  List products=new ArrayList<ProductInfoExt>();
  products=manager.findProductsByCategory(categories.get(0).getId());
  List subcategories=new ArrayList<CategoryInfo>();
  subcategories=manager.findAllSubcategories(categories.get(0).getId());
  request.setAttribute(""String_Node_Str"",products);
  request.getSession().setAttribute(""String_Node_Str"",(String)inputFormPlace.get(""String_Node_Str""));
  request.setAttribute(""String_Node_Str"",manager.findPlaceNameById((String)inputFormPlace.get(""String_Node_Str"")));
  request.setAttribute(""String_Node_Str"",categories);
  request.getSession().setAttribute(""String_Node_Str"",(String)inputFormPlace.get(""String_Node_Str""));
  return mapping.findForward(SUCCESS);
}","/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  DynaActionForm inputFormPlace=(DynaActionForm)form;
  RestaurantManager manager=new RestaurantManager();
  List<CategoryInfo> categories=new ArrayList<CategoryInfo>();
  categories=manager.findAllCategories();
  List products=new ArrayList<ProductInfoExt>();
  products=manager.findProductsByCategory(categories.get(0).getId());
  List subcategories=new ArrayList<CategoryInfo>();
  subcategories=manager.findAllSubcategories(categories.get(0).getId());
  request.setAttribute(""String_Node_Str"",products);
  request.getSession().setAttribute(""String_Node_Str"",(String)inputFormPlace.get(""String_Node_Str""));
  request.setAttribute(""String_Node_Str"",manager.findPlaceNameById((String)inputFormPlace.get(""String_Node_Str"")));
  request.setAttribute(""String_Node_Str"",categories);
  request.setAttribute(""String_Node_Str"",subcategories);
  request.getSession().setAttribute(""String_Node_Str"",(String)inputFormPlace.get(""String_Node_Str""));
  return mapping.findForward(SUCCESS);
}"
20213,"public void addLineToTicket(String ticketId,String productId){
  ticket=new TicketDAO();
  product=new ProductDAO();
  category=new CategoryDAO();
  tax=new TaxDAO();
  taxesLogic=new TaxesLogic(tax.getTaxList());
  TicketInfo obj=ticket.getTicket(ticketId);
  ProductInfo productObj=null;
  productObj=product.findProductById(productId);
  TicketLineInfo line=new TicketLineInfo(productObj,productObj.getPriceSell(),taxesLogic.getTaxInfo(productObj.getCategoryId()));
  obj.addLine(line);
  ticket.updateTicket(ticketId,obj);
  refreshTax(obj);
}","public void addLineToTicket(String ticketId,String productId){
  ticket=new TicketDAO();
  product=new ProductDAO();
  category=new CategoryDAO();
  tax=new TaxDAO();
  taxesLogic=new TaxesLogic(tax.getTaxList());
  TicketInfo obj=ticket.getTicket(ticketId);
  ProductInfo productObj=product.findProductById(productId);
  TicketLineInfo line=new TicketLineInfo(productObj,productObj.getPriceSell(),taxesLogic.getTaxInfo(productObj.getCategoryId()));
  obj.addLine(line);
  ticket.updateTicket(ticketId,obj);
  refreshTax(obj);
}"
20214,"public UserInfo findUser(String login,String password){
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  UserInfo user=null;
  String sqlStr=""String_Node_Str"";
  try {
    con=getConnection();
    ps=con.prepareStatement(sqlStr);
    ps.setString(1,login);
    if (password.equals(""String_Node_Str"")) {
      ps.setString(2,null);
    }
 else {
      ps.setString(2,StringUtils.hashString(password));
    }
    rs=ps.executeQuery();
    user=map2VO(rs);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (con != null) {
        con.close();
      }
    }
 catch (    SQLException sqlee) {
      sqlee.printStackTrace();
    }
  }
  return user;
}","public UserInfo findUser(String login,String password){
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  UserInfo user=null;
  String sqlStr=""String_Node_Str"";
  String end=""String_Node_Str"";
  if (password.equals(""String_Node_Str"")) {
    end=""String_Node_Str"";
  }
 else {
    end=""String_Node_Str"";
  }
  try {
    con=getConnection();
    ps=con.prepareStatement(sqlStr + end);
    ps.setString(1,login);
    if (!password.equals(""String_Node_Str"")) {
      ps.setString(2,StringUtils.hashString(password));
    }
    rs=ps.executeQuery();
    user=map2VO(rs);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    try {
      if (ps != null) {
        ps.close();
      }
      if (con != null) {
        con.close();
      }
    }
 catch (    SQLException sqlee) {
      sqlee.printStackTrace();
    }
  }
  return user;
}"
20215,"@Override protected UserInfo map2VO(ResultSet rs) throws SQLException {
  UserInfo user=new UserInfo();
  rs.next();
  user.setLogin(rs.getString(""String_Node_Str""));
  user.setPassword(rs.getString(""String_Node_Str""));
  return user;
}","@Override protected UserInfo map2VO(ResultSet rs) throws SQLException {
  UserInfo user=new UserInfo();
  rs.next();
  user.setLogin(rs.getString(""String_Node_Str""));
  if (rs.getString(""String_Node_Str"") == null) {
    user.setPassword(""String_Node_Str"");
  }
 else {
    user.setPassword(rs.getString(""String_Node_Str""));
  }
  return user;
}"
20216,"public static int getLineMult(int iSize){
switch (iSize) {
case 0:
case 2:
    return 1;
case 1:
case 3:
  return 2;
default :
return 0;
}
}","public static int getLineMult(int iSize){
switch (iSize) {
case 0:
case 2:
    return 1;
case 1:
case 3:
  return 2;
default :
return 1;
}
}"
20217,"public Font getFont(Font baseFont,int iStyle){
  Font f;
switch (m_iSize) {
case 0:
    f=baseFont;
  break;
case 2:
f=baseFont.deriveFont(AffineTransform.getScaleInstance(2.0,1.0));
break;
case 1:
f=baseFont.deriveFont(AffineTransform.getScaleInstance(1.0,2.0));
break;
case 3:
f=baseFont.deriveFont(AffineTransform.getScaleInstance(2.0,2.0));
break;
default :
f=baseFont;
break;
}
f=f.deriveFont((iStyle & DevicePrinter.STYLE_BOLD) != 0 ? Font.BOLD : Font.PLAIN);
return f;
}","public Font getFont(Font baseFont,int iStyle){
  Font f;
  AffineTransform a;
switch (m_iSize) {
case 0:
    f=baseFont;
  break;
case 2:
a=AffineTransform.getScaleInstance(2.0,1.0);
a.preConcatenate(baseFont.getTransform());
f=baseFont.deriveFont(a);
break;
case 1:
a=AffineTransform.getScaleInstance(1.0,2.0);
a.preConcatenate(baseFont.getTransform());
f=baseFont.deriveFont(a);
break;
case 3:
a=AffineTransform.getScaleInstance(2.0,2.0);
a.preConcatenate(baseFont.getTransform());
f=baseFont.deriveFont(a);
break;
default :
f=baseFont;
break;
}
f=f.deriveFont((iStyle & DevicePrinter.STYLE_BOLD) != 0 ? Font.BOLD : baseFont.getStyle());
return f;
}"
20218,"public BigDecimal getTotalOfaTicket(String place){
  double total=0;
  for (  TicketLineInfo line : findTicket(place).getM_aLines()) {
    total+=line.getPrice() + line.getPrice() * line.getTax().getRate();
  }
  return BigDecimal.valueOf(total);
}","public BigDecimal getTotalOfaTicket(String place){
  double total=0;
  for (  TicketLineInfo line : findTicket(place).getM_aLines()) {
    try {
      total+=line.getMultiply() * (line.getPrice() + line.getPrice() * line.getTax().getRate());
    }
 catch (    NullPointerException e) {
      total+=line.getMultiply() * line.getPrice();
    }
  }
  return BigDecimal.valueOf(total);
}"
20219,"public String findPlaceById(String placeId){
  place=new PlaceDAO();
  return place.findPlaceById(placeId).getName();
}","public Place findPlaceById(String placeId){
  place=new PlaceDAO();
  return place.findPlaceById(placeId);
}"
20220,"public void addLineToTicket(String ticketId,String aCategory,String productIndex){
  lines=new TicketLineDAO();
  ticket=new TicketDAO();
  product=new ProductDAO();
  category=new CategoryDAO();
  tax=new TaxDAO();
  taxesLogic=new TaxesLogic(tax.getTaxList());
  TicketInfo obj=ticket.getTicket(ticketId);
  ProductInfo productObj=null;
  if (aCategory.equals(""String_Node_Str"")) {
    aCategory=category.findFirstCategory();
  }
  productObj=product.findProductsByCategory(aCategory).get(Integer.valueOf(productIndex));
  TicketLineInfo line=new TicketLineInfo(productObj,productObj.getPriceSell(),taxesLogic.getTaxInfo(productObj.getCategoryID()));
  obj.addLine(line);
  ticket.updateTicket(ticketId,obj);
  refreshTax(obj);
}","public void addLineToTicket(String ticketId,String productId){
  ticket=new TicketDAO();
  product=new ProductDAO();
  category=new CategoryDAO();
  tax=new TaxDAO();
  taxesLogic=new TaxesLogic(tax.getTaxList());
  TicketInfo obj=ticket.getTicket(ticketId);
  ProductInfo productObj=null;
  productObj=product.findProductById(productId);
  TicketLineInfo line=new TicketLineInfo(productObj,productObj.getPriceSell(),taxesLogic.getTaxInfo(productObj.getCategoryId()));
  obj.addLine(line);
  ticket.updateTicket(ticketId,obj);
  refreshTax(obj);
}"
20221,"public String findFloorById(String floorId){
  floor=new FloorDAO();
  return floor.findFloorById(floorId).getName();
}","public Floor findFloorById(String floorId){
  floor=new FloorDAO();
  return floor.findFloorById(floorId);
}"
20222,"@Override protected ProductInfo map2VO(ResultSet rs) throws SQLException {
  ProductInfo product=new ProductInfo();
  product.setId(rs.getString(""String_Node_Str""));
  product.setRef(rs.getString(""String_Node_Str""));
  product.setCode(rs.getString(""String_Node_Str""));
  product.setName(rs.getString(""String_Node_Str""));
  product.setPriceBuy(rs.getDouble(""String_Node_Str""));
  product.setPriceSell(rs.getDouble(""String_Node_Str""));
  product.setCategoryID(rs.getString(""String_Node_Str""));
  product.setTaxcat(rs.getString(""String_Node_Str""));
  product.setCom(rs.getBoolean(""String_Node_Str""));
  product.setScale(rs.getBoolean(""String_Node_Str""));
  return product;
}","@Override protected ProductInfo map2VO(ResultSet rs) throws SQLException {
  ProductInfo product=new ProductInfo();
  product.setId(rs.getString(""String_Node_Str""));
  product.setRef(rs.getString(""String_Node_Str""));
  product.setCode(rs.getString(""String_Node_Str""));
  product.setName(rs.getString(""String_Node_Str""));
  product.setPriceBuy(rs.getDouble(""String_Node_Str""));
  product.setPriceSell(rs.getDouble(""String_Node_Str""));
  product.setCategoryId(rs.getString(""String_Node_Str""));
  product.setTaxcat(rs.getString(""String_Node_Str""));
  product.setCom(rs.getBoolean(""String_Node_Str""));
  product.setScale(rs.getBoolean(""String_Node_Str""));
  return product;
}"
20223,"public TicketInfo getTicket(String id){
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  String sqlStr=""String_Node_Str"";
  TicketInfo ticket=new TicketInfo();
  try {
    con=getConnection();
    ps=con.prepareStatement(sqlStr);
    ps.setString(1,id);
    rs=ps.executeQuery();
    rs.next();
    ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(rs.getBinaryStream(1)));
    ticket=(TicketInfo)in.readObject();
  }
 catch (  Exception ex) {
    Logger.getLogger(TicketDAO.class.getName()).log(Level.SEVERE,null,ex);
    return null;
  }
  return ticket;
}","public TicketInfo getTicket(String id){
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  String sqlStr=""String_Node_Str"";
  TicketInfo ticket=new TicketInfo();
  try {
    con=getConnection();
    ps=con.prepareStatement(sqlStr);
    ps.setString(1,id);
    rs=ps.executeQuery();
    rs.next();
    ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(rs.getBinaryStream(1)));
    ticket=(TicketInfo)in.readObject();
  }
 catch (  Exception ex) {
    return null;
  }
  return ticket;
}"
20224,"/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  FloorForm aForm=(FloorForm)form;
  RestaurantManager manager=new RestaurantManager();
  TicketInfo ticket=manager.findTicket(aForm.getId());
  List<TicketLineInfo> list=ticket.getM_aLines();
  String[] array=aForm.getParameters();
  list.get(Integer.valueOf(aForm.getLine())).setMultiply(Double.valueOf(array[0]));
  manager.updateLineFromTicket(aForm.getId(),ticket);
  request.setAttribute(""String_Node_Str"",aForm.getLine());
  request.setAttribute(""String_Node_Str"",ticket.getName());
  return mapping.findForward(SUCCESS);
}","/** 
 * This is the action called from the Struts framework.
 * @param mapping The ActionMapping used to select this instance.
 * @param form The optional ActionForm bean for this request.
 * @param request The HTTP Request we are processing.
 * @param response The HTTP Response we are processing.
 * @throws java.lang.Exception
 * @return
 */
public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {
  FloorForm floorForm=(FloorForm)form;
  RestaurantManager manager=new RestaurantManager();
  String floorId=(String)floorForm.getFloorId();
  String place=(String)floorForm.getId();
  String str=(String)floorForm.getMode();
  String[] array=floorForm.getParameters();
  List<TicketLineInfo> linesList=new ArrayList<TicketLineInfo>();
  List products=new ArrayList<ProductInfoExt>();
  TicketInfo ticket=manager.findTicket(place);
  linesList=ticket.getM_aLines();
  if (array != null) {
    for (int i=0; i < array.length; i++) {
      linesList.get(Integer.valueOf(array[i]) - 0).setMultiply(linesList.get(Integer.valueOf(array[i]) - 0).getMultiply() + 1);
    }
  }
  manager.updateLineFromTicket(floorForm.getId(),ticket);
  for (  Object line : linesList) {
    TicketLineInfo li=(TicketLineInfo)line;
    products.add(manager.findProductById(li.getProductid()));
  }
  request.setAttribute(""String_Node_Str"",manager.findFloorById(manager.findPlaceById(place).getFloor()).getName());
  request.setAttribute(""String_Node_Str"",place);
  request.setAttribute(""String_Node_Str"",manager.findPlaceNameById(place));
  request.setAttribute(""String_Node_Str"",floorId);
  request.setAttribute(""String_Node_Str"",linesList);
  request.setAttribute(""String_Node_Str"",products);
  request.setAttribute(""String_Node_Str"",manager.getTotalOfaTicket(place));
  return mapping.findForward(SUCCESS);
}"
20225,"protected void internalWrite(byte[] data){
  try {
    if (m_out == null) {
      m_PortIdPrinter=CommPortIdentifier.getPortIdentifier(m_sPortPrinter);
      m_CommPortPrinter=m_PortIdPrinter.open(""String_Node_Str"",2000);
      m_out=m_CommPortPrinter.getOutputStream();
      if (m_PortIdPrinter.getPortType() == CommPortIdentifier.PORT_SERIAL) {
        ((SerialPort)m_CommPortPrinter).setSerialPortParams(9600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
      }
    }
    m_out.write(data);
  }
 catch (  NoSuchPortException e) {
    System.err.println(e);
  }
catch (  PortInUseException e) {
    System.err.println(e);
  }
catch (  UnsupportedCommOperationException e) {
    System.err.println(e);
  }
catch (  IOException e) {
    System.err.println(e);
  }
}","protected void internalWrite(byte[] data){
  try {
    if (m_out == null) {
      m_PortIdPrinter=CommPortIdentifier.getPortIdentifier(m_sPortPrinter);
      m_CommPortPrinter=m_PortIdPrinter.open(""String_Node_Str"",2000);
      m_out=m_CommPortPrinter.getOutputStream();
      if (m_PortIdPrinter.getPortType() == CommPortIdentifier.PORT_SERIAL) {
        ((SerialPort)m_CommPortPrinter).setSerialPortParams(9600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
        ((SerialPort)m_CommPortPrinter).setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN);
      }
    }
    m_out.write(data);
  }
 catch (  NoSuchPortException e) {
    System.err.println(e);
  }
catch (  PortInUseException e) {
    System.err.println(e);
  }
catch (  UnsupportedCommOperationException e) {
    System.err.println(e);
  }
catch (  IOException e) {
    System.err.println(e);
  }
}"
20226,"public TicketLineInfo copyTicketLine(){
  TicketLineInfo l=new TicketLineInfo();
  l.productid=productid;
  l.multiply=multiply;
  l.price=price;
  l.tax=tax;
  l.attributes=(Properties)attributes.clone();
  return l;
}","public TicketLineInfo copyTicketLine(){
  TicketLineInfo l=new TicketLineInfo();
  l.productid=productid;
  l.attsetinstid=attsetinstid;
  l.multiply=multiply;
  l.price=price;
  l.tax=tax;
  l.attributes=(Properties)attributes.clone();
  return l;
}"
20227,"private void init(String productid,double dMultiply,double dPrice,TaxInfo tax,Properties attributes){
  this.productid=productid;
  attsetinstid=null;
  multiply=dMultiply;
  price=dPrice;
  this.tax=tax;
  this.attributes=attributes;
  m_sTicket=null;
  m_iLine=-1;
}","private void init(String productid,String attsetinstid,double dMultiply,double dPrice,TaxInfo tax,Properties attributes){
  this.productid=productid;
  this.attsetinstid=attsetinstid;
  multiply=dMultiply;
  price=dPrice;
  this.tax=tax;
  this.attributes=attributes;
  m_sTicket=null;
  m_iLine=-1;
}"
20228,"public TicketLineInfo(TicketLineInfo line){
  init(line.productid,line.multiply,line.price,line.tax,(Properties)line.attributes.clone());
}","public TicketLineInfo(TicketLineInfo line){
  init(line.productid,line.attsetinstid,line.multiply,line.price,line.tax,(Properties)line.attributes.clone());
}"
20229,"public byte[] transImage(BufferedImage image){
  CenteredImage centeredimage=new CenteredImage(image,IMAGE_WIDTH);
  int iWidth=(centeredimage.getWidth() + 7) / 8;
  int iHeight=centeredimage.getHeight();
  byte[] bData=new byte[getImageHeader().length + 4 + iWidth * iHeight];
  System.arraycopy(getImageHeader(),0,bData,0,getImageHeader().length);
  int index=getImageHeader().length;
  bData[index++]=(byte)(iWidth % 256);
  bData[index++]=(byte)(iWidth / 256);
  bData[index++]=(byte)(iHeight % 256);
  bData[index++]=(byte)(iHeight / 256);
  int iRGB;
  int p;
  for (int i=0; i < centeredimage.getHeight(); i++) {
    for (int j=0; j < centeredimage.getWidth(); j=j + 8) {
      p=0x00;
      for (int d=0; d < 8; d++) {
        p=p << 1;
        if (centeredimage.isBlack(j + d,i)) {
          p=p | 0x01;
        }
      }
      bData[index++]=(byte)p;
    }
  }
  return bData;
}","public byte[] transImage(BufferedImage image){
  CenteredImage centeredimage=new CenteredImage(image,getImageWidth());
  int iWidth=(centeredimage.getWidth() + 7) / 8;
  int iHeight=centeredimage.getHeight();
  byte[] bData=new byte[getImageHeader().length + 4 + iWidth * iHeight];
  System.arraycopy(getImageHeader(),0,bData,0,getImageHeader().length);
  int index=getImageHeader().length;
  bData[index++]=(byte)(iWidth % 256);
  bData[index++]=(byte)(iWidth / 256);
  bData[index++]=(byte)(iHeight % 256);
  bData[index++]=(byte)(iHeight / 256);
  int iRGB;
  int p;
  for (int i=0; i < centeredimage.getHeight(); i++) {
    for (int j=0; j < centeredimage.getWidth(); j=j + 8) {
      p=0x00;
      for (int d=0; d < 8; d++) {
        p=p << 1;
        if (centeredimage.isBlack(j + d,i)) {
          p=p | 0x01;
        }
      }
      bData[index++]=(byte)p;
    }
  }
  return bData;
}"
20230,"@Override public byte[] transImage(BufferedImage image){
  CenteredImage centeredimage=new CenteredImage(image,IMAGE_WIDTH);
  int iWidth=centeredimage.getWidth();
  int iHeight=(centeredimage.getHeight() + 7) / 8;
  byte[] bData=new byte[IMAGE_BEGIN.length + (getImageHeader().length + 2 + iWidth+ getNewLine().length) * iHeight + IMAGE_END.length];
  int index=0;
  System.arraycopy(IMAGE_BEGIN,0,bData,index,IMAGE_BEGIN.length);
  index+=IMAGE_BEGIN.length;
  int p;
  for (int i=0; i < centeredimage.getHeight(); i+=8) {
    System.arraycopy(getImageHeader(),0,bData,index,getImageHeader().length);
    index+=getImageHeader().length;
    bData[index++]=(byte)(iWidth % 256);
    bData[index++]=(byte)(iWidth / 256);
    for (int j=0; j < centeredimage.getWidth(); j++) {
      p=0x00;
      for (int d=0; d < 8; d++) {
        p=p << 1;
        if (centeredimage.isBlack(j,i + d)) {
          p=p | 0x01;
        }
      }
      bData[index++]=(byte)p;
    }
    System.arraycopy(getNewLine(),0,bData,index,getNewLine().length);
    index+=getNewLine().length;
  }
  System.arraycopy(IMAGE_END,0,bData,index,IMAGE_END.length);
  index+=IMAGE_END.length;
  return bData;
}","@Override public byte[] transImage(BufferedImage image){
  CenteredImage centeredimage=new CenteredImage(image,getImageWidth());
  int iWidth=centeredimage.getWidth();
  int iHeight=(centeredimage.getHeight() + 7) / 8;
  byte[] bData=new byte[IMAGE_BEGIN.length + (getImageHeader().length + 2 + iWidth+ getNewLine().length) * iHeight + IMAGE_END.length];
  int index=0;
  System.arraycopy(IMAGE_BEGIN,0,bData,index,IMAGE_BEGIN.length);
  index+=IMAGE_BEGIN.length;
  int p;
  for (int i=0; i < centeredimage.getHeight(); i+=8) {
    System.arraycopy(getImageHeader(),0,bData,index,getImageHeader().length);
    index+=getImageHeader().length;
    bData[index++]=(byte)(iWidth % 256);
    bData[index++]=(byte)(iWidth / 256);
    for (int j=0; j < centeredimage.getWidth(); j++) {
      p=0x00;
      for (int d=0; d < 8; d++) {
        p=p << 1;
        if (centeredimage.isBlack(j,i + d)) {
          p=p | 0x01;
        }
      }
      bData[index++]=(byte)p;
    }
    System.arraycopy(getNewLine(),0,bData,index,getNewLine().length);
    index+=getNewLine().length;
  }
  System.arraycopy(IMAGE_END,0,bData,index,IMAGE_END.length);
  index+=IMAGE_END.length;
  return bData;
}"
20231,"protected void internalWrite(byte[] data){
  try {
    if (m_out == null) {
      m_PortIdPrinter=CommPortIdentifier.getPortIdentifier(m_sPortPrinter);
      m_CommPortPrinter=m_PortIdPrinter.open(""String_Node_Str"",2000);
      m_out=m_CommPortPrinter.getOutputStream();
      if (m_PortIdPrinter.getPortType() == CommPortIdentifier.PORT_SERIAL) {
        ((SerialPort)m_CommPortPrinter).setSerialPortParams(9600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
      }
 else       if (m_PortIdPrinter.getPortType() == CommPortIdentifier.PORT_PARALLEL) {
        ((ParallelPort)m_CommPortPrinter).setMode(1);
      }
    }
    m_out.write(data);
  }
 catch (  NoSuchPortException e) {
    System.err.println(e);
  }
catch (  PortInUseException e) {
    System.err.println(e);
  }
catch (  UnsupportedCommOperationException e) {
    System.err.println(e);
  }
catch (  IOException e) {
    System.err.println(e);
  }
}","protected void internalWrite(byte[] data){
  try {
    if (m_out == null) {
      m_PortIdPrinter=CommPortIdentifier.getPortIdentifier(m_sPortPrinter);
      m_CommPortPrinter=m_PortIdPrinter.open(""String_Node_Str"",2000);
      m_out=m_CommPortPrinter.getOutputStream();
      if (m_PortIdPrinter.getPortType() == CommPortIdentifier.PORT_SERIAL) {
        ((SerialPort)m_CommPortPrinter).setSerialPortParams(9600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
      }
    }
    m_out.write(data);
  }
 catch (  NoSuchPortException e) {
    System.err.println(e);
  }
catch (  PortInUseException e) {
    System.err.println(e);
  }
catch (  UnsupportedCommOperationException e) {
    System.err.println(e);
  }
catch (  IOException e) {
    System.err.println(e);
  }
}"
20232,"public DeviceTicket(AppProperties props){
  PrinterWritterPool pws=new PrinterWritterPool();
  StringParser sf=new StringParser(props.getProperty(""String_Node_Str""));
  String sFiscalType=sf.nextToken(':');
  String sFiscalParam1=sf.nextToken(',');
  try {
    if (""String_Node_Str"".equals(sFiscalType)) {
      m_deviceFiscal=new DeviceFiscalPrinterJavaPOS(sFiscalParam1);
    }
 else {
      m_deviceFiscal=new DeviceFiscalPrinterNull();
    }
  }
 catch (  TicketPrinterException e) {
    m_deviceFiscal=new DeviceFiscalPrinterNull(e.getMessage());
  }
  StringParser sd=new StringParser(props.getProperty(""String_Node_Str""));
  String sDisplayType=sd.nextToken(':');
  String sDisplayParam1=sd.nextToken(',');
  String sDisplayParam2=sd.nextToken(',');
  if (""String_Node_Str"".equals(sDisplayType) || ""String_Node_Str"".equals(sDisplayType) || ""String_Node_Str"".equals(sDisplayType)) {
    sDisplayParam2=sDisplayParam1;
    sDisplayParam1=sDisplayType;
    sDisplayType=""String_Node_Str"";
  }
  try {
    if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayPanel();
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayWindow();
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayESCPOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2),new UnicodeTranslatorInt());
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplaySurePOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2));
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayESCPOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2),new UnicodeTranslatorEur());
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayJavaPOS(sDisplayParam1);
    }
 else {
      m_devicedisplay=new DeviceDisplayNull();
    }
  }
 catch (  TicketPrinterException e) {
    m_devicedisplay=new DeviceDisplayNull(e.getMessage());
  }
  m_nullprinter=new DevicePrinterNull();
  m_deviceprinters=new HashMap<String,DevicePrinter>();
  m_deviceprinterslist=new ArrayList<DevicePrinter>();
  int iPrinterIndex=1;
  String sPrinterIndex=Integer.toString(iPrinterIndex);
  String sprinter=props.getProperty(""String_Node_Str"");
  while (sprinter != null && !""String_Node_Str"".equals(sprinter)) {
    StringParser sp=new StringParser(sprinter);
    String sPrinterType=sp.nextToken(':');
    String sPrinterParam1=sp.nextToken(',');
    String sPrinterParam2=sp.nextToken(',');
    if (""String_Node_Str"".equals(sPrinterType) || ""String_Node_Str"".equals(sPrinterType) || ""String_Node_Str"".equals(sPrinterType)) {
      sPrinterParam2=sPrinterParam1;
      sPrinterParam1=sPrinterType;
      sPrinterType=""String_Node_Str"";
    }
    try {
      if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPanel());
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPrinter(sPrinterParam1,Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesEpson(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesTMU220(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesStar(),new UnicodeTranslatorStar()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesIthaca(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesSurePOS(),new UnicodeTranslatorSurePOS()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPlain(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2)));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterJavaPOS(sPrinterParam1,sPrinterParam2));
      }
    }
 catch (    TicketPrinterException e) {
    }
    iPrinterIndex++;
    sPrinterIndex=Integer.toString(iPrinterIndex);
    sprinter=props.getProperty(""String_Node_Str"" + sPrinterIndex);
  }
}","public DeviceTicket(AppProperties props){
  PrinterWritterPool pws=new PrinterWritterPool();
  StringParser sf=new StringParser(props.getProperty(""String_Node_Str""));
  String sFiscalType=sf.nextToken(':');
  String sFiscalParam1=sf.nextToken(',');
  try {
    if (""String_Node_Str"".equals(sFiscalType)) {
      m_deviceFiscal=new DeviceFiscalPrinterJavaPOS(sFiscalParam1);
    }
 else {
      m_deviceFiscal=new DeviceFiscalPrinterNull();
    }
  }
 catch (  TicketPrinterException e) {
    m_deviceFiscal=new DeviceFiscalPrinterNull(e.getMessage());
  }
  StringParser sd=new StringParser(props.getProperty(""String_Node_Str""));
  String sDisplayType=sd.nextToken(':');
  String sDisplayParam1=sd.nextToken(',');
  String sDisplayParam2=sd.nextToken(',');
  if (""String_Node_Str"".equals(sDisplayType) || ""String_Node_Str"".equals(sDisplayType) || ""String_Node_Str"".equals(sDisplayType)) {
    sDisplayParam2=sDisplayParam1;
    sDisplayParam1=sDisplayType;
    sDisplayType=""String_Node_Str"";
  }
  try {
    if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayPanel();
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayWindow();
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayESCPOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2),new UnicodeTranslatorInt());
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplaySurePOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2));
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayESCPOS(pws.getPrinterWritter(sDisplayParam1,sDisplayParam2),new UnicodeTranslatorEur());
    }
 else     if (""String_Node_Str"".equals(sDisplayType)) {
      m_devicedisplay=new DeviceDisplayJavaPOS(sDisplayParam1);
    }
 else {
      m_devicedisplay=new DeviceDisplayNull();
    }
  }
 catch (  TicketPrinterException e) {
    m_devicedisplay=new DeviceDisplayNull(e.getMessage());
  }
  m_nullprinter=new DevicePrinterNull();
  m_deviceprinters=new HashMap<String,DevicePrinter>();
  m_deviceprinterslist=new ArrayList<DevicePrinter>();
  int iPrinterIndex=1;
  String sPrinterIndex=Integer.toString(iPrinterIndex);
  String sprinter=props.getProperty(""String_Node_Str"");
  while (sprinter != null && !""String_Node_Str"".equals(sprinter)) {
    StringParser sp=new StringParser(sprinter);
    String sPrinterType=sp.nextToken(':');
    String sPrinterParam1=sp.nextToken(',');
    String sPrinterParam2=sp.nextToken(',');
    if (""String_Node_Str"".equals(sPrinterType) || ""String_Node_Str"".equals(sPrinterType) || ""String_Node_Str"".equals(sPrinterType)) {
      sPrinterParam2=sPrinterParam1;
      sPrinterParam1=sPrinterType;
      sPrinterType=""String_Node_Str"";
    }
    try {
      if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPanel());
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        if (sPrinterParam2 == null || sPrinterParam2.equals(""String_Node_Str"") || sPrinterParam2.equals(""String_Node_Str"")) {
          sPrinterParam2=""String_Node_Str"";
        }
 else         if (sPrinterParam2.equals(""String_Node_Str"")) {
          sPrinterParam2=""String_Node_Str"";
        }
        addPrinter(sPrinterIndex,new DevicePrinterPrinter(sPrinterParam1,Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),Integer.parseInt(props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")),props.getProperty(""String_Node_Str"" + sPrinterParam2 + ""String_Node_Str"")));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesEpson(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesTMU220(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesStar(),new UnicodeTranslatorStar()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesIthaca(),new UnicodeTranslatorInt()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterESCPOS(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2),new CodesSurePOS(),new UnicodeTranslatorSurePOS()));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterPlain(pws.getPrinterWritter(sPrinterParam1,sPrinterParam2)));
      }
 else       if (""String_Node_Str"".equals(sPrinterType)) {
        addPrinter(sPrinterIndex,new DevicePrinterJavaPOS(sPrinterParam1,sPrinterParam2));
      }
    }
 catch (    TicketPrinterException e) {
    }
    iPrinterIndex++;
    sPrinterIndex=Integer.toString(iPrinterIndex);
    sprinter=props.getProperty(""String_Node_Str"" + sPrinterIndex);
  }
}"
20233,"private void checkTracks(){
  if (m_cCardType != 'B')   return;
  String sCardNumber1=(m_aTrack1 == null || m_aTrack1.size() < 1) ? null : (String)m_aTrack1.get(0);
  String sCardNumber2=(m_aTrack2 == null || m_aTrack2.size() < 1) ? null : (String)m_aTrack2.get(0);
  String sHolderName=(m_aTrack1 == null || m_aTrack1.size() < 2) ? null : (String)m_aTrack1.get(1);
  String sExpDate1=(m_aTrack1 == null || m_aTrack1.size() < 3) ? null : ((String)m_aTrack1.get(2)).substring(0,4);
  String sExpDate2=(m_aTrack2 == null || m_aTrack2.size() < 2) ? null : ((String)m_aTrack2.get(1)).substring(0,4);
  if (!checkCardNumber(sCardNumber1) || (sCardNumber2 != null && !sCardNumber1.equals(sCardNumber2)))   return;
  if (sHolderName == null)   return;
  if ((sExpDate1 != null || !checkExpDate(sExpDate2)) && (!checkExpDate(sExpDate1) || !sExpDate1.equals(sExpDate2)))   return;
  m_sCardNumber=sCardNumber1;
  m_sHolderName=formatHolderName(sHolderName);
  m_sExpirationDate=sExpDate1 == null ? sExpDate2 : sExpDate1;
}","private void checkTracks(){
  if (m_cCardType != 'B')   return;
  String sCardNumber1=(m_aTrack1 == null || m_aTrack1.size() < 1) ? null : (String)m_aTrack1.get(0);
  String sCardNumber2=(m_aTrack2 == null || m_aTrack2.size() < 1) ? null : (String)m_aTrack2.get(0);
  String sHolderName=(m_aTrack1 == null || m_aTrack1.size() < 2) ? null : (String)m_aTrack1.get(1);
  String sExpDate1=(m_aTrack1 == null || m_aTrack1.size() < 3) ? null : ((String)m_aTrack1.get(2)).substring(0,4);
  String sExpDate2=(m_aTrack2 == null || m_aTrack2.size() < 2) ? null : ((String)m_aTrack2.get(1)).substring(0,4);
  if (!checkCardNumber(sCardNumber1) || (sCardNumber2 != null && !sCardNumber1.equals(sCardNumber2)))   return;
  if (sHolderName == null)   return;
  if ((sExpDate1 != null || !checkExpDate(sExpDate2)) && (!checkExpDate(sExpDate1) || !sExpDate1.equals(sExpDate2)))   return;
  m_sCardNumber=sCardNumber1;
  m_sHolderName=formatHolderName(sHolderName);
  String yymm=sExpDate1 == null ? sExpDate2 : sExpDate1;
  m_sExpirationDate=yymm.substring(2,4) + yymm.substring(0,2);
}"
20234,"private void m_jEditLineActionPerformed(java.awt.event.ActionEvent evt){
  int i=m_ticketlines.getSelectedIndex();
  if (i < 0) {
    Toolkit.getDefaultToolkit().beep();
  }
 else {
    TicketLineInfo newline=JProductLineEdit.showMessage(this,m_App,m_oTicket.getLine(i));
    if (newline != null) {
      paintTicketLine(i,newline);
    }
  }
}","private void m_jEditLineActionPerformed(java.awt.event.ActionEvent evt){
  int i=m_ticketlines.getSelectedIndex();
  if (i < 0) {
    Toolkit.getDefaultToolkit().beep();
  }
 else {
    try {
      TicketLineInfo newline=JProductLineEdit.showMessage(this,m_App,m_oTicket.getLine(i));
      if (newline != null) {
        paintTicketLine(i,newline);
      }
    }
 catch (    BasicException e) {
      new MessageInf(e).show(this);
    }
  }
}"
20235,"private TicketLineInfo init(AppView app,TicketLineInfo oLine){
  initComponents();
  m_oLine=new TicketLineInfo(oLine);
  m_bunitsok=true;
  m_bpriceok=true;
  m_jName.setEnabled(m_oLine.getProductID() == null && app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPrice.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPriceTax.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jName.setText(m_oLine.getProperty(""String_Node_Str""));
  m_jUnits.setDoubleValue(oLine.getMultiply());
  m_jPrice.setDoubleValue(oLine.getPrice());
  m_jPriceTax.setDoubleValue(oLine.getPriceTax());
  m_jTaxrate.setText(oLine.getTaxInfo().getName());
  m_jName.addPropertyChangeListener(""String_Node_Str"",new RecalculateName());
  m_jUnits.addPropertyChangeListener(""String_Node_Str"",new RecalculateUnits());
  m_jPrice.addPropertyChangeListener(""String_Node_Str"",new RecalculatePrice());
  m_jPriceTax.addPropertyChangeListener(""String_Node_Str"",new RecalculatePriceTax());
  m_jName.addEditorKeys(m_jKeys);
  m_jUnits.addEditorKeys(m_jKeys);
  m_jPrice.addEditorKeys(m_jKeys);
  m_jPriceTax.addEditorKeys(m_jKeys);
  if (m_jName.isEnabled()) {
    m_jName.activate();
  }
 else {
    m_jUnits.activate();
  }
  printTotals();
  getRootPane().setDefaultButton(m_jButtonOK);
  returnLine=null;
  setVisible(true);
  return returnLine;
}","private TicketLineInfo init(AppView app,TicketLineInfo oLine) throws BasicException {
  initComponents();
  if (oLine.getTaxInfo() == null) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
  }
  m_oLine=new TicketLineInfo(oLine);
  m_bunitsok=true;
  m_bpriceok=true;
  m_jName.setEnabled(m_oLine.getProductID() == null && app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPrice.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPriceTax.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jName.setText(m_oLine.getProperty(""String_Node_Str""));
  m_jUnits.setDoubleValue(oLine.getMultiply());
  m_jPrice.setDoubleValue(oLine.getPrice());
  m_jPriceTax.setDoubleValue(oLine.getPriceTax());
  m_jTaxrate.setText(oLine.getTaxInfo().getName());
  m_jName.addPropertyChangeListener(""String_Node_Str"",new RecalculateName());
  m_jUnits.addPropertyChangeListener(""String_Node_Str"",new RecalculateUnits());
  m_jPrice.addPropertyChangeListener(""String_Node_Str"",new RecalculatePrice());
  m_jPriceTax.addPropertyChangeListener(""String_Node_Str"",new RecalculatePriceTax());
  m_jName.addEditorKeys(m_jKeys);
  m_jUnits.addEditorKeys(m_jKeys);
  m_jPrice.addEditorKeys(m_jKeys);
  m_jPriceTax.addEditorKeys(m_jKeys);
  if (m_jName.isEnabled()) {
    m_jName.activate();
  }
 else {
    m_jUnits.activate();
  }
  printTotals();
  getRootPane().setDefaultButton(m_jButtonOK);
  returnLine=null;
  setVisible(true);
  return returnLine;
}"
20236,"public static TicketLineInfo showMessage(Component parent,AppView app,TicketLineInfo oLine){
  Window window=getWindow(parent);
  JProductLineEdit myMsg;
  if (window instanceof Frame) {
    myMsg=new JProductLineEdit((Frame)window,true);
  }
 else {
    myMsg=new JProductLineEdit((Dialog)window,true);
  }
  return myMsg.init(app,oLine);
}","public static TicketLineInfo showMessage(Component parent,AppView app,TicketLineInfo oLine) throws BasicException {
  Window window=getWindow(parent);
  JProductLineEdit myMsg;
  if (window instanceof Frame) {
    myMsg=new JProductLineEdit((Frame)window,true);
  }
 else {
    myMsg=new JProductLineEdit((Dialog)window,true);
  }
  return myMsg.init(app,oLine);
}"
20237,"public void fillPermissions(DataLogicSystem dlSystem){
  m_apermissions=new HashSet<String>();
  m_apermissions.add(""String_Node_Str"");
  m_apermissions.add(""String_Node_Str"");
  String sRolePermisions=dlSystem.findRolePermissions(m_sRole);
  if (sRolePermisions != null) {
    try {
      if (m_sp == null) {
        SAXParserFactory spf=SAXParserFactory.newInstance();
        m_sp=spf.newSAXParser();
      }
      m_sp.parse(new InputSource(new StringReader(sRolePermisions)),new ConfigurationHandler());
    }
 catch (    ParserConfigurationException ePC) {
      logger.log(Level.WARNING,""String_Node_Str"",ePC);
    }
catch (    SAXException eSAX) {
      logger.log(Level.WARNING,""String_Node_Str"",eSAX);
    }
catch (    IOException eIO) {
      logger.log(Level.WARNING,""String_Node_Str"",eIO);
    }
  }
}","public void fillPermissions(DataLogicSystem dlSystem){
  m_apermissions=new HashSet<String>();
  m_apermissions.add(""String_Node_Str"");
  m_apermissions.add(""String_Node_Str"");
  String sRolePermisions=dlSystem.findRolePermissions(m_sRole);
  if (sRolePermisions != null) {
    try {
      if (m_sp == null) {
        SAXParserFactory spf=SAXParserFactory.newInstance();
        m_sp=spf.newSAXParser();
      }
      m_sp.parse(new InputSource(new StringReader(sRolePermisions)),new ConfigurationHandler());
    }
 catch (    ParserConfigurationException ePC) {
      logger.log(Level.WARNING,LocalRes.getIntString(""String_Node_Str""),ePC);
    }
catch (    SAXException eSAX) {
      logger.log(Level.WARNING,LocalRes.getIntString(""String_Node_Str""),eSAX);
    }
catch (    IOException eIO) {
      logger.log(Level.WARNING,LocalRes.getIntString(""String_Node_Str""),eIO);
    }
  }
}"
20238,"public final SentenceExec getCatalogCategoryAdd(){
  return new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE);
}","public final SentenceExec getCatalogCategoryAdd(){
  return new StaticSentence(s,""String_Node_Str"" + s.DB.INTEGER_NULL() + ""String_Node_Str"",SerializerWriteString.INSTANCE);
}"
20239,"private void init(Session s){
  initComponents();
  attsetSave=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(Datas.STRING,Datas.STRING,Datas.STRING));
  attinstSave=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING));
  attsetSent=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AttributeSetInfo(dr.getString(1),dr.getString(2));
    }
  }
);
  attsetinstExistsSent=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(Datas.STRING,Datas.STRING),SerializerReadString.INSTANCE);
  attinstSent=new PreparedSentence(s,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",SerializerWriteString.INSTANCE,new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AttributeInstInfo(dr.getString(1),dr.getString(2),dr.getString(3),dr.getString(4));
    }
  }
);
  attinstSent2=new PreparedSentence(s,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new SerializerWriteBasic(Datas.STRING,Datas.STRING),new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AttributeInstInfo(dr.getString(1),dr.getString(2),dr.getString(3),dr.getString(4));
    }
  }
);
  attvaluesSent=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  getRootPane().setDefaultButton(m_jButtonOK);
}","private void init(Session s){
  initComponents();
  attsetSave=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(Datas.STRING,Datas.STRING,Datas.STRING));
  attinstSave=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING));
  attsetSent=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AttributeSetInfo(dr.getString(1),dr.getString(2));
    }
  }
);
  attsetinstExistsSent=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(Datas.STRING,Datas.STRING),SerializerReadString.INSTANCE);
  attinstSent=new PreparedSentence(s,""String_Node_Str"" + s.DB.CHAR_NULL() + ""String_Node_Str""+ s.DB.CHAR_NULL()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",SerializerWriteString.INSTANCE,new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AttributeInstInfo(dr.getString(1),dr.getString(2),dr.getString(3),dr.getString(4));
    }
  }
);
  attinstSent2=new PreparedSentence(s,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new SerializerWriteBasic(Datas.STRING,Datas.STRING),new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AttributeInstInfo(dr.getString(1),dr.getString(2),dr.getString(3),dr.getString(4));
    }
  }
);
  attvaluesSent=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  getRootPane().setDefaultButton(m_jButtonOK);
}"
20240,"public void saveProperties(AppConfig config){
  config.setProperty(""String_Node_Str"",uniqueinstance);
  config.setProperty(""String_Node_Str"",jtxtMachineHostname.getText());
  LAFInfo laf=(LAFInfo)jcboLAF.getSelectedItem();
  config.setProperty(""String_Node_Str"",laf == null ? System.getProperty(""String_Node_Str"",""String_Node_Str"") : laf.getClassName());
  config.setProperty(""String_Node_Str"",comboValue(jcboMachineScreenmode.getSelectedItem()));
  config.setProperty(""String_Node_Str"",comboValue(jcboTicketsBag.getSelectedItem()));
  String sMachinePrinter=comboValue(jcboMachinePrinter.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + comboValue(jcboConnPrinter.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + m_jtxtJPOSPrinter.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer.getText());
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + printer1printerparams.getParameters());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter);
  }
  String sMachinePrinter2=comboValue(jcboMachinePrinter2.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + comboValue(jcboConnPrinter2.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter2.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + m_jtxtJPOSPrinter2.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer2.getText());
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + printer2printerparams.getParameters());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter2);
  }
  String sMachinePrinter3=comboValue(jcboMachinePrinter3.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + comboValue(jcboConnPrinter3.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter3.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + m_jtxtJPOSPrinter3.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer3.getText());
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + printer3printerparams.getParameters());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter3);
  }
  String sMachineDisplay=comboValue(jcboMachineDisplay.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + comboValue(jcboConnDisplay.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialDisplay.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + m_jtxtJPOSName.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineDisplay);
  }
  String sMachineScale=comboValue(jcboMachineScale.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScale) || ""String_Node_Str"".equals(sMachineScale)) {
    config.setProperty(""String_Node_Str"",sMachineScale + ""String_Node_Str"" + comboValue(jcboSerialScale.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScale);
  }
  String sMachineScanner=comboValue(jcboMachineScanner.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScanner)) {
    config.setProperty(""String_Node_Str"",sMachineScanner + ""String_Node_Str"" + comboValue(jcboSerialScanner.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScanner);
  }
  config.setProperty(""String_Node_Str"",comboValue(cboPrinters.getSelectedItem()));
  dirty.setDirty(false);
}","public void saveProperties(AppConfig config){
  config.setProperty(""String_Node_Str"",jtxtMachineHostname.getText());
  LAFInfo laf=(LAFInfo)jcboLAF.getSelectedItem();
  config.setProperty(""String_Node_Str"",laf == null ? System.getProperty(""String_Node_Str"",""String_Node_Str"") : laf.getClassName());
  config.setProperty(""String_Node_Str"",comboValue(jcboMachineScreenmode.getSelectedItem()));
  config.setProperty(""String_Node_Str"",comboValue(jcboTicketsBag.getSelectedItem()));
  String sMachinePrinter=comboValue(jcboMachinePrinter.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + comboValue(jcboConnPrinter.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + m_jtxtJPOSPrinter.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer.getText());
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + printer1printerparams.getParameters());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter);
  }
  String sMachinePrinter2=comboValue(jcboMachinePrinter2.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + comboValue(jcboConnPrinter2.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter2.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + m_jtxtJPOSPrinter2.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer2.getText());
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + printer2printerparams.getParameters());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter2);
  }
  String sMachinePrinter3=comboValue(jcboMachinePrinter3.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + comboValue(jcboConnPrinter3.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter3.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + m_jtxtJPOSPrinter3.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer3.getText());
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + printer3printerparams.getParameters());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter3);
  }
  String sMachineDisplay=comboValue(jcboMachineDisplay.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + comboValue(jcboConnDisplay.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialDisplay.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + m_jtxtJPOSName.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineDisplay);
  }
  String sMachineScale=comboValue(jcboMachineScale.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScale) || ""String_Node_Str"".equals(sMachineScale)) {
    config.setProperty(""String_Node_Str"",sMachineScale + ""String_Node_Str"" + comboValue(jcboSerialScale.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScale);
  }
  String sMachineScanner=comboValue(jcboMachineScanner.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScanner)) {
    config.setProperty(""String_Node_Str"",sMachineScanner + ""String_Node_Str"" + comboValue(jcboSerialScanner.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScanner);
  }
  config.setProperty(""String_Node_Str"",comboValue(cboPrinters.getSelectedItem()));
  dirty.setDirty(false);
}"
20241,"public void loadProperties(AppConfig config){
  uniqueinstance=config.getProperty(""String_Node_Str"");
  jtxtMachineHostname.setText(config.getProperty(""String_Node_Str""));
  String lafclass=config.getProperty(""String_Node_Str"");
  jcboLAF.setSelectedItem(null);
  for (int i=0; i < jcboLAF.getItemCount(); i++) {
    LAFInfo lafinfo=(LAFInfo)jcboLAF.getItemAt(i);
    if (lafinfo.getClassName().equals(lafclass)) {
      jcboLAF.setSelectedIndex(i);
      break;
    }
  }
  jcboMachineScreenmode.setSelectedItem(config.getProperty(""String_Node_Str""));
  jcboTicketsBag.setSelectedItem(config.getProperty(""String_Node_Str""));
  StringParser p=new StringParser(config.getProperty(""String_Node_Str""));
  String sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter.setSelectedItem(sparam);
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    m_jtxtJPOSPrinter.setText(p.nextToken(','));
    m_jtxtJPOSDrawer.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    printer1printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter.setSelectedItem(sparam);
    jcboConnPrinter.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter2.setSelectedItem(sparam);
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    m_jtxtJPOSPrinter2.setText(p.nextToken(','));
    m_jtxtJPOSDrawer2.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    printer2printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter2.setSelectedItem(sparam);
    jcboConnPrinter2.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter3.setSelectedItem(sparam);
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    m_jtxtJPOSPrinter3.setText(p.nextToken(','));
    m_jtxtJPOSDrawer3.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    printer3printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter3.setSelectedItem(sparam);
    jcboConnPrinter3.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(""String_Node_Str"");
    jcboConnDisplay.setSelectedItem(sparam);
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(sparam);
    m_jtxtJPOSName.setText(p.nextToken(','));
  }
 else {
    jcboMachineDisplay.setSelectedItem(sparam);
    jcboConnDisplay.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScale.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboSerialScale.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScanner.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam)) {
    jcboSerialScanner.setSelectedItem(p.nextToken(','));
  }
  cboPrinters.setSelectedItem(config.getProperty(""String_Node_Str""));
  dirty.setDirty(false);
}","public void loadProperties(AppConfig config){
  jtxtMachineHostname.setText(config.getProperty(""String_Node_Str""));
  String lafclass=config.getProperty(""String_Node_Str"");
  jcboLAF.setSelectedItem(null);
  for (int i=0; i < jcboLAF.getItemCount(); i++) {
    LAFInfo lafinfo=(LAFInfo)jcboLAF.getItemAt(i);
    if (lafinfo.getClassName().equals(lafclass)) {
      jcboLAF.setSelectedIndex(i);
      break;
    }
  }
  jcboMachineScreenmode.setSelectedItem(config.getProperty(""String_Node_Str""));
  jcboTicketsBag.setSelectedItem(config.getProperty(""String_Node_Str""));
  StringParser p=new StringParser(config.getProperty(""String_Node_Str""));
  String sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter.setSelectedItem(sparam);
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    m_jtxtJPOSPrinter.setText(p.nextToken(','));
    m_jtxtJPOSDrawer.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    printer1printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter.setSelectedItem(sparam);
    jcboConnPrinter.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter2.setSelectedItem(sparam);
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    m_jtxtJPOSPrinter2.setText(p.nextToken(','));
    m_jtxtJPOSDrawer2.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    printer2printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter2.setSelectedItem(sparam);
    jcboConnPrinter2.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter3.setSelectedItem(sparam);
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    m_jtxtJPOSPrinter3.setText(p.nextToken(','));
    m_jtxtJPOSDrawer3.setText(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    printer3printerparams.setParameters(p);
  }
 else {
    jcboMachinePrinter3.setSelectedItem(sparam);
    jcboConnPrinter3.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(""String_Node_Str"");
    jcboConnDisplay.setSelectedItem(sparam);
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(sparam);
    m_jtxtJPOSName.setText(p.nextToken(','));
  }
 else {
    jcboMachineDisplay.setSelectedItem(sparam);
    jcboConnDisplay.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScale.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboSerialScale.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScanner.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam)) {
    jcboSerialScanner.setSelectedItem(p.nextToken(','));
  }
  cboPrinters.setSelectedItem(config.getProperty(""String_Node_Str""));
  dirty.setDirty(false);
}"
20242,"private void restoreProperties(){
  AppConfig config=new AppConfig(configfile);
  if (config.delete()) {
    loadProperties();
  }
 else {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")));
  }
}","private void restoreProperties(){
  if (config.delete()) {
    loadProperties();
  }
 else {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")));
  }
}"
20243,"public JPanelConfiguration(AppProperties props){
  configfile=props.getConfigFile();
  initComponents();
  m_panelconfig=new ArrayList<PanelConfig>();
  m_panelconfig.add(new JPanelConfigDatabase());
  m_panelconfig.add(new JPanelConfigGeneral());
  m_panelconfig.add(new JPanelConfigLocale());
  m_panelconfig.add(new JPanelConfigPayment());
  for (  PanelConfig c : m_panelconfig) {
    m_jConfigOptions.add(c.getConfigComponent());
  }
}","public JPanelConfiguration(AppProperties props){
  config=new AppConfig(props.getConfigFile());
  initComponents();
  m_panelconfig=new ArrayList<PanelConfig>();
  m_panelconfig.add(new JPanelConfigDatabase());
  m_panelconfig.add(new JPanelConfigGeneral());
  m_panelconfig.add(new JPanelConfigLocale());
  m_panelconfig.add(new JPanelConfigPayment());
  for (  PanelConfig c : m_panelconfig) {
    m_jConfigOptions.add(c.getConfigComponent());
  }
}"
20244,"private void saveProperties(){
  AppConfig config=new AppConfig(configfile);
  for (  PanelConfig c : m_panelconfig) {
    c.saveProperties(config);
  }
  try {
    config.save();
    JOptionPane.showMessageDialog(this,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
  }
 catch (  IOException e) {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e));
  }
}","private void saveProperties(){
  for (  PanelConfig c : m_panelconfig) {
    c.saveProperties(config);
  }
  try {
    config.save();
    JOptionPane.showMessageDialog(this,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
  }
 catch (  IOException e) {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e));
  }
}"
20245,"private void loadProperties(){
  AppConfig config=new AppConfig(configfile);
  config.load();
  for (  PanelConfig c : m_panelconfig) {
    c.loadProperties(config);
  }
}","private void loadProperties(){
  config.load();
  for (  PanelConfig c : m_panelconfig) {
    c.loadProperties(config);
  }
}"
20246,"public List<ProductInfoExt> getProductCatalog(String category) throws BasicException {
  return new PreparedSentence(s,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + s.DB.FALSE() + ""String_Node_Str""+ ""String_Node_Str"",SerializerWriteString.INSTANCE,ProductInfoExt.getSerializerRead()).list(category);
}","public List<ProductInfoExt> getProductCatalog(String category) throws BasicException {
  return new PreparedSentence(s,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",SerializerWriteString.INSTANCE,ProductInfoExt.getSerializerRead()).list(category);
}"
20247,"@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommerceID,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommercePassword,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
    sb.append(""String_Node_Str"");
    String tmp=payinfo.getExpirationDate();
    sb.append(URLEncoder.encode(tmp,""String_Node_Str""));
    String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    if (cc_name.length > 0) {
      sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    if (cc_name.length > 1) {
      sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(m_bTestMode);
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    payinfo.setReturnMessage(returned);
    in.close();
    String[] ccRep=returned.split(""String_Node_Str"");
    if (OK.equals(ccRep[0])) {
      payinfo.paymentOK((String)ccRep[4],(String)ccRep[6],returned);
    }
 else {
      payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),ccRep[0] + ""String_Node_Str"" + ccRep[3]);
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}","@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommerceID,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommercePassword,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    if (payinfo.getTrack1(true) == null && payinfo.getTrack2(true) == null && payinfo.getTrack3(true) == null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
      sb.append(""String_Node_Str"");
      String tmp=payinfo.getExpirationDate();
      sb.append(URLEncoder.encode(tmp,""String_Node_Str""));
      String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (cc_name.length > 0) {
        sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      if (cc_name.length > 1) {
        sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTrack1(false));
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(m_bTestMode);
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    in.close();
    AuthorizeNetParser anp=new AuthorizeNetParser(returned);
    Map props=anp.splitXML();
    if (anp.getResult().equals(LocalRes.getIntString(""String_Node_Str""))) {
      if (APPROVED.equals(props.get(""String_Node_Str""))) {
        payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
      }
 else {
        StringBuilder errorLine=new StringBuilder();
        if (anp.getNumErrors() > 0) {
          for (int i=1; i <= anp.getNumErrors(); i++) {
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
          }
        }
        payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),errorLine.toString());
      }
    }
 else {
      payinfo.paymentError(anp.getResult(),""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}"
20248,"public String getTrack2(){
  return track1;
}","public String getTrack2(boolean framingChar){
  return (framingChar) ? track2 : track2.substring(1,track2.length() - 2);
}"
20249,"public String getTrack1(){
  return track1;
}","/** 
 * Get tracks of magnetic card. Framing characters:  - start sentinel (SS) - end sentinel (ES)  - LRC 
 * @param framingChar true: including framing characters false: exluding framing characters
 * @return tracks of the magnetic card
 */
public String getTrack1(boolean framingChar){
  return (framingChar) ? track1 : track1.substring(1,track1.length() - 2);
}"
20250,"public String getTrack3(){
  return track1;
}","public String getTrack3(boolean framingChar){
  return (framingChar) ? track3 : track3.substring(1,track3.length() - 2);
}"
20251,"public byte transChar(char sChar){
  if ((sChar >= 0x0000) && (sChar < 0x0080)) {
    return (byte)sChar;
  }
 else {
switch (sChar) {
case '\u00c1':
      return 0x41;
case '\u00c9':
    return 0x45;
case '\u00cd':
  return 0x49;
case '\u00d3':
return 0x4F;
case '\u00da':
return 0x55;
case '\u00FC':
return -0x7F;
case '\u00E9':
return -0x7E;
case '\u00DC':
return -0x66;
case '\u00A3':
return -0x64;
case '\u00A5':
return -0x63;
case '\u00E1':
return -0x60;
case '\u00ED':
return -0x5F;
case '\u00F3':
return -0x5E;
case '\u00FA':
return -0x5D;
case '\u00F1':
return -0x5C;
case '\u00D1':
return -0x5B;
case '\u00BF':
return -0x58;
case '\u00A1':
return -0x53;
case '\u20AC':
return -0x12;
default :
return 0x3F;
}
}
}","public byte transChar(char sChar){
  if ((sChar >= 0x0000) && (sChar < 0x0080)) {
    return (byte)sChar;
  }
 else {
switch (sChar) {
case '\u00c1':
      return 0x41;
case '\u00c9':
    return 0x45;
case '\u00cd':
  return 0x49;
case '\u00d3':
return 0x4F;
case '\u00da':
return 0x55;
case '\u00C7':
return -0x80;
case '\u00FC':
return -0x7F;
case '\u00E9':
return -0x7E;
case '\u00E4':
return -0x7C;
case '\u00E5':
return -0x7A;
case '\u00E7':
return -0x79;
case '\u00C4':
return -0x72;
case '\u00C5':
return -0x71;
case '\u00F6':
return -0x6C;
case '\u00D6':
return -0x67;
case '\u00DC':
return -0x66;
case '\u00A3':
return -0x64;
case '\u00A5':
return -0x63;
case '\u00E1':
return -0x60;
case '\u00ED':
return -0x5F;
case '\u00F3':
return -0x5E;
case '\u00FA':
return -0x5D;
case '\u00F1':
return -0x5C;
case '\u00D1':
return -0x5B;
case '\u00BF':
return -0x58;
case '\u00A1':
return -0x53;
case '\u20AC':
return -0x12;
default :
return 0x3F;
}
}
}"
20252,"@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommerceID,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommercePassword,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    if (payinfo.getTrack1(true) == null && payinfo.getTrack2(true) == null && payinfo.getTrack3(true) == null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
      sb.append(""String_Node_Str"");
      String tmp=payinfo.getExpirationDate();
      sb.append(URLEncoder.encode(tmp,""String_Node_Str""));
      String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (cc_name.length > 0) {
        sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      if (cc_name.length > 1) {
        sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTrack1(false));
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(m_bTestMode);
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    in.close();
    AuthorizeNetParser anp=new AuthorizeNetParser(returned);
    Map props=anp.splitXML();
    if (anp.getResult().equals(LocalRes.getIntString(""String_Node_Str""))) {
      if (APPROVED.equals(props.get(""String_Node_Str""))) {
        payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
      }
 else {
        StringBuilder errorLine=new StringBuilder();
        if (anp.getNumErrors() > 0) {
          for (int i=1; i <= anp.getNumErrors(); i++) {
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
          }
        }
        payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),errorLine.toString());
      }
    }
 else {
      payinfo.paymentError(anp.getResult(),""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}","@Override public void execute(PaymentInfoMagcard payinfo){
  StringBuffer sb=new StringBuffer();
  try {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommerceID,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    sb.append(URLEncoder.encode(m_sCommercePassword,""String_Node_Str""));
    sb.append(""String_Node_Str"");
    NumberFormat formatter=new DecimalFormat(""String_Node_Str"");
    String amount=formatter.format(Math.abs(payinfo.getTotal()));
    sb.append(URLEncoder.encode(amount.replace(',','.'),""String_Node_Str""));
    if (payinfo.getTrack1(true) == null) {
      sb.append(""String_Node_Str"");
      sb.append(URLEncoder.encode(payinfo.getCardNumber(),""String_Node_Str""));
      sb.append(""String_Node_Str"");
      String tmp=payinfo.getExpirationDate();
      sb.append(URLEncoder.encode(tmp,""String_Node_Str""));
      String[] cc_name=payinfo.getHolderName().split(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (cc_name.length > 0) {
        sb.append(URLEncoder.encode(cc_name[0],""String_Node_Str""));
      }
      sb.append(""String_Node_Str"");
      if (cc_name.length > 1) {
        sb.append(URLEncoder.encode(cc_name[1],""String_Node_Str""));
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTrack1(false));
    }
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(m_bTestMode);
    if (payinfo.getTotal() >= 0.0) {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONVALIDATE);
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(OPERATIONREFUND);
      sb.append(""String_Node_Str"");
      sb.append(payinfo.getTransactionID());
    }
    URL url=new URL(ENDPOINTADDRESS);
    URLConnection connection=url.openConnection();
    connection.setDoOutput(true);
    connection.setUseCaches(false);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(sb.toString().getBytes());
    out.flush();
    out.close();
    BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    String returned=in.readLine();
    in.close();
    AuthorizeNetParser anp=new AuthorizeNetParser(returned);
    Map props=anp.splitXML();
    if (anp.getResult().equals(LocalRes.getIntString(""String_Node_Str""))) {
      if (APPROVED.equals(props.get(""String_Node_Str""))) {
        payinfo.paymentOK((String)props.get(""String_Node_Str""),(String)props.get(""String_Node_Str""),returned);
      }
 else {
        StringBuilder errorLine=new StringBuilder();
        if (anp.getNumErrors() > 0) {
          for (int i=1; i <= anp.getNumErrors(); i++) {
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
            errorLine.append(props.get(""String_Node_Str"" + Integer.toString(i)));
            errorLine.append(""String_Node_Str"");
          }
        }
        payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),errorLine.toString());
      }
    }
 else {
      payinfo.paymentError(anp.getResult(),""String_Node_Str"");
    }
  }
 catch (  UnsupportedEncodingException eUE) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eUE.getMessage());
  }
catch (  MalformedURLException eMURL) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),eMURL.getMessage());
  }
catch (  IOException e) {
    payinfo.paymentError(AppLocal.getIntString(""String_Node_Str""),e.getMessage());
  }
}"
20253,"private void defaultValues(){
  jListTickets.setModel(new MyListData(new ArrayList()));
  jcboUser.setSelectedItem(null);
  jtxtTicketID.reset();
  jtxtTicketID.activate();
  jCheckBoxSales.setSelected(false);
  jCheckBoxRefunds.setSelected(false);
  jcboUser.setSelectedItem(null);
  jcboMoney.setSelectedItem(((ListQBFModelNumber)jcboMoney.getModel()).getElementAt(0));
  jcboMoney.revalidate();
  jcboMoney.repaint();
  jtxtMoney.reset();
}","private void defaultValues(){
  jListTickets.setModel(new MyListData(new ArrayList()));
  jcboUser.setSelectedItem(null);
  jtxtTicketID.reset();
  jtxtTicketID.activate();
  jCheckBoxSales.setSelected(false);
  jCheckBoxRefunds.setSelected(false);
  jcboUser.setSelectedItem(null);
  jcboMoney.setSelectedItem(((ListQBFModelNumber)jcboMoney.getModel()).getElementAt(0));
  jcboMoney.revalidate();
  jcboMoney.repaint();
  jtxtMoney.reset();
  jParamsDatesInterval1.setStartDate(null);
  jParamsDatesInterval1.setEndDate(null);
}"
20254,"public void add(double dValue){
  subtotal+=dValue;
  taxtotal=RoundUtils.round(subtotal * tax.getRate());
}","public void add(double dValue){
  subtotal+=dValue;
  taxtotal=subtotal * tax.getRate();
}"
20255,"public void updateCurDebt(Double ammount,Date d){
  curdebt=RoundUtils.round(RoundUtils.getValue(curdebt) + ammount);
  if (RoundUtils.compare(curdebt,0.0) > 0) {
    if (curdate == null) {
      curdate=d;
    }
  }
 else   if (RoundUtils.compare(curdebt,0.0) == 0) {
    curdebt=null;
    curdate=null;
  }
 else {
    curdate=null;
  }
}","public void updateCurDebt(Double ammount,Date d){
  curdebt=curdebt + ammount;
  if (RoundUtils.compare(curdebt,0.0) > 0) {
    if (curdate == null) {
      curdate=d;
    }
  }
 else   if (RoundUtils.compare(curdebt,0.0) == 0) {
    curdebt=null;
    curdate=null;
  }
 else {
    curdate=null;
  }
}"
20256,"public void actionPerformed(ActionEvent e){
  Double tendered=m_jTendered.getDoubleValue();
  if (tendered == null) {
    m_jTendered.setDoubleValue(RoundUtils.round(amount));
  }
 else {
    m_jTendered.setDoubleValue(RoundUtils.round(tendered + amount));
  }
  printState();
}","public void actionPerformed(ActionEvent e){
  Double tendered=m_jTendered.getDoubleValue();
  if (tendered == null) {
    m_jTendered.setDoubleValue(amount);
  }
 else {
    m_jTendered.setDoubleValue(tendered + amount);
  }
  printState();
}"
20257,"public double getTax(){
  double sum=0.0;
  if (hasTaxesCalculated()) {
    for (    TicketTaxInfo tax : taxes) {
      sum+=tax.getTax();
    }
  }
 else {
    for (    TicketLineInfo line : m_aLines) {
      sum+=RoundUtils.round(line.getTax());
    }
  }
  return sum;
}","public double getTax(){
  double sum=0.0;
  if (hasTaxesCalculated()) {
    for (    TicketTaxInfo tax : taxes) {
      sum+=tax.getTax();
    }
  }
 else {
    for (    TicketLineInfo line : m_aLines) {
      sum+=line.getTax();
    }
  }
  return sum;
}"
20258,"public void add(double dValue){
  subtotal+=dValue;
  taxtotal=RoundUtils.round(subtotal * tax.getRate());
}","public void add(double dValue){
  subtotal+=dValue;
  taxtotal=subtotal * tax.getRate();
}"
20259,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      try {
        AudioClip oAudio=Applet.newAudioClip(getClass().getClassLoader().getResource(text.toString()));
        oAudio.play();
      }
 catch (      Exception fnfe) {
      }
      text=null;
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  try {
    BufferedImage image=m_system.getResourceAsImage(text.toString());
    m_oOutputPrinter.printImage(image);
  }
 catch (  Exception fnfe) {
  }
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.printBarCode(bctype,bcposition,text.toString());
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
      m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignRight(text.toString(),m_iTextLength));
    break;
case DevicePrinter.ALIGN_CENTER:
  m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_oOutputPrinter.printText(m_iTextStyle,text.toString());
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endLine();
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endReceipt();
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
if (m_sVisorLine1 == null) {
m_sVisorLine1=m_sVisorLine.toString();
}
 else {
m_sVisorLine2=m_sVisorLine.toString();
}
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine1=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine2=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
m_sVisorLine.append(DeviceTicket.alignRight(text.toString(),m_iTextLength));
break;
case DevicePrinter.ALIGN_CENTER:
m_sVisorLine.append(DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_sVisorLine.append(DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_sVisorLine.append(text);
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getDeviceDisplay().writeVisor(m_iVisorAnimation,m_sVisorLine1,m_sVisorLine2);
m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
m_sVisorLine1=null;
m_sVisorLine2=null;
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().endReceipt();
m_iOutputType=OUTPUT_NONE;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printLine(text.toString(),m_dValue1,m_dValue2,attribute3);
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printMessage(text.toString());
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printTotal(text.toString(),m_dValue1);
text=null;
}
break;
}
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      try {
        AudioClip oAudio=Applet.newAudioClip(getClass().getClassLoader().getResource(text.toString()));
        oAudio.play();
      }
 catch (      Exception fnfe) {
      }
      text=null;
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  try {
    BufferedImage image=m_system.getResourceAsImage(text.toString());
    if (image != null) {
      m_oOutputPrinter.printImage(image);
    }
  }
 catch (  Exception fnfe) {
  }
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.printBarCode(bctype,bcposition,text.toString());
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
      m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignRight(text.toString(),m_iTextLength));
    break;
case DevicePrinter.ALIGN_CENTER:
  m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_oOutputPrinter.printText(m_iTextStyle,text.toString());
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endLine();
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endReceipt();
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
if (m_sVisorLine1 == null) {
m_sVisorLine1=m_sVisorLine.toString();
}
 else {
m_sVisorLine2=m_sVisorLine.toString();
}
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine1=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine2=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
m_sVisorLine.append(DeviceTicket.alignRight(text.toString(),m_iTextLength));
break;
case DevicePrinter.ALIGN_CENTER:
m_sVisorLine.append(DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_sVisorLine.append(DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_sVisorLine.append(text);
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getDeviceDisplay().writeVisor(m_iVisorAnimation,m_sVisorLine1,m_sVisorLine2);
m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
m_sVisorLine1=null;
m_sVisorLine2=null;
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().endReceipt();
m_iOutputType=OUTPUT_NONE;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printLine(text.toString(),m_dValue1,m_dValue2,attribute3);
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printMessage(text.toString());
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printTotal(text.toString(),m_dValue1);
text=null;
}
break;
}
}"
20260,"private void reload() throws BasicException {
  String attsetid=(String)filter.createValue();
  bd.setEditable(attsetid != null);
  bd.actionLoad();
  editor.setInsertId(attsetid);
}","private void reload() throws BasicException {
  String attsetid=(String)filter.createValue();
  editor.setInsertId(attsetid);
  bd.setEditable(attsetid != null);
  bd.actionLoad();
}"
20261,"private void reload() throws BasicException {
  String attid=(String)filter.createValue();
  bd.setEditable(attid != null);
  bd.actionLoad();
  editor.setInsertId(attid);
}","private void reload() throws BasicException {
  String attid=(String)filter.createValue();
  editor.setInsertId(attid);
  bd.setEditable(attid != null);
  bd.actionLoad();
}"
20262,"/** 
 * Creates new form JPaymentSelect 
 */
protected JPaymentSelect(java.awt.Dialog parent,boolean modal,ComponentOrientation o){
  super(parent,modal);
  initComponents();
  this.applyComponentOrientation(o);
  getRootPane().setDefaultButton(m_jButtonOK);
}","/** 
 * Creates new form JPaymentSelect 
 */
protected JPaymentSelect(java.awt.Dialog parent,boolean modal,ComponentOrientation o){
  super(parent,modal);
  initComponents();
  this.applyComponentOrientation(o);
}"
20263,"public boolean showDialog(double total,CustomerInfoExt customerext){
  m_aPaymentInfo=new PaymentInfoList();
  accepted=false;
  m_dTotal=total;
  this.customerext=customerext;
  m_jButtonPrint.setSelected(printselected);
  m_jTotalEuros.setText(Formats.CURRENCY.formatValue(new Double(m_dTotal)));
  addTabs();
  if (m_jTabPayment.getTabCount() == 0) {
    m_aPaymentInfo.add(getDefaultPayment(total));
    accepted=true;
  }
 else {
    printState();
    setVisible(true);
  }
  printselected=m_jButtonPrint.isSelected();
  m_jTabPayment.removeAll();
  return accepted;
}","public boolean showDialog(double total,CustomerInfoExt customerext){
  m_aPaymentInfo=new PaymentInfoList();
  accepted=false;
  m_dTotal=total;
  this.customerext=customerext;
  m_jButtonPrint.setSelected(printselected);
  m_jTotalEuros.setText(Formats.CURRENCY.formatValue(new Double(m_dTotal)));
  addTabs();
  if (m_jTabPayment.getTabCount() == 0) {
    m_aPaymentInfo.add(getDefaultPayment(total));
    accepted=true;
  }
 else {
    getRootPane().setDefaultButton(m_jButtonOK);
    printState();
    setVisible(true);
  }
  printselected=m_jButtonPrint.isSelected();
  m_jTabPayment.removeAll();
  return accepted;
}"
20264,"public void init(Session s){
  m_sInitScript=""String_Node_Str"" + s.DB.getName();
  m_version=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  m_dummy=new StaticSentence(s,""String_Node_Str"");
  final ThumbNailBuilder tnb=new ThumbNailBuilder(32,32,""String_Node_Str"");
  peopleread=new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AppUser(dr.getString(1),dr.getString(2),dr.getString(3),dr.getString(4),dr.getString(5),new ImageIcon(tnb.getThumbNail(ImageUtils.readImage(dr.getBytes(6)))));
    }
  }
;
  m_peoplevisible=new StaticSentence(s,""String_Node_Str"" + s.DB.TRUE(),null,peopleread);
  m_peoplebycard=new PreparedSentence(s,""String_Node_Str"" + s.DB.TRUE(),SerializerWriteString.INSTANCE,peopleread);
  m_resourcebytes=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadBytes.INSTANCE);
  Datas[] resourcedata=new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.BYTES};
  m_resourcebytesinsert=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(resourcedata));
  m_resourcebytesupdate=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasicExt(resourcedata,new int[]{1,2,3,1}));
  m_rolepermissions=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadBytes.INSTANCE);
  m_changepassword=new StaticSentence(s,""String_Node_Str"",new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING}));
  m_activecash=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.INT,Datas.TIMESTAMP,Datas.TIMESTAMP}));
  m_insertcash=new StaticSentence(s,""String_Node_Str"" + ""String_Node_Str"",new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.TIMESTAMP,Datas.TIMESTAMP}));
  m_locationfind=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  resetResourcesCache();
}","public void init(Session s){
  m_sInitScript=""String_Node_Str"" + s.DB.getName();
  m_version=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  m_dummy=new StaticSentence(s,""String_Node_Str"");
  final ThumbNailBuilder tnb=new ThumbNailBuilder(32,32,""String_Node_Str"");
  peopleread=new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new AppUser(dr.getString(1),dr.getString(2),dr.getString(3),dr.getString(4),dr.getString(5),new ImageIcon(tnb.getThumbNail(ImageUtils.readImage(dr.getBytes(6)))));
    }
  }
;
  m_peoplevisible=new StaticSentence(s,""String_Node_Str"" + s.DB.TRUE(),null,peopleread);
  m_peoplebycard=new PreparedSentence(s,""String_Node_Str"" + s.DB.TRUE(),SerializerWriteString.INSTANCE,peopleread);
  m_resourcebytes=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadBytes.INSTANCE);
  Datas[] resourcedata=new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.BYTES};
  m_resourcebytesinsert=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasic(resourcedata));
  m_resourcebytesupdate=new PreparedSentence(s,""String_Node_Str"",new SerializerWriteBasicExt(resourcedata,new int[]{1,2,3,1}));
  m_rolepermissions=new PreparedSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadBytes.INSTANCE);
  m_changepassword=new StaticSentence(s,""String_Node_Str"",new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING}));
  m_sequencecash=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadInteger.INSTANCE);
  m_activecash=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.INT,Datas.TIMESTAMP,Datas.TIMESTAMP}));
  m_insertcash=new StaticSentence(s,""String_Node_Str"" + ""String_Node_Str"",new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.TIMESTAMP,Datas.TIMESTAMP}));
  m_locationfind=new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE);
  resetResourcesCache();
}"
20265,"public boolean initApp(AppProperties props){
  m_props=props;
  applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));
  try {
    session=AppViewConnection.createSession(m_props);
  }
 catch (  BasicException e) {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,e.getMessage(),e));
    return false;
  }
  m_dlSystem=(DataLogicSystem)getBean(""String_Node_Str"");
  String sDBVersion=readDataBaseVersion();
  if (!AppLocal.APP_VERSION.equals(sDBVersion)) {
    String sScript=sDBVersion == null ? m_dlSystem.getInitScript() + ""String_Node_Str"" : m_dlSystem.getInitScript() + ""String_Node_Str"" + sDBVersion+ ""String_Node_Str"";
    if (JRootApp.class.getResource(sScript) == null) {
      JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,sDBVersion == null ? AppLocal.getIntString(""String_Node_Str"",session.DB.getName()) : AppLocal.getIntString(""String_Node_Str"")));
      session.close();
      return false;
    }
 else {
      if (JOptionPane.showConfirmDialog(this,AppLocal.getIntString(sDBVersion == null ? ""String_Node_Str"" : ""String_Node_Str""),AppLocal.getIntString(""String_Node_Str""),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
        try {
          BatchSentence bsentence=new BatchSentenceResource(session,sScript);
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_ID));
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_NAME));
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_VERSION));
          java.util.List l=bsentence.list();
          if (l.size() > 0) {
            JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),l.toArray(new Throwable[l.size()])));
          }
        }
 catch (        BasicException e) {
          JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,AppLocal.getIntString(""String_Node_Str""),e));
          session.close();
          return false;
        }
      }
 else {
        session.close();
        return false;
      }
    }
  }
  m_propsdb=m_dlSystem.getResourceAsProperties(m_props.getHost() + ""String_Node_Str"");
  try {
    String sActiveCashIndex=m_propsdb.getProperty(""String_Node_Str"");
    Object[] valcash=sActiveCashIndex == null ? null : m_dlSystem.findActiveCash(sActiveCashIndex);
    if (valcash == null || !m_props.getHost().equals(valcash[0])) {
      setActiveCash(UUID.randomUUID().toString(),1,new Date(),null);
      m_dlSystem.execInsertCash(new Object[]{getActiveCashIndex(),m_props.getHost(),getActiveCashSequence(),getActiveCashDateStart(),getActiveCashDateEnd()});
    }
 else {
      setActiveCash(sActiveCashIndex,(Integer)valcash[1],(Date)valcash[2],(Date)valcash[3]);
    }
  }
 catch (  BasicException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
    session.close();
    return false;
  }
  m_sInventoryLocation=m_propsdb.getProperty(""String_Node_Str"");
  if (m_sInventoryLocation == null) {
    m_sInventoryLocation=""String_Node_Str"";
    m_propsdb.setProperty(""String_Node_Str"",m_sInventoryLocation);
    m_dlSystem.setResourceAsProperties(m_props.getHost() + ""String_Node_Str"",m_propsdb);
  }
  m_TP=new DeviceTicket(m_props);
  m_TTP=new TicketParser(getDeviceTicket(),m_dlSystem);
  printerStart();
  m_Scale=new DeviceScale(m_props);
  m_Scanner=DeviceScannerFactory.createInstance(m_props);
  BufferedImage imgicon=m_dlSystem.getResourceAsImage(""String_Node_Str"");
  m_jLblTitle.setIcon(imgicon == null ? null : new ImageIcon(imgicon));
  m_jLblTitle.setText(m_dlSystem.getResourceAsText(""String_Node_Str""));
  String sWareHouse;
  try {
    sWareHouse=m_dlSystem.findLocationName(m_sInventoryLocation);
  }
 catch (  BasicException e) {
    sWareHouse=null;
  }
  String url;
  try {
    url=session.getURL();
  }
 catch (  SQLException e) {
    url=""String_Node_Str"";
  }
  m_jHost.setText(""String_Node_Str"" + m_props.getHost() + ""String_Node_Str""+ sWareHouse+ ""String_Node_Str""+ url);
  showLogin();
  return true;
}","public boolean initApp(AppProperties props){
  m_props=props;
  applyComponentOrientation(ComponentOrientation.getOrientation(Locale.getDefault()));
  try {
    session=AppViewConnection.createSession(m_props);
  }
 catch (  BasicException e) {
    JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,e.getMessage(),e));
    return false;
  }
  m_dlSystem=(DataLogicSystem)getBean(""String_Node_Str"");
  String sDBVersion=readDataBaseVersion();
  if (!AppLocal.APP_VERSION.equals(sDBVersion)) {
    String sScript=sDBVersion == null ? m_dlSystem.getInitScript() + ""String_Node_Str"" : m_dlSystem.getInitScript() + ""String_Node_Str"" + sDBVersion+ ""String_Node_Str"";
    if (JRootApp.class.getResource(sScript) == null) {
      JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,sDBVersion == null ? AppLocal.getIntString(""String_Node_Str"",session.DB.getName()) : AppLocal.getIntString(""String_Node_Str"")));
      session.close();
      return false;
    }
 else {
      if (JOptionPane.showConfirmDialog(this,AppLocal.getIntString(sDBVersion == null ? ""String_Node_Str"" : ""String_Node_Str""),AppLocal.getIntString(""String_Node_Str""),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
        try {
          BatchSentence bsentence=new BatchSentenceResource(session,sScript);
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_ID));
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_NAME));
          bsentence.putParameter(""String_Node_Str"",Matcher.quoteReplacement(AppLocal.APP_VERSION));
          java.util.List l=bsentence.list();
          if (l.size() > 0) {
            JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),l.toArray(new Throwable[l.size()])));
          }
        }
 catch (        BasicException e) {
          JMessageDialog.showMessage(this,new MessageInf(MessageInf.SGN_DANGER,AppLocal.getIntString(""String_Node_Str""),e));
          session.close();
          return false;
        }
      }
 else {
        session.close();
        return false;
      }
    }
  }
  m_propsdb=m_dlSystem.getResourceAsProperties(m_props.getHost() + ""String_Node_Str"");
  try {
    String sActiveCashIndex=m_propsdb.getProperty(""String_Node_Str"");
    Object[] valcash=sActiveCashIndex == null ? null : m_dlSystem.findActiveCash(sActiveCashIndex);
    if (valcash == null || !m_props.getHost().equals(valcash[0])) {
      setActiveCash(UUID.randomUUID().toString(),m_dlSystem.getSequenceCash(m_props.getHost()) + 1,new Date(),null);
      m_dlSystem.execInsertCash(new Object[]{getActiveCashIndex(),m_props.getHost(),getActiveCashSequence(),getActiveCashDateStart(),getActiveCashDateEnd()});
    }
 else {
      setActiveCash(sActiveCashIndex,(Integer)valcash[1],(Date)valcash[2],(Date)valcash[3]);
    }
  }
 catch (  BasicException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
    session.close();
    return false;
  }
  m_sInventoryLocation=m_propsdb.getProperty(""String_Node_Str"");
  if (m_sInventoryLocation == null) {
    m_sInventoryLocation=""String_Node_Str"";
    m_propsdb.setProperty(""String_Node_Str"",m_sInventoryLocation);
    m_dlSystem.setResourceAsProperties(m_props.getHost() + ""String_Node_Str"",m_propsdb);
  }
  m_TP=new DeviceTicket(m_props);
  m_TTP=new TicketParser(getDeviceTicket(),m_dlSystem);
  printerStart();
  m_Scale=new DeviceScale(m_props);
  m_Scanner=DeviceScannerFactory.createInstance(m_props);
  BufferedImage imgicon=m_dlSystem.getResourceAsImage(""String_Node_Str"");
  m_jLblTitle.setIcon(imgicon == null ? null : new ImageIcon(imgicon));
  m_jLblTitle.setText(m_dlSystem.getResourceAsText(""String_Node_Str""));
  String sWareHouse;
  try {
    sWareHouse=m_dlSystem.findLocationName(m_sInventoryLocation);
  }
 catch (  BasicException e) {
    sWareHouse=null;
  }
  String url;
  try {
    url=session.getURL();
  }
 catch (  SQLException e) {
    url=""String_Node_Str"";
  }
  m_jHost.setText(""String_Node_Str"" + m_props.getHost() + ""String_Node_Str""+ sWareHouse+ ""String_Node_Str""+ url);
  showLogin();
  return true;
}"
20266,"/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}","/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelLinkPoint());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelCaixa());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}"
20267,"/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}","/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelEmpty());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}"
20268,"private void addUnits(double dUnits){
  int i=m_invlines.getSelectedRow();
  if (i >= 0) {
    InventoryLine inv=m_invlines.getLine(i);
    double dunits=inv.getMultiply() + dUnits;
    if (dunits == 0.0) {
      deleteLine(i);
    }
 else {
      inv.setMultiply(inv.getMultiply() + dUnits);
      m_invlines.setLine(i,inv);
    }
  }
}","private void addUnits(double dUnits){
  int i=m_invlines.getSelectedRow();
  if (i >= 0) {
    InventoryLine inv=m_invlines.getLine(i);
    double dunits=inv.getMultiply() + dUnits;
    if (dunits <= 0.0) {
      deleteLine(i);
    }
 else {
      inv.setMultiply(inv.getMultiply() + dUnits);
      m_invlines.setLine(i,inv);
    }
  }
}"
20269,"private void stateTransition(char cTrans){
  if (cTrans == '\u007f') {
    m_jcodebar.setText(null);
  }
 else   if (cTrans == '+') {
    if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
      addUnits(1.0);
    }
 else {
      addUnits(Double.parseDouble(m_jcodebar.getText()));
      m_jcodebar.setText(null);
    }
  }
 else   if (cTrans == '-') {
    if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
      addUnits(-1.0);
    }
 else {
      addUnits(-Double.parseDouble(m_jcodebar.getText()));
      m_jcodebar.setText(null);
    }
  }
 else   if (cTrans == ' ' || cTrans == '=') {
    if (m_invlines.getCount() == 0) {
      Toolkit.getDefaultToolkit().beep();
    }
 else {
      saveData();
    }
  }
 else {
    m_jcodebar.setText(m_jcodebar.getText() + cTrans);
  }
}","private void stateTransition(char cTrans){
  if (cTrans == '\u007f') {
    m_jcodebar.setText(null);
    NUMBER_STATE=DEFAULT;
  }
 else   if (cTrans == '*') {
    MULTIPLY=ACTIVE;
  }
 else   if (cTrans == '+') {
    if (MULTIPLY != DEFAULT && NUMBER_STATE != DEFAULT) {
      setUnits(Double.parseDouble(m_jcodebar.getText()));
      m_jcodebar.setText(null);
    }
 else {
      if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
        addUnits(1.0);
      }
 else {
        addUnits(Double.parseDouble(m_jcodebar.getText()));
        m_jcodebar.setText(null);
      }
    }
    NUMBER_STATE=DEFAULT;
    MULTIPLY=DEFAULT;
  }
 else   if (cTrans == '-') {
    if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
      addUnits(-1.0);
    }
 else {
      addUnits(-Double.parseDouble(m_jcodebar.getText()));
      m_jcodebar.setText(null);
    }
    NUMBER_STATE=DEFAULT;
    MULTIPLY=DEFAULT;
  }
 else   if (cTrans == '.') {
    if (m_jcodebar.getText() == null || m_jcodebar.getText().equals(""String_Node_Str"")) {
      m_jcodebar.setText(""String_Node_Str"");
    }
 else     if (NUMBER_STATE != DECIMAL) {
      m_jcodebar.setText(m_jcodebar.getText() + cTrans);
    }
    NUMBER_STATE=DECIMAL;
  }
 else   if (cTrans == ' ' || cTrans == '=') {
    if (m_invlines.getCount() == 0) {
      Toolkit.getDefaultToolkit().beep();
    }
 else {
      saveData();
    }
  }
 else {
    m_jcodebar.setText(m_jcodebar.getText() + cTrans);
    if (NUMBER_STATE != DECIMAL) {
      NUMBER_STATE=ACTIVE;
    }
  }
}"
20270,"private void stateTransition(char cTrans){
  if (cTrans == '\n') {
    if (m_sBarcode.length() > 0) {
      String sCode=m_sBarcode.toString();
      if (sCode.startsWith(""String_Node_Str"")) {
        try {
          CustomerInfoExt newcustomer=dlSales.findCustomerExt(sCode);
          if (newcustomer == null) {
            Toolkit.getDefaultToolkit().beep();
            new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")).show(this);
          }
 else {
            m_oTicket.setCustomer(newcustomer);
            m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
          }
        }
 catch (        BasicException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
        }
        stateToZero();
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        ProductInfoExt oProduct=new ProductInfoExt();
        oProduct.setReference(null);
        oProduct.setCode(sCode);
        oProduct.setName(""String_Node_Str"" + sCode.substring(3,7));
        oProduct.setPriceSell(Double.parseDouble(sCode.substring(7,12)) / 100);
        oProduct.setTaxCategoryInfo((TaxCategoryInfo)taxcategoriesmodel.getSelectedItem());
        addTicketLine(oProduct,1.0,includeTaxes(oProduct.getTaxCategoryInfo(),oProduct.getPriceSell()));
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        incProductByCodePrice(sCode.substring(0,7),Double.parseDouble(sCode.substring(7,12)) / 100);
      }
 else {
        incProductByCode(sCode);
      }
    }
 else {
      Toolkit.getDefaultToolkit().beep();
    }
  }
 else {
    m_sBarcode.append(cTrans);
    if (cTrans == '\u007f') {
      stateToZero();
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(Character.toString(cTrans));
      m_iNumberStatus=NUMBER_INPUTINT;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTINT)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTZERO) {
      m_jPrice.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTINT) {
      m_jPrice.setText(m_jPrice.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
      m_iNumberStatus=NUMBER_INPUTDEC;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTINT || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTZERO || m_iNumberStatus == NUMBER_INPUTZERODEC)) {
      m_jPrice.setText(""String_Node_Str"");
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"" + Character.toString(cTrans));
      m_iNumberStatus=NUMBER_PORINT;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORINT)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORZERO) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORINT) {
      m_jPor.setText(m_jPor.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
      m_iNumberStatus=NUMBER_PORDEC;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO) {
      if (m_App.getDeviceScale().existsScale() && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            ProductInfoExt product=getInputProduct();
            addTicketLine(product,value.doubleValue(),product.getPriceSell());
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else       if (m_App.getDeviceScale().existsScale()) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
            newline.setMultiply(value.doubleValue());
            newline.setPrice(Math.abs(newline.getPrice()));
            paintTicketLine(i,newline);
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(newline.getMultiply() + 1.0);
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(newline.getMultiply() - 1.0);
        if (newline.getMultiply() <= 0.0) {
          removeTicketLine(i);
        }
 else {
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(dPor);
        newline.setPrice(Math.abs(newline.getPrice()));
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(dPor);
        newline.setPrice(-Math.abs(newline.getPrice()));
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,-product.getPriceSell());
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),-product.getPriceSell());
    }
 else     if (cTrans == ' ' || cTrans == '=') {
      if (m_oTicket.getLinesCount() > 0) {
        if (closeTicket(m_oTicket,m_oTicketExt)) {
          m_ticketsbag.deleteTicket();
        }
 else {
          refreshTicket();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
  }
}","private void stateTransition(char cTrans){
  if (cTrans == '\n') {
    if (m_sBarcode.length() > 0) {
      String sCode=m_sBarcode.toString();
      if (sCode.startsWith(""String_Node_Str"")) {
        try {
          CustomerInfoExt newcustomer=dlSales.findCustomerExt(sCode);
          if (newcustomer == null) {
            Toolkit.getDefaultToolkit().beep();
            new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")).show(this);
          }
 else {
            m_oTicket.setCustomer(newcustomer);
            m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
          }
        }
 catch (        BasicException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
        }
        stateToZero();
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        ProductInfoExt oProduct=new ProductInfoExt();
        oProduct.setReference(null);
        oProduct.setCode(sCode);
        oProduct.setName(""String_Node_Str"" + sCode.substring(3,7));
        oProduct.setPriceSell(Double.parseDouble(sCode.substring(7,12)) / 100);
        oProduct.setTaxCategoryInfo((TaxCategoryInfo)taxcategoriesmodel.getSelectedItem());
        addTicketLine(oProduct,1.0,includeTaxes(oProduct.getTaxCategoryInfo(),oProduct.getPriceSell()));
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        incProductByCodePrice(sCode.substring(0,7),Double.parseDouble(sCode.substring(7,12)) / 100);
      }
 else {
        incProductByCode(sCode);
      }
    }
 else {
      Toolkit.getDefaultToolkit().beep();
    }
  }
 else {
    m_sBarcode.append(cTrans);
    if (cTrans == '\u007f') {
      stateToZero();
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(Character.toString(cTrans));
      m_iNumberStatus=NUMBER_INPUTINT;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTINT)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTZERO) {
      m_jPrice.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTINT) {
      m_jPrice.setText(m_jPrice.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
      m_iNumberStatus=NUMBER_INPUTDEC;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTINT || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTZERO || m_iNumberStatus == NUMBER_INPUTZERODEC)) {
      m_jPrice.setText(""String_Node_Str"");
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"" + Character.toString(cTrans));
      m_iNumberStatus=NUMBER_PORINT;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORINT)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORZERO) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORINT) {
      m_jPor.setText(m_jPor.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
      m_iNumberStatus=NUMBER_PORDEC;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO) {
      if (m_App.getDeviceScale().existsScale() && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            ProductInfoExt product=getInputProduct();
            addTicketLine(product,value.doubleValue(),product.getPriceSell());
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else       if (m_App.getDeviceScale().existsScale()) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
            newline.setMultiply(value.doubleValue());
            newline.setPrice(Math.abs(newline.getPrice()));
            paintTicketLine(i,newline);
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
          newline.setMultiply(newline.getMultiply() - 1.0);
          paintTicketLine(i,newline);
        }
 else {
          newline.setMultiply(newline.getMultiply() + 1.0);
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
          newline.setMultiply(newline.getMultiply() + 1.0);
          paintTicketLine(i,newline);
        }
 else {
          newline.setMultiply(newline.getMultiply() - 1.0);
          if (newline.getMultiply() <= 0.0) {
            removeTicketLine(i);
          }
 else {
            paintTicketLine(i,newline);
          }
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
          newline.setMultiply(-dPor);
          newline.setPrice(Math.abs(newline.getPrice()));
          paintTicketLine(i,newline);
        }
 else {
          newline.setMultiply(dPor);
          newline.setPrice(Math.abs(newline.getPrice()));
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
          newline.setMultiply(dPor);
          newline.setPrice(Math.abs(newline.getPrice()));
          paintTicketLine(i,newline);
        }
 else {
          newline.setMultiply(dPor);
          newline.setPrice(-Math.abs(newline.getPrice()));
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,-product.getPriceSell());
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),-product.getPriceSell());
    }
 else     if (cTrans == ' ' || cTrans == '=') {
      if (m_oTicket.getLinesCount() > 0) {
        if (closeTicket(m_oTicket,m_oTicketExt)) {
          m_ticketsbag.deleteTicket();
        }
 else {
          refreshTicket();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
  }
}"
20271,"private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}","private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
      m_jEditLine.setVisible(false);
      m_jList.setVisible(false);
    }
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}"
20272,"public final void saveTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (ticket.getTicketId() == 0) {
switch (ticket.getTicketType()) {
case TicketInfo.RECEIPT_NORMAL:
          ticket.setTicketId(getNextTicketIndex().intValue());
        break;
case TicketInfo.RECEIPT_REFUND:
      ticket.setTicketId(getNextTicketRefundIndex().intValue());
    break;
case TicketInfo.RECEIPT_PAYMENT:
  ticket.setTicketId(getNextTicketPaymentIndex().intValue());
break;
default :
throw new BasicException();
}
}
new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,ticket.getId());
setString(2,ticket.getActiveCash());
setTimestamp(3,ticket.getDate());
try {
ByteArrayOutputStream o=new ByteArrayOutputStream();
ticket.getProperties().storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
setBytes(4,o.toByteArray());
}
 catch (IOException e) {
setBytes(4,null);
}
}
}
);
new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,ticket.getId());
setInt(2,ticket.getTicketType());
setInt(3,ticket.getTicketId());
setString(4,ticket.getUser().getId());
setString(5,ticket.getCustomerId());
}
}
);
SentenceExec ticketlineinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteBuilder.INSTANCE);
for (TicketLineInfo l : ticket.getLines()) {
ticketlineinsert.exec(l);
if (l.getProductID() != null) {
getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),ticket.getDate(),l.getMultiply() < 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,l.getProductID(),new Double(-l.getMultiply()),new Double(l.getPrice())});
}
}
SentenceExec paymentinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
for (final PaymentInfo p : ticket.getPayments()) {
paymentinsert.exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,UUID.randomUUID().toString());
setString(2,ticket.getId());
setString(3,p.getName());
setDouble(4,p.getTotal());
setString(5,ticket.getTransactionID());
setString(6,ticket.getReturnMessage());
}
}
);
if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
ticket.getCustomer().updateCurDebt(p.getTotal(),ticket.getDate());
getDebtUpdate().exec(new DataParams(){
public void writeValues() throws BasicException {
setDouble(1,ticket.getCustomer().getCurdebt());
setTimestamp(2,ticket.getCustomer().getCurdate());
setString(3,ticket.getCustomer().getId());
}
}
);
}
}
SentenceExec taxlinesinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
if (ticket.getTaxes() != null) {
for (final TicketTaxInfo tickettax : ticket.getTaxes()) {
taxlinesinsert.exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,UUID.randomUUID().toString());
setString(2,ticket.getId());
setString(3,tickettax.getTaxInfo().getId());
setDouble(4,tickettax.getSubTotal());
setDouble(5,tickettax.getTax());
}
}
);
}
}
return null;
}
}
;
t.execute();
}","public final void saveTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (ticket.getTicketId() == 0) {
switch (ticket.getTicketType()) {
case TicketInfo.RECEIPT_NORMAL:
          ticket.setTicketId(getNextTicketIndex().intValue());
        break;
case TicketInfo.RECEIPT_REFUND:
      ticket.setTicketId(getNextTicketRefundIndex().intValue());
    break;
case TicketInfo.RECEIPT_PAYMENT:
  ticket.setTicketId(getNextTicketPaymentIndex().intValue());
break;
default :
throw new BasicException();
}
}
new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,ticket.getId());
setString(2,ticket.getActiveCash());
setTimestamp(3,ticket.getDate());
try {
ByteArrayOutputStream o=new ByteArrayOutputStream();
ticket.getProperties().storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
setBytes(4,o.toByteArray());
}
 catch (IOException e) {
setBytes(4,null);
}
}
}
);
new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,ticket.getId());
setInt(2,ticket.getTicketType());
setInt(3,ticket.getTicketId());
setString(4,ticket.getUser().getId());
setString(5,ticket.getCustomerId());
}
}
);
SentenceExec ticketlineinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteBuilder.INSTANCE);
for (TicketLineInfo l : ticket.getLines()) {
ticketlineinsert.exec(l);
if (l.getProductID() != null) {
getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),ticket.getDate(),l.getMultiply() < 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,l.getProductID(),new Double(-l.getMultiply()),new Double(l.getPrice())});
}
}
SentenceExec paymentinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
for (final PaymentInfo p : ticket.getPayments()) {
paymentinsert.exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,UUID.randomUUID().toString());
setString(2,ticket.getId());
setString(3,p.getName());
setDouble(4,p.getTotal());
setString(5,ticket.getTransactionID());
setBytes(6,(byte[])Formats.BYTEA.parseValue(ticket.getReturnMessage()));
}
}
);
if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
ticket.getCustomer().updateCurDebt(p.getTotal(),ticket.getDate());
getDebtUpdate().exec(new DataParams(){
public void writeValues() throws BasicException {
setDouble(1,ticket.getCustomer().getCurdebt());
setTimestamp(2,ticket.getCustomer().getCurdate());
setString(3,ticket.getCustomer().getId());
}
}
);
}
}
SentenceExec taxlinesinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
if (ticket.getTaxes() != null) {
for (final TicketTaxInfo tickettax : ticket.getTaxes()) {
taxlinesinsert.exec(new DataParams(){
public void writeValues() throws BasicException {
setString(1,UUID.randomUUID().toString());
setString(2,ticket.getId());
setString(3,tickettax.getTaxInfo().getId());
setDouble(4,tickettax.getSubTotal());
setDouble(5,tickettax.getTax());
}
}
);
}
}
return null;
}
}
;
t.execute();
}"
20273,"public void setProperty(String sKey,String sValue){
  m_propsconfig.setProperty(sKey,sValue);
}","public void setProperty(String sKey,String sValue){
  if (sValue == null) {
    m_propsconfig.remove(sKey);
  }
 else {
    m_propsconfig.setProperty(sKey,sValue);
  }
}"
20274,"@Override public Object createValue() throws BasicException {
  boolean dateRange=false;
  Object[] afilter=new Object[12];
  if (jtxtTicketID.getText() == null || jtxtTicketID.getText().equals(""String_Node_Str"")) {
    afilter[0]=QBFCompareEnum.COMP_NONE;
    afilter[1]=null;
  }
 else {
    afilter[0]=QBFCompareEnum.COMP_EQUALS;
    afilter[1]=jtxtTicketID.getValueInteger();
  }
  if (jCheckBoxSales.isSelected() && jCheckBoxRefunds.isSelected() || !jCheckBoxSales.isSelected() && !jCheckBoxRefunds.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_NONE;
    afilter[3]=null;
  }
 else   if (jCheckBoxSales.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_EQUALS;
    afilter[3]=0;
  }
 else   if (jCheckBoxRefunds.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_EQUALS;
    afilter[3]=1;
  }
  afilter[5]=jtxtMoney.getDoubleValue();
  afilter[4]=afilter[5] == null ? QBFCompareEnum.COMP_NONE : jcboMoney.getSelectedItem();
  if (jcboTimeFrame.getSelectedItem() == null) {
    dateRange=true;
    afilter[6]=QBFCompareEnum.COMP_NONE;
    afilter[7]=null;
    afilter[8]=QBFCompareEnum.COMP_NONE;
    afilter[9]=null;
  }
 else {
    int year=cal.get(Calendar.YEAR);
    int month=cal.get(Calendar.MONTH) + 1;
    int day=cal.get(Calendar.DAY_OF_MONTH);
    if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + year + ""String_Node_Str""+ month+ ""String_Node_Str""+ day+ ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + year + ""String_Node_Str""+ month+ ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + Integer.toString(year) + ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
  }
  if (dateRange) {
    String dayF=(jcboDayFrom.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboDayFrom.getSelectedItem();
    String monthF=(jcboMonthFrom.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboMonthFrom.getSelectedItem();
    String dayT=(jcboDayTo.getSelectedItem() == null) ? ""String_Node_Str"" : String.valueOf(Integer.parseInt((String)jcboDayTo.getSelectedItem()) + 1);
    String monthT=(jcboMonthTo.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboMonthTo.getSelectedItem();
    if (jcboYearFrom.getSelectedItem() == null && jcboYearTo.getSelectedItem() == null) {
      afilter[6]=QBFCompareEnum.COMP_NONE;
      afilter[7]=null;
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboYearFrom.getSelectedItem() == null && jcboYearTo.getSelectedItem() != null) {
      afilter[6]=QBFCompareEnum.COMP_NONE;
      afilter[7]=null;
      afilter[8]=QBFCompareEnum.COMP_LESSOREQUALS;
      afilter[9]=jcboYearTo.getSelectedItem() + ""String_Node_Str"" + monthT+ ""String_Node_Str""+ dayT;
    }
 else     if (jcboYearFrom.getSelectedItem() != null && jcboYearTo.getSelectedItem() == null) {
      afilter[6]=QBFCompareEnum.COMP_GREATEROREQUALS;
      afilter[7]=jcboYearFrom.getSelectedItem() + ""String_Node_Str"" + monthF+ ""String_Node_Str""+ dayF;
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else {
      afilter[6]=QBFCompareEnum.COMP_GREATEROREQUALS;
      afilter[7]=jcboYearFrom.getSelectedItem() + ""String_Node_Str"" + monthF+ ""String_Node_Str""+ dayF;
      afilter[8]=QBFCompareEnum.COMP_LESSOREQUALS;
      afilter[9]=jcboYearTo.getSelectedItem() + ""String_Node_Str"" + monthT+ ""String_Node_Str""+ dayT;
    }
  }
  if (jcboUser.getSelectedItem() == null) {
    afilter[10]=QBFCompareEnum.COMP_NONE;
    afilter[11]=null;
  }
 else {
    afilter[10]=QBFCompareEnum.COMP_EQUALS;
    afilter[11]=((TaxCategoryInfo)jcboUser.getSelectedItem()).getName();
  }
  return afilter;
}","@Override public Object createValue() throws BasicException {
  boolean dateRange=false;
  Object[] afilter=new Object[12];
  if (jtxtTicketID.getText() == null || jtxtTicketID.getText().equals(""String_Node_Str"")) {
    afilter[0]=QBFCompareEnum.COMP_NONE;
    afilter[1]=null;
  }
 else {
    afilter[0]=QBFCompareEnum.COMP_EQUALS;
    afilter[1]=jtxtTicketID.getValueInteger();
  }
  if (jCheckBoxSales.isSelected() && jCheckBoxRefunds.isSelected() || !jCheckBoxSales.isSelected() && !jCheckBoxRefunds.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_NONE;
    afilter[3]=null;
  }
 else   if (jCheckBoxSales.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_EQUALS;
    afilter[3]=0;
  }
 else   if (jCheckBoxRefunds.isSelected()) {
    afilter[2]=QBFCompareEnum.COMP_EQUALS;
    afilter[3]=1;
  }
  afilter[5]=jtxtMoney.getDoubleValue();
  afilter[4]=afilter[5] == null ? QBFCompareEnum.COMP_NONE : jcboMoney.getSelectedItem();
  if (jcboTimeFrame.getSelectedItem() == null) {
    dateRange=true;
    afilter[6]=QBFCompareEnum.COMP_NONE;
    afilter[7]=null;
    afilter[8]=QBFCompareEnum.COMP_NONE;
    afilter[9]=null;
  }
 else {
    int year=cal.get(Calendar.YEAR);
    String month=(cal.get(Calendar.MONTH) + 1 < 10) ? ""String_Node_Str"" + (cal.get(Calendar.MONTH) + 1) : Integer.toString(cal.get(Calendar.MONTH) + 1);
    String day=(cal.get(Calendar.DAY_OF_MONTH) < 10) ? ""String_Node_Str"" + cal.get(Calendar.DAY_OF_MONTH) : Integer.toString(cal.get(Calendar.DAY_OF_MONTH));
    if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + year + ""String_Node_Str""+ month+ ""String_Node_Str""+ day+ ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + year + ""String_Node_Str""+ month+ ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboTimeFrame.getSelectedItem() == LocalRes.getIntString(""String_Node_Str"")) {
      afilter[6]=QBFCompareEnum.COMP_RE;
      afilter[7]=""String_Node_Str"" + Integer.toString(year) + ""String_Node_Str"";
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
  }
  if (dateRange) {
    String dayF=(jcboDayFrom.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboDayFrom.getSelectedItem();
    String monthF=(jcboMonthFrom.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboMonthFrom.getSelectedItem();
    String dayT=(jcboDayTo.getSelectedItem() == null) ? ""String_Node_Str"" : String.valueOf(Integer.parseInt((String)jcboDayTo.getSelectedItem()) + 1);
    String monthT=(jcboMonthTo.getSelectedItem() == null) ? ""String_Node_Str"" : (String)jcboMonthTo.getSelectedItem();
    if (jcboYearFrom.getSelectedItem() == null && jcboYearTo.getSelectedItem() == null) {
      afilter[6]=QBFCompareEnum.COMP_NONE;
      afilter[7]=null;
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else     if (jcboYearFrom.getSelectedItem() == null && jcboYearTo.getSelectedItem() != null) {
      afilter[6]=QBFCompareEnum.COMP_NONE;
      afilter[7]=null;
      afilter[8]=QBFCompareEnum.COMP_LESSOREQUALS;
      afilter[9]=jcboYearTo.getSelectedItem() + ""String_Node_Str"" + monthT+ ""String_Node_Str""+ dayT;
    }
 else     if (jcboYearFrom.getSelectedItem() != null && jcboYearTo.getSelectedItem() == null) {
      afilter[6]=QBFCompareEnum.COMP_GREATEROREQUALS;
      afilter[7]=jcboYearFrom.getSelectedItem() + ""String_Node_Str"" + monthF+ ""String_Node_Str""+ dayF;
      afilter[8]=QBFCompareEnum.COMP_NONE;
      afilter[9]=null;
    }
 else {
      afilter[6]=QBFCompareEnum.COMP_GREATEROREQUALS;
      afilter[7]=jcboYearFrom.getSelectedItem() + ""String_Node_Str"" + monthF+ ""String_Node_Str""+ dayF;
      afilter[8]=QBFCompareEnum.COMP_LESSOREQUALS;
      afilter[9]=jcboYearTo.getSelectedItem() + ""String_Node_Str"" + monthT+ ""String_Node_Str""+ dayT;
    }
  }
  if (jcboUser.getSelectedItem() == null) {
    afilter[10]=QBFCompareEnum.COMP_NONE;
    afilter[11]=null;
  }
 else {
    afilter[10]=QBFCompareEnum.COMP_EQUALS;
    afilter[11]=((TaxCategoryInfo)jcboUser.getSelectedItem()).getName();
  }
  return afilter;
}"
20275,"private void jcboPaymentGatewayActionPerformed(java.awt.event.ActionEvent evt){
  pc=(PaymentConfiguration)paymentsName.get(comboValue(jcboPaymentGateway.getSelectedItem()));
  jPanel2.removeAll();
  jPanel2.add(pc.getComponent());
  jPanel2.revalidate();
  jPanel2.repaint();
}","private void jcboPaymentGatewayActionPerformed(java.awt.event.ActionEvent evt){
  pc=paymentsName.get(comboValue(jcboPaymentGateway.getSelectedItem()));
  if (pc != null) {
    jPanel2.removeAll();
    jPanel2.add(pc.getComponent());
    jPanel2.revalidate();
    jPanel2.repaint();
  }
}"
20276,"/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  initializePaymentsName();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboPaymentGateway.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}","/** 
 * Creates new form JPanelConfigPayment 
 */
public JPanelConfigPayment(){
  initComponents();
  jcboCardReader.addActionListener(dirty);
  jcboPaymentGateway.addActionListener(dirty);
  jchkPaymentTest.addActionListener(dirty);
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  initPayments(""String_Node_Str"",new ConfigPaymentPanelGeneric());
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
  jcboCardReader.addItem(""String_Node_Str"");
}"
20277,"@Override public void loadProperties(AppConfig config){
  jtxtCommerceCode.setText(config.getProperty(""String_Node_Str""));
  AltEncrypter cypher=new AltEncrypter(""String_Node_Str"");
  if (config.getProperty(""String_Node_Str"") != null) {
    jtxtCommerceTerminal.setText(comboValue(config.getProperty(""String_Node_Str"")));
  }
  if (config.getProperty(""String_Node_Str"") != null) {
    jtxtCommerceSign.setText(cypher.decrypt(config.getProperty(""String_Node_Str"").substring(6)));
  }
  if (config.getProperty(""String_Node_Str"") != null) {
    jCheckBox1.setSelected(Boolean.valueOf(config.getProperty(""String_Node_Str"")).booleanValue());
  }
}","@Override public void loadProperties(AppConfig config){
  String sCommerceID=config.getProperty(""String_Node_Str"");
  String sCommerceTerminal=config.getProperty(""String_Node_Str"");
  String sCommerceSign=config.getProperty(""String_Node_Str"");
  String sCommerceSHA=config.getProperty(""String_Node_Str"");
  if (sCommerceID != null && sCommerceTerminal != null && sCommerceSign != null && sCommerceSHA != null && sCommerceSign.startsWith(""String_Node_Str"")) {
    jtxtCommerceCode.setText(config.getProperty(""String_Node_Str""));
    AltEncrypter cypher=new AltEncrypter(""String_Node_Str"");
    jtxtCommerceTerminal.setText(comboValue(config.getProperty(""String_Node_Str"")));
    jtxtCommerceSign.setText(cypher.decrypt(config.getProperty(""String_Node_Str"").substring(6)));
    jCheckBox1.setSelected(Boolean.valueOf(config.getProperty(""String_Node_Str"")).booleanValue());
  }
}"
20278,"private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
      m_jEditLine.setVisible(false);
      m_jList.setVisible(false);
    }
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}","private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
    resetSouthComponent();
  }
 else {
    if (m_oTicket.getTicketType() == TicketInfo.RECEIPT_REFUND) {
      m_jEditLine.setVisible(false);
      m_jList.setVisible(false);
    }
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    resetSouthComponent();
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}"
20279,"/** 
 * Creates new form JPanelConfigLocale 
 */
public JPanelConfigLocale(){
  initComponents();
  jcboLocale.addActionListener(dirty);
  jcboInteger.addActionListener(dirty);
  jcboDouble.addActionListener(dirty);
  jcboCurrency.addActionListener(dirty);
  jcboPercent.addActionListener(dirty);
  jcboDate.addActionListener(dirty);
  jcboTime.addActionListener(dirty);
  jcboDatetime.addActionListener(dirty);
  Locale[] availablelocales=Locale.getAvailableLocales();
  Arrays.sort(availablelocales,new LocaleComparator());
  jcboLocale.addItem(new LocaleInfo(null));
  for (int i=0; i < availablelocales.length; i++) {
    jcboLocale.addItem(new LocaleInfo(availablelocales[i]));
  }
  jcboInteger.addItem(DEFAULT_VALUE);
  jcboInteger.addItem(""String_Node_Str"");
  jcboInteger.addItem(""String_Node_Str"");
  jcboDouble.addItem(DEFAULT_VALUE);
  jcboDouble.addItem(""String_Node_Str"");
  jcboDouble.addItem(""String_Node_Str"");
  jcboCurrency.addItem(DEFAULT_VALUE);
  jcboCurrency.addItem(""String_Node_Str"");
  jcboCurrency.addItem(""String_Node_Str"");
  jcboPercent.addItem(DEFAULT_VALUE);
  jcboPercent.addItem(""String_Node_Str"");
  jcboDate.addItem(DEFAULT_VALUE);
  jcboTime.addItem(DEFAULT_VALUE);
  jcboDatetime.addItem(DEFAULT_VALUE);
}","/** 
 * Creates new form JPanelConfigLocale 
 */
public JPanelConfigLocale(){
  initComponents();
  jcboLocale.addActionListener(dirty);
  jcboInteger.addActionListener(dirty);
  jcboDouble.addActionListener(dirty);
  jcboCurrency.addActionListener(dirty);
  jcboPercent.addActionListener(dirty);
  jcboDate.addActionListener(dirty);
  jcboTime.addActionListener(dirty);
  jcboDatetime.addActionListener(dirty);
  List<Locale> availablelocales=new ArrayList<Locale>();
  availablelocales.addAll(Arrays.asList(Locale.getAvailableLocales()));
  addLocale(availablelocales,new Locale(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  addLocale(availablelocales,new Locale(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Collections.sort(availablelocales,new LocaleComparator());
  jcboLocale.addItem(new LocaleInfo(null));
  for (  Locale l : availablelocales) {
    jcboLocale.addItem(new LocaleInfo(l));
  }
  jcboInteger.addItem(DEFAULT_VALUE);
  jcboInteger.addItem(""String_Node_Str"");
  jcboInteger.addItem(""String_Node_Str"");
  jcboDouble.addItem(DEFAULT_VALUE);
  jcboDouble.addItem(""String_Node_Str"");
  jcboDouble.addItem(""String_Node_Str"");
  jcboCurrency.addItem(DEFAULT_VALUE);
  jcboCurrency.addItem(""String_Node_Str"");
  jcboCurrency.addItem(""String_Node_Str"");
  jcboPercent.addItem(DEFAULT_VALUE);
  jcboPercent.addItem(""String_Node_Str"");
  jcboDate.addItem(DEFAULT_VALUE);
  jcboTime.addItem(DEFAULT_VALUE);
  jcboDatetime.addItem(DEFAULT_VALUE);
}"
20280,"public int compare(Locale o1,Locale o2){
  return o1.toString().compareTo(o2.toString());
}","public int compare(Locale o1,Locale o2){
  return o1.getDisplayName().compareTo(o2.getDisplayName());
}"
20281,"private Object executeEvent(TicketInfo ticket,Object ticketext,String eventkey,ScriptArg... args){
  String resource=dlSystem.getResourceAsXML(m_jbtnconfig.getEvent(eventkey));
  if (resource == null) {
    return null;
  }
 else {
    ScriptObject scr=new ScriptObject(ticket,ticketext);
    return evalScript(scr,resource,args);
  }
}","private Object executeEvent(TicketInfo ticket,Object ticketext,String eventkey,ScriptArg... args){
  String resource=m_jbtnconfig.getEvent(eventkey);
  if (resource == null) {
    return null;
  }
 else {
    ScriptObject scr=new ScriptObject(ticket,ticketext);
    return evalScript(scr,resource,args);
  }
}"
20282,"public void execute(PaymentInfoMagcard payinfo){
}","public void execute(PaymentInfoMagcard payinfo){
  payinfo.paymentOK(""String_Node_Str"",payinfo.getTransactionID(),""String_Node_Str"");
}"
20283,"public void saveProperties(AppConfig config){
  config.setProperty(""String_Node_Str"",jtxtMachineHostname.getText());
  LAFInfo laf=(LAFInfo)jcboLAF.getSelectedItem();
  config.setProperty(""String_Node_Str"",laf == null ? System.getProperty(""String_Node_Str"",""String_Node_Str"") : laf.getClassName());
  config.setProperty(""String_Node_Str"",comboValue(jcboMachineScreenmode.getSelectedItem()));
  config.setProperty(""String_Node_Str"",comboValue(jcboTicketsBag.getSelectedItem()));
  String sMachinePrinter=comboValue(jcboMachinePrinter.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + comboValue(jcboConnPrinter.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + m_jtxtJPOSPrinter.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter);
  }
  String sMachinePrinter2=comboValue(jcboMachinePrinter2.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + comboValue(jcboConnPrinter2.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter2.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + m_jtxtJPOSPrinter2.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer2.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter2);
  }
  String sMachinePrinter3=comboValue(jcboMachinePrinter3.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + comboValue(jcboConnPrinter3.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter3.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + m_jtxtJPOSPrinter3.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer3.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter3);
  }
  String sMachineDisplay=comboValue(jcboMachineDisplay.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + comboValue(jcboConnDisplay.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialDisplay.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + m_jtxtJPOSName.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineDisplay);
  }
  String sMachineScale=comboValue(jcboMachineScale.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScale) || ""String_Node_Str"".equals(sMachineScale)) {
    config.setProperty(""String_Node_Str"",sMachineScale + ""String_Node_Str"" + comboValue(jcboSerialScale.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScale);
  }
  String sMachineScanner=comboValue(jcboMachineScanner.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScanner)) {
    config.setProperty(""String_Node_Str"",sMachineScanner + ""String_Node_Str"" + comboValue(jcboSerialScanner.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScanner);
  }
  config.setProperty(""String_Node_Str"",comboValue(cboPrinters.getSelectedItem()));
  config.setProperty(""String_Node_Str"",String.valueOf(m_ReceiptPrinter.isSelected()));
  dirty.setDirty(false);
}","public void saveProperties(AppConfig config){
  config.setProperty(""String_Node_Str"",uniqueinstance);
  config.setProperty(""String_Node_Str"",jtxtMachineHostname.getText());
  LAFInfo laf=(LAFInfo)jcboLAF.getSelectedItem();
  config.setProperty(""String_Node_Str"",laf == null ? System.getProperty(""String_Node_Str"",""String_Node_Str"") : laf.getClassName());
  config.setProperty(""String_Node_Str"",comboValue(jcboMachineScreenmode.getSelectedItem()));
  config.setProperty(""String_Node_Str"",comboValue(jcboTicketsBag.getSelectedItem()));
  String sMachinePrinter=comboValue(jcboMachinePrinter.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter) || ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)|| ""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + comboValue(jcboConnPrinter.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter + ""String_Node_Str"" + m_jtxtJPOSPrinter.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter);
  }
  String sMachinePrinter2=comboValue(jcboMachinePrinter2.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2) || ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)|| ""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + comboValue(jcboConnPrinter2.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter2.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter2)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter2 + ""String_Node_Str"" + m_jtxtJPOSPrinter2.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer2.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter2);
  }
  String sMachinePrinter3=comboValue(jcboMachinePrinter3.getSelectedItem());
  if (""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3) || ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)|| ""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + comboValue(jcboConnPrinter3.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialPrinter3.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachinePrinter3)) {
    config.setProperty(""String_Node_Str"",sMachinePrinter3 + ""String_Node_Str"" + m_jtxtJPOSPrinter3.getText()+ ""String_Node_Str""+ m_jtxtJPOSDrawer3.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachinePrinter3);
  }
  String sMachineDisplay=comboValue(jcboMachineDisplay.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay) || ""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + comboValue(jcboConnDisplay.getSelectedItem())+ ""String_Node_Str""+ comboValue(jcboSerialDisplay.getSelectedItem()));
  }
 else   if (""String_Node_Str"".equals(sMachineDisplay)) {
    config.setProperty(""String_Node_Str"",sMachineDisplay + ""String_Node_Str"" + m_jtxtJPOSName.getText());
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineDisplay);
  }
  String sMachineScale=comboValue(jcboMachineScale.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScale) || ""String_Node_Str"".equals(sMachineScale)) {
    config.setProperty(""String_Node_Str"",sMachineScale + ""String_Node_Str"" + comboValue(jcboSerialScale.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScale);
  }
  String sMachineScanner=comboValue(jcboMachineScanner.getSelectedItem());
  if (""String_Node_Str"".equals(sMachineScanner)) {
    config.setProperty(""String_Node_Str"",sMachineScanner + ""String_Node_Str"" + comboValue(jcboSerialScanner.getSelectedItem()));
  }
 else {
    config.setProperty(""String_Node_Str"",sMachineScanner);
  }
  config.setProperty(""String_Node_Str"",comboValue(cboPrinters.getSelectedItem()));
  config.setProperty(""String_Node_Str"",String.valueOf(m_ReceiptPrinter.isSelected()));
  dirty.setDirty(false);
}"
20284,"public void loadProperties(AppConfig config){
  jtxtMachineHostname.setText(config.getProperty(""String_Node_Str""));
  String lafclass=config.getProperty(""String_Node_Str"");
  jcboLAF.setSelectedItem(null);
  for (int i=0; i < jcboLAF.getItemCount(); i++) {
    LAFInfo lafinfo=(LAFInfo)jcboLAF.getItemAt(i);
    if (lafinfo.getClassName().equals(lafclass)) {
      jcboLAF.setSelectedIndex(i);
      break;
    }
  }
  jcboMachineScreenmode.setSelectedItem(config.getProperty(""String_Node_Str""));
  jcboTicketsBag.setSelectedItem(config.getProperty(""String_Node_Str""));
  StringParser p=new StringParser(config.getProperty(""String_Node_Str""));
  String sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter.setSelectedItem(sparam);
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    m_jtxtJPOSPrinter.setText(p.nextToken(','));
    m_jtxtJPOSDrawer.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter.setSelectedItem(sparam);
    jcboConnPrinter.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter2.setSelectedItem(sparam);
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    m_jtxtJPOSPrinter2.setText(p.nextToken(','));
    m_jtxtJPOSDrawer2.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter2.setSelectedItem(sparam);
    jcboConnPrinter2.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter3.setSelectedItem(sparam);
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    m_jtxtJPOSPrinter3.setText(p.nextToken(','));
    m_jtxtJPOSDrawer3.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter3.setSelectedItem(sparam);
    jcboConnPrinter3.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(""String_Node_Str"");
    jcboConnDisplay.setSelectedItem(sparam);
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(sparam);
    m_jtxtJPOSName.setText(p.nextToken(','));
  }
 else {
    jcboMachineDisplay.setSelectedItem(sparam);
    jcboConnDisplay.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScale.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboSerialScale.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScanner.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam)) {
    jcboSerialScanner.setSelectedItem(p.nextToken(','));
  }
  cboPrinters.setSelectedItem(config.getProperty(""String_Node_Str""));
  m_ReceiptPrinter.setSelected(""String_Node_Str"".equals(config.getProperty(""String_Node_Str"")));
  dirty.setDirty(false);
}","public void loadProperties(AppConfig config){
  uniqueinstance=config.getProperty(""String_Node_Str"");
  jtxtMachineHostname.setText(config.getProperty(""String_Node_Str""));
  String lafclass=config.getProperty(""String_Node_Str"");
  jcboLAF.setSelectedItem(null);
  for (int i=0; i < jcboLAF.getItemCount(); i++) {
    LAFInfo lafinfo=(LAFInfo)jcboLAF.getItemAt(i);
    if (lafinfo.getClassName().equals(lafclass)) {
      jcboLAF.setSelectedIndex(i);
      break;
    }
  }
  jcboMachineScreenmode.setSelectedItem(config.getProperty(""String_Node_Str""));
  jcboTicketsBag.setSelectedItem(config.getProperty(""String_Node_Str""));
  StringParser p=new StringParser(config.getProperty(""String_Node_Str""));
  String sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter.setSelectedItem(sparam);
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter.setSelectedItem(sparam);
    m_jtxtJPOSPrinter.setText(p.nextToken(','));
    m_jtxtJPOSDrawer.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter.setSelectedItem(sparam);
    jcboConnPrinter.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter2.setSelectedItem(sparam);
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter2.setSelectedItem(sparam);
    m_jtxtJPOSPrinter2.setText(p.nextToken(','));
    m_jtxtJPOSDrawer2.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter2.setSelectedItem(sparam);
    jcboConnPrinter2.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter2.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(""String_Node_Str"");
    jcboConnPrinter3.setSelectedItem(sparam);
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachinePrinter3.setSelectedItem(sparam);
    m_jtxtJPOSPrinter3.setText(p.nextToken(','));
    m_jtxtJPOSDrawer3.setText(p.nextToken(','));
  }
 else {
    jcboMachinePrinter3.setSelectedItem(sparam);
    jcboConnPrinter3.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialPrinter3.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=unifySerialInterface(p.nextToken(':'));
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(""String_Node_Str"");
    jcboConnDisplay.setSelectedItem(sparam);
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
 else   if (""String_Node_Str"".equals(sparam)) {
    jcboMachineDisplay.setSelectedItem(sparam);
    m_jtxtJPOSName.setText(p.nextToken(','));
  }
 else {
    jcboMachineDisplay.setSelectedItem(sparam);
    jcboConnDisplay.setSelectedItem(unifySerialInterface(p.nextToken(',')));
    jcboSerialDisplay.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScale.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam) || ""String_Node_Str"".equals(sparam)) {
    jcboSerialScale.setSelectedItem(p.nextToken(','));
  }
  p=new StringParser(config.getProperty(""String_Node_Str""));
  sparam=p.nextToken(':');
  jcboMachineScanner.setSelectedItem(sparam);
  if (""String_Node_Str"".equals(sparam)) {
    jcboSerialScanner.setSelectedItem(p.nextToken(','));
  }
  cboPrinters.setSelectedItem(config.getProperty(""String_Node_Str""));
  m_ReceiptPrinter.setSelected(""String_Node_Str"".equals(config.getProperty(""String_Node_Str"")));
  dirty.setDirty(false);
}"
20285,"public void initFrame(AppProperties props){
  m_props=props;
  m_rootapp=new JRootApp();
  if (m_rootapp.initApp(m_props)) {
    try {
      m_instmanager=new InstanceManager(this);
    }
 catch (    Exception e) {
    }
    add(m_rootapp,BorderLayout.CENTER);
    try {
      this.setIconImage(ImageIO.read(JRootFrame.class.getResourceAsStream(""String_Node_Str"")));
    }
 catch (    IOException e) {
    }
    setTitle(AppLocal.APP_NAME + ""String_Node_Str"" + AppLocal.APP_VERSION);
    pack();
    setLocationRelativeTo(null);
    setVisible(true);
  }
 else {
    new JFrmConfig(props).setVisible(true);
  }
}","public void initFrame(AppProperties props){
  m_props=props;
  m_rootapp=new JRootApp();
  if (m_rootapp.initApp(m_props)) {
    if (""String_Node_Str"".equals(props.getProperty(""String_Node_Str""))) {
      try {
        m_instmanager=new InstanceManager(this);
      }
 catch (      Exception e) {
      }
    }
    add(m_rootapp,BorderLayout.CENTER);
    try {
      this.setIconImage(ImageIO.read(JRootFrame.class.getResourceAsStream(""String_Node_Str"")));
    }
 catch (    IOException e) {
    }
    setTitle(AppLocal.APP_NAME + ""String_Node_Str"" + AppLocal.APP_VERSION);
    pack();
    setLocationRelativeTo(null);
    setVisible(true);
  }
 else {
    new JFrmConfig(props).setVisible(true);
  }
}"
20286,"public void initFrame(AppProperties props){
  m_props=props;
  m_rootapp=new JRootApp();
  if (m_rootapp.initApp(m_props)) {
    try {
      m_instmanager=new InstanceManager(this);
    }
 catch (    Exception e) {
    }
    add(m_rootapp,BorderLayout.CENTER);
    setTitle(AppLocal.APP_NAME + ""String_Node_Str"" + AppLocal.APP_VERSION);
    Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
    setBounds(0,0,d.width,d.height);
    setVisible(true);
  }
 else {
    new JFrmConfig(props).setVisible(true);
  }
}","public void initFrame(AppProperties props){
  m_props=props;
  m_rootapp=new JRootApp();
  if (m_rootapp.initApp(m_props)) {
    if (""String_Node_Str"".equals(props.getProperty(""String_Node_Str""))) {
      try {
        m_instmanager=new InstanceManager(this);
      }
 catch (      Exception e) {
      }
    }
    add(m_rootapp,BorderLayout.CENTER);
    setTitle(AppLocal.APP_NAME + ""String_Node_Str"" + AppLocal.APP_VERSION);
    Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
    setBounds(0,0,d.width,d.height);
    setVisible(true);
  }
 else {
    new JFrmConfig(props).setVisible(true);
  }
}"
20287,"private void jcmdOKActionPerformed(java.awt.event.ActionEvent evt){
  String stext=jLabel1.getText();
  jLabel1.setText(AppLocal.getIntString(""String_Node_Str""));
  jcmdOK.setEnabled(false);
  jcmdCancel.setEnabled(false);
  try {
    m_scanner.connectDevice();
    m_scanner.startUploadProduct();
    ListModel l=m_bd.getListModel();
    for (int i=0; i < l.getSize(); i++) {
      Object[] myprod=(Object[])l.getElementAt(i);
      m_scanner.sendProduct((String)myprod[2],(String)myprod[1],(Double)myprod[7]);
    }
    m_scanner.stopUploadProduct();
    MessageInf msg=new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""));
    msg.show(this);
  }
 catch (  DeviceScannerException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
  }
 finally {
    m_scanner.disconnectDevice();
  }
  jLabel1.setText(stext);
  jcmdOK.setEnabled(true);
  jcmdCancel.setEnabled(true);
  dispose();
}","private void jcmdOKActionPerformed(java.awt.event.ActionEvent evt){
  String stext=jLabel1.getText();
  jLabel1.setText(AppLocal.getIntString(""String_Node_Str""));
  jcmdOK.setEnabled(false);
  jcmdCancel.setEnabled(false);
  try {
    m_scanner.connectDevice();
    m_scanner.startUploadProduct();
    ListModel l=m_bd.getListModel();
    for (int i=0; i < l.getSize(); i++) {
      Object[] myprod=(Object[])l.getElementAt(i);
      m_scanner.sendProduct((String)myprod[3],(String)myprod[2],(Double)myprod[6]);
    }
    m_scanner.stopUploadProduct();
    MessageInf msg=new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""));
    msg.show(this);
  }
 catch (  DeviceScannerException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
  }
 finally {
    m_scanner.disconnectDevice();
  }
  jLabel1.setText(stext);
  jcmdOK.setEnabled(true);
  jcmdCancel.setEnabled(true);
  dispose();
}"
20288,"public void draw(Graphics2D g2d,int x,int y,int width,int start,int lines){
  int currenty=y;
  for (int i=start; i < lines; i++) {
    m_aCommands.get(i).draw(g2d,x,currenty,width);
    currenty+=m_aCommands.get(i).getHeight();
  }
}","public void draw(Graphics2D g2d,int x,int y,int width){
  int currenty=y;
  for (  PrintItem pi : m_aCommands) {
    pi.draw(g2d,x,currenty,width);
    currenty+=pi.getHeight();
  }
}"
20289,"public void printLine(String sproduct,double dprice,double dunits);","public void printLine(String sproduct,double dprice,double dunits,int taxinfo);"
20290,"public void printLine(String sproduct,double dprice,double dunits){
}","public void printLine(String sproduct,double dprice,double dunits,int taxinfo){
}"
20291,"@Override public void endElement(String uri,String localName,String qName) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      try {
        AudioClip oAudio=Applet.newAudioClip(getClass().getClassLoader().getResource(text.toString()));
        oAudio.play();
      }
 catch (      Exception fnfe) {
      }
      text=null;
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  try {
    BufferedImage image=m_system.getResourceAsImage(text.toString());
    m_oOutputPrinter.printImage(image);
  }
 catch (  Exception fnfe) {
  }
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.printBarCode(bctype,bcposition,text.toString());
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
      m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignRight(text.toString(),m_iTextLength));
    break;
case DevicePrinter.ALIGN_CENTER:
  m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_oOutputPrinter.printText(m_iTextStyle,text.toString());
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endLine();
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endReceipt();
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
if (m_sVisorLine1 == null) {
m_sVisorLine1=m_sVisorLine.toString();
}
 else {
m_sVisorLine2=m_sVisorLine.toString();
}
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine1=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine2=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
m_sVisorLine.append(DeviceTicket.alignRight(text.toString(),m_iTextLength));
break;
case DevicePrinter.ALIGN_CENTER:
m_sVisorLine.append(DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_sVisorLine.append(DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_sVisorLine.append(text);
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getDeviceDisplay().writeVisor(m_iVisorAnimation,m_sVisorLine1,m_sVisorLine2);
m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
m_sVisorLine1=null;
m_sVisorLine2=null;
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().endReceipt();
m_iOutputType=OUTPUT_NONE;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printLine(text.toString(),m_dValue1,m_dValue2);
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printMessage(text.toString());
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printTotal(text.toString(),m_dValue1);
text=null;
}
break;
}
}","@Override public void endElement(String uri,String localName,String qName) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      try {
        AudioClip oAudio=Applet.newAudioClip(getClass().getClassLoader().getResource(text.toString()));
        oAudio.play();
      }
 catch (      Exception fnfe) {
      }
      text=null;
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  try {
    BufferedImage image=m_system.getResourceAsImage(text.toString());
    m_oOutputPrinter.printImage(image);
  }
 catch (  Exception fnfe) {
  }
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.printBarCode(bctype,bcposition,text.toString());
  text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
  if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
      m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignRight(text.toString(),m_iTextLength));
    break;
case DevicePrinter.ALIGN_CENTER:
  m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_oOutputPrinter.printText(m_iTextStyle,DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_oOutputPrinter.printText(m_iTextStyle,text.toString());
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endLine();
}
 else if (""String_Node_Str"".equals(qName)) {
m_oOutputPrinter.endReceipt();
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
if (m_sVisorLine1 == null) {
m_sVisorLine1=m_sVisorLine.toString();
}
 else {
m_sVisorLine2=m_sVisorLine.toString();
}
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine1=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine2=m_sVisorLine.toString();
m_sVisorLine=null;
}
 else if (""String_Node_Str"".equals(qName)) {
if (m_iTextLength > 0) {
switch (m_iTextAlign) {
case DevicePrinter.ALIGN_RIGHT:
m_sVisorLine.append(DeviceTicket.alignRight(text.toString(),m_iTextLength));
break;
case DevicePrinter.ALIGN_CENTER:
m_sVisorLine.append(DeviceTicket.alignCenter(text.toString(),m_iTextLength));
break;
default :
m_sVisorLine.append(DeviceTicket.alignLeft(text.toString(),m_iTextLength));
break;
}
}
 else {
m_sVisorLine.append(text);
}
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getDeviceDisplay().writeVisor(m_iVisorAnimation,m_sVisorLine1,m_sVisorLine2);
m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
m_sVisorLine1=null;
m_sVisorLine2=null;
m_iOutputType=OUTPUT_NONE;
m_oOutputPrinter=null;
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().endReceipt();
m_iOutputType=OUTPUT_NONE;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printLine(text.toString(),m_dValue1,m_dValue2,attribute3);
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printMessage(text.toString());
text=null;
}
 else if (""String_Node_Str"".equals(qName)) {
m_printer.getFiscalPrinter().printTotal(text.toString(),m_dValue1);
text=null;
}
break;
}
}"
20292,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      m_printer.getDevicePrinter(readString(attributes.getValue(""String_Node_Str""),""String_Node_Str"")).openDrawer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_TICKET;
      m_oOutputPrinter=m_printer.getDevicePrinter(readString(attributes.getValue(""String_Node_Str""),""String_Node_Str""));
      m_oOutputPrinter.beginReceipt();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_DISPLAY;
      String animation=attributes.getValue(""String_Node_Str"");
      if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_SCROLL;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_FLYER;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_BLINK;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_CURTAIN;
      }
 else {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
      }
      m_sVisorLine1=null;
      m_sVisorLine2=null;
      m_oOutputPrinter=null;
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_FISCAL;
      m_printer.getFiscalPrinter().beginReceipt();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_printer.getFiscalPrinter().printZReport();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_printer.getFiscalPrinter().printXReport();
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
  bctype=attributes.getValue(""String_Node_Str"");
  bcposition=attributes.getValue(""String_Node_Str"");
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.beginLine(parseInt(attributes.getValue(""String_Node_Str""),DevicePrinter.SIZE_0));
}
 else if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
  m_iTextStyle=(""String_Node_Str"".equals(attributes.getValue(""String_Node_Str"")) ? DevicePrinter.STYLE_BOLD : DevicePrinter.STYLE_PLAIN) | (""String_Node_Str"".equals(attributes.getValue(""String_Node_Str"")) ? DevicePrinter.STYLE_UNDERLINE : DevicePrinter.STYLE_PLAIN);
  String sAlign=attributes.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equals(sAlign)) {
    m_iTextAlign=DevicePrinter.ALIGN_RIGHT;
  }
 else   if (""String_Node_Str"".equals(sAlign)) {
    m_iTextAlign=DevicePrinter.ALIGN_CENTER;
  }
 else {
    m_iTextAlign=DevicePrinter.ALIGN_LEFT;
  }
  m_iTextLength=parseInt(attributes.getValue(""String_Node_Str""),0);
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
String sAlign=attributes.getValue(""String_Node_Str"");
if (""String_Node_Str"".equals(sAlign)) {
m_iTextAlign=DevicePrinter.ALIGN_RIGHT;
}
 else if (""String_Node_Str"".equals(sAlign)) {
m_iTextAlign=DevicePrinter.ALIGN_CENTER;
}
 else {
m_iTextAlign=DevicePrinter.ALIGN_LEFT;
}
m_iTextLength=parseInt(attributes.getValue(""String_Node_Str""));
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
m_dValue1=parseDouble(attributes.getValue(""String_Node_Str""));
m_dValue2=parseDouble(attributes.getValue(""String_Node_Str""),1.0);
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
m_dValue1=parseDouble(attributes.getValue(""String_Node_Str""));
}
break;
}
}","@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
switch (m_iOutputType) {
case OUTPUT_NONE:
    if (""String_Node_Str"".equals(qName)) {
      m_printer.getDevicePrinter(readString(attributes.getValue(""String_Node_Str""),""String_Node_Str"")).openDrawer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_TICKET;
      m_oOutputPrinter=m_printer.getDevicePrinter(readString(attributes.getValue(""String_Node_Str""),""String_Node_Str""));
      m_oOutputPrinter.beginReceipt();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_DISPLAY;
      String animation=attributes.getValue(""String_Node_Str"");
      if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_SCROLL;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_FLYER;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_BLINK;
      }
 else       if (""String_Node_Str"".equals(animation)) {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_CURTAIN;
      }
 else {
        m_iVisorAnimation=DeviceDisplayBase.ANIMATION_NULL;
      }
      m_sVisorLine1=null;
      m_sVisorLine2=null;
      m_oOutputPrinter=null;
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_iOutputType=OUTPUT_FISCAL;
      m_printer.getFiscalPrinter().beginReceipt();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_printer.getFiscalPrinter().printZReport();
    }
 else     if (""String_Node_Str"".equals(qName)) {
      m_printer.getFiscalPrinter().printXReport();
    }
  break;
case OUTPUT_TICKET:
if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
  bctype=attributes.getValue(""String_Node_Str"");
  bcposition=attributes.getValue(""String_Node_Str"");
}
 else if (""String_Node_Str"".equals(qName)) {
  m_oOutputPrinter.beginLine(parseInt(attributes.getValue(""String_Node_Str""),DevicePrinter.SIZE_0));
}
 else if (""String_Node_Str"".equals(qName)) {
  text=new StringBuffer();
  m_iTextStyle=(""String_Node_Str"".equals(attributes.getValue(""String_Node_Str"")) ? DevicePrinter.STYLE_BOLD : DevicePrinter.STYLE_PLAIN) | (""String_Node_Str"".equals(attributes.getValue(""String_Node_Str"")) ? DevicePrinter.STYLE_UNDERLINE : DevicePrinter.STYLE_PLAIN);
  String sAlign=attributes.getValue(""String_Node_Str"");
  if (""String_Node_Str"".equals(sAlign)) {
    m_iTextAlign=DevicePrinter.ALIGN_RIGHT;
  }
 else   if (""String_Node_Str"".equals(sAlign)) {
    m_iTextAlign=DevicePrinter.ALIGN_CENTER;
  }
 else {
    m_iTextAlign=DevicePrinter.ALIGN_LEFT;
  }
  m_iTextLength=parseInt(attributes.getValue(""String_Node_Str""),0);
}
break;
case OUTPUT_DISPLAY:
if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
m_sVisorLine=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
String sAlign=attributes.getValue(""String_Node_Str"");
if (""String_Node_Str"".equals(sAlign)) {
m_iTextAlign=DevicePrinter.ALIGN_RIGHT;
}
 else if (""String_Node_Str"".equals(sAlign)) {
m_iTextAlign=DevicePrinter.ALIGN_CENTER;
}
 else {
m_iTextAlign=DevicePrinter.ALIGN_LEFT;
}
m_iTextLength=parseInt(attributes.getValue(""String_Node_Str""));
}
break;
case OUTPUT_FISCAL:
if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
m_dValue1=parseDouble(attributes.getValue(""String_Node_Str""));
m_dValue2=parseDouble(attributes.getValue(""String_Node_Str""),1.0);
attribute3=parseInt(attributes.getValue(""String_Node_Str""));
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
}
 else if (""String_Node_Str"".equals(qName)) {
text=new StringBuffer();
m_dValue1=parseDouble(attributes.getValue(""String_Node_Str""));
}
break;
}
}"
20293,"public void printLine(String sproduct,double dprice,double dunits){
  try {
    m_fiscal.printRecItem(sproduct,roundFiscal(dprice * dunits),0,0,roundFiscal(dprice),""String_Node_Str"");
  }
 catch (  JposException e) {
  }
}","public void printLine(String sproduct,double dprice,double dunits,int taxinfo){
  try {
    m_fiscal.printRecItem(sproduct,roundFiscal(dprice * dunits),(int)(dunits * 1000),taxinfo,roundFiscal(dprice),""String_Node_Str"");
  }
 catch (  JposException e) {
  }
}"
20294,"private boolean checkCardNumber(String sNumber){
  if (sNumber == null || (sNumber.length() != 16 && sNumber.length() != 15)) {
    return false;
  }
  for (int i=0; i < 16; i++) {
    char c=sNumber.charAt(i);
    if (c != '0' && c != '1' && c != '2' && c != '3' && c != '4' && c != '5' && c != '6' && c != '7' && c != '8' && c != '9') {
      return false;
    }
  }
  return true;
}","private boolean checkCardNumber(String sNumber){
  return LuhnAlgorithm.checkCC(sNumber);
}"
20295,"private boolean checkExpDate(String sDate){
  if (sDate == null || sDate.length() != 4) {
    return false;
  }
  for (int i=0; i < 4; i++) {
    char c=sDate.charAt(i);
    if (c != '0' && c != '1' && c != '2' && c != '3' && c != '4' && c != '5' && c != '6' && c != '7' && c != '8' && c != '9') {
      return false;
    }
  }
  return true;
}","private boolean checkExpDate(String sDate){
  return (sDate.length() == 4 && StringUtils.isNumber(sDate.trim()));
}"
20296,"private boolean isValidCardNumber(){
  return !(m_jCardNumber.getText() == null || m_jCardNumber.getText().length() != 16);
}","private boolean isValidCardNumber(){
  return (LuhnAlgorithm.checkCC(m_jCardNumber.getText()) && m_jCardNumber.getText().length() > 13 && m_jCardNumber.getText().length() < 20);
}"
20297,"@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();
    aset.add(OrientationRequested.PORTRAIT);
    aset.add(new Copies(1));
    aset.add(new JobName(AppLocal.APP_NAME + ""String_Node_Str"",null));
    if (isReceiptPrinter.equals(""String_Node_Str"")) {
      MediaSize myISO=new MediaSize(widthOfPaper,heightOfPaper,Size2DSyntax.MM,MediaSizeName.NA_LEGAL);
      aset.add(MediaSizeName.NA_LEGAL);
    }
 else {
      aset.add(MediaSizeName.ISO_A4);
    }
    if (printservice == null) {
      if (printJob.printDialog(aset)) {
        printJob.print();
      }
    }
 else {
      printJob.setPrintService(printservice);
      printJob.print(aset);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}","@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setJobName(AppLocal.APP_NAME + ""String_Node_Str"");
    printerBook.countLinesOnPage(m_ticketcurrent);
    printJob.setPageable(printerBook.getBook());
    if (printservice == null) {
      if (printJob.printDialog()) {
        printJob.print();
      }
    }
 else {
      printJob.setPrintService(printservice);
      printJob.print();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}"
20298,"/** 
 * Creates a new instance of DevicePrinterPrinter
 * @param printername - name of printer that will be called in the system
 * @param isReceiptPrinter - string with boolean values if the printer is a receipt
 */
public DevicePrinterPrinter(String printername,String isReceiptPrinter){
  this.isReceiptPrinter=isReceiptPrinter;
  m_sName=""String_Node_Str"";
  m_ticketcurrent=null;
  printservice=ReportUtils.getPrintService(printername);
}","/** 
 * Creates a new instance of DevicePrinterPrinter
 * @param printername - name of printer that will be called in the system
 * @param isReceiptPrinter - string with boolean values if the printer is a receipt
 */
public DevicePrinterPrinter(String printername,String isReceiptPrinter){
  m_sName=""String_Node_Str"";
  m_ticketcurrent=null;
  printservice=ReportUtils.getPrintService(printername);
  printerBook=new PrinterBook(isReceiptPrinter);
}"
20299,"@Override public void beginLine(int iTextSize){
  m_ticketcurrent.beginLine(0);
}","@Override public void beginLine(int iTextSize){
  m_ticketcurrent.beginLine(iTextSize);
}"
20300,"/** 
 * Method print prints the ticket and is being called for each site twice. For futher info look into: 
 * @see java.awt.print.Printable;
 */
@Override public int print(Graphics g,PageFormat pf,int pi) throws PrinterException {
  int temp=0;
  while (basict.getTheLastIndex() > line) {
    int height=0;
    while ((int)pf.getImageableHeight() > height + basict.getHeightOfCommands(temp)) {
      if (basict.getTheLastIndex() == line) {
        flag=true;
        break;
      }
      height+=basict.getHeightOfCommands(line);
      temp=basict.getTheLastIndex() != ++line ? line : line - 1;
    }
    if (flag) {
      endLine.add(page,line - 1);
    }
 else {
      endLine.add(page,line);
      startLine.add(++page,endLine.get(--page));
      page++;
    }
  }
  if (pi > page) {
    return Printable.NO_SUCH_PAGE;
  }
  basict.draw((Graphics2D)g,(int)pf.getImageableX(),(int)pf.getImageableY(),LINEWIDTH,(Integer)startLine.get(pi),(Integer)endLine.get(pi));
  return Printable.PAGE_EXISTS;
}","/** 
 * Method print prints the ticket and is being called for each site twice. For futher info look into: 
 * @param g
 * @param pf
 * @param pi
 * @see java.awt.print.Printable
 */
@Override public int print(Graphics g,PageFormat pf,int pi) throws PrinterException {
  Graphics2D g2=(Graphics2D)g;
  basict.draw(g2,(int)pf.getImageableX(),(int)pf.getImageableY(),LINEWIDTH,start,end);
  return Printable.PAGE_EXISTS;
}"
20301,"/** 
 * Creates a new instance of PrintableTicket
 * @param t - BasicTicketForPrinter
 */
public PrintableTicket(BasicTicketForPrinter t){
  basict=t;
  startLine=new ArrayList();
  startLine.add(0,0);
  endLine=new ArrayList();
}","/** 
 * Creates a new instance of PrintableTicket
 * @param t - BasicTicketForPrinter
 */
public PrintableTicket(BasicTicketForPrinter t,int start,int end){
  basict=t;
  this.start=start;
  this.end=end;
}"
20302,"public DataResultSet openExec(Object params) throws BasicException {
  closeExec();
  try {
    m_Stmt=m_s.getConnection().prepareStatement(m_sentence);
    if (params != null) {
      m_SerWrite.writeValues(new PreparedSentencePars(m_Stmt),params);
    }
    if (m_Stmt.execute()) {
      return new JDBCDataResultSet(m_Stmt.getResultSet(),m_SerRead);
    }
 else {
      int iUC=m_Stmt.getUpdateCount();
      if (iUC < 0) {
        return null;
      }
 else {
        return new SentenceUpdateResultSet(iUC);
      }
    }
  }
 catch (  SQLException eSQL) {
    throw new BasicException(eSQL);
  }
}","public DataResultSet openExec(Object params) throws BasicException {
  closeExec();
  try {
    m_Stmt=m_s.getConnection().prepareStatement(m_sentence);
    if (m_SerWrite != null) {
      m_SerWrite.writeValues(new PreparedSentencePars(m_Stmt),params);
    }
    if (m_Stmt.execute()) {
      return new JDBCDataResultSet(m_Stmt.getResultSet(),m_SerRead);
    }
 else {
      int iUC=m_Stmt.getUpdateCount();
      if (iUC < 0) {
        return null;
      }
 else {
        return new SentenceUpdateResultSet(iUC);
      }
    }
  }
 catch (  SQLException eSQL) {
    throw new BasicException(eSQL);
  }
}"
20303,"public String getSQL(SerializerWrite sw,Object params) throws BasicException {
  QBFParameter mydw=new QBFParameter(m_asFindFields);
  if (params == null) {
    return m_sSentNullFilter;
  }
 else {
    sw.writeValues(mydw,params);
    String sFilter=mydw.getFilter();
    if (sFilter.length() == 0) {
      return m_sSentNullFilter;
    }
 else {
      return m_sSentBeginPart + ""String_Node_Str"" + sFilter+ ""String_Node_Str""+ m_sSentEndPart;
    }
  }
}","public String getSQL(SerializerWrite sw,Object params) throws BasicException {
  QBFParameter mydw=new QBFParameter(m_asFindFields);
  if (sw == null || params == null) {
    return m_sSentNullFilter;
  }
 else {
    sw.writeValues(mydw,params);
    String sFilter=mydw.getFilter();
    if (sFilter.length() == 0) {
      return m_sSentNullFilter;
    }
 else {
      return m_sSentBeginPart + ""String_Node_Str"" + sFilter+ ""String_Node_Str""+ m_sSentEndPart;
    }
  }
}"
20304,"public final SentenceList getProductListNormal(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.STRING}),new SerializerReadClass(ProductInfoExt.class));
}","public SentenceList getProductListNormal(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.STRING}),new SerializerReadClass(ProductInfoExt.class));
}"
20305,"public final SentenceList getProductListAuxiliar(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.STRING}),new SerializerReadClass(ProductInfoExt.class));
}","public SentenceList getProductListAuxiliar(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.DOUBLE,Datas.OBJECT,Datas.STRING,Datas.OBJECT,Datas.STRING}),new SerializerReadClass(ProductInfoExt.class));
}"
20306,"private void jcmdOKActionPerformed(java.awt.event.ActionEvent evt){
  String stext=jLabel1.getText();
  jLabel1.setText(AppLocal.getIntString(""String_Node_Str""));
  jcmdOK.setEnabled(false);
  jcmdCancel.setEnabled(false);
  try {
    m_scanner.connectDevice();
    m_scanner.startUploadProduct();
    ListModel l=m_bd.getListModel();
    for (int i=0; i < l.getSize(); i++) {
      Object[] myprod=(Object[])l.getElementAt(i);
      m_scanner.sendProduct((String)myprod[2],(String)myprod[1],(Double)myprod[5]);
    }
    m_scanner.stopUploadProduct();
    MessageInf msg=new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""));
    msg.show(this);
  }
 catch (  DeviceScannerException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
  }
 finally {
    m_scanner.disconnectDevice();
  }
  jLabel1.setText(stext);
  jcmdOK.setEnabled(true);
  jcmdCancel.setEnabled(true);
  dispose();
}","private void jcmdOKActionPerformed(java.awt.event.ActionEvent evt){
  String stext=jLabel1.getText();
  jLabel1.setText(AppLocal.getIntString(""String_Node_Str""));
  jcmdOK.setEnabled(false);
  jcmdCancel.setEnabled(false);
  try {
    m_scanner.connectDevice();
    m_scanner.startUploadProduct();
    ListModel l=m_bd.getListModel();
    for (int i=0; i < l.getSize(); i++) {
      Object[] myprod=(Object[])l.getElementAt(i);
      m_scanner.sendProduct((String)myprod[2],(String)myprod[1],(Double)myprod[7]);
    }
    m_scanner.stopUploadProduct();
    MessageInf msg=new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""));
    msg.show(this);
  }
 catch (  DeviceScannerException e) {
    MessageInf msg=new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e);
    msg.show(this);
  }
 finally {
    m_scanner.disconnectDevice();
  }
  jLabel1.setText(stext);
  jcmdOK.setEnabled(true);
  jcmdCancel.setEnabled(true);
  dispose();
}"
20307,"public void endLine(){
  m_ticketcurrent.endLine();
}","@Override public void endLine(){
  m_ticketcurrent.endLine();
}"
20308,"public String getPrinterDescription(){
  return null;
}","@Override public String getPrinterDescription(){
  return null;
}"
20309,"public void printImage(BufferedImage image){
  m_ticketcurrent.printImage(image);
}","@Override public void printImage(BufferedImage image){
  m_ticketcurrent.printImage(image);
}"
20310,"public JComponent getPrinterComponent(){
  return null;
}","@Override public JComponent getPrinterComponent(){
  return null;
}"
20311,"public String getPrinterName(){
  return m_sName;
}","@Override public String getPrinterName(){
  return m_sName;
}"
20312,"public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    printJob.setJobName(AppLocal.APP_NAME + ""String_Node_Str"");
    printJob.setPrintService(printservice);
    printJob.print();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}","@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    printJob.setJobName(AppLocal.APP_NAME + ""String_Node_Str"");
    printJob.setPrintService(printservice);
    printJob.print();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}"
20313,"public void printBarCode(String type,String position,String code){
  m_ticketcurrent.printBarCode(type,position,code);
}","@Override public void printBarCode(String type,String position,String code){
  m_ticketcurrent.printBarCode(type,position,code);
}"
20314,"public void beginLine(int iTextSize){
  m_ticketcurrent.beginLine(iTextSize);
}","@Override public void beginLine(int iTextSize){
  m_ticketcurrent.beginLine(0);
}"
20315,"public void reset(){
  m_ticketcurrent=null;
}","@Override public void reset(){
  m_ticketcurrent=null;
}"
20316,"public void beginReceipt(){
  m_ticketcurrent=new BasicTicket();
}","@Override public void beginReceipt(){
  m_ticketcurrent=new BasicTicketForPrinter();
}"
20317,"public void printText(int iStyle,String sText){
  m_ticketcurrent.printText(iStyle,sText);
}","@Override public void printText(int iStyle,String sText){
  m_ticketcurrent.printText(iStyle,sText);
}"
20318,"public int print(Graphics g,PageFormat pf,int pi) throws PrinterException {
  if (pi >= 1) {
    return Printable.NO_SUCH_PAGE;
  }
  basict.draw((Graphics2D)g,(int)pf.getImageableX() + H_GAP,(int)pf.getImageableY() + V_GAP,LINEWIDTH);
  return Printable.PAGE_EXISTS;
}","@Override public int print(Graphics g,PageFormat pf,int pi) throws PrinterException {
  int temp=0;
  while (basict.getTheLastIndex() > line) {
    int height=0;
    while ((int)pf.getImageableHeight() > height + basict.getHeightOfCommands(temp)) {
      if (basict.getTheLastIndex() == line) {
        flag=true;
        break;
      }
      height+=basict.getHeightOfCommands(line);
      temp=basict.getTheLastIndex() != ++line ? line : line - 1;
    }
    if (flag) {
      endLine.add(page,line - 1);
    }
 else {
      endLine.add(page,line);
      startLine.add(++page,endLine.get(--page));
      page++;
    }
  }
  Graphics2D g2=(Graphics2D)g;
  System.out.println(g2.getFont().getFontName());
  if (pi > page) {
    return Printable.NO_SUCH_PAGE;
  }
  g2.setColor(Color.RED);
  g2.setFont(new Font(""String_Node_Str"",Font.ITALIC,34));
  g2.drawString(""String_Node_Str"",100,100);
  basict.draw(g2,(int)pf.getImageableX(),(int)pf.getImageableY(),LINEWIDTH,(Integer)startLine.get(pi),(Integer)endLine.get(pi));
  return Printable.PAGE_EXISTS;
}"
20319,"/** 
 * Creates a new instance of PrintableTicket 
 */
public PrintableTicket(BasicTicket t){
  basict=t;
}","/** 
 * Creates a new instance of PrintableTicket 
 */
public PrintableTicket(BasicTicketForPrinter t){
  basict=t;
  startLine=new ArrayList();
  startLine.add(0,0);
  endLine=new ArrayList();
}"
20320,"public void draw(Graphics2D g2d,int x,int y,int width){
  int currenty=y;
  for (  PrintItem pi : m_aCommands) {
    pi.draw(g2d,x,currenty,width);
    currenty+=pi.getHeight();
  }
}","public void draw(Graphics2D g2d,int x,int y,int width,int start,int lines){
  int currenty=y;
  for (int i=start; i < lines; i++) {
    m_aCommands.get(i).draw(g2d,x,currenty,width);
    currenty+=m_aCommands.get(i).getHeight();
  }
}"
20321,"/** 
 * Method that changes points for milimeters. 
 * @param height - height in points
 */
private int changePointsforMM(int height){
  return (int)(height * point * 1000);
}","/** 
 * Method that changes points for milimeters. 
 * @param height - height in points
 */
@Deprecated private int changePointsforMM(int height){
  return (int)(height * point * 1000);
}"
20322,"@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();
    aset.add(OrientationRequested.PORTRAIT);
    aset.add(new Copies(1));
    aset.add(new JobName(AppLocal.APP_NAME + ""String_Node_Str"",null));
    if (isReceiptPrinter.equals(""String_Node_Str"")) {
      MediaSize myISO=new MediaSize(78,getHeightForReceiptPrinters() + 10,Size2DSyntax.MM,MediaSizeName.NA_LEGAL);
      aset.add(MediaSizeName.NA_LEGAL);
    }
 else {
      aset.add(MediaSizeName.ISO_A4);
    }
    if (printservice == null) {
      if (printJob.printDialog(aset)) {
        printJob.print();
      }
    }
 else {
      printJob.setPrintService(printservice);
      printJob.print(aset);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}","@Override public void endReceipt(){
  try {
    PrinterJob printJob=PrinterJob.getPrinterJob();
    printJob.setPrintable(new PrintableTicket(m_ticketcurrent));
    PrintRequestAttributeSet aset=new HashPrintRequestAttributeSet();
    aset.add(OrientationRequested.PORTRAIT);
    aset.add(new Copies(1));
    aset.add(new JobName(AppLocal.APP_NAME + ""String_Node_Str"",null));
    if (isReceiptPrinter.equals(""String_Node_Str"")) {
      MediaSize myISO=new MediaSize(widthOfPaper,heightOfPaper,Size2DSyntax.MM,MediaSizeName.NA_LEGAL);
      aset.add(MediaSizeName.NA_LEGAL);
    }
 else {
      aset.add(MediaSizeName.ISO_A4);
    }
    if (printservice == null) {
      if (printJob.printDialog(aset)) {
        printJob.print();
      }
    }
 else {
      printJob.setPrintService(printservice);
      printJob.print(aset);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  m_ticketcurrent=null;
}"
20323,"/** 
 * Getter that gives back lenght of a ticket
 * @return lenght of a ticket in mm
 */
private int getHeightForReceiptPrinters(){
  int height=0;
  int line=0;
  while (m_ticketcurrent.getTheLastIndex() > line) {
    height+=m_ticketcurrent.getHeightOfCommands(line);
    line++;
  }
  return changePointsforMM(height);
}","/** 
 * Getter that gives back lenght of a ticket
 * @return lenght of a ticket in mm
 */
@Deprecated private int getHeightForReceiptPrinters(){
  int height=0;
  int line=0;
  while (m_ticketcurrent.getTheLastIndex() > line) {
    height+=m_ticketcurrent.getHeightOfCommands(line);
    line++;
  }
  System.out.println(height + ""String_Node_Str"" + changePointsforMM(height));
  return changePointsforMM(height);
}"
20324,"/** 
 * Creates a new instance of PrinterItemLine 
 */
public PrintItemLineForPrinter(int itextsize){
  super(itextsize);
  BASEFONT=new Font(""String_Node_Str"",Font.PLAIN,8);
  FONTHEIGHT=12;
  FONTWIDTH=5;
}","/** 
 * Creates a new instance of PrinterItemLine 
 */
public PrintItemLineForPrinter(int itextsize){
  super(itextsize);
  BASEFONT=new Font(""String_Node_Str"",Font.PLAIN,8);
  FONTHEIGHT=12;
  FONTWIDTH=4;
}"
20325,"public void uploadOrders(Order[] orderstoupload) throws RemoteException {
  externalSales.uploadOrders(m_iERPId,m_iERPOrg,m_iERPPos,orderstoupload,m_sERPUser,m_sERPPassword);
}","public boolean uploadOrders(Order[] orderstoupload) throws RemoteException {
  return externalSales.uploadOrders(m_iERPId,m_iERPOrg,m_iERPPos,orderstoupload,m_sERPUser,m_sERPPassword);
}"
20326,"public MessageInf execute() throws BasicException {
  try {
    if (externalsales == null) {
      externalsales=new ExternalSalesHelper(dlsystem);
    }
    List<TicketInfo> ticketlist=dlintegration.getTickets();
    for (    TicketInfo ticket : ticketlist) {
      ticket.setLines(dlintegration.getTicketLines(ticket.getId()));
      ticket.setPayments(dlintegration.getTicketPayments(ticket.getId()));
    }
    if (ticketlist.size() == 0) {
      return new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      Order[] orders=transformTickets(ticketlist);
      externalsales.uploadOrders(orders);
      dlintegration.execTicketUpdate();
      return new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str"",orders.length));
    }
  }
 catch (  ServiceException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  RemoteException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  MalformedURLException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
}","public MessageInf execute() throws BasicException {
  try {
    if (externalsales == null) {
      externalsales=new ExternalSalesHelper(dlsystem);
    }
    List<TicketInfo> ticketlist=dlintegration.getTickets();
    for (    TicketInfo ticket : ticketlist) {
      ticket.setLines(dlintegration.getTicketLines(ticket.getId()));
      ticket.setPayments(dlintegration.getTicketPayments(ticket.getId()));
    }
    if (ticketlist.size() == 0) {
      return new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      Order[] orders=transformTickets(ticketlist);
      if (!externalsales.uploadOrders(orders))       throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
      dlintegration.execTicketUpdate();
      return new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str"",orders.length));
    }
  }
 catch (  ServiceException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  RemoteException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  MalformedURLException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
}"
20327,"public void uploadOrders(java.lang.String clientID,java.lang.String organizationId,java.lang.String salesChannel,com.openbravo.ws.externalsales.Order[] newOrders,java.lang.String username,java.lang.String password) throws java.rmi.RemoteException ;","public boolean uploadOrders(java.lang.String clientID,java.lang.String organizationId,java.lang.String salesChannel,com.openbravo.ws.externalsales.Order[] newOrders,java.lang.String username,java.lang.String password) throws java.rmi.RemoteException ;"
20328,"public void uploadOrders(java.lang.String clientID,java.lang.String organizationId,java.lang.String salesChannel,com.openbravo.ws.externalsales.Order[] newOrders,java.lang.String username,java.lang.String password) throws java.rmi.RemoteException {
  if (super.cachedEndpoint == null) {
    throw new org.apache.axis.NoEndPointException();
  }
  org.apache.axis.client.Call _call=createCall();
  _call.setOperation(_operations[2]);
  _call.setUseSOAPAction(true);
  _call.setSOAPActionURI(""String_Node_Str"");
  _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
  _call.setOperationName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  setRequestHeaders(_call);
  setAttachments(_call);
  try {
    java.lang.Object _resp=_call.invoke(new java.lang.Object[]{clientID,organizationId,salesChannel,newOrders,username,password});
    if (_resp instanceof java.rmi.RemoteException) {
      throw (java.rmi.RemoteException)_resp;
    }
    extractAttachments(_call);
  }
 catch (  org.apache.axis.AxisFault axisFaultException) {
    throw axisFaultException;
  }
}","public boolean uploadOrders(java.lang.String clientID,java.lang.String organizationId,java.lang.String salesChannel,com.openbravo.ws.externalsales.Order[] newOrders,java.lang.String username,java.lang.String password) throws java.rmi.RemoteException {
  if (super.cachedEndpoint == null) {
    throw new org.apache.axis.NoEndPointException();
  }
  org.apache.axis.client.Call _call=createCall();
  _call.setOperation(_operations[2]);
  _call.setUseSOAPAction(true);
  _call.setSOAPActionURI(""String_Node_Str"");
  _call.setSOAPVersion(org.apache.axis.soap.SOAPConstants.SOAP11_CONSTANTS);
  _call.setOperationName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  setRequestHeaders(_call);
  setAttachments(_call);
  try {
    java.lang.Object _resp=_call.invoke(new java.lang.Object[]{clientID,organizationId,salesChannel,newOrders,username,password});
    if (_resp instanceof java.rmi.RemoteException) {
      throw (java.rmi.RemoteException)_resp;
    }
 else {
      extractAttachments(_call);
      try {
        return ((java.lang.Boolean)_resp).booleanValue();
      }
 catch (      java.lang.Exception _exception) {
        return ((java.lang.Boolean)org.apache.axis.utils.JavaUtils.convert(_resp,boolean.class)).booleanValue();
      }
    }
  }
 catch (  org.apache.axis.AxisFault axisFaultException) {
    throw axisFaultException;
  }
}"
20329,"private static void _initOperationDesc1(){
  org.apache.axis.description.OperationDesc oper;
  org.apache.axis.description.ParameterDesc param;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.Product[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[0]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.ProductPlus[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[1]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),com.openbravo.ws.externalsales.Order[].class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(org.apache.axis.encoding.XMLType.AXIS_VOID);
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[2]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),com.openbravo.ws.externalsales.OrderIdentifier[].class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.Order[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[3]=oper;
}","private static void _initOperationDesc1(){
  org.apache.axis.description.OperationDesc oper;
  org.apache.axis.description.ParameterDesc param;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.Product[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[0]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.ProductPlus[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[1]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),com.openbravo.ws.externalsales.Order[].class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(boolean.class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[2]=oper;
  oper=new org.apache.axis.description.OperationDesc();
  oper.setName(""String_Node_Str"");
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),com.openbravo.ws.externalsales.OrderIdentifier[].class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  param=new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),org.apache.axis.description.ParameterDesc.IN,new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""),java.lang.String.class,false,false);
  oper.addParameter(param);
  oper.setReturnType(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setReturnClass(com.openbravo.ws.externalsales.Order[].class);
  oper.setReturnQName(new javax.xml.namespace.QName(""String_Node_Str"",""String_Node_Str""));
  oper.setStyle(org.apache.axis.constants.Style.RPC);
  oper.setUse(org.apache.axis.constants.Use.ENCODED);
  _operations[3]=oper;
}"
20330,"public void setActiveTicket(TicketInfo oTicket,Object oTicketExt){
  m_oTicket=oTicket;
  m_oTicketExt=oTicketExt;
  executeEvent(m_oTicket,m_oTicketExt,""String_Node_Str"");
  refreshTicket();
}","public void setActiveTicket(TicketInfo oTicket,Object oTicketExt){
  m_oTicket=oTicket;
  m_oTicketExt=oTicketExt;
  m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
  m_oTicket.setActiveCash(m_App.getActiveCashIndex());
  m_oTicket.setDate(new Date());
  executeEvent(m_oTicket,m_oTicketExt,""String_Node_Str"");
  refreshTicket();
}"
20331,"private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}","private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}"
20332,"public final void deleteTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      Date d=new Date();
      for (int i=0; i < ticket.getLinesCount(); i++) {
        if (ticket.getLine(i).getProductID() != null) {
          getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),d,ticket.getLine(i).getMultiply() >= 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,ticket.getLine(i).getProductID(),new Double(ticket.getLine(i).getMultiply()),new Double(ticket.getLine(i).getPrice())});
        }
      }
      for (      PaymentInfo p : ticket.getPayments()) {
        if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
          getDebtUpdate().exec(new Object[]{ticket.getCustomer().getId(),new Double(-p.getTotal()),ticket.getDate()});
        }
      }
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      return null;
    }
  }
;
  t.execute();
}","public final void deleteTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      Date d=new Date();
      for (int i=0; i < ticket.getLinesCount(); i++) {
        if (ticket.getLine(i).getProductID() != null) {
          getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),d,ticket.getLine(i).getMultiply() >= 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,ticket.getLine(i).getProductID(),new Double(ticket.getLine(i).getMultiply()),new Double(ticket.getLine(i).getPrice())});
        }
      }
      for (      PaymentInfo p : ticket.getPayments()) {
        if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
          ticket.getCustomer().updateCurDebt(-p.getTotal(),ticket.getDate());
          getDebtUpdate().exec(new DataParams(){
            public void writeValues() throws BasicException {
              setDouble(1,ticket.getCustomer().getCurdebt());
              setTimestamp(2,ticket.getCustomer().getCurdate());
              setString(3,ticket.getCustomer().getId());
            }
          }
);
        }
      }
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
      return null;
    }
  }
;
  t.execute();
}"
20333,"public void writeValues() throws BasicException {
  setString(1,UUID.randomUUID().toString());
  setString(2,ticket.getId());
  setString(3,tickettax.getTaxInfo().getId());
  setDouble(4,tickettax.getSubTotal());
  setDouble(5,tickettax.getTax());
}","public void writeValues() throws BasicException {
  setDouble(1,ticket.getCustomer().getCurdebt());
  setTimestamp(2,ticket.getCustomer().getCurdate());
  setString(3,ticket.getCustomer().getId());
}"
20334,"public final SentenceExec getDebtUpdate(){
  return new PreparedSentence(s,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new SerializerWriteBasicExt(new Datas[]{Datas.STRING,Datas.DOUBLE,Datas.TIMESTAMP},new int[]{1,1,1,2,0}));
}","public final SentenceExec getDebtUpdate(){
  return new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
}"
20335,"public final void saveTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (ticket.getTicketId() == 0) {
        ticket.setTicketId(getNextTicketIndex().intValue());
      }
      new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
        public void writeValues() throws BasicException {
          setString(1,ticket.getId());
          setString(2,ticket.getActiveCash());
          setTimestamp(3,ticket.getDate());
          try {
            ByteArrayOutputStream o=new ByteArrayOutputStream();
            ticket.getProperties().storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
            setBytes(4,o.toByteArray());
          }
 catch (          IOException e) {
            setBytes(4,null);
          }
        }
      }
);
      new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
        public void writeValues() throws BasicException {
          setString(1,ticket.getId());
          setInt(2,ticket.getTicketId());
          setString(3,ticket.getUser().getId());
          setString(4,ticket.getCustomerId());
        }
      }
);
      SentenceExec ticketlineinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteBuilder.INSTANCE);
      for (      TicketLineInfo l : ticket.getLines()) {
        ticketlineinsert.exec(l);
        if (l.getProductID() != null) {
          getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),ticket.getDate(),l.getMultiply() < 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,l.getProductID(),new Double(-l.getMultiply()),new Double(l.getPrice())});
        }
      }
      SentenceExec paymentinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
      for (      final PaymentInfo p : ticket.getPayments()) {
        paymentinsert.exec(new DataParams(){
          public void writeValues() throws BasicException {
            setString(1,UUID.randomUUID().toString());
            setString(2,ticket.getId());
            setString(3,p.getName());
            setDouble(4,p.getTotal());
          }
        }
);
        if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
          getDebtUpdate().exec(new Object[]{ticket.getCustomer().getId(),new Double(p.getTotal()),ticket.getDate()});
        }
      }
      SentenceExec taxlinesinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
      if (ticket.getTaxes() != null) {
        for (        final TicketTaxInfo tickettax : ticket.getTaxes()) {
          taxlinesinsert.exec(new DataParams(){
            public void writeValues() throws BasicException {
              setString(1,UUID.randomUUID().toString());
              setString(2,ticket.getId());
              setString(3,tickettax.getTaxInfo().getId());
              setDouble(4,tickettax.getSubTotal());
              setDouble(5,tickettax.getTax());
            }
          }
);
        }
      }
      return null;
    }
  }
;
  t.execute();
}","public final void saveTicket(final TicketInfo ticket,final String location) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (ticket.getTicketId() == 0) {
        ticket.setTicketId(getNextTicketIndex().intValue());
      }
      new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
        public void writeValues() throws BasicException {
          setString(1,ticket.getId());
          setString(2,ticket.getActiveCash());
          setTimestamp(3,ticket.getDate());
          try {
            ByteArrayOutputStream o=new ByteArrayOutputStream();
            ticket.getProperties().storeToXML(o,AppLocal.APP_NAME,""String_Node_Str"");
            setBytes(4,o.toByteArray());
          }
 catch (          IOException e) {
            setBytes(4,null);
          }
        }
      }
);
      new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE).exec(new DataParams(){
        public void writeValues() throws BasicException {
          setString(1,ticket.getId());
          setInt(2,ticket.getTicketId());
          setString(3,ticket.getUser().getId());
          setString(4,ticket.getCustomerId());
        }
      }
);
      SentenceExec ticketlineinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteBuilder.INSTANCE);
      for (      TicketLineInfo l : ticket.getLines()) {
        ticketlineinsert.exec(l);
        if (l.getProductID() != null) {
          getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),ticket.getDate(),l.getMultiply() < 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,l.getProductID(),new Double(-l.getMultiply()),new Double(l.getPrice())});
        }
      }
      SentenceExec paymentinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
      for (      final PaymentInfo p : ticket.getPayments()) {
        paymentinsert.exec(new DataParams(){
          public void writeValues() throws BasicException {
            setString(1,UUID.randomUUID().toString());
            setString(2,ticket.getId());
            setString(3,p.getName());
            setDouble(4,p.getTotal());
          }
        }
);
        if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
          ticket.getCustomer().updateCurDebt(p.getTotal(),ticket.getDate());
          getDebtUpdate().exec(new DataParams(){
            public void writeValues() throws BasicException {
              setDouble(1,ticket.getCustomer().getCurdebt());
              setTimestamp(2,ticket.getCustomer().getCurdate());
              setString(3,ticket.getCustomer().getId());
            }
          }
);
        }
      }
      SentenceExec taxlinesinsert=new PreparedSentence(s,""String_Node_Str"",SerializerWriteParams.INSTANCE);
      if (ticket.getTaxes() != null) {
        for (        final TicketTaxInfo tickettax : ticket.getTaxes()) {
          taxlinesinsert.exec(new DataParams(){
            public void writeValues() throws BasicException {
              setString(1,UUID.randomUUID().toString());
              setString(2,ticket.getId());
              setString(3,tickettax.getTaxInfo().getId());
              setDouble(4,tickettax.getSubTotal());
              setDouble(5,tickettax.getTax());
            }
          }
);
        }
      }
      return null;
    }
  }
;
  t.execute();
}"
20336,"public Object transact() throws BasicException {
  Date d=new Date();
  for (int i=0; i < ticket.getLinesCount(); i++) {
    if (ticket.getLine(i).getProductID() != null) {
      getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),d,ticket.getLine(i).getMultiply() >= 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,ticket.getLine(i).getProductID(),new Double(ticket.getLine(i).getMultiply()),new Double(ticket.getLine(i).getPrice())});
    }
  }
  for (  PaymentInfo p : ticket.getPayments()) {
    if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
      getDebtUpdate().exec(new Object[]{ticket.getCustomer().getId(),new Double(-p.getTotal()),ticket.getDate()});
    }
  }
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  return null;
}","public Object transact() throws BasicException {
  Date d=new Date();
  for (int i=0; i < ticket.getLinesCount(); i++) {
    if (ticket.getLine(i).getProductID() != null) {
      getStockDiaryInsert().exec(new Object[]{UUID.randomUUID().toString(),d,ticket.getLine(i).getMultiply() >= 0.0 ? MovementReason.IN_REFUND.getKey() : MovementReason.OUT_SALE.getKey(),location,ticket.getLine(i).getProductID(),new Double(ticket.getLine(i).getMultiply()),new Double(ticket.getLine(i).getPrice())});
    }
  }
  for (  PaymentInfo p : ticket.getPayments()) {
    if (""String_Node_Str"".equals(p.getName()) || ""String_Node_Str"".equals(p.getName())) {
      ticket.getCustomer().updateCurDebt(-p.getTotal(),ticket.getDate());
      getDebtUpdate().exec(new DataParams(){
        public void writeValues() throws BasicException {
          setDouble(1,ticket.getCustomer().getCurdebt());
          setTimestamp(2,ticket.getCustomer().getCurdate());
          setString(3,ticket.getCustomer().getId());
        }
      }
);
    }
  }
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  new StaticSentence(s,""String_Node_Str"",SerializerWriteString.INSTANCE).exec(ticket.getId());
  return null;
}"
20337,"@Deprecated public TicketTaxInfo[] getTaxLines(){
  return taxes.toArray(new TicketTaxInfo[taxes.size()]);
}","public TicketTaxInfo[] getTaxLines(){
  Map<String,TicketTaxInfo> m=new HashMap<String,TicketTaxInfo>();
  TicketLineInfo oLine;
  for (Iterator<TicketLineInfo> i=m_aLines.iterator(); i.hasNext(); ) {
    oLine=i.next();
    TicketTaxInfo t=m.get(oLine.getTaxInfo().getId());
    if (t == null) {
      t=new TicketTaxInfo(oLine.getTaxInfo());
      m.put(t.getTaxInfo().getId(),t);
    }
    t.add(oLine.getSubValue());
  }
  Collection<TicketTaxInfo> avalues=m.values();
  return avalues.toArray(new TicketTaxInfo[avalues.size()]);
}"
20338,"public void setActiveTicket(TicketInfo oTicket,Object oTicketExt){
  m_oTicket=oTicket;
  m_oTicketExt=oTicketExt;
  m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
  m_oTicket.setActiveCash(m_App.getActiveCashIndex());
  m_oTicket.setDate(new Date());
  executeEvent(m_oTicket,m_oTicketExt,""String_Node_Str"");
  refreshTicket();
}","public void setActiveTicket(TicketInfo oTicket,Object oTicketExt){
  m_oTicket=oTicket;
  m_oTicketExt=oTicketExt;
  if (m_oTicket != null) {
    m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
    m_oTicket.setActiveCash(m_App.getActiveCashIndex());
    m_oTicket.setDate(new Date());
  }
  executeEvent(m_oTicket,m_oTicketExt,""String_Node_Str"");
  refreshTicket();
}"
20339,"private void jButton3ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line=receipttwo.getSelectedLine();
  if (line != null) {
    receiptone.addSelectedLine(line);
  }
}","private void jButton3ActionPerformed(java.awt.event.ActionEvent evt){
  int numAux=receipttwo.countNumberAuxiliar();
  int ini=receipttwo.getJticketLine().getSelectedIndex();
  for (int i=ini; i <= ini + numAux; i++) {
    TicketLineInfo line=receipttwo.getSelectedLine();
    if (line != null) {
      receiptone.addSelectedLine(line);
    }
  }
}"
20340,"private void jButton5ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line=receiptone.getSelectedLineUnit();
  if (line != null) {
    receipttwo.addSelectedLine(line);
  }
}","private void jButton5ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line;
  int numAux=receiptone.countNumberAuxiliar();
  int ini=receiptone.getJticketLine().getSelectedIndex();
  if (numAux != 0) {
    line=receiptone.getSelectedLineUnit();
    receipttwo.addSelectedLine(line);
    int a=receiptone.countNumberAuxiliar();
    if (a != 0) {
      receiptone.getJticketLine().selectionDown();
    }
    ini=receiptone.getJticketLine().getSelectedIndex();
    for (int i=ini + 1; i <= ini + numAux; i++) {
      line=receiptone.getSelectedLine();
      if (line != null) {
        receipttwo.addSelectedLine(line);
      }
    }
  }
 else {
    line=receiptone.getSelectedLineUnit();
    receipttwo.addSelectedLine(line);
  }
}"
20341,"private void jButton2ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line=receipttwo.getSelectedLineUnit();
  if (line != null) {
    receiptone.addSelectedLine(line);
  }
}","private void jButton2ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line;
  int numAux=receipttwo.countNumberAuxiliar();
  int ini=receipttwo.getJticketLine().getSelectedIndex();
  if (numAux != 0) {
    line=receipttwo.getSelectedLineUnit();
    receiptone.addSelectedLine(line);
    int a=receipttwo.countNumberAuxiliar();
    if (a != 0) {
      receipttwo.getJticketLine().selectionDown();
    }
    ini=receipttwo.getJticketLine().getSelectedIndex();
    for (int i=ini + 1; i <= ini + numAux; i++) {
      line=receipttwo.getSelectedLine();
      if (line != null) {
        receiptone.addSelectedLine(line);
      }
    }
  }
 else {
    line=receipttwo.getSelectedLineUnit();
    receiptone.addSelectedLine(line);
  }
}"
20342,"private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  TicketLineInfo line=receiptone.getSelectedLine();
  if (line != null) {
    receipttwo.addSelectedLine(line);
  }
}","private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
  int numAux=receiptone.countNumberAuxiliar();
  int ini=receiptone.getJticketLine().getSelectedIndex();
  for (int i=ini; i <= ini + numAux; i++) {
    TicketLineInfo line=receiptone.getSelectedLine();
    if (line != null) {
      receipttwo.addSelectedLine(line);
    }
  }
}"
20343,"/** 
 * Creates a new instance of SentenceContainerGeneric 
 */
public DataLogicSales(){
  productcatDatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.BOOLEAN,Datas.BOOLEAN,Datas.DOUBLE,Datas.DOUBLE,Datas.STRING,Datas.STRING,Datas.IMAGE,Datas.DOUBLE,Datas.DOUBLE,Datas.BOOLEAN,Datas.INT,Datas.BYTES};
  stockdiaryDatas=new Datas[]{Datas.STRING,Datas.TIMESTAMP,Datas.INT,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE};
  paymenttabledatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.STRING,Datas.DOUBLE};
  stockdatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE};
}","/** 
 * Creates a new instance of SentenceContainerGeneric 
 */
public DataLogicSales(){
  productcatDatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.BOOLEAN,Datas.BOOLEAN,Datas.DOUBLE,Datas.DOUBLE,Datas.STRING,Datas.STRING,Datas.IMAGE,Datas.DOUBLE,Datas.DOUBLE,Datas.BOOLEAN,Datas.INT,Datas.BYTES};
  stockdiaryDatas=new Datas[]{Datas.STRING,Datas.TIMESTAMP,Datas.INT,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE};
  paymenttabledatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.STRING,Datas.DOUBLE};
  stockdatas=new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE};
  auxiliarDatas=new Datas[]{Datas.STRING,Datas.STRING};
}"
20344,"protected void typeCharInternal(char c){
  String sOldText=getText();
  if (c == '\u0008') {
    if (m_cLastChar == '\u0000') {
      if (m_svalue != null && m_svalue.length() > 0) {
        m_svalue=m_svalue.substring(0,m_svalue.length() - 1);
      }
    }
 else {
      m_iTicks=0;
      m_cLastChar='\u0000';
    }
  }
 else   if (c == '\u007f') {
    m_svalue=null;
    m_iTicks=0;
    m_cLastChar='\u0000';
  }
 else   if (c >= ' ') {
    if (m_cLastChar != '\u0000') {
      char ckey=getKeyChar();
      m_svalue=appendChar2Value(ckey);
      acceptKeyChar(ckey);
    }
    m_iTicks=0;
    m_cLastChar='\u0000';
    m_svalue=appendChar2Value(c);
  }
  m_jtimer.restart();
  firePropertyChange(""String_Node_Str"",sOldText,getText());
}","protected void typeCharInternal(char c){
  String sOldText=getText();
  if (c == '\u0008') {
    if (m_cLastChar == '\u0000') {
      if (m_svalue != null && m_svalue.length() > 0) {
        m_svalue=m_svalue.substring(0,m_svalue.length() - 1);
      }
    }
 else {
      m_iTicks=0;
      m_cLastChar='\u0000';
    }
  }
 else   if (c == '\u007f') {
    m_iMode=getStartMode();
    m_svalue=null;
    m_iTicks=0;
    m_cLastChar='\u0000';
  }
 else   if (c >= ' ') {
    if (m_cLastChar != '\u0000') {
      char ckey=getKeyChar();
      m_svalue=appendChar2Value(ckey);
      acceptKeyChar(ckey);
    }
    m_iTicks=0;
    m_cLastChar='\u0000';
    m_svalue=appendChar2Value(c);
  }
  m_jtimer.restart();
  firePropertyChange(""String_Node_Str"",sOldText,getText());
}"
20345,"protected void transCharInternal(char c){
  String sOldText=getText();
  if (c == '-') {
    if (m_cLastChar == '\u0000') {
      if (m_svalue != null && m_svalue.length() > 0) {
        m_svalue=m_svalue.substring(0,m_svalue.length() - 1);
      }
    }
 else {
      m_iTicks=0;
      m_cLastChar='\u0000';
    }
  }
 else   if (c == '\u007f') {
    m_svalue=null;
    m_iTicks=0;
    m_cLastChar='\u0000';
  }
 else   if (c == '.') {
    if (m_cLastChar != '\u0000') {
      m_svalue=appendChar2Value(getKeyChar());
    }
    m_iTicks=0;
    m_cLastChar='\u0000';
    m_iMode=(m_iMode + 1) % 4;
  }
 else   if (c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0') {
    if (m_iMode == MODE_123) {
      m_svalue=appendChar2Value(c);
    }
 else     if (c == m_cLastChar) {
      m_iTicks++;
    }
 else {
      if (m_cLastChar != '\u0000') {
        char ckey=getKeyChar();
        m_svalue=appendChar2Value(ckey);
        acceptKeyChar(ckey);
      }
      m_iTicks=0;
      m_cLastChar=c;
    }
  }
  m_jtimer.restart();
  firePropertyChange(""String_Node_Str"",sOldText,getText());
}","protected void transCharInternal(char c){
  String sOldText=getText();
  if (c == '-') {
    if (m_cLastChar == '\u0000') {
      if (m_svalue != null && m_svalue.length() > 0) {
        m_svalue=m_svalue.substring(0,m_svalue.length() - 1);
      }
    }
 else {
      m_iTicks=0;
      m_cLastChar='\u0000';
    }
  }
 else   if (c == '\u007f') {
    m_iMode=getStartMode();
    m_svalue=null;
    m_iTicks=0;
    m_cLastChar='\u0000';
  }
 else   if (c == '.') {
    if (m_cLastChar != '\u0000') {
      m_svalue=appendChar2Value(getKeyChar());
    }
    m_iTicks=0;
    m_cLastChar='\u0000';
    m_iMode=(m_iMode + 1) % 4;
  }
 else   if (c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0') {
    if (m_iMode == MODE_123) {
      m_svalue=appendChar2Value(c);
    }
 else     if (c == m_cLastChar) {
      m_iTicks++;
    }
 else {
      if (m_cLastChar != '\u0000') {
        char ckey=getKeyChar();
        m_svalue=appendChar2Value(ckey);
        acceptKeyChar(ckey);
      }
      m_iTicks=0;
      m_cLastChar=c;
    }
  }
  m_jtimer.restart();
  firePropertyChange(""String_Node_Str"",sOldText,getText());
}"
20346,"private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}","private void refreshTicket(){
  CardLayout cl=(CardLayout)(getLayout());
  if (m_oTicket == null) {
    m_jTicketId.setText(null);
    m_ticketlines.clearTicketLines();
    m_jSubtotalEuros.setText(null);
    m_jTaxesEuros.setText(null);
    m_jTotalEuros.setText(null);
    stateToZero();
    cl.show(this,""String_Node_Str"");
  }
 else {
    m_oTicket.setUser(m_App.getAppUserView().getUser().getUserInfo());
    for (    TicketLineInfo line : m_oTicket.getLines()) {
      line.setTaxInfo(taxeslogic.getTaxInfo(line.getProductTaxCategoryID(),m_oTicket.getCustomer()));
    }
    m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
    m_ticketlines.clearTicketLines();
    for (int i=0; i < m_oTicket.getLinesCount(); i++) {
      m_ticketlines.addTicketLine(m_oTicket.getLine(i));
    }
    printPartialTotals();
    stateToZero();
    cl.show(this,""String_Node_Str"");
    m_jKeyFactory.setText(null);
    java.awt.EventQueue.invokeLater(new Runnable(){
      public void run(){
        m_jKeyFactory.requestFocus();
      }
    }
);
  }
}"
20347,"public void printLine(String sproduct,double dprice,double dunits){
  try {
    m_fiscal.printRecItem(sproduct,(int)(dprice * dunits * 10000.0),0,0,(int)(dprice * 10000.0),""String_Node_Str"");
  }
 catch (  JposException e) {
  }
}","public void printLine(String sproduct,double dprice,double dunits){
  try {
    m_fiscal.printRecItem(sproduct,roundFiscal(dprice * dunits),0,0,roundFiscal(dprice),""String_Node_Str"");
  }
 catch (  JposException e) {
  }
}"
20348,"public void printTotal(String sPayment,double dpaid){
  try {
    m_fiscal.printRecTotal(0,(int)(dpaid * 10000),sPayment);
  }
 catch (  JposException e) {
  }
}","public void printTotal(String sPayment,double dpaid){
  try {
    m_fiscal.printRecTotal(0,roundFiscal(dpaid),sPayment);
  }
 catch (  JposException e) {
  }
}"
20349,"/** 
 * Creates a new instance of WebServiceHelper 
 */
public ExternalSalesHelper(DataLogicSystem dlsystem) throws BasicException, ServiceException, MalformedURLException {
  Properties prop=dlsystem.getResourceAsProperties(""String_Node_Str"");
  if (prop == null) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
  }
 else {
    String url=prop.getProperty(""String_Node_Str"");
    if (url == null || url.equals(""String_Node_Str"")) {
      throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      url=url.trim();
      if (url.endsWith(""String_Node_Str"")) {
        url=url.substring(0,url.length() - 14);
      }
      externalSales=new ExternalSalesImplServiceLocator().getExternalSales(new URL(url + ""String_Node_Str""));
      externalCustomers=new WebServiceImplServiceLocator().getWebService(new URL(url + ""String_Node_Str""));
      m_sERPUser=prop.getProperty(""String_Node_Str"");
      m_sERPPassword=prop.getProperty(""String_Node_Str"");
      if (m_sERPUser != null && m_sERPPassword != null && m_sERPPassword.startsWith(""String_Node_Str"")) {
        AltEncrypter cypher=new AltEncrypter(""String_Node_Str"" + m_sERPUser);
        m_sERPPassword=cypher.decrypt(m_sERPPassword.substring(6));
      }
      m_sERPPassword=getPasswordHash(m_sERPPassword);
      m_iERPId=Integer.parseInt(prop.getProperty(""String_Node_Str""));
      m_iERPOrg=Integer.parseInt(prop.getProperty(""String_Node_Str""));
      m_iERPPos=Integer.parseInt(prop.getProperty(""String_Node_Str""));
    }
  }
}","/** 
 * Creates a new instance of WebServiceHelper 
 */
public ExternalSalesHelper(DataLogicSystem dlsystem) throws BasicException, ServiceException, MalformedURLException {
  Properties prop=dlsystem.getResourceAsProperties(""String_Node_Str"");
  if (prop == null) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
  }
 else {
    String url=prop.getProperty(""String_Node_Str"");
    if (url == null || url.equals(""String_Node_Str"")) {
      throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      url=url.trim();
      if (url.endsWith(""String_Node_Str"")) {
        url=url.substring(0,url.length() - 14);
      }
      externalSales=new ExternalSalesImplServiceLocator().getExternalSales(new URL(url + ""String_Node_Str""));
      externalCustomers=new WebServiceImplServiceLocator().getWebService(new URL(url + ""String_Node_Str""));
      m_sERPUser=prop.getProperty(""String_Node_Str"");
      m_sERPPassword=prop.getProperty(""String_Node_Str"");
      if (m_sERPUser != null && m_sERPPassword != null && m_sERPPassword.startsWith(""String_Node_Str"")) {
        AltEncrypter cypher=new AltEncrypter(""String_Node_Str"" + m_sERPUser);
        m_sERPPassword=cypher.decrypt(m_sERPPassword.substring(6));
      }
      m_sERPPassword=getPasswordHash(m_sERPPassword);
      m_iERPId=prop.getProperty(""String_Node_Str"");
      m_iERPOrg=prop.getProperty(""String_Node_Str"");
      m_iERPPos=prop.getProperty(""String_Node_Str"");
    }
  }
}"
20350,"private Order[] transformTickets(List<TicketInfo> ticketlist){
  Order[] orders=new Order[ticketlist.size()];
  for (int i=0; i < ticketlist.size(); i++) {
    TicketInfo ticket=ticketlist.get(i);
    orders[i]=new Order();
    OrderIdentifier orderid=new OrderIdentifier();
    Calendar datenew=Calendar.getInstance();
    datenew.setTime(ticket.getDate());
    orderid.setDateNew(datenew);
    orderid.setDocumentNo(Integer.toString(ticket.getTicketId()));
    orders[i].setOrderId(orderid);
    orders[i].setState(800175);
    BPartner bp;
    if (ticket.getCustomerId() == null) {
      bp=null;
    }
 else {
      bp=new BPartner();
      bp.setId(ticket.getCustomer().getSearchkey());
      bp.setName(ticket.getCustomer().getName());
    }
    orders[i].setBusinessPartner(bp);
    OrderLine[] orderLine=new OrderLine[ticket.getLines().size()];
    for (int j=0; j < ticket.getLines().size(); j++) {
      TicketLineInfo line=ticket.getLines().get(j);
      orderLine[j]=new OrderLine();
      orderLine[j].setOrderLineId(line.getTicketLine());
      if (line.getProductID() == null) {
        orderLine[j].setProductId(0);
      }
 else {
        orderLine[j].setProductId(parseInt(line.getProductID()));
      }
      orderLine[j].setUnits(line.getMultiply());
      orderLine[j].setPrice(line.getPrice());
      orderLine[j].setTaxId(parseInt(line.getTaxInfo().getId()));
    }
    orders[i].setLines(orderLine);
    Payment[] paymentLine=new Payment[ticket.getPayments().size()];
    for (int j=0; j < ticket.getPayments().size(); j++) {
      PaymentInfo payment=ticket.getPayments().get(j);
      paymentLine[j]=new Payment();
      paymentLine[j].setAmount(payment.getTotal());
      if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else {
        paymentLine[j].setPaymentType(null);
      }
    }
    orders[i].setPayment(paymentLine);
  }
  return orders;
}","private Order[] transformTickets(List<TicketInfo> ticketlist){
  Order[] orders=new Order[ticketlist.size()];
  for (int i=0; i < ticketlist.size(); i++) {
    TicketInfo ticket=ticketlist.get(i);
    orders[i]=new Order();
    OrderIdentifier orderid=new OrderIdentifier();
    Calendar datenew=Calendar.getInstance();
    datenew.setTime(ticket.getDate());
    orderid.setDateNew(datenew);
    orderid.setDocumentNo(Integer.toString(ticket.getTicketId()));
    orders[i].setOrderId(orderid);
    orders[i].setState(800175);
    BPartner bp;
    if (ticket.getCustomerId() == null) {
      bp=null;
    }
 else {
      bp=new BPartner();
      bp.setId(ticket.getCustomer().getSearchkey());
      bp.setName(ticket.getCustomer().getName());
    }
    orders[i].setBusinessPartner(bp);
    OrderLine[] orderLine=new OrderLine[ticket.getLines().size()];
    for (int j=0; j < ticket.getLines().size(); j++) {
      TicketLineInfo line=ticket.getLines().get(j);
      orderLine[j]=new OrderLine();
      orderLine[j].setOrderLineId(String.valueOf(line.getTicketLine()));
      if (line.getProductID() == null) {
        orderLine[j].setProductId(""String_Node_Str"");
      }
 else {
        orderLine[j].setProductId(line.getProductID());
      }
      orderLine[j].setUnits(line.getMultiply());
      orderLine[j].setPrice(line.getPrice());
      orderLine[j].setTaxId(line.getTaxInfo().getId());
    }
    orders[i].setLines(orderLine);
    Payment[] paymentLine=new Payment[ticket.getPayments().size()];
    for (int j=0; j < ticket.getPayments().size(); j++) {
      PaymentInfo payment=ticket.getPayments().get(j);
      paymentLine[j]=new Payment();
      paymentLine[j].setAmount(payment.getTotal());
      if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".equals(payment.getName())) {
        paymentLine[j].setPaymentType(""String_Node_Str"");
      }
 else {
        paymentLine[j].setPaymentType(null);
      }
    }
    orders[i].setPayment(paymentLine);
  }
  return orders;
}"
20351,"public MessageInf execute() throws BasicException {
  try {
    if (externalsales == null) {
      externalsales=new ExternalSalesHelper(dlsystem);
    }
    Product[] products=externalsales.getProductsCatalog();
    Customer[] customers=externalsales.getCustomers();
    if (products == null || customers == null) {
      throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
    }
    if (products.length > 0) {
      dlintegration.syncProductsBefore();
      Date now=new Date();
      for (      Product product : products) {
        TaxCategoryInfo tc=new TaxCategoryInfo();
        tc.setID(Integer.toString(product.getTax().getId()));
        tc.setName(product.getTax().getName());
        dlintegration.syncTaxCategory(tc);
        TaxInfo t=new TaxInfo();
        t.setID(Integer.toString(product.getTax().getId()));
        t.setName(product.getTax().getName());
        t.setTaxCategoryID(tc.getID());
        t.setRate(product.getTax().getPercentage() / 100);
        t.setCascade(false);
        dlintegration.syncTax(t);
        CategoryInfo c=new CategoryInfo();
        c.setID(Integer.toString(product.getCategory().getId()));
        c.setName(product.getCategory().getName());
        c.setImage(null);
        dlintegration.syncCategory(c);
        ProductInfoExt p=new ProductInfoExt();
        p.setID(Integer.toString(product.getId()));
        p.setReference(Integer.toString(product.getId()));
        p.setCode(product.getEan() == null || product.getEan().equals(""String_Node_Str"") ? Integer.toString(product.getId()) : product.getEan());
        p.setName(product.getName());
        p.setCom(false);
        p.setScale(false);
        p.setPriceBuy(product.getPurchasePrice());
        p.setPriceSell(product.getListPrice());
        p.setCategoryID(c.getID());
        p.setTaxCategoryInfo(tc);
        p.setImage(ImageUtils.readImage(product.getImageUrl()));
        dlintegration.syncProduct(p);
        if (product instanceof ProductPlus) {
          ProductPlus productplus=(ProductPlus)product;
          double diff=productplus.getQtyonhand() - dlsales.findProductStock(p.getID(),warehouse);
          Object[] diary=new Object[7];
          diary[0]=UUID.randomUUID().toString();
          diary[1]=now;
          diary[2]=diff > 0.0 ? MovementReason.IN_MOVEMENT.getKey() : MovementReason.OUT_MOVEMENT.getKey();
          diary[3]=warehouse;
          diary[4]=p.getID();
          diary[5]=new Double(diff);
          diary[6]=new Double(p.getPriceBuy());
          dlsales.getStockDiaryInsert().exec(diary);
        }
      }
    }
    if (customers.length > 0) {
      dlintegration.syncCustomersBefore();
      for (      Customer customer : customers) {
        CustomerInfoExt cinfo=new CustomerInfoExt(Integer.toString(customer.getId()));
        cinfo.setSearchkey(customer.getSearchKey());
        cinfo.setName(customer.getName());
        cinfo.setNotes(customer.getDescription());
        dlintegration.syncCustomer(cinfo);
      }
    }
    if (products.length == 0 && customers.length == 0) {
      return new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      return new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str"",products.length,customers.length));
    }
  }
 catch (  ServiceException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  RemoteException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  MalformedURLException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
}","public MessageInf execute() throws BasicException {
  try {
    if (externalsales == null) {
      externalsales=new ExternalSalesHelper(dlsystem);
    }
    Product[] products=externalsales.getProductsCatalog();
    Customer[] customers=externalsales.getCustomers();
    if (products == null || customers == null) {
      throw new BasicException(AppLocal.getIntString(""String_Node_Str""));
    }
    if (products.length > 0) {
      dlintegration.syncProductsBefore();
      Date now=new Date();
      for (      Product product : products) {
        TaxCategoryInfo tc=new TaxCategoryInfo();
        tc.setID(product.getTax().getId());
        tc.setName(product.getTax().getName());
        dlintegration.syncTaxCategory(tc);
        TaxInfo t=new TaxInfo();
        t.setID(product.getTax().getId());
        t.setName(product.getTax().getName());
        t.setTaxCategoryID(tc.getID());
        t.setRate(product.getTax().getPercentage() / 100);
        t.setCascade(false);
        dlintegration.syncTax(t);
        CategoryInfo c=new CategoryInfo();
        c.setID(product.getCategory().getId());
        c.setName(product.getCategory().getName());
        c.setImage(null);
        dlintegration.syncCategory(c);
        ProductInfoExt p=new ProductInfoExt();
        p.setID(product.getId());
        p.setReference(product.getId());
        p.setCode(product.getEan() == null || product.getEan().equals(""String_Node_Str"") ? product.getId() : product.getEan());
        p.setName(product.getName());
        p.setCom(false);
        p.setScale(false);
        p.setPriceBuy(product.getPurchasePrice());
        p.setPriceSell(product.getListPrice());
        p.setCategoryID(c.getID());
        p.setTaxCategoryInfo(tc);
        p.setImage(ImageUtils.readImage(product.getImageUrl()));
        dlintegration.syncProduct(p);
        if (product instanceof ProductPlus) {
          ProductPlus productplus=(ProductPlus)product;
          double diff=productplus.getQtyonhand() - dlsales.findProductStock(p.getID(),warehouse);
          Object[] diary=new Object[7];
          diary[0]=UUID.randomUUID().toString();
          diary[1]=now;
          diary[2]=diff > 0.0 ? MovementReason.IN_MOVEMENT.getKey() : MovementReason.OUT_MOVEMENT.getKey();
          diary[3]=warehouse;
          diary[4]=p.getID();
          diary[5]=new Double(diff);
          diary[6]=new Double(p.getPriceBuy());
          dlsales.getStockDiaryInsert().exec(diary);
        }
      }
    }
    if (customers.length > 0) {
      dlintegration.syncCustomersBefore();
      for (      Customer customer : customers) {
        CustomerInfoExt cinfo=new CustomerInfoExt(customer.getId());
        cinfo.setSearchkey(customer.getSearchKey());
        cinfo.setName(customer.getName());
        cinfo.setNotes(customer.getDescription());
        dlintegration.syncCustomer(cinfo);
      }
    }
    if (products.length == 0 && customers.length == 0) {
      return new MessageInf(MessageInf.SGN_NOTICE,AppLocal.getIntString(""String_Node_Str""));
    }
 else {
      return new MessageInf(MessageInf.SGN_SUCCESS,AppLocal.getIntString(""String_Node_Str""),AppLocal.getIntString(""String_Node_Str"",products.length,customers.length));
    }
  }
 catch (  ServiceException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  RemoteException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
catch (  MalformedURLException e) {
    throw new BasicException(AppLocal.getIntString(""String_Node_Str""),e);
  }
}"
20352,"/** 
 * Gets the clientId value for this BusinessPartner.
 * @return clientId
 */
public int getClientId(){
  return clientId;
}","/** 
 * Gets the clientId value for this BusinessPartner.
 * @return clientId
 */
public java.lang.String getClientId(){
  return clientId;
}"
20353,"public BusinessPartner(int clientId,java.lang.Boolean complete,com.openbravo.ws.customers.Contact[] contacts,java.lang.Boolean customer,java.lang.String description,int id,com.openbravo.ws.customers.Location[] locations,java.lang.String name,java.lang.String searchKey,java.lang.Boolean vendor){
  this.clientId=clientId;
  this.complete=complete;
  this.contacts=contacts;
  this.customer=customer;
  this.description=description;
  this.id=id;
  this.locations=locations;
  this.name=name;
  this.searchKey=searchKey;
  this.vendor=vendor;
}","public BusinessPartner(java.lang.String clientId,java.lang.Boolean complete,com.openbravo.ws.customers.Contact[] contacts,java.lang.Boolean customer,java.lang.String description,java.lang.String id,com.openbravo.ws.customers.Location[] locations,java.lang.String name,java.lang.String searchKey,java.lang.Boolean vendor){
  this.clientId=clientId;
  this.complete=complete;
  this.contacts=contacts;
  this.customer=customer;
  this.description=description;
  this.id=id;
  this.locations=locations;
  this.name=name;
  this.searchKey=searchKey;
  this.vendor=vendor;
}"
20354,"/** 
 * Gets the id value for this BusinessPartner.
 * @return id
 */
public int getId(){
  return id;
}","/** 
 * Gets the id value for this BusinessPartner.
 * @return id
 */
public java.lang.String getId(){
  return id;
}"
20355,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=getClientId();
  if (getComplete() != null) {
    _hashCode+=getComplete().hashCode();
  }
  if (getContacts() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getContacts()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getContacts(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  if (getCustomer() != null) {
    _hashCode+=getCustomer().hashCode();
  }
  if (getDescription() != null) {
    _hashCode+=getDescription().hashCode();
  }
  _hashCode+=getId();
  if (getLocations() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getLocations()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getLocations(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getSearchKey() != null) {
    _hashCode+=getSearchKey().hashCode();
  }
  if (getVendor() != null) {
    _hashCode+=getVendor().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  if (getClientId() != null) {
    _hashCode+=getClientId().hashCode();
  }
  if (getComplete() != null) {
    _hashCode+=getComplete().hashCode();
  }
  if (getContacts() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getContacts()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getContacts(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  if (getCustomer() != null) {
    _hashCode+=getCustomer().hashCode();
  }
  if (getDescription() != null) {
    _hashCode+=getDescription().hashCode();
  }
  if (getId() != null) {
    _hashCode+=getId().hashCode();
  }
  if (getLocations() != null) {
    for (int i=0; i < java.lang.reflect.Array.getLength(getLocations()); i++) {
      java.lang.Object obj=java.lang.reflect.Array.get(getLocations(),i);
      if (obj != null && !obj.getClass().isArray()) {
        _hashCode+=obj.hashCode();
      }
    }
  }
  if (getName() != null) {
    _hashCode+=getName().hashCode();
  }
  if (getSearchKey() != null) {
    _hashCode+=getSearchKey().hashCode();
  }
  if (getVendor() != null) {
    _hashCode+=getVendor().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}"
20356,"/** 
 * Sets the id value for this BusinessPartner.
 * @param id
 */
public void setId(int id){
  this.id=id;
}","/** 
 * Sets the id value for this BusinessPartner.
 * @param id
 */
public void setId(java.lang.String id){
  this.id=id;
}"
20357,"public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof BusinessPartner))   return false;
  BusinessPartner other=(BusinessPartner)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && this.clientId == other.getClientId() && ((this.complete == null && other.getComplete() == null) || (this.complete != null && this.complete.equals(other.getComplete()))) && ((this.contacts == null && other.getContacts() == null) || (this.contacts != null && java.util.Arrays.equals(this.contacts,other.getContacts()))) && ((this.customer == null && other.getCustomer() == null) || (this.customer != null && this.customer.equals(other.getCustomer()))) && ((this.description == null && other.getDescription() == null) || (this.description != null && this.description.equals(other.getDescription()))) && this.id == other.getId() && ((this.locations == null && other.getLocations() == null) || (this.locations != null && java.util.Arrays.equals(this.locations,other.getLocations()))) && ((this.name == null && other.getName() == null) || (this.name != null && this.name.equals(other.getName()))) && ((this.searchKey == null && other.getSearchKey() == null) || (this.searchKey != null && this.searchKey.equals(other.getSearchKey()))) && ((this.vendor == null && other.getVendor() == null) || (this.vendor != null && this.vendor.equals(other.getVendor())));
  __equalsCalc=null;
  return _equals;
}","public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof BusinessPartner))   return false;
  BusinessPartner other=(BusinessPartner)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && ((this.clientId == null && other.getClientId() == null) || (this.clientId != null && this.clientId.equals(other.getClientId()))) && ((this.complete == null && other.getComplete() == null) || (this.complete != null && this.complete.equals(other.getComplete())))&& ((this.contacts == null && other.getContacts() == null) || (this.contacts != null && java.util.Arrays.equals(this.contacts,other.getContacts())))&& ((this.customer == null && other.getCustomer() == null) || (this.customer != null && this.customer.equals(other.getCustomer())))&& ((this.description == null && other.getDescription() == null) || (this.description != null && this.description.equals(other.getDescription())))&& ((this.id == null && other.getId() == null) || (this.id != null && this.id.equals(other.getId())))&& ((this.locations == null && other.getLocations() == null) || (this.locations != null && java.util.Arrays.equals(this.locations,other.getLocations())))&& ((this.name == null && other.getName() == null) || (this.name != null && this.name.equals(other.getName())))&& ((this.searchKey == null && other.getSearchKey() == null) || (this.searchKey != null && this.searchKey.equals(other.getSearchKey())))&& ((this.vendor == null && other.getVendor() == null) || (this.vendor != null && this.vendor.equals(other.getVendor())));
  __equalsCalc=null;
  return _equals;
}"
20358,"/** 
 * Sets the clientId value for this BusinessPartner.
 * @param clientId
 */
public void setClientId(int clientId){
  this.clientId=clientId;
}","/** 
 * Sets the clientId value for this BusinessPartner.
 * @param clientId
 */
public void setClientId(java.lang.String clientId){
  this.clientId=clientId;
}"
20359,"/** 
 * Gets the clientId value for this Contact.
 * @return clientId
 */
public int getClientId(){
  return clientId;
}","/** 
 * Gets the clientId value for this Contact.
 * @return clientId
 */
public java.lang.String getClientId(){
  return clientId;
}"
20360,"/** 
 * Gets the id value for this Contact.
 * @return id
 */
public int getId(){
  return id;
}","/** 
 * Gets the id value for this Contact.
 * @return id
 */
public java.lang.String getId(){
  return id;
}"
20361,"/** 
 * Sets the businessPartnerId value for this Contact.
 * @param businessPartnerId
 */
public void setBusinessPartnerId(int businessPartnerId){
  this.businessPartnerId=businessPartnerId;
}","/** 
 * Sets the businessPartnerId value for this Contact.
 * @param businessPartnerId
 */
public void setBusinessPartnerId(java.lang.String businessPartnerId){
  this.businessPartnerId=businessPartnerId;
}"
20362,"public Contact(int businessPartnerId,int clientId,java.lang.String email,java.lang.String fax,java.lang.String firstName,int id,java.lang.String lastName,java.lang.String phone,java.lang.String phone2){
  this.businessPartnerId=businessPartnerId;
  this.clientId=clientId;
  this.email=email;
  this.fax=fax;
  this.firstName=firstName;
  this.id=id;
  this.lastName=lastName;
  this.phone=phone;
  this.phone2=phone2;
}","public Contact(java.lang.String businessPartnerId,java.lang.String clientId,java.lang.String email,java.lang.String fax,java.lang.String firstName,java.lang.String id,java.lang.String lastName,java.lang.String phone,java.lang.String phone2){
  this.businessPartnerId=businessPartnerId;
  this.clientId=clientId;
  this.email=email;
  this.fax=fax;
  this.firstName=firstName;
  this.id=id;
  this.lastName=lastName;
  this.phone=phone;
  this.phone2=phone2;
}"
20363,"public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  _hashCode+=getBusinessPartnerId();
  _hashCode+=getClientId();
  if (getEmail() != null) {
    _hashCode+=getEmail().hashCode();
  }
  if (getFax() != null) {
    _hashCode+=getFax().hashCode();
  }
  if (getFirstName() != null) {
    _hashCode+=getFirstName().hashCode();
  }
  _hashCode+=getId();
  if (getLastName() != null) {
    _hashCode+=getLastName().hashCode();
  }
  if (getPhone() != null) {
    _hashCode+=getPhone().hashCode();
  }
  if (getPhone2() != null) {
    _hashCode+=getPhone2().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}","public synchronized int hashCode(){
  if (__hashCodeCalc) {
    return 0;
  }
  __hashCodeCalc=true;
  int _hashCode=1;
  if (getBusinessPartnerId() != null) {
    _hashCode+=getBusinessPartnerId().hashCode();
  }
  if (getClientId() != null) {
    _hashCode+=getClientId().hashCode();
  }
  if (getEmail() != null) {
    _hashCode+=getEmail().hashCode();
  }
  if (getFax() != null) {
    _hashCode+=getFax().hashCode();
  }
  if (getFirstName() != null) {
    _hashCode+=getFirstName().hashCode();
  }
  if (getId() != null) {
    _hashCode+=getId().hashCode();
  }
  if (getLastName() != null) {
    _hashCode+=getLastName().hashCode();
  }
  if (getPhone() != null) {
    _hashCode+=getPhone().hashCode();
  }
  if (getPhone2() != null) {
    _hashCode+=getPhone2().hashCode();
  }
  __hashCodeCalc=false;
  return _hashCode;
}"
20364,"public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof Contact))   return false;
  Contact other=(Contact)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && this.businessPartnerId == other.getBusinessPartnerId() && this.clientId == other.getClientId() && ((this.email == null && other.getEmail() == null) || (this.email != null && this.email.equals(other.getEmail()))) && ((this.fax == null && other.getFax() == null) || (this.fax != null && this.fax.equals(other.getFax()))) && ((this.firstName == null && other.getFirstName() == null) || (this.firstName != null && this.firstName.equals(other.getFirstName()))) && this.id == other.getId() && ((this.lastName == null && other.getLastName() == null) || (this.lastName != null && this.lastName.equals(other.getLastName()))) && ((this.phone == null && other.getPhone() == null) || (this.phone != null && this.phone.equals(other.getPhone()))) && ((this.phone2 == null && other.getPhone2() == null) || (this.phone2 != null && this.phone2.equals(other.getPhone2())));
  __equalsCalc=null;
  return _equals;
}","public synchronized boolean equals(java.lang.Object obj){
  if (!(obj instanceof Contact))   return false;
  Contact other=(Contact)obj;
  if (obj == null)   return false;
  if (this == obj)   return true;
  if (__equalsCalc != null) {
    return (__equalsCalc == obj);
  }
  __equalsCalc=obj;
  boolean _equals;
  _equals=true && ((this.businessPartnerId == null && other.getBusinessPartnerId() == null) || (this.businessPartnerId != null && this.businessPartnerId.equals(other.getBusinessPartnerId()))) && ((this.clientId == null && other.getClientId() == null) || (this.clientId != null && this.clientId.equals(other.getClientId())))&& ((this.email == null && other.getEmail() == null) || (this.email != null && this.email.equals(other.getEmail())))&& ((this.fax == null && other.getFax() == null) || (this.fax != null && this.fax.equals(other.getFax())))&& ((this.firstName == null && other.getFirstName() == null) || (this.firstName != null && this.firstName.equals(other.getFirstName())))&& ((this.id == null && other.getId() == null) || (this.id != null && this.id.equals(other.getId())))&& ((this.lastName == null && other.getLastName() == null) || (this.lastName != null && this.lastName.equals(other.getLastName())))&& ((this.phone == null && other.getPhone() == null) || (this.phone != null && this.phone.equals(other.getPhone())))&& ((this.phone2 == null && other.getPhone2() == null) || (this.phone2 != null && this.phone2.equals(other.getPhone2())));
  __equalsCalc=null;
  return _equals;
}"
20365,"/** 
 * Sets the id value for this Contact.
 * @param id
 */
public void setId(int id){
  this.id=id;
}","/** 
 * Sets the id value for this Contact.
 * @param id
 */
public void setId(java.lang.String id){
  this.id=id;
}"
20366,"/** 
 * Gets the businessPartnerId value for this Contact.
 * @return businessPartnerId
 */
public int getBusinessPartnerId(){
  return businessPartnerId;
}","/** 
 * Gets the businessPartnerId value for this Contact.
 * @return businessPartnerId
 */
public java.lang.String getBusinessPartnerId(){
  return businessPartnerId;
}"
20367,"/** 
 * Sets the clientId value for this Contact.
 * @param clientId
 */
public void setClientId(int clientId){
  this.clientId=clientId;
}","/** 
 * Sets the clientId value for this Contact.
 * @param clientId
 */
public void setClientId(java.lang.String clientId){
  this.clientId=clientId;
}"
20368,"public void valueChanged(ListSelectionEvent e){
  if (!e.getValueIsAdjusting()) {
    int i=m_ticketlines.getSelectedIndex();
    while (i >= 0 && m_oTicket.getLine(i).isProductCom()) {
      i--;
    }
    if (i >= 0) {
      m_cat.showCatalogPanel(m_oTicket.getLine(i).getProductID());
    }
 else {
      m_cat.showCatalogPanel(null);
    }
  }
}","public void valueChanged(ListSelectionEvent e){
  if (!e.getValueIsAdjusting()) {
    int i=m_ticketlines.getSelectedIndex();
    if (i >= 0) {
      while (i >= 0 && m_oTicket.getLine(i).isProductCom()) {
        i--;
      }
      if (i >= 0) {
        m_cat.showCatalogPanel(m_oTicket.getLine(i).getProductID());
      }
 else {
        m_cat.showCatalogPanel(null);
      }
    }
  }
}"
20369,"private void paintTicketLine(int index,TicketLineInfo oLine){
  if (executeEventAndRefresh(""String_Node_Str"",new ScriptArg(""String_Node_Str"",index),new ScriptArg(""String_Node_Str"",oLine)) == null) {
    m_ticketlines.setTicketLine(index,oLine);
    m_ticketlines.setSelectedIndex(index);
    visorTicketLine(oLine);
    printPartialTotals();
    stateToZero();
    executeEventAndRefresh(""String_Node_Str"");
  }
}","private void paintTicketLine(int index,TicketLineInfo oLine){
  if (executeEventAndRefresh(""String_Node_Str"",new ScriptArg(""String_Node_Str"",index),new ScriptArg(""String_Node_Str"",oLine)) == null) {
    m_oTicket.setLine(index,oLine);
    m_ticketlines.setTicketLine(index,oLine);
    m_ticketlines.setSelectedIndex(index);
    visorTicketLine(oLine);
    printPartialTotals();
    stateToZero();
    executeEventAndRefresh(""String_Node_Str"");
  }
}"
20370,"public void writeValueInsert(){
  reportlock=true;
  m_jTitle.setText(AppLocal.getIntString(""String_Node_Str""));
  m_id=null;
  m_jRef.setText(null);
  m_jCode.setText(null);
  m_jName.setText(null);
  m_jComment.setSelected(false);
  m_jScale.setSelected(false);
  m_CategoryModel.setSelectedKey(null);
  taxcatmodel.setSelectedKey(null);
  m_jPriceBuy.setText(null);
  m_jPriceSell.setText(null);
  m_jImage.setImage(null);
  m_jstockcost.setText(null);
  m_jstockvolume.setText(null);
  m_jInCatalog.setSelected(true);
  m_jCatalogOrder.setText(null);
  txtAttributes.setText(null);
  reportlock=false;
  m_jRef.setEnabled(true);
  m_jCode.setEnabled(true);
  m_jName.setEnabled(true);
  m_jComment.setEnabled(true);
  m_jScale.setEnabled(true);
  m_jCategory.setEnabled(true);
  m_jTax.setEnabled(true);
  m_jPriceBuy.setEnabled(true);
  m_jPriceSell.setEnabled(true);
  m_jPriceSellTax.setEnabled(true);
  m_jmargin.setEnabled(true);
  m_jImage.setEnabled(true);
  m_jstockcost.setEnabled(true);
  m_jstockvolume.setEnabled(true);
  m_jInCatalog.setEnabled(true);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(true);
  calculateMargin();
  calculatePriceSellTax();
}","public void writeValueInsert(){
  reportlock=true;
  m_jTitle.setText(AppLocal.getIntString(""String_Node_Str""));
  m_id=null;
  m_jRef.setText(null);
  m_jCode.setText(null);
  m_jName.setText(null);
  m_jComment.setSelected(false);
  m_jScale.setSelected(false);
  m_CategoryModel.setSelectedKey(null);
  taxcatmodel.setSelectedKey(null);
  m_jPriceBuy.setText(null);
  setPriceSell(null);
  m_jImage.setImage(null);
  m_jstockcost.setText(null);
  m_jstockvolume.setText(null);
  m_jInCatalog.setSelected(true);
  m_jCatalogOrder.setText(null);
  txtAttributes.setText(null);
  reportlock=false;
  m_jRef.setEnabled(true);
  m_jCode.setEnabled(true);
  m_jName.setEnabled(true);
  m_jComment.setEnabled(true);
  m_jScale.setEnabled(true);
  m_jCategory.setEnabled(true);
  m_jTax.setEnabled(true);
  m_jPriceBuy.setEnabled(true);
  m_jPriceSell.setEnabled(true);
  m_jPriceSellTax.setEnabled(true);
  m_jmargin.setEnabled(true);
  m_jImage.setEnabled(true);
  m_jstockcost.setEnabled(true);
  m_jstockvolume.setEnabled(true);
  m_jInCatalog.setEnabled(true);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(true);
  calculateMargin();
  calculatePriceSellTax();
}"
20371,"/** 
 * Creates new form JEditProduct 
 */
public ProductsEditor(DataLogicSales dlSales,DirtyManager dirty){
  initComponents();
  taxsent=dlSales.getTaxList();
  m_sentcat=dlSales.getCategoriesList();
  m_CategoryModel=new ComboBoxValModel();
  taxcatsent=dlSales.getTaxCategoriesList();
  taxcatmodel=new ComboBoxValModel();
  m_CodetypeModel=new ComboBoxValModel();
  m_CodetypeModel.add(null);
  m_CodetypeModel.add(CodeType.EAN13);
  m_CodetypeModel.add(CodeType.CODE128);
  m_jCodetype.setModel(m_CodetypeModel);
  m_jCodetype.setVisible(false);
  m_jRef.getDocument().addDocumentListener(dirty);
  m_jCode.getDocument().addDocumentListener(dirty);
  m_jName.getDocument().addDocumentListener(dirty);
  m_jComment.addActionListener(dirty);
  m_jScale.addActionListener(dirty);
  m_jCategory.addActionListener(dirty);
  m_jTax.addActionListener(dirty);
  m_jPriceBuy.getDocument().addDocumentListener(dirty);
  m_jPriceSell.getDocument().addDocumentListener(dirty);
  m_jImage.addPropertyChangeListener(""String_Node_Str"",dirty);
  m_jstockcost.getDocument().addDocumentListener(dirty);
  m_jstockvolume.getDocument().addDocumentListener(dirty);
  m_jInCatalog.addActionListener(dirty);
  m_jCatalogOrder.getDocument().addDocumentListener(dirty);
  txtAttributes.getDocument().addDocumentListener(dirty);
  FieldsManager fm=new FieldsManager();
  m_jPriceBuy.getDocument().addDocumentListener(fm);
  m_jPriceSell.getDocument().addDocumentListener(fm);
  m_jTax.addActionListener(fm);
  m_jPriceSellTax.getDocument().addDocumentListener(new PriceTaxManager());
  m_jmargin.getDocument().addDocumentListener(new MarginManager());
  writeValueEOF();
}","/** 
 * Creates new form JEditProduct 
 */
public ProductsEditor(DataLogicSales dlSales,DirtyManager dirty){
  initComponents();
  taxsent=dlSales.getTaxList();
  m_sentcat=dlSales.getCategoriesList();
  m_CategoryModel=new ComboBoxValModel();
  taxcatsent=dlSales.getTaxCategoriesList();
  taxcatmodel=new ComboBoxValModel();
  m_CodetypeModel=new ComboBoxValModel();
  m_CodetypeModel.add(null);
  m_CodetypeModel.add(CodeType.EAN13);
  m_CodetypeModel.add(CodeType.CODE128);
  m_jCodetype.setModel(m_CodetypeModel);
  m_jCodetype.setVisible(false);
  m_jRef.getDocument().addDocumentListener(dirty);
  m_jCode.getDocument().addDocumentListener(dirty);
  m_jName.getDocument().addDocumentListener(dirty);
  m_jComment.addActionListener(dirty);
  m_jScale.addActionListener(dirty);
  m_jCategory.addActionListener(dirty);
  m_jTax.addActionListener(dirty);
  m_jPriceBuy.getDocument().addDocumentListener(dirty);
  m_jPriceSell.getDocument().addDocumentListener(dirty);
  m_jImage.addPropertyChangeListener(""String_Node_Str"",dirty);
  m_jstockcost.getDocument().addDocumentListener(dirty);
  m_jstockvolume.getDocument().addDocumentListener(dirty);
  m_jInCatalog.addActionListener(dirty);
  m_jCatalogOrder.getDocument().addDocumentListener(dirty);
  txtAttributes.getDocument().addDocumentListener(dirty);
  FieldsManager fm=new FieldsManager();
  m_jPriceBuy.getDocument().addDocumentListener(fm);
  m_jPriceSell.getDocument().addDocumentListener(new PriceSellManager());
  m_jTax.addActionListener(fm);
  m_jPriceSellTax.getDocument().addDocumentListener(new PriceTaxManager());
  m_jmargin.getDocument().addDocumentListener(new MarginManager());
  writeValueEOF();
}"
20372,"private void calculatePriceSellTax(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceSell=readCurrency(m_jPriceSell.getText());
    if (dPriceSell == null) {
      m_jPriceSellTax.setText(null);
    }
 else {
      double dTaxRate=taxeslogic.getTaxRate((TaxCategoryInfo)taxcatmodel.getSelectedItem());
      m_jPriceSellTax.setText(Formats.CURRENCY.formatValue(new Double(dPriceSell.doubleValue() * (1.0 + dTaxRate))));
    }
    reportlock=false;
  }
}","private void calculatePriceSellTax(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceSell=(Double)pricesell;
    if (dPriceSell == null) {
      m_jPriceSellTax.setText(null);
    }
 else {
      double dTaxRate=taxeslogic.getTaxRate((TaxCategoryInfo)taxcatmodel.getSelectedItem());
      m_jPriceSellTax.setText(Formats.CURRENCY.formatValue(new Double(dPriceSell.doubleValue() * (1.0 + dTaxRate))));
    }
    reportlock=false;
  }
}"
20373,"private void calculatePriceSellfromPST(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceSellTax=readCurrency(m_jPriceSellTax.getText());
    if (dPriceSellTax == null) {
      m_jPriceSell.setText(null);
    }
 else {
      double dTaxRate=taxeslogic.getTaxRate((TaxCategoryInfo)taxcatmodel.getSelectedItem());
      m_jPriceSell.setText(Formats.CURRENCY.formatValue(new Double(dPriceSellTax.doubleValue() / (1.0 + dTaxRate))));
    }
    reportlock=false;
  }
}","private void calculatePriceSellfromPST(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceSellTax=readCurrency(m_jPriceSellTax.getText());
    if (dPriceSellTax == null) {
      setPriceSell(null);
    }
 else {
      double dTaxRate=taxeslogic.getTaxRate((TaxCategoryInfo)taxcatmodel.getSelectedItem());
      setPriceSell(new Double(dPriceSellTax.doubleValue() / (1.0 + dTaxRate)));
    }
    reportlock=false;
  }
}"
20374,"public void writeValueEdit(Object value){
  reportlock=true;
  Object[] myprod=(Object[])value;
  m_jTitle.setText(Formats.STRING.formatValue(myprod[1]) + ""String_Node_Str"" + Formats.STRING.formatValue(myprod[3]));
  m_id=myprod[0];
  m_jRef.setText(Formats.STRING.formatValue(myprod[1]));
  m_jCode.setText(Formats.STRING.formatValue(myprod[2]));
  m_jName.setText(Formats.STRING.formatValue(myprod[3]));
  m_jComment.setSelected(((Boolean)myprod[4]).booleanValue());
  m_jScale.setSelected(((Boolean)myprod[5]).booleanValue());
  m_jPriceBuy.setText(Formats.CURRENCY.formatValue(myprod[6]));
  m_jPriceSell.setText(Formats.CURRENCY.formatValue(myprod[7]));
  m_CategoryModel.setSelectedKey(myprod[8]);
  taxcatmodel.setSelectedKey(myprod[9]);
  m_jImage.setImage((BufferedImage)myprod[10]);
  m_jstockcost.setText(Formats.CURRENCY.formatValue(myprod[11]));
  m_jstockvolume.setText(Formats.DOUBLE.formatValue(myprod[12]));
  m_jInCatalog.setSelected(((Boolean)myprod[13]).booleanValue());
  m_jCatalogOrder.setText(Formats.INT.formatValue(myprod[14]));
  txtAttributes.setText(Formats.BYTEA.formatValue(myprod[15]));
  txtAttributes.setCaretPosition(0);
  reportlock=false;
  m_jRef.setEnabled(true);
  m_jCode.setEnabled(true);
  m_jName.setEnabled(true);
  m_jComment.setEnabled(true);
  m_jScale.setEnabled(true);
  m_jCategory.setEnabled(true);
  m_jTax.setEnabled(true);
  m_jPriceBuy.setEnabled(true);
  m_jPriceSell.setEnabled(true);
  m_jPriceSellTax.setEnabled(true);
  m_jmargin.setEnabled(true);
  m_jImage.setEnabled(true);
  m_jstockcost.setEnabled(true);
  m_jstockvolume.setEnabled(true);
  m_jInCatalog.setEnabled(true);
  m_jCatalogOrder.setEnabled(m_jInCatalog.isSelected());
  txtAttributes.setEnabled(true);
  calculateMargin();
  calculatePriceSellTax();
}","public void writeValueEdit(Object value){
  reportlock=true;
  Object[] myprod=(Object[])value;
  m_jTitle.setText(Formats.STRING.formatValue(myprod[1]) + ""String_Node_Str"" + Formats.STRING.formatValue(myprod[3]));
  m_id=myprod[0];
  m_jRef.setText(Formats.STRING.formatValue(myprod[1]));
  m_jCode.setText(Formats.STRING.formatValue(myprod[2]));
  m_jName.setText(Formats.STRING.formatValue(myprod[3]));
  m_jComment.setSelected(((Boolean)myprod[4]).booleanValue());
  m_jScale.setSelected(((Boolean)myprod[5]).booleanValue());
  m_jPriceBuy.setText(Formats.CURRENCY.formatValue(myprod[6]));
  setPriceSell(myprod[7]);
  m_CategoryModel.setSelectedKey(myprod[8]);
  taxcatmodel.setSelectedKey(myprod[9]);
  m_jImage.setImage((BufferedImage)myprod[10]);
  m_jstockcost.setText(Formats.CURRENCY.formatValue(myprod[11]));
  m_jstockvolume.setText(Formats.DOUBLE.formatValue(myprod[12]));
  m_jInCatalog.setSelected(((Boolean)myprod[13]).booleanValue());
  m_jCatalogOrder.setText(Formats.INT.formatValue(myprod[14]));
  txtAttributes.setText(Formats.BYTEA.formatValue(myprod[15]));
  txtAttributes.setCaretPosition(0);
  reportlock=false;
  m_jRef.setEnabled(true);
  m_jCode.setEnabled(true);
  m_jName.setEnabled(true);
  m_jComment.setEnabled(true);
  m_jScale.setEnabled(true);
  m_jCategory.setEnabled(true);
  m_jTax.setEnabled(true);
  m_jPriceBuy.setEnabled(true);
  m_jPriceSell.setEnabled(true);
  m_jPriceSellTax.setEnabled(true);
  m_jmargin.setEnabled(true);
  m_jImage.setEnabled(true);
  m_jstockcost.setEnabled(true);
  m_jstockvolume.setEnabled(true);
  m_jInCatalog.setEnabled(true);
  m_jCatalogOrder.setEnabled(m_jInCatalog.isSelected());
  txtAttributes.setEnabled(true);
  calculateMargin();
  calculatePriceSellTax();
}"
20375,"public void writeValueEOF(){
  reportlock=true;
  m_jTitle.setText(AppLocal.getIntString(""String_Node_Str""));
  m_id=null;
  m_jRef.setText(null);
  m_jCode.setText(null);
  m_jName.setText(null);
  m_jComment.setSelected(false);
  m_jScale.setSelected(false);
  m_CategoryModel.setSelectedKey(null);
  taxcatmodel.setSelectedKey(null);
  m_jPriceBuy.setText(null);
  m_jPriceSell.setText(null);
  m_jImage.setImage(null);
  m_jstockcost.setText(null);
  m_jstockvolume.setText(null);
  m_jInCatalog.setSelected(false);
  m_jCatalogOrder.setText(null);
  txtAttributes.setText(null);
  reportlock=false;
  m_jRef.setEnabled(false);
  m_jCode.setEnabled(false);
  m_jName.setEnabled(false);
  m_jComment.setEnabled(false);
  m_jScale.setEnabled(false);
  m_jCategory.setEnabled(false);
  m_jTax.setEnabled(false);
  m_jPriceBuy.setEnabled(false);
  m_jPriceSell.setEnabled(false);
  m_jPriceSellTax.setEnabled(false);
  m_jmargin.setEnabled(false);
  m_jImage.setEnabled(false);
  m_jstockcost.setEnabled(false);
  m_jstockvolume.setEnabled(false);
  m_jInCatalog.setEnabled(false);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(false);
  calculateMargin();
  calculatePriceSellTax();
}","public void writeValueEOF(){
  reportlock=true;
  m_jTitle.setText(AppLocal.getIntString(""String_Node_Str""));
  m_id=null;
  m_jRef.setText(null);
  m_jCode.setText(null);
  m_jName.setText(null);
  m_jComment.setSelected(false);
  m_jScale.setSelected(false);
  m_CategoryModel.setSelectedKey(null);
  taxcatmodel.setSelectedKey(null);
  m_jPriceBuy.setText(null);
  setPriceSell(null);
  m_jImage.setImage(null);
  m_jstockcost.setText(null);
  m_jstockvolume.setText(null);
  m_jInCatalog.setSelected(false);
  m_jCatalogOrder.setText(null);
  txtAttributes.setText(null);
  reportlock=false;
  m_jRef.setEnabled(false);
  m_jCode.setEnabled(false);
  m_jName.setEnabled(false);
  m_jComment.setEnabled(false);
  m_jScale.setEnabled(false);
  m_jCategory.setEnabled(false);
  m_jTax.setEnabled(false);
  m_jPriceBuy.setEnabled(false);
  m_jPriceSell.setEnabled(false);
  m_jPriceSellTax.setEnabled(false);
  m_jmargin.setEnabled(false);
  m_jImage.setEnabled(false);
  m_jstockcost.setEnabled(false);
  m_jstockvolume.setEnabled(false);
  m_jInCatalog.setEnabled(false);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(false);
  calculateMargin();
  calculatePriceSellTax();
}"
20376,"private void calculateMargin(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceBuy=readCurrency(m_jPriceBuy.getText());
    Double dPriceSell=readCurrency(m_jPriceSell.getText());
    if (dPriceBuy == null || dPriceSell == null) {
      m_jmargin.setText(null);
    }
 else {
      m_jmargin.setText(Formats.PERCENT.formatValue(new Double(dPriceSell.doubleValue() / dPriceBuy.doubleValue() - 1.0)));
    }
    reportlock=false;
  }
}","private void calculateMargin(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceBuy=readCurrency(m_jPriceBuy.getText());
    Double dPriceSell=(Double)pricesell;
    if (dPriceBuy == null || dPriceSell == null) {
      m_jmargin.setText(null);
    }
 else {
      m_jmargin.setText(Formats.PERCENT.formatValue(new Double(dPriceSell.doubleValue() / dPriceBuy.doubleValue() - 1.0)));
    }
    reportlock=false;
  }
}"
20377,"private void calculatePriceSellfromMargin(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceBuy=readCurrency(m_jPriceBuy.getText());
    Double dMargin=readPercent(m_jmargin.getText());
    if (dMargin == null || dPriceBuy == null) {
      m_jPriceSell.setText(null);
    }
 else {
      m_jPriceSell.setText(Formats.CURRENCY.formatValue(new Double(dPriceBuy.doubleValue() * (1.0 + dMargin.doubleValue()))));
    }
    reportlock=false;
  }
}","private void calculatePriceSellfromMargin(){
  if (!reportlock) {
    reportlock=true;
    Double dPriceBuy=readCurrency(m_jPriceBuy.getText());
    Double dMargin=readPercent(m_jmargin.getText());
    if (dMargin == null || dPriceBuy == null) {
      setPriceSell(null);
    }
 else {
      setPriceSell(new Double(dPriceBuy.doubleValue() * (1.0 + dMargin.doubleValue())));
    }
    reportlock=false;
  }
}"
20378,"public Object createValue() throws BasicException {
  Object[] myprod=new Object[16];
  myprod[0]=m_id == null ? UUID.randomUUID().toString() : m_id;
  myprod[1]=m_jRef.getText();
  myprod[2]=m_jCode.getText();
  myprod[3]=m_jName.getText();
  myprod[4]=Boolean.valueOf(m_jComment.isSelected());
  myprod[5]=Boolean.valueOf(m_jScale.isSelected());
  myprod[6]=Formats.CURRENCY.parseValue(m_jPriceBuy.getText());
  myprod[7]=Formats.CURRENCY.parseValue(m_jPriceSell.getText());
  myprod[8]=m_CategoryModel.getSelectedKey();
  myprod[9]=taxcatmodel.getSelectedKey();
  myprod[10]=m_jImage.getImage();
  myprod[11]=Formats.CURRENCY.parseValue(m_jstockcost.getText());
  myprod[12]=Formats.DOUBLE.parseValue(m_jstockvolume.getText());
  myprod[13]=Boolean.valueOf(m_jInCatalog.isSelected());
  myprod[14]=Formats.INT.parseValue(m_jCatalogOrder.getText());
  myprod[15]=Formats.BYTEA.parseValue(txtAttributes.getText());
  return myprod;
}","public Object createValue() throws BasicException {
  Object[] myprod=new Object[16];
  myprod[0]=m_id == null ? UUID.randomUUID().toString() : m_id;
  myprod[1]=m_jRef.getText();
  myprod[2]=m_jCode.getText();
  myprod[3]=m_jName.getText();
  myprod[4]=Boolean.valueOf(m_jComment.isSelected());
  myprod[5]=Boolean.valueOf(m_jScale.isSelected());
  myprod[6]=Formats.CURRENCY.parseValue(m_jPriceBuy.getText());
  myprod[7]=pricesell;
  myprod[8]=m_CategoryModel.getSelectedKey();
  myprod[9]=taxcatmodel.getSelectedKey();
  myprod[10]=m_jImage.getImage();
  myprod[11]=Formats.CURRENCY.parseValue(m_jstockcost.getText());
  myprod[12]=Formats.DOUBLE.parseValue(m_jstockvolume.getText());
  myprod[13]=Boolean.valueOf(m_jInCatalog.isSelected());
  myprod[14]=Formats.INT.parseValue(m_jCatalogOrder.getText());
  myprod[15]=Formats.BYTEA.parseValue(txtAttributes.getText());
  return myprod;
}"
20379,"public void writeValueDelete(Object value){
  reportlock=true;
  Object[] myprod=(Object[])value;
  m_jTitle.setText(Formats.STRING.formatValue(myprod[1]) + ""String_Node_Str"" + Formats.STRING.formatValue(myprod[3])+ ""String_Node_Str""+ AppLocal.getIntString(""String_Node_Str""));
  m_id=myprod[0];
  m_jRef.setText(Formats.STRING.formatValue(myprod[1]));
  m_jCode.setText(Formats.STRING.formatValue(myprod[2]));
  m_jName.setText(Formats.STRING.formatValue(myprod[3]));
  m_jComment.setSelected(((Boolean)myprod[4]).booleanValue());
  m_jScale.setSelected(((Boolean)myprod[5]).booleanValue());
  m_jPriceBuy.setText(Formats.CURRENCY.formatValue(myprod[6]));
  m_jPriceSell.setText(Formats.CURRENCY.formatValue(myprod[7]));
  m_CategoryModel.setSelectedKey(myprod[8]);
  taxcatmodel.setSelectedKey(myprod[9]);
  m_jImage.setImage((BufferedImage)myprod[10]);
  m_jstockcost.setText(Formats.CURRENCY.formatValue(myprod[11]));
  m_jstockvolume.setText(Formats.DOUBLE.formatValue(myprod[12]));
  m_jInCatalog.setSelected(((Boolean)myprod[13]).booleanValue());
  m_jCatalogOrder.setText(Formats.INT.formatValue(myprod[14]));
  txtAttributes.setText(Formats.BYTEA.formatValue(myprod[15]));
  txtAttributes.setCaretPosition(0);
  reportlock=false;
  m_jRef.setEnabled(false);
  m_jCode.setEnabled(false);
  m_jName.setEnabled(false);
  m_jComment.setEnabled(false);
  m_jScale.setEnabled(false);
  m_jCategory.setEnabled(false);
  m_jTax.setEnabled(false);
  m_jPriceBuy.setEnabled(false);
  m_jPriceSell.setEnabled(false);
  m_jPriceSellTax.setEnabled(false);
  m_jmargin.setEnabled(false);
  m_jImage.setEnabled(false);
  m_jstockcost.setEnabled(false);
  m_jstockvolume.setEnabled(false);
  m_jInCatalog.setEnabled(false);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(false);
  calculateMargin();
  calculatePriceSellTax();
}","public void writeValueDelete(Object value){
  reportlock=true;
  Object[] myprod=(Object[])value;
  m_jTitle.setText(Formats.STRING.formatValue(myprod[1]) + ""String_Node_Str"" + Formats.STRING.formatValue(myprod[3])+ ""String_Node_Str""+ AppLocal.getIntString(""String_Node_Str""));
  m_id=myprod[0];
  m_jRef.setText(Formats.STRING.formatValue(myprod[1]));
  m_jCode.setText(Formats.STRING.formatValue(myprod[2]));
  m_jName.setText(Formats.STRING.formatValue(myprod[3]));
  m_jComment.setSelected(((Boolean)myprod[4]).booleanValue());
  m_jScale.setSelected(((Boolean)myprod[5]).booleanValue());
  m_jPriceBuy.setText(Formats.CURRENCY.formatValue(myprod[6]));
  setPriceSell(myprod[7]);
  m_CategoryModel.setSelectedKey(myprod[8]);
  taxcatmodel.setSelectedKey(myprod[9]);
  m_jImage.setImage((BufferedImage)myprod[10]);
  m_jstockcost.setText(Formats.CURRENCY.formatValue(myprod[11]));
  m_jstockvolume.setText(Formats.DOUBLE.formatValue(myprod[12]));
  m_jInCatalog.setSelected(((Boolean)myprod[13]).booleanValue());
  m_jCatalogOrder.setText(Formats.INT.formatValue(myprod[14]));
  txtAttributes.setText(Formats.BYTEA.formatValue(myprod[15]));
  txtAttributes.setCaretPosition(0);
  reportlock=false;
  m_jRef.setEnabled(false);
  m_jCode.setEnabled(false);
  m_jName.setEnabled(false);
  m_jComment.setEnabled(false);
  m_jScale.setEnabled(false);
  m_jCategory.setEnabled(false);
  m_jTax.setEnabled(false);
  m_jPriceBuy.setEnabled(false);
  m_jPriceSell.setEnabled(false);
  m_jPriceSellTax.setEnabled(false);
  m_jmargin.setEnabled(false);
  m_jImage.setEnabled(false);
  m_jstockcost.setEnabled(false);
  m_jstockvolume.setEnabled(false);
  m_jInCatalog.setEnabled(false);
  m_jCatalogOrder.setEnabled(false);
  txtAttributes.setEnabled(false);
  calculateMargin();
  calculatePriceSellTax();
}"
20380,"private void m_btnBackActionPerformed(java.awt.event.ActionEvent evt){
  this.showParentCategory();
}","private void m_btnBackActionPerformed(java.awt.event.ActionEvent evt){
  showRootCategoriesPanel();
}"
20381,"protected void fireSelectedProduct(ProductInfoExt prod){
  EventListener[] l=listeners.getListeners(ActionListener.class);
  ActionEvent e=null;
  for (int i=0; i < l.length; i++) {
    if (e == null) {
      e=new ActionEvent(prod,ActionEvent.ACTION_PERFORMED,prod.getID());
    }
    ((ActionListener)l[i]).actionPerformed(e);
  }
}","protected void fireSelectedProduct(ProductInfoExt prod){
  EventListener[] l=listeners.getListeners(ActionListener.class);
  ActionEvent e=null;
  for (int i=0; i < l.length; i++) {
    if (e == null) {
      e=new ActionEvent(prod,ActionEvent.ACTION_PERFORMED,prod.getID());
    }
    ((ActionListener)l[i]).actionPerformed(e);
  }
  this.checkForAuxilar(prod);
}"
20382,"/** 
 * A method that shows a category a level higher in a categories tree.
 */
private void showParentCategory(){
  int categoryOneLevelHigher=(listOfCategories.size() - 2);
  if (categoryOneLevelHigher < 0) {
    this.showRootCategoriesPanel();
  }
 else {
    selectIndicatorPanel(new ImageIcon(tnbbutton.getThumbNail(listOfCategories.get(categoryOneLevelHigher).getImage())),listOfCategories.get(categoryOneLevelHigher).getName());
    selectCategoryPanel(listOfCategories.get(categoryOneLevelHigher).getID());
    listOfCategories.remove(listOfCategories.size() - 1);
  }
}","/** 
 * A method that shows a category a level higher in a categories tree.
 */
private void showParentCategory(){
  int categoryOneLevelHigher=0;
  if (listOfCategories != null) {
    categoryOneLevelHigher=(listOfCategories.size() - 2);
    if (categoryOneLevelHigher < 0) {
      this.showRootCategoriesPanel();
    }
 else {
      selectIndicatorPanel(new ImageIcon(tnbbutton.getThumbNail(listOfCategories.get(categoryOneLevelHigher).getImage())),listOfCategories.get(categoryOneLevelHigher).getName());
      selectCategoryPanel(listOfCategories.get(categoryOneLevelHigher).getID());
      listOfCategories.remove(listOfCategories.size() - 1);
    }
  }
 else {
    this.showRootCategoriesPanel();
  }
}"
20383,"private void showSubcategoryPanel(CategoryInfo category){
  if (listOfCategories == null)   listOfCategories=new ArrayList<CategoryInfo>();
  selectIndicatorPanel(new ImageIcon(tnbbutton.getThumbNail(category.getImage())),category.getName());
  selectCategoryPanel(category.getID());
  listOfCategories.add(category);
  showingcategory=category;
}","private void showSubcategoryPanel(CategoryInfo category){
  if (listOfCategories == null)   listOfCategories=new ArrayList<CategoryInfo>();
  selectIndicatorPanel(new ImageIcon(tnbbutton.getThumbNail(category.getImage())),category.getName());
  selectCategoryPanel(category.getID());
  if ((listOfCategories.size() - 1) > 0) {
    if (listOfCategories.get(listOfCategories.size() - 1) != category)     listOfCategories.add(category);
  }
 else   listOfCategories.add(category);
  showingcategory=category;
}"
20384,"private void stateTransition(char cTrans){
  if (cTrans == '\n') {
    if (m_sBarcode.length() > 0) {
      String sCode=m_sBarcode.toString();
      if (sCode.startsWith(""String_Node_Str"")) {
        try {
          CustomerInfoExt newcustomer=dlSales.findCustomerExt(sCode);
          if (newcustomer == null) {
            Toolkit.getDefaultToolkit().beep();
            new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")).show(this);
          }
 else {
            m_oTicket.setCustomer(newcustomer);
            m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
          }
        }
 catch (        BasicException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
        }
        stateToZero();
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        ProductInfoExt oProduct=new ProductInfoExt();
        oProduct.setReference(null);
        oProduct.setCode(sCode);
        oProduct.setName(""String_Node_Str"" + sCode.substring(3,7));
        oProduct.setPriceSell(Double.parseDouble(sCode.substring(7,12)) / 100);
        oProduct.setTaxCategoryInfo((TaxCategoryInfo)taxcategoriesmodel.getSelectedItem());
        addTicketLine(oProduct,1.0,includeTaxes(oProduct.getTaxCategoryInfo(),oProduct.getPriceSell()));
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        incProductByCodePrice(sCode.substring(0,7),Double.parseDouble(sCode.substring(7,12)) / 100);
      }
 else {
        incProductByCode(sCode);
      }
    }
 else {
      Toolkit.getDefaultToolkit().beep();
    }
  }
 else {
    m_sBarcode.append(cTrans);
    if (cTrans == '\u007f') {
      stateToZero();
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(Character.toString(cTrans));
      m_iNumberStatus=NUMBER_INPUTINT;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTINT)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTZERO) {
      m_jPrice.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTINT) {
      m_jPrice.setText(m_jPrice.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
      m_iNumberStatus=NUMBER_INPUTDEC;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTINT || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTZERO || m_iNumberStatus == NUMBER_INPUTZERODEC)) {
      m_jPrice.setText(""String_Node_Str"");
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"" + Character.toString(cTrans));
      m_iNumberStatus=NUMBER_PORINT;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORINT)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORZERO) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORINT) {
      m_jPor.setText(m_jPor.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
      m_iNumberStatus=NUMBER_PORDEC;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO) {
      if (m_App.getDeviceScale().existsScale() && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            ProductInfoExt product=getInputProduct();
            addTicketLine(product,value.doubleValue(),product.getPriceSell());
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else       if (m_App.getDeviceScale().existsScale()) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            TicketLineInfo oLine=m_oTicket.getLine(i);
            oLine.setMultiply(value.doubleValue());
            oLine.setPrice(Math.abs(oLine.getPrice()));
            paintTicketLine(i,oLine);
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo oLine=m_oTicket.getLine(i);
        oLine.setMultiply(oLine.getMultiply() + 1.0);
        paintTicketLine(i,oLine);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo oLine=m_oTicket.getLine(i);
        oLine.setMultiply(oLine.getMultiply() - 1.0);
        if (oLine.getMultiply() <= 0.0) {
          removeTicketLine(i);
        }
 else {
          paintTicketLine(i,oLine);
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo oLine=m_oTicket.getLine(i);
        oLine.setMultiply(dPor);
        oLine.setPrice(Math.abs(oLine.getPrice()));
        paintTicketLine(i,oLine);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo oLine=m_oTicket.getLine(i);
        oLine.setMultiply(dPor);
        oLine.setPrice(-Math.abs(oLine.getPrice()));
        paintTicketLine(i,oLine);
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,-product.getPriceSell());
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),-product.getPriceSell());
    }
 else     if (cTrans == ' ' || cTrans == '=') {
      if (m_oTicket.getLinesCount() > 0) {
        if (closeTicket(m_oTicket,m_oTicketExt)) {
          m_ticketsbag.deleteTicket();
        }
 else {
          refreshTicket();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
  }
}","private void stateTransition(char cTrans){
  if (cTrans == '\n') {
    if (m_sBarcode.length() > 0) {
      String sCode=m_sBarcode.toString();
      if (sCode.startsWith(""String_Node_Str"")) {
        try {
          CustomerInfoExt newcustomer=dlSales.findCustomerExt(sCode);
          if (newcustomer == null) {
            Toolkit.getDefaultToolkit().beep();
            new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str"")).show(this);
          }
 else {
            m_oTicket.setCustomer(newcustomer);
            m_jTicketId.setText(m_oTicket.getName(m_oTicketExt));
          }
        }
 catch (        BasicException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
        }
        stateToZero();
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        ProductInfoExt oProduct=new ProductInfoExt();
        oProduct.setReference(null);
        oProduct.setCode(sCode);
        oProduct.setName(""String_Node_Str"" + sCode.substring(3,7));
        oProduct.setPriceSell(Double.parseDouble(sCode.substring(7,12)) / 100);
        oProduct.setTaxCategoryInfo((TaxCategoryInfo)taxcategoriesmodel.getSelectedItem());
        addTicketLine(oProduct,1.0,includeTaxes(oProduct.getTaxCategoryInfo(),oProduct.getPriceSell()));
      }
 else       if (sCode.length() == 13 && sCode.startsWith(""String_Node_Str"")) {
        incProductByCodePrice(sCode.substring(0,7),Double.parseDouble(sCode.substring(7,12)) / 100);
      }
 else {
        incProductByCode(sCode);
      }
    }
 else {
      Toolkit.getDefaultToolkit().beep();
    }
  }
 else {
    m_sBarcode.append(cTrans);
    if (cTrans == '\u007f') {
      stateToZero();
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERO)) {
      m_jPrice.setText(Character.toString(cTrans));
      m_iNumberStatus=NUMBER_INPUTINT;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTINT)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTZERO) {
      m_jPrice.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_INPUTINT) {
      m_jPrice.setText(m_jPrice.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_INPUTDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_INPUTZERODEC || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPrice.setText(m_jPrice.getText() + cTrans);
      m_iNumberStatus=NUMBER_INPUTDEC;
      m_iNumberStatusInput=NUMBERVALID;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTINT || m_iNumberStatus == NUMBER_INPUTDEC)) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if (cTrans == '*' && (m_iNumberStatus == NUMBER_INPUTZERO || m_iNumberStatus == NUMBER_INPUTZERODEC)) {
      m_jPrice.setText(""String_Node_Str"");
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERO;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"");
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERO)) {
      m_jPor.setText(""String_Node_Str"" + Character.toString(cTrans));
      m_iNumberStatus=NUMBER_PORINT;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if ((cTrans == '0' || cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORINT)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORZERO) {
      m_jPor.setText(""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORZERODEC;
    }
 else     if (cTrans == '.' && m_iNumberStatus == NUMBER_PORINT) {
      m_jPor.setText(m_jPor.getText() + ""String_Node_Str"");
      m_iNumberStatus=NUMBER_PORDEC;
    }
 else     if ((cTrans == '0') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
    }
 else     if ((cTrans == '1' || cTrans == '2' || cTrans == '3' || cTrans == '4' || cTrans == '5' || cTrans == '6' || cTrans == '7' || cTrans == '8' || cTrans == '9') && (m_iNumberStatus == NUMBER_PORZERODEC || m_iNumberStatus == NUMBER_PORDEC)) {
      m_jPor.setText(m_jPor.getText() + cTrans);
      m_iNumberStatus=NUMBER_PORDEC;
      m_iNumberStatusPor=NUMBERVALID;
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO) {
      if (m_App.getDeviceScale().existsScale() && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            ProductInfoExt product=getInputProduct();
            addTicketLine(product,value.doubleValue(),product.getPriceSell());
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '\u00a7' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else       if (m_App.getDeviceScale().existsScale()) {
        try {
          Double value=m_App.getDeviceScale().readWeight();
          if (value != null) {
            TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
            newline.setMultiply(value.doubleValue());
            newline.setPrice(Math.abs(newline.getPrice()));
            paintTicketLine(i,newline);
          }
        }
 catch (        ScaleException e) {
          Toolkit.getDefaultToolkit().beep();
          new MessageInf(MessageInf.SGN_WARNING,AppLocal.getIntString(""String_Node_Str""),e).show(this);
          stateToZero();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(newline.getMultiply() + 1.0);
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(newline.getMultiply() - 1.0);
        if (newline.getMultiply() <= 0.0) {
          removeTicketLine(i);
        }
 else {
          paintTicketLine(i,newline);
        }
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(dPor);
        newline.setPrice(Math.abs(newline.getPrice()));
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERZERO && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      int i=m_ticketlines.getSelectedIndex();
      if (i < 0) {
        Toolkit.getDefaultToolkit().beep();
      }
 else {
        double dPor=getPorValue();
        TicketLineInfo newline=new TicketLineInfo(m_oTicket.getLine(i));
        newline.setMultiply(dPor);
        newline.setPrice(-Math.abs(newline.getPrice()));
        paintTicketLine(i,newline);
      }
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERZERO && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,1.0,-product.getPriceSell());
    }
 else     if (cTrans == '+' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),product.getPriceSell());
    }
 else     if (cTrans == '-' && m_iNumberStatusInput == NUMBERVALID && m_iNumberStatusPor == NUMBERVALID && m_App.getAppUserView().getUser().hasPermission(""String_Node_Str"")) {
      ProductInfoExt product=getInputProduct();
      addTicketLine(product,getPorValue(),-product.getPriceSell());
    }
 else     if (cTrans == ' ' || cTrans == '=') {
      if (m_oTicket.getLinesCount() > 0) {
        if (closeTicket(m_oTicket,m_oTicketExt)) {
          m_ticketsbag.deleteTicket();
        }
 else {
          refreshTicket();
        }
      }
 else {
        Toolkit.getDefaultToolkit().beep();
      }
    }
  }
}"
20385,"private void m_jEditLineActionPerformed(java.awt.event.ActionEvent evt){
  int i=m_ticketlines.getSelectedIndex();
  if (i < 0) {
    Toolkit.getDefaultToolkit().beep();
  }
 else {
    TicketLineInfo oLine=m_oTicket.getLine(i);
    if (JProductLineEdit.showMessage(this,m_App,m_oTicket.getLine(i))) {
      paintTicketLine(i,oLine);
    }
  }
}","private void m_jEditLineActionPerformed(java.awt.event.ActionEvent evt){
  int i=m_ticketlines.getSelectedIndex();
  if (i < 0) {
    Toolkit.getDefaultToolkit().beep();
  }
 else {
    TicketLineInfo newline=JProductLineEdit.showMessage(this,m_App,m_oTicket.getLine(i));
    if (newline != null) {
      paintTicketLine(i,newline);
    }
  }
}"
20386,"private boolean init(AppView app,TicketLineInfo oLine){
  initComponents();
  m_oLineTicket=oLine;
  m_oLine=new TicketLineInfo(oLine);
  m_bunitsok=true;
  m_bpriceok=true;
  m_jName.setEnabled(m_oLine.getProductID() == null && app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPrice.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPriceTax.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jName.setText(m_oLine.getProperty(""String_Node_Str""));
  m_jUnits.setValue(oLine.getMultiply());
  m_jPrice.setValue(oLine.getPrice());
  m_jPriceTax.setValue(oLine.getPriceTax());
  m_jTaxrate.setText(oLine.getTaxInfo().getName());
  m_jName.addPropertyChangeListener(""String_Node_Str"",new RecalculateName());
  m_jUnits.addPropertyChangeListener(""String_Node_Str"",new RecalculateUnits());
  m_jPrice.addPropertyChangeListener(""String_Node_Str"",new RecalculatePrice());
  m_jPriceTax.addPropertyChangeListener(""String_Node_Str"",new RecalculatePriceTax());
  m_jName.addEditorKeys(m_jKeys);
  m_jUnits.addEditorKeys(m_jKeys);
  m_jPrice.addEditorKeys(m_jKeys);
  m_jPriceTax.addEditorKeys(m_jKeys);
  if (m_jName.isEnabled()) {
    m_jName.activate();
  }
 else {
    m_jUnits.activate();
  }
  printTotals();
  getRootPane().setDefaultButton(m_jButtonOK);
  m_bok=false;
  setVisible(true);
  return m_bok;
}","private TicketLineInfo init(AppView app,TicketLineInfo oLine){
  initComponents();
  m_oLine=new TicketLineInfo(oLine);
  m_bunitsok=true;
  m_bpriceok=true;
  m_jName.setEnabled(m_oLine.getProductID() == null && app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPrice.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jPriceTax.setEnabled(app.getAppUserView().getUser().hasPermission(""String_Node_Str""));
  m_jName.setText(m_oLine.getProperty(""String_Node_Str""));
  m_jUnits.setValue(oLine.getMultiply());
  m_jPrice.setValue(oLine.getPrice());
  m_jPriceTax.setValue(oLine.getPriceTax());
  m_jTaxrate.setText(oLine.getTaxInfo().getName());
  m_jName.addPropertyChangeListener(""String_Node_Str"",new RecalculateName());
  m_jUnits.addPropertyChangeListener(""String_Node_Str"",new RecalculateUnits());
  m_jPrice.addPropertyChangeListener(""String_Node_Str"",new RecalculatePrice());
  m_jPriceTax.addPropertyChangeListener(""String_Node_Str"",new RecalculatePriceTax());
  m_jName.addEditorKeys(m_jKeys);
  m_jUnits.addEditorKeys(m_jKeys);
  m_jPrice.addEditorKeys(m_jKeys);
  m_jPriceTax.addEditorKeys(m_jKeys);
  if (m_jName.isEnabled()) {
    m_jName.activate();
  }
 else {
    m_jUnits.activate();
  }
  printTotals();
  getRootPane().setDefaultButton(m_jButtonOK);
  returnLine=null;
  setVisible(true);
  return returnLine;
}"
20387,"public static boolean showMessage(Component parent,AppView app,TicketLineInfo oLine){
  Window window=getWindow(parent);
  JProductLineEdit myMsg;
  if (window instanceof Frame) {
    myMsg=new JProductLineEdit((Frame)window,true);
  }
 else {
    myMsg=new JProductLineEdit((Dialog)window,true);
  }
  return myMsg.init(app,oLine);
}","public static TicketLineInfo showMessage(Component parent,AppView app,TicketLineInfo oLine){
  Window window=getWindow(parent);
  JProductLineEdit myMsg;
  if (window instanceof Frame) {
    myMsg=new JProductLineEdit((Frame)window,true);
  }
 else {
    myMsg=new JProductLineEdit((Dialog)window,true);
  }
  return myMsg.init(app,oLine);
}"
20388,"private void m_jButtonOKActionPerformed(java.awt.event.ActionEvent evt){
  m_oLineTicket.setProperty(""String_Node_Str"",m_oLine.getProperty(""String_Node_Str""));
  m_oLineTicket.setMultiply(m_oLine.getMultiply());
  m_oLineTicket.setPrice(m_oLine.getPrice());
  m_bok=true;
  dispose();
}","private void m_jButtonOKActionPerformed(java.awt.event.ActionEvent evt){
  returnLine=m_oLine;
  dispose();
}"
20389,"@Override public void clearVisor(){
  display.write(new byte[]{0x10,0x00});
  display.write(trans.transString(DeviceTicket.getWhiteString(20)));
  display.write(new byte[]{0x10,014});
  display.write(trans.transString(DeviceTicket.getWhiteString(20)));
  display.flush();
}","@Override public void clearVisor(){
  display.write(new byte[]{0x10,0x00});
  display.write(trans.transString(DeviceTicket.getWhiteString(20)));
  display.write(new byte[]{0x10,0x14});
  display.write(trans.transString(DeviceTicket.getWhiteString(20)));
  display.flush();
}"
20390,"public void syncCustomersBefore() throws BasicException {
  new StaticSentence(s,""String_Node_Str"").exec();
}",public abstract void syncCustomersBefore() throws BasicException ;
20391,"public void syncCustomer(final CustomerInfoExt customer) throws BasicException {
  Transaction t=new Transaction(s){
    public Object transact() throws BasicException {
      if (new PreparedSentence(s,""String_Node_Str"",new SerializerWrite(){
        public void writeValues(        DataWrite dp,        Object obj) throws BasicException {
          CustomerInfoExt c=(CustomerInfoExt)obj;
          dp.setString(1,c.getName());
          dp.setString(2,c.getAddress());
          dp.setString(3,c.getId());
        }
      }
).exec(customer) == 0) {
        new PreparedSentence(s,""String_Node_Str"",new SerializerWrite(){
          public void writeValues(          DataWrite dp,          Object obj) throws BasicException {
            CustomerInfoExt c=(CustomerInfoExt)obj;
            dp.setString(1,c.getId());
            dp.setString(2,c.getName());
            dp.setString(3,c.getAddress());
          }
        }
).exec(customer);
      }
      return null;
    }
  }
;
  t.execute();
}",public abstract void syncCustomer(final CustomerInfoExt customer) throws BasicException ;
20392,"public TicketLineInfo copyTicketLine(){
  TicketLineInfo l=new TicketLineInfo();
  m_sTicket=null;
  m_iLine=-1;
  l.m_dMultiply=m_dMultiply;
  l.m_dPrice=m_dPrice;
  l.tax=tax;
  l.attributes=attributes;
  l.product=product.copyTicketProduct();
  return l;
}","public TicketLineInfo copyTicketLine(){
  TicketLineInfo l=new TicketLineInfo();
  l.m_dMultiply=m_dMultiply;
  l.m_dPrice=m_dPrice;
  l.tax=tax;
  l.attributes=attributes;
  l.product=product.copyTicketProduct();
  return l;
}"
20393,"public void actionPerformed(ActionEvent e){
  double tendered;
  try {
    tendered=m_jTendered.getValue();
  }
 catch (  BasicException eB) {
    tendered=0.0;
  }
  m_jTendered.setValue(tendered + amount);
  printState();
}","public void actionPerformed(ActionEvent e){
  double tendered;
  try {
    tendered=m_jTendered.getValue();
  }
 catch (  BasicException eB) {
    tendered=0.0;
  }
  m_jTendered.setValue(RoundUtils.round(tendered + amount));
  printState();
}"
20394,"public final SentenceList getCustomerList(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"",new String[]{""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING}),new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new CustomerInfo(dr.getString(1),dr.getString(2),dr.getString(3));
    }
  }
);
}","public SentenceList getCustomerList(){
  return new StaticSentence(s,new QBFBuilder(""String_Node_Str"",new String[]{""String_Node_Str""}),new SerializerWriteBasic(new Datas[]{Datas.OBJECT,Datas.STRING}),new SerializerRead(){
    public Object readValues(    DataRead dr) throws BasicException {
      return new CustomerInfo(dr.getString(1),dr.getString(2),dr.getString(3));
    }
  }
);
}"
20395,"private static void initOldClasses(){
  m_oldclasses=new HashMap<String,String>();
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
}","private static void initOldClasses(){
  m_oldclasses=new HashMap<String,String>();
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
  m_oldclasses.put(""String_Node_Str"",""String_Node_Str"");
}"
20396,"public Object createValue() throws BasicException {
  Object[] payment=new Object[6];
  payment[0]=m_sId == null ? UUID.randomUUID().toString() : m_sId;
  payment[1]=m_App.getActiveCashIndex();
  payment[2]=datenew == null ? new Date() : datenew;
  payment[3]=m_sPaymentId == null ? UUID.randomUUID().toString() : m_sPaymentId;
  payment[4]=m_ReasonModel.getSelectedKey();
  PaymentReason reason=(PaymentReason)m_ReasonModel.getSelectedItem();
  Double dtotal=(Double)Formats.DOUBLE.parseValue(m_jtotal.getText());
  payment[5]=reason == null ? dtotal : reason.addSignum(dtotal);
  return payment;
}","public Object createValue() throws BasicException {
  Object[] payment=new Object[6];
  payment[0]=m_sId == null ? UUID.randomUUID().toString() : m_sId;
  payment[1]=m_App.getActiveCashIndex();
  payment[2]=datenew == null ? new Date() : datenew;
  payment[3]=m_sPaymentId == null ? UUID.randomUUID().toString() : m_sPaymentId;
  payment[4]=m_ReasonModel.getSelectedKey();
  PaymentReason reason=(PaymentReason)m_ReasonModel.getSelectedItem();
  Double dtotal=(Double)Formats.CURRENCY.parseValue(m_jtotal.getText());
  payment[5]=reason == null ? dtotal : reason.addSignum(dtotal);
  return payment;
}"
20397,"public String toString(){
  return m_sText;
}","@Override public String toString(){
  return m_sText;
}"
20398,"public void removeActionListener(ActionListener l){
  listeners.add(ActionListener.class,l);
}","public void removeActionListener(ActionListener l){
  listeners.remove(ActionListener.class,l);
}"
20399,"/** 
 * Creates a new graph or replaces an existing graph.
 * @return A response indicating if a graph was created or replaced.
 * @throws IOException In case of an I/O error. 
 * @throws StorageException In case of an error.
 */
@PUT public Response createGraph(InputStream in,@Context HttpHeaders header) throws IOException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  final boolean wasKnown=graphURI == IStore.DEFAULT_GRAPH || store.containsGraph(graphURI);
  final IGraphInfo info=store.createOrReplaceGraph(graphURI,in,getBaseURI(graphURI),mt);
  if (wasKnown) {
    return noContent();
  }
  if (!_uriInfo.getBaseUriBuilder().path(GraphsResource.class).build().relativize(info.getURI()).isAbsolute()) {
    return created(graphURI);
  }
  return created(_uriInfo.getBaseUriBuilder().path(GraphsResource.class).queryParam(""String_Node_Str"",""String_Node_Str"").build(info.getURI()));
}","/** 
 * Creates a new graph or replaces an existing graph.
 * @return A response indicating if a graph was created or replaced.
 * @throws IOException In case of an I/O error. 
 * @throws UnsupportedMediaTypeException In case the media type could not be read.
 * @throws StoreException In case of an error.
 */
@PUT public Response createGraph(InputStream in,@Context HttpHeaders header) throws IOException, UnsupportedMediaTypeException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  final boolean wasKnown=graphURI == IStore.DEFAULT_GRAPH || store.containsGraph(graphURI);
  final IGraphInfo info=store.createOrReplaceGraph(graphURI,in,getBaseURI(graphURI),mt);
  if (wasKnown) {
    return noContent();
  }
  if (!_uriInfo.getBaseUriBuilder().path(GraphsResource.class).build().relativize(info.getURI()).isAbsolute()) {
    return created(graphURI);
  }
  return created(_uriInfo.getBaseUriBuilder().path(GraphsResource.class).queryParam(""String_Node_Str"",""String_Node_Str"").build(info.getURI()));
}"
20400,"/** 
 * Checks if a graph exists.
 * @return A response with graph metadata.
 * @throws StorageException In case of an error.
 */
@HEAD public Response getGraphInfo() throws StoreException {
  return makeResponseBuilder(getStore().getGraphInfo(getGraphURI())).build();
}","/** 
 * Checks if a graph exists.
 * @return A response with graph metadata.
 * @throws GraphNotExistsException In case the graph does not exist. 
 * @throws StorageException In case of an error.
 */
@HEAD public Response getGraphInfo() throws GraphNotExistsException, StoreException {
  final IGraphInfo graph=getStore().getGraphInfo(getGraphURI());
  @SuppressWarnings(""String_Node_Str"") final MediaType mt=getMediaType(graph.getSupportedMediaTypes());
  return makeResponseBuilder(graph).build();
}"
20401,"/** 
 * Creates a new graph or updates an existing graph.
 * @return A response indicating if a graph was created or updated.
 * @throws IOException In case of an I/O error.
 * @throws StorageException In case of an error.
 */
@POST public Response createOrUpdateGraph(InputStream in,@Context HttpHeaders header) throws IOException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  final URI base=getBaseURI(graphURI);
  final IGraphInfo info=graphURI == null ? store.createGraph(in,base,mt) : store.updateGraph(graphURI,in,base,mt);
  return graphURI == null ? created(info.getURI()) : noContent();
}","/** 
 * Creates a new graph or updates an existing graph.
 * @return A response indicating if a graph was created or updated.
 * @throws UnsupportedMediaTypeException In case the media type isn't supported. 
 * @throws IOException In case of an I/O error.
 * @throws StorageException In case of an error.
 */
@POST public Response createOrUpdateGraph(InputStream in,@Context HttpHeaders header) throws UnsupportedMediaTypeException, IOException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  final URI base=getBaseURI(graphURI);
  final IGraphInfo info=graphURI == null ? store.createGraph(in,base,mt) : store.updateGraph(graphURI,in,base,mt);
  return graphURI == null ? created(info.getURI()) : noContent();
}"
20402,"/** 
 * Writes a graph.
 * @return A graph serialization.
 * @throws IOException In case of an I/O error.
 * @throws StorageException In case of an error.
 */
@GET public Response getGraph() throws IOException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final IGraphInfo graph=store.getGraphInfo(graphURI);
  final MediaType mt=getMediaType(graph.getSupportedMediaTypes());
  return buildStreamingEntity(makeResponseBuilder(graph),store.getGraph(graphURI,mt));
}","/** 
 * Writes a graph.
 * @return A graph serialization.
 * @throws IOException In case of an I/O error.
 * @throws GraphNotExistsException In case the graph does not exist. 
 * @throws StorageException In case of an error.
 */
@GET public Response getGraph() throws IOException, GraphNotExistsException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final IGraphInfo graph=store.getGraphInfo(graphURI);
  final MediaType mt=getMediaType(graph.getSupportedMediaTypes());
  return buildStreamingEntity(makeResponseBuilder(graph),store.getGraph(graphURI,mt));
}"
20403,"/** 
 * Modifies a graph.
 * @return A response indicating if the graph was modified successfully.
 * @throws StorageException In case of an error.
 */
@PATCH public Response modifyGraph(InputStream in,@Context HttpHeaders header) throws IOException, StoreException {
  final URI graphURI=getGraphURI();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  return getStore().modifyGraph(graphURI,in,getBaseURI(graphURI),mt) ? noContent() : badRequest();
}","/** 
 * Modifies a graph.
 * @return A response indicating if the graph was modified successfully.
 * @throws QueryException In case of a query error, i.e. syntax error.
 * @throws UnsupportedMediaTypeException In case the media type isn't supported. 
 * @throws GraphMismatchException In case the query utilizes a different graph as the requested graph.
 * @throws StorageException In case of an error.
 */
@PATCH public Response modifyGraph(InputStream in,@Context HttpHeaders header) throws IOException, GraphMismatchException, UnsupportedMediaTypeException, QueryException, StoreException {
  final URI graphURI=getGraphURI();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  return getStore().modifyGraph(graphURI,in,getBaseURI(graphURI),mt) ? noContent() : badRequest();
}"
20404,"/** 
 * Deletes a graph.
 * @return A response indicating if the graph was removed immediately or deletion is scheduled.
 * @throws IOException In case of an I/O error.
 * @throws StorageException In case of an error.
 */
@DELETE public Response deleteGraph() throws IOException, StoreException {
  return getStore().deleteGraph(getGraphURI()) == RemovalStatus.DELAYED ? accepted() : noContent();
}","/** 
 * Deletes a graph.
 * @return A response indicating if the graph was removed immediately or deletion is scheduled.
 * @throws IOException In case of an I/O error.
 * @throws GraphNotExistsException In case the graph does not exist. 
 * @throws StorageException In case of an error.
 */
@DELETE public Response deleteGraph() throws IOException, GraphNotExistsException, StoreException {
  return getStore().deleteGraph(getGraphURI()) == RemovalStatus.DELAYED ? accepted() : noContent();
}"
20405,"@Override public Response toResponse(UnsupportedMediaTypeException ex){
  return Response.status(Response.Status.NOT_ACCEPTABLE).header(""String_Node_Str"",""String_Node_Str"").build();
}","@Override public Response toResponse(UnsupportedMediaTypeException ex){
  return Response.status(Response.Status.UNSUPPORTED_MEDIA_TYPE).build();
}"
20406,"/** 
 * Creates a new graph or replaces an existing graph.
 * @return A response indicating if a graph was created or replaced.
 * @throws IOException In case of an I/O error. 
 * @throws StorageException In case of an error.
 */
@PUT public Response createGraph(InputStream in,@Context HttpHeaders header) throws IOException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  final boolean wasKnown=graphURI == IStore.DEFAULT_GRAPH || store.containsGraph(graphURI);
  final IGraphInfo info=store.createOrReplaceGraph(graphURI,in,getBaseURI(graphURI),mt);
  if (wasKnown) {
    return noContent();
  }
  if (!_uriInfo.getBaseUri().relativize(info.getURI()).isAbsolute()) {
    return created(graphURI);
  }
  return created(_uriInfo.getBaseUriBuilder().path(ServiceResource.class).queryParam(""String_Node_Str"",""String_Node_Str"").build(info.getURI()));
}","/** 
 * Creates a new graph or replaces an existing graph.
 * @return A response indicating if a graph was created or replaced.
 * @throws IOException In case of an I/O error. 
 * @throws StorageException In case of an error.
 */
@PUT public Response createGraph(InputStream in,@Context HttpHeaders header) throws IOException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  final boolean wasKnown=graphURI == IStore.DEFAULT_GRAPH || store.containsGraph(graphURI);
  final IGraphInfo info=store.createOrReplaceGraph(graphURI,in,getBaseURI(graphURI),mt);
  if (wasKnown) {
    return noContent();
  }
  if (!_uriInfo.getBaseUriBuilder().path(GraphsResource.class).build().relativize(info.getURI()).isAbsolute()) {
    return created(graphURI);
  }
  return created(_uriInfo.getBaseUriBuilder().path(ServiceResource.class).queryParam(""String_Node_Str"",""String_Node_Str"").build(info.getURI()));
}"
20407,"/** 
 * Creates a new graph or replaces an existing graph.
 * @return A response indicating if a graph was created or replaced.
 * @throws IOException In case of an I/O error. 
 * @throws StorageException In case of an error.
 */
@PUT public Response createGraph(InputStream in,@Context HttpHeaders header) throws IOException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  final boolean wasKnown=store.containsGraph(graphURI);
  final IGraphInfo info=store.createOrReplaceGraph(graphURI,in,getBaseURI(graphURI),mt);
  return wasKnown ? noContent() : created(info.getURI());
}","/** 
 * Creates a new graph or replaces an existing graph.
 * @return A response indicating if a graph was created or replaced.
 * @throws IOException In case of an I/O error. 
 * @throws StorageException In case of an error.
 */
@PUT public Response createGraph(InputStream in,@Context HttpHeaders header) throws IOException, StoreException {
  final URI graphURI=getGraphURI();
  final IStore store=getStore();
  final MediaType mt=MediaTypeUtils.toMediaType(header.getMediaType());
  final boolean wasKnown=graphURI == IStore.DEFAULT_GRAPH || store.containsGraph(graphURI);
  final IGraphInfo info=store.createOrReplaceGraph(graphURI,in,getBaseURI(graphURI),mt);
  if (wasKnown) {
    return noContent();
  }
  if (!_uriInfo.getBaseUri().relativize(info.getURI()).isAbsolute()) {
    return created(graphURI);
  }
  return created(_uriInfo.getBaseUriBuilder().path(ServiceResource.class).queryParam(""String_Node_Str"",""String_Node_Str"").build(info.getURI()));
}"
20408,"/** 
 * Finds number of transactions supporting a given set.
 * @param candidateSet set to be tested
 * @return number of transactions supporting given set.
 */
public int getSupport(char[] candidateSet){
  candSetPointer=Pointer.to(candidateSet);
  candSetMem=clCreateBuffer(context,CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,Sizeof.cl_short * data.getNumberOfAttributesClusters(),candSetPointer,null);
  transCharMapMem=clCreateBuffer(context,CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,Sizeof.cl_short * transCharMap.length,transCharMapPointer,null);
  tmpMapMem=clCreateBuffer(context,CL_MEM_READ_WRITE,Sizeof.cl_short * transCharMap.length,tmpMapPointer,null);
  clSetKernelArg(kernel1,0,Sizeof.cl_mem,Pointer.to(transCharMapMem));
  clSetKernelArg(kernel1,1,Sizeof.cl_mem,Pointer.to(candSetMem));
  clSetKernelArg(kernel1,2,Sizeof.cl_mem,Pointer.to(tmpMapMem));
  global_work_size[0]=transCharMap.length / 4;
  local_work_size[0]=data.getNumberOfAttributesClusters() / 4;
  clEnqueueNDRangeKernel(commandQueue,kernel1,1,null,global_work_size,local_work_size,0,null,null);
  outSuppLongArray=new long[data.getNumberOfTransactions()];
  outSuppLongArrayPointer=Pointer.to(outSuppLongArray);
  outSuppLongArrayMem=clCreateBuffer(context,CL_MEM_WRITE_ONLY,Sizeof.cl_ulong * data.getNumberOfTransactions(),null,null);
  clSetKernelArg(kernel2,0,Sizeof.cl_mem,Pointer.to(tmpMapMem));
  clSetKernelArg(kernel2,1,Sizeof.cl_mem,Pointer.to(outSuppLongArrayMem));
  global_work_size[0]=data.getNumberOfTransactions();
  local_work_size[0]=1;
  clEnqueueNDRangeKernel(commandQueue,kernel2,1,null,global_work_size,local_work_size,0,null,null);
  clEnqueueReadBuffer(commandQueue,outSuppLongArrayMem,CL_TRUE,0,data.getNumberOfTransactions() * Sizeof.cl_ulong,outSuppLongArrayPointer,0,null,null);
  clFinish(commandQueue);
  int supp=0;
  for (int i=0; i < outSuppLongArray.length; i++) {
    if (outSuppLongArray[i] == 0)     supp++;
  }
  clReleaseMemObject(candSetMem);
  clReleaseMemObject(tmpMapMem);
  clReleaseMemObject(transCharMapMem);
  clReleaseMemObject(outSuppLongArrayMem);
  return supp;
}","/** 
 * Finds number of transactions supporting a given set.
 * @param candidateSet set to be tested
 * @return number of transactions supporting given set.
 */
public int getSupport(char[] candidateSet){
  candSetPointer=Pointer.to(candidateSet);
  candSetMem=clCreateBuffer(context,CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,Sizeof.cl_short * data.getNumberOfAttributesClusters(),candSetPointer,null);
  transCharMapMem=clCreateBuffer(context,CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,Sizeof.cl_short * transCharMap.length,transCharMapPointer,null);
  tmpMapMem=clCreateBuffer(context,CL_MEM_WRITE_ONLY,Sizeof.cl_short * transCharMap.length,null,null);
  clSetKernelArg(kernel1,0,Sizeof.cl_mem,Pointer.to(transCharMapMem));
  clSetKernelArg(kernel1,1,Sizeof.cl_mem,Pointer.to(candSetMem));
  clSetKernelArg(kernel1,2,Sizeof.cl_mem,Pointer.to(tmpMapMem));
  global_work_size[0]=transCharMap.length / 4;
  local_work_size[0]=data.getNumberOfAttributesClusters() / 4;
  clEnqueueNDRangeKernel(commandQueue,kernel1,1,null,global_work_size,local_work_size,0,null,null);
  outSuppLongArray=new long[data.getNumberOfTransactions()];
  outSuppLongArrayPointer=Pointer.to(outSuppLongArray);
  outSuppLongArrayMem=clCreateBuffer(context,CL_MEM_WRITE_ONLY,Sizeof.cl_ulong * data.getNumberOfTransactions(),null,null);
  clSetKernelArg(kernel2,0,Sizeof.cl_mem,Pointer.to(tmpMapMem));
  clSetKernelArg(kernel2,1,Sizeof.cl_mem,Pointer.to(outSuppLongArrayMem));
  global_work_size[0]=data.getNumberOfTransactions();
  local_work_size[0]=1;
  clEnqueueNDRangeKernel(commandQueue,kernel2,1,null,global_work_size,local_work_size,0,null,null);
  clEnqueueReadBuffer(commandQueue,outSuppLongArrayMem,CL_TRUE,0,data.getNumberOfTransactions() * Sizeof.cl_ulong,outSuppLongArrayPointer,0,null,null);
  clFinish(commandQueue);
  int supp=0;
  for (int i=0; i < outSuppLongArray.length; i++) {
    if (outSuppLongArray[i] == 0)     supp++;
  }
  clReleaseMemObject(candSetMem);
  clReleaseMemObject(tmpMapMem);
  clReleaseMemObject(transCharMapMem);
  clReleaseMemObject(outSuppLongArrayMem);
  return supp;
}"
20409,"@Test public void deviceQueryTest(){
}","@Test public void deviceQueryTest(){
  JOCLDeviceQuery.runJOCLDeviceQuery();
}"
20410,"@Test public void OpenCL_1_0_Test(){
}","@Test public void OpenCL_1_0_Test(){
  JOCLSample.runJOCL_1_0_Sample();
}"
20411,"@Test public void OpenCL_1_1_CPU_Test(){
}","@Test @Ignore(""String_Node_Str"") public void OpenCL_1_1_CPU_Test(){
}"
20412,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Rule other=(Rule)obj;
  if (conditionalPart == null) {
    if (other.conditionalPart != null)     return false;
  }
 else   if (!smartEquals(conditionalPart,other.conditionalPart))   return false;
  if (confidance != other.confidance)   return false;
  if (exectuivePart == null) {
    if (other.exectuivePart != null)     return false;
  }
 else   if (!smartEquals(exectuivePart,other.exectuivePart))   return false;
  if (id != other.id)   return false;
  if (support != other.support)   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Rule other=(Rule)obj;
  if (conditionalPart == null) {
    if (other.conditionalPart != null)     return false;
  }
 else   if (!smartEquals(conditionalPart,other.conditionalPart))   return false;
  if (confidance != other.confidance)   return false;
  if (exectuivePart == null) {
    if (other.exectuivePart != null)     return false;
  }
 else   if (!smartEquals(exectuivePart,other.exectuivePart))   return false;
  if (support != other.support)   return false;
  return true;
}"
20413,"@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  for (int i=0; i < this.numberOfAttributes; i++) {
    String chunk=Integer.toBinaryString(this.attributeVector[i]);
    builder.append(""String_Node_Str"" + i);
    builder.append(chunk);
    builder.append('\n');
  }
  return builder.toString();
}","@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  for (int i=0; i < this.attributeVector.length; i++) {
    char[] chunk=BinaryItemSet.getBinaryString(this.attributeVector[i]);
    builder.append(""String_Node_Str"" + i + ""String_Node_Str"");
    builder.append(chunk);
    builder.append('\n');
  }
  return builder.toString();
}"
20414,"public List<Rule> getRules(BinaryItemSet itemSet,double minCredibility,SortedMap<BinaryItemSet,Integer> frequentSet){
  List<Rule> itemSetRules=new LinkedList<Rule>();
  int suportXY=frequentSet.get(itemSet);
  for (  char elements : itemSet.getAttributeVector()) {
    int count=bitcount(elements);
    if (count == 0 || count == 1)     return itemSetRules;
  }
  Collection<BinaryItemSet> vetoSets=new LinkedList<BinaryItemSet>();
  Collection<BinaryItemSet> nextSets=BinaryItemSet.divideSet(itemSet);
  for (int i=0; i < itemSet.getAttributeVector().length * 16; i++) {
    List<BinaryItemSet> smallerSets=new LinkedList<BinaryItemSet>(nextSets);
    nextSets.clear();
    for (    BinaryItemSet currentSet : smallerSets) {
      int supportX=frequentSet.get(currentSet);
      double confidanceXY=suportXY / (double)supportX;
      if (confidanceXY >= minCredibility) {
        Rule rule=createRuleFromItemSet(itemSet,currentSet,confidanceXY,suportXY);
        itemSetRules.add(rule);
        Collection<BinaryItemSet> sets=BinaryItemSet.divideSet(currentSet);
        if (sets.size() != 0)         nextSets.addAll(sets);
      }
 else {
        Collection<BinaryItemSet> sets=BinaryItemSet.divideSet(currentSet);
        if (sets.size() != 0)         vetoSets.addAll(sets);
      }
    }
  }
  return itemSetRules;
}","public List<Rule> getRules(BinaryItemSet itemSet,double minCredibility,SortedMap<BinaryItemSet,Integer> frequentSet){
  List<Rule> itemSetRules=new LinkedList<Rule>();
  int suportXY=frequentSet.get(itemSet);
  int count=0;
  for (  char elements : itemSet.getAttributeVector()) {
    count+=BinaryItemSet.bitcount(elements);
  }
  if (count == 0 || count == 1)   return itemSetRules;
  Collection<BinaryItemSet> vetoSets=new LinkedList<BinaryItemSet>();
  Collection<BinaryItemSet> nextSets=BinaryItemSet.divideSet(itemSet);
  for (int i=0; i < itemSet.getAttributeVector().length * 16; i++) {
    List<BinaryItemSet> smallerSets=new LinkedList<BinaryItemSet>(nextSets);
    nextSets.clear();
    for (    BinaryItemSet currentSet : smallerSets) {
      int supportX=frequentSet.get(currentSet);
      double confidanceXY=suportXY / (double)supportX;
      if (confidanceXY >= minCredibility) {
        Rule rule=createRuleFromItemSet(itemSet,currentSet,confidanceXY,suportXY);
        itemSetRules.add(rule);
        Collection<BinaryItemSet> sets=BinaryItemSet.divideSet(currentSet);
        if (sets.size() != 0)         nextSets.addAll(sets);
      }
 else {
        Collection<BinaryItemSet> sets=BinaryItemSet.divideSet(currentSet);
        if (sets.size() != 0)         vetoSets.addAll(sets);
      }
    }
  }
  return itemSetRules;
}"
20415,"public Rule createRuleFromItemSet(BinaryItemSet itemSet,BinaryItemSet currentSet,double confidance,int suportXY){
  if (itemSet.getNumberOfAttributes() == 0 || currentSet.getNumberOfAttributes() == 0)   throw new RuntimeException(""String_Node_Str"");
  List<Integer> condPart=new LinkedList<Integer>();
  List<Integer> exePart=new LinkedList<Integer>();
  char[] vectorAll=itemSet.getAttributeVector();
  char[] vectorPremise=currentSet.getAttributeVector();
  for (int i=0; i < vectorPremise.length; i++) {
    char[] binaryAll=getBinaryString(vectorAll[i]);
    char[] binaryPremise=getBinaryString(vectorPremise[i]);
    for (int j=0; j < binaryAll.length; j++) {
      if (binaryAll[j] == '1') {
        Integer value=16 * i + j + 1;
        if (binaryPremise[j] == '1') {
          condPart.add(value);
        }
 else {
          exePart.add(value);
        }
      }
 else {
        if (binaryPremise[j] == '1')         throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Rule rule=new Rule(this.ruleCounter++,condPart,exePart,(int)(confidance * 100),suportXY);
  return rule;
}","public Rule createRuleFromItemSet(BinaryItemSet itemSet,BinaryItemSet currentSet,double confidance,int suportXY){
  if (itemSet.getNumberOfAttributes() == 0 || currentSet.getNumberOfAttributes() == 0)   throw new RuntimeException(""String_Node_Str"");
  List<Integer> condPart=new LinkedList<Integer>();
  List<Integer> exePart=new LinkedList<Integer>();
  char[] vectorAll=itemSet.getAttributeVector();
  char[] vectorPremise=currentSet.getAttributeVector();
  for (int i=0; i < vectorPremise.length; i++) {
    char[] binaryAll=BinaryItemSet.getBinaryString(vectorAll[i]);
    char[] binaryPremise=BinaryItemSet.getBinaryString(vectorPremise[i]);
    for (int j=0; j < binaryAll.length; j++) {
      if (binaryAll[j] == '1') {
        Integer value=16 * i + j + 1;
        if (binaryPremise[j] == '1') {
          condPart.add(value);
        }
 else {
          exePart.add(value);
        }
      }
 else {
        if (binaryPremise[j] == '1')         throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
  Rule rule=new Rule(this.ruleCounter++,condPart,exePart,(int)(confidance * 100),suportXY);
  return rule;
}"
20416,"/** 
 * Gets the rules out of the passed itemSet
 * @param minCredibility
 * @param data
 * @param itemSet : one of the frequent items.
 * @return List of rules which satisfy minimal credibility.
 */
private List<Rule> getRulesFromItemSet(ItemSet itemSet,DataRepresentationBase data,double minCredibility){
  List<Rule> itemSetRules=new LinkedList<Rule>();
  int suportXY=frequentSet.get(itemSet);
  List<ItemSet> vetoSets=new LinkedList<ItemSet>();
  List<ItemSet> nextSets=getAllSets(itemSet.getElements());
  for (int i=0; i < itemSet.getElements().size() - 1; i++) {
    List<ItemSet> smallerSets=new LinkedList<ItemSet>(nextSets);
    for (    ItemSet currentSet : smallerSets) {
      int supportX=frequentSet.get(currentSet);
      double confidance=suportXY / supportX;
      if (confidance >= minCredibility) {
        List<Integer> exectuivePart=new LinkedList<Integer>();
        List<Integer> conditionalPart=new LinkedList<Integer>();
        for (        String attribute : itemSet.getElements()) {
          if (currentSet.getElements().contains(attribute)) {
            conditionalPart.add(Integer.parseInt(attribute));
          }
 else {
            exectuivePart.add(Integer.parseInt(attribute));
          }
        }
        Rule rule=new Rule(ruleCounter++,conditionalPart,exectuivePart,(int)(confidance * 100),supportX);
        itemSetRules.add(rule);
        List<ItemSet> sets=getAllSets(currentSet.getElements());
        if (sets != null)         nextSets.addAll(sets);
      }
 else {
        List<ItemSet> sets=getAllSets(currentSet.getElements());
        if (sets != null)         vetoSets.addAll(sets);
      }
    }
  }
  return itemSetRules;
}","/** 
 * Gets the rules out of the passed itemSet
 * @param minCredibility
 * @param data
 * @param itemSet : one of the frequent items.
 * @return List of rules which satisfy minimal credibility.
 */
private List<Rule> getRulesFromItemSet(ItemSet itemSet,DataRepresentationBase data,double minCredibility){
  Set<Rule> itemSetRules=new HashSet<Rule>();
  int suportXY=frequentSet.get(itemSet);
  List<ItemSet> vetoSets=new LinkedList<ItemSet>();
  List<ItemSet> nextSets=getAllSets(itemSet.getElements());
  for (int i=0; i < itemSet.getElements().size(); i++) {
    List<ItemSet> smallerSets=new LinkedList<ItemSet>(nextSets);
    for (    ItemSet currentSet : smallerSets) {
      int supportX=frequentSet.get(currentSet);
      double confidance=suportXY / (double)supportX;
      if (confidance >= minCredibility) {
        List<Integer> exectuivePart=new LinkedList<Integer>();
        List<Integer> conditionalPart=new LinkedList<Integer>();
        for (        String attribute : itemSet.getElements()) {
          if (currentSet.getElements().contains(attribute)) {
            conditionalPart.add(Integer.parseInt(attribute));
          }
 else {
            exectuivePart.add(Integer.parseInt(attribute));
          }
        }
        Rule rule=new Rule(ruleCounter++,conditionalPart,exectuivePart,(int)(confidance * 100),supportX);
        itemSetRules.add(rule);
        List<ItemSet> sets=getAllSets(currentSet.getElements());
        if (sets != null)         nextSets.addAll(sets);
      }
 else {
        List<ItemSet> sets=getAllSets(currentSet.getElements());
        if (sets != null)         vetoSets.addAll(sets);
      }
    }
  }
  return new LinkedList<Rule>(itemSetRules);
}"
20417,"public ProductionAlgorithmFactory(){
  algorithms=new LinkedList<IAlgorithm>();
  algorithms.add(new WekaAlgorithm());
  algorithms.add(new AprioriNST());
  algorithms.add(new BinaryApriori(new BinaryRuleEngine(),new BinarySetsEngine(),1));
  InjectableSetsEngine setsEngine=new InjectableSetsEngine(new BinarySetsEngine(),new JOCLSetsEngine());
  algorithms.add(new BinaryApriori(new BinaryRuleEngine(),setsEngine,4));
}","public ProductionAlgorithmFactory(){
  algorithms=new LinkedList<IAlgorithm>();
  algorithms.add(new WekaAlgorithm());
  algorithms.add(new AprioriNST());
  algorithms.add(new BinaryApriori(new BinaryRuleEngine(),new BinarySetsEngine(),1));
  InjectableSetsEngine setsEngine=new InjectableSetsEngine(new BinarySetsEngine(),new JOCLSetsEngine());
}"
20418,"private void showRulesDifferences(List<Rule> result,List<Rule> expectedRules){
  System.err.println(""String_Node_Str"");
  for (  Rule r : result) {
    System.out.println(r);
  }
  System.err.flush();
  System.err.println(""String_Node_Str"");
  for (  Rule r : expectedRules) {
    System.out.println(r);
  }
  System.err.flush();
}","private void showRulesDifferences(List<Rule> result,List<Rule> expectedRules){
  System.err.println(""String_Node_Str"");
  for (  Rule r : result) {
    System.err.println(r);
  }
  System.err.flush();
  System.err.println(""String_Node_Str"");
  for (  Rule r : expectedRules) {
    System.err.println(r);
  }
  System.err.flush();
}"
20419,"@Override protected void startSetGeneration(DataRepresentationBase data,double minSupport,double minCredibility){
  this.minSupport=minSupport;
  this.minCredibility=minCredibility;
  this.supportThreshold=(int)Math.ceil(data.getTransactionsList().size() * minSupport);
  SortedMap<BinaryItemSet,Integer> frequentSuppMap=this.binaryEngine.getSingleCandidateSets(data,supportThreshold);
  Set<BinaryItemSet> approvedCandidates=frequentSuppMap.keySet();
  int generation=0;
  while (true) {
    Set<BinaryItemSet> candidates=this.binaryEngine.getCandidateSets(approvedCandidates,generation++);
    SortedMap<BinaryItemSet,Integer> candidatesAccepted=this.binaryEngine.verifyCandidatesInData(data,candidates,supportThreshold);
    approvedCandidates=candidatesAccepted.keySet();
    frequentSuppMap.putAll(candidatesAccepted);
    if (approvedCandidates.size() == 0)     break;
  }
  frequentSet=frequentSuppMap;
}","@Override protected void startSetGeneration(DataRepresentationBase data,double minSupport,double minCredibility){
  this.minSupport=minSupport;
  this.minCredibility=minCredibility;
  this.supportThreshold=(int)Math.ceil(data.getTransactionsList().size() * minSupport);
  SortedMap<BinaryItemSet,Integer> frequentSuppMap=this.binaryEngine.getSingleCandidateSets(data,supportThreshold);
  Set<BinaryItemSet> approvedCandidates=frequentSuppMap.keySet();
  int generation=1;
  while (true) {
    Set<BinaryItemSet> candidates=this.binaryEngine.getCandidateSets(approvedCandidates,++generation);
    SortedMap<BinaryItemSet,Integer> candidatesAccepted=this.binaryEngine.verifyCandidatesInData(data,candidates,supportThreshold);
    approvedCandidates=candidatesAccepted.keySet();
    frequentSuppMap.putAll(candidatesAccepted);
    if (approvedCandidates.size() == 0)     break;
  }
  frequentSet=frequentSuppMap;
}"
20420,"/** 
 * Get the number of '1' in the binary representation number.
 * @param n : number to be looked into.
 * @return the number of '1' in the binary representation.
 */
private int bitcount(char n){
  int count=0;
  while (n == 0) {
    count+=n & 0x1;
    n<<=1;
  }
  return count;
}","/** 
 * Get the number of '1' in the binary representation number.
 * @param n : number to be looked into.
 * @return the number of '1' in the binary representation.
 */
private int bitcount(char x){
  int result=0;
  for (int i=0; i < 16; i++) {
    result+=x & 1;
    x>>>=1;
  }
  return result;
}"
20421,"public List<Rule> getRules(BinaryItemSet itemSet,double minCredibility,SortedMap<BinaryItemSet,Integer> frequentSet){
  List<Rule> itemSetRules=new LinkedList<Rule>();
  int suportXY=frequentSet.get(itemSet);
  for (  char elements : itemSet.getAttributeVector()) {
    int count=bitcount(elements);
    if (count == 0 || count == 1)     return itemSetRules;
  }
  Collection<BinaryItemSet> vetoSets=new LinkedList<BinaryItemSet>();
  Collection<BinaryItemSet> nextSets=BinaryItemSet.divideSet(itemSet);
  for (int i=0; i < itemSet.getAttributeVector().length * bitsFactor - 1; i++) {
    List<BinaryItemSet> smallerSets=new LinkedList<BinaryItemSet>(nextSets);
    for (    BinaryItemSet currentSet : smallerSets) {
      int supportX=frequentSet.get(currentSet);
      double confidanceXY=suportXY / supportX;
      if (confidanceXY >= minCredibility) {
        Rule rule=createRuleFromItemSet(itemSet,currentSet,confidanceXY,suportXY);
        itemSetRules.add(rule);
        Collection<BinaryItemSet> sets=BinaryItemSet.divideSet(currentSet);
        if (sets != null)         nextSets.addAll(sets);
      }
 else {
        Collection<BinaryItemSet> sets=BinaryItemSet.divideSet(currentSet);
        if (sets != null)         vetoSets.addAll(sets);
      }
    }
  }
  return itemSetRules;
}","public List<Rule> getRules(BinaryItemSet itemSet,double minCredibility,SortedMap<BinaryItemSet,Integer> frequentSet){
  List<Rule> itemSetRules=new LinkedList<Rule>();
  int suportXY=frequentSet.get(itemSet);
  for (  char elements : itemSet.getAttributeVector()) {
    int count=bitcount(elements);
    if (count == 0 || count == 1)     return itemSetRules;
  }
  Collection<BinaryItemSet> vetoSets=new LinkedList<BinaryItemSet>();
  Collection<BinaryItemSet> nextSets=BinaryItemSet.divideSet(itemSet);
  for (int i=0; i < itemSet.getAttributeVector().length * 16; i++) {
    List<BinaryItemSet> smallerSets=new LinkedList<BinaryItemSet>(nextSets);
    nextSets.clear();
    for (    BinaryItemSet currentSet : smallerSets) {
      int supportX=frequentSet.get(currentSet);
      double confidanceXY=suportXY / (double)supportX;
      if (confidanceXY >= minCredibility) {
        Rule rule=createRuleFromItemSet(itemSet,currentSet,confidanceXY,suportXY);
        itemSetRules.add(rule);
        Collection<BinaryItemSet> sets=BinaryItemSet.divideSet(currentSet);
        if (sets.size() != 0)         nextSets.addAll(sets);
      }
 else {
        Collection<BinaryItemSet> sets=BinaryItemSet.divideSet(currentSet);
        if (sets.size() != 0)         vetoSets.addAll(sets);
      }
    }
  }
  return itemSetRules;
}"
20422,"public Set<BinaryItemSet> getCandidateSets(Set<BinaryItemSet> frequentSupportMap,int generation){
  Set<BinaryItemSet> output=new TreeSet<BinaryItemSet>();
  for (  BinaryItemSet itemSet : frequentSupportMap) {
    for (    BinaryItemSet singleItemSet : this.levelOneSet) {
      if (itemSet.compareTo(singleItemSet) < 0) {
        char[] vector=itemSet.getAttributeVector();
        char[] singleVector=singleItemSet.getAttributeVector();
        int vectorLength=singleVector.length;
        char[] outputVector=new char[vectorLength];
        for (int i=0; i < vectorLength; i++) {
          outputVector[i]=(char)(vector[i] | singleVector[i]);
        }
        boolean hasSupport=true;
        Collection<BinaryItemSet> items=BinaryItemSet.divideSet(outputVector,generation);
        for (        BinaryItemSet binaryItemSet : items) {
          if (!frequentSupportMap.contains(binaryItemSet)) {
            hasSupport=false;
          }
        }
        if (hasSupport) {
          BinaryItemSet candidate=new BinaryItemSet(outputVector,generation);
          output.add(candidate);
        }
      }
    }
  }
  return output;
}","public Set<BinaryItemSet> getCandidateSets(Set<BinaryItemSet> frequentSupportMap,int generation){
  Set<BinaryItemSet> output=new TreeSet<BinaryItemSet>();
  for (  BinaryItemSet itemSet : frequentSupportMap) {
    for (    BinaryItemSet singleItemSet : this.levelOneSet) {
      if (itemSet.compareTo(singleItemSet) < 0) {
        char[] vector=itemSet.getAttributeVector();
        char[] singleVector=singleItemSet.getAttributeVector();
        int vectorLength=singleVector.length;
        char[] outputVector=new char[vectorLength];
        int sum=0;
        for (int i=0; i < vectorLength; i++) {
          outputVector[i]=(char)(vector[i] | singleVector[i]);
          sum+=BinaryItemSet.bitcount(outputVector[i]);
        }
        if (sum == itemSet.getNumberOfAttributes())         continue;
        boolean hasSupport=true;
        Collection<BinaryItemSet> items=BinaryItemSet.divideSet(outputVector,generation);
        for (        BinaryItemSet binaryItemSet : items) {
          if (!frequentSupportMap.contains(binaryItemSet)) {
            hasSupport=false;
          }
        }
        if (hasSupport) {
          BinaryItemSet candidate=new BinaryItemSet(outputVector,generation);
          output.add(candidate);
        }
      }
    }
  }
  return output;
}"
20423,"@Test public void get_sample_rules_from_data(){
  char totalVector=32769;
  frequentSet=new BinaryItemSet(new char[]{totalVector});
  frequentSetsMap.put(frequentSet,1);
  BinaryItemSet supportSet1=new BinaryItemSet(new char[]{1});
  BinaryItemSet supportSet2=new BinaryItemSet(new char[]{32768});
  frequentSetsMap.put(supportSet1,2);
  frequentSetsMap.put(supportSet2,2);
  List<Rule> expectedRules=new LinkedList<Rule>();
  List<Integer> listOne=new LinkedList<Integer>();
  listOne.add(1);
  List<Integer> listTwo=new LinkedList<Integer>();
  listOne.add(16);
  expectedRules.add(new Rule(0,listOne,listTwo,1,1));
  expectedRules.add(new Rule(0,listTwo,listOne,1,1));
  List<Rule> result=engine.getRules(frequentSet,0,frequentSetsMap);
  assertLists(expectedRules,result);
}","@Test public void get_sample_rules_from_data(){
  char totalVector=32769;
  frequentSet=new BinaryItemSet(new char[]{totalVector});
  frequentSetsMap.put(frequentSet,1);
  BinaryItemSet supportSet1=new BinaryItemSet(new char[]{1});
  BinaryItemSet supportSet2=new BinaryItemSet(new char[]{32768});
  frequentSetsMap.put(supportSet1,2);
  frequentSetsMap.put(supportSet2,2);
  List<Rule> expectedRules=new LinkedList<Rule>();
  List<Integer> listOne=new LinkedList<Integer>();
  listOne.add(1);
  List<Integer> listTwo=new LinkedList<Integer>();
  listTwo.add(16);
  expectedRules.add(new Rule(1,listOne,listTwo,50,1));
  expectedRules.add(new Rule(0,listTwo,listOne,50,1));
  List<Rule> result=engine.getRules(frequentSet,0,frequentSetsMap);
  assertLists(expectedRules,result);
}"
20424,"@Test public void set_partition(){
  char chunk1=32769;
  char chunk2=1;
  BinaryItemSet inputSet=new BinaryItemSet(new char[]{chunk1,chunk2},3);
  List<BinaryItemSet> expected=new LinkedList<BinaryItemSet>();
  chunk1=1;
  chunk2=1;
  BinaryItemSet set1=new BinaryItemSet(new char[]{chunk1,chunk2},2);
  chunk1=32768;
  chunk2=1;
  BinaryItemSet set2=new BinaryItemSet(new char[]{chunk1,chunk2},2);
  chunk1=32769;
  chunk2=0;
  BinaryItemSet set3=new BinaryItemSet(new char[]{chunk1,chunk2},2);
  expected.add(set3);
  expected.add(set2);
  expected.add(set1);
  Collection<BinaryItemSet> result=BinaryItemSet.divideSet(inputSet);
  for (  BinaryItemSet binaryItemSet : result) {
    if (!expected.contains(binaryItemSet))     Assert.fail(""String_Node_Str"");
  }
}","@Test public void set_partition(){
  char chunk1=32769;
  char chunk2=1;
  BinaryItemSet inputSet=new BinaryItemSet(new char[]{chunk1,chunk2},3);
  List<BinaryItemSet> expected=new LinkedList<BinaryItemSet>();
  chunk1=1;
  chunk2=1;
  BinaryItemSet set1=new BinaryItemSet(new char[]{chunk1,chunk2},2);
  chunk1=32768;
  chunk2=1;
  BinaryItemSet set2=new BinaryItemSet(new char[]{chunk1,chunk2},2);
  chunk1=32769;
  chunk2=0;
  BinaryItemSet set3=new BinaryItemSet(new char[]{chunk1,chunk2},2);
  expected.add(set3);
  expected.add(set2);
  expected.add(set1);
  Collection<BinaryItemSet> result=BinaryItemSet.divideSet(inputSet);
  for (  BinaryItemSet binaryItemSet : result) {
    if (!expected.contains(binaryItemSet))     Assert.fail(""String_Node_Str"");
  }
  int expectedNumberOfAttrubutes=2;
  for (  BinaryItemSet binaryItemSet : result) {
    Assert.assertEquals(expectedNumberOfAttrubutes,binaryItemSet.getNumberOfAttributes());
  }
}"
20425,"@Override protected void startSetGeneration(DataRepresentationBase data,double minSupport,double minCredibility){
  this.minSupport=minSupport;
  this.minCredibility=minCredibility;
  this.supportThreshold=(int)Math.ceil(data.getTransactionsList().size() * minSupport);
  SortedMap<BinaryItemSet,Integer> frequentSuppMap=this.binaryEngine.getSingleCandidateSets(data,supportThreshold);
  int generation=0;
  while (true) {
    Set<BinaryItemSet> candidates=this.binaryEngine.getCandidateSets(frequentSuppMap,generation++);
    Set<BinaryItemSet> approvedCandidates=this.binaryEngine.verifyCandidatesInData(data,candidates);
    if (approvedCandidates.size() == 0)     break;
  }
  frequentSet=frequentSuppMap;
}","@Override protected void startSetGeneration(DataRepresentationBase data,double minSupport,double minCredibility){
  this.minSupport=minSupport;
  this.minCredibility=minCredibility;
  this.supportThreshold=(int)Math.ceil(data.getTransactionsList().size() * minSupport);
  SortedMap<BinaryItemSet,Integer> frequentSuppMap=this.binaryEngine.getSingleCandidateSets(data,supportThreshold);
  Set<BinaryItemSet> approvedCandidates=frequentSuppMap.keySet();
  int generation=0;
  while (true) {
    Set<BinaryItemSet> candidates=this.binaryEngine.getCandidateSets(approvedCandidates,generation++);
    approvedCandidates=this.binaryEngine.verifyCandidatesInData(data,candidates);
    if (approvedCandidates.size() == 0)     break;
  }
  frequentSet=frequentSuppMap;
}"
20426,"/** 
 * Gets from   {@link BinaryItemSet} with n attributes. N{@link BinaryItemSet} objects each with <i>n -1</i> attributes.
 * @param inputSet : set to be divided.
 * @return Collection of sets with <i>n-1</i> attributes.
 */
public static Collection<BinaryItemSet> divideSet(BinaryItemSet inputSet){
  Set<BinaryItemSet> output=new LinkedHashSet<BinaryItemSet>();
  char[] vector=inputSet.getAttributeVector();
  int generation=inputSet.getNumberOfAttributes();
  int newGeneration=generation - 1;
  for (int i=0; i < vector.length; i++) {
    char mask=32768;
    for (int j=0; j < 16; j++) {
      char invertedMask=(char)~mask;
      char outChunk=(char)(invertedMask & vector[i]);
      if (outChunk != vector[i]) {
        char[] newElements=vector.clone();
        newElements[i]=outChunk;
        BinaryItemSet set=new BinaryItemSet(newElements,newGeneration);
        output.add(set);
      }
      mask=(char)(mask >>> 1);
    }
  }
  return output;
}","/** 
 * Gets from   {@link BinaryItemSet} with n attributes. N{@link BinaryItemSet} objects each with <i>n -1</i> attributes.
 * @param inputSet : set to be divided.
 * @return Collection of sets with <i>n-1</i> attributes.
 */
public static Collection<BinaryItemSet> divideSet(BinaryItemSet inputSet){
  return divideSet(inputSet.getAttributeVector(),inputSet.getNumberOfAttributes());
}"
20427,"public Set<BinaryItemSet> getCandidateSets(SortedMap<BinaryItemSet,Integer> frequentSupportMap,int generation){
  Set<BinaryItemSet> output=new TreeSet<BinaryItemSet>();
  List<BinaryItemSet> minuseOneSets=new LinkedList<BinaryItemSet>();
  for (  Map.Entry<BinaryItemSet,Integer> binaryItemSet : frequentSupportMap.entrySet()) {
    BinaryItemSet itemSet=binaryItemSet.getKey();
    if (itemSet.getNumberOfAttributes() == generation) {
      minuseOneSets.add(itemSet);
    }
  }
  for (  BinaryItemSet itemSet : minuseOneSets) {
    for (    BinaryItemSet singleItemSet : this.levelOneSet) {
      if (itemSet.compareTo(singleItemSet) < 0) {
        char[] vector=itemSet.getAttributeVector();
        char[] singleVector=singleItemSet.getAttributeVector();
        int vectorLength=singleVector.length;
        char[] outputVector=new char[vectorLength];
        for (int i=0; i < vectorLength; i++) {
          outputVector[i]=(char)(vector[i] | singleVector[i]);
        }
        boolean hasSupport=true;
        Collection<BinaryItemSet> items=BinaryItemSet.divideSet(itemSet);
        for (        BinaryItemSet binaryItemSet : items) {
          if (!frequentSupportMap.containsKey(binaryItemSet)) {
            hasSupport=false;
          }
        }
        if (hasSupport) {
          BinaryItemSet candidate=new BinaryItemSet(vector,generation);
          output.add(candidate);
        }
      }
    }
  }
  return output;
}","public Set<BinaryItemSet> getCandidateSets(Set<BinaryItemSet> frequentSupportMap,int generation){
  Set<BinaryItemSet> output=new TreeSet<BinaryItemSet>();
  for (  BinaryItemSet itemSet : frequentSupportMap) {
    for (    BinaryItemSet singleItemSet : this.levelOneSet) {
      if (itemSet.compareTo(singleItemSet) < 0) {
        char[] vector=itemSet.getAttributeVector();
        char[] singleVector=singleItemSet.getAttributeVector();
        int vectorLength=singleVector.length;
        char[] outputVector=new char[vectorLength];
        for (int i=0; i < vectorLength; i++) {
          outputVector[i]=(char)(vector[i] | singleVector[i]);
        }
        boolean hasSupport=true;
        Collection<BinaryItemSet> items=BinaryItemSet.divideSet(outputVector,generation);
        for (        BinaryItemSet binaryItemSet : items) {
          if (!frequentSupportMap.contains(binaryItemSet)) {
            hasSupport=false;
          }
        }
        if (hasSupport) {
          BinaryItemSet candidate=new BinaryItemSet(outputVector,generation);
          output.add(candidate);
        }
      }
    }
  }
  return output;
}"
20428,"public Set<BinaryItemSet> getCandidateSets(SortedMap<BinaryItemSet,Integer> frequentSupportMap,int i);","public Set<BinaryItemSet> getCandidateSets(Set<BinaryItemSet> approvedCandidates,int i);"
20429,"public Set<BinaryItemSet> getCandidateSets(SortedMap<BinaryItemSet,Integer> frequentSupportMap,int i){
  return null;
}","public Set<BinaryItemSet> getCandidateSets(Set<BinaryItemSet> frequentSupportMap,int i){
  return null;
}"
20430,"@Test public void no_set_can_be_generated_from_current_stage_maximum_generation(){
  frequentSupportMap=new TreeMap<BinaryItemSet,Integer>();
  char vector=57344;
  frequentSupportMap.put(new BinaryItemSet(new char[]{vector}),1);
  Set<BinaryItemSet> result=engine.getCandidateSets(frequentSupportMap,1);
  Assert.assertTrue(expecetCandidates.equals(result));
}","@Test public void no_set_can_be_generated_from_current_stage_maximum_generation(){
  frequentSupportMap=new TreeMap<BinaryItemSet,Integer>();
  String dataString=""String_Node_Str"";
  Integer support=0;
  DataRepresentationBase data=getDataFromString(dataString);
  engine.getSingleCandidateSets(data,support);
  char vector=57344;
  frequentSupportMap.put(new BinaryItemSet(new char[]{vector}),1);
  Set<BinaryItemSet> result=engine.getCandidateSets(frequentSupportMap.keySet(),1);
  Assert.assertTrue(expecetCandidates.equals(result));
}"
20431,"@Test public void generatin_level_two_sets_from_one_level_sets(){
  Integer support=0;
  String dataString=""String_Node_Str"";
  char vector=49152;
  BinaryItemSet set1=new BinaryItemSet(new char[]{vector});
  vector=40960;
  BinaryItemSet set2=new BinaryItemSet(new char[]{vector});
  vector=24576;
  BinaryItemSet set3=new BinaryItemSet(new char[]{vector});
  expecetCandidates.add(set1);
  expecetCandidates.add(set2);
  expecetCandidates.add(set3);
  DataRepresentationBase data=getDataFromString(dataString);
  frequentSupportMap=engine.getSingleCandidateSets(data,support);
  Set<BinaryItemSet> result=engine.getCandidateSets(frequentSupportMap,1);
  Assert.assertTrue(expecetCandidates.equals(result));
}","@Test public void generatin_level_two_sets_from_one_level_sets(){
  Integer support=0;
  String dataString=""String_Node_Str"";
  char vector=49152;
  BinaryItemSet set1=new BinaryItemSet(new char[]{vector});
  vector=40960;
  BinaryItemSet set2=new BinaryItemSet(new char[]{vector});
  vector=24576;
  BinaryItemSet set3=new BinaryItemSet(new char[]{vector});
  expecetCandidates.add(set1);
  expecetCandidates.add(set2);
  expecetCandidates.add(set3);
  DataRepresentationBase data=getDataFromString(dataString);
  frequentSupportMap=engine.getSingleCandidateSets(data,support);
  Set<BinaryItemSet> result=engine.getCandidateSets(frequentSupportMap.keySet(),1);
  Assert.assertTrue(expecetCandidates.equals(result));
}"
20432,"@Test public void generating_level_three_sets_from_level_two(){
  frequentSupportMap=new TreeMap<BinaryItemSet,Integer>();
  char setVector=0;
  setVector=49152;
  frequentSupportMap.put(new BinaryItemSet(new char[]{setVector}),1);
  setVector=40960;
  frequentSupportMap.put(new BinaryItemSet(new char[]{setVector}),1);
  setVector=24576;
  frequentSupportMap.put(new BinaryItemSet(new char[]{setVector}),1);
  char vector=57344;
  BinaryItemSet set1=new BinaryItemSet(new char[]{vector});
  expecetCandidates.add(set1);
  Set<BinaryItemSet> result=engine.getCandidateSets(frequentSupportMap,1);
  Assert.assertTrue(expecetCandidates.equals(result));
}","@Test public void generating_level_three_sets_from_level_two(){
  frequentSupportMap=new TreeMap<BinaryItemSet,Integer>();
  char setVector=0;
  String dataString=""String_Node_Str"";
  Integer support=0;
  DataRepresentationBase data=getDataFromString(dataString);
  engine.getSingleCandidateSets(data,support);
  setVector=49152;
  frequentSupportMap.put(new BinaryItemSet(new char[]{setVector}),1);
  setVector=40960;
  frequentSupportMap.put(new BinaryItemSet(new char[]{setVector}),1);
  setVector=24576;
  frequentSupportMap.put(new BinaryItemSet(new char[]{setVector}),1);
  char vector=57344;
  BinaryItemSet set1=new BinaryItemSet(new char[]{vector});
  expecetCandidates.add(set1);
  Set<BinaryItemSet> result=engine.getCandidateSets(frequentSupportMap.keySet(),1);
  Assert.assertTrue(expecetCandidates.equals(result));
}"
20433,"public DataRepresentationBase loadData(){
  Reader fileReader=null;
  try {
    fileReader=new FileReader(inputFile);
  }
 catch (  FileNotFoundException e) {
  }
  return fomratter.getFormattedData(fileReader);
}","public DataRepresentationBase loadData(){
  Reader fileReader=null;
  DataRepresentationBase data=null;
  try {
    fileReader=new FileReader(inputFile);
    data=fomratter.getFormattedData(fileReader);
    fileReader.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return data;
}"
20434,"@Before public void set_up(){
  mockFormatter=Mockito.mock(IDataFormatter.class);
  loader=new SimpleDataLoader(mockFormatter);
  fileName=""String_Node_Str"";
  file=new File(fileName);
  if (file.exists())   file.delete();
  try {
    file.createNewFile();
  }
 catch (  IOException e) {
  }
}","@Before public void set_up(){
  mockFormatter=Mockito.mock(IDataFormatter.class);
  loader=new SimpleDataLoader(mockFormatter);
  fileName=""String_Node_Str"";
  file=new File(fileName);
  try {
    file.createNewFile();
  }
 catch (  IOException e) {
  }
}"
20435,"@Override public boolean canFindUsagesFor(@NotNull PsiElement psiElement){
  return psiElement instanceof PNameNsDeclaration;
}","@Override public boolean canFindUsagesFor(@NotNull PsiElement psiElement){
  return psiElement instanceof PNameNsDeclaration || psiElement instanceof VariablePsiElement;
}"
20436,"@Override public WordsScanner getWordsScanner(){
  return new DefaultWordsScanner(new SparqlLexer(),TokenSet.create(SparqlTokenTypes.LIT_PNAME_LN,SparqlTokenTypes.LIT_PNAME_NS,SparqlTokenTypes.VAR),SparqlTokenTypeSets.COMMENTS,TokenSet.create());
}","@Override public WordsScanner getWordsScanner(){
  return new DefaultWordsScanner(new SparqlLexer(),TokenSet.create(SparqlTokenTypes.LIT_PNAME_LN,SparqlTokenTypes.LIT_PNAME_NS,SparqlTokenTypes.VAR),SparqlTokenTypeSets.COMMENTS,TokenSet.andSet(SparqlTokenTypeSets.NUMBER_LITERALS,SparqlTokenTypeSets.STRING_LITERALS));
}"
20437,"private static Predicate issuer(QIssuer path,String entityID,String entityUID,String entityUIDType,boolean matchUnknown){
  Predicate predicate=ExpressionUtils.allOf(wildCard(QIssuer.issuer.entityID,entityID,false,false),wildCard(QIssuer.issuer.entityUID,entityUID,false,false),wildCard(QIssuer.issuer.entityUIDType,entityUIDType,false,false));
  if (predicate == null)   return null;
  return matchUnknown(new HibernateSubQuery().from(QIssuer.issuer).where(QIssuer.issuer.eq(path),predicate).exists(),path,matchUnknown);
}","private static Predicate issuer(QIssuer path,String entityID,String entityUID,String entityUIDType,boolean matchUnknown){
  Predicate predicate=ExpressionUtils.anyOf(wildCard(QIssuer.issuer.entityID,entityID,false,false),ExpressionUtils.allOf(wildCard(QIssuer.issuer.entityUID,entityUID,false,false),wildCard(QIssuer.issuer.entityUIDType,entityUIDType,false,false)));
  if (predicate == null)   return null;
  return matchUnknown(new HibernateSubQuery().from(QIssuer.issuer).where(QIssuer.issuer.eq(path),predicate).exists(),path,matchUnknown);
}"
20438,"static Predicate wildCard(StringPath path,String value,boolean matchUnknown,boolean ignoreCase){
  if (value.equals(""String_Node_Str""))   return null;
  Predicate predicate;
  StringExpression expr=ignoreCase && isUpperCase(value) ? path.toUpperCase() : path;
  if (containsWildcard(value)) {
    String pattern=toLikePattern(value);
    if (pattern.equals(""String_Node_Str""))     return null;
    predicate=expr.like(pattern);
  }
 else   predicate=expr.eq(value);
  return matchUnknown(predicate,path,matchUnknown);
}","static Predicate wildCard(StringPath path,String value,boolean matchUnknown,boolean ignoreCase){
  if (value == null || value.equals(""String_Node_Str""))   return null;
  Predicate predicate;
  StringExpression expr=ignoreCase && isUpperCase(value) ? path.toUpperCase() : path;
  if (containsWildcard(value)) {
    String pattern=toLikePattern(value);
    if (pattern.equals(""String_Node_Str""))     return null;
    predicate=expr.like(pattern);
  }
 else   predicate=expr.eq(value);
  return matchUnknown(predicate,path,matchUnknown);
}"
20439,"public static IDWithIssuer pidWithIssuer(Attributes keys,Issuer defaultIssuerWithPatientID){
  String id=keys.getString(Tag.PatientID);
  if (id == null)   return null;
  String entityID=keys.getString(Tag.IssuerOfPatientID,""String_Node_Str"");
  Attributes issuerItem=keys.getNestedDataset(Tag.IssuerOfPatientIDQualifiersSequence);
  String entityUID=issuerItem != null ? issuerItem.getString(Tag.UniversalEntityID,""String_Node_Str"") : ""String_Node_Str"";
  String entityUIDType=issuerItem != null ? issuerItem.getString(Tag.UniversalEntityIDType,""String_Node_Str"") : ""String_Node_Str"";
  Issuer issuer=entityID.equals(""String_Node_Str"") && entityUID.equals(""String_Node_Str"") && entityUIDType.equals(""String_Node_Str"") ? defaultIssuerWithPatientID : new Issuer(entityID,entityUID,entityUIDType);
  return new IDWithIssuer(id,issuer);
}","public static IDWithIssuer pidWithIssuer(Attributes keys,Issuer defaultIssuerWithPatientID){
  String id=keys.getString(Tag.PatientID);
  if (id == null)   return null;
  String entityID=keys.getString(Tag.IssuerOfPatientID);
  String entityUID=null;
  String entityUIDType=null;
  Attributes issuerItem=keys.getNestedDataset(Tag.IssuerOfPatientIDQualifiersSequence);
  if (issuerItem != null) {
    entityUID=issuerItem.getString(Tag.UniversalEntityID);
    entityUIDType=issuerItem.getString(Tag.UniversalEntityIDType);
  }
  Issuer issuer=entityID == null && entityUID == null && entityUIDType == null ? defaultIssuerWithPatientID : new Issuer(entityID,entityUID,entityUIDType);
  return new IDWithIssuer(id,issuer);
}"
20440,"public static Issuer getIssuer(EntityManager em,Attributes issuerItem){
  return issuerItem != null ? getIssuer(em,issuerItem.getString(Tag.CodeValue,null),issuerItem.getString(Tag.CodingSchemeDesignator,null),issuerItem.getString(Tag.CodingSchemeDesignator,null)) : null;
}","public static Issuer getIssuer(EntityManager em,Attributes issuerItem){
  return issuerItem != null ? getIssuer(em,issuerItem.getString(Tag.LocalNamespaceEntityID,null),issuerItem.getString(Tag.UniversalEntityID,null),issuerItem.getString(Tag.UniversalEntityIDType,null)) : null;
}"
20441,"@Test public void removeTestData(){
  removePatient.removePatient(""String_Node_Str"",""String_Node_Str"");
  removePatient.removePatient(""String_Node_Str"",""String_Node_Str"");
}","@Test public void removeTestData(){
  removePatient.removePatient(""String_Node_Str"",""String_Node_Str"");
  removePatient.removePatient(""String_Node_Str"",""String_Node_Str"");
  removePatient.removePatient(""String_Node_Str"",""String_Node_Str"");
}"
20442,"@Deployment public static JavaArchive createDeployment(){
  return ShrinkWrap.create(JavaArchive.class,""String_Node_Str"").addClasses(InstanceStore.class,InstanceStoreBean.class,CodeFactory.class,IssuerFactory.class,PatientFactory.class).addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"");
}","@Deployment public static JavaArchive createDeployment(){
  return ShrinkWrap.create(JavaArchive.class,""String_Node_Str"").addClasses(InstanceStore.class,InstanceStoreBean.class,CodeFactory.class,IssuerFactory.class,PatientFactory.class).addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"").addAsResource(""String_Node_Str"");
}"
20443,"@Test public void storeTestData() throws Exception {
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.close();
}","@Test public void storeTestData() throws Exception {
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.store(SAXReader.parse(""String_Node_Str"",null),SOURCE_AET,RETRIEVE_AETS,null,Availability.ONLINE);
  instanceStore.close();
}"
20444,"private void writePackets(Thread thisThread){
  try {
    while (!done && (writerThread == thisThread)) {
      Packet packet=nextPacket();
      if (packet != null) {
        Vector<Packet> packets=new Vector<Packet>();
        packets.add(packet);
        connection.writePacket(packets);
      }
    }
    try {
      Vector<Packet> packets=new Vector<Packet>();
      packets.addAll(queue);
      connection.writePacket(packets);
    }
 catch (    XMPPException e) {
    }
    queue.clear();
  }
 catch (  XMPPException ioe) {
    new Exception(ioe).printStackTrace();
    done=true;
  }
}","private void writePackets(Thread thisThread){
  try {
    while (!done && (writerThread == thisThread)) {
      Packet packet=nextPacket();
      if (packet != null) {
        Vector<Packet> packets=new Vector<Packet>();
        packets.add(packet);
        connection.writePacket(packets);
      }
    }
    try {
      Vector<Packet> packets=new Vector<Packet>();
      packets.addAll(queue);
      if (packets.size() > 0)       connection.writePacket(packets);
    }
 catch (    XMPPException e) {
    }
    queue.clear();
  }
 catch (  XMPPException ioe) {
    new Exception(ioe).printStackTrace();
    done=true;
  }
}"
20445,"/** 
 * Creates a new error with the specified code, type, condition and message. This constructor is used when the condition is not recognized automatically by XMPPError i.e. there is not a defined instance of ErrorCondition or it does not applies the default  specification.
 * @param code the error code.
 * @param type the error type.
 * @param condition the error condition.
 * @param message a message describing the error.
 * @param extension list of packet extensions
 */
public XMPPError(int code,Type type,String condition,String message,List<PacketExtension> extension){
  this.code=code;
  this.type=type;
  this.condition=condition;
  this.message=message;
  this.applicationExtensions=extension;
  if (this.code == -1 || this.type == null) {
    ErrorSpecification spec=ErrorSpecification.specFor(condition);
    if (spec != null) {
      if (this.code == -1)       this.code=spec.code;
      if (this.type == null)       this.type=spec.type;
    }
  }
}","/** 
 * Creates a new error with the specified code, type, condition and message. This constructor is used when the condition is not recognized automatically by XMPPError i.e. there is not a defined instance of ErrorCondition or it does not applies the default  specification.
 * @param code the error code.
 * @param type the error type.
 * @param condition the error condition.
 * @param message a message describing the error.
 * @param extension list of packet extensions
 */
public XMPPError(int code,Type type,String condition,String message,List<PacketExtension> extension){
  this.code=code;
  this.type=type;
  this.condition=condition;
  this.message=message;
  this.applicationExtensions=extension;
  if (this.code == -1 || this.type == null) {
    ErrorSpecification spec=ErrorSpecification.specFor(condition);
    if (spec != null) {
      if (this.code == -1)       this.code=spec.code;
      if (this.type == null)       this.type=spec.type;
    }
 else {
      this.code=0;
    }
  }
}"
20446,"/** 
 * Returns the JID representation of an XMPP entity contained as a SubjectAltName extension in the certificate. If none was found then return <tt>null</tt>.
 * @param certificate the certificate presented by the remote entity.
 * @return the JID representation of an XMPP entity contained as a SubjectAltName extensionin the certificate. If none was found then return <tt>null</tt>.
 */
private static List<String> getSubjectAlternativeNames(X509Certificate certificate){
  List<String> identities=new ArrayList<String>();
  try {
    Collection<List<?>> altNames=certificate.getSubjectAlternativeNames();
    if (altNames == null) {
      return Collections.emptyList();
    }
  }
 catch (  CertificateParsingException e) {
    e.printStackTrace();
  }
  return identities;
}","/** 
 * Returns the JID representation of an XMPP entity contained as a SubjectAltName extension in the certificate. If none was found then return <tt>null</tt>.
 * @param certificate the certificate presented by the remote entity.
 * @return the JID representation of an XMPP entity contained as a SubjectAltName extensionin the certificate. If none was found then return <tt>null</tt>.
 */
private static List<String> getSubjectAlternativeNames(X509Certificate certificate){
  Collection<List<?>> altNames;
  try {
    altNames=certificate.getSubjectAlternativeNames();
  }
 catch (  CertificateParsingException e) {
    e.printStackTrace();
    return Collections.emptyList();
  }
  if (altNames == null)   return Collections.emptyList();
  List<String> identities=new ArrayList<String>();
  for (  List item : altNames) {
    Integer type=(Integer)item.get(0);
    if (type == 2) {
      String s=(String)item.get(1);
      identities.add(s);
    }
  }
  return identities;
}"
20447,"private static InputStream getTruststoreStream(String path) throws IOException {
  if (path != null)   return new FileInputStream(path);
  String javaHome=System.getProperty(""String_Node_Str"");
  String[] defaultTruststorePaths={System.getProperty(""String_Node_Str""),javaHome + ""String_Node_Str"",javaHome + ""String_Node_Str""};
  for (  String candidate : Arrays.asList(defaultTruststorePaths)) {
    try {
      return new FileInputStream(candidate);
    }
 catch (    IOException e) {
    }
  }
  throw new IOException(""String_Node_Str"");
}","private static InputStream getTruststoreStream(String path) throws IOException {
  if (path != null)   return new FileInputStream(path);
  String javaHome=System.getProperty(""String_Node_Str"");
  String[] defaultTruststorePaths={System.getProperty(""String_Node_Str""),javaHome + ""String_Node_Str"",javaHome + ""String_Node_Str""};
  for (  String candidate : Arrays.asList(defaultTruststorePaths)) {
    if (candidate == null)     continue;
    try {
      return new FileInputStream(candidate);
    }
 catch (    IOException e) {
    }
  }
  throw new IOException(""String_Node_Str"");
}"
20448,"/** 
 * Returns the identity of the remote server as defined in the specified certificate. The identity is defined in the subjectDN of the certificate and it can also be defined in the subjectAltName extension of type ""xmpp"". When the extension is being used then the identity defined in the extension in going to be returned. Otherwise, the value stored in the subjectDN is returned.
 * @param x509Certificate the certificate the holds the identity of the remote server.
 * @return the identity of the remote server as defined in the specified certificate.
 */
public static List<String> getPeerIdentity(X509Certificate x509Certificate){
  List<String> names=getSubjectAlternativeNames(x509Certificate);
  if (names.isEmpty()) {
    String name=x509Certificate.getSubjectDN().getName();
    Matcher matcher=cnPattern.matcher(name);
    if (matcher.find()) {
      name=matcher.group(2);
    }
    names=new ArrayList<String>();
    names.add(name);
  }
  return names;
}","/** 
 * @param x509Certificate the certificate the holds the identity of the remote server.
 * @return the identity of the remote server as defined in the specified certificate.
 */
public static List<String> getPeerIdentity(X509Certificate x509Certificate){
  List<String> names=new Vector<String>();
  String name=x509Certificate.getSubjectDN().getName();
  Matcher matcher=cnPattern.matcher(name);
  if (matcher.find()) {
    name=matcher.group(2);
  }
  names.add(name);
  names.addAll(getSubjectAlternativeNames(x509Certificate));
  return names;
}"
20449,"private String authenticateUsingMechanism(String username,CallbackHandler cbh,String password,String resource,String mechanism) throws XMPPException, SASLMechanism.MechanismNotSupported {
  if (saslNegotiated)   throw new XMPPException(""String_Node_Str"");
  init();
  currentMechanism=createMechanism(implementedMechanisms.get(mechanism));
  try {
    if (cbh != null)     currentMechanism.authenticate(username,connection.getServiceName(),cbh);
 else     currentMechanism.authenticate(username,connection.getServiceName(),password);
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new XMPPException(e);
  }
synchronized (this) {
    if (!saslNegotiated && !saslFailed) {
      try {
        wait(30000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  if (!saslNegotiated && !saslFailed)   throw new XMPPException(""String_Node_Str"",XMPPError.Condition.request_timeout);
  if (saslFailed) {
    if (errorCondition != null) {
      throw new XMPPException(""String_Node_Str"" + mechanism + ""String_Node_Str""+ errorCondition);
    }
 else {
      throw new XMPPException(""String_Node_Str"" + mechanism + ""String_Node_Str"");
    }
  }
  return bindResourceAndEstablishSession(resource);
}","private String authenticateUsingMechanism(String username,CallbackHandler cbh,String password,String resource,String mechanism) throws XMPPException, SASLMechanism.MechanismNotSupported {
  if (saslNegotiated)   throw new XMPPException(""String_Node_Str"");
  init();
  currentMechanism=createMechanism(implementedMechanisms.get(mechanism));
  try {
    if (cbh != null)     currentMechanism.authenticate(username,connection.getServiceName(),cbh);
 else     currentMechanism.authenticate(username,connection.getServiceName(),password);
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new XMPPException(e);
  }
synchronized (this) {
    if (!saslNegotiated && !saslFailed) {
      try {
        wait(30000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  if (!saslNegotiated && !saslFailed)   throw new XMPPException(""String_Node_Str"",XMPPError.Condition.request_timeout);
  if (saslFailed) {
    if (errorCondition != null) {
      throw new XMPPException(""String_Node_Str"" + mechanism + ""String_Node_Str""+ errorCondition,XMPPError.fromErrorType(errorCondition));
    }
 else {
      throw new XMPPException(""String_Node_Str"" + mechanism + ""String_Node_Str"");
    }
  }
  return bindResourceAndEstablishSession(resource);
}"
20450,"/** 
 * Just create an account.
 */
protected void setUp() throws Exception {
  super.setUp();
  XMPPConnection setupConnection=new XMPPConnection(getServiceName());
  setupConnection.connect();
  if (!setupConnection.getAccountManager().supportsAccountCreation())   fail(""String_Node_Str"");
  try {
    setupConnection.getAccountManager().createAccount(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  XMPPException e) {
    if (e.getXMPPError().getCode() != 409) {
      throw e;
    }
  }
}","/** 
 * Just create an account.
 */
protected void setUp() throws Exception {
  super.setUp();
  XMPPConnection setupConnection=new XMPPConnection(getServiceName());
  setupConnection.connect();
  if (!setupConnection.getAccountManager().supportsAccountCreation())   fail(""String_Node_Str"");
  try {
    setupConnection.getAccountManager().createAccount(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  XMPPException e) {
    if (!e.getXMPPError().getCondition().equals(""String_Node_Str"")) {
      throw e;
    }
  }
}"
20451,"/** 
 * Check that the server is returning the correct error when trying to login using an invalid (i.e. non-existent) user.
 */
public void testInvalidLogin(){
  try {
    XMPPConnection connection=createConnection();
    connection.connect();
    try {
      connection.login(""String_Node_Str"",""String_Node_Str"");
      connection.disconnect();
      fail(""String_Node_Str"");
    }
 catch (    XMPPException e) {
      if (e.getXMPPError() != null) {
        assertEquals(""String_Node_Str"",401,e.getXMPPError().getCode());
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}","/** 
 * Check that the server is returning the correct error when trying to login using an invalid (i.e. non-existent) user.
 */
public void testInvalidLogin(){
  try {
    XMPPConnection connection=createConnection();
    connection.connect();
    try {
      connection.login(""String_Node_Str"",""String_Node_Str"");
      connection.disconnect();
      fail(""String_Node_Str"");
    }
 catch (    XMPPException e) {
      assertNotNull(""String_Node_Str"",e.getXMPPError());
      assertEquals(""String_Node_Str"",401,e.getXMPPError().getCode());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}"
20452,"/** 
 * Begin the initial connection to the server.  Returns when the connection is established.
 */
public void initializeConnection() throws XMPPException {
  if (socket != null)   throw new RuntimeException(""String_Node_Str"");
  String host=config.getHost();
  int port=config.getPort();
  if (host == null) {
    DNSUtil.XMPPDomainLookup lookup=new DNSUtil.XMPPDomainLookup(config.getServiceName(),true);
    Vector<DNSUtil.HostAddress> addresses=lookup.run();
    if (discoveryIndex >= addresses.size())     throw new XMPPException(""String_Node_Str"" + addresses.size() + ""String_Node_Str"",XMPPError.Condition.remote_server_not_found);
    host=addresses.get(discoveryIndex).getHost();
    port=addresses.get(discoveryIndex).getPort();
  }
  try {
    socket=config.getSocketFactory().createSocket(host,port);
    initReaderAndWriter();
  }
 catch (  UnknownHostException e) {
    throw new XMPPException(""String_Node_Str"" + host + ""String_Node_Str""+ port,e);
  }
catch (  IOException e) {
    throw new XMPPException(""String_Node_Str"" + host + ""String_Node_Str""+ port,e);
  }
  while (true) {
    Element packet=readPacket();
    if (packet == null)     throw new XMPPException(""String_Node_Str"");
    try {
      if (processInitializationPacket(packet)) {
        continue;
      }
    }
 catch (    IOException e) {
      throw new XMPPException(""String_Node_Str"",e);
    }
    bufferedPacket=packet;
    config.setHost(host);
    config.setPort(port);
    startKeepAliveProcess();
    return;
  }
}","/** 
 * Begin the initial connection to the server.  Returns when the connection is established.
 */
public void initializeConnection() throws XMPPException {
  if (socket != null)   throw new RuntimeException(""String_Node_Str"");
  String host=config.getHost();
  int port=config.getPort();
  if (host == null) {
    DNSUtil.XMPPDomainLookup lookup=new DNSUtil.XMPPDomainLookup(config.getServiceName(),true);
    Vector<DNSUtil.HostAddress> addresses=lookup.run();
    if (discoveryIndex >= addresses.size())     throw new XMPPException(""String_Node_Str"" + addresses.size() + ""String_Node_Str"",XMPPError.Condition.remote_server_not_found);
    host=addresses.get(discoveryIndex).getHost();
    port=addresses.get(discoveryIndex).getPort();
  }
 else {
    if (discoveryIndex > 0)     throw new XMPPException(""String_Node_Str"",XMPPError.Condition.remote_server_not_found);
  }
  try {
    socket=config.getSocketFactory().createSocket(host,port);
    initReaderAndWriter();
  }
 catch (  UnknownHostException e) {
    throw new XMPPException(""String_Node_Str"" + host + ""String_Node_Str""+ port,e);
  }
catch (  IOException e) {
    throw new XMPPException(""String_Node_Str"" + host + ""String_Node_Str""+ port,e);
  }
  while (true) {
    Element packet=readPacket();
    if (packet == null)     throw new XMPPException(""String_Node_Str"");
    try {
      if (processInitializationPacket(packet)) {
        continue;
      }
    }
 catch (    IOException e) {
      throw new XMPPException(""String_Node_Str"",e);
    }
    bufferedPacket=packet;
    config.setHost(host);
    config.setPort(port);
    startKeepAliveProcess();
    return;
  }
}"
20453,"public void disconnect(Presence unavailablePresence){
  packetReader.assertNotInThread();
  if (!connected)   return;
  suppressConnectionErrors=true;
  shutdown(unavailablePresence);
  if (roster != null) {
    roster.cleanup();
    roster=null;
  }
  wasAuthenticated=false;
  suppressConnectionErrors=false;
  notifyConnectionClosed();
}","public void disconnect(Presence unavailablePresence){
  packetReader.assertNotInThread();
  boolean wasConnected;
synchronized (this) {
    wasConnected=connected;
    connected=false;
  }
  suppressConnectionErrors=true;
  shutdown(unavailablePresence);
  if (roster != null) {
    roster.cleanup();
    roster=null;
  }
  wasAuthenticated=false;
  suppressConnectionErrors=false;
  if (wasConnected)   notifyConnectionClosed();
}"
20454,"/** 
 * Establishes a connection to the XMPP server and performs an automatic login only if the previous connection state was logged (authenticated). It basically creates and maintains a socket connection to the server.<p> <p/> Listeners will be preserved from a previous connection if the reconnection occurs after an abrupt termination.
 * @throws XMPPException if an error occurs while trying to establish the connection.Two possible errors can occur which will be wrapped by an XMPPException -- UnknownHostException (XMPP error code 504), and IOException (XMPP error code 502). The error codes and wrapped exceptions can be used to present more appropiate error messages to end-users.
 */
public void connect() throws XMPPException {
  packetReader.assertNotInThread();
  connectUsingConfiguration();
  if (connected && wasAuthenticated) {
    try {
      if (isAnonymous()) {
        loginAnonymously();
      }
 else {
        login(config.getUsername(),config.getPassword(),config.getResource());
      }
      notifyReconnection();
    }
 catch (    XMPPException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Establishes a connection to the XMPP server and performs an automatic login only if the previous connection state was logged (authenticated). It basically creates and maintains a socket connection to the server.<p> <p/> Listeners will be preserved from a previous connection if the reconnection occurs after an abrupt termination.
 * @throws XMPPException if an error occurs while trying to establish the connection.Two possible errors can occur which will be wrapped by an XMPPException -- UnknownHostException (XMPP error code 504), and IOException (XMPP error code 502). The error codes and wrapped exceptions can be used to present more appropiate error messages to end-users.
 */
public void connect() throws XMPPException {
  packetReader.assertNotInThread();
  shutdown(null);
  connectUsingConfiguration();
  if (connected && wasAuthenticated) {
    try {
      if (isAnonymous()) {
        loginAnonymously();
      }
 else {
        login(config.getUsername(),config.getPassword(),config.getResource());
      }
      notifyReconnection();
    }
 catch (    XMPPException e) {
      e.printStackTrace();
    }
  }
}"
20455,"/** 
 * Closes the connection by setting presence to unavailable then closing the stream to the XMPP server. The shutdown logic will be used during a planned disconnection or when dealing with an unexpected disconnection. Unlike   {@link #disconnect()} the connection'spacket reader, packet writer, and  {@link Roster} will not be removed; thusconnection's state is kept.
 * @param unavailablePresence the presence packet to send during shutdown.
 */
protected void shutdown(Presence unavailablePresence){
  packetReader.assertNotInThread();
  if (unavailablePresence != null)   packetWriter.sendPacket(unavailablePresence);
  data_stream.disconnect();
  packetReader.shutdown();
  packetWriter.shutdown();
  data_stream=null;
  saslAuthentication.init();
  this.setWasAuthenticated(authenticated);
  authenticated=false;
  connected=false;
}","/** 
 * Closes the connection by setting presence to unavailable then closing the stream to the XMPP server. The shutdown logic will be used during a planned disconnection or when dealing with an unexpected disconnection. Unlike   {@link #disconnect()} the connection'spacket reader, packet writer, and  {@link Roster} will not be removed; thusconnection's state is kept.
 * @param unavailablePresence the presence packet to send during shutdown.
 */
protected void shutdown(Presence unavailablePresence){
  packetReader.assertNotInThread();
  if (unavailablePresence != null)   packetWriter.sendPacket(unavailablePresence);
  if (data_stream != null)   data_stream.disconnect();
  packetReader.shutdown();
  packetWriter.shutdown();
  data_stream=null;
  saslAuthentication.init();
  this.setWasAuthenticated(authenticated);
  authenticated=false;
  connected=false;
}"
20456,"/** 
 * Called by PacketReader when an error occurs after startup() returns successfully.
 * @param error the exception that caused the connection close event.
 */
protected void readerThreadException(Exception error){
synchronized (this) {
    if (suppressConnectionErrors)     return;
    suppressConnectionErrors=true;
  }
  new Exception(error).printStackTrace();
synchronized (this) {
    while (!readyForDisconnection) {
      try {
        this.wait();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
  this.data_stream.disconnect();
  notifyConnectionClosedOnError(error);
}","/** 
 * Called by PacketReader when an error occurs after startup() returns successfully.
 * @param error the exception that caused the connection close event.
 */
protected void readerThreadException(Exception error){
synchronized (this) {
    if (suppressConnectionErrors)     return;
    suppressConnectionErrors=true;
  }
  new Exception(error).printStackTrace();
  boolean wasConnected;
synchronized (this) {
    while (!readyForDisconnection) {
      try {
        this.wait();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
    wasConnected=connected;
    connected=false;
  }
  this.data_stream.disconnect();
  if (wasConnected)   notifyConnectionClosedOnError(error);
}"
20457,"/** 
 * Initialize the   {@link #debugger}. You can specify a customized   {@link SmackDebugger}by setup the system property <code>smack.debuggerClass</code> to the implementation.
 * @throws IllegalStateException if the reader or writer isn't yet initialized.
 * @throws IllegalArgumentException if the SmackDebugger can't be loaded.
 */
private void initDebugger(){
  if (debugger != null)   return;
  if (reader == null || writer == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Vector<String> debuggers=new Vector<String>();
  String requestedDebugger=null;
  try {
    requestedDebugger=System.getProperty(""String_Node_Str"");
    debuggers.add(requestedDebugger);
  }
 catch (  Throwable t) {
  }
  debuggers.add(""String_Node_Str"");
  debuggers.add(""String_Node_Str"");
  debuggers.add(""String_Node_Str"");
  for (  String debuggerName : debuggers) {
    try {
      Class<?> debuggerClass=Class.forName(debuggerName);
      Constructor<?> constructor=debuggerClass.getConstructor(Connection.class,ObservableWriter.class,ObservableReader.class);
      debugger=(SmackDebugger)constructor.newInstance(this,writer,reader);
    }
 catch (    Exception e) {
      if (requestedDebugger != null && requestedDebugger.equals(debuggerName))       e.printStackTrace();
      continue;
    }
  }
}","/** 
 * Initialize the   {@link #debugger}. You can specify a customized   {@link SmackDebugger}by setup the system property <code>smack.debuggerClass</code> to the implementation.
 * @throws IllegalStateException if the reader or writer isn't yet initialized.
 * @throws IllegalArgumentException if the SmackDebugger can't be loaded.
 */
private void initDebugger(){
  if (debugger != null)   return;
  if (reader == null || writer == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Vector<String> debuggers=new Vector<String>();
  String requestedDebugger=null;
  try {
    requestedDebugger=System.getProperty(""String_Node_Str"");
    debuggers.add(requestedDebugger);
  }
 catch (  Throwable t) {
  }
  debuggers.add(""String_Node_Str"");
  debuggers.add(""String_Node_Str"");
  debuggers.add(""String_Node_Str"");
  for (  String debuggerName : debuggers) {
    try {
      Class<?> debuggerClass=Class.forName(debuggerName);
      Constructor<?> constructor=debuggerClass.getConstructor(Connection.class,ObservableWriter.class,ObservableReader.class);
      debugger=(SmackDebugger)constructor.newInstance(this,writer,reader);
      break;
    }
 catch (    Exception e) {
      if (requestedDebugger != null && requestedDebugger.equals(debuggerName))       e.printStackTrace();
      continue;
    }
  }
}"
20458,"/** 
 * Sets the policy that determines who may associate children with the node.
 * @param policy The policy being set
 */
public void setChildrenAssociationPolicy(ChildrenAssociationPolicy policy){
  addField(ConfigureNodeFields.children_association_policy,FormField.TYPE_LIST_SINGLE);
  setAnswer(ConfigureNodeFields.children_association_policy.getFieldName(),policy.toString());
}","/** 
 * Sets the policy that determines who may associate children with the node.
 * @param policy The policy being set
 */
public void setChildrenAssociationPolicy(ChildrenAssociationPolicy policy){
  addField(ConfigureNodeFields.children_association_policy,FormField.TYPE_LIST_SINGLE);
  List<String> values=new ArrayList<String>(1);
  values.add(policy.toString());
  setAnswer(ConfigureNodeFields.children_association_policy.getFieldName(),values);
}"
20459,"public GetItemsRequest(String nodeId,String subscriptionId,int maxItems){
  super(PubSubElementType.ITEMS,nodeId);
  subId=subscriptionId;
}","public GetItemsRequest(String nodeId,String subscriptionId,int maxItemsToReturn){
  this(nodeId,maxItemsToReturn);
  subId=subscriptionId;
}"
20460,"/** 
 * The server has indicated that TLS negotiation can start. We now need to secure the existing plain connection and perform a handshake. This method won't return until the connection has finished the handshake or an error occured while securing the connection.
 * @throws Exception if an exception occurs.
 */
void proceedTLSReceived() throws Exception {
  SSLContext context=SSLContext.getInstance(""String_Node_Str"");
  KeyStore ks;
  KeyManager[] kms=null;
  PasswordCallback pcb=null;
  if (callbackHandler == null) {
    ks=null;
  }
 else {
    System.out.println(""String_Node_Str"" + configuration.getKeystoreType());
    if (configuration.getKeystoreType().equals(""String_Node_Str"")) {
      Provider p=new sun.security.pkcs11.SunPKCS11(configuration.getPKCSConfig());
      Security.addProvider(p);
      ks=KeyStore.getInstance(""String_Node_Str"",p);
      pcb=new PasswordCallback(""String_Node_Str"",false);
      callbackHandler.handle(new Callback[]{pcb});
      ks.load(null,pcb.getPassword());
    }
 else     if (configuration.getKeystoreType().equals(""String_Node_Str"")) {
      ks=KeyStore.getInstance(""String_Node_Str"",""String_Node_Str"");
      ks.load(null,null);
    }
 else {
      ks=KeyStore.getInstance(configuration.getKeystoreType());
      pcb=new PasswordCallback(""String_Node_Str"",false);
      callbackHandler.handle(new Callback[]{pcb});
      ks.load(new FileInputStream(configuration.getKeystorePath()),pcb.getPassword());
    }
    KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
    try {
      if (pcb == null) {
        kmf.init(ks,null);
      }
 else {
        kmf.init(ks,pcb.getPassword());
        pcb.clearPassword();
      }
      kms=kmf.getKeyManagers();
    }
 catch (    NullPointerException npe) {
      kms=null;
    }
  }
  context.init(kms,new javax.net.ssl.TrustManager[]{new ServerTrustManager(serviceName,configuration)},new java.security.SecureRandom());
  Socket plain=socket;
  socket=context.getSocketFactory().createSocket(plain,plain.getInetAddress().getHostName(),plain.getPort(),true);
  socket.setSoTimeout(0);
  socket.setKeepAlive(true);
  initReaderAndWriter();
  ((SSLSocket)socket).startHandshake();
  if (((SSLSocket)socket).getWantClientAuth()) {
    System.err.println(""String_Node_Str"");
  }
 else   if (((SSLSocket)socket).getNeedClientAuth()) {
    System.err.println(""String_Node_Str"");
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  usingTLS=true;
  packetWriter.setWriter(writer);
  packetWriter.openStream();
}","/** 
 * The server has indicated that TLS negotiation can start. We now need to secure the existing plain connection and perform a handshake. This method won't return until the connection has finished the handshake or an error occured while securing the connection.
 * @throws Exception if an exception occurs.
 */
void proceedTLSReceived() throws Exception {
  SSLContext context=SSLContext.getInstance(""String_Node_Str"");
  KeyStore ks=null;
  KeyManager[] kms=null;
  PasswordCallback pcb=null;
  if (callbackHandler == null) {
    ks=null;
  }
 else {
    System.out.println(""String_Node_Str"" + configuration.getKeystoreType());
    if (configuration.getKeystoreType().equals(""String_Node_Str"")) {
      ks=null;
      pcb=null;
    }
 else     if (configuration.getKeystoreType().equals(""String_Node_Str"")) {
      Provider p=new sun.security.pkcs11.SunPKCS11(configuration.getPKCSConfig());
      Security.addProvider(p);
      ks=KeyStore.getInstance(""String_Node_Str"",p);
      pcb=new PasswordCallback(""String_Node_Str"",false);
      callbackHandler.handle(new Callback[]{pcb});
      ks.load(null,pcb.getPassword());
    }
 else     if (configuration.getKeystoreType().equals(""String_Node_Str"")) {
      ks=KeyStore.getInstance(""String_Node_Str"",""String_Node_Str"");
      ks.load(null,null);
    }
 else {
      ks=KeyStore.getInstance(configuration.getKeystoreType());
      try {
        ks.load(new FileInputStream(configuration.getKeystorePath()),pcb.getPassword());
        pcb=new PasswordCallback(""String_Node_Str"",false);
        callbackHandler.handle(new Callback[]{pcb});
      }
 catch (      Exception e) {
        ks=null;
        pcb=null;
      }
    }
    KeyManagerFactory kmf=KeyManagerFactory.getInstance(""String_Node_Str"");
    try {
      if (pcb == null) {
        kmf.init(ks,null);
      }
 else {
        kmf.init(ks,pcb.getPassword());
        pcb.clearPassword();
      }
      kms=kmf.getKeyManagers();
    }
 catch (    NullPointerException npe) {
      kms=null;
    }
  }
  context.init(kms,new javax.net.ssl.TrustManager[]{new ServerTrustManager(serviceName,configuration)},new java.security.SecureRandom());
  Socket plain=socket;
  socket=context.getSocketFactory().createSocket(plain,plain.getInetAddress().getHostName(),plain.getPort(),true);
  socket.setSoTimeout(0);
  socket.setKeepAlive(true);
  initReaderAndWriter();
  ((SSLSocket)socket).startHandshake();
  if (((SSLSocket)socket).getWantClientAuth()) {
    System.err.println(""String_Node_Str"");
  }
 else   if (((SSLSocket)socket).getNeedClientAuth()) {
    System.err.println(""String_Node_Str"");
  }
 else {
    System.err.println(""String_Node_Str"");
  }
  usingTLS=true;
  packetWriter.setWriter(writer);
  packetWriter.openStream();
}"
20461,"private PayloadType.Audio calculateBestCommonAudioPt(List remoteAudioPts){
  final ArrayList commonAudioPtsHere=new ArrayList();
  final ArrayList commonAudioPtsThere=new ArrayList();
  PayloadType.Audio result=null;
  if (!remoteAudioPts.isEmpty()) {
    commonAudioPtsHere.addAll(localAudioPts);
    commonAudioPtsHere.retainAll(remoteAudioPts);
    commonAudioPtsThere.addAll(remoteAudioPts);
    commonAudioPtsThere.retainAll(localAudioPts);
    if (!commonAudioPtsHere.isEmpty() && !commonAudioPtsThere.isEmpty()) {
      PayloadType.Audio bestPtHere=(PayloadType.Audio)commonAudioPtsHere.get(0);
      PayloadType.Audio bestPtThere=(PayloadType.Audio)commonAudioPtsThere.get(0);
      if (bestPtHere.equals(bestPtThere)) {
        result=bestPtHere;
      }
 else {
        String initiator=session.getInitiator();
        String me=session.getConnection().getUser();
        if (initiator.equals(me)) {
          result=bestPtHere;
        }
 else {
          result=bestPtThere;
        }
      }
    }
  }
  return result;
}","private PayloadType.Audio calculateBestCommonAudioPt(List remoteAudioPts){
  final ArrayList<PayloadType> commonAudioPtsHere=new ArrayList<PayloadType>();
  final ArrayList<PayloadType> commonAudioPtsThere=new ArrayList<PayloadType>();
  PayloadType.Audio result=null;
  if (!remoteAudioPts.isEmpty()) {
    commonAudioPtsHere.addAll(localAudioPts);
    commonAudioPtsHere.retainAll(remoteAudioPts);
    commonAudioPtsThere.addAll(remoteAudioPts);
    commonAudioPtsThere.retainAll(localAudioPts);
    if (!commonAudioPtsHere.isEmpty() && !commonAudioPtsThere.isEmpty()) {
      PayloadType.Audio bestPtHere=null;
      if (bestPtHere == null)       for (      PayloadType payloadType : commonAudioPtsHere)       if (payloadType instanceof PayloadType.Audio) {
        bestPtHere=(PayloadType.Audio)payloadType;
        break;
      }
      PayloadType.Audio bestPtThere=null;
      for (      PayloadType payloadType : commonAudioPtsThere)       if (payloadType instanceof PayloadType.Audio) {
        bestPtThere=(PayloadType.Audio)payloadType;
        break;
      }
      if (session.getInitiator().equals(session.getConnection().getUser()))       result=bestPtHere;
 else       result=bestPtThere;
    }
  }
  return result;
}"
20462,"/** 
 * This is a full test in the Jingle API.
 */
public void testMediaManager(){
  resetCounter();
  try {
    XMPPConnection x0=getConnection(0);
    XMPPConnection x1=getConnection(1);
    final JingleManager jm0=new JingleManager(x0,new FixedResolver(""String_Node_Str"",20004));
    final JingleManager jm1=new JingleManager(x1,new FixedResolver(""String_Node_Str"",20040));
    JingleMediaManager jingleMediaManager=new JingleMediaManager(){
      public JingleMediaSession createMediaSession(      final PayloadType payloadType,      final TransportCandidate remote,      final TransportCandidate local){
        return new JingleMediaSession(payloadType,remote,local){
          public void initialize(){
          }
          public void startTrasmit(){
            incCounter();
            System.out.println(""String_Node_Str"");
          }
          public void startReceive(){
            incCounter();
            System.out.println(""String_Node_Str"");
          }
          public void setTrasmit(          boolean active){
          }
          public void stopTrasmit(){
            incCounter();
            System.out.println(""String_Node_Str"");
          }
          public void stopReceive(){
            incCounter();
            System.out.println(""String_Node_Str"");
          }
        }
;
      }
      public List<PayloadType> getPayloads(){
        return new ArrayList();
      }
      public PayloadType getPreferredPayloadType(){
        return null;
      }
    }
;
    jm0.setMediaManager(jingleMediaManager);
    jm1.setMediaManager(jingleMediaManager);
    jm1.addJingleSessionRequestListener(new JingleSessionRequestListener(){
      public void sessionRequested(      final JingleSessionRequest request){
        try {
          IncomingJingleSession session=request.accept(jm1.getMediaManager().getPayloads());
          session.start(request);
        }
 catch (        XMPPException e) {
          e.printStackTrace();
        }
      }
    }
);
    OutgoingJingleSession js0=jm0.createOutgoingJingleSession(x1.getUser());
    js0.start();
    Thread.sleep(10000);
    js0.terminate();
    Thread.sleep(3000);
    System.out.println(valCounter());
    assertTrue(valCounter() == 8);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * This is a full test in the Jingle API.
 */
public void testMediaManager(){
  resetCounter();
  try {
    XMPPConnection x0=getConnection(0);
    XMPPConnection x1=getConnection(1);
    final JingleManager jm0=new JingleManager(x0,new FixedResolver(""String_Node_Str"",20004));
    final JingleManager jm1=new JingleManager(x1,new FixedResolver(""String_Node_Str"",20040));
    JingleMediaManager jingleMediaManager=new JingleMediaManager(){
      public JingleMediaSession createMediaSession(      final PayloadType payloadType,      final TransportCandidate remote,      final TransportCandidate local){
        return new JingleMediaSession(payloadType,remote,local){
          public void initialize(){
          }
          public void startTrasmit(){
            incCounter();
            System.out.println(""String_Node_Str"");
          }
          public void startReceive(){
            incCounter();
            System.out.println(""String_Node_Str"");
          }
          public void setTrasmit(          boolean active){
          }
          public void stopTrasmit(){
            incCounter();
            System.out.println(""String_Node_Str"");
          }
          public void stopReceive(){
            incCounter();
            System.out.println(""String_Node_Str"");
          }
        }
;
      }
      public List<PayloadType> getPayloads(){
        return new ArrayList();
      }
      public PayloadType.Audio getPreferredAudioPayloadType(){
        return null;
      }
    }
;
    jm0.setMediaManager(jingleMediaManager);
    jm1.setMediaManager(jingleMediaManager);
    jm1.addJingleSessionRequestListener(new JingleSessionRequestListener(){
      public void sessionRequested(      final JingleSessionRequest request){
        try {
          IncomingJingleSession session=request.accept(jm1.getMediaManager().getPayloads());
          session.start(request);
        }
 catch (        XMPPException e) {
          e.printStackTrace();
        }
      }
    }
);
    OutgoingJingleSession js0=jm0.createOutgoingJingleSession(x1.getUser());
    js0.start();
    Thread.sleep(10000);
    js0.terminate();
    Thread.sleep(3000);
    System.out.println(valCounter());
    assertTrue(valCounter() == 8);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
20463,"public void testCompleteMulti(){
  try {
    XMPPConnection x0=getConnection(0);
    XMPPConnection x1=getConnection(1);
    ICETransportManager icetm0=new ICETransportManager(x0,""String_Node_Str"",3478);
    ICETransportManager icetm1=new ICETransportManager(x1,""String_Node_Str"",3478);
    final JingleManager jm0=new JingleManager(x0,icetm0);
    final JingleManager jm1=new JingleManager(x1,icetm1);
    jm0.addCreationListener(icetm0);
    jm1.addCreationListener(icetm1);
    MultiMediaManager jingleMediaManager0=new MultiMediaManager();
    jingleMediaManager0.addMediaManager(new SpeexMediaManager());
    jingleMediaManager0.addMediaManager(new JmfMediaManager());
    JingleMediaManager jingleMediaManager1=new JmfMediaManager();
    jm0.setMediaManager(jingleMediaManager0);
    jm1.setMediaManager(jingleMediaManager1);
    jm1.addJingleSessionRequestListener(new JingleSessionRequestListener(){
      public void sessionRequested(      final JingleSessionRequest request){
        try {
          IncomingJingleSession session=request.accept(jm1.getMediaManager().getPayloads());
          session.start(request);
        }
 catch (        XMPPException e) {
          e.printStackTrace();
        }
      }
    }
);
    OutgoingJingleSession js0=jm0.createOutgoingJingleSession(x1.getUser());
    js0.start();
    Thread.sleep(60000);
    js0.terminate();
    Thread.sleep(6000);
    x0.disconnect();
    x1.disconnect();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void testCompleteMulti(){
  try {
    XMPPConnection x0=getConnection(0);
    XMPPConnection x1=getConnection(1);
    final JingleManager jm0=new JingleManager(x0,new BasicTransportManager());
    final JingleManager jm1=new JingleManager(x1,new BasicTransportManager());
    MultiMediaManager jingleMediaManager0=new MultiMediaManager();
    jingleMediaManager0.addMediaManager(new SpeexMediaManager());
    jingleMediaManager0.addMediaManager(new JmfMediaManager());
    jingleMediaManager0.addMediaManager(new JmfMediaManager());
    MultiMediaManager jingleMediaManager1=new MultiMediaManager();
    jingleMediaManager1.addMediaManager(new JmfMediaManager());
    jingleMediaManager1.addMediaManager(new SpeexMediaManager());
    jm0.setMediaManager(jingleMediaManager0);
    jm1.setMediaManager(jingleMediaManager1);
    jm1.addJingleSessionRequestListener(new JingleSessionRequestListener(){
      public void sessionRequested(      final JingleSessionRequest request){
        try {
          IncomingJingleSession session=request.accept(jm1.getMediaManager().getPayloads());
          session.start(request);
        }
 catch (        XMPPException e) {
          e.printStackTrace();
        }
      }
    }
);
    OutgoingJingleSession js0=jm0.createOutgoingJingleSession(x1.getUser());
    js0.start();
    Thread.sleep(60000);
    js0.terminate();
    Thread.sleep(6000);
    x0.disconnect();
    x1.disconnect();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
20464,"public void presenceChanged(Presence presence){
  String xmppAddress=presence.getFrom();
  JingleSession aux=null;
  for (  JingleSession jingleSession : jingleSessions) {
    if (jingleSession.getInitiator().equals(xmppAddress) || jingleSession.getResponder().equals(xmppAddress)) {
      aux=jingleSession;
    }
  }
  if (aux != null)   try {
    aux.terminate();
  }
 catch (  XMPPException e) {
    e.printStackTrace();
  }
}","public void presenceChanged(Presence presence){
  if (!presence.isAvailable()) {
    String xmppAddress=presence.getFrom();
    JingleSession aux=null;
    for (    JingleSession jingleSession : jingleSessions) {
      if (jingleSession.getInitiator().equals(xmppAddress) || jingleSession.getResponder().equals(xmppAddress)) {
        aux=jingleSession;
      }
    }
    if (aux != null)     try {
      aux.terminate();
    }
 catch (    XMPPException e) {
      e.printStackTrace();
    }
  }
}"
20465,"/** 
 * Returns an array of class loaders to load resources from.
 * @return an array of ClassLoader instances.
 */
private static ClassLoader[] getClassLoaders(){
  ClassLoader[] classLoaders=new ClassLoader[2];
  classLoaders[0]=SmackConfiguration.class.getClassLoader();
  classLoaders[1]=Thread.currentThread().getContextClassLoader();
  return classLoaders;
}","/** 
 * Returns an array of class loaders to load resources from.
 * @return an array of ClassLoader instances.
 */
private static ClassLoader[] getClassLoaders(){
  ClassLoader[] classLoaders=new ClassLoader[2];
  classLoaders[0]=SmackConfiguration.class.getClassLoader();
  classLoaders[1]=Thread.currentThread().getContextClassLoader();
  List<ClassLoader> loaders=new ArrayList<ClassLoader>();
  for (  ClassLoader classLoader : classLoaders) {
    if (classLoader != null) {
      loaders.add(classLoader);
    }
  }
  return (ClassLoader[])loaders.toArray();
}"
20466,"/** 
 * Returns an array of class loaders to load resources from.
 * @return an array of ClassLoader instances.
 */
private static ClassLoader[] getClassLoaders(){
  ClassLoader[] classLoaders=new ClassLoader[2];
  classLoaders[0]=ProviderManager.class.getClassLoader();
  classLoaders[1]=Thread.currentThread().getContextClassLoader();
  return classLoaders;
}","/** 
 * Returns an array of class loaders to load resources from.
 * @return an array of ClassLoader instances.
 */
private static ClassLoader[] getClassLoaders(){
  ClassLoader[] classLoaders=new ClassLoader[2];
  classLoaders[0]=ProviderManager.class.getClassLoader();
  classLoaders[1]=Thread.currentThread().getContextClassLoader();
  List<ClassLoader> loaders=new ArrayList<ClassLoader>();
  for (  ClassLoader classLoader : classLoaders) {
    if (classLoader != null) {
      loaders.add(classLoader);
    }
  }
  return (ClassLoader[])loaders.toArray();
}"
20467,"/** 
 * Parses error sub-packets.
 * @param parser the XML parser.
 * @return an error sub-packet.
 * @throws Exception if an exception occurs while parsing the packet.
 */
public static XMPPError parseError(XmlPullParser parser) throws Exception {
  final String errorNamespace=""String_Node_Str"";
  String errorCode=""String_Node_Str"";
  String type=null;
  String message=null;
  String condition=null;
  List<PacketExtension> extensions=new ArrayList<PacketExtension>();
  for (int i=0; i < parser.getAttributeCount(); i++) {
    if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
      errorCode=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
      type=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
  boolean done=false;
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        parser.next();
        message=parser.getText();
        parser.next();
      }
 else {
        String elementName=parser.getName();
        String namespace=parser.getNamespace();
        if (errorNamespace.equals(namespace)) {
          condition=elementName;
        }
 else {
          extensions.add(parsePacketExtension(elementName,namespace,parser));
        }
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return new XMPPError(Integer.parseInt(errorCode),XMPPError.Type.fromString(type),condition,message,extensions);
}","/** 
 * Parses error sub-packets.
 * @param parser the XML parser.
 * @return an error sub-packet.
 * @throws Exception if an exception occurs while parsing the packet.
 */
public static XMPPError parseError(XmlPullParser parser) throws Exception {
  final String errorNamespace=""String_Node_Str"";
  String errorCode=""String_Node_Str"";
  String type=null;
  String message=null;
  String condition=null;
  List<PacketExtension> extensions=new ArrayList<PacketExtension>();
  for (int i=0; i < parser.getAttributeCount(); i++) {
    if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
      errorCode=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
      type=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
  boolean done=false;
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        message=parser.nextText();
      }
 else {
        String elementName=parser.getName();
        String namespace=parser.getNamespace();
        if (errorNamespace.equals(namespace)) {
          condition=elementName;
        }
 else {
          extensions.add(parsePacketExtension(elementName,namespace,parser));
        }
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return new XMPPError(Integer.parseInt(errorCode),XMPPError.Type.fromString(type),condition,message,extensions);
}"
20468,"/** 
 * Returns an array of class loaders to load resources from.
 * @return an array of ClassLoader instances.
 */
private static ClassLoader[] getClassLoaders(){
  ClassLoader[] classLoaders=new ClassLoader[2];
  classLoaders[0]=SmackConfiguration.class.getClassLoader();
  classLoaders[1]=Thread.currentThread().getContextClassLoader();
  List<ClassLoader> loaders=new ArrayList<ClassLoader>();
  for (  ClassLoader classLoader : classLoaders) {
    if (classLoader != null) {
      loaders.add(classLoader);
    }
  }
  return (ClassLoader[])loaders.toArray();
}","/** 
 * Returns an array of class loaders to load resources from.
 * @return an array of ClassLoader instances.
 */
private static ClassLoader[] getClassLoaders(){
  ClassLoader[] classLoaders=new ClassLoader[2];
  classLoaders[0]=SmackConfiguration.class.getClassLoader();
  classLoaders[1]=Thread.currentThread().getContextClassLoader();
  List<ClassLoader> loaders=new ArrayList<ClassLoader>();
  for (  ClassLoader classLoader : classLoaders) {
    if (classLoader != null) {
      loaders.add(classLoader);
    }
  }
  return loaders.toArray(new ClassLoader[loaders.size()]);
}"
20469,"/** 
 * Returns an array of class loaders to load resources from.
 * @return an array of ClassLoader instances.
 */
private static ClassLoader[] getClassLoaders(){
  ClassLoader[] classLoaders=new ClassLoader[2];
  classLoaders[0]=ProviderManager.class.getClassLoader();
  classLoaders[1]=Thread.currentThread().getContextClassLoader();
  List<ClassLoader> loaders=new ArrayList<ClassLoader>();
  for (  ClassLoader classLoader : classLoaders) {
    if (classLoader != null) {
      loaders.add(classLoader);
    }
  }
  return (ClassLoader[])loaders.toArray();
}","/** 
 * Returns an array of class loaders to load resources from.
 * @return an array of ClassLoader instances.
 */
private static ClassLoader[] getClassLoaders(){
  ClassLoader[] classLoaders=new ClassLoader[2];
  classLoaders[0]=ProviderManager.class.getClassLoader();
  classLoaders[1]=Thread.currentThread().getContextClassLoader();
  List<ClassLoader> loaders=new ArrayList<ClassLoader>();
  for (  ClassLoader classLoader : classLoaders) {
    if (classLoader != null) {
      loaders.add(classLoader);
    }
  }
  return loaders.toArray(new ClassLoader[loaders.size()]);
}"
20470,"/** 
 * Parses a XHTMLExtension packet (extension sub-packet).
 * @param parser the XML parser, positioned at the starting element of the extension.
 * @return a PacketExtension.
 * @throws Exception if a parsing error occurs.
 */
public PacketExtension parseExtension(XmlPullParser parser) throws Exception {
  XHTMLExtension xhtmlExtension=new XHTMLExtension();
  boolean done=false;
  StringBuffer buffer=new StringBuffer();
  ;
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str""))       buffer=new StringBuffer();
      buffer.append(parser.getText());
    }
 else     if (eventType == XmlPullParser.TEXT) {
      if (buffer != null)       buffer.append(parser.getText());
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        buffer.append(parser.getText());
        xhtmlExtension.addBody(buffer.toString());
      }
 else       if (parser.getName().equals(xhtmlExtension.getElementName())) {
        done=true;
      }
 else       buffer.append(parser.getText());
    }
  }
  return xhtmlExtension;
}","/** 
 * Parses a XHTMLExtension packet (extension sub-packet).
 * @param parser the XML parser, positioned at the starting element of the extension.
 * @return a PacketExtension.
 * @throws Exception if a parsing error occurs.
 */
public PacketExtension parseExtension(XmlPullParser parser) throws Exception {
  XHTMLExtension xhtmlExtension=new XHTMLExtension();
  boolean done=false;
  StringBuffer buffer=new StringBuffer();
  int startDepth=parser.getDepth();
  int depth=parser.getDepth();
  String lastTag=""String_Node_Str"";
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        buffer=new StringBuffer();
        depth=parser.getDepth();
      }
      lastTag=parser.getText();
      buffer.append(parser.getText());
    }
 else     if (eventType == XmlPullParser.TEXT) {
      if (buffer != null) {
        buffer.append(StringUtils.escapeForXML(parser.getText()));
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"") || parser.getDepth() <= depth) {
        buffer.append(parser.getText());
        xhtmlExtension.addBody(buffer.toString());
      }
 else       if (parser.getName().equals(xhtmlExtension.getElementName()) || parser.getDepth() <= startDepth) {
        done=true;
      }
 else {
        if (!lastTag.equals(parser.getText())) {
          buffer.append(parser.getText());
        }
      }
    }
  }
  return xhtmlExtension;
}"
20471,"public void run(){
  while (!done) {
synchronized (writer) {
      try {
        writer.write(""String_Node_Str"");
        writer.flush();
      }
 catch (      Exception e) {
      }
    }
    try {
      Thread.sleep(delay);
    }
 catch (    InterruptedException ie) {
    }
  }
}","public void run(){
  try {
    Thread.sleep(15000);
  }
 catch (  InterruptedException ie) {
  }
  while (!done) {
synchronized (writer) {
      try {
        writer.write(""String_Node_Str"");
        writer.flush();
      }
 catch (      Exception e) {
      }
    }
    try {
      Thread.sleep(delay);
    }
 catch (    InterruptedException ie) {
    }
  }
}"
20472,"private static BookmarkedConference getConferenceStorage(XmlPullParser parser) throws Exception {
  BookmarkedConference conf=new BookmarkedConference();
  String name=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String autojoin=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String jid=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  conf.setName(name);
  conf.setAutoJoin(Boolean.parseBoolean(autojoin));
  conf.setJid(jid);
  boolean done=false;
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG && ""String_Node_Str"".equals(parser.getName())) {
      conf.setNickname(parser.nextText());
    }
 else     if (eventType == XmlPullParser.START_TAG && ""String_Node_Str"".equals(parser.getName())) {
      conf.setPassword(parser.nextText());
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (""String_Node_Str"".equals(parser.getName())) {
        done=true;
      }
    }
  }
  return conf;
}","private static BookmarkedConference getConferenceStorage(XmlPullParser parser) throws Exception {
  BookmarkedConference conf=new BookmarkedConference();
  String name=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String autojoin=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String jid=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  conf.setName(name);
  conf.setAutoJoin(Boolean.valueOf(autojoin).booleanValue());
  conf.setJid(jid);
  boolean done=false;
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG && ""String_Node_Str"".equals(parser.getName())) {
      conf.setNickname(parser.nextText());
    }
 else     if (eventType == XmlPullParser.START_TAG && ""String_Node_Str"".equals(parser.getName())) {
      conf.setPassword(parser.nextText());
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (""String_Node_Str"".equals(parser.getName())) {
        done=true;
      }
    }
  }
  return conf;
}"
20473,"public String toXML(){
  StringBuffer buf=new StringBuffer();
  buf.append(""String_Node_Str"").append(getElementName()).append(""String_Node_Str"").append(getNamespace()).append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(UTC_FORMAT.format(stamp)).append(""String_Node_Str"");
  if (from != null && from.length() > 0) {
    buf.append(""String_Node_Str"").append(from).append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  if (reason != null && reason.length() > 0) {
    buf.append(reason);
  }
  buf.append(""String_Node_Str"").append(getElementName()).append(""String_Node_Str"");
  return buf.toString();
}","public String toXML(){
  StringBuffer buf=new StringBuffer();
  buf.append(""String_Node_Str"").append(getElementName()).append(""String_Node_Str"").append(getNamespace()).append(""String_Node_Str"");
  buf.append(""String_Node_Str"");
synchronized (UTC_FORMAT) {
    buf.append(UTC_FORMAT.format(stamp));
  }
  buf.append(""String_Node_Str"");
  if (from != null && from.length() > 0) {
    buf.append(""String_Node_Str"").append(from).append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  if (reason != null && reason.length() > 0) {
    buf.append(reason);
  }
  buf.append(""String_Node_Str"").append(getElementName()).append(""String_Node_Str"");
  return buf.toString();
}"
20474,"public PacketExtension parseExtension(XmlPullParser parser) throws Exception {
  Date stamp=null;
  try {
    stamp=DelayInformation.UTC_FORMAT.parse(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  ParseException e) {
    try {
      stamp=DelayInformation.NEW_UTC_FORMAT.parse(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    ParseException e1) {
      SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
      formatter.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
      stamp=formatter.parse(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
    }
  }
  DelayInformation delayInformation=new DelayInformation(stamp);
  delayInformation.setFrom(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  delayInformation.setReason(parser.nextText());
  return delayInformation;
}","public PacketExtension parseExtension(XmlPullParser parser) throws Exception {
  Date stamp=null;
  try {
synchronized (DelayInformation.UTC_FORMAT) {
      stamp=DelayInformation.UTC_FORMAT.parse(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
    }
  }
 catch (  ParseException e) {
    try {
synchronized (DelayInformation.NEW_UTC_FORMAT) {
        stamp=DelayInformation.NEW_UTC_FORMAT.parse(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
      }
    }
 catch (    ParseException e1) {
      SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
      formatter.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
      stamp=formatter.parse(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
    }
  }
  DelayInformation delayInformation=new DelayInformation(stamp);
  delayInformation.setFrom(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  delayInformation.setReason(parser.nextText());
  return delayInformation;
}"
20475,"/** 
 * Set generic VCard field.
 * @param field value of field. Possible values: NICKNAME, PHOTO, BDAY, JABBERID, MAILER, TZ,GEO, TITLE, ROLE, LOGO, NOTE, PRODID, REV, SORT-STRING, SOUND, UID, URL, DESC.
 */
public String getField(String field){
  return (String)otherSimpleFields.get(field);
}","/** 
 * Set generic VCard field.
 * @param field value of field. Possible values: FN, NICKNAME, PHOTO, BDAY, JABBERID, MAILER, TZ,GEO, TITLE, ROLE, LOGO, NOTE, PRODID, REV, SORT-STRING, SOUND, UID, URL, DESC.
 */
public String getField(String field){
  if (""String_Node_Str"".equals(field)) {
    return buildFullName();
  }
  return (String)otherSimpleFields.get(field);
}"
20476,"private void buildActualContent(){
  if (hasNameField()) {
    appendFN();
    appendN();
  }
  appendOrganization();
  appendGenericFields();
  appendEmail(emailWork,""String_Node_Str"");
  appendEmail(emailHome,""String_Node_Str"");
  appendPhones(workPhones,""String_Node_Str"");
  appendPhones(homePhones,""String_Node_Str"");
  appendAddress(workAddr,""String_Node_Str"");
  appendAddress(homeAddr,""String_Node_Str"");
}","private void buildActualContent(){
  if (hasNameField()) {
    appendTag(""String_Node_Str"",getFullName());
    appendN();
  }
  appendOrganization();
  appendGenericFields();
  appendEmail(emailWork,""String_Node_Str"");
  appendEmail(emailHome,""String_Node_Str"");
  appendPhones(workPhones,""String_Node_Str"");
  appendPhones(homePhones,""String_Node_Str"");
  appendAddress(workAddr,""String_Node_Str"");
  appendAddress(homeAddr,""String_Node_Str"");
}"
20477,"private boolean hasNameField(){
  return firstName != null || lastName != null || middleName != null;
}","private boolean hasNameField(){
  return firstName != null || lastName != null || middleName != null || otherSimpleFields.containsKey(""String_Node_Str"");
}"
20478,"private void appendGenericFields(){
  Iterator it=otherSimpleFields.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    appendTag(entry.getKey().toString(),(String)entry.getValue());
  }
}","private void appendGenericFields(){
  Iterator it=otherSimpleFields.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    String tag=entry.getKey().toString();
    if (""String_Node_Str"".equals(tag))     continue;
    appendTag(tag,(String)entry.getValue());
  }
}"
20479,"private void setupEmails(){
  NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < nodes.getLength(); i++) {
    Element element=(Element)nodes.item(i);
    if (""String_Node_Str"".equals(element.getParentNode().getFirstChild().getNodeName())) {
      vCard.setEmailWork(getTextContent(element));
    }
 else {
      vCard.setEmailHome(getTextContent(element));
    }
  }
}","private void setupEmails(){
  NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
  if (nodes == null)   return;
  for (int i=0; i < nodes.getLength(); i++) {
    Element element=(Element)nodes.item(i);
    if (""String_Node_Str"".equals(element.getParentNode().getFirstChild().getNodeName())) {
      vCard.setEmailHome(getTextContent(element));
    }
 else {
      vCard.setEmailWork(getTextContent(element));
    }
  }
}"
20480,"private String getTagContents(String tag){
  NodeList nodes=document.getElementsByTagName(tag);
  if (nodes.getLength() == 1) {
    return getTextContent(nodes.item(0));
  }
  return null;
}","private String getTagContents(String tag){
  NodeList nodes=document.getElementsByTagName(tag);
  if (nodes != null && nodes.getLength() == 1) {
    return getTextContent(nodes.item(0));
  }
  return null;
}"
20481,"public IQ parseIQ(XmlPullParser parser) throws Exception {
  StringBuffer sb=new StringBuffer();
  try {
    int event=parser.getEventType();
    while (true) {
switch (event) {
case XmlPullParser.TEXT:
        sb.append(parser.getText());
      break;
case XmlPullParser.START_TAG:
    sb.append('<' + parser.getName() + '>');
  break;
case XmlPullParser.END_TAG:
sb.append(""String_Node_Str"" + parser.getName() + '>');
break;
default :
}
if (event == XmlPullParser.END_TAG && ""String_Node_Str"".equals(parser.getName())) break;
event=parser.next();
}
}
 catch (XmlPullParserException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
String xmlText=sb.toString();
VCard vCard=new VCard();
try {
DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
Document document=documentBuilder.parse(new ByteArrayInputStream(xmlText.getBytes()));
new VCardReader(vCard,document).initializeFields();
}
 catch (Exception e) {
e.printStackTrace(System.err);
}
return vCard;
}","public IQ parseIQ(XmlPullParser parser) throws Exception {
  StringBuffer sb=new StringBuffer();
  try {
    int event=parser.getEventType();
    while (true) {
switch (event) {
case XmlPullParser.TEXT:
        sb.append(parser.getText());
      break;
case XmlPullParser.START_TAG:
    sb.append('<').append(parser.getName()).append('>');
  break;
case XmlPullParser.END_TAG:
sb.append(""String_Node_Str"").append(parser.getName()).append('>');
break;
default :
}
if (event == XmlPullParser.END_TAG && ""String_Node_Str"".equals(parser.getName())) break;
event=parser.next();
}
}
 catch (XmlPullParserException e) {
e.printStackTrace();
}
catch (IOException e) {
e.printStackTrace();
}
String xmlText=sb.toString();
return _createVCardFromXml(xmlText);
}"
20482,"private void setupSimpleFields(){
  NodeList childNodes=document.getDocumentElement().getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node node=childNodes.item(i);
    if (node instanceof Element) {
      Element element=(Element)node;
      if (""String_Node_Str"".equals(element.getNodeName()))       continue;
      if (element.getChildNodes().getLength() == 0) {
        vCard.setField(element.getNodeName(),""String_Node_Str"");
      }
 else       if (element.getChildNodes().getLength() == 1 && element.getChildNodes().item(0) instanceof Text) {
        vCard.setField(element.getNodeName(),getTextContent(element));
      }
    }
  }
}","private void setupSimpleFields(){
  NodeList childNodes=document.getDocumentElement().getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node node=childNodes.item(i);
    if (node instanceof Element) {
      Element element=(Element)node;
      String field=element.getNodeName();
      if (element.getChildNodes().getLength() == 0) {
        vCard.setField(field,""String_Node_Str"");
      }
 else       if (element.getChildNodes().getLength() == 1 && element.getChildNodes().item(0) instanceof Text) {
        vCard.setField(field,getTextContent(element));
      }
    }
  }
}"
20483,"public void initializeFields(){
  vCard.setFirstName(getTagContents(""String_Node_Str""));
  vCard.setLastName(getTagContents(""String_Node_Str""));
  vCard.setMiddleName(getTagContents(""String_Node_Str""));
  vCard.setEncodedImage(getTagContents(""String_Node_Str""));
  setupEmails();
  vCard.setOrganization(getTagContents(""String_Node_Str""));
  vCard.setOrganizationUnit(getTagContents(""String_Node_Str""));
  setupSimpleFields();
  setupPhones(""String_Node_Str"",true);
  setupPhones(""String_Node_Str"",false);
  setupAddress(""String_Node_Str"",true);
  setupAddress(""String_Node_Str"",false);
}","public void initializeFields(){
  vCard.setFirstName(getTagContents(""String_Node_Str""));
  vCard.setLastName(getTagContents(""String_Node_Str""));
  vCard.setMiddleName(getTagContents(""String_Node_Str""));
  vCard.setEncodedImage(getTagContents(""String_Node_Str""));
  setupEmails();
  vCard.setOrganization(getTagContents(""String_Node_Str""));
  vCard.setOrganizationUnit(getTagContents(""String_Node_Str""));
  setupSimpleFields();
  setupPhones();
  setupAddresses();
}"
20484,"private void setupPhones(String type,boolean work){
  NodeList allPhones=document.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < allPhones.getLength(); i++) {
    Element node=(Element)allPhones.item(i);
    if (type.equals(node.getChildNodes().item(1).getNodeName())) {
      String code=node.getFirstChild().getNodeName();
      String value=getTextContent(node.getChildNodes().item(2));
      if (work) {
        vCard.setPhoneWork(code,value);
      }
 else {
        vCard.setPhoneHome(code,value);
      }
    }
  }
}","private void setupPhones(){
  NodeList allPhones=document.getElementsByTagName(""String_Node_Str"");
  if (allPhones == null)   return;
  for (int i=0; i < allPhones.getLength(); i++) {
    NodeList nodes=allPhones.item(i).getChildNodes();
    String type=null;
    String code=null;
    String value=null;
    for (int j=0; j < nodes.getLength(); j++) {
      Node node=nodes.item(j);
      if (node.getNodeType() != Node.ELEMENT_NODE)       continue;
      String nodeName=node.getNodeName();
      if (""String_Node_Str"".equals(nodeName)) {
        value=getTextContent(node);
      }
 else       if (isWorkHome(nodeName)) {
        type=nodeName;
      }
 else {
        code=nodeName;
      }
    }
    if (code == null || value == null)     continue;
    if (""String_Node_Str"".equals(type)) {
      vCard.setPhoneHome(code,value);
    }
 else {
      vCard.setPhoneWork(code,value);
    }
  }
}"
20485,"public void testBigFunctional() throws XMPPException {
  VCard origVCard=new VCard();
  origVCard.setFirstName(""String_Node_Str"");
  origVCard.setLastName(""String_Node_Str"");
  origVCard.setEmailHome(""String_Node_Str"");
  origVCard.setJabberId(""String_Node_Str"");
  origVCard.setOrganization(""String_Node_Str"");
  origVCard.setNickName(""String_Node_Str"");
  origVCard.setField(""String_Node_Str"",""String_Node_Str"");
  origVCard.setAddressFieldHome(""String_Node_Str"",""String_Node_Str"");
  origVCard.setPhoneWork(""String_Node_Str"",""String_Node_Str"");
  origVCard.save(getConnection(0));
  VCard loaded=new VCard();
  try {
    loaded.load(getConnection(0));
  }
 catch (  XMPPException e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  assertEquals(""String_Node_Str"",origVCard,loaded);
  loaded=new VCard();
  try {
    loaded.load(getConnection(1),getBareJID(0));
  }
 catch (  XMPPException e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  assertEquals(""String_Node_Str"",origVCard,loaded);
}","public void testBigFunctional() throws XMPPException {
  VCard origVCard=new VCard();
  origVCard.setFirstName(""String_Node_Str"");
  origVCard.setLastName(""String_Node_Str"");
  origVCard.setEmailHome(""String_Node_Str"");
  origVCard.setEmailWork(""String_Node_Str"");
  origVCard.setJabberId(""String_Node_Str"");
  origVCard.setOrganization(""String_Node_Str"");
  origVCard.setNickName(""String_Node_Str"");
  origVCard.setField(""String_Node_Str"",""String_Node_Str"");
  origVCard.setAddressFieldHome(""String_Node_Str"",""String_Node_Str"");
  origVCard.setAddressFieldWork(""String_Node_Str"",""String_Node_Str"");
  origVCard.setPhoneWork(""String_Node_Str"",""String_Node_Str"");
  origVCard.setPhoneHome(""String_Node_Str"",""String_Node_Str"");
  origVCard.save(getConnection(0));
  VCard loaded=new VCard();
  try {
    loaded.load(getConnection(0));
  }
 catch (  XMPPException e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  assertEquals(""String_Node_Str"",origVCard.toString(),loaded.toString());
  loaded=new VCard();
  try {
    loaded.load(getConnection(1),getBareJID(0));
  }
 catch (  XMPPException e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  assertEquals(""String_Node_Str"",origVCard.toString(),loaded.toString());
}"
20486,"public void processPacket(Packet packet){
  RosterPacket rosterPacket=(RosterPacket)packet;
  for (Iterator i=rosterPacket.getRosterItems(); i.hasNext(); ) {
    RosterPacket.Item item=(RosterPacket.Item)i.next();
    RosterEntry entry=new RosterEntry(item.getUser(),item.getName(),item.getItemType(),connection);
    if (RosterPacket.ItemType.REMOVE.equals(item.getItemType())) {
      if (entries.contains(entry)) {
        entries.remove(entry);
      }
synchronized (unfiledEntries) {
        if (unfiledEntries.contains(entry)) {
          unfiledEntries.remove(entry);
        }
      }
      String key=StringUtils.parseName(item.getUser()) + ""String_Node_Str"" + StringUtils.parseServer(item.getUser());
      presenceMap.remove(key);
    }
 else {
      if (!entries.contains(entry)) {
        entries.add(entry);
      }
 else {
        RosterEntry existingEntry=(RosterEntry)entries.get(entries.indexOf(entry));
        existingEntry.updateState(entry.getName(),entry.getType());
      }
      if (item.getGroupNames().hasNext()) {
synchronized (unfiledEntries) {
          unfiledEntries.remove(entry);
        }
      }
 else {
synchronized (unfiledEntries) {
          if (!unfiledEntries.contains(entry)) {
            unfiledEntries.add(entry);
          }
        }
      }
    }
    List currentGroupNames=new ArrayList();
    for (Iterator j=entry.getGroups(); j.hasNext(); ) {
      RosterGroup group=(RosterGroup)j.next();
      currentGroupNames.add(group.getName());
    }
    if (!RosterPacket.ItemType.REMOVE.equals(item.getItemType())) {
      List newGroupNames=new ArrayList();
      for (Iterator k=item.getGroupNames(); k.hasNext(); ) {
        String groupName=(String)k.next();
        newGroupNames.add(groupName);
        RosterGroup group=getGroup(groupName);
        if (group == null) {
          group=createGroup(groupName);
          groups.put(groupName,group);
        }
        group.addEntryLocal(entry);
      }
      for (int m=0; m < newGroupNames.size(); m++) {
        currentGroupNames.remove(newGroupNames.get(m));
      }
    }
    for (int n=0; n < currentGroupNames.size(); n++) {
      String groupName=(String)currentGroupNames.get(n);
      RosterGroup group=getGroup(groupName);
      group.removeEntryLocal(entry);
      if (group.getEntryCount() == 0) {
synchronized (groups) {
          groups.remove(groupName);
        }
      }
    }
    for (Iterator it=getGroups(); it.hasNext(); ) {
      RosterGroup group=(RosterGroup)it.next();
      if (group.getEntryCount() == 0) {
synchronized (groups) {
          groups.remove(group.getName());
        }
      }
    }
  }
synchronized (this) {
    rosterInitialized=true;
    notifyAll();
  }
  fireRosterChangedEvent();
}","public void processPacket(Packet packet){
  RosterPacket rosterPacket=(RosterPacket)packet;
  for (Iterator i=rosterPacket.getRosterItems(); i.hasNext(); ) {
    RosterPacket.Item item=(RosterPacket.Item)i.next();
    RosterEntry entry=new RosterEntry(item.getUser(),item.getName(),item.getItemType(),connection);
    if (RosterPacket.ItemType.REMOVE.equals(item.getItemType())) {
      if (entries.contains(entry)) {
        entries.remove(entry);
      }
synchronized (unfiledEntries) {
        if (unfiledEntries.contains(entry)) {
          unfiledEntries.remove(entry);
        }
      }
      String key=StringUtils.parseName(item.getUser()) + ""String_Node_Str"" + StringUtils.parseServer(item.getUser());
      presenceMap.remove(key);
    }
 else {
      if (!entries.contains(entry)) {
        entries.add(entry);
      }
 else {
        RosterEntry existingEntry=(RosterEntry)entries.get(entries.indexOf(entry));
        existingEntry.updateState(entry.getName(),entry.getType());
      }
      if (item.getGroupNames().hasNext()) {
synchronized (unfiledEntries) {
          unfiledEntries.remove(entry);
        }
      }
 else {
synchronized (unfiledEntries) {
          if (!unfiledEntries.contains(entry)) {
            unfiledEntries.add(entry);
          }
        }
      }
    }
    List currentGroupNames=new ArrayList();
    for (Iterator j=entry.getGroups(); j.hasNext(); ) {
      RosterGroup group=(RosterGroup)j.next();
      currentGroupNames.add(group.getName());
    }
    if (!RosterPacket.ItemType.REMOVE.equals(item.getItemType())) {
      List newGroupNames=new ArrayList();
      for (Iterator k=item.getGroupNames(); k.hasNext(); ) {
        String groupName=(String)k.next();
        newGroupNames.add(groupName);
        RosterGroup group=getGroup(groupName);
        if (group == null) {
          group=createGroup(groupName);
          groups.put(groupName,group);
        }
        group.addEntryLocal(entry);
      }
      for (int m=0; m < newGroupNames.size(); m++) {
        currentGroupNames.remove(newGroupNames.get(m));
      }
    }
    for (int n=0; n < currentGroupNames.size(); n++) {
      String groupName=(String)currentGroupNames.get(n);
      RosterGroup group=getGroup(groupName);
      group.removeEntryLocal(entry);
      if (group.getEntryCount() == 0) {
synchronized (groups) {
          groups.remove(groupName);
        }
      }
    }
    for (Iterator it=getGroups(); it.hasNext(); ) {
      RosterGroup group=(RosterGroup)it.next();
      if (group.getEntryCount() == 0) {
synchronized (groups) {
          groups.remove(group.getName());
        }
      }
    }
  }
synchronized (Roster.this) {
    rosterInitialized=true;
    Roster.this.notifyAll();
  }
  fireRosterChangedEvent();
}"
20487,"protected void setUp() throws Exception {
  XMPPConnection.DEBUG_ENABLED=false;
  super.setUp();
  try {
    muc=new MultiUserChat(getConnection(0),room);
    muc.create(""String_Node_Str"");
    muc.sendConfigurationForm(new Form(Form.TYPE_SUBMIT));
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
}","protected void setUp() throws Exception {
  XMPPConnection.DEBUG_ENABLED=false;
  super.setUp();
  room=""String_Node_Str"" + getMUCDomain();
  try {
    muc=new MultiUserChat(getConnection(0),room);
    muc.create(""String_Node_Str"");
    muc.sendConfigurationForm(new Form(Form.TYPE_SUBMIT));
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
}"
20488,"/** 
 * Initializes the connection by creating a packet reader and writer and opening a XMPP stream to the server.
 * @throws XMPPException if establishing a connection to the server fails.
 */
private void init() throws XMPPException {
  try {
    reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),""String_Node_Str""));
    writer=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(),""String_Node_Str""));
  }
 catch (  IOException ioe) {
    throw new XMPPException(""String_Node_Str"",new XMPPError(502),ioe);
  }
  if (DEBUG_ENABLED) {
    String className=null;
    try {
      System.getProperty(""String_Node_Str"");
    }
 catch (    Throwable t) {
    }
    Class debuggerClass=null;
    if (className != null) {
      try {
        debuggerClass=Class.forName(className);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (debuggerClass == null) {
      try {
        debuggerClass=Class.forName(""String_Node_Str"");
      }
 catch (      Exception ex) {
        try {
          debuggerClass=Class.forName(""String_Node_Str"");
        }
 catch (        Exception ex2) {
          ex2.printStackTrace();
        }
      }
    }
    try {
      Constructor constructor=debuggerClass.getConstructor(new Class[]{XMPPConnection.class,Writer.class,Reader.class});
      debugger=(SmackDebugger)constructor.newInstance(new Object[]{this,writer,reader});
      reader=debugger.getReader();
      writer=debugger.getWriter();
    }
 catch (    Exception e) {
      e.printStackTrace();
      DEBUG_ENABLED=false;
    }
  }
  try {
    packetWriter=new PacketWriter(this);
    packetReader=new PacketReader(this);
    if (DEBUG_ENABLED) {
      packetReader.addPacketListener(debugger.getReaderListener(),null);
      if (debugger.getWriterListener() != null) {
        packetWriter.addPacketListener(debugger.getWriterListener(),null);
      }
    }
    packetWriter.startup();
    packetReader.startup();
    connected=true;
    connectionEstablished(this);
  }
 catch (  XMPPException ex) {
    if (packetWriter != null) {
      try {
        packetWriter.shutdown();
      }
 catch (      Throwable ignore) {
      }
      packetWriter=null;
    }
    if (packetReader != null) {
      try {
        packetReader.shutdown();
      }
 catch (      Throwable ignore) {
      }
      packetReader=null;
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      Throwable ignore) {
      }
      reader=null;
    }
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Throwable ignore) {
      }
      writer=null;
    }
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      Exception e) {
      }
      socket=null;
    }
    authenticated=false;
    connected=false;
    throw ex;
  }
}","/** 
 * Initializes the connection by creating a packet reader and writer and opening a XMPP stream to the server.
 * @throws XMPPException if establishing a connection to the server fails.
 */
private void init() throws XMPPException {
  try {
    reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),""String_Node_Str""));
    writer=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(),""String_Node_Str""));
  }
 catch (  IOException ioe) {
    throw new XMPPException(""String_Node_Str"",new XMPPError(502),ioe);
  }
  if (DEBUG_ENABLED) {
    String className=null;
    try {
      className=System.getProperty(""String_Node_Str"");
    }
 catch (    Throwable t) {
    }
    Class debuggerClass=null;
    if (className != null) {
      try {
        debuggerClass=Class.forName(className);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (debuggerClass == null) {
      try {
        debuggerClass=Class.forName(""String_Node_Str"");
      }
 catch (      Exception ex) {
        try {
          debuggerClass=Class.forName(""String_Node_Str"");
        }
 catch (        Exception ex2) {
          ex2.printStackTrace();
        }
      }
    }
    try {
      Constructor constructor=debuggerClass.getConstructor(new Class[]{XMPPConnection.class,Writer.class,Reader.class});
      debugger=(SmackDebugger)constructor.newInstance(new Object[]{this,writer,reader});
      reader=debugger.getReader();
      writer=debugger.getWriter();
    }
 catch (    Exception e) {
      e.printStackTrace();
      DEBUG_ENABLED=false;
    }
  }
  try {
    packetWriter=new PacketWriter(this);
    packetReader=new PacketReader(this);
    if (DEBUG_ENABLED) {
      packetReader.addPacketListener(debugger.getReaderListener(),null);
      if (debugger.getWriterListener() != null) {
        packetWriter.addPacketListener(debugger.getWriterListener(),null);
      }
    }
    packetWriter.startup();
    packetReader.startup();
    connected=true;
    connectionEstablished(this);
  }
 catch (  XMPPException ex) {
    if (packetWriter != null) {
      try {
        packetWriter.shutdown();
      }
 catch (      Throwable ignore) {
      }
      packetWriter=null;
    }
    if (packetReader != null) {
      try {
        packetReader.shutdown();
      }
 catch (      Throwable ignore) {
      }
      packetReader=null;
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      Throwable ignore) {
      }
      reader=null;
    }
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Throwable ignore) {
      }
      writer=null;
    }
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      Exception e) {
      }
      socket=null;
    }
    authenticated=false;
    connected=false;
    throw ex;
  }
}"
20489,"public IQ parseIQ(XmlPullParser parser) throws Exception {
  MUCOwner mucOwner=new MUCOwner();
  boolean done=false;
  MUCOwner.Item item=null;
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        mucOwner.addItem(parseItem(parser));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucOwner.setDestroy(parseDestroy(parser));
      }
 else {
        mucOwner.addExtension(PacketParserUtils.parsePacketExtension(parser.getName(),parser.getNamespace(),parser));
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return mucOwner;
}","public IQ parseIQ(XmlPullParser parser) throws Exception {
  MUCOwner mucOwner=new MUCOwner();
  boolean done=false;
  MUCOwner.Item item=null;
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        mucOwner.addItem(parseItem(parser));
      }
 else       if (parser.getName().equals(""String_Node_Str"")) {
        mucOwner.setDestroy(parseDestroy(parser));
      }
 else {
        mucOwner.addExtension(PacketParserUtils.parsePacketExtension(parser.getName(),parser.getNamespace(),parser));
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return mucOwner;
}"
20490,"/** 
 * Returns the server portion of a XMPP address. For example, for the address ""matt@jivesoftware.com/Smack"", ""jivesoftware.com"" would be returned. If no server is present in the address, the empty string will be returned.
 * @param XMPPAddress the XMPP address.
 * @return the server portion of the XMPP address.
 */
public static String parseServer(String XMPPAddress){
  if (XMPPAddress == null) {
    return null;
  }
  int atIndex=XMPPAddress.indexOf(""String_Node_Str"");
  if (atIndex + 1 > XMPPAddress.length()) {
    return ""String_Node_Str"";
  }
  if (atIndex < 0) {
    atIndex=0;
  }
  int slashIndex=XMPPAddress.indexOf(""String_Node_Str"");
  if (slashIndex > 0) {
    return XMPPAddress.substring(atIndex + 1,slashIndex);
  }
 else {
    return XMPPAddress.substring(atIndex + 1);
  }
}","/** 
 * Returns the server portion of a XMPP address. For example, for the address ""matt@jivesoftware.com/Smack"", ""jivesoftware.com"" would be returned. If no server is present in the address, the empty string will be returned.
 * @param XMPPAddress the XMPP address.
 * @return the server portion of the XMPP address.
 */
public static String parseServer(String XMPPAddress){
  if (XMPPAddress == null) {
    return null;
  }
  int atIndex=XMPPAddress.indexOf(""String_Node_Str"");
  if (atIndex + 1 > XMPPAddress.length()) {
    return ""String_Node_Str"";
  }
  int slashIndex=XMPPAddress.indexOf(""String_Node_Str"");
  if (slashIndex > 0) {
    return XMPPAddress.substring(atIndex + 1,slashIndex);
  }
 else {
    return XMPPAddress.substring(atIndex + 1);
  }
}"
20491,"/** 
 * Returns the Smack version information, e.g. ""1.3.0"".
 * @return the Smack version information.
 */
public static String getVersion(){
  return SMACK_VERSION;
}","/** 
 * Returns the Smack version information, eg ""1.3.0"".
 * @return the Smack version information.
 */
public static String getVersion(){
  return SMACK_VERSION;
}"
20492,"/** 
 * Sets the NodeInformationProvider responsible for providing information  (i.e. items) related to a given node. Every time this client receives a disco request regarding the items of a given node, the provider associated to that node will be the  responsible for providing the requested information.<p> In MUC, a node could be 'http://jabber.org/protocol/muc#rooms' which means that the NodeInformationProvider will provide information about the rooms where the user has joined. 
 * @param node the node whose items will be provided by the NodeInformationProvider.
 * @return the NodeInformationProvider responsible for providing items related to the node.
 */
public void setNodeInformationProvider(String node,NodeInformationProvider listener){
  nodeInformationProviders.put(node,listener);
}","/** 
 * Sets the NodeInformationProvider responsible for providing information  (ie items) related to a given node. Every time this client receives a disco request regarding the items of a given node, the provider associated to that node will be the  responsible for providing the requested information.<p> In MUC, a node could be 'http://jabber.org/protocol/muc#rooms' which means that the NodeInformationProvider will provide information about the rooms where the user has joined. 
 * @param node the node whose items will be provided by the NodeInformationProvider.
 * @param listener the NodeInformationProvider responsible for providing items relatedto the node.
 */
public void setNodeInformationProvider(String node,NodeInformationProvider listener){
  nodeInformationProviders.put(node,listener);
}"
20493,"/** 
 * Returns the NodeInformationProvider responsible for providing information  (i.e. items) related to a given node or <tt>null</null> if none.<p> In MUC, a node could be 'http://jabber.org/protocol/muc#rooms' which means that the NodeInformationProvider will provide information about the rooms where the user has joined.
 * @param node the node that contains items associated with an entity not addressable as a JID.
 * @return the NodeInformationProvider responsible for providing information related to a given node.
 */
private NodeInformationProvider getNodeInformationProvider(String node){
  return (NodeInformationProvider)nodeInformationProviders.get(node);
}","/** 
 * Returns the NodeInformationProvider responsible for providing information  (ie items) related to a given node or <tt>null</null> if none.<p> In MUC, a node could be 'http://jabber.org/protocol/muc#rooms' which means that the NodeInformationProvider will provide information about the rooms where the user has joined.
 * @param node the node that contains items associated with an entity not addressable as a JID.
 * @return the NodeInformationProvider responsible for providing information related to a given node.
 */
private NodeInformationProvider getNodeInformationProvider(String node){
  return (NodeInformationProvider)nodeInformationProviders.get(node);
}"
20494,"/** 
 * Removes the NodeInformationProvider responsible for providing information  (i.e. items) related to a given node. This means that no more information will be  available for the specified node. In MUC, a node could be 'http://jabber.org/protocol/muc#rooms' which means that the NodeInformationProvider will provide information about the rooms where the user has joined. 
 * @param node the node to remove the associated NodeInformationProvider.
 */
public void removeNodeInformationProvider(String node){
  nodeInformationProviders.remove(node);
}","/** 
 * Removes the NodeInformationProvider responsible for providing information  (ie items) related to a given node. This means that no more information will be available for the specified node. In MUC, a node could be 'http://jabber.org/protocol/muc#rooms' which means that the NodeInformationProvider will provide information about the rooms where the user has joined. 
 * @param node the node to remove the associated NodeInformationProvider.
 */
public void removeNodeInformationProvider(String node){
  nodeInformationProviders.remove(node);
}"
20495,"/** 
 * Parse a properties sub-packet. If any errors occur while de-serializing Java object properties, an exception will be printed and not thrown since a thrown exception will shut down the entire connection. ClassCastExceptions will occur when both the sender and receiver of the packet don't have identical versions of the same class.
 * @param parser the XML parser, positioned at the start of a properties sub-packet.
 * @return a map of the properties.
 * @throws Exception if an error occurs while parsing the properties.
 */
private Map parseProperties(XmlPullParser parser) throws Exception {
  Map properties=new HashMap();
  while (true) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      parser.next();
      parser.next();
      String name=parser.nextText();
      parser.next();
      parser.next();
      String type=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      String valueText=parser.nextText();
      Object value=null;
      if (""String_Node_Str"".equals(type)) {
        value=new Integer(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Long(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Float(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Double(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Boolean(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=valueText;
      }
 else       if (""String_Node_Str"".equals(type)) {
        try {
          byte[] bytes=StringUtils.decodeBase64(valueText);
          ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(bytes));
          value=in.readObject();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      if (name != null && value != null) {
        properties.put(name,value);
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        break;
      }
    }
  }
  return properties;
}","/** 
 * Parse a properties sub-packet. If any errors occur while de-serializing Java object properties, an exception will be printed and not thrown since a thrown exception will shut down the entire connection. ClassCastExceptions will occur when both the sender and receiver of the packet don't have identical versions of the same class.
 * @param parser the XML parser, positioned at the start of a properties sub-packet.
 * @return a map of the properties.
 * @throws Exception if an error occurs while parsing the properties.
 */
private Map parseProperties(XmlPullParser parser) throws Exception {
  Map properties=new HashMap();
  while (true) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      parser.next();
      eventType=parser.next();
      String name;
      if (eventType == XmlPullParser.TEXT) {
        name=parser.getText();
      }
 else {
        name=parser.nextText();
      }
      parser.next();
      parser.next();
      String type=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      String valueText=parser.nextText();
      Object value=null;
      if (""String_Node_Str"".equals(type)) {
        value=new Integer(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Long(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Float(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Double(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Boolean(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=valueText;
      }
 else       if (""String_Node_Str"".equals(type)) {
        try {
          byte[] bytes=StringUtils.decodeBase64(valueText);
          ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(bytes));
          value=in.readObject();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      if (name != null && value != null) {
        properties.put(name,value);
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        break;
      }
    }
  }
  return properties;
}"
20496,"public String getChildElementXML(){
  StringBuffer buf=new StringBuffer();
  buf.append(""String_Node_Str"");
  if (getNode() != null) {
    buf.append(""String_Node_Str"");
    buf.append(getNode());
  }
  buf.append(""String_Node_Str"");
synchronized (identities) {
    for (int i=0; i < identities.size(); i++) {
      Identity identity=(Identity)identities.get(i);
      buf.append(identity.toXML());
    }
  }
synchronized (features) {
    for (int i=0; i < features.size(); i++) {
      Feature feature=(Feature)features.get(i);
      buf.append(feature.toXML());
    }
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}","public String getChildElementXML(){
  StringBuffer buf=new StringBuffer();
  buf.append(""String_Node_Str"");
  if (getNode() != null) {
    buf.append(""String_Node_Str"");
    buf.append(getNode());
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
synchronized (identities) {
    for (int i=0; i < identities.size(); i++) {
      Identity identity=(Identity)identities.get(i);
      buf.append(identity.toXML());
    }
  }
synchronized (features) {
    for (int i=0; i < features.size(); i++) {
      Feature feature=(Feature)features.get(i);
      buf.append(feature.toXML());
    }
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}"
20497,"public String getChildElementXML(){
  StringBuffer buf=new StringBuffer();
  buf.append(""String_Node_Str"");
  if (getNode() != null) {
    buf.append(""String_Node_Str"");
    buf.append(getNode());
  }
  buf.append(""String_Node_Str"");
synchronized (items) {
    for (int i=0; i < items.size(); i++) {
      Item item=(Item)items.get(i);
      buf.append(item.toXML());
    }
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}","public String getChildElementXML(){
  StringBuffer buf=new StringBuffer();
  buf.append(""String_Node_Str"");
  if (getNode() != null) {
    buf.append(""String_Node_Str"");
    buf.append(getNode());
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
synchronized (items) {
    for (int i=0; i < items.size(); i++) {
      Item item=(Item)items.get(i);
      buf.append(item.toXML());
    }
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}"
20498,"/** 
 * Parses a MUCUser packet (extension sub-packet).
 * @param parser the XML parser, positioned at the starting element of the extension.
 * @return a PacketExtension.
 * @throws Exception if a parsing error occurs.
 */
public PacketExtension parseExtension(XmlPullParser parser) throws Exception {
  MUCUser mucUser=new MUCUser();
  boolean done=false;
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setInvite(parseInvite(parser));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setItem(parseItem(parser));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setPassword(parser.getText());
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setStatus(new MUCUser.Status(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"")));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setDecline(parseDecline(parser));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setDestroy(parseDestroy(parser));
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return mucUser;
}","/** 
 * Parses a MUCUser packet (extension sub-packet).
 * @param parser the XML parser, positioned at the starting element of the extension.
 * @return a PacketExtension.
 * @throws Exception if a parsing error occurs.
 */
public PacketExtension parseExtension(XmlPullParser parser) throws Exception {
  MUCUser mucUser=new MUCUser();
  boolean done=false;
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setInvite(parseInvite(parser));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setItem(parseItem(parser));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setPassword(parser.nextText());
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setStatus(new MUCUser.Status(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"")));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setDecline(parseDecline(parser));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        mucUser.setDestroy(parseDestroy(parser));
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return mucUser;
}"
20499,"private MUCUser.Destroy parseDestroy(XmlPullParser parser) throws Exception {
  boolean done=false;
  MUCUser.Destroy destroy=new MUCUser.Destroy();
  destroy.setJid(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        destroy.setReason(parser.getText());
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return destroy;
}","private MUCUser.Destroy parseDestroy(XmlPullParser parser) throws Exception {
  boolean done=false;
  MUCUser.Destroy destroy=new MUCUser.Destroy();
  destroy.setJid(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        destroy.setReason(parser.nextText());
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return destroy;
}"
20500,"private MUCUser.Invite parseInvite(XmlPullParser parser) throws Exception {
  boolean done=false;
  MUCUser.Invite invite=new MUCUser.Invite();
  invite.setFrom(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  invite.setTo(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        invite.setReason(parser.getText());
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return invite;
}","private MUCUser.Invite parseInvite(XmlPullParser parser) throws Exception {
  boolean done=false;
  MUCUser.Invite invite=new MUCUser.Invite();
  invite.setFrom(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  invite.setTo(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        invite.setReason(parser.nextText());
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return invite;
}"
20501,"private MUCUser.Decline parseDecline(XmlPullParser parser) throws Exception {
  boolean done=false;
  MUCUser.Decline decline=new MUCUser.Decline();
  decline.setFrom(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  decline.setTo(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        decline.setReason(parser.getText());
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return decline;
}","private MUCUser.Decline parseDecline(XmlPullParser parser) throws Exception {
  boolean done=false;
  MUCUser.Decline decline=new MUCUser.Decline();
  decline.setFrom(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  decline.setTo(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        decline.setReason(parser.nextText());
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return decline;
}"
20502,"private MUCUser.Item parseItem(XmlPullParser parser) throws Exception {
  boolean done=false;
  MUCUser.Item item=new MUCUser.Item(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""),parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  item.setNick(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  item.setJid(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        item.setActor(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        item.setReason(parser.getText());
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return item;
}","private MUCUser.Item parseItem(XmlPullParser parser) throws Exception {
  boolean done=false;
  MUCUser.Item item=new MUCUser.Item(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""),parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  item.setNick(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  item.setJid(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  while (!done) {
    int eventType=parser.next();
    if (eventType == XmlPullParser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        item.setActor(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
      }
      if (parser.getName().equals(""String_Node_Str"")) {
        item.setReason(parser.nextText());
      }
    }
 else     if (eventType == XmlPullParser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  return item;
}"
20503,"/** 
 * Process listeners.
 */
private void processListeners(){
  while (!done) {
    Packet sentPacket;
synchronized (sentPackets) {
      while (!done && sentPackets.size() == 0) {
        try {
          sentPackets.wait(2000);
        }
 catch (        InterruptedException ie) {
        }
      }
      if (sentPackets.size() > 0) {
        sentPacket=(Packet)sentPackets.removeLast();
      }
 else {
        sentPacket=null;
      }
    }
    if (sentPacket != null) {
      int size=listeners.size();
      for (int i=0; i < size; i++) {
        ListenerWrapper listenerWrapper=(ListenerWrapper)listeners.get(i);
        if (listenerWrapper != null) {
          listenerWrapper.notifyListener(sentPacket);
        }
      }
    }
  }
}","/** 
 * Process listeners.
 */
private void processListeners(){
  while (!done) {
    Packet sentPacket;
synchronized (sentPackets) {
      while (!done && sentPackets.size() == 0) {
        try {
          sentPackets.wait(2000);
        }
 catch (        InterruptedException ie) {
        }
      }
      if (sentPackets.size() > 0) {
        sentPacket=(Packet)sentPackets.removeLast();
      }
 else {
        sentPacket=null;
      }
    }
    if (sentPacket != null) {
synchronized (listeners) {
        if (listeners.size() > 0) {
          for (int i=listeners.size() - 1; i >= 0; i--) {
            if (listeners.get(i) == null) {
              listeners.remove(i);
            }
          }
        }
      }
      int size=listeners.size();
      for (int i=0; i < size; i++) {
        ListenerWrapper listenerWrapper=(ListenerWrapper)listeners.get(i);
        if (listenerWrapper != null) {
          listenerWrapper.notifyListener(sentPacket);
        }
      }
    }
  }
}"
20504,"/** 
 * Removes a packet listener.
 * @param packetListener the packet listener to remove.
 */
public void removePacketListener(PacketListener packetListener){
synchronized (listeners) {
    listeners.remove(packetListener);
  }
}","/** 
 * Removes a packet listener.
 * @param packetListener the packet listener to remove.
 */
public void removePacketListener(PacketListener packetListener){
synchronized (listeners) {
    for (int i=0; i < listeners.size(); i++) {
      ListenerWrapper wrapper=(ListenerWrapper)listeners.get(i);
      if (wrapper != null && wrapper.packetListener.equals(packetListener)) {
        listeners.set(i,null);
      }
    }
  }
}"
20505,"public void processPacket(Packet packet){
  RosterPacket rosterPacket=(RosterPacket)packet;
  for (Iterator i=rosterPacket.getRosterItems(); i.hasNext(); ) {
    RosterPacket.Item item=(RosterPacket.Item)i.next();
    RosterEntry entry=new RosterEntry(item.getUser(),item.getName(),item.getItemType(),connection);
    if (RosterPacket.ItemType.REMOVE.equals(item.getItemType())) {
      if (entries.contains(entry)) {
        entries.remove(entry);
      }
synchronized (unfiledEntries) {
        if (unfiledEntries.contains(entry)) {
          unfiledEntries.remove(entry);
        }
      }
    }
 else {
      if (!entries.contains(entry)) {
        entries.add(entry);
      }
 else {
        RosterEntry existingEntry=(RosterEntry)entries.get(entries.indexOf(entry));
        existingEntry.updateState(entry.getName(),entry.getType());
      }
      if (item.getGroupNames().hasNext()) {
synchronized (unfiledEntries) {
          unfiledEntries.remove(entry);
        }
      }
 else {
synchronized (unfiledEntries) {
          if (!unfiledEntries.contains(entry)) {
            unfiledEntries.add(entry);
          }
        }
      }
    }
    List currentGroupNames=new ArrayList();
    for (Iterator j=entry.getGroups(); j.hasNext(); ) {
      RosterGroup group=(RosterGroup)j.next();
      currentGroupNames.add(group.getName());
    }
    if (!RosterPacket.ItemType.REMOVE.equals(item.getItemType())) {
      List newGroupNames=new ArrayList();
      for (Iterator k=item.getGroupNames(); k.hasNext(); ) {
        String groupName=(String)k.next();
        newGroupNames.add(groupName);
        RosterGroup group=getGroup(groupName);
        if (group == null) {
          group=createGroup(groupName);
          groups.put(groupName,group);
        }
        group.addEntryLocal(entry);
      }
      for (int m=0; m < newGroupNames.size(); m++) {
        currentGroupNames.remove(newGroupNames.get(m));
      }
    }
    for (int n=0; n < currentGroupNames.size(); n++) {
      String groupName=(String)currentGroupNames.get(n);
      RosterGroup group=getGroup(groupName);
      group.removeEntryLocal(entry);
      if (group.getEntryCount() == 0) {
synchronized (groups) {
          groups.remove(groupName);
        }
      }
    }
  }
  fireRosterChangedEvent();
  rosterInitialized=true;
}","public void processPacket(Packet packet){
  RosterPacket rosterPacket=(RosterPacket)packet;
  for (Iterator i=rosterPacket.getRosterItems(); i.hasNext(); ) {
    RosterPacket.Item item=(RosterPacket.Item)i.next();
    RosterEntry entry=new RosterEntry(item.getUser(),item.getName(),item.getItemType(),connection);
    if (RosterPacket.ItemType.REMOVE.equals(item.getItemType())) {
      if (entries.contains(entry)) {
        entries.remove(entry);
      }
synchronized (unfiledEntries) {
        if (unfiledEntries.contains(entry)) {
          unfiledEntries.remove(entry);
        }
      }
    }
 else {
      if (!entries.contains(entry)) {
        entries.add(entry);
      }
 else {
        RosterEntry existingEntry=(RosterEntry)entries.get(entries.indexOf(entry));
        existingEntry.updateState(entry.getName(),entry.getType());
      }
      if (item.getGroupNames().hasNext()) {
synchronized (unfiledEntries) {
          unfiledEntries.remove(entry);
        }
      }
 else {
synchronized (unfiledEntries) {
          if (!unfiledEntries.contains(entry)) {
            unfiledEntries.add(entry);
          }
        }
      }
    }
    List currentGroupNames=new ArrayList();
    if (rosterInitialized) {
      for (Iterator j=entry.getGroups(); j.hasNext(); ) {
        RosterGroup group=(RosterGroup)j.next();
        currentGroupNames.add(group.getName());
      }
    }
    if (!RosterPacket.ItemType.REMOVE.equals(item.getItemType())) {
      List newGroupNames=new ArrayList();
      for (Iterator k=item.getGroupNames(); k.hasNext(); ) {
        String groupName=(String)k.next();
        newGroupNames.add(groupName);
        RosterGroup group=getGroup(groupName);
        if (group == null) {
          group=createGroup(groupName);
          groups.put(groupName,group);
        }
        group.addEntryLocal(entry);
      }
      for (int m=0; m < newGroupNames.size(); m++) {
        currentGroupNames.remove(newGroupNames.get(m));
      }
    }
    if (rosterInitialized) {
      for (int n=0; n < currentGroupNames.size(); n++) {
        String groupName=(String)currentGroupNames.get(n);
        RosterGroup group=getGroup(groupName);
        group.removeEntryLocal(entry);
        if (group.getEntryCount() == 0) {
synchronized (groups) {
            groups.remove(groupName);
          }
        }
      }
    }
  }
  rosterInitialized=true;
  fireRosterChangedEvent();
}"
20506,"/** 
 * Returns the roster entry associated with the given XMPP address or <tt>null</tt> if the user is not an entry in the roster.
 * @param user the XMPP address of the user (eg ""jsmith@example.com"").
 * @return the roster entry or <tt>null</tt> if it does not exist.
 */
public RosterEntry getEntry(String user){
  if (user == null) {
    return null;
  }
  user=StringUtils.parseBareAddress(user);
synchronized (entries) {
    for (Iterator i=getFiledEntriesList().iterator(); i.hasNext(); ) {
      RosterEntry entry=(RosterEntry)i.next();
      if (entry.getUser().equals(user)) {
        return entry;
      }
    }
  }
  return null;
}","/** 
 * Returns the roster entry associated with the given XMPP address or <tt>null</tt> if the user is not an entry in the roster.
 * @param user the XMPP address of the user (eg ""jsmith@example.com"").
 * @return the roster entry or <tt>null</tt> if it does not exist.
 */
public RosterEntry getEntry(String user){
  if (user == null) {
    return null;
  }
  if (!rosterInitialized) {
    waitUntilInitialized();
  }
  user=StringUtils.parseBareAddress(user);
synchronized (entries) {
    for (Iterator i=entries.iterator(); i.hasNext(); ) {
      RosterEntry entry=(RosterEntry)i.next();
      if (entry.getUser().equals(user)) {
        return entry;
      }
    }
  }
  return null;
}"
20507,"/** 
 * Returns an iterator the for all the roster groups.
 * @return an iterator for all roster groups.
 */
public Iterator getGroups(){
synchronized (groups) {
    List groupsList=Collections.unmodifiableList(new ArrayList(getGroupsMap().values()));
    return groupsList.iterator();
  }
}","/** 
 * Returns an iterator the for all the roster groups.
 * @return an iterator for all roster groups.
 */
public Iterator getGroups(){
  if (!rosterInitialized) {
    waitUntilInitialized();
  }
synchronized (groups) {
    List groupsList=Collections.unmodifiableList(new ArrayList(groups.values()));
    return groupsList.iterator();
  }
}"
20508,"/** 
 * Creates a new group.<p> Note: you must add at least one entry to the group for the group to be kept after a logout/login. This is due to the way that XMPP stores group information.
 * @param name the name of the group.
 * @return a new group.
 */
public RosterGroup createGroup(String name){
  if (!rosterInitialized) {
    waitUntilInitialized();
  }
synchronized (groups) {
    if (groups.containsKey(name)) {
      throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
    RosterGroup group=new RosterGroup(name,connection);
    groups.put(name,group);
    return group;
  }
}","/** 
 * Creates a new group.<p> Note: you must add at least one entry to the group for the group to be kept after a logout/login. This is due to the way that XMPP stores group information.
 * @param name the name of the group.
 * @return a new group.
 */
public RosterGroup createGroup(String name){
synchronized (groups) {
    if (groups.containsKey(name)) {
      throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
    RosterGroup group=new RosterGroup(name,connection);
    groups.put(name,group);
    return group;
  }
}"
20509,"/** 
 * Returns a count of the unfiled entries in the roster. An unfiled entry is an entry that doesn't belong to any groups.
 * @return the number of unfiled entries in the roster.
 */
public int getUnfiledEntryCount(){
synchronized (unfiledEntries) {
    return unfiledEntries.size();
  }
}","/** 
 * Returns a count of the unfiled entries in the roster. An unfiled entry is an entry that doesn't belong to any groups.
 * @return the number of unfiled entries in the roster.
 */
public int getUnfiledEntryCount(){
  if (!rosterInitialized) {
    waitUntilInitialized();
  }
synchronized (unfiledEntries) {
    return unfiledEntries.size();
  }
}"
20510,"/** 
 * Returns true if the specified XMPP address is an entry in the roster.
 * @param user the XMPP address of the user (eg ""jsmith@example.com"").
 * @return true if the XMPP address is an entry in the roster.
 */
public boolean contains(String user){
  if (user == null) {
    return false;
  }
  user=StringUtils.parseBareAddress(user);
synchronized (entries) {
    for (Iterator i=getFiledEntriesList().iterator(); i.hasNext(); ) {
      RosterEntry entry=(RosterEntry)i.next();
      if (entry.getUser().equals(user)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Returns true if the specified XMPP address is an entry in the roster.
 * @param user the XMPP address of the user (eg ""jsmith@example.com"").
 * @return true if the XMPP address is an entry in the roster.
 */
public boolean contains(String user){
  if (user == null) {
    return false;
  }
  if (!rosterInitialized) {
    waitUntilInitialized();
  }
  user=StringUtils.parseBareAddress(user);
synchronized (entries) {
    for (Iterator i=entries.iterator(); i.hasNext(); ) {
      RosterEntry entry=(RosterEntry)i.next();
      if (entry.getUser().equals(user)) {
        return true;
      }
    }
  }
  return false;
}"
20511,"/** 
 * Returns an Iterator for the unfiled roster entries. An unfiled entry is an entry that doesn't belong to any groups.
 * @return an iterator the unfiled roster entries.
 */
public Iterator getUnfiledEntries(){
synchronized (unfiledEntries) {
    return Collections.unmodifiableList(new ArrayList(unfiledEntries)).iterator();
  }
}","/** 
 * Returns an Iterator for the unfiled roster entries. An unfiled entry is an entry that doesn't belong to any groups.
 * @return an iterator the unfiled roster entries.
 */
public Iterator getUnfiledEntries(){
  if (!rosterInitialized) {
    waitUntilInitialized();
  }
synchronized (unfiledEntries) {
    return Collections.unmodifiableList(new ArrayList(unfiledEntries)).iterator();
  }
}"
20512,"/** 
 * Process listeners.
 */
private void processListeners(){
  while (!done) {
    Packet sentPacket;
synchronized (sentPackets) {
      while (sentPackets.size() == 0) {
        try {
          sentPackets.wait();
        }
 catch (        InterruptedException ie) {
        }
      }
      sentPacket=(Packet)sentPackets.removeLast();
    }
    int size=listeners.size();
    for (int i=0; i < size; i++) {
      ListenerWrapper listenerWrapper=(ListenerWrapper)listeners.get(i);
      if (listenerWrapper != null) {
        listenerWrapper.notifyListener(sentPacket);
      }
    }
  }
}","/** 
 * Process listeners.
 */
private void processListeners(){
  while (!done) {
    Packet sentPacket;
synchronized (sentPackets) {
      while (!done && sentPackets.size() == 0) {
        try {
          sentPackets.wait(2000);
        }
 catch (        InterruptedException ie) {
        }
      }
      if (sentPackets.size() > 0) {
        sentPacket=(Packet)sentPackets.removeLast();
      }
 else {
        sentPacket=null;
      }
    }
    if (sentPacket != null) {
      int size=listeners.size();
      for (int i=0; i < size; i++) {
        ListenerWrapper listenerWrapper=(ListenerWrapper)listeners.get(i);
        if (listenerWrapper != null) {
          listenerWrapper.notifyListener(sentPacket);
        }
      }
    }
  }
}"
20513,"/** 
 * Returns the next available packet from the queue for writing.
 * @return the next packet for writing.
 */
private Packet nextPacket(){
synchronized (queue) {
    while (queue.size() == 0) {
      try {
        queue.wait();
      }
 catch (      InterruptedException ie) {
      }
    }
    return (Packet)queue.removeLast();
  }
}","/** 
 * Returns the next available packet from the queue for writing.
 * @return the next packet for writing.
 */
private Packet nextPacket(){
synchronized (queue) {
    while (!done && queue.size() == 0) {
      try {
        queue.wait(2000);
      }
 catch (      InterruptedException ie) {
      }
    }
    if (queue.size() > 0) {
      return (Packet)queue.removeLast();
    }
 else {
      return null;
    }
  }
}"
20514,"private void writePackets(){
  try {
    StringBuffer stream=new StringBuffer();
    stream.append(""String_Node_Str"");
    stream.append(""String_Node_Str"" + connection.getHost() + ""String_Node_Str"");
    stream.append(""String_Node_Str"");
    stream.append(""String_Node_Str"");
    writer.write(stream.toString());
    writer.flush();
    stream=null;
    while (!done) {
      Packet packet=nextPacket();
      writer.write(packet.toXML());
      writer.flush();
    }
    try {
      writer.write(""String_Node_Str"");
      writer.flush();
    }
 catch (    Exception e) {
    }
 finally {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  IOException ioe) {
    if (!done) {
      done=true;
      connection.packetReader.notifyConnectionError(ioe);
    }
  }
}","private void writePackets(){
  try {
    StringBuffer stream=new StringBuffer();
    stream.append(""String_Node_Str"");
    stream.append(""String_Node_Str"" + connection.getHost() + ""String_Node_Str"");
    stream.append(""String_Node_Str"");
    stream.append(""String_Node_Str"");
    writer.write(stream.toString());
    writer.flush();
    stream=null;
    while (!done) {
      Packet packet=nextPacket();
      if (packet != null) {
        writer.write(packet.toXML());
        writer.flush();
      }
    }
    try {
      writer.write(""String_Node_Str"");
      writer.flush();
    }
 catch (    Exception e) {
    }
 finally {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  IOException ioe) {
    if (!done) {
      done=true;
      connection.packetReader.notifyConnectionError(ioe);
    }
  }
}"
20515,"/** 
 * Returns the name portion of a XMPP address. For example, for the address ""matt@jivesoftware.com/Smack"", ""jivesoftware.com"" would be returned. If no server is present in the address, the empty string will be returned.
 * @param XMPPAddress the XMPP address.
 * @return the resource portion of the XMPP address.
 */
public static String parseServer(String XMPPAddress){
  if (XMPPAddress == null) {
    return null;
  }
  int atIndex=XMPPAddress.indexOf(""String_Node_Str"");
  if (atIndex + 1 > XMPPAddress.length() || atIndex < 0) {
    return ""String_Node_Str"";
  }
  int slashIndex=XMPPAddress.indexOf(""String_Node_Str"");
  if (slashIndex > 0) {
    return XMPPAddress.substring(atIndex + 1,slashIndex);
  }
 else {
    return XMPPAddress.substring(atIndex + 1);
  }
}","/** 
 * Returns the name portion of a XMPP address. For example, for the address ""matt@jivesoftware.com/Smack"", ""jivesoftware.com"" would be returned. If no server is present in the address, the empty string will be returned.
 * @param XMPPAddress the XMPP address.
 * @return the resource portion of the XMPP address.
 */
public static String parseServer(String XMPPAddress){
  if (XMPPAddress == null) {
    return null;
  }
  int atIndex=XMPPAddress.indexOf(""String_Node_Str"");
  if (atIndex + 1 > XMPPAddress.length()) {
    return ""String_Node_Str"";
  }
  int slashIndex=XMPPAddress.indexOf(""String_Node_Str"");
  if (slashIndex > 0) {
    return XMPPAddress.substring(atIndex + 1,slashIndex);
  }
 else {
    return XMPPAddress.substring(atIndex + 1);
  }
}"
20516,"/** 
 * Sets the name of the group.
 * @param name the name of the group.
 */
public void setName(String name){
  this.name=name;
synchronized (entries) {
    for (int i=0; i < entries.size(); i++) {
      RosterPacket packet=new RosterPacket();
      packet.setType(IQ.Type.SET);
      RosterEntry entry=(RosterEntry)entries.get(i);
      packet.addRosterItem(RosterEntry.toRosterItem(entry));
      connection.sendPacket(packet);
    }
  }
}","/** 
 * Sets the name of the group. Changing the group's name is like moving all the group entries of the group to a new group specified by the new name. Since this group won't have entries  it will be removed from the roster. This means that all the references to this object will  be invalid and will need to be updated to the new group specified by the new name.
 * @param name the name of the group.
 */
public void setName(String name){
synchronized (entries) {
    for (int i=0; i < entries.size(); i++) {
      RosterPacket packet=new RosterPacket();
      packet.setType(IQ.Type.SET);
      RosterEntry entry=(RosterEntry)entries.get(i);
      RosterPacket.Item item=RosterEntry.toRosterItem(entry);
      item.removeGroupName(this.name);
      item.addGroupName(name);
      packet.addRosterItem(item);
      connection.sendPacket(packet);
    }
  }
}"
20517,"/** 
 * Parses error sub-packets.
 * @param parser the XML parser.
 * @return an error sub-packet.
 * @throws Exception if an exception occurs while parsing the packet.
 */
private XMPPError parseError(XmlPullParser parser) throws Exception {
  String errorCode=null;
  for (int i=0; i < parser.getAttributeCount(); i++) {
    if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
      errorCode=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
  String message=parser.nextText();
  while (true) {
    if (parser.getEventType() == XmlPullParser.END_TAG && parser.getName().equals(""String_Node_Str"")) {
      break;
    }
  }
  return new XMPPError(Integer.parseInt(errorCode),message);
}","/** 
 * Parses error sub-packets.
 * @param parser the XML parser.
 * @return an error sub-packet.
 * @throws Exception if an exception occurs while parsing the packet.
 */
private XMPPError parseError(XmlPullParser parser) throws Exception {
  String errorCode=null;
  String message=null;
  for (int i=0; i < parser.getAttributeCount(); i++) {
    if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
      errorCode=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
  try {
    message=parser.nextText();
  }
 catch (  XmlPullParserException ex) {
  }
  while (true) {
    if (parser.getEventType() == XmlPullParser.END_TAG && parser.getName().equals(""String_Node_Str"")) {
      break;
    }
    parser.next();
  }
  return new XMPPError(Integer.parseInt(errorCode),message);
}"
20518,"/** 
 * Shuts the packet reader down.
 */
public void shutdown(){
  done=true;
synchronized (connectionListeners) {
    for (Iterator i=connectionListeners.iterator(); i.hasNext(); ) {
      ConnectionListener listener=(ConnectionListener)i.next();
      listener.connectionClosed();
    }
  }
}","/** 
 * Shuts the packet reader down.
 */
public void shutdown(){
  if (!done) {
synchronized (connectionListeners) {
      for (Iterator i=connectionListeners.iterator(); i.hasNext(); ) {
        ConnectionListener listener=(ConnectionListener)i.next();
        listener.connectionClosed();
      }
    }
  }
  done=true;
}"
20519,"/** 
 * Parse top-level packets in order to process them further.
 */
private void parsePackets(){
  try {
    int eventType=parser.getEventType();
    do {
      if (eventType == XmlPullParser.START_TAG) {
        if (parser.getName().equals(""String_Node_Str"")) {
          processPacket(parseMessage(parser));
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          processPacket(parseIQ(parser));
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          processPacket(parsePresence(parser));
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          if (""String_Node_Str"".equals(parser.getNamespace(null))) {
            for (int i=0; i < parser.getAttributeCount(); i++) {
              if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
                connectionID=parser.getAttributeValue(i);
synchronized (connectionIDLock) {
                  connectionIDLock.notifyAll();
                }
              }
            }
          }
        }
      }
 else       if (eventType == XmlPullParser.END_TAG) {
        if (parser.getName().equals(""String_Node_Str"")) {
          connection.close();
        }
      }
      eventType=parser.next();
    }
 while (!done && eventType != XmlPullParser.END_DOCUMENT);
  }
 catch (  Exception e) {
    if (!done) {
      connection.close();
synchronized (connectionListeners) {
        for (Iterator i=connectionListeners.iterator(); i.hasNext(); ) {
          ConnectionListener listener=(ConnectionListener)i.next();
          listener.connectionClosedOnError(e);
        }
      }
    }
  }
}","/** 
 * Parse top-level packets in order to process them further.
 */
private void parsePackets(){
  try {
    int eventType=parser.getEventType();
    do {
      if (eventType == XmlPullParser.START_TAG) {
        if (parser.getName().equals(""String_Node_Str"")) {
          processPacket(parseMessage(parser));
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          processPacket(parseIQ(parser));
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          processPacket(parsePresence(parser));
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          if (""String_Node_Str"".equals(parser.getNamespace(null))) {
            for (int i=0; i < parser.getAttributeCount(); i++) {
              if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
                connectionID=parser.getAttributeValue(i);
synchronized (connectionIDLock) {
                  connectionIDLock.notifyAll();
                }
              }
            }
          }
        }
      }
 else       if (eventType == XmlPullParser.END_TAG) {
        if (parser.getName().equals(""String_Node_Str"")) {
          connection.close();
        }
      }
      eventType=parser.next();
    }
 while (!done && eventType != XmlPullParser.END_DOCUMENT);
  }
 catch (  Exception e) {
    if (!done) {
      done=true;
      connection.close();
synchronized (connectionListeners) {
        for (Iterator i=connectionListeners.iterator(); i.hasNext(); ) {
          ConnectionListener listener=(ConnectionListener)i.next();
          listener.connectionClosedOnError(e);
        }
      }
    }
  }
}"
20520,"/** 
 * Logs in to the server using the strongest authentication mode supported by the server, then set our presence to available. If more than five seconds elapses in each step of the authentication process without a response from the server, or if an error occurs, a XMPPException will be thrown.
 * @param username the username.
 * @param password the password.
 * @param resource the resource.
 * @throws XMPPException if an error occurs.
 * @throws IllegalStateException if not connected to the server, or already logged into the serrver.
 */
public synchronized void login(String username,String password,String resource) throws XMPPException {
  if (!isConnected()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (authenticated) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.username=username;
  this.resource=resource;
  Authentication discoveryAuth=new Authentication();
  discoveryAuth.setType(IQ.Type.GET);
  discoveryAuth.setUsername(username);
  PacketCollector collector=packetReader.createPacketCollector(new PacketIDFilter(discoveryAuth.getPacketID()));
  packetWriter.sendPacket(discoveryAuth);
  IQ response=(IQ)collector.nextResult(5000);
  if (response == null) {
    throw new XMPPException(""String_Node_Str"");
  }
 else   if (response.getType() == IQ.Type.ERROR) {
    throw new XMPPException(response.getError());
  }
  Authentication authTypes=(Authentication)response;
  collector.cancel();
  Authentication auth=new Authentication();
  auth.setUsername(username);
  if (authTypes.getDigest() != null) {
    auth.setDigest(connectionID,password);
  }
 else   if (authTypes.getPassword() != null) {
    auth.setPassword(password);
  }
 else {
    throw new XMPPException(""String_Node_Str"");
  }
  auth.setResource(resource);
  collector=packetReader.createPacketCollector(new PacketIDFilter(auth.getPacketID()));
  packetWriter.sendPacket(auth);
  response=(IQ)collector.nextResult(5000);
  if (response == null) {
    throw new XMPPException(""String_Node_Str"");
  }
 else   if (response.getType() == IQ.Type.ERROR) {
    throw new XMPPException(response.getError());
  }
  collector.cancel();
  packetWriter.sendPacket(new Presence(Presence.Type.AVAILABLE));
  this.roster=new Roster(this);
  roster.reload();
  authenticated=true;
  if (DEBUG_ENABLED) {
    String title=""String_Node_Str"" + username + ""String_Node_Str""+ getHost()+ ""String_Node_Str""+ getPort();
    if (resource != null) {
      title+=""String_Node_Str"" + resource;
    }
    debugFrame.setTitle(title);
  }
}","/** 
 * Logs in to the server using the strongest authentication mode supported by the server, then set our presence to available. If more than five seconds elapses in each step of the authentication process without a response from the server, or if an error occurs, a XMPPException will be thrown.
 * @param username the username.
 * @param password the password.
 * @param resource the resource.
 * @throws XMPPException if an error occurs.
 * @throws IllegalStateException if not connected to the server, or already logged into the serrver.
 */
public synchronized void login(String username,String password,String resource) throws XMPPException {
  if (!isConnected()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (authenticated) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.username=username;
  this.resource=resource;
  Authentication discoveryAuth=new Authentication();
  discoveryAuth.setType(IQ.Type.GET);
  discoveryAuth.setUsername(username);
  PacketCollector collector=packetReader.createPacketCollector(new PacketIDFilter(discoveryAuth.getPacketID()));
  packetWriter.sendPacket(discoveryAuth);
  IQ response=(IQ)collector.nextResult(5000);
  if (response == null) {
    throw new XMPPException(""String_Node_Str"");
  }
 else   if (response.getType() == IQ.Type.ERROR) {
    throw new XMPPException(response.getError());
  }
  Authentication authTypes=(Authentication)response;
  collector.cancel();
  Authentication auth=new Authentication();
  auth.setUsername(username);
  if (authTypes.getDigest() != null) {
    auth.setDigest(connectionID,password);
  }
 else   if (authTypes.getPassword() != null) {
    auth.setPassword(password);
  }
 else {
    throw new XMPPException(""String_Node_Str"");
  }
  auth.setResource(resource);
  collector=packetReader.createPacketCollector(new PacketIDFilter(auth.getPacketID()));
  packetWriter.sendPacket(auth);
  response=(IQ)collector.nextResult(5000);
  if (response == null) {
    throw new XMPPException(""String_Node_Str"");
  }
 else   if (response.getType() == IQ.Type.ERROR) {
    throw new XMPPException(response.getError());
  }
  collector.cancel();
  this.roster=new Roster(this);
  roster.reload();
  packetWriter.sendPacket(new Presence(Presence.Type.AVAILABLE));
  authenticated=true;
  if (DEBUG_ENABLED) {
    String title=""String_Node_Str"" + username + ""String_Node_Str""+ getHost()+ ""String_Node_Str""+ getPort();
    if (resource != null) {
      title+=""String_Node_Str"" + resource;
    }
    debugFrame.setTitle(title);
  }
}"
20521,"/** 
 * Sets the name associated with this entry.
 * @param name the name.
 */
public void setName(String name){
  if (this.name.equals(name)) {
    return;
  }
  this.name=name;
  RosterPacket packet=new RosterPacket();
  packet.setType(IQ.Type.SET);
  packet.addRosterItem(toRosterItem(this));
  connection.sendPacket(packet);
}","/** 
 * Sets the name associated with this entry.
 * @param name the name.
 */
public void setName(String name){
  if (name != null && this.name.equals(name)) {
    return;
  }
  this.name=name;
  RosterPacket packet=new RosterPacket();
  packet.setType(IQ.Type.SET);
  packet.addRosterItem(toRosterItem(this));
  connection.sendPacket(packet);
}"
20522,"/** 
 * Parses an IQ packet.
 * @param parser the XML parser, positioned at the start of an IQ packet.
 * @return an IQ object.
 * @throws Exception if an exception occurs while parsing the packet.
 */
private static Packet parseIQ(XmlPullParser parser) throws Exception {
  IQ iqPacket=null;
  String id=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String to=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String from=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  IQ.Type type=IQ.Type.fromString(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  Error error=null;
  Map properties=null;
  boolean done=false;
  while (!done) {
    int eventType=parser.next();
    if (eventType == parser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        String namespace=parser.getNamespace();
        if (namespace.equals(""String_Node_Str"")) {
          iqPacket=parseAuthentication(parser);
        }
 else         if (namespace.equals(""String_Node_Str"")) {
          iqPacket=parseRoster(parser);
        }
      }
 else       if (parser.getName().equals(""String_Node_Str"")) {
        error=parseError(parser);
      }
 else       if (parser.getName().equals(""String_Node_Str"") && parser.getNamespace().equals(PROPERTIES_NAMESPACE)) {
        properties=parseProperties(parser);
      }
    }
 else     if (eventType == parser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  if (iqPacket == null) {
    iqPacket=new IQ();
  }
  iqPacket.setPacketID(id);
  iqPacket.setTo(to);
  iqPacket.setFrom(from);
  iqPacket.setType(type);
  iqPacket.setError(error);
  if (properties != null) {
    for (Iterator i=properties.keySet().iterator(); i.hasNext(); ) {
      String name=(String)i.next();
      iqPacket.setProperty(name,properties.get(name));
    }
  }
  return iqPacket;
}","/** 
 * Parses an IQ packet.
 * @param parser the XML parser, positioned at the start of an IQ packet.
 * @return an IQ object.
 * @throws Exception if an exception occurs while parsing the packet.
 */
private static Packet parseIQ(XmlPullParser parser) throws Exception {
  IQ iqPacket=null;
  String id=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String to=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  String from=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  IQ.Type type=IQ.Type.fromString(parser.getAttributeValue(""String_Node_Str"",""String_Node_Str""));
  XMPPError error=null;
  Map properties=null;
  boolean done=false;
  while (!done) {
    int eventType=parser.next();
    if (eventType == parser.START_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        String namespace=parser.getNamespace();
        if (namespace.equals(""String_Node_Str"")) {
          iqPacket=parseAuthentication(parser);
        }
 else         if (namespace.equals(""String_Node_Str"")) {
          iqPacket=parseRoster(parser);
        }
      }
 else       if (parser.getName().equals(""String_Node_Str"")) {
        error=parseError(parser);
      }
 else       if (parser.getName().equals(""String_Node_Str"") && parser.getNamespace().equals(PROPERTIES_NAMESPACE)) {
        properties=parseProperties(parser);
      }
    }
 else     if (eventType == parser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        done=true;
      }
    }
  }
  if (iqPacket == null) {
    iqPacket=new IQ();
  }
  iqPacket.setPacketID(id);
  iqPacket.setTo(to);
  iqPacket.setFrom(from);
  iqPacket.setType(type);
  iqPacket.setError(error);
  if (properties != null) {
    for (Iterator i=properties.keySet().iterator(); i.hasNext(); ) {
      String name=(String)i.next();
      iqPacket.setProperty(name,properties.get(name));
    }
  }
  return iqPacket;
}"
20523,"private static Error parseError(XmlPullParser parser) throws Exception {
  String errorCode=null;
  for (int i=0; i < parser.getAttributeCount(); i++) {
    if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
      errorCode=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
  String message=parser.nextText();
  while (true) {
    if (parser.getEventType() == parser.END_TAG && parser.getName().equals(""String_Node_Str"")) {
      break;
    }
    parser.next();
  }
  return new Error(Integer.parseInt(errorCode),message);
}","private static XMPPError parseError(XmlPullParser parser) throws Exception {
  String errorCode=null;
  for (int i=0; i < parser.getAttributeCount(); i++) {
    if (parser.getAttributeName(i).equals(""String_Node_Str"")) {
      errorCode=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
  String message=parser.nextText();
  while (true) {
    if (parser.getEventType() == parser.END_TAG && parser.getName().equals(""String_Node_Str"")) {
      break;
    }
    parser.next();
  }
  return new XMPPError(Integer.parseInt(errorCode),message);
}"
20524,"/** 
 * Parse a properties sub-packet. If any errors occur while de-serializing Java object properties, an exception will be printed and not thrown since a thrown exception will shut down the entire connection. ClassCastExceptions will occur when both the sender and receiver of the packet don't have identical versions of the same class.
 * @param parser the XML parser, positioned at the start of a properties sub-packet.
 * @return a map of the properties.
 * @throws Exception if an error occurs while parsing the properties.
 */
private static Map parseProperties(XmlPullParser parser) throws Exception {
  Map properties=new HashMap();
  while (true) {
    int eventType=parser.next();
    if (eventType == parser.START_TAG) {
      String name=parser.nextText();
      parser.next();
      String type=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      String valueText=parser.nextText();
      Object value=null;
      if (""String_Node_Str"".equals(type)) {
        value=new Integer(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Long(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Float(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Double(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Boolean(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        try {
          byte[] bytes=StringUtils.decodeBase64(valueText).getBytes(""String_Node_Str"");
          ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(bytes));
          value=in.readObject();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      if (name != null && value != null) {
        properties.put(name,value);
      }
    }
 else     if (eventType == parser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        break;
      }
    }
  }
  return properties;
}","/** 
 * Parse a properties sub-packet. If any errors occur while de-serializing Java object properties, an exception will be printed and not thrown since a thrown exception will shut down the entire connection. ClassCastExceptions will occur when both the sender and receiver of the packet don't have identical versions of the same class.
 * @param parser the XML parser, positioned at the start of a properties sub-packet.
 * @return a map of the properties.
 * @throws Exception if an error occurs while parsing the properties.
 */
private static Map parseProperties(XmlPullParser parser) throws Exception {
  Map properties=new HashMap();
  while (true) {
    int eventType=parser.next();
    if (eventType == parser.START_TAG && parser.getName().equals(""String_Node_Str"")) {
      parser.next();
      String name=parser.nextText();
      parser.next();
      String type=parser.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
      String valueText=parser.nextText();
      Object value=null;
      if (""String_Node_Str"".equals(type)) {
        value=new Integer(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Long(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Float(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Double(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=new Boolean(valueText);
      }
 else       if (""String_Node_Str"".equals(type)) {
        value=valueText;
      }
 else       if (""String_Node_Str"".equals(type)) {
        try {
          byte[] bytes=StringUtils.decodeBase64(valueText).getBytes(""String_Node_Str"");
          ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(bytes));
          value=in.readObject();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      if (name != null && value != null) {
        properties.put(name,value);
      }
    }
 else     if (eventType == parser.END_TAG) {
      if (parser.getName().equals(""String_Node_Str"")) {
        break;
      }
    }
  }
  return properties;
}"
20525,"@Override public CharSequence decorateScript(Component component,CharSequence script){
  return ""String_Node_Str"" + script;
}","@Override public CharSequence decorateScript(final Component component,final CharSequence script){
  return LATCH + script;
}"
20526,"@Override public CharSequence decorateOnFailureScript(Component component,CharSequence script){
  return ""String_Node_Str"";
}","@Override public CharSequence decorateOnFailureScript(final Component component,final CharSequence script){
  return RESET + script;
}"
20527,"@Override public CharSequence decorateOnSuccessScript(Component component,CharSequence script){
  return ""String_Node_Str"";
}","@Override public CharSequence decorateOnSuccessScript(final Component component,final CharSequence script){
  return RESET + script;
}"
20528,"/** 
 * @param invitation
 * @param comment    if not-null comment will be updated
 */
private void _save(final Invitation invitation,String comment){
  validate(invitation);
  boolean isNew=invitation.isNew();
  boolean isNotifyManager=false;
  Invitation origInvitation=null;
  if (!isNew) {
    invitationRepo.detach(invitation);
    origInvitation=invitationRepo.findOne(invitation.getId());
    Check.isTrue(invitation != origInvitation);
    if (origInvitation.getStatus() != invitation.getStatus()) {
      invitation.setDate(new Date());
      if (origInvitation.getStatus() == RSVPStatus.ACCEPTED) {
        if (!securityService.getUser().isManager() && !origInvitation.getEvent().isCanceled()) {
          isNotifyManager=true;
        }
      }
    }
    if (invitation.getDate() == null) {
      invitation.setDate(new Date());
    }
    Comment origComment=commentManager.findByInvitationAndAuthor(origInvitation,securityService.getUser(),0);
    activityManager.onInvitationUpdated(invitation,origInvitation,comment,(origComment == null) ? null : origComment.getText());
  }
  invitationRepo.save(invitation);
  if (comment != null) {
    commentManager.updateComment(invitation,comment,securityService.getUser());
  }
  if (isNotifyManager) {
    try {
      notificationService.sendStatusChangedMessage(invitation);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * @param invitation
 * @param comment    if not-null comment will be updated
 */
private void _save(final Invitation invitation,String comment){
  validate(invitation);
  boolean isNew=invitation.isNew();
  boolean isNotifyManager=false;
  Invitation origInvitation=null;
  if (!isNew) {
    invitationRepo.detach(invitation);
    origInvitation=invitationRepo.findOne(invitation.getId());
    Check.isTrue(invitation != origInvitation);
    if (origInvitation.getStatus() != invitation.getStatus()) {
      invitation.setDate(new Date());
      if (origInvitation.getStatus() == RSVPStatus.ACCEPTED) {
        if (!securityService.getUser().isManager() && !origInvitation.getEvent().isCanceled()) {
          isNotifyManager=true;
        }
      }
    }
    if (invitation.getDate() == null) {
      invitation.setDate(new Date());
    }
    Comment origComment=commentManager.findByInvitationAndAuthor(origInvitation,securityService.getUser(),0);
    activityManager.onInvitationUpdated(invitation,origInvitation,comment,(origComment == null) ? null : origComment.getText());
  }
  invitationRepo.save(invitation);
  if (comment != null) {
    commentManager.updateOrRemoveComment(invitation,comment,securityService.getUser());
  }
  if (isNotifyManager) {
    try {
      notificationService.sendStatusChangedMessage(invitation);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
}"
20529,"/** 
 * Searches for user-cal-items that match the event date. if autoDecline is true the invitation will be declined.
 * @return true if invitation is auto declined.
 */
private boolean checkForAutoDecline(Invitation invitation){
  DateTime eventDate=invitation.getEvent().getDateTime();
  List<CalItem> list=calendarManager.findAllByUserAndRange(invitation.getUser(),eventDate,eventDate);
  for (  CalItem calItem : list) {
    if (calItem.isAutoDecline()) {
      invitation.setStatus(RSVPStatus.DECLINED);
      invitationRepo.save(invitation);
      String comment;
      if (calItem.getType() == CalItem.Type.OTHER) {
        comment=calItem.getSummary();
      }
 else {
        comment=messageSource.getMessage(CalItem.Type.getResourceKey(calItem.getType()));
      }
      if (calItem.isSingleDay()) {
        comment+=String.format(""String_Node_Str"",Dates.formatDateShort(calItem.getStartDateTime().toDate()));
      }
 else {
        comment+=String.format(""String_Node_Str"",Dates.formatDateShort(calItem.getStartDateTime().toDate()),Dates.formatDateShort(calItem.getEndDateTime().toDate()));
      }
      commentManager.updateComment(invitation,comment,invitation.getUser());
      return true;
    }
  }
  return false;
}","/** 
 * Searches for user-cal-items that match the event date. if autoDecline is true the invitation will be declined.
 * @return true if invitation is auto declined.
 */
private boolean checkForAutoDecline(Invitation invitation){
  DateTime eventDate=invitation.getEvent().getDateTime();
  List<CalItem> list=calendarManager.findAllByUserAndRange(invitation.getUser(),eventDate,eventDate);
  for (  CalItem calItem : list) {
    if (calItem.isAutoDecline()) {
      invitation.setStatus(RSVPStatus.DECLINED);
      invitationRepo.save(invitation);
      String comment;
      if (calItem.getType() == CalItem.Type.OTHER) {
        comment=calItem.getSummary();
      }
 else {
        comment=messageSource.getMessage(CalItem.Type.getResourceKey(calItem.getType()));
      }
      if (calItem.isSingleDay()) {
        comment+=String.format(""String_Node_Str"",Dates.formatDateShort(calItem.getStartDateTime().toDate()));
      }
 else {
        comment+=String.format(""String_Node_Str"",Dates.formatDateShort(calItem.getStartDateTime().toDate()),Dates.formatDateShort(calItem.getEndDateTime().toDate()));
      }
      commentManager.updateOrRemoveComment(invitation,comment,invitation.getUser());
      return true;
    }
  }
  return false;
}"
20530,"@Override @Transactional(readOnly=false,propagation=Propagation.REQUIRED) public void onInvitationUpdated(final Invitation invitation){
  Invitation origInvitation=invitationManager.loadById(invitation.getId(),Invitation_.event,Invitation_.user);
  Check.isTrue(invitation != origInvitation);
  Activity entity=newInstance();
  InvitationUpdateMessage message=new InvitationUpdateMessage(origInvitation.getEvent());
  message.setUserName(origInvitation.getName());
  boolean changed=false;
  if (!entity.getUser().equals(origInvitation.getUser())) {
    message.setManagerName(entity.getUser().getFullname());
    changed=true;
  }
  if (invitation.getComment() != null && ObjectUtils.notEqual(invitation.getComment(),origInvitation.getComment())) {
    message.setComment(invitation.getComment());
    changed=true;
  }
  if (invitation.getManagerComment() != null && ObjectUtils.notEqual(invitation.getManagerComment(),origInvitation.getManagerComment())) {
    message.setManagerComment(invitation.getManagerComment());
    changed=true;
  }
  if (ObjectUtils.notEqual(invitation.getStatus(),origInvitation.getStatus())) {
    message.setStatus(invitation.getStatus());
    changed=true;
  }
  entity.setMessage(message);
  if (changed) {
    removeDuplicates(entity,message);
    save(entity);
  }
}","@Override @Transactional(readOnly=false,propagation=Propagation.REQUIRED) public void onInvitationUpdated(final Invitation invitation){
  Invitation origInvitation=invitationManager.loadById(invitation.getId(),Invitation_.event,Invitation_.user);
  Check.isTrue(invitation != origInvitation);
  Activity entity=newInstance();
  InvitationUpdateMessage message=new InvitationUpdateMessage(origInvitation.getEvent());
  message.setUserName(origInvitation.getName());
  boolean changed=false;
  if (origInvitation.getEvent().isCanceled()) {
    return;
  }
  if (!entity.getUser().equals(origInvitation.getUser())) {
    message.setManagerName(entity.getUser().getFullname());
    changed=true;
  }
  if (invitation.getComment() != null && ObjectUtils.notEqual(invitation.getComment(),origInvitation.getComment())) {
    message.setComment(invitation.getComment());
    changed=true;
  }
  if (invitation.getManagerComment() != null && ObjectUtils.notEqual(invitation.getManagerComment(),origInvitation.getManagerComment())) {
    message.setManagerComment(invitation.getManagerComment());
    changed=true;
  }
  if (ObjectUtils.notEqual(invitation.getStatus(),origInvitation.getStatus())) {
    message.setStatus(invitation.getStatus());
    changed=true;
  }
  entity.setMessage(message);
  if (changed) {
    removeDuplicates(entity,message);
    save(entity);
  }
}"
20531,"@Override @Transactional(readOnly=false) public void save(final Invitation invitation){
  validate(invitation);
  boolean isNew=invitation.isNew();
  boolean isNotifyManager=false;
  Invitation origInvitation=null;
  if (!isNew) {
    invitationRepo.detach(invitation);
    origInvitation=invitationRepo.findOne(invitation.getId());
    Check.isTrue(invitation != origInvitation);
    if (origInvitation.getStatus() != invitation.getStatus()) {
      invitation.setDate(new Date());
      if (origInvitation.getStatus() == RSVPStatus.ACCEPTED) {
        if (!securityService.getUser().isManager()) {
          isNotifyManager=true;
        }
      }
    }
    if (invitation.getDate() == null) {
      invitation.setDate(new Date());
    }
    activityManager.onInvitationUpdated(invitation);
  }
  invitationRepo.save(invitation);
  if (isNotifyManager) {
    try {
      notificationService.sendStatusChangedMessage(invitation);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
}","@Override @Transactional(readOnly=false) public void save(final Invitation invitation){
  validate(invitation);
  boolean isNew=invitation.isNew();
  boolean isNotifyManager=false;
  Invitation origInvitation=null;
  if (!isNew) {
    invitationRepo.detach(invitation);
    origInvitation=invitationRepo.findOne(invitation.getId());
    Check.isTrue(invitation != origInvitation);
    if (origInvitation.getStatus() != invitation.getStatus()) {
      invitation.setDate(new Date());
      if (origInvitation.getStatus() == RSVPStatus.ACCEPTED) {
        if (!securityService.getUser().isManager() && !origInvitation.getEvent().isCanceled()) {
          isNotifyManager=true;
        }
      }
    }
    if (invitation.getDate() == null) {
      invitation.setDate(new Date());
    }
    activityManager.onInvitationUpdated(invitation);
  }
  invitationRepo.save(invitation);
  if (isNotifyManager) {
    try {
      notificationService.sendStatusChangedMessage(invitation);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
    }
  }
}"
20532,"@Test public void testRender(){
  wicketTester.startComponentInPage(new VenueEditPanel(new VenueModel()));
  wicketTester.dumpComponentWithPage();
}","@Test public void testRender(){
  wicketTester.startComponentInPage(new VenueEditPanel(new VenueModel()));
  wicketTester.dumpComponentWithPage();
  wicketTester.assertContains(""String_Node_Str"");
}"
20533,"public EventPage(IModel<Event> model){
  super(model);
  init(model);
}","public EventPage(IModel<Event> model){
  super(model);
  init(model);
  log.warn(""String_Node_Str"");
}"
20534,"public EventListPanel(final UserModel userModel,final IModel<List<Event>> listModel){
  WebMarkupContainer listContainer=new WebMarkupContainer(""String_Node_Str"");
  add(listContainer);
  listContainer.add(new WebMarkupContainer(""String_Node_Str""){
    @Override public boolean isVisible(){
      return listModel.getObject().isEmpty();
    }
  }
);
  listContainer.add(new EntityListView<Event>(""String_Node_Str"",listModel){
    @Override public boolean isVisible(){
      return !getList().isEmpty();
    }
    @Override protected void populateItem(    final ListItem<Event> item){
      final Event event=item.getModelObject();
      final EventModel eventModel=new EventModel(item.getModel());
      if (isNextEvent(event,getList())) {
        item.add(AttributeModifier.append(""String_Node_Str"",""String_Node_Str""));
      }
      Link link=Links.eventLink(""String_Node_Str"",event.getId());
      item.add(link);
      link.add(new Label(""String_Node_Str"",Dates.formatDateShortWithWeekday(event.getDate())));
      link.add(new Label(""String_Node_Str"",Dates.formatTimeShort(event.getTime())));
      item.add(new Label(""String_Node_Str"",new ResourceModel(EventType.from(event).getResourceKey())));
      item.add(new Label(""String_Node_Str"",event.getTeam().getName()));
      item.add(new Label(""String_Node_Str"",event.getSummary()));
      final Invitation invitation=getInvitation(event,userModel.getObject());
      RSVPStatus status=invitation.getStatus();
      item.add(new QuickResponseLabel(""String_Node_Str"",status == RSVPStatus.NORESPONSE ? null : status){
        @Override protected void submitStatus(        final RSVPStatus status){
          responseManager.respond(eventModel.getId(),userModel.getId(),status);
        }
        @Override public boolean isEnabled(){
          return !eventManager.isEventClosed(event);
        }
      }
);
    }
    private Invitation getInvitation(    final Event event,    final User user){
      return invitationManager.loadByEventAndUser(event,user);
    }
  }
);
  listContainer.add(new AjaxEventListener(Event.class));
}","public EventListPanel(final UserModel userModel,final IModel<List<Event>> listModel){
  WebMarkupContainer listContainer=new WebMarkupContainer(""String_Node_Str"");
  add(listContainer);
  listContainer.add(new WebMarkupContainer(""String_Node_Str""){
    @Override public boolean isVisible(){
      return listModel.getObject().isEmpty();
    }
  }
);
  listContainer.add(new EntityListView<Event>(""String_Node_Str"",listModel){
    @Override public boolean isVisible(){
      return !getList().isEmpty();
    }
    @Override protected void populateItem(    final ListItem<Event> item){
      final Event event=item.getModelObject();
      final EventModel eventModel=new EventModel(item.getModel());
      if (isNextEvent(event,getList())) {
        item.add(AttributeModifier.append(""String_Node_Str"",""String_Node_Str""));
      }
      Link link=Links.eventLink(""String_Node_Str"",event.getId());
      item.add(link);
      link.add(new Label(""String_Node_Str"",Dates.formatDateShortWithWeekday(event.getDate())));
      link.add(new Label(""String_Node_Str"",Dates.formatTimeShort(event.getTime())));
      item.add(new Label(""String_Node_Str"",new ResourceModel(EventType.from(event).getResourceKey())));
      item.add(new Label(""String_Node_Str"",event.getTeam().getName()));
      item.add(new Label(""String_Node_Str"",event.getSummary()));
      final Invitation invitation=getInvitation(event,userModel.getObject());
      RSVPStatus status=invitation.getStatus();
      item.add(new QuickResponseLabel(""String_Node_Str"",status == RSVPStatus.NORESPONSE ? null : status){
        @Override protected void submitStatus(        final RSVPStatus status){
          responseManager.respond(eventModel.getId(),userModel.getId(),status);
        }
        @Override public boolean isEnabled(){
          return !eventManager.isEventClosed(item.getModelObject());
        }
      }
);
    }
    private Invitation getInvitation(    final Event event,    final User user){
      return invitationManager.loadByEventAndUser(event,user);
    }
  }
);
  listContainer.add(new AjaxEventListener(Event.class));
}"
20535,"@Override protected void populateItem(final ListItem<Event> item){
  final Event event=item.getModelObject();
  final EventModel eventModel=new EventModel(item.getModel());
  if (isNextEvent(event,getList())) {
    item.add(AttributeModifier.append(""String_Node_Str"",""String_Node_Str""));
  }
  Link link=Links.eventLink(""String_Node_Str"",event.getId());
  item.add(link);
  link.add(new Label(""String_Node_Str"",Dates.formatDateShortWithWeekday(event.getDate())));
  link.add(new Label(""String_Node_Str"",Dates.formatTimeShort(event.getTime())));
  item.add(new Label(""String_Node_Str"",new ResourceModel(EventType.from(event).getResourceKey())));
  item.add(new Label(""String_Node_Str"",event.getTeam().getName()));
  item.add(new Label(""String_Node_Str"",event.getSummary()));
  final Invitation invitation=getInvitation(event,userModel.getObject());
  RSVPStatus status=invitation.getStatus();
  item.add(new QuickResponseLabel(""String_Node_Str"",status == RSVPStatus.NORESPONSE ? null : status){
    @Override protected void submitStatus(    final RSVPStatus status){
      responseManager.respond(eventModel.getId(),userModel.getId(),status);
    }
    @Override public boolean isEnabled(){
      return !eventManager.isEventClosed(event);
    }
  }
);
}","@Override protected void populateItem(final ListItem<Event> item){
  final Event event=item.getModelObject();
  final EventModel eventModel=new EventModel(item.getModel());
  if (isNextEvent(event,getList())) {
    item.add(AttributeModifier.append(""String_Node_Str"",""String_Node_Str""));
  }
  Link link=Links.eventLink(""String_Node_Str"",event.getId());
  item.add(link);
  link.add(new Label(""String_Node_Str"",Dates.formatDateShortWithWeekday(event.getDate())));
  link.add(new Label(""String_Node_Str"",Dates.formatTimeShort(event.getTime())));
  item.add(new Label(""String_Node_Str"",new ResourceModel(EventType.from(event).getResourceKey())));
  item.add(new Label(""String_Node_Str"",event.getTeam().getName()));
  item.add(new Label(""String_Node_Str"",event.getSummary()));
  final Invitation invitation=getInvitation(event,userModel.getObject());
  RSVPStatus status=invitation.getStatus();
  item.add(new QuickResponseLabel(""String_Node_Str"",status == RSVPStatus.NORESPONSE ? null : status){
    @Override protected void submitStatus(    final RSVPStatus status){
      responseManager.respond(eventModel.getId(),userModel.getId(),status);
    }
    @Override public boolean isEnabled(){
      return !eventManager.isEventClosed(item.getModelObject());
    }
  }
);
}"
20536,"@Override public boolean isEnabled(){
  return !eventManager.isEventClosed(event);
}","@Override public boolean isEnabled(){
  return !eventManager.isEventClosed(item.getModelObject());
}"
20537,"public synchronized static void setViolationMessageRenderer(final ViolationMessageRenderer renderer){
  Assert.parameterNotNull(renderer,""String_Node_Str"");
  final Application app=Application.get();
  app.setMetaData(violationMessageRendererKey,renderer);
}","public synchronized static void setViolationMessageRenderer(final ViolationMessageRenderer renderer){
  Preconditions.checkNotNull(renderer,""String_Node_Str"");
  final Application app=Application.get();
  app.setMetaData(violationMessageRendererKey,renderer);
}"
20538,"public WicketSessionLocaleMessageInterpolator(final MessageInterpolator delegate){
  this.delegate=delegate;
  Assert.parameterNotNull(delegate,""String_Node_Str"");
}","public WicketSessionLocaleMessageInterpolator(final MessageInterpolator delegate){
  this.delegate=delegate;
  Preconditions.checkNotNull(delegate,""String_Node_Str"");
}"
20539,"@Override public InternetAddress[] convert(final Invitation element){
  return element.getInternetAddresses();
}","@Override public InternetAddress[] convert(final Invitation element){
  if (element.hasEmail()) {
    return element.getInternetAddresses();
  }
 else {
    return null;
  }
}"
20540,"public static ExternalLink mailLink(final String id,String emailAddress,final String label){
  if (label == null) {
    return new ExternalLink(id,""String_Node_Str"" + emailAddress);
  }
 else {
    return new ExternalLink(id,""String_Node_Str"" + emailAddress,label);
  }
}","public static ExternalLink mailLink(final String id,List<InternetAddress> emailAddresses){
  List<String> stringList=Collections.convert(emailAddresses,new Collections.IElementConverter<InternetAddress,String>(){
    @Override public String convert(    final InternetAddress ia){
      return ia.getAddress();
    }
  }
);
  String href=StringUtils.join(stringList,""String_Node_Str"");
  href=""String_Node_Str"" + URLEncoder.encode(href);
  return new ExternalLink(id,href);
}"
20541,"public EventSecondaryPanel(IModel<Event> model){
  setRenderBodyOnly(true);
  add(createEventSelectPanel(model));
  final IModel<Invitation> invitationModel=getInvitationModel(model);
  InvitationFormPanel invitationFormPanel=new InvitationFormPanel(AjaxSlideTogglePanel.WRAPPED_PANEL_ID,invitationModel){
    @Override protected void onSubmit(    final Invitation invitation,    final AjaxRequestTarget target){
      invitationManager.save(invitation);
      AjaxEventSender.entityEvent(this,Invitation.class);
    }
  }
;
  invitationFormPanel.setVisible(invitationModel.getObject() != null && invitationModel.getObject().getStatus() == RSVPStatus.NORESPONSE);
  add(new AjaxSlideTogglePanel(""String_Node_Str"",""String_Node_Str"",invitationFormPanel){
    @Override public boolean isVisible(){
      return invitationModel.getObject() != null;
    }
  }
);
  add(new EventDetailsPanel(model,View.PLAYER));
  add(Links.mailLink(""String_Node_Str"",getAllEmailAddresses(model.getObject()),null));
  add(Links.mailLink(""String_Node_Str"",getManagerEmailAddress(model.getObject()),null));
}","public EventSecondaryPanel(IModel<Event> model){
  setRenderBodyOnly(true);
  add(createEventSelectPanel(model));
  final IModel<Invitation> invitationModel=getInvitationModel(model);
  InvitationFormPanel invitationFormPanel=new InvitationFormPanel(AjaxSlideTogglePanel.WRAPPED_PANEL_ID,invitationModel){
    @Override protected void onSubmit(    final Invitation invitation,    final AjaxRequestTarget target){
      invitationManager.save(invitation);
      AjaxEventSender.entityEvent(this,Invitation.class);
    }
  }
;
  invitationFormPanel.setVisible(invitationModel.getObject() != null && invitationModel.getObject().getStatus() == RSVPStatus.NORESPONSE);
  add(new AjaxSlideTogglePanel(""String_Node_Str"",""String_Node_Str"",invitationFormPanel){
    @Override public boolean isVisible(){
      return invitationModel.getObject() != null;
    }
  }
);
  add(new EventDetailsPanel(model,View.PLAYER));
  add(Links.mailLink(""String_Node_Str"",invitationManager.getAddressesForfAllInvitees(model.getObject())));
  add(Links.mailLink(""String_Node_Str"",getManagerEmailAddress(model.getObject()),null));
}"
20542,"public void setLatLng(LatLng latLng){
  this.lat=latLng.getLat();
  this.lng=latLng.getLng();
}","public void setLatLng(LatLng latLng){
  if (latLng == null) {
    this.lat=null;
    this.lng=null;
  }
 else {
    this.lat=latLng.getLat();
    this.lng=latLng.getLng();
  }
}"
20543,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form<?> form){
  String value=getAddress();
  if (StringUtils.isBlank(value)) {
    resultListModel.setObject(Collections.<GeocodingResult>emptyList());
  }
 else {
    List<GeocodingResult> results=geocodingService.geocode(value);
    resultListModel.setObject(results);
  }
  self.setVisible(true);
  target.add(self);
  AjaxEventSender.send(this,GeocodingResult.class);
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form<?> form){
  String value=getAddress();
  if (StringUtils.isBlank(value)) {
    resultListModel.setObject(Collections.<GeocodingResult>emptyList());
  }
 else {
    List<GeocodingResult> results=null;
    try {
      results=geocodingService.geocode(value);
      resultListModel.setObject(results);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + value + ""String_Node_Str""+ e.getMessage(),e);
      resultListModel.setObject(Collections.<GeocodingResult>emptyList());
    }
  }
  self.setVisible(true);
  target.add(self);
  AjaxEventSender.send(this,GeocodingResult.class);
}"
20544,"public GeocodePanel(){
  AjaxSubmitLink geocodeButton=new AjaxSubmitLink(""String_Node_Str""){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      String value=getAddress();
      if (StringUtils.isBlank(value)) {
        resultListModel.setObject(Collections.<GeocodingResult>emptyList());
      }
 else {
        List<GeocodingResult> results=geocodingService.geocode(value);
        resultListModel.setObject(results);
      }
      self.setVisible(true);
      target.add(self);
      AjaxEventSender.send(this,GeocodingResult.class);
    }
  }
;
  geocodeButton.setDefaultFormProcessing(false);
  getGeocodeButtonParent().add(geocodeButton);
  ResultsPanel resultsPanel;
  add(resultsPanel=new ResultsPanel(resultListModel){
    @Override protected void onSelect(    final AjaxRequestTarget target,    final GeocodingResult result){
      self.onSelect(target,result);
    }
    @Override public boolean isVisible(){
      return resultListModel.getObject() != null;
    }
  }
);
  resultsPanel.setOnCloseCallback(new BasePanel.IOnCloseCallback(){
    @Override public void onClose(    final AjaxRequestTarget target){
      self.setVisible(false);
      target.add(self);
    }
  }
);
}","public GeocodePanel(){
  AjaxSubmitLink geocodeButton=new AjaxSubmitLink(""String_Node_Str""){
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      String value=getAddress();
      if (StringUtils.isBlank(value)) {
        resultListModel.setObject(Collections.<GeocodingResult>emptyList());
      }
 else {
        List<GeocodingResult> results=null;
        try {
          results=geocodingService.geocode(value);
          resultListModel.setObject(results);
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"" + value + ""String_Node_Str""+ e.getMessage(),e);
          resultListModel.setObject(Collections.<GeocodingResult>emptyList());
        }
      }
      self.setVisible(true);
      target.add(self);
      AjaxEventSender.send(this,GeocodingResult.class);
    }
  }
;
  geocodeButton.setDefaultFormProcessing(false);
  getGeocodeButtonParent().add(geocodeButton);
  ResultsPanel resultsPanel;
  add(resultsPanel=new ResultsPanel(resultListModel){
    @Override protected void onSelect(    final AjaxRequestTarget target,    final GeocodingResult result){
      self.onSelect(target,result);
    }
    @Override public boolean isVisible(){
      return resultListModel.getObject() != null;
    }
  }
);
  resultsPanel.setOnCloseCallback(new BasePanel.IOnCloseCallback(){
    @Override public void onClose(    final AjaxRequestTarget target){
      self.setVisible(false);
      target.add(self);
    }
  }
);
}"
20545,"@Override public Notification newEventNotification(final Event eventIn,String eventLink){
  Event event=eventManager.loadById(eventIn.getId(),Event_.venue,Event_.team,AbstractSoccerEvent_.uniform,Match_.opponent);
  Notification notification=new Notification();
  final Map<String,Object> model=new HashMap<String,Object>();
  model.put(""String_Node_Str"",event);
  model.put(""String_Node_Str"",Dates.formatDateMedium(event.getDate()));
  model.put(""String_Node_Str"",Dates.formatTimeShort(event.getTime()));
  model.put(""String_Node_Str"",Dates.formatDateTimeShort(event.getDateTime()));
  model.put(""String_Node_Str"",EventType.Match);
  model.put(""String_Node_Str"",eventLink);
  model.put(""String_Node_Str"",EventType.isSoccerEvent(event));
  if (event.getVenue() != null) {
    model.put(""String_Node_Str"",Links.getDirectionsLink(event.getVenue()));
  }
  if (EventType.isSoccerEvent(event)) {
    AbstractSoccerEvent soccerEvent=(AbstractSoccerEvent)event;
    model.put(""String_Node_Str"",Dates.formatTimeShort(soccerEvent.getKickoff()));
    model.put(""String_Node_Str"",Surface.render(soccerEvent.getSurfaceList()));
    if (soccerEvent.getUniform() != null) {
      model.put(""String_Node_Str"",new StringResourceModel(""String_Node_Str"",Model.of(soccerEvent.getUniform())).getObject());
    }
  }
  notification.setSubject(templateService.mergeTemplate(EmailTemplate.NOTIFICATION_EVENT.getSubject(),model));
  notification.setBody(templateService.mergeTemplate(EmailTemplate.NOTIFICATION_EVENT.getContent(),model));
  return notification;
}","@Override public Notification newEventNotification(final Event eventIn,String eventLink){
  Event event=eventManager.loadById(eventIn.getId(),Event_.venue,Event_.team,AbstractSoccerEvent_.uniform,Match_.opponent);
  Notification notification=new Notification();
  final Map<String,Object> model=new HashMap<String,Object>();
  model.put(""String_Node_Str"",event);
  model.put(""String_Node_Str"",Dates.formatDateMedium(event.getDate()));
  model.put(""String_Node_Str"",Dates.formatTimeShort(event.getTime()));
  model.put(""String_Node_Str"",Dates.formatDateTimeShort(event.getDateTime()));
  model.put(""String_Node_Str"",new ResourceModel(event.getEventType().getResourceKey()).getObject());
  model.put(""String_Node_Str"",EventType.Match);
  model.put(""String_Node_Str"",eventLink);
  model.put(""String_Node_Str"",EventType.isSoccerEvent(event));
  if (event.getVenue() != null) {
    model.put(""String_Node_Str"",Links.getDirectionsLink(event.getVenue()));
  }
  if (EventType.isSoccerEvent(event)) {
    AbstractSoccerEvent soccerEvent=(AbstractSoccerEvent)event;
    model.put(""String_Node_Str"",Dates.formatTimeShort(soccerEvent.getKickoff()));
    model.put(""String_Node_Str"",Surface.render(soccerEvent.getSurfaceList()));
    if (soccerEvent.getUniform() != null) {
      model.put(""String_Node_Str"",new StringResourceModel(""String_Node_Str"",Model.of(soccerEvent.getUniform())).getObject());
    }
  }
  notification.setSubject(templateService.mergeTemplate(EmailTemplate.NOTIFICATION_EVENT.getSubject(),model));
  notification.setBody(templateService.mergeTemplate(EmailTemplate.NOTIFICATION_EVENT.getContent(),model));
  return notification;
}"
20546,"@Override protected void init(){
  super.init();
  getMarkupSettings().setStripWicketTags(false);
  getComponentInstantiationListeners().add(new RenderPerformanceListener());
}","@Override protected void init(){
  super.init();
  getMarkupSettings().setStripWicketTags(false);
  getComponentInstantiationListeners().add(new RenderPerformanceListener());
  mountPage(""String_Node_Str"",PlayerPage.class);
}"
20547,"private void init(){
  add(new FormFeedbackPanel());
  add(new MyAjaxSubmitLink(""String_Node_Str""){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      onBeforeValidation((T)form.getModelObject());
      if (!new BeanValidator(form).isValid(form.getModelObject())) {
        onError(target,form);
      }
 else {
        EntityForm.this.onSubmit(target,(Form<T>)form);
      }
    }
  }
);
}","private void init(){
  add(new FormFeedbackPanel(new ComponentFeedbackMessageFilter(this)));
  add(new MyAjaxSubmitLink(""String_Node_Str""){
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form<?> form){
      onBeforeValidation((T)form.getModelObject());
      if (!new BeanValidator(form).isValid(form.getModelObject())) {
        onError(target,form);
      }
 else {
        EntityForm.this.onSubmit(target,(Form<T>)form);
      }
    }
  }
);
}"
20548,"public FormFeedbackPanel(){
  add(new WebMarkupContainer(""String_Node_Str""){
    @Override public boolean isVisible(){
      return !Session.get().getFeedbackMessages().isEmpty();
    }
  }
);
  final FeedbackPanel feedback;
  add(feedback=new FeedbackPanel(""String_Node_Str""));
  feedback.setOutputMarkupId(true);
}","public FormFeedbackPanel(final IFeedbackMessageFilter filter){
  add(new WebMarkupContainer(""String_Node_Str""){
    @Override public boolean isVisible(){
      return !Session.get().getFeedbackMessages().isEmpty();
    }
  }
);
  final FeedbackPanel feedback;
  add(feedback=new FeedbackPanel(""String_Node_Str"",filter));
  feedback.setOutputMarkupId(true);
}"
20549,"@Override @Test public void testRender(){
  wicketTester.startComponentInPage(new FormFeedbackPanel());
  wicketTester.dumpComponentWithPage();
  wicketTester.assertInvisible(""String_Node_Str"");
}","@Override @Test public void testRender(){
  wicketTester.startComponentInPage(new FormFeedbackPanel(null));
  wicketTester.dumpComponentWithPage();
  wicketTester.assertInvisible(""String_Node_Str"");
}"
20550,"@Test public void testRenderError(){
  String message=""String_Node_Str"";
  wicketTester.getSession().getFeedbackMessages().error(null,message);
  wicketTester.startComponentInPage(new FormFeedbackPanel());
  wicketTester.dumpComponentWithPage();
  wicketTester.assertVisible(""String_Node_Str"");
  wicketTester.assertContains(message);
}","@Test public void testRenderError(){
  String message=""String_Node_Str"";
  wicketTester.getSession().getFeedbackMessages().error(null,message);
  wicketTester.startComponentInPage(new FormFeedbackPanel(null));
  wicketTester.dumpComponentWithPage();
  wicketTester.assertVisible(""String_Node_Str"");
  wicketTester.assertContains(message);
}"
20551,"/** 
 * This test verifies that the implementation of debugComponentTrees is overridden with a safe version that does not produce error logs and messes with model objects.
 */
@Test public void testDebugComponentTrees(){
  wicketTester.startPage(new EntityFormTestPage());
  wicketTester.clickLink(""String_Node_Str"");
  wicketTester.dumpPage();
  wicketTester.assertContains(TestEntity.message);
  wicketTester.startPage(new EntityFormTestPage());
  wicketTester.debugComponentTrees();
  wicketTester.clickLink(""String_Node_Str"");
  wicketTester.dumpPage();
  wicketTester.assertContains(TestEntity.message);
}","/** 
 * This test verifies that the implementation of debugComponentTrees is overridden with a safe version that does not produce error logs and messes with model objects.
 */
@Test public void testDebugComponentTrees(){
  wicketTester.startPage(new EntityFormTestPage());
  wicketTester.clickLink(""String_Node_Str"");
  wicketTester.dumpPage();
  wicketTester.assertContains(TestEntity.scriptAssertMessage);
  wicketTester.startPage(new EntityFormTestPage());
  wicketTester.debugComponentTrees();
  wicketTester.clickLink(""String_Node_Str"");
  wicketTester.dumpPage();
  wicketTester.assertContains(TestEntity.scriptAssertMessage);
}"
20552,"@Test public void testRenderError(){
  wicketTester.startPage(new EntityFormTestPage());
  wicketTester.dumpPage();
  wicketTester.clickLink(""String_Node_Str"");
  wicketTester.dumpPage();
  wicketTester.assertVisible(""String_Node_Str"");
  wicketTester.assertErrorMessages(TestEntity.message);
  wicketTester.assertContains(TestEntity.message);
}","/** 
 * Submit empty form. Verify that feedback messages are not duplicated in global feebackpanel and field level feedback panels.
 */
@Test public void testRenderError(){
  wicketTester.startPage(new EntityFormTestPage());
  wicketTester.dumpPage();
  wicketTester.clickLink(""String_Node_Str"");
  wicketTester.dumpPage();
  wicketTester.assertVisible(""String_Node_Str"");
  wicketTester.assertErrorMessagesContains(TestEntity.notBlankAssertMessage);
  wicketTester.assertContains(TestEntity.notBlankAssertMessage);
  wicketTester.assertVisible(""String_Node_Str"");
  wicketTester.assertInvisible(""String_Node_Str"");
  int matches=StringUtils.countMatches(wicketTester.getLastResponseAsString(),TestEntity.notBlankAssertMessage);
  assertEquals(1,matches);
  wicketTester.debugComponentTrees();
}"
20553,"public String getDebugComponentTrees(final String filter){
  final StringBuilder s=new StringBuilder();
  for (  final WicketTesterHelper.ComponentData obj : WicketTesterHelper.getComponentData(getLastRenderedPage())) {
    if (obj.path.matches(""String_Node_Str"" + filter + ""String_Node_Str"")) {
      s.append(""String_Node_Str"").append(obj.path).append(""String_Node_Str"").append(obj.type).append(""String_Node_Str"").append(obj.value).append(""String_Node_Str"");
    }
  }
  return s.toString();
}","public String getDebugComponentTrees(final String filter){
  final StringBuilder s=new StringBuilder();
  for (  final WicketTesterHelper.ComponentData obj : RMTWicketTesterHelper.getComponentData(getLastRenderedPage(),false)) {
    if (obj.path.matches(""String_Node_Str"" + filter + ""String_Node_Str"")) {
      s.append(""String_Node_Str"").append(obj.path).append(""String_Node_Str"").append(obj.type).append(""String_Node_Str"").append(obj.value).append(""String_Node_Str"");
    }
  }
  return s.toString();
}"
20554,"@Override public Object invoke(Object iContent,Object... params) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  try {
    Roma.context().create();
    List<SchemaEventListener> listeners=Controller.getInstance().getListeners(SchemaEventListener.class);
    boolean result=true;
    for (    SchemaEventListener listener : listeners) {
      result=listener.onBeforeEvent(iContent,this);
      if (!result) {
        log.debug(""String_Node_Str"" + listener + ""String_Node_Str"");
        return null;
      }
    }
    Object value=null;
    try {
      value=invokeFinal(iContent,params);
      for (      SchemaEventListener listener : listeners) {
        try {
          listener.onAfterEvent(iContent,this,value);
        }
 catch (        Throwable t) {
          log.error(""String_Node_Str"" + listener + ""String_Node_Str"",t);
        }
      }
      return value;
    }
 catch (    IllegalArgumentException e) {
      fireEventException(listeners,iContent,e);
      throw e;
    }
catch (    IllegalAccessException e) {
      fireEventException(listeners,iContent,e);
      throw e;
    }
catch (    InvocationTargetException e) {
      fireEventException(listeners,iContent,e);
      throw e;
    }
  }
  finally {
    Roma.context().destroy();
  }
}","@Override public Object invoke(Object iContent,Object... params) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  try {
    Roma.context().create();
    List<SchemaEventListener> listeners=Controller.getInstance().getListeners(SchemaEventListener.class);
    boolean result=true;
    for (    SchemaEventListener listener : listeners) {
      result=listener.onBeforeEvent(iContent,this);
      if (!result) {
        log.debug(""String_Node_Str"" + listener + ""String_Node_Str"");
        return null;
      }
    }
    Object value=null;
    try {
      if (params != null) {
        Iterator<SchemaParameter> param=getParameterIterator();
        Object newValues[]=new Object[params.length];
        int i=0;
        while (param.hasNext()) {
          SchemaParameter par=param.next();
          newValues[i]=convertValue(params[i],par.getType());
          i++;
        }
        value=invokeFinal(iContent,newValues);
      }
 else {
        value=invokeFinal(iContent,params);
      }
      for (      SchemaEventListener listener : listeners) {
        try {
          listener.onAfterEvent(iContent,this,value);
        }
 catch (        Throwable t) {
          log.error(""String_Node_Str"" + listener + ""String_Node_Str"",t);
        }
      }
      return value;
    }
 catch (    IllegalArgumentException e) {
      fireEventException(listeners,iContent,e);
      throw e;
    }
catch (    IllegalAccessException e) {
      fireEventException(listeners,iContent,e);
      throw e;
    }
catch (    InvocationTargetException e) {
      fireEventException(listeners,iContent,e);
      throw e;
    }
  }
  finally {
    Roma.context().destroy();
  }
}"
20555,"public SchemaEventReflection(SchemaClassDefinition iEntity,String iName,List<SchemaParameter> iOrderedParameters){
  super(iEntity,iName,null);
}","public SchemaEventReflection(SchemaClassDefinition iEntity,String iName,List<SchemaParameter> iOrderedParameters){
  super(iEntity,iName,iOrderedParameters);
}"
20556,"/** 
 * Destroy the context if the counter is 0 otherwise decrement the counter.
 */
public void destroy(){
  Integer counter=ObjectContext.getInstance().getContextComponent(CTX_CREATED);
  if (counter == 0) {
    List<ContextLifecycleListener> contextListener=Controller.getInstance().getListeners(ContextLifecycleListener.class);
    for (    ContextLifecycleListener listener : contextListener) {
      listener.onContextDestroy();
    }
    ObjectContext.getInstance().setContextComponent(CTX_CREATED,null);
  }
 else   ObjectContext.getInstance().setContextComponent(CTX_CREATED,--counter);
}","/** 
 * Destroy the context if the counter is 0 otherwise decrement the counter.
 */
public void destroy(){
  Integer counter=ObjectContext.getInstance().getContextComponent(CTX_CREATED);
  if (counter == 0) {
    try {
      List<ContextLifecycleListener> contextListener=Controller.getInstance().getListeners(ContextLifecycleListener.class);
      for (      ContextLifecycleListener listener : contextListener) {
        listener.onContextDestroy();
      }
    }
  finally {
      ObjectContext.getInstance().setContextComponent(CTX_CREATED,null);
    }
  }
 else   ObjectContext.getInstance().setContextComponent(CTX_CREATED,--counter);
}"
20557,"public void validateString(Object pojo,MultiValidationException iMultiException,SchemaField fieldInfo,Object fieldValue,String name,boolean required,Integer annotationMin,Integer annotationMax){
  String stringValue=(String)fieldValue;
  if (required && (stringValue == null || stringValue.length() == 0))   handleValidationException(pojo,iMultiException,name,""String_Node_Str"",null);
  if (annotationMin != null && (stringValue == null || stringValue.length() < annotationMin))   handleValidationException(pojo,iMultiException,name,""String_Node_Str"",String.valueOf(annotationMin));
  if (annotationMax != null && stringValue != null && stringValue.length() > annotationMax)   handleValidationException(pojo,iMultiException,name,""String_Node_Str"",String.valueOf(annotationMax));
}","public void validateString(Object pojo,MultiValidationException iMultiException,SchemaField fieldInfo,Object fieldValue,String name,boolean required,Integer annotationMin,Integer annotationMax){
  String stringValue=(String)fieldValue;
  if (required && (stringValue == null || stringValue.length() == 0))   handleValidationException(pojo,iMultiException,name,""String_Node_Str"",null);
  if (annotationMin != null && stringValue != null && stringValue.length() < annotationMin)   handleValidationException(pojo,iMultiException,name,""String_Node_Str"",String.valueOf(annotationMin));
  if (annotationMax != null && stringValue != null && stringValue.length() > annotationMax)   handleValidationException(pojo,iMultiException,name,""String_Node_Str"",String.valueOf(annotationMax));
}"
20558,"public void setField(String iFieldName,SchemaField iField){
  if (fields.containsKey(iFieldName)) {
    for (int i=0; i < orderedFields.size(); ++i) {
      if (orderedFields.get(i).getName() != null && orderedFields.get(i).getName().equals(iFieldName)) {
        orderedFields.remove(i);
        break;
      }
    }
  }
  orderedFields.add(iField);
  fields.put(iFieldName,iField);
}","public void setField(String iFieldName,SchemaField iField){
  int pos=-1;
  if (fields.containsKey(iFieldName)) {
    for (int i=0; i < orderedFields.size(); ++i) {
      if (orderedFields.get(i).getName() != null && orderedFields.get(i).getName().equals(iFieldName)) {
        orderedFields.remove(i);
        pos=i;
        break;
      }
    }
  }
  if (pos > -1 && pos < orderedFields.size()) {
    orderedFields.add(pos,iField);
  }
 else {
    orderedFields.add(iField);
  }
  fields.put(iFieldName,iField);
}"
20559,"public void setAction(String iActionName,SchemaAction iAction){
  if (actions.containsKey(iActionName)) {
    for (int i=0; i < orderedActions.size(); ++i) {
      if (orderedActions.get(i).getName() != null && orderedActions.get(i).getName().equals(iActionName)) {
        orderedActions.remove(i);
        break;
      }
    }
  }
  orderedActions.add(iAction);
  actions.put(iActionName,iAction);
}","public void setAction(String iActionName,SchemaAction iAction){
  int pos=-1;
  if (actions.containsKey(iActionName)) {
    for (int i=0; i < orderedActions.size(); ++i) {
      if (orderedActions.get(i).getName() != null && orderedActions.get(i).getName().equals(iActionName)) {
        orderedActions.remove(i);
        pos=i;
        break;
      }
    }
  }
  if (pos > -1 && pos < orderedActions.size()) {
    orderedActions.add(pos,iAction);
  }
 else {
    orderedActions.add(iAction);
  }
  actions.put(iActionName,iAction);
}"
20560,"public void configure(){
  SchemaConfiguration classDescriptor=entity.getSchemaClass().getDescriptor();
  XmlFieldAnnotation parentDescriptor=null;
  if (classDescriptor != null && classDescriptor.getType() != null && classDescriptor.getType().getFields() != null) {
    parentDescriptor=classDescriptor.getType().getField(name);
  }
  FeatureLoader.loadFieldFeatures(this,parentDescriptor);
  for (  Aspect aspect : Roma.aspects()) {
    aspect.configField(this);
  }
  if (parentDescriptor != null && parentDescriptor.getEvents() != null) {
    Set<XmlEventAnnotation> events=parentDescriptor.getEvents();
    for (    XmlEventAnnotation xmlConfigEventType : events) {
      SchemaEventReflection eventInfo=(SchemaEventReflection)getEvent(xmlConfigEventType.getName());
      if (eventInfo == null) {
        eventInfo=new SchemaEventReflection(this,xmlConfigEventType.getName(),null);
        setEvent(xmlConfigEventType.getName(),eventInfo);
      }
      eventInfo.configure();
    }
  }
}","public void configure(){
  SchemaConfiguration classDescriptor=entity.getSchemaClass().getDescriptor();
  XmlFieldAnnotation parentDescriptor=null;
  if (classDescriptor != null && classDescriptor.getType() != null && classDescriptor.getType().getFields() != null) {
    parentDescriptor=classDescriptor.getType().getField(name);
  }
  FeatureLoader.loadFieldFeatures(this,parentDescriptor);
  for (  Aspect aspect : Roma.aspects()) {
    aspect.configField(this);
  }
  if (parentDescriptor != null && parentDescriptor.getEvents() != null) {
    Set<XmlEventAnnotation> events=parentDescriptor.getEvents();
    for (    XmlEventAnnotation xmlConfigEventType : events) {
      SchemaEventReflection eventInfo=(SchemaEventReflection)getEvent(xmlConfigEventType.getName());
      if (eventInfo == null) {
        eventInfo=new SchemaEventReflection(this,xmlConfigEventType.getName(),new ArrayList<SchemaParameter>());
        setEvent(xmlConfigEventType.getName(),eventInfo);
      }
      eventInfo.configure();
    }
  }
}"
20561,"public void configField(SchemaField iField){
  if (checkFeature(iField,ValidationFieldFeatures.MATCH) && checkFeature(iField,ValidationFieldFeatures.ENABLED) && checkFeature(iField,ValidationFieldFeatures.MAX)&& checkFeature(iField,ValidationFieldFeatures.MIN)&& checkFeature(iField,ValidationFieldFeatures.REQUIRED))   iField.setFeature(ValidationFieldFeatures.ENABLED,true);
 else   iField.setFeature(ValidationFieldFeatures.ENABLED,false);
}","public void configField(SchemaField iField){
  if (checkFeature(iField,ValidationFieldFeatures.ENABLED) || checkFeature(iField,ValidationFieldFeatures.REQUIRED) || checkFeature(iField,ValidationFieldFeatures.MAX)|| checkFeature(iField,ValidationFieldFeatures.MIN)|| checkFeature(iField,ValidationFieldFeatures.MATCH))   iField.setFeature(ValidationFieldFeatures.ENABLED,true);
 else   iField.setFeature(ValidationFieldFeatures.ENABLED,false);
}"
20562,"private void init(Object iObject,String iText){
  message=new StringBuilder();
  obj=iObject;
  if (iText == null)   return;
  String i18NMessage=Roma.component(I18NAspect.class).resolve(obj,iText,I18NType.EXCEPTION);
  if (i18NMessage != null)   message.append(i18NMessage);
 else   message.append(iText);
}","private void init(Object iObject,String iText){
  message=new StringBuilder();
  obj=iObject;
  if (iText == null)   return;
  String i18NMessage;
  if (obj == null) {
    i18NMessage=Roma.component(I18NAspect.class).resolve(iText);
  }
 else {
    i18NMessage=Roma.component(I18NAspect.class).resolve(obj,iText,I18NType.EXCEPTION);
  }
  if (i18NMessage != null)   message.append(i18NMessage);
 else   message.append(iText);
}"
20563,"public static <T>boolean setFeature(Object iUserObject,String elementName,Feature<T> feature,T value){
  SchemaFeatures features=getSchemaFeature(iUserObject,elementName,feature);
  if (features == null)   return false;
  T oldValue=features.getFeature(feature);
  features.setFeature(feature,value);
  List<SchemaFeaturesChangeListener> listeners=Controller.getInstance().getListeners(SchemaFeaturesChangeListener.class);
  if (listeners != null) switch (feature.getType()) {
case ACTION:
    for (    SchemaFeaturesChangeListener listener : listeners) {
      listener.signalChangeAction(iUserObject,elementName,feature,oldValue,value);
    }
  break;
case FIELD:
for (SchemaFeaturesChangeListener listener : listeners) {
  listener.signalChangeField(iUserObject,elementName,feature,oldValue,value);
}
case EVENT:
case CLASS:
for (SchemaFeaturesChangeListener listener : listeners) {
listener.signalChangeClass(iUserObject,feature,oldValue,value);
}
default :
break;
}
return true;
}","public static <T>boolean setFeature(Object iUserObject,String elementName,Feature<T> feature,T value){
  SchemaFeatures features=getSchemaFeature(iUserObject,elementName,feature);
  if (features == null)   return false;
  T oldValue=features.getFeature(feature);
  features.setFeature(feature,value);
  List<SchemaFeaturesChangeListener> listeners=Controller.getInstance().getListeners(SchemaFeaturesChangeListener.class);
  if (listeners != null) switch (feature.getType()) {
case ACTION:
    for (    SchemaFeaturesChangeListener listener : listeners) {
      listener.signalChangeAction(iUserObject,elementName,feature,oldValue,value);
    }
  break;
case FIELD:
for (SchemaFeaturesChangeListener listener : listeners) {
  listener.signalChangeField(iUserObject,elementName,feature,oldValue,value);
}
break;
case EVENT:
break;
case CLASS:
for (SchemaFeaturesChangeListener listener : listeners) {
listener.signalChangeClass(iUserObject,feature,oldValue,value);
}
default :
break;
}
return true;
}"
20564,"public String resolve(Object obj,String iText,String customType,Object... iArgs){
  iArgs=rebuildArgs(obj,iArgs);
  if (!iText.startsWith(VARNAME_PREFIX))   return fill(iText,iArgs);
  SchemaClassDefinition scd=getSchemaClassDefinition(obj);
  String str=findWithSchemaClass(scd,CONTEXT_SEPARATOR + iText.substring(1) + CONTEXT_SEPARATOR+ customType);
  if (str == null)   return ""String_Node_Str"";
  return fill(str,iArgs);
}","public String resolve(Object obj,String iText,String customType,Object... iArgs){
  if (iText == null)   return null;
  iArgs=rebuildArgs(obj,iArgs);
  if (!iText.startsWith(VARNAME_PREFIX))   return fill(iText,iArgs);
  SchemaClassDefinition scd=getSchemaClassDefinition(obj);
  String str=findWithSchemaClass(scd,CONTEXT_SEPARATOR + iText.substring(1) + CONTEXT_SEPARATOR+ customType);
  if (str == null)   return ""String_Node_Str"";
  return fill(str,iArgs);
}"
20565,"public Object invoke(Object iContent,Object... params) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  try {
    Roma.context().create();
    List<SchemaActionListener> listeners=Controller.getInstance().getListeners(SchemaActionListener.class);
    boolean result=true;
    for (    SchemaActionListener listener : listeners) {
      result=listener.onBeforeAction(iContent,this);
      if (!result) {
        log.debug(""String_Node_Str"" + listener + ""String_Node_Str"");
        return null;
      }
    }
    Object value=null;
    try {
      Iterator<SchemaParameter> param=getParameterIterator();
      Object newValues[]=new Object[params.length];
      int i=0;
      while (param.hasNext()) {
        SchemaParameter par=param.next();
        newValues[i]=convertValue(params[i],par.getType());
        i++;
      }
      value=invokeFinal(iContent,newValues);
      for (      SchemaActionListener listener : listeners) {
        try {
          listener.onAfterAction(iContent,this,value);
        }
 catch (        Throwable t) {
          log.error(""String_Node_Str"" + listener + ""String_Node_Str"",t);
        }
      }
      return value;
    }
 catch (    IllegalArgumentException e) {
      fireActionException(listeners,iContent,e);
      throw e;
    }
catch (    IllegalAccessException e) {
      fireActionException(listeners,iContent,e);
      throw e;
    }
catch (    InvocationTargetException e) {
      fireActionException(listeners,iContent,e);
      throw e;
    }
  }
  finally {
    Roma.context().destroy();
  }
}","public Object invoke(Object iContent,Object... params) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  try {
    Roma.context().create();
    List<SchemaActionListener> listeners=Controller.getInstance().getListeners(SchemaActionListener.class);
    boolean result=true;
    for (    SchemaActionListener listener : listeners) {
      result=listener.onBeforeAction(iContent,this);
      if (!result) {
        log.debug(""String_Node_Str"" + listener + ""String_Node_Str"");
        return null;
      }
    }
    Object value=null;
    try {
      if (params != null) {
        Iterator<SchemaParameter> param=getParameterIterator();
        Object newValues[]=new Object[params.length];
        int i=0;
        while (param.hasNext()) {
          SchemaParameter par=param.next();
          newValues[i]=convertValue(params[i],par.getType());
          i++;
        }
        value=invokeFinal(iContent,newValues);
      }
 else {
        value=invokeFinal(iContent,params);
      }
      for (      SchemaActionListener listener : listeners) {
        try {
          listener.onAfterAction(iContent,this,value);
        }
 catch (        Throwable t) {
          log.error(""String_Node_Str"" + listener + ""String_Node_Str"",t);
        }
      }
      return value;
    }
 catch (    IllegalArgumentException e) {
      fireActionException(listeners,iContent,e);
      throw e;
    }
catch (    IllegalAccessException e) {
      fireActionException(listeners,iContent,e);
      throw e;
    }
catch (    InvocationTargetException e) {
      fireActionException(listeners,iContent,e);
      throw e;
    }
  }
  finally {
    Roma.context().destroy();
  }
}"
20566,"/** 
 * Makes all the operation needed for the application installation
 * @param obj If admin or users module is added the object must be casted to a realm
 * @return
 */
public abstract boolean install(Object obj);","/** 
 * Makes all the operation needed for the application installation
 * @return
 */
public abstract void install();"
20567,"@Override public void startup() throws RuntimeException {
}","@Override public void startup() throws RuntimeException {
  if (checkInstall()) {
    install();
  }
}"
20568,"public boolean isSetterForField(Method method,ParameterizedType owner){
  String fieldName=method.getName();
  if (!fieldName.startsWith(SET_METHOD) || !checkIfFirstCharAfterPrefixIsUpperCase(fieldName,SET_METHOD))   return false;
  if (method.getParameterTypes() != null && method.getParameterTypes().length != 1)   return false;
  fieldName=firstToLower(fieldName.substring(SET_METHOD.length()));
  Class<?> javaFieldClass=SchemaHelper.resolveClassFromType(method.getGenericParameterTypes()[0],owner);
  SchemaFieldReflection fieldInfo=(SchemaFieldReflection)getField(fieldName);
  if (fieldInfo == null) {
    fieldInfo=createField(fieldName,javaFieldClass);
    fieldInfo.setterMethod=method;
  }
 else   if (fieldInfo instanceof SchemaFieldReflection && ((SchemaFieldReflection)fieldInfo).getLanguageType().isAssignableFrom(javaFieldClass)) {
    fieldInfo.setterMethod=method;
  }
  return true;
}","public boolean isSetterForField(Method method,ParameterizedType owner){
  String fieldName=method.getName();
  if (!fieldName.startsWith(SET_METHOD) || !checkIfFirstCharAfterPrefixIsUpperCase(fieldName,SET_METHOD))   return false;
  if (method.getParameterTypes() != null && method.getParameterTypes().length != 1)   return false;
  fieldName=firstToLower(fieldName.substring(SET_METHOD.length()));
  Class<?> javaFieldClass=SchemaHelper.resolveClassFromType(method.getGenericParameterTypes()[0],owner);
  SchemaFieldReflection fieldInfo=(SchemaFieldReflection)getField(fieldName);
  if (fieldInfo == null) {
    fieldInfo=createField(fieldName,javaFieldClass);
    fieldInfo.setterMethod=method;
  }
 else   if (fieldInfo instanceof SchemaFieldReflection && ((SchemaFieldReflection)fieldInfo).getLanguageType().isAssignableFrom(javaFieldClass)) {
    fieldInfo.setterMethod=method;
    fieldInfo.setType(Roma.schema().getSchemaClassIfExist(javaFieldClass));
  }
  return true;
}"
20569,"@Override protected void setValueFinal(Object iObject,Object iValue) throws IllegalAccessException, InvocationTargetException {
  if (this.setterMethod != null) {
    super.setValue(iObject,iValue);
    return;
  }
  iObject=this.object.getValue(iObject);
  this.delegate.setValue(iObject,iValue);
}","@Override protected void setValueFinal(Object iObject,Object iValue) throws IllegalAccessException, InvocationTargetException {
  if (this.setterMethod != null) {
    super.setValueFinal(iObject,iValue);
    return;
  }
  iObject=this.object.getValue(iObject);
  this.delegate.setValue(iObject,iValue);
}"
20570,"/** 
 * Method that extracts a file, defined by his name, from a compressed file.
 * @param iCompressedFile - The original compressed file
 * @param iFileName - The name of the file contained in the compressed file to extract
 * @return the file extracted by the compressed file, or null if it doesn't exists
 * @throws IOException
 */
public static File getDecompressedAttachment(File iCompressedFile,String iFileName) throws IOException {
  File attachment=null;
  String sessionId=getSessionId();
  ZipInputStream zis=new ZipInputStream(new FileInputStream(iCompressedFile));
  ZipEntry entry;
  while ((entry=zis.getNextEntry()) != null) {
    if (entry.getName().equals(iFileName)) {
      log.info(""String_Node_Str"" + entry.getName());
      File file=new File(sessionId + ""String_Node_Str"" + entry.getName());
      IOUtils.copy(zis,new FileOutputStream(file));
    }
  }
  if (attachment != null)   attachment.deleteOnExit();
  return attachment;
}","/** 
 * Method that extracts a file, defined by his name, from a compressed file.
 * @param iCompressedFile - The original compressed file
 * @param iFileName - The name of the file contained in the compressed file to extract
 * @return the file extracted by the compressed file, or null if it doesn't exists
 * @throws IOException
 */
public static File getDecompressedAttachment(File iCompressedFile,String iFileName) throws IOException {
  File attachment=null;
  String sessionId=getSessionId();
  ZipInputStream zis=new ZipInputStream(new FileInputStream(iCompressedFile));
  ZipEntry entry;
  while ((entry=zis.getNextEntry()) != null) {
    if (entry.getName().equals(iFileName)) {
      log.info(""String_Node_Str"" + entry.getName());
      attachment=new File(sessionId + ""String_Node_Str"" + entry.getName());
      IOUtils.copy(zis,new FileOutputStream(attachment));
    }
  }
  if (attachment != null)   attachment.deleteOnExit();
  return attachment;
}"
20571,"private void readClass(){
  Class<?> iClass=(Class<?>)(javaClass != null ? javaClass : baseClass.getLanguageType());
  ParameterizedType type=SchemaHelper.resolveParameterizedType(iClass);
  List<Method> methods=SchemaHelper.getMethods(iClass);
  for (  Method method : methods) {
    if (isToIgnoreMethod(method))     continue;
    if (isGetterForField(method,type))     continue;
 else     if (isSetterForField(method,type))     continue;
 else     if (isEvent(method))     continue;
 else     createAction(method,type);
  }
  Field[] javaFields=iClass.getDeclaredFields();
  for (  Field curField : javaFields) {
    SchemaField sf=getField(curField.getName());
    if (sf != null && sf instanceof SchemaFieldReflection) {
      SchemaClass fieldSchemaClass=Roma.schema().getSchemaClassIfExist(curField.getType());
      if (sf.getType() == null || fieldSchemaClass.isAssignableAs(fieldSchemaClass)) {
        sf.setType(fieldSchemaClass);
        ((SchemaFieldReflection)sf).field=curField;
        ((SchemaFieldReflection)sf).languageType=SchemaHelper.resolveClassFromType(curField.getGenericType(),type);
      }
    }
  }
  List<SchemaField> curFields=new ArrayList<SchemaField>(fields.values());
  for (  SchemaField field : curFields) {
    if (field instanceof SchemaFieldReflection && ((SchemaFieldReflection)field).getGetterMethod() == null) {
      fields.remove(field.getName());
      orderedFields.remove(field);
    }
 else {
      if (field instanceof SchemaFieldReflection)       ((SchemaFieldReflection)field).configure();
      field.setOrder(getFieldOrder(field));
    }
  }
  Collections.sort(orderedFields);
  List<SchemaAction> curActions=new ArrayList<SchemaAction>(actions.values());
  for (  SchemaAction action : curActions) {
    if (action instanceof SchemaActionReflection)     ((SchemaActionReflection)action).configure();
    action.setOrder(getActionOrder(action));
  }
  Collections.sort(orderedActions);
  List<SchemaEvent> curEvents=new ArrayList<SchemaEvent>(events.values());
  for (  SchemaEvent event : curEvents) {
    if (event instanceof SchemaEventReflection)     ((SchemaEventReflection)event).configure();
    event.setOrder(getActionOrder(event));
  }
  Collections.sort(orderedActions);
}","private void readClass(){
  Class<?> iClass=(Class<?>)(javaClass != null ? javaClass : baseClass.getLanguageType());
  ParameterizedType type=SchemaHelper.resolveParameterizedType(iClass);
  List<Method> methods=SchemaHelper.getMethods(iClass);
  List<Method> eventsToAdd=new ArrayList<Method>();
  for (  Method method : methods) {
    if (isToIgnoreMethod(method))     continue;
    if (isGetterForField(method,type))     continue;
 else     if (isSetterForField(method,type))     continue;
 else     if (isEvent(method)) {
      eventsToAdd.add(method);
      continue;
    }
 else     createAction(method,type);
  }
  Field[] javaFields=iClass.getDeclaredFields();
  for (  Field curField : javaFields) {
    SchemaField sf=getField(curField.getName());
    if (sf != null && sf instanceof SchemaFieldReflection) {
      SchemaClass fieldSchemaClass=Roma.schema().getSchemaClassIfExist(curField.getType());
      if (sf.getType() == null || fieldSchemaClass.isAssignableAs(fieldSchemaClass)) {
        sf.setType(fieldSchemaClass);
        ((SchemaFieldReflection)sf).field=curField;
        ((SchemaFieldReflection)sf).languageType=SchemaHelper.resolveClassFromType(curField.getGenericType(),type);
      }
    }
  }
  List<SchemaField> curFields=new ArrayList<SchemaField>(fields.values());
  for (  SchemaField field : curFields) {
    if (field instanceof SchemaFieldReflection && ((SchemaFieldReflection)field).getGetterMethod() == null) {
      fields.remove(field.getName());
      orderedFields.remove(field);
    }
 else {
      if (field instanceof SchemaFieldReflection)       ((SchemaFieldReflection)field).configure();
      field.setOrder(getFieldOrder(field));
    }
  }
  Collections.sort(orderedFields);
  List<SchemaAction> curActions=new ArrayList<SchemaAction>(actions.values());
  for (  SchemaAction action : curActions) {
    if (action instanceof SchemaActionReflection)     ((SchemaActionReflection)action).configure();
    action.setOrder(getActionOrder(action));
  }
  Collections.sort(orderedActions);
  addEvents(eventsToAdd);
  List<SchemaEvent> curEvents=new ArrayList<SchemaEvent>(events.values());
  for (  SchemaEvent event : curEvents) {
    if (event instanceof SchemaEventReflection)     ((SchemaEventReflection)event).configure();
    event.setOrder(getActionOrder(event));
  }
  Collections.sort(orderedActions);
}"
20572,"public boolean isEvent(Method method){
  String eventMethodName=method.getName();
  if (!eventMethodName.startsWith(SchemaEvent.ON_METHOD) || !checkIfFirstCharAfterPrefixIsUpperCase(eventMethodName,SchemaEvent.ON_METHOD))   return false;
  eventMethodName=firstToLower(eventMethodName.substring(SchemaEvent.ON_METHOD.length()));
  SchemaField fieldEvent=getFieldComposedEntity(eventMethodName);
  String eventName=lastCapitalWords(eventMethodName);
  eventName=firstToLower(eventName);
  String fieldName;
  if (fieldEvent != null) {
    if (!eventMethodName.equals(eventName)) {
      fieldName=eventMethodName.substring(0,eventMethodName.length() - eventName.length());
      fieldName=firstToLower(fieldName);
      SchemaField field=getFieldComposedEntity(fieldName);
      if (field != null) {
        if (log.isWarnEnabled())         log.warn(""String_Node_Str"" + method + ""String_Node_Str""+ fieldEvent.getEntity().getSchemaClass().getName()+ ""String_Node_Str""+ fieldEvent.getName()+ ""String_Node_Str""+ eventName+ ""String_Node_Str""+ field.getEntity().getSchemaClass().getName()+ ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
      }
    }
    addEvent(SchemaEvent.DEFAULT_EVENT_NAME,fieldEvent,method);
  }
 else   if (eventMethodName.equals(eventName)) {
    addEvent(eventName,null,method);
  }
 else {
    fieldName=eventMethodName.substring(0,eventMethodName.length() - eventName.length());
    fieldName=firstToLower(fieldName);
    SchemaField field=getFieldComposedEntity(fieldName);
    if (field == null) {
      if (log.isWarnEnabled())       log.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ eventName+ ""String_Node_Str""+ getName()+ ""String_Node_Str""+ fieldName+ ""String_Node_Str"");
      return false;
    }
    addEvent(eventName,field,method);
  }
  return true;
}","/** 
 * Checks if the class method is an event
 * @param method -: the class method to check
 * @return true if is a event, false otherwise.
 */
public boolean isEvent(Method method){
  String eventMethodName=method.getName();
  if (!eventMethodName.startsWith(SchemaEvent.ON_METHOD) || !checkIfFirstCharAfterPrefixIsUpperCase(eventMethodName,SchemaEvent.ON_METHOD))   return false;
  return true;
}"
20573,"private void readEvents(){
  if (descriptor.getType().getEvents() == null)   return;
  for (  XmlEventAnnotation event : descriptor.getType().getEvents()) {
    log.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ event.getName());
    SchemaField fieldEvent=getFieldComposedEntity(event.getName());
    String eventName=lastCapitalWords(event.getName());
    eventName=firstToLower(eventName);
    if (fieldEvent != null) {
      if (!event.getName().equals(eventName)) {
        String fieldName=event.getName().substring(0,event.getName().length() - eventName.length());
        fieldName=firstToLower(fieldName);
        SchemaField field=getFieldComposedEntity(fieldName);
        if (field != null) {
          if (log.isWarnEnabled())           log.warn(""String_Node_Str"" + event.getName() + ""String_Node_Str""+ fieldEvent.getEntity().getSchemaClass().getName()+ ""String_Node_Str""+ fieldEvent.getName()+ ""String_Node_Str""+ eventName+ ""String_Node_Str""+ field.getEntity().getSchemaClass().getName()+ ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
        }
      }
      addEvent(SchemaEvent.DEFAULT_EVENT_NAME,fieldEvent);
      continue;
    }
    if (event.getName().equals(eventName)) {
      addEvent(eventName,null);
    }
 else {
      String fieldName=event.getName().substring(0,event.getName().length() - eventName.length());
      fieldName=firstToLower(fieldName);
      SchemaField field=getFieldComposedEntity(fieldName);
      if (field == null) {
        if (log.isWarnEnabled())         log.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ eventName+ ""String_Node_Str""+ getName()+ ""String_Node_Str""+ fieldName+ ""String_Node_Str"");
        continue;
      }
      addEvent(eventName,field);
    }
  }
  SchemaEventVirtual eventInfo;
  for (  SchemaEvent event : events.values()) {
    if (!(event instanceof SchemaEventVirtual)) {
      eventInfo=new SchemaEventVirtual(this,event.getName(),event);
      setEvent(event.getName(),eventInfo);
      eventInfo.configure();
    }
  }
}","private void readEvents(){
  if (descriptor.getType().getEvents() == null)   return;
  for (  XmlEventAnnotation event : descriptor.getType().getEvents()) {
    log.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ event.getName());
    SchemaField fieldEvent=getField(event.getName());
    String eventName=lastCapitalWords(event.getName());
    eventName=firstToLower(eventName);
    if (fieldEvent != null) {
      if (!event.getName().equals(eventName)) {
        String fieldName=event.getName().substring(0,event.getName().length() - eventName.length());
        fieldName=firstToLower(fieldName);
        SchemaField field=getField(fieldName);
        if (field != null) {
          if (log.isWarnEnabled())           log.warn(""String_Node_Str"" + event.getName() + ""String_Node_Str""+ fieldEvent.getEntity().getSchemaClass().getName()+ ""String_Node_Str""+ fieldEvent.getName()+ ""String_Node_Str""+ eventName+ ""String_Node_Str""+ field.getEntity().getSchemaClass().getName()+ ""String_Node_Str""+ field.getName()+ ""String_Node_Str"");
        }
      }
      addEvent(SchemaEvent.DEFAULT_EVENT_NAME,fieldEvent);
      continue;
    }
    if (event.getName().equals(eventName)) {
      addEvent(eventName,null);
    }
 else {
      String fieldName=event.getName().substring(0,event.getName().length() - eventName.length());
      fieldName=firstToLower(fieldName);
      SchemaField field=getField(fieldName);
      if (field == null) {
        if (log.isWarnEnabled())         log.warn(""String_Node_Str"" + getName() + ""String_Node_Str""+ eventName+ ""String_Node_Str""+ getName()+ ""String_Node_Str""+ fieldName+ ""String_Node_Str"");
        continue;
      }
      addEvent(eventName,field);
    }
  }
  SchemaEventVirtual eventInfo;
  for (  SchemaEvent event : events.values()) {
    if (!(event instanceof SchemaEventVirtual)) {
      eventInfo=new SchemaEventVirtual(this,event.getName(),event);
      setEvent(event.getName(),eventInfo);
      eventInfo.configure();
    }
  }
}"
20574,"private void expandField(SchemaField iField){
  SchemaClass cl=iField.getType().getSchemaClass();
  Iterator<SchemaField> fields=cl.getFieldIterator();
  while (fields.hasNext()) {
    SchemaField sf=fields.next();
    SchemaFieldDelegate sfd=new SchemaFieldDelegate(iField.getEntity(),iField,sf);
    sfd.configure();
    sfd.setOrder(iField.getEntity().getSchemaClass().getFieldOrder(sfd));
    iField.getEntity().setField(sf.getName(),sfd);
  }
  Iterator<SchemaAction> actions=cl.getActionIterator();
  while (actions.hasNext()) {
    SchemaAction sa=actions.next();
    SchemaActionDelegate sad=new SchemaActionDelegate(iField.getEntity(),iField,sa);
    sad.configure();
    sad.setOrder(iField.getEntity().getSchemaClass().getActionOrder(sad));
    iField.getEntity().setAction(sa.getName(),sad);
  }
  Iterator<SchemaEvent> events=cl.getEventIterator();
  while (events.hasNext()) {
    SchemaEvent se=events.next();
    SchemaEventDelegate sed=new SchemaEventDelegate(iField.getEntity(),iField,se);
    sed.configure();
    iField.getEntity().setEvent(se.getName(),sed);
  }
}","private void expandField(SchemaField iField){
  SchemaClass cl=iField.getType().getSchemaClass();
  Iterator<SchemaField> fields=cl.getFieldIterator();
  while (fields.hasNext()) {
    SchemaField sf=fields.next();
    SchemaField parentField=iField.getEntity().getField(sf.getName());
    if (parentField == null || parentField.getType().getSchemaClass().isAssignableAs(sf.getType().getSchemaClass())) {
      SchemaFieldDelegate sfd=new SchemaFieldDelegate(iField.getEntity(),iField,sf);
      sfd.configure();
      sfd.setOrder(iField.getEntity().getSchemaClass().getFieldOrder(sfd));
      iField.getEntity().setField(sf.getName(),sfd);
    }
  }
  Iterator<SchemaAction> actions=cl.getActionIterator();
  while (actions.hasNext()) {
    SchemaAction sa=actions.next();
    SchemaActionDelegate sad=new SchemaActionDelegate(iField.getEntity(),iField,sa);
    sad.configure();
    sad.setOrder(iField.getEntity().getSchemaClass().getActionOrder(sad));
    iField.getEntity().setAction(sa.getName(),sad);
  }
  Iterator<SchemaEvent> events=cl.getEventIterator();
  while (events.hasNext()) {
    SchemaEvent se=events.next();
    SchemaEventDelegate sed=new SchemaEventDelegate(iField.getEntity(),iField,se);
    sed.configure();
    iField.getEntity().setEvent(se.getName(),sed);
  }
}"
20575,"private void deleteBacklog(final long selectedBacklog){
}","private void deleteBacklog(final long selectedBacklog){
  dispatcher.execute(new DeleteBacklogAction(selectedBacklog),new AsyncCallback<DeleteBacklogResult>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    DeleteBacklogResult result){
      BacklogDeletedEvent.fire(BacklogPresenter.this,selectedBacklog);
    }
  }
);
}"
20576,"@ProxyEvent @Override public void onBacklogDeleted(BacklogDeletedEvent event){
  Window.alert(""String_Node_Str"" + event.getBacklog().getProjectName() + ""String_Node_Str"");
}","@ProxyEvent @Override public void onBacklogDeleted(BacklogDeletedEvent event){
  Window.alert(""String_Node_Str"");
}"
20577,"/** 
 * Method that is called when a backlog has been created or updated
 */
@ProxyEvent @Override public void onBacklogUpdated(BacklogUpdatedEvent event){
  Backlog backlog=event.getBacklog();
  List<Long> backlogIds=getBacklogIds();
  int backlogIndex=getView().getBacklogList().getSelectedIndex();
  if (backlogIds.contains(backlog.getId())) {
    getView().getBacklogList().removeItem(backlogIndex);
  }
  getView().getBacklogList().insertItem(backlog.getProjectName(),null,backlog.getId().toString(),backlogIndex);
  getView().getBacklogList().setSelectedIndex(backlogIndex);
}","/** 
 * Method that is called when a backlog has been created or updated
 */
@ProxyEvent @Override public void onBacklogUpdated(BacklogUpdatedEvent event){
  Backlog backlog=event.getBacklog();
  List<Long> backlogIds=getBacklogIds();
  int backlogIndex=getView().getBacklogList().getSelectedIndex();
  if (backlogIds.contains(backlog.getId())) {
    getView().getBacklogList().removeItem(backlogIndex);
  }
  getView().getBacklogList().insertItem(backlog.getProjectName(),null,backlog.getId().toString(),backlogIndex);
  getView().getBacklogList().setSelectedIndex(backlogIndex);
  changePlaceFromSelectedBacklog(backlog.getId() + ""String_Node_Str"");
}"
20578,"public BacklogDeletedEvent(Backlog backlog){
  this.backlog=backlog;
}","public BacklogDeletedEvent(long backlogId){
  this.backlogId=backlogId;
}"
20579,"public static void fire(HasHandlers source,Backlog backlog){
  source.fireEvent(new BacklogDeletedEvent(backlog));
}","public static void fire(HasHandlers source,long backlogId){
  source.fireEvent(new BacklogDeletedEvent(backlogId));
}"
20580,"public List<UserStory> getStories(long backlogId){
  return listByProperty(""String_Node_Str"",backlogId);
}","/** 
 * Get stories in datastore that are linked to the backlog corresponding to the backlogId
 * @param backlogId
 * @return
 */
public List<UserStory> getStories(long backlogId){
  return listByProperty(""String_Node_Str"",backlogId);
}"
20581,"@Override protected void configureHandlers(){
  bindHandler(GetBacklogListAction.class,GetBacklogListHandler.class);
  bindHandler(GetStoryListAction.class,GetStoryListHandler.class);
  bindHandler(UpdateStoryAction.class,UpdateStoryHandler.class);
  bindHandler(UpdateBacklogAction.class,UpdateBacklogHandler.class);
  bindHandler(GetStoryAction.class,GetStoryHandler.class);
  bindHandler(GetBacklogAction.class,GetBacklogHandler.class);
}","@Override protected void configureHandlers(){
  bindHandler(GetBacklogListAction.class,GetBacklogListHandler.class);
  bindHandler(GetStoryListAction.class,GetStoryListHandler.class);
  bindHandler(UpdateStoryAction.class,UpdateStoryHandler.class);
  bindHandler(UpdateBacklogAction.class,UpdateBacklogHandler.class);
  bindHandler(GetStoryAction.class,GetStoryHandler.class);
  bindHandler(GetBacklogAction.class,GetBacklogHandler.class);
  bindHandler(DeleteBacklogAction.class,DeleteBacklogHandler.class);
}"
20582,"public UserStory retrieve(long backlogId) throws EntityNotFoundException {
  return userStoryDao.get(backlogId);
}","public UserStory retrieve(long storyId) throws EntityNotFoundException {
  return userStoryDao.get(storyId);
}"
20583,"public List<UserStory> list(long backlogId){
  return userStoryDao.list();
}","public List<UserStory> list(long backlogId){
  return userStoryDao.getStories(backlogId);
}"
20584,"@Test public void testList(){
  long backlogId=1l;
  List<UserStory> userStoriesMock=Arrays.asList(PojoHelper.userStory(""String_Node_Str""),PojoHelper.userStory(""String_Node_Str""),PojoHelper.userStory(""String_Node_Str""));
  expect(userStoryDaoMock.list()).andReturn(userStoriesMock);
  replay(userStoryDaoMock);
  List<UserStory> result=userStoryService.list(backlogId);
  verify(userStoryDaoMock);
  assertThat(result).isNotNull().isEqualTo(userStoriesMock);
}","@Test public void testList(){
  long backlogId=1l;
  List<UserStory> userStoriesMock=Arrays.asList(PojoHelper.userStory(""String_Node_Str""),PojoHelper.userStory(""String_Node_Str""),PojoHelper.userStory(""String_Node_Str""));
  expect(userStoryDaoMock.getStories(backlogId)).andReturn(userStoriesMock);
  replay(userStoryDaoMock);
  List<UserStory> result=userStoryService.list(backlogId);
  verify(userStoryDaoMock);
  assertThat(result).isNotNull().isEqualTo(userStoriesMock);
}"
20585,"private synchronized Object getObject(Backend.Identity id){
  Object obj=idToObject.get(id);
  if (obj == null) {
    try {
      obj=objectClass.newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    objectToId.put(obj,id);
    idToObject.put(id,new WeakReference<Object>(obj));
  }
  return obj;
}","private synchronized Object getObject(Backend.Identity id){
  WeakReference<Object> objRef=idToObject.get(id);
  Object obj=objRef == null ? null : objRef.get();
  if (obj == null) {
    try {
      obj=objectClass.newInstance();
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    objectToId.put(obj,id);
    idToObject.put(id,new WeakReference<Object>(obj));
  }
  return obj;
}"
20586,"private StoreMethodInfo(Method method){
  final String name=method.getName();
  final Get getInfo=method.getAnnotation(Get.class);
  final Set setInfo=method.getAnnotation(Set.class);
  final Find findInfo=method.getAnnotation(Find.class);
  final Class returnType=method.getReturnType();
  final Class[] params=method.getParameterTypes();
  if (getInfo != null) {
    if (params.length != 1)     throw new ConfigurationException(""String_Node_Str"" + method);
    objectClass=params[0];
    fields.put(getInfo.value(),returnType);
    type=1;
    finderType=0;
  }
 else   if (setInfo != null) {
    if (params.length < 2)     throw new ConfigurationException(""String_Node_Str"" + method);
    if (params.length - 1 != setInfo.value().length)     throw new ConfigurationException(""String_Node_Str"" + (params.length - 1) + ""String_Node_Str""+ method);
    objectClass=params[0];
    for (int i=1; i < params.length; i++)     fields.put(setInfo.value()[i - 1],params[i]);
    type=2;
    finderType=0;
  }
 else   if (findInfo != null) {
    if (params.length < 1)     throw new ConfigurationException(""String_Node_Str"" + method);
    if (params.length != findInfo.by().length)     throw new ConfigurationException(""String_Node_Str"" + params.length + ""String_Node_Str""+ method);
    for (int i=0; i < params.length; i++)     fields.put(setInfo.value()[i],params[i]);
    type=3;
    if (returnType.isArray()) {
      objectClass=returnType.getComponentType();
      finderType=2;
    }
 else     if (returnType == Collection.class) {
      objectClass=(Class)((ParameterizedType)method.getGenericReturnType()).getActualTypeArguments()[0];
      finderType=3;
    }
 else {
      objectClass=returnType;
      finderType=1;
    }
  }
 else   if (name.startsWith(""String_Node_Str"") && name.length() > 3) {
    if (params.length != 1)     throw new ConfigurationException(""String_Node_Str"" + method);
    objectClass=params[0];
    fields.put(Character.toLowerCase(name.charAt(3)) + name.substring(4),returnType);
    type=1;
    finderType=0;
  }
 else   if (name.startsWith(""String_Node_Str"") && name.length() > 3) {
    if (params.length != 2)     throw new ConfigurationException(""String_Node_Str"" + method);
    objectClass=params[0];
    fields.put(Character.toLowerCase(name.charAt(3)) + name.substring(4),returnType);
    type=2;
    finderType=0;
  }
 else {
    throw new ConfigurationException(""String_Node_Str"" + method);
  }
}","private StoreMethodInfo(Method method){
  final String name=method.getName();
  final Get getInfo=method.getAnnotation(Get.class);
  final Set setInfo=method.getAnnotation(Set.class);
  final Find findInfo=method.getAnnotation(Find.class);
  final Class returnType=method.getReturnType();
  final Class[] params=method.getParameterTypes();
  if (getInfo != null) {
    if (params.length != 1)     throw new ConfigurationException(""String_Node_Str"" + method);
    objectClass=params[0];
    fields.put(getInfo.value(),returnType);
    type=1;
    finderType=0;
  }
 else   if (setInfo != null) {
    if (params.length < 2)     throw new ConfigurationException(""String_Node_Str"" + method);
    if (params.length - 1 != setInfo.value().length)     throw new ConfigurationException(""String_Node_Str"" + (params.length - 1) + ""String_Node_Str""+ method);
    objectClass=params[0];
    for (int i=1; i < params.length; i++)     fields.put(setInfo.value()[i - 1],params[i]);
    type=2;
    finderType=0;
  }
 else   if (findInfo != null) {
    if (params.length < 1)     throw new ConfigurationException(""String_Node_Str"" + method);
    if (params.length != findInfo.by().length)     throw new ConfigurationException(""String_Node_Str"" + params.length + ""String_Node_Str""+ method);
    for (int i=0; i < params.length; i++)     fields.put(findInfo.by()[i],params[i]);
    type=3;
    if (returnType.isArray()) {
      objectClass=returnType.getComponentType();
      finderType=2;
    }
 else     if (returnType == Collection.class) {
      objectClass=(Class)((ParameterizedType)method.getGenericReturnType()).getActualTypeArguments()[0];
      finderType=3;
    }
 else {
      objectClass=returnType;
      finderType=1;
    }
  }
 else   if (name.startsWith(""String_Node_Str"") && name.length() > 3) {
    if (params.length != 1)     throw new ConfigurationException(""String_Node_Str"" + method);
    objectClass=params[0];
    fields.put(Character.toLowerCase(name.charAt(3)) + name.substring(4),returnType);
    type=1;
    finderType=0;
  }
 else   if (name.startsWith(""String_Node_Str"") && name.length() > 3) {
    if (params.length != 2)     throw new ConfigurationException(""String_Node_Str"" + method);
    objectClass=params[0];
    fields.put(Character.toLowerCase(name.charAt(3)) + name.substring(4),params[1]);
    type=2;
    finderType=0;
  }
 else {
    throw new ConfigurationException(""String_Node_Str"" + method);
  }
}"
20587,"public static <C>void set(C klass,String field) throws Exception {
  Field fieldID=klass.getClass().getDeclaredField(field);
  String table=klass.getClass().getName().replace('$','_').replace('.','_');
  Type type=fieldID.getType();
  String[] tmpArray=type.toString().split(""String_Node_Str"");
  String typeDesc=tmpArray[tmpArray.length - 1];
  int awesomeId=(Integer)klass.getClass().getDeclaredMethod(""String_Node_Str"").invoke(klass);
  Object value=Manager.getField(table,awesomeId,field);
  fieldID.setAccessible(true);
  if (value != null) {
    fieldID.set(klass,value);
  }
}","public static <C>void set(C klass,String field) throws Exception {
  Field fieldID=klass.getClass().getDeclaredField(field);
  String table=klass.getClass().getName();
  Field[] fields=klass.getClass().getDeclaredFields();
  Object id=null;
  for (  Field f : fields) {
    if (f.isAnnotationPresent(ID.class)) {
      f.setAccessible(true);
      id=f.get(klass);
    }
  }
  if (id == null) {
    throw new EntityException(""String_Node_Str"");
  }
  Object value=Manager.getField(table,(Integer)id,field);
  fieldID.setAccessible(true);
  if (value != null) {
    fieldID.set(klass,value);
  }
 else {
  }
}"
20588,"@Override public byte[] transform(ClassLoader loader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] bytes) throws IllegalClassFormatException {
  try {
    ClassReader creader=new ClassReader(bytes);
  }
  finally {
  }
  return null;
}","@Override public byte[] transform(ClassLoader loader,String className,Class<?> classBeingRedefined,ProtectionDomain protectionDomain,byte[] bytes) throws IllegalClassFormatException {
  try {
  }
  finally {
  }
  return null;
}"
20589,"/** 
 * @param args
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  if (args.length > 0) {
    System.out.println(args[0]);
  }
  if (Class.class.getClassLoader() == null && args.length == 0) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    VirtualMachineDescriptor vmDescriptor=null;
    for (    VirtualMachineDescriptor descr : VirtualMachine.list()) {
      System.out.println(""String_Node_Str"" + descr.displayName());
      if (descr.displayName().endsWith(INSTR_JAR_NAME) || descr.displayName().endsWith(""String_Node_Str"")) {
        vmDescriptor=descr;
        break;
      }
    }
    VirtualMachine vm=VirtualMachine.attach(vmDescriptor);
    String splitter=OS_NAME.equalsIgnoreCase(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    String agentPath=null;
    for (    String entry : CLASS_PATH.split(splitter)) {
      System.out.println(""String_Node_Str"" + entry);
      if (entry.endsWith(INSTR_JAR_NAME)) {
        agentPath=entry;
        break;
      }
    }
    if (agentPath != null) {
      System.out.println(""String_Node_Str"" + agentPath);
      vm.loadAgent(agentPath);
    }
    vm.detach();
    System.out.println(Main.class.getClassLoader());
    Main main=new Main();
    main.printHello(""String_Node_Str"");
  }
}","/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  if (args.length > 0) {
    System.out.println(args[0]);
  }
  if (Class.class.getClassLoader() == null && args.length == 0) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    VirtualMachineDescriptor vmDescriptor=null;
    for (    VirtualMachineDescriptor descr : VirtualMachine.list()) {
      System.out.println(""String_Node_Str"" + descr.displayName());
      if (descr.displayName().endsWith(INSTR_JAR_NAME) || descr.displayName().endsWith(""String_Node_Str"")) {
        vmDescriptor=descr;
        break;
      }
    }
    VirtualMachine vm=VirtualMachine.attach(vmDescriptor);
    String splitter=OS_NAME.equalsIgnoreCase(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    String agentPath=null;
    for (    String entry : CLASS_PATH.split(splitter)) {
      System.out.println(""String_Node_Str"" + entry);
      if (entry.endsWith(INSTR_JAR_NAME)) {
        agentPath=entry;
        break;
      }
    }
    if (agentPath != null) {
      System.out.println(""String_Node_Str"" + agentPath);
      vm.loadAgent(agentPath);
    }
    vm.detach();
    System.out.println(Main.class.getClassLoader());
    Main main=new Main();
    main.printHello(""String_Node_Str"");
  }
}"
20590,"@Override public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  if (name.equals(fName)) {
    isFieldPresent=true;
  }
  System.out.format(""String_Node_Str"",access,name,desc,signature,value.toString());
  return cv.visitField(access,name,desc,signature,value);
}","@Override public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  if (name.equals(fName)) {
  }
  System.out.format(""String_Node_Str"",access,name,desc,signature,value.toString());
  return cv.visitField(access,name,desc,signature,value);
}"
20591,"public AddFieldAdapter(ClassVisitor cv,int fAcc,String fName,String fDesc){
  super(cv);
  this.fAcc=fAcc;
  this.fName=fName;
  this.fDesc=fDesc;
}","public AddFieldAdapter(ClassVisitor cv,int fAcc,String fName,String fDesc){
  super(cv);
  this.fAcc=fAcc;
  this.fName=fName;
}"
20592,"@Test public void testDumpDouble(){
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(0.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(.0020001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(10100000122222222.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(10000.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(-10100000122222222.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(-10000.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(0d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(-0d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(Double.MAX_VALUE));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(Double.MIN_VALUE));
}","@Test public void testDumpDouble(){
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(0.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(.0020001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(10100000122222222.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(10000.0000001001000d));
  Locale.setDefault(Locale.GERMANY);
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(0.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(.0020001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(10100000122222222.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(10000.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(-10100000122222222.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(-10000.0000001001000d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(0d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(-0d));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(Double.MAX_VALUE));
  assertArrayEquals(""String_Node_Str"".getBytes(ASCII),TNetstring.dump(Double.MIN_VALUE));
}"
20593,"/** 
 * @see org.jibble.pircbot.PircBot#onJoin(String,String,String,String) onJoin 
 */
public void onJoin(String channel,String sender,String login,String hostname){
  boolean found=false;
  for (  TestSubject ts : this.subjects) {
    if (ts.checkForAlias(sender)) {
      ts.setNick(sender);
      if (ts.getMode() == TestSubject.Mode.OP)       this.op(channel,ts.getNick());
      if (ts.getMode() == TestSubject.Mode.VOICE)       this.voice(channel,ts.getNick());
      found=true;
      break;
    }
  }
  if (!found) {
    String[] alias={sender};
    this.subjects.add(new TestSubject(sender,alias,TestSubject.Mode.NONE));
  }
}","/** 
 * @see org.jibble.pircbot.PircBot#onJoin(String,String,String,String) onJoin 
 */
public void onJoin(String channel,String sender,String login,String hostname){
  boolean found=false;
  for (  TestSubject ts : this.subjects) {
    if (ts.checkForAlias(sender)) {
      ts.setNick(sender);
      if (ts.getMode() == TestSubject.Mode.OP)       this.op(channel,ts.getNick());
      if (ts.getMode() == TestSubject.Mode.VOICE)       this.voice(channel,ts.getNick());
      found=true;
      break;
    }
  }
  if (!found) {
    String[] alias={sender};
    this.subjects.add(new TestSubject(sender,alias,TestSubject.Mode.NONE,false));
  }
}"
20594,"/** 
 * Default constructor for GLaDOS
 * @throws ActionException 
 * @throws MalformedURLException 
 */
public GLaDOS() throws MalformedURLException, ActionException {
  this.setName(""String_Node_Str"");
  this.wernickMod=new WernickeModule();
  this.gup=new GenericUtilityProcessor();
  this.cam=new CentralAIMatrix();
  this.silence=true;
  this.backupTimer=10000;
  this.sm=new SearchModule();
  this.prevTime=(int)System.currentTimeMillis();
  this.subjects=new ArrayList<TestSubject>();
  this.quotes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  this.start();
}","/** 
 * Default constructor for GLaDOS
 * @throws ActionException 
 * @throws MalformedURLException 
 */
public GLaDOS() throws MalformedURLException {
  this.setName(""String_Node_Str"");
  this.wernickMod=new WernickeModule();
  this.gup=new GenericUtilityProcessor();
  this.cam=new CentralAIMatrix();
  this.silence=true;
  this.backupTimer=10000;
  this.sm=new SearchModule();
  this.prevTime=(int)System.currentTimeMillis();
  this.subjects=new ArrayList<TestSubject>();
  this.quotes=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  this.start();
}"
20595,"/** 
 * Starts GLaDOS, connects to server and join channels.
 * @param args Runtime arguments
 * @throws ActionException 
 * @throws MalformedURLException 
 */
public static void main(String[] args) throws MalformedURLException, ActionException {
  GLaDOS bot=new GLaDOS();
  bot.setVerbose(true);
  try {
    bot.connect(""String_Node_Str"");
  }
 catch (  NickAlreadyInUseException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IrcException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  bot.joinChannel(""String_Node_Str"");
}","/** 
 * Starts GLaDOS, connects to server and join channels.
 * @param args Runtime arguments
 * @throws ActionException 
 * @throws MalformedURLException 
 */
public static void main(String[] args) throws MalformedURLException {
  GLaDOS bot=new GLaDOS();
  bot.setVerbose(true);
  try {
    bot.connect(""String_Node_Str"");
  }
 catch (  NickAlreadyInUseException e) {
    System.err.println(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IrcException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  bot.joinChannel(""String_Node_Str"");
}"
20596,"/** 
 * Constructor for TestSubject.
 * @param nick Current nick.
 * @param alias Known aliases.
 * @param mode Current mode.
 */
public TestSubject(String nick,String[] alias,Mode mode){
  this.setNick(nick);
  this.alias=alias;
  this.setMode(mode);
}","/** 
 * Constructor for TestSubject.
 * @param nick Current nick.
 * @param alias Known aliases.
 * @param mode Current mode.
 */
public TestSubject(String nick,String[] alias,Mode mode,boolean admin){
  this.setNick(nick);
  this.alias=alias;
  this.setMode(mode);
  this.admin=admin;
}"
20597,"/** 
 * Checks if the test subject have a specific alias
 * @param toFind The alias to search for.
 * @return Returns true if the alias is found, false otherwise 
 */
public boolean checkForAlias(String toFind){
  boolean found=false;
  for (  String alias : this.alias) {
    if (alias.equals(toFind))     found=true;
  }
  return found;
}","/** 
 * Checks if the test subject have a specific alias
 * @param toFind The alias to search for.
 * @return Returns true if the alias is found, false otherwise
 */
public boolean checkForAlias(String toFind){
  boolean found=false;
  for (  String alias : this.alias) {
    if (alias.equals(toFind))     found=true;
  }
  return found;
}"
20598,"/** 
 * @return the nick 
 */
public String getNick(){
  return nick;
}","/** 
 * @return the nick
 */
public String getNick(){
  return nick;
}"
20599,"/** 
 * @return the mode 
 */
public Mode getMode(){
  return mode;
}","/** 
 * @return the mode
 */
public Mode getMode(){
  return mode;
}"
20600,"/** 
 * Runs this utility from the command line.
 * @param args the command line arguments
 */
public static void main(String[] args) throws Exception {
  Arguments arguments=new Arguments(args);
  List<String> errors=new ArrayList<String>();
  if (arguments.exists(""String_Node_Str"",""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String source=arguments.value(""String_Node_Str"",""String_Node_Str"");
  if (source == null) {
    errors.add(""String_Node_Str"");
  }
  String springVersion=arguments.value(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Collection<String> packages=arguments.valueList(""String_Node_Str"",""String_Node_Str"");
  if (packages == null) {
    errors.add(""String_Node_Str"");
  }
  if (!errors.isEmpty()) {
    for (    String error : errors) {
      System.err.println(error);
    }
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  File sourceDir=new File(source);
  File packageDirs[]=new File[packages.size()];
  int i=0;
  for (  String packageStr : packages) {
    packageStr=packageStr.replaceAll(""String_Node_Str"",File.separator);
    packageDirs[i]=new File(sourceDir,packageStr);
    i++;
  }
  ApplicationContextGenerator generator=new ApplicationContextGenerator(springVersion);
  JavaFileFilter javaFileFilter=new JavaFileFilter();
  for (  File directory : packageDirs) {
    File files[]=directory.listFiles(javaFileFilter);
    for (    File file : files) {
      generator.addBean(new FileReader(file));
    }
  }
  Document document=generator.getDocument();
  String xmlString;
{
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource domSource=new DOMSource(document);
    trans.transform(domSource,result);
    xmlString=sw.toString();
  }
  System.out.println(xmlString);
}","/** 
 * Runs this utility from the command line.
 * @param args the command line arguments
 */
public static void main(String[] args) throws Exception {
  Arguments arguments=new Arguments(args);
  List<String> errors=new ArrayList<String>();
  if (arguments.exists(""String_Node_Str"",""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String source=arguments.value(""String_Node_Str"",""String_Node_Str"");
  if (source == null) {
    errors.add(""String_Node_Str"");
  }
  String springVersion=arguments.value(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Collection<String> packages=arguments.valueList(""String_Node_Str"",""String_Node_Str"");
  if (packages.isEmpty()) {
    errors.add(""String_Node_Str"");
  }
  if (!errors.isEmpty()) {
    for (    String error : errors) {
      System.err.println(error);
    }
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  File sourceDir=new File(source);
  File packageDirs[]=new File[packages.size()];
  int i=0;
  for (  String packageStr : packages) {
    if (packageStr == null) {
      packageStr=""String_Node_Str"";
    }
    packageStr=packageStr.replaceAll(""String_Node_Str"",File.separator);
    packageDirs[i]=new File(sourceDir,packageStr);
    i++;
  }
  ApplicationContextGenerator generator=new ApplicationContextGenerator(springVersion);
  JavaFileFilter javaFileFilter=new JavaFileFilter();
  for (  File directory : packageDirs) {
    File files[]=directory.listFiles(javaFileFilter);
    for (    File file : files) {
      generator.addBean(new FileReader(file));
    }
  }
  Document document=generator.getDocument();
  String xmlString;
{
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource domSource=new DOMSource(document);
    trans.transform(domSource,result);
    xmlString=sw.toString();
  }
  System.out.println(xmlString);
}"
20601,"private Element buildBeanElement(String contentsString){
  String packageName=null;
  Matcher matcher=packageRegex.matcher(contentsString);
  if (matcher.find()) {
    packageName=matcher.group(1);
  }
  String className=null;
  matcher=classNameRegex.matcher(contentsString);
  if (matcher.find()) {
    className=matcher.group(1);
  }
 else {
    return null;
  }
  Element beanElement=document.createElement(""String_Node_Str"");
  String classNameLower=className.substring(0,1).toLowerCase() + className.substring(1);
  beanElement.setAttribute(""String_Node_Str"",classNameLower);
  if (packageName != null) {
    beanElement.setAttribute(""String_Node_Str"",packageName + ""String_Node_Str"" + className);
  }
  Pattern constructorRegex=Pattern.compile(""String_Node_Str"" + className + ""String_Node_Str"");
  matcher=constructorRegex.matcher(contentsString);
  List<String> constructors=new ArrayList<String>();
  boolean defaultConstructor=false;
  while (matcher.find()) {
    String parameters=matcher.group(1).trim();
    if (parameters.isEmpty()) {
      defaultConstructor=true;
      break;
    }
    constructors.add(parameters);
  }
  if (!defaultConstructor && constructors.size() == 1) {
    matcher=parameterRegex.matcher(constructors.get(0));
    int index=0;
    while (matcher.find()) {
      String type=matcher.group(1);
      String name=matcher.group(2);
      Element constructorArgElement=document.createElement(""String_Node_Str"");
      if (wrappers.contains(type) || primatives.contains(type)) {
        if (wrappers.contains(type)) {
          type=""String_Node_Str"" + type;
        }
        constructorArgElement.setAttribute(""String_Node_Str"",type);
        constructorArgElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        constructorArgElement.setAttribute(""String_Node_Str"",name);
      }
      constructorArgElement.setAttribute(""String_Node_Str"",index + ""String_Node_Str"");
      index++;
      beanElement.appendChild(constructorArgElement);
    }
  }
  matcher=publicFieldRegex.matcher(contentsString);
  while (matcher.find()) {
    String type=matcher.group(1);
    String name=matcher.group(2);
    String value=matcher.group(4);
    Element propertyElement=document.createElement(""String_Node_Str"");
    propertyElement.setAttribute(""String_Node_Str"",name);
    if (primatives.contains(type) || wrappers.contains(type)) {
      propertyElement.setAttribute(""String_Node_Str"",value);
    }
 else {
      String typeLower=type.substring(0,1).toLowerCase() + type.substring(1);
      propertyElement.setAttribute(""String_Node_Str"",typeLower);
    }
    beanElement.appendChild(propertyElement);
  }
  matcher=setterRegex.matcher(contentsString);
  while (matcher.find()) {
    String name=matcher.group(1);
    String type=matcher.group(2);
    Element propertyElement=document.createElement(""String_Node_Str"");
    name=name.substring(0,1).toLowerCase() + name.substring(1);
    propertyElement.setAttribute(""String_Node_Str"",name);
    if (primatives.contains(type) || wrappers.contains(type)) {
      propertyElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      String typeLower=type.substring(0,1).toLowerCase() + type.substring(1);
      propertyElement.setAttribute(""String_Node_Str"",typeLower);
    }
    beanElement.appendChild(propertyElement);
  }
  return beanElement;
}","/** 
 * Creates the &lt;bean /&gt; element.
 * @param javaSource the Java source code
 * @return the &lt;bean /&gt; element or null if there were no public classes.
 */
private Element buildBeanElement(String javaSource){
  Matcher matcher;
  String className=null;
  matcher=classNameRegex.matcher(javaSource);
  if (matcher.find()) {
    className=matcher.group(1);
  }
 else {
    return null;
  }
  String packageName=null;
  matcher=packageRegex.matcher(javaSource);
  if (matcher.find()) {
    packageName=matcher.group(1);
  }
  Element beanElement=document.createElement(""String_Node_Str"");
  String classNameLower=className.substring(0,1).toLowerCase() + className.substring(1);
  beanElement.setAttribute(""String_Node_Str"",classNameLower);
  String classAttr=(packageName == null) ? className : packageName + ""String_Node_Str"" + className;
  beanElement.setAttribute(""String_Node_Str"",classAttr);
  Pattern constructorRegex=Pattern.compile(""String_Node_Str"" + className + ""String_Node_Str"");
  matcher=constructorRegex.matcher(javaSource);
  List<String> constructors=new ArrayList<String>();
  boolean defaultConstructor=false;
  while (matcher.find()) {
    String parameters=matcher.group(1);
    if (parameters.isEmpty()) {
      defaultConstructor=true;
      break;
    }
    constructors.add(parameters);
  }
  if (!defaultConstructor && constructors.size() == 1) {
    matcher=parameterRegex.matcher(constructors.get(0));
    int index=0;
    while (matcher.find()) {
      String type=matcher.group(1);
      Element constructorArgElement=document.createElement(""String_Node_Str"");
      if (wrappers.contains(type) || primatives.contains(type)) {
        if (wrappers.contains(type)) {
          type=""String_Node_Str"" + type;
        }
        constructorArgElement.setAttribute(""String_Node_Str"",type);
        constructorArgElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        String typeLower=type.substring(0,1).toLowerCase() + type.substring(1);
        constructorArgElement.setAttribute(""String_Node_Str"",typeLower);
      }
      constructorArgElement.setAttribute(""String_Node_Str"",index + ""String_Node_Str"");
      index++;
      beanElement.appendChild(constructorArgElement);
    }
  }
  matcher=publicFieldRegex.matcher(javaSource);
  while (matcher.find()) {
    String type=matcher.group(1);
    String name=matcher.group(2);
    String value=matcher.group(4);
    Element propertyElement=document.createElement(""String_Node_Str"");
    propertyElement.setAttribute(""String_Node_Str"",name);
    if (primatives.contains(type) || wrappers.contains(type)) {
      propertyElement.setAttribute(""String_Node_Str"",value);
    }
 else {
      String typeLower=type.substring(0,1).toLowerCase() + type.substring(1);
      propertyElement.setAttribute(""String_Node_Str"",typeLower);
    }
    beanElement.appendChild(propertyElement);
  }
  matcher=setterRegex.matcher(javaSource);
  while (matcher.find()) {
    String name=matcher.group(1);
    String type=matcher.group(2);
    Element propertyElement=document.createElement(""String_Node_Str"");
    name=name.substring(0,1).toLowerCase() + name.substring(1);
    propertyElement.setAttribute(""String_Node_Str"",name);
    if (primatives.contains(type) || wrappers.contains(type)) {
      propertyElement.setAttribute(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      String typeLower=type.substring(0,1).toLowerCase() + type.substring(1);
      propertyElement.setAttribute(""String_Node_Str"",typeLower);
    }
    beanElement.appendChild(propertyElement);
  }
  return beanElement;
}"
20602,"/** 
 * @param args
 */
public static void main(String[] args) throws Exception {
  Arguments arguments=new Arguments(args);
  List<String> errors=new ArrayList<String>();
  if (arguments.exists(""String_Node_Str"",""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String source=arguments.value(""String_Node_Str"",""String_Node_Str"");
  if (source == null) {
    errors.add(""String_Node_Str"");
  }
  String springVersion=arguments.value(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Collection<String> packages=arguments.valueList(""String_Node_Str"",""String_Node_Str"");
  if (packages == null) {
    errors.add(""String_Node_Str"");
  }
  if (!errors.isEmpty()) {
    for (    String error : errors) {
      System.err.println(error);
    }
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  File sourceDir=new File(source);
  File packageDirs[]=new File[packages.size()];
  int i=0;
  for (  String packageStr : packages) {
    packageStr=packageStr.replaceAll(""String_Node_Str"",File.separator);
    packageDirs[i]=new File(sourceDir,packageStr);
  }
  ApplicationContextGenerator generator=new ApplicationContextGenerator(springVersion);
  JavaFileFilter javaFileFilter=new JavaFileFilter();
  for (  File directory : packageDirs) {
    File files[]=directory.listFiles(javaFileFilter);
    for (    File file : files) {
      generator.processSourceFile(new FileReader(file));
    }
  }
  Document document=generator.getDocument();
  String xmlString;
{
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource domSource=new DOMSource(document);
    trans.transform(domSource,result);
    xmlString=sw.toString();
  }
  System.out.println(xmlString);
}","/** 
 * Runs this utility from the command line.
 * @param args the command line arguments
 */
public static void main(String[] args) throws Exception {
  Arguments arguments=new Arguments(args);
  List<String> errors=new ArrayList<String>();
  if (arguments.exists(""String_Node_Str"",""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  String source=arguments.value(""String_Node_Str"",""String_Node_Str"");
  if (source == null) {
    errors.add(""String_Node_Str"");
  }
  String springVersion=arguments.value(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Collection<String> packages=arguments.valueList(""String_Node_Str"",""String_Node_Str"");
  if (packages == null) {
    errors.add(""String_Node_Str"");
  }
  if (!errors.isEmpty()) {
    for (    String error : errors) {
      System.err.println(error);
    }
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  File sourceDir=new File(source);
  File packageDirs[]=new File[packages.size()];
  int i=0;
  for (  String packageStr : packages) {
    packageStr=packageStr.replaceAll(""String_Node_Str"",File.separator);
    packageDirs[i]=new File(sourceDir,packageStr);
    i++;
  }
  ApplicationContextGenerator generator=new ApplicationContextGenerator(springVersion);
  JavaFileFilter javaFileFilter=new JavaFileFilter();
  for (  File directory : packageDirs) {
    File files[]=directory.listFiles(javaFileFilter);
    for (    File file : files) {
      generator.addBean(new FileReader(file));
    }
  }
  Document document=generator.getDocument();
  String xmlString;
{
    TransformerFactory transfac=TransformerFactory.newInstance();
    Transformer trans=transfac.newTransformer();
    trans.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource domSource=new DOMSource(document);
    trans.transform(domSource,result);
    xmlString=sw.toString();
  }
  System.out.println(xmlString);
}"
20603,"/** 
 * If an argument is defined multiple times, this will return the values of each definition.
 * @param shortArg the short version of the argument (example: ""h"" for ""-h"")
 * @param longArg the long version of the argument (example: ""help"" for""--help"")
 * @param defaultValue the value to return if the argument has no value
 * @return each of the argument's values or a Collection containingdefaultValue if the argument does not exist, or null if defaultValue is null (example: [""bar"", ""car""] is returned for the argument ""--foo=bar --foo=car"")
 */
@SuppressWarnings(""String_Node_Str"") public Collection<String> valueList(String shortArg,String longArg,String defaultValue){
  Collection<String> values=(Collection<String>)args.getCollection(shortArg);
  if (values == null) {
    values=(Collection<String>)args.getCollection(longArg);
  }
  if (values == null && defaultValue != null) {
    values=new ArrayList<String>();
    values.add(defaultValue);
  }
  return values;
}","/** 
 * If an argument is defined multiple times, this will return the values of each definition.
 * @param shortArg the short version of the argument (example: ""h"" for ""-h"")
 * @param longArg the long version of the argument (example: ""help"" for""--help"")
 * @param defaultValue the value to return if the argument has no value
 * @return each of the argument's values or a Collection containingdefaultValue if the argument does not exist, or null if defaultValue is null (example: [""bar"", ""car""] is returned for the argument ""--foo=bar --foo=car"")
 */
@SuppressWarnings(""String_Node_Str"") public Collection<String> valueList(String shortArg,String longArg,String defaultValue){
  Collection<String> shortArgValues=(Collection<String>)args.getCollection(shortArg);
  Collection<String> longArgValues=(Collection<String>)args.getCollection(longArg);
  Collection<String> values=new ArrayList<String>();
  if (shortArgValues == null && longArgValues == null && defaultValue != null) {
    values.add(defaultValue);
  }
 else {
    if (shortArgValues != null) {
      values.addAll(shortArgValues);
    }
    if (longArgValues != null) {
      values.addAll(longArgValues);
    }
  }
  return values;
}"
20604,"/** 
 * Gets the value of an argument.
 * @param shortArg the short version of the argument (example: ""h"" for ""-h"")
 * @param longArg the long version of the argument (example: ""help"" for""--help"")
 * @param defaultValue the value to return if the argument has no value
 * @return the argument's value or defaultValue if it has no value (example:""bar"" is returned for the argument ""--foo=bar"")
 */
public String value(String shortArg,String longArg,String defaultValue){
  Collection<String> values=valueList(shortArg,longArg,defaultValue);
  if (values != null) {
    return values.iterator().next();
  }
  return null;
}","/** 
 * Gets the value of an argument.
 * @param shortArg the short version of the argument (example: ""h"" for ""-h"")
 * @param longArg the long version of the argument (example: ""help"" for""--help"")
 * @param defaultValue the value to return if the argument has no value
 * @return the argument's value or defaultValue if it has no value (example:""bar"" is returned for the argument ""--foo=bar"")
 */
public String value(String shortArg,String longArg,String defaultValue){
  Collection<String> values=valueList(shortArg,longArg,defaultValue);
  if (values.isEmpty()) {
    return null;
  }
  return values.iterator().next();
}"
20605,"@Override public boolean canRemove(){
  if (this.fsm.getCurrentState() == FSM.END_STATE) {
    if (interpreter.countPlansOfType(this.type) <= 1) {
      ConversationMulticast temp=spawn(null,null);
      interpreter.addPlan(temp);
    }
    return true;
  }
  return false;
}","@Override public boolean canRemove(){
  if (this.fsm.getCurrentState() == FSM.END_STATE) {
    if (interpreter.countPlansOfType(this.type) <= 1) {
      ConversationMulticastMultiRole temp=spawn(null,null);
      interpreter.addPlan(temp);
    }
    return true;
  }
  return false;
}"
20606,"@Override public void handle(Message msg){
  if ((msg.getToKey() == null)) {
    if (myKey != null) {
      String key=dm.keyGen.getKey();
      msg.setToKey(key);
      ConversationMulticastMultiRole conv=spawn(key,msg);
      interpreter.addPlan(conv);
      interpreter.addInput(msg);
      return;
    }
 else {
      this.myKey=dm.keyGen.getKey();
      TreeMap<String,String> map=new TreeMap<String,String>();
      map.put(msg.getFrom(),msg.getFromKey());
      this.role_to_toKey=map;
    }
  }
  if (!this.role_to_toKey.containsKey(msg.getFrom()))   return;
  handleFSMTransistion(msg);
}","@Override public void handle(Message msg){
  if ((msg.getToKey() == null)) {
    if (myKey != null) {
      String key=dm.keyGen.getKey();
      msg.setToKey(key);
      ConversationMulticastMultiRole conv=spawn(key,msg);
      interpreter.addPlan(conv);
      interpreter.addInput(msg);
      return;
    }
 else {
      this.myKey=dm.keyGen.getKey();
      TreeMap<String,String> map=new TreeMap<String,String>();
      map.put(msg.getFrom(),msg.getFromKey());
    }
  }
  if (!this.role_to_toKey.containsKey(msg.getFrom()))   return;
  handleFSMTransistion(msg);
}"
20607,"public synchronized void sendBuffer(byte[] msgBuffer){
  if (outStream == null) {
    return;
  }
  for (  final byte element : msgBuffer) {
    try {
      outStream.write(element);
      outStream.flush();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
      outStream=null;
    }
    sleep(50);
  }
}","public synchronized void sendBuffer(byte[] msgBuffer){
  if (outStream == null) {
    return;
  }
  for (  final byte element : msgBuffer) {
    try {
      outStream.write(element);
      outStream.flush();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
      outStream=null;
      return;
    }
    sleep(50);
  }
}"
20608,"public boolean checkBluetoothAvailable(){
  return mBluetoothAdapter != null && mBluetoothAdapter.isEnabled();
}","public synchronized boolean checkBluetoothAvailable(){
  return mBluetoothAdapter != null && mBluetoothAdapter.isEnabled();
}"
20609,"public boolean connect(){
  Log.d(TAG,""String_Node_Str"");
  if (device == null) {
    device=mBluetoothAdapter.getRemoteDevice(address);
  }
  if (btSocket == null) {
    Log.d(TAG,""String_Node_Str"" + device.getName());
    try {
      btSocket=device.createRfcommSocketToServiceRecord(MY_UUID);
    }
 catch (    final IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      return false;
    }
    mBluetoothAdapter.cancelDiscovery();
    try {
      btSocket.connect();
      Log.e(TAG,""String_Node_Str"");
    }
 catch (    final IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      try {
        btSocket.close();
      }
 catch (      final IOException e2) {
        Log.e(TAG,""String_Node_Str"",e2);
      }
      return false;
    }
  }
  if (outStream == null) {
    try {
      outStream=btSocket.getOutputStream();
    }
 catch (    final IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      return false;
    }
  }
  return true;
}","public synchronized boolean connect(){
  Log.d(TAG,""String_Node_Str"");
  if (device == null) {
    device=mBluetoothAdapter.getRemoteDevice(address);
  }
  if (btSocket == null) {
    Log.d(TAG,""String_Node_Str"" + device.getName());
    try {
      btSocket=device.createRfcommSocketToServiceRecord(MY_UUID);
    }
 catch (    final IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      return false;
    }
    mBluetoothAdapter.cancelDiscovery();
    try {
      btSocket.connect();
      Log.e(TAG,""String_Node_Str"");
    }
 catch (    final IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      try {
        btSocket.close();
      }
 catch (      final IOException e2) {
        Log.e(TAG,""String_Node_Str"",e2);
      }
      return false;
    }
  }
  if (outStream == null) {
    try {
      outStream=btSocket.getOutputStream();
    }
 catch (    final IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      return false;
    }
  }
  return true;
}"
20610,"public void run(){
  if (!bluetooth.isConnected()) {
    bluetooth.connect();
  }
 else {
    robotControl.sendCommandString(RobotControl.UPDOWN_AXIS,updownValue);
    robotControl.sendCommandString(RobotControl.SIDEWAYS_AXIS,sidewaysValue);
  }
  bluetoothConnectionStatusToggle.setChecked(bluetooth.checkBluetoothAvailable());
  deviceConnectedStatusToggle.setChecked(bluetooth.isConnected());
  handlerTimer.postDelayed(this,300);
}","public void run(){
  if (!bluetooth.isConnected()) {
    if (bluetooth.checkBluetoothAvailable()) {
      bluetooth.connect();
    }
  }
 else {
    robotControl.sendCommandString(RobotControl.UPDOWN_AXIS,updownValue);
    robotControl.sendCommandString(RobotControl.SIDEWAYS_AXIS,sidewaysValue);
  }
  bluetoothConnectionStatusToggle.setChecked(bluetooth.checkBluetoothAvailable());
  deviceConnectedStatusToggle.setChecked(bluetooth.isConnected());
  handlerTimer.postDelayed(this,300);
}"
20611,"/** 
 * A specific method for parsing the given sampler mapping and return a pair of rdf-type and the associated dictionary-sampler 
 * @param samplerMapping - A single entry in the sampler-function mappings which contains the rdf-type and itsassociated dictionary-sampler
 * @return - A pair of rdf-type and its associated dictionary-sampler 
 * @throws IOException - In case that one of the samplers fails to run init (which uses some external files forloading the different labels
 * @throws IllegalStateException - In case of an un-familiar d-sampler
 */
private TypeDSamplerPair parseSamplerMapping(Resource samplerMapping) throws IOException {
  String dSamplerType=samplerMapping.getProperty(RDF.type).getObject().toString();
  if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_CUSTOM_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    Literal dataPathLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_SOURCE)).getObject();
    String dataPath=dataPathLit.getString();
    CustomDictionarySampler customDicSampler=new CustomDictionarySampler();
    customDicSampler.init(dataPath);
    return new TypeDSamplerPair(type,customDicSampler);
  }
 else   if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_STD_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    Literal dataPathLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_SOURCE)).getObject();
    String dataPath=dataPathLit.getString();
    Resource mode=(Resource)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_MODE)).getObject();
    SamplingMode samplingMode=parseSamplingMode(mode);
    StdDictionarySampler dSampler=new StdDictionarySampler();
    dSampler.init(dataPath);
    dSampler.setSamplingMode(samplingMode);
    return new TypeDSamplerPair(type,dSampler);
  }
 else   if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_CTR_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    Literal labelLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_LABEL)).getObject();
    String label=labelLit.getString();
    Resource mode=(Resource)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_MODE)).getObject();
    SamplingMode samplingMode=parseSamplingMode(mode);
    CounterDictionarySampler ctrDicSampler=new CounterDictionarySampler();
    ctrDicSampler.init(label);
    ctrDicSampler.setSamplingMode(samplingMode);
    return new TypeDSamplerPair(type,ctrDicSampler);
  }
 else   if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_EXT_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    ExternalConstDictionarySampler extDicSampler=new ExternalConstDictionarySampler();
    return new TypeDSamplerPair(type,extDicSampler);
  }
 else   if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_CONST_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    Literal labelLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_LABEL)).getObject();
    String label=labelLit.getString();
    ConstDictionarySampler constDicSampler=new ConstDictionarySampler();
    constDicSampler.init(label);
    return new TypeDSamplerPair(type,constDicSampler);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}","/** 
 * A specific method for parsing the given sampler mapping and return a pair of rdf-type and the associated dictionary-sampler 
 * @param samplerMapping - A single entry in the sampler-function mappings which contains the rdf-type and itsassociated dictionary-sampler
 * @return - A pair of rdf-type and its associated dictionary-sampler 
 * @throws IOException - In case that one of the samplers fails to run init (which uses some external files forloading the different labels
 * @throws IllegalStateException - In case of an un-familiar d-sampler
 */
private TypeDSamplerPair parseSamplerMapping(Resource samplerMapping) throws IOException {
  String dSamplerType=samplerMapping.getProperty(RDF.type).getObject().toString();
  if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_CUSTOM_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    Literal dataPathLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_SOURCE)).getObject();
    String dataPath=dataPathLit.getString();
    CustomDictionarySampler customDicSampler=new CustomDictionarySampler();
    customDicSampler.init(dataPath);
    return new TypeDSamplerPair(type,customDicSampler);
  }
 else   if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_STD_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    Literal dataPathLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_SOURCE)).getObject();
    String dataPath=dataPathLit.getString();
    Resource mode=(Resource)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_MODE)).getObject();
    SamplingMode samplingMode=parseSamplingMode(mode);
    StdDictionarySampler dSampler=new StdDictionarySampler();
    dSampler.setSamplingMode(samplingMode);
    dSampler.init(dataPath);
    return new TypeDSamplerPair(type,dSampler);
  }
 else   if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_CTR_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    Literal labelLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_LABEL)).getObject();
    String label=labelLit.getString();
    Resource mode=(Resource)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_MODE)).getObject();
    SamplingMode samplingMode=parseSamplingMode(mode);
    CounterDictionarySampler ctrDicSampler=new CounterDictionarySampler();
    ctrDicSampler.init(label);
    ctrDicSampler.setSamplingMode(samplingMode);
    return new TypeDSamplerPair(type,ctrDicSampler);
  }
 else   if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_EXT_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    ExternalConstDictionarySampler extDicSampler=new ExternalConstDictionarySampler();
    return new TypeDSamplerPair(type,extDicSampler);
  }
 else   if (dSamplerType.equals(RDF_GEN_NS + RdfGenTypes.RES_RDF_TYPE_CONST_DIC_SAMPLER)) {
    Literal typeLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_TYPE)).getObject();
    String type=typeLit.getString();
    Literal labelLit=(Literal)samplerMapping.getProperty(new PropertyImpl(RDF_GEN_NS + RdfGenTypes.PROP_RDF_TYPE_LABEL)).getObject();
    String label=labelLit.getString();
    ConstDictionarySampler constDicSampler=new ConstDictionarySampler();
    constDicSampler.init(label);
    return new TypeDSamplerPair(type,constDicSampler);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}"
20612,"@Override public Object datapack(MuleMessage message,String outputEncoding) throws TransformerException {
  this.generateHeadersIfNecessary(message);
  StringBuilder output=new StringBuilder();
  for (int i=0; i < columns.size(); i++) {
    Column column=columns.get(i);
    String value=this.evaluate(message,column);
    String encloseChar=determineEncloseChar(column);
    this.encloseIfNessesary(output,encloseChar);
    Integer columnLength=0;
    if (!StringUtils.isEmpty(column.getLength())) {
      try {
        columnLength=Integer.parseInt(column.getLength());
      }
 catch (      NumberFormatException e) {
        columnLength=0;
      }
    }
    if (columnLength > 0) {
      int vlen=value.length();
      if (this.trimToLength) {
        value=value.substring(0,vlen < columnLength ? vlen : columnLength);
      }
 else       if (this.fillToLength && vlen < columnLength) {
        value=StringUtils.rightPad(value,columnLength - vlen + 1,this.fillLengthChar);
      }
 else       if (this.prefixToLength && vlen < columnLength) {
        value=StringUtils.leftPad(value,columnLength - vlen + 1,this.fillLengthChar);
      }
    }
    output.append(value);
    if (addSpace && value.length() == 0) {
      output.append(' ');
    }
    this.encloseIfNessesary(output,encloseChar);
    if (column.getLineBreak() != null && Boolean.parseBoolean(column.getLineBreak())) {
      output.append(newlineChar);
    }
 else     if (i < columns.size() - 1) {
      output.append(delimiterChar);
    }
  }
  output.append(newlineChar);
  return output.toString();
}","@Override public Object datapack(MuleMessage message,String outputEncoding) throws TransformerException {
  this.generateHeadersIfNecessary(message);
  StringBuilder output=new StringBuilder();
  for (int i=0; i < columns.size(); i++) {
    Column column=columns.get(i);
    String value=this.evaluate(message,column);
    String encloseChar=determineEncloseChar(column);
    this.encloseIfNessesary(output,encloseChar);
    int columnLength=0;
    if (!StringUtils.isEmpty(column.getLength())) {
      try {
        columnLength=Integer.parseInt(column.getLength());
      }
 catch (      NumberFormatException e) {
        columnLength=0;
      }
    }
    if (columnLength > 0) {
      int vlen=value.length();
      if (this.trimToLength) {
        value=value.substring(0,vlen < columnLength ? vlen : columnLength);
      }
 else       if (this.fillToLength && vlen < columnLength) {
        value=StringUtils.rightPad(value,columnLength,this.fillLengthChar);
      }
 else       if (this.prefixToLength && vlen < columnLength) {
        value=StringUtils.leftPad(value,columnLength,this.fillLengthChar);
      }
    }
    output.append(value);
    if (addSpace && value.length() == 0) {
      output.append(' ');
    }
    this.encloseIfNessesary(output,encloseChar);
    if (column.getLineBreak() != null && Boolean.parseBoolean(column.getLineBreak())) {
      output.append(newlineChar);
    }
 else     if (i < columns.size() - 1) {
      output.append(delimiterChar);
    }
  }
  output.append(newlineChar);
  return output.toString();
}"
20613,"public void testFillLength() throws Exception {
  MuleClient client=new MuleClient(muleContext);
  MuleMessage msg=new DefaultMuleMessage(""String_Node_Str"",muleContext);
  MuleMessage result=client.send(""String_Node_Str"",msg);
  String transformation=result.getPayload().toString();
  assertNotNull(transformation);
  String[] values=transformation.split(""String_Node_Str"");
  assertEquals(values.length,2);
  assertEquals(values[0].length(),5);
  assertEquals(values[1].length(),6);
  assertEquals(values[0].substring(1),""String_Node_Str"");
  assertEquals(values[1].substring(1,values[1].length() - 1),""String_Node_Str"");
}","public void testFillLength() throws Exception {
  MuleClient client=new MuleClient(muleContext);
  MuleMessage msg=new DefaultMuleMessage(""String_Node_Str"",muleContext);
  MuleMessage result=client.send(""String_Node_Str"",msg);
  String transformation=result.getPayload().toString();
  assertNotNull(transformation);
  String[] values=transformation.split(""String_Node_Str"");
  assertEquals(values.length,3);
  assertEquals(values[0],""String_Node_Str"");
  assertEquals(values[1],""String_Node_Str"");
  assertEquals(values[2],""String_Node_Str"");
}"
20614,"public void testPrefixLength() throws Exception {
  MuleClient client=new MuleClient(muleContext);
  MuleMessage msg=new DefaultMuleMessage(""String_Node_Str"",muleContext);
  MuleMessage result=client.send(""String_Node_Str"",msg);
  String transformation=result.getPayload().toString();
  assertNotNull(transformation);
  String[] values=transformation.split(""String_Node_Str"");
  assertEquals(values.length,2);
  assertEquals(values[0].length(),5);
  assertEquals(values[1].length(),6);
  assertEquals(values[0].substring(0,values[0].length() - 1),""String_Node_Str"",""String_Node_Str"");
  assertEquals(values[1].substring(0,values[1].length() - 2),""String_Node_Str"",""String_Node_Str"");
}","public void testPrefixLength() throws Exception {
  MuleClient client=new MuleClient(muleContext);
  MuleMessage msg=new DefaultMuleMessage(""String_Node_Str"",muleContext);
  MuleMessage result=client.send(""String_Node_Str"",msg);
  String transformation=result.getPayload().toString();
  assertNotNull(transformation);
  String[] values=transformation.split(""String_Node_Str"");
  assertEquals(values.length,3);
  assertEquals(values[0],""String_Node_Str"");
  assertEquals(values[1],""String_Node_Str"");
  assertEquals(values[2],""String_Node_Str"");
}"
20615,"public Color findColor(SceneObject o,double d,Ray r,int recursion){
  Color color, reflectColor, refractColor;
  color=reflectColor=refractColor=o.getMaterial().getColor();
  Vector intersection=r.getPoint(d);
  Vector normal=o.getNormal(intersection);
  double diffuse=o.getMaterial().getDiffuse();
  double reflection=o.getMaterial().getReflection();
  double refraction=o.getMaterial().getRefraction();
  double shade=0.0;
  for (int k=0; k < scene.getNumLights(); k++) {
    SceneObject light=scene.getLight(k);
    Vector posLight=light.getPos();
    posLight.normalize();
    shade=posLight.dot(normal);
    if (shade < 0) {
      shade=0;
    }
    color=color.multiply((float)((1 - diffuse) + diffuse * shade));
  }
  double c1=-normal.dot(r.getDirection());
  if (recursion < RECURSION_LIMIT && reflection > 0.01) {
    Vector reflectDirection=r.getDirection().add(normal.multiply(2 * c1));
    reflectColor=intersectObject(new Ray(intersection,reflectDirection),++recursion);
    reflectColor=reflectColor.multiply((float)o.getMaterial().getReflection());
  }
  if (recursion < RECURSION_LIMIT && refraction > 0.01) {
    double n=1 / refraction;
    double c2=1 - Math.pow(n,2) * (1 - Math.pow(c1,2));
    if (c2 > 0.0) {
      c2=Math.sqrt(c2);
      Vector refractDirection=r.getDirection().multiply(n).add(normal.multiply(n * c1 - c2));
      refractColor=intersectObject(new Ray(intersection,refractDirection),++recursion);
      refractColor=refractColor.multiply((float)o.getMaterial().getDiffuse());
    }
  }
  Color[] colors={color,reflectColor};
  return Color.combine(colors);
}","public Color findColor(SceneObject o,double d,Ray r,int recursion){
  Color color, reflectColor, refractColor;
  color=reflectColor=refractColor=o.getMaterial().getColor();
  Vector intersection=r.getPoint(d);
  Vector normal=o.getNormal(intersection);
  double diffuse=o.getMaterial().getDiffuse();
  double reflection=o.getMaterial().getReflection();
  double refraction=o.getMaterial().getRefraction();
  double shade=0.0;
  for (int k=0; k < scene.getNumLights(); k++) {
    SceneObject light=scene.getLight(k);
    Vector posLight=light.getPos();
    posLight.normalize();
    shade=posLight.dot(normal);
    if (shade < 0) {
      shade=0;
    }
    color=color.multiply((float)((1 - diffuse) + diffuse * shade));
  }
  double c1=-normal.dot(r.getDirection());
  if (recursion < RECURSION_LIMIT && reflection > 0.01) {
    Vector reflectDirection=r.getDirection().add(normal.multiply(2 * c1));
    reflectColor=intersectObject(new Ray(intersection,reflectDirection),++recursion);
    reflectColor=reflectColor.multiply((float)reflection);
  }
  if (recursion < RECURSION_LIMIT && refraction > 0.01) {
    double n=1 / refraction;
    double c2=1 - Math.pow(n,2) * (1 - Math.pow(c1,2));
    if (c2 > 0.0) {
      c2=Math.sqrt(c2);
      Vector refractDirection=r.getDirection().multiply(n).add(normal.multiply(n * c1 - c2));
      refractColor=intersectObject(new Ray(intersection,refractDirection),++recursion);
      refractColor=refractColor.multiply((float)refraction);
    }
  }
  Color[] colors={color,reflectColor};
  return Color.combine(colors);
}"
20616,"@Override protected Executor executor(){
  return executor();
}","@Override protected Executor executor(){
  return executor;
}"
20617,"public LoginCookies(DataSource dataSource,Timer timer){
  this.dataSource=dataSource;
  timer.scheduleAtFixedRate(cleanupTask,ONE_MINUTE,ONE_HOUR);
}","public LoginCookies(DataSource dataSource,Timer timer){
  this.dataSource=dataSource;
  timer.scheduleAtFixedRate(cleanupTask,ONE_MINUTE * 1000,ONE_HOUR * 1000);
}"
20618,"public Collection<AuditResult> getResults(){
  try {
    ImmutableList.Builder<AuditResult> listBuilder=ImmutableList.<AuditResult>builder();
    for (    TaskAssignment a : unusedTaskAssignments()) {
      listBuilder.add(new AuditResult(AuditResultType.warning,String.format(""String_Node_Str"",a.getTask().getName(),a.getTask().getId(),a.getEmployee().getDisplayName()),a.getEmployee().getURL()));
    }
    for (    TaskAssignment a : duplicateTaskAssignments()) {
      listBuilder.add(new AuditResult(AuditResultType.warning,String.format(""String_Node_Str"",a.getTask().getName(),a.getTask().getId(),a.getEmployee().getDisplayName()),a.getEmployee().getURL()));
    }
    for (    TaskAssignment a : oldTaskAssignments()) {
      listBuilder.add(new AuditResult(AuditResultType.warning,String.format(""String_Node_Str"",a.getTask().getName(),a.getTask().getId(),a.getEmployee().getDisplayName()),a.getEmployee().getURL()));
    }
    return listBuilder.build();
  }
 catch (  SQLException se) {
    throw new RuntimeException(se);
  }
}","public Collection<AuditResult> getResults(){
  try {
    ImmutableList.Builder<AuditResult> listBuilder=ImmutableList.<AuditResult>builder();
    for (    TaskAssignment a : unusedTaskAssignments()) {
      listBuilder.add(new AuditResult(AuditResultType.warning,String.format(""String_Node_Str"",a.getTask().getName(),a.getTask().getId(),a.getEmployee().getDisplayName()),a.getURL()));
    }
    for (    TaskAssignment a : duplicateTaskAssignments()) {
      listBuilder.add(new AuditResult(AuditResultType.warning,String.format(""String_Node_Str"",a.getTask().getName(),a.getTask().getId(),a.getEmployee().getDisplayName()),a.getURL()));
    }
    for (    TaskAssignment a : oldTaskAssignments()) {
      listBuilder.add(new AuditResult(AuditResultType.warning,String.format(""String_Node_Str"",a.getTask().getName(),a.getTask().getId(),a.getEmployee().getDisplayName()),a.getURL()));
    }
    return listBuilder.build();
  }
 catch (  SQLException se) {
    throw new RuntimeException(se);
  }
}"
20619,"/** 
 * Handles the HTTP <code>POST</code> method.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String username=request.getParameter(""String_Node_Str"");
  String password=request.getParameter(""String_Node_Str"");
  int domainIndex=username.indexOf('@');
  if (domainIndex != -1) {
    username=username.substring(0,domainIndex);
  }
  boolean valid=directory.checkCredentials(username,password);
  HttpSession session=request.getSession();
  if (valid) {
    Employee user=directory.getByUserName().get(username);
    session.setAttribute(""String_Node_Str"",user);
    request.setAttribute(""String_Node_Str"",user);
    session.setAttribute(""String_Node_Str"",null);
    String destination=request.getParameter(""String_Node_Str"");
    if (destination == null) {
      destination=request.getContextPath();
    }
    response.sendRedirect(destination);
  }
 else {
    session.setAttribute(""String_Node_Str"",true);
    response.sendRedirect(request.getContextPath() + ""String_Node_Str"");
  }
}","/** 
 * Handles the HTTP <code>POST</code> method.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String username=request.getParameter(""String_Node_Str"");
  String password=request.getParameter(""String_Node_Str"");
  username=username.toLowerCase();
  int domainIndex=username.indexOf('@');
  if (domainIndex != -1) {
    username=username.substring(0,domainIndex);
  }
  boolean valid=directory.checkCredentials(username,password);
  HttpSession session=request.getSession();
  if (valid) {
    Employee user=directory.getByUserName().get(username);
    session.setAttribute(""String_Node_Str"",user);
    session.setAttribute(""String_Node_Str"",null);
    String destination=request.getParameter(""String_Node_Str"");
    if (destination == null) {
      destination=request.getContextPath();
    }
    response.sendRedirect(destination);
  }
 else {
    session.setAttribute(""String_Node_Str"",true);
    response.sendRedirect(request.getContextPath() + ""String_Node_Str"");
  }
}"
20620,"private Map<Date,BigDecimal> overhead(Connection connection) throws SQLException {
  PreparedStatement s=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    s.setInt(1,days);
    s.setInt(2,sarariman.getPaidTimeOff().getPaidTimeOffTask().getId());
    ResultSet r=s.executeQuery();
    try {
      ImmutableSortedMap.Builder<Date,BigDecimal> mapBuilder=ImmutableSortedMap.<Date,BigDecimal>naturalOrder();
      while (r.next()) {
        Date date=r.getDate(""String_Node_Str"");
        BigDecimal total=r.getBigDecimal(""String_Node_Str"");
        mapBuilder.put(date,total);
      }
      return mapBuilder.build();
    }
  finally {
      r.close();
    }
  }
  finally {
    s.close();
  }
}","private Map<Date,BigDecimal> overhead(Connection connection) throws SQLException {
  PreparedStatement s=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    s.setInt(1,days);
    s.setInt(2,sarariman.getPaidTimeOff().getPaidTimeOffTask().getId());
    ResultSet r=s.executeQuery();
    try {
      ImmutableSortedMap.Builder<Date,BigDecimal> mapBuilder=ImmutableSortedMap.<Date,BigDecimal>naturalOrder();
      while (r.next()) {
        Date date=r.getDate(""String_Node_Str"");
        BigDecimal total=r.getBigDecimal(""String_Node_Str"");
        mapBuilder.put(date,total);
      }
      return mapBuilder.build();
    }
  finally {
      r.close();
    }
  }
  finally {
    s.close();
  }
}"
20621,"private Map<Date,BigDecimal> pto(Connection connection) throws SQLException {
  PreparedStatement s=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    s.setInt(1,days);
    s.setInt(2,sarariman.getPaidTimeOff().getPaidTimeOffTask().getId());
    ResultSet r=s.executeQuery();
    try {
      ImmutableSortedMap.Builder<Date,BigDecimal> mapBuilder=ImmutableSortedMap.<Date,BigDecimal>naturalOrder();
      while (r.next()) {
        Date date=r.getDate(""String_Node_Str"");
        BigDecimal total=r.getBigDecimal(""String_Node_Str"");
        mapBuilder.put(date,total);
      }
      return mapBuilder.build();
    }
  finally {
      r.close();
    }
  }
  finally {
    s.close();
  }
}","private Map<Date,BigDecimal> pto(Connection connection) throws SQLException {
  PreparedStatement s=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    s.setInt(1,days);
    s.setInt(2,sarariman.getPaidTimeOff().getPaidTimeOffTask().getId());
    ResultSet r=s.executeQuery();
    try {
      ImmutableSortedMap.Builder<Date,BigDecimal> mapBuilder=ImmutableSortedMap.<Date,BigDecimal>naturalOrder();
      while (r.next()) {
        Date date=r.getDate(""String_Node_Str"");
        BigDecimal total=r.getBigDecimal(""String_Node_Str"");
        mapBuilder.put(date,total);
      }
      return mapBuilder.build();
    }
  finally {
      r.close();
    }
  }
  finally {
    s.close();
  }
}"
20622,"private Map<Date,BigDecimal> billable(Connection connection) throws SQLException {
  PreparedStatement s=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    s.setInt(1,days);
    ResultSet r=s.executeQuery();
    try {
      ImmutableSortedMap.Builder<Date,BigDecimal> mapBuilder=ImmutableSortedMap.<Date,BigDecimal>naturalOrder();
      while (r.next()) {
        Date date=r.getDate(""String_Node_Str"");
        BigDecimal total=r.getBigDecimal(""String_Node_Str"");
        mapBuilder.put(date,total);
      }
      return mapBuilder.build();
    }
  finally {
      r.close();
    }
  }
  finally {
    s.close();
  }
}","private Map<Date,BigDecimal> billable(Connection connection) throws SQLException {
  PreparedStatement s=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    s.setInt(1,days);
    ResultSet r=s.executeQuery();
    try {
      ImmutableSortedMap.Builder<Date,BigDecimal> mapBuilder=ImmutableSortedMap.<Date,BigDecimal>naturalOrder();
      while (r.next()) {
        Date date=r.getDate(""String_Node_Str"");
        BigDecimal total=r.getBigDecimal(""String_Node_Str"");
        mapBuilder.put(date,total);
      }
      return mapBuilder.build();
    }
  finally {
      r.close();
    }
  }
  finally {
    s.close();
  }
}"
20623,"/** 
 * Handles the HTTP <code>GET</code> method.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  response.setContentType(""String_Node_Str"");
  PrintWriter out=response.getWriter();
  try {
    Connection connection=sarariman.openConnection();
    try {
      out.println(""String_Node_Str"");
      Map<Date,BigDecimal> billable=billable(connection);
      Map<Date,BigDecimal> overhead=overhead(connection);
      Map<Date,BigDecimal> pto=pto(connection);
      Set<Date> allDates=Utilities.<Date,BigDecimal>allKeys(ImmutableList.of(billable,overhead));
      for (      Date date : allDates) {
        out.print(date);
        BigDecimal b=billable.get(date);
        if (b == null) {
          b=BigDecimal.ZERO;
        }
        BigDecimal o=overhead.get(date);
        if (o == null) {
          o=BigDecimal.ZERO;
        }
        BigDecimal p=pto.get(date);
        if (p == null) {
          p=BigDecimal.ZERO;
        }
        out.println(String.format(""String_Node_Str"",date,b,o,p));
      }
      out.println(""String_Node_Str"");
    }
  finally {
      connection.close();
    }
  }
 catch (  SQLException e) {
    throw new ServletException(e);
  }
 finally {
    out.close();
  }
}","/** 
 * Handles the HTTP <code>GET</code> method.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  response.setContentType(""String_Node_Str"");
  PrintWriter out=response.getWriter();
  try {
    Connection connection=sarariman.openConnection();
    try {
      out.println(""String_Node_Str"");
      Map<Date,BigDecimal> billable=billable(connection);
      Map<Date,BigDecimal> overhead=overhead(connection);
      Map<Date,BigDecimal> pto=pto(connection);
      Set<Date> allDates=new TreeSet<Date>(Utilities.<Date,BigDecimal>allKeys(ImmutableList.of(billable,overhead)));
      for (      Date date : allDates) {
        BigDecimal b=billable.get(date);
        if (b == null) {
          b=BigDecimal.ZERO;
        }
        BigDecimal o=overhead.get(date);
        if (o == null) {
          o=BigDecimal.ZERO;
        }
        BigDecimal p=pto.get(date);
        if (p == null) {
          p=BigDecimal.ZERO;
        }
        out.println(String.format(""String_Node_Str"",date,b,o,p));
      }
      out.println(""String_Node_Str"");
    }
  finally {
      connection.close();
    }
  }
 catch (  SQLException e) {
    throw new ServletException(e);
  }
 finally {
    out.close();
  }
}"
20624,"public Collection<ProjectedExpense> getProjectedExpenses(PeriodOfPerformance pop){
  Collection<ProjectedExpense> result=new ArrayList<ProjectedExpense>();
  Collection<LaborProjection> laborProjections=getLaborProjections();
  for (  LaborProjection projection : laborProjections) {
    PeriodOfPerformance intersection=projection.getPeriodOfPerformance().intersection(pop);
    ProjectedExpense projectedExpense=new ProjectedExpenseImpl(projection.getEmployee(),intersection,projection.getTask(),workdays,categoriesById,projectBillRates,dataSource);
    result.add(projectedExpense);
  }
  return result;
}","public Collection<ProjectedExpense> getProjectedExpenses(PeriodOfPerformance pop){
  Collection<ProjectedExpense> result=new ArrayList<ProjectedExpense>();
  Collection<LaborProjection> laborProjections=getLaborProjections();
  for (  LaborProjection projection : laborProjections) {
    PeriodOfPerformance intersection=projection.getPeriodOfPerformance().intersection(pop);
    ProjectedExpense projectedExpense=new ProjectedExpenseImpl(projection.getEmployee(),intersection,projection.getTask(),projection.getUtilization(),workdays,categoriesById,projectBillRates,dataSource);
    result.add(projectedExpense);
  }
  return result;
}"
20625,"public ProjectedExpenseImpl(Employee employee,PeriodOfPerformance pop,Task task,Workdays workdays,Map<Long,LaborCategory> categoriesById,Collection<LaborCategoryAssignment> projectBillRates,DataSource dataSource){
  this.employee=employee;
  this.pop=pop;
  this.task=task;
  this.workdays=workdays;
  this.categoriesById=categoriesById;
  this.projectBillRates=projectBillRates;
  this.dataSource=dataSource;
}","public ProjectedExpenseImpl(Employee employee,PeriodOfPerformance pop,Task task,double utilization,Workdays workdays,Map<Long,LaborCategory> categoriesById,Collection<LaborCategoryAssignment> projectBillRates,DataSource dataSource){
  this.employee=employee;
  this.pop=pop;
  this.task=task;
  this.utilization=utilization;
  this.workdays=workdays;
  this.categoriesById=categoriesById;
  this.projectBillRates=projectBillRates;
  this.dataSource=dataSource;
}"
20626,"public BigDecimal getCost(){
  Collection<Date> dates=workdays.getWorkdays(pop);
  BigDecimal total=BigDecimal.ZERO;
  for (  Date date : dates) {
    try {
      CostData cost=Invoice.cost(categoriesById,projectBillRates,task.getProject().getId(),employee.getNumber(),task,SQLUtilities.convert(date),8,dataSource);
      if (cost.getLaborCategory() == null) {
        return BigDecimal.ZERO;
      }
      total=total.add(cost.getCost());
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
  return total;
}","public BigDecimal getCost(){
  Collection<Date> dates=workdays.getWorkdays(pop);
  BigDecimal total=BigDecimal.ZERO;
  for (  Date date : dates) {
    double duration=8 * utilization;
    try {
      CostData cost=Invoice.cost(categoriesById,projectBillRates,task.getProject().getId(),employee.getNumber(),task,SQLUtilities.convert(date),duration,dataSource);
      if (cost.getLaborCategory() == null) {
        return BigDecimal.ZERO;
      }
      total=total.add(cost.getCost());
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
  return total;
}"
20627,"/** 
 * Handles the HTTP <code>POST</code> method.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String dateParam=request.getParameter(""String_Node_Str"");
  checkArgument(checkNotNull(dateParam).length() > 0,""String_Node_Str"");
  String durationParam=request.getParameter(""String_Node_Str"");
  checkArgument(checkNotNull(durationParam).length() > 0,""String_Node_Str"");
  String taskParam=request.getParameter(""String_Node_Str"");
  checkArgument(checkNotNull(taskParam).length() > 0,""String_Node_Str"");
  String descriptionParam=request.getParameter(""String_Node_Str"");
  checkArgument(checkNotNull(descriptionParam).length() > 0,""String_Node_Str"");
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Employee user=(Employee)checkNotNull(request.getAttribute(""String_Node_Str""),""String_Node_Str"");
  BigDecimal duration=new BigDecimal(durationParam);
  Task task=sarariman.getTasks().getMap().get(Integer.parseInt(taskParam));
  String geolocation=request.getParameter(""String_Node_Str"");
  if (geolocation.isEmpty()) {
    geolocation=null;
  }
  try {
    Date date=dateFormat.parse(dateParam);
    TimesheetEntry entry=sarariman.getTimesheetEntries().get(task,user,date);
    if (entry != null) {
      request.getSession().setAttribute(""String_Node_Str"",true);
      request.getSession().setAttribute(""String_Node_Str"",durationParam);
      request.getSession().setAttribute(""String_Node_Str"",descriptionParam);
      response.sendRedirect(entry.getURL().toString());
      return;
    }
    validate(duration,date,task,user);
    recordAndLogEntry(user,task,date,""String_Node_Str"",request.getRemoteHost().toString(),user,duration,descriptionParam,geolocation);
  }
 catch (  ParseException pe) {
    throw new ServletException(pe);
  }
catch (  SQLException se) {
    throw new ServletException(se);
  }
  response.sendRedirect(request.getHeader(""String_Node_Str""));
}","/** 
 * Handles the HTTP <code>POST</code> method.
 * @param request servlet request
 * @param response servlet response
 * @throws ServletException if a servlet-specific error occurs
 * @throws IOException if an I/O error occurs
 */
@Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String dateParam=request.getParameter(""String_Node_Str"");
  checkArgument(checkNotNull(dateParam).length() > 0,""String_Node_Str"");
  String durationParam=request.getParameter(""String_Node_Str"");
  checkArgument(checkNotNull(durationParam).length() > 0,""String_Node_Str"");
  String taskParam=request.getParameter(""String_Node_Str"");
  checkArgument(checkNotNull(taskParam).length() > 0,""String_Node_Str"");
  String descriptionParam=request.getParameter(""String_Node_Str"");
  checkArgument(checkNotNull(descriptionParam).length() > 0,""String_Node_Str"");
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  Employee user=(Employee)checkNotNull(request.getAttribute(""String_Node_Str""),""String_Node_Str"");
  BigDecimal duration=new BigDecimal(durationParam);
  Task task=sarariman.getTasks().getMap().get(Integer.parseInt(taskParam));
  String geolocation=request.getParameter(""String_Node_Str"");
  if (geolocation.isEmpty()) {
    geolocation=null;
  }
  try {
    Date date=dateFormat.parse(dateParam);
    TimesheetEntry entry=sarariman.getTimesheetEntries().get(task,user,date);
    if (entry.exists()) {
      request.getSession().setAttribute(""String_Node_Str"",true);
      request.getSession().setAttribute(""String_Node_Str"",durationParam);
      request.getSession().setAttribute(""String_Node_Str"",descriptionParam);
      response.sendRedirect(entry.getURL().toString());
      return;
    }
    validate(duration,date,task,user);
    recordAndLogEntry(user,task,date,""String_Node_Str"",request.getRemoteHost().toString(),user,duration,descriptionParam,geolocation);
  }
 catch (  ParseException pe) {
    throw new ServletException(pe);
  }
catch (  SQLException se) {
    throw new ServletException(se);
  }
  response.sendRedirect(request.getHeader(""String_Node_Str""));
}"
20628,"public Collection<AuditResult> getResults(){
  try {
    Connection connection=connectionFactory.openConnection();
    try {
      PreparedStatement p=connection.prepareStatement(""String_Node_Str"");
      try {
        p.setInt(1,project);
        ResultSet rs=p.executeQuery();
        try {
          Set<Integer> missing=new HashSet<Integer>();
          while (rs.next()) {
            int manager=rs.getInt(""String_Node_Str"");
            int employee=rs.getInt(""String_Node_Str"");
            Date date=rs.getDate(""String_Node_Str"");
            if (employee != manager) {
              Collection<Integer> orgChartManagers=organizationHierarchy.getManagers(employee,date);
              if (!orgChartManagers.contains(manager)) {
                missing.add(employee);
              }
            }
          }
          Collection<AuditResult> results=new ArrayList<AuditResult>();
          for (          Integer employee : missing) {
            String name=directory.getByNumber().get(employee).getDisplayName();
            AuditResult result=new AuditResult(AuditResultType.error,String.format(""String_Node_Str"",name));
            results.add(result);
          }
          return results;
        }
  finally {
          rs.close();
        }
      }
  finally {
        p.close();
      }
    }
  finally {
      connection.close();
    }
  }
 catch (  SQLException se) {
    throw new RuntimeException(se);
  }
}","public Collection<AuditResult> getResults(){
  try {
    Connection connection=connectionFactory.openConnection();
    try {
      PreparedStatement p=connection.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      try {
        p.setInt(1,project);
        p.setInt(2,project);
        ResultSet rs=p.executeQuery();
        try {
          Set<Integer> missing=new HashSet<Integer>();
          while (rs.next()) {
            int manager=rs.getInt(""String_Node_Str"");
            int employee=rs.getInt(""String_Node_Str"");
            Date date=rs.getDate(""String_Node_Str"");
            Collection<Integer> orgChartManagers=organizationHierarchy.getManagers(employee,date);
            if (orgChartManagers.contains(manager)) {
              missing.remove(employee);
            }
 else {
              missing.add(employee);
            }
          }
          Collection<AuditResult> results=new ArrayList<AuditResult>();
          for (          Integer employee : missing) {
            String name=directory.getByNumber().get(employee).getDisplayName();
            AuditResult result=new AuditResult(AuditResultType.error,String.format(""String_Node_Str"",name));
            results.add(result);
          }
          return results;
        }
  finally {
          rs.close();
        }
      }
  finally {
        p.close();
      }
    }
  finally {
      connection.close();
    }
  }
 catch (  SQLException se) {
    throw new RuntimeException(se);
  }
}"
20629,"/** 
 * Synchronized this directory against the backing store.
 */
void reload();","/** 
 * Synchronize this directory against the backing store.
 */
void reload();"
20630,"/** 
 * Retrieves a Map of Employees with usernamees as the keys.
 * @return a Map of Employees with the username as the key
 */
Map<String,Employee> getByUserName();","/** 
 * Retrieves a Map of Employees with usernames as the keys.
 * @return a Map of Employees with the username as the key
 */
Map<String,Employee> getByUserName();"
20631,"public static Project create(Sarariman sarariman,String name,Long customer,Date pop_start,Date pop_end,String contract,String subcontract,BigDecimal funded,BigDecimal previouslyBilled,long terms,BigDecimal odc_fee,boolean active) throws SQLException {
  Connection connection=sarariman.openConnection();
  PreparedStatement ps=connection.prepareStatement(""String_Node_Str"");
  try {
    ps.setString(1,name);
    ps.setLong(2,customer);
    ps.setDate(3,pop_start);
    ps.setDate(4,pop_end);
    ps.setString(5,contract);
    ps.setString(6,subcontract);
    ps.setBigDecimal(7,funded);
    ps.setBigDecimal(8,previouslyBilled);
    ps.setLong(9,terms);
    ps.setLong(10,terms);
    ps.setBoolean(11,active);
    ps.executeUpdate();
    ResultSet rs=ps.getGeneratedKeys();
    try {
      rs.next();
      PeriodOfPerformance pop=new PeriodOfPerformance(pop_start,pop_end);
      return new Project(sarariman,rs.getLong(1),name,customer,contract,subcontract,funded,previouslyBilled,terms,pop,odc_fee,active);
    }
  finally {
      rs.close();
    }
  }
  finally {
    ps.close();
    connection.close();
  }
}","public static Project create(Sarariman sarariman,String name,Long customer,Date pop_start,Date pop_end,String contract,String subcontract,BigDecimal funded,BigDecimal previouslyBilled,long terms,BigDecimal odc_fee,boolean active) throws SQLException {
  Connection connection=sarariman.openConnection();
  PreparedStatement ps=connection.prepareStatement(""String_Node_Str"");
  try {
    ps.setString(1,name);
    ps.setLong(2,customer);
    ps.setDate(3,pop_start);
    ps.setDate(4,pop_end);
    ps.setString(5,contract);
    ps.setString(6,subcontract);
    ps.setBigDecimal(7,funded);
    ps.setBigDecimal(8,previouslyBilled);
    ps.setLong(9,terms);
    ps.setBigDecimal(10,odc_fee);
    ps.setBoolean(11,active);
    ps.executeUpdate();
    ResultSet rs=ps.getGeneratedKeys();
    try {
      rs.next();
      PeriodOfPerformance pop=new PeriodOfPerformance(pop_start,pop_end);
      return new Project(sarariman,rs.getLong(1),name,customer,contract,subcontract,funded,previouslyBilled,terms,pop,odc_fee,active);
    }
  finally {
      rs.close();
    }
  }
  finally {
    ps.close();
    connection.close();
  }
}"
20632,"private void scheduleMorningTask(){
  Calendar firstTime=Calendar.getInstance();
  Calendar now=Calendar.getInstance();
  firstTime.set(Calendar.HOUR_OF_DAY,8);
  firstTime.set(Calendar.MINUTE,0);
  firstTime.set(Calendar.SECOND,0);
  if (firstTime.before(now)) {
    firstTime.roll(Calendar.DATE,true);
  }
  long period=ONE_DAY;
  timer.scheduleAtFixedRate(new MorningTask(sarariman,directory,emailDispatcher),firstTime.getTime(),period);
}","private void scheduleMorningTask(){
  Calendar firstTime=Calendar.getInstance();
  Calendar now=Calendar.getInstance();
  firstTime.set(Calendar.HOUR_OF_DAY,8);
  firstTime.set(Calendar.MINUTE,0);
  firstTime.set(Calendar.SECOND,0);
  if (firstTime.before(now)) {
    firstTime.add(Calendar.DATE,1);
  }
  long period=ONE_DAY;
  timer.scheduleAtFixedRate(new MorningTask(sarariman,directory,emailDispatcher),firstTime.getTime(),period);
}"
20633,"private void scheduleWeeknightTask(){
  Calendar firstTime=Calendar.getInstance();
  Calendar now=Calendar.getInstance();
  firstTime.set(Calendar.HOUR_OF_DAY,23);
  firstTime.set(Calendar.MINUTE,0);
  firstTime.set(Calendar.SECOND,0);
  if (firstTime.before(now)) {
    firstTime.roll(Calendar.DATE,true);
  }
  long period=ONE_DAY;
  timer.scheduleAtFixedRate(new WeeknightTask(sarariman,directory,emailDispatcher),firstTime.getTime(),period);
}","private void scheduleWeeknightTask(){
  Calendar firstTime=Calendar.getInstance();
  Calendar now=Calendar.getInstance();
  firstTime.set(Calendar.HOUR_OF_DAY,23);
  firstTime.set(Calendar.MINUTE,0);
  firstTime.set(Calendar.SECOND,0);
  if (firstTime.before(now)) {
    firstTime.add(Calendar.DATE,1);
  }
  long period=ONE_DAY;
  timer.scheduleAtFixedRate(new WeeknightTask(sarariman,directory,emailDispatcher),firstTime.getTime(),period);
}"
20634,"public void run(){
  Calendar today=Calendar.getInstance();
  int dayOfWeek=today.get(Calendar.DAY_OF_WEEK);
  if (dayOfWeek == Calendar.SATURDAY && dayOfWeek == Calendar.SUNDAY) {
    return;
  }
  java.util.Date todayDate=today.getTime();
  Date week=new Date(DateUtils.weekStart(todayDate).getTime());
  for (  Employee employee : directory.getByUserName().values()) {
    Timesheet timesheet=new Timesheet(sarariman,employee.getNumber(),week);
    try {
      if (!timesheet.isSubmitted()) {
        if (dayOfWeek == Calendar.FRIDAY) {
          emailDispatcher.send(employee.getEmail(),EmailDispatcher.addresses(sarariman.getApprovers()),""String_Node_Str"",""String_Node_Str"" + week + ""String_Node_Str"");
        }
 else {
          double hoursRecorded=timesheet.getHours(new Date(todayDate.getTime()));
          if (hoursRecorded == 0.0 && employee.isFulltime()) {
            emailDispatcher.send(employee.getEmail(),EmailDispatcher.addresses(sarariman.getApprovers()),""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
    }
 catch (    SQLException se) {
      logger.log(Level.SEVERE,""String_Node_Str"" + today,se);
    }
  }
}","public void run(){
  Calendar today=Calendar.getInstance();
  int dayOfWeek=today.get(Calendar.DAY_OF_WEEK);
  if (dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY) {
    return;
  }
  java.util.Date todayDate=today.getTime();
  Date week=new Date(DateUtils.weekStart(todayDate).getTime());
  for (  Employee employee : directory.getByUserName().values()) {
    Timesheet timesheet=new Timesheet(sarariman,employee.getNumber(),week);
    try {
      if (!timesheet.isSubmitted()) {
        if (dayOfWeek == Calendar.FRIDAY) {
          emailDispatcher.send(employee.getEmail(),EmailDispatcher.addresses(sarariman.getApprovers()),""String_Node_Str"",""String_Node_Str"" + week + ""String_Node_Str"");
        }
 else {
          double hoursRecorded=timesheet.getHours(new Date(todayDate.getTime()));
          if (hoursRecorded == 0.0 && employee.isFulltime()) {
            emailDispatcher.send(employee.getEmail(),EmailDispatcher.addresses(sarariman.getApprovers()),""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
    }
 catch (    SQLException se) {
      logger.log(Level.SEVERE,""String_Node_Str"" + today,se);
    }
  }
}"
20635,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  boolean validCommand=false;
  Player player;
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
 else {
    player=(Player)sender;
    if (args.length == 0) {
      return false;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (gates.gateName.containsKey(gateName)) {
          sender.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str""+ gateName+ ""String_Node_Str"");
          return true;
        }
        getServer().getScheduler().runTaskLaterAsynchronously(this,new KGPlayerInTransit(player,playerListener.inTransit),10);
        Location newLocation=player.getLocation().clone();
        if (args.length == 2) {
          gates.add(gateName,newLocation);
        }
 else         if (args.length == 3) {
          gates.add(gateName,newLocation,args[2],""String_Node_Str"");
        }
 else         if (args.length == 4) {
          gates.add(gateName,newLocation,args[2],args[3]);
        }
        sender.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      validCommand=true;
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      if (permit(player,""String_Node_Str"")) {
        String newGateCommand=""String_Node_Str"";
        if (args.length >= 3) {
          StringBuilder sb=new StringBuilder();
          for (int i=2; i < args.length; i++) {
            if (i > 2) {
              sb.append(""String_Node_Str"");
            }
            sb.append(args[i]);
          }
          newGateCommand=sb.toString();
        }
 else         if (args.length < 2) {
          sender.sendMessage(""String_Node_Str"");
          sender.sendMessage(""String_Node_Str"");
          return false;
        }
        if (gates.gateName.containsKey(gateName)) {
          gates.gateName.get(gateName).setCommand(newGateCommand);
          gates.save();
          if (newGateCommand.isEmpty()) {
            player.sendMessage(gateName + ""String_Node_Str"");
          }
 else {
            player.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str""+ newGateCommand);
          }
        }
 else {
          player.sendMessage(gateName + ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (gates.gateName.containsKey(gateName)) {
          getServer().getScheduler().runTaskLaterAsynchronously(this,new KGPlayerInTransit(player,playerListener.inTransit),10);
          Location newLocation=player.getLocation().clone();
          gates.move(gateName,newLocation);
          sender.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str"");
        }
 else {
          player.sendMessage(gateName + ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        gates.remove(gateName);
        sender.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        String lookFor=null;
        int gateNum=gates.gates.size();
        int page=0;
        if (args.length == 2) {
          try {
            page=Integer.parseInt(args[1]);
          }
 catch (          NumberFormatException e) {
            lookFor=args[1];
          }
          if (page < 0)           page=0;
          if (page == 0) {
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gateNum+ ""String_Node_Str""+ plural(gateNum)+ ""String_Node_Str""+ lookFor);
          }
 else {
            int gatePages=gateNum + (gateNum % gatesPerPage);
            int pages=(gatePages / gatesPerPage);
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gateNum+ ""String_Node_Str""+ plural(gateNum)+ ""String_Node_Str""+ page+ ""String_Node_Str""+ pages);
          }
        }
 else         if (args.length > 2) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gateNum+ ""String_Node_Str""+ plural(gateNum));
        }
        ArrayList<String> gateList=new ArrayList<String>();
        for (        KGate gate : gates.gates) {
          String gateCommand=gate.getCommand();
          if (gateCommand.isEmpty()) {
            gateCommand=""String_Node_Str"";
          }
          if (lookFor != null && gate.getName().contains(lookFor)) {
            gateList.add(String.format(""String_Node_Str"",gate.getName().replace(lookFor,ChatColor.RED + lookFor + ChatColor.RESET),gate.getTargetName(),gateCommand));
          }
 else           if (lookFor != null && gate.getTargetName().contains(lookFor)) {
            gateList.add(String.format(""String_Node_Str"",gate.getName(),gate.getTargetName().replace(lookFor,ChatColor.RED + lookFor + ChatColor.RESET),gateCommand));
          }
 else           if (lookFor == null) {
            gateList.add(String.format(""String_Node_Str"",gate.getName(),gate.getTargetName(),command));
          }
        }
        Object[] sorted=gateList.toArray();
        Arrays.sort(sorted);
        if (page > 0) {
          int begin=(gatesPerPage * page) - gatesPerPage;
          int end=begin + gatesPerPage;
          if (sorted.length < begin + 1) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"" + page+ ""String_Node_Str"");
            return true;
          }
          if (end + 1 > sorted.length) {
            end=sorted.length - 1;
          }
          sorted=Arrays.copyOfRange(sorted,begin,end);
        }
        for (        Object gate : sorted) {
          if (gate instanceof String) {
            player.sendMessage((String)gate);
          }
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        loadConfig();
        int gatesLoaded=gates.load();
        int pages=(gatesLoaded + (gatesLoaded % gatesPerPage)) / gatesPerPage;
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gatesLoaded+ ""String_Node_Str"");
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gatesPerPage+ ""String_Node_Str""+ pages+ ""String_Node_Str"");
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + underblock.toString());
        if (defaultTarget.length() > 0) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + defaultTarget+ ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (defaultCommand.length() > 0) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + defaultCommand+ ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (this.fireEffect) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (this.verbose) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (gates.gateName.containsKey(gateName)) {
          Location destination=gates.gateName.get(gateName).getLocationForTeleport();
          getServer().getScheduler().runTaskLaterAsynchronously(this,new KGPlayerInTransit(player,playerListener.inTransit),20);
          getServer().getScheduler().scheduleSyncDelayedTask(this,new KGPlayerTeleport(player,null,destination,playerListener.frozen,this.fireEffect),1);
          player.teleport(destination);
        }
 else {
          player.sendMessage(gateName + ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (ignored.contains(player)) {
          ignored.remove(player);
          playerListener.inTransit.put(player,System.currentTimeMillis());
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        }
 else {
          ignored.add(player);
          playerListener.inTransit.put(player,System.currentTimeMillis() + 864000000);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 3) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateFrom=args[1];
      String gateTo=args[2];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (gates.gateName.containsKey(gateFrom)) {
          if (gates.gateName.containsKey(gateTo)) {
            gates.gateName.get(gateFrom).setTargetName(gateTo);
            gates.save();
            sender.sendMessage(""String_Node_Str"" + gateFrom + ""String_Node_Str""+ gateTo+ ""String_Node_Str"");
          }
 else {
            sender.sendMessage(""String_Node_Str"" + gateFrom + ""String_Node_Str""+ gateTo+ ""String_Node_Str"");
          }
        }
 else {
          sender.sendMessage(""String_Node_Str"" + gateFrom + ""String_Node_Str""+ gateTo+ ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  return validCommand;
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  boolean validCommand=false;
  Player player;
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
 else {
    player=(Player)sender;
    if (args.length == 0) {
      return false;
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (gates.gateName.containsKey(gateName)) {
          sender.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str""+ gateName+ ""String_Node_Str"");
          return true;
        }
        getServer().getScheduler().runTaskLaterAsynchronously(this,new KGPlayerInTransit(player,playerListener.inTransit),10);
        Location newLocation=player.getLocation().clone();
        if (args.length == 2) {
          gates.add(gateName,newLocation);
        }
 else         if (args.length == 3) {
          gates.add(gateName,newLocation,args[2],""String_Node_Str"");
        }
 else         if (args.length == 4) {
          gates.add(gateName,newLocation,args[2],args[3]);
        }
        sender.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      validCommand=true;
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      if (permit(player,""String_Node_Str"")) {
        String newGateCommand=""String_Node_Str"";
        if (args.length >= 3) {
          StringBuilder sb=new StringBuilder();
          for (int i=2; i < args.length; i++) {
            if (i > 2) {
              sb.append(""String_Node_Str"");
            }
            sb.append(args[i]);
          }
          newGateCommand=sb.toString();
        }
 else         if (args.length < 2) {
          sender.sendMessage(""String_Node_Str"");
          sender.sendMessage(""String_Node_Str"");
          return false;
        }
        if (gates.gateName.containsKey(gateName)) {
          gates.gateName.get(gateName).setCommand(newGateCommand);
          gates.save();
          if (newGateCommand.isEmpty()) {
            player.sendMessage(gateName + ""String_Node_Str"");
          }
 else {
            player.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str""+ newGateCommand);
          }
        }
 else {
          player.sendMessage(gateName + ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (gates.gateName.containsKey(gateName)) {
          getServer().getScheduler().runTaskLaterAsynchronously(this,new KGPlayerInTransit(player,playerListener.inTransit),10);
          Location newLocation=player.getLocation().clone();
          gates.move(gateName,newLocation);
          sender.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str"");
        }
 else {
          player.sendMessage(gateName + ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        gates.remove(gateName);
        sender.sendMessage(""String_Node_Str"" + gateName + ""String_Node_Str"");
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        String lookFor=null;
        int gateNum=gates.gates.size();
        int page=0;
        if (args.length == 2) {
          try {
            page=Integer.parseInt(args[1]);
          }
 catch (          NumberFormatException e) {
            lookFor=args[1];
          }
          if (page < 0)           page=0;
          if (page == 0) {
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gateNum+ ""String_Node_Str""+ plural(gateNum)+ ""String_Node_Str""+ lookFor);
          }
 else {
            int gatePages=gateNum + (gateNum % gatesPerPage);
            int pages=(gatePages / gatesPerPage);
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gateNum+ ""String_Node_Str""+ plural(gateNum)+ ""String_Node_Str""+ page+ ""String_Node_Str""+ pages);
          }
        }
 else         if (args.length > 2) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return true;
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gateNum+ ""String_Node_Str""+ plural(gateNum));
        }
        ArrayList<String> gateList=new ArrayList<String>();
        for (        KGate gate : gates.gates) {
          String gateCommand=gate.getCommand();
          if (gateCommand.isEmpty()) {
            gateCommand=""String_Node_Str"";
          }
          if (lookFor != null && gate.getName().contains(lookFor)) {
            gateList.add(String.format(""String_Node_Str"",gate.getName().replace(lookFor,ChatColor.RED + lookFor + ChatColor.RESET),gate.getTargetName(),gateCommand));
          }
 else           if (lookFor != null && gate.getTargetName().contains(lookFor)) {
            gateList.add(String.format(""String_Node_Str"",gate.getName(),gate.getTargetName().replace(lookFor,ChatColor.RED + lookFor + ChatColor.RESET),gateCommand));
          }
 else           if (lookFor == null) {
            gateList.add(String.format(""String_Node_Str"",gate.getName(),gate.getTargetName(),gateCommand));
          }
        }
        Object[] sorted=gateList.toArray();
        Arrays.sort(sorted);
        if (page > 0) {
          int begin=(gatesPerPage * page) - gatesPerPage;
          int end=begin + gatesPerPage;
          if (sorted.length < begin + 1) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"" + page+ ""String_Node_Str"");
            return true;
          }
          if (end + 1 > sorted.length) {
            end=sorted.length - 1;
          }
          sorted=Arrays.copyOfRange(sorted,begin,end);
        }
        for (        Object gate : sorted) {
          if (gate instanceof String) {
            player.sendMessage((String)gate);
          }
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        loadConfig();
        int gatesLoaded=gates.load();
        int pages=(gatesLoaded + (gatesLoaded % gatesPerPage)) / gatesPerPage;
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gatesLoaded+ ""String_Node_Str"");
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + gatesPerPage+ ""String_Node_Str""+ pages+ ""String_Node_Str"");
        player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + underblock.toString());
        if (defaultTarget.length() > 0) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + defaultTarget+ ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (defaultCommand.length() > 0) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + defaultCommand+ ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (this.fireEffect) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
        if (this.verbose) {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
 else {
          player.sendMessage(ChatColor.GOLD + ""String_Node_Str"");
        }
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 2) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateName=args[1];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (gates.gateName.containsKey(gateName)) {
          Location destination=gates.gateName.get(gateName).getLocationForTeleport();
          getServer().getScheduler().runTaskLaterAsynchronously(this,new KGPlayerInTransit(player,playerListener.inTransit),20);
          getServer().getScheduler().scheduleSyncDelayedTask(this,new KGPlayerTeleport(player,null,destination,playerListener.frozen,this.fireEffect),1);
          player.teleport(destination);
        }
 else {
          player.sendMessage(gateName + ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (ignored.contains(player)) {
          ignored.remove(player);
          playerListener.inTransit.put(player,System.currentTimeMillis());
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        }
 else {
          ignored.add(player);
          playerListener.inTransit.put(player,System.currentTimeMillis() + 864000000);
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else     if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 3) {
        sender.sendMessage(""String_Node_Str"");
        return false;
      }
      String gateFrom=args[1];
      String gateTo=args[2];
      validCommand=true;
      if (permit(player,""String_Node_Str"")) {
        if (gates.gateName.containsKey(gateFrom)) {
          if (gates.gateName.containsKey(gateTo)) {
            gates.gateName.get(gateFrom).setTargetName(gateTo);
            gates.save();
            sender.sendMessage(""String_Node_Str"" + gateFrom + ""String_Node_Str""+ gateTo+ ""String_Node_Str"");
          }
 else {
            sender.sendMessage(""String_Node_Str"" + gateFrom + ""String_Node_Str""+ gateTo+ ""String_Node_Str"");
          }
        }
 else {
          sender.sendMessage(""String_Node_Str"" + gateFrom + ""String_Node_Str""+ gateTo+ ""String_Node_Str"");
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  return validCommand;
}"
20636,"/** 
 * @param compare the comparison LoadRuleDateMap
 * @return true if this LoadRuleDateMap has a date before compare date, for a specific load rule  
 */
public boolean isBefore(LoadRuleDateMap compare){
  for (  Map.Entry<String,Date> entry : map.entrySet()) {
    Date compareDate=compare.getBuiltTime(entry.getKey());
    if (compareDate != null && entry.getValue().before(compareDate)) {
      return true;
    }
  }
  return false;
}","/** 
 * @param compare the comparison LoadRuleDateMap
 * @return true if this LoadRuleDateMap has a date before compare date, for a specific load rule  
 */
public boolean isBefore(LoadRuleDateMap compare){
  for (  Map.Entry<String,Date> entry : map.entrySet()) {
    Date compareDate=compare.getBuiltTime(entry.getKey());
    if (entry.getValue() == null && compareDate != null) {
      return true;
    }
    if (compareDate != null && entry.getValue().before(compareDate)) {
      return true;
    }
  }
  return false;
}"
20637,"@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,TaskListener listener,SCMRevisionState baseline) throws IOException, InterruptedException {
  final AbstractBuild<?,?> lastBuild=project.getLastBuild();
  if (lastBuild == null) {
    DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return PollingResult.BUILD_NOW;
  }
  DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH,lastBuild.getNumber());
  ClearTool ct=new ClearTool(launcher,listener,workspace,viewname);
  LoadRuleDateMap baselineCommits=((SimpleClearCaseRevisionState)baseline).getLoadRuleDateMap();
  DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH,baselineCommits);
  LoadRuleDateMap remoteRevCommits=ct.getLatestCommitDates(getLoadRulesAsList(),baselineCommits);
  if (remoteRevCommits.isDatesEmpty() == true) {
    DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return PollingResult.NO_CHANGES;
  }
  DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH,remoteRevCommits);
  if (getDateUtil().anyDateBefore(remoteRevCommits,new Date(),PropUtils.getQuietPeriod()) == false) {
    DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return PollingResult.NO_CHANGES;
  }
  if (baselineCommits.isBefore(remoteRevCommits) == true) {
    DebugHelper.info(listener,""String_Node_Str"" + ""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return PollingResult.BUILD_NOW;
  }
 else {
    DebugHelper.info(listener,""String_Node_Str"" + ""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return PollingResult.NO_CHANGES;
  }
}","@Override protected PollingResult compareRemoteRevisionWith(AbstractProject<?,?> project,Launcher launcher,FilePath workspace,TaskListener listener,SCMRevisionState baseline) throws IOException, InterruptedException {
  final AbstractBuild<?,?> lastBuild=project.getLastBuild();
  if (lastBuild == null) {
    DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return new PollingResult(PollingResult.Change.SIGNIFICANT);
  }
  DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH,lastBuild.getNumber());
  ClearTool ct=new ClearTool(launcher,listener,workspace,viewname);
  LoadRuleDateMap baselineCommits=((SimpleClearCaseRevisionState)baseline).getLoadRuleDateMap();
  DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH,baselineCommits);
  LoadRuleDateMap remoteRevCommits=ct.getLatestCommitDates(getLoadRulesAsList(),baselineCommits);
  if (remoteRevCommits.isDatesEmpty() == true) {
    DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return new PollingResult(baseline,new SimpleClearCaseRevisionState(remoteRevCommits),PollingResult.Change.NONE);
  }
  DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH,remoteRevCommits);
  if (getDateUtil().anyDateBefore(remoteRevCommits,new Date(),PropUtils.getQuietPeriod()) == false) {
    DebugHelper.info(listener,""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return new PollingResult(baseline,new SimpleClearCaseRevisionState(remoteRevCommits),PollingResult.Change.NONE);
  }
  if (baselineCommits.isBefore(remoteRevCommits) == true) {
    DebugHelper.info(listener,""String_Node_Str"" + ""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return new PollingResult(baseline,new SimpleClearCaseRevisionState(remoteRevCommits),PollingResult.Change.SIGNIFICANT);
  }
 else {
    DebugHelper.info(listener,""String_Node_Str"" + ""String_Node_Str"",LOG_COMPARE_REMOTE_REVISION_WITH);
    return new PollingResult(baseline,new SimpleClearCaseRevisionState(remoteRevCommits),PollingResult.Change.NONE);
  }
}"
20638,"@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changelogFile) throws IOException, InterruptedException {
  DebugHelper.info(listener,""String_Node_Str"",LOG_CHECKOUT);
  ClearTool ct=new ClearTool(launcher,listener,workspace,viewname);
  LoadRuleDateMap changelogSetCommits=null;
  if (build.getPreviousBuild() != null && build.getPreviousBuild().getChangeSet().isEmptySet() == false) {
    SimpleClearCaseChangeLogSet previousChangeLogSet=(SimpleClearCaseChangeLogSet)build.getPreviousBuild().getChangeSet();
    changelogSetCommits=previousChangeLogSet.getLatestCommitDates(getLoadRulesAsList());
    DebugHelper.info(listener,""String_Node_Str"",LOG_CHECKOUT,changelogSetCommits);
  }
 else {
    DebugHelper.info(listener,""String_Node_Str"",LOG_CHECKOUT);
  }
  List<SimpleClearCaseChangeLogEntry> entries=ct.lshistory(getLoadRulesAsList(),changelogSetCommits);
  Collections.sort(entries,new SimpleClearCaseChangeLogEntryDateComparator(SimpleClearCaseSCM.CHANGELOGSET_ORDER));
  SimpleClearCaseChangeLogSet set=new SimpleClearCaseChangeLogSet(build,entries);
  return ((SimpleClearCaseChangeLogParser)createChangeLogParser()).writeChangeLog(changelogFile,set,listener);
}","@Override public boolean checkout(AbstractBuild<?,?> build,Launcher launcher,FilePath workspace,BuildListener listener,File changelogFile) throws IOException, InterruptedException {
  DebugHelper.info(listener,""String_Node_Str"",LOG_CHECKOUT);
  ClearTool ct=new ClearTool(launcher,listener,workspace,viewname);
  LoadRuleDateMap changelogSetCommits=null;
  if (build.getPreviousBuild() != null && build.getPreviousBuild().getChangeSet().isEmptySet() == false) {
    SimpleClearCaseChangeLogSet previousChangeLogSet=(SimpleClearCaseChangeLogSet)build.getPreviousBuild().getChangeSet();
    changelogSetCommits=previousChangeLogSet.getLatestCommitDates(getLoadRulesAsList());
    DebugHelper.info(listener,""String_Node_Str"",LOG_CHECKOUT,changelogSetCommits);
    build.addAction(new SimpleClearCaseSCMTagAction(build,changelogSetCommits));
    DebugHelper.info(listener,""String_Node_Str"",LOG_CHECKOUT,changelogSetCommits);
  }
 else {
    DebugHelper.info(listener,""String_Node_Str"",LOG_CHECKOUT);
  }
  List<SimpleClearCaseChangeLogEntry> entries=ct.lshistory(getLoadRulesAsList(),changelogSetCommits);
  Collections.sort(entries,new SimpleClearCaseChangeLogEntryDateComparator(SimpleClearCaseSCM.CHANGELOGSET_ORDER));
  SimpleClearCaseChangeLogSet set=new SimpleClearCaseChangeLogSet(build,entries);
  return ((SimpleClearCaseChangeLogParser)createChangeLogParser()).writeChangeLog(changelogFile,set,listener);
}"
20639,"private static void addFilePathsToEntry(NodeList items,SimpleClearCaseChangeLogEntry entry){
  for (int i=0; i < items.getLength(); i++) {
    Element elemItem=(Element)items.item(i);
    entry.addPath(elemItem.getTextContent());
  }
}","private static void addFilePathsToEntry(NodeList items,SimpleClearCaseChangeLogEntry entry){
  for (int i=0; i < items.getLength(); i++) {
    Element elemItem=(Element)items.item(i);
    entry.addPath(elemItem.getTextContent().trim());
  }
}"
20640,"public static List<SimpleClearCaseChangeLogEntry> readChangeLog(File file) throws IOException, ParserConfigurationException, SAXException {
  List<SimpleClearCaseChangeLogEntry> ret=new ArrayList<SimpleClearCaseChangeLogEntry>();
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document doc=builder.parse(file);
  Element changelog=(Element)doc.getElementsByTagName(CHANGELOG).item(0);
  NodeList entries=changelog.getElementsByTagName(ENTRY);
  for (int i=0; i < entries.getLength(); i++) {
    Element elemEntry=(Element)entries.item(i);
    String date=elemEntry.getElementsByTagName(DATE).item(0).getTextContent();
    String user=elemEntry.getElementsByTagName(USER).item(0).getTextContent();
    String version=elemEntry.getElementsByTagName(VERSION).item(0).getTextContent();
    String operation=elemEntry.getElementsByTagName(OPERATION).item(0).getTextContent();
    String eventDescription=elemEntry.getElementsByTagName(EVENT_DESCRIPTION).item(0).getTextContent();
    String comment=elemEntry.getElementsByTagName(COMMENT).item(0).getTextContent();
    SimpleClearCaseChangeLogEntry entry=new SimpleClearCaseChangeLogEntry(DateUtil.parseDate(date),user,version,eventDescription,operation,comment);
    addFilePathsToEntry(elemEntry.getElementsByTagName(ITEMS),entry);
    ret.add(entry);
  }
  return ret;
}","public static List<SimpleClearCaseChangeLogEntry> readChangeLog(File file) throws IOException, ParserConfigurationException, SAXException {
  List<SimpleClearCaseChangeLogEntry> ret=new ArrayList<SimpleClearCaseChangeLogEntry>();
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document doc=builder.parse(file);
  Element changelog=(Element)doc.getElementsByTagName(CHANGELOG).item(0);
  NodeList entries=changelog.getElementsByTagName(ENTRY);
  for (int i=0; i < entries.getLength(); i++) {
    Element elemEntry=(Element)entries.item(i);
    String date=elemEntry.getElementsByTagName(DATE).item(0).getTextContent().trim();
    String user=elemEntry.getElementsByTagName(USER).item(0).getTextContent().trim();
    String version=elemEntry.getElementsByTagName(VERSION).item(0).getTextContent().trim();
    String operation=elemEntry.getElementsByTagName(OPERATION).item(0).getTextContent().trim();
    String eventDescription=elemEntry.getElementsByTagName(EVENT_DESCRIPTION).item(0).getTextContent().trim();
    String comment=elemEntry.getElementsByTagName(COMMENT).item(0).getTextContent().trim();
    SimpleClearCaseChangeLogEntry entry=new SimpleClearCaseChangeLogEntry(DateUtil.parseDate(date),user,version,eventDescription,operation,comment);
    addFilePathsToEntry(elemEntry.getElementsByTagName(ITEM),entry);
    ret.add(entry);
  }
  return ret;
}"
20641,"public static boolean writeChangeLog(File file,SimpleClearCaseChangeLogSet set,TaskListener listener) throws IOException {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  Document doc;
  try {
    doc=factory.newDocumentBuilder().newDocument();
  }
 catch (  ParserConfigurationException ex) {
    DebugHelper.error(listener,""String_Node_Str"",ex.getMessage());
    return false;
  }
  doc.setXmlVersion(XML_VERSION);
  Element changelog=doc.createElement(CHANGELOG);
  for (  SimpleClearCaseChangeLogEntry e : set.getEntries()) {
    Element entry=doc.createElement(ENTRY);
    Element date=doc.createElement(DATE);
    date.setTextContent(DateUtil.formatDate(e.getDate()));
    Element user=doc.createElement(USER);
    user.setTextContent(e.getUser());
    Element comment=doc.createElement(COMMENT);
    comment.setTextContent(e.getComment());
    Element version=doc.createElement(VERSION);
    version.setTextContent(e.getVersion());
    Element operation=doc.createElement(OPERATION);
    operation.setTextContent(e.getOperation());
    Element eventDescription=doc.createElement(EVENT_DESCRIPTION);
    eventDescription.setTextContent(e.getEventDescription());
    Element items=doc.createElement(ITEMS);
    for (    String filePath : e.getAffectedPaths()) {
      Element item=doc.createElement(ITEM);
      item.setTextContent(filePath);
      items.appendChild(item);
    }
    entry.appendChild(date);
    entry.appendChild(user);
    entry.appendChild(operation);
    entry.appendChild(eventDescription);
    entry.appendChild(version);
    entry.appendChild(comment);
    entry.appendChild(items);
    changelog.appendChild(entry);
  }
  doc.appendChild(changelog);
  TransformerFactory tf=TransformerFactory.newInstance();
  Transformer t;
  try {
    t=tf.newTransformer();
    t.setOutputProperty(OutputKeys.ENCODING,XML_ENCODING);
    t.setOutputProperty(OutputKeys.INDENT,XML_INDENT);
    t.setOutputProperty(XML_INDENT_SPACE_SETTING,XML_INDENT_SPACE);
    DOMSource src=new DOMSource(doc);
    StreamResult res=new StreamResult(new PrintWriter(new FileWriter(file)));
    t.transform(src,res);
  }
 catch (  TransformerException ex) {
    DebugHelper.error(listener,""String_Node_Str"",ex.getMessage());
    return false;
  }
  return true;
}","public static boolean writeChangeLog(File file,SimpleClearCaseChangeLogSet set,TaskListener listener) throws IOException {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  Document doc;
  try {
    doc=factory.newDocumentBuilder().newDocument();
  }
 catch (  ParserConfigurationException ex) {
    DebugHelper.error(listener,""String_Node_Str"",ex.getMessage());
    return false;
  }
  doc.setXmlVersion(XML_VERSION);
  Element changelog=doc.createElement(CHANGELOG);
  for (  SimpleClearCaseChangeLogEntry e : set.getEntries()) {
    Element entry=doc.createElement(ENTRY);
    Element date=doc.createElement(DATE);
    date.setTextContent(DateUtil.formatDate(e.getDate()));
    Element user=doc.createElement(USER);
    user.setTextContent(e.getUser());
    Element comment=doc.createElement(COMMENT);
    comment.setTextContent(e.getComment());
    Element version=doc.createElement(VERSION);
    version.setTextContent(e.getVersion());
    Element operation=doc.createElement(OPERATION);
    operation.setTextContent(e.getOperation());
    Element eventDescription=doc.createElement(EVENT_DESCRIPTION);
    eventDescription.setTextContent(e.getEventDescription());
    Element items=doc.createElement(ITEMS);
    for (    String filePath : e.getAffectedPaths()) {
      Element item=doc.createElement(ITEM);
      item.setTextContent(filePath);
      items.appendChild(item);
    }
    entry.appendChild(date);
    entry.appendChild(user);
    entry.appendChild(operation);
    entry.appendChild(eventDescription);
    entry.appendChild(version);
    entry.appendChild(comment);
    entry.appendChild(items);
    changelog.appendChild(entry);
  }
  doc.appendChild(changelog);
  TransformerFactory tf=TransformerFactory.newInstance();
  Transformer t;
  try {
    t=tf.newTransformer();
    t.setOutputProperty(OutputKeys.ENCODING,XML_ENCODING);
    t.setOutputProperty(OutputKeys.INDENT,XML_INDENT);
    t.setOutputProperty(XML_INDENT_SPACE_SETTING,XML_INDENT_SPACE);
    DOMSource src=new DOMSource(doc);
    StreamResult res=new StreamResult(new FileOutputStream(file));
    t.transform(src,res);
  }
 catch (  TransformerException ex) {
    DebugHelper.error(listener,""String_Node_Str"",ex.getMessage());
    return false;
  }
  return true;
}"
20642,"@Override public void run(){
  try {
    while (isAlive) {
      processRequest((Operation)inputStream.readObject());
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    IOUtils.closeSilently(this);
  }
}","@Override public void run(){
  try {
    while (isAlive) {
      processRequest((Operation)inputStream.readObject());
    }
  }
 catch (  SocketException se) {
    System.out.println(""String_Node_Str"");
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    IOUtils.closeSilently(this);
  }
}"
20643,"private void respondWith(String result){
  System.out.println(""String_Node_Str"" + result);
  try {
    outputStream.writeObject(result);
  }
 catch (  IOException e) {
    e.printStackTrace(System.err);
  }
}","private void respondWith(String result){
  System.out.println(""String_Node_Str"" + result);
  try {
    outputStream.writeObject(result);
    outputStream.flush();
  }
 catch (  IOException e) {
    e.printStackTrace(System.err);
  }
}"
20644,"private void processRequest(Operation operation){
  System.out.println(""String_Node_Str"" + operation);
  if (operation instanceof Add) {
    respondWith(delegate.add(operation.getLeftOperand(),operation.getLeftOperand()));
  }
 else   if (operation instanceof Subtract) {
    respondWith(delegate.subtract(operation.getLeftOperand(),operation.getLeftOperand()));
  }
 else   if (operation instanceof Compare) {
    respondWith(delegate.compare(operation.getLeftOperand(),operation.getLeftOperand()));
  }
 else {
    respondWith(""String_Node_Str"");
  }
}","private void processRequest(Operation operation){
  System.out.println(""String_Node_Str"" + operation);
  if (operation instanceof Add) {
    respondWith(delegate.add(operation.getLeftOperand(),operation.getRightOperand()));
  }
 else   if (operation instanceof Subtract) {
    respondWith(delegate.subtract(operation.getLeftOperand(),operation.getRightOperand()));
  }
 else   if (operation instanceof Compare) {
    respondWith(delegate.compare(operation.getLeftOperand(),operation.getRightOperand()));
  }
 else {
    respondWith(""String_Node_Str"");
  }
}"
20645,"@Test public void testToBinary() throws Exception {
  Packet packet=Packet.newRequest(peers,0,123,new Payload(){
    @Override public int getCommandId(){
      return 42;
    }
    @Override public byte[] toBinary(){
      return new byte[]{64,65,66,67};
    }
  }
);
  byte[] actual=packet.toBinary();
  byte[] expected=new byte[]{0,0,36,0,0,0,9,8,7,6,5,4,33,3,1,2,3,4,5,6,(byte)128,0,42,0,4,0,4,0,0,0,0,0,0,0,123,0,0,0,64,65,66,67};
  Assert.assertArrayEquals(expected,actual);
}","@Test public void testToBinary() throws Exception {
  Packet packet=Packet.newRequest(peers,0,123,new Payload(){
    @Override public int getCommandId(){
      return 42;
    }
    @Override public byte[] toBinary(){
      return new byte[]{64,65,66,67};
    }
  }
);
  byte[] actual=packet.toBinary();
  byte[] expected=new byte[]{0,0,36,0,0,0,(byte)128,(byte)129,(byte)130,(byte)131,(byte)132,(byte)133,33,3,1,2,3,4,5,6,(byte)128,0,42,0,4,0,4,0,0,0,0,0,0,0,123,0,0,0,64,65,66,67};
  Assert.assertArrayEquals(expected,actual);
}"
20646,"@Test public void testToString() throws Exception {
  Packet packet=Packet.newRequest(peers,0,123,new ReadWriteRequest(1000,2000,new byte[]{1,2,3,4,5},123));
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  String actual=packet.toString();
  Assert.assertEquals(expected,actual);
}","@Test public void testToString() throws Exception {
  Packet packet=Packet.newRequest(peers,0,123,new ReadWriteRequest(1000,2000,new byte[]{1,2,3,4,5},123));
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  String actual=packet.toString();
  Assert.assertEquals(expected,actual);
}"
20647,"private NetId(final int b1,final int b2,final int b3,final int b4,final int b5,final int b6){
  ensureValueFitsByteSize(b1);
  ensureValueFitsByteSize(b2);
  ensureValueFitsByteSize(b3);
  ensureValueFitsByteSize(b4);
  ensureValueFitsByteSize(b5);
  ensureValueFitsByteSize(b6);
  data=new byte[]{(byte)b1,(byte)b2,(byte)b3,(byte)b4,(byte)b5,(byte)b6};
}","private NetId(final int b1,final int b2,final int b3,final int b4,final int b5,final int b6){
  ensureValueFitsByteSize(b1);
  ensureValueFitsByteSize(b2);
  ensureValueFitsByteSize(b3);
  ensureValueFitsByteSize(b4);
  ensureValueFitsByteSize(b5);
  ensureValueFitsByteSize(b6);
  data=new int[]{b1,b2,b3,b4,b5,b6};
}"
20648,"public static NetId valueOf(final byte[] data){
  if (data.length != 6)   throw new IllegalArgumentException(""String_Node_Str"");
  final byte b1=data[0];
  final byte b2=data[1];
  final byte b3=data[2];
  final byte b4=data[3];
  final byte b5=data[4];
  final byte b6=data[5];
  return valueOf(b1,b2,b3,b4,b5,b6);
}","public static NetId valueOf(final byte[] data){
  if (data.length != 6)   throw new IllegalArgumentException(""String_Node_Str"");
  final int[] values=new int[6];
  for (int i=0; i < 6; ++i)   values[i]=Toolbox.toUnsigned(data[i]);
  return valueOf(values[0],values[1],values[2],values[3],values[4],values[5]);
}"
20649,"public byte[] toBinary(){
  return data.clone();
}","public byte[] toBinary(){
  byte[] ret=new byte[6];
  for (int i=0; i < 6; ++i)   ret[i]=(byte)data[i];
  return ret;
}"
20650,"@Override public void execute(CommandSender sender,String[] args){
  if (sender instanceof Player) {
    Player p=(Player)sender;
    Hero pHero=plugin.getHeroManager().getHero(p);
    if (pHero.getInvites().containsKey(args[0])) {
      pHero.setParty(pHero.getInvites().get(args[0]));
      pHero.getInvites().remove(args[0]);
    }
 else {
      sender.sendMessage(""String_Node_Str"");
    }
  }
}","@Override public void execute(CommandSender sender,String[] args){
  if (sender instanceof Player) {
    Player p=(Player)sender;
    Player argPlayer=plugin.getServer().getPlayer(args[0]);
    Hero pHero=plugin.getHeroManager().getHero(p);
    if (pHero.getInvites().containsKey(argPlayer)) {
      pHero.setParty(pHero.getInvites().get(argPlayer));
      pHero.getInvites().remove(argPlayer);
    }
 else {
      sender.sendMessage(""String_Node_Str"");
    }
  }
}"
20651,"@Override public void execute(CommandSender sender,String[] args){
  if (sender instanceof Player) {
    Player p=(Player)sender;
    Hero pHero=plugin.getHeroManager().getHero(p);
    if (pHero.getParty() == null) {
      Messaging.send(sender,""String_Node_Str"",(String)null);
      return;
    }
    if (pHero.getParty().getLeader() != p) {
      Messaging.send(sender,""String_Node_Str"",(String)null);
      return;
    }
    if (plugin.getServer().getPlayer(args[0]) != null) {
      Player invitee=plugin.getServer().getPlayer(args[0]);
      Hero inviteeHero=plugin.getHeroManager().getHero(invitee);
      inviteeHero.getInvites().put(p,pHero.getParty());
      sender.sendMessage(""String_Node_Str"");
      invitee.sendMessage(""String_Node_Str"" + p.getName() + ""String_Node_Str"");
    }
  }
}","@Override public void execute(CommandSender sender,String[] args){
  if (sender instanceof Player) {
    Player p=(Player)sender;
    Hero pHero=plugin.getHeroManager().getHero(p);
    if (pHero.getParty() == null) {
      Messaging.send(sender,""String_Node_Str"",(String)null);
      return;
    }
    if (pHero.getParty().getLeader() != p) {
      Messaging.send(sender,""String_Node_Str"",(String)null);
      return;
    }
    if (plugin.getServer().getPlayer(args[0]) != null) {
      Player invitee=plugin.getServer().getPlayer(args[0]);
      Hero inviteeHero=plugin.getHeroManager().getHero(invitee);
      inviteeHero.getInvites().put(p,pHero.getParty());
      sender.sendMessage(""String_Node_Str"");
      invitee.sendMessage(""String_Node_Str"" + p.getName() + ""String_Node_Str""+ p.getName());
    }
  }
}"
20652,"@Override public boolean use(Hero hero,String[] args){
  List<Entity> entities=hero.getPlayer().getNearbyEntities(5,5,5);
  for (  Entity n : entities) {
    if (n instanceof Player) {
      Player pN=(Player)n;
      int healamount=getSetting(hero.getHeroClass(),""String_Node_Str"",3000);
      EntityDamageEvent damageEvent=new EntityDamageEvent(hero.getPlayer(),DamageCause.ENTITY_ATTACK,0);
      Bukkit.getServer().getPluginManager().callEvent(damageEvent);
      if (damageEvent.isCancelled()) {
        return false;
      }
      pN.setFireTicks(healamount);
    }
  }
  return true;
}","@Override public boolean use(Hero hero,String[] args){
  List<Entity> entities=hero.getPlayer().getNearbyEntities(5,5,5);
  for (  Entity n : entities) {
    if (n instanceof Player) {
      Player pN=(Player)n;
      int healamount=getSetting(hero.getHeroClass(),""String_Node_Str"",3000);
      EntityDamageEvent damageEvent=new EntityDamageEvent(hero.getPlayer(),DamageCause.ENTITY_ATTACK,0);
      Bukkit.getServer().getPluginManager().callEvent(damageEvent);
      if (damageEvent.isCancelled()) {
        return false;
      }
      pN.setFireTicks(healamount);
    }
  }
  notifyNearbyPlayers(hero.getPlayer().getLocation(),useText,hero.getPlayer().getName(),name);
  return true;
}"
20653,"@Override public boolean use(Hero hero,String[] args){
  List<Block> blocks=hero.getPlayer().getLineOfSight(null,6);
  hero.getPlayer().teleport(blocks.get(blocks.size() - 1).getLocation());
  return true;
}","@Override public boolean use(Hero hero,String[] args){
  List<Block> blocks=hero.getPlayer().getLineOfSight(null,6);
  float yawn=hero.getPlayer().getLocation().getYaw();
  hero.getPlayer().teleport(blocks.get(blocks.size() - 1).getLocation());
  hero.getPlayer().getLocation().setYaw(yawn);
  return true;
}"
20654,"@Override public boolean use(Hero hero,LivingEntity target,String[] args){
  Player player=hero.getPlayer();
  int absorbamount=getSetting(hero.getHeroClass(),""String_Node_Str"",4);
  if (target.getHealth() < absorbamount) {
    player.setHealth(player.getHealth() + target.getHealth());
    target.damage(target.getHealth());
  }
 else {
    player.setHealth(player.getHealth() + absorbamount);
    target.damage(absorbamount);
  }
  return true;
}","@Override public boolean use(Hero hero,LivingEntity target,String[] args){
  Player player=hero.getPlayer();
  int absorbamount=getSetting(hero.getHeroClass(),""String_Node_Str"",4);
  if ((hero.getPlayer().getHealth() + absorbamount) > 100) {
    absorbamount=(100 - hero.getPlayer().getHealth());
  }
  if (target.getHealth() < absorbamount) {
    player.setHealth(player.getHealth() + target.getHealth());
    target.damage(target.getHealth());
    notifyNearbyPlayers(hero.getPlayer().getLocation(),useText,hero.getPlayer().getName(),name);
  }
 else {
    player.setHealth(player.getHealth() + absorbamount);
    target.damage(absorbamount);
    notifyNearbyPlayers(hero.getPlayer().getLocation(),useText,hero.getPlayer().getName(),name);
  }
  return true;
}"
20655,"public SkillDrainsoul(Heroes plugin){
  super(plugin);
  name=""String_Node_Str"";
  description=""String_Node_Str"";
  minArgs=0;
  maxArgs=1;
  identifiers.add(""String_Node_Str"");
}","public SkillDrainsoul(Heroes plugin){
  super(plugin);
  name=""String_Node_Str"";
  description=""String_Node_Str"";
  minArgs=0;
  maxArgs=0;
  identifiers.add(""String_Node_Str"");
}"
20656,"@Override public boolean use(Hero hero,String[] args){
  List<Entity> entities=hero.getPlayer().getNearbyEntities(5,5,5);
  for (  Entity n : entities) {
    if (n instanceof Player) {
      Player pN=(Player)n;
      int healamount=getSetting(hero.getHeroClass(),""String_Node_Str"",2);
      pN.setHealth(pN.getHealth() + healamount);
    }
  }
  return true;
}","@Override public boolean use(Hero hero,String[] args){
  List<Entity> entities=hero.getPlayer().getNearbyEntities(5,5,5);
  for (  Entity n : entities) {
    if (n instanceof Player) {
      Player pN=(Player)n;
      int healamount=getSetting(hero.getHeroClass(),""String_Node_Str"",2);
      pN.setHealth(pN.getHealth() + healamount);
    }
  }
  notifyNearbyPlayers(hero.getPlayer().getLocation(),useText,hero.getPlayer().getName(),name);
  return true;
}"
20657,"@Override public boolean use(Hero hero,String[] args){
  List<Entity> entities=hero.getPlayer().getNearbyEntities(5,5,5);
  for (  Entity n : entities) {
    if (n instanceof Player) {
      Player pN=(Player)n;
      int healamount=getSetting(hero.getHeroClass(),""String_Node_Str"",1);
      EntityDamageEvent damageEvent=new EntityDamageEvent(hero.getPlayer(),DamageCause.ENTITY_ATTACK,healamount);
      Bukkit.getServer().getPluginManager().callEvent(damageEvent);
      if (damageEvent.isCancelled()) {
        return false;
      }
      pN.damage(healamount);
    }
  }
  return true;
}","@Override public boolean use(Hero hero,String[] args){
  List<Entity> entities=hero.getPlayer().getNearbyEntities(5,5,5);
  for (  Entity n : entities) {
    if (n instanceof Player) {
      Player pN=(Player)n;
      int healamount=getSetting(hero.getHeroClass(),""String_Node_Str"",1);
      EntityDamageEvent damageEvent=new EntityDamageEvent(hero.getPlayer(),DamageCause.ENTITY_ATTACK,healamount);
      Bukkit.getServer().getPluginManager().callEvent(damageEvent);
      if (damageEvent.isCancelled()) {
        return false;
      }
      pN.damage(healamount);
    }
  }
  notifyNearbyPlayers(hero.getPlayer().getLocation(),useText,hero.getPlayer().getName(),name);
  return true;
}"
20658,"public Double expireEffect(String effect){
  System.out.println(effect + ""String_Node_Str"");
  effectLock.writeLock().lock();
  Double oldTime=effects.remove(effect);
  BaseCommand cmd=manager.getCommand(effect);
  if (cmd != null && cmd instanceof ActiveEffectSkill) {
    ActiveEffectSkill active=(ActiveEffectSkill)cmd;
    active.onExpire(hero);
  }
  effectLock.writeLock().unlock();
  return oldTime;
}","public Double expireEffect(String effect){
  effectLock.writeLock().lock();
  Double oldTime=effects.remove(effect);
  BaseCommand cmd=manager.getCommand(effect);
  if (cmd != null && cmd instanceof ActiveEffectSkill) {
    ActiveEffectSkill active=(ActiveEffectSkill)cmd;
    active.onExpire(hero);
  }
  effectLock.writeLock().unlock();
  return oldTime;
}"
20659,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  if (event.isCancelled()) {
    return;
  }
  Player player=event.getPlayer();
  Material material=player.getItemInHand().getType();
  Hero hero=plugin.getHeroManager().getHero(player);
  if (hero.getBinds().containsKey(material)) {
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
      String[] args=hero.getBinds().get(material);
      plugin.onCommand(player,null,""String_Node_Str"",args);
    }
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  if (event.useItemInHand() == Result.DENY) {
    return;
  }
  Player player=event.getPlayer();
  Material material=player.getItemInHand().getType();
  Hero hero=plugin.getHeroManager().getHero(player);
  if (hero.getBinds().containsKey(material)) {
    if (event.getAction() == Action.RIGHT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_BLOCK) {
      String[] args=hero.getBinds().get(material);
      plugin.onCommand(player,null,""String_Node_Str"",args);
    }
  }
}"
20660,"@Override public boolean use(Hero hero,LivingEntity target,String[] args){
  Player player=hero.getPlayer();
  if (target instanceof Player) {
    Player tPlayer=(Player)target;
    if (!(player.getItemInHand().getType() == Material.PAPER)) {
      Messaging.send(player,""String_Node_Str"");
      return false;
    }
    if (playerSchedulers.containsKey(tPlayer.getEntityId())) {
      Messaging.send(player,""String_Node_Str"",tPlayer.getName());
      return false;
    }
    if (tPlayer.getHealth() >= 20) {
      Messaging.send(player,""String_Node_Str"",tPlayer.getName());
      return false;
    }
    tickHealth=config.getInt(""String_Node_Str"",1);
    ticks=config.getInt(""String_Node_Str"",10);
    playerSchedulers.put(tPlayer.getEntityId(),plugin.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new BandageTask(plugin,tPlayer),20L,20L));
    notifyNearbyPlayers(player.getLocation().toVector(),""String_Node_Str"",player.getName(),tPlayer == player ? ""String_Node_Str"" : tPlayer.getName());
    int firstSlot=player.getInventory().first(Material.PAPER);
    int num=player.getInventory().getItem(firstSlot).getAmount();
    if (num == 1) {
      player.getInventory().clear(firstSlot);
    }
 else     if (num > 1) {
      player.getInventory().getItem(firstSlot).setAmount(num - 1);
    }
    return true;
  }
  return false;
}","@Override public boolean use(Hero hero,LivingEntity target,String[] args){
  Player player=hero.getPlayer();
  if (target instanceof Player) {
    Player tPlayer=(Player)target;
    if (!(player.getItemInHand().getType() == Material.PAPER)) {
      Messaging.send(player,""String_Node_Str"");
      return false;
    }
    if (playerSchedulers.containsKey(tPlayer.getEntityId())) {
      Messaging.send(player,""String_Node_Str"",tPlayer.getName());
      return false;
    }
    if (tPlayer.getHealth() >= 20) {
      Messaging.send(player,""String_Node_Str"",tPlayer.getName());
      return false;
    }
    tickHealth=config.getInt(""String_Node_Str"",1);
    ticks=config.getInt(""String_Node_Str"",10);
    playerSchedulers.put(tPlayer.getEntityId(),plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin,new BandageTask(plugin,tPlayer),20L,20L));
    notifyNearbyPlayers(player.getLocation().toVector(),""String_Node_Str"",player.getName(),tPlayer == player ? ""String_Node_Str"" : tPlayer.getName());
    int firstSlot=player.getInventory().first(Material.PAPER);
    int num=player.getInventory().getItem(firstSlot).getAmount();
    if (num == 1) {
      player.getInventory().clear(firstSlot);
    }
 else     if (num > 1) {
      player.getInventory().getItem(firstSlot).setAmount(num - 1);
    }
    return true;
  }
  return false;
}"
20661,"@Override public void onEntityDeath(EntityDeathEvent event){
  Entity defender=event.getEntity();
  Player attacker=kills.get(defender.getEntityId());
  kills.remove(defender);
  Properties prop=plugin.getConfigManager().getProperties();
  if (defender instanceof Player) {
    Hero heroDefender=plugin.getHeroManager().getHero((Player)defender);
    int exp=heroDefender.getExperience();
    int level=prop.getLevel(exp);
    if (level < prop.maxLevel) {
      int currentLevelExp=prop.getExperience(level);
      int nextLevelExp=prop.getExperience(level + 1);
      int expLoss=(int)((nextLevelExp - currentLevelExp) * 0.05);
      if (exp - expLoss < currentLevelExp) {
        expLoss=exp - currentLevelExp;
      }
      heroDefender.setExperience(exp - expLoss);
      Messaging.send(heroDefender.getPlayer(),""String_Node_Str"" + expLoss + ""String_Node_Str"");
    }
  }
  if (attacker != null) {
    Hero hero=plugin.getHeroManager().getHero(attacker);
    HeroClass playerClass=hero.getPlayerClass();
    Set<ExperienceType> expSources=playerClass.getExperienceSources();
    if (expSources.contains(ExperienceType.KILLING)) {
      if (defender instanceof LivingEntity) {
        int addedExp=0;
        if (defender instanceof Player) {
          prop.playerDeaths.put((Player)defender,defender.getLocation());
          addedExp=prop.playerKillingExp;
        }
 else {
          CreatureType type=null;
          try {
            Class<?>[] interfaces=defender.getClass().getInterfaces();
            for (            Class<?> c : interfaces) {
              if (LivingEntity.class.isAssignableFrom(c)) {
                type=CreatureType.fromName(c.getSimpleName());
                break;
              }
            }
          }
 catch (          IllegalArgumentException e) {
          }
          if (type != null) {
            if (!(prop.creatureKillingExp.containsKey(type))) {
              return;
            }
            addedExp=prop.creatureKillingExp.get(type);
          }
        }
        int exp=hero.getExperience();
        int currentLevel=prop.getLevel(exp);
        int newLevel=prop.getLevel(exp + addedExp);
        if (currentLevel == prop.maxLevel) {
          return;
        }
        ExperienceGainEvent expEvent;
        if (newLevel == currentLevel) {
          expEvent=new ExperienceGainEvent(attacker,addedExp);
        }
 else {
          expEvent=new LevelEvent(attacker,addedExp,newLevel,currentLevel);
        }
        plugin.getServer().getPluginManager().callEvent(expEvent);
        if (expEvent.isCancelled()) {
          return;
        }
        addedExp=expEvent.getExp();
        if (addedExp != 0) {
          hero.setExperience(exp + addedExp);
          if (hero.isVerbose()) {
            Messaging.send(attacker,""String_Node_Str"",playerClass.getName(),String.valueOf(addedExp));
          }
          if (newLevel != currentLevel) {
            Messaging.send(attacker,""String_Node_Str"",String.valueOf(newLevel),playerClass.getName());
            if (newLevel >= prop.maxLevel) {
              hero.setExperience(prop.getExperience(prop.maxLevel));
              hero.getMasteries().add(playerClass.getName());
              Messaging.broadcast(plugin,""String_Node_Str"",attacker.getName(),playerClass.getName());
            }
          }
        }
      }
    }
  }
}","@Override public void onEntityDeath(EntityDeathEvent event){
  Entity defender=event.getEntity();
  Player attacker=kills.get(defender.getEntityId());
  kills.remove(defender.getEntityId());
  Properties prop=plugin.getConfigManager().getProperties();
  if (defender instanceof Player) {
    Hero heroDefender=plugin.getHeroManager().getHero((Player)defender);
    int exp=heroDefender.getExperience();
    int level=prop.getLevel(exp);
    if (level < prop.maxLevel) {
      int currentLevelExp=prop.getExperience(level);
      int nextLevelExp=prop.getExperience(level + 1);
      int expLoss=(int)((nextLevelExp - currentLevelExp) * 0.05);
      if (exp - expLoss < currentLevelExp) {
        expLoss=exp - currentLevelExp;
      }
      heroDefender.setExperience(exp - expLoss);
      Messaging.send(heroDefender.getPlayer(),""String_Node_Str"" + expLoss + ""String_Node_Str"");
    }
  }
  if (attacker != null) {
    Hero hero=plugin.getHeroManager().getHero(attacker);
    HeroClass playerClass=hero.getPlayerClass();
    Set<ExperienceType> expSources=playerClass.getExperienceSources();
    if (expSources.contains(ExperienceType.KILLING)) {
      if (defender instanceof LivingEntity) {
        int addedExp=0;
        if (defender instanceof Player) {
          prop.playerDeaths.put((Player)defender,defender.getLocation());
          addedExp=prop.playerKillingExp;
        }
 else {
          CreatureType type=null;
          try {
            Class<?>[] interfaces=defender.getClass().getInterfaces();
            for (            Class<?> c : interfaces) {
              if (LivingEntity.class.isAssignableFrom(c)) {
                type=CreatureType.fromName(c.getSimpleName());
                break;
              }
            }
          }
 catch (          IllegalArgumentException e) {
          }
          if (type != null) {
            if (!(prop.creatureKillingExp.containsKey(type))) {
              return;
            }
            addedExp=prop.creatureKillingExp.get(type);
          }
        }
        int exp=hero.getExperience();
        int currentLevel=prop.getLevel(exp);
        int newLevel=prop.getLevel(exp + addedExp);
        if (currentLevel == prop.maxLevel) {
          return;
        }
        ExperienceGainEvent expEvent;
        if (newLevel == currentLevel) {
          expEvent=new ExperienceGainEvent(attacker,addedExp);
        }
 else {
          expEvent=new LevelEvent(attacker,addedExp,newLevel,currentLevel);
        }
        plugin.getServer().getPluginManager().callEvent(expEvent);
        if (expEvent.isCancelled()) {
          return;
        }
        addedExp=expEvent.getExp();
        if (addedExp != 0) {
          hero.setExperience(exp + addedExp);
          if (hero.isVerbose()) {
            Messaging.send(attacker,""String_Node_Str"",playerClass.getName(),String.valueOf(addedExp));
          }
          if (newLevel != currentLevel) {
            Messaging.send(attacker,""String_Node_Str"",String.valueOf(newLevel),playerClass.getName());
            if (newLevel >= prop.maxLevel) {
              hero.setExperience(prop.getExperience(prop.maxLevel));
              hero.getMasteries().add(playerClass.getName());
              Messaging.broadcast(plugin,""String_Node_Str"",attacker.getName(),playerClass.getName());
            }
          }
        }
      }
    }
  }
}"
20662,"@Override public void execute(CommandSender sender,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return;
  }
  Player player=(Player)sender;
  int page=0;
  if (args.length != 0) {
    try {
      page=Integer.parseInt(args[0]) - 1;
    }
 catch (    NumberFormatException e) {
    }
  }
  List<BaseCommand> sortCommands=plugin.getCommandManager().getCommands();
  List<Skill> skills=new ArrayList<Skill>();
  HeroClass heroClass=plugin.getHeroManager().getHero(player).getPlayerClass();
  for (  BaseCommand command : sortCommands) {
    if (command instanceof Skill) {
      Skill skill=(Skill)command;
      if (heroClass.hasSkill(skill.getName())) {
        skills.add(skill);
      }
    }
  }
  int numPages=skills.size() / SKILLS_PER_PAGE;
  if (skills.size() % SKILLS_PER_PAGE != 0) {
    numPages++;
  }
  if (page >= numPages || page < 0) {
    page=0;
  }
  sender.sendMessage(""String_Node_Str"" + ""String_Node_Str"" + heroClass.getName() + ""String_Node_Str""+ (page + 1)+ ""String_Node_Str""+ numPages+ ""String_Node_Str"");
  int start=page * SKILLS_PER_PAGE;
  int end=start + SKILLS_PER_PAGE;
  if (end > skills.size()) {
    end=skills.size();
  }
  for (int s=start; s < end; s++) {
    Skill skill=skills.get(s);
    sender.sendMessage(""String_Node_Str"" + skill.getUsage() + ""String_Node_Str""+ heroClass.getSkillSettings(skill.getName()).LevelRequirement);
  }
  sender.sendMessage(""String_Node_Str"");
}","@Override public void execute(CommandSender sender,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return;
  }
  Player player=(Player)sender;
  int page=0;
  if (args.length != 0) {
    try {
      page=Integer.parseInt(args[0]) - 1;
    }
 catch (    NumberFormatException e) {
    }
  }
  List<BaseCommand> sortCommands=plugin.getCommandManager().getCommands();
  List<Skill> skills=new ArrayList<Skill>();
  HeroClass heroClass=plugin.getHeroManager().getHero(player).getPlayerClass();
  for (  BaseCommand command : sortCommands) {
    if (command instanceof Skill) {
      Skill skill=(Skill)command;
      if (heroClass.hasSkill(skill.getName()) && !skills.contains(skill)) {
        skills.add(skill);
      }
    }
  }
  int numPages=skills.size() / SKILLS_PER_PAGE;
  if (skills.size() % SKILLS_PER_PAGE != 0) {
    numPages++;
  }
  if (page >= numPages || page < 0) {
    page=0;
  }
  sender.sendMessage(""String_Node_Str"" + ""String_Node_Str"" + heroClass.getName() + ""String_Node_Str""+ (page + 1)+ ""String_Node_Str""+ numPages+ ""String_Node_Str"");
  int start=page * SKILLS_PER_PAGE;
  int end=start + SKILLS_PER_PAGE;
  if (end > skills.size()) {
    end=skills.size();
  }
  for (int s=start; s < end; s++) {
    Skill skill=skills.get(s);
    sender.sendMessage(""String_Node_Str"" + skill.getUsage() + ""String_Node_Str""+ heroClass.getSkillSettings(skill.getName()).LevelRequirement);
  }
  sender.sendMessage(""String_Node_Str"");
}"
20663,"@Override public boolean use(Hero hero,String[] args){
  Player player=hero.getPlayer();
  float pitch=player.getEyeLocation().getPitch();
  if (pitch > 0) {
    pitch=-pitch;
  }
  float multiplier=(90f + pitch) / 40f;
  Vector v=player.getVelocity().setY(1).add(player.getLocation().getDirection().setY(0).normalize().multiply(multiplier));
  player.setVelocity(v);
  return true;
}","@Override public boolean use(Hero hero,String[] args){
  Player player=hero.getPlayer();
  float pitch=player.getEyeLocation().getPitch();
  if (pitch > 0) {
    pitch=-pitch;
  }
  float multiplier=(90f + pitch) / 40f;
  Vector v=player.getVelocity().setY(1).add(player.getLocation().getDirection().setY(0).normalize().multiply(multiplier));
  player.setVelocity(v);
  player.setFallDistance(-5f);
  return true;
}"
20664,"@Override public void execute(CommandSender sender,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    HeroManager heroManager=plugin.getHeroManager();
    ClassManager classManager=plugin.getClassManager();
    Hero hero=heroManager.getHero(player);
    HeroClass playerClass=hero.getPlayerClass();
    if (playerClass.isPrimary() && prop.getLevel(hero.getExperience()) > prop.classSwitchLevel) {
      HeroClass subClass=classManager.getClass(args[0]);
      if (subClass != null) {
        if (subClass.getParent() == playerClass) {
          hero.setPlayerClass(subClass);
          plugin.getMessager().send(player,""String_Node_Str"",subClass.getName());
        }
 else {
          plugin.getMessager().send(player,""String_Node_Str"",playerClass.getName());
        }
      }
 else {
        plugin.getMessager().send(player,""String_Node_Str"");
      }
    }
 else {
      plugin.getMessager().send(player,""String_Node_Str"");
    }
  }
}","@Override public void execute(CommandSender sender,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    HeroManager heroManager=plugin.getHeroManager();
    ClassManager classManager=plugin.getClassManager();
    Hero hero=heroManager.getHero(player);
    HeroClass playerClass=hero.getPlayerClass();
    if (playerClass.isPrimary()) {
      if (prop.getLevel(hero.getExperience()) >= prop.classSwitchLevel) {
        HeroClass subClass=classManager.getClass(args[0]);
        if (subClass != null) {
          if (subClass.getParent() == playerClass) {
            hero.setPlayerClass(subClass);
            plugin.getMessager().send(player,""String_Node_Str"",subClass.getName());
          }
 else {
            plugin.getMessager().send(player,""String_Node_Str"",playerClass.getName());
          }
        }
 else {
          plugin.getMessager().send(player,""String_Node_Str"");
        }
      }
 else {
        plugin.getMessager().send(player,""String_Node_Str"");
      }
    }
 else {
      plugin.getMessager().send(player,""String_Node_Str"");
    }
  }
}"
20665,"@Override public boolean use(Hero hero,LivingEntity target,String[] args){
  Player player=hero.getPlayer();
  final Player tPlayer=(Player)target;
  if (!player.getItemInHand().equals(Material.PAPER)) {
    plugin.getMessager().send(player,""String_Node_Str"");
    return false;
  }
  playerSchedulers.put(tPlayer,plugin.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
    public int timesRan=0;
    @Override public void run(){
      if (timesRan == 10) {
        playerSchedulers.remove(tPlayer);
        plugin.getServer().getScheduler().cancelTask(playerSchedulers.get(tPlayer));
      }
 else {
        timesRan++;
        tPlayer.setHealth(tPlayer.getHealth() + 1);
      }
    }
  }
,20L,20L));
  return true;
}","@Override public boolean use(Hero hero,LivingEntity target,String[] args){
  Player player=hero.getPlayer();
  final Player tPlayer=(Player)target;
  if (!player.getItemInHand().equals(Material.PAPER)) {
    plugin.getMessager().send(player,""String_Node_Str"");
    return false;
  }
  playerSchedulers.put(tPlayer,plugin.getServer().getScheduler().scheduleAsyncRepeatingTask(plugin,new Runnable(){
    public int timesRan=0;
    public int id=playerSchedulers.get(tPlayer);
    @Override public void run(){
      if (timesRan == 10) {
        playerSchedulers.remove(id);
        plugin.getServer().getScheduler().cancelTask(id);
      }
 else {
        timesRan++;
        tPlayer.setHealth(tPlayer.getHealth() + 1);
      }
    }
  }
,20L,20L));
  return true;
}"
20666,"@Override public void run(){
  if (timesRan == 10) {
    playerSchedulers.remove(tPlayer);
    plugin.getServer().getScheduler().cancelTask(playerSchedulers.get(tPlayer));
  }
 else {
    timesRan++;
    tPlayer.setHealth(tPlayer.getHealth() + 1);
  }
}","@Override public void run(){
  if (timesRan == 10) {
    playerSchedulers.remove(id);
    plugin.getServer().getScheduler().cancelTask(id);
  }
 else {
    timesRan++;
    tPlayer.setHealth(tPlayer.getHealth() + 1);
  }
}"
20667,"@Override public void execute(CommandSender sender,String[] args){
}","@Override public void execute(CommandSender sender,String[] args){
  if (sender instanceof Player) {
    if (args[1] != null) {
      if (plugin.getHeroManager().getHero((Player)sender).getPlayerClass().getSkills().contains(args[0])) {
        plugin.getHeroManager().getHero((Player)sender).bind(Material.getMaterial(args[0]),Arrays.copyOf(args,1));
        Player player=(Player)sender;
        if (args.length > 0) {
          if (plugin.getHeroManager().getHero(player).getPlayerClass().getSkills().contains(args[0])) {
            plugin.getHeroManager().getHero(player).bind(Material.getMaterial(args[0]),Arrays.copyOf(args,1));
            plugin.getMessager().send(sender,""String_Node_Str"",(String[])null);
          }
 else {
            plugin.getMessager().send(sender,""String_Node_Str"",(String[])null);
          }
        }
 else {
          plugin.getHeroManager().getHero(player).unbind(Material.getMaterial(args[0]));
          plugin.getMessager().send(sender,""String_Node_Str"",(String[])null);
        }
      }
 else {
        plugin.getHeroManager().getHero((Player)sender).bind(Material.getMaterial(args[0]),null);
      }
    }
  }
}"
20668,"/** 
 * Change the Players Class to the specified Class.
 * @param player
 * @param playerClass
 */
public void setClass(Player player,HeroClass playerClass){
  PlayerClassEvent event=new PlayerClassEvent(Type.CUSTOM_EVENT,player,playerClass);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled() == true) {
    return;
  }
  String name=event.getPlayer().getName();
  plugin.getSqlManager().tryUpdate(""String_Node_Str"" + event.getPlayerClass().getName() + ""String_Node_Str""+ name+ ""String_Node_Str"");
}","/** 
 * Change the Players Class to the specified Class.
 * @param player
 * @param playerClass
 */
public void setClass(Player player,HeroClass playerClass){
  PlayerClassEvent event=new PlayerClassEvent(Type.CUSTOM_EVENT,player,playerClass);
  plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled() == true) {
    return;
  }
  String name=event.getPlayer().getName();
  setExp(player,0);
  plugin.getSqlManager().tryUpdate(""String_Node_Str"" + event.getPlayerClass().getName() + ""String_Node_Str""+ name+ ""String_Node_Str"");
}"
20669,"public void onEntityDeath(EntityDeathEvent event){
  Entity defender=event.getEntity();
  Player attacker=kills.get(defender);
  if (attacker != null) {
    HeroClass playerClass=plugin.getPlayerManager().getClass(attacker);
    Set<ExperienceType> expSources=playerClass.getExperienceSources();
    if (expSources.contains(ExperienceType.KILLING)) {
      if (defender instanceof LivingEntity) {
        if (defender instanceof Player) {
          playerManager.setExp(attacker,playerManager.getExp(attacker) + Properties.playerKillingExp);
        }
 else {
          CreatureType type=null;
          try {
            Class<?>[] interfaces=defender.getClass().getInterfaces();
            for (            Class<?> c : interfaces) {
              if (LivingEntity.class.isAssignableFrom(c)) {
                type=CreatureType.fromName(c.getSimpleName());
                break;
              }
            }
          }
 catch (          IllegalArgumentException e) {
          }
          if (type != null) {
            playerManager.setExp(attacker,playerManager.getExp(attacker) + Properties.creatureKillingExp.get(""String_Node_Str""));
          }
        }
      }
    }
  }
  kills.remove(defender);
}","public void onEntityDeath(EntityDeathEvent event){
  Entity defender=event.getEntity();
  Player attacker=kills.get(defender);
  if (attacker != null) {
    HeroClass playerClass=plugin.getPlayerManager().getClass(attacker);
    Set<ExperienceType> expSources=playerClass.getExperienceSources();
    if (expSources.contains(ExperienceType.KILLING)) {
      if (defender instanceof LivingEntity) {
        if (defender instanceof Player) {
          playerManager.setExp(attacker,playerManager.getExp(attacker) + Properties.playerKillingExp);
        }
 else {
          CreatureType type=null;
          try {
            Class<?>[] interfaces=defender.getClass().getInterfaces();
            for (            Class<?> c : interfaces) {
              if (LivingEntity.class.isAssignableFrom(c)) {
                type=CreatureType.fromName(c.getSimpleName());
                break;
              }
            }
          }
 catch (          IllegalArgumentException e) {
          }
          if (type != null) {
            playerManager.setExp(attacker,playerManager.getExp(attacker) + Properties.creatureKillingExp.get(type.toString()));
          }
        }
      }
    }
  }
  kills.remove(defender);
}"
20670,"private static String parameterizeMessage(String msg,String... params){
  msg=""String_Node_Str"" + msg;
  for (int i=0; i < params.length; i++) {
    msg=msg.replace(""String_Node_Str"" + i,""String_Node_Str"" + params[i] + ""String_Node_Str"");
  }
  return msg;
}","private static String parameterizeMessage(String msg,String... params){
  msg=""String_Node_Str"" + msg;
  for (int i=0; i < params.length; i++) {
    msg=msg.replace(""String_Node_Str"" + (i + 1),""String_Node_Str"" + params[i] + ""String_Node_Str"");
  }
  return msg;
}"
20671,"@Around(value=""String_Node_Str"",argNames=""String_Node_Str"") static void timeMethod(final ProceedingJoinPoint pjp,final PerfTimed timed) throws Throwable {
  time(pjp,timed);
}","@Around(value=""String_Node_Str"",argNames=""String_Node_Str"") static Object timeMethod(final ProceedingJoinPoint pjp,final PerfTimed timed) throws Throwable {
  return time(pjp,timed);
}"
20672,"private static void time(final ProceedingJoinPoint pjp,final PerfTimed timed) throws Throwable {
  Assert.notNull(pjp);
  Assert.notNull(timed);
  final Signature signature=pjp.getSignature();
  final String longString=""String_Node_Str"" + signature.toLongString() + ""String_Node_Str"";
  System.out.println();
  System.out.println(""String_Node_Str"" + longString);
  final long startTimeMs=System.currentTimeMillis();
  try {
    pjp.proceed();
  }
  finally {
    final long timeTakenMs=System.currentTimeMillis() - startTimeMs;
    System.out.println(""String_Node_Str"" + longString + ""String_Node_Str""+ timeTakenMs+ ""String_Node_Str"");
    System.out.println();
  }
}","private static Object time(final ProceedingJoinPoint pjp,final PerfTimed timed) throws Throwable {
  Assert.notNull(pjp);
  Assert.notNull(timed);
  final Signature signature=pjp.getSignature();
  final String longString=""String_Node_Str"" + signature.toLongString() + ""String_Node_Str"";
  System.out.println();
  System.out.println(""String_Node_Str"" + longString);
  final long startTimeMs=System.currentTimeMillis();
  try {
    return pjp.proceed();
  }
  finally {
    final long timeTakenMs=System.currentTimeMillis() - startTimeMs;
    System.out.println(""String_Node_Str"" + longString + ""String_Node_Str""+ timeTakenMs+ ""String_Node_Str"");
    System.out.println();
  }
}"
20673,"@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
}","@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
  createRequest(header).getMiddleSwitch().setBitValue(headerValue);
}"
20674,"@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
  createRequest(header).getRootHeaderA().setBitValue(headerValue);
}","@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
  createRequest(header).getRootSwitch().setBitValue(headerValue);
}"
20675,"@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
}","@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
  createResponse(header).getMiddleSwitch().setBitValue(headerValue);
}"
20676,"@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
}","@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
  createResponse(header).getMiddleSwitch().setBitValue(headerValue);
}"
20677,"@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
  MyRootProtocol_Response_API response=createResponse(header);
}","@Override protected void makeHeader(IProtocolMessage header,IProtocolMessage payload,int headerValue){
  createResponse(header).getRootSwitchResp().setBitValue(headerValue);
}"
20678,"/** 
 * Returns a machine-readable String for printing the contents of this pose.
 * @return the convenient string.
 */
public String serialize(){
  return ""String_Node_Str"" + ""String_Node_Str"" + getTranslateY() + ""String_Node_Str""+ getRotateTheta();
}","/** 
 * Returns a machine-readable String for printing the contents of this pose.
 * @return the convenient string.
 */
public String serialize(){
  return getTranslateX() + ""String_Node_Str"" + getTranslateY()+ ""String_Node_Str""+ getRotateTheta();
}"
20679,"/** 
 * Returns a convenient String for printing the contents of this pose.
 * @return the convenient string.
 */
public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + getTranslateY() + ""String_Node_Str""+ getRotateTheta();
}","/** 
 * Returns a convenient String for printing the contents of this pose.
 * @return the convenient string.
 */
public String toString(){
  return getTranslateX() + ""String_Node_Str"" + getTranslateY()+ ""String_Node_Str""+ getRotateTheta();
}"
20680,"public void updateCredit(View v,int sign){
  LinearLayout row=(LinearLayout)v.getParent().getParent();
  TextView denominationText=(TextView)row.getChildAt(1);
  TextView addedCountText=(TextView)row.getChildAt(2);
  TextView remainCountText=(TextView)row.getChildAt(3);
  int denomination=Integer.parseInt(denominationText.getText().toString());
  int addedCount=Integer.parseInt(addedCountText.getText().toString());
  int remainCount=Integer.parseInt(remainCountText.getText().toString());
  int creditAdded=(int)Double.parseDouble(creditAddedTV.getText().toString());
  addedCount+=sign;
  addedCountText.setText(String.valueOf(addedCount));
  remainCount-=sign;
  remainCountText.setText(String.valueOf(remainCount));
  creditAdded+=sign * denomination;
  creditAddedTV.setText(AccountModel.crIntToString(creditAdded * 100));
  newBalanceTV.setText(AccountModel.crIntToString(creditAdded * 100 + balance));
  if (sign == -1) {
    if (addedCount <= 0) {
      v.setEnabled(false);
    }
    if (remainCount >= 1) {
      ((Button)(((LinearLayout)v.getParent()).getChildAt(0))).setEnabled(true);
    }
  }
  if (sign == 1) {
    if (addedCount >= 1) {
      ((Button)(((LinearLayout)v.getParent()).getChildAt(1))).setEnabled(true);
    }
    if (remainCount <= 0) {
      v.setEnabled(false);
    }
  }
  submitBtn.setEnabled(creditAdded > 0);
}","public void updateCredit(View v,int sign){
  LinearLayout row=(LinearLayout)v.getParent().getParent();
  TextView denominationText=(TextView)row.getChildAt(1);
  TextView addedCountText=(TextView)row.getChildAt(2);
  TextView remainCountText=(TextView)row.getChildAt(3);
  int denomination=Integer.parseInt(denominationText.getText().toString());
  int addedCount=Integer.parseInt(addedCountText.getText().toString());
  int remainCount=Integer.parseInt(remainCountText.getText().toString());
  int creditAdded=(int)Double.parseDouble(creditAddedTV.getText().toString().replace(""String_Node_Str"",""String_Node_Str""));
  addedCount+=sign;
  addedCountText.setText(String.valueOf(addedCount));
  remainCount-=sign;
  remainCountText.setText(String.valueOf(remainCount));
  creditAdded+=sign * denomination;
  creditAddedTV.setText(AccountModel.crIntToString(creditAdded * 100));
  newBalanceTV.setText(AccountModel.crIntToString(creditAdded * 100 + balance));
  if (sign == -1) {
    if (addedCount <= 0) {
      v.setEnabled(false);
    }
    if (remainCount >= 1) {
      ((Button)(((LinearLayout)v.getParent()).getChildAt(0))).setEnabled(true);
    }
  }
  if (sign == 1) {
    if (addedCount >= 1) {
      ((Button)(((LinearLayout)v.getParent()).getChildAt(1))).setEnabled(true);
    }
    if (remainCount <= 0) {
      v.setEnabled(false);
    }
  }
  submitBtn.setEnabled(creditAdded > 0);
}"
20681,"DescriptorImpl(){
  super(HelloWorldBuilder.class);
}","DescriptorImpl(){
  super(HelloWorldBuilder.class);
  load();
}"
20682,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.describe);
  Uri uri=null;
  context=this;
  i=this.getIntent();
  if ((i.getAction() != null) && (i.getAction().equals(Intent.ACTION_SEND))) {
    try {
      uri=(Uri)i.getExtras().get(Intent.EXTRA_STREAM);
    }
 catch (    Exception e) {
      StackTraceLogger.getStackTraceString(e,TAG);
    }
  }
  ImageView image=(ImageView)findViewById(R.id.image);
  image.setImageURI(uri);
  SharedPreferences settings=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  name=settings.getString(""String_Node_Str"",""String_Node_Str"");
  username=settings.getString(""String_Node_Str"",""String_Node_Str"");
  password=settings.getString(""String_Node_Str"",""String_Node_Str"");
  url=settings.getString(""String_Node_Str"",""String_Node_Str"");
  if ((url == null) || (""String_Node_Str"".equals(url.trim()))) {
    Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT);
    toast.show();
    return;
  }
  title=(TextView)this.findViewById(R.id.title);
  description=(TextView)this.findViewById(R.id.description);
  button=(Button)this.findViewById(R.id.depositbutton);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      button.setText(""String_Node_Str"");
      button.setEnabled(false);
      dialog=ProgressDialog.show(context,""String_Node_Str"",""String_Node_Str"",true);
      new DepositTask().execute();
    }
  }
);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.describe);
  Uri uri=null;
  context=this;
  i=this.getIntent();
  if ((i.getAction() != null) && (i.getAction().equals(Intent.ACTION_SEND))) {
    try {
      uri=(Uri)i.getExtras().get(Intent.EXTRA_STREAM);
    }
 catch (    Exception e) {
      StackTraceLogger.getStackTraceString(e,TAG);
    }
  }
  ImageView image=(ImageView)findViewById(R.id.image);
  image.setImageURI(uri);
  SharedPreferences settings=getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  name=settings.getString(""String_Node_Str"",""String_Node_Str"");
  username=settings.getString(""String_Node_Str"",""String_Node_Str"");
  password=settings.getString(""String_Node_Str"",""String_Node_Str"");
  url=settings.getString(""String_Node_Str"",""String_Node_Str"");
  if ((url == null) || (""String_Node_Str"".equals(url.trim()))) {
    Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT);
    toast.show();
    return;
  }
  title=(TextView)this.findViewById(R.id.title);
  description=(TextView)this.findViewById(R.id.description);
  button=(Button)this.findViewById(R.id.depositbutton);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      CharSequence text=""String_Node_Str"";
      if ((""String_Node_Str"".equals(title.getText().toString().trim())) && (""String_Node_Str"".equals(description.getText().toString().trim()))) {
        text=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(title.getText().toString().trim())) {
        text=""String_Node_Str"";
      }
 else       if (""String_Node_Str"".equals(description.getText().toString().trim())) {
        text=""String_Node_Str"";
      }
      if (text.length() > 0) {
        Toast toast=Toast.makeText(context,text,Toast.LENGTH_SHORT);
        toast.show();
      }
 else {
        button.setText(""String_Node_Str"");
        button.setEnabled(false);
        dialog=ProgressDialog.show(context,""String_Node_Str"",""String_Node_Str"",true);
        new DepositTask().execute();
      }
    }
  }
);
}"
20683,"protected String doInBackground(String... urls){
  try {
    Context context=getApplicationContext();
    CharSequence text=""String_Node_Str"";
    if ((""String_Node_Str"".equals(title.getText().toString().trim())) && (""String_Node_Str"".equals(description.getText().toString().trim()))) {
      text=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(title.getText().toString().trim())) {
      text=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(description.getText().toString().trim())) {
      text=""String_Node_Str"";
    }
    if (text.length() > 0) {
      Toast toast=Toast.makeText(context,text,Toast.LENGTH_SHORT);
      toast.show();
      return ""String_Node_Str"";
    }
    uri=(Uri)i.getExtras().get(Intent.EXTRA_STREAM);
    String filename=uri.toString().substring(uri.toString().indexOf(':') + 1);
    FileOutputStream fosmets=openFileOutput(""String_Node_Str"",Context.MODE_PRIVATE);
    Hashtable<String,String> metadata=new Hashtable<String,String>();
    metadata.put(""String_Node_Str"",name);
    metadata.put(""String_Node_Str"",title.getText().toString());
    metadata.put(""String_Node_Str"",description.getText().toString());
    Log.d(TAG,""String_Node_Str"");
    SimpleSWORDDeposit deposit=new SimpleSWORDDeposit(filename,i.getType(),metadata,fosmets);
    InputStream content=context.getContentResolver().openInputStream(uri);
    Log.d(TAG,""String_Node_Str"");
    FileOutputStream foszip=openFileOutput(""String_Node_Str"",Context.MODE_PRIVATE);
    FileInputStream fismets=openFileInput(""String_Node_Str"");
    deposit.makePackage(content,uri.toString(),foszip,fismets);
    Log.d(TAG,""String_Node_Str"");
    FileInputStream fispackage=openFileInput(""String_Node_Str"");
    deposit.deposit(fispackage,url,username,password);
    resultUrl=deposit.getURL();
    Log.d(TAG,""String_Node_Str"" + url);
  }
 catch (  Exception e) {
    dialog.dismiss();
    Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT);
    toast.show();
    StackTraceLogger.getStackTraceString(e,TAG);
  }
  return ""String_Node_Str"";
}","protected String doInBackground(String... urls){
  try {
    Context context=getApplicationContext();
    uri=(Uri)i.getExtras().get(Intent.EXTRA_STREAM);
    String filename=uri.toString().substring(uri.toString().indexOf(':') + 1);
    FileOutputStream fosmets=openFileOutput(""String_Node_Str"",Context.MODE_PRIVATE);
    Hashtable<String,String> metadata=new Hashtable<String,String>();
    metadata.put(""String_Node_Str"",name);
    metadata.put(""String_Node_Str"",title.getText().toString());
    metadata.put(""String_Node_Str"",description.getText().toString());
    Log.d(TAG,""String_Node_Str"");
    SimpleSWORDDeposit deposit=new SimpleSWORDDeposit(filename,i.getType(),metadata,fosmets);
    InputStream content=context.getContentResolver().openInputStream(uri);
    Log.d(TAG,""String_Node_Str"");
    FileOutputStream foszip=openFileOutput(""String_Node_Str"",Context.MODE_PRIVATE);
    FileInputStream fismets=openFileInput(""String_Node_Str"");
    deposit.makePackage(content,uri.toString(),foszip,fismets);
    Log.d(TAG,""String_Node_Str"");
    FileInputStream fispackage=openFileInput(""String_Node_Str"");
    deposit.deposit(fispackage,url,username,password);
    resultUrl=deposit.getURL();
    Log.d(TAG,""String_Node_Str"" + url);
  }
 catch (  Exception e) {
    dialog.dismiss();
    Toast toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT);
    toast.show();
    StackTraceLogger.getStackTraceString(e,TAG);
  }
  return ""String_Node_Str"";
}"
20684,"public void findID() throws PluginException {
  this.id=this.br.getRegex(IDREGEX).getMatch(0);
  if (this.id == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
}","/** 
 * DO NOT use in Plugins at the moment, cause the current nightly is not able to use this function, directHTTP is included in jar and not updatable at the moment
 */
public void findID() throws PluginException {
  this.id=this.br.getRegex(IDREGEX).getMatch(0);
  if (this.id == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
}"
20685,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  int minutes=0, seconds=0;
  Regex limits=br.getRegex(""String_Node_Str"");
  String mins=limits.getMatch(0);
  String secs=limits.getMatch(1);
  if (secs == null)   secs=br.getRegex(""String_Node_Str"").getMatch(0);
  if (mins != null)   minutes=Integer.parseInt(mins);
  if (secs != null)   seconds=Integer.parseInt(secs);
  int waittime=((60 * minutes) + seconds + 1) * 1000;
  if (waittime > 1000)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waittime);
  br.setFollowRedirects(false);
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  final String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + fileID);
  String hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (hash == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(""String_Node_Str"" + fileID + ""String_Node_Str""+ hash);
  Form recaptchaForm=new Form();
  recaptchaForm.setMethod(MethodType.POST);
  recaptchaForm.setAction(""String_Node_Str"");
  recaptchaForm.put(""String_Node_Str"",fileID);
  recaptchaForm.put(""String_Node_Str"",hash);
  boolean failed=true;
  for (int i=0; i <= 5; i++) {
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.setForm(recaptchaForm);
    rc.findID();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    rc.setCode(c);
    if (br.containsHTML(""String_Node_Str"")) {
      rc.reload();
      continue;
    }
    failed=false;
    break;
  }
  if (failed)   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  int minutes=0, seconds=0;
  Regex limits=br.getRegex(""String_Node_Str"");
  String mins=limits.getMatch(0);
  String secs=limits.getMatch(1);
  if (secs == null)   secs=br.getRegex(""String_Node_Str"").getMatch(0);
  if (mins != null)   minutes=Integer.parseInt(mins);
  if (secs != null)   seconds=Integer.parseInt(secs);
  int waittime=((60 * minutes) + seconds + 1) * 1000;
  if (waittime > 1000)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waittime);
  br.setFollowRedirects(false);
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  final String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + fileID);
  String hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (hash == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(""String_Node_Str"" + fileID + ""String_Node_Str""+ hash);
  Form recaptchaForm=new Form();
  recaptchaForm.setMethod(MethodType.POST);
  recaptchaForm.setAction(""String_Node_Str"");
  recaptchaForm.put(""String_Node_Str"",fileID);
  recaptchaForm.put(""String_Node_Str"",hash);
  boolean failed=true;
  for (int i=0; i <= 5; i++) {
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.setForm(recaptchaForm);
    String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
    rc.setId(id);
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    rc.setCode(c);
    if (br.containsHTML(""String_Node_Str"")) {
      rc.reload();
      continue;
    }
    failed=false;
    break;
  }
  if (failed)   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20686,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  String addedLink=downloadLink.getDownloadURL();
  br.getPage(addedLink);
  PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
  jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
  rc.findID();
  br.getPage(""String_Node_Str"" + new Regex(addedLink,FILEIDREGEX).getMatch(0) + ""String_Node_Str""+ new Random().nextInt(1000000000));
  handleErrors();
  long timeBefore=System.currentTimeMillis();
  Form reCaptchaForm=new Form();
  reCaptchaForm.setMethod(MethodType.POST);
  reCaptchaForm.setAction(""String_Node_Str"");
  rc.setForm(reCaptchaForm);
  for (int i=0; i <= 5; i++) {
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (i == 0) {
      waitTime(timeBefore,downloadLink);
      br.getPage(""String_Node_Str"" + new Regex(addedLink,FILEIDREGEX).getMatch(0) + ""String_Node_Str""+ new Random().nextInt(1000000000));
      if (!br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        logger.warning(br.toString());
      }
    }
    rc.setCode(c);
    if (br.containsHTML(CAPTCHAFAILED)) {
      rc.reload();
      continue;
    }
    break;
  }
  handleErrors();
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  String addedLink=downloadLink.getDownloadURL();
  br.getPage(addedLink);
  PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
  jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
  String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
  rc.setId(id);
  br.getPage(""String_Node_Str"" + new Regex(addedLink,FILEIDREGEX).getMatch(0) + ""String_Node_Str""+ new Random().nextInt(1000000000));
  handleErrors();
  long timeBefore=System.currentTimeMillis();
  Form reCaptchaForm=new Form();
  reCaptchaForm.setMethod(MethodType.POST);
  reCaptchaForm.setAction(""String_Node_Str"");
  rc.setForm(reCaptchaForm);
  for (int i=0; i <= 5; i++) {
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (i == 0) {
      waitTime(timeBefore,downloadLink);
      br.getPage(""String_Node_Str"" + new Regex(addedLink,FILEIDREGEX).getMatch(0) + ""String_Node_Str""+ new Random().nextInt(1000000000));
      if (!br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        logger.warning(br.toString());
      }
    }
    rc.setCode(c);
    if (br.containsHTML(CAPTCHAFAILED)) {
      rc.reload();
      continue;
    }
    break;
  }
  handleErrors();
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20687,"public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (DLForm == null) {
      if (BRBEFORE.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    if (BRBEFORE.contains(PASSWORDTEXT0) || BRBEFORE.contains(PASSWORDTEXT1)) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    boolean wait=true;
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      DLForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      DLForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.findID();
      rc.setForm(DLForm);
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      DLForm=rc.getForm();
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
    }
    if (password) {
      passCode=handlePassword(passCode,DLForm,downloadLink);
    }
    if (wait)     waitTime(timeBefore,downloadLink);
    br.submitForm(DLForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (DLForm == null) {
      if (BRBEFORE.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    if (BRBEFORE.contains(PASSWORDTEXT0) || BRBEFORE.contains(PASSWORDTEXT1)) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    boolean wait=true;
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      DLForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      DLForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
      rc.setId(id);
      rc.setForm(DLForm);
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      DLForm=rc.getForm();
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
    }
    if (password) {
      passCode=handlePassword(passCode,DLForm,downloadLink);
    }
    if (wait)     waitTime(timeBefore,downloadLink);
    br.submitForm(DLForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20688,"public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      rc.findID();
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
      rc.setId(id);
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20689,"public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      rc.findID();
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
      rc.setId(id);
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20690,"public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      rc.findID();
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
      skipWaittime=true;
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
      rc.setId(id);
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
      skipWaittime=true;
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20691,"public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      rc.findID();
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
      rc.setId(id);
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20692,"@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  String passCode=null;
  checkErrors(link,false,passCode,false);
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    Form freeform=null;
    Form[] allForms=br.getForms();
    if (allForms == null || allForms.length == 0)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    for (    Form ff : allForms) {
      if (ff.containsHTML(""String_Node_Str"")) {
        freeform=ff;
        break;
      }
    }
    if (freeform == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    freeform.remove(""String_Node_Str"");
    wait(link);
    br.submitForm(freeform);
  }
  String linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (linkurl == null) {
    checkErrors(link,false,passCode,false);
    br.setFollowRedirects(false);
    boolean password=false;
    if (br.containsHTML(PASSWORDTEXT0) || br.containsHTML(PASSWORDTEXT1)) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    Form dlform=null;
    Form[] forms=br.getForms();
    if (forms == null || forms.length == 0)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    for (    Form singleForm : forms)     if (singleForm.containsHTML(link.getName())) {
      dlform=singleForm;
      break;
    }
    if (dlform == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    dlform.setAction(link.getDownloadURL());
    dlform.remove(""String_Node_Str"");
    String cryptedScript=br.getRegex(""String_Node_Str"").getMatch(0);
    if (cryptedScript == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String date=unpackJS(cryptedScript);
    if (date == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    date=execJS(date);
    if (date == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    dlform.put(""String_Node_Str"",date);
    if (password) {
      logger.info(""String_Node_Str"");
      passCode=handlePassword(passCode,dlform,link);
      dlform.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    wait(link);
    br.submitForm(dlform);
    Form finalForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (finalForm != null) {
      if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
        logger.info(""String_Node_Str"");
        PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
        jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
        rc.setForm(finalForm);
        rc.findID();
        rc.load();
        File cf=rc.downloadCaptcha(getLocalCaptchaFile());
        String c=getCaptchaCode(cf,link);
        if (password) {
          passCode=handlePassword(passCode,rc.getForm(),link);
        }
        rc.prepareForm(c);
        finalForm=rc.getForm();
        logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      }
      logger.info(""String_Node_Str"");
      finalForm.setAction(link.getDownloadURL());
      finalForm.put(""String_Node_Str"",Integer.toString(new Random().nextInt(100)));
      finalForm.put(""String_Node_Str"",Integer.toString(new Random().nextInt(100)));
      br.submitForm(finalForm);
    }
    checkErrors(link,true,passCode,false);
    linkurl=br.getRedirectLocation();
    if (linkurl == null)     linkurl=getDllink();
    if (passCode != null) {
      link.setProperty(""String_Node_Str"",passCode);
    }
    if (linkurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,linkurl,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  String passCode=null;
  checkErrors(link,false,passCode,false);
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    Form freeform=null;
    Form[] allForms=br.getForms();
    if (allForms == null || allForms.length == 0)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    for (    Form ff : allForms) {
      if (ff.containsHTML(""String_Node_Str"")) {
        freeform=ff;
        break;
      }
    }
    if (freeform == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    freeform.remove(""String_Node_Str"");
    wait(link);
    br.submitForm(freeform);
  }
  String linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (linkurl == null) {
    checkErrors(link,false,passCode,false);
    br.setFollowRedirects(false);
    boolean password=false;
    if (br.containsHTML(PASSWORDTEXT0) || br.containsHTML(PASSWORDTEXT1)) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    Form dlform=null;
    Form[] forms=br.getForms();
    if (forms == null || forms.length == 0)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    for (    Form singleForm : forms)     if (singleForm.containsHTML(link.getName())) {
      dlform=singleForm;
      break;
    }
    if (dlform == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    dlform.setAction(link.getDownloadURL());
    dlform.remove(""String_Node_Str"");
    String cryptedScript=br.getRegex(""String_Node_Str"").getMatch(0);
    if (cryptedScript == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String date=unpackJS(cryptedScript);
    if (date == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    date=execJS(date);
    if (date == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    dlform.put(""String_Node_Str"",date);
    if (password) {
      logger.info(""String_Node_Str"");
      passCode=handlePassword(passCode,dlform,link);
      dlform.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    wait(link);
    br.submitForm(dlform);
    Form finalForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (finalForm != null) {
      if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
        logger.info(""String_Node_Str"");
        PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
        jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
        rc.setForm(finalForm);
        String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
        rc.setId(id);
        rc.load();
        File cf=rc.downloadCaptcha(getLocalCaptchaFile());
        String c=getCaptchaCode(cf,link);
        if (password) {
          passCode=handlePassword(passCode,rc.getForm(),link);
        }
        rc.prepareForm(c);
        finalForm=rc.getForm();
        logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      }
      logger.info(""String_Node_Str"");
      finalForm.setAction(link.getDownloadURL());
      finalForm.put(""String_Node_Str"",Integer.toString(new Random().nextInt(100)));
      finalForm.put(""String_Node_Str"",Integer.toString(new Random().nextInt(100)));
      br.submitForm(finalForm);
    }
    checkErrors(link,true,passCode,false);
    linkurl=br.getRedirectLocation();
    if (linkurl == null)     linkurl=getDllink();
    if (passCode != null) {
      link.setProperty(""String_Node_Str"",passCode);
    }
    if (linkurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,linkurl,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20693,"public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      rc.findID();
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
      rc.setId(id);
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20694,"public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      rc.findID();
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
      skipWaittime=true;
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink,boolean resumable,int maxchunks) throws Exception, PluginException {
  String dllink=null;
  String passCode=null;
  if (BRBEFORE.contains(""String_Node_Str"")) {
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),COOKIE_HOST.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + ""String_Node_Str"").getMatch(0) + ""String_Node_Str""+ Encoding.urlEncode(downloadLink.getName())+ ""String_Node_Str"");
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  dllink=getDllink();
  if (dllink == null) {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    long timeBefore=System.currentTimeMillis();
    boolean password=false;
    boolean skipWaittime=false;
    if (new Regex(BRBEFORE,PASSWORDTEXT).matches()) {
      password=true;
      logger.info(""String_Node_Str"");
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
      if (letters == null || letters.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
      for (      String[] letter : letters) {
        capMap.put(Integer.parseInt(letter[0]),letter[1]);
      }
      StringBuilder code=new StringBuilder();
      for (      String value : capMap.values()) {
        code.append(value);
      }
      dlForm.put(""String_Node_Str"",code.toString());
      logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
    }
 else     if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
      String captchaurl=null;
      if (sitelinks == null || sitelinks.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String link : sitelinks) {
        if (link.contains(""String_Node_Str"")) {
          captchaurl=link;
          break;
        }
      }
      if (captchaurl == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      String code=getCaptchaCode(captchaurl,downloadLink);
      dlForm.put(""String_Node_Str"",code);
      logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
    }
 else     if (new Regex(BRBEFORE,""String_Node_Str"").matches()) {
      logger.info(""String_Node_Str"");
      PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
      rc.setForm(dlForm);
      String id=this.br.getRegex(""String_Node_Str"").getMatch(0);
      rc.setId(id);
      rc.load();
      File cf=rc.downloadCaptcha(getLocalCaptchaFile());
      String c=getCaptchaCode(cf,downloadLink);
      rc.prepareForm(c);
      logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
      dlForm=rc.getForm();
      skipWaittime=true;
    }
    if (password)     passCode=handlePassword(passCode,dlForm,downloadLink);
    if (!skipWaittime)     waitTime(timeBefore,downloadLink);
    br.submitForm(dlForm);
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20695,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  this.setBrowserExclusive();
  workAroundTimeOut(br);
  String id=getID(downloadLink);
  br.setFollowRedirects(false);
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(""String_Node_Str"");
  br.getPage(""String_Node_Str"" + id);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().contains(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  if (br.getRedirectLocation() != null)   br.getPage(br.getRedirectLocation());
  String passCode=null;
  if (br.containsHTML(""String_Node_Str"")) {
    passCode=getPassword(downloadLink);
    Form form=br.getForm(0);
    form.put(""String_Node_Str"",Encoding.urlEncode(passCode));
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY,""String_Node_Str"");
    }
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  Browser brc=br.cloneBrowser();
  brc.getPage(""String_Node_Str"");
  String recaptcha=brc.getRegex(""String_Node_Str"").getMatch(0);
  if (recaptcha == null) {
    logger.severe(brc.toString());
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
  jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
  rc.setId(recaptcha.trim());
  rc.load();
  Form rcForm=new Form();
  rcForm.setMethod(MethodType.POST);
  rcForm.setAction(""String_Node_Str"" + getID(downloadLink));
  File cf=rc.downloadCaptcha(getLocalCaptchaFile());
  rc.setForm(rcForm);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  String c=getCaptchaCode(cf,downloadLink);
  rc.setCode(c);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,""String_Node_Str"",60 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  if (wait != null) {
    this.sleep(Integer.parseInt(wait) * 1000l,downloadLink);
  }
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=BrowserAdapter.openDownload(br,downloadLink,url,false,1);
  try {
    dl.getRequest().setConnectTimeout(30000);
    dl.getRequest().setReadTimeout(60000);
  }
 catch (  final Throwable ee) {
  }
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
    if (br.getURL().contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  this.setBrowserExclusive();
  workAroundTimeOut(br);
  String id=getID(downloadLink);
  br.setFollowRedirects(false);
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(""String_Node_Str"");
  br.getPage(""String_Node_Str"" + id);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().contains(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  if (br.getRedirectLocation() != null)   br.getPage(br.getRedirectLocation());
  String passCode=null;
  if (br.containsHTML(""String_Node_Str"")) {
    passCode=getPassword(downloadLink);
    Form form=br.getForm(0);
    form.put(""String_Node_Str"",Encoding.urlEncode(passCode));
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY,""String_Node_Str"");
    }
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  Browser brc=br.cloneBrowser();
  brc.getPage(""String_Node_Str"");
  String recaptcha=brc.getRegex(""String_Node_Str"").getMatch(0);
  if (recaptcha == null) {
    logger.severe(brc.toString());
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
  jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
  rc.setId(recaptcha.trim());
  rc.load();
  Form rcForm=new Form();
  rcForm.setMethod(MethodType.POST);
  rcForm.setAction(""String_Node_Str"" + getID(downloadLink));
  File cf=rc.downloadCaptcha(getLocalCaptchaFile());
  rc.setForm(rcForm);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  String c=getCaptchaCode(cf,downloadLink);
  rc.setCode(c);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,""String_Node_Str"",60 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  if (wait != null) {
    this.sleep(Integer.parseInt(wait) * 1000l,downloadLink);
  }
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=BrowserAdapter.openDownload(br,downloadLink,url,false,1);
  try {
    dl.getRequest().setConnectTimeout(30000);
    dl.getRequest().setReadTimeout(60000);
  }
 catch (  final Throwable ee) {
  }
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
    if (br.getURL().contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20696,"@Override public AccountInfo fetchAccountInfo(final Account account) throws Exception {
  final AccountInfo ai=new AccountInfo();
  try {
    login(account);
  }
 catch (  final PluginException e) {
    account.setValid(false);
    return ai;
  }
  ai.setStatus(""String_Node_Str"");
  ai.setUnlimitedTraffic();
  account.setValid(true);
  return ai;
}","@Override public AccountInfo fetchAccountInfo(final Account account) throws Exception {
  final AccountInfo ai=new AccountInfo();
  try {
    login(account,true);
  }
 catch (  final PluginException e) {
    account.setValid(false);
    return ai;
  }
  ai.setStatus(""String_Node_Str"");
  ai.setUnlimitedTraffic();
  account.setValid(true);
  return ai;
}"
20697,"public void login(final Account account) throws Exception {
  setBrowserExclusive();
  br.setDebug(true);
  br.setFollowRedirects(true);
  br.getPage(FACEBOOKMAINPAGE);
  final Form loginForm=br.getForm(0);
  if (loginForm == null) {
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  loginForm.remove(""String_Node_Str"");
  loginForm.remove(null);
  loginForm.put(""String_Node_Str"",account.getUser());
  loginForm.put(""String_Node_Str"",Encoding.urlEncode(account.getPass()));
  br.submitForm(loginForm);
  if (br.getCookie(FACEBOOKMAINPAGE,""String_Node_Str"") == null || br.getCookie(FACEBOOKMAINPAGE,""String_Node_Str"") == null) {
    throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
  }
}","@SuppressWarnings(""String_Node_Str"") public void login(final Account account,final boolean force) throws Exception {
synchronized (LOCK) {
    br.setCookiesExclusive(false);
    final Object ret=account.getProperty(""String_Node_Str"",null);
    boolean acmatch=account.getUser().matches(account.getStringProperty(""String_Node_Str"",account.getUser()));
    if (acmatch)     acmatch=account.getPass().matches(account.getStringProperty(""String_Node_Str"",account.getPass()));
    if (acmatch && ret != null && ret instanceof HashMap<?,?> && !force) {
      final HashMap<String,String> cookies=(HashMap<String,String>)ret;
      if (cookies.containsKey(""String_Node_Str"") && cookies.containsKey(""String_Node_Str"") && account.isValid()) {
        for (        final String key : cookies.keySet()) {
          this.br.setCookie(FACEBOOKMAINPAGE,key,cookies.get(key));
        }
        return;
      }
    }
    br.setFollowRedirects(true);
    br.getPage(FACEBOOKMAINPAGE);
    final Form loginForm=br.getForm(0);
    if (loginForm == null) {
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    loginForm.remove(""String_Node_Str"");
    loginForm.remove(null);
    loginForm.put(""String_Node_Str"",account.getUser());
    loginForm.put(""String_Node_Str"",Encoding.urlEncode(account.getPass()));
    br.submitForm(loginForm);
    if (br.getCookie(FACEBOOKMAINPAGE,""String_Node_Str"") == null || br.getCookie(FACEBOOKMAINPAGE,""String_Node_Str"") == null) {
      throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
    }
    final HashMap<String,String> cookies=new HashMap<String,String>();
    final Cookies add=this.br.getCookies(FACEBOOKMAINPAGE);
    for (    final Cookie c : add.getCookies()) {
      cookies.put(c.getKey(),c.getValue());
    }
    account.setProperty(""String_Node_Str"",account.getUser());
    account.setProperty(""String_Node_Str"",account.getPass());
    account.setProperty(""String_Node_Str"",cookies);
  }
}"
20698,"@Override public AvailableStatus requestFileInformation(final DownloadLink downloadLink) throws IOException {
  checkLinks(new DownloadLink[]{downloadLink});
  if (!downloadLink.isAvailabilityStatusChecked()) {
    downloadLink.setAvailableStatus(AvailableStatus.UNCHECKABLE);
  }
  return downloadLink.getAvailableStatus();
}","public AvailableStatus requestFileInformation(DownloadLink link) throws Exception {
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  final Account aa=AccountController.getInstance().getValidAccount(this);
  if (aa == null || !aa.isValid())   throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  br.setFollowRedirects(true);
  login(aa,false);
  br.getPage(link.getDownloadURL());
  String getThisPage=br.getRegex(""String_Node_Str"").getMatch(0);
  if (getThisPage != null)   br.getPage(getThisPage.replace(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  dllink=Encoding.urlDecode(decodeUnicode(br.getRegex(DLLINKREGEXP).getMatch(1)),true);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0).trim();
    if (filename != null) {
      final String videoid=new Regex(link.getDownloadURL(),""String_Node_Str"").getMatch(0);
      filename=filename + ""String_Node_Str"" + videoid;
    }
  }
  if (filename != null) {
    filename=filename.trim();
    link.setFinalFileName(filename + ""String_Node_Str"");
    return AvailableStatus.TRUE;
  }
 else {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
}"
20699,"public boolean checkLinksIntern(final DownloadLink[] urls){
  if (urls == null) {
    return false;
  }
  final ArrayList<DownloadLink> checkurls=new ArrayList<DownloadLink>();
  final ArrayList<DownloadLink> finishedurls=new ArrayList<DownloadLink>();
  for (  final DownloadLink u : urls) {
    checkurls.add(u);
  }
  try {
    for (int retry=0; retry < 3; retry++) {
      final StringBuilder idlist=new StringBuilder();
      final StringBuilder namelist=new StringBuilder();
      checkurls.removeAll(finishedurls);
      for (      final DownloadLink u : checkurls) {
        idlist.append(""String_Node_Str"").append(Rapidshare.getID(u.getDownloadURL()));
        namelist.append(""String_Node_Str"").append(this.getName(u));
      }
      final String req=""String_Node_Str"" + idlist.toString().substring(1) + ""String_Node_Str""+ namelist.toString().substring(1)+ ""String_Node_Str"";
      this.queryAPI(null,req,null);
      if (this.br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        Rapidshare.RS_API_WAIT=System.currentTimeMillis() + 5 * 60 * 1000l;
        return false;
      }
      final String[][] matches=this.br.getRegex(""String_Node_Str"").getMatches();
      int i=0;
      boolean doretry=false;
      for (      final DownloadLink u : checkurls) {
        finishedurls.add(u);
        if (i > matches.length - 1) {
          doretry=true;
          break;
        }
        u.setDownloadSize(Long.parseLong(matches[i][2]));
        u.setFinalFileName(matches[i][1]);
        if (!""String_Node_Str"".equalsIgnoreCase(matches[i][6])) {
          u.setMD5Hash(matches[i][6]);
        }
 else {
          u.setMD5Hash(null);
        }
switch (Integer.parseInt(matches[i][4])) {
case 0:
          if (new Regex(u.getDownloadURL(),""String_Node_Str"").matches() && tryWorkaround(u)) {
            finishedurls.remove(u);
            doretry=true;
          }
        u.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    u.setAvailable(false);
  break;
case 1:
u.setAvailable(true);
u.getLinkStatus().setStatusText(""String_Node_Str"");
u.getLinkStatus().setErrorMessage(null);
break;
case 2:
u.setAvailable(true);
u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.getLinkStatus().setErrorMessage(null);
break;
case 3:
u.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.setAvailable(false);
break;
case 4:
u.setAvailable(false);
u.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
break;
case 5:
u.setAvailableStatus(AvailableStatus.UNCHECKABLE);
u.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
break;
}
i++;
}
if (!doretry) {
return true;
}
}
return false;
}
 catch (final Exception e) {
if (this.br.containsHTML(""String_Node_Str"")) {
logger.warning(""String_Node_Str"");
Rapidshare.RS_API_WAIT=System.currentTimeMillis() + 5 * 60 * 1000l;
}
return false;
}
}","public boolean checkLinksIntern(final DownloadLink[] urls){
  if (urls == null) {
    return false;
  }
  final ArrayList<DownloadLink> checkurls=new ArrayList<DownloadLink>();
  final ArrayList<DownloadLink> finishedurls=new ArrayList<DownloadLink>();
  for (  final DownloadLink u : urls) {
    checkurls.add(u);
  }
  try {
    for (int retry=0; retry < 3; retry++) {
      final StringBuilder idlist=new StringBuilder();
      final StringBuilder namelist=new StringBuilder();
      checkurls.removeAll(finishedurls);
      for (      final DownloadLink u : checkurls) {
        idlist.append(""String_Node_Str"").append(Rapidshare.getID(u.getDownloadURL()));
        namelist.append(""String_Node_Str"").append(this.getName(u));
      }
      final String req=""String_Node_Str"" + idlist.toString().substring(1) + ""String_Node_Str""+ namelist.toString().substring(1)+ ""String_Node_Str"";
      this.queryAPI(null,req,null);
      if (this.br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        Rapidshare.RS_API_WAIT=System.currentTimeMillis() + 5 * 60 * 1000l;
        return false;
      }
      final String[][] matches=this.br.getRegex(""String_Node_Str"").getMatches();
      int i=0;
      boolean doretry=false;
      for (      final DownloadLink u : checkurls) {
        finishedurls.add(u);
        if (i > matches.length - 1) {
          doretry=true;
          break;
        }
        u.setDownloadSize(Long.parseLong(matches[i][2]));
        u.setFinalFileName(matches[i][1]);
        if (matches[i][6].trim().length() == 32) {
          u.setMD5Hash(matches[i][6]);
        }
 else {
          u.setMD5Hash(null);
        }
switch (Integer.parseInt(matches[i][4])) {
case 0:
          if (new Regex(u.getDownloadURL(),""String_Node_Str"").matches() && tryWorkaround(u)) {
            finishedurls.remove(u);
            doretry=true;
          }
        u.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    u.setAvailable(false);
  break;
case 1:
u.setAvailable(true);
u.getLinkStatus().setStatusText(""String_Node_Str"");
u.getLinkStatus().setErrorMessage(null);
break;
case 2:
u.setAvailable(true);
u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.getLinkStatus().setErrorMessage(null);
break;
case 3:
u.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.setAvailable(false);
break;
case 4:
u.setAvailable(false);
u.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
break;
case 5:
u.setAvailableStatus(AvailableStatus.UNCHECKABLE);
u.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
u.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
break;
}
i++;
}
if (!doretry) {
return true;
}
}
return false;
}
 catch (final Exception e) {
if (this.br.containsHTML(""String_Node_Str"")) {
logger.warning(""String_Node_Str"");
Rapidshare.RS_API_WAIT=System.currentTimeMillis() + 5 * 60 * 1000l;
}
return false;
}
}"
20700,"@Override public String getToolTip(KeyInfo obj){
  if (obj.hasWrongParameterCount())   return JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"");
  String match=new Regex(((KeyInfo)obj).getKey(),""String_Node_Str"").getMatch(0);
  if (match != null) {
    StringBuilder toolTip=new StringBuilder();
    toolTip.append(JDL.LF(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"",match));
    if (new Regex(obj.getLanguage(),""String_Node_Str"").matches()) {
      toolTip.append(new char[]{' ','['}).append(JDL.LF(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).append(']');
    }
    return toolTip.toString();
  }
  return super.getToolTip(obj);
}","@Override public String getToolTip(KeyInfo obj){
  if (obj.hasWrongParameterCount())   return JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"");
  String match=new Regex(((KeyInfo)obj).getKey(),""String_Node_Str"").getMatch(0);
  if (match != null) {
    StringBuilder toolTip=new StringBuilder();
    toolTip.append(JDL.LF(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"",match));
    if (new Regex(obj.getLanguage(),""String_Node_Str"").matches()) {
      toolTip.append(new char[]{' ','['}).append(JDL.LF(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"",obj.getLanguage())).append(']');
    }
    return toolTip.toString();
  }
  return super.getToolTip(obj);
}"
20701,"protected void initColumns(){
  this.addColumn(new ExtTextEditorColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-8945184634371898061L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override protected String getStringValue(    CustomizeSetting value){
      return value.getName();
    }
    @Override protected void setStringValue(    String value,    CustomizeSetting object){
      object.setName(value);
    }
  }
);
  this.addColumn(new ExtCheckColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-755486233284215838L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return true;
    }
    @Override protected boolean getBooleanValue(    CustomizeSetting value){
      return value.isEnabled();
    }
    @Override protected void setBooleanValue(    boolean value,    CustomizeSetting object){
      object.setEnabled(value);
    }
  }
);
  this.addColumn(new ExtTextEditorColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=4211754232119068701L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override protected void setStringValue(    String value,    CustomizeSetting object){
      object.setRegex(value);
    }
    @Override protected String getStringValue(    CustomizeSetting value){
      return value.getRegex();
    }
    @Override protected String getToolTip(    CustomizeSetting obj){
      if (obj.isRegexValid())       return super.getToolTip(obj);
      return JDL.LF(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  this.addColumn(new ExtCheckColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-755486233284215838L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isOnURL();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return true;
    }
    @Override protected boolean getBooleanValue(    CustomizeSetting value){
      return value.isOnURL();
    }
    @Override protected void setBooleanValue(    boolean value,    CustomizeSetting object){
      object.setOnURL(value);
    }
  }
);
  this.addColumn(new ExtTextEditorColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=7315104566941756777L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override protected String getStringValue(    CustomizeSetting value){
      return value.getPackageName();
    }
    @Override protected String getToolTip(    CustomizeSetting obj){
      return JDL.L(""String_Node_Str"",""String_Node_Str"");
    }
    @Override protected void setStringValue(    String value,    CustomizeSetting object){
      object.setPackageName(value);
    }
  }
);
  this.addColumn(new DownloadDirColumn(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this));
  this.addColumn(new ExtCheckColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=5660615874659705475L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return true;
    }
    @Override protected boolean getBooleanValue(    CustomizeSetting value){
      return value.isUseSubDirectory();
    }
    @Override protected void setBooleanValue(    boolean value,    CustomizeSetting object){
      object.setUseSubDirectory(value);
    }
  }
);
  this.addColumn(new ExtCheckColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-6837005675767011587L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return true;
    }
    @Override protected boolean getBooleanValue(    CustomizeSetting value){
      return value.isPostProcessing();
    }
    @Override protected void setBooleanValue(    boolean value,    CustomizeSetting object){
      object.setPostProcessing(value);
    }
  }
);
  this.addColumn(new ExtTextEditorColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=6345445804247730821L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return isEnabled(obj);
    }
    @Override protected void setStringValue(    String value,    CustomizeSetting object){
      object.setPassword(value);
    }
    @Override protected String getStringValue(    CustomizeSetting value){
      return value.getPassword();
    }
  }
);
  this.addColumn(new DLPriorityColumn(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this));
  this.addColumn(new ExtLongColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-8673582883080206266L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override protected long getLong(    CustomizeSetting value){
      return value.getMatchCount();
    }
  }
);
}","protected void initColumns(){
  this.addColumn(new ExtTextEditorColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-8945184634371898061L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override protected String getStringValue(    CustomizeSetting value){
      return value.getName();
    }
    @Override protected void setStringValue(    String value,    CustomizeSetting object){
      object.setName(value);
    }
  }
);
  this.addColumn(new ExtCheckColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-755486233284215838L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return true;
    }
    @Override protected boolean getBooleanValue(    CustomizeSetting value){
      return value.isEnabled();
    }
    @Override protected void setBooleanValue(    boolean value,    CustomizeSetting object){
      object.setEnabled(value);
    }
  }
);
  this.addColumn(new ExtTextEditorColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=4211754232119068701L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override protected void setStringValue(    String value,    CustomizeSetting object){
      object.setRegex(value);
    }
    @Override protected String getStringValue(    CustomizeSetting value){
      return value.getRegex();
    }
    @Override protected String getToolTip(    CustomizeSetting obj){
      if (obj.isRegexValid())       return super.getToolTip(obj);
      return JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"");
    }
  }
);
  this.addColumn(new ExtCheckColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-755486233284215838L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isOnURL();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return true;
    }
    @Override protected boolean getBooleanValue(    CustomizeSetting value){
      return value.isOnURL();
    }
    @Override protected void setBooleanValue(    boolean value,    CustomizeSetting object){
      object.setOnURL(value);
    }
  }
);
  this.addColumn(new ExtTextEditorColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=7315104566941756777L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override protected String getStringValue(    CustomizeSetting value){
      return value.getPackageName();
    }
    @Override protected String getToolTip(    CustomizeSetting obj){
      return JDL.L(""String_Node_Str"",""String_Node_Str"");
    }
    @Override protected void setStringValue(    String value,    CustomizeSetting object){
      object.setPackageName(value);
    }
  }
);
  this.addColumn(new DownloadDirColumn(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this));
  this.addColumn(new ExtCheckColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=5660615874659705475L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return true;
    }
    @Override protected boolean getBooleanValue(    CustomizeSetting value){
      return value.isUseSubDirectory();
    }
    @Override protected void setBooleanValue(    boolean value,    CustomizeSetting object){
      object.setUseSubDirectory(value);
    }
  }
);
  this.addColumn(new ExtCheckColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-6837005675767011587L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return true;
    }
    @Override protected boolean getBooleanValue(    CustomizeSetting value){
      return value.isPostProcessing();
    }
    @Override protected void setBooleanValue(    boolean value,    CustomizeSetting object){
      object.setPostProcessing(value);
    }
  }
);
  this.addColumn(new ExtTextEditorColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=6345445804247730821L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override public boolean isEditable(    CustomizeSetting obj){
      return isEnabled(obj);
    }
    @Override protected void setStringValue(    String value,    CustomizeSetting object){
      object.setPassword(value);
    }
    @Override protected String getStringValue(    CustomizeSetting value){
      return value.getPassword();
    }
  }
);
  this.addColumn(new DLPriorityColumn(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this));
  this.addColumn(new ExtLongColumn<CustomizeSetting>(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),this){
    private static final long serialVersionUID=-8673582883080206266L;
    @Override public boolean isEnabled(    CustomizeSetting obj){
      return obj.isEnabled();
    }
    @Override protected long getLong(    CustomizeSetting value){
      return value.getMatchCount();
    }
  }
);
}"
20702,"/** 
 * Sets the extractionpath with subpahts.
 * @param controller
 */
private void assignRealDownloadDir(ExtractionController controller){
  Boolean usesub=this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_USE_SUBPATH,false);
  if (usesub) {
    int min=this.getPluginConfig().getIntegerProperty(ExtractionConstants.CONFIG_KEY_SUBPATH_MINNUM,0);
    if (min > controller.getArchiv().getNumberOfFiles()) {
      return;
    }
    File dl=this.getExtractToPath(controller.getArchiv().getFirstDownloadLink());
    controller.getArchiv().setExtractTo(dl);
    ArrayList<DownloadLink> linkList=controller.getArchiv().getDownloadLinks();
    for (    DownloadLink l : linkList) {
      if (l == null)       continue;
      l.setProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH,dl.getAbsolutePath());
    }
  }
}","/** 
 * Sets the extractionpath with subpahts.
 * @param controller
 */
private void assignRealDownloadDir(ExtractionController controller){
  Boolean usesub=this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_USE_SUBPATH,false);
  if (usesub) {
    if (this.getPluginConfig().getIntegerProperty(ExtractionConstants.CONFIG_KEY_SUBPATH_MINNUM,0) > controller.getArchiv().getNumberOfFiles()) {
      return;
    }
    if (!this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_SUBPATH_NO_FOLDER,false) || controller.getArchiv().isNoFolder()) {
      return;
    }
    String path=this.getPluginConfig().getStringProperty(ExtractionConstants.CONFIG_KEY_SUBPATH,""String_Node_Str"");
    DownloadLink link=controller.getArchiv().getFirstDownloadLink();
    try {
      if (link.getFilePackage().getName() != null) {
        path=path.replace(""String_Node_Str"",link.getFilePackage().getName());
      }
 else {
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        logger.severe(""String_Node_Str"" + controller.getArchiv().getFirstDownloadLink().getFileOutput());
      }
      if (controller.getExtractor().getArchiveName(link) != null) {
        path=path.replace(""String_Node_Str"",controller.getExtractor().getArchiveName(link));
      }
 else {
        logger.severe(""String_Node_Str"" + controller.getArchiv().getFirstDownloadLink().getFileOutput());
      }
      if (link.getHost() != null) {
        path=path.replace(""String_Node_Str"",link.getHost());
      }
 else {
        logger.severe(""String_Node_Str"" + controller.getArchiv().getFirstDownloadLink().getFileOutput());
      }
      String dif=new File(JDUtilities.getDefaultDownloadDirectory()).getAbsolutePath().replace(new File(link.getFileOutput()).getParent(),""String_Node_Str"");
      if (new File(dif).isAbsolute()) {
        dif=""String_Node_Str"";
      }
      path=path.replace(""String_Node_Str"",dif);
      path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
      path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
      controller.getArchiv().setExtractTo(new File(controller.getArchiv().getExtractTo(),path));
    }
 catch (    Exception e) {
      JDLogger.exception(e);
    }
    for (    DownloadLink l : controller.getArchiv().getDownloadLinks()) {
      if (l == null)       continue;
      l.setProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH,controller.getArchiv().getExtractTo().getAbsolutePath());
    }
  }
}"
20703,"private void initConfig(){
  ConfigEntry ce, conditionEntry;
  final SubConfiguration subConfig=getPluginConfig();
  config.setGroup(new ConfigGroup(getHost(),getIconKey()));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_USE_EXTRACT_PATH,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,ExtractionConstants.CONFIG_KEY_UNPACKPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getDefaultDownloadDirectory());
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_OVERWRITE,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.setGroup(new ConfigGroup(JDL.L(""String_Node_Str"",""String_Node_Str""),getIconKey()));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_USE_SUBPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,ExtractionConstants.CONFIG_KEY_SUBPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,ExtractionConstants.CONFIG_KEY_SUBPATH_MINNUM,JDL.L(""String_Node_Str"",""String_Node_Str""),1,600,1).setDefaultValue(5));
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_DEEP_EXTRACT,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_REMOVE_INFO_FILE,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,ExtractionConstants.CONFIG_KEY_ADDITIONAL_SPACE,JDL.L(""String_Node_Str"",""String_Node_Str""),1,2048,1).setDefaultValue(512));
  for (  IExtraction extractor : extractors) {
    extractor.initConfig(config,subConfig);
  }
}","private void initConfig(){
  ConfigEntry ce, conditionEntry;
  final SubConfiguration subConfig=getPluginConfig();
  config.setGroup(new ConfigGroup(getHost(),getIconKey()));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_USE_EXTRACT_PATH,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,ExtractionConstants.CONFIG_KEY_UNPACKPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getDefaultDownloadDirectory());
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_OVERWRITE,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.setGroup(new ConfigGroup(JDL.L(""String_Node_Str"",""String_Node_Str""),getIconKey()));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_DEEP_EXTRACT,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_REMOVE_INFO_FILE,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,ExtractionConstants.CONFIG_KEY_ADDITIONAL_SPACE,JDL.L(""String_Node_Str"",""String_Node_Str""),1,2048,1).setDefaultValue(512));
  config.setGroup(new ConfigGroup(JDL.L(""String_Node_Str"",""String_Node_Str""),getIconKey()));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_USE_SUBPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,ExtractionConstants.CONFIG_KEY_SUBPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,ExtractionConstants.CONFIG_KEY_SUBPATH_MINNUM,JDL.L(""String_Node_Str"",""String_Node_Str""),0,1000,1).setDefaultValue(0));
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_SUBPATH_NO_FOLDER,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  ce.setEnabledCondidtion(conditionEntry,true);
  for (  IExtraction extractor : extractors) {
    extractor.initConfig(config,subConfig);
  }
}"
20704,"/** 
 * Bestimmt den Pfad in den das Archiv entpackt werden soll
 * @param link
 * @return
 */
private File getExtractToPath(DownloadLink link){
  IExtraction extractor=getExtractor(link);
  if (link.getProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTTOPATH) != null)   return (File)link.getProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTTOPATH);
  if (link.getHost().equals(DUMMY_HOSTER))   return new File(link.getFileOutput()).getParentFile();
  String path;
  if (!getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_USE_EXTRACT_PATH,false)) {
    path=new File(link.getFileOutput()).getParent();
  }
 else {
    path=this.getPluginConfig().getStringProperty(ExtractionConstants.CONFIG_KEY_UNPACKPATH,JDUtilities.getDefaultDownloadDirectory());
  }
  File ret=new File(path);
  if (!this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_USE_SUBPATH,false))   return ret;
  path=this.getPluginConfig().getStringProperty(ExtractionConstants.CONFIG_KEY_SUBPATH,""String_Node_Str"");
  try {
    if (link.getFilePackage().getName() != null) {
      path=path.replace(""String_Node_Str"",link.getFilePackage().getName());
    }
 else {
      path=path.replace(""String_Node_Str"",""String_Node_Str"");
      logger.severe(""String_Node_Str"");
    }
    if (extractor.getArchiveName(link) != null) {
      path=path.replace(""String_Node_Str"",extractor.getArchiveName(link));
    }
 else {
      logger.severe(""String_Node_Str"");
    }
    if (link.getHost() != null) {
      path=path.replace(""String_Node_Str"",link.getHost());
    }
 else {
      logger.severe(""String_Node_Str"");
    }
    String dif=new File(JDUtilities.getDefaultDownloadDirectory()).getAbsolutePath().replace(new File(link.getFileOutput()).getParent(),""String_Node_Str"");
    if (new File(dif).isAbsolute()) {
      dif=""String_Node_Str"";
    }
    path=path.replace(""String_Node_Str"",dif);
    path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
    path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
    return new File(ret,path);
  }
 catch (  Exception e) {
    JDLogger.exception(e);
    return ret;
  }
}","/** 
 * Bestimmt den Pfad in den das Archiv entpackt werden soll
 * @param link
 * @return
 */
private File getExtractToPath(DownloadLink link){
  if (link.getProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTTOPATH) != null)   return (File)link.getProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTTOPATH);
  if (link.getHost().equals(DUMMY_HOSTER))   return new File(link.getFileOutput()).getParentFile();
  String path;
  if (!getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_USE_EXTRACT_PATH,false)) {
    path=new File(link.getFileOutput()).getParent();
  }
 else {
    path=this.getPluginConfig().getStringProperty(ExtractionConstants.CONFIG_KEY_UNPACKPATH,JDUtilities.getDefaultDownloadDirectory());
  }
  return new File(path);
}"
20705,"public boolean prepare(){
  try {
    if (archive.getFirstDownloadLink().getHost().equals(DUMMY_HOSTER)) {
      Archive a=buildArchive(archive.getFirstDownloadLink());
      archive.setDownloadLinks(a.getDownloadLinks());
      archive.setType(a.getType());
    }
    if (archive.getType() == Archive.SINGLE_FILE) {
      if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.RAR;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.SEVEN_ZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.ZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.GZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.BZIP2;
      }
      stream=new RandomAccessFileInStream(new RandomAccessFile(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str""));
      inArchive=SevenZip.openInArchive(format,stream);
    }
 else     if (archive.getType() == Archive.MULTI) {
      multiopener=new MultiOpener();
      IInStream inStream=new VolumedArchiveInStream(archive.getFirstDownloadLink().getFileOutput(),multiopener);
      inArchive=SevenZip.openInArchive(ArchiveFormat.SEVEN_ZIP,inStream);
    }
 else     if (archive.getType() == Archive.MULTI_RAR) {
      raropener=new RarOpener();
      IInStream inStream=raropener.getStream(archive.getFirstDownloadLink().getFileOutput());
      inArchive=SevenZip.openInArchive(ArchiveFormat.RAR,inStream,raropener);
    }
 else {
      return false;
    }
    long size=0;
    int numberOfFiles=0;
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      if (item.getPath().trim().equals(""String_Node_Str""))       continue;
      if (item.isEncrypted()) {
        archive.setProtected(true);
      }
      size+=item.getSize();
      if (item.getSize() > 0) {
        numberOfFiles++;
      }
    }
    archive.setSize(size);
    archive.setNumberOfFiles(numberOfFiles);
  }
 catch (  SevenZipException e) {
    archive.setProtected(true);
    return true;
  }
catch (  Exception e) {
    return false;
  }
  return true;
}","public boolean prepare(){
  try {
    if (archive.getFirstDownloadLink().getHost().equals(DUMMY_HOSTER)) {
      Archive a=buildArchive(archive.getFirstDownloadLink());
      archive.setDownloadLinks(a.getDownloadLinks());
      archive.setType(a.getType());
    }
    if (archive.getType() == Archive.SINGLE_FILE) {
      if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.RAR;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.SEVEN_ZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.ZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.GZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.BZIP2;
      }
      stream=new RandomAccessFileInStream(new RandomAccessFile(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str""));
      inArchive=SevenZip.openInArchive(format,stream);
    }
 else     if (archive.getType() == Archive.MULTI) {
      multiopener=new MultiOpener();
      IInStream inStream=new VolumedArchiveInStream(archive.getFirstDownloadLink().getFileOutput(),multiopener);
      inArchive=SevenZip.openInArchive(ArchiveFormat.SEVEN_ZIP,inStream);
    }
 else     if (archive.getType() == Archive.MULTI_RAR) {
      raropener=new RarOpener();
      IInStream inStream=raropener.getStream(archive.getFirstDownloadLink().getFileOutput());
      inArchive=SevenZip.openInArchive(ArchiveFormat.RAR,inStream,raropener);
    }
 else {
      return false;
    }
    long size=0;
    int numberOfFiles=0;
    String folder=""String_Node_Str"";
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      if (item.isFolder()) {
        archive.setNoFolder(false);
        continue;
      }
      if (item.getPath().trim().equals(""String_Node_Str""))       continue;
      if (item.isEncrypted()) {
        archive.setProtected(true);
        return true;
      }
      String[] erg=item.getPath().split(""String_Node_Str"");
      if (archive.isNoFolder() && erg.length > 1) {
        if (folder.equals(""String_Node_Str"")) {
          folder=erg[0];
        }
 else {
          if (!folder.equals(erg[0])) {
            archive.setNoFolder(false);
          }
        }
      }
 else {
        archive.setNoFolder(false);
      }
      size+=item.getSize();
      if (item.getSize() > 0) {
        numberOfFiles++;
      }
    }
    archive.setSize(size);
    archive.setNumberOfFiles(numberOfFiles);
  }
 catch (  SevenZipException e) {
    archive.setProtected(true);
    return true;
  }
catch (  Exception e) {
    return false;
  }
  return true;
}"
20706,"public boolean findPassword(String password){
  crack++;
  con.fireEvent(ExtractionConstants.WRAPPER_PASSWORT_CRACKING);
  try {
    if (inArchive != null) {
      inArchive.close();
    }
    if (archive.getType() == Archive.SINGLE_FILE) {
      inArchive=SevenZip.openInArchive(format,stream,password);
    }
 else     if (archive.getType() == Archive.MULTI) {
      if (multiopener != null) {
        multiopener.close();
      }
      multiopener=new MultiOpener(password);
      IInStream inStream=new VolumedArchiveInStream(archive.getFirstDownloadLink().getFileOutput(),multiopener);
      inArchive=SevenZip.openInArchive(ArchiveFormat.SEVEN_ZIP,inStream);
    }
 else     if (archive.getType() == Archive.MULTI_RAR) {
      if (raropener != null) {
        raropener.close();
      }
      raropener=new RarOpener(password);
      IInStream inStream=raropener.getStream(archive.getFirstDownloadLink().getFileOutput());
      inArchive=SevenZip.openInArchive(ArchiveFormat.RAR,inStream,raropener);
    }
    long size=0;
    final BooleanHelper passwordfound=new BooleanHelper();
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      size+=item.getSize();
      if (!passwordArchive && !passwordfound.getBoolean()) {
        try {
          final String path=item.getPath();
          item.extractSlow(new ISequentialOutStream(){
            public int write(            byte[] data) throws SevenZipException {
              if (passwordExtracting) {
                passwordfound.found();
                return 0;
              }
              int length=0;
              if (new Regex(path,""String_Node_Str"").matches()) {
                length=37000;
              }
 else               if (new Regex(path,""String_Node_Str"").matches()) {
                length=512;
              }
 else {
                length=32;
              }
              if (length > data.length) {
                length=data.length;
              }
              StringBuilder sigger=new StringBuilder();
              for (int i=0; i < length - 1; i++) {
                String s=Integer.toHexString(data[i]);
                s=(s.length() < 2 ? ""String_Node_Str"" + s : s);
                s=s.substring(s.length() - 2);
                sigger.append(s);
              }
              Signature signature=FileSignatures.getSignature(sigger.toString());
              if (signature != null) {
                if (signature.getExtensionSure() != null && signature.getExtensionSure().matcher(path).matches()) {
                  passwordfound.found();
                }
              }
              return 0;
            }
          }
,password);
          passwordExtracting=true;
          return false;
        }
 catch (        SevenZipException e) {
        }
      }
    }
    if (!passwordArchive && !passwordfound.getBoolean())     return false;
    archive.setSize(size);
    archive.setPassword(password);
    return true;
  }
 catch (  FileNotFoundException e) {
    return false;
  }
catch (  SevenZipException e) {
    passwordArchive=true;
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}","public boolean findPassword(String password){
  crack++;
  con.fireEvent(ExtractionConstants.WRAPPER_PASSWORT_CRACKING);
  try {
    if (inArchive != null) {
      inArchive.close();
    }
    if (archive.getType() == Archive.SINGLE_FILE) {
      inArchive=SevenZip.openInArchive(format,stream,password);
    }
 else     if (archive.getType() == Archive.MULTI) {
      if (multiopener != null) {
        multiopener.close();
      }
      multiopener=new MultiOpener(password);
      IInStream inStream=new VolumedArchiveInStream(archive.getFirstDownloadLink().getFileOutput(),multiopener);
      inArchive=SevenZip.openInArchive(ArchiveFormat.SEVEN_ZIP,inStream);
    }
 else     if (archive.getType() == Archive.MULTI_RAR) {
      if (raropener != null) {
        raropener.close();
      }
      raropener=new RarOpener(password);
      IInStream inStream=raropener.getStream(archive.getFirstDownloadLink().getFileOutput());
      inArchive=SevenZip.openInArchive(ArchiveFormat.RAR,inStream,raropener);
    }
    long size=0;
    final BooleanHelper passwordfound=new BooleanHelper();
    String folder=""String_Node_Str"";
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      if (item.isFolder() || item.getSize() == 0) {
        continue;
      }
      if (!passwordArchive && !passwordfound.getBoolean()) {
        try {
          final String path=item.getPath();
          item.extractSlow(new ISequentialOutStream(){
            public int write(            byte[] data) throws SevenZipException {
              if (passwordExtracting) {
                passwordfound.found();
                return 0;
              }
              int length=0;
              if (new Regex(path,""String_Node_Str"").matches()) {
                length=37000;
              }
 else               if (new Regex(path,""String_Node_Str"").matches()) {
                length=512;
              }
 else {
                length=32;
              }
              if (length > data.length) {
                length=data.length;
              }
              StringBuilder sigger=new StringBuilder();
              for (int i=0; i < length - 1; i++) {
                String s=Integer.toHexString(data[i]);
                s=(s.length() < 2 ? ""String_Node_Str"" + s : s);
                s=s.substring(s.length() - 2);
                sigger.append(s);
              }
              Signature signature=FileSignatures.getSignature(sigger.toString());
              if (signature != null) {
                if (signature.getExtensionSure() != null && signature.getExtensionSure().matcher(path).matches()) {
                  passwordfound.found();
                }
              }
              return 0;
            }
          }
,password);
          passwordExtracting=true;
          return false;
        }
 catch (        SevenZipException e) {
        }
      }
      String[] erg=item.getPath().split(""String_Node_Str"");
      if (archive.isNoFolder() && erg.length > 1) {
        if (folder.equals(""String_Node_Str"")) {
          folder=erg[0];
        }
 else {
          if (!folder.equals(erg[0])) {
            archive.setNoFolder(false);
          }
        }
      }
 else {
        archive.setNoFolder(false);
      }
      size+=item.getSize();
    }
    if (!passwordArchive && !passwordfound.getBoolean())     return false;
    archive.setSize(size);
    archive.setPassword(password);
    return true;
  }
 catch (  FileNotFoundException e) {
    return false;
  }
catch (  SevenZipException e) {
    passwordArchive=true;
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}"
20707,"private boolean isContainer(File file){
  return isContainer(file.getName());
}","private boolean isContainer(String path){
  return path.matches(""String_Node_Str"");
}"
20708,"private void initConfigGui(){
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  final DefaultListModel listModel=new DefaultListModel();
  for (  String folder : folderlist) {
    listModel.addElement(folder);
  }
  final JList list=new JList(listModel);
  list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  final JDFileChooser filechooser=new JDFileChooser();
  filechooser.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
  filechooser.setMultiSelectionEnabled(true);
  config.setGroup(new ConfigGroup(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),getIconKey()));
  JButton addButton=new JButton(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""));
  addButton.setIcon(JDTheme.II(""String_Node_Str"",16,16));
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      filechooser.showOpenDialog(null);
      for (      File file : filechooser.getSelectedFiles()) {
        folderlist.add(file.getAbsolutePath());
        listModel.addElement(file.getAbsolutePath());
        folderlistHasChanged=true;
      }
    }
  }
);
  JButton removeButton=new JButton(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""));
  removeButton.setIcon(JDTheme.II(""String_Node_Str"",16,16));
  removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      while (!list.isSelectionEmpty()) {
        folderlist.remove(list.getSelectedIndex());
        listModel.remove(list.getSelectedIndex());
        folderlistHasChanged=true;
      }
    }
  }
);
  JPanel p=new JPanel(new MigLayout(""String_Node_Str"",""String_Node_Str""));
  p.add(addButton,""String_Node_Str"");
  p.add(removeButton,""String_Node_Str"");
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_COMPONENT,new JScrollPane(list),""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_COMPONENT,p,""String_Node_Str""));
  config.setGroup(new ConfigGroup(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),getIconKey()));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_BUTTON,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      String folder=(String)list.getSelectedValue();
      if (folder != null)       openInFilebrowser(folder);
    }
  }
,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",16,16)));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_BUTTON,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (JDFlags.hasSomeFlags(UserIO.getInstance().requestConfirmDialog(UserIO.NO_COUNTDOWN,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")),UserIO.RETURN_OK)) {
        String folder=(String)list.getSelectedValue();
        if (folder != null)         emptyFolder(folder);
      }
    }
  }
,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",16,16)));
  config.setGroup(new ConfigGroup(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),getIconKey()));
  if (OSDetector.isWindows()) {
    config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_OPTION_RECURSIVE,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  }
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_OPTION_IMPORT,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_OPTION_IMPORT_DELETE,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_OPTION_HISTORY,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
}","private void initConfigGui(){
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e1) {
    e1.printStackTrace();
  }
  final JDFileChooser filechooser=new JDFileChooser();
  filechooser.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
  filechooser.setMultiSelectionEnabled(true);
  final DefaultListModel listModel=new DefaultListModel();
  final JList list=new JList(listModel);
  list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  for (  String folder : folderlist)   addListModelEntry(list,folder);
  config.setGroup(new ConfigGroup(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),getIconKey()));
  JButton addButton=new JButton(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""));
  addButton.setIcon(JDTheme.II(""String_Node_Str"",16,16));
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      filechooser.showOpenDialog(null);
      for (      File file : filechooser.getSelectedFiles()) {
        if (!folderlist.contains(file.getAbsolutePath())) {
          folderlist.add(file.getAbsolutePath());
          addListModelEntry(list,file.getAbsolutePath());
          folderlistHasChanged=true;
        }
      }
    }
  }
);
  JButton removeButton=new JButton(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""));
  removeButton.setIcon(JDTheme.II(""String_Node_Str"",16,16));
  removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      while (!list.isSelectionEmpty()) {
        folderlist.remove(list.getSelectedIndex());
        listModel.remove(list.getSelectedIndex());
        folderlistHasChanged=true;
      }
    }
  }
);
  JPanel p=new JPanel(new MigLayout(""String_Node_Str"",""String_Node_Str""));
  p.add(addButton,""String_Node_Str"");
  p.add(removeButton,""String_Node_Str"");
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_COMPONENT,new JScrollPane(list),""String_Node_Str""));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_COMPONENT,p,""String_Node_Str""));
  config.setGroup(new ConfigGroup(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),getIconKey()));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_BUTTON,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!list.isSelectionEmpty()) {
        String folder=folderlist.get(list.getSelectedIndex());
        openInFilebrowser(folder);
      }
    }
  }
,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",16,16)));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_BUTTON,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!list.isSelectionEmpty()) {
        if (JDFlags.hasSomeFlags(UserIO.getInstance().requestConfirmDialog(UserIO.NO_COUNTDOWN,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")),UserIO.RETURN_OK)) {
          String folder=folderlist.get(list.getSelectedIndex());
          emptyFolder(folder);
          updateSelectedListEntry(list);
        }
      }
    }
  }
,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",16,16)));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_BUTTON,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showGui();
    }
  }
,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",16,16)));
  config.setGroup(new ConfigGroup(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),getIconKey()));
  if (OSDetector.isWindows()) {
    config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_OPTION_RECURSIVE,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  }
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_OPTION_IMPORT,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_OPTION_IMPORT_DELETE,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_OPTION_HISTORY,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
}"
20709,"public void actionPerformed(ActionEvent e){
  if (JDFlags.hasSomeFlags(UserIO.getInstance().requestConfirmDialog(UserIO.NO_COUNTDOWN,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")),UserIO.RETURN_OK)) {
    String folder=(String)list.getSelectedValue();
    if (folder != null)     emptyFolder(folder);
  }
}","public void actionPerformed(ActionEvent e){
  showGui();
}"
20710,"private boolean emptyFolder(File folder){
  if (folder.isDirectory()) {
    for (    File file : folder.listFiles()) {
      if (isContainer(file)) {
        file.delete();
      }
    }
    return true;
  }
  return false;
}","private boolean emptyFolder(File folder){
  if (folder.exists() && folder.isDirectory()) {
    for (    File file : folder.listFiles()) {
      if (isContainer(file)) {
        file.delete();
      }
    }
    return true;
  }
  return false;
}"
20711,"private void deleteContainer(File container){
  if (isContainer(container))   container.delete();
}","private void deleteContainer(File container){
  if (isContainer(container)) {
    container.delete();
  }
}"
20712,"private void openInFilebrowser(String path){
  JDUtilities.openExplorer(new File(path));
}","private void openInFilebrowser(String path){
  File dir=new File(path);
  if (dir.exists()) {
    JDUtilities.openExplorer(dir);
  }
 else {
    UserIO.getInstance().requestConfirmDialog(UserIO.NO_COUNTDOWN,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""));
  }
}"
20713,"private void handleErrors(final Browser br) throws PluginException {
  String error=null;
  if (this.br.toString().startsWith(""String_Node_Str"")) {
    error=this.br.getRegex(""String_Node_Str"").getMatch(0);
    final String ipwait=new Regex(error,""String_Node_Str"").getMatch(0);
    if (ipwait != null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,Long.parseLong(ipwait) * 1000l);
    }
    if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,error);
    }
 else     if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),5 * 60 * 1000l);
    }
 else     if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
    }
 else     if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
    }
 else     if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1000l);
    }
 else {
      JDLogger.getLogger().fine(br.toString());
      throw new PluginException(LinkStatus.ERROR_FATAL,error);
    }
  }
}","private void handleErrors(final Browser br) throws PluginException {
  String error=null;
  if (this.br.toString().startsWith(""String_Node_Str"")) {
    error=this.br.getRegex(""String_Node_Str"").getMatch(0);
    int index=error.lastIndexOf(""String_Node_Str"");
    if (index > 0)     error=error.substring(0,index).trim();
    final String ipwait=new Regex(error,""String_Node_Str"").getMatch(0);
    if (ipwait != null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,Long.parseLong(ipwait) * 1000l);
    }
    if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,error);
    }
 else     if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),5 * 60 * 1000l);
    }
 else     if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
    }
 else     if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
    }
 else     if (""String_Node_Str"".equals(error)) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1000l);
    }
 else {
      JDLogger.getLogger().fine(br.toString());
      throw new PluginException(LinkStatus.ERROR_FATAL,error);
    }
  }
}"
20714,"/** 
 * Lädt ein Dynamicplugin.
 * @throws IOException
 */
public static void loadDynamics() throws Exception {
  final ArrayList<String> classes=new ArrayList<String>();
  final URLClassLoader classLoader=new URLClassLoader(new URL[]{JDUtilities.getJDHomeDirectoryFromEnvironment().toURI().toURL()},Thread.currentThread().getContextClassLoader());
  if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL) {
    final Enumeration<URL> resources=classLoader.getResources(""String_Node_Str"");
    final ArrayList<String> dynamics=new ArrayList<String>();
    while (resources.hasMoreElements()) {
      final URL resource=resources.nextElement();
      if (resource.toURI().getPath() != null) {
        final String[] files=new File(resource.toURI().getPath()).list();
        if (files != null) {
          for (          final String file : files) {
            dynamics.add(new File(file).getName());
          }
        }
      }
    }
    if (dynamics.size() == 0) {
      return;
    }
    for (    final String dynamic : dynamics) {
      if (!dynamic.contains(""String_Node_Str"") && !classes.contains(""String_Node_Str"" + dynamic) && !dynamic.equalsIgnoreCase(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + dynamic);
        classes.add(""String_Node_Str"" + dynamic);
      }
    }
  }
 else {
    Main.LOG.finest(""String_Node_Str"");
    if (WebUpdater.getPluginList() == null) {
      return;
    }
    for (    final Entry<String,FileUpdate> entry : WebUpdater.PLUGIN_LIST.entrySet()) {
      System.out.println(""String_Node_Str"" + entry.getKey());
      if (entry.getKey().startsWith(""String_Node_Str"") && !entry.getKey().contains(""String_Node_Str"")) {
        Main.LOG.finest(""String_Node_Str"" + entry.getKey());
        if (!entry.getValue().equals()) {
          if (!new WebUpdater().updateUpdatefile(entry.getValue())) {
            Main.LOG.warning(""String_Node_Str"" + entry.getValue());
            continue;
          }
 else {
            Main.LOG.finest(""String_Node_Str"");
          }
        }
        if (!entry.getKey().contains(""String_Node_Str"") && !classes.contains(entry.getKey())) {
          classes.add(entry.getKey());
        }
      }
    }
  }
  for (  final String clazz : classes) {
    try {
      Class<?> plgClass;
      Main.LOG.finest(""String_Node_Str"" + clazz);
      plgClass=classLoader.loadClass(clazz.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").substring(1));
      if (plgClass == null) {
        Main.LOG.info(""String_Node_Str"" + clazz);
        continue;
      }
      if (plgClass == DynamicPluginInterface.class) {
        continue;
      }
      final Constructor<?> con=plgClass.getConstructor(new Class[]{});
      final DynamicPluginInterface dplg=(DynamicPluginInterface)con.newInstance(new Object[]{});
      dplg.execute();
    }
 catch (    final Throwable e) {
      JDLogger.exception(Level.FINER,e);
    }
  }
}","/** 
 * Lädt ein Dynamicplugin.
 * @throws IOException
 */
public static void loadDynamics() throws Exception {
  final ArrayList<String> classes=new ArrayList<String>();
  final URLClassLoader classLoader=new URLClassLoader(new URL[]{JDUtilities.getJDHomeDirectoryFromEnvironment().toURI().toURL()},Thread.currentThread().getContextClassLoader());
  if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL) {
    final Enumeration<URL> resources=classLoader.getResources(""String_Node_Str"");
    final ArrayList<String> dynamics=new ArrayList<String>();
    while (resources.hasMoreElements()) {
      final URL resource=resources.nextElement();
      if (resource.toURI().getPath() != null) {
        final String[] files=new File(resource.toURI().getPath()).list();
        if (files != null) {
          for (          final String file : files) {
            dynamics.add(new File(file).getName());
          }
        }
      }
    }
    if (dynamics.size() == 0) {
      return;
    }
    for (    final String dynamic : dynamics) {
      if (!dynamic.contains(""String_Node_Str"") && !classes.contains(""String_Node_Str"" + dynamic) && !dynamic.equalsIgnoreCase(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + dynamic);
        classes.add(""String_Node_Str"" + dynamic);
      }
    }
  }
 else {
  }
  for (  final String clazz : classes) {
    try {
      Class<?> plgClass;
      Main.LOG.finest(""String_Node_Str"" + clazz);
      plgClass=classLoader.loadClass(clazz.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").substring(1));
      if (plgClass == null) {
        Main.LOG.info(""String_Node_Str"" + clazz);
        continue;
      }
      if (plgClass == DynamicPluginInterface.class) {
        continue;
      }
      final Constructor<?> con=plgClass.getConstructor(new Class[]{});
      final DynamicPluginInterface dplg=(DynamicPluginInterface)con.newInstance(new Object[]{});
      dplg.execute();
    }
 catch (    final Throwable e) {
      JDLogger.exception(Level.FINER,e);
    }
  }
}"
20715,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(false);
  String finallink=br.getRegex(DLLINKREGEX).getMatch(0);
  if (finallink == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  goToSleep(downloadLink);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadLink.getDownloadURL(),true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    if (dl.getConnection().getResponseCode() == 503)     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    logger.info(""String_Node_Str"");
    dl.getConnection().disconnect();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      br.getPage(downloadLink.getStringProperty(""String_Node_Str"",null));
      goToSleep(downloadLink);
    }
    finallink=br.getRegex(DLLINKREGEX).getMatch(0);
    if (finallink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    finallink=fixLink(finallink);
    downloadLink.setUrlDownload(finallink);
    logger.info(""String_Node_Str"" + downloadLink.getDownloadURL());
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadLink.getDownloadURL(),true,1);
    if ((dl.getConnection().getContentType().contains(""String_Node_Str""))) {
      logger.warning(""String_Node_Str"");
      logger.warning(""String_Node_Str"" + downloadLink.getDownloadURL());
      br.followConnection();
      if (br.getURL().equals(downloadLink.getStringProperty(""String_Node_Str""))) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
 else {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"" + downloadLink.getDownloadURL());
  }
  logger.info(""String_Node_Str"");
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(false);
  String finallink=br.getRegex(DLLINKREGEX).getMatch(0);
  if (finallink == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  goToSleep(downloadLink);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadLink.getDownloadURL(),true,0);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    if (dl.getConnection().getResponseCode() == 503)     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    logger.info(""String_Node_Str"");
    br.followConnection();
    dl.getConnection().disconnect();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      br.getPage(downloadLink.getStringProperty(""String_Node_Str"",null));
      goToSleep(downloadLink);
    }
    finallink=br.getRegex(DLLINKREGEX).getMatch(0);
    if (finallink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    finallink=fixLink(finallink);
    downloadLink.setUrlDownload(finallink);
    logger.info(""String_Node_Str"" + downloadLink.getDownloadURL());
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadLink.getDownloadURL(),true,0);
    if ((dl.getConnection().getContentType().contains(""String_Node_Str""))) {
      logger.warning(""String_Node_Str"");
      logger.warning(""String_Node_Str"" + downloadLink.getDownloadURL());
      br.followConnection();
      if (br.getURL().equals(downloadLink.getStringProperty(""String_Node_Str""))) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
 else {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"" + downloadLink.getDownloadURL());
  }
  logger.info(""String_Node_Str"");
  dl.startDownload();
}"
20716,"public void update(){
  new GuiRunnable<Object>(){
    @Override public Object runSave(){
      History.updateEntries();
      HistoryEntry container=(HistoryEntry)table.getValueAt(table.getSelectedRow(),3);
      String info=container.isExisting() ? ""String_Node_Str"" : ""String_Node_Str"";
      updateInfo(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),info);
      return null;
    }
  }
.start();
}","public void update(){
  new GuiRunnable<Object>(){
    @Override public Object runSave(){
      HistoryEntry container=(HistoryEntry)table.getValueAt(table.getSelectedRow(),3);
      container=History.updateEntry(container);
      String info=container.isExisting() ? ""String_Node_Str"" : ""String_Node_Str"";
      updateInfo(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),info);
      return null;
    }
  }
.start();
}"
20717,"@Override public Object runSave(){
  History.updateEntries();
  HistoryEntry container=(HistoryEntry)table.getValueAt(table.getSelectedRow(),3);
  String info=container.isExisting() ? ""String_Node_Str"" : ""String_Node_Str"";
  updateInfo(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),info);
  return null;
}","@Override public Object runSave(){
  HistoryEntry container=(HistoryEntry)table.getValueAt(table.getSelectedRow(),3);
  container=History.updateEntry(container);
  String info=container.isExisting() ? ""String_Node_Str"" : ""String_Node_Str"";
  updateInfo(JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),info);
  return null;
}"
20718,"public void onPostSave(SubConfiguration subConfiguration){
  folder=subConfiguration.getStringProperty(FolderWatchConstants.PROPERTY_FOLDER);
  if (!folder.equals(folderOld)) {
    startWatching(false);
    startWatching(true);
  }
}","public void onPostSave(SubConfiguration subConfiguration){
  folder=subConfiguration.getStringProperty(FolderWatchConstants.PROPERTY_FOLDER);
  isAutoDelete=subConfiguration.getBooleanProperty(FolderWatchConstants.PROPERTY_AUTODELETE);
  if (!folder.equals(folderOld) || isAutoDelete != isAutoDeleteOld) {
    startWatching(false);
    startWatching(true);
  }
}"
20719,"private void showGui(){
  if (view == null) {
    view=new FolderWatchView();
    view.getBroadcaster().addListener(new SwitchPanelListener(){
      @Override public void onPanelEvent(      SwitchPanelEvent event){
        if (event.getEventID() == SwitchPanelEvent.ON_REMOVE) {
          showGuiAction.setSelected(false);
        }
      }
    }
);
    historyCleanup();
    historyGui=new FolderWatchPanel(getPluginConfig());
    view.setContent(historyGui);
    view.setInfoPanel(historyGui.getInfoPanel());
  }
  showGuiAction.setSelected(true);
  JDGui.getInstance().setContent(view);
}","private void showGui(){
  if (view == null) {
    view=new FolderWatchView();
    view.getBroadcaster().addListener(new SwitchPanelListener(){
      @Override public void onPanelEvent(      SwitchPanelEvent event){
        if (event.getEventID() == SwitchPanelEvent.ON_REMOVE) {
          showGuiAction.setSelected(false);
        }
      }
    }
);
    historyCleanup(null);
    historyGui=new FolderWatchPanel(getPluginConfig());
    view.setContent(historyGui);
    view.setInfoPanel(historyGui.getInfoPanel());
  }
  showGuiAction.setSelected(true);
  JDGui.getInstance().setContent(view);
}"
20720,"public void onMonitoringFileCreate(String filename){
  if (isContainer(filename)) {
    String absPath=folder + ""String_Node_Str"" + filename;
    String md5Hash=importContainer(absPath);
    historyAdd(new HistoryEntry(filename,absPath,md5Hash));
  }
}","public void onMonitoringFileCreate(String filename){
  if (isContainer(filename)) {
    String absPath=folder + ""String_Node_Str"" + filename;
    String md5Hash=importContainer(absPath);
    historyAdd(new HistoryEntry(filename,absPath,md5Hash));
    if (isAutoDelete) {
      final String container=absPath;
      Thread t=new Thread(new Runnable(){
        public void run(){
          try {
            while (LinkGrabberPanel.getLinkGrabber().isRunning()) {
              Thread.sleep(1000);
            }
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          deleteContainer(container);
          logger.info(container + ""String_Node_Str"");
        }
      }
);
      t.run();
    }
  }
}"
20721,"private void initConfig(){
  ConfigEntry ce=null;
  config.setGroup(new ConfigGroup(getHost(),getIconKey()));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,FolderWatchConstants.PROPERTY_FOLDER,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BUTTON,this,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",16,16)));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BUTTON,this,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",16,16)));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_RECURSIVE,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  if (!OSDetector.isWindows())   ce.setEnabled(false);
 else   ce.setDefaultValue(true);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_AUTODELETE,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_HISTORYONLY,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_DELETECASCADE,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
}","private void initConfig(){
  ConfigEntry ce=null;
  config.setGroup(new ConfigGroup(getHost(),getIconKey()));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,FolderWatchConstants.PROPERTY_FOLDER,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BUTTON,this,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",16,16)));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BUTTON,this,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",16,16)));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SEPARATOR));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_RECURSIVE,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  if (!OSDetector.isWindows())   ce.setEnabled(false);
 else   ce.setDefaultValue(true);
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_AUTODELETE,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,FolderWatchConstants.PROPERTY_HISTORYONLY,JDL.L(JDL_PREFIX + ""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
}"
20722,"public void onMonitoringFileDelete(String filename){
  historyCleanup();
}","public void onMonitoringFileDelete(String filename){
  historyCleanup(filename);
}"
20723,"public JDFolderWatch(PluginWrapper wrapper){
  super(wrapper);
  subConfig=getPluginConfig();
  isEnabled=subConfig.getBooleanProperty(FolderWatchConstants.PROPERTY_ENABLED,true);
  folder=subConfig.getStringProperty(FolderWatchConstants.PROPERTY_FOLDER,""String_Node_Str"");
  History.setEntries(getHistoryEntriesFromConfig());
  historyCleanup();
  initConfig();
}","public JDFolderWatch(PluginWrapper wrapper){
  super(wrapper);
  subConfig=getPluginConfig();
  isEnabled=subConfig.getBooleanProperty(FolderWatchConstants.PROPERTY_ENABLED,false);
  folder=subConfig.getStringProperty(FolderWatchConstants.PROPERTY_FOLDER,""String_Node_Str"");
  isAutoDelete=subConfig.getBooleanProperty(FolderWatchConstants.PROPERTY_AUTODELETE,false);
  History.setEntries(getHistoryEntriesFromConfig());
  historyCleanup(null);
  initConfig();
}"
20724,"private void historyCleanup(){
  History.updateEntries();
  subConfig.setProperty(FolderWatchConstants.PROPERTY_HISTORY,History.getEntries());
  subConfig.save();
  if (historyGui != null)   historyGui.refresh();
}","private void historyCleanup(String filename){
  if (filename == null)   History.updateEntries();
 else   History.updateEntry(filename);
  subConfig.setProperty(FolderWatchConstants.PROPERTY_HISTORY,History.getEntries());
  subConfig.save();
  if (historyGui != null)   historyGui.refresh();
}"
20725,"public void onPreSave(SubConfiguration subConfiguration){
  folderOld=folder;
}","public void onPreSave(SubConfiguration subConfiguration){
  folderOld=folder;
  isAutoDeleteOld=isAutoDelete;
}"
20726,"public static void updateEntries(){
  boolean value;
  for (  HistoryEntry entry : entries) {
    value=isFileExisting(entry.getAbsolutePath());
    entry.setExisting(value);
  }
}","public static void updateEntries(){
  for (  HistoryEntry entry : entries) {
    updateEntry(entry);
  }
}"
20727,"public void handle(){
  final String request=this.headers.get(null);
  final String[] requ=request.split(""String_Node_Str"");
  final String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  final HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      final int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=Formatter.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else {
        requestParameter.put(key,value);
      }
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=Formatter.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0) {
          setspeed=0;
        }
        SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=Formatter.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1) {
          maxdls=1;
        }
        if (maxdls > 20) {
          maxdls=20;
        }
        SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (!requestParameter.containsKey(""String_Node_Str"")) {
        if (requestParameter.containsKey(""String_Node_Str"")) {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,true);
        }
 else {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,false);
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (LinkGrabberController.ControllerLock) {
synchronized (this.lgi.getPackages()) {
            Integer download_id=0;
            Integer package_id=0;
            String[] ids;
            final int counter_max=Formatter.filterInt(requestParameter.get(""String_Node_Str""));
            int counter_index=0;
            DownloadLink link;
            ArrayList<DownloadLink> links=new ArrayList<DownloadLink>();
            final ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
            for (counter_index=1; counter_index <= counter_max; counter_index++) {
              if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
                ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
                package_id=Formatter.filterInt(ids[0].toString());
                download_id=Formatter.filterInt(ids[1].toString());
                links.add(this.lgi.getPackages().get(package_id).get(download_id));
                if (!packages.contains(this.lgi.getPackages().get(package_id))) {
                  packages.add(this.lgi.getPackages().get(package_id));
                }
              }
            }
            if (requestParameter.containsKey(""String_Node_Str"")) {
              final String dowhat=requestParameter.get(""String_Node_Str"");
              for (int i=0; i < this.lgi.getPackages().size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  this.lgi.getPackages().get(i).setName(Encoding.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
              if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
                for (                final LinkGrabberFilePackage fp : packages) {
                  fp.remove(links);
                }
              }
 else               if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
                links=new ArrayList<DownloadLink>();
                for (int i=0; i < this.lgi.getPackages().size(); i++) {
                  for (int ii=0; ii < this.lgi.getPackages().get(i).size(); ii++) {
                    links.add(this.lgi.getPackages().get(i).get(ii));
                  }
                }
                for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                  link=it.next();
                  if (link.isAvailabilityStatusChecked() == true && link.isAvailable() == false) {
                    link.getFilePackage().remove(link);
                  }
                }
              }
 else               if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
                for (                final LinkGrabberFilePackage fp : packages) {
                  LinkGrabberPanel.getLinkGrabber().confirmPackage(fp,null,-1);
                }
              }
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        final int counter_max=Formatter.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        final ArrayList<DownloadLink> links=new ArrayList<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=Formatter.filterInt(ids[0].toString());
            download_id=Formatter.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinkList().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          final String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            DownloadController.getInstance().fireGlobalUpdate();
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            DownloadController.getInstance().fireGlobalUpdate();
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.getLinkStatus().setStatus(LinkStatus.TODO);
              link.getLinkStatus().setStatusText(""String_Node_Str"");
              link.reset();
            }
            DownloadController.getInstance().fireGlobalUpdate();
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (            final DownloadLink dl : links) {
              dl.getFilePackage().remove(dl);
            }
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            DownloadController.getInstance().fireGlobalUpdate();
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      new Thread(new Runnable(){
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          final InterruptedException e) {
            JDLogger.exception(e);
          }
          if (Reconnecter.getInstance().forceReconnect()) {
            JDSimpleWebserverRequestHandler.this.logger.info(""String_Node_Str"");
          }
 else {
            JDSimpleWebserverRequestHandler.this.logger.info(""String_Node_Str"");
          }
        }
      }
).start();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      new Thread(new Runnable(){
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          final InterruptedException e) {
            JDLogger.exception(e);
          }
          JDUtilities.getController().exit();
        }
      }
).start();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      DownloadWatchDog.getInstance().startDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      DownloadWatchDog.getInstance().stopDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      new Thread(new Runnable(){
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          final InterruptedException e) {
            JDLogger.exception(e);
          }
          JDUtilities.restartJD(false);
        }
      }
).start();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        final String AddLinks=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        final ArrayList<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        LinkGrabberPanel.getLinkGrabber().addLinks(waitingLinkList);
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        final File container=JDUtilities.getResourceFile(""String_Node_Str"" + requestParameter.get(""String_Node_Str""));
        final ArrayList<DownloadLink> waitingLinkList=JDUtilities.getController().getContainerLinks(container);
        LinkGrabberPanel.getLinkGrabber().addLinks(waitingLinkList);
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        final String passwordList=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        final ArrayList<String> pws=new ArrayList<String>();
        for (        final String pw : org.appwork.utils.Regex.getLines(passwordList)) {
          pws.add(0,pw);
        }
        PasswordListController.getInstance().setPasswordList(pws);
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    final String tempurl=url + ""String_Node_Str"";
    final File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    this.response.setNotFound(url);
  }
 else {
    if (url.endsWith(""String_Node_Str"")) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(this.headers,this.response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}","public void handle(){
  final String request=this.headers.get(null);
  final String[] requ=request.split(""String_Node_Str"");
  final String cPath=requ[1];
  String path, querry;
  path=cPath.substring(1);
  String[] params;
  final HashMap<String,String> requestParameter=new HashMap<String,String>();
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  requestParameter.put(""String_Node_Str"",""String_Node_Str"");
  if (cPath.indexOf(""String_Node_Str"") >= 0) {
    querry=cPath.substring(cPath.indexOf(""String_Node_Str"") + 1);
    path=cPath.substring(1,cPath.indexOf(""String_Node_Str""));
    params=querry.split(""String_Node_Str"");
    for (    String entry : params) {
      entry=entry.trim();
      final int index=entry.indexOf(""String_Node_Str"");
      String key=entry;
      String value=null;
      if (index >= 0) {
        key=entry.substring(0,index);
        value=entry.substring(index + 1);
      }
      if (requestParameter.containsKey(key) || requestParameter.containsKey(key + ""String_Node_Str"")) {
        if (requestParameter.containsKey(key + ""String_Node_Str"")) {
          Integer keycounter=0;
          keycounter=Formatter.filterInt(requestParameter.get(key + ""String_Node_Str""));
          keycounter++;
          requestParameter.put(key + ""String_Node_Str"",keycounter.toString());
          requestParameter.put(key + ""String_Node_Str"" + keycounter.toString(),value);
        }
      }
 else {
        requestParameter.put(key,value);
      }
    }
  }
  String url=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int setspeed=Formatter.filterInt(requestParameter.get(""String_Node_Str""));
        if (setspeed < 0) {
          setspeed=0;
        }
        SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,setspeed);
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        int maxdls=Formatter.filterInt(requestParameter.get(""String_Node_Str""));
        if (maxdls < 1) {
          maxdls=1;
        }
        if (maxdls > 20) {
          maxdls=20;
        }
        SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,maxdls);
      }
      if (!requestParameter.containsKey(""String_Node_Str"")) {
        if (requestParameter.containsKey(""String_Node_Str"")) {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,true);
        }
 else {
          JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,false);
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
synchronized (LinkGrabberController.ControllerLock) {
synchronized (this.lgi.getPackages()) {
            Integer download_id=0;
            Integer package_id=0;
            String[] ids;
            final int counter_max=Formatter.filterInt(requestParameter.get(""String_Node_Str""));
            int counter_index=0;
            DownloadLink link;
            ArrayList<DownloadLink> links=new ArrayList<DownloadLink>();
            final ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
            for (counter_index=1; counter_index <= counter_max; counter_index++) {
              if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
                ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
                package_id=Formatter.filterInt(ids[0].toString());
                download_id=Formatter.filterInt(ids[1].toString());
                links.add(this.lgi.getPackages().get(package_id).get(download_id));
                if (!packages.contains(this.lgi.getPackages().get(package_id))) {
                  packages.add(this.lgi.getPackages().get(package_id));
                }
              }
            }
            if (requestParameter.containsKey(""String_Node_Str"")) {
              final String dowhat=requestParameter.get(""String_Node_Str"");
              for (int i=0; i < this.lgi.getPackages().size(); i++) {
                if (requestParameter.containsKey(""String_Node_Str"" + i)) {
                  this.lgi.getPackages().get(i).setName(Encoding.htmlDecode(requestParameter.get(""String_Node_Str"" + i).toString()));
                }
              }
              if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
                for (                final LinkGrabberFilePackage fp : packages) {
                  fp.remove(links);
                }
              }
 else               if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
                links=new ArrayList<DownloadLink>();
                for (int i=0; i < this.lgi.getPackages().size(); i++) {
                  for (int ii=0; ii < this.lgi.getPackages().get(i).size(); ii++) {
                    links.add(this.lgi.getPackages().get(i).get(ii));
                  }
                }
                for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
                  link=it.next();
                  if (link.isAvailabilityStatusChecked() == true && link.isAvailable() == false) {
                    link.getFilePackage().remove(link);
                  }
                }
              }
 else               if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
                for (                final LinkGrabberFilePackage fp : packages) {
                  LinkGrabberPanel.getLinkGrabber().confirmPackage(fp,null,-1);
                }
              }
            }
          }
        }
      }
      if (requestParameter.containsKey(""String_Node_Str"")) {
        Integer download_id=0;
        Integer package_id=0;
        String[] ids;
        final int counter_max=Formatter.filterInt(requestParameter.get(""String_Node_Str""));
        int counter_index=0;
        DownloadLink link;
        final ArrayList<DownloadLink> links=new ArrayList<DownloadLink>();
        for (counter_index=1; counter_index <= counter_max; counter_index++) {
          if (requestParameter.containsKey(""String_Node_Str"" + counter_index)) {
            ids=requestParameter.get(""String_Node_Str"" + counter_index).toString().split(""String_Node_Str"",2);
            package_id=Formatter.filterInt(ids[0].toString());
            download_id=Formatter.filterInt(ids[1].toString());
            links.add(JDUtilities.getController().getPackages().get(package_id).getDownloadLinkList().get(download_id));
          }
        }
        if (requestParameter.containsKey(""String_Node_Str"")) {
          final String dowhat=requestParameter.get(""String_Node_Str"");
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(true);
            }
            DownloadController.getInstance().fireGlobalUpdate();
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setEnabled(false);
            }
            DownloadController.getInstance().fireGlobalUpdate();
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.getLinkStatus().setStatus(LinkStatus.TODO);
              link.getLinkStatus().setStatusText(""String_Node_Str"");
              link.reset();
            }
            DownloadController.getInstance().fireGlobalUpdate();
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (            final DownloadLink dl : links) {
              dl.getFilePackage().remove(dl);
            }
          }
          if (dowhat.compareToIgnoreCase(""String_Node_Str"") == 0) {
            for (final Iterator<DownloadLink> it=links.iterator(); it.hasNext(); ) {
              link=it.next();
              link.setAborted(true);
            }
            DownloadController.getInstance().fireGlobalUpdate();
          }
        }
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      new Thread(new Runnable(){
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          final InterruptedException e) {
            JDLogger.exception(e);
          }
          if (Reconnecter.getInstance().forceReconnect()) {
            JDSimpleWebserverRequestHandler.this.logger.info(""String_Node_Str"");
          }
 else {
            JDSimpleWebserverRequestHandler.this.logger.info(""String_Node_Str"");
          }
        }
      }
).start();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      new Thread(new Runnable(){
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          final InterruptedException e) {
            JDLogger.exception(e);
          }
          JDUtilities.getController().exit();
        }
      }
).start();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      DownloadWatchDog.getInstance().startDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      DownloadWatchDog.getInstance().stopDownloads();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      new Thread(new Runnable(){
        public void run(){
          try {
            Thread.sleep(2000);
          }
 catch (          final InterruptedException e) {
            JDLogger.exception(e);
          }
          JDUtilities.restartJD(false);
        }
      }
).start();
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        final String AddLinks=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        final ArrayList<DownloadLink> waitingLinkList=new DistributeData(AddLinks).findLinks();
        LinkGrabberPanel.getLinkGrabber().addLinks(waitingLinkList);
      }
    }
 else     if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        final File container=JDUtilities.getResourceFile(""String_Node_Str"" + requestParameter.get(""String_Node_Str""));
        final ArrayList<DownloadLink> waitingLinkList=JDUtilities.getController().getContainerLinks(container);
        LinkGrabberPanel.getLinkGrabber().addLinks(waitingLinkList);
      }
    }
  }
  if (requestParameter.containsKey(""String_Node_Str"")) {
    if (requestParameter.get(""String_Node_Str"").compareToIgnoreCase(""String_Node_Str"") == 0) {
      if (requestParameter.containsKey(""String_Node_Str"")) {
        final String passwordList=Encoding.htmlDecode(requestParameter.get(""String_Node_Str""));
        final ArrayList<String> pws=new ArrayList<String>();
        for (        final String pw : org.appwork.utils.Regex.getLines(passwordList)) {
          pws.add(0,pw);
        }
        PasswordListController.getInstance().setPasswordList(pws);
      }
    }
  }
  File fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
  if (!fileToRead.isFile()) {
    final String tempurl=url + ""String_Node_Str"";
    final File fileToRead2=JDUtilities.getResourceFile(""String_Node_Str"" + tempurl);
    if (fileToRead2.isFile()) {
      url=tempurl;
      fileToRead=JDUtilities.getResourceFile(""String_Node_Str"" + url);
    }
  }
  if (!fileToRead.exists()) {
    this.response.setNotFound(url);
  }
 else {
    if (new Regex(url,""String_Node_Str"").matches()) {
      JDSimpleWebserverTemplateFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverTemplateFileRequestHandler(this.response);
      filerequest.handleRequest(url,requestParameter);
    }
 else {
      JDSimpleWebserverStaticFileRequestHandler filerequest;
      filerequest=new JDSimpleWebserverStaticFileRequestHandler(this.headers,this.response);
      filerequest.handleRequest(url,requestParameter);
    }
  }
}"
20728,"@SuppressWarnings(""String_Node_Str"") public void handleRequest(String url,HashMap<String,String> requestParameter){
  try {
    Template t=new Template(JDUtilities.getResourceFile(""String_Node_Str"" + url).getAbsolutePath());
    t.setParam(""String_Node_Str"",JDWebinterface.instance.getPluginID());
    t.setParam(""String_Node_Str"",JDWebinterface.getRefreshRate());
    boolean hasUnrar=false;
    OptionalPluginWrapper wrapper=JDUtilities.getOptionalPlugin(""String_Node_Str"");
    if (wrapper != null && wrapper.isEnabled())     hasUnrar=true;
    t.setParam(""String_Node_Str"",hasUnrar ? ""String_Node_Str"" : ""String_Node_Str"");
    if (url.startsWith(""String_Node_Str"") == true) {
      add_single_info(t,requestParameter);
    }
    if (url.startsWith(""String_Node_Str"") == true) {
      add_all_info(t,requestParameter);
    }
    if (url.startsWith(""String_Node_Str"") == true) {
      add_status_page(t,requestParameter);
    }
    if (url.startsWith(""String_Node_Str"") == true) {
      add_password_list(t,requestParameter);
    }
    if (url.startsWith(""String_Node_Str"") == true) {
      add_linkadder_page(t,requestParameter);
    }
    response.addContent(t.output());
    response.setOk();
  }
 catch (  FileNotFoundException e) {
    JDLogger.exception(e);
  }
catch (  IllegalStateException e) {
    JDLogger.exception(e);
  }
catch (  IOException e) {
    JDLogger.exception(e);
  }
}","@SuppressWarnings(""String_Node_Str"") public void handleRequest(String url,HashMap<String,String> requestParameter){
  try {
    url=new Regex(url,""String_Node_Str"").getMatch(0);
    Template t=new Template(JDUtilities.getResourceFile(""String_Node_Str"" + url).getAbsolutePath());
    t.setParam(""String_Node_Str"",JDWebinterface.instance.getPluginID());
    t.setParam(""String_Node_Str"",JDWebinterface.getRefreshRate());
    boolean hasUnrar=false;
    OptionalPluginWrapper wrapper=JDUtilities.getOptionalPlugin(""String_Node_Str"");
    if (wrapper != null && wrapper.isEnabled())     hasUnrar=true;
    t.setParam(""String_Node_Str"",hasUnrar ? ""String_Node_Str"" : ""String_Node_Str"");
    if (url.startsWith(""String_Node_Str"") == true) {
      add_single_info(t,requestParameter);
    }
    if (url.startsWith(""String_Node_Str"") == true) {
      add_all_info(t,requestParameter);
    }
    if (url.startsWith(""String_Node_Str"") == true) {
      add_status_page(t,requestParameter);
    }
    if (url.startsWith(""String_Node_Str"") == true) {
      add_password_list(t,requestParameter);
    }
    if (url.startsWith(""String_Node_Str"") == true) {
      add_linkadder_page(t,requestParameter);
    }
    response.addContent(t.output());
    response.setOk();
  }
 catch (  FileNotFoundException e) {
    JDLogger.exception(e);
  }
catch (  IllegalStateException e) {
    JDLogger.exception(e);
  }
catch (  IOException e) {
    JDLogger.exception(e);
  }
}"
20729,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  br.setFollowRedirects(true);
  String linkurl=null;
  requestFileInformation(downloadLink);
  br.setDebug(true);
  Form profidown=br.getFormBySubmitvalue(""String_Node_Str"");
  if (profidown == null)   br.getFormbyProperty(""String_Node_Str"",Encoding.urlEncode(""String_Node_Str""));
  if (profidown == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String id=br.getRegex(""String_Node_Str"").getMatch(0);
  if (id == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  login(account);
  checkPremiumIP();
  br.getPage(""String_Node_Str"");
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  for (  String link : links) {
    if (link.contains(""String_Node_Str"" + id)) {
      linkurl=link;
      break;
    }
  }
  if (linkurl == null) {
    requestFileInformation(downloadLink);
    profidown=br.getFormBySubmitvalue(""String_Node_Str"");
    if (profidown == null)     br.getFormbyProperty(""String_Node_Str"",Encoding.urlEncode(""String_Node_Str""));
    if (profidown == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    id=br.getRegex(""String_Node_Str"").getMatch(0);
    if (id == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    br.submitForm(profidown);
    Form login=br.getForm(0);
    login.put(""String_Node_Str"",Encoding.urlEncode(account.getUser()));
    login.put(""String_Node_Str"",Encoding.urlEncode(account.getPass()));
    login.put(""String_Node_Str"",""String_Node_Str"");
    br.submitForm(login);
    links=br.getRegex(""String_Node_Str"").getColumn(0);
    for (    String link : links) {
      if (link.contains(""String_Node_Str"" + id + ""String_Node_Str"")) {
        linkurl=link;
        break;
      }
      if (link.contains(""String_Node_Str"" + id + ""String_Node_Str"")) {
        linkurl=null;
        br.setFollowRedirects(false);
        br.getPage(link);
        linkurl=br.getRedirectLocation();
        if (linkurl == null)         linkurl=link;
        br.setFollowRedirects(true);
        break;
      }
    }
  }
  if (linkurl == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,linkurl,true,0);
  URLConnectionAdapter con=dl.getConnection();
  if (!con.isOK()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_PREMIUM);
  }
  dl.startDownload();
  if (downloadLink.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
    String kod=new Regex(linkurl,""String_Node_Str"").getMatch(0);
    if (kod != null)     br.postPage(""String_Node_Str"",""String_Node_Str"" + kod);
  }
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  br.setFollowRedirects(true);
  requestFileInformation(downloadLink);
  login(account);
  checkPremiumIP();
  br.getPage(downloadLink.getDownloadURL());
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (!con.isOK()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_PREMIUM);
  }
  dl.startDownload();
}"
20730,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,15 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  int waittime=0;
  if (wait != null)   waittime=Integer.parseInt(wait.trim());
  if (waittime > 90 && (longwait == null || longwait == true)) {
    longwait=true;
    sleep(waittime * 1000l,downloadLink);
  }
 else {
    if (longwait == null)     longwait=false;
    if (waittime > 90 && longwait == false) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waittime * 1000l);
    }
 else {
      if (br.getRegex(""String_Node_Str"").getMatch(0) == null) {
        sleep(waittime * 1000l,downloadLink);
      }
    }
  }
  String id=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  if (id == null)   br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,15 * 60 * 1000l);
  int tries=0;
  while (true) {
    tries++;
    id=br.getRegex(""String_Node_Str"").getMatch(0);
    if (id == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    Browser rcBr=br.cloneBrowser();
    rcBr.setFollowRedirects(true);
    rcBr.getPage(""String_Node_Str"" + id);
    String challenge=rcBr.getRegex(""String_Node_Str"").getMatch(0);
    String server=rcBr.getRegex(""String_Node_Str"").getMatch(0);
    if (challenge == null || server == null) {
      logger.severe(""String_Node_Str"" + br.getHttpConnection());
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String captchaAddress=server + ""String_Node_Str"" + challenge;
    File cf=getLocalCaptchaFile();
    Browser.download(cf,rcBr.openGetConnection(captchaAddress));
    Form form=null;
    Form[] allForms=br.getForms();
    if (allForms == null || allForms.length == 0)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    for (    Form singleForm : allForms)     if (singleForm.containsHTML(""String_Node_Str"") && !singleForm.containsHTML(""String_Node_Str"")) {
      form=singleForm;
      break;
    }
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    String code=getCaptchaCode(""String_Node_Str"",cf,downloadLink);
    form.put(""String_Node_Str"",challenge);
    form.put(""String_Node_Str"",Encoding.urlEncode(code));
    br.setFollowRedirects(true);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,true,1);
    if (!dl.getConnection().isContentDisposition()) {
      br.followConnection();
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,15 * 60 * 1000l);
      if (br.containsHTML(""String_Node_Str"")) {
        if (tries <= 5) {
          continue;
        }
 else {
          throw new PluginException(LinkStatus.ERROR_CAPTCHA);
        }
      }
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    break;
  }
  downloadLink.setFinalFileName(Encoding.htmlDecode(getFileNameFromHeader(dl.getConnection())));
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  URLConnectionAdapter con=br.openGetConnection(downloadLink.getDownloadURL());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (con.getResponseCode() == 503)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  br.followConnection();
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,15 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  int waittime=0;
  if (wait != null)   waittime=Integer.parseInt(wait.trim());
  if (waittime > 90 && (longwait == null || longwait == true)) {
    longwait=true;
    sleep(waittime * 1000l,downloadLink);
  }
 else {
    if (longwait == null)     longwait=false;
    if (waittime > 90 && longwait == false) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,waittime * 1000l);
    }
 else {
      if (br.getRegex(""String_Node_Str"").getMatch(0) == null) {
        sleep(waittime * 1000l,downloadLink);
      }
    }
  }
  String id=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  if (id == null)   br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,15 * 60 * 1000l);
  int tries=0;
  while (true) {
    tries++;
    id=br.getRegex(""String_Node_Str"").getMatch(0);
    if (id == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    Browser rcBr=br.cloneBrowser();
    rcBr.setFollowRedirects(true);
    rcBr.getPage(""String_Node_Str"" + id);
    String challenge=rcBr.getRegex(""String_Node_Str"").getMatch(0);
    String server=rcBr.getRegex(""String_Node_Str"").getMatch(0);
    if (challenge == null || server == null) {
      logger.severe(""String_Node_Str"" + br.getHttpConnection());
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String captchaAddress=server + ""String_Node_Str"" + challenge;
    File cf=getLocalCaptchaFile();
    Browser.download(cf,rcBr.openGetConnection(captchaAddress));
    Form form=null;
    Form[] allForms=br.getForms();
    if (allForms == null || allForms.length == 0)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    for (    Form singleForm : allForms)     if (singleForm.containsHTML(""String_Node_Str"") && !singleForm.containsHTML(""String_Node_Str"")) {
      form=singleForm;
      break;
    }
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    String code=getCaptchaCode(""String_Node_Str"",cf,downloadLink);
    form.put(""String_Node_Str"",challenge);
    form.put(""String_Node_Str"",Encoding.urlEncode(code));
    br.setFollowRedirects(true);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,true,1);
    if (!dl.getConnection().isContentDisposition()) {
      br.followConnection();
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,15 * 60 * 1000l);
      if (br.containsHTML(""String_Node_Str"")) {
        if (tries <= 5) {
          continue;
        }
 else {
          throw new PluginException(LinkStatus.ERROR_CAPTCHA);
        }
      }
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    break;
  }
  downloadLink.setFinalFileName(Encoding.htmlDecode(getFileNameFromHeader(dl.getConnection())));
  dl.startDownload();
}"
20731,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  URLConnectionAdapter con=br.openGetConnection(downloadLink.getDownloadURL());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (con.getResponseCode() == 503)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  br.followConnection();
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
  String filename=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL | Pattern.CASE_INSENSITIVE)).getMatch(0);
  String filesize=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL | Pattern.CASE_INSENSITIVE)).getMatch(1);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + fileID);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL | Pattern.CASE_INSENSITIVE)).getMatch(0);
  String filesize=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL | Pattern.CASE_INSENSITIVE)).getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  downloadLink.setName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize + ""String_Node_Str""));
  return AvailableStatus.TRUE;
}"
20732,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.getPage(""String_Node_Str"");
  br.setFollowRedirects(false);
  br.getPage(downloadLink.getDownloadURL());
  String url=null;
  if (br.getRedirectLocation() == null) {
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
 else {
    url=br.getRedirectLocation();
  }
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.getPage(""String_Node_Str"");
  br.setFollowRedirects(false);
  URLConnectionAdapter con=br.openGetConnection(downloadLink.getDownloadURL());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (con.getResponseCode() == 503)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  br.followConnection();
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String url=null;
  if (br.getRedirectLocation() == null) {
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
 else {
    url=br.getRedirectLocation();
  }
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20733,"public FileMenu(){
  super(JDL.L(""String_Node_Str"",""String_Node_Str""));
  add(new SaveMenu());
  addSeparator();
  add(new SettingsAction());
  addSeparator();
  add(new RestoreAction());
  add(new RestartAction());
  if (!OSDetector.isMac()) {
    add(new ExitAction());
  }
}","public FileMenu(){
  super(JDL.L(""String_Node_Str"",""String_Node_Str""));
  add(new SaveMenu());
  addSeparator();
  add(new SettingsAction());
  addSeparator();
  add(new RestoreAction());
  add(new RestartAction());
  JMenuItem exitItem=add(new ExitAction());
  if (OSDetector.isMac()) {
    exitItem.setVisible(false);
  }
}"
20734,"/** 
 * Requests a FileChooserDialog.
 * @param id ID of the dialog (used to save and restore the old directory)
 * @param title dialog-title or null for default
 * @param fileSelectionMode mode for selecting files (like  {@link UserIO#FILES_ONLY}) or null for default
 * @param fileFilter filters the choosable files or null for default
 * @param multiSelection multible files choosable? or null for default
 * @param startDirectory the start directory
 * @param dialogType mode for the dialog type (like  {@link UserIO#OPEN_DIALOG}) or null for default
 * @return an array of files or null if the user cancel the dialog
 */
public File[] requestFileChooser(final String id,final String title,final Integer fileSelectionMode,final FileFilter fileFilter,final Boolean multiSelection,final File startDirectory,final Integer dialogType){
  return Dialog.getInstance().showFileChooser(id,title,fileSelectionMode,fileFilter,multiSelection == null ? false : multiSelection,dialogType,null);
}","/** 
 * Requests a FileChooserDialog.
 * @param id ID of the dialog (used to save and restore the old directory)
 * @param title dialog-title or null for default
 * @param fileSelectionMode mode for selecting files (like  {@link UserIO#FILES_ONLY}) or null for default
 * @param fileFilter filters the choosable files or null for default
 * @param multiSelection multible files choosable? or null for default
 * @param startDirectory the start directory
 * @param dialogType mode for the dialog type (like  {@link UserIO#OPEN_DIALOG}) or null for default
 * @return an array of files or null if the user cancel the dialog
 */
public File[] requestFileChooser(final String id,final String title,final Integer fileSelectionMode,final FileFilter fileFilter,final Boolean multiSelection,final File startDirectory,final Integer dialogType){
  return Dialog.getInstance().showFileChooser(id,title,fileSelectionMode == null ? -1 : fileSelectionMode,fileFilter,multiSelection == null ? false : multiSelection,dialogType == null ? -1 : dialogType,null);
}"
20735,"/** 
 * Als Dummy wird ein downloadlink bezeicnet, der nicht ind er downloadliste war, sondern nur angelegt wurde um als container für ein externes archiv zu dienen. Zur Fortschrittsanzeige wird ein progresscontroller verwendet
 * @param id
 * @param controller
 */
private void onExtractionDummyEvent(int id,ExtractionController controller){
  ProgressController pc=controller.getProgressController();
switch (id) {
case ExtractionConstants.WRAPPER_STARTED:
    pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
  break;
case ExtractionConstants.INVALID_BINARY:
logger.severe(""String_Node_Str"");
this.getPluginConfig().setProperty(ExtractionConstants.CONFIG_KEY_UNRARCOMMAND,null);
this.getPluginConfig().setProperty(ExtractionConstants.UNRAR_HASH,null);
this.getPluginConfig().save();
controller.getArchiv().setActive(false);
break;
case ExtractionConstants.WRAPPER_EXTRACTION_FAILED:
if (controller.getException() != null) {
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ controller.getException().getMessage());
}
 else {
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
}
controller.getArchiv().setActive(false);
this.onFinished(controller);
break;
case ExtractionConstants.WRAPPER_PASSWORD_NEEDED_TO_CONTINUE:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
if (this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,true)) {
String pass=UserIO.getInstance().requestInputDialog(0,JDL.LF(""String_Node_Str"",""String_Node_Str"",controller.getArchiv().getFirstDownloadLink().getName()),null);
if (pass == null || pass.length() == 0) {
this.onFinished(controller);
break;
}
controller.getArchiv().setPassword(pass);
}
break;
case ExtractionConstants.WRAPPER_PASSWORT_CRACKING:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
pc.setRange(controller.getPasswordList().size());
pc.setStatus(controller.getCrackProgress());
break;
case ExtractionConstants.WRAPPER_START_OPEN_ARCHIVE:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
break;
case ExtractionConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
assignRealDownloadDir(controller);
break;
case ExtractionConstants.WRAPPER_PASSWORD_FOUND:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
break;
case ExtractionConstants.WRAPPER_ON_PROGRESS:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
pc.setRange(controller.getArchiv().getSize());
pc.setStatus(controller.getArchiv().getExtracted());
break;
case ExtractionConstants.WRAPPER_EXTRACTION_FAILED_CRC:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
controller.getArchiv().setActive(false);
this.onFinished(controller);
break;
case ExtractionConstants.WRAPPER_FINISHED_SUCCESSFULL:
File[] files=new File[controller.getPostProcessingFiles().size()];
int i=0;
for (String f : controller.getPostProcessingFiles()) {
files[i++]=new File(f);
}
JDUtilities.getController().fireControlEvent(new ControlEvent(wrapper,ControlEvent.CONTROL_ON_FILEOUTPUT,files));
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
if (this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_REMOVE_INFO_FILE,false)) {
File fileOutput=new File(controller.getArchiv().getFirstDownloadLink().getFileOutput());
File infoFiles=new File(fileOutput.getParentFile(),fileOutput.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
if (infoFiles.exists() && infoFiles.delete()) {
logger.info(infoFiles.getName() + ""String_Node_Str"");
}
}
controller.getArchiv().setActive(false);
this.onFinished(controller);
break;
}
}","/** 
 * Als Dummy wird ein downloadlink bezeicnet, der nicht ind er downloadliste war, sondern nur angelegt wurde um als container für ein externes archiv zu dienen. Zur Fortschrittsanzeige wird ein progresscontroller verwendet
 * @param id
 * @param controller
 */
private void onExtractionDummyEvent(int id,ExtractionController controller){
  ProgressController pc=controller.getProgressController();
switch (id) {
case ExtractionConstants.WRAPPER_STARTED:
    pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
  break;
case ExtractionConstants.INVALID_BINARY:
logger.severe(""String_Node_Str"");
this.getPluginConfig().setProperty(ExtractionConstants.CONFIG_KEY_UNRARCOMMAND,null);
this.getPluginConfig().setProperty(ExtractionConstants.UNRAR_HASH,null);
this.getPluginConfig().save();
controller.getArchiv().setActive(false);
break;
case ExtractionConstants.WRAPPER_EXTRACTION_FAILED:
if (controller.getException() != null) {
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ controller.getException().getMessage());
}
 else {
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
}
controller.getArchiv().setActive(false);
this.onFinished(controller);
break;
case ExtractionConstants.WRAPPER_PASSWORD_NEEDED_TO_CONTINUE:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
if (this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,true)) {
String pass=UserIO.getInstance().requestInputDialog(0,JDL.LF(""String_Node_Str"",""String_Node_Str"",controller.getArchiv().getFirstDownloadLink().getName()),null);
if (pass == null || pass.length() == 0) {
this.onFinished(controller);
break;
}
controller.getArchiv().setPassword(pass);
}
break;
case ExtractionConstants.WRAPPER_PASSWORT_CRACKING:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
pc.setRange(controller.getPasswordList().size());
pc.setStatus(controller.getCrackProgress());
break;
case ExtractionConstants.WRAPPER_START_OPEN_ARCHIVE:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
break;
case ExtractionConstants.WRAPPER_OPEN_ARCHIVE_SUCCESS:
assignRealDownloadDir(controller);
break;
case ExtractionConstants.WRAPPER_PASSWORD_FOUND:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
break;
case ExtractionConstants.WRAPPER_ON_PROGRESS:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
pc.setRange(controller.getArchiv().getSize());
pc.setStatus(controller.getArchiv().getExtracted());
break;
case ExtractionConstants.WRAPPER_EXTRACTION_FAILED_CRC:
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
controller.getArchiv().setActive(false);
this.onFinished(controller);
break;
case ExtractionConstants.WRAPPER_FINISHED_SUCCESSFULL:
File[] files=new File[controller.getPostProcessingFiles().size()];
int i=0;
for (String f : controller.getPostProcessingFiles()) {
files[i++]=new File(f);
}
JDUtilities.getController().fireControlEvent(new ControlEvent(wrapper,ControlEvent.CONTROL_ON_FILEOUTPUT,files));
pc.setStatusText(controller.getArchiv().getFirstDownloadLink().getFileOutput() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
if (this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_REMOVE_INFO_FILE,false)) {
File fileOutput=new File(controller.getArchiv().getFirstDownloadLink().getFileOutput());
File infoFiles=new File(fileOutput.getParentFile(),fileOutput.getName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
if (infoFiles.exists() && infoFiles.delete()) {
logger.info(infoFiles.getName() + ""String_Node_Str"");
}
}
controller.getArchiv().setActive(false);
this.onFinished(controller);
break;
case ExtractionConstants.NOT_ENOUGH_SPACE:
for (DownloadLink link : controller.getArchiv().getDownloadLinks()) {
if (link == null) continue;
link.getLinkStatus().setStatus(LinkStatus.FINISHED);
link.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
link.requestGuiUpdate();
}
this.onFinished(controller);
break;
}
}"
20736,"public boolean prepare(){
  try {
    if (archive.getFirstDownloadLink().getHost().equals(DUMMY_HOSTER)) {
      Archive a=buildArchive(archive.getFirstDownloadLink());
      archive.setDownloadLinks(a.getDownloadLinks());
      archive.setType(a.getType());
    }
    if (archive.getType() == Archive.SINGLE_FILE) {
      if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.RAR;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.SEVEN_ZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.ZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.GZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.BZIP2;
      }
      inArchive=SevenZip.openInArchive(format,new RandomAccessFileInStream(new RandomAccessFile(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"")));
    }
 else     if (archive.getType() == Archive.MULTI) {
      MultiOpener multiopener=new MultiOpener();
      inArchive=SevenZip.openInArchive(ArchiveFormat.SEVEN_ZIP,new VolumedArchiveInStream(archive.getFirstDownloadLink().getFileOutput(),multiopener));
    }
 else     if (archive.getType() == Archive.MULTI_RAR) {
      RarOpener raropener=new RarOpener();
      IInStream inStream=raropener.getStream(archive.getFirstDownloadLink().getFileOutput());
      inArchive=SevenZip.openInArchive(ArchiveFormat.RAR,inStream,raropener);
    }
 else {
      return false;
    }
    long size=0;
    int numberOfFiles=0;
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      if (item.getPath().trim().equals(""String_Node_Str""))       continue;
      if (item.isEncrypted()) {
        archive.setProtected(true);
      }
      size+=item.getSize();
      if (item.getSize() > 0) {
        numberOfFiles++;
      }
    }
    archive.setSize(size);
    archive.setNumberOfFiles(numberOfFiles);
  }
 catch (  SevenZipException e) {
    archive.setProtected(true);
    return true;
  }
catch (  Exception e) {
    return false;
  }
  return true;
}","public boolean prepare(){
  try {
    if (archive.getFirstDownloadLink().getHost().equals(DUMMY_HOSTER)) {
      Archive a=buildArchive(archive.getFirstDownloadLink());
      archive.setDownloadLinks(a.getDownloadLinks());
      archive.setType(a.getType());
    }
    if (archive.getType() == Archive.SINGLE_FILE) {
      if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.RAR;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.SEVEN_ZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.ZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.GZIP;
      }
 else       if (new Regex(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"",Pattern.CASE_INSENSITIVE).matches()) {
        format=ArchiveFormat.BZIP2;
      }
      stream=new RandomAccessFileInStream(new RandomAccessFile(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str""));
      inArchive=SevenZip.openInArchive(format,stream);
    }
 else     if (archive.getType() == Archive.MULTI) {
      multiopener=new MultiOpener();
      IInStream inStream=new VolumedArchiveInStream(archive.getFirstDownloadLink().getFileOutput(),multiopener);
      inArchive=SevenZip.openInArchive(ArchiveFormat.SEVEN_ZIP,inStream);
    }
 else     if (archive.getType() == Archive.MULTI_RAR) {
      raropener=new RarOpener();
      IInStream inStream=raropener.getStream(archive.getFirstDownloadLink().getFileOutput());
      inArchive=SevenZip.openInArchive(ArchiveFormat.RAR,inStream,raropener);
    }
 else {
      return false;
    }
    long size=0;
    int numberOfFiles=0;
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      if (item.getPath().trim().equals(""String_Node_Str""))       continue;
      if (item.isEncrypted()) {
        archive.setProtected(true);
      }
      size+=item.getSize();
      if (item.getSize() > 0) {
        numberOfFiles++;
      }
    }
    archive.setSize(size);
    archive.setNumberOfFiles(numberOfFiles);
  }
 catch (  SevenZipException e) {
    archive.setProtected(true);
    return true;
  }
catch (  Exception e) {
    return false;
  }
  return true;
}"
20737,"public boolean findPassword(String password){
  crack++;
  con.fireEvent(ExtractionConstants.WRAPPER_PASSWORT_CRACKING);
  try {
    if (archive.getType() == Archive.SINGLE_FILE) {
      inArchive=SevenZip.openInArchive(format,new RandomAccessFileInStream(new RandomAccessFile(archive.getFirstDownloadLink().getFileOutput(),""String_Node_Str"")),password);
    }
 else     if (archive.getType() == Archive.MULTI) {
      MultiOpener multiopener=new MultiOpener(password);
      inArchive=SevenZip.openInArchive(ArchiveFormat.SEVEN_ZIP,new VolumedArchiveInStream(archive.getFirstDownloadLink().getFileOutput(),multiopener));
    }
 else     if (archive.getType() == Archive.MULTI_RAR) {
      RarOpener raropener=new RarOpener(password);
      IInStream inStream=raropener.getStream(archive.getFirstDownloadLink().getFileOutput());
      inArchive=SevenZip.openInArchive(ArchiveFormat.RAR,inStream,raropener);
    }
    long size=0;
    final BooleanHelper passwordfound=new BooleanHelper();
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      size+=item.getSize();
      if (!passwordfound.getBoolean()) {
        try {
          item.extractSlow(new ISequentialOutStream(){
            public int write(            byte[] data) throws SevenZipException {
              passwordfound.found();
              return 0;
            }
          }
,password);
        }
 catch (        SevenZipException e) {
        }
      }
    }
    if (!passwordfound.getBoolean())     return false;
    archive.setSize(size);
    archive.setPassword(password);
    return true;
  }
 catch (  FileNotFoundException e) {
    return false;
  }
catch (  SevenZipException e) {
    return false;
  }
}","public boolean findPassword(String password){
  crack++;
  con.fireEvent(ExtractionConstants.WRAPPER_PASSWORT_CRACKING);
  try {
    if (inArchive != null) {
      inArchive.close();
    }
    if (archive.getType() == Archive.SINGLE_FILE) {
      inArchive=SevenZip.openInArchive(format,stream,password);
    }
 else     if (archive.getType() == Archive.MULTI) {
      if (multiopener != null) {
        multiopener.close();
      }
      multiopener=new MultiOpener(password);
      IInStream inStream=new VolumedArchiveInStream(archive.getFirstDownloadLink().getFileOutput(),multiopener);
      inArchive=SevenZip.openInArchive(ArchiveFormat.SEVEN_ZIP,inStream);
    }
 else     if (archive.getType() == Archive.MULTI_RAR) {
      if (raropener != null) {
        raropener.close();
      }
      raropener=new RarOpener(password);
      IInStream inStream=raropener.getStream(archive.getFirstDownloadLink().getFileOutput());
      inArchive=SevenZip.openInArchive(ArchiveFormat.RAR,inStream,raropener);
    }
    long size=0;
    final BooleanHelper passwordfound=new BooleanHelper();
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      size+=item.getSize();
      if (!passwordfound.getBoolean()) {
        try {
          item.extractSlow(new ISequentialOutStream(){
            public int write(            byte[] data) throws SevenZipException {
              passwordfound.found();
              return 0;
            }
          }
,password);
        }
 catch (        SevenZipException e) {
        }
      }
    }
    if (!passwordfound.getBoolean())     return false;
    archive.setSize(size);
    archive.setPassword(password);
    return true;
  }
 catch (  FileNotFoundException e) {
    return false;
  }
catch (  SevenZipException e) {
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}"
20738,"public void close(){
  try {
    inArchive.close();
  }
 catch (  SevenZipException e) {
    e.printStackTrace();
  }
}","public void close(){
  try {
    if (multiopener != null) {
      multiopener.close();
    }
    if (raropener != null) {
      raropener.close();
    }
    if (stream != null) {
      stream.close();
    }
    inArchive.close();
  }
 catch (  SevenZipException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}"
20739,"public void checkErrors(DownloadLink theLink,boolean checkAll,String passCode) throws NumberFormatException, PluginException {
  if (checkAll) {
    if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
      theLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_CAPTCHA);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    if (waittime != 0) {
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
 else {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    String tmphrs=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpmin=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpsec=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpdays=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null && tmpdays == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0, days=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      if (tmpdays != null)       days=Integer.parseInt(tmpdays);
      int waittime=((days * 24 * 3600) + (3600 * hours) + (60 * minutes)+ seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
  if (BRBEFORE.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
  if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")|| BRBEFORE.contains(""String_Node_Str"")) {
    String filesizelimit=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit);
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
}","public void checkErrors(DownloadLink theLink,boolean checkAll,String passCode) throws NumberFormatException, PluginException {
  if (checkAll) {
    if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
      theLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_CAPTCHA);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    if (waittime != 0) {
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
 else {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    String tmphrs=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpmin=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpsec=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpdays=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null && tmpdays == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0, days=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      if (tmpdays != null)       days=Integer.parseInt(tmpdays);
      int waittime=((days * 24 * 3600) + (3600 * hours) + (60 * minutes)+ seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
  if (BRBEFORE.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
  if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")|| BRBEFORE.contains(""String_Node_Str"")|| BRBEFORE.contains(""String_Node_Str"")) {
    String filesizelimit=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit);
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
}"
20740,"public void checkErrors(DownloadLink theLink,boolean checkAll,String passCode,boolean loggedIn) throws NumberFormatException, PluginException {
  if (checkAll) {
    if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
      theLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_CAPTCHA);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    if (loggedIn)     throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
    int minutes=0, seconds=0, hours=0;
    String tmphrs=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    if (waittime != 0) {
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
 else {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    if (loggedIn)     throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
    String tmphrs=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpmin=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpsec=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpdays=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null && tmpdays == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0, days=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      if (tmpdays != null)       days=Integer.parseInt(tmpdays);
      int waittime=((days * 24 * 3600) + (3600 * hours) + (60 * minutes)+ seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    if (loggedIn)     throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
  }
  if (BRBEFORE.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
  if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")|| BRBEFORE.contains(""String_Node_Str"")) {
    String filesizelimit=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit);
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
}","public void checkErrors(DownloadLink theLink,boolean checkAll,String passCode,boolean loggedIn) throws NumberFormatException, PluginException {
  if (checkAll) {
    if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
      theLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (BRBEFORE.contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_CAPTCHA);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    if (loggedIn)     throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
    int minutes=0, seconds=0, hours=0;
    String tmphrs=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    if (waittime != 0) {
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
 else {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    if (loggedIn)     throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
    String tmphrs=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpmin=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpsec=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    String tmpdays=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null && tmpdays == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0, days=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      if (tmpdays != null)       days=Integer.parseInt(tmpdays);
      int waittime=((days * 24 * 3600) + (3600 * hours) + (60 * minutes)+ seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  if (BRBEFORE.contains(""String_Node_Str"")) {
    if (loggedIn)     throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
  }
  if (BRBEFORE.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
  if (BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"") || BRBEFORE.contains(""String_Node_Str"")|| BRBEFORE.contains(""String_Node_Str"")|| BRBEFORE.contains(""String_Node_Str"")) {
    String filesizelimit=new Regex(BRBEFORE,""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit);
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
}"
20741,"/** 
 * @param currentPath the currentPath to set
 */
private void setCurrentPath(final File currentPath,boolean updateCombo){
  if (updateCombo)   cmboInput.setSelectedItem(currentPath.toString());
  if (currentPath != null && !currentPath.equals(this.currentPath)) {
    this.currentPath=currentPath;
    final String item=currentPath.toString();
    if (!files.contains(item)) {
      cmboInput.insertItemAt(item,0);
    }
    SubConfiguration guiConfig=SubConfiguration.getConfig(""String_Node_Str"");
    guiConfig.setProperty(getName(),createSortedVector(files,item,20));
    guiConfig.save();
  }
}","/** 
 * @param currentPath the currentPath to set
 */
private void setCurrentPath(final File currentPath,boolean updateCombo){
  if (updateCombo && currentPath != null)   cmboInput.setSelectedItem(currentPath.toString());
  if (currentPath != null && !currentPath.equals(this.currentPath)) {
    this.currentPath=currentPath;
    final String item=currentPath.toString();
    if (!files.contains(item)) {
      cmboInput.insertItemAt(item,0);
    }
    SubConfiguration guiConfig=SubConfiguration.getConfig(""String_Node_Str"");
    guiConfig.setProperty(getName(),createSortedVector(files,item,20));
    guiConfig.save();
  }
}"
20742,"/** 
 * das controllevent fängt heruntergeladene file ab und wertet sie aus
 */
@SuppressWarnings(""String_Node_Str"") @Override public void onControlEvent(ControlEvent event){
  DownloadLink link;
switch (event.getEventID()) {
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
    if (!(event.getCaller() instanceof PluginForHost))     return;
  link=((SingleDownloadController)event.getParameter()).getDownloadLink();
if (link.getFilePackage().isPostProcessing() && this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true) && isLinkSupported(link.getFileOutput())) {
  Archive archive=buildArchive(link);
  if (archive.isComplete() && !archive.isActive()) {
    this.addToQueue(archive);
  }
}
break;
case ControlEvent.CONTROL_ON_FILEOUTPUT:
if (this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_DEEP_EXTRACT,true)) {
try {
File[] list=(File[])event.getParameter();
for (File archiveStartFile : list) {
  if (isLinkSupported(archiveStartFile.getAbsolutePath())) {
    Archive ar=buildDummyArchive(archiveStartFile);
    if (ar.isActive())     continue;
    addToQueue(buildDummyArchive(archiveStartFile));
  }
}
}
 catch (Exception e) {
JDLogger.exception(e);
}
}
break;
case ControlEvent.CONTROL_LINKLIST_CONTEXT_MENU:
ArrayList<MenuAction> items=(ArrayList<MenuAction>)event.getParameter();
MenuAction m;
MenuAction container=new MenuAction(""String_Node_Str"",0);
container.setIcon(getIconKey());
items.add(container);
if (event.getCaller() instanceof DownloadLink) {
link=(DownloadLink)event.getCaller();
container.addMenuItem(m=new MenuAction(""String_Node_Str"",EXTRACT_LINK));
m.setIcon(getIconKey());
m.setActionListener(this);
boolean isLocalyAvailable=new File(link.getFileOutput()).exists() || new File(link.getStringProperty(DownloadLink.STATIC_OUTPUTFILE,link.getFileOutput())).exists();
if (isLocalyAvailable && isLinkSupported(link.getFileOutput())) {
m.setEnabled(true);
}
 else {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(m=new MenuAction(""String_Node_Str"",SET_LINK_AUTOEXTRACT));
m.setActionListener(this);
m.setSelected(link.getFilePackage().isPostProcessing());
if (!this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true)) {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(new MenuAction(Types.SEPARATOR));
container.addMenuItem(m=new MenuAction(""String_Node_Str"",SET_EXTRACT_TO));
m.setActionListener(this);
m.setProperty(""String_Node_Str"",link);
File dir=this.getExtractToPath(link);
while (dir != null && !dir.exists()) {
if (dir.getParentFile() == null) break;
dir=dir.getParentFile();
}
if (dir == null) break;
container.addMenuItem(m=new MenuAction(""String_Node_Str"",OPEN_EXTRACT));
m.setActionListener(this);
link.setProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH + ""String_Node_Str"",dir.getAbsolutePath());
m.setProperty(""String_Node_Str"",link);
}
 else {
FilePackage fp=(FilePackage)event.getCaller();
container.addMenuItem(m=new MenuAction(""String_Node_Str"",EXTRACT_PACKAGE));
m.setIcon(getIconKey());
m.setActionListener(this);
m.setProperty(""String_Node_Str"",fp);
container.addMenuItem(m=new MenuAction(""String_Node_Str"",SET_PACKAGE_AUTOEXTRACT));
m.setSelected(fp.isPostProcessing());
m.setActionListener(this);
if (!this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true)) {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",fp);
}
break;
}
}","/** 
 * das controllevent fängt heruntergeladene file ab und wertet sie aus
 */
@Override public void onControlEvent(ControlEvent event){
  DownloadLink link;
switch (event.getEventID()) {
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
    if (!(event.getCaller() instanceof PluginForHost))     return;
  link=((SingleDownloadController)event.getParameter()).getDownloadLink();
if (link.getFilePackage().isPostProcessing() && this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true) && isLinkSupported(link.getFileOutput())) {
  Archive archive=buildArchive(link);
  if (archive.isComplete() && !archive.isActive()) {
    this.addToQueue(archive);
  }
}
break;
case ControlEvent.CONTROL_ON_FILEOUTPUT:
if (this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_DEEP_EXTRACT,true)) {
try {
File[] list=(File[])event.getParameter();
for (File archiveStartFile : list) {
  if (isLinkSupported(archiveStartFile.getAbsolutePath())) {
    Archive ar=buildDummyArchive(archiveStartFile);
    if (ar.isActive())     continue;
    addToQueue(buildDummyArchive(archiveStartFile));
  }
}
}
 catch (Exception e) {
JDLogger.exception(e);
}
}
break;
case ControlEvent.CONTROL_LINKLIST_CONTEXT_MENU:
ArrayList<MenuAction> items=(ArrayList<MenuAction>)event.getParameter();
MenuAction m;
MenuAction container=new MenuAction(""String_Node_Str"",0);
container.setIcon(getIconKey());
items.add(container);
if (event.getCaller() instanceof DownloadLink) {
link=(DownloadLink)event.getCaller();
container.addMenuItem(m=new MenuAction(""String_Node_Str"",EXTRACT_LINK));
m.setIcon(getIconKey());
m.setActionListener(this);
boolean isLocalyAvailable=new File(link.getFileOutput()).exists() || new File(link.getStringProperty(DownloadLink.STATIC_OUTPUTFILE,link.getFileOutput())).exists();
if (isLocalyAvailable && isLinkSupported(link.getFileOutput())) {
m.setEnabled(true);
}
 else {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(m=new MenuAction(""String_Node_Str"",SET_LINK_AUTOEXTRACT));
m.setActionListener(this);
m.setSelected(link.getFilePackage().isPostProcessing());
if (!this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true)) {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(new MenuAction(Types.SEPARATOR));
container.addMenuItem(m=new MenuAction(""String_Node_Str"",SET_EXTRACT_TO));
m.setActionListener(this);
m.setProperty(""String_Node_Str"",link);
File dir=this.getExtractToPath(link);
while (dir != null && !dir.exists()) {
if (dir.getParentFile() == null) break;
dir=dir.getParentFile();
}
if (dir == null) break;
container.addMenuItem(m=new MenuAction(""String_Node_Str"",OPEN_EXTRACT));
m.setActionListener(this);
link.setProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH + ""String_Node_Str"",dir.getAbsolutePath());
m.setProperty(""String_Node_Str"",link);
}
 else {
FilePackage fp=(FilePackage)event.getCaller();
container.addMenuItem(m=new MenuAction(""String_Node_Str"",EXTRACT_PACKAGE));
m.setIcon(getIconKey());
m.setActionListener(this);
m.setProperty(""String_Node_Str"",fp);
container.addMenuItem(m=new MenuAction(""String_Node_Str"",SET_PACKAGE_AUTOEXTRACT));
m.setSelected(fp.isPostProcessing());
m.setActionListener(this);
if (!this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true)) {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",fp);
}
break;
}
}"
20743,"private void initConfig(){
  ConfigEntry ce, conditionEntry;
  final SubConfiguration subConfig=getPluginConfig();
  config.setGroup(new ConfigGroup(getHost(),getIconKey()));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_USE_EXTRACT_PATH,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,ExtractionConstants.CONFIG_KEY_UNRARPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getDefaultDownloadDirectory());
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_OVERWRITE,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.setGroup(new ConfigGroup(JDL.L(""String_Node_Str"",""String_Node_Str""),getIconKey()));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_USE_SUBPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,ExtractionConstants.CONFIG_KEY_SUBPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,ExtractionConstants.CONFIG_KEY_SUBPATH_MINNUM,JDL.L(""String_Node_Str"",""String_Node_Str""),0,600,5).setDefaultValue(0));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_DEEP_EXTRACT,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_REMOVE_INFO_FILE,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,ExtractionConstants.CONFIG_KEY_ADDITIONAL_SPACE,JDL.L(""String_Node_Str"",""String_Node_Str""),1,2048,1).setDefaultValue(512));
  for (  IExtraction extractor : extractors) {
    extractor.initConfig(config,subConfig);
  }
}","private void initConfig(){
  ConfigEntry ce, conditionEntry;
  final SubConfiguration subConfig=getPluginConfig();
  config.setGroup(new ConfigGroup(getHost(),getIconKey()));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_USE_EXTRACT_PATH,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_BROWSEFOLDER,subConfig,ExtractionConstants.CONFIG_KEY_UNRARPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(JDUtilities.getDefaultDownloadDirectory());
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_REMVE_AFTER_EXTRACT,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_OVERWRITE,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.setGroup(new ConfigGroup(JDL.L(""String_Node_Str"",""String_Node_Str""),getIconKey()));
  config.addEntry(conditionEntry=new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_USE_SUBPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(ce=new ConfigEntry(ConfigContainer.TYPE_TEXTFIELD,subConfig,ExtractionConstants.CONFIG_KEY_SUBPATH,JDL.L(""String_Node_Str"",""String_Node_Str"")));
  ce.setDefaultValue(""String_Node_Str"");
  ce.setEnabledCondidtion(conditionEntry,true);
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,ExtractionConstants.CONFIG_KEY_SUBPATH_MINNUM,JDL.L(""String_Node_Str"",""String_Node_Str""),1,600,5).setDefaultValue(5));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_ASK_UNKNOWN_PASS,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_DEEP_EXTRACT,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(true));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_CHECKBOX,subConfig,ExtractionConstants.CONFIG_KEY_REMOVE_INFO_FILE,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(false));
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_SPINNER,subConfig,ExtractionConstants.CONFIG_KEY_ADDITIONAL_SPACE,JDL.L(""String_Node_Str"",""String_Node_Str""),1,2048,1).setDefaultValue(512));
  for (  IExtraction extractor : extractors) {
    extractor.initConfig(config,subConfig);
  }
}"
20744,"/** 
 * Is used to let the extraction method prepare for the extraction. Will be called after the system started an extraction, but before the   {@link crackPassword} and {@link extract}.
 * @return False  if it's not possible to extract that archive.
 */
public boolean prepare();","/** 
 * Is used to let the extraction method prepare for the extraction. Will be called after the system started an extraction, but before the  {@link crackPassword} and {@link extract}.
 * @return False if it's not possible to extract that archive.
 */
public boolean prepare();"
20745,"/** 
 * Sets the   {@link Archive} which should be extracted.
 * @param archive The {@link Archive}.
 */
public void setArchiv(Archive archive);","/** 
 * Sets the   {@link Archive} which should be extracted.
 * @param archive The  {@link Archive}.
 */
public void setArchiv(Archive archive);"
20746,"/** 
 * Checks if the file from the filefilter is supported.
 * @param file The file which should be checked.
 * @return 
 */
public boolean isArchivSupportedFileFilter(String file);","/** 
 * Checks if the file from the filefilter is supported.
 * @param file The file which should be checked.
 * @return
 */
public boolean isArchivSupportedFileFilter(String file);"
20747,"/** 
 * Builds an   {@link Archive} with an finished {@link DownloadLink}. If the   {@link DownloadLink} contains only a part of an multipart archive, it has not to be to first one (eg. test.part1.rar).
 * @param link An complete downloaded file.
 * @return An {@link Archive} that contains all {@link Downloadlink}s.
 */
public Archive buildArchive(DownloadLink link);","/** 
 * Builds an   {@link Archive} with an finished {@link DownloadLink}. If the  {@link DownloadLink} contains only a part of an multipart archive, it hasnot to be to first one (eg. test.part1.rar).
 * @param link An complete downloaded file.
 * @return An {@link Archive} that contains all {@link Downloadlink}s.
 */
public Archive buildArchive(DownloadLink link);"
20748,"/** 
 * Sets the   {@link ExtractionController} which controlls the extraction.
 * @param controller The {@link ExtractionController}.
 */
public void setExtractionController(ExtractionController controller);","/** 
 * Sets the   {@link ExtractionController} which controlls the extraction.
 * @param controller The  {@link ExtractionController}.
 */
public void setExtractionController(ExtractionController controller);"
20749,"/** 
 * Sets the  pluginconfiguration.
 * @param config The configuration.
 */
public void setConfig(SubConfiguration config);","/** 
 * Sets the pluginconfiguration.
 * @param config The configuration.
 */
public void setConfig(SubConfiguration config);"
20750,"/** 
 * Returns the archivename of an   {@link Archive}.
 * @param archive The {@link Archive}.
 * @return The name of the archive.
 */
public String getArchiveName(DownloadLink link);","/** 
 * Returns the archivename of an   {@link Archive}.
 * @param archive The  {@link Archive}.
 * @return The name of the archive.
 */
public String getArchiveName(DownloadLink link);"
20751,"public void doFree(DownloadLink downloadLink) throws Exception {
  URLConnectionAdapter con=br.openGetConnection(downloadLink.getDownloadURL());
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    String dllink=null;
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
    String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
    boolean isStream=br.containsHTML(""String_Node_Str"");
    if (!isStream) {
      Browser brc=requestXML(br,""String_Node_Str"" + fileID,null,false);
      if (brc.containsHTML(""String_Node_Str"")) {
        String error=brc.getRegex(""String_Node_Str"").getMatch(0);
        if (error == null)         throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
        if (error.contains(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
        if (error.contains(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
        if (error.contains(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      if (brc.containsHTML(""String_Node_Str"")) {
        int waitsecs=0;
        String waittime=brc.getRegex(""String_Node_Str"").getMatch(0);
        if (waittime != null)         waitsecs=Integer.parseInt(waittime);
        if (waitsecs > 0)         sleep(waitsecs * 1000l,downloadLink);
        dllink=brc.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
 else {
      br.getPage(""String_Node_Str"" + fileID + ""String_Node_Str"");
      dllink=br.getRedirectLocation();
    }
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (!dllink.contains(""String_Node_Str""))     dllink=""String_Node_Str"" + dllink;
    br.setDebug(true);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,!isStream,1);
  }
 else {
    con.disconnect();
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadLink.getDownloadURL(),true,0);
  }
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception {
  URLConnectionAdapter con=br.openGetConnection(downloadLink.getDownloadURL());
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    String dllink=null;
    if (br.containsHTML(PREMIUMONLYTEXT))     throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
    String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
    boolean isStream=br.containsHTML(""String_Node_Str"");
    if (!isStream) {
      Browser brc=requestXML(br,""String_Node_Str"" + fileID,null,false);
      if (brc.containsHTML(""String_Node_Str"")) {
        String error=brc.getRegex(""String_Node_Str"").getMatch(0);
        if (error == null)         throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
        if (error.contains(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
        if (error.contains(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
        if (error.contains(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      if (brc.containsHTML(""String_Node_Str"")) {
        int waitsecs=0;
        String waittime=brc.getRegex(""String_Node_Str"").getMatch(0);
        if (waittime != null)         waitsecs=Integer.parseInt(waittime);
        if (waitsecs > 0)         sleep(waitsecs * 1000l,downloadLink);
        dllink=brc.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
 else {
      br.getPage(""String_Node_Str"" + fileID + ""String_Node_Str"");
      dllink=br.getRedirectLocation();
    }
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (!dllink.contains(""String_Node_Str""))     dllink=""String_Node_Str"" + dllink;
    br.setDebug(true);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,!isStream,1);
  }
 else {
    con.disconnect();
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadLink.getDownloadURL(),true,0);
  }
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20752,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, InterruptedException, PluginException {
  this.setBrowserExclusive();
  br.getPage(""String_Node_Str"");
  br.setFollowRedirects(true);
  URLConnectionAdapter con=br.openGetConnection(downloadLink.getDownloadURL());
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    String filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(1);
      if (filename != null) {
        String extension=br.getRegex(""String_Node_Str"").getMatch(1);
        if (extension == null)         extension=""String_Node_Str"";
        filename=filename.trim() + extension;
      }
    }
    String filesize=br.getRegex(""String_Node_Str"").getMatch(1);
    if (filename == null || filesize == null)     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    downloadLink.setName(filename.trim());
    downloadLink.setDownloadSize(Regex.getSize(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
    if (br.containsHTML(""String_Node_Str""))     downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    downloadLink.setName(getFileNameFromHeader(con));
    downloadLink.setDownloadSize(con.getContentLength());
    con.disconnect();
  }
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, InterruptedException, PluginException {
  this.setBrowserExclusive();
  br.getPage(""String_Node_Str"");
  br.setFollowRedirects(true);
  URLConnectionAdapter con=br.openGetConnection(downloadLink.getDownloadURL());
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    String filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(1);
      if (filename != null) {
        String extension=br.getRegex(""String_Node_Str"").getMatch(1);
        if (extension == null)         extension=""String_Node_Str"";
        filename=filename.trim() + extension;
      }
    }
    String filesize=br.getRegex(""String_Node_Str"").getMatch(1);
    if (filename == null || filesize == null)     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    downloadLink.setName(filename.trim());
    downloadLink.setDownloadSize(Regex.getSize(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
    if (br.containsHTML(PREMIUMONLYTEXT))     downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    downloadLink.getLinkStatus().setStatusText(""String_Node_Str"");
    downloadLink.setName(getFileNameFromHeader(con));
    downloadLink.setDownloadSize(con.getContentLength());
    con.disconnect();
  }
  return AvailableStatus.TRUE;
}"
20753,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  if (brbefore.contains(ONLY4PREMIUMERROR0) || brbefore.contains(ONLY4PREMIUMERROR1))   throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  br.setFollowRedirects(true);
  Form DLForm0=br.getForm(0);
  if (DLForm0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLForm0.remove(""String_Node_Str"");
  br.submitForm(DLForm0);
  doSomething();
  checkErrors(downloadLink);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=60;
  if (ttt != null && Integer.parseInt(ttt) < 100) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    tt=Integer.parseInt(ttt);
  }
  sleep(tt * 1001,downloadLink);
  String passCode=null;
  if (br.containsHTML(""String_Node_Str"")) {
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
    }
    rc.setCode(c);
  }
 else {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      dlForm.put(""String_Node_Str"",passCode);
    }
    br.submitForm(dlForm);
  }
  doSomething();
  if (brbefore.contains(""String_Node_Str"") || brbefore.contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    downloadLink.setProperty(""String_Node_Str"",null);
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  if (brbefore.contains(ONLY4PREMIUMERROR0) || brbefore.contains(ONLY4PREMIUMERROR1))   throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  br.setFollowRedirects(true);
  Form DLForm0=br.getForm(0);
  if (DLForm0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLForm0.remove(""String_Node_Str"");
  br.submitForm(DLForm0);
  doSomething();
  checkErrors(downloadLink);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=60;
  if (ttt != null && Integer.parseInt(ttt) < 100) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    tt=Integer.parseInt(ttt);
  }
  sleep(tt * 1001,downloadLink);
  String passCode=null;
  if (br.containsHTML(""String_Node_Str"")) {
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
    }
    rc.setCode(c);
  }
 else {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      dlForm.put(""String_Node_Str"",passCode);
    }
    br.submitForm(dlForm);
  }
  doSomething();
  if (brbefore.contains(""String_Node_Str"") || brbefore.contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    downloadLink.setProperty(""String_Node_Str"",null);
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  if (!(dl.getConnection().isContentDisposition()) && dl.getConnection().getContentType() != null && !dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20754,"@Override public void handlePremium(DownloadLink link,Account account) throws Exception {
  String passCode=null;
  requestFileInformation(link);
  login(account);
  String dllink=link.getStringProperty(""String_Node_Str"");
  URLConnectionAdapter con=null;
  boolean generateLink=true;
  if (dllink != null) {
    con=br.openGetConnection(dllink);
    if (!con.getContentType().contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      generateLink=false;
    }
 else {
      logger.info(""String_Node_Str"");
    }
  }
  if (con != null)   con.disconnect();
  if (generateLink) {
    br.setFollowRedirects(false);
    br.getPage(link.getDownloadURL());
    if (nopremium) {
      doFree(link);
    }
 else {
      dllink=br.getRedirectLocation();
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str"")) {
          String errormessage=""String_Node_Str"";
          errormessage=br.getRegex(""String_Node_Str"").getMatch(0);
          if (errormessage != null)           logger.warning(errormessage);
          link.getLinkStatus().setStatusText(errormessage);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,errormessage,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
        Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        if (DLForm == null)         throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
        if (br.containsHTML(""String_Node_Str"")) {
          if (link.getStringProperty(""String_Node_Str"",null) == null) {
            passCode=Plugin.getUserInput(""String_Node_Str"",link);
          }
 else {
            passCode=link.getStringProperty(""String_Node_Str"",null);
          }
          DLForm.put(""String_Node_Str"",passCode);
          logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
        }
        br.submitForm(DLForm);
        if (br.containsHTML(""String_Node_Str"")) {
          String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
          String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
          String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
          String tmpdays=br.getRegex(""String_Node_Str"").getMatch(0);
          if (tmphrs == null && tmpmin == null && tmpsec == null && tmpdays == null) {
            throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
          }
 else {
            int minutes=0, seconds=0, hours=0, days=0;
            if (tmphrs != null)             hours=Integer.parseInt(tmphrs);
            if (tmpmin != null)             minutes=Integer.parseInt(tmpmin);
            if (tmpsec != null)             seconds=Integer.parseInt(tmpsec);
            if (tmpdays != null)             days=Integer.parseInt(tmpdays);
            int waittime=((days * 24 * 3600) + (3600 * hours) + (60 * minutes)+ seconds+ 1) * 1000;
            logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
            throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
          }
        }
        dllink=br.getRedirectLocation();
        if (dllink == null) {
          if (br.containsHTML(""String_Node_Str"")) {
            logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
            link.setProperty(""String_Node_Str"",null);
            throw new PluginException(LinkStatus.ERROR_RETRY);
          }
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      link.setProperty(""String_Node_Str"",dllink);
    }
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,-15);
  if (passCode != null) {
    link.setProperty(""String_Node_Str"",passCode);
  }
  if (!(dl.getConnection().isContentDisposition())) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink link,Account account) throws Exception {
  String passCode=null;
  requestFileInformation(link);
  login(account);
  String dllink=link.getStringProperty(""String_Node_Str"");
  URLConnectionAdapter con=null;
  boolean generateLink=true;
  if (dllink != null) {
    con=br.openGetConnection(dllink);
    if (!con.getContentType().contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      generateLink=false;
    }
 else {
      logger.info(""String_Node_Str"");
    }
  }
  if (con != null)   con.disconnect();
  if (generateLink) {
    br.setFollowRedirects(false);
    br.getPage(link.getDownloadURL());
    if (nopremium) {
      doFree(link);
    }
 else {
      dllink=br.getRedirectLocation();
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str"")) {
          String errormessage=""String_Node_Str"";
          errormessage=br.getRegex(""String_Node_Str"").getMatch(0);
          if (errormessage != null)           logger.warning(errormessage);
          link.getLinkStatus().setStatusText(errormessage);
          throw new PluginException(LinkStatus.ERROR_PREMIUM,errormessage,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
        }
        Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        if (DLForm == null)         throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
        if (br.containsHTML(""String_Node_Str"")) {
          if (link.getStringProperty(""String_Node_Str"",null) == null) {
            passCode=Plugin.getUserInput(""String_Node_Str"",link);
          }
 else {
            passCode=link.getStringProperty(""String_Node_Str"",null);
          }
          DLForm.put(""String_Node_Str"",passCode);
          logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
        }
        br.submitForm(DLForm);
        if (br.containsHTML(""String_Node_Str"")) {
          String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
          String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
          String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
          String tmpdays=br.getRegex(""String_Node_Str"").getMatch(0);
          if (tmphrs == null && tmpmin == null && tmpsec == null && tmpdays == null) {
            throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
          }
 else {
            int minutes=0, seconds=0, hours=0, days=0;
            if (tmphrs != null)             hours=Integer.parseInt(tmphrs);
            if (tmpmin != null)             minutes=Integer.parseInt(tmpmin);
            if (tmpsec != null)             seconds=Integer.parseInt(tmpsec);
            if (tmpdays != null)             days=Integer.parseInt(tmpdays);
            int waittime=((days * 24 * 3600) + (3600 * hours) + (60 * minutes)+ seconds+ 1) * 1000;
            logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
            throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
          }
        }
        dllink=br.getRedirectLocation();
        if (dllink == null) {
          if (br.containsHTML(""String_Node_Str"")) {
            logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
            link.setProperty(""String_Node_Str"",null);
            throw new PluginException(LinkStatus.ERROR_RETRY);
          }
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      link.setProperty(""String_Node_Str"",dllink);
    }
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,-15);
  if (passCode != null) {
    link.setProperty(""String_Node_Str"",passCode);
  }
  if (!(dl.getConnection().isContentDisposition()) && dl.getConnection().getContentType() != null && !dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20755,"private void handleDownloadErrors() throws IOException, PluginException {
  logger.info(""String_Node_Str"");
  if (dl.getConnection().getResponseCode() == 416) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",1000l * 60 * 30);
  }
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    String error=dl.getConnection().getRequest().getCookies().get(""String_Node_Str"").getValue();
    if (error == null)     error=br.getCookie(""String_Node_Str"",""String_Node_Str"");
    if (error != null && error.contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,1000l * 15);
    if (error != null && error.contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,1 * 60 * 1000l);
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (dl.getConnection().getLongContentLength() == 0) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",1000l * 60 * 30);
  }
}","private void handleDownloadErrors() throws IOException, PluginException {
  logger.info(""String_Node_Str"");
  if (dl.getConnection().getResponseCode() == 416) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",1000l * 60 * 30);
  }
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    Cookie cookie=dl.getConnection().getRequest().getCookies().get(""String_Node_Str"");
    String error=null;
    if (cookie != null)     error=cookie.getValue();
    if (error == null)     error=br.getCookie(""String_Node_Str"",""String_Node_Str"");
    if (error != null && error.contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,1000l * 15);
    if (error != null && error.contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,1 * 60 * 1000l);
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (dl.getConnection().getLongContentLength() == 0) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",1000l * 60 * 30);
  }
}"
20756,"@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  url=Encoding.urlDecode(url,true);
  dl=jd.plugins.BrowserAdapter.openDownload(this.br,link,url,true,1);
  if (!dl.getConnection().isContentDisposition() && !dl.getConnection().getContentType().startsWith(""String_Node_Str"")) {
    this.dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  dl=jd.plugins.BrowserAdapter.openDownload(this.br,link,DLLINK,true,0);
  if (!dl.getConnection().isContentDisposition() && !dl.getConnection().getContentType().startsWith(""String_Node_Str"")) {
    br.followConnection();
    this.dl.getConnection().disconnect();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),60 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20757,"@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  String name=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (name == null || ""String_Node_Str"".equals(name))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setFinalFileName(name + ""String_Node_Str"");
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  String name=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (name == null || ""String_Node_Str"".equals(name))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setFinalFileName(Encoding.htmlDecode(name) + ""String_Node_Str"");
  DLLINK=br.getRegex(""String_Node_Str"").getMatch(0);
  if (DLLINK == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLLINK=Encoding.urlDecode(DLLINK,true);
  Browser br2=br.cloneBrowser();
  br2.setFollowRedirects(true);
  URLConnectionAdapter con=null;
  try {
    con=br2.openGetConnection(DLLINK);
    if (!con.getContentType().contains(""String_Node_Str""))     parameter.setDownloadSize(con.getLongContentLength());
 else     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    return AvailableStatus.TRUE;
  }
  finally {
    try {
      con.disconnect();
    }
 catch (    Throwable e) {
    }
  }
}"
20758,"private String parseFeed(JDFeedMeFeed feed,String timestamp,String content) throws Exception {
  String new_timestamp=timestamp;
  boolean found_new_posts=false;
  RssParser feed_parser=new RssParser(feed);
  feed_parser.parseContent(content);
  int feed_item_number=0;
  JDFeedMePost post=null;
  while ((post=feed_parser.getPost()) != null) {
    feed_item_number++;
    String post_description=post.getDescription();
    post.setDescription(""String_Node_Str"");
    if (post.isValid()) {
      boolean is_new=handlePost(feed,post,post_description,timestamp);
      if (is_new)       found_new_posts=true;
      if (post.isTimestampNewer(new_timestamp))       new_timestamp=post.getTimestamp();
    }
 else {
      logger.severe(""String_Node_Str"" + Integer.toString(feed_item_number) + ""String_Node_Str""+ feed.getAddress());
    }
  }
  if (found_new_posts)   gui.setFeedNewposts(feed,true);
  return new_timestamp;
}","private String parseFeed(JDFeedMeFeed feed,String timestamp,String content) throws Exception {
  String new_timestamp=timestamp;
  boolean found_new_posts=false;
  RssParser feed_parser=new RssParser(feed);
  feed_parser.parseContent(content);
  int feed_item_number=0;
  JDFeedMePost post=null;
  while ((post=feed_parser.getPost()) != null) {
    feed_item_number++;
    String post_description=post.getDescription();
    post.setDescription(extractLinksFromHtml(post_description,JDFeedMeFeed.HOSTER_ANY_HOSTER,JDFeedMeFeed.HOSTER_EXCLUDE));
    if (post.isValid()) {
      boolean is_new=handlePost(feed,post,post_description,timestamp);
      if (is_new)       found_new_posts=true;
      if (post.isTimestampNewer(new_timestamp))       new_timestamp=post.getTimestamp();
    }
 else {
      logger.severe(""String_Node_Str"" + Integer.toString(feed_item_number) + ""String_Node_Str""+ feed.getAddress());
    }
  }
  if (found_new_posts)   gui.setFeedNewposts(feed,true);
  return new_timestamp;
}"
20759,"@Override public void run(){
  try {
    logger.info(""String_Node_Str"");
    while (running) {
synchronized (this) {
        sleeping=true;
      }
      try {
        int syncIntervalHours=1;
        if (gui != null)         syncIntervalHours=gui.getConfig().getSyncintervalhours();
        sleep(syncIntervalHours * 60 * 60000);
      }
 catch (      InterruptedException e) {
      }
synchronized (this) {
        sleeping=false;
      }
      if (running) {
        try {
          syncRss();
        }
 catch (        Exception e) {
        }
      }
    }
    logger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"");
    JDLogger.exception(e);
  }
}","@Override public void run(){
  try {
    logger.info(""String_Node_Str"");
    while (running) {
synchronized (this) {
        sleeping=true;
      }
      try {
        int syncIntervalHours=1;
        if (gui != null)         syncIntervalHours=gui.getConfig().getSyncintervalhours();
        sleep(syncIntervalHours * 60 * 60000);
      }
 catch (      InterruptedException e) {
      }
synchronized (this) {
        sleeping=false;
      }
      if (running) {
        try {
          new GuiRunnable<Object>(){
            @Override public Object runSave(){
              syncRss();
              return null;
            }
          }
.start();
        }
 catch (        Exception e) {
        }
      }
    }
    logger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.severe(""String_Node_Str"");
    JDLogger.exception(e);
  }
}"
20760,"public void downloadPost(JDFeedMeFeed feed,JDFeedMePost post,String post_description){
  String link_list_to_download=null;
  if ((link_list_to_download == null) && (post.hasValidFiles())) {
    link_list_to_download=extractLinksFromHtml(post.getFiles(),feed.getHoster(),""String_Node_Str"");
  }
  if ((link_list_to_download == null) && (post.hasValidLink())) {
    try {
      String response=new Browser().getPage(post.getLink());
      link_list_to_download=extractLinksFromHtml(response,feed.getHoster(),""String_Node_Str"");
    }
 catch (    Exception e) {
      logger.severe(""String_Node_Str"" + post.getLink());
    }
  }
  if ((link_list_to_download == null) && (post_description != null) && (post_description.trim().length() > 0)) {
    link_list_to_download=extractLinksFromHtml(post_description,feed.getHoster(),""String_Node_Str"");
  }
  if (link_list_to_download == null) {
    post.setAdded(JDFeedMePost.ADDED_YES_NO_FILES);
    return;
  }
  logger.info(""String_Node_Str"" + link_list_to_download);
  boolean anything_downloaded=downloadLinks(link_list_to_download,feed,post);
  if (anything_downloaded) {
    post.setAdded(JDFeedMePost.ADDED_YES);
    gui.notifyPostAddedInOtherFeed(post,feed);
  }
 else   post.setAdded(JDFeedMePost.ADDED_YES_NO_FILES);
}","public void downloadPost(JDFeedMeFeed feed,JDFeedMePost post,String post_description){
  String link_list_to_download=null;
  if ((link_list_to_download == null) && (post.hasValidFiles())) {
    link_list_to_download=extractLinksFromHtml(post.getFiles(),feed.getHoster(),JDFeedMeFeed.HOSTER_EXCLUDE);
  }
  if ((link_list_to_download == null) && (post.hasValidLink())) {
    try {
      Browser browser=new Browser();
      browser.setFollowRedirects(true);
      String response=browser.getPage(post.getLink());
      link_list_to_download=extractLinksFromHtml(response,feed.getHoster(),JDFeedMeFeed.HOSTER_EXCLUDE);
    }
 catch (    Exception e) {
      logger.severe(""String_Node_Str"" + post.getLink());
    }
  }
  if ((link_list_to_download == null) && (post_description != null) && (post_description.trim().length() > 0)) {
    link_list_to_download=extractLinksFromHtml(post_description,feed.getHoster(),JDFeedMeFeed.HOSTER_EXCLUDE);
  }
  if (link_list_to_download == null) {
    post.setAdded(JDFeedMePost.ADDED_YES_NO_FILES);
    return;
  }
  logger.info(""String_Node_Str"" + link_list_to_download);
  boolean anything_downloaded=downloadLinks(link_list_to_download,feed,post);
  if (anything_downloaded) {
    post.setAdded(JDFeedMePost.ADDED_YES);
    gui.notifyPostAddedInOtherFeed(post,feed);
  }
 else   post.setAdded(JDFeedMePost.ADDED_YES_NO_FILES);
}"
20761,"private void syncRss(){
  ArrayList<JDFeedMeFeed> feeds=gui.getFeeds();
  for (  JDFeedMeFeed feed : feeds) {
    if (!feed.isEnabled())     continue;
    String feed_address=feed.getAddress();
    if (feed_address.length() == 0)     continue;
    String response;
    try {
      String timestamp=null;
      if ((feed.getTimestamp() != null) && (feed.getTimestamp().length() > 0))       timestamp=feed.getTimestamp();
      logger.info(""String_Node_Str"" + feed_address + ""String_Node_Str""+ timestamp+ ""String_Node_Str"");
      gui.setFeedStatus(feed,JDFeedMeFeed.STATUS_RUNNING);
      response=new Browser().getPage(feed_address);
      String new_timestamp=parseFeed(feed,timestamp,response);
      if ((new_timestamp != null) && (new_timestamp != timestamp)) {
        gui.setFeedTimestamp(feed,new_timestamp);
      }
      gui.setFeedStatus(feed,JDFeedMeFeed.STATUS_OK);
    }
 catch (    Exception e) {
      logger.severe(""String_Node_Str"" + feed_address + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
      gui.setFeedStatus(feed,JDFeedMeFeed.STATUS_ERROR);
    }
  }
  gui.saveFeeds();
  gui.savePosts();
}","private void syncRss(){
  ArrayList<JDFeedMeFeed> feeds=gui.getFeeds();
  for (  JDFeedMeFeed feed : feeds) {
    if (!feed.isEnabled())     continue;
    String feed_address=feed.getAddress();
    if (feed_address.length() == 0)     continue;
    String response=""String_Node_Str"";
    try {
      String timestamp=null;
      if ((feed.getTimestamp() != null) && (feed.getTimestamp().length() > 0))       timestamp=feed.getTimestamp();
      logger.info(""String_Node_Str"" + feed_address + ""String_Node_Str""+ timestamp+ ""String_Node_Str"");
      gui.setFeedStatus(feed,JDFeedMeFeed.STATUS_RUNNING);
      Browser browser=new Browser();
      browser.setFollowRedirects(true);
      response=browser.getPage(feed_address);
      String new_timestamp=parseFeed(feed,timestamp,response);
      if ((new_timestamp != null) && (new_timestamp != timestamp)) {
        gui.setFeedTimestamp(feed,new_timestamp);
      }
      gui.setFeedStatus(feed,JDFeedMeFeed.STATUS_OK);
    }
 catch (    Exception e) {
      int max_reponse_length=1000;
      String response_short=response;
      if (response_short != null) {
        if (response_short.length() > max_reponse_length) {
          response_short=response_short.substring(0,max_reponse_length / 2) + ""String_Node_Str"" + response_short.substring(response_short.length() - max_reponse_length / 2);
        }
      }
      e.printStackTrace();
      logger.severe(""String_Node_Str"" + feed_address + ""String_Node_Str""+ e.toString()+ ""String_Node_Str""+ response_short);
      gui.setFeedStatus(feed,JDFeedMeFeed.STATUS_ERROR);
    }
  }
  gui.saveFeeds();
  gui.savePosts();
}"
20762,"public static void downloadPostThreaded(final JDFeedMeFeed feed,final JDFeedMePost post,final String post_description,final JDTableModel table){
  if (INSTANCE == null)   return;
  new Thread(){
    public void run(){
      INSTANCE.downloadPost(feed,post,post_description);
      if (table != null) {
        table.refreshModel();
        table.fireTableDataChanged();
      }
    }
  }
.start();
}","public static void downloadPostThreaded(final JDFeedMeFeed feed,final JDFeedMePost post,final String post_description,final JDTableModel table){
  if (INSTANCE == null)   return;
  new Thread(){
    public void run(){
      INSTANCE.downloadPost(feed,post,post_description);
      if (table != null) {
        new GuiRunnable<Object>(){
          @Override public Object runSave(){
            table.refreshModel();
            table.fireTableDataChanged();
            return null;
          }
        }
.start();
      }
    }
  }
.start();
}"
20763,"private boolean handlePost(JDFeedMeFeed feed,JDFeedMePost post,String post_description,String timestamp){
  if (post.isTimestampNewer(timestamp)) {
    logger.info(""String_Node_Str"" + post.getTimestamp() + ""String_Node_Str"");
    post.setNewpost(true);
    boolean need_to_add=runFilterOnPost(feed,post,post_description);
    if (!need_to_add) {
      logger.info(""String_Node_Str"" + post.getTitle() + ""String_Node_Str""+ post_description+ ""String_Node_Str"");
      post.setAdded(JDFeedMePost.ADDED_NO);
    }
 else {
      downloadPost(feed,post,post_description);
    }
    gui.addPostToFeed(post,feed);
    return true;
  }
 else {
    logger.info(""String_Node_Str"" + post.getTimestamp() + ""String_Node_Str"");
    return false;
  }
}","private boolean handlePost(JDFeedMeFeed feed,JDFeedMePost post,String post_description,String timestamp){
  if (post.isTimestampNewer(timestamp)) {
    if (JDFeedMe.VERBOSE)     logger.info(""String_Node_Str"" + post.getTimestamp() + ""String_Node_Str"");
    post.setNewpost(true);
    boolean need_to_add=runFilterOnPost(feed,post,post_description);
    if (!need_to_add) {
      if (JDFeedMe.VERBOSE)       logger.info(""String_Node_Str"" + post.getTitle() + ""String_Node_Str""+ post_description+ ""String_Node_Str"");
      post.setAdded(JDFeedMePost.ADDED_NO);
    }
 else {
      downloadPost(feed,post,post_description);
    }
    gui.addPostToFeed(post,feed);
    return true;
  }
 else {
    if (JDFeedMe.VERBOSE)     logger.info(""String_Node_Str"" + post.getTimestamp() + ""String_Node_Str"");
    return false;
  }
}"
20764,"private boolean runFilterOnPost(JDFeedMeFeed feed,JDFeedMePost post,String post_description){
  if (!feed.getDoFilters())   return true;
  if (feed.getFiltersearchtitle() || feed.getFiltersearchdesc()) {
    FilterChecker filter=new FilterChecker(feed.getFilters());
    if (feed.getFiltersearchtitle()) {
      if (filter.match(post.getTitle())) {
        logger.info(""String_Node_Str"" + post.getTitle() + ""String_Node_Str"");
        return true;
      }
    }
    if (feed.getFiltersearchdesc()) {
      if (filter.match(post_description)) {
        logger.info(""String_Node_Str"" + post_description + ""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}","private boolean runFilterOnPost(JDFeedMeFeed feed,JDFeedMePost post,String post_description){
  if (!feed.getDoFilters())   return true;
  if (feed.getFiltersearchtitle() || feed.getFiltersearchdesc()) {
    FilterChecker filter=new FilterChecker(feed.getFilters());
    if (feed.getFiltersearchtitle()) {
      if (filter.match(post.getTitle())) {
        if (JDFeedMe.VERBOSE)         logger.info(""String_Node_Str"" + post.getTitle() + ""String_Node_Str"");
        return true;
      }
    }
    if (feed.getFiltersearchdesc()) {
      if (filter.match(post_description)) {
        if (JDFeedMe.VERBOSE)         logger.info(""String_Node_Str"" + post_description + ""String_Node_Str"");
        return true;
      }
    }
  }
  return false;
}"
20765,"private String extractLinksFromHtml(String html,String limit_to_host,String exclude_host){
  String result=""String_Node_Str"";
  String[] links=HTMLParser.getHttpLinks(html,null);
  for (  String link : links) {
    try {
      for (      final HostPluginWrapper pHost : HostPluginWrapper.getHostWrapper()) {
        if (!pHost.isEnabled())         continue;
        if ((exclude_host != null) && (pHost.getHost().equalsIgnoreCase(exclude_host)))         continue;
        if ((limit_to_host != null) && (!limit_to_host.equals(JDFeedMeFeed.HOSTER_ANY_HOSTER))) {
          if (limit_to_host.equals(JDFeedMeFeed.HOSTER_ANY_PREMIUM)) {
            if (!pHost.isPremiumEnabled())             continue;
            Account account=AccountController.getInstance().getValidAccount(pHost.getPlugin());
            if (account == null)             continue;
          }
 else {
            if (!pHost.getHost().equalsIgnoreCase(limit_to_host))             continue;
          }
        }
        if (!pHost.canHandle(link))         continue;
        result+=link + ""String_Node_Str"";
      }
    }
  finally {
    }
  }
  return result;
}","private String extractLinksFromHtml(String html,String limit_to_host,String[] exclude_hosters){
  String result=""String_Node_Str"";
  html=html.replace(""String_Node_Str"",""String_Node_Str"");
  String[] links=HTMLParser.getHttpLinks(html,null);
  for (  String link : links) {
    try {
      for (      final HostPluginWrapper pHost : HostPluginWrapper.getHostWrapper()) {
        if (!pHost.isEnabled())         continue;
        if (exclude_hosters != null) {
          boolean in_ignore_list=false;
          for (          final String exclude_hoster : exclude_hosters) {
            if (pHost.getHost().equalsIgnoreCase(exclude_hoster))             in_ignore_list=true;
          }
          if (in_ignore_list)           continue;
        }
        if ((limit_to_host != null) && (!limit_to_host.equals(JDFeedMeFeed.HOSTER_ANY_HOSTER))) {
          if (limit_to_host.equals(JDFeedMeFeed.HOSTER_ANY_PREMIUM)) {
            if (!pHost.isPremiumEnabled())             continue;
            Account account=AccountController.getInstance().getValidAccount(pHost.getPlugin());
            if (account == null)             continue;
          }
 else {
            if (!pHost.getHost().equalsIgnoreCase(limit_to_host))             continue;
          }
        }
        if (!pHost.canHandle(link))         continue;
        result+=link + ""String_Node_Str"";
      }
    }
  finally {
    }
  }
  return result;
}"
20766,"public synchronized static JDFeedMeConfig loadXML(String location){
  Thread.currentThread().setContextClassLoader(JDUtilities.getJDClassLoader());
  Object loaded=JDIO.loadObject(JDUtilities.getResourceFile(location),true);
  if (loaded != null)   return (JDFeedMeConfig)loaded;
 else   return new JDFeedMeConfig();
}","public synchronized static JDFeedMeConfig loadXML(String location){
  Thread.currentThread().setContextClassLoader(JDUtilities.getJDClassLoader());
  File xmlFile=JDUtilities.getResourceFile(location);
  if (xmlFile.exists()) {
    Object loaded=JDIO.loadObject(xmlFile,true);
    if (loaded != null)     return (JDFeedMeConfig)loaded;
  }
  return new JDFeedMeConfig();
}"
20767,"@SuppressWarnings(""String_Node_Str"") public synchronized static ArrayList<JDFeedMeFeed> loadXML(String location){
  Thread.currentThread().setContextClassLoader(JDUtilities.getJDClassLoader());
  File xmlFile=JDUtilities.getResourceFile(location);
  Object loaded;
  if (xmlFile.exists()) {
    loaded=JDIO.loadObject(JDUtilities.getResourceFile(location),true);
    if (loaded != null)     return (ArrayList<JDFeedMeFeed>)loaded;
  }
  return new ArrayList<JDFeedMeFeed>();
}","@SuppressWarnings(""String_Node_Str"") public synchronized static ArrayList<JDFeedMeFeed> loadXML(String location){
  Thread.currentThread().setContextClassLoader(JDUtilities.getJDClassLoader());
  File xmlFile=JDUtilities.getResourceFile(location);
  if (xmlFile.exists()) {
    Object loaded=JDIO.loadObject(xmlFile,true);
    if (loaded != null)     return (ArrayList<JDFeedMeFeed>)loaded;
  }
  return new ArrayList<JDFeedMeFeed>();
}"
20768,"@Override protected int getMaxWidth(){
  return 50;
}","@Override protected int getMaxWidth(){
  return 60;
}"
20769,"@Override protected int getMaxWidth(){
  return 50;
}","@Override protected int getMaxWidth(){
  return 60;
}"
20770,"private void prepareBrowser(final Browser br){
  if (br == null) {
    return;
  }
  br.getHeaders().put(""String_Node_Str"",this.ua);
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  br.getHeaders().put(""String_Node_Str"",null);
  br.getHeaders().put(""String_Node_Str"",null);
}","private void prepareBrowser(final Browser br){
  if (br == null) {
    return;
  }
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
}"
20771,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  Form freeForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (freeForm != null) {
    logger.info(""String_Node_Str"");
    br.submitForm(freeForm);
  }
  String url=null;
  Form down=null;
  Form[] allforms=br.getForms();
  if (allforms == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  for (  Form singleform : allforms) {
    if (singleform.containsHTML(""String_Node_Str"")) {
      down=singleform;
      break;
    }
  }
  String captchaId=down.getVarsMap().get(""String_Node_Str"");
  String captchaurl=null;
  if (down == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  URLConnectionAdapter con=null;
  if (br.containsHTML(""String_Node_Str"")) {
    if (captchaId == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    captchaurl=""String_Node_Str"" + captchaId + ""String_Node_Str"";
    con=br.openGetConnection(captchaurl);
    File file=this.getLocalCaptchaFile();
    Browser.download(file,con);
    con.disconnect();
    String code=getCaptchaCode(file,downloadLink);
    down.put(""String_Node_Str"",code);
  }
  down.setMethod(Form.MethodType.POST);
  down.put(""String_Node_Str"",captchaId);
  down.setAction(""String_Node_Str"");
  br.submitForm(down);
  url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null || url.equals(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    int waitThat=60;
    String time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time == null)     time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time != null) {
      logger.info(""String_Node_Str"" + time + ""String_Node_Str"");
      waitThat=Integer.parseInt(time);
    }
    sleep((waitThat + 5) * 1001,downloadLink);
    br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
    br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
    br.postPage(""String_Node_Str"",""String_Node_Str"");
    url=br.toString();
  }
  if (url == null || url.equals(""String_Node_Str"") || !url.startsWith(""String_Node_Str"") || url.length() > 1000) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  sleep(2000,downloadLink);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,1);
  con=dl.getConnection();
  if (con.getResponseCode() == 404) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,null,5 * 60 * 1001);
  }
  if (!con.isOK()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
  }
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  Form freeForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (freeForm == null) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.submitForm(freeForm);
  String url=null;
  Form down=null;
  Form[] allforms=br.getForms();
  if (allforms == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  for (  Form singleform : allforms) {
    if (singleform.containsHTML(""String_Node_Str"")) {
      down=singleform;
      break;
    }
  }
  String captchaId=down.getVarsMap().get(""String_Node_Str"");
  String captchaurl=null;
  if (down == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  URLConnectionAdapter con=null;
  if (br.containsHTML(""String_Node_Str"")) {
    if (captchaId == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    captchaurl=""String_Node_Str"" + captchaId + ""String_Node_Str"";
    con=br.openGetConnection(captchaurl);
    File file=this.getLocalCaptchaFile();
    Browser.download(file,con);
    con.disconnect();
    String code=getCaptchaCode(file,downloadLink);
    down.put(""String_Node_Str"",code);
  }
  down.setMethod(Form.MethodType.POST);
  down.put(""String_Node_Str"",captchaId);
  down.setAction(""String_Node_Str"");
  br.submitForm(down);
  url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null || url.equals(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    int waitThat=60;
    String time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time == null)     time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time != null) {
      logger.info(""String_Node_Str"" + time + ""String_Node_Str"");
      waitThat=Integer.parseInt(time);
    }
    sleep((waitThat + 5) * 1001,downloadLink);
    prepareBrowser(br);
    br.postPage(""String_Node_Str"",""String_Node_Str"");
    url=br.toString();
  }
  if (url == null || url.equals(""String_Node_Str"") || !url.startsWith(""String_Node_Str"") || url.length() > 1000) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  sleep(2000,downloadLink);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,1);
  con=dl.getConnection();
  if (con.getResponseCode() == 404) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,null,5 * 60 * 1001);
  }
  if (!con.isOK()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
  }
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20772,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  prepareBrowser(br);
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
      if (filename == null) {
        filename=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null) {
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesize == null) {
      filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (filename == null || filesize == null) {
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  downloadLink.setFinalFileName(filename.trim().replace(""String_Node_Str"",""String_Node_Str""));
  downloadLink.setDownloadSize(Regex.getSize(filesize.trim()));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
      if (filename == null) {
        filename=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null) {
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesize == null) {
      filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (filename == null || filesize == null) {
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  downloadLink.setFinalFileName(filename.trim().replace(""String_Node_Str"",""String_Node_Str""));
  downloadLink.setDownloadSize(Regex.getSize(filesize.trim()));
  return AvailableStatus.TRUE;
}"
20773,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED);
  br.setFollowRedirects(false);
  Form dlform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (dlform == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.submitForm(dlform);
  for (int i=0; i <= 3; i++) {
    br.setFollowRedirects(false);
    Form captchaform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    String captchaUrl=getCaptchaUrl();
    if (captchaform == null || captchaUrl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaUrl,downloadLink);
    captchaform.put(""String_Node_Str"",code);
    br.submitForm(captchaform);
    if (getCaptchaUrl() != null)     continue;
    if (!br.containsHTML(LINKFRAMEPART)) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    break;
  }
  if (getCaptchaUrl() != null)   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  br.getPage(NEXTPAGE);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=60;
  if (wait != null) {
    logger.info(""String_Node_Str"");
    tt=Integer.parseInt(wait);
  }
  sleep(tt * 1001,downloadLink);
  br.getPage(NEXTPAGE);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
}"
20774,"/** 
 * das controllevent fängt heruntergeladene file ab und wertet sie aus
 */
@SuppressWarnings(""String_Node_Str"") @Override public void onControlEvent(ControlEvent event){
  DownloadLink link;
switch (event.getEventID()) {
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
    if (!(event.getCaller() instanceof PluginForHost))     return;
  link=((SingleDownloadController)event.getParameter()).getDownloadLink();
if (!isLinkSupported(link.getFileOutput())) {
  return;
}
if (this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true) || link.getFilePackage().isPostProcessing()) {
Archive archive=buildArchive(link);
if (archive.isComplete()) {
  this.addToQueue(archive);
}
}
break;
case ControlEvent.CONTROL_ON_FILEOUTPUT:
if (this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_DEEP_EXTRACT,true)) {
try {
File[] list=(File[])event.getParameter();
for (File archiveStartFile : list) {
if (isLinkSupported(archiveStartFile.getAbsolutePath())) {
  Archive ar=buildDummyArchive(archiveStartFile);
  if (ar.isActive())   continue;
  addToQueue(buildDummyArchive(archiveStartFile));
}
}
}
 catch (Exception e) {
JDLogger.exception(e);
}
}
break;
case ControlEvent.CONTROL_LINKLIST_CONTEXT_MENU:
ArrayList<MenuAction> items=(ArrayList<MenuAction>)event.getParameter();
MenuAction m;
MenuAction container=new MenuAction(""String_Node_Str"",0);
container.setIcon(""String_Node_Str"");
items.add(container);
if (event.getCaller() instanceof DownloadLink) {
link=(DownloadLink)event.getCaller();
container.addMenuItem(m=new MenuAction(""String_Node_Str"",1000));
m.setIcon(""String_Node_Str"");
m.setActionListener(this);
boolean isLocalyAvailable=new File(link.getFileOutput()).exists() || new File(link.getStringProperty(DownloadLink.STATIC_OUTPUTFILE,link.getFileOutput())).exists();
if (isLocalyAvailable && isLinkSupported(link.getFileOutput())) {
m.setEnabled(true);
}
 else {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(m=new MenuAction(""String_Node_Str"",1005));
m.setActionListener(this);
m.setSelected(link.getFilePackage().isPostProcessing());
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(new MenuAction(Types.SEPARATOR));
container.addMenuItem(m=new MenuAction(""String_Node_Str"",1003));
m.setActionListener(this);
m.setProperty(""String_Node_Str"",link);
File dir=this.getExtractToPath(link);
while (dir != null && !dir.exists()) {
if (dir.getParentFile() == null) break;
dir=dir.getParentFile();
}
if (dir == null) break;
container.addMenuItem(m=new MenuAction(""String_Node_Str"",1002));
m.setActionListener(this);
link.setProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH + ""String_Node_Str"",dir.getAbsolutePath());
m.setProperty(""String_Node_Str"",link);
}
 else {
FilePackage fp=(FilePackage)event.getCaller();
container.addMenuItem(m=new MenuAction(""String_Node_Str"",1001));
m.setIcon(""String_Node_Str"");
m.setActionListener(this);
m.setProperty(""String_Node_Str"",fp);
container.addMenuItem(m=new MenuAction(""String_Node_Str"",1006));
m.setSelected(fp.isPostProcessing());
m.setActionListener(this);
m.setProperty(""String_Node_Str"",fp);
}
break;
}
}","/** 
 * das controllevent fängt heruntergeladene file ab und wertet sie aus
 */
@SuppressWarnings(""String_Node_Str"") @Override public void onControlEvent(ControlEvent event){
  DownloadLink link;
switch (event.getEventID()) {
case ControlEvent.CONTROL_PLUGIN_INACTIVE:
    if (!(event.getCaller() instanceof PluginForHost))     return;
  link=((SingleDownloadController)event.getParameter()).getDownloadLink();
if (!isLinkSupported(link.getFileOutput())) {
  return;
}
if (this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true)) {
Archive archive=buildArchive(link);
if (archive.isComplete()) {
  this.addToQueue(archive);
}
}
break;
case ControlEvent.CONTROL_ON_FILEOUTPUT:
if (this.getPluginConfig().getBooleanProperty(ExtractionConstants.CONFIG_KEY_DEEP_EXTRACT,true)) {
try {
File[] list=(File[])event.getParameter();
for (File archiveStartFile : list) {
if (isLinkSupported(archiveStartFile.getAbsolutePath())) {
  Archive ar=buildDummyArchive(archiveStartFile);
  if (ar.isActive())   continue;
  addToQueue(buildDummyArchive(archiveStartFile));
}
}
}
 catch (Exception e) {
JDLogger.exception(e);
}
}
break;
case ControlEvent.CONTROL_LINKLIST_CONTEXT_MENU:
ArrayList<MenuAction> items=(ArrayList<MenuAction>)event.getParameter();
MenuAction m;
MenuAction container=new MenuAction(""String_Node_Str"",0);
container.setIcon(""String_Node_Str"");
items.add(container);
if (event.getCaller() instanceof DownloadLink) {
link=(DownloadLink)event.getCaller();
container.addMenuItem(m=new MenuAction(""String_Node_Str"",EXTRACT_LINK));
m.setIcon(""String_Node_Str"");
m.setActionListener(this);
boolean isLocalyAvailable=new File(link.getFileOutput()).exists() || new File(link.getStringProperty(DownloadLink.STATIC_OUTPUTFILE,link.getFileOutput())).exists();
if (isLocalyAvailable && isLinkSupported(link.getFileOutput())) {
m.setEnabled(true);
}
 else {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(m=new MenuAction(""String_Node_Str"",SET_LINK_AUTOEXTRACT));
m.setActionListener(this);
m.setSelected(link.getFilePackage().isPostProcessing());
if (!this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true)) {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",link);
container.addMenuItem(new MenuAction(Types.SEPARATOR));
container.addMenuItem(m=new MenuAction(""String_Node_Str"",SET_EXTRACT_TO));
m.setActionListener(this);
m.setProperty(""String_Node_Str"",link);
File dir=this.getExtractToPath(link);
while (dir != null && !dir.exists()) {
if (dir.getParentFile() == null) break;
dir=dir.getParentFile();
}
if (dir == null) break;
container.addMenuItem(m=new MenuAction(""String_Node_Str"",OPEN_EXTRACT));
m.setActionListener(this);
link.setProperty(ExtractionConstants.DOWNLOADLINK_KEY_EXTRACTEDPATH + ""String_Node_Str"",dir.getAbsolutePath());
m.setProperty(""String_Node_Str"",link);
}
 else {
FilePackage fp=(FilePackage)event.getCaller();
container.addMenuItem(m=new MenuAction(""String_Node_Str"",EXTRACT_PACKAGE));
m.setIcon(""String_Node_Str"");
m.setActionListener(this);
m.setProperty(""String_Node_Str"",fp);
container.addMenuItem(m=new MenuAction(""String_Node_Str"",SET_PACKAGE_AUTOEXTRACT));
m.setSelected(fp.isPostProcessing());
m.setActionListener(this);
if (!this.getPluginConfig().getBooleanProperty(""String_Node_Str"",true)) {
m.setEnabled(false);
}
m.setProperty(""String_Node_Str"",fp);
}
break;
}
}"
20775,"public void extract(){
  try {
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      final File extractTo=new File(archive.getExtractTo().getAbsoluteFile() + File.separator + item.getPath());
      if (item.getSize() == 0) {
        continue;
      }
      if (!extractTo.exists()) {
        if ((!extractTo.getParentFile().exists() && !extractTo.getParentFile().mkdirs()) || !extractTo.createNewFile()) {
          archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_CREATE_ERROR);
          return;
        }
      }
 else {
        if (archive.isOverwriteFiles()) {
          if (!extractTo.delete()) {
            archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_FATAL_ERROR);
            return;
          }
        }
 else {
          con.getArchiv().setExtracted(con.getArchiv().getExtracted() + item.getSize());
          continue;
        }
      }
      MultiCallback call=new MultiCallback(extractTo,con,item.getCRC() > 0 ? true : false);
      ExtractOperationResult res;
      if (item.isEncrypted()) {
        res=item.extractSlow(call,archive.getPassword());
      }
 else {
        res=item.extractSlow(call);
      }
      if (item.getSize() != extractTo.length()) {
        for (        DownloadLink link : getAffectedDownloadLinkFromArchvieFiles(item.getPath())) {
          archive.addCrcError(link);
        }
        archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_CRC_ERROR);
        return;
      }
      if (res != ExtractOperationResult.OK) {
        archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_FATAL_ERROR);
        return;
      }
      postprocessing.add(extractTo.getAbsolutePath());
    }
  }
 catch (  SevenZipException e) {
    archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_FATAL_ERROR);
    return;
  }
catch (  IOException e) {
    e.printStackTrace();
    archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_CREATE_ERROR);
    return;
  }
  archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_SUCCESS);
}","public void extract(){
  try {
    for (    ISimpleInArchiveItem item : inArchive.getSimpleInterface().getArchiveItems()) {
      final File extractTo=new File(archive.getExtractTo().getAbsoluteFile() + File.separator + item.getPath());
      if (item.getSize() == 0) {
        continue;
      }
      if (!extractTo.exists()) {
        if ((!extractTo.getParentFile().exists() && !extractTo.getParentFile().mkdirs()) || !extractTo.createNewFile()) {
          archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_CREATE_ERROR);
          return;
        }
      }
 else {
        if (archive.isOverwriteFiles()) {
          if (!extractTo.delete()) {
            archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_FATAL_ERROR);
            return;
          }
        }
 else {
          con.getArchiv().setExtracted(con.getArchiv().getExtracted() + item.getSize());
          continue;
        }
      }
      MultiCallback call=new MultiCallback(extractTo,this,item.getCRC() > 0 ? true : false);
      ExtractOperationResult res;
      if (item.isEncrypted()) {
        res=item.extractSlow(call,archive.getPassword());
      }
 else {
        res=item.extractSlow(call);
      }
      updatedisplay();
      if (item.getSize() != extractTo.length()) {
        for (        DownloadLink link : getAffectedDownloadLinkFromArchvieFiles(item.getPath())) {
          archive.addCrcError(link);
        }
        archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_CRC_ERROR);
        return;
      }
      if (res != ExtractOperationResult.OK) {
        archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_FATAL_ERROR);
        return;
      }
      postprocessing.add(extractTo.getAbsolutePath());
    }
  }
 catch (  SevenZipException e) {
    archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_FATAL_ERROR);
    return;
  }
catch (  IOException e) {
    e.printStackTrace();
    archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_CREATE_ERROR);
    return;
  }
  archive.setExitCode(ExtractionControllerConstants.EXIT_CODE_SUCCESS);
}"
20776,"MultiCallback(File file,ExtractionController con,boolean shouldCrc) throws FileNotFoundException {
  this.con=con;
  this.shouldCrc=shouldCrc;
  fos=new FileOutputStream(file,true);
  time=System.currentTimeMillis();
}","MultiCallback(File file,Multi multi,boolean shouldCrc) throws FileNotFoundException {
  this.multi=multi;
  this.shouldCrc=shouldCrc;
  fos=new FileOutputStream(file,true);
}"
20777,"public int write(byte[] data) throws SevenZipException {
  try {
    fos.write(data);
    con.getArchiv().setExtracted(con.getArchiv().getExtracted() + data.length);
    if ((System.currentTimeMillis() - time) > 1000) {
      con.fireEvent(ExtractionConstants.WRAPPER_ON_PROGRESS);
      time=System.currentTimeMillis();
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return data.length;
}","public int write(byte[] data) throws SevenZipException {
  try {
    fos.write(data);
    multi.getArchive().setExtracted(multi.getArchive().getExtracted() + data.length);
    multi.updatedisplay();
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return data.length;
}"
20778,"@Override public void handleFree(final DownloadLink downloadLink) throws Exception {
  String downloadUrl=null;
  String passCode=null;
  passCode=null;
  this.br.setCookiesExclusive(false);
  this.br.forceDebug(true);
  final long waited=System.currentTimeMillis() - FileSonicCom.LAST_FREE_DOWNLOAD;
  if (FileSonicCom.LAST_FREE_DOWNLOAD > 0 && waited < 300000) {
    FileSonicCom.LAST_FREE_DOWNLOAD=0;
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,600000 - waited);
  }
  this.requestFileInformation(downloadLink);
  passCode=null;
  final String id=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  this.br.postPage(""String_Node_Str"" + id + ""String_Node_Str"",""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str"")) {
    String size=br.getRegex(""String_Node_Str"").getMatch(0);
    if (size != null) {
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + size.trim() + ""String_Node_Str"");
    }
 else {
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
  this.removeComments();
  if (this.br.containsHTML(""String_Node_Str"")) {
    Plugin.logger.info(""String_Node_Str"");
    this.br.getPage(""String_Node_Str"" + id + ""String_Node_Str"");
    this.removeComments();
  }
  this.br.setFollowRedirects(true);
  String re=""String_Node_Str"";
  downloadUrl=this.br.getRegex(re).getMatch(0);
  if (downloadUrl == null) {
    this.errorHandling(downloadLink);
    final String countDownDelay=this.br.getRegex(""String_Node_Str"").getMatch(0);
    if (countDownDelay != null) {
      if (Long.parseLong(countDownDelay) > 300) {
        throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Long.parseLong(countDownDelay) * 1001l);
      }
      this.sleep(Long.parseLong(countDownDelay) * 1001,downloadLink);
      this.br.postPage(""String_Node_Str"" + id + ""String_Node_Str"",""String_Node_Str"");
      this.removeComments();
    }
    if (this.br.containsHTML(""String_Node_Str"")) {
      final PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      final jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(this.br);
      rc.parse();
      rc.load();
      final File cf=rc.downloadCaptcha(this.getLocalCaptchaFile());
      final String code=this.getCaptchaCode(cf,downloadLink);
      rc.setCode(code);
      if (this.br.containsHTML(""String_Node_Str"")) {
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
    }
    if (this.br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      final Form form=this.br.getForm(0);
      form.put(""String_Node_Str"",Encoding.urlEncode(passCode));
      this.br.submitForm(form);
    }
    downloadUrl=this.br.getRegex(re).getMatch(0);
  }
  if (downloadUrl == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  this.dl=jd.plugins.BrowserAdapter.openDownload(this.br,downloadLink,downloadUrl,true,1);
  if (this.dl.getConnection() != null && this.dl.getConnection().getContentType() != null && (this.dl.getConnection().getContentType().contains(""String_Node_Str"") || this.dl.getConnection().getContentType().contains(""String_Node_Str""))) {
    this.br.followConnection();
    this.errorHandling(downloadLink);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  this.dl.setFilenameFix(true);
  this.dl.startDownload();
  FileSonicCom.LAST_FREE_DOWNLOAD=System.currentTimeMillis();
}","@Override public void handleFree(final DownloadLink downloadLink) throws Exception {
  String downloadUrl=null;
  String passCode=null;
  passCode=null;
  this.br.setCookiesExclusive(false);
  this.br.forceDebug(true);
  final long waited=System.currentTimeMillis() - FileSonicCom.LAST_FREE_DOWNLOAD;
  if (FileSonicCom.LAST_FREE_DOWNLOAD > 0 && waited < 300000) {
    FileSonicCom.LAST_FREE_DOWNLOAD=0;
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,600000 - waited);
  }
  this.requestFileInformation(downloadLink);
  passCode=null;
  final String id=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  this.br.postPage(""String_Node_Str"" + id + ""String_Node_Str"",""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str"")) {
    String size=br.getRegex(""String_Node_Str"").getMatch(0);
    if (size != null) {
      throw new PluginException(LinkStatus.ERROR_FATAL,JDL.LF(""String_Node_Str"",""String_Node_Str"",size.trim()));
    }
 else {
      throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
  }
  this.removeComments();
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,JDL.L(""String_Node_Str"",""String_Node_Str""),5 * 60 * 1000l);
  }
  this.br.setFollowRedirects(true);
  String re=""String_Node_Str"";
  downloadUrl=this.br.getRegex(re).getMatch(0);
  if (downloadUrl == null) {
    this.errorHandling(downloadLink);
    final String countDownDelay=this.br.getRegex(""String_Node_Str"").getMatch(0);
    if (countDownDelay != null) {
      if (Long.parseLong(countDownDelay) > 300) {
        throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Long.parseLong(countDownDelay) * 1001l);
      }
      this.sleep(Long.parseLong(countDownDelay) * 1001,downloadLink);
      this.br.postPage(""String_Node_Str"" + id + ""String_Node_Str"",""String_Node_Str"");
      this.removeComments();
    }
    if (this.br.containsHTML(""String_Node_Str"")) {
      final PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
      final jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(this.br);
      rc.parse();
      rc.load();
      final File cf=rc.downloadCaptcha(this.getLocalCaptchaFile());
      final String code=this.getCaptchaCode(cf,downloadLink);
      rc.setCode(code);
      if (this.br.containsHTML(""String_Node_Str"")) {
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
    }
    if (this.br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      final Form form=this.br.getForm(0);
      form.put(""String_Node_Str"",Encoding.urlEncode(passCode));
      this.br.submitForm(form);
    }
    downloadUrl=this.br.getRegex(re).getMatch(0);
  }
  if (downloadUrl == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  this.dl=jd.plugins.BrowserAdapter.openDownload(this.br,downloadLink,downloadUrl,true,1);
  if (this.dl.getConnection() != null && this.dl.getConnection().getContentType() != null && (this.dl.getConnection().getContentType().contains(""String_Node_Str"") || this.dl.getConnection().getContentType().contains(""String_Node_Str""))) {
    this.br.followConnection();
    this.errorHandling(downloadLink);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  this.dl.setFilenameFix(true);
  this.dl.startDownload();
  FileSonicCom.LAST_FREE_DOWNLOAD=System.currentTimeMillis();
}"
20779,"private void errorHandling(final DownloadLink downloadLink) throws PluginException {
  if (this.br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  }
  if (this.br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,""String_Node_Str"",10 * 60 * 1000l);
  }
  if (this.br.containsHTML(""String_Node_Str"")) {
    downloadLink.setProperty(""String_Node_Str"",null);
    throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
  if (this.br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",20 * 60 * 1000l);
  }
}","private void errorHandling(final DownloadLink downloadLink) throws PluginException {
  if (this.br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
  if (this.br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
  }
  if (this.br.containsHTML(""String_Node_Str"")) {
    downloadLink.setProperty(""String_Node_Str"",null);
    throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
  if (this.br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),20 * 60 * 1000l);
  }
}"
20780,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException, IOException, InterruptedException {
  this.setBrowserExclusive();
  prepareBrowser(br);
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (filename.contains(""String_Node_Str"")) {
    downloadLink.setName(filename);
  }
 else {
    downloadLink.setFinalFileName(filename);
  }
  downloadLink.setDownloadSize(Regex.getSize(filesize.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException, IOException, InterruptedException {
  this.setBrowserExclusive();
  prepareBrowser(br);
  br.getPage(downloadLink.getDownloadURL());
  if (br.getRedirectLocation() != null) {
    String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
    if (!br.getRedirectLocation().contains(fileID)) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"");
    downloadLink.setUrlDownload(br.getRedirectLocation());
    br.getPage(downloadLink.getDownloadURL());
  }
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (filename.contains(""String_Node_Str"")) {
    downloadLink.setName(filename);
  }
 else {
    downloadLink.setFinalFileName(filename);
  }
  downloadLink.setDownloadSize(Regex.getSize(filesize.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}"
20781,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  String fid=br.getRegex(""String_Node_Str"").getMatch(0);
  if (!br.containsHTML(""String_Node_Str"") || fid == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  boolean failed=true;
  for (int i=0; i <= 3; i++) {
    br.postPage(""String_Node_Str"",""String_Node_Str"" + fid + ""String_Node_Str""+ getCaptchaCode(""String_Node_Str"" + new Random().nextInt(1000),downloadLink));
    if (br.containsHTML(""String_Node_Str""))     continue;
    failed=false;
    break;
  }
  if (failed)   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  String passCode=null;
  requestFileInformation(downloadLink);
  String fid=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(PWPROTECTED)) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    br.postPage(INDEXPAGE,""String_Node_Str"" + fid + ""String_Node_Str""+ passCode);
    if (br.containsHTML(PWPROTECTED))     throw new PluginException(LinkStatus.ERROR_RETRY);
  }
 else {
    if (!br.containsHTML(""String_Node_Str"") || fid == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  boolean failed=true;
  for (int i=0; i <= 3; i++) {
    br.postPage(INDEXPAGE,""String_Node_Str"" + fid + ""String_Node_Str""+ getCaptchaCode(""String_Node_Str"" + new Random().nextInt(1000),downloadLink));
    if (br.containsHTML(""String_Node_Str""))     continue;
    failed=false;
    break;
  }
  if (failed)   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20782,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCustomCharset(""String_Node_Str"");
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  link.setName(filename.trim());
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCustomCharset(""String_Node_Str"");
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  link.setName(filename.trim());
  link.setDownloadSize(Regex.getSize(filesize));
  String md5=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5 != null)   link.setMD5Hash(md5.trim());
  if (br.containsHTML(PWPROTECTED))   link.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
  return AvailableStatus.TRUE;
}"
20783,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  String containerId=new Regex(parameter,""String_Node_Str"").getMatch(0);
  br.setReadTimeout(150000);
  try {
    br.getPage(""String_Node_Str"" + containerId);
  }
 catch (  Exception e) {
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
    }
    throw e;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
  Form password=br.getForm(0);
  if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
    String latestPassword=this.getPluginConfig().getStringProperty(""String_Node_Str"");
    if (latestPassword != null) {
      password.put(""String_Node_Str"",latestPassword);
      br.submitForm(password);
    }
    password=br.getForm(0);
    if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
      latestPassword=PluginUtils.askPassword(this);
      password.put(""String_Node_Str"",latestPassword);
      br.setDebug(true);
      br.submitForm(password);
      password=br.getForm(0);
      if (password != null && password.hasInputFieldByName(""String_Node_Str""))       throw new DecrypterException(DecrypterException.PASSWORD);
      getPluginConfig().setProperty(""String_Node_Str"",latestPassword);
      getPluginConfig().save();
    }
  }
  boolean valid=true;
  if (br.containsHTML(""String_Node_Str"")) {
    int max_attempts=3;
    for (int attempts=0; attempts < max_attempts; attempts++) {
      if (valid && attempts > 0)       break;
      Form[] captchas=br.getForms();
      String url=null;
      for (      Form captcha : captchas) {
        if (captcha != null && br.containsHTML(""String_Node_Str"")) {
          url=captcha.getRegex(""String_Node_Str"").getMatch(0);
          if (url == null)           url=captcha.getRegex(""String_Node_Str"").getMatch(1);
          if (url == null && captcha != null && !captcha.hasInputFieldByName(""String_Node_Str""))           url=captcha.getRegex(""String_Node_Str"").getMatch(0);
          if (url != null) {
            valid=false;
            String capDescription=captcha.getRegex(""String_Node_Str"").getMatch(0);
            File file=this.getLocalCaptchaFile();
            br.cloneBrowser().getDownload(file,url);
            progress.setInitials(String.valueOf(max_attempts - attempts));
            Point p=UserIO.getInstance().requestClickPositionDialog(file,""String_Node_Str"",capDescription);
            captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
            captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
            br.submitForm(captcha);
            if (!br.containsHTML(""String_Node_Str"") && br.containsHTML(""String_Node_Str"") || br.getForms() != null)             valid=true;
          }
        }
      }
    }
    progress.setInitials(""String_Node_Str"");
  }
  if (!valid)   throw new DecrypterException(DecrypterException.CAPTCHA);
  String[] containers=br.getRegex(""String_Node_Str"").getColumn(0);
  HashMap<String,String> map=new HashMap<String,String>();
  for (  String c : containers) {
    Context cx=null;
    try {
      cx=ContextFactory.getGlobal().enterContext();
      Scriptable scope=cx.initStandardObjects();
      c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
      String code=Context.toString(result);
      String[] row=new Regex(code,""String_Node_Str"").getRow(0);
      if (row == null && br.containsHTML(""String_Node_Str"")) {
        row=new Regex(code,""String_Node_Str"").getRow(0);
      }
      if (row != null) {
        map.put(row[1],row[0]);
      }
    }
  finally {
      if (cx != null)       Context.exit();
    }
  }
  File container=null;
  if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",true);
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",true);
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",true);
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",true);
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
  if (container != null) {
    logger.info(""String_Node_Str"" + container);
    decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
    container.delete();
    if (decryptedLinks.size() > 0)     return decryptedLinks;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    br.getPage(""String_Node_Str"" + containerId);
    Form[] forms=br.getForms();
    progress.setRange(forms.length - 8);
    for (    Form form : forms) {
      Browser clone;
      if (form.getInputField(""String_Node_Str"") != null && form.getInputField(""String_Node_Str"").getValue() != null && form.getInputField(""String_Node_Str"").getValue().length() > 0) {
        progress.increase(1);
        clone=br.cloneBrowser();
        clone.submitForm(form);
        String[] srcs=clone.getRegex(""String_Node_Str"").getColumn(0);
        found_out_pl:         for (        String col : srcs) {
          col=Encoding.htmlDecode(col);
          if (col.contains(""String_Node_Str"")) {
            clone.getPage(col);
            Thread.sleep(600);
            if (clone.containsHTML(""String_Node_Str"")) {
              String[] evals=clone.getRegex(""String_Node_Str"").getColumn(0);
              for (              String c : evals) {
                Context cx=ContextFactory.getGlobal().enterContext();
                Scriptable scope=cx.initStandardObjects();
                c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
                String code=Context.toString(result);
                if (code.contains(""String_Node_Str"") || code.contains(""String_Node_Str"")) {
                  String versch;
                  versch=new Regex(code,""String_Node_Str"").getMatch(0);
                  if (versch == null) {
                    versch=new Regex(code,""String_Node_Str"").getMatch(0);
                    versch=Encoding.Base64Decode(versch);
                    versch=new Regex(versch,""String_Node_Str"").getMatch(0);
                  }
                  versch=Encoding.Base64Decode(versch);
                  versch=Encoding.htmlDecode(versch);
                  if (versch != null)                   decryptedLinks.add(this.createDownloadlink(versch));
                }
              }
            }
            break found_out_pl;
          }
        }
      }
    }
  }
  if (decryptedLinks.size() == 0) {
    throw new Exception(""String_Node_Str"");
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  String containerId=new Regex(parameter,""String_Node_Str"").getMatch(0);
  br.setReadTimeout(150000);
  try {
    br.getPage(""String_Node_Str"" + containerId);
  }
 catch (  Exception e) {
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"" + e.getLocalizedMessage());
    }
    throw e;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
  Form password=br.getForm(0);
  if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
    String latestPassword=this.getPluginConfig().getStringProperty(""String_Node_Str"");
    if (latestPassword != null) {
      password.put(""String_Node_Str"",latestPassword);
      br.submitForm(password);
    }
    password=br.getForm(0);
    if (password != null && password.hasInputFieldByName(""String_Node_Str"")) {
      latestPassword=PluginUtils.askPassword(this);
      password.put(""String_Node_Str"",latestPassword);
      br.setDebug(true);
      br.submitForm(password);
      password=br.getForm(0);
      if (password != null && password.hasInputFieldByName(""String_Node_Str""))       throw new DecrypterException(DecrypterException.PASSWORD);
      getPluginConfig().setProperty(""String_Node_Str"",latestPassword);
      getPluginConfig().save();
    }
  }
  boolean valid=true;
  if (br.containsHTML(""String_Node_Str"")) {
    int max_attempts=3;
    for (int attempts=0; attempts < max_attempts; attempts++) {
      if (valid && attempts > 0)       break;
      Form[] captchas=br.getForms();
      String url=null;
      for (      Form captcha : captchas) {
        if (captcha != null && br.containsHTML(""String_Node_Str"")) {
          url=captcha.getRegex(""String_Node_Str"").getMatch(0);
          if (url == null)           url=captcha.getRegex(""String_Node_Str"").getMatch(1);
          if (url == null && captcha != null && !captcha.hasInputFieldByName(""String_Node_Str""))           url=captcha.getRegex(""String_Node_Str"").getMatch(0);
          if (url != null) {
            valid=false;
            String capDescription=captcha.getRegex(""String_Node_Str"").getMatch(0);
            File file=this.getLocalCaptchaFile();
            br.cloneBrowser().getDownload(file,url);
            Point p=UserIO.getInstance().requestClickPositionDialog(file,""String_Node_Str"" + String.valueOf(max_attempts - attempts),capDescription);
            captcha.put(""String_Node_Str"",p.x + ""String_Node_Str"");
            captcha.put(""String_Node_Str"",p.y + ""String_Node_Str"");
            br.submitForm(captcha);
            if (!br.containsHTML(""String_Node_Str"") && br.containsHTML(""String_Node_Str""))             valid=true;
          }
        }
      }
    }
  }
  if (!valid)   throw new DecrypterException(DecrypterException.CAPTCHA);
  String[] containers=br.getRegex(""String_Node_Str"").getColumn(0);
  HashMap<String,String> map=new HashMap<String,String>();
  for (  String c : containers) {
    Context cx=null;
    try {
      cx=ContextFactory.getGlobal().enterContext();
      Scriptable scope=cx.initStandardObjects();
      c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
      Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
      String code=Context.toString(result);
      String[] row=new Regex(code,""String_Node_Str"").getRow(0);
      if (row == null && br.containsHTML(""String_Node_Str"")) {
        row=new Regex(code,""String_Node_Str"").getRow(0);
      }
      if (row != null) {
        map.put(row[1],row[0]);
      }
    }
  finally {
      if (cx != null)       Context.exit();
    }
  }
  File container=null;
  if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",true);
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",true);
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",true);
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
 else   if (map.containsKey(""String_Node_Str"")) {
    container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",true);
    if (!container.exists())     container.createNewFile();
    br.cloneBrowser().getDownload(container,map.get(""String_Node_Str""));
  }
  if (container != null) {
    logger.info(""String_Node_Str"" + container);
    decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
    container.delete();
    if (decryptedLinks.size() > 0)     return decryptedLinks;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    br.getPage(""String_Node_Str"" + containerId);
    Form[] forms=br.getForms();
    progress.setRange(forms.length - 8);
    for (    Form form : forms) {
      Browser clone;
      if (form.getInputField(""String_Node_Str"") != null && form.getInputField(""String_Node_Str"").getValue() != null && form.getInputField(""String_Node_Str"").getValue().length() > 0) {
        progress.increase(1);
        clone=br.cloneBrowser();
        clone.submitForm(form);
        String[] srcs=clone.getRegex(""String_Node_Str"").getColumn(0);
        found_out_pl:         for (        String col : srcs) {
          col=Encoding.htmlDecode(col);
          if (col.contains(""String_Node_Str"")) {
            clone.getPage(col);
            Thread.sleep(600);
            if (clone.containsHTML(""String_Node_Str"")) {
              String[] evals=clone.getRegex(""String_Node_Str"").getColumn(0);
              for (              String c : evals) {
                Context cx=ContextFactory.getGlobal().enterContext();
                Scriptable scope=cx.initStandardObjects();
                c=c.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
                Object result=cx.evaluateString(scope,c,""String_Node_Str"",1,null);
                String code=Context.toString(result);
                if (code.contains(""String_Node_Str"") || code.contains(""String_Node_Str"")) {
                  String versch;
                  versch=new Regex(code,""String_Node_Str"").getMatch(0);
                  if (versch == null) {
                    versch=new Regex(code,""String_Node_Str"").getMatch(0);
                    versch=Encoding.Base64Decode(versch);
                    versch=new Regex(versch,""String_Node_Str"").getMatch(0);
                  }
                  versch=Encoding.Base64Decode(versch);
                  versch=Encoding.htmlDecode(versch);
                  if (versch != null)                   decryptedLinks.add(this.createDownloadlink(versch));
                }
              }
            }
            break found_out_pl;
          }
        }
      }
    }
  }
  if (decryptedLinks.size() == 0) {
    throw new Exception(""String_Node_Str"");
  }
  return decryptedLinks;
}"
20784,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  int waitThis=20;
  if (!downloadLink.getDownloadURL().contains(""String_Node_Str"")) {
    waitThis=10;
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     waitThis=Integer.parseInt(wait);
  }
  sleep(waitThis * 1001l,downloadLink);
  br.postPage(br.getURL(),""String_Node_Str"");
  Random rndCookie=new Random();
  int rndX=rndCookie.nextInt(999999999 - 100000000) + 100000000;
  int rndY=rndCookie.nextInt(99999999 - 10000000) + 10000000;
  long ts=System.currentTimeMillis();
  br.setCookie(MAINPAGE,""String_Node_Str"",rndY + ""String_Node_Str"" + rndX+ ""String_Node_Str""+ ts+ ""String_Node_Str""+ ts+ ""String_Node_Str""+ ts+ ""String_Node_Str"");
  br.setCookie(MAINPAGE,""String_Node_Str"",rndY + ""String_Node_Str"" + ts);
  br.setCookie(MAINPAGE,""String_Node_Str"",""String_Node_Str"" + rndY + ""String_Node_Str"");
  br.setCookie(MAINPAGE,""String_Node_Str"",rndY + ""String_Node_Str"" + ts+ ""String_Node_Str"");
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if ((dllink == null) && br.containsHTML(""String_Node_Str"")) {
      String[] dl_id=br.getRequest().getUrl().getPath().split(""String_Node_Str"");
      String appendLink=""String_Node_Str"";
      dllink=""String_Node_Str"" + dl_id[dl_id.length - 1] + ""String_Node_Str"";
      String referer=dllink.replace(""String_Node_Str"",""String_Node_Str"");
      br.setHeader(""String_Node_Str"",referer);
      br.setHeader(""String_Node_Str"",""String_Node_Str"");
      br.getPage(dllink + appendLink);
      String part1=br.getRegex(""String_Node_Str"").getMatch(0);
      String part2=br.getRegex(""String_Node_Str"").getMatch(0).replace(""String_Node_Str"",""String_Node_Str"");
      dllink=""String_Node_Str"" + part1 + ""String_Node_Str""+ part2;
      if (part1 == null || part2 == null)       dllink=null;
    }
 else {
      String part1=br.getRegex(""String_Node_Str"").getMatch(0);
      String part2=br.getRegex(""String_Node_Str"").getMatch(0);
      String part3=br.getRegex(""String_Node_Str"").getMatch(0);
      if (part1 == null || part2 == null || part3 == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      dllink=""String_Node_Str"" + part1 + ""String_Node_Str""+ part2+ ""String_Node_Str""+ part3;
      int secondWait=10;
      String secondWaitRegexed=br.getRegex(""String_Node_Str"").getMatch(0);
      if (secondWaitRegexed != null)       secondWait=Integer.parseInt(secondWaitRegexed);
      sleep(secondWait * 1001l,downloadLink);
    }
  }
  dl=BrowserAdapter.openDownload(br,downloadLink,dllink,true,-10);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.getURL() != null && br.getURL().contains(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  int waitThis=20;
  if (!downloadLink.getDownloadURL().contains(""String_Node_Str"")) {
    waitThis=10;
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     waitThis=Integer.parseInt(wait);
  }
  sleep(waitThis * 1001l,downloadLink);
  br.postPage(br.getURL(),""String_Node_Str"");
  Random rndCookie=new Random();
  int rndX=rndCookie.nextInt(999999999 - 100000000) + 100000000;
  int rndY=rndCookie.nextInt(99999999 - 10000000) + 10000000;
  long ts=System.currentTimeMillis();
  br.setCookie(MAINPAGE,""String_Node_Str"",rndY + ""String_Node_Str"" + rndX+ ""String_Node_Str""+ ts+ ""String_Node_Str""+ ts+ ""String_Node_Str""+ ts+ ""String_Node_Str"");
  br.setCookie(MAINPAGE,""String_Node_Str"",rndY + ""String_Node_Str"" + ts);
  br.setCookie(MAINPAGE,""String_Node_Str"",""String_Node_Str"" + rndY + ""String_Node_Str"");
  br.setCookie(MAINPAGE,""String_Node_Str"",rndY + ""String_Node_Str"" + ts+ ""String_Node_Str"");
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if ((dllink == null) && br.containsHTML(""String_Node_Str"")) {
      String[] dl_id=br.getRequest().getUrl().getPath().split(""String_Node_Str"");
      String appendLink=""String_Node_Str"";
      dllink=""String_Node_Str"" + dl_id[dl_id.length - 1] + ""String_Node_Str"";
      br.getPage(dllink + appendLink);
      String part1=br.getRegex(""String_Node_Str"").getMatch(0);
      String part2=br.getRegex(""String_Node_Str"").getMatch(0).replace(""String_Node_Str"",""String_Node_Str"");
      dllink=""String_Node_Str"" + part1 + ""String_Node_Str""+ part2;
      if (part1 == null || part2 == null)       dllink=null;
    }
 else {
      String part1=br.getRegex(""String_Node_Str"").getMatch(0);
      String part2=br.getRegex(""String_Node_Str"").getMatch(0);
      String part3=br.getRegex(""String_Node_Str"").getMatch(0);
      if (part1 == null || part2 == null || part3 == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      dllink=""String_Node_Str"" + part1 + ""String_Node_Str""+ part2+ ""String_Node_Str""+ part3;
      int secondWait=10;
      String secondWaitRegexed=br.getRegex(""String_Node_Str"").getMatch(0);
      if (secondWaitRegexed != null)       secondWait=Integer.parseInt(secondWaitRegexed);
      sleep(secondWait * 1001l,downloadLink);
    }
  }
  dl=BrowserAdapter.openDownload(br,downloadLink,dllink,true,-10);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.getURL() != null && br.getURL().contains(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20785,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  if (br.containsHTML(""String_Node_Str"")) {
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait == null)     wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait) * 1001l);
 else     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED);
  }
  String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  String tempID=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileID == null || tempID == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  br.postPage(""String_Node_Str"" + fileID + ""String_Node_Str"",""String_Node_Str"" + tempID);
  String rgexedWait=br.getRegex(""String_Node_Str"").getMatch(0);
  int wait=45;
  if (rgexedWait != null) {
    wait=Integer.parseInt(rgexedWait);
    logger.info(""String_Node_Str"" + wait);
  }
  wait+=3;
  sleep(wait * 1001l,downloadLink);
  br.postPage(""String_Node_Str"" + fileID + ""String_Node_Str"",""String_Node_Str"" + tempID);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  if (br.containsHTML(""String_Node_Str"")) {
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait == null)     wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait) * 1001l);
 else     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED);
  }
  String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  String tempID=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileID == null || tempID == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  br.postPage(""String_Node_Str"" + fileID + ""String_Node_Str"",""String_Node_Str"" + tempID);
  String rgexedWait=br.getRegex(""String_Node_Str"").getMatch(0);
  int wait=45;
  if (rgexedWait != null) {
    wait=Integer.parseInt(rgexedWait);
    logger.info(""String_Node_Str"" + wait);
  }
  wait+=3;
  sleep(wait * 1001l,downloadLink);
  br.postPage(""String_Node_Str"" + fileID + ""String_Node_Str"",""String_Node_Str"" + tempID);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dllink=dllink.replace(""String_Node_Str"",""String_Node_Str"");
  logger.info(""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20786,"public NetUploadedCom(PluginWrapper wrapper){
  super(wrapper);
}","public NetUploadedCom(PluginWrapper wrapper){
  super(wrapper);
  this.enablePremium(COOKIE_HOST + ""String_Node_Str"");
}"
20787,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  String addedLink=downloadLink.getDownloadURL();
  br.setFollowRedirects(false);
  br.postPage(addedLink,""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,""String_Node_Str"");
  int iwait=60;
  String regexedTime=br.getRegex(""String_Node_Str"").getMatch(0);
  if (regexedTime == null)   regexedTime=br.getRegex(""String_Node_Str"").getMatch(0);
  if (regexedTime != null)   iwait=Integer.parseInt(regexedTime);
  String ipBlockedTime=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ipBlockedTime == null)   ipBlockedTime=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ipBlockedTime != null)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(ipBlockedTime) * 60 * 1001l);
  String s=br.getRegex(""String_Node_Str"").getMatch(0);
  if (s == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  sleep(iwait * 1001l,downloadLink);
  br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + s + ""String_Node_Str""+ addedLink);
  s=br.getRegex(""String_Node_Str"").getMatch(0);
  if (s == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + s + ""String_Node_Str""+ addedLink);
  if (br.containsHTML(CAPTCHATEXT)) {
    logger.info(""String_Node_Str"");
    for (int i=0; i <= 5; i++) {
      String code=getCaptchaCode(""String_Node_Str"",downloadLink);
      String post=""String_Node_Str"" + s + ""String_Node_Str""+ addedLink+ ""String_Node_Str""+ code;
      br.postPage(downloadLink.getDownloadURL(),post);
      if (!br.containsHTML(CAPTCHATEXT))       break;
    }
    if (br.containsHTML(CAPTCHATEXT))     throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
 else {
    logger.info(""String_Node_Str"");
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  if (br.containsHTML(FATALSERVERERROR))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  String addedLink=downloadLink.getDownloadURL();
  br.setFollowRedirects(false);
  br.postPage(addedLink,""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,""String_Node_Str"");
  int iwait=60;
  String regexedTime=br.getRegex(""String_Node_Str"").getMatch(0);
  if (regexedTime == null)   regexedTime=br.getRegex(""String_Node_Str"").getMatch(0);
  if (regexedTime != null)   iwait=Integer.parseInt(regexedTime);
  String ipBlockedTime=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ipBlockedTime == null)   ipBlockedTime=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ipBlockedTime != null)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(ipBlockedTime) * 60 * 1001l);
  String s=br.getRegex(""String_Node_Str"").getMatch(0);
  if (s == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  sleep(iwait * 1001l,downloadLink);
  br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + s + ""String_Node_Str""+ addedLink);
  s=br.getRegex(""String_Node_Str"").getMatch(0);
  if (s == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + s + ""String_Node_Str""+ addedLink);
  if (br.containsHTML(CAPTCHATEXT)) {
    logger.info(""String_Node_Str"");
    for (int i=0; i <= 5; i++) {
      String code=getCaptchaCode(""String_Node_Str"",downloadLink);
      String post=""String_Node_Str"" + s + ""String_Node_Str""+ addedLink+ ""String_Node_Str""+ code;
      br.postPage(downloadLink.getDownloadURL(),post);
      if (!br.containsHTML(CAPTCHATEXT))       break;
    }
    if (br.containsHTML(CAPTCHATEXT))     throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
 else {
    logger.info(""String_Node_Str"");
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(FATALSERVERERROR))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20788,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null) {
    logger.warning(""String_Node_Str"" + filename);
    logger.warning(""String_Node_Str"" + filesize);
    logger.warning(br.toString());
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  link.setName(filename.trim());
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(FATALSERVERERROR))   return AvailableStatus.UNCHECKABLE;
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null) {
    logger.warning(""String_Node_Str"" + filename);
    logger.warning(""String_Node_Str"" + filesize);
    logger.warning(br.toString());
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  link.setName(filename.trim());
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
20789,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (!downloadLink.isAvailable()) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  handleFree0(downloadLink);
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (!downloadLink.isAvailable())   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  handleFree0(downloadLink);
}"
20790,"public void handleFree0(DownloadLink link) throws Exception {
  checkErrors();
  String fileID=br.getRegex(FILEIDREGEX).getMatch(0);
  String code=new Regex(link.getDownloadURL(),CODEREGEX).getMatch(0);
  if (fileID == null || code == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
    return;
  }
  logger.info(""String_Node_Str"");
  br.postPage(link.getDownloadURL(),""String_Node_Str"" + fileID + ""String_Node_Str""+ code);
  checkErrors();
  String redirect=getDownloadUrl(link,fileID,code);
  br.setFollowRedirects(false);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,redirect,true,1);
  handleDownloadErrors();
  dl.setFilenameFix(true);
  dl.startDownload();
}","public void handleFree0(DownloadLink link) throws Exception {
  if (!link.getDownloadURL().contains(""String_Node_Str""))   link.setUrlDownload(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
  checkErrors();
  String fileID=br.getRegex(FILEIDREGEX).getMatch(0);
  String code=new Regex(link.getDownloadURL(),CODEREGEX).getMatch(0);
  if (fileID == null || code == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
    return;
  }
  logger.info(""String_Node_Str"");
  br.postPage(link.getDownloadURL(),""String_Node_Str"" + fileID + ""String_Node_Str""+ code);
  checkErrors();
  String redirect=getDownloadUrl(link,fileID,code);
  br.setFollowRedirects(false);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,redirect,true,1);
  handleDownloadErrors();
  dl.setFilenameFix(true);
  dl.startDownload();
}"
20791,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(false);
  if (iHaveToWait)   goToSleep(downloadLink);
  URLConnectionAdapter con=br.openGetConnection(downloadLink.getDownloadURL());
  if (con.getContentType().contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      br.getPage(downloadLink.getStringProperty(""String_Node_Str"",null));
      goToSleep(downloadLink);
    }
    String finallink=br.getRegex(DLLINKREGEX).getMatch(0);
    if (finallink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    downloadLink.setUrlDownload(finallink);
    con.disconnect();
  }
 else {
    logger.info(""String_Node_Str"");
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadLink.getDownloadURL(),true,0);
  if ((dl.getConnection().getContentType().contains(""String_Node_Str""))) {
    logger.warning(""String_Node_Str"");
    logger.warning(""String_Node_Str"" + downloadLink.getDownloadURL());
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(false);
  if (iHaveToWait)   goToSleep(downloadLink);
  URLConnectionAdapter con=br.openGetConnection(downloadLink.getDownloadURL());
  if (con.getContentType().contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      br.getPage(downloadLink.getStringProperty(""String_Node_Str"",null));
      goToSleep(downloadLink);
    }
    String finallink=br.getRegex(DLLINKREGEX).getMatch(0);
    if (finallink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    finallink=fixLink(finallink);
    downloadLink.setUrlDownload(finallink);
    con.disconnect();
  }
 else {
    logger.info(""String_Node_Str"");
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadLink.getDownloadURL(),true,0);
  if ((dl.getConnection().getContentType().contains(""String_Node_Str""))) {
    logger.warning(""String_Node_Str"");
    logger.warning(""String_Node_Str"" + downloadLink.getDownloadURL());
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20792,"public void correctDownloadLink(DownloadLink link){
  link.setUrlDownload(link.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
}","public void correctDownloadLink(DownloadLink link){
  link.setUrlDownload(link.getDownloadURL().replaceAll(""String_Node_Str"",""String_Node_Str""));
}"
20793,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws Exception {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.setFollowRedirects(true);
  if (downloadLink.getName() == null && downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  if (downloadLink.getName() != null)   downloadLink.setProperty(""String_Node_Str"",downloadLink.getName());
  String folderIDregexed=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  downloadLink.setProperty(""String_Node_Str"",""String_Node_Str"" + folderIDregexed);
  try {
    if (!br.openGetConnection(downloadLink.getDownloadURL()).getContentType().contains(""String_Node_Str"")) {
      long size=br.getHttpConnection().getLongContentLength();
      if (size == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      }
      downloadLink.setDownloadSize(Long.valueOf(size));
      iHaveToWait=false;
      return AvailableStatus.TRUE;
    }
 else {
      logger.info(""String_Node_Str"" + downloadLink.getStringProperty(""String_Node_Str"",null) + ""String_Node_Str"");
      br.getPage(downloadLink.getStringProperty(""String_Node_Str"",null));
      if (br.containsHTML(""String_Node_Str"")) {
        logger.info(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      }
      String finalfilename=downloadLink.getStringProperty(""String_Node_Str"",null);
      if (finalfilename == null)       throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      String[] linkinformation=br.getRegex(INFOREGEX).getColumn(0);
      if (linkinformation == null || linkinformation.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String info : linkinformation) {
        if (info.contains(finalfilename)) {
          String directlink=new Regex(info,DLLINKREGEX).getMatch(0);
          if ((info.contains(UNAVAILABLE1) || info.contains(UNAVAILABLE2)) && directlink == null) {
            logger.info(""String_Node_Str"" + downloadLink.getStringProperty(""String_Node_Str"",null) + ""String_Node_Str"");
            throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""));
          }
          if (directlink == null) {
            logger.warning(""String_Node_Str"");
            throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
          }
          downloadLink.setUrlDownload(directlink);
          iHaveToWait=true;
          logger.info(""String_Node_Str"" + downloadLink.getDownloadURL() + ""String_Node_Str"");
          String filesize=new Regex(info,""String_Node_Str"").getMatch(0);
          String filename=new Regex(info,""String_Node_Str"").getMatch(0);
          if (filename == null)           filename=new Regex(info,""String_Node_Str"").getMatch(0);
          if (filesize == null || filename == null) {
            logger.warning(""String_Node_Str"");
            throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
          }
          filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
          filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
          filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
          filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
          filesize=filesize + ""String_Node_Str"";
          downloadLink.setFinalFileName(filename);
          downloadLink.setDownloadSize(Regex.getSize(filesize));
          return AvailableStatus.TRUE;
        }
      }
    }
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  finally {
    if (br.getHttpConnection() != null)     br.getHttpConnection().disconnect();
  }
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws Exception {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.setFollowRedirects(true);
  if (downloadLink.getName() == null && downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  if (downloadLink.getName() != null)   downloadLink.setProperty(""String_Node_Str"",downloadLink.getName());
  String folderIDregexed=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  downloadLink.setProperty(""String_Node_Str"",""String_Node_Str"" + folderIDregexed);
  try {
    if (!br.openGetConnection(downloadLink.getDownloadURL()).getContentType().contains(""String_Node_Str"")) {
      long size=br.getHttpConnection().getLongContentLength();
      if (size == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      }
      downloadLink.setDownloadSize(Long.valueOf(size));
      iHaveToWait=false;
      return AvailableStatus.TRUE;
    }
 else {
      logger.info(""String_Node_Str"" + downloadLink.getStringProperty(""String_Node_Str"",null) + ""String_Node_Str"");
      br.getPage(downloadLink.getStringProperty(""String_Node_Str"",null));
      if (br.containsHTML(""String_Node_Str"")) {
        logger.info(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      }
      String finalfilename=downloadLink.getStringProperty(""String_Node_Str"",null);
      if (finalfilename == null)       throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      String[] linkinformation=br.getRegex(INFOREGEX).getColumn(0);
      if (linkinformation == null || linkinformation.length == 0) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      for (      String info : linkinformation) {
        if (info.contains(finalfilename)) {
          String directlink=new Regex(info,DLLINKREGEX).getMatch(0);
          if ((info.contains(UNAVAILABLE1) || info.contains(UNAVAILABLE2)) && directlink == null) {
            logger.info(""String_Node_Str"" + downloadLink.getStringProperty(""String_Node_Str"",null) + ""String_Node_Str"");
            throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""));
          }
          if (directlink == null) {
            logger.warning(""String_Node_Str"");
            throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
          }
          directlink=fixLink(directlink);
          downloadLink.setUrlDownload(directlink);
          iHaveToWait=true;
          logger.info(""String_Node_Str"" + downloadLink.getDownloadURL() + ""String_Node_Str"");
          String filesize=new Regex(info,""String_Node_Str"").getMatch(0);
          String filename=new Regex(info,""String_Node_Str"").getMatch(0);
          if (filename == null)           filename=new Regex(info,""String_Node_Str"").getMatch(0);
          if (filesize == null || filename == null) {
            logger.warning(""String_Node_Str"");
            throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
          }
          filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
          filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
          filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
          filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
          filesize=filesize + ""String_Node_Str"";
          downloadLink.setFinalFileName(filename);
          downloadLink.setDownloadSize(Regex.getSize(filesize));
          return AvailableStatus.TRUE;
        }
      }
    }
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  finally {
    if (br.getHttpConnection() != null)     br.getHttpConnection().disconnect();
  }
}"
20794,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  progress.getBroadcaster().addListener(this);
  ArrayList<String> picLinks=new ArrayList<String>();
  br.setFollowRedirects(true);
  String link=parameter.toString();
  br.getPage(link);
  String nextPage=null;
  String[] links;
  String albumName=null;
  FilePackage fp=null;
  boolean onePageOnly=false;
  albumName=br.getRegex(albumNamePattern).getMatch(1);
  if (albumName != null) {
    fp=FilePackage.getInstance();
    fp.setName(albumName);
  }
  if (link.contains(""String_Node_Str"")) {
    picLinks.add(parameter.toString());
  }
 else {
    if (link.contains(""String_Node_Str"")) {
      onePageOnly=true;
    }
    do {
      if (abort) {
        progress.setColor(Color.RED);
        progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
        progress.doFinalize(5000l);
        return new ArrayList<DownloadLink>();
      }
      links=br.getRegex(singleLinksPattern).getColumn(0);
      for (      String link2 : links) {
        picLinks.add(""String_Node_Str"" + link2);
      }
      if (onePageOnly)       break;
      nextPage=br.getRegex(nextPagePattern).getMatch(0);
      if (nextPage == null)       break;
      br.getPage(""String_Node_Str"" + nextPage);
    }
 while (true);
  }
  String pictureURL=null;
  String filename=null;
  DownloadLink dlLink;
  progress.setRange(picLinks.size());
  for (  String picLink : picLinks) {
    if (abort) {
      progress.setColor(Color.RED);
      progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
      progress.doFinalize(5000l);
      return new ArrayList<DownloadLink>();
    }
    br.getPage(picLink);
    filename=br.getRegex(fileNamePattern).getMatch(1);
    pictureURL=br.getRegex(pictureURLPattern).getMatch(0);
    if (pictureURL == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dlLink=createDownloadlink(pictureURL);
    if (filename != null)     dlLink.setFinalFileName(filename);
    if (fp != null)     dlLink.setFilePackage(fp);
    decryptedLinks.add(dlLink);
    progress.increase(1);
  }
  return decryptedLinks;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  try {
    progress.getBroadcaster().addListener(this);
  }
 catch (  Throwable e) {
  }
  ArrayList<String> picLinks=new ArrayList<String>();
  br.setFollowRedirects(true);
  String link=parameter.toString();
  br.getPage(link);
  String nextPage=null;
  String[] links;
  String albumName=null;
  FilePackage fp=null;
  boolean onePageOnly=false;
  albumName=br.getRegex(albumNamePattern).getMatch(1);
  if (albumName != null) {
    fp=FilePackage.getInstance();
    fp.setName(albumName);
  }
  if (link.contains(""String_Node_Str"")) {
    picLinks.add(parameter.toString());
  }
 else {
    if (link.contains(""String_Node_Str"")) {
      onePageOnly=true;
    }
    do {
      if (abort) {
        progress.setColor(Color.RED);
        progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
        progress.doFinalize(5000l);
        return new ArrayList<DownloadLink>();
      }
      links=br.getRegex(singleLinksPattern).getColumn(0);
      for (      String link2 : links) {
        picLinks.add(""String_Node_Str"" + link2);
      }
      if (onePageOnly)       break;
      nextPage=br.getRegex(nextPagePattern).getMatch(0);
      if (nextPage == null)       break;
      br.getPage(""String_Node_Str"" + nextPage);
    }
 while (true);
  }
  String pictureURL=null;
  String filename=null;
  DownloadLink dlLink;
  progress.setRange(picLinks.size());
  for (  String picLink : picLinks) {
    if (abort) {
      progress.setColor(Color.RED);
      progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
      progress.doFinalize(5000l);
      return new ArrayList<DownloadLink>();
    }
    br.getPage(picLink);
    filename=br.getRegex(fileNamePattern).getMatch(1);
    pictureURL=br.getRegex(pictureURLPattern).getMatch(0);
    if (pictureURL == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dlLink=createDownloadlink(pictureURL);
    if (filename != null)     dlLink.setFinalFileName(filename);
    if (fp != null)     dlLink.setFilePackage(fp);
    decryptedLinks.add(dlLink);
    progress.increase(1);
  }
  return decryptedLinks;
}"
20795,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  decryptedLinks=new ArrayList<DownloadLink>();
  progress.getBroadcaster().addListener(this);
  Regex urlInfo=new Regex(parameter,""String_Node_Str"");
  String type=urlInfo.getMatch(0);
  String id=urlInfo.getMatch(1);
  if (type.equals(""String_Node_Str"")) {
    progress.increase(1);
    String link=""String_Node_Str"" + id;
    if (!decryptSingleLink(parameter.toString(),progress,decryptedLinks,link))     return null;
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (fpName == null)     fpName=br.getRegex(""String_Node_Str"").getMatch(0);
    if (!decryptLiveset(parameter.toString(),progress,decryptedLinks))     return null;
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    br.getPage(parameter.toString());
    String[] allLivesets=br.getRegex(""String_Node_Str"").getColumn(0);
    if (allLivesets == null || allLivesets.length == 0)     return null;
    if (fpName == null)     fpName=br.getRegex(""String_Node_Str"").getMatch(0);
    progress.setRange(allLivesets.length);
    for (    String aLiveset : allLivesets) {
      if (!decryptLiveset(aLiveset,progress,decryptedLinks))       return null;
      Thread.sleep(1000);
    }
  }
  return decryptedLinks;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  decryptedLinks=new ArrayList<DownloadLink>();
  try {
    progress.getBroadcaster().addListener(this);
  }
 catch (  Throwable e) {
  }
  Regex urlInfo=new Regex(parameter,""String_Node_Str"");
  String type=urlInfo.getMatch(0);
  String id=urlInfo.getMatch(1);
  if (type.equals(""String_Node_Str"")) {
    progress.increase(1);
    String link=""String_Node_Str"" + id;
    if (!decryptSingleLink(parameter.toString(),progress,decryptedLinks,link))     return null;
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (fpName == null)     fpName=br.getRegex(""String_Node_Str"").getMatch(0);
    if (!decryptLiveset(parameter.toString(),progress,decryptedLinks))     return null;
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    br.getPage(parameter.toString());
    String[] allLivesets=br.getRegex(""String_Node_Str"").getColumn(0);
    if (allLivesets == null || allLivesets.length == 0)     return null;
    if (fpName == null)     fpName=br.getRegex(""String_Node_Str"").getMatch(0);
    progress.setRange(allLivesets.length);
    for (    String aLiveset : allLivesets) {
      if (!decryptLiveset(aLiveset,progress,decryptedLinks))       return null;
      Thread.sleep(1000);
    }
  }
  return decryptedLinks;
}"
20796,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  progress.getBroadcaster().addListener(this);
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str"") || parameter.matches(""String_Node_Str"")) {
    if (parameter.matches(""String_Node_Str"")) {
      getfpName();
      if (fpName != null) {
        DownloadLink dl=createDownloadlink(parameter.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        dl.setName(fpName);
        br.getPage(parameter);
        String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink != null) {
          dllink=dllink.replace(""String_Node_Str"",""String_Node_Str"");
          URLConnectionAdapter con=br.openGetConnection(dllink);
          if (!con.getContentType().contains(""String_Node_Str"")) {
            String ending=LoadImage.getFileType(dllink,con.getContentType());
            if (ending != null)             dl.setFinalFileName(dl.getName() + ending);
            long size=con.getLongContentLength();
            if (size != 0) {
              dl.setDownloadSize(con.getLongContentLength());
              dl.setAvailable(true);
            }
          }
        }
        decryptedLinks.add(dl);
      }
 else {
        decryptedLinks.add(createDownloadlink(parameter.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
      }
    }
 else {
      getfpName();
      String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       return null;
      progress.setRange(links.length);
      if (fpName != null) {
        int counter=1;
        for (        String photolink : links) {
          if (abort) {
            progress.setColor(Color.RED);
            progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
            progress.doFinalize(5000l);
            return new ArrayList<DownloadLink>();
          }
          DownloadLink dl=createDownloadlink(photolink.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
          dl.setName(fpName + ""String_Node_Str"" + counter);
          br.getPage(photolink);
          String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink != null) {
            dllink=dllink.replace(""String_Node_Str"",""String_Node_Str"");
            URLConnectionAdapter con=br.openGetConnection(dllink);
            if (!con.getContentType().contains(""String_Node_Str"")) {
              String ending=LoadImage.getFileType(dllink,con.getContentType());
              if (ending != null)               dl.setFinalFileName(dl.getName() + ending);
              long size=con.getLongContentLength();
              if (size != 0) {
                dl.setDownloadSize(con.getLongContentLength());
                dl.setAvailable(true);
              }
            }
          }
          decryptedLinks.add(dl);
          counter=counter + 1;
          progress.increase(1);
        }
      }
 else {
        for (        String photolink : links) {
          decryptedLinks.add(createDownloadlink(photolink.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        }
      }
      if (fpName != null) {
        FilePackage fp=FilePackage.getInstance();
        fp.setName(fpName.trim());
        fp.addLinks(decryptedLinks);
      }
    }
  }
 else {
    getfpName();
    if (fpName != null) {
      String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      if (dllink == null)       dllink=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatch(0);
      DownloadLink dl=createDownloadlink(parameter.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      dl.setFinalFileName(fpName + ""String_Node_Str"");
      if (dllink != null) {
        dllink=Encoding.htmlDecode(dllink.replace(""String_Node_Str"",""String_Node_Str""));
        URLConnectionAdapter con=br.openGetConnection(dllink);
        if (!con.getContentType().contains(""String_Node_Str"")) {
          long size=con.getLongContentLength();
          if (size != 0) {
            dl.setDownloadSize(con.getLongContentLength());
            dl.setAvailable(true);
          }
        }
      }
      decryptedLinks.add(dl);
    }
 else {
      decryptedLinks.add(createDownloadlink(parameter.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
    }
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  try {
    progress.getBroadcaster().addListener(this);
  }
 catch (  Throwable e) {
  }
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str"") || parameter.matches(""String_Node_Str"")) {
    if (parameter.matches(""String_Node_Str"")) {
      getfpName();
      if (fpName != null) {
        DownloadLink dl=createDownloadlink(parameter.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        dl.setName(fpName);
        br.getPage(parameter);
        String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink != null) {
          dllink=dllink.replace(""String_Node_Str"",""String_Node_Str"");
          URLConnectionAdapter con=br.openGetConnection(dllink);
          if (!con.getContentType().contains(""String_Node_Str"")) {
            String ending=LoadImage.getFileType(dllink,con.getContentType());
            if (ending != null)             dl.setFinalFileName(dl.getName() + ending);
            long size=con.getLongContentLength();
            if (size != 0) {
              dl.setDownloadSize(con.getLongContentLength());
              dl.setAvailable(true);
            }
          }
        }
        decryptedLinks.add(dl);
      }
 else {
        decryptedLinks.add(createDownloadlink(parameter.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
      }
    }
 else {
      getfpName();
      String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       return null;
      progress.setRange(links.length);
      if (fpName != null) {
        int counter=1;
        for (        String photolink : links) {
          if (abort) {
            progress.setColor(Color.RED);
            progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
            progress.doFinalize(5000l);
            return new ArrayList<DownloadLink>();
          }
          DownloadLink dl=createDownloadlink(photolink.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
          dl.setName(fpName + ""String_Node_Str"" + counter);
          br.getPage(photolink);
          String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink != null) {
            dllink=dllink.replace(""String_Node_Str"",""String_Node_Str"");
            URLConnectionAdapter con=br.openGetConnection(dllink);
            if (!con.getContentType().contains(""String_Node_Str"")) {
              String ending=LoadImage.getFileType(dllink,con.getContentType());
              if (ending != null)               dl.setFinalFileName(dl.getName() + ending);
              long size=con.getLongContentLength();
              if (size != 0) {
                dl.setDownloadSize(con.getLongContentLength());
                dl.setAvailable(true);
              }
            }
          }
          decryptedLinks.add(dl);
          counter=counter + 1;
          progress.increase(1);
        }
      }
 else {
        for (        String photolink : links) {
          decryptedLinks.add(createDownloadlink(photolink.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
        }
      }
      if (fpName != null) {
        FilePackage fp=FilePackage.getInstance();
        fp.setName(fpName.trim());
        fp.addLinks(decryptedLinks);
      }
    }
  }
 else {
    getfpName();
    if (fpName != null) {
      String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      if (dllink == null)       dllink=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatch(0);
      DownloadLink dl=createDownloadlink(parameter.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      dl.setFinalFileName(fpName + ""String_Node_Str"");
      if (dllink != null) {
        dllink=Encoding.htmlDecode(dllink.replace(""String_Node_Str"",""String_Node_Str""));
        URLConnectionAdapter con=br.openGetConnection(dllink);
        if (!con.getContentType().contains(""String_Node_Str"")) {
          long size=con.getLongContentLength();
          if (size != 0) {
            dl.setDownloadSize(con.getLongContentLength());
            dl.setAvailable(true);
          }
        }
      }
      decryptedLinks.add(dl);
    }
 else {
      decryptedLinks.add(createDownloadlink(parameter.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""));
    }
  }
  return decryptedLinks;
}"
20797,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  progress.getBroadcaster().addListener(this);
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  ArrayList<String> picLinks=new ArrayList<String>();
  br.setFollowRedirects(true);
  String link=parameter.toString();
  br.getPage(link);
  String nextPage=null;
  String[] sets=null;
  String[] links=null;
  String setName=null;
  FilePackage fp=null;
  if (link.matches(""String_Node_Str"")) {
    sets=br.getRegex(setLinkPattern).getColumn(0);
    for (    String set : sets) {
      decryptedLinks.add(createDownloadlink(""String_Node_Str"" + set));
    }
    return decryptedLinks;
  }
  setName=br.getRegex(setNamePattern).getMatch(1);
  if (setName != null) {
    fp=FilePackage.getInstance();
    fp.setName(setName);
  }
  if (!link.contains(""String_Node_Str"")) {
    picLinks.add(link);
  }
 else {
    do {
      if (abort) {
      }
      links=br.getRegex(singleLinksPattern).getColumn(0);
      for (      String link2 : links) {
        String picLink=""String_Node_Str"" + link2;
        picLinks.add(picLink);
      }
      nextPage=br.getRegex(nextPagePattern).getMatch(0);
      if (nextPage == null)       break;
      br.getPage(link + nextPage);
    }
 while (true);
  }
  String[][] picture=null;
  String pictureURL=null;
  DownloadLink dlLink;
  progress.setRange(picLinks.size());
  for (  String picLink : picLinks) {
    if (abort) {
      progress.setColor(Color.RED);
      progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
      progress.doFinalize(5000l);
      return new ArrayList<DownloadLink>();
    }
    br.getPage(picLink);
    picture=br.getRegex(pictureURLPattern).getMatches();
    pictureURL=picture[0][0];
    if (pictureURL == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dlLink=createDownloadlink(pictureURL);
    if (fp != null)     dlLink.setFilePackage(fp);
    decryptedLinks.add(dlLink);
    progress.increase(1);
  }
  return decryptedLinks;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  try {
    progress.getBroadcaster().addListener(this);
  }
 catch (  Throwable e) {
  }
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  ArrayList<String> picLinks=new ArrayList<String>();
  br.setFollowRedirects(true);
  String link=parameter.toString();
  br.getPage(link);
  String nextPage=null;
  String[] sets=null;
  String[] links=null;
  String setName=null;
  FilePackage fp=null;
  if (link.matches(""String_Node_Str"")) {
    sets=br.getRegex(setLinkPattern).getColumn(0);
    for (    String set : sets) {
      decryptedLinks.add(createDownloadlink(""String_Node_Str"" + set));
    }
    return decryptedLinks;
  }
  setName=br.getRegex(setNamePattern).getMatch(1);
  if (setName != null) {
    fp=FilePackage.getInstance();
    fp.setName(setName);
  }
  if (!link.contains(""String_Node_Str"")) {
    picLinks.add(link);
  }
 else {
    do {
      if (abort) {
      }
      links=br.getRegex(singleLinksPattern).getColumn(0);
      for (      String link2 : links) {
        String picLink=""String_Node_Str"" + link2;
        picLinks.add(picLink);
      }
      nextPage=br.getRegex(nextPagePattern).getMatch(0);
      if (nextPage == null)       break;
      br.getPage(link + nextPage);
    }
 while (true);
  }
  String[][] picture=null;
  String pictureURL=null;
  DownloadLink dlLink;
  progress.setRange(picLinks.size());
  for (  String picLink : picLinks) {
    if (abort) {
      progress.setColor(Color.RED);
      progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
      progress.doFinalize(5000l);
      return new ArrayList<DownloadLink>();
    }
    br.getPage(picLink);
    picture=br.getRegex(pictureURLPattern).getMatches();
    pictureURL=picture[0][0];
    if (pictureURL == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dlLink=createDownloadlink(pictureURL);
    if (fp != null)     dlLink.setFilePackage(fp);
    decryptedLinks.add(dlLink);
    progress.increase(1);
  }
  return decryptedLinks;
}"
20798,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  progress.getBroadcaster().addListener(this);
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  ArrayList<String> alllinks=new ArrayList<String>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  if (parameter.matches(patternSupported_Info)) {
    br.getPage(parameter);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
    String hosterlinks[]=br.getRegex(""String_Node_Str"").getColumn(0);
    String streamlinks[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if ((hosterlinks == null || hosterlinks.length == 0) && (streamlinks == null || streamlinks.length == 0))     return null;
    if (hosterlinks != null && hosterlinks.length != 0) {
      logger.info(""String_Node_Str"" + hosterlinks.length + ""String_Node_Str"");
      for (      String hosterlink : hosterlinks) {
        alllinks.add(hosterlink);
      }
    }
    if (streamlinks != null && streamlinks.length != 0) {
      logger.info(""String_Node_Str"" + streamlinks.length + ""String_Node_Str"");
      for (      String streamlink : streamlinks) {
        alllinks.add(streamlink);
      }
    }
    logger.info(""String_Node_Str"" + alllinks.size() + ""String_Node_Str"");
    progress.setRange(alllinks.size());
    for (    String link : alllinks) {
      if (abort) {
        logger.info(""String_Node_Str"");
        progress.setColor(Color.RED);
        progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
        progress.doFinalize(5000l);
        return new ArrayList<DownloadLink>();
      }
      String golink=""String_Node_Str"" + link;
      br.getPage(golink);
      String finallink=br.getRedirectLocation();
      if (finallink == null)       return null;
      DownloadLink dl_link=createDownloadlink(finallink);
      dl_link.addSourcePluginPassword(""String_Node_Str"");
      decryptedLinks.add(dl_link);
      progress.increase(1);
    }
  }
 else {
    br.getPage(parameter);
    DownloadLink dl;
    if (br.getRedirectLocation().equalsIgnoreCase(parameter))     br.getPage(parameter);
    if (br.getRedirectLocation().equalsIgnoreCase(parameter))     return null;
    String url=br.getRedirectLocation();
    decryptedLinks.add(dl=createDownloadlink(url));
    dl.addSourcePluginPassword(""String_Node_Str"");
    dl.setUrlDownload(url);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  try {
    progress.getBroadcaster().addListener(this);
  }
 catch (  Throwable e) {
  }
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  ArrayList<String> alllinks=new ArrayList<String>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  if (parameter.matches(patternSupported_Info)) {
    br.getPage(parameter);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
    String hosterlinks[]=br.getRegex(""String_Node_Str"").getColumn(0);
    String streamlinks[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if ((hosterlinks == null || hosterlinks.length == 0) && (streamlinks == null || streamlinks.length == 0))     return null;
    if (hosterlinks != null && hosterlinks.length != 0) {
      logger.info(""String_Node_Str"" + hosterlinks.length + ""String_Node_Str"");
      for (      String hosterlink : hosterlinks) {
        alllinks.add(hosterlink);
      }
    }
    if (streamlinks != null && streamlinks.length != 0) {
      logger.info(""String_Node_Str"" + streamlinks.length + ""String_Node_Str"");
      for (      String streamlink : streamlinks) {
        alllinks.add(streamlink);
      }
    }
    logger.info(""String_Node_Str"" + alllinks.size() + ""String_Node_Str"");
    progress.setRange(alllinks.size());
    for (    String link : alllinks) {
      if (abort) {
        logger.info(""String_Node_Str"");
        progress.setColor(Color.RED);
        progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
        progress.doFinalize(5000l);
        return new ArrayList<DownloadLink>();
      }
      String golink=""String_Node_Str"" + link;
      br.getPage(golink);
      String finallink=br.getRedirectLocation();
      if (finallink == null)       return null;
      DownloadLink dl_link=createDownloadlink(finallink);
      dl_link.addSourcePluginPassword(""String_Node_Str"");
      decryptedLinks.add(dl_link);
      progress.increase(1);
    }
  }
 else {
    br.getPage(parameter);
    DownloadLink dl;
    if (br.getRedirectLocation().equalsIgnoreCase(parameter))     br.getPage(parameter);
    if (br.getRedirectLocation().equalsIgnoreCase(parameter))     return null;
    String url=br.getRedirectLocation();
    decryptedLinks.add(dl=createDownloadlink(url));
    dl.addSourcePluginPassword(""String_Node_Str"");
    dl.setUrlDownload(url);
  }
  return decryptedLinks;
}"
20799,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  progress.getBroadcaster().addListener(this);
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  progress.setRange(links.length);
  for (  String dl : links) {
    if (abort) {
      progress.setColor(Color.RED);
      progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
      progress.doFinalize(5000l);
      return new ArrayList<DownloadLink>();
    }
    br.getPage(dl);
    String goOn=br.getRegex(""String_Node_Str"").getMatch(0);
    if (goOn == null) {
      goOn=br.getRegex(""String_Node_Str"").getMatch(0);
      if (goOn == null) {
        goOn=br.getRegex(""String_Node_Str"").getMatch(1);
      }
    }
    if (goOn == null)     return null;
    goOn=""String_Node_Str"" + goOn;
    br.getPage(goOn);
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null) {
      finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (finallink == null)     return null;
    decryptedLinks.add(createDownloadlink(finallink));
    progress.increase(1);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  try {
    progress.getBroadcaster().addListener(this);
  }
 catch (  Throwable e) {
  }
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  progress.setRange(links.length);
  for (  String dl : links) {
    if (abort) {
      progress.setColor(Color.RED);
      progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
      progress.doFinalize(5000l);
      return new ArrayList<DownloadLink>();
    }
    br.getPage(dl);
    String goOn=br.getRegex(""String_Node_Str"").getMatch(0);
    if (goOn == null) {
      goOn=br.getRegex(""String_Node_Str"").getMatch(0);
      if (goOn == null) {
        goOn=br.getRegex(""String_Node_Str"").getMatch(1);
      }
    }
    if (goOn == null)     return null;
    goOn=""String_Node_Str"" + goOn;
    br.getPage(goOn);
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null) {
      finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (finallink == null)     return null;
    decryptedLinks.add(createDownloadlink(finallink));
    progress.increase(1);
  }
  return decryptedLinks;
}"
20800,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  progress.getBroadcaster().addListener(this);
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  if (parameter.contains(""String_Node_Str"")) {
    String picid=new Regex(parameter,""String_Node_Str"").getMatch(0);
    parameter=""String_Node_Str"" + picid;
  }
  br.setFollowRedirects(false);
  parameter=parameter.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (parameter.contains(""String_Node_Str"") || parameter.contains(""String_Node_Str"")) {
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null)     return null;
    decryptedLinks.add(createDownloadlink(""String_Node_Str"" + finallink));
    return decryptedLinks;
  }
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fpName == null) {
    fpName=br.getRegex(""String_Node_Str"").getMatch(0);
    if (fpName == null) {
      fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      if (fpName == null) {
        fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
  }
  String pagepiece=br.getRegex(""String_Node_Str"").getMatch(0);
  if (pagepiece == null)   return null;
  String[] links=new Regex(pagepiece,""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  progress.setRange(links.length);
  for (  String link : links) {
    if (abort) {
      progress.setColor(Color.RED);
      progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
      progress.doFinalize(5000l);
      return new ArrayList<DownloadLink>();
    }
    link=link.replace(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link + ""String_Node_Str"");
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null)     return null;
    DownloadLink dl=createDownloadlink(""String_Node_Str"" + finallink);
    dl.setAvailable(true);
    decryptedLinks.add(dl);
    progress.increase(1);
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  try {
    progress.getBroadcaster().addListener(this);
  }
 catch (  Throwable e) {
  }
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  if (parameter.contains(""String_Node_Str"")) {
    String picid=new Regex(parameter,""String_Node_Str"").getMatch(0);
    parameter=""String_Node_Str"" + picid;
  }
  br.setFollowRedirects(false);
  parameter=parameter.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (parameter.contains(""String_Node_Str"") || parameter.contains(""String_Node_Str"")) {
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null)     return null;
    decryptedLinks.add(createDownloadlink(""String_Node_Str"" + finallink));
    return decryptedLinks;
  }
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fpName == null) {
    fpName=br.getRegex(""String_Node_Str"").getMatch(0);
    if (fpName == null) {
      fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      if (fpName == null) {
        fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
  }
  String pagepiece=br.getRegex(""String_Node_Str"").getMatch(0);
  if (pagepiece == null)   return null;
  String[] links=new Regex(pagepiece,""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  progress.setRange(links.length);
  for (  String link : links) {
    if (abort) {
      progress.setColor(Color.RED);
      progress.setStatusText(progress.getStatusText() + ""String_Node_Str"" + JDL.L(""String_Node_Str"",""String_Node_Str""));
      progress.doFinalize(5000l);
      return new ArrayList<DownloadLink>();
    }
    link=link.replace(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link + ""String_Node_Str"");
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null)     return null;
    DownloadLink dl=createDownloadlink(""String_Node_Str"" + finallink);
    dl.setAvailable(true);
    decryptedLinks.add(dl);
    progress.increase(1);
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}"
20801,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  br.setDebug(true);
  br.setFollowRedirects(true);
  String downlink=br.getRegex(""String_Node_Str"").getMatch(0);
  String type=br.getRegex(""String_Node_Str"").getMatch(0);
  String extra=br.getRegex(""String_Node_Str"").getMatch(0);
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  String add=br.getRegex(""String_Node_Str"").getMatch(0);
  if (extra == null)   extra=""String_Node_Str"";
  if (type == null)   type=""String_Node_Str"";
  if (downlink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  Context cx=null;
  String finaldownlink=null;
  Scriptable scope=null;
  String fun=null;
  Object result=null;
  try {
    cx=ContextFactory.getGlobal().enterContext();
    scope=cx.initStandardObjects();
    fun=""String_Node_Str"" + add + ""String_Node_Str""+ downlink+ ""String_Node_Str""+ extra+ ""String_Node_Str""+ type+ ""String_Node_Str""+ url+ ""String_Node_Str"";
    result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
    finaldownlink=""String_Node_Str"" + Context.toString(result);
  }
  finally {
    if (cx != null) {
      cx=null;
      Context.exit();
    }
  }
  Browser br2=br.cloneBrowser();
  br2.setReadTimeout(40 * 1000);
  xmlrequest(br2,finaldownlink);
  if (!br2.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  if (br2.containsHTML(""String_Node_Str"")) {
    for (int i=0; i <= 5; i++) {
      String captchashit=br.getRegex(""String_Node_Str"").getMatch(0);
      String captchacrap=br.getRegex(""String_Node_Str"").getMatch(0);
      if (captchashit == null || captchacrap == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      String code=getCaptchaCode(""String_Node_Str"" + Math.random(),downloadLink);
      type=""String_Node_Str"";
      extra=""String_Node_Str"" + captchacrap + ""String_Node_Str""+ Encoding.urlEncode_light(code)+ ""String_Node_Str""+ captchashit;
      try {
        cx=ContextFactory.getGlobal().enterContext();
        scope=cx.initStandardObjects();
        fun=""String_Node_Str"" + add + ""String_Node_Str""+ downlink+ ""String_Node_Str""+ extra+ ""String_Node_Str""+ type+ ""String_Node_Str""+ url+ ""String_Node_Str"";
        result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
        finaldownlink=""String_Node_Str"" + Context.toString(result);
      }
  finally {
        if (cx != null) {
          cx=null;
          Context.exit();
        }
      }
      xmlrequest(br2,finaldownlink);
      if (br2.containsHTML(""String_Node_Str""))       continue;
      break;
    }
  }
 else   if (br2.containsHTML(""String_Node_Str"")) {
    for (int i=0; i <= 5; i++) {
      String k=br.getRegex(""String_Node_Str"").getMatch(0);
      if (k == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      br2.getPage(""String_Node_Str"" + k);
      String challenge=br2.getRegex(""String_Node_Str"").getMatch(0);
      String server=br2.getRegex(""String_Node_Str"").getMatch(0);
      if (challenge == null || server == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      String captchaAddress=server + ""String_Node_Str"" + challenge;
      String code=getCaptchaCode(captchaAddress,downloadLink);
      type=""String_Node_Str"";
      extra=""String_Node_Str"" + Encoding.urlEncode_light(code) + ""String_Node_Str""+ challenge;
      try {
        cx=ContextFactory.getGlobal().enterContext();
        scope=cx.initStandardObjects();
        fun=""String_Node_Str"" + add + ""String_Node_Str""+ downlink+ ""String_Node_Str""+ extra+ ""String_Node_Str""+ type+ ""String_Node_Str""+ url+ ""String_Node_Str"";
        result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
        finaldownlink=""String_Node_Str"" + Context.toString(result);
        Context.exit();
      }
  finally {
        if (cx != null) {
          cx=null;
          Context.exit();
        }
      }
      xmlrequest(br2,finaldownlink);
      if (br2.containsHTML(""String_Node_Str"")) {
        xmlrequest(br2,finaldownlink);
        continue;
      }
      break;
    }
  }
  if (br2.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  if (br2.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  if (!br2.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(downloadLink.getDownloadURL());
  try {
    br.getPage(downloadLink.getDownloadURL());
  }
 catch (  Exception e) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    logger.info(""String_Node_Str"");
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null) {
      logger.info(""String_Node_Str"");
      String pp=br.getRegex(""String_Node_Str"").getMatch(0);
      String[] lol=HTMLParser.getHttpLinks(pp,""String_Node_Str"");
      if (lol.length != 1) {
      }
 else {
        for (        String link : lol) {
          dllink=link;
        }
      }
    }
  }
  if (dllink == null) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.setFollowRedirects(false);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    if (dl.getConnection().getResponseCode() == 503)     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  br.setDebug(true);
  br.setFollowRedirects(true);
  String downlink=br.getRegex(""String_Node_Str"").getMatch(0);
  String type=br.getRegex(""String_Node_Str"").getMatch(0);
  String extra=br.getRegex(""String_Node_Str"").getMatch(0);
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  String add=br.getRegex(""String_Node_Str"").getMatch(0);
  if (extra == null)   extra=""String_Node_Str"";
  if (type == null)   type=""String_Node_Str"";
  if (downlink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  Context cx=null;
  String finaldownlink=null;
  Scriptable scope=null;
  String fun=null;
  Object result=null;
  try {
    cx=ContextFactory.getGlobal().enterContext();
    scope=cx.initStandardObjects();
    fun=""String_Node_Str"" + add + ""String_Node_Str""+ downlink+ ""String_Node_Str""+ extra+ ""String_Node_Str""+ type+ ""String_Node_Str""+ url+ ""String_Node_Str"";
    result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
    finaldownlink=""String_Node_Str"" + Context.toString(result);
  }
  finally {
    if (cx != null) {
      cx=null;
      Context.exit();
    }
  }
  Browser br2=br.cloneBrowser();
  br2.setReadTimeout(40 * 1000);
  xmlrequest(br2,finaldownlink);
  if (!br2.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  if (br2.containsHTML(""String_Node_Str"")) {
    for (int i=0; i <= 5; i++) {
      String captchashit=br.getRegex(""String_Node_Str"").getMatch(0);
      String captchacrap=br.getRegex(""String_Node_Str"").getMatch(0);
      if (captchashit == null || captchacrap == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      String code=getCaptchaCode(""String_Node_Str"" + Math.random(),downloadLink);
      type=""String_Node_Str"";
      extra=""String_Node_Str"" + captchacrap + ""String_Node_Str""+ Encoding.urlEncode_light(code)+ ""String_Node_Str""+ captchashit;
      try {
        cx=ContextFactory.getGlobal().enterContext();
        scope=cx.initStandardObjects();
        fun=""String_Node_Str"" + add + ""String_Node_Str""+ downlink+ ""String_Node_Str""+ extra+ ""String_Node_Str""+ type+ ""String_Node_Str""+ url+ ""String_Node_Str"";
        result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
        finaldownlink=""String_Node_Str"" + Context.toString(result);
      }
  finally {
        if (cx != null) {
          cx=null;
          Context.exit();
        }
      }
      xmlrequest(br2,finaldownlink);
      if (br2.containsHTML(""String_Node_Str""))       continue;
      break;
    }
  }
 else   if (br2.containsHTML(""String_Node_Str"")) {
    for (int i=0; i <= 5; i++) {
      String k=br.getRegex(""String_Node_Str"").getMatch(0);
      if (k == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      br2.getPage(""String_Node_Str"" + k);
      String challenge=br2.getRegex(""String_Node_Str"").getMatch(0);
      String server=br2.getRegex(""String_Node_Str"").getMatch(0);
      if (challenge == null || server == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      String captchaAddress=server + ""String_Node_Str"" + challenge;
      String code=getCaptchaCode(captchaAddress,downloadLink);
      type=""String_Node_Str"";
      extra=""String_Node_Str"" + Encoding.urlEncode_light(code) + ""String_Node_Str""+ challenge;
      try {
        cx=ContextFactory.getGlobal().enterContext();
        scope=cx.initStandardObjects();
        fun=""String_Node_Str"" + add + ""String_Node_Str""+ downlink+ ""String_Node_Str""+ extra+ ""String_Node_Str""+ type+ ""String_Node_Str""+ url+ ""String_Node_Str"";
        result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
        finaldownlink=""String_Node_Str"" + Context.toString(result);
      }
  finally {
        if (cx != null) {
          cx=null;
          Context.exit();
        }
      }
      xmlrequest(br2,finaldownlink);
      if (br2.containsHTML(""String_Node_Str"")) {
        xmlrequest(br2,finaldownlink);
        continue;
      }
      break;
    }
  }
  if (br2.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  if (br2.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  if (!br2.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(downloadLink.getDownloadURL());
  try {
    br.getPage(downloadLink.getDownloadURL());
  }
 catch (  Exception e) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    logger.info(""String_Node_Str"");
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null) {
      logger.info(""String_Node_Str"");
      String pp=br.getRegex(""String_Node_Str"").getMatch(0);
      String[] lol=HTMLParser.getHttpLinks(pp,""String_Node_Str"");
      if (lol.length != 1) {
      }
 else {
        for (        String link : lol) {
          dllink=link;
        }
      }
    }
  }
  if (dllink == null) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.setFollowRedirects(false);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    if (dl.getConnection().getResponseCode() == 503)     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20802,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (!checkPassword(downloadLink)) {
    return;
  }
  handleErrors(downloadLink);
  if (br.containsHTML(""String_Node_Str"")) {
    String captchaAddress=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaAddress == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    HashMap<String,String> input=HTMLParser.getInputHiddenFields(br + ""String_Node_Str"");
    String code=getCaptchaCode(captchaAddress,downloadLink);
    String geturl=downloadLink.getDownloadURL() + ""String_Node_Str"" + code+ ""String_Node_Str""+ input.get(""String_Node_Str"")+ ""String_Node_Str""+ input.get(""String_Node_Str"")+ ""String_Node_Str""+ System.currentTimeMillis();
    br.getPage(geturl);
    requestFileInformation(downloadLink);
    if (!checkPassword(downloadLink)) {
      return;
    }
    handleErrors(downloadLink);
  }
  String url=findDownloadUrl();
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,1);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
    if (br.getHttpConnection().getContentLength() == 0)     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
    if (br.getHttpConnection().toString().contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
    if (br.getHttpConnection().toString().contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_RETRY);
    correctDownloadLink(downloadLink);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (!dl.startDownload()) {
    downloadLink.getLinkStatus().setRetryCount(0);
  }
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (!checkPassword(downloadLink)) {
    return;
  }
  handleErrors(downloadLink);
  if (br.containsHTML(""String_Node_Str"")) {
    String captchaAddress=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaAddress == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    HashMap<String,String> input=HTMLParser.getInputHiddenFields(br + ""String_Node_Str"");
    String code=getCaptchaCode(captchaAddress,downloadLink);
    String geturl=downloadLink.getDownloadURL() + ""String_Node_Str"" + code+ ""String_Node_Str""+ input.get(""String_Node_Str"")+ ""String_Node_Str""+ input.get(""String_Node_Str"")+ ""String_Node_Str""+ System.currentTimeMillis();
    br.getPage(geturl);
    requestFileInformationInternal(downloadLink);
    if (!checkPassword(downloadLink)) {
      return;
    }
    handleErrors(downloadLink);
  }
  String url=findDownloadUrl();
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,1);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
    if (br.getHttpConnection().getContentLength() == 0)     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
    if (br.getHttpConnection().toString().contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
    if (br.getHttpConnection().toString().contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_RETRY);
    correctDownloadLink(downloadLink);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (!dl.startDownload()) {
    downloadLink.getLinkStatus().setRetryCount(0);
  }
}"
20803,"private void handleErrors(DownloadLink link) throws PluginException {
  if (br.containsHTML(""String_Node_Str"")) {
    link.getLinkStatus().addStatus(LinkStatus.ERROR_IP_BLOCKED);
    link.getLinkStatus().setValue(60 * 1000l);
    return;
  }
  String[] dat=br.getRegex(""String_Node_Str"").getRow(0);
  if (br.containsHTML(""String_Node_Str"")) {
    long wait=Long.parseLong(dat[1]) * 60000l + Long.parseLong(dat[2]) * 1000l;
    link.getLinkStatus().addStatus(LinkStatus.ERROR_IP_BLOCKED);
    link.getLinkStatus().setValue(wait);
    return;
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
}","private void handleErrors(DownloadLink link) throws PluginException {
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 1000l);
  }
  String[] dat=br.getRegex(""String_Node_Str"").getRow(0);
  if (br.containsHTML(""String_Node_Str"")) {
    long wait=Long.parseLong(dat[1]) * 60000l + Long.parseLong(dat[2]) * 1000l;
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,wait);
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
}"
20804,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  setBrowserExclusive();
  br.setDebug(true);
  br.getHeaders().put(""String_Node_Str"",UserAgent);
  loadpage(downloadLink.getDownloadURL());
  String fln=br.getRegex(""String_Node_Str"").getMatch(0);
  String dsize=br.getRegex(""String_Node_Str"").getMatch(0);
  try {
    renew(br,0);
    if (br.containsHTML(""String_Node_Str"")) {
      renew(br,1);
    }
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return AvailableStatus.UNCHECKABLE;
    }
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return AvailableStatus.UNCHECKABLE;
    }
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return AvailableStatus.UNCHECKABLE;
    }
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",60 * 60 * 1000l);
    if (dsize == null)     dsize=br.getRegex(""String_Node_Str"").getMatch(0);
    if (fln == null)     fln=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dsize == null || fln == null)     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    String betterfln=br.getRegex(""String_Node_Str"").getMatch(0);
    if ((fln.endsWith(""String_Node_Str"") && betterfln != null) || (betterfln != null && betterfln.length() >= fln.length())) {
      fln=betterfln;
    }
    return AvailableStatus.TRUE;
  }
  finally {
    if (dsize != null)     downloadLink.setDownloadSize(Regex.getSize(dsize));
    if (fln != null)     downloadLink.setName(fln.trim());
  }
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  setBrowserExclusive();
  br.setDebug(true);
  return requestFileInformationInternal(downloadLink);
}"
20805,"public boolean newDLStartAllowed(){
  if (this.paused || Reconnecter.getInstance().isReconnectInProgress() || this.aborting|| this.aborted|| SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",true) && IPController.getInstance().isInvalidated()) {
    return false;
  }
  return true;
}","public boolean newDLStartAllowed(){
  if (this.paused) {
    return false;
  }
  if (Reconnecter.getInstance().isReconnectInProgress()) {
    return false;
  }
  if (this.aborting || this.aborted) {
    return false;
  }
  if (Reconnecter.getInstance().isAutoReconnectEnabled() && SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(""String_Node_Str"",true) && IPController.getInstance().isInvalidated()) {
    return false;
  }
  return true;
}"
20806,"private void go(){
  String hoster=""String_Node_Str"";
  JAntiCaptcha jac=new JAntiCaptcha(hoster);
  File[] list=JDUtilities.getResourceFile(""String_Node_Str"" + jac.getMethodDirName()).listFiles();
  int id=(int)(Math.random() * (list.length - 1));
  System.out.println(""String_Node_Str"" + id);
  File f=list[2];
  System.out.println(f + ""String_Node_Str"");
  jac.showPreparedCaptcha(f);
}","private void go(){
  String hoster=""String_Node_Str"";
  JAntiCaptcha jac=new JAntiCaptcha(hoster);
  File f=new File(""String_Node_Str"");
  System.out.println(f + ""String_Node_Str"");
  System.out.println(jac.checkCaptcha(f));
  System.exit(0);
}"
20807,"/** 
 * Gibt den erkannten CaptchaText zurück
 * @param captchafile Pfad zum Bild
 * @return CaptchaCode
 */
public String checkCaptcha(File captchafile){
  if (Utilities.isLoggerActive()) {
    logger.finer(""String_Node_Str"" + captchafile);
  }
  Image captchaImage=Utilities.loadImage(captchafile);
  Captcha captcha=createCaptcha(captchaImage);
  captcha.setCaptchaFile(captchafile);
  return checkCaptcha(captchafile,captcha);
}","/** 
 * Gibt den erkannten CaptchaText zurück
 * @param captchafile Pfad zum Bild
 * @return CaptchaCode
 */
public String checkCaptcha(File captchafile){
  if (Utilities.isLoggerActive()) {
    logger.finer(""String_Node_Str"" + captchafile);
  }
  Image captchaImage=Utilities.loadImage(captchafile);
  Captcha captcha=createCaptcha(captchaImage);
  if (captcha != null)   captcha.setCaptchaFile(captchafile);
  return checkCaptcha(captchafile,captcha);
}"
20808,"private String callExtern(){
  try {
    File file=JDUtilities.getResourceFile(this.srcFile);
    file.getParentFile().mkdirs();
    String ext=JDIO.getFileExtension(this.srcFile);
    ImageIO.write((RenderedImage)this.sourceImage,ext,file);
  }
 catch (  IOException e) {
    JDLogger.exception(e);
    return null;
  }
  Executer exec=new Executer(JDUtilities.getResourceFile(this.command).getAbsolutePath());
  exec.setRunin(JDUtilities.getResourceFile(this.command).getParent());
  exec.setWaitTimeout(300);
  exec.start();
  exec.waitTimeout();
  String res=JDIO.readFileToString(JDUtilities.getResourceFile(this.dstFile));
  if (res == null)   return null;
  return res.trim();
}","private String callExtern(){
  try {
    File file=JDUtilities.getResourceFile(this.srcFile);
    file.getParentFile().mkdirs();
    String ext=JDIO.getFileExtension(this.srcFile);
    ImageIO.write(toBufferedImage(this.sourceImage),ext,file);
  }
 catch (  Exception e) {
    JDLogger.exception(e);
    return null;
  }
  Executer exec=new Executer(JDUtilities.getResourceFile(this.command).getAbsolutePath());
  exec.setRunin(JDUtilities.getResourceFile(this.command).getParent());
  exec.setWaitTimeout(300);
  exec.start();
  exec.waitTimeout();
  String res=JDIO.readFileToString(JDUtilities.getResourceFile(this.dstFile));
  if (res == null)   return null;
  return res.trim();
}"
20809,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=null;
  Form[] allForms=br.getForms();
  if (allForms == null || allForms.length == 0)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  for (  Form singleForm : allForms) {
    if (singleForm.containsHTML(""String_Node_Str"")) {
      freeform=singleForm;
      break;
    }
  }
  if (freeform != null) {
    freeform.remove(null);
    freeform.remove(""String_Node_Str"");
    freeform.put(""String_Node_Str"",""String_Node_Str"");
    br.submitForm(freeform);
  }
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLForm.remove(null);
  DLForm.remove(""String_Node_Str"");
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      checkErrors(downloadLink);
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
              if (dllink == null)               dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=null;
  Form[] allForms=br.getForms();
  if (allForms == null || allForms.length == 0)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  for (  Form singleForm : allForms) {
    if (singleForm.containsHTML(""String_Node_Str"")) {
      freeform=singleForm;
      break;
    }
  }
  if (freeform != null) {
    freeform.remove(null);
    freeform.remove(""String_Node_Str"");
    freeform.put(""String_Node_Str"",""String_Node_Str"");
    br.submitForm(freeform);
  }
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLForm.remove(null);
  DLForm.remove(""String_Node_Str"");
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  if (!(dl.getConnection().isContentDisposition())) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      checkErrors(downloadLink);
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
              if (dllink == null)               dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20810,"@Override public void handlePremium(DownloadLink link,Account account) throws Exception {
  String passCode=null;
  requestFileInformation(link);
  login(account);
  br.setCookie(COOKIE_HOST,""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(false);
  br.getPage(link.getDownloadURL());
  if (nopremium) {
    doFree(link);
  }
 else {
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (DLForm == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      if (br.containsHTML(""String_Node_Str"")) {
        if (link.getStringProperty(""String_Node_Str"",null) == null) {
          passCode=getUserInput(null,link);
        }
 else {
          passCode=link.getStringProperty(""String_Node_Str"",null);
        }
        DLForm.put(""String_Node_Str"",passCode);
        logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      }
      br.submitForm(DLForm);
      checkErrors(link);
      dllink=br.getRedirectLocation();
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str"")) {
          logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
          link.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,-10);
    if (passCode != null) {
      link.setProperty(""String_Node_Str"",passCode);
    }
    boolean error=false;
    try {
      if (dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
        error=true;
      }
    }
 catch (    Exception e) {
      error=true;
    }
    if (error == true) {
      logger.warning(""String_Node_Str"");
      br.followConnection();
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      }
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    dl.startDownload();
  }
}","@Override public void handlePremium(DownloadLink link,Account account) throws Exception {
  String passCode=null;
  requestFileInformation(link);
  login(account);
  br.setCookie(COOKIE_HOST,""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(false);
  br.getPage(link.getDownloadURL());
  if (nopremium) {
    doFree(link);
  }
 else {
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (DLForm == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      if (br.containsHTML(""String_Node_Str"")) {
        if (link.getStringProperty(""String_Node_Str"",null) == null) {
          passCode=getUserInput(null,link);
        }
 else {
          passCode=link.getStringProperty(""String_Node_Str"",null);
        }
        DLForm.put(""String_Node_Str"",passCode);
        logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      }
      br.submitForm(DLForm);
      checkErrors(link);
      dllink=br.getRedirectLocation();
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str"")) {
          logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
          link.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,-10);
    if (passCode != null) {
      link.setProperty(""String_Node_Str"",passCode);
    }
    if (!(dl.getConnection().isContentDisposition())) {
      logger.warning(""String_Node_Str"");
      br.followConnection();
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      }
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    dl.startDownload();
  }
}"
20811,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  String regexedwaittime=br.getRegex(""String_Node_Str"").getMatch(0);
  int waitThis=30;
  if (regexedwaittime != null)   waitThis=Integer.parseInt(regexedwaittime);
  sleep((waitThis + 2) * 1001l,downloadLink);
  String dllink=""String_Node_Str"" + new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  if (dllink.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  String regexedwaittime=br.getRegex(""String_Node_Str"").getMatch(0);
  int waitThis=30;
  if (regexedwaittime != null)   waitThis=Integer.parseInt(regexedwaittime);
  sleep((waitThis + 2) * 1001l,downloadLink);
  String dllink=""String_Node_Str"" + br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20812,"@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setName(filename.trim());
  if (filesize != null) {
    parameter.setDownloadSize(Regex.getSize(filesize.trim()));
  }
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"") || !br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setName(filename.trim());
  if (filesize != null) {
    parameter.setDownloadSize(Regex.getSize(filesize.trim()));
  }
  return AvailableStatus.TRUE;
}"
20813,"@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  parameter.setName(filename.trim());
  if (filesize != null)   parameter.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,""String_Node_Str"");
  }
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  parameter.setName(filename.trim());
  if (filesize != null)   parameter.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
20814,"public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String param=parameter.toString();
  br.setFollowRedirects(true);
  br.getPage(param);
  param=br.getURL();
  br.setFollowRedirects(false);
  String[] worker=param.split(""String_Node_Str"");
  String code=worker[1].substring(0,3);
  String id=worker[1].substring(3);
  LinkedHashMap<String,String> post=new LinkedHashMap<String,String>();
  post.put(""String_Node_Str"",code);
  post.put(""String_Node_Str"",id);
  String rsOrMega=new Regex(param,""String_Node_Str"").getMatch(0);
  br.postPage(""String_Node_Str"" + rsOrMega + ""String_Node_Str"",post);
  String failedUrl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (failedUrl != null) {
    decryptedLinks.add(createDownloadlink(failedUrl));
    return decryptedLinks;
  }
  br.getPage(""String_Node_Str"" + rsOrMega + ""String_Node_Str"");
  String finalurl=br.getRegex(""String_Node_Str"").getMatch(0);
  decryptedLinks.add(createDownloadlink(finalurl));
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String param=parameter.toString();
  br.setFollowRedirects(true);
  br.getPage(param);
  param=br.getURL();
  br.setFollowRedirects(false);
  String[] worker=param.split(""String_Node_Str"");
  String code=worker[1].substring(0,3);
  String id=worker[1].substring(3);
  LinkedHashMap<String,String> post=new LinkedHashMap<String,String>();
  post.put(""String_Node_Str"",code);
  post.put(""String_Node_Str"",id);
  String rsOrMega=new Regex(param,""String_Node_Str"").getMatch(0);
  br.postPage(""String_Node_Str"" + rsOrMega + ""String_Node_Str"",post);
  String failedUrl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (failedUrl != null)   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  br.getPage(""String_Node_Str"" + rsOrMega + ""String_Node_Str"");
  if (br.getRedirectLocation() != null && br.getRedirectLocation().equals(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  String finalurl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (finalurl == null)   return null;
  decryptedLinks.add(createDownloadlink(finalurl));
  return decryptedLinks;
}"
20815,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  requestFileInformation(downloadLink);
  Form freeform=br.getFormBySubmitvalue(""String_Node_Str"");
  if (freeform == null) {
    freeform=br.getFormBySubmitvalue(""String_Node_Str"");
    if (freeform == null) {
      freeform=br.getFormbyKey(""String_Node_Str"");
    }
  }
  if (freeform != null)   br.submitForm(freeform);
  if (br.containsHTML(""String_Node_Str"")) {
    String filesizelimit=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit);
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
  }
  if (br.containsHTML(""String_Node_Str"")) {
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String captchaurl=br.getRegex(""String_Node_Str"").getMatch(1);
    if (captchaurl == null)     captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"") && !br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    System.out.print(br.toString());
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      if (br.containsHTML(""String_Node_Str"")) {
        int minutes=0, seconds=0, hours=0;
        String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmphrs != null)         hours=Integer.parseInt(tmphrs);
        String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmpmin != null)         minutes=Integer.parseInt(tmpmin);
        String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmpsec != null)         seconds=Integer.parseInt(tmpsec);
        int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
        logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
        String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
        String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmphrs == null && tmpmin == null && tmpsec == null) {
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
        }
 else {
          int minutes=0, seconds=0, hours=0;
          if (tmphrs != null)           hours=Integer.parseInt(tmphrs);
          if (tmpmin != null)           minutes=Integer.parseInt(tmpmin);
          if (tmpsec != null)           seconds=Integer.parseInt(tmpsec);
          int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
          logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
        }
      }
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  requestFileInformation(downloadLink);
  Form freeform=br.getFormBySubmitvalue(""String_Node_Str"");
  if (freeform == null) {
    freeform=br.getFormBySubmitvalue(""String_Node_Str"");
    if (freeform == null) {
      freeform=br.getFormbyKey(""String_Node_Str"");
    }
  }
  if (freeform != null)   br.submitForm(freeform);
  if (br.containsHTML(""String_Node_Str"")) {
    String filesizelimit=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit);
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
  }
  if (br.containsHTML(""String_Node_Str"")) {
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.getRegex(CPREGEX0).getMatch(1) != null || br.getRegex(CPREGEX1).getMatch(0) != null) {
    logger.info(""String_Node_Str"");
    String captchaurl=br.getRegex(CPREGEX0).getMatch(1);
    if (captchaurl == null)     captchaurl=br.getRegex(CPREGEX1).getMatch(0);
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"") && !br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      if (br.containsHTML(""String_Node_Str"")) {
        int minutes=0, seconds=0, hours=0;
        String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmphrs != null)         hours=Integer.parseInt(tmphrs);
        String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmpmin != null)         minutes=Integer.parseInt(tmpmin);
        String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmpsec != null)         seconds=Integer.parseInt(tmpsec);
        int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
        logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
        String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
        String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmphrs == null && tmpmin == null && tmpsec == null) {
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
        }
 else {
          int minutes=0, seconds=0, hours=0;
          if (tmphrs != null)           hours=Integer.parseInt(tmphrs);
          if (tmpmin != null)           minutes=Integer.parseInt(tmpmin);
          if (tmpsec != null)           seconds=Integer.parseInt(tmpsec);
          int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
          logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
        }
      }
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20816,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(false);
  Form captchaform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (captchaurl == null)   captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (captchaurl == null || captchaform == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  captchaform.remove(null);
  String passCode=null;
  for (int i=0; i <= 5; i++) {
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      captchaform.put(""String_Node_Str"",passCode);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    captchaform.put(""String_Node_Str"",code);
    br.submitForm(captchaform);
    if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      downloadLink.setProperty(""String_Node_Str"",null);
      continue;
    }
    break;
  }
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    downloadLink.setProperty(""String_Node_Str"",null);
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  String domain=br.getRegex(""String_Node_Str"").getMatch(0);
  String dirname=br.getRegex(""String_Node_Str"").getMatch(0);
  String basename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (domain == null || dirname == null || basename == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  String dllink=""String_Node_Str"" + domain + dirname+ ""String_Node_Str""+ basename;
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(false);
  Form captchaform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (captchaurl == null)   captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
  if (captchaurl == null || captchaform == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  captchaform.remove(null);
  String passCode=null;
  for (int i=0; i <= 5; i++) {
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      captchaform.put(""String_Node_Str"",passCode);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    captchaform.put(""String_Node_Str"",code);
    br.submitForm(captchaform);
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      downloadLink.setProperty(""String_Node_Str"",null);
      continue;
    }
    break;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    downloadLink.setProperty(""String_Node_Str"",null);
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  String domain=br.getRegex(""String_Node_Str"").getMatch(0);
  String dirname=br.getRegex(""String_Node_Str"").getMatch(0);
  String basename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (domain == null || dirname == null || basename == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  String dllink=""String_Node_Str"" + domain + dirname+ ""String_Node_Str""+ basename;
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20817,"public void run(){
  while (!isDone) {
    WatchKey signalledKey;
    try {
      signalledKey=watchService.take();
    }
 catch (    InterruptedException ix) {
      continue;
    }
catch (    ClosedWatchServiceException cwse) {
      System.out.println(""String_Node_Str"");
      break;
    }
    List<WatchEvent<?>> list=signalledKey.pollEvents();
    signalledKey.reset();
    for (    WatchEvent<?> e : list) {
      String message=""String_Node_Str"";
      if (e.kind() == StandardWatchEventKind.ENTRY_CREATE) {
        Path context=(Path)e.context();
        String filename=context.toString();
        message=filename + ""String_Node_Str"";
        if (isContainer(filename)) {
          String absPath=folder + ""String_Node_Str"" + filename;
          String md5Hash=importContainer(absPath);
          history.add(new FolderWatchHistoryEntry(filename,absPath,md5Hash));
          subConfig.setProperty(FolderWatchConstants.CONFIG_KEY_HISTORY,history);
          subConfig.save();
        }
      }
 else       if (e.kind() == StandardWatchEventKind.ENTRY_DELETE) {
        Path context=(Path)e.context();
        message=context.toString() + ""String_Node_Str"";
      }
 else       if (e.kind() == StandardWatchEventKind.OVERFLOW) {
        message=""String_Node_Str"";
      }
      System.out.println(message);
    }
  }
}","public void run(){
  while (!isDone) {
    WatchKey signalledKey;
    try {
      signalledKey=watchService.take();
    }
 catch (    InterruptedException ix) {
      continue;
    }
catch (    ClosedWatchServiceException cwse) {
      System.out.println(""String_Node_Str"");
      break;
    }
    List<WatchEvent<?>> list=signalledKey.pollEvents();
    signalledKey.reset();
    for (    WatchEvent<?> e : list) {
      String message=""String_Node_Str"";
      if (e.kind() == StandardWatchEventKind.ENTRY_CREATE) {
        Path context=(Path)e.context();
        String filename=context.toString();
        message=filename + ""String_Node_Str"";
        if (isContainer(filename)) {
          String absPath=folder + ""String_Node_Str"" + filename;
          String md5Hash=importContainer(absPath);
          history.add(new FolderWatchHistoryEntry(filename,absPath,md5Hash));
          subConfig.setProperty(FolderWatchConstants.CONFIG_KEY_HISTORY,history);
          subConfig.save();
        }
      }
 else       if (e.kind() == StandardWatchEventKind.ENTRY_DELETE) {
        Path context=(Path)e.context();
        history.updateEntries();
        subConfig.setProperty(FolderWatchConstants.CONFIG_KEY_HISTORY,history);
        subConfig.save();
        message=context.toString() + ""String_Node_Str"";
      }
 else       if (e.kind() == StandardWatchEventKind.OVERFLOW) {
        message=""String_Node_Str"";
      }
      System.out.println(message);
    }
  }
}"
20818,"@Override public void actionPerformed(ActionEvent e){
  if (e.getID() == 0) {
    try {
      subConfig.setProperty(FolderWatchConstants.CONFIG_KEY_ENABLED,toggleAction.isSelected());
      subConfig.save();
    }
 catch (    Exception ex) {
      JDLogger.exception(ex);
    }
    startWatching(isEnabled);
  }
 else   if (e.getID() == 1) {
    if (showGuiAction.isSelected()) {
      showGui();
    }
 else {
      view.close();
    }
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (e.getID() == 0) {
    try {
      subConfig.setProperty(FolderWatchConstants.CONFIG_KEY_ENABLED,toggleAction.isSelected());
      subConfig.save();
    }
 catch (    Exception ex) {
      JDLogger.exception(ex);
    }
    startWatching(isEnabled);
  }
 else   if (e.getID() == 1) {
    if (showGuiAction.isSelected())     showGui();
 else     view.close();
  }
}"
20819,"private void deleteContainer(File container){
  if (isContainer(container)) {
    container.delete();
  }
}","private void deleteContainer(File container){
  if (isContainer(container))   container.delete();
}"
20820,"public void updateEntries(){
  ArrayList<FolderWatchHistoryEntry> entries=this;
  boolean value;
  for (  FolderWatchHistoryEntry entry : entries) {
    value=isFileExisting(entry.getAbsolutePath());
    entry.setPhysical(value);
  }
}","public void updateEntries(){
  ArrayList<FolderWatchHistoryEntry> entries=this;
  boolean value;
  for (  FolderWatchHistoryEntry entry : entries) {
    if (entry.isPhysical()) {
      value=isFileExisting(entry.getAbsolutePath());
      entry.setPhysical(value);
    }
  }
}"
20821,"public FolderWatchHistoryEntry(String basename,String absolutePath,String md5Hash){
  set(basename,absolutePath,md5Hash,true);
}","public FolderWatchHistoryEntry(String filename,String absolutePath,String md5Hash){
  set(filename,absolutePath,md5Hash,true);
}"
20822,"public void set(String basename,String absolutePath,String md5Hash,boolean isPhysical){
  this.setBasename(basename);
  this.setAbsolutePath(absolutePath);
  this.setMd5Hash(md5Hash);
  this.setImportDate();
  this.setPhysical(isPhysical);
}","public void set(String filename,String absolutePath,String md5Hash,boolean isPhysical){
  this.setFilename(filename);
  this.setAbsolutePath(absolutePath);
  this.setMd5Hash(md5Hash);
  this.setImportDate();
  this.setPhysical(isPhysical);
}"
20823,"private static Table createTable(Table table){
  tables.add(table);
  return table;
}","public static Table createTable(Table table){
  tables.add(table);
  return table;
}"
20824,"private static void initTables(){
  tables=new ArrayList<Table>();
  Table t=null;
  StringBuilder info=null;
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str"",""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  info=new StringBuilder();
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  t.setInfo(info.toString());
  t.setCommand(""String_Node_Str"");
  info=new StringBuilder();
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  t.setInfo(info.toString());
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  ArrayList<OptionalPluginWrapper> addons=OptionalPluginWrapper.getOptionalWrapper();
  for (  OptionalPluginWrapper addon : addons) {
    if (addon != null && addon.isLoaded() && addon.isEnabled()) {
      PluginOptional addonIntance=addon.getPlugin();
      if (addonIntance instanceof RemoteSupport) {
        ((RemoteSupport)addonIntance).setCmdTableName();
        ((RemoteSupport)addonIntance).initCmdTable();
      }
    }
  }
}","private static void initTables(){
  tables=new ArrayList<Table>();
  Table t=null;
  StringBuilder info=null;
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str"",""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  info=new StringBuilder();
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  t.setInfo(info.toString());
  t.setCommand(""String_Node_Str"");
  info=new StringBuilder();
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  t.setInfo(info.toString());
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t=createTable(new Table(""String_Node_Str""));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  ArrayList<OptionalPluginWrapper> addons=OptionalPluginWrapper.getOptionalWrapper();
  for (  OptionalPluginWrapper addon : addons) {
    if (addon != null && addon.isLoaded() && addon.isEnabled()) {
      PluginOptional addonIntance=addon.getPlugin();
      if (addonIntance instanceof RemoteSupport) {
        ((RemoteSupport)addonIntance).initCmdTable();
      }
    }
  }
}"
20825,"public void initCmdTable(){
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
}","public void initCmdTable(){
  Table t=HelpPage.createTable(new Table(this.getHost()));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
}"
20826,"public Object handleRemoteCmd(String cmd){
  if (cmd.matches(""String_Node_Str"")) {
    for (    File script : getScripts()) {
      Element element=xmlDocument.createElement(""String_Node_Str"");
      xmlDocument.getFirstChild().appendChild(element);
      element.setAttribute(""String_Node_Str"",script.getName().split(""String_Node_Str"")[0]);
      element=xmlDocument.createElement(""String_Node_Str"");
      xmlDocument.getFirstChild().appendChild(element);
      element.setTextContent(script.getAbsolutePath());
      return xmlDocument;
    }
  }
 else   if (cmd.matches(""String_Node_Str"")) {
    String scriptname=new Regex(cmd,""String_Node_Str"").getMatch(0);
    if (launch(scriptname)) {
      return ""String_Node_Str"" + scriptname + ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"" + scriptname + ""String_Node_Str"";
    }
  }
  return null;
}","public Object handleRemoteCmd(String cmd){
  Document xmlDocument=JDUtilities.parseXmlString(""String_Node_Str"",false);
  if (cmd.matches(""String_Node_Str"")) {
    for (    File script : getScripts()) {
      Element element=xmlDocument.createElement(""String_Node_Str"");
      xmlDocument.getFirstChild().appendChild(element);
      element.setAttribute(""String_Node_Str"",script.getName().split(""String_Node_Str"")[0]);
      element=xmlDocument.createElement(""String_Node_Str"");
      xmlDocument.getFirstChild().appendChild(element);
      element.setTextContent(script.getAbsolutePath());
      return xmlDocument;
    }
  }
 else   if (cmd.matches(""String_Node_Str"")) {
    String scriptname=new Regex(cmd,""String_Node_Str"").getMatch(0);
    if (launch(scriptname)) {
      return ""String_Node_Str"" + scriptname + ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"" + scriptname + ""String_Node_Str"";
    }
  }
  return null;
}"
20827,"private boolean startWatching(boolean value){
  if (isEnabled)   if (folder != null && (folder.equals(""String_Node_Str"") == false)) {
    watchingServiceThread=new WatchServiceThread(folder);
    watchingServiceThread.start();
    return true;
  }
 else {
    if (watchingServiceThread.isAlive()) {
      watchingServiceThread.done();
    }
    watchingServiceThread=null;
  }
  return false;
}","private boolean startWatching(boolean param){
  if (param == true) {
    if (folder != null && !folder.equals(""String_Node_Str"")) {
      watchingServiceThread=new WatchServiceThread(folder);
      watchingServiceThread.start();
    }
    return true;
  }
 else {
    if (watchingServiceThread.isAlive()) {
      watchingServiceThread.done();
    }
    watchingServiceThread=null;
  }
  return false;
}"
20828,"public void initCmdTable(){
  Table t=HelpPage.createTable(new Table(this.getHost()));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
}","public void initCmdTable(){
  Table t=HelpPage.createTable(new Table(this.getHost()));
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
  t.setCommand(""String_Node_Str"");
  t.setInfo(""String_Node_Str"");
}"
20829,"@Override public void actionPerformed(ActionEvent e){
  if (e.getID() == 0) {
    try {
      subConfig.setProperty(FolderWatchConstants.CONFIG_KEY_ENABLED,toggleAction.isSelected());
      subConfig.save();
    }
 catch (    Exception ex) {
      JDLogger.exception(ex);
    }
    startWatching(isEnabled);
  }
 else   if (e.getID() == 1) {
    if (showGuiAction.isSelected())     showGui();
 else     view.close();
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (e.getID() == 0) {
    try {
      subConfig.setProperty(FolderWatchConstants.CONFIG_KEY_ENABLED,toggleAction.isSelected());
      subConfig.save();
    }
 catch (    Exception ex) {
      JDLogger.exception(ex);
    }
    startWatching(toggleAction.isSelected());
  }
 else   if (e.getID() == 1) {
    if (showGuiAction.isSelected())     showGui();
 else     view.close();
  }
}"
20830,"public Object handleRemoteCmd(String cmd){
  return null;
}","public Object handleRemoteCmd(String cmd){
  if (cmd.matches(""String_Node_Str"")) {
    toggleAction.setSelected(true);
    subConfig.setProperty(FolderWatchConstants.CONFIG_KEY_ENABLED,true);
    subConfig.save();
    startWatching(true);
    return ""String_Node_Str"";
  }
 else   if (cmd.matches(""String_Node_Str"")) {
    toggleAction.setSelected(false);
    subConfig.setProperty(FolderWatchConstants.CONFIG_KEY_ENABLED,false);
    subConfig.save();
    startWatching(false);
    return ""String_Node_Str"";
  }
 else   if (cmd.matches(""String_Node_Str"")) {
    String folder=new Regex(cmd,""String_Node_Str"").getMatch(0);
    watchingServiceThread.register(folder);
    return folder + ""String_Node_Str"";
  }
  return null;
}"
20831,"public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String fpName=parameter.getStringProperty(""String_Node_Str"");
  br.setFollowRedirects(true);
  br.getPage(parameter.toString());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str"")) {
    String parm=parameter.toString();
    String filelink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filelink == null)     return null;
    String matches=br.getRegex(""String_Node_Str"").getMatch(0);
    if (matches == null) {
      matches=br.getRegex(""String_Node_Str"").getMatch(0);
      if (matches == null)       return null;
      logger.warning(""String_Node_Str"");
      logger.warning(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return decryptedLinks;
    }
    filelink=rot13(filelink);
    String downloadlink=matches.replaceAll(""String_Node_Str"",filelink + ""String_Node_Str"");
    DownloadLink dlink=createDownloadlink(downloadlink.replace(""String_Node_Str"",""String_Node_Str""));
    dlink.setBrowserUrl(parm);
    dlink.setFinalFileName(filelink.split(""String_Node_Str"")[0] + ""String_Node_Str"");
    decryptedLinks.add(dlink);
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    ArrayList<String> pages=new ArrayList<String>();
    pages.add(""String_Node_Str"");
    String pagenumbers[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if (!(pagenumbers == null) && !(pagenumbers.length == 0)) {
      for (      String aPageNumer : pagenumbers) {
        if (!pages.contains(aPageNumer))         pages.add(aPageNumer);
      }
    }
    progress.setRange(pages.size());
    logger.info(""String_Node_Str"" + pages.size() + ""String_Node_Str"");
    for (    String getthepage : pages) {
      if (!getthepage.equals(""String_Node_Str""))       br.getPage(parameter.toString() + ""String_Node_Str"" + getthepage);
      fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      if (fpName == null)       fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       return null;
      logger.info(""String_Node_Str"" + getthepage + ""String_Node_Str""+ links.length+ ""String_Node_Str"");
      for (      String singlelink : links) {
        DownloadLink dl=createDownloadlink(singlelink);
        if (fpName != null)         dl.setProperty(""String_Node_Str"",fpName);
        decryptedLinks.add(dl);
      }
      progress.increase(1);
    }
  }
 else {
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null) {
      finallink=br.getRegex(""String_Node_Str"").getMatch(0);
      if (finallink == null) {
        finallink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
    if (finallink == null)     return null;
    DownloadLink fina=createDownloadlink(finallink.replace(""String_Node_Str"",""String_Node_Str""));
    decryptedLinks.add(fina);
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String fpName=parameter.getStringProperty(""String_Node_Str"");
  br.setFollowRedirects(true);
  br.getPage(parameter.toString());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str"")) {
    String parm=parameter.toString();
    String filelink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filelink == null)     return null;
    String matches=br.getRegex(""String_Node_Str"").getMatch(0);
    if (matches == null) {
      matches=br.getRegex(""String_Node_Str"").getMatch(0);
      if (matches == null)       return null;
      logger.warning(""String_Node_Str"");
      logger.warning(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return decryptedLinks;
    }
    filelink=rot13(filelink);
    String downloadlink=matches.replaceAll(""String_Node_Str"",filelink).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    DownloadLink dlink=createDownloadlink(downloadlink.replace(""String_Node_Str"",""String_Node_Str""));
    dlink.setBrowserUrl(parm);
    Regex regexName=new Regex(matches,""String_Node_Str"");
    String finalName=regexName.getMatch(0);
    dlink.setFinalFileName(finalName + ""String_Node_Str"");
    decryptedLinks.add(dlink);
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    ArrayList<String> pages=new ArrayList<String>();
    pages.add(""String_Node_Str"");
    String pagenumbers[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if (!(pagenumbers == null) && !(pagenumbers.length == 0)) {
      for (      String aPageNumer : pagenumbers) {
        if (!pages.contains(aPageNumer))         pages.add(aPageNumer);
      }
    }
    progress.setRange(pages.size());
    logger.info(""String_Node_Str"" + pages.size() + ""String_Node_Str"");
    for (    String getthepage : pages) {
      if (!getthepage.equals(""String_Node_Str""))       br.getPage(parameter.toString() + ""String_Node_Str"" + getthepage);
      fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      if (fpName == null)       fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       return null;
      logger.info(""String_Node_Str"" + getthepage + ""String_Node_Str""+ links.length+ ""String_Node_Str"");
      for (      String singlelink : links) {
        DownloadLink dl=createDownloadlink(singlelink);
        if (fpName != null)         dl.setProperty(""String_Node_Str"",fpName);
        decryptedLinks.add(dl);
      }
      progress.increase(1);
    }
  }
 else {
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null) {
      finallink=br.getRegex(""String_Node_Str"").getMatch(0);
      if (finallink == null) {
        finallink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
    if (finallink == null)     return null;
    DownloadLink fina=createDownloadlink(finallink.replace(""String_Node_Str"",""String_Node_Str""));
    decryptedLinks.add(fina);
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}"
20832,"public void handleFree(DownloadLink link) throws Exception {
  if (!link.getDownloadURL().contains(""String_Node_Str""))   requestFileInformation(link);
 else {
    String fileid=new Regex(link.getDownloadURL(),""String_Node_Str"").getMatch(0);
    if (fileid != null)     br.getPage(""String_Node_Str"" + fileid);
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,link.getDownloadURL(),true,0);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink link) throws Exception {
  if (!link.getDownloadURL().contains(""String_Node_Str"") && !link.getDownloadURL().contains(""String_Node_Str""))   requestFileInformation(link);
 else {
    String fileid=new Regex(link.getDownloadURL(),""String_Node_Str"").getMatch(0);
    if (fileid != null)     br.getPage(""String_Node_Str"" + fileid);
 else {
      br.getPage(link.getBrowserUrl());
    }
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,link.getDownloadURL(),true,0);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20833,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString().replace(""String_Node_Str"",""String_Node_Str"");
  br.getPage(parameter);
  String liveDriveUrlUserPart=new Regex(parameter,""String_Node_Str"").getMatch(0);
  liveDriveUrlUserPart=liveDriveUrlUserPart.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String decryptedlinkpart=""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str"";
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fpName == null)   fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(""String_Node_Str"")) {
    String pathID=new Regex(parameter,""String_Node_Str"").getMatch(0);
    String ID=br.getRegex(""String_Node_Str"").getMatch(0);
    if (ID == null) {
      ID=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (ID == null || pathID == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    DownloadLink theFinalLink=createDownloadlink(decryptedlinkpart + ""String_Node_Str"" + pathID);
    theFinalLink.setProperty(""String_Node_Str"",ID);
    decryptedLinks.add(theFinalLink);
  }
 else {
    String thereIsThisSecretID=br.getRegex(""String_Node_Str"").getMatch(0);
    if (thereIsThisSecretID == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    Browser br2=br.cloneBrowser();
    br2.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
    br2.postPage(""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str"",""String_Node_Str"" + thereIsThisSecretID);
    String[] fileInformation=br2.getRegex(""String_Node_Str"").getColumn(0);
    if (fileInformation == null || fileInformation.length == 0) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    for (    String dl : fileInformation) {
      String ID=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filename=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filesize=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filetype=new Regex(dl,""String_Node_Str"").getMatch(0);
      String fileOrFolderPath=new Regex(dl,""String_Node_Str"").getMatch(0);
      if (ID == null || filename == null || filetype == null || fileOrFolderPath == null) {
        logger.warning(""String_Node_Str"" + parameter);
        return null;
      }
      if (filetype.equals(""String_Node_Str"")) {
        decryptedLinks.add(createDownloadlink(""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str""+ fileOrFolderPath));
      }
 else {
        DownloadLink theFinalLink=createDownloadlink(decryptedlinkpart + fileOrFolderPath);
        theFinalLink.setName(filename);
        theFinalLink.setDownloadSize(Long.parseLong(filesize));
        theFinalLink.setProperty(""String_Node_Str"",ID);
        theFinalLink.setAvailable(true);
        decryptedLinks.add(theFinalLink);
      }
    }
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString().replace(""String_Node_Str"",""String_Node_Str"");
  br.getPage(parameter);
  String liveDriveUrlUserPart=new Regex(parameter,""String_Node_Str"").getMatch(0);
  liveDriveUrlUserPart=liveDriveUrlUserPart.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String decryptedlinkpart=""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str"";
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fpName == null)   fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(""String_Node_Str"")) {
    String pathID=new Regex(parameter,""String_Node_Str"").getMatch(0);
    String ID=br.getRegex(""String_Node_Str"").getMatch(0);
    if (ID == null) {
      ID=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (ID == null || pathID == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    DownloadLink theFinalLink=createDownloadlink(decryptedlinkpart + ""String_Node_Str"" + pathID);
    theFinalLink.setProperty(""String_Node_Str"",ID);
    decryptedLinks.add(theFinalLink);
  }
 else {
    String thereIsThisSecretID=br.getRegex(""String_Node_Str"").getMatch(0);
    if (thereIsThisSecretID == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    Browser br2=br.cloneBrowser();
    br2.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
    br2.postPage(""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str"",""String_Node_Str"" + thereIsThisSecretID);
    String[] fileInformation=br2.getRegex(""String_Node_Str"").getColumn(0);
    if (fileInformation == null || fileInformation.length == 0) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    for (    String dl : fileInformation) {
      String ID=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filename=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filesize=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filetype=new Regex(dl,""String_Node_Str"").getMatch(0);
      String fileOrFolderPath=new Regex(dl,""String_Node_Str"").getMatch(0);
      if (ID == null || filename == null || filetype == null || fileOrFolderPath == null) {
        logger.warning(""String_Node_Str"" + parameter);
        return null;
      }
      if (filetype.equals(""String_Node_Str"")) {
        decryptedLinks.add(createDownloadlink(""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str""+ fileOrFolderPath));
      }
 else {
        DownloadLink theFinalLink=createDownloadlink(decryptedlinkpart + fileOrFolderPath);
        theFinalLink.setName(filename.replace(""String_Node_Str"",""String_Node_Str""));
        theFinalLink.setDownloadSize(Long.parseLong(filesize));
        theFinalLink.setProperty(""String_Node_Str"",ID);
        theFinalLink.setAvailable(true);
        decryptedLinks.add(theFinalLink);
      }
    }
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}"
20834,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setFollowRedirects(false);
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  String postvar=new Regex(parameter,""String_Node_Str"").getMatch(0);
  if (postvar == null)   return null;
  br.getPage(parameter);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().equals(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.getRedirectLocation() != null)   br.getPage(br.getRedirectLocation());
  String security=br.getRegex(""String_Node_Str"").getMatch(0);
  br.postPage(""String_Node_Str"",""String_Node_Str"" + postvar);
  String[] linksCount=br.getRegex(""String_Node_Str"").getColumn(0);
  if (linksCount == null || linksCount.length == 0)   return null;
  int linkCounter=linksCount.length;
  if (security != null) {
    Regex numberRegex=new Regex(security,""String_Node_Str"");
    String num1=numberRegex.getMatch(0);
    String num2=numberRegex.getMatch(2);
    String plusMinus=numberRegex.getMatch(1);
    if (num1 == null || num2 == null || plusMinus == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    int equals=0;
    if (plusMinus.equals(""String_Node_Str"")) {
      equals=Integer.parseInt(num1) + Integer.parseInt(num2);
    }
 else {
      equals=Integer.parseInt(num1) - Integer.parseInt(num2);
    }
    br.postPage(""String_Node_Str"",""String_Node_Str"" + equals);
    if (!br.toString().trim().equals(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
  }
  logger.info(""String_Node_Str"" + linkCounter + ""String_Node_Str"");
  progress.setRange(linkCounter);
  for (int i=0; i <= linkCounter - 1; i++) {
    String actualPage=""String_Node_Str"" + postvar + ""String_Node_Str""+ i;
    br.getPage(actualPage);
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null) {
      if (br.containsHTML(""String_Node_Str"")) {
        String singleProtectedLink=""String_Node_Str"" + postvar + ""String_Node_Str""+ i;
        br.getPage(singleProtectedLink);
        if (br.getRedirectLocation() == null) {
          logger.warning(""String_Node_Str"" + parameter);
          return null;
        }
        String turboId=new Regex(br.getRedirectLocation(),""String_Node_Str"").getMatch(0);
        if (turboId == null) {
          logger.warning(""String_Node_Str"" + actualPage);
          return null;
        }
        finallink=""String_Node_Str"" + turboId + ""String_Node_Str"";
      }
 else       if (br.containsHTML(""String_Node_Str"")) {
        finallink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
    if (finallink == null) {
      logger.warning(""String_Node_Str"" + parameter);
    }
    decryptedLinks.add(createDownloadlink(finallink));
    progress.increase(1);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setFollowRedirects(false);
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  String postvar=new Regex(parameter,""String_Node_Str"").getMatch(0);
  if (postvar == null)   return null;
  br.getPage(parameter);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().equals(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.getRedirectLocation() != null)   br.getPage(br.getRedirectLocation());
  String security=br.getRegex(""String_Node_Str"").getMatch(0);
  br.postPage(""String_Node_Str"",""String_Node_Str"" + postvar);
  String[] linksCount=br.getRegex(""String_Node_Str"").getColumn(0);
  if (linksCount == null || linksCount.length == 0)   return null;
  int linkCounter=linksCount.length;
  if (security != null) {
    Regex numberRegex=new Regex(security,""String_Node_Str"");
    String num1=numberRegex.getMatch(0);
    String num2=numberRegex.getMatch(2);
    String aPage=numberRegex.getMatch(1);
    if (num1 == null || num2 == null || aPage == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    int equals=0;
    File aFile=getLocalCaptchaFile();
    Browser.download(aFile,br.cloneBrowser().openGetConnection(""String_Node_Str"" + aPage));
    String hash=JDHash.getMD5(aFile);
    if (hash.equals(""String_Node_Str""))     equals=Integer.parseInt(num1) - Integer.parseInt(num2);
 else     equals=Integer.parseInt(num1) + Integer.parseInt(num2);
    br.postPage(""String_Node_Str"",""String_Node_Str"" + equals);
    if (!br.toString().trim().equals(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
  }
  logger.info(""String_Node_Str"" + linkCounter + ""String_Node_Str"");
  progress.setRange(linkCounter);
  for (int i=0; i <= linkCounter - 1; i++) {
    String actualPage=""String_Node_Str"" + postvar + ""String_Node_Str""+ i;
    br.getPage(actualPage);
    if (br.containsHTML(""String_Node_Str"")) {
      logger.info(""String_Node_Str"" + parameter + ""String_Node_Str""+ i);
      continue;
    }
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null) {
      if (br.containsHTML(""String_Node_Str"")) {
        String singleProtectedLink=""String_Node_Str"" + postvar + ""String_Node_Str""+ i;
        br.getPage(singleProtectedLink);
        if (br.getRedirectLocation() == null) {
          logger.warning(""String_Node_Str"" + parameter);
          return null;
        }
        String turboId=new Regex(br.getRedirectLocation(),""String_Node_Str"").getMatch(0);
        if (turboId == null) {
          logger.warning(""String_Node_Str"" + actualPage);
          return null;
        }
        finallink=""String_Node_Str"" + turboId + ""String_Node_Str"";
      }
 else       if (br.containsHTML(""String_Node_Str"")) {
        finallink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (finallink == null) {
          finallink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (finallink != null)           finallink=""String_Node_Str"" + finallink;
        }
      }
    }
    if (finallink == null) {
      logger.warning(""String_Node_Str"" + parameter);
    }
    decryptedLinks.add(createDownloadlink(finallink));
    progress.increase(1);
  }
  return decryptedLinks;
}"
20835,"public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String fpName=parameter.getStringProperty(""String_Node_Str"");
  br.setFollowRedirects(true);
  br.getPage(parameter.toString());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str"")) {
    String parm=parameter.toString();
    String filelink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filelink == null)     return null;
    String matches=br.getRegex(""String_Node_Str"").getMatch(0);
    if (matches == null) {
      matches=br.getRegex(""String_Node_Str"").getMatch(0);
      if (matches == null)       return null;
      logger.warning(""String_Node_Str"");
      logger.warning(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return decryptedLinks;
    }
    filelink=rot13(filelink);
    String downloadlink=matches.replaceAll(""String_Node_Str"",filelink).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    DownloadLink dlink=createDownloadlink(downloadlink.replace(""String_Node_Str"",""String_Node_Str""));
    dlink.setBrowserUrl(parm);
    Regex regexName=new Regex(matches,""String_Node_Str"");
    String finalName=regexName.getMatch(0);
    dlink.setFinalFileName(finalName + ""String_Node_Str"");
    decryptedLinks.add(dlink);
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    ArrayList<String> pages=new ArrayList<String>();
    pages.add(""String_Node_Str"");
    String pagenumbers[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if (!(pagenumbers == null) && !(pagenumbers.length == 0)) {
      for (      String aPageNumer : pagenumbers) {
        if (!pages.contains(aPageNumer))         pages.add(aPageNumer);
      }
    }
    progress.setRange(pages.size());
    logger.info(""String_Node_Str"" + pages.size() + ""String_Node_Str"");
    for (    String getthepage : pages) {
      if (!getthepage.equals(""String_Node_Str""))       br.getPage(parameter.toString() + ""String_Node_Str"" + getthepage);
      fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      if (fpName == null)       fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       return null;
      logger.info(""String_Node_Str"" + getthepage + ""String_Node_Str""+ links.length+ ""String_Node_Str"");
      for (      String singlelink : links) {
        DownloadLink dl=createDownloadlink(singlelink);
        if (fpName != null)         dl.setProperty(""String_Node_Str"",fpName);
        decryptedLinks.add(dl);
      }
      progress.increase(1);
    }
  }
 else {
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null) {
      finallink=br.getRegex(""String_Node_Str"").getMatch(0);
      if (finallink == null) {
        finallink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
    if (finallink == null)     return null;
    DownloadLink fina=createDownloadlink(finallink.replace(""String_Node_Str"",""String_Node_Str""));
    decryptedLinks.add(fina);
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String fpName=parameter.getStringProperty(""String_Node_Str"");
  br.setFollowRedirects(true);
  br.getPage(parameter.toString());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str"")) {
    String parm=parameter.toString();
    String filelink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filelink == null)     return null;
    String matches=br.getRegex(""String_Node_Str"").getMatch(0);
    if (matches == null) {
      matches=br.getRegex(""String_Node_Str"").getMatch(0);
      if (matches == null)       return null;
      logger.warning(""String_Node_Str"");
      logger.warning(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return decryptedLinks;
    }
    filelink=rot13(filelink);
    String downloadlink=matches.replaceAll(""String_Node_Str"",filelink).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    DownloadLink dlink=createDownloadlink(downloadlink.replace(""String_Node_Str"",""String_Node_Str""));
    dlink.setBrowserUrl(parm);
    Regex regexName=new Regex(matches,""String_Node_Str"");
    String finalName=regexName.getMatch(0);
    dlink.setFinalFileName(finalName + ""String_Node_Str"");
    decryptedLinks.add(dlink);
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    ArrayList<String> pages=new ArrayList<String>();
    pages.add(""String_Node_Str"");
    String pagenumbers[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if (!(pagenumbers == null) && !(pagenumbers.length == 0)) {
      for (      String aPageNumer : pagenumbers) {
        if (!pages.contains(aPageNumer))         pages.add(aPageNumer);
      }
    }
    progress.setRange(pages.size());
    logger.info(""String_Node_Str"" + pages.size() + ""String_Node_Str"");
    for (    String getthepage : pages) {
      if (!getthepage.equals(""String_Node_Str""))       br.getPage(parameter.toString() + ""String_Node_Str"" + getthepage);
      fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      if (fpName == null)       fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       return null;
      logger.info(""String_Node_Str"" + getthepage + ""String_Node_Str""+ links.length+ ""String_Node_Str"");
      for (      String singlelink : links) {
        DownloadLink dl=createDownloadlink(singlelink);
        if (fpName != null)         dl.setProperty(""String_Node_Str"",fpName);
        decryptedLinks.add(dl);
      }
      progress.increase(1);
    }
  }
 else {
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null) {
      finallink=br.getRegex(""String_Node_Str"").getMatch(1);
      if (finallink == null) {
        finallink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
    if (finallink == null)     return null;
    DownloadLink fina=createDownloadlink(finallink.replace(""String_Node_Str"",""String_Node_Str""));
    decryptedLinks.add(fina);
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}"
20836,"public void handleFree(DownloadLink link) throws Exception {
  if (!link.getDownloadURL().contains(""String_Node_Str"") && !link.getDownloadURL().contains(""String_Node_Str""))   requestFileInformation(link);
 else {
    String fileid=new Regex(link.getDownloadURL(),""String_Node_Str"").getMatch(0);
    if (fileid != null)     br.getPage(""String_Node_Str"" + fileid);
 else {
      br.getPage(link.getBrowserUrl());
    }
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,link.getDownloadURL(),true,0);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink link) throws Exception {
  if (!link.getDownloadURL().contains(""String_Node_Str"") && !link.getDownloadURL().contains(""String_Node_Str""))   requestFileInformation(link);
 else {
    String fileid=new Regex(link.getDownloadURL(),""String_Node_Str"").getMatch(0);
    if (fileid != null)     br.getPage(""String_Node_Str"" + fileid);
 else {
      br.getPage(link.getBrowserUrl());
    }
  }
  if (link.getDownloadURL().endsWith(""String_Node_Str""))   dl=jd.plugins.BrowserAdapter.openDownload(br,link,link.getDownloadURL(),true,0);
 else   dl=jd.plugins.BrowserAdapter.openDownload(br,link,link.getDownloadURL());
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20837,"public void login(Account account) throws Exception {
  this.setBrowserExclusive();
  br.setFollowRedirects(false);
  br.getPage(""String_Node_Str"");
  br.postPage(""String_Node_Str"",""String_Node_Str"" + Encoding.urlEncode(account.getUser()) + ""String_Node_Str""+ Encoding.urlEncode(account.getPass()));
  String premCookie=br.getCookie(""String_Node_Str"",""String_Node_Str"");
  if (premCookie == null || !premCookie.equalsIgnoreCase(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
  }
}","public void login(Account account) throws Exception {
  this.setBrowserExclusive();
  br.setFollowRedirects(false);
  br.getPage(""String_Node_Str"");
  br.getPage(""String_Node_Str"");
  br.postPage(""String_Node_Str"",""String_Node_Str"" + Encoding.urlEncode(account.getUser()) + ""String_Node_Str""+ Encoding.urlEncode(account.getPass()));
  String premCookie=br.getCookie(""String_Node_Str"",""String_Node_Str"");
  if (premCookie == null || !premCookie.equalsIgnoreCase(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
  }
}"
20838,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  String passCode=null;
  requestFileInformation(downloadLink);
  login(account);
  String dllink=downloadLink.getDownloadURL();
  br.getPage(dllink);
  String url=br.getRedirectLocation();
  if (url == null) {
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (dl.getConnection() != null && dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(JDL.L(""String_Node_Str"",""String_Node_Str""),downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      Form form=br.getForm(0);
      form.put(""String_Node_Str"",Encoding.urlEncode(passCode));
      dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,true,0);
    }
 else     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (dl.getConnection() != null && dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    errorHandling(downloadLink);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  String passCode=null;
  requestFileInformation(downloadLink);
  login(account);
  String dllink=downloadLink.getDownloadURL();
  br.getPage(dllink);
  String url=br.getRedirectLocation();
  if (url == null) {
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (dl.getConnection() != null && dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(JDL.L(""String_Node_Str"",""String_Node_Str""),downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      Form form=br.getForm(0);
      form.put(""String_Node_Str"",Encoding.urlEncode(passCode));
      dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,true,0);
    }
 else     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (dl.getConnection() != null && dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    errorHandling(downloadLink);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20839,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString().replace(""String_Node_Str"",""String_Node_Str"");
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fpName == null)   fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(""String_Node_Str"")) {
    String pathID=new Regex(parameter,""String_Node_Str"").getMatch(0);
    String ID=br.getRegex(""String_Node_Str"").getMatch(0);
    if (ID == null) {
      ID=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (ID == null || pathID == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    DownloadLink theFinalLink=createDownloadlink(DECRYPTEDLINKPART + ""String_Node_Str"" + pathID);
    theFinalLink.setProperty(""String_Node_Str"",ID);
    decryptedLinks.add(theFinalLink);
  }
 else {
    String thereIsThisSecretID=br.getRegex(""String_Node_Str"").getMatch(0);
    if (thereIsThisSecretID == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    Browser br2=br.cloneBrowser();
    br2.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
    br2.postPage(""String_Node_Str"",""String_Node_Str"" + thereIsThisSecretID);
    String[] fileInformation=br2.getRegex(""String_Node_Str"").getColumn(0);
    if (fileInformation == null || fileInformation.length == 0) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    for (    String dl : fileInformation) {
      String ID=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filename=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filesize=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filetype=new Regex(dl,""String_Node_Str"").getMatch(0);
      String fileOrFolderPath=new Regex(dl,""String_Node_Str"").getMatch(0);
      if (ID == null || filename == null || filetype == null || fileOrFolderPath == null) {
        logger.warning(""String_Node_Str"" + parameter);
        return null;
      }
      if (filetype.equals(""String_Node_Str"")) {
        decryptedLinks.add(createDownloadlink(""String_Node_Str"" + fileOrFolderPath));
      }
 else {
        DownloadLink theFinalLink=createDownloadlink(DECRYPTEDLINKPART + fileOrFolderPath);
        theFinalLink.setName(filename);
        theFinalLink.setDownloadSize(Long.parseLong(filesize));
        theFinalLink.setProperty(""String_Node_Str"",ID);
        theFinalLink.setAvailable(true);
        decryptedLinks.add(theFinalLink);
      }
    }
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString().replace(""String_Node_Str"",""String_Node_Str"");
  br.getPage(parameter);
  String liveDriveUrlUserPart=new Regex(parameter,""String_Node_Str"").getMatch(0);
  liveDriveUrlUserPart=liveDriveUrlUserPart.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String decryptedlinkpart=""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str"";
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fpName == null)   fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(""String_Node_Str"")) {
    String pathID=new Regex(parameter,""String_Node_Str"").getMatch(0);
    String ID=br.getRegex(""String_Node_Str"").getMatch(0);
    if (ID == null) {
      ID=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (ID == null || pathID == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    DownloadLink theFinalLink=createDownloadlink(decryptedlinkpart + ""String_Node_Str"" + pathID);
    theFinalLink.setProperty(""String_Node_Str"",ID);
    decryptedLinks.add(theFinalLink);
  }
 else {
    String thereIsThisSecretID=br.getRegex(""String_Node_Str"").getMatch(0);
    if (thereIsThisSecretID == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    Browser br2=br.cloneBrowser();
    br2.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
    br2.postPage(""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str"",""String_Node_Str"" + thereIsThisSecretID);
    String[] fileInformation=br2.getRegex(""String_Node_Str"").getColumn(0);
    if (fileInformation == null || fileInformation.length == 0) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    for (    String dl : fileInformation) {
      String ID=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filename=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filesize=new Regex(dl,""String_Node_Str"").getMatch(0);
      String filetype=new Regex(dl,""String_Node_Str"").getMatch(0);
      String fileOrFolderPath=new Regex(dl,""String_Node_Str"").getMatch(0);
      if (ID == null || filename == null || filetype == null || fileOrFolderPath == null) {
        logger.warning(""String_Node_Str"" + parameter);
        return null;
      }
      if (filetype.equals(""String_Node_Str"")) {
        decryptedLinks.add(createDownloadlink(""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str""+ fileOrFolderPath));
      }
 else {
        DownloadLink theFinalLink=createDownloadlink(decryptedlinkpart + fileOrFolderPath);
        theFinalLink.setName(filename);
        theFinalLink.setDownloadSize(Long.parseLong(filesize));
        theFinalLink.setProperty(""String_Node_Str"",ID);
        theFinalLink.setAvailable(true);
        decryptedLinks.add(theFinalLink);
      }
    }
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}"
20840,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setFollowRedirects(false);
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(""String_Node_Str"");
  if (!parameter.contains(""String_Node_Str"")) {
    Form capForm=new Form();
    capForm.put(""String_Node_Str"",""String_Node_Str"");
    capForm.setMethod(MethodType.POST);
    capForm.setAction(parameter);
    for (int i=0; i <= 5; i++) {
      if (br.containsHTML(PASSWORDPROTECTEDTEXT)) {
        capForm.put(""String_Node_Str"",Plugin.getUserInput(""String_Node_Str"",param));
      }
      if (br.containsHTML(RECAPTCHATEXT)) {
        PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
        jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
        rc.parse();
        rc.load();
        File cf=rc.downloadCaptcha(getLocalCaptchaFile());
        capForm.put(""String_Node_Str"",rc.getChallenge());
        capForm.put(""String_Node_Str"",getCaptchaCode(cf,param));
      }
 else       if (br.getRegex(CAPTCHAREGEX1).getMatch(0) != null) {
        capForm.put(""String_Node_Str"",getCaptchaCode(br.getRegex(CAPTCHAREGEX1).getMatch(0),param));
      }
 else       if (br.getRegex(CAPTCHAREGEX2).getMatch(0) != null) {
        capForm.put(""String_Node_Str"",getCaptchaCode(br.getRegex(CAPTCHAREGEX2).getMatch(0),param));
      }
 else       if (br.containsHTML(CAPTCHATEXT3)) {
        Browser xmlbrowser=br.cloneBrowser();
        xmlbrowser.getPage(""String_Node_Str"");
        capForm.put(""String_Node_Str"",xmlbrowser.toString().trim());
      }
      br.submitForm(capForm);
      if (br.containsHTML(RECAPTCHATEXT) || br.getRegex(CAPTCHAREGEX1).getMatch(0) != null || br.getRegex(CAPTCHAREGEX2).getMatch(0) != null || br.containsHTML(PASSWORDPROTECTEDTEXT))       continue;
      if (br.containsHTML(CAPTCHATEXT3)) {
        logger.warning(""String_Node_Str"" + parameter);
        return null;
      }
      break;
    }
    if (br.containsHTML(RECAPTCHATEXT) || br.getRegex(CAPTCHAREGEX1).getMatch(0) != null || br.getRegex(CAPTCHAREGEX2).getMatch(0) != null)     throw new DecrypterException(DecrypterException.CAPTCHA);
    if (br.containsHTML(PASSWORDPROTECTEDTEXT))     throw new DecrypterException(DecrypterException.PASSWORD);
    if (br.containsHTML(""String_Node_Str""))     throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
    if (br.containsHTML(""String_Node_Str"")) {
      decryptedLinks=loadcontainer(""String_Node_Str"",param);
      if (decryptedLinks != null && decryptedLinks.size() > 0)       return decryptedLinks;
    }
    if (br.containsHTML(""String_Node_Str"")) {
      decryptedLinks=loadcontainer(""String_Node_Str"",param);
      if (decryptedLinks != null && decryptedLinks.size() > 0)       return decryptedLinks;
    }
    if (br.containsHTML(""String_Node_Str"")) {
      decryptedLinks=loadcontainer(""String_Node_Str"",param);
      if (decryptedLinks != null && decryptedLinks.size() > 0)       return decryptedLinks;
    }
    decryptedLinks=new ArrayList<DownloadLink>();
    String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links == null || links.length == 0)     links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links == null || links.length == 0)     links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links == null || links.length == 0)     return null;
    progress.setRange(links.length);
    for (    String link : links) {
      br.getPage(link);
      String finallink=br.getRedirectLocation();
      if (finallink == null) {
        logger.warning(""String_Node_Str"" + link);
        return null;
      }
      if (!parameter.equals(finallink))       decryptedLinks.add(createDownloadlink(finallink));
      progress.increase(1);
    }
  }
 else {
    if (br.getRedirectLocation() == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    decryptedLinks.add(createDownloadlink(br.getRedirectLocation()));
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setFollowRedirects(false);
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(""String_Node_Str"");
  if (!parameter.contains(""String_Node_Str"")) {
    Form capForm=new Form();
    capForm.put(""String_Node_Str"",""String_Node_Str"");
    capForm.setMethod(MethodType.POST);
    capForm.setAction(parameter);
    for (int i=0; i <= 5; i++) {
      if (br.containsHTML(PASSWORDPROTECTEDTEXT)) {
        capForm.put(""String_Node_Str"",Plugin.getUserInput(""String_Node_Str"",param));
      }
      if (br.containsHTML(RECAPTCHATEXT)) {
        PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
        jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
        rc.parse();
        rc.load();
        File cf=rc.downloadCaptcha(getLocalCaptchaFile());
        capForm.put(""String_Node_Str"",rc.getChallenge());
        capForm.put(""String_Node_Str"",getCaptchaCode(cf,param));
      }
 else       if (br.getRegex(CAPTCHAREGEX1).getMatch(0) != null) {
        capForm.put(""String_Node_Str"",getCaptchaCode(br.getRegex(CAPTCHAREGEX1).getMatch(0),param));
      }
 else       if (br.getRegex(CAPTCHAREGEX2).getMatch(0) != null) {
        capForm.put(""String_Node_Str"",getCaptchaCode(br.getRegex(CAPTCHAREGEX2).getMatch(0),param));
      }
 else       if (br.containsHTML(CAPTCHATEXT3)) {
        Browser xmlbrowser=br.cloneBrowser();
        xmlbrowser.getPage(""String_Node_Str"");
        capForm.put(""String_Node_Str"",xmlbrowser.toString().trim());
      }
      br.submitForm(capForm);
      if (br.containsHTML(RECAPTCHATEXT) || br.getRegex(CAPTCHAREGEX1).getMatch(0) != null || br.getRegex(CAPTCHAREGEX2).getMatch(0) != null || br.containsHTML(PASSWORDPROTECTEDTEXT))       continue;
      if (br.containsHTML(CAPTCHATEXT3)) {
        logger.warning(""String_Node_Str"" + parameter);
        return null;
      }
      break;
    }
    if (br.containsHTML(RECAPTCHATEXT) || br.getRegex(CAPTCHAREGEX1).getMatch(0) != null || br.getRegex(CAPTCHAREGEX2).getMatch(0) != null)     throw new DecrypterException(DecrypterException.CAPTCHA);
    if (br.containsHTML(PASSWORDPROTECTEDTEXT))     throw new DecrypterException(DecrypterException.PASSWORD);
    if (br.containsHTML(""String_Node_Str""))     throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
    if (br.containsHTML(""String_Node_Str"")) {
      decryptedLinks=loadcontainer(""String_Node_Str"",param);
      if (decryptedLinks != null && decryptedLinks.size() > 0)       return decryptedLinks;
    }
    if (br.containsHTML(""String_Node_Str"")) {
      decryptedLinks=loadcontainer(""String_Node_Str"",param);
      if (decryptedLinks != null && decryptedLinks.size() > 0)       return decryptedLinks;
    }
    if (br.containsHTML(""String_Node_Str"")) {
      decryptedLinks=loadcontainer(""String_Node_Str"",param);
      if (decryptedLinks != null && decryptedLinks.size() > 0)       return decryptedLinks;
    }
    decryptedLinks=new ArrayList<DownloadLink>();
    String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links == null || links.length == 0)     links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links == null || links.length == 0)     links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links == null || links.length == 0)     return null;
    progress.setRange(links.length);
    for (    String link : links) {
      br.getPage(link);
      String finallink=br.getRedirectLocation();
      if (finallink == null) {
        logger.warning(""String_Node_Str"" + link);
        return null;
      }
      if (!parameter.equals(finallink))       decryptedLinks.add(createDownloadlink(finallink));
      progress.increase(1);
    }
  }
 else {
    if (br.getRedirectLocation() == null) {
      logger.warning(""String_Node_Str"" + parameter);
      return null;
    }
    decryptedLinks.add(createDownloadlink(br.getRedirectLocation()));
  }
  return decryptedLinks;
}"
20841,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  URLConnectionAdapter con=br.openGetConnection(DLLINKPART + link.getStringProperty(""String_Node_Str""));
  if (con.getContentType().contains(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
 else {
    link.setName(getFileNameFromHeader(con));
    link.setDownloadSize(con.getContentLength());
    return AvailableStatus.TRUE;
  }
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  String liveDriveUrlUserPart=new Regex(link.getDownloadURL(),""String_Node_Str"").getMatch(0);
  liveDriveUrlUserPart=liveDriveUrlUserPart.replaceAll(""String_Node_Str"",""String_Node_Str"");
  DLLINKPART=""String_Node_Str"" + liveDriveUrlUserPart + ""String_Node_Str"";
  URLConnectionAdapter con=br.openGetConnection(DLLINKPART + link.getStringProperty(""String_Node_Str""));
  if (con.getContentType().contains(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
 else {
    link.setName(getFileNameFromHeader(con));
    link.setDownloadSize(con.getContentLength());
    return AvailableStatus.TRUE;
  }
}"
20842,"public void checkErrors(DownloadLink theLink) throws NumberFormatException, PluginException {
  if (brbefore.contains(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
  }
  if (brbefore.contains(""String_Node_Str"")) {
    String tmphrs=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    String tmpmin=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    String tmpsec=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    String tmpdays=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null && tmpdays == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0, days=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      if (tmpdays != null)       days=Integer.parseInt(tmpdays);
      int waittime=((days * 24 * 3600) + (3600 * hours) + (60 * minutes)+ seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  if (brbefore.contains(""String_Node_Str"")) {
    String filesizelimit=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit);
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
}","public void checkErrors(DownloadLink theLink) throws NumberFormatException, PluginException {
  if (brbefore.contains(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
  }
  if (brbefore.contains(""String_Node_Str"")) {
    String tmphrs=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    String tmpmin=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    String tmpsec=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    String tmpdays=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null && tmpdays == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0, days=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      if (tmpdays != null)       days=Integer.parseInt(tmpdays);
      int waittime=((days * 24 * 3600) + (3600 * hours) + (60 * minutes)+ seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  if (brbefore.contains(""String_Node_Str"")) {
    String filesizelimit=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit);
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
  if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  }
}"
20843,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  doSomething();
  if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + downloadLink.getDownloadURL() + ""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  }
  boolean resumable=true;
  int maxchunks=1;
  Form freeform=new Form();
  freeform.setMethod(MethodType.POST);
  freeform.put(""String_Node_Str"",""String_Node_Str"");
  freeform.put(""String_Node_Str"",""String_Node_Str"");
  freeform.put(""String_Node_Str"",downloadLink.getName());
  freeform.put(""String_Node_Str"",new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0));
  br.submitForm(freeform);
  doSomething();
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=getTheForm(downloadLink);
  int tt=60;
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null && Integer.parseInt(ttt) < 180) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    tt=Integer.parseInt(ttt);
  }
  sleep(tt * 1001,downloadLink);
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"") && !br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    String theId=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (theId == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.setId(theId);
    rc.setForm(getTheForm(downloadLink));
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    rc.getForm().remove(""String_Node_Str"");
    rc.getForm().put(""String_Node_Str"",""String_Node_Str"");
    rc.getForm().put(""String_Node_Str"",""String_Node_Str"");
    rc.getForm().put(""String_Node_Str"",rc.getChallenge());
    rc.getForm().put(""String_Node_Str"",c);
    rc.getForm().put(""String_Node_Str"",downloadLink.getDownloadURL());
    Form lol=rc.getForm();
    recaptcha=true;
    br.submitForm(lol);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  doSomething();
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str""))     error=true;
  }
 catch (  Exception e) {
    error=true;
  }
  if (error) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink);
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      if (brbefore.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (brbefore.contains(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      dllink=getDllink();
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  doSomething();
  if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + downloadLink.getDownloadURL() + ""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  }
  boolean resumable=true;
  int maxchunks=1;
  Form freeform=new Form();
  freeform.setMethod(MethodType.POST);
  freeform.put(""String_Node_Str"",""String_Node_Str"");
  freeform.put(""String_Node_Str"",""String_Node_Str"");
  freeform.put(""String_Node_Str"",downloadLink.getName());
  freeform.put(""String_Node_Str"",new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0));
  br.submitForm(freeform);
  doSomething();
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=getTheForm(downloadLink);
  int tt=60;
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null && Integer.parseInt(ttt) < 180) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    tt=Integer.parseInt(ttt);
  }
  sleep((tt + 2) * 1001,downloadLink);
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"") && !br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    String theId=new Regex(brbefore,""String_Node_Str"").getMatch(0);
    if (theId == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.setId(theId);
    rc.setForm(getTheForm(downloadLink));
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    rc.getForm().remove(""String_Node_Str"");
    rc.getForm().put(""String_Node_Str"",""String_Node_Str"");
    rc.getForm().put(""String_Node_Str"",""String_Node_Str"");
    rc.getForm().put(""String_Node_Str"",rc.getChallenge());
    rc.getForm().put(""String_Node_Str"",c);
    rc.getForm().put(""String_Node_Str"",downloadLink.getDownloadURL());
    Form lol=rc.getForm();
    recaptcha=true;
    br.submitForm(lol);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  doSomething();
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str""))     error=true;
  }
 catch (  Exception e) {
    error=true;
  }
  if (error) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink);
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      if (brbefore.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (brbefore.contains(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      dllink=getDllink();
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20844,"public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  br.clearCookies(getHost());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String url=downloadLink.getDownloadURL();
  br.getPage(url);
  downloadLink.setName(Plugin.extractFileNameFromURL(url).replaceAll(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  return AvailableStatus.TRUE;
}","public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  br.clearCookies(getHost());
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  String url=downloadLink.getDownloadURL();
  br.getPage(url);
  downloadLink.setName(Plugin.extractFileNameFromURL(url).replaceAll(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null)   filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize != null)   downloadLink.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
20845,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  this.setBrowserExclusive();
  prepareBrowser(downloadLink);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,getURL(),false,1);
  if (!(dl.getConnection().isContentDisposition())) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  this.setBrowserExclusive();
  prepareBrowser(downloadLink);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,getURL(),false,1);
  dl.setFilenameFix(true);
  if (!(dl.getConnection().isContentDisposition())) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20846,"public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, InterruptedException, PluginException {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String name=br.getRegex(Pattern.compile(""String_Node_Str"")).getMatch(0);
  if (name == null)   name=br.getRegex(Pattern.compile(""String_Node_Str"")).getMatch(0);
  if (name == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String md5Hash=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL)).getMatch(0);
  if (md5Hash == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileSize=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL)).getMatch(0);
  if (fileSize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  fileSize=fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize + ""String_Node_Str"";
  downloadLink.setMD5Hash(md5Hash.trim());
  downloadLink.setName(name.trim());
  downloadLink.setDownloadSize(Regex.getSize(fileSize));
  return AvailableStatus.TRUE;
}","public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, InterruptedException, PluginException {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String name=br.getRegex(Pattern.compile(""String_Node_Str"")).getMatch(0);
  if (name == null)   name=br.getRegex(Pattern.compile(""String_Node_Str"")).getMatch(0);
  if (name == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String md5Hash=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL)).getMatch(0);
  if (md5Hash == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileSize=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL)).getMatch(0);
  if (fileSize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  fileSize=fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize + ""String_Node_Str"";
  downloadLink.setMD5Hash(md5Hash.trim());
  downloadLink.setName(name.trim());
  downloadLink.setDownloadSize(Regex.getSize(fileSize));
  return AvailableStatus.TRUE;
}"
20847,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  handleFree0(downloadLink);
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (!downloadLink.isAvailable()) {
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  handleFree0(downloadLink);
}"
20848,"public static String findError(Browser br){
  String error=br.getRegex(PATTERN_FIND_ERROR_MESSAGE).getMatch(0);
  if (error == null || error.trim().length() == 0) {
    error=br.getRegex(PATTERN_FIND_ERROR_MESSAGE_3).getMatch(0);
  }
  if (error == null || error.trim().length() == 0) {
    error=br.getRegex(PATTERN_FIND_ERROR_MESSAGE_2).getMatch(0);
  }
  if (error == null || error.trim().length() == 0) {
    error=br.getRegex(PATTERN_FIND_ERROR_MESSAGE_1).getMatch(0);
  }
  error=Encoding.htmlDecode(error);
  String[] er=Regex.getLines(error);
  if (er == null || er.length == 0)   return null;
  er[0]=HTMLEntities.unhtmlentities(er[0]);
  if (er[0] == null || er[0].length() == 0)   return null;
  return er[0];
}","public static String findError(Browser br){
  String error=br.getRegex(PATTERN_FIND_ERROR_MESSAGE).getMatch(0);
  if (error == null || Encoding.htmlDecode(error).trim().length() < 3) {
    error=br.getRegex(PATTERN_FIND_ERROR_MESSAGE_3).getMatch(0);
  }
  if (error == null || Encoding.htmlDecode(error).trim().length() < 3) {
    error=br.getRegex(PATTERN_FIND_ERROR_MESSAGE_2).getMatch(0);
  }
  if (error == null || Encoding.htmlDecode(error).trim().length() < 3) {
    error=br.getRegex(PATTERN_FIND_ERROR_MESSAGE_1).getMatch(0);
  }
  error=Encoding.htmlDecode(error);
  String[] er=Regex.getLines(error);
  if (er == null || er.length == 0)   return null;
  er[0]=HTMLEntities.unhtmlentities(er[0]);
  if (er[0] == null || er[0].length() == 0)   return null;
  return er[0];
}"
20849,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  br.setFollowRedirects(true);
  String link=parameter.toString();
  br.getPage(link);
  boolean crypted=false;
  if (br.containsHTML(""String_Node_Str"")) {
    for (int i=0; i <= 3; i++) {
      String id=new Regex(link,""String_Node_Str"").getMatch(0);
      if (id == null)       id=new Regex(link,""String_Node_Str"").getMatch(0);
      Form pwform=br.getForm(0);
      if (pwform == null || id == null)       return null;
      String pw=""String_Node_Str"";
      pwform.put(""String_Node_Str"" + id,pw);
      br.submitForm(pwform);
      if (br.containsHTML(""String_Node_Str""))       continue;
      break;
    }
    if (br.containsHTML(""String_Node_Str""))     throw new DecrypterException(DecrypterException.PASSWORD);
    crypted=true;
  }
  if (crypted) {
    logger.info(""String_Node_Str"" + link + ""String_Node_Str"");
    String hash=br.getRegex(""String_Node_Str"").getMatch(0);
    if (hash == null)     return null;
    String linkPage=link + ""String_Node_Str"" + hash;
    br.getPage(linkPage);
  }
  String[] links=HTMLParser.getHttpLinks(br.toString(),null);
  ArrayList<String> pws=HTMLParser.findPasswords(br.toString());
  for (  String element : links) {
    if (element.contains(""String_Node_Str""))     continue;
    decryptedLinks.add(dl=createDownloadlink(element));
    dl.addSourcePluginPasswordList(pws);
  }
  return decryptedLinks;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  br.setFollowRedirects(true);
  String link=parameter.toString();
  br.getPage(link);
  boolean crypted=false;
  if (br.containsHTML(""String_Node_Str"")) {
    for (int i=0; i <= 3; i++) {
      String id=new Regex(link,""String_Node_Str"").getMatch(0);
      if (id == null)       id=new Regex(link,""String_Node_Str"").getMatch(0);
      Form pwform=br.getForm(0);
      if (pwform == null || id == null)       return null;
      String pw=""String_Node_Str"";
      pwform.put(""String_Node_Str"" + id,pw);
      br.submitForm(pwform);
      if (br.containsHTML(""String_Node_Str""))       continue;
      break;
    }
    if (br.containsHTML(""String_Node_Str""))     throw new DecrypterException(DecrypterException.PASSWORD);
    crypted=true;
  }
  if (crypted) {
    logger.info(""String_Node_Str"" + link + ""String_Node_Str"");
    String hash=br.getRegex(""String_Node_Str"").getMatch(0);
    if (hash == null)     return null;
    String linkPage=link + ""String_Node_Str"" + hash;
    br.getPage(linkPage);
  }
  String allLinks=br.getRegex(""String_Node_Str"").getMatch(0);
  if (allLinks == null)   return null;
  String[] links=HTMLParser.getHttpLinks(allLinks,null);
  if (links == null || links.length == 0)   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  ArrayList<String> pws=HTMLParser.findPasswords(allLinks);
  for (  String element : links) {
    if (element.contains(""String_Node_Str""))     continue;
    decryptedLinks.add(dl=createDownloadlink(element));
    dl.addSourcePluginPasswordList(pws);
  }
  return decryptedLinks;
}"
20850,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setFollowRedirects(false);
  br.getPage(parameter);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().contains(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.getRedirectLocation() != null)   br.getPage(br.getRedirectLocation());
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  for (  String finallink : links)   decryptedLinks.add(createDownloadlink(""String_Node_Str"" + finallink));
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setFollowRedirects(false);
  br.getPage(parameter);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().contains(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.getRedirectLocation() != null)   br.getPage(br.getRedirectLocation());
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  for (  String finallink : links)   decryptedLinks.add(createDownloadlink(""String_Node_Str"" + finallink));
  return decryptedLinks;
}"
20851,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=br.getForm(1);
  if (freeform != null) {
    freeform.remove(""String_Node_Str"");
    br.submitForm(freeform);
  }
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLForm.remove(null);
  DLForm.remove(""String_Node_Str"");
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      checkErrors(downloadLink);
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
              if (dllink == null)               dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=br.getForm(1);
  if (freeform != null) {
    freeform.remove(null);
    freeform.remove(""String_Node_Str"");
    freeform.put(""String_Node_Str"",""String_Node_Str"");
    br.submitForm(freeform);
  }
  System.out.print(br.toString());
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLForm.remove(null);
  DLForm.remove(""String_Node_Str"");
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      checkErrors(downloadLink);
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
              if (dllink == null)               dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20852,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=Encoding.htmlDecode(br.getRegex(""String_Node_Str"").getMatch(0));
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
20853,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  String passCode=null;
  boolean resumable=false;
  int maxchunks=1;
  Form freeform=br.getFormBySubmitvalue(""String_Node_Str"");
  if (freeform == null) {
    freeform=br.getFormBySubmitvalue(""String_Node_Str"");
    if (freeform == null) {
      freeform=br.getFormbyKey(""String_Node_Str"");
    }
  }
  if (freeform != null) {
    freeform.remove(""String_Node_Str"");
    br.submitForm(freeform);
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  boolean password=false;
  boolean recaptcha=false;
  if (brbefore.contains(PASSWORDTEXT0) || brbefore.contains(PASSWORDTEXT1)) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password) {
      passCode=handlePassword(passCode,rc.getForm(),downloadLink);
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (!recaptcha) {
    if (password) {
      passCode=handlePassword(passCode,DLForm,downloadLink);
    }
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str""))     error=true;
  }
 catch (  Exception e) {
    error=true;
  }
  if (error) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    String dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      br.followConnection();
      checkServerErrors();
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  String passCode=null;
  boolean resumable=false;
  int maxchunks=1;
  Form freeform=br.getFormBySubmitvalue(""String_Node_Str"");
  if (freeform == null) {
    freeform=br.getFormBySubmitvalue(""String_Node_Str"");
    if (freeform == null) {
      freeform=br.getFormbyKey(""String_Node_Str"");
    }
  }
  if (freeform != null) {
    freeform.remove(""String_Node_Str"");
    br.submitForm(freeform);
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  boolean password=false;
  boolean recaptcha=false;
  if (brbefore.contains(PASSWORDTEXT0) || brbefore.contains(PASSWORDTEXT1)) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    if (rc.getId() == null || rc.getId().isEmpty()) {
      String id=br.getRegex(""String_Node_Str"").getMatch(0);
      if (id == null) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      }
      rc.setId(id);
    }
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password) {
      passCode=handlePassword(passCode,rc.getForm(),downloadLink);
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (!recaptcha) {
    if (password) {
      passCode=handlePassword(passCode,DLForm,downloadLink);
    }
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str""))     error=true;
  }
 catch (  Exception e) {
    error=true;
  }
  if (error) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    doSomething();
    checkErrors(downloadLink,true,passCode);
    String dllink=getDllink();
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      br.followConnection();
      checkServerErrors();
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20854,"@Override public void handleFree(DownloadLink link) throws Exception, PluginException {
  requestFileInformation(link);
  br.setFollowRedirects(false);
  br.getPage(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
  if (br.getRedirectLocation() != null && br.getRedirectLocation().contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1000l);
  PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
  jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
  for (int i=0; i <= 5; i++) {
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,link);
    rc.setCode(c);
    if (br.containsHTML(""String_Node_Str""))     continue;
    break;
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String dllink=br.getRedirectLocation();
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1);
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception, PluginException {
  requestFileInformation(link);
  br.setFollowRedirects(false);
  br.getPage(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
  br.setFollowRedirects(true);
  br.getPage(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
  br.setFollowRedirects(false);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1000l);
  PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
  jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
  for (int i=0; i <= 5; i++) {
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,link);
    rc.setCode(c);
    if (br.containsHTML(""String_Node_Str""))     continue;
    break;
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String dllink=br.getRedirectLocation();
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1);
  dl.startDownload();
}"
20855,"public void correctDownloadLink(DownloadLink link){
  link.setUrlDownload(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
  link.setUrlDownload(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
}","public void correctDownloadLink(DownloadLink link){
  link.setUrlDownload(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
  link.setUrlDownload(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
  link.setUrlDownload(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
}"
20856,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.setCustomCharset(""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   filename=br.getRegex(""String_Node_Str"").getMatch(1);
  if (filename == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  link.setName(filename.trim());
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize != null) {
    filesize=filesize.trim();
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize + ""String_Node_Str"";
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  if (link.getDownloadURL().contains(""String_Node_Str"")) {
    link.setUrlDownload(link.getDownloadURL().replace(""String_Node_Str"",""String_Node_Str""));
  }
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.setCustomCharset(""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   filename=br.getRegex(""String_Node_Str"").getMatch(1);
  if (filename == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  link.setFinalFileName(filename.trim());
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize != null) {
    filesize=filesize.trim();
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize + ""String_Node_Str"";
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}"
20857,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  String linkurl=Encoding.htmlDecode(new Regex(br,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0));
  if (linkurl == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,linkurl,true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType().contains(""String_Node_Str"")) {
    int count=downloadLink.getIntegerProperty(""String_Node_Str"",0);
    count++;
    downloadLink.setProperty(""String_Node_Str"",count);
    con.disconnect();
    if (count > 6) {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,count * 600 * 1000l);
  }
  if (!con.isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  String linkurl=Encoding.htmlDecode(new Regex(br,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0));
  if (linkurl == null)   linkurl=Encoding.htmlDecode(new Regex(br,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0));
  if (linkurl == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,linkurl,""String_Node_Str"",true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType().contains(""String_Node_Str"")) {
    int count=downloadLink.getIntegerProperty(""String_Node_Str"",0);
    count++;
    downloadLink.setProperty(""String_Node_Str"",count);
    con.disconnect();
    if (count > 6) {
      logger.info(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,count * 600 * 1000l);
  }
  if (!con.isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20858,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(false);
  br.getPage(downloadLink.getDownloadURL());
  if (br.getRedirectLocation() != null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   filename=br.getRegex(""String_Node_Str"").getMatch(0);
  dllink=br.getRegex(""String_Node_Str"").getMatch(2);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || dllink == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  filename=filename.trim().replace(""String_Node_Str"",""String_Node_Str"");
  downloadLink.setFinalFileName(filename + ""String_Node_Str"");
  Browser br2=br.cloneBrowser();
  br2.setFollowRedirects(true);
  URLConnectionAdapter con=br2.openGetConnection(dllink);
  if (!con.getContentType().contains(""String_Node_Str""))   downloadLink.setDownloadSize(con.getLongContentLength());
 else   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(false);
  br.getPage(downloadLink.getDownloadURL());
  if (br.getRedirectLocation() != null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   filename=br.getRegex(""String_Node_Str"").getMatch(0);
  dllink=br.getRegex(""String_Node_Str"").getMatch(1);
  if (dllink == null) {
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null) {
      dllink=br.getRegex(""String_Node_Str"").getMatch(2);
      if (dllink == null)       dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (filename == null || dllink == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  filename=filename.trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!dllink.endsWith(""String_Node_Str""))   downloadLink.setFinalFileName(filename + ""String_Node_Str"");
 else   downloadLink.setFinalFileName(filename + ""String_Node_Str"");
  Browser br2=br.cloneBrowser();
  br2.setFollowRedirects(true);
  URLConnectionAdapter con=br2.openGetConnection(dllink);
  if (!con.getContentType().contains(""String_Node_Str""))   downloadLink.setDownloadSize(con.getLongContentLength());
 else   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  return AvailableStatus.TRUE;
}"
20859,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  Form form=br.getForm(0);
  if (form == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  form.put(""String_Node_Str"",Encoding.urlEncode(account.getPass()));
  br.submitForm(form);
  String trafficLeft=br.getRegex(""String_Node_Str"").getMatch(0);
  if (trafficLeft != null) {
    AccountInfo ai=account.getAccountInfo();
    ai.setTrafficLeft(trafficLeft);
    ai.setStatus(""String_Node_Str"");
  }
  String url=Encoding.htmlDecode(br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(1));
  if (url == null)   url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null && br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
  }
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  sleep(5000,downloadLink);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",2 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  Form form=br.getForm(0);
  if (form == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  form.put(""String_Node_Str"",Encoding.urlEncode(account.getPass()));
  br.submitForm(form);
  String url=Encoding.htmlDecode(br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(1));
  if (url == null)   url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null && br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
  }
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  sleep(5000,downloadLink);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",2 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20860,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  FilePackage fp=FilePackage.getInstance();
  String parameter=param.toString();
  br.getPage(parameter);
  String[] images=br.getRegex(""String_Node_Str"").getColumn(0);
  if (br.containsHTML(""String_Node_Str"")) {
    fp.setName(""String_Node_Str"");
    br.getPage(""String_Node_Str"");
    String image404=br.getRegex(""String_Node_Str"").getMatch(0);
    DownloadLink dl=createDownloadlink(image404);
    dl.setAvailableStatus(AvailableStatus.TRUE);
    dl.setFilePackage(fp);
    decryptedLinks.add(dl);
  }
 else   if (images.length == 0) {
    return null;
  }
 else {
    String domain=""String_Node_Str"";
    String cat=br.getRegex(""String_Node_Str"").getMatch(0);
    String date=new Date().toString();
    fp.setName(domain + ""String_Node_Str"" + cat+ ""String_Node_Str""+ date);
    for (    String image : images) {
      DownloadLink dl=createDownloadlink(image);
      dl.setAvailableStatus(AvailableStatus.TRUE);
      dl.setFilePackage(fp);
      decryptedLinks.add(dl);
    }
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  FilePackage fp=FilePackage.getInstance();
  String parameter=param.toString();
  br.getPage(parameter);
  if (parameter.matches(""String_Node_Str"")) {
    String[] threads=br.getRegex(""String_Node_Str"").getColumn(0);
    for (    String thread : threads) {
      decryptedLinks.add(createDownloadlink(parameter + ""String_Node_Str"" + thread));
    }
  }
 else {
    String[] images=br.getRegex(""String_Node_Str"").getColumn(0);
    if (br.containsHTML(""String_Node_Str"")) {
      fp.setName(""String_Node_Str"");
      br.getPage(""String_Node_Str"");
      String image404=br.getRegex(""String_Node_Str"").getMatch(0);
      DownloadLink dl=createDownloadlink(image404);
      dl.setAvailableStatus(AvailableStatus.TRUE);
      dl.setFilePackage(fp);
      decryptedLinks.add(dl);
    }
 else     if (images.length == 0) {
      return null;
    }
 else {
      String domain=""String_Node_Str"";
      String cat=br.getRegex(""String_Node_Str"").getMatch(0).replace(""String_Node_Str"",""String_Node_Str"");
      String date=new Date().toString();
      fp.setName(domain + ""String_Node_Str"" + cat+ ""String_Node_Str""+ date);
      for (      String image : images) {
        DownloadLink dl=createDownloadlink(image);
        dl.setAvailableStatus(AvailableStatus.TRUE);
        dl.setFilePackage(fp);
        decryptedLinks.add(dl);
      }
    }
  }
  return decryptedLinks;
}"
20861,"/** 
 * Ermittelt über die Plugins alle Passenden Links und gibt diese in einem ArrayList zurück
 * @return Link-ArrayList
 */
public ArrayList<DownloadLink> findLinks(){
  ArrayList<DownloadLink> ret=quickHosterCheck(data);
  foundPasswords.addAll(HTMLParser.findPasswords(data));
  if (ret != null && ret.size() == 1) {
    if (!ret.get(0).getPlugin().getWrapper().isEnabled() || LinkGrabberController.isFiltered(ret.get(0))) {
      ret.clear();
    }
 else {
      ret.get(0).addSourcePluginPasswordList(foundPasswords);
      return ret;
    }
  }
  data=HTMLEntities.unhtmlentities(data);
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  ret=findLinksIntern();
  data=Encoding.urlDecode(data,true);
  ret.addAll(findLinksIntern());
  if (!filterNormalHTTP) {
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    ret.addAll(findLinksIntern());
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  for (  final DownloadLink link : ret) {
    link.addSourcePluginPasswordList(foundPasswords);
  }
  return ret;
}","/** 
 * Ermittelt über die Plugins alle Passenden Links und gibt diese in einem ArrayList zurück
 * @return Link-ArrayList
 */
public ArrayList<DownloadLink> findLinks(){
  ArrayList<DownloadLink> ret=quickHosterCheck(data);
  foundPasswords.addAll(HTMLParser.findPasswords(data));
  if (ret != null && ret.size() == 1 && ret.get(0).getPlugin() != null) {
    if (!ret.get(0).getPlugin().getWrapper().isEnabled() || LinkGrabberController.isFiltered(ret.get(0))) {
      ret.clear();
    }
 else {
      ret.get(0).addSourcePluginPasswordList(foundPasswords);
      return ret;
    }
  }
  data=HTMLEntities.unhtmlentities(data);
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  ret=findLinksIntern();
  data=Encoding.urlDecode(data,true);
  ret.addAll(findLinksIntern());
  if (!filterNormalHTTP) {
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    ret.addAll(findLinksIntern());
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  for (  final DownloadLink link : ret) {
    link.addSourcePluginPasswordList(foundPasswords);
  }
  return ret;
}"
20862,"/** 
 * Lädt eine LinkListe
 * @param file Die Datei, aus der die Links gelesen werden
 * @return Ein neuer ArrayList mit den DownloadLinks
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") private ArrayList<FilePackage> loadDownloadLinks() throws Exception {
  final Object obj=JDUtilities.getDatabaseConnector().getLinks();
  if (obj != null && obj instanceof ArrayList && (((ArrayList)obj).size() == 0 || ((ArrayList)obj).size() > 0 && ((ArrayList)obj).get(0) instanceof FilePackage)) {
    final ArrayList<FilePackage> packages=(ArrayList<FilePackage>)obj;
    final Iterator<FilePackage> iterator=packages.iterator();
    DownloadLink localLink;
    PluginForHost pluginForHost=null;
    PluginsC pluginForContainer=null;
    Iterator<DownloadLink> it;
    FilePackage fp;
    while (iterator.hasNext()) {
      fp=iterator.next();
      if (fp.getDownloadLinkList().size() == 0) {
        iterator.remove();
        continue;
      }
      it=fp.getDownloadLinkList().iterator();
      while (it.hasNext()) {
        localLink=it.next();
        localLink.getLinkStatus().resetStatus(LinkStatus.ERROR_ALREADYEXISTS,LinkStatus.ERROR_FILE_NOT_FOUND,LinkStatus.FINISHED,LinkStatus.ERROR_FATAL);
        if (localLink.getLinkStatus().isFinished() && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION,3) == 1) {
          it.remove();
          if (fp.getDownloadLinkList().size() == 0) {
            iterator.remove();
            continue;
          }
        }
 else {
          try {
            pluginForHost=JDUtilities.getNewPluginForHostInstance(localLink.getHost());
          }
 catch (          Exception e) {
            JDLogger.exception(e);
          }
          try {
            if (localLink.getContainer() != null) {
              pluginForContainer=JDUtilities.getPluginForContainer(localLink.getContainer(),localLink.getContainerFile());
              if (pluginForContainer == null) {
                localLink.setEnabled(false);
              }
            }
          }
 catch (          NullPointerException e) {
            JDLogger.exception(e);
          }
          if (pluginForHost != null) {
            localLink.setLoadedPlugin(pluginForHost);
          }
          if (pluginForContainer != null) {
            localLink.setLoadedPluginForContainer(pluginForContainer);
          }
          if (pluginForHost == null) {
            logger.severe(""String_Node_Str"" + localLink.getHost() + ""String_Node_Str""+ localLink.getName());
          }
        }
      }
      fp.resetUpdateTimer();
    }
    return packages;
  }
  throw new Exception(""String_Node_Str"");
}","/** 
 * Lädt eine LinkListe
 * @param file Die Datei, aus der die Links gelesen werden
 * @return Ein neuer ArrayList mit den DownloadLinks
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") private ArrayList<FilePackage> loadDownloadLinks() throws Exception {
  final Object obj=JDUtilities.getDatabaseConnector().getLinks();
  if (obj != null && obj instanceof ArrayList && (((ArrayList)obj).size() == 0 || ((ArrayList)obj).size() > 0 && ((ArrayList)obj).get(0) instanceof FilePackage)) {
    final ArrayList<FilePackage> packages=(ArrayList<FilePackage>)obj;
    final Iterator<FilePackage> iterator=packages.iterator();
    DownloadLink localLink;
    PluginForHost pluginForHost=null;
    PluginsC pluginForContainer=null;
    Iterator<DownloadLink> it;
    FilePackage fp;
    while (iterator.hasNext()) {
      fp=iterator.next();
      if (fp.getDownloadLinkList().size() == 0) {
        iterator.remove();
        continue;
      }
      it=fp.getDownloadLinkList().iterator();
      while (it.hasNext()) {
        localLink=it.next();
        localLink.getLinkStatus().resetStatus(LinkStatus.ERROR_ALREADYEXISTS,LinkStatus.ERROR_FILE_NOT_FOUND,LinkStatus.FINISHED,LinkStatus.ERROR_FATAL);
        if (localLink.getLinkStatus().isFinished() && JDUtilities.getConfiguration().getIntegerProperty(Configuration.PARAM_FINISHED_DOWNLOADS_ACTION,3) == 1) {
          it.remove();
          if (fp.getDownloadLinkList().size() == 0) {
            iterator.remove();
            continue;
          }
        }
 else {
          try {
            pluginForHost=null;
            pluginForHost=JDUtilities.getNewPluginForHostInstance(localLink.getHost());
          }
 catch (          Exception e) {
            JDLogger.exception(e);
          }
          try {
            if (localLink.getContainer() != null) {
              pluginForContainer=JDUtilities.getPluginForContainer(localLink.getContainer(),localLink.getContainerFile());
              if (pluginForContainer == null) {
                localLink.setEnabled(false);
              }
            }
          }
 catch (          NullPointerException e) {
            JDLogger.exception(e);
          }
          if (pluginForHost != null) {
            localLink.setLoadedPlugin(pluginForHost);
          }
          if (pluginForContainer != null) {
            localLink.setLoadedPluginForContainer(pluginForContainer);
          }
          if (pluginForHost == null) {
            logger.severe(""String_Node_Str"" + localLink.getHost() + ""String_Node_Str""+ localLink.getName());
          }
        }
      }
      fp.resetUpdateTimer();
    }
    return packages;
  }
  throw new Exception(""String_Node_Str"");
}"
20863,"/** 
 * Liefert den nächsten DownloadLink
 * @return Der nächste DownloadLink oder null
 */
public DownloadLink getNextDownloadLink(){
synchronized (DownloadLOCK) {
    if (this.reachedStopMark())     return null;
    DownloadLink nextDownloadLink=null;
    DownloadLink returnDownloadLink=null;
    try {
      for (      final FilePackage filePackage : dlc.getPackages()) {
        for (final Iterator<DownloadLink> it2=filePackage.getDownloadLinkList().iterator(); it2.hasNext(); ) {
          nextDownloadLink=it2.next();
          if (nextDownloadLink.isEnabled() && !nextDownloadLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE)) {
            if (nextDownloadLink.getPlugin().isPremiumDownload() || (getRemainingIPBlockWaittime(nextDownloadLink.getHost()) <= 0 && getRemainingTempUnavailWaittime(nextDownloadLink.getHost()) <= 0)) {
              if (!isDownloadLinkActive(nextDownloadLink)) {
                if (!nextDownloadLink.getLinkStatus().isPluginActive()) {
                  if (nextDownloadLink.getLinkStatus().isStatus(LinkStatus.TODO)) {
                    int maxPerHost=getSimultanDownloadNumPerHost();
                    if (activeDownloadsbyHosts(nextDownloadLink.getPlugin()) < (nextDownloadLink.getPlugin()).getMaxSimultanDownloadNum() && activeDownloadsbyHosts(nextDownloadLink.getPlugin()) < maxPerHost && nextDownloadLink.getPlugin().getWrapper().isEnabled()) {
                      if (returnDownloadLink == null) {
                        returnDownloadLink=nextDownloadLink;
                      }
 else {
                        if (nextDownloadLink.getPriority() > returnDownloadLink.getPriority())                         returnDownloadLink=nextDownloadLink;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
    }
    return returnDownloadLink;
  }
}","/** 
 * Liefert den nächsten DownloadLink
 * @return Der nächste DownloadLink oder null
 */
public DownloadLink getNextDownloadLink(){
synchronized (DownloadLOCK) {
    if (this.reachedStopMark())     return null;
    DownloadLink nextDownloadLink=null;
    DownloadLink returnDownloadLink=null;
    try {
      for (      final FilePackage filePackage : dlc.getPackages()) {
        for (final Iterator<DownloadLink> it2=filePackage.getDownloadLinkList().iterator(); it2.hasNext(); ) {
          nextDownloadLink=it2.next();
          if (nextDownloadLink.getPlugin() == null)           continue;
          if (nextDownloadLink.isEnabled() && !nextDownloadLink.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE)) {
            if (nextDownloadLink.getPlugin().isPremiumDownload() || (getRemainingIPBlockWaittime(nextDownloadLink.getHost()) <= 0 && getRemainingTempUnavailWaittime(nextDownloadLink.getHost()) <= 0)) {
              if (!isDownloadLinkActive(nextDownloadLink)) {
                if (!nextDownloadLink.getLinkStatus().isPluginActive()) {
                  if (nextDownloadLink.getLinkStatus().isStatus(LinkStatus.TODO)) {
                    int maxPerHost=getSimultanDownloadNumPerHost();
                    if (activeDownloadsbyHosts(nextDownloadLink.getPlugin()) < (nextDownloadLink.getPlugin()).getMaxSimultanDownloadNum() && activeDownloadsbyHosts(nextDownloadLink.getPlugin()) < maxPerHost && nextDownloadLink.getPlugin().getWrapper().isEnabled()) {
                      if (returnDownloadLink == null) {
                        returnDownloadLink=nextDownloadLink;
                      }
 else {
                        if (nextDownloadLink.getPriority() > returnDownloadLink.getPriority())                         returnDownloadLink=nextDownloadLink;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
    }
    return returnDownloadLink;
  }
}"
20864,"/** 
 * try to force a downloadstart, will ignore maxperhost and maxdownloads limits
 */
public void forceDownload(final ArrayList<DownloadLink> links){
synchronized (DownloadLOCK) {
    for (    final DownloadLink link : links) {
      if (!link.getPlugin().isAGBChecked()) {
        try {
          SingleDownloadController.onErrorAGBNotSigned(link,link.getPlugin());
        }
 catch (        InterruptedException e) {
          return;
        }
      }
    }
synchronized (StartStopSync) {
      if (downloadStatus == STATE.NOT_RUNNING || downloadStatus == STATE.RUNNING) {
        startDownloads();
      }
 else {
        return;
      }
    }
    for (    final DownloadLink link : links) {
      if (!link.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE)) {
        if (link.getPlugin().isPremiumDownload() || (getRemainingIPBlockWaittime(link.getHost()) <= 0 && getRemainingTempUnavailWaittime(link.getHost()) <= 0)) {
          if (!isDownloadLinkActive(link)) {
            if (!link.getLinkStatus().isPluginActive()) {
              if (link.getLinkStatus().isStatus(LinkStatus.TODO)) {
                int activePerHost=activeDownloadsbyHosts(link.getPlugin());
                if (activePerHost < (link.getPlugin()).getMaxSimultanDownloadNum() && link.getPlugin().getWrapper().isEnabled()) {
                  if (!link.isEnabled())                   link.setEnabled(true);
                  startDownloadThread(link);
                }
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * try to force a downloadstart, will ignore maxperhost and maxdownloads limits
 */
public void forceDownload(final ArrayList<DownloadLink> linksForce){
synchronized (DownloadLOCK) {
    ArrayList<DownloadLink> links=new ArrayList<DownloadLink>();
    for (    final DownloadLink link : linksForce) {
      if (link.getPlugin() != null)       links.add(link);
    }
    for (    final DownloadLink link : links) {
      if (!link.getPlugin().isAGBChecked()) {
        try {
          SingleDownloadController.onErrorAGBNotSigned(link,link.getPlugin());
        }
 catch (        InterruptedException e) {
          return;
        }
      }
    }
synchronized (StartStopSync) {
      if (downloadStatus == STATE.NOT_RUNNING || downloadStatus == STATE.RUNNING) {
        startDownloads();
      }
 else {
        return;
      }
    }
    for (    final DownloadLink link : links) {
      if (!link.getLinkStatus().hasStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE)) {
        if (link.getPlugin().isPremiumDownload() || (getRemainingIPBlockWaittime(link.getHost()) <= 0 && getRemainingTempUnavailWaittime(link.getHost()) <= 0)) {
          if (!isDownloadLinkActive(link)) {
            if (!link.getLinkStatus().isPluginActive()) {
              if (link.getLinkStatus().isStatus(LinkStatus.TODO)) {
                int activePerHost=activeDownloadsbyHosts(link.getPlugin());
                if (activePerHost < (link.getPlugin()).getMaxSimultanDownloadNum() && link.getPlugin().getWrapper().isEnabled()) {
                  if (!link.isEnabled())                   link.setEnabled(true);
                  startDownloadThread(link);
                }
              }
            }
          }
        }
      }
    }
  }
}"
20865,"/** 
 * Gibt alle Downloadlinks die zu dem übergebenem Hosterplugin gehören zurück.
 * @param pluginForHost
 */
public ArrayList<DownloadLink> getDownloadLinks(PluginForHost pluginForHost){
  ArrayList<DownloadLink> al=new ArrayList<DownloadLink>();
  ArrayList<FilePackage> packages=JDUtilities.getDownloadController().getPackages();
synchronized (packages) {
    for (    FilePackage fp : packages) {
      for (      DownloadLink nextDownloadLink : fp.getDownloadLinkList()) {
        if (nextDownloadLink.getPlugin().getClass() == pluginForHost.getClass())         al.add(nextDownloadLink);
      }
    }
  }
  return al;
}","/** 
 * Gibt alle Downloadlinks die zu dem übergebenem Hosterplugin gehören zurück.
 * @param pluginForHost
 */
public ArrayList<DownloadLink> getDownloadLinks(PluginForHost pluginForHost){
  ArrayList<DownloadLink> al=new ArrayList<DownloadLink>();
  ArrayList<FilePackage> packages=JDUtilities.getDownloadController().getPackages();
synchronized (packages) {
    for (    FilePackage fp : packages) {
      for (      DownloadLink nextDownloadLink : fp.getDownloadLinkList()) {
        if (nextDownloadLink.getPlugin() == null)         continue;
        if (nextDownloadLink.getPlugin().getClass() == pluginForHost.getClass())         al.add(nextDownloadLink);
      }
    }
  }
  return al;
}"
20866,"private void startLinkCheck(){
  if (checkThread != null && checkThread.isAlive()) {
    return;
  }
  checkThread=new Thread(){
    public void run(){
      setName(""String_Node_Str"");
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.START));
      pc=new ProgressController(JDL.L(""String_Node_Str"",""String_Node_Str""),null);
      pc.getBroadcaster().addListener(LinkCheck.getLinkChecker());
      pc.setRange(0);
      while (linksToCheck.size() != 0) {
        ArrayList<DownloadLink> currentList;
synchronized (linksToCheck) {
          currentList=new ArrayList<DownloadLink>(linksToCheck);
          pc.addToMax(currentList.size());
        }
        HashMap<String,ArrayList<DownloadLink>> map=new HashMap<String,ArrayList<DownloadLink>>();
        for (        DownloadLink dl : currentList) {
          ArrayList<DownloadLink> localList=map.get(dl.getPlugin().getHost());
          if (localList == null) {
            localList=new ArrayList<DownloadLink>();
            map.put(dl.getPlugin().getHost(),localList);
          }
          localList.add(dl);
        }
        checkJobbers=new Jobber(4);
        ArrayList<DownloadLink> hosterList;
        for (Iterator<ArrayList<DownloadLink>> it=map.values().iterator(); it.hasNext(); ) {
          hosterList=it.next();
          CheckThread cthread=new CheckThread(hosterList);
          checkJobbers.add(cthread);
        }
        int todo=checkJobbers.getJobsAdded();
        checkJobbers.start();
        while (checkJobbers.getJobsFinished() != todo) {
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            return;
          }
        }
        checkJobbers.stop();
synchronized (linksToCheck) {
          linksToCheck.removeAll(currentList);
        }
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
      pc.doFinalize();
      pc.getBroadcaster().removeListener(LinkCheck.getLinkChecker());
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.STOP));
      checkRunning=false;
    }
  }
;
  checkThread.start();
}","private void startLinkCheck(){
  if (checkThread != null && checkThread.isAlive()) {
    return;
  }
  checkThread=new Thread(){
    public void run(){
      setName(""String_Node_Str"");
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.START));
      pc=new ProgressController(JDL.L(""String_Node_Str"",""String_Node_Str""),null);
      pc.getBroadcaster().addListener(LinkCheck.getLinkChecker());
      pc.setRange(0);
      while (linksToCheck.size() != 0) {
        ArrayList<DownloadLink> currentList;
synchronized (linksToCheck) {
          currentList=new ArrayList<DownloadLink>(linksToCheck);
          pc.addToMax(currentList.size());
        }
        HashMap<String,ArrayList<DownloadLink>> map=new HashMap<String,ArrayList<DownloadLink>>();
        for (        DownloadLink dl : currentList) {
          if (dl.getPlugin() == null)           continue;
          ArrayList<DownloadLink> localList=map.get(dl.getPlugin().getHost());
          if (localList == null) {
            localList=new ArrayList<DownloadLink>();
            map.put(dl.getPlugin().getHost(),localList);
          }
          localList.add(dl);
        }
        checkJobbers=new Jobber(4);
        ArrayList<DownloadLink> hosterList;
        for (Iterator<ArrayList<DownloadLink>> it=map.values().iterator(); it.hasNext(); ) {
          hosterList=it.next();
          CheckThread cthread=new CheckThread(hosterList);
          checkJobbers.add(cthread);
        }
        int todo=checkJobbers.getJobsAdded();
        checkJobbers.start();
        while (checkJobbers.getJobsFinished() != todo) {
          try {
            Thread.sleep(200);
          }
 catch (          InterruptedException e) {
            return;
          }
        }
        checkJobbers.stop();
synchronized (linksToCheck) {
          linksToCheck.removeAll(currentList);
        }
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
          return;
        }
      }
      pc.doFinalize();
      pc.getBroadcaster().removeListener(LinkCheck.getLinkChecker());
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.STOP));
      checkRunning=false;
    }
  }
;
  checkThread.start();
}"
20867,"private void checkHosterList(ArrayList<DownloadLink> hosterList){
  if (hosterList.size() != 0) {
    DownloadLink link=hosterList.get(0);
    long timer=System.currentTimeMillis();
    boolean ret=link.getPlugin().getWrapper().getNewPluginInstance().checkLinks(hosterList.toArray(new DownloadLink[]{}));
    if (!ret) {
      for (int i=0; i < hosterList.size(); i++) {
        link=hosterList.get(i);
        if (!checkRunning)         return;
        if (!link.getBooleanProperty(""String_Node_Str"",false)) {
          link.isAvailable();
          getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.AFTER_CHECK,link));
        }
        pc.increase(1);
      }
    }
 else {
      long reqtime=System.currentTimeMillis() - timer;
      for (      DownloadLink d : hosterList) {
        d.setRequestTime(reqtime);
      }
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.AFTER_CHECK,hosterList));
      pc.increase(hosterList.size());
    }
  }
  DownloadController.getInstance().fireDownloadLinkUpdate(hosterList);
}","private void checkHosterList(ArrayList<DownloadLink> hosterList){
  if (hosterList.size() != 0) {
    DownloadLink link=hosterList.get(0);
    long timer=System.currentTimeMillis();
    boolean ret=link.getPlugin() == null ? false : link.getPlugin().getWrapper().getNewPluginInstance().checkLinks(hosterList.toArray(new DownloadLink[]{}));
    if (!ret) {
      for (int i=0; i < hosterList.size(); i++) {
        link=hosterList.get(i);
        if (!checkRunning)         return;
        if (!link.getBooleanProperty(""String_Node_Str"",false)) {
          link.isAvailable();
          getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.AFTER_CHECK,link));
        }
        pc.increase(1);
      }
    }
 else {
      long reqtime=System.currentTimeMillis() - timer;
      for (      DownloadLink d : hosterList) {
        d.setRequestTime(reqtime);
      }
      getBroadcaster().fireEvent(new LinkCheckEvent(this,LinkCheckEvent.AFTER_CHECK,hosterList));
      pc.increase(hosterList.size());
    }
  }
  DownloadController.getInstance().fireDownloadLinkUpdate(hosterList);
}"
20868,"@Override public void run(){
  try {
    PluginForHost plugin;
    linkStatus.setStatusText(null);
    linkStatus.setErrorMessage(null);
    linkStatus.resetWaitTime();
    logger.info(""String_Node_Str"" + downloadLink.getName());
    currentPlugin=plugin=downloadLink.getPlugin();
    fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_ACTIVE,this));
    if (downloadLink.getDownloadURL() == null) {
      downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      downloadLink.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      downloadLink.setEnabled(false);
      fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_INACTIVE,this));
      return;
    }
synchronized (DUPELOCK) {
      if (DownloadInterface.preDownloadCheckFailed(downloadLink)) {
        onErrorLinkBlock(downloadLink,currentPlugin);
        fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_INACTIVE,this));
        return;
      }
      linkStatus.setInProgress(true);
    }
    handlePlugin();
    fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_INACTIVE,this));
    plugin.clean();
    downloadLink.requestGuiUpdate();
  }
  finally {
    linkStatus.setInProgress(false);
    linkStatus.setActive(false);
    downloadLink.setDownloadLinkController(null);
    downloadLink.setDownloadInstance(null);
  }
}","@Override public void run(){
  try {
    PluginForHost plugin;
    linkStatus.setStatusText(null);
    linkStatus.setErrorMessage(null);
    linkStatus.resetWaitTime();
    logger.info(""String_Node_Str"" + downloadLink.getName());
    currentPlugin=plugin=downloadLink.getPlugin();
    if (currentPlugin != null) {
      fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_ACTIVE,this));
      if (downloadLink.getDownloadURL() == null) {
        downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
        downloadLink.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
        downloadLink.setEnabled(false);
        fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_INACTIVE,this));
        return;
      }
synchronized (DUPELOCK) {
        if (DownloadInterface.preDownloadCheckFailed(downloadLink)) {
          onErrorLinkBlock(downloadLink,currentPlugin);
          fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_INACTIVE,this));
          return;
        }
        linkStatus.setInProgress(true);
      }
      handlePlugin();
      fireControlEvent(new ControlEvent(currentPlugin,ControlEvent.CONTROL_PLUGIN_INACTIVE,this));
      plugin.clean();
    }
    downloadLink.requestGuiUpdate();
  }
  finally {
    linkStatus.setInProgress(false);
    linkStatus.setActive(false);
    downloadLink.setDownloadLinkController(null);
    downloadLink.setDownloadInstance(null);
  }
}"
20869,"private void onErrorPluginDefect(DownloadLink downloadLink2,PluginForHost currentPlugin2){
  logger.warning(""String_Node_Str"" + currentPlugin.getHost() + ""String_Node_Str""+ downloadLink.getPlugin().getVersion()+ ""String_Node_Str"");
  if (downloadLink2.getLinkStatus().getErrorMessage() != null)   logger.warning(downloadLink2.getLinkStatus().getErrorMessage());
  try {
    logger.finest(currentPlugin2.getBrowser().getRequest().getHttpConnection() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  try {
    logger.finest(currentPlugin2.getBrowser() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  downloadLink2.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
  downloadLink.requestGuiUpdate();
}","private void onErrorPluginDefect(DownloadLink downloadLink2,PluginForHost currentPlugin2){
  String rev=downloadLink.getPlugin() == null ? ""String_Node_Str"" : downloadLink.getPlugin().getVersion();
  logger.warning(""String_Node_Str"" + currentPlugin.getHost() + ""String_Node_Str""+ rev+ ""String_Node_Str"");
  if (downloadLink2.getLinkStatus().getErrorMessage() != null)   logger.warning(downloadLink2.getLinkStatus().getErrorMessage());
  try {
    logger.finest(currentPlugin2.getBrowser().getRequest().getHttpConnection() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  try {
    logger.finest(currentPlugin2.getBrowser() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  downloadLink2.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
  downloadLink.requestGuiUpdate();
}"
20870,"private void handlePlugin(){
  try {
    this.startTime=System.currentTimeMillis();
    linkStatus.setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    System.out.println(""String_Node_Str"");
    fireControlEvent(ControlEvent.CONTROL_PLUGIN_ACTIVE,currentPlugin);
    DownloadController.getInstance().fireDownloadLinkUpdate(downloadLink);
    currentPlugin.init();
    try {
      try {
        currentPlugin.handle(downloadLink);
      }
 catch (      BrowserException e) {
        e.closeConnection();
        if (e.getException() != null) {
          throw e.getException();
        }
 else {
          throw e;
        }
      }
    }
 catch (    UnknownHostException e) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      linkStatus.setValue(SubConfiguration.getConfig(""String_Node_Str"").getGenericProperty(""String_Node_Str"",5 * 60 * 1000l));
    }
catch (    SocketTimeoutException e) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      linkStatus.setValue(SubConfiguration.getConfig(""String_Node_Str"").getGenericProperty(""String_Node_Str"",10 * 60 * 1000l));
    }
catch (    SocketException e) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      linkStatus.setValue(SubConfiguration.getConfig(""String_Node_Str"").getGenericProperty(""String_Node_Str"",5 * 60 * 1000l));
    }
catch (    IOException e) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      linkStatus.setValue(10 * 60 * 1000l);
    }
catch (    InterruptedException e) {
      logger.finest(""String_Node_Str"" + downloadLink.getPlugin().getVersion());
      linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFECT);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str"") + JDUtilities.convertExceptionReadable(e));
    }
catch (    Exception e) {
      logger.finest(""String_Node_Str"" + downloadLink.getPlugin().getVersion());
      JDLogger.exception(e);
      linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFECT);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str"") + JDUtilities.convertExceptionReadable(e));
    }
    if (isAborted() && !linkStatus.isFinished()) {
      linkStatus.setErrorMessage(null);
      linkStatus.setStatus(LinkStatus.TODO);
      return;
    }
    if (linkStatus.isFailed()) {
      logger.warning(""String_Node_Str"" + downloadLink.getLinkStatus());
    }
switch (linkStatus.getLatestStatus()) {
case LinkStatus.ERROR_LOCAL_IO:
      onErrorLocalIO(downloadLink,currentPlugin);
    break;
case LinkStatus.ERROR_IP_BLOCKED:
  onErrorIPWaittime(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE:
onErrorDownloadTemporarilyUnavailable(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE:
onErrorHostTemporarilyUnavailable(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_AGB_NOT_SIGNED:
onErrorAGBNotSigned(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_FILE_NOT_FOUND:
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getName() + ""String_Node_Str"" + Formatter.formatReadable(downloadLink.getDownloadSize())+ ""String_Node_Str""));
onErrorFileNotFound(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_LINK_IN_PROGRESS:
onErrorLinkBlock(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_FATAL:
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getHost()));
onErrorFatal(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_CAPTCHA:
onErrorCaptcha(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_PREMIUM:
onErrorPremium(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_DOWNLOAD_INCOMPLETE:
onErrorIncomplete(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_ALREADYEXISTS:
onErrorFileExists(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_DOWNLOAD_FAILED:
onErrorChunkloadFailed(downloadLink,currentPlugin);
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getName() + ""String_Node_Str"" + Formatter.formatReadable(downloadLink.getDownloadSize())+ ""String_Node_Str""));
break;
case LinkStatus.ERROR_PLUGIN_DEFECT:
onErrorPluginDefect(downloadLink,currentPlugin);
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getHost()));
break;
case LinkStatus.ERROR_NO_CONNECTION:
case LinkStatus.ERROR_TIMEOUT_REACHED:
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getHost()));
onErrorNoConnection(downloadLink,currentPlugin);
break;
default :
if (linkStatus.hasStatus(LinkStatus.FINISHED)) {
logger.finest(""String_Node_Str"" + downloadLink.getLinkStatus());
logger.info(""String_Node_Str"" + downloadLink.getFileOutput());
onDownloadFinishedSuccessFull(downloadLink);
}
 else {
retry(downloadLink,currentPlugin);
}
}
}
 catch (Exception e) {
logger.severe(""String_Node_Str"" + downloadLink.getPlugin().getVersion());
JDLogger.exception(e);
}
}","private void handlePlugin(){
  try {
    this.startTime=System.currentTimeMillis();
    linkStatus.setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    System.out.println(""String_Node_Str"");
    fireControlEvent(ControlEvent.CONTROL_PLUGIN_ACTIVE,currentPlugin);
    DownloadController.getInstance().fireDownloadLinkUpdate(downloadLink);
    currentPlugin.init();
    try {
      try {
        currentPlugin.handle(downloadLink);
      }
 catch (      BrowserException e) {
        e.closeConnection();
        if (e.getException() != null) {
          throw e.getException();
        }
 else {
          throw e;
        }
      }
    }
 catch (    UnknownHostException e) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      linkStatus.setValue(SubConfiguration.getConfig(""String_Node_Str"").getGenericProperty(""String_Node_Str"",5 * 60 * 1000l));
    }
catch (    SocketTimeoutException e) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      linkStatus.setValue(SubConfiguration.getConfig(""String_Node_Str"").getGenericProperty(""String_Node_Str"",10 * 60 * 1000l));
    }
catch (    SocketException e) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      linkStatus.setValue(SubConfiguration.getConfig(""String_Node_Str"").getGenericProperty(""String_Node_Str"",5 * 60 * 1000l));
    }
catch (    IOException e) {
      linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
      linkStatus.setValue(10 * 60 * 1000l);
    }
catch (    InterruptedException e) {
      String rev=downloadLink.getPlugin() == null ? ""String_Node_Str"" : downloadLink.getPlugin().getVersion();
      logger.finest(""String_Node_Str"" + rev);
      linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFECT);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str"") + JDUtilities.convertExceptionReadable(e));
    }
catch (    Exception e) {
      logger.finest(""String_Node_Str"" + downloadLink.getPlugin().getVersion());
      JDLogger.exception(e);
      linkStatus.addStatus(LinkStatus.ERROR_PLUGIN_DEFECT);
      linkStatus.setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str"") + JDUtilities.convertExceptionReadable(e));
    }
    if (isAborted() && !linkStatus.isFinished()) {
      linkStatus.setErrorMessage(null);
      linkStatus.setStatus(LinkStatus.TODO);
      return;
    }
    if (linkStatus.isFailed()) {
      logger.warning(""String_Node_Str"" + downloadLink.getLinkStatus());
    }
switch (linkStatus.getLatestStatus()) {
case LinkStatus.ERROR_LOCAL_IO:
      onErrorLocalIO(downloadLink,currentPlugin);
    break;
case LinkStatus.ERROR_IP_BLOCKED:
  onErrorIPWaittime(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE:
onErrorDownloadTemporarilyUnavailable(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE:
onErrorHostTemporarilyUnavailable(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_AGB_NOT_SIGNED:
onErrorAGBNotSigned(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_FILE_NOT_FOUND:
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getName() + ""String_Node_Str"" + Formatter.formatReadable(downloadLink.getDownloadSize())+ ""String_Node_Str""));
onErrorFileNotFound(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_LINK_IN_PROGRESS:
onErrorLinkBlock(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_FATAL:
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getHost()));
onErrorFatal(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_CAPTCHA:
onErrorCaptcha(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_PREMIUM:
onErrorPremium(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_DOWNLOAD_INCOMPLETE:
onErrorIncomplete(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_ALREADYEXISTS:
onErrorFileExists(downloadLink,currentPlugin);
break;
case LinkStatus.ERROR_DOWNLOAD_FAILED:
onErrorChunkloadFailed(downloadLink,currentPlugin);
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getName() + ""String_Node_Str"" + Formatter.formatReadable(downloadLink.getDownloadSize())+ ""String_Node_Str""));
break;
case LinkStatus.ERROR_PLUGIN_DEFECT:
onErrorPluginDefect(downloadLink,currentPlugin);
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getHost()));
break;
case LinkStatus.ERROR_NO_CONNECTION:
case LinkStatus.ERROR_TIMEOUT_REACHED:
Balloon.showIfHidden(JDL.L(""String_Node_Str"",""String_Node_Str""),JDTheme.II(""String_Node_Str"",32,32),JDL.LF(""String_Node_Str"",""String_Node_Str"",downloadLink.getHost()));
onErrorNoConnection(downloadLink,currentPlugin);
break;
default :
if (linkStatus.hasStatus(LinkStatus.FINISHED)) {
logger.finest(""String_Node_Str"" + downloadLink.getLinkStatus());
logger.info(""String_Node_Str"" + downloadLink.getFileOutput());
onDownloadFinishedSuccessFull(downloadLink);
}
 else {
retry(downloadLink,currentPlugin);
}
}
}
 catch (Exception e) {
logger.severe(""String_Node_Str"" + downloadLink.getPlugin().getVersion());
JDLogger.exception(e);
}
}"
20871,"/** 
 * reset ipblocked links 
 */
private static void resetAllLinks(){
  final ArrayList<FilePackage> packages=JDUtilities.getController().getPackages();
  DownloadWatchDog.getInstance().resetIPBlockWaittime(null);
synchronized (packages) {
    for (    final FilePackage fp : packages) {
      for (      final DownloadLink nextDownloadLink : fp.getDownloadLinkList()) {
        if (nextDownloadLink.getPlugin() != null && nextDownloadLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED)) {
          nextDownloadLink.getLinkStatus().setStatus(LinkStatus.TODO);
          nextDownloadLink.getLinkStatus().resetWaitTime();
        }
      }
    }
  }
}","/** 
 * reset ipblocked links 
 */
private static void resetAllLinks(){
  final ArrayList<FilePackage> packages=JDUtilities.getController().getPackages();
  DownloadWatchDog.getInstance().resetIPBlockWaittime(null);
synchronized (packages) {
    for (    final FilePackage fp : packages) {
      for (      final DownloadLink nextDownloadLink : fp.getDownloadLinkList()) {
        if (nextDownloadLink.getLinkStatus().hasStatus(LinkStatus.ERROR_IP_BLOCKED)) {
          nextDownloadLink.getLinkStatus().setStatus(LinkStatus.TODO);
          nextDownloadLink.getLinkStatus().resetWaitTime();
        }
      }
    }
  }
}"
20872,"@Override public Component myTableCellRendererComponent(JDTableModel table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  if (value instanceof LinkGrabberFilePackage) {
    fp=(LinkGrabberFilePackage)value;
    jlr.setText(fp.getHoster());
    jlr.setIcon(null);
    jlr.setToolTipText(strLoadingFrom + fp.getHoster());
  }
 else {
    dLink=(DownloadLink)value;
    jlr.setToolTipText(strLoadingFrom + dLink.getPlugin().getHost());
    jlr.setText(dLink.getPlugin().getHost() + dLink.getPlugin().getSessionInfo());
    jlr.setIcon(dLink.getPlugin().getHosterIconScaled());
  }
  return jlr;
}","@Override public Component myTableCellRendererComponent(JDTableModel table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  if (value instanceof LinkGrabberFilePackage) {
    fp=(LinkGrabberFilePackage)value;
    jlr.setText(fp.getHoster());
    jlr.setIcon(null);
    jlr.setToolTipText(strLoadingFrom + fp.getHoster());
  }
 else {
    dLink=(DownloadLink)value;
    if (dLink.getPlugin() != null) {
      jlr.setToolTipText(strLoadingFrom + dLink.getPlugin().getHost());
      jlr.setText(dLink.getPlugin().getHost() + dLink.getPlugin().getSessionInfo());
      jlr.setIcon(dLink.getPlugin().getHosterIconScaled());
    }
 else {
      jlr.setToolTipText(""String_Node_Str"");
      jlr.setText(""String_Node_Str"");
      jlr.setIcon(null);
    }
  }
  return jlr;
}"
20873,"public void actionPerformed(ActionEvent e){
  for (  LinkGrabberFilePackage packagee : packages) {
synchronized (packagee) {
      ArrayList<DownloadLink> links=new ArrayList<DownloadLink>(packagee.getDownloadLinks());
      Set<String> hosts=DownloadLink.getHosterList(links);
      for (      String host : hosts) {
        LinkGrabberFilePackage nfp=new LinkGrabberFilePackage(packagee.getName());
        nfp.setDownloadDirectory(packagee.getDownloadDirectory());
        nfp.setPassword(packagee.getPassword());
        nfp.setPostProcessing(packagee.isPostProcessing());
        nfp.setUseSubDir(packagee.useSubDir());
        nfp.setComment(packagee.getComment());
        for (        DownloadLink dl : links) {
          if (dl.getPlugin().getHost().equalsIgnoreCase(host)) {
            nfp.add(dl);
          }
        }
        LinkGrabberController.getInstance().addPackage(nfp);
      }
    }
  }
}","public void actionPerformed(ActionEvent e){
  for (  LinkGrabberFilePackage packagee : packages) {
synchronized (packagee) {
      ArrayList<DownloadLink> links=new ArrayList<DownloadLink>(packagee.getDownloadLinks());
      Set<String> hosts=DownloadLink.getHosterList(links);
      for (      String host : hosts) {
        LinkGrabberFilePackage nfp=new LinkGrabberFilePackage(packagee.getName());
        nfp.setDownloadDirectory(packagee.getDownloadDirectory());
        nfp.setPassword(packagee.getPassword());
        nfp.setPostProcessing(packagee.isPostProcessing());
        nfp.setUseSubDir(packagee.useSubDir());
        nfp.setComment(packagee.getComment());
        for (        DownloadLink dl : links) {
          if (dl.getHost().equalsIgnoreCase(host)) {
            nfp.add(dl);
          }
        }
        LinkGrabberController.getInstance().addPackage(nfp);
      }
    }
  }
}"
20874,"public static DownloadInterface openDownload(Browser br,DownloadLink downloadLink,Form form) throws Exception {
  DownloadInterface dl=RAFDownload.download(downloadLink,br.createRequest(form));
  try {
    dl.connect(br);
  }
 catch (  PluginException e) {
    if (e.getValue() == DownloadInterface.ERROR_REDIRECTED) {
      int maxRedirects=10;
      while (maxRedirects-- > 0) {
        dl=RAFDownload.download(downloadLink,br.createGetRequestRedirectedRequest(dl.getRequest()));
        try {
          dl.connect(br);
          break;
        }
 catch (        PluginException e2) {
          continue;
        }
      }
      if (maxRedirects <= 0) {
        throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
      }
    }
  }
  if (downloadLink.getPlugin().getBrowser() == br) {
    downloadLink.getPlugin().setDownloadInterface(dl);
  }
  return dl;
}","public static DownloadInterface openDownload(Browser br,DownloadLink downloadLink,Form form) throws Exception {
  if (downloadLink.getPlugin() == null)   return null;
  DownloadInterface dl=RAFDownload.download(downloadLink,br.createRequest(form));
  try {
    dl.connect(br);
  }
 catch (  PluginException e) {
    if (e.getValue() == DownloadInterface.ERROR_REDIRECTED) {
      int maxRedirects=10;
      while (maxRedirects-- > 0) {
        dl=RAFDownload.download(downloadLink,br.createGetRequestRedirectedRequest(dl.getRequest()));
        try {
          dl.connect(br);
          break;
        }
 catch (        PluginException e2) {
          continue;
        }
      }
      if (maxRedirects <= 0) {
        throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
      }
    }
  }
  if (downloadLink.getPlugin().getBrowser() == br) {
    downloadLink.getPlugin().setDownloadInterface(dl);
  }
  return dl;
}"
20875,"@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.setFollowRedirects(true);
  if (link.getDownloadURL().contains(""String_Node_Str"")) {
    String dllink;
    dllink=br.getURL();
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    link.setFinalFileName(null);
    dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1);
    dl.startDownload();
  }
 else {
    String infolink=link.getDownloadURL();
    if (br.containsHTML(""String_Node_Str"")) {
      Form form=br.getForm(0);
      if (form == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      String passCode=null;
      if (link.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",link);
      }
 else {
        passCode=link.getStringProperty(""String_Node_Str"",null);
      }
      form.put(""String_Node_Str"",passCode);
      br.submitForm(form);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        link.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (passCode != null) {
        link.setProperty(""String_Node_Str"",passCode);
      }
    }
    String infolink2=infolink.replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(infolink2);
    String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null)     dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1);
    dl.startDownload();
  }
}","@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.setFollowRedirects(true);
  if (link.getDownloadURL().contains(""String_Node_Str"")) {
    String dllink;
    dllink=br.getURL();
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    link.setFinalFileName(null);
    dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1);
    dl.startDownload();
  }
 else {
    String infolink=link.getDownloadURL();
    if (br.containsHTML(""String_Node_Str"")) {
      Form form=br.getForm(0);
      if (form == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      String passCode=null;
      if (link.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",link);
      }
 else {
        passCode=link.getStringProperty(""String_Node_Str"",null);
      }
      form.put(""String_Node_Str"",passCode);
      br.submitForm(form);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        link.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (passCode != null) {
        link.setProperty(""String_Node_Str"",passCode);
      }
    }
    String infolink2=infolink.replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(infolink2);
    String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null)     dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1);
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      br.followConnection();
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    dl.startDownload();
  }
}"
20876,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=br.getForm(1);
  if (freeform != null) {
    freeform.remove(""String_Node_Str"");
    br.submitForm(freeform);
  }
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      checkErrors(downloadLink);
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=br.getForm(1);
  if (freeform != null) {
    freeform.remove(""String_Node_Str"");
    br.submitForm(freeform);
  }
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLForm.remove(null);
  DLForm.remove(""String_Node_Str"");
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      checkErrors(downloadLink);
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
              if (dllink == null)               dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20877,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  String url=null;
  Form down=null;
  Form[] allforms=br.getForms();
  if (allforms == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  for (  Form singleform : allforms) {
    if (singleform.containsHTML(""String_Node_Str"")) {
      down=singleform;
      break;
    }
  }
  String captchaurl=null;
  if (down == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String captchaId=down.getVarsMap().get(""String_Node_Str"");
  if (captchaId == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  captchaurl=""String_Node_Str"" + captchaId + ""String_Node_Str"";
  URLConnectionAdapter con=br.openGetConnection(captchaurl);
  File file=this.getLocalCaptchaFile();
  Browser.download(file,con);
  con.disconnect();
  down.setMethod(Form.MethodType.POST);
  String code=getCaptchaCode(file,downloadLink);
  down.put(""String_Node_Str"",code);
  down.put(""String_Node_Str"",captchaId);
  down.setAction(""String_Node_Str"");
  br.submitForm(down);
  if (!br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (url == null || url.equals(""String_Node_Str"")) {
    String nextpage=""String_Node_Str"";
    logger.info(""String_Node_Str"");
    br.getPage(nextpage + ""String_Node_Str"");
    int waitThat=60;
    String time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time != null) {
      logger.info(""String_Node_Str"" + time + ""String_Node_Str"");
      waitThat=Integer.parseInt(time);
    }
    sleep((waitThat + 5) * 1001,downloadLink);
    br.getPage(nextpage);
    url=br.getRegex(""String_Node_Str"").getMatch(2);
    if (url == null) {
      url=br.getRegex(""String_Node_Str"").getMatch(0);
      if (url == null)       url=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (url == null || url.equals(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  sleep(2000,downloadLink);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,1);
  con=dl.getConnection();
  if (con.getResponseCode() == 404) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,null,5 * 60 * 1001);
  }
  if (!con.isOK()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
  }
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  String url=null;
  Form down=null;
  Form[] allforms=br.getForms();
  if (allforms == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  for (  Form singleform : allforms) {
    if (singleform.containsHTML(""String_Node_Str"")) {
      down=singleform;
      break;
    }
  }
  String captchaurl=null;
  if (down == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String captchaId=down.getVarsMap().get(""String_Node_Str"");
  if (captchaId == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  captchaurl=""String_Node_Str"" + captchaId + ""String_Node_Str"";
  URLConnectionAdapter con=br.openGetConnection(captchaurl);
  File file=this.getLocalCaptchaFile();
  Browser.download(file,con);
  con.disconnect();
  down.setMethod(Form.MethodType.POST);
  String code=getCaptchaCode(file,downloadLink);
  down.put(""String_Node_Str"",code);
  down.put(""String_Node_Str"",captchaId);
  down.setAction(""String_Node_Str"");
  br.submitForm(down);
  if (!br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  url=br.getRegex(""String_Node_Str"").getMatch(0);
  String nextpage=""String_Node_Str"";
  if (url == null || url.equals(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    br.getPage(nextpage + ""String_Node_Str"");
    int waitThat=60;
    String time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time != null) {
      logger.info(""String_Node_Str"" + time + ""String_Node_Str"");
      waitThat=Integer.parseInt(time);
    }
    sleep((waitThat + 5) * 1001,downloadLink);
    br.getPage(nextpage);
    url=getUrl();
  }
  if (url == null || url.equals(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    String extraWait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (extraWait != null) {
      logger.info(""String_Node_Str"");
      sleep((Integer.parseInt(extraWait) + 5) * 1001l,downloadLink);
      br.getPage(nextpage);
      url=getUrl();
    }
    if (url == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
  }
  sleep(2000,downloadLink);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,1);
  con=dl.getConnection();
  if (con.getResponseCode() == 404) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,null,5 * 60 * 1001);
  }
  if (!con.isOK()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
  }
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20878,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  if (brbefore.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  br.setFollowRedirects(true);
  Form DLForm0=br.getForm(0);
  if (DLForm0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLForm0.remove(""String_Node_Str"");
  br.submitForm(DLForm0);
  doSomething();
  checkErrors(downloadLink);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=60;
  if (ttt != null && Integer.parseInt(ttt) < 100) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    tt=Integer.parseInt(ttt);
  }
  sleep(tt * 1001,downloadLink);
  String passCode=null;
  if (br.containsHTML(""String_Node_Str"")) {
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
    }
    rc.setCode(c);
  }
 else {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      dlForm.put(""String_Node_Str"",passCode);
    }
    br.submitForm(dlForm);
  }
  doSomething();
  if (brbefore.contains(""String_Node_Str"") || brbefore.contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    downloadLink.setProperty(""String_Node_Str"",null);
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  if (brbefore.contains(ONLY4PREMIUMERROR0) || brbefore.contains(ONLY4PREMIUMERROR1))   throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  br.setFollowRedirects(true);
  Form DLForm0=br.getForm(0);
  if (DLForm0 == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  DLForm0.remove(""String_Node_Str"");
  br.submitForm(DLForm0);
  doSomething();
  checkErrors(downloadLink);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=60;
  if (ttt != null && Integer.parseInt(ttt) < 100) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    tt=Integer.parseInt(ttt);
  }
  sleep(tt * 1001,downloadLink);
  String passCode=null;
  if (br.containsHTML(""String_Node_Str"")) {
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
    }
    rc.setCode(c);
  }
 else {
    Form dlForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (dlForm == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (br.containsHTML(""String_Node_Str"")) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      dlForm.put(""String_Node_Str"",passCode);
    }
    br.submitForm(dlForm);
  }
  doSomething();
  if (brbefore.contains(""String_Node_Str"") || brbefore.contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    downloadLink.setProperty(""String_Node_Str"",null);
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  dl.startDownload();
}"
20879,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  doSomething();
  if (brbefore.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (brbefore.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (brbefore.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  String filesize=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (brbefore.contains(""String_Node_Str"")) {
    link.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  link.setName(filename);
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  doSomething();
  if (brbefore.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (brbefore.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (brbefore.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  String filesize=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (brbefore.contains(ONLY4PREMIUMERROR0) || brbefore.contains(ONLY4PREMIUMERROR1)) {
    link.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  link.setName(filename);
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
20880,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.getHeaders().put(""String_Node_Str"",downloadLink.getDownloadURL());
  br.getPage(""String_Node_Str"");
  if (!br.getURL().equals(downloadLink.getDownloadURL()))   br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileName == null) {
    fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  String fileSize=br.getRegex(""String_Node_Str"").getMatch(1);
  if (fileName == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  if (!fileSize.endsWith(""String_Node_Str""))   fileSize=fileSize + ""String_Node_Str"";
  downloadLink.setName(fileName.trim());
  if (fileSize != null)   downloadLink.setDownloadSize(Regex.getSize(fileSize.replace(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.getHeaders().put(""String_Node_Str"",downloadLink.getDownloadURL());
  br.getPage(""String_Node_Str"");
  if (!br.getURL().equals(downloadLink.getDownloadURL()))   br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileName == null) {
    fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  String fileSize=br.getRegex(""String_Node_Str"").getMatch(1);
  if (fileName == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  if (!fileSize.endsWith(""String_Node_Str""))   fileSize=fileSize + ""String_Node_Str"";
  downloadLink.setName(fileName.trim());
  if (fileSize != null)   downloadLink.setDownloadSize(Regex.getSize(fileSize.trim().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}"
20881,"private int generateWidth(int percent){
  return (int)(12.4 * percent);
}","private int generateWidth(int percent){
  return (int)(1.24 * percent);
}"
20882,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  setBrowserExclusive();
  br.forceDebug(true);
  requestFileInformation(downloadLink);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
  }
  checkErrors();
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink != null && !dllink.equals(""String_Node_Str"")) {
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
 else {
    logger.info(""String_Node_Str"");
    Form form=br.getFormBySubmitvalue(""String_Node_Str"");
    if (form == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    br.submitForm(form);
    checkErrors();
    if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    String icid=br.getRegex(""String_Node_Str"").getMatch(0);
    if ((dllink == null || dllink.equals(""String_Node_Str"")) && icid != null) {
      Form cap=new Form();
      cap.setAction(link);
      cap.setMethod(Form.MethodType.POST);
      cap.put(""String_Node_Str"",icid);
      String captcha=getCaptchaCode(""String_Node_Str"" + icid,downloadLink);
      cap.put(""String_Node_Str"",captcha);
      br.submitForm(cap);
      dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_CAPTCHA);
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
    if (dllink == null || dllink.equals(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  setBrowserExclusive();
  br.forceDebug(true);
  requestFileInformation(downloadLink);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
  }
  checkErrors();
  String dllink=br.getRegex(DLLINKREGEX).getMatch(0);
  if (dllink != null && !dllink.equals(""String_Node_Str"")) {
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
 else {
    logger.info(""String_Node_Str"");
    Form form=br.getFormBySubmitvalue(""String_Node_Str"");
    if (form == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    br.submitForm(form);
    checkErrors();
    if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    dllink=br.getRegex(DLLINKREGEX).getMatch(0);
    String icid=br.getRegex(""String_Node_Str"").getMatch(0);
    if ((dllink == null || dllink.equals(""String_Node_Str"")) && icid != null) {
      Form cap=new Form();
      cap.setAction(link);
      cap.setMethod(Form.MethodType.POST);
      cap.put(""String_Node_Str"",icid);
      String captcha=getCaptchaCode(""String_Node_Str"" + icid,downloadLink);
      cap.put(""String_Node_Str"",captcha);
      br.submitForm(cap);
      dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_CAPTCHA);
        dllink=br.getRegex(DLLINKREGEX2).getMatch(0);
      }
    }
    if (dllink == null || dllink.equals(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
}"
20883,"public void handle(Request request,Response response){
  Document xml=JDUtilities.parseXmlString(""String_Node_Str"",false);
  response.setReturnType(""String_Node_Str"");
  response.setReturnStatus(Response.OK);
  if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(HelpPage.getHTML());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(rc.getVersion());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getJDTitle());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Property config=JDUtilities.getConfiguration();
    response.addContent(""String_Node_Str"");
    if (request.getParameters().containsKey(""String_Node_Str"")) {
      config=SubConfiguration.getConfig(request.getParameters().get(""String_Node_Str"").toUpperCase());
    }
    for (    Entry<String,Object> next : config.getProperties().entrySet()) {
      response.addContent(next.getKey() + ""String_Node_Str"" + next.getValue()+ ""String_Node_Str"");
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    if (SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(Configuration.PARAM_GLOBAL_IP_DISABLE,false)) {
      response.addContent(""String_Node_Str"");
    }
 else {
      response.addContent(IPCheck.getIPAddress());
    }
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Random r=new Random();
    response.addContent(r.nextInt(255) + ""String_Node_Str"" + r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getConnectionManager().getIncommingBandwidthUsage() / 1000);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int value=SubConfiguration.getConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,0);
    response.addContent(value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getDownloadStatus().toString());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      Element fp_xml=addGrabberPackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinks()) {
        fp_xml.appendChild(addGrabberLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    int counter=0;
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      counter+=fp.getDownloadLinks().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean isbusy=false;
    if (LinkGrabberPanel.getLinkGrabber().isRunning())     isbusy=true;
 else     isbusy=false;
    response.addContent(isbusy);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean value=GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true);
    response.addContent(value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean value=GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS_AUTO,true);
    response.addContent(value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      counter+=fp.getDownloadLinkList().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        fp_xml.appendChild(addDownloadLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newrc=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newrc);
    if (newrc != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,newrc);
      JDUtilities.getConfiguration().save();
    }
    response.addContent(""String_Node_Str"" + newrc);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newuseprem=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newuseprem);
    if (newuseprem != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,newuseprem);
      JDUtilities.getConfiguration().save();
    }
    response.addContent(""String_Node_Str"" + newuseprem);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String dir=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY,dir);
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + dir);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newdllimit=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newdllimit);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newsimdl=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newsimdl);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean value=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + value);
    if (value != GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true)) {
      GUIUtils.getConfig().setProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,value);
      JDUtilities.getConfiguration().save();
    }
    response.addContent(""String_Node_Str"" + value);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean value=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + value);
    if (value != GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS_AUTO,true)) {
      GUIUtils.getConfig().setProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS_AUTO,value);
      JDUtilities.getConfiguration().save();
    }
    response.addContent(""String_Node_Str"" + value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().startDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().pauseDownloads(!DownloadWatchDog.getInstance().isPaused());
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().stopDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().toggleStartStop();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    Reconnecter.doManualReconnect();
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_WEBUPDATE_AUTO_RESTART,true);
      SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_WEBUPDATE_DISABLE,false);
    }
    WebUpdate.doUpdateCheck(true);
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.restartJD(false);
      }
    }
).start();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.getController().exit();
      }
    }
).start();
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<String> links=new ArrayList<String>();
    String link=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    for (    String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(link,false),null)) {
      links.add(tlink);
    }
    if (request.getParameters().size() > 0) {
      Iterator<String> it=request.getParameters().keySet().iterator();
      while (it.hasNext()) {
        String help=it.next();
        if (!request.getParameter(help).equals(""String_Node_Str"")) {
          links.add(request.getParameter(help));
        }
      }
    }
    StringBuilder ret=new StringBuilder();
    char tmp[]=new char[]{'""','\r','\n'};
    for (    String element : links) {
      ret.append('\""');
      ret.append(element.trim());
      ret.append(tmp);
    }
    link=ret.toString();
    new DistributeData(link,false).start();
    response.addContent(""String_Node_Str"" + link + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    if (dlcfilestr.matches(""String_Node_Str"")) {
      String containerFormat=new Regex(dlcfilestr,""String_Node_Str"").getMatch(0);
      File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ containerFormat);
      try {
        Browser.download(container,dlcfilestr);
        JDController.loadContainerFile(container,false,false);
        try {
          Thread.sleep(3000);
        }
 catch (        Exception e) {
          JDLogger.exception(e);
        }
        container.delete();
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
    }
 else {
      JDController.loadContainerFile(new File(dlcfilestr),false,false);
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<DownloadLink> dllinks=new ArrayList<DownloadLink>();
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    boolean savefromGrabber=new Regex(request.getRequestUrl(),""String_Node_Str"").matches();
    if (savefromGrabber) {
      if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
        response.addContent(ERROR_LINK_GRABBER_RUNNING);
      }
 else {
        ArrayList<LinkGrabberFilePackage> lgPackages=new ArrayList<LinkGrabberFilePackage>();
        ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
          lgPackages.addAll(LinkGrabberController.getInstance().getPackages());
          for (int i=0; i < lgPackages.size(); i++) {
            DownloadLink dl=null;
            for (            DownloadLink link : lgPackages.get(i).getDownloadLinks()) {
              dllinks.add(link);
              link.setEnabled(false);
              if (dl == null)               dl=link;
            }
            LinkGrabberPanel.getLinkGrabber().confirmPackage(lgPackages.get(i),null,i);
            packages.add(dl.getFilePackage());
          }
          JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
          for (          FilePackage fp : packages) {
            JDUtilities.getDownloadController().removePackage(fp);
          }
        }
      }
    }
 else {
      dllinks=JDUtilities.getDownloadController().getAllDownloadLinks();
      JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
    String password=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    ArrayList<LinkGrabberFilePackage> packages=LinkGrabberController.getInstance().getPackages();
    ArrayList<LinkGrabberFilePackage> packagesWithPW=new ArrayList<LinkGrabberFilePackage>();
    boolean isErrorMsg=false;
synchronized (LinkGrabberController.ControllerLock) {
      outer:       for (      String packagename : packagenames) {
        for (        LinkGrabberFilePackage pack : packages) {
          if (packagename.equals(pack.getName())) {
            pack.setPassword(password);
            packagesWithPW.add(pack);
            LinkGrabberController.getInstance().throwRefresh();
            continue outer;
          }
        }
        if (!isErrorMsg) {
          response.addContent(""String_Node_Str"" + packagename + ""String_Node_Str"");
          isErrorMsg=true;
        }
      }
    }
    if (packagesWithPW.size() > 0) {
      response.addContent(""String_Node_Str"" + password + ""String_Node_Str"");
      for (int i=0; i < packagesWithPW.size(); i++) {
        if (i != 0)         response.addContent(""String_Node_Str"");
        response.addContent(""String_Node_Str"" + packagesWithPW.get(i).getName() + ""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> srcPackages=new ArrayList<LinkGrabberFilePackage>();
      String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage destPackage=LinkGrabberController.getInstance().getFPwithName(packagenames[0]);
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
        }
 else {
          for (          LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
            for (            String src : packagenames) {
              if ((pack.getName().equals(src)) && (pack != destPackage)) {
                srcPackages.add(pack);
              }
            }
          }
          for (          LinkGrabberFilePackage pack : srcPackages) {
            destPackage.addAll(pack.getDownloadLinks());
            LinkGrabberController.getInstance().removePackage(pack);
          }
          if (srcPackages.size() > 0) {
            if (srcPackages.size() < packagenames.length - 1) {
              response.addContent(""String_Node_Str"");
            }
            response.addContent(""String_Node_Str"" + srcPackages.size() + ""String_Node_Str""+ packagenames[0]+ ""String_Node_Str"");
            for (int i=0; i < srcPackages.size(); ++i) {
              if (i != 0)               response.addContent(""String_Node_Str"");
              response.addContent(""String_Node_Str"" + srcPackages.get(i).getName() + ""String_Node_Str"");
            }
          }
 else {
            response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
          }
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage destPackage=LinkGrabberController.getInstance().getFPwithName(packagenames[0]);
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
        }
 else {
          destPackage.setName(packagenames[1]);
          LinkGrabberController.getInstance().throwRefresh();
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str""+ packagenames[1]+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberPanel.getLinkGrabber().confirmPackage(packages.get(i),null,i);
        }
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> addedlist=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
      String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberFilePackage fp=packages.get(i);
          for (          String name : packagenames) {
            if (name.equalsIgnoreCase(fp.getName())) {
              LinkGrabberPanel.getLinkGrabber().confirmPackage(fp,null,i);
              addedlist.add(fp);
            }
          }
        }
        response.addContent(""String_Node_Str"");
        for (int i=0; i < addedlist.size(); i++) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          response.addContent(""String_Node_Str"" + addedlist.get(i).getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<String> delLinks=new ArrayList<String>();
      ArrayList<String> delPackages=new ArrayList<String>();
      String[] types=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
synchronized (LinkGrabberController.ControllerLock) {
        ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        response.addContent(""String_Node_Str"");
        for (int i=0; i < types.length; ++i) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          if (types[i].equals(LINK_TYPE_OFFLINE) || types[i].equals(LINK_TYPE_AVAIL)) {
            response.addContent(types[i]);
          }
 else {
            response.addContent(""String_Node_Str"" + types[i] + ""String_Node_Str"");
          }
        }
        for (        LinkGrabberFilePackage fp : packages) {
          ArrayList<DownloadLink> links=new ArrayList<DownloadLink>(fp.getDownloadLinks());
          for (          DownloadLink link : links) {
            for (            String type : types) {
              if ((type.equals(LINK_TYPE_OFFLINE) && link.getAvailableStatus().equals(AvailableStatus.FALSE)) || (type.equals(LINK_TYPE_AVAIL) && link.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS))) {
                fp.remove(link);
                delLinks.add(link.getDownloadURL());
              }
            }
          }
          if (fp.getDownloadLinks().size() == 0) {
            delPackages.add(fp.getName());
          }
        }
        response.addContent(""String_Node_Str"" + delLinks.size() + ""String_Node_Str""+ delLinks+ ""String_Node_Str""+ delPackages.size()+ ""String_Node_Str""+ delPackages+ ""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (        LinkGrabberFilePackage fp : packages) {
          LinkGrabberController.getInstance().removePackage(fp);
        }
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<LinkGrabberFilePackage> removelist=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberFilePackage fp=packages.get(i);
          for (          String name : packagenames) {
            if (name.equalsIgnoreCase(fp.getName())) {
              LinkGrabberController.getInstance().removePackage(fp);
              removelist.add(fp);
            }
          }
        }
        response.addContent(""String_Node_Str"");
        for (int i=0; i < removelist.size(); i++) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          response.addContent(""String_Node_Str"" + removelist.get(i).getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      Regex reg=new Regex(request.getRequestUrl(),""String_Node_Str"");
      if (reg.getMatch(0) == null || reg.getMatch(1) == null) {
        response.addContent(ERROR_MALFORMED_REQUEST);
        return;
      }
      String dest_package_name=Encoding.htmlDecode(reg.getMatch(0));
      ArrayList<DownloadLink> links=new ArrayList<DownloadLink>();
      for (      String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(reg.getMatch(1),false),null)) {
        links.addAll(new DistributeData(tlink).findLinks());
      }
      boolean packageWasAvailable=false;
      int numLinksMoved=0;
      int numPackagesDeleted=0;
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage dest_package=null;
        for (        LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
          if (pack.getName().equalsIgnoreCase(dest_package_name)) {
            dest_package=pack;
            packageWasAvailable=true;
          }
        }
        if (dest_package == null) {
          dest_package=new LinkGrabberFilePackage(dest_package_name);
          dest_package.setComment(""String_Node_Str"");
        }
        List<LinkGrabberFilePackage> availPacks=LinkGrabberController.getInstance().getPackages();
        for (int k=0; k < availPacks.size(); ++k) {
          LinkGrabberFilePackage pack=availPacks.get(k);
          for (int i=0; i < pack.size(); ++i) {
            if (pack == dest_package) {
              continue;
            }
            DownloadLink packLink=pack.get(i);
            for (            DownloadLink userLink : links) {
              if (packLink.compareTo(userLink) == 0) {
                pack.remove(i);
                --i;
                dest_package.add(packLink);
                ++numLinksMoved;
                if (pack.size() == 0) {
                  --k;
                }
                break;
              }
            }
          }
        }
        if (packageWasAvailable == false && dest_package.size() > 0) {
          LinkGrabberController.getInstance().addPackage(dest_package);
        }
      }
      if (numLinksMoved > 0) {
        response.addContent(numLinksMoved + ""String_Node_Str"" + (packageWasAvailable ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ dest_package_name+ ""String_Node_Str""+ numPackagesDeleted+ ""String_Node_Str"");
      }
 else {
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
    packages.addAll(DownloadController.getInstance().getPackages());
    for (    FilePackage fp : packages) {
      DownloadController.getInstance().removePackage(fp);
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
    ArrayList<FilePackage> removelist=new ArrayList<FilePackage>();
    String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
    packages.addAll(DownloadController.getInstance().getPackages());
    for (int i=0; i < packages.size(); i++) {
      FilePackage fp=packages.get(i);
      for (      String name : packagenames) {
        if (name.equalsIgnoreCase(fp.getName())) {
          DownloadController.getInstance().removePackage(fp);
          removelist.add(fp);
        }
      }
    }
    response.addContent(""String_Node_Str"");
    for (int i=0; i < removelist.size(); i++) {
      if (i != 0)       response.addContent(""String_Node_Str"");
      response.addContent(""String_Node_Str"" + removelist.get(i).getName() + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<String> links=new ArrayList<String>();
    String link=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    for (    String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(link,false),null)) {
      links.add(tlink);
    }
    if (request.getParameters().size() > 0) {
      Iterator<String> it=request.getParameters().keySet().iterator();
      while (it.hasNext()) {
        String help=it.next();
        if (!request.getParameter(help).equals(""String_Node_Str"")) {
          links.add(request.getParameter(help));
        }
      }
    }
    ArrayList<DownloadLink> dls=new ArrayList<DownloadLink>();
    for (    String chklink : links) {
      dls=new DistributeData(chklink,false).findLinks();
      Element element=xml.createElement(""String_Node_Str"");
      xml.getFirstChild().appendChild(element);
      element.setAttribute(""String_Node_Str"",chklink);
      for (      DownloadLink dl : dls) {
        dl.getAvailableStatus();
        LinkGrabberFilePackage pack=LinkGrabberController.getInstance().getGeneratedPackage(dl);
        dl.getFilePackage().setName(pack.getName());
        element.appendChild(addGrabberLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    OptionalPluginWrapper plg=JDUtilities.getOptionalPlugin(""String_Node_Str"");
    if (plg != null && plg.isLoaded() && plg.isEnabled()) {
      for (      File script : JDScriptLauncher.getScripts()) {
        Element script_xml=addScriptName(xml,script);
        script_xml.appendChild(addScriptPath(xml,script));
      }
      response.addContent(JDUtilities.createXmlString(xml));
    }
 else {
      response.addContent(""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    OptionalPluginWrapper plg=JDUtilities.getOptionalPlugin(""String_Node_Str"");
    String scriptname=null;
    scriptname=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    if (plg != null && plg.isLoaded() && plg.isEnabled()) {
      if (JDScriptLauncher.launch(scriptname)) {
        response.addContent(""String_Node_Str"" + scriptname + ""String_Node_Str"");
      }
 else {
        response.addContent(""String_Node_Str"" + scriptname + ""String_Node_Str"");
      }
    }
 else {
      response.addContent(""String_Node_Str"");
    }
  }
 else {
    response.addContent(ERROR_MALFORMED_REQUEST);
  }
}","public void handle(Request request,Response response){
  Document xml=JDUtilities.parseXmlString(""String_Node_Str"",false);
  response.setReturnType(""String_Node_Str"");
  response.setReturnStatus(Response.OK);
  if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(HelpPage.getHTML());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(rc.getVersion());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getJDTitle());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Property config=JDUtilities.getConfiguration();
    response.addContent(""String_Node_Str"");
    if (request.getParameters().containsKey(""String_Node_Str"")) {
      config=SubConfiguration.getConfig(request.getParameters().get(""String_Node_Str"").toUpperCase());
    }
    for (    Entry<String,Object> next : config.getProperties().entrySet()) {
      response.addContent(next.getKey() + ""String_Node_Str"" + next.getValue()+ ""String_Node_Str"");
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    if (SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(Configuration.PARAM_GLOBAL_IP_DISABLE,false)) {
      response.addContent(""String_Node_Str"");
    }
 else {
      response.addContent(IPCheck.getIPAddress());
    }
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Random r=new Random();
    response.addContent(r.nextInt(255) + ""String_Node_Str"" + r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getConnectionManager().getIncommingBandwidthUsage() / 1000);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int value=SubConfiguration.getConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,0);
    response.addContent(value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getDownloadStatus().toString());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      Element fp_xml=addGrabberPackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinks()) {
        fp_xml.appendChild(addGrabberLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    int counter=0;
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      counter+=fp.getDownloadLinks().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean isbusy=false;
    if (LinkGrabberPanel.getLinkGrabber().isRunning())     isbusy=true;
 else     isbusy=false;
    response.addContent(isbusy);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean value=GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true);
    response.addContent(value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean value=GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS_AUTO,true);
    response.addContent(value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      counter+=fp.getDownloadLinkList().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        fp_xml.appendChild(addDownloadLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newrc=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newrc);
    if (newrc != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,newrc);
      JDUtilities.getConfiguration().save();
    }
    response.addContent(""String_Node_Str"" + newrc);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newuseprem=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newuseprem);
    if (newuseprem != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,newuseprem);
      JDUtilities.getConfiguration().save();
    }
    response.addContent(""String_Node_Str"" + newuseprem);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String dir=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_DIRECTORY,dir);
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + dir);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newdllimit=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newdllimit);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newsimdl=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newsimdl);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean value=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + value);
    if (value != GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true)) {
      GUIUtils.getConfig().setProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,value);
      JDUtilities.getConfiguration().save();
    }
    response.addContent(""String_Node_Str"" + value);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean value=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + value);
    if (value != GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS_AUTO,true)) {
      GUIUtils.getConfig().setProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS_AUTO,value);
      JDUtilities.getConfiguration().save();
    }
    response.addContent(""String_Node_Str"" + value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().startDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().pauseDownloads(!DownloadWatchDog.getInstance().isPaused());
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().stopDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().toggleStartStop();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    Reconnecter.doManualReconnect();
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_WEBUPDATE_AUTO_RESTART,true);
      SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_WEBUPDATE_DISABLE,false);
    }
    WebUpdate.doUpdateCheck(true);
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.restartJD(false);
      }
    }
).start();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.getController().exit();
      }
    }
).start();
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<String> links=new ArrayList<String>();
    String link=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    for (    String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(link,false),null)) {
      links.add(tlink);
    }
    if (request.getParameters().size() > 0) {
      Iterator<String> it=request.getParameters().keySet().iterator();
      while (it.hasNext()) {
        String help=it.next();
        if (!request.getParameter(help).equals(""String_Node_Str"")) {
          links.add(request.getParameter(help));
        }
      }
    }
    StringBuilder ret=new StringBuilder();
    char tmp[]=new char[]{'""','\r','\n'};
    for (    String element : links) {
      ret.append('\""');
      ret.append(element.trim());
      ret.append(tmp);
    }
    link=ret.toString();
    new DistributeData(link,false).start();
    response.addContent(""String_Node_Str"" + link + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    if (dlcfilestr.matches(""String_Node_Str"")) {
      String containerFormat=new Regex(dlcfilestr,""String_Node_Str"").getMatch(0);
      File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ containerFormat);
      try {
        Browser.download(container,dlcfilestr);
        JDController.loadContainerFile(container,false,false);
        try {
          Thread.sleep(3000);
        }
 catch (        Exception e) {
          JDLogger.exception(e);
        }
        container.delete();
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
    }
 else {
      JDController.loadContainerFile(new File(dlcfilestr),false,false);
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<DownloadLink> dllinks=new ArrayList<DownloadLink>();
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    boolean savefromGrabber=new Regex(request.getRequestUrl(),""String_Node_Str"").matches();
    if (savefromGrabber) {
      if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
        response.addContent(ERROR_LINK_GRABBER_RUNNING);
      }
 else {
        ArrayList<LinkGrabberFilePackage> lgPackages=new ArrayList<LinkGrabberFilePackage>();
        ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
          lgPackages.addAll(LinkGrabberController.getInstance().getPackages());
          for (int i=0; i < lgPackages.size(); i++) {
            DownloadLink dl=null;
            for (            DownloadLink link : lgPackages.get(i).getDownloadLinks()) {
              dllinks.add(link);
              link.setEnabled(false);
              if (dl == null)               dl=link;
            }
            LinkGrabberPanel.getLinkGrabber().confirmPackage(lgPackages.get(i),null,i);
            packages.add(dl.getFilePackage());
          }
          JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
          for (          FilePackage fp : packages) {
            JDUtilities.getDownloadController().removePackage(fp);
          }
        }
      }
    }
 else {
      dllinks=JDUtilities.getDownloadController().getAllDownloadLinks();
      JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
    String password=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    ArrayList<LinkGrabberFilePackage> packages=LinkGrabberController.getInstance().getPackages();
    ArrayList<LinkGrabberFilePackage> packagesWithPW=new ArrayList<LinkGrabberFilePackage>();
    boolean isErrorMsg=false;
synchronized (LinkGrabberController.ControllerLock) {
      outer:       for (      String packagename : packagenames) {
        for (        LinkGrabberFilePackage pack : packages) {
          if (packagename.equals(pack.getName())) {
            pack.setPassword(password);
            packagesWithPW.add(pack);
            LinkGrabberController.getInstance().throwRefresh();
            continue outer;
          }
        }
        if (!isErrorMsg) {
          response.addContent(""String_Node_Str"" + packagename + ""String_Node_Str"");
          isErrorMsg=true;
        }
      }
    }
    if (packagesWithPW.size() > 0) {
      response.addContent(""String_Node_Str"" + password + ""String_Node_Str"");
      for (int i=0; i < packagesWithPW.size(); i++) {
        if (i != 0)         response.addContent(""String_Node_Str"");
        response.addContent(""String_Node_Str"" + packagesWithPW.get(i).getName() + ""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> srcPackages=new ArrayList<LinkGrabberFilePackage>();
      String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage destPackage=LinkGrabberController.getInstance().getFPwithName(packagenames[0]);
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
        }
 else {
          for (          LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
            for (            String src : packagenames) {
              if ((pack.getName().equals(src)) && (pack != destPackage)) {
                srcPackages.add(pack);
              }
            }
          }
          for (          LinkGrabberFilePackage pack : srcPackages) {
            destPackage.addAll(pack.getDownloadLinks());
            LinkGrabberController.getInstance().removePackage(pack);
          }
          if (srcPackages.size() > 0) {
            if (srcPackages.size() < packagenames.length - 1) {
              response.addContent(""String_Node_Str"");
            }
            response.addContent(""String_Node_Str"" + srcPackages.size() + ""String_Node_Str""+ packagenames[0]+ ""String_Node_Str"");
            for (int i=0; i < srcPackages.size(); ++i) {
              if (i != 0)               response.addContent(""String_Node_Str"");
              response.addContent(""String_Node_Str"" + srcPackages.get(i).getName() + ""String_Node_Str"");
            }
          }
 else {
            response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
          }
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage destPackage=LinkGrabberController.getInstance().getFPwithName(packagenames[0]);
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
        }
 else {
          destPackage.setName(packagenames[1]);
          LinkGrabberController.getInstance().throwRefresh();
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str""+ packagenames[1]+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberPanel.getLinkGrabber().confirmPackage(packages.get(i),null,i);
        }
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> addedlist=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
      String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberFilePackage fp=packages.get(i);
          for (          String name : packagenames) {
            if (name.equalsIgnoreCase(fp.getName())) {
              LinkGrabberPanel.getLinkGrabber().confirmPackage(fp,null,i);
              addedlist.add(fp);
            }
          }
        }
        response.addContent(""String_Node_Str"");
        for (int i=0; i < addedlist.size(); i++) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          response.addContent(""String_Node_Str"" + addedlist.get(i).getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<String> delLinks=new ArrayList<String>();
      ArrayList<String> delPackages=new ArrayList<String>();
      String[] types=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
synchronized (LinkGrabberController.ControllerLock) {
        ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        response.addContent(""String_Node_Str"");
        for (int i=0; i < types.length; ++i) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          if (types[i].equals(LINK_TYPE_OFFLINE) || types[i].equals(LINK_TYPE_AVAIL)) {
            response.addContent(types[i]);
          }
 else {
            response.addContent(""String_Node_Str"" + types[i] + ""String_Node_Str"");
          }
        }
        for (        LinkGrabberFilePackage fp : packages) {
          ArrayList<DownloadLink> links=new ArrayList<DownloadLink>(fp.getDownloadLinks());
          for (          DownloadLink link : links) {
            for (            String type : types) {
              if ((type.equals(LINK_TYPE_OFFLINE) && link.getAvailableStatus().equals(AvailableStatus.FALSE)) || (type.equals(LINK_TYPE_AVAIL) && link.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS))) {
                fp.remove(link);
                delLinks.add(link.getDownloadURL());
              }
            }
          }
          if (fp.getDownloadLinks().size() == 0) {
            delPackages.add(fp.getName());
          }
        }
        response.addContent(""String_Node_Str"" + delLinks.size() + ""String_Node_Str""+ delLinks+ ""String_Node_Str""+ delPackages.size()+ ""String_Node_Str""+ delPackages+ ""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (        LinkGrabberFilePackage fp : packages) {
          LinkGrabberController.getInstance().removePackage(fp);
        }
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<LinkGrabberFilePackage> removelist=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberFilePackage fp=packages.get(i);
          for (          String name : packagenames) {
            if (name.equalsIgnoreCase(fp.getName())) {
              LinkGrabberController.getInstance().removePackage(fp);
              removelist.add(fp);
            }
          }
        }
        response.addContent(""String_Node_Str"");
        for (int i=0; i < removelist.size(); i++) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          response.addContent(""String_Node_Str"" + removelist.get(i).getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      Regex reg=new Regex(request.getRequestUrl(),""String_Node_Str"");
      if (reg.getMatch(0) == null || reg.getMatch(1) == null) {
        response.addContent(ERROR_MALFORMED_REQUEST);
        return;
      }
      String dest_package_name=Encoding.htmlDecode(reg.getMatch(0));
      ArrayList<DownloadLink> links=new ArrayList<DownloadLink>();
      for (      String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(reg.getMatch(1),false),null)) {
        links.addAll(new DistributeData(tlink).findLinks());
      }
      boolean packageWasAvailable=false;
      int numLinksMoved=0;
      int numPackagesDeleted=0;
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage dest_package=null;
        for (        LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
          if (pack.getName().equalsIgnoreCase(dest_package_name)) {
            dest_package=pack;
            packageWasAvailable=true;
          }
        }
        if (dest_package == null) {
          dest_package=new LinkGrabberFilePackage(dest_package_name);
          dest_package.setComment(""String_Node_Str"");
        }
        List<LinkGrabberFilePackage> availPacks=LinkGrabberController.getInstance().getPackages();
        for (int k=0; k < availPacks.size(); ++k) {
          LinkGrabberFilePackage pack=availPacks.get(k);
          for (int i=0; i < pack.size(); ++i) {
            if (pack == dest_package) {
              continue;
            }
            DownloadLink packLink=pack.get(i);
            for (            DownloadLink userLink : links) {
              if (packLink.compareTo(userLink) == 0) {
                pack.remove(i);
                --i;
                dest_package.add(packLink);
                ++numLinksMoved;
                if (pack.size() == 0) {
                  --k;
                }
                break;
              }
            }
          }
        }
        if (packageWasAvailable == false && dest_package.size() > 0) {
          LinkGrabberController.getInstance().addPackage(dest_package);
        }
      }
      if (numLinksMoved > 0) {
        response.addContent(numLinksMoved + ""String_Node_Str"" + (packageWasAvailable ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ dest_package_name+ ""String_Node_Str""+ numPackagesDeleted+ ""String_Node_Str"");
      }
 else {
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
    packages.addAll(DownloadController.getInstance().getPackages());
    for (    FilePackage fp : packages) {
      DownloadController.getInstance().removePackage(fp);
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
    ArrayList<FilePackage> removelist=new ArrayList<FilePackage>();
    String[] packagenames=getHTMLDecoded(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).split(""String_Node_Str""));
    packages.addAll(DownloadController.getInstance().getPackages());
    for (int i=0; i < packages.size(); i++) {
      FilePackage fp=packages.get(i);
      for (      String name : packagenames) {
        if (name.equalsIgnoreCase(fp.getName())) {
          DownloadController.getInstance().removePackage(fp);
          removelist.add(fp);
        }
      }
    }
    response.addContent(""String_Node_Str"");
    for (int i=0; i < removelist.size(); i++) {
      if (i != 0)       response.addContent(""String_Node_Str"");
      response.addContent(""String_Node_Str"" + removelist.get(i).getName() + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<String> links=new ArrayList<String>();
    String link=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    for (    String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(link,false),null)) {
      links.add(tlink);
    }
    if (request.getParameters().size() > 0) {
      Iterator<String> it=request.getParameters().keySet().iterator();
      while (it.hasNext()) {
        String help=it.next();
        if (!request.getParameter(help).equals(""String_Node_Str"")) {
          links.add(request.getParameter(help));
        }
      }
    }
    ArrayList<DownloadLink> dls=new ArrayList<DownloadLink>();
    for (    String chklink : links) {
      dls=new DistributeData(chklink,false).findLinks();
      Element element=xml.createElement(""String_Node_Str"");
      xml.getFirstChild().appendChild(element);
      element.setAttribute(""String_Node_Str"",chklink);
      for (      DownloadLink dl : dls) {
        dl.getAvailableStatus();
        LinkGrabberFilePackage pack=LinkGrabberController.getInstance().getGeneratedPackage(dl);
        dl.getFilePackage().setName(pack.getName());
        element.appendChild(addGrabberLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    OptionalPluginWrapper plg=JDUtilities.getOptionalPlugin(""String_Node_Str"");
    if (plg != null && plg.isLoaded() && plg.isEnabled()) {
      for (      File script : JDScriptLauncher.getScripts()) {
        Element script_xml=addScriptName(xml,script);
        script_xml.appendChild(addScriptPath(xml,script));
      }
      response.addContent(JDUtilities.createXmlString(xml));
    }
 else {
      response.addContent(""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    OptionalPluginWrapper plg=JDUtilities.getOptionalPlugin(""String_Node_Str"");
    String scriptname=null;
    scriptname=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0);
    if (plg != null && plg.isLoaded() && plg.isEnabled()) {
      if (JDScriptLauncher.launch(scriptname)) {
        response.addContent(""String_Node_Str"" + scriptname + ""String_Node_Str"");
      }
 else {
        response.addContent(""String_Node_Str"" + scriptname + ""String_Node_Str"");
      }
    }
 else {
      response.addContent(""String_Node_Str"");
    }
  }
 else {
    response.addContent(ERROR_MALFORMED_REQUEST);
  }
}"
20884,"@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  String fileid=new Regex(parameter.getDownloadURL(),""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + fileid);
  String status=br.getRegex(""String_Node_Str"").getMatch(0);
  if (status == null || !status.equals(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filename.matches(""String_Node_Str"") || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setFinalFileName(filename.trim());
  if (filesize != null)   parameter.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  String fileid=new Regex(parameter.getDownloadURL(),""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + fileid);
  String pageMoved=br.getRegex(""String_Node_Str"").getMatch(0);
  if (pageMoved != null) {
    logger.info(""String_Node_Str"" + fileid + ""String_Node_Str"");
    String newFileid=new Regex(pageMoved,""String_Node_Str"").getMatch(0);
    parameter.setUrlDownload(""String_Node_Str"" + newFileid + ""String_Node_Str"");
    br.getPage(pageMoved);
  }
  String status=br.getRegex(""String_Node_Str"").getMatch(0);
  if (status == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  if (!status.equals(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filename.matches(""String_Node_Str"") || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setFinalFileName(filename.trim());
  if (filesize != null)   parameter.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
20885,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  String dllink=null;
  for (int i=0; i <= 3; i++) {
    br.setFollowRedirects(true);
    if (!br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    String captchaUrl=""String_Node_Str"";
    String code=getCaptchaCode(captchaUrl,downloadLink);
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + code + ""String_Node_Str"");
    if (!br.getURL().contains(""String_Node_Str""))     continue;
    break;
  }
  if (!br.getURL().contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=60;
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    if (Integer.parseInt(ttt) < 100)     tt=Integer.parseInt(ttt);
  }
  sleep(tt * 1001,downloadLink);
  dllink=""String_Node_Str"" + dllink;
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,0);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  String dllink=null;
  for (int i=0; i <= 3; i++) {
    br.setFollowRedirects(true);
    if (!br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    String captchaUrl=""String_Node_Str"";
    String code=getCaptchaCode(captchaUrl,downloadLink);
    br.postPage(downloadLink.getDownloadURL(),""String_Node_Str"" + code + ""String_Node_Str"");
    if (!br.getURL().contains(""String_Node_Str""))     continue;
    break;
  }
  if (!br.getURL().contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=60;
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    if (Integer.parseInt(ttt) < 100)     tt=Integer.parseInt(ttt);
  }
  sleep(tt * 1001,downloadLink);
  dllink=""String_Node_Str"" + dllink;
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,0);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20886,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(1);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(1);
  if (filename == null || filesize == null || filename.matches(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  link.setName(filename.trim());
  filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
  filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
  filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
  filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  filesize=filesize + ""String_Node_Str"";
  link.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(1);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(1);
  if (filename == null || filesize == null || filename.matches(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  link.setName(filename.trim());
  filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
  filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
  filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
  filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
  filesize=filesize + ""String_Node_Str"";
  link.setDownloadSize(Regex.getSize(filesize));
  if (br.containsHTML(""String_Node_Str""))   link.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
  return AvailableStatus.TRUE;
}"
20887,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  String passCode=null;
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=br.getFormBySubmitvalue(""String_Node_Str"");
  if (freeform == null) {
    freeform=br.getFormBySubmitvalue(""String_Node_Str"");
    if (freeform == null) {
      freeform=br.getFormbyKey(""String_Node_Str"");
    }
  }
  if (freeform != null) {
    freeform.remove(""String_Node_Str"");
    br.submitForm(freeform);
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  boolean password=false;
  boolean recaptcha=false;
  if (brbefore.contains(passwordText)) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password) {
      passCode=handlePassword(passCode,rc.getForm(),downloadLink);
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (!recaptcha) {
    if (password) {
      passCode=handlePassword(passCode,DLForm,downloadLink);
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  String dllink=br.getRedirectLocation();
  if (dllink == null || error) {
    if (dllink == null) {
      br.followConnection();
      logger.info(""String_Node_Str"");
      doSomething();
      checkErrors(downloadLink,true,passCode);
      if (dllink == null) {
        dllink=new Regex(brbefore,""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=new Regex(brbefore,""String_Node_Str"").getMatch(1);
          if (dllink == null) {
            dllink=new Regex(brbefore,""String_Node_Str"").getMatch(0);
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  String passCode=null;
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=br.getFormBySubmitvalue(""String_Node_Str"");
  if (freeform == null) {
    freeform=br.getFormBySubmitvalue(""String_Node_Str"");
    if (freeform == null) {
      freeform=br.getFormbyKey(""String_Node_Str"");
    }
  }
  if (freeform != null) {
    freeform.remove(""String_Node_Str"");
    br.submitForm(freeform);
    doSomething();
  }
  checkErrors(downloadLink,false,passCode);
  String md5hash=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=new Regex(brbefore,""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  boolean password=false;
  boolean recaptcha=false;
  if (brbefore.contains(passwordText)) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (brbefore.contains(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password) {
      passCode=handlePassword(passCode,rc.getForm(),downloadLink);
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (!recaptcha) {
    if (password) {
      passCode=handlePassword(passCode,DLForm,downloadLink);
    }
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  String dllink=br.getRedirectLocation();
  if (dllink == null || dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    if (dllink == null) {
      br.followConnection();
      logger.info(""String_Node_Str"");
      doSomething();
      checkErrors(downloadLink,true,passCode);
      if (dllink == null) {
        dllink=new Regex(brbefore,""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=new Regex(brbefore,""String_Node_Str"").getMatch(1);
          if (dllink == null) {
            dllink=new Regex(brbefore,""String_Node_Str"").getMatch(0);
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20888,"@Override public void handlePremium(DownloadLink link,Account account) throws Exception {
  String passCode=null;
  requestFileInformation(link);
  login(account);
  br.setCookie(COOKIE_HOST,""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(false);
  br.getPage(link.getDownloadURL());
  if (nopremium) {
    doFree(link);
  }
 else {
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      doSomething();
      Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (DLForm == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      if (brbefore.contains(passwordText)) {
        passCode=handlePassword(passCode,DLForm,link);
      }
      br.submitForm(DLForm);
      dllink=br.getRedirectLocation();
      if (dllink == null) {
        checkErrors(link,true,passCode);
        if (dllink == null) {
          dllink=new Regex(brbefore,""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=new Regex(brbefore,""String_Node_Str"").getMatch(1);
            if (dllink == null) {
              dllink=new Regex(brbefore,""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,0);
    if (passCode != null) {
      link.setProperty(""String_Node_Str"",passCode);
    }
    boolean error=false;
    try {
      if (dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
        error=true;
      }
    }
 catch (    Exception e) {
      error=true;
    }
    if (error == true) {
      logger.warning(""String_Node_Str"");
      br.followConnection();
      checkServerErrors();
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    dl.startDownload();
  }
}","@Override public void handlePremium(DownloadLink link,Account account) throws Exception {
  String passCode=null;
  requestFileInformation(link);
  login(account);
  br.setCookie(COOKIE_HOST,""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(false);
  br.getPage(link.getDownloadURL());
  if (nopremium) {
    doFree(link);
  }
 else {
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      doSomething();
      Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (DLForm == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      if (brbefore.contains(passwordText)) {
        passCode=handlePassword(passCode,DLForm,link);
      }
      br.submitForm(DLForm);
      dllink=br.getRedirectLocation();
      if (dllink == null) {
        checkErrors(link,true,passCode);
        if (dllink == null) {
          dllink=new Regex(brbefore,""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=new Regex(brbefore,""String_Node_Str"").getMatch(1);
            if (dllink == null) {
              dllink=new Regex(brbefore,""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,0);
    if (passCode != null) {
      link.setProperty(""String_Node_Str"",passCode);
    }
    if (dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      br.followConnection();
      checkServerErrors();
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    dl.startDownload();
  }
}"
20889,"@SuppressWarnings(""String_Node_Str"") public void actionPerformed(final ActionEvent e){
  new Thread(){
    public void run(){
      this.setName(""String_Node_Str"");
      if (e.getSource() == DownloadLinksPanel.this.asyncUpdate) {
        fireTableTask();
        return;
      }
      ArrayList<FilePackage> selectedPackages=new ArrayList<FilePackage>();
      ArrayList<DownloadLink> selectedLinks=new ArrayList<DownloadLink>();
      HashMap<String,Object> prop=new HashMap<String,Object>();
      HashSet<String> List=new HashSet<String>();
      StringBuilder build=new StringBuilder();
      String string=null;
      Object obj=null;
      FilePackage fp=null;
      DownloadLink link=null;
      File folder=null;
      int col=0;
      if (e.getSource() instanceof JMenuItem) {
switch (e.getID()) {
case TableAction.EDIT_NAME:
case TableAction.EDIT_DIR:
          selectedPackages=(ArrayList<FilePackage>)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
        break;
case TableAction.SORT:
      col=(Integer)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
    selectedLinks=new ArrayList<DownloadLink>(DownloadLinksPanel.this.internalTable.getSelectedDownloadLinks());
  selectedPackages=new ArrayList<FilePackage>(DownloadLinksPanel.this.internalTable.getSelectedFilePackages());
break;
case TableAction.DOWNLOAD_PRIO:
case TableAction.DE_ACTIVATE:
prop=(HashMap<String,Object>)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selectedLinks=(ArrayList<DownloadLink>)prop.get(""String_Node_Str"");
break;
case TableAction.DELETE:
case TableAction.FORCE_DOWNLOAD:
case TableAction.DELETEFILE:
case TableAction.SET_PW:
case TableAction.NEW_PACKAGE:
case TableAction.CHECK:
case TableAction.DOWNLOAD_COPY_URL:
case TableAction.DOWNLOAD_COPY_PASSWORD:
case TableAction.DOWNLOAD_RESET:
case TableAction.DOWNLOAD_DLC:
case TableAction.DOWNLOAD_RESUME:
selectedLinks=(ArrayList<DownloadLink>)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case TableAction.DOWNLOAD_DIR:
folder=(File)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case TableAction.DOWNLOAD_BROWSE_LINK:
link=(DownloadLink)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case TableAction.STOP_MARK:
obj=((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
 else if (e.getSource() instanceof TableAction) {
switch (e.getID()) {
case TableAction.SORT_ALL:
col=(Integer)((TableAction)e.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
case TableAction.DELETE:
selectedLinks=(ArrayList<DownloadLink>)((TableAction)e.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
switch (e.getID()) {
case TableAction.FORCE_DOWNLOAD:
{
DownloadWatchDog.getInstance().forceDownload(selectedLinks);
break;
}
case TableAction.STOP_MARK:
DownloadWatchDog.getInstance().toggleStopMark(obj);
break;
case TableAction.EDIT_DIR:
final ArrayList<FilePackage> selected_packages2=new ArrayList<FilePackage>(selectedPackages);
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser();
fc.setApproveButtonText(JDL.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
fc.setCurrentDirectory(selected_packages2.get(0).getDownloadDirectory() != null ? new File(selected_packages2.get(0).getDownloadDirectory()) : JDUtilities.getResourceFile(""String_Node_Str""));
if (fc.showOpenDialog(DownloadLinksPanel.this) == JDFileChooser.APPROVE_OPTION) {
File ret=fc.getSelectedFile();
if (ret != null) {
for (int i=0; i < selected_packages2.size(); i++) {
selected_packages2.get(i).setDownloadDirectory(ret.getAbsolutePath());
}
}
}
return null;
}
}
.start();
break;
case TableAction.EDIT_NAME:
String name=UserIO.getInstance().requestInputDialog(0,JDL.L(""String_Node_Str"",""String_Node_Str""),selectedPackages.get(0).getName());
if (name != null) {
for (int i=0; i < selectedPackages.size(); i++) {
selectedPackages.get(i).setName(name);
}
}
break;
case TableAction.DOWNLOAD_RESUME:
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).getLinkStatus().setStatus(LinkStatus.TODO);
selectedLinks.get(i).getLinkStatus().resetWaitTime();
selectedLinks.get(i).getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
}
Set<String> hosts=DownloadLink.getHosterList(selectedLinks);
for (String host : hosts) {
DownloadWatchDog.getInstance().resetIPBlockWaittime(host);
DownloadWatchDog.getInstance().resetTempUnavailWaittime(host);
}
break;
case TableAction.DOWNLOAD_BROWSE_LINK:
if (link.getLinkType() == DownloadLink.LINKTYPE_NORMAL) {
try {
JLink.openURL(link.getBrowserUrl());
}
 catch (Exception e1) {
JDLogger.exception(e1);
}
}
break;
case TableAction.DOWNLOAD_DIR:
JDUtilities.openExplorer(folder);
break;
case TableAction.DOWNLOAD_DLC:
GuiRunnable<File> temp=new GuiRunnable<File>(){
public File runSave(){
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showSaveDialog(SwingGui.getInstance().getMainFrame()) == JDFileChooser.APPROVE_OPTION) return fc.getSelectedFile();
return null;
}
}
;
File ret=temp.getReturnValue();
if (ret == null) return;
if (JDIO.getFileExtension(ret) == null || !JDIO.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
JDUtilities.getController().saveDLC(ret,selectedLinks);
break;
case TableAction.DOWNLOAD_RESET:
final ArrayList<DownloadLink> links=selectedLinks;
new Thread(){
public void run(){
if (JDFlags.hasSomeFlags(UserIO.getInstance().requestConfirmDialog(0,JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDL.LF(""String_Node_Str"",""String_Node_Str"",links.size())+ ""String_Node_Str""),UserIO.RETURN_OK,UserIO.RETURN_DONT_SHOW_AGAIN)) {
for (int i=0; i < links.size(); i++) {
links.get(i).reset();
}
}
}
}
.start();
break;
case TableAction.DOWNLOAD_COPY_PASSWORD:
string=getPasswordSelectedLinks(selectedLinks);
ClipboardHandler.getClipboard().copyTextToClipboard(string);
break;
case TableAction.DOWNLOAD_COPY_URL:
for (int i=0; i < selectedLinks.size(); i++) {
if (selectedLinks.get(i).getLinkType() == DownloadLink.LINKTYPE_NORMAL) {
String url=selectedLinks.get(i).getBrowserUrl();
if (!List.contains(url)) {
if (List.size() > 0) build.append(""String_Node_Str"");
List.add(url);
build.append(url);
}
}
}
string=build.toString();
ClipboardHandler.getClipboard().copyTextToClipboard(string);
break;
case TableAction.DOWNLOAD_PRIO:
int prio=(Integer)prop.get(""String_Node_Str"");
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setPriority(prio);
}
DownloadController.getInstance().fireDownloadLinkUpdate(selectedLinks);
break;
case TableAction.CHECK:
LinkCheck.getLinkChecker().checkLinks(selectedLinks,true);
LinkCheck.getLinkChecker().getBroadcaster().addListener(DownloadLinksPanel.this);
break;
case TableAction.SORT_ALL:
if (DownloadController.getInstance().size() == 1) {
DownloadController.getInstance().getPackages().get(0).sort(col);
}
 else sort(col);
break;
case TableAction.SORT:
if (selectedLinks.size() > 0) {
selectedLinks.get(0).getFilePackage().sort(col);
break;
}
for (int i=0; i < selectedPackages.size(); i++) {
selectedPackages.get(i).sort(col);
}
break;
case TableAction.DE_ACTIVATE:
Boolean b=(Boolean)prop.get(""String_Node_Str"");
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setEnabled(b);
}
JDUtilities.getDownloadController().fireStructureUpdate();
break;
case TableAction.NEW_PACKAGE:
fp=selectedLinks.get(0).getFilePackage();
string=UserIO.getInstance().requestInputDialog(0,JDL.L(""String_Node_Str"",""String_Node_Str""),fp.getName());
if (string != null) {
FilePackage nfp=FilePackage.getInstance();
nfp.setName(string);
nfp.setDownloadDirectory(fp.getDownloadDirectory());
nfp.setExtractAfterDownload(fp.isExtractAfterDownload());
nfp.setComment(fp.getComment());
for (DownloadLink link2 : selectedLinks) {
FilePackage fp2=link2.getFilePackage();
link2.addSourcePluginPassword(fp2.getPassword());
}
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setFilePackage(nfp);
}
if (GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
JDUtilities.getDownloadController().addPackageAt(nfp,0,0);
}
 else {
JDUtilities.getDownloadController().addPackage(nfp);
}
}
break;
case TableAction.SET_PW:
String pw=UserIO.getInstance().requestInputDialog(0,JDL.L(""String_Node_Str"",""String_Node_Str""),null);
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setProperty(""String_Node_Str"",pw);
}
break;
case TableAction.DELETE:
{
if (JDFlags.hasSomeFlags(UserIO.getInstance().requestConfirmDialog(UserIO.DONT_SHOW_AGAIN | UserIO.DONT_SHOW_AGAIN_IGNORES_CANCEL,JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDL.LF(""String_Node_Str"",""String_Node_Str"",selectedLinks.size())+ ""String_Node_Str""),UserIO.RETURN_OK,UserIO.RETURN_DONT_SHOW_AGAIN)) {
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setEnabled(false);
}
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).deleteFile(true,false);
selectedLinks.get(i).getFilePackage().remove(selectedLinks.get(i));
}
}
return;
}
case TableAction.DELETEFILE:
{
int counter=0;
for (DownloadLink tmp : selectedLinks) {
if (tmp.existsFile()) counter++;
}
if (JDFlags.hasSomeFlags(UserIO.getInstance().requestConfirmDialog(UserIO.DONT_SHOW_AGAIN | UserIO.DONT_SHOW_AGAIN_IGNORES_CANCEL,JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDL.LF(""String_Node_Str"",""String_Node_Str"",selectedLinks.size())+ ""String_Node_Str""+ ""String_Node_Str""+ JDL.LF(""String_Node_Str"",""String_Node_Str"",counter)+ ""String_Node_Str""),UserIO.RETURN_OK,UserIO.RETURN_DONT_SHOW_AGAIN)) {
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setEnabled(false);
}
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).deleteFile(true,true);
selectedLinks.get(i).getFilePackage().remove(selectedLinks.get(i));
}
}
return;
}
}
}
}
.start();
}","@SuppressWarnings(""String_Node_Str"") public void actionPerformed(final ActionEvent e){
  new Thread(){
    public void run(){
      this.setName(""String_Node_Str"");
      if (e.getSource() == DownloadLinksPanel.this.asyncUpdate) {
        fireTableTask();
        return;
      }
      ArrayList<FilePackage> selectedPackages=new ArrayList<FilePackage>();
      ArrayList<DownloadLink> selectedLinks=new ArrayList<DownloadLink>();
      HashMap<String,Object> prop=new HashMap<String,Object>();
      HashSet<String> List=new HashSet<String>();
      StringBuilder build=new StringBuilder();
      String string=null;
      Object obj=null;
      FilePackage fp=null;
      DownloadLink link=null;
      File folder=null;
      int col=0;
      if (e.getSource() instanceof JMenuItem) {
switch (e.getID()) {
case TableAction.EDIT_NAME:
case TableAction.EDIT_DIR:
          selectedPackages=(ArrayList<FilePackage>)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
        break;
case TableAction.SORT:
      col=(Integer)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
    selectedLinks=new ArrayList<DownloadLink>(DownloadLinksPanel.this.internalTable.getSelectedDownloadLinks());
  selectedPackages=new ArrayList<FilePackage>(DownloadLinksPanel.this.internalTable.getSelectedFilePackages());
break;
case TableAction.DOWNLOAD_PRIO:
case TableAction.DE_ACTIVATE:
prop=(HashMap<String,Object>)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
selectedLinks=(ArrayList<DownloadLink>)prop.get(""String_Node_Str"");
break;
case TableAction.DELETE:
case TableAction.FORCE_DOWNLOAD:
case TableAction.DELETEFILE:
case TableAction.SET_PW:
case TableAction.NEW_PACKAGE:
case TableAction.CHECK:
case TableAction.DOWNLOAD_COPY_URL:
case TableAction.DOWNLOAD_COPY_PASSWORD:
case TableAction.DOWNLOAD_RESET:
case TableAction.DOWNLOAD_DLC:
case TableAction.DOWNLOAD_RESUME:
selectedLinks=(ArrayList<DownloadLink>)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case TableAction.DOWNLOAD_DIR:
folder=(File)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case TableAction.DOWNLOAD_BROWSE_LINK:
link=(DownloadLink)((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
case TableAction.STOP_MARK:
obj=((TableAction)((JMenuItem)e.getSource()).getAction()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
 else if (e.getSource() instanceof TableAction) {
switch (e.getID()) {
case TableAction.SORT_ALL:
col=(Integer)((TableAction)e.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
case TableAction.DELETE:
selectedLinks=(ArrayList<DownloadLink>)((TableAction)e.getSource()).getProperty().getProperty(""String_Node_Str"");
break;
}
}
switch (e.getID()) {
case TableAction.FORCE_DOWNLOAD:
{
DownloadWatchDog.getInstance().forceDownload(selectedLinks);
break;
}
case TableAction.STOP_MARK:
DownloadWatchDog.getInstance().toggleStopMark(obj);
break;
case TableAction.EDIT_DIR:
final ArrayList<FilePackage> selected_packages2=new ArrayList<FilePackage>(selectedPackages);
new GuiRunnable<Object>(){
public Object runSave(){
JDFileChooser fc=new JDFileChooser();
fc.setApproveButtonText(JDL.L(""String_Node_Str"",""String_Node_Str""));
fc.setFileSelectionMode(JDFileChooser.DIRECTORIES_ONLY);
fc.setCurrentDirectory(selected_packages2.get(0).getDownloadDirectory() != null ? new File(selected_packages2.get(0).getDownloadDirectory()) : JDUtilities.getResourceFile(""String_Node_Str""));
if (fc.showOpenDialog(DownloadLinksPanel.this) == JDFileChooser.APPROVE_OPTION) {
File ret=fc.getSelectedFile();
if (ret != null) {
for (int i=0; i < selected_packages2.size(); i++) {
selected_packages2.get(i).setDownloadDirectory(ret.getAbsolutePath());
}
}
}
return null;
}
}
.start();
break;
case TableAction.EDIT_NAME:
String name=UserIO.getInstance().requestInputDialog(0,JDL.L(""String_Node_Str"",""String_Node_Str""),selectedPackages.get(0).getName());
if (name != null) {
for (int i=0; i < selectedPackages.size(); i++) {
selectedPackages.get(i).setName(name);
}
}
break;
case TableAction.DOWNLOAD_RESUME:
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).getLinkStatus().setStatus(LinkStatus.TODO);
selectedLinks.get(i).getLinkStatus().resetWaitTime();
selectedLinks.get(i).getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
}
Set<String> hosts=DownloadLink.getHosterList(selectedLinks);
for (String host : hosts) {
DownloadWatchDog.getInstance().resetIPBlockWaittime(host);
DownloadWatchDog.getInstance().resetTempUnavailWaittime(host);
}
break;
case TableAction.DOWNLOAD_BROWSE_LINK:
if (link.getLinkType() == DownloadLink.LINKTYPE_NORMAL) {
try {
JLink.openURL(link.getBrowserUrl());
}
 catch (Exception e1) {
JDLogger.exception(e1);
}
}
break;
case TableAction.DOWNLOAD_DIR:
JDUtilities.openExplorer(folder);
break;
case TableAction.DOWNLOAD_DLC:
GuiRunnable<File> temp=new GuiRunnable<File>(){
public File runSave(){
JDFileChooser fc=new JDFileChooser(""String_Node_Str"");
fc.setFileFilter(new JDFileFilter(null,""String_Node_Str"",true));
if (fc.showSaveDialog(SwingGui.getInstance().getMainFrame()) == JDFileChooser.APPROVE_OPTION) return fc.getSelectedFile();
return null;
}
}
;
File ret=temp.getReturnValue();
if (ret == null) return;
if (JDIO.getFileExtension(ret) == null || !JDIO.getFileExtension(ret).equalsIgnoreCase(""String_Node_Str"")) {
ret=new File(ret.getAbsolutePath() + ""String_Node_Str"");
}
JDUtilities.getController().saveDLC(ret,selectedLinks);
break;
case TableAction.DOWNLOAD_RESET:
final ArrayList<DownloadLink> links=selectedLinks;
new Thread(){
public void run(){
if (JDFlags.hasSomeFlags(UserIO.getInstance().requestConfirmDialog(0,JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDL.LF(""String_Node_Str"",""String_Node_Str"",links.size())+ ""String_Node_Str""),UserIO.RETURN_OK,UserIO.RETURN_DONT_SHOW_AGAIN)) {
for (int i=0; i < links.size(); i++) {
links.get(i).reset();
}
}
}
}
.start();
break;
case TableAction.DOWNLOAD_COPY_PASSWORD:
string=getPasswordSelectedLinks(selectedLinks);
ClipboardHandler.getClipboard().copyTextToClipboard(string);
break;
case TableAction.DOWNLOAD_COPY_URL:
for (int i=0; i < selectedLinks.size(); i++) {
if (selectedLinks.get(i).getLinkType() == DownloadLink.LINKTYPE_NORMAL) {
String url=selectedLinks.get(i).getBrowserUrl();
if (!List.contains(url)) {
if (List.size() > 0) build.append(""String_Node_Str"");
List.add(url);
build.append(url);
}
}
}
string=build.toString();
ClipboardHandler.getClipboard().copyTextToClipboard(string);
break;
case TableAction.DOWNLOAD_PRIO:
int prio=(Integer)prop.get(""String_Node_Str"");
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setPriority(prio);
}
DownloadController.getInstance().fireDownloadLinkUpdate(selectedLinks);
break;
case TableAction.CHECK:
LinkCheck.getLinkChecker().checkLinks(selectedLinks,true);
LinkCheck.getLinkChecker().getBroadcaster().addListener(DownloadLinksPanel.this);
break;
case TableAction.SORT_ALL:
if (DownloadController.getInstance().size() == 1) {
DownloadController.getInstance().getPackages().get(0).sort(col);
}
 else sort(col);
break;
case TableAction.SORT:
if (selectedLinks.size() > 0) {
selectedLinks.get(0).getFilePackage().sort(col);
break;
}
for (int i=0; i < selectedPackages.size(); i++) {
selectedPackages.get(i).sort(col);
}
break;
case TableAction.DE_ACTIVATE:
Boolean b=(Boolean)prop.get(""String_Node_Str"");
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setEnabled(b);
}
JDUtilities.getDownloadController().fireStructureUpdate();
break;
case TableAction.NEW_PACKAGE:
fp=selectedLinks.get(0).getFilePackage();
string=UserIO.getInstance().requestInputDialog(0,JDL.L(""String_Node_Str"",""String_Node_Str""),fp.getName());
if (string != null) {
FilePackage nfp=FilePackage.getInstance();
nfp.setName(string);
nfp.setDownloadDirectory(fp.getDownloadDirectory());
nfp.setExtractAfterDownload(fp.isExtractAfterDownload());
nfp.setComment(fp.getComment());
for (DownloadLink link2 : selectedLinks) {
FilePackage fp2=link2.getFilePackage();
link2.addSourcePluginPassword(fp2.getPassword());
}
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setFilePackage(nfp);
}
if (GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
JDUtilities.getDownloadController().addPackageAt(nfp,0,0);
}
 else {
JDUtilities.getDownloadController().addPackage(nfp);
}
}
break;
case TableAction.SET_PW:
String pw=UserIO.getInstance().requestInputDialog(0,JDL.L(""String_Node_Str"",""String_Node_Str""),null);
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setProperty(""String_Node_Str"",pw);
}
break;
case TableAction.DELETE:
{
if (selectedLinks.size() > 0 && JDFlags.hasSomeFlags(UserIO.getInstance().requestConfirmDialog(UserIO.DONT_SHOW_AGAIN | UserIO.DONT_SHOW_AGAIN_IGNORES_CANCEL,JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDL.LF(""String_Node_Str"",""String_Node_Str"",selectedLinks.size())+ ""String_Node_Str""),UserIO.RETURN_OK,UserIO.RETURN_DONT_SHOW_AGAIN)) {
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setEnabled(false);
}
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).deleteFile(true,false);
selectedLinks.get(i).getFilePackage().remove(selectedLinks.get(i));
}
}
return;
}
case TableAction.DELETEFILE:
{
if (selectedLinks.size() > 0) {
int counter=0;
for (DownloadLink tmp : selectedLinks) {
if (tmp.existsFile()) counter++;
}
if (JDFlags.hasSomeFlags(UserIO.getInstance().requestConfirmDialog(UserIO.DONT_SHOW_AGAIN | UserIO.DONT_SHOW_AGAIN_IGNORES_CANCEL,JDL.L(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + JDL.LF(""String_Node_Str"",""String_Node_Str"",selectedLinks.size())+ ""String_Node_Str""+ ""String_Node_Str""+ JDL.LF(""String_Node_Str"",""String_Node_Str"",counter)+ ""String_Node_Str""),UserIO.RETURN_OK,UserIO.RETURN_DONT_SHOW_AGAIN)) {
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).setEnabled(false);
}
for (int i=0; i < selectedLinks.size(); i++) {
selectedLinks.get(i).deleteFile(true,true);
selectedLinks.get(i).getFilePackage().remove(selectedLinks.get(i));
}
}
}
return;
}
}
}
}
.start();
}"
20890,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  possibleconverts=new HashMap<ConversionMode,ArrayList<Info>>();
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString().replace(""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(true);
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  if (parameter.contains(""String_Node_Str"")) {
    parameter=parameter.replace(""String_Node_Str"",""String_Node_Str"");
  }
  if (parameter.contains(""String_Node_Str"")) {
    br.getPage(parameter);
    addVideosCurrentPage(decryptedLinks);
    if (!parameter.contains(""String_Node_Str"")) {
      String[] pages=br.getRegex(""String_Node_Str"").getColumn(1);
      for (int i=0; i < pages.length - 1; i++) {
        br.getPage(pages[i]);
        addVideosCurrentPage(decryptedLinks);
      }
    }
  }
 else {
    boolean prem=false;
    ArrayList<Account> accounts=AccountController.getInstance().getAllAccounts(""String_Node_Str"");
    if (accounts != null && accounts.size() != 0)     prem=login(accounts.get(0));
    try {
      if (StreamingShareLink.matcher(parameter).matches()) {
        String[] info=new Regex(parameter,StreamingShareLink).getMatches()[0];
        for (        String debug : info) {
          logger.info(debug);
        }
        DownloadLink thislink=createDownloadlink(info[1]);
        thislink.setBrowserUrl(info[2]);
        thislink.setFinalFileName(info[0]);
        thislink.setSourcePluginComment(""String_Node_Str"" + (ConversionMode.valueOf(info[3])).getText());
        thislink.setProperty(""String_Node_Str"",info[3]);
        decryptedLinks.add(thislink);
        return decryptedLinks;
      }
      boolean oldLayout=false;
      HashMap<Integer,String> linksFound=getLinks(parameter,prem,this.br);
      if (linksFound != null)       oldLayout=true;
      if (linksFound == null)       linksFound=getLinksNew(parameter,prem,this.br);
      if ((linksFound == null || linksFound.size() == 0) && br.containsHTML(""String_Node_Str""))       throw new DecrypterException(DecrypterException.ACCOUNT);
      if (linksFound == null || linksFound.size() == 0)       throw new DecrypterException(""String_Node_Str"");
      String name=Encoding.htmlDecode(br.getRegex(YT_FILENAME).getMatch(0).trim());
      HashMap<Integer,String> links=new HashMap<Integer,String>();
      if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEO3GP) && linksFound.keySet().contains(13)) {
        links.put(13,linksFound.get(13));
      }
 else       if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEOMP4) && (linksFound.keySet().contains(18) || linksFound.keySet().contains(22) || linksFound.keySet().contains(34)|| linksFound.keySet().contains(35)|| linksFound.keySet().contains(37))) {
        Integer mp4[]=new Integer[]{18,22,34,35,37};
        for (        Integer f : mp4) {
          if (linksFound.containsKey(f)) {
            links.put(f,linksFound.get(f));
          }
        }
      }
 else {
        links=linksFound;
      }
      for (      Integer format : links.keySet()) {
        String link=links.get(format);
        String dlLink;
        if (format == 0) {
          dlLink=link;
        }
 else {
          dlLink=link + (oldLayout == true ? ""String_Node_Str"" + format : ""String_Node_Str"");
        }
switch (format) {
case 18:
          if (br.openGetConnection(dlLink).getResponseCode() == 200) {
            addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
            br.getHttpConnection().disconnect();
          }
        break;
case 22:
      if (br.openGetConnection(dlLink).getResponseCode() == 200) {
        addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
        br.getHttpConnection().disconnect();
      }
    break;
case 34:
  if (br.openGetConnection(dlLink).getResponseCode() == 200) {
    addtopos(ConversionMode.VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
    br.getHttpConnection().disconnect();
  }
break;
case 35:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
break;
case 37:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEOMP4)) break;
break;
case 13:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEO3GP,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
break;
default :
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
addtopos(ConversionMode.AUDIOMP3,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
addtopos(ConversionMode.AUDIOMP3_AND_VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
}
}
ConversionMode convertTo=Plugin.showDisplayDialog(new ArrayList<ConversionMode>(possibleconverts.keySet()),name,param);
for (Info info : possibleconverts.get(convertTo)) {
DownloadLink thislink=createDownloadlink(""String_Node_Str"" + info.link);
thislink.setBrowserUrl(parameter);
thislink.setFinalFileName(name + info.desc + ""String_Node_Str"");
thislink.setSourcePluginComment(""String_Node_Str"" + convertTo.getText());
thislink.setProperty(""String_Node_Str"",Long.valueOf(info.size));
thislink.setProperty(""String_Node_Str"",name + info.desc + ""String_Node_Str"");
thislink.setProperty(""String_Node_Str"",convertTo.name());
thislink.setProperty(""String_Node_Str"",parameter);
thislink.setProperty(""String_Node_Str"",true);
thislink.setProperty(""String_Node_Str"",info.fmt);
decryptedLinks.add(thislink);
}
}
 catch (IOException e) {
br.getHttpConnection().disconnect();
logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
return null;
}
}
return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  possibleconverts=new HashMap<ConversionMode,ArrayList<Info>>();
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString().replace(""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(true);
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  if (parameter.contains(""String_Node_Str"")) {
    parameter=parameter.replace(""String_Node_Str"",""String_Node_Str"");
  }
  if (parameter.contains(""String_Node_Str"")) {
    br.getPage(parameter);
    addVideosCurrentPage(decryptedLinks);
    if (!parameter.contains(""String_Node_Str"")) {
      String[] pages=br.getRegex(""String_Node_Str"").getColumn(1);
      for (int i=0; i < pages.length - 1; i++) {
        br.getPage(pages[i]);
        addVideosCurrentPage(decryptedLinks);
      }
    }
  }
 else {
    boolean prem=false;
    ArrayList<Account> accounts=AccountController.getInstance().getAllAccounts(""String_Node_Str"");
    if (accounts != null && accounts.size() != 0)     prem=login(accounts.get(0));
    try {
      if (StreamingShareLink.matcher(parameter).matches()) {
        String[] info=new Regex(parameter,StreamingShareLink).getMatches()[0];
        for (        String debug : info) {
          logger.info(debug);
        }
        DownloadLink thislink=createDownloadlink(info[1]);
        thislink.setBrowserUrl(info[2]);
        thislink.setFinalFileName(info[0]);
        thislink.setSourcePluginComment(""String_Node_Str"" + (ConversionMode.valueOf(info[3])).getText());
        thislink.setProperty(""String_Node_Str"",info[3]);
        decryptedLinks.add(thislink);
        return decryptedLinks;
      }
      boolean oldLayout=false;
      HashMap<Integer,String> linksFound=getLinks(parameter,prem,this.br);
      if (linksFound != null)       oldLayout=true;
      if (linksFound == null)       linksFound=getLinksNew(parameter,prem,this.br);
      if ((linksFound == null || linksFound.size() == 0) && br.containsHTML(""String_Node_Str""))       throw new DecrypterException(DecrypterException.ACCOUNT);
      if (linksFound == null || linksFound.size() == 0)       throw new DecrypterException(""String_Node_Str"");
      String name=Encoding.htmlDecode(br.getRegex(YT_FILENAME).getMatch(0).trim());
      HashMap<Integer,String> links=new HashMap<Integer,String>();
      if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEO3GP) && linksFound.keySet().contains(13)) {
        links.put(13,linksFound.get(13));
      }
 else       if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEOMP4) && (linksFound.keySet().contains(18) || linksFound.keySet().contains(22) || linksFound.keySet().contains(34)|| linksFound.keySet().contains(35)|| linksFound.keySet().contains(37))) {
        Integer mp4[]=new Integer[]{18,22,34,35,37};
        for (        Integer f : mp4) {
          if (linksFound.containsKey(f)) {
            links.put(f,linksFound.get(f));
          }
        }
      }
 else {
        links=linksFound;
      }
      for (      Integer format : links.keySet()) {
        String link=links.get(format);
        String dlLink;
        if (format == 0) {
          dlLink=link;
        }
 else {
          dlLink=link + (oldLayout == true ? ""String_Node_Str"" + format : ""String_Node_Str"");
        }
switch (format) {
case 18:
          if (br.openGetConnection(dlLink).getResponseCode() == 200) {
            addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
            br.getHttpConnection().disconnect();
          }
        break;
case 22:
      if (br.openGetConnection(dlLink).getResponseCode() == 200) {
        addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
        br.getHttpConnection().disconnect();
      }
    break;
case 34:
  if (br.openGetConnection(dlLink).getResponseCode() == 200) {
    addtopos(ConversionMode.VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
    br.getHttpConnection().disconnect();
  }
break;
case 35:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
break;
case 37:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEOMP4)) break;
break;
case 13:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEO3GP,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
break;
default :
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
addtopos(ConversionMode.AUDIOMP3,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
addtopos(ConversionMode.AUDIOMP3_AND_VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
}
}
ConversionMode convertTo=Plugin.showDisplayDialog(new ArrayList<ConversionMode>(possibleconverts.keySet()),name,param);
for (Info info : possibleconverts.get(convertTo)) {
DownloadLink thislink=createDownloadlink(info.link.replaceFirst(""String_Node_Str"",""String_Node_Str""));
thislink.setBrowserUrl(parameter);
thislink.setFinalFileName(name + info.desc + ""String_Node_Str"");
thislink.setSourcePluginComment(""String_Node_Str"" + convertTo.getText());
thislink.setProperty(""String_Node_Str"",Long.valueOf(info.size));
thislink.setProperty(""String_Node_Str"",name + info.desc + ""String_Node_Str"");
thislink.setProperty(""String_Node_Str"",convertTo.name());
thislink.setProperty(""String_Node_Str"",parameter);
thislink.setProperty(""String_Node_Str"",true);
thislink.setProperty(""String_Node_Str"",info.fmt);
decryptedLinks.add(thislink);
}
}
 catch (IOException e) {
br.getHttpConnection().disconnect();
logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
return null;
}
}
return decryptedLinks;
}"
20891,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  String basicauth=HTACCESSController.getInstance().get(downloadLink.getDownloadURL());
  if (basicauth == null) {
    basicauth=downloadLink.getStringProperty(""String_Node_Str"",null);
    if (basicauth != null)     basicauth=""String_Node_Str"" + Encoding.Base64Encode(basicauth);
  }
  if (basicauth != null) {
    br.getHeaders().put(""String_Node_Str"",basicauth);
  }
  br.setFollowRedirects(true);
  URLConnectionAdapter urlConnection=null;
  try {
    urlConnection=prepareConnection(br,downloadLink);
    if (urlConnection.getResponseCode() == 401 || urlConnection.getResponseCode() == 403) {
      if (basicauth != null) {
        HTACCESSController.getInstance().remove(downloadLink.getDownloadURL());
      }
      urlConnection.disconnect();
      basicauth=getBasicAuth(downloadLink);
      if (basicauth == null)       throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,JDL.L(""String_Node_Str"",""String_Node_Str""));
      br.getHeaders().put(""String_Node_Str"",basicauth);
      urlConnection=prepareConnection(br,downloadLink);
      if (urlConnection.getResponseCode() == 401) {
        urlConnection.disconnect();
        HTACCESSController.getInstance().remove(downloadLink.getDownloadURL());
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        HTACCESSController.getInstance().add(downloadLink.getDownloadURL(),basicauth);
      }
    }
    if (urlConnection.getResponseCode() == 404 || !urlConnection.isOK()) {
      urlConnection.disconnect();
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    if (downloadLink.getFinalFileName() == null)     downloadLink.setFinalFileName(Plugin.getFileNameFromHeader(urlConnection));
    downloadLink.setDownloadSize(urlConnection.getLongContentLength());
    this.contentType=urlConnection.getContentType();
    urlConnection.disconnect();
    return AvailableStatus.TRUE;
  }
 catch (  PluginException e2) {
    throw e2;
  }
catch (  Exception e) {
    JDLogger.exception(e);
  }
 finally {
    if (urlConnection != null)     urlConnection.disconnect();
  }
  throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  String basicauth=HTACCESSController.getInstance().get(downloadLink.getDownloadURL());
  if (basicauth == null) {
    basicauth=downloadLink.getStringProperty(""String_Node_Str"",null);
    if (basicauth != null)     basicauth=""String_Node_Str"" + Encoding.Base64Encode(basicauth);
  }
  if (basicauth != null) {
    br.getHeaders().put(""String_Node_Str"",basicauth);
  }
  br.setFollowRedirects(true);
  URLConnectionAdapter urlConnection=null;
  try {
    urlConnection=prepareConnection(br,downloadLink);
    if (urlConnection.getResponseCode() == 401 || urlConnection.getResponseCode() == 403) {
      if (basicauth != null) {
        HTACCESSController.getInstance().remove(downloadLink.getDownloadURL());
      }
      urlConnection.disconnect();
      basicauth=getBasicAuth(downloadLink);
      if (basicauth == null)       throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,JDL.L(""String_Node_Str"",""String_Node_Str""));
      br.getHeaders().put(""String_Node_Str"",basicauth);
      urlConnection=prepareConnection(br,downloadLink);
      if (urlConnection.getResponseCode() == 401) {
        urlConnection.disconnect();
        HTACCESSController.getInstance().remove(downloadLink.getDownloadURL());
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        HTACCESSController.getInstance().add(downloadLink.getDownloadURL(),basicauth);
      }
    }
    if (urlConnection.getResponseCode() == 404 || !urlConnection.isOK()) {
      urlConnection.disconnect();
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    if (downloadLink.getFinalFileName() == null)     downloadLink.setFinalFileName(Plugin.getFileNameFromHeader(urlConnection));
    downloadLink.setDownloadSize(urlConnection.getLongContentLength());
    this.contentType=urlConnection.getContentType();
    if (contentType.startsWith(""String_Node_Str"")) {
      br.followConnection();
      ArrayList<String> follow=HTMLParser.findUrls(br.toString());
      if (follow.size() != 1 || downloadLink.getBooleanProperty(""String_Node_Str"",false))       return AvailableStatus.FALSE;
      downloadLink.setUrlDownload(follow.get(0).trim());
      downloadLink.setProperty(""String_Node_Str"",true);
      return downloadLink.getAvailableStatus();
    }
 else {
      urlConnection.disconnect();
    }
    return AvailableStatus.TRUE;
  }
 catch (  PluginException e2) {
    throw e2;
  }
catch (  Exception e) {
    JDLogger.exception(e);
  }
 finally {
    if (urlConnection != null)     urlConnection.disconnect();
  }
  throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
}"
20892,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  doFree(downloadLink);
}"
20893,"public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=br.getForm(1);
  if (freeform != null) {
    freeform.remove(""String_Node_Str"");
    br.submitForm(freeform);
  }
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      checkErrors(downloadLink);
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void doFree(DownloadLink downloadLink) throws Exception, PluginException {
  boolean resumable=true;
  int maxchunks=0;
  Form freeform=br.getForm(1);
  if (freeform != null) {
    freeform.remove(""String_Node_Str"");
    br.submitForm(freeform);
  }
  checkErrors(downloadLink);
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt == null)   ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
        break;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    PluginForHost recplug=JDUtilities.getPluginForHost(""String_Node_Str"");
    jd.plugins.hoster.DirectHTTP.Recaptcha rc=((DirectHTTP)recplug).getReCaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,resumable,maxchunks);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      checkErrors(downloadLink);
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            if (dllink == null) {
              dllink=br.getRegex(""String_Node_Str"").getMatch(0);
            }
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    logger.info(""String_Node_Str"" + dllink + ""String_Node_Str"");
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,resumable,maxchunks);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    checkServerErrors();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20894,"public void checkErrors() throws NumberFormatException, PluginException {
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 1000l);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
  }
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),1 * 60 * 1000l);
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1001l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1001l);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
  }
}","public void checkErrors() throws NumberFormatException, PluginException {
  logger.info(""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 1000l);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
  }
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),1 * 60 * 1000l);
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1001l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1001l);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
  }
}"
20895,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  setBrowserExclusive();
  br.forceDebug(true);
  requestFileInformation(downloadLink);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  checkErrors();
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink != null) {
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
 else {
    Form form=br.getFormBySubmitvalue(""String_Node_Str"");
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    br.submitForm(form);
    checkErrors();
    if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    String icid=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null && icid != null) {
      Form cap=new Form();
      cap.setAction(link);
      cap.setMethod(Form.MethodType.POST);
      cap.put(""String_Node_Str"",icid);
      String captcha=getCaptchaCode(""String_Node_Str"" + icid,downloadLink);
      cap.put(""String_Node_Str"",captcha);
      br.submitForm(cap);
      dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_CAPTCHA);
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  setBrowserExclusive();
  br.forceDebug(true);
  requestFileInformation(downloadLink);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
  }
  checkErrors();
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink != null && !dllink.equals(""String_Node_Str"")) {
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
 else {
    logger.info(""String_Node_Str"");
    Form form=br.getFormBySubmitvalue(""String_Node_Str"");
    if (form == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    br.submitForm(form);
    checkErrors();
    if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    String icid=br.getRegex(""String_Node_Str"").getMatch(0);
    if ((dllink == null || dllink.equals(""String_Node_Str"")) && icid != null) {
      Form cap=new Form();
      cap.setAction(link);
      cap.setMethod(Form.MethodType.POST);
      cap.put(""String_Node_Str"",icid);
      String captcha=getCaptchaCode(""String_Node_Str"" + icid,downloadLink);
      cap.put(""String_Node_Str"",captcha);
      br.submitForm(cap);
      dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      if (dllink == null) {
        if (br.containsHTML(""String_Node_Str""))         throw new PluginException(LinkStatus.ERROR_CAPTCHA);
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
    if (dllink == null || dllink.equals(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
}"
20896,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String param=parameter.toString();
  String url=param;
  if (url.contains(""String_Node_Str""))   url=url.split(""String_Node_Str"")[0];
  String url2=url.concat(""String_Node_Str"");
  br.getPage(url2);
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000);
  }
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  progress.setRange(links.length);
  for (  String dl : links) {
    DownloadLink link=createDownloadlink(url.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + dl);
    int counter=120000;
    String filenumber=new Regex(dl,""String_Node_Str"").getMatch(0);
    if (filenumber != null && !dl.contains(""String_Node_Str"")) {
      counter=counter + Integer.parseInt(filenumber);
      String regexedCounter=new Regex(Integer.toString(counter),""String_Node_Str"").getMatch(0);
      link.setName(dl.replace(filenumber,""String_Node_Str"") + regexedCounter);
    }
 else {
      link.setName(dl + ""String_Node_Str"");
    }
    decryptedLinks.add(link);
    progress.increase(1);
  }
  br.getPage(param);
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName);
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String param=parameter.toString();
  String url=param;
  if (url.contains(""String_Node_Str""))   url=url.split(""String_Node_Str"")[0];
  String url2=url.concat(""String_Node_Str"");
  br.setFollowRedirects(true);
  br.getPage(url2);
  if (br.containsHTML(""String_Node_Str"")) {
    url=br.getRedirectLocation() != null ? br.getRedirectLocation() : br.getRegex(""String_Node_Str"").getMatch(0);
    if (url == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1001l);
  }
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  progress.setRange(links.length);
  for (  String dl : links) {
    DownloadLink link=createDownloadlink(url.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + dl);
    int counter=120000;
    String filenumber=new Regex(dl,""String_Node_Str"").getMatch(0);
    if (filenumber != null && !dl.contains(""String_Node_Str"")) {
      counter=counter + Integer.parseInt(filenumber);
      String regexedCounter=new Regex(Integer.toString(counter),""String_Node_Str"").getMatch(0);
      link.setName(dl.replace(filenumber,""String_Node_Str"") + regexedCounter);
    }
 else {
      link.setName(dl + ""String_Node_Str"");
    }
    decryptedLinks.add(link);
    progress.increase(1);
  }
  br.getPage(param);
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName);
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}"
20897,"@Override public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1001l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
synchronized (LOCK) {
      if (counter > 10) {
        counter=0;
        throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
      }
 else {
        counter++;
        throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
      }
    }
  }
  String correctEnding=LoadImage.getFileType(dllink,dl.getConnection().getContentType());
  String wrongEnding=link.getName().substring(link.getName().lastIndexOf('.'));
  if (correctEnding != null && wrongEnding != null)   link.setFinalFileName(link.getName().replace(wrongEnding,correctEnding));
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.containsHTML(""String_Node_Str"")) {
    String url=br.getRedirectLocation() != null ? br.getRedirectLocation() : br.getRegex(""String_Node_Str"").getMatch(0);
    if (url == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1001l);
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
synchronized (LOCK) {
      if (counter > 10) {
        counter=0;
        throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
      }
 else {
        counter++;
        throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
      }
    }
  }
  String correctEnding=LoadImage.getFileType(dllink,dl.getConnection().getContentType());
  String wrongEnding=null;
  if (link.getName().lastIndexOf('.') > 0)   wrongEnding=link.getName().substring(link.getName().lastIndexOf('.'));
  if (correctEnding != null && wrongEnding != null)   link.setFinalFileName(link.getName().replace(wrongEnding,correctEnding));
  if (correctEnding != null && wrongEnding == null)   link.setFinalFileName(link.getName() + correctEnding);
  dl.startDownload();
}"
20898,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.getHeaders().put(""String_Node_Str"",downloadLink.getDownloadURL());
  br.getPage(""String_Node_Str"");
  if (!br.getURL().equals(downloadLink.getDownloadURL()))   br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileName == null) {
    fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  String fileSize=br.getRegex(""String_Node_Str"").getMatch(1);
  if (fileName == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  if (!fileSize.endsWith(""String_Node_Str""))   fileSize=fileSize + ""String_Node_Str"";
  downloadLink.setName(fileName.trim());
  if (fileSize != null)   downloadLink.setDownloadSize(Regex.getSize(fileSize.replace(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.getHeaders().put(""String_Node_Str"",downloadLink.getDownloadURL());
  br.getPage(""String_Node_Str"");
  if (!br.getURL().equals(downloadLink.getDownloadURL()))   br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileName == null) {
    fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  String fileSize=br.getRegex(""String_Node_Str"").getMatch(1);
  if (fileName == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  fileSize=fileSize.replace(""String_Node_Str"",""String_Node_Str"");
  if (!fileSize.endsWith(""String_Node_Str""))   fileSize=fileSize + ""String_Node_Str"";
  downloadLink.setName(fileName.trim());
  if (fileSize != null)   downloadLink.setDownloadSize(Regex.getSize(fileSize.replace(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}"
20899,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  possibleconverts=new HashMap<ConversionMode,ArrayList<Info>>();
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setFollowRedirects(true);
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  if (parameter.contains(""String_Node_Str"")) {
    br.getPage(parameter);
    addVideosCurrentPage(decryptedLinks);
    if (!parameter.contains(""String_Node_Str"")) {
      String[] pages=br.getRegex(""String_Node_Str"").getColumn(1);
      for (int i=0; i < pages.length - 1; i++) {
        br.getPage(pages[i]);
        addVideosCurrentPage(decryptedLinks);
      }
    }
  }
 else {
    boolean prem=false;
    ArrayList<Account> accounts=AccountController.getInstance().getAllAccounts(""String_Node_Str"");
    if (accounts != null && accounts.size() != 0)     prem=login(accounts.get(0));
    try {
      if (StreamingShareLink.matcher(parameter).matches()) {
        String[] info=new Regex(parameter,StreamingShareLink).getMatches()[0];
        for (        String debug : info) {
          logger.info(debug);
        }
        DownloadLink thislink=createDownloadlink(info[1]);
        thislink.setBrowserUrl(info[2]);
        thislink.setFinalFileName(info[0]);
        thislink.setSourcePluginComment(""String_Node_Str"" + (ConversionMode.valueOf(info[3])).getText());
        thislink.setProperty(""String_Node_Str"",info[3]);
        decryptedLinks.add(thislink);
        return decryptedLinks;
      }
      boolean oldLayout=false;
      HashMap<Integer,String> linksFound=getLinks(parameter,prem,this.br);
      if (linksFound != null)       oldLayout=true;
      if (linksFound == null)       linksFound=getLinksNew(parameter,prem,this.br);
      if ((linksFound == null || linksFound.size() == 0) && br.containsHTML(""String_Node_Str""))       throw new DecrypterException(DecrypterException.ACCOUNT);
      if (linksFound == null || linksFound.size() == 0)       throw new DecrypterException(""String_Node_Str"");
      String name=Encoding.htmlDecode(br.getRegex(YT_FILENAME).getMatch(0).trim());
      HashMap<Integer,String> links=new HashMap<Integer,String>();
      if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEO3GP) && linksFound.keySet().contains(13)) {
        links.put(13,linksFound.get(13));
      }
 else       if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEOMP4) && (linksFound.keySet().contains(18) || linksFound.keySet().contains(22) || linksFound.keySet().contains(34)|| linksFound.keySet().contains(35)|| linksFound.keySet().contains(37))) {
        Integer mp4[]=new Integer[]{18,22,34,35,37};
        for (        Integer f : mp4) {
          if (linksFound.containsKey(f)) {
            links.put(f,linksFound.get(f));
          }
        }
      }
 else {
        links=linksFound;
      }
      for (      Integer format : links.keySet()) {
        String link=links.get(format);
        String dlLink;
        if (format == 0) {
          dlLink=link;
        }
 else {
          dlLink=link + (oldLayout == true ? ""String_Node_Str"" + format : ""String_Node_Str"");
        }
switch (format) {
case 18:
          if (br.openGetConnection(dlLink).getResponseCode() == 200) {
            addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
            br.getHttpConnection().disconnect();
          }
        break;
case 22:
      if (br.openGetConnection(dlLink).getResponseCode() == 200) {
        addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
        br.getHttpConnection().disconnect();
      }
    break;
case 34:
  if (br.openGetConnection(dlLink).getResponseCode() == 200) {
    addtopos(ConversionMode.VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
    br.getHttpConnection().disconnect();
  }
break;
case 35:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
break;
case 37:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEOMP4)) break;
break;
case 13:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEO3GP,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
break;
default :
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
addtopos(ConversionMode.AUDIOMP3,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
addtopos(ConversionMode.AUDIOMP3_AND_VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
}
}
ConversionMode convertTo=Plugin.showDisplayDialog(new ArrayList<ConversionMode>(possibleconverts.keySet()),name,param);
for (Info info : possibleconverts.get(convertTo)) {
DownloadLink thislink=createDownloadlink(info.link);
thislink.setBrowserUrl(parameter);
thislink.setFinalFileName(name + info.desc + ""String_Node_Str"");
thislink.setSourcePluginComment(""String_Node_Str"" + convertTo.getText());
thislink.setProperty(""String_Node_Str"",Long.valueOf(info.size));
thislink.setProperty(""String_Node_Str"",name + info.desc + ""String_Node_Str"");
thislink.setProperty(""String_Node_Str"",convertTo.name());
thislink.setProperty(""String_Node_Str"",parameter);
thislink.setProperty(""String_Node_Str"",true);
thislink.setProperty(""String_Node_Str"",info.fmt);
decryptedLinks.add(thislink);
}
}
 catch (IOException e) {
br.getHttpConnection().disconnect();
logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
return null;
}
}
return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  possibleconverts=new HashMap<ConversionMode,ArrayList<Info>>();
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString().replace(""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(true);
  br.setCookiesExclusive(true);
  br.clearCookies(""String_Node_Str"");
  if (parameter.contains(""String_Node_Str"")) {
    br.getPage(parameter);
    addVideosCurrentPage(decryptedLinks);
    if (!parameter.contains(""String_Node_Str"")) {
      String[] pages=br.getRegex(""String_Node_Str"").getColumn(1);
      for (int i=0; i < pages.length - 1; i++) {
        br.getPage(pages[i]);
        addVideosCurrentPage(decryptedLinks);
      }
    }
  }
 else {
    boolean prem=false;
    ArrayList<Account> accounts=AccountController.getInstance().getAllAccounts(""String_Node_Str"");
    if (accounts != null && accounts.size() != 0)     prem=login(accounts.get(0));
    try {
      if (StreamingShareLink.matcher(parameter).matches()) {
        String[] info=new Regex(parameter,StreamingShareLink).getMatches()[0];
        for (        String debug : info) {
          logger.info(debug);
        }
        DownloadLink thislink=createDownloadlink(info[1]);
        thislink.setBrowserUrl(info[2]);
        thislink.setFinalFileName(info[0]);
        thislink.setSourcePluginComment(""String_Node_Str"" + (ConversionMode.valueOf(info[3])).getText());
        thislink.setProperty(""String_Node_Str"",info[3]);
        decryptedLinks.add(thislink);
        return decryptedLinks;
      }
      boolean oldLayout=false;
      HashMap<Integer,String> linksFound=getLinks(parameter,prem,this.br);
      if (linksFound != null)       oldLayout=true;
      if (linksFound == null)       linksFound=getLinksNew(parameter,prem,this.br);
      if ((linksFound == null || linksFound.size() == 0) && br.containsHTML(""String_Node_Str""))       throw new DecrypterException(DecrypterException.ACCOUNT);
      if (linksFound == null || linksFound.size() == 0)       throw new DecrypterException(""String_Node_Str"");
      String name=Encoding.htmlDecode(br.getRegex(YT_FILENAME).getMatch(0).trim());
      HashMap<Integer,String> links=new HashMap<Integer,String>();
      if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEO3GP) && linksFound.keySet().contains(13)) {
        links.put(13,linksFound.get(13));
      }
 else       if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEOMP4) && (linksFound.keySet().contains(18) || linksFound.keySet().contains(22) || linksFound.keySet().contains(34)|| linksFound.keySet().contains(35)|| linksFound.keySet().contains(37))) {
        Integer mp4[]=new Integer[]{18,22,34,35,37};
        for (        Integer f : mp4) {
          if (linksFound.containsKey(f)) {
            links.put(f,linksFound.get(f));
          }
        }
      }
 else {
        links=linksFound;
      }
      for (      Integer format : links.keySet()) {
        String link=links.get(format);
        String dlLink;
        if (format == 0) {
          dlLink=link;
        }
 else {
          dlLink=link + (oldLayout == true ? ""String_Node_Str"" + format : ""String_Node_Str"");
        }
switch (format) {
case 18:
          if (br.openGetConnection(dlLink).getResponseCode() == 200) {
            addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
            br.getHttpConnection().disconnect();
          }
        break;
case 22:
      if (br.openGetConnection(dlLink).getResponseCode() == 200) {
        addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
        br.getHttpConnection().disconnect();
      }
    break;
case 34:
  if (br.openGetConnection(dlLink).getResponseCode() == 200) {
    addtopos(ConversionMode.VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
    br.getHttpConnection().disconnect();
  }
break;
case 35:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
break;
case 37:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOMP4,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
if (ConvertDialog.getKeeped().contains(ConversionMode.VIDEOMP4)) break;
break;
case 13:
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEO3GP,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
break;
default :
if (br.openGetConnection(dlLink).getResponseCode() == 200) {
addtopos(ConversionMode.VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
addtopos(ConversionMode.AUDIOMP3,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
addtopos(ConversionMode.AUDIOMP3_AND_VIDEOFLV,dlLink,br.getHttpConnection().getLongContentLength(),""String_Node_Str"",format);
br.getHttpConnection().disconnect();
}
}
}
ConversionMode convertTo=Plugin.showDisplayDialog(new ArrayList<ConversionMode>(possibleconverts.keySet()),name,param);
for (Info info : possibleconverts.get(convertTo)) {
DownloadLink thislink=createDownloadlink(info.link);
thislink.setBrowserUrl(parameter);
thislink.setFinalFileName(name + info.desc + ""String_Node_Str"");
thislink.setSourcePluginComment(""String_Node_Str"" + convertTo.getText());
thislink.setProperty(""String_Node_Str"",Long.valueOf(info.size));
thislink.setProperty(""String_Node_Str"",name + info.desc + ""String_Node_Str"");
thislink.setProperty(""String_Node_Str"",convertTo.name());
thislink.setProperty(""String_Node_Str"",parameter);
thislink.setProperty(""String_Node_Str"",true);
thislink.setProperty(""String_Node_Str"",info.fmt);
decryptedLinks.add(thislink);
}
}
 catch (IOException e) {
br.getHttpConnection().disconnect();
logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
return null;
}
}
return decryptedLinks;
}"
20900,"/** 
 * Sets special Properties for MAC
 */
private static void initMACProperties(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    new MacOSController();
  }
 catch (  Exception e) {
    LOG.info(""String_Node_Str"" + e);
    e.printStackTrace();
  }
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    File info15=JDUtilities.getResourceFile(""String_Node_Str"");
    File info=JDUtilities.getResourceFile(""String_Node_Str"");
    if (info15.exists()) {
      if (info.delete()) {
        info15.renameTo(JDUtilities.getResourceFile(""String_Node_Str""));
      }
    }
  }
}","/** 
 * Sets special Properties for MAC
 */
private static void initMACProperties(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (LookAndFeelController.getPlaf().getName().equals(""String_Node_Str"")) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    new MacOSController();
  }
 catch (  Exception e) {
    LOG.info(""String_Node_Str"" + e);
    e.printStackTrace();
  }
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    File info15=JDUtilities.getResourceFile(""String_Node_Str"");
    File info=JDUtilities.getResourceFile(""String_Node_Str"");
    if (info15.exists()) {
      if (info.delete()) {
        info15.renameTo(JDUtilities.getResourceFile(""String_Node_Str""));
      }
    }
  }
}"
20901,"public static void main(String args[]){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  LOG=JDLogger.getLogger();
  if (OSDetector.isMac()) {
    initMACProperties();
  }
  LOG.info(""String_Node_Str"");
  for (  String p : args) {
    if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_DEBUG=true;
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_DEBUG=true;
      Browser.setVerbose(true);
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      new Config();
      return;
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDL.DEBUG=true;
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_RETURNED_FROM_UPDATE=true;
    }
  }
  if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL) {
    JDInitFlags.SWITCH_DEBUG=true;
  }
  UserIO.setInstance(UserIOGui.getInstance());
  preInitChecks();
  JDUtilities.setJDargs(args);
  for (int i=0; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
      SubConfiguration webConfig=SubConfiguration.getConfig(""String_Node_Str"");
      if (args[i + 1].equalsIgnoreCase(""String_Node_Str"")) {
        webConfig.setProperty(WebUpdater.PARAM_BRANCH,null);
        if (webConfig.hasChanges()) {
          webConfig.save();
          LOG.info(""String_Node_Str"");
        }
      }
 else {
        webConfig.setProperty(WebUpdater.PARAM_BRANCH,args[i + 1]);
        if (webConfig.hasChanges()) {
          webConfig.save();
          LOG.info(""String_Node_Str"" + args[i + 1] + ""String_Node_Str"");
        }
      }
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      LOG.finer(args[i] + ""String_Node_Str"" + args[i + 1]);
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      LOG.finer(args[i] + ""String_Node_Str"" + args[i + 1]);
      if (new File(args[i + 1]).exists() && args[i + 1].trim().endsWith(""String_Node_Str"")) {
        LOG.info(""String_Node_Str"" + args[i + 1]);
        JDL.setStaticLocale(args[i + 1]);
      }
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (!JDInitFlags.ENOUGH_MEMORY) {
        JDUtilities.restartJDandWait();
      }
      LOG.finer(args[i] + ""String_Node_Str"");
      JDInitFlags.SWITCH_NEW_INSTANCE=true;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      ParameterManager.showCmdHelp();
      System.exit(0);
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (args.length > i + 2) {
        LOG.setLevel(Level.OFF);
        String captchaValue=JAntiCaptcha.getCaptcha(args[i + 1],args[i + 2]);
        System.out.println(captchaValue);
        System.exit(0);
      }
 else {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.exit(0);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      JACController.showDialog(false);
      JDInitFlags.STOP=true;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      JACController.showDialog(true);
      JDInitFlags.STOP=true;
    }
 else     if (JDInitFlags.SHOW_SPLASH && args[i].matches(""String_Node_Str"")) {
      JDInitFlags.SHOW_SPLASH=false;
    }
  }
  try {
    SINGLE_INSTANCE_CONTROLLER=new SingleAppInstance(""String_Node_Str"",JDUtilities.getJDHomeDirectoryFromEnvironment());
    SINGLE_INSTANCE_CONTROLLER.setInstanceMessageListener(new InstanceMessageListener(){
      public void parseMessage(      String[] args){
        ParameterManager.processParameters(args);
      }
    }
);
    SINGLE_INSTANCE_CONTROLLER.start();
    instanceStarted=true;
  }
 catch (  AnotherInstanceRunningException e) {
    LOG.info(""String_Node_Str"");
    instanceStarted=false;
  }
catch (  Exception e) {
    JDLogger.exception(e);
    LOG.severe(""String_Node_Str"");
    instanceStarted=true;
  }
  JDController.getInstance();
  if (instanceStarted || JDInitFlags.SWITCH_NEW_INSTANCE) {
    JDTheme.setTheme(""String_Node_Str"");
    if (JDInitFlags.SHOW_SPLASH) {
      if (GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_SHOW_SPLASH,true)) {
        LOG.info(""String_Node_Str"");
        new GuiRunnable<Object>(){
          @Override public Object runSave(){
            try {
              new SplashScreen(JDController.getInstance());
            }
 catch (            Exception e) {
              JDLogger.exception(e);
            }
            return null;
          }
        }
.waitForEDT();
      }
    }
    Interaction.deleteInteractions();
    start(args);
  }
 else {
    if (args.length > 0) {
      LOG.info(""String_Node_Str"");
      SINGLE_INSTANCE_CONTROLLER.sendToRunningInstance(args);
    }
 else {
      LOG.info(""String_Node_Str"");
      SINGLE_INSTANCE_CONTROLLER.sendToRunningInstance(new String[]{""String_Node_Str""});
    }
    System.exit(0);
  }
}","public static void main(String args[]){
  if (OSDetector.isMac()) {
    initMACProperties();
  }
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  LOG=JDLogger.getLogger();
  LOG.info(""String_Node_Str"");
  for (  String p : args) {
    if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_DEBUG=true;
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_DEBUG=true;
      Browser.setVerbose(true);
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      new Config();
      return;
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDL.DEBUG=true;
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_RETURNED_FROM_UPDATE=true;
    }
  }
  if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL) {
    JDInitFlags.SWITCH_DEBUG=true;
  }
  UserIO.setInstance(UserIOGui.getInstance());
  preInitChecks();
  JDUtilities.setJDargs(args);
  for (int i=0; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
      SubConfiguration webConfig=SubConfiguration.getConfig(""String_Node_Str"");
      if (args[i + 1].equalsIgnoreCase(""String_Node_Str"")) {
        webConfig.setProperty(WebUpdater.PARAM_BRANCH,null);
        if (webConfig.hasChanges()) {
          webConfig.save();
          LOG.info(""String_Node_Str"");
        }
      }
 else {
        webConfig.setProperty(WebUpdater.PARAM_BRANCH,args[i + 1]);
        if (webConfig.hasChanges()) {
          webConfig.save();
          LOG.info(""String_Node_Str"" + args[i + 1] + ""String_Node_Str"");
        }
      }
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      LOG.finer(args[i] + ""String_Node_Str"" + args[i + 1]);
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      LOG.finer(args[i] + ""String_Node_Str"" + args[i + 1]);
      if (new File(args[i + 1]).exists() && args[i + 1].trim().endsWith(""String_Node_Str"")) {
        LOG.info(""String_Node_Str"" + args[i + 1]);
        JDL.setStaticLocale(args[i + 1]);
      }
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (!JDInitFlags.ENOUGH_MEMORY) {
        JDUtilities.restartJDandWait();
      }
      LOG.finer(args[i] + ""String_Node_Str"");
      JDInitFlags.SWITCH_NEW_INSTANCE=true;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      ParameterManager.showCmdHelp();
      System.exit(0);
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (args.length > i + 2) {
        LOG.setLevel(Level.OFF);
        String captchaValue=JAntiCaptcha.getCaptcha(args[i + 1],args[i + 2]);
        System.out.println(captchaValue);
        System.exit(0);
      }
 else {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.exit(0);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      JACController.showDialog(false);
      JDInitFlags.STOP=true;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      JACController.showDialog(true);
      JDInitFlags.STOP=true;
    }
 else     if (JDInitFlags.SHOW_SPLASH && args[i].matches(""String_Node_Str"")) {
      JDInitFlags.SHOW_SPLASH=false;
    }
  }
  try {
    SINGLE_INSTANCE_CONTROLLER=new SingleAppInstance(""String_Node_Str"",JDUtilities.getJDHomeDirectoryFromEnvironment());
    SINGLE_INSTANCE_CONTROLLER.setInstanceMessageListener(new InstanceMessageListener(){
      public void parseMessage(      String[] args){
        ParameterManager.processParameters(args);
      }
    }
);
    SINGLE_INSTANCE_CONTROLLER.start();
    instanceStarted=true;
  }
 catch (  AnotherInstanceRunningException e) {
    LOG.info(""String_Node_Str"");
    instanceStarted=false;
  }
catch (  Exception e) {
    JDLogger.exception(e);
    LOG.severe(""String_Node_Str"");
    instanceStarted=true;
  }
  JDController.getInstance();
  if (instanceStarted || JDInitFlags.SWITCH_NEW_INSTANCE) {
    JDTheme.setTheme(""String_Node_Str"");
    if (JDInitFlags.SHOW_SPLASH) {
      if (GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_SHOW_SPLASH,true)) {
        LOG.info(""String_Node_Str"");
        new GuiRunnable<Object>(){
          @Override public Object runSave(){
            try {
              new SplashScreen(JDController.getInstance());
            }
 catch (            Exception e) {
              JDLogger.exception(e);
            }
            return null;
          }
        }
.waitForEDT();
      }
    }
    Interaction.deleteInteractions();
    start(args);
  }
 else {
    if (args.length > 0) {
      LOG.info(""String_Node_Str"");
      SINGLE_INSTANCE_CONTROLLER.sendToRunningInstance(args);
    }
 else {
      LOG.info(""String_Node_Str"");
      SINGLE_INSTANCE_CONTROLLER.sendToRunningInstance(new String[]{""String_Node_Str""});
    }
    System.exit(0);
  }
}"
20902,"public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String fpName=parameter.getStringProperty(""String_Node_Str"");
  br.setFollowRedirects(true);
  br.getPage(parameter.toString());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str"")) {
    String parm=parameter.toString();
    String filelink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filelink == null)     return null;
    String matches=br.getRegex(""String_Node_Str"").getMatch(0);
    if (matches == null) {
      matches=br.getRegex(""String_Node_Str"").getMatch(0);
      if (matches == null)       return null;
      logger.warning(""String_Node_Str"");
      logger.warning(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return decryptedLinks;
    }
    filelink=rot13(filelink);
    String downloadlink=""String_Node_Str"" + filelink + ""String_Node_Str"";
    DownloadLink dlink=createDownloadlink(downloadlink);
    dlink.setBrowserUrl(parm);
    dlink.setFinalFileName(filelink.split(""String_Node_Str"")[0] + ""String_Node_Str"");
    decryptedLinks.add(dlink);
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    ArrayList<String> pages=new ArrayList<String>();
    pages.add(""String_Node_Str"");
    String pagenumbers[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if (!(pagenumbers == null && !(pagenumbers.length == 0))) {
      for (      String aPageNumer : pagenumbers) {
        if (!pages.contains(aPageNumer))         pages.add(aPageNumer);
      }
    }
    progress.setRange(pages.size());
    logger.info(""String_Node_Str"" + pages.size() + ""String_Node_Str"");
    for (    String getthepage : pages) {
      if (!getthepage.equals(""String_Node_Str""))       br.getPage(parameter.toString() + ""String_Node_Str"" + getthepage);
      fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      if (fpName == null)       fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       return null;
      logger.info(""String_Node_Str"" + getthepage + ""String_Node_Str""+ links.length+ ""String_Node_Str"");
      for (      String singlelink : links) {
        DownloadLink dl=createDownloadlink(singlelink);
        if (fpName != null)         dl.setProperty(""String_Node_Str"",fpName);
        decryptedLinks.add(dl);
      }
      progress.increase(1);
    }
  }
 else {
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null)     return null;
    decryptedLinks.add(createDownloadlink(finallink.replace(""String_Node_Str"",""String_Node_Str"")));
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String fpName=parameter.getStringProperty(""String_Node_Str"");
  br.setFollowRedirects(true);
  br.getPage(parameter.toString());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  if (br.containsHTML(""String_Node_Str"")) {
    String parm=parameter.toString();
    String filelink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filelink == null)     return null;
    String matches=br.getRegex(""String_Node_Str"").getMatch(0);
    if (matches == null) {
      matches=br.getRegex(""String_Node_Str"").getMatch(0);
      if (matches == null)       return null;
      logger.warning(""String_Node_Str"");
      logger.warning(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return decryptedLinks;
    }
    filelink=rot13(filelink);
    String downloadlink=""String_Node_Str"" + filelink + ""String_Node_Str"";
    DownloadLink dlink=createDownloadlink(downloadlink);
    dlink.setBrowserUrl(parm);
    dlink.setFinalFileName(filelink.split(""String_Node_Str"")[0] + ""String_Node_Str"");
    decryptedLinks.add(dlink);
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    ArrayList<String> pages=new ArrayList<String>();
    pages.add(""String_Node_Str"");
    String pagenumbers[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if (!(pagenumbers == null) && !(pagenumbers.length == 0)) {
      for (      String aPageNumer : pagenumbers) {
        if (!pages.contains(aPageNumer))         pages.add(aPageNumer);
      }
    }
    progress.setRange(pages.size());
    logger.info(""String_Node_Str"" + pages.size() + ""String_Node_Str"");
    for (    String getthepage : pages) {
      if (!getthepage.equals(""String_Node_Str""))       br.getPage(parameter.toString() + ""String_Node_Str"" + getthepage);
      fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      if (fpName == null)       fpName=br.getRegex(""String_Node_Str"").getMatch(0);
      String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       br.getRegex(""String_Node_Str"").getColumn(0);
      if (links == null || links.length == 0)       return null;
      logger.info(""String_Node_Str"" + getthepage + ""String_Node_Str""+ links.length+ ""String_Node_Str"");
      for (      String singlelink : links) {
        DownloadLink dl=createDownloadlink(singlelink);
        if (fpName != null)         dl.setProperty(""String_Node_Str"",fpName);
        decryptedLinks.add(dl);
      }
      progress.increase(1);
    }
  }
 else {
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null)     return null;
    decryptedLinks.add(createDownloadlink(finallink.replace(""String_Node_Str"",""String_Node_Str"")));
  }
  if (fpName != null) {
    FilePackage fp=FilePackage.getInstance();
    fp.setName(fpName.trim());
    fp.addLinks(decryptedLinks);
  }
  return decryptedLinks;
}"
20903,"public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  Form forms=null;
  String directLink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (directLink != null) {
    dl=BrowserAdapter.openDownload(br,downloadLink,directLink);
  }
 else {
    String formact=downloadLink.getDownloadURL();
    if (br.containsHTML(""String_Node_Str"")) {
      for (int i=0; i <= 5; i++) {
        File captchaFile=getLocalCaptchaFile(""String_Node_Str"");
        String captchaFileURL=br.getRegex(""String_Node_Str"").getMatch(0);
        String filecid=br.getRegex(""String_Node_Str"").getMatch(0);
        Browser.download(captchaFile,br.openGetConnection(""String_Node_Str"" + captchaFileURL));
        String capTxt=getCaptchaCode(captchaFile,downloadLink);
        br.postPage(formact,""String_Node_Str"" + capTxt + ""String_Node_Str""+ Encoding.urlEncode(filecid)+ ""String_Node_Str"");
        if (br.containsHTML(""String_Node_Str"")) {
          br.getPage(downloadLink.getDownloadURL());
          continue;
        }
        break;
      }
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_CAPTCHA);
    }
    forms=br.getForm(0);
    if (forms == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dl=BrowserAdapter.openDownload(br,downloadLink,forms);
  }
  try {
    URLConnectionAdapter con=dl.getConnection();
    if (!con.isContentDisposition()) {
      br.getPage(forms.getAction());
      if (br.containsHTML(""String_Node_Str"")) {
        con.disconnect();
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        con.disconnect();
        logger.warning(""String_Node_Str"");
        logger.warning(br.toString());
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
    dl.startDownload();
  }
 catch (  IOException e) {
    if (e.getCause() instanceof NullPointerException) {
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
    }
  }
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  Form forms=null;
  String directLink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (directLink != null) {
    dl=BrowserAdapter.openDownload(br,downloadLink,directLink);
  }
 else {
    String formact=downloadLink.getDownloadURL();
    if (br.containsHTML(""String_Node_Str"")) {
      for (int i=0; i <= 5; i++) {
        File captchaFile=getLocalCaptchaFile(""String_Node_Str"");
        String captchaFileURL=br.getRegex(""String_Node_Str"").getMatch(0);
        String filecid=br.getRegex(""String_Node_Str"").getMatch(0);
        Browser.download(captchaFile,br.openGetConnection(""String_Node_Str"" + captchaFileURL));
        String capTxt=getCaptchaCode(captchaFile,downloadLink);
        br.postPage(formact,""String_Node_Str"" + capTxt + ""String_Node_Str""+ Encoding.urlEncode(filecid)+ ""String_Node_Str"");
        if (br.containsHTML(""String_Node_Str"")) {
          br.getPage(downloadLink.getDownloadURL());
          continue;
        }
        break;
      }
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_CAPTCHA);
    }
    forms=br.getForm(0);
    if (forms == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    dl=BrowserAdapter.openDownload(br,downloadLink,forms);
  }
  try {
    URLConnectionAdapter con=dl.getConnection();
    if (con.getContentType().contains(""String_Node_Str"")) {
      br.getPage(forms.getAction());
      if (br.containsHTML(""String_Node_Str"")) {
        con.disconnect();
        throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        con.disconnect();
        logger.warning(""String_Node_Str"");
        logger.warning(br.toString());
        throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
    dl.startDownload();
  }
 catch (  IOException e) {
    if (e.getCause() instanceof NullPointerException) {
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
    }
  }
}"
20904,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  boolean do_download=false;
  requestFileInformation(downloadLink);
  boolean withad=br.containsHTML(""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str"") && !withad)   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  br.setFollowRedirects(true);
  String passCode=null;
  String watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
  if (watchAd != null) {
    downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    watchAd=""String_Node_Str"".concat(watchAd);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
  }
  for (int retry=1; retry <= 5; retry++) {
    Form captchaForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
    String tag=br.getRegex(""String_Node_Str"").getMatch(0);
    String secret=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaForm == null || captchaurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (tag != null && secret != null) {
      secret=secret.substring(2);
      captchaForm.put(""String_Node_Str"",tag);
      InputField nv=new InputField(secret,""String_Node_Str"");
      captchaForm.addInputField(nv);
    }
 else {
      secret=br.getRegex(""String_Node_Str"").getMatch(0);
      String name=br.getRegex(""String_Node_Str"").getMatch(0);
      if (name != null && secret != null) {
        secret=secret.substring(2);
        captchaForm.put(name,secret);
        captchaForm.remove(""String_Node_Str"");
        captchaForm.remove(""String_Node_Str"");
        captchaForm.remove(""String_Node_Str"");
        captchaForm.put(""String_Node_Str"",""String_Node_Str"");
      }
 else       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    captchaForm.setAction(br.getURL());
    if (!captchaurl.contains(br.getHost()))     captchaurl=""String_Node_Str"" + br.getHost() + captchaurl;
    String captchaCode=getCaptchaCode(captchaurl,downloadLink);
    captchaForm.put(""String_Node_Str"",captchaCode);
    try {
      br.submitForm(captchaForm);
    }
 catch (    Exception e) {
      br.submitForm(captchaForm);
    }
    String directLink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (directLink == null) {
      Form pwform=br.getForm(2);
      if (pwform != null && !br.getRegex(""String_Node_Str"").matches()) {
        if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
          passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
        }
 else {
          passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
        }
        pwform.put(""String_Node_Str"",passCode);
        br.submitForm(pwform);
        directLink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (directLink == null) {
          downloadLink.setProperty(""String_Node_Str"",null);
          logger.info(""String_Node_Str"");
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
      }
    }
    if (directLink != null) {
      br.setDebug(true);
      if (passCode != null)       downloadLink.setProperty(""String_Node_Str"",passCode);
      dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,directLink,true,-2);
      do_download=true;
      break;
    }
  }
  if (!do_download) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA,JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
 else   dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  boolean do_download=false;
  requestFileInformation(downloadLink);
  boolean withad=br.containsHTML(""String_Node_Str"");
  if (br.containsHTML(""String_Node_Str"") && !withad)   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
  br.setFollowRedirects(true);
  String passCode=null;
  String watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
  if (watchAd != null) {
    downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    watchAd=""String_Node_Str"".concat(watchAd);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
    if (watchAd != null) {
      if (watchAd == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      br.getPage(watchAd);
      watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
      if (watchAd == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      watchAd=""String_Node_Str"" + watchAd;
      br.getPage(watchAd);
      String ticketTimeS=br.getRegex(""String_Node_Str"").getMatch(0);
      if (ticketTimeS == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      int ticketTime=Integer.parseInt(ticketTimeS) * 1000;
      this.sleep(ticketTime + 1,downloadLink);
      br.getPage(watchAd);
    }
  }
  for (int retry=1; retry <= 5; retry++) {
    Form captchaForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
    String tag=br.getRegex(""String_Node_Str"").getMatch(0);
    String secret=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaForm == null || captchaurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (tag != null && secret != null) {
      secret=secret.substring(2);
      captchaForm.put(""String_Node_Str"",tag);
      InputField nv=new InputField(secret,""String_Node_Str"");
      captchaForm.addInputField(nv);
    }
 else {
      secret=br.getRegex(""String_Node_Str"").getMatch(0);
      String name=br.getRegex(""String_Node_Str"").getMatch(0);
      if (name != null && secret != null) {
        secret=secret.substring(2);
        captchaForm.put(name,secret);
        captchaForm.remove(""String_Node_Str"");
        captchaForm.remove(""String_Node_Str"");
        captchaForm.remove(""String_Node_Str"");
        captchaForm.put(""String_Node_Str"",""String_Node_Str"");
      }
 else       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    captchaForm.setAction(br.getURL());
    if (!captchaurl.contains(br.getHost()))     captchaurl=""String_Node_Str"" + br.getHost() + captchaurl;
    String captchaCode=getCaptchaCode(captchaurl,downloadLink);
    captchaForm.put(""String_Node_Str"",captchaCode);
    try {
      br.submitForm(captchaForm);
    }
 catch (    Exception e) {
      br.submitForm(captchaForm);
    }
    String directLink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (directLink == null) {
      Form pwform=br.getForm(2);
      if (pwform != null && !br.getRegex(""String_Node_Str"").matches()) {
        if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
          passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
        }
 else {
          passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
        }
        pwform.put(""String_Node_Str"",passCode);
        br.submitForm(pwform);
        directLink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (directLink == null) {
          downloadLink.setProperty(""String_Node_Str"",null);
          logger.info(""String_Node_Str"");
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
      }
    }
    if (directLink != null) {
      br.setDebug(true);
      if (passCode != null)       downloadLink.setProperty(""String_Node_Str"",passCode);
      dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,directLink,true,-2);
      do_download=true;
      break;
    }
  }
  if (!do_download) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA,JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
 else   dl.startDownload();
}"
20905,"@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.getPage(link.getDownloadURL());
  int configuredServer=getConfiguredServer();
  boolean realusedserver=false;
  String usedServer=""String_Node_Str"";
  if (configuredServer == 0) {
    usedServer=br.getRegex(""String_Node_Str"").getMatch(0);
    if (usedServer != null) {
      realusedserver=true;
    }
 else {
      usedServer=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
 else   if (configuredServer == 1) {
    usedServer=br.getRegex(""String_Node_Str"").getMatch(0);
    if (usedServer != null) {
      realusedserver=true;
    }
 else {
      br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (usedServer == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  usedServer=""String_Node_Str"" + usedServer;
  if (realusedserver == true) {
    logger.info(""String_Node_Str"" + usedServer);
  }
 else {
    logger.warning(""String_Node_Str"" + usedServer);
  }
  br.getPage(usedServer);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dllink=dllink.replace(""String_Node_Str"",""String_Node_Str"");
  dllink=""String_Node_Str"" + dllink;
  br.getPage(dllink);
  dllink=br.getRedirectLocation();
  if (dllink == null || dllink.contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  logger.info(""String_Node_Str"" + dllink);
  BrowserAdapter.openDownload(br,link,dllink,true,-3);
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.getPage(link.getDownloadURL());
  int configuredServer=getConfiguredServer();
  boolean realusedserver=false;
  String usedServer=""String_Node_Str"";
  if (configuredServer == 0) {
    usedServer=br.getRegex(""String_Node_Str"").getMatch(0);
    if (usedServer != null) {
      realusedserver=true;
    }
 else {
      usedServer=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
 else   if (configuredServer == 1) {
    usedServer=br.getRegex(""String_Node_Str"").getMatch(0);
    if (usedServer != null) {
      realusedserver=true;
    }
 else {
      br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (usedServer == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  usedServer=""String_Node_Str"" + usedServer;
  if (realusedserver == true) {
    logger.info(""String_Node_Str"" + usedServer);
  }
 else {
    logger.warning(""String_Node_Str"" + usedServer);
  }
  br.getPage(usedServer);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String entry=new Regex(usedServer,""String_Node_Str"").getMatch(0);
  if (entry != null)   dllink=dllink.replace(""String_Node_Str"",""String_Node_Str"" + entry);
  dllink=dllink.replace(""String_Node_Str"",""String_Node_Str"");
  dllink=""String_Node_Str"" + dllink;
  br.getPage(dllink);
  dllink=br.getRedirectLocation();
  logger.info(""String_Node_Str"" + dllink);
  BrowserAdapter.openDownload(br,link,dllink,true,-3);
  dl.startDownload();
}"
20906,"public void handleFree(DownloadLink link) throws Exception {
  if (!link.getDownloadURL().contains(""String_Node_Str""))   requestFileInformation(link);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,link.getDownloadURL(),true,0);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink link) throws Exception {
  if (!link.getDownloadURL().contains(""String_Node_Str""))   requestFileInformation(link);
 else {
    String fileid=new Regex(link.getDownloadURL(),""String_Node_Str"").getMatch(0);
    if (fileid != null)     br.getPage(""String_Node_Str"" + fileid);
  }
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,link.getDownloadURL(),true,0);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20907,"public AvailableStatus requestFileInformation(DownloadLink parameter) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.openGetConnection(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setName(Plugin.getFileNameFromHeader(br.getHttpConnection()));
  parameter.setDownloadSize(br.getHttpConnection().getLongContentLength());
  br.getHttpConnection().disconnect();
  return AvailableStatus.TRUE;
}","public AvailableStatus requestFileInformation(DownloadLink parameter) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  URLConnectionAdapter con=br.openGetConnection(parameter.getDownloadURL());
  if (con.getContentType().contains(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setName(Plugin.getFileNameFromHeader(con));
  parameter.setDownloadSize(con.getLongContentLength());
  con.disconnect();
  return AvailableStatus.TRUE;
}"
20908,"/** 
 * Sets special Properties for MAC
 */
private static void initMACProperties(){
  if (OSDetector.isMac()) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    try {
      new MacOSController();
    }
 catch (    Exception e) {
      LOG.info(""String_Node_Str"" + e);
      e.printStackTrace();
    }
    if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
      File info15=JDUtilities.getResourceFile(""String_Node_Str"");
      File info=JDUtilities.getResourceFile(""String_Node_Str"");
      if (info15.exists()) {
        if (info.delete()) {
          info15.renameTo(JDUtilities.getResourceFile(""String_Node_Str""));
        }
      }
    }
  }
}","/** 
 * Sets special Properties for MAC
 */
private static void initMACProperties(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    new MacOSController();
  }
 catch (  Exception e) {
    LOG.info(""String_Node_Str"" + e);
    e.printStackTrace();
  }
  if (System.getProperty(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    File info15=JDUtilities.getResourceFile(""String_Node_Str"");
    File info=JDUtilities.getResourceFile(""String_Node_Str"");
    if (info15.exists()) {
      if (info.delete()) {
        info15.renameTo(JDUtilities.getResourceFile(""String_Node_Str""));
      }
    }
  }
}"
20909,"public static void main(String args[]){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  LOG=JDLogger.getLogger();
  initMACProperties();
  LOG.info(""String_Node_Str"");
  for (  String p : args) {
    if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_DEBUG=true;
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_DEBUG=true;
      Browser.setVerbose(true);
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      new Config();
      return;
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDL.DEBUG=true;
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_RETURNED_FROM_UPDATE=true;
    }
  }
  if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL) {
    JDInitFlags.SWITCH_DEBUG=true;
  }
  UserIO.setInstance(UserIOGui.getInstance());
  preInitChecks();
  JDUtilities.setJDargs(args);
  for (int i=0; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
      SubConfiguration webConfig=SubConfiguration.getConfig(""String_Node_Str"");
      if (args[i + 1].equalsIgnoreCase(""String_Node_Str"")) {
        webConfig.setProperty(WebUpdater.PARAM_BRANCH,null);
        if (webConfig.hasChanges()) {
          webConfig.save();
          LOG.info(""String_Node_Str"");
        }
      }
 else {
        webConfig.setProperty(WebUpdater.PARAM_BRANCH,args[i + 1]);
        if (webConfig.hasChanges()) {
          webConfig.save();
          LOG.info(""String_Node_Str"" + args[i + 1] + ""String_Node_Str"");
        }
      }
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      LOG.finer(args[i] + ""String_Node_Str"" + args[i + 1]);
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      LOG.finer(args[i] + ""String_Node_Str"" + args[i + 1]);
      if (new File(args[i + 1]).exists() && args[i + 1].trim().endsWith(""String_Node_Str"")) {
        LOG.info(""String_Node_Str"" + args[i + 1]);
        JDL.setStaticLocale(args[i + 1]);
      }
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (!JDInitFlags.ENOUGH_MEMORY) {
        JDUtilities.restartJDandWait();
      }
      LOG.finer(args[i] + ""String_Node_Str"");
      JDInitFlags.SWITCH_NEW_INSTANCE=true;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      ParameterManager.showCmdHelp();
      System.exit(0);
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (args.length > i + 2) {
        LOG.setLevel(Level.OFF);
        String captchaValue=JAntiCaptcha.getCaptcha(args[i + 1],args[i + 2]);
        System.out.println(captchaValue);
        System.exit(0);
      }
 else {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.exit(0);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      JACController.showDialog(false);
      JDInitFlags.STOP=true;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      JACController.showDialog(true);
      JDInitFlags.STOP=true;
    }
 else     if (JDInitFlags.SHOW_SPLASH && args[i].matches(""String_Node_Str"")) {
      JDInitFlags.SHOW_SPLASH=false;
    }
  }
  try {
    SINGLE_INSTANCE_CONTROLLER=new SingleAppInstance(""String_Node_Str"",JDUtilities.getJDHomeDirectoryFromEnvironment());
    SINGLE_INSTANCE_CONTROLLER.setInstanceMessageListener(new InstanceMessageListener(){
      public void parseMessage(      String[] args){
        ParameterManager.processParameters(args);
      }
    }
);
    SINGLE_INSTANCE_CONTROLLER.start();
    instanceStarted=true;
  }
 catch (  AnotherInstanceRunningException e) {
    LOG.info(""String_Node_Str"");
    instanceStarted=false;
  }
catch (  Exception e) {
    JDLogger.exception(e);
    LOG.severe(""String_Node_Str"");
    instanceStarted=true;
  }
  JDController.getInstance();
  if (instanceStarted || JDInitFlags.SWITCH_NEW_INSTANCE) {
    JDTheme.setTheme(""String_Node_Str"");
    if (JDInitFlags.SHOW_SPLASH) {
      if (GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_SHOW_SPLASH,true)) {
        LOG.info(""String_Node_Str"");
        new GuiRunnable<Object>(){
          @Override public Object runSave(){
            try {
              new SplashScreen(JDController.getInstance());
            }
 catch (            Exception e) {
              JDLogger.exception(e);
            }
            return null;
          }
        }
.waitForEDT();
      }
    }
    Interaction.deleteInteractions();
    start(args);
  }
 else {
    if (args.length > 0) {
      LOG.info(""String_Node_Str"");
      SINGLE_INSTANCE_CONTROLLER.sendToRunningInstance(args);
    }
 else {
      LOG.info(""String_Node_Str"");
      SINGLE_INSTANCE_CONTROLLER.sendToRunningInstance(new String[]{""String_Node_Str""});
    }
    System.exit(0);
  }
}","public static void main(String args[]){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  LOG=JDLogger.getLogger();
  if (OSDetector.isMac()) {
    initMACProperties();
  }
  LOG.info(""String_Node_Str"");
  for (  String p : args) {
    if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_DEBUG=true;
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_DEBUG=true;
      Browser.setVerbose(true);
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      new Config();
      return;
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDL.DEBUG=true;
      LOG.info(""String_Node_Str"");
    }
 else     if (p.equalsIgnoreCase(""String_Node_Str"")) {
      JDInitFlags.SWITCH_RETURNED_FROM_UPDATE=true;
    }
  }
  if (JDUtilities.getRunType() == JDUtilities.RUNTYPE_LOCAL) {
    JDInitFlags.SWITCH_DEBUG=true;
  }
  UserIO.setInstance(UserIOGui.getInstance());
  preInitChecks();
  JDUtilities.setJDargs(args);
  for (int i=0; i < args.length; i++) {
    if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
      SubConfiguration webConfig=SubConfiguration.getConfig(""String_Node_Str"");
      if (args[i + 1].equalsIgnoreCase(""String_Node_Str"")) {
        webConfig.setProperty(WebUpdater.PARAM_BRANCH,null);
        if (webConfig.hasChanges()) {
          webConfig.save();
          LOG.info(""String_Node_Str"");
        }
      }
 else {
        webConfig.setProperty(WebUpdater.PARAM_BRANCH,args[i + 1]);
        if (webConfig.hasChanges()) {
          webConfig.save();
          LOG.info(""String_Node_Str"" + args[i + 1] + ""String_Node_Str"");
        }
      }
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      LOG.finer(args[i] + ""String_Node_Str"" + args[i + 1]);
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      LOG.finer(args[i] + ""String_Node_Str"" + args[i + 1]);
      if (new File(args[i + 1]).exists() && args[i + 1].trim().endsWith(""String_Node_Str"")) {
        LOG.info(""String_Node_Str"" + args[i + 1]);
        JDL.setStaticLocale(args[i + 1]);
      }
      i++;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (!JDInitFlags.ENOUGH_MEMORY) {
        JDUtilities.restartJDandWait();
      }
      LOG.finer(args[i] + ""String_Node_Str"");
      JDInitFlags.SWITCH_NEW_INSTANCE=true;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      ParameterManager.showCmdHelp();
      System.exit(0);
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      if (args.length > i + 2) {
        LOG.setLevel(Level.OFF);
        String captchaValue=JAntiCaptcha.getCaptcha(args[i + 1],args[i + 2]);
        System.out.println(captchaValue);
        System.exit(0);
      }
 else {
        System.out.println(""String_Node_Str"");
        System.out.println(""String_Node_Str"");
        System.exit(0);
      }
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      JACController.showDialog(false);
      JDInitFlags.STOP=true;
    }
 else     if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      JACController.showDialog(true);
      JDInitFlags.STOP=true;
    }
 else     if (JDInitFlags.SHOW_SPLASH && args[i].matches(""String_Node_Str"")) {
      JDInitFlags.SHOW_SPLASH=false;
    }
  }
  try {
    SINGLE_INSTANCE_CONTROLLER=new SingleAppInstance(""String_Node_Str"",JDUtilities.getJDHomeDirectoryFromEnvironment());
    SINGLE_INSTANCE_CONTROLLER.setInstanceMessageListener(new InstanceMessageListener(){
      public void parseMessage(      String[] args){
        ParameterManager.processParameters(args);
      }
    }
);
    SINGLE_INSTANCE_CONTROLLER.start();
    instanceStarted=true;
  }
 catch (  AnotherInstanceRunningException e) {
    LOG.info(""String_Node_Str"");
    instanceStarted=false;
  }
catch (  Exception e) {
    JDLogger.exception(e);
    LOG.severe(""String_Node_Str"");
    instanceStarted=true;
  }
  JDController.getInstance();
  if (instanceStarted || JDInitFlags.SWITCH_NEW_INSTANCE) {
    JDTheme.setTheme(""String_Node_Str"");
    if (JDInitFlags.SHOW_SPLASH) {
      if (GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_SHOW_SPLASH,true)) {
        LOG.info(""String_Node_Str"");
        new GuiRunnable<Object>(){
          @Override public Object runSave(){
            try {
              new SplashScreen(JDController.getInstance());
            }
 catch (            Exception e) {
              JDLogger.exception(e);
            }
            return null;
          }
        }
.waitForEDT();
      }
    }
    Interaction.deleteInteractions();
    start(args);
  }
 else {
    if (args.length > 0) {
      LOG.info(""String_Node_Str"");
      SINGLE_INSTANCE_CONTROLLER.sendToRunningInstance(args);
    }
 else {
      LOG.info(""String_Node_Str"");
      SINGLE_INSTANCE_CONTROLLER.sendToRunningInstance(new String[]{""String_Node_Str""});
    }
    System.exit(0);
  }
}"
20910,"/** 
 * Collects all supported LAFs for the current system
 * @return
 */
public static LookAndFeelWrapper[] getSupportedLookAndFeels(){
  LookAndFeelInfo[] lafis=UIManager.getInstalledLookAndFeels();
  ArrayList<LookAndFeelWrapper> ret=new ArrayList<LookAndFeelWrapper>();
  for (int i=0; i < lafis.length; i++) {
    String clname=lafis[i].getClassName();
    if (clname.contains(""String_Node_Str"") && JDUtilities.getJavaVersion() >= 1.6) {
      ret.add(new LookAndFeelWrapper(lafis[i]).setName(lafis[i].getName().replaceAll(""String_Node_Str"",""String_Node_Str"").trim()));
    }
 else     if (clname.contains(""String_Node_Str"")) {
      ret.add(new LookAndFeelWrapper(lafis[i]).setName(lafis[i].getName().replaceAll(""String_Node_Str"",""String_Node_Str"").trim()));
    }
 else     if (clname.contains(""String_Node_Str"")) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(lafis[i].getName());
      ret.add(lafm);
    }
 else     if (clname.startsWith(""String_Node_Str"")) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(""String_Node_Str"");
      ret.add(lafm);
    }
 else     if (clname.endsWith(""String_Node_Str"")) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(""String_Node_Str"");
      ret.add(lafm);
    }
 else     if (clname.endsWith(""String_Node_Str"") && OSDetector.isLinux()) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(""String_Node_Str"");
      ret.add(lafm);
    }
 else     if (clname.endsWith(""String_Node_Str"") && OSDetector.isLinux()) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(""String_Node_Str"");
      ret.add(lafm);
    }
 else     if (clname.startsWith(""String_Node_Str"")) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(lafis[i].getName());
      ret.add(lafm);
    }
 else     if (JDInitFlags.SWITCH_DEBUG) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(lafis[i].getName() + ""String_Node_Str"");
      ret.add(lafm);
    }
  }
  return ret.toArray(new LookAndFeelWrapper[]{});
}","/** 
 * Collects all supported LAFs for the current system
 * @return
 */
public static LookAndFeelWrapper[] getSupportedLookAndFeels(){
  LookAndFeelInfo[] lafis=UIManager.getInstalledLookAndFeels();
  ArrayList<LookAndFeelWrapper> ret=new ArrayList<LookAndFeelWrapper>();
  for (int i=0; i < lafis.length; i++) {
    String clname=lafis[i].getClassName();
    if (clname.contains(""String_Node_Str"") && JDUtilities.getJavaVersion() >= 1.6) {
      ret.add(new LookAndFeelWrapper(lafis[i]).setName(lafis[i].getName().replaceAll(""String_Node_Str"",""String_Node_Str"").trim()));
    }
 else     if (clname.contains(""String_Node_Str"")) {
      ret.add(new LookAndFeelWrapper(lafis[i]).setName(lafis[i].getName().replaceAll(""String_Node_Str"",""String_Node_Str"").trim()));
    }
 else     if (clname.contains(""String_Node_Str"")) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(lafis[i].getName());
      ret.add(lafm);
    }
 else     if ((clname.startsWith(""String_Node_Str"")) || (clname.startsWith(""String_Node_Str""))) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(""String_Node_Str"");
      ret.add(lafm);
    }
 else     if (clname.endsWith(""String_Node_Str"")) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(""String_Node_Str"");
      ret.add(lafm);
    }
 else     if (clname.endsWith(""String_Node_Str"") && OSDetector.isLinux()) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(""String_Node_Str"");
      ret.add(lafm);
    }
 else     if (clname.endsWith(""String_Node_Str"") && OSDetector.isLinux()) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(""String_Node_Str"");
      ret.add(lafm);
    }
 else     if (clname.startsWith(""String_Node_Str"")) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(lafis[i].getName());
      ret.add(lafm);
    }
 else     if (JDInitFlags.SWITCH_DEBUG) {
      LookAndFeelWrapper lafm=new LookAndFeelWrapper(lafis[i]);
      lafm.setName(lafis[i].getName() + ""String_Node_Str"");
      ret.add(lafm);
    }
  }
  return ret.toArray(new LookAndFeelWrapper[]{});
}"
20911,"@Override public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  requestFileInformation(link);
  String freelink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (freelink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(""String_Node_Str"" + freelink);
  String id=br.getRegex(""String_Node_Str"").getMatch(0);
  if (id == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(""String_Node_Str"" + id);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
  String server=br.getRegex(""String_Node_Str"").getMatch(0);
  String key=br.getRegex(""String_Node_Str"").getMatch(0);
  if (server == null || key == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String dllink=""String_Node_Str"" + server + ""String_Node_Str""+ key;
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  int tt=60;
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    tt=Integer.parseInt(ttt);
  }
  tt=tt + 1;
  sleep(tt * 1001,link);
  br.setDebug(true);
  jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1).startDownload();
  if ((dl.getConnection().getContentType().contains(""String_Node_Str""))) {
    String check=br.getURL();
    if (check.contains(""String_Node_Str"") || check.contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  requestFileInformation(link);
  String freelink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (freelink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(""String_Node_Str"" + freelink);
  String id=br.getRegex(""String_Node_Str"").getMatch(0);
  if (id == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  br.getPage(""String_Node_Str"" + id);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
  String server=br.getRegex(""String_Node_Str"").getMatch(0);
  String key=br.getRegex(""String_Node_Str"").getMatch(0);
  if (server == null || key == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String dllink=""String_Node_Str"" + server + ""String_Node_Str""+ key;
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  int tt=60;
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    tt=Integer.parseInt(ttt);
  }
  tt=tt + 1;
  sleep(tt * 1001,link);
  br.setDebug(true);
  jd.plugins.BrowserAdapter.openDownload(br,link,dllink,false,1);
  if ((dl.getConnection().getContentType().contains(""String_Node_Str""))) {
    String check=br.getURL();
    if (check.contains(""String_Node_Str"") || check.contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
    if (check.contains(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20912,"private void login(Account account) throws Exception {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(""String_Node_Str"");
  br.setDebug(true);
  br.postPage(""String_Node_Str"",""String_Node_Str"" + Encoding.urlEncode(account.getUser()) + ""String_Node_Str""+ Encoding.urlEncode(account.getPass())+ ""String_Node_Str"");
  if (br.getCookie(""String_Node_Str"",""String_Node_Str"") == null)   throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
}","private void login(Account account) throws Exception {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(""String_Node_Str"");
  br.setDebug(true);
  br.postPage(""String_Node_Str"",""String_Node_Str"" + Encoding.urlEncode(account.getUser()) + ""String_Node_Str""+ Encoding.urlEncode(account.getPass())+ ""String_Node_Str"");
  String acc=br.getCookie(""String_Node_Str"",""String_Node_Str"");
  String prem=br.getCookie(""String_Node_Str"",""String_Node_Str"");
  if (acc == null && prem == null)   throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
  if (acc != null && prem == null) {
    br.setCookie(""String_Node_Str"",""String_Node_Str"",acc);
  }
}"
20913,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadLink.getDownloadURL(),true,0);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.getPage(""String_Node_Str"");
  br.setFollowRedirects(false);
  br.getPage(downloadLink.getDownloadURL());
  String url=null;
  if (br.getRedirectLocation() == null) {
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
 else {
    url=br.getRedirectLocation();
  }
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20914,"public void handle(Request request,Response response){
  Document xml=JDUtilities.parseXmlString(""String_Node_Str"",false);
  response.setReturnType(""String_Node_Str"");
  response.setReturnStatus(Response.OK);
  if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Vector<String> commandvec=new Vector<String>();
    Vector<String> infovector=new Vector<String>();
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    response.addContent(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + getVersion() + ""String_Node_Str""+ ""String_Node_Str"");
    response.addContent(""String_Node_Str"");
    for (int commandcount=0; commandcount < commandvec.size(); commandcount++) {
      if (commandvec.get(commandcount).equals(""String_Node_Str"")) {
        if (commandcount != 0)         response.addContent(""String_Node_Str"");
        response.addContent(""String_Node_Str"" + infovector.get(commandcount) + ""String_Node_Str"");
      }
 else {
        response.addContent(""String_Node_Str"" + commandvec.get(commandcount) + ""String_Node_Str""+ commandvec.get(commandcount)+ ""String_Node_Str""+ infovector.get(commandcount)+ ""String_Node_Str"");
      }
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    if (SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(Configuration.PARAM_GLOBAL_IP_DISABLE,false)) {
      response.addContent(""String_Node_Str"");
    }
 else {
      response.addContent(IPCheck.getIPAddress());
    }
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Random r=new Random();
    response.addContent(r.nextInt(255) + ""String_Node_Str"" + r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Property config=JDUtilities.getConfiguration();
    response.addContent(""String_Node_Str"");
    if (request.getParameters().containsKey(""String_Node_Str"")) {
      config=SubConfiguration.getConfig(request.getParameters().get(""String_Node_Str"").toUpperCase());
    }
    for (    Entry<String,Object> next : config.getProperties().entrySet()) {
      response.addContent(next.getKey() + ""String_Node_Str"" + next.getValue()+ ""String_Node_Str"");
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getJDTitle());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(getVersion());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(SubConfiguration.getConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,0));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      counter+=fp.getDownloadLinkList().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        fp_xml.appendChild(addDownloadLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getConnectionManager().getIncommingBandwidthUsage() / 1000);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getDownloadStatus().toString());
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      Element fp_xml=addGrabberPackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinks()) {
        fp_xml.appendChild(addGrabberLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    int counter=0;
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      counter+=fp.getDownloadLinks().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean isbusy=false;
    if (LinkGrabberPanel.getLinkGrabber().isRunning())     isbusy=true;
 else     isbusy=false;
    response.addContent(isbusy);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean value=GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true);
    response.addContent(value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().startDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().pauseDownloads(!DownloadWatchDog.getInstance().isPaused());
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().stopDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().toggleStartStop();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_WEBUPDATE_AUTO_RESTART,true);
      SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_WEBUPDATE_DISABLE,false);
    }
    WebUpdate.doUpdateCheck(true);
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    Reconnecter.doManualReconnect();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.restartJD(false);
      }
    }
).start();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.getController().exit();
      }
    }
).start();
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newdllimit=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newdllimit);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newsimdl=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newsimdl);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean value=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + value);
    if (value != GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true)) {
      GUIUtils.getConfig().setProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,value);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + value + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + value + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<String> links=new ArrayList<String>();
    String link=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    for (    String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(link,false),null)) {
      links.add(tlink);
    }
    if (request.getParameters().size() > 0) {
      Iterator<String> it=request.getParameters().keySet().iterator();
      while (it.hasNext()) {
        String help=it.next();
        if (!request.getParameter(help).equals(""String_Node_Str"")) {
          links.add(request.getParameter(help));
        }
      }
    }
    StringBuilder ret=new StringBuilder();
    char tmp[]=new char[]{'""','\r','\n'};
    for (    String element : links) {
      ret.append('\""');
      ret.append(element.trim());
      ret.append(tmp);
    }
    link=ret.toString();
    new DistributeData(link,false).start();
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        logger.warning(e.toString());
      }
      while (grabberIsBusy) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          logger.warning(e.toString());
        }
      }
      ArrayList<LinkGrabberFilePackage> lgPackages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        lgPackages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < lgPackages.size(); i++) {
          for (          String linkurl : links) {
            for (            DownloadLink dll : lgPackages.get(i).getDownloadLinks()) {
              if (linkurl.equals(dll.getBrowserUrl())) {
                LinkGrabberPanel.getLinkGrabber().confirmPackage(lgPackages.get(i),null,i);
              }
            }
          }
        }
      }
    }
    response.addContent(""String_Node_Str"" + link + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    ArrayList<LinkGrabberFilePackage> packagesBefore=null;
    ArrayList<LinkGrabberFilePackage> packages=null;
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      packagesBefore=new ArrayList<LinkGrabberFilePackage>();
      packagesBefore.addAll(LinkGrabberController.getInstance().getPackages());
    }
    if (dlcfilestr.matches(""String_Node_Str"")) {
      String containerFormat=new Regex(dlcfilestr,""String_Node_Str"").getMatch(0);
      File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ containerFormat);
      try {
        Browser.download(container,dlcfilestr);
        JDUtilities.getController().loadContainerFile(container,false,false);
        try {
          Thread.sleep(3000);
        }
 catch (        Exception e) {
          JDLogger.exception(e);
        }
        container.delete();
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
    }
 else {
      JDUtilities.getController().loadContainerFile(new File(dlcfilestr),false,false);
    }
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        logger.warning(e.toString());
      }
      while (grabberIsBusy) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          logger.warning(e.toString());
        }
      }
synchronized (LinkGrabberController.ControllerLock) {
        packages=new ArrayList<LinkGrabberFilePackage>();
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (        LinkGrabberFilePackage packa : packages) {
          for (          LinkGrabberFilePackage packb : packagesBefore) {
            if (packa.equals(packb)) {
              packages.remove(packa);
            }
          }
        }
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberPanel.getLinkGrabber().confirmPackage(packages.get(i),null,i);
        }
      }
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<DownloadLink> dllinks=new ArrayList<DownloadLink>();
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    boolean savefromGrabber=new Regex(request.getRequestUrl(),""String_Node_Str"").matches();
    if (savefromGrabber) {
      if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
        response.addContent(ERROR_LINK_GRABBER_RUNNING);
      }
 else {
        ArrayList<LinkGrabberFilePackage> lgPackages=new ArrayList<LinkGrabberFilePackage>();
        ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
          lgPackages.addAll(LinkGrabberController.getInstance().getPackages());
          for (int i=0; i < lgPackages.size(); i++) {
            DownloadLink dl=null;
            for (            DownloadLink link : lgPackages.get(i).getDownloadLinks()) {
              link.setEnabled(false);
              if (dl == null)               dl=link;
            }
            LinkGrabberPanel.getLinkGrabber().confirmPackage(lgPackages.get(i),null,i);
            packages.add(dl.getFilePackage());
          }
          JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
          for (          FilePackage fp : packages) {
            JDUtilities.getDownloadController().removePackage(fp);
          }
        }
      }
    }
 else {
      dllinks=JDUtilities.getDownloadController().getAllDownloadLinks();
      JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newrc=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newrc);
    if (newrc != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,newrc);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + newrc + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + newrc + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newuseprem=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newuseprem);
    if (newuseprem != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,newuseprem);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + newuseprem + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + newuseprem + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> srcPackages=new ArrayList<LinkGrabberFilePackage>();
      String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage destPackage=LinkGrabberController.getInstance().getFPwithName(packagenames[0]);
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
        }
 else {
          for (          LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
            for (            String src : packagenames) {
              if ((pack.getName().equals(src)) && (pack != destPackage)) {
                srcPackages.add(pack);
              }
            }
          }
          for (          LinkGrabberFilePackage pack : srcPackages) {
            destPackage.addAll(pack.getDownloadLinks());
            LinkGrabberController.getInstance().removePackage(pack);
          }
          if (srcPackages.size() > 0) {
            if (srcPackages.size() < packagenames.length - 1) {
              response.addContent(""String_Node_Str"");
            }
            response.addContent(""String_Node_Str"" + srcPackages.size() + ""String_Node_Str""+ packagenames[0]+ ""String_Node_Str"");
            for (int i=0; i < srcPackages.size(); ++i) {
              if (i != 0)               response.addContent(""String_Node_Str"");
              response.addContent(""String_Node_Str"" + srcPackages.get(i).getName() + ""String_Node_Str"");
            }
          }
 else {
            response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
          }
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage destPackage=LinkGrabberController.getInstance().getFPwithName(packagenames[0]);
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
        }
 else {
          destPackage.setName(packagenames[1]);
          LinkGrabberController.getInstance().throwRefresh();
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str""+ packagenames[1]+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberPanel.getLinkGrabber().confirmPackage(packages.get(i),null,i);
        }
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> addedlist=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
      String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberFilePackage fp=packages.get(i);
          for (          String name : packagenames) {
            if (name.equalsIgnoreCase(fp.getName())) {
              LinkGrabberPanel.getLinkGrabber().confirmPackage(fp,null,i);
              addedlist.add(fp);
            }
          }
        }
        response.addContent(""String_Node_Str"");
        for (int i=0; i < addedlist.size(); i++) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          response.addContent(""String_Node_Str"" + addedlist.get(i).getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<String> delLinks=new ArrayList<String>();
      ArrayList<String> delPackages=new ArrayList<String>();
      String[] types=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        response.addContent(""String_Node_Str"");
        for (int i=0; i < types.length; ++i) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          if (types[i].equals(LINK_TYPE_OFFLINE) || types[i].equals(LINK_TYPE_AVAIL)) {
            response.addContent(types[i]);
          }
 else {
            response.addContent(""String_Node_Str"" + types[i] + ""String_Node_Str"");
          }
        }
        for (        LinkGrabberFilePackage fp : packages) {
          ArrayList<DownloadLink> links=new ArrayList<DownloadLink>(fp.getDownloadLinks());
          for (          DownloadLink link : links) {
            for (            String type : types) {
              if ((type.equals(LINK_TYPE_OFFLINE) && link.getAvailableStatus().equals(AvailableStatus.FALSE)) || (type.equals(LINK_TYPE_AVAIL) && link.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS))) {
                fp.remove(link);
                delLinks.add(link.getDownloadURL());
              }
            }
          }
          if (fp.getDownloadLinks().size() == 0) {
            delPackages.add(fp.getName());
          }
        }
        response.addContent(""String_Node_Str"" + delLinks.size() + ""String_Node_Str""+ delLinks+ ""String_Node_Str""+ delPackages.size()+ ""String_Node_Str""+ delPackages+ ""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (        LinkGrabberFilePackage fp : packages) {
          LinkGrabberController.getInstance().removePackage(fp);
        }
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<LinkGrabberFilePackage> removelist=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberFilePackage fp=packages.get(i);
          for (          String name : packagenames) {
            if (name.equalsIgnoreCase(fp.getName())) {
              LinkGrabberController.getInstance().removePackage(fp);
              removelist.add(fp);
            }
          }
        }
        response.addContent(""String_Node_Str"");
        for (int i=0; i < removelist.size(); i++) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          response.addContent(""String_Node_Str"" + removelist.get(i).getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
    packages.addAll(DownloadController.getInstance().getPackages());
    for (    FilePackage fp : packages) {
      DownloadController.getInstance().removePackage(fp);
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
    ArrayList<FilePackage> removelist=new ArrayList<FilePackage>();
    String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
    packages.addAll(DownloadController.getInstance().getPackages());
    for (int i=0; i < packages.size(); i++) {
      FilePackage fp=packages.get(i);
      for (      String name : packagenames) {
        if (name.equalsIgnoreCase(fp.getName())) {
          DownloadController.getInstance().removePackage(fp);
          removelist.add(fp);
        }
      }
    }
    response.addContent(""String_Node_Str"");
    for (int i=0; i < removelist.size(); i++) {
      if (i != 0)       response.addContent(""String_Node_Str"");
      response.addContent(""String_Node_Str"" + removelist.get(i).getName() + ""String_Node_Str"");
    }
  }
 else {
    response.addContent(ERROR_MALFORMED_REQUEST);
  }
}","public void handle(Request request,Response response){
  Document xml=JDUtilities.parseXmlString(""String_Node_Str"",false);
  response.setReturnType(""String_Node_Str"");
  response.setReturnStatus(Response.OK);
  if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Vector<String> commandvec=new Vector<String>();
    Vector<String> infovector=new Vector<String>();
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    response.addContent(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + getVersion() + ""String_Node_Str""+ ""String_Node_Str"");
    response.addContent(""String_Node_Str"");
    for (int commandcount=0; commandcount < commandvec.size(); commandcount++) {
      if (commandvec.get(commandcount).equals(""String_Node_Str"")) {
        if (commandcount != 0)         response.addContent(""String_Node_Str"");
        response.addContent(""String_Node_Str"" + infovector.get(commandcount) + ""String_Node_Str"");
      }
 else {
        response.addContent(""String_Node_Str"" + commandvec.get(commandcount) + ""String_Node_Str""+ commandvec.get(commandcount)+ ""String_Node_Str""+ infovector.get(commandcount)+ ""String_Node_Str"");
      }
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    if (SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(Configuration.PARAM_GLOBAL_IP_DISABLE,false)) {
      response.addContent(""String_Node_Str"");
    }
 else {
      response.addContent(IPCheck.getIPAddress());
    }
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Random r=new Random();
    response.addContent(r.nextInt(255) + ""String_Node_Str"" + r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Property config=JDUtilities.getConfiguration();
    response.addContent(""String_Node_Str"");
    if (request.getParameters().containsKey(""String_Node_Str"")) {
      config=SubConfiguration.getConfig(request.getParameters().get(""String_Node_Str"").toUpperCase());
    }
    for (    Entry<String,Object> next : config.getProperties().entrySet()) {
      response.addContent(next.getKey() + ""String_Node_Str"" + next.getValue()+ ""String_Node_Str"");
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getJDTitle());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(getVersion());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(SubConfiguration.getConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,0));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      counter+=fp.getDownloadLinkList().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        fp_xml.appendChild(addDownloadLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getConnectionManager().getIncommingBandwidthUsage() / 1000);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getDownloadStatus().toString());
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      Element fp_xml=addGrabberPackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinks()) {
        fp_xml.appendChild(addGrabberLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    int counter=0;
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      counter+=fp.getDownloadLinks().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean isbusy=false;
    if (LinkGrabberPanel.getLinkGrabber().isRunning())     isbusy=true;
 else     isbusy=false;
    response.addContent(isbusy);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    boolean value=GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true);
    response.addContent(value);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().startDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().pauseDownloads(!DownloadWatchDog.getInstance().isPaused());
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().stopDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().toggleStartStop();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_WEBUPDATE_AUTO_RESTART,true);
      SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_WEBUPDATE_DISABLE,false);
    }
    WebUpdate.doUpdateCheck(true);
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    Reconnecter.doManualReconnect();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.restartJD(false);
      }
    }
).start();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.getController().exit();
      }
    }
).start();
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newdllimit=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newdllimit);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newsimdl=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newsimdl);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean value=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + value);
    if (value != GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,true)) {
      GUIUtils.getConfig().setProperty(JDGuiConstants.PARAM_START_AFTER_ADDING_LINKS,value);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + value + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + value + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<String> links=new ArrayList<String>();
    String link=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    for (    String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(link,false),null)) {
      links.add(tlink);
    }
    if (request.getParameters().size() > 0) {
      Iterator<String> it=request.getParameters().keySet().iterator();
      while (it.hasNext()) {
        String help=it.next();
        if (!request.getParameter(help).equals(""String_Node_Str"")) {
          links.add(request.getParameter(help));
        }
      }
    }
    StringBuilder ret=new StringBuilder();
    char tmp[]=new char[]{'""','\r','\n'};
    for (    String element : links) {
      ret.append('\""');
      ret.append(element.trim());
      ret.append(tmp);
    }
    link=ret.toString();
    new DistributeData(link,false).start();
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        logger.warning(e.toString());
      }
      while (grabberIsBusy) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          logger.warning(e.toString());
        }
      }
      ArrayList<LinkGrabberFilePackage> lgPackages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        lgPackages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < lgPackages.size(); i++) {
          for (          String linkurl : links) {
            for (            DownloadLink dll : lgPackages.get(i).getDownloadLinks()) {
              if (linkurl.equals(dll.getBrowserUrl())) {
                LinkGrabberPanel.getLinkGrabber().confirmPackage(lgPackages.get(i),null,i);
              }
            }
          }
        }
      }
    }
    response.addContent(""String_Node_Str"" + link + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    ArrayList<LinkGrabberFilePackage> packagesBefore=null;
    ArrayList<LinkGrabberFilePackage> packages=null;
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      packagesBefore=new ArrayList<LinkGrabberFilePackage>();
      packagesBefore.addAll(LinkGrabberController.getInstance().getPackages());
    }
    if (dlcfilestr.matches(""String_Node_Str"")) {
      String containerFormat=new Regex(dlcfilestr,""String_Node_Str"").getMatch(0);
      File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ containerFormat);
      try {
        Browser.download(container,dlcfilestr);
        JDUtilities.getController().loadContainerFile(container,false,false);
        try {
          Thread.sleep(3000);
        }
 catch (        Exception e) {
          JDLogger.exception(e);
        }
        container.delete();
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
    }
 else {
      JDUtilities.getController().loadContainerFile(new File(dlcfilestr),false,false);
    }
    if (request.getRequestUrl().matches(""String_Node_Str"")) {
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        logger.warning(e.toString());
      }
      while (grabberIsBusy) {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          logger.warning(e.toString());
        }
      }
synchronized (LinkGrabberController.ControllerLock) {
        packages=new ArrayList<LinkGrabberFilePackage>();
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (        LinkGrabberFilePackage packa : packages) {
          for (          LinkGrabberFilePackage packb : packagesBefore) {
            if (packa.equals(packb)) {
              packages.remove(packa);
            }
          }
        }
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberPanel.getLinkGrabber().confirmPackage(packages.get(i),null,i);
        }
      }
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<DownloadLink> dllinks=new ArrayList<DownloadLink>();
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    boolean savefromGrabber=new Regex(request.getRequestUrl(),""String_Node_Str"").matches();
    if (savefromGrabber) {
      if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
        response.addContent(ERROR_LINK_GRABBER_RUNNING);
      }
 else {
        ArrayList<LinkGrabberFilePackage> lgPackages=new ArrayList<LinkGrabberFilePackage>();
        ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
          lgPackages.addAll(LinkGrabberController.getInstance().getPackages());
          for (int i=0; i < lgPackages.size(); i++) {
            DownloadLink dl=null;
            for (            DownloadLink link : lgPackages.get(i).getDownloadLinks()) {
              dllinks.add(link);
              link.setEnabled(false);
              if (dl == null)               dl=link;
            }
            LinkGrabberPanel.getLinkGrabber().confirmPackage(lgPackages.get(i),null,i);
            packages.add(dl.getFilePackage());
          }
          JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
          for (          FilePackage fp : packages) {
            JDUtilities.getDownloadController().removePackage(fp);
          }
        }
      }
    }
 else {
      dllinks=JDUtilities.getDownloadController().getAllDownloadLinks();
      JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newrc=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newrc);
    if (newrc != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,newrc);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + newrc + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + newrc + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newuseprem=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newuseprem);
    if (newuseprem != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,newuseprem);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + newuseprem + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + newuseprem + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> srcPackages=new ArrayList<LinkGrabberFilePackage>();
      String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage destPackage=LinkGrabberController.getInstance().getFPwithName(packagenames[0]);
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
        }
 else {
          for (          LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
            for (            String src : packagenames) {
              if ((pack.getName().equals(src)) && (pack != destPackage)) {
                srcPackages.add(pack);
              }
            }
          }
          for (          LinkGrabberFilePackage pack : srcPackages) {
            destPackage.addAll(pack.getDownloadLinks());
            LinkGrabberController.getInstance().removePackage(pack);
          }
          if (srcPackages.size() > 0) {
            if (srcPackages.size() < packagenames.length - 1) {
              response.addContent(""String_Node_Str"");
            }
            response.addContent(""String_Node_Str"" + srcPackages.size() + ""String_Node_Str""+ packagenames[0]+ ""String_Node_Str"");
            for (int i=0; i < srcPackages.size(); ++i) {
              if (i != 0)               response.addContent(""String_Node_Str"");
              response.addContent(""String_Node_Str"" + srcPackages.get(i).getName() + ""String_Node_Str"");
            }
          }
 else {
            response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
          }
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        LinkGrabberFilePackage destPackage=LinkGrabberController.getInstance().getFPwithName(packagenames[0]);
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str"");
        }
 else {
          destPackage.setName(packagenames[1]);
          LinkGrabberController.getInstance().throwRefresh();
          response.addContent(""String_Node_Str"" + packagenames[0] + ""String_Node_Str""+ packagenames[1]+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberPanel.getLinkGrabber().confirmPackage(packages.get(i),null,i);
        }
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> addedlist=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
      String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberFilePackage fp=packages.get(i);
          for (          String name : packagenames) {
            if (name.equalsIgnoreCase(fp.getName())) {
              LinkGrabberPanel.getLinkGrabber().confirmPackage(fp,null,i);
              addedlist.add(fp);
            }
          }
        }
        response.addContent(""String_Node_Str"");
        for (int i=0; i < addedlist.size(); i++) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          response.addContent(""String_Node_Str"" + addedlist.get(i).getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<String> delLinks=new ArrayList<String>();
      ArrayList<String> delPackages=new ArrayList<String>();
      String[] types=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        response.addContent(""String_Node_Str"");
        for (int i=0; i < types.length; ++i) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          if (types[i].equals(LINK_TYPE_OFFLINE) || types[i].equals(LINK_TYPE_AVAIL)) {
            response.addContent(types[i]);
          }
 else {
            response.addContent(""String_Node_Str"" + types[i] + ""String_Node_Str"");
          }
        }
        for (        LinkGrabberFilePackage fp : packages) {
          ArrayList<DownloadLink> links=new ArrayList<DownloadLink>(fp.getDownloadLinks());
          for (          DownloadLink link : links) {
            for (            String type : types) {
              if ((type.equals(LINK_TYPE_OFFLINE) && link.getAvailableStatus().equals(AvailableStatus.FALSE)) || (type.equals(LINK_TYPE_AVAIL) && link.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS))) {
                fp.remove(link);
                delLinks.add(link.getDownloadURL());
              }
            }
          }
          if (fp.getDownloadLinks().size() == 0) {
            delPackages.add(fp.getName());
          }
        }
        response.addContent(""String_Node_Str"" + delLinks.size() + ""String_Node_Str""+ delLinks+ ""String_Node_Str""+ delPackages.size()+ ""String_Node_Str""+ delPackages+ ""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (        LinkGrabberFilePackage fp : packages) {
          LinkGrabberController.getInstance().removePackage(fp);
        }
        response.addContent(""String_Node_Str"");
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      ArrayList<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
      ArrayList<LinkGrabberFilePackage> removelist=new ArrayList<LinkGrabberFilePackage>();
synchronized (LinkGrabberController.ControllerLock) {
        packages.addAll(LinkGrabberController.getInstance().getPackages());
        for (int i=0; i < packages.size(); i++) {
          LinkGrabberFilePackage fp=packages.get(i);
          for (          String name : packagenames) {
            if (name.equalsIgnoreCase(fp.getName())) {
              LinkGrabberController.getInstance().removePackage(fp);
              removelist.add(fp);
            }
          }
        }
        response.addContent(""String_Node_Str"");
        for (int i=0; i < removelist.size(); i++) {
          if (i != 0)           response.addContent(""String_Node_Str"");
          response.addContent(""String_Node_Str"" + removelist.get(i).getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
    packages.addAll(DownloadController.getInstance().getPackages());
    for (    FilePackage fp : packages) {
      DownloadController.getInstance().removePackage(fp);
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<FilePackage> packages=new ArrayList<FilePackage>();
    ArrayList<FilePackage> removelist=new ArrayList<FilePackage>();
    String[] packagenames=Encoding.htmlDecode(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0)).split(""String_Node_Str"");
    packages.addAll(DownloadController.getInstance().getPackages());
    for (int i=0; i < packages.size(); i++) {
      FilePackage fp=packages.get(i);
      for (      String name : packagenames) {
        if (name.equalsIgnoreCase(fp.getName())) {
          DownloadController.getInstance().removePackage(fp);
          removelist.add(fp);
        }
      }
    }
    response.addContent(""String_Node_Str"");
    for (int i=0; i < removelist.size(); i++) {
      if (i != 0)       response.addContent(""String_Node_Str"");
      response.addContent(""String_Node_Str"" + removelist.get(i).getName() + ""String_Node_Str"");
    }
  }
 else {
    response.addContent(ERROR_MALFORMED_REQUEST);
  }
}"
20915,"/** 
 * MTH File wird geladen und verarbeitet
 */
private void loadMTHFile(){
  File f=getResourceFile(""String_Node_Str"");
  String str=null;
  if (f.exists()) {
    str=JDIO.readFileToString(f);
  }
 else {
    str=""String_Node_Str"";
  }
  Document mth=JDUtilities.parseXmlString(str,false);
  logger.info(""String_Node_Str"" + f);
  if (mth == null) {
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
  }
  createLetterDBFormMTH(mth);
}","/** 
 * MTH File wird geladen und verarbeitet
 */
public void loadMTHFile(){
  File f=getResourceFile(""String_Node_Str"");
  loadMTHFile(f);
}"
20916,"public int trainCaptcha(final File captchafile,int letterNum){
  if (!captchafile.exists()) {
    if (Utilities.isLoggerActive()) {
      logger.severe(captchafile.getAbsolutePath() + ""String_Node_Str"");
    }
    return -1;
  }
  if (isShowDebugGui()) {
    destroyScrollPaneWindows();
  }
  final String captchaHash=JDHash.getMD5(captchafile);
  if (isCaptchaInMTH(captchaHash)) {
    if (Utilities.isLoggerActive()) {
      logger.fine(""String_Node_Str"" + captchafile);
    }
    return -1;
  }
  Image captchaImage=Utilities.loadImage(captchafile);
  final Captcha captcha=createCaptcha(captchaImage);
  if (captcha == null)   return -1;
  String code=null;
  new GuiRunnable<Object>(){
    @Override public Object runSave(){
      if (f != null) {
        f.dispose();
      }
      f=new JDialog(DummyFrame.getDialogParent());
      f.setLocation(500,10);
      f.setLayout(new GridBagLayout());
      f.add(new JLabel(""String_Node_Str"" + captchafile.getName()),Utilities.getGBC(0,0,10,1));
      f.add(new ImageComponent(captcha.getImage()),Utilities.getGBC(0,1,10,1));
      f.setSize(1400,800);
      f.pack();
      f.setVisible(true);
      return null;
    }
  }
.waitForEDT();
  final String guess=checkCaptcha(captchafile,captcha);
  final Letter[] letters=captcha.getLetters(letterNum);
  if (letters == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
class MyRunnable implements Runnable {
    public String code=null;
    public int ret=0;
    public void run(){
      if (getCodeFromFileName(captchafile.getName()) == null) {
        code=new GuiRunnable<String>(){
          @Override public String runSave(){
            return JOptionPane.showInputDialog(""String_Node_Str"" + guess,guess);
          }
        }
.getReturnValue();
        if (code != null && code.equals(guess)) {
          code=""String_Node_Str"";
        }
 else         if (code == null) {
          if (new GuiRunnable<Boolean>(){
            @Override public Boolean runSave(){
              return JOptionPane.showConfirmDialog(new JFrame(),""String_Node_Str"") == JOptionPane.OK_OPTION;
            }
          }
.getReturnValue()) {
            ret=-2;
          }
        }
      }
 else {
        code=getCodeFromFileName(captchafile.getName());
        if (Utilities.isLoggerActive()) {
          logger.warning(""String_Node_Str"" + captchaHash + ""String_Node_Str""+ code);
        }
      }
synchronized (this) {
        this.notify();
      }
    }
  }
  MyRunnable run=new MyRunnable();
  Thread inpThread=new Thread(run);
  inpThread.start();
  new GuiRunnable<Object>(){
    @Override public Object runSave(){
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,3,10,1));
      f.add(new ImageComponent(captcha.getImageWithGaps(1)),Utilities.getGBC(0,4,10,1));
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,5,10,1));
      for (int i=0; i < letters.length; i++) {
        f.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,6,1,1));
        JLabel jl=new JLabel(""String_Node_Str"");
        jl.setForeground(Color.RED);
        f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
      }
      f.pack();
      return null;
    }
  }
.waitForEDT();
  final LetterComperator[] lcs=captcha.getLetterComperators();
  if (lcs == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (lcs.length != letters.length) {
    logger.severe(""String_Node_Str"" + lcs.length + ""String_Node_Str""+ letters.length);
  }
  new GuiRunnable<Object>(){
    @Override public Object runSave(){
      if (guess != null) {
        f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,3,10,1));
        f.add(new ImageComponent(captcha.getImageWithGaps(1)),Utilities.getGBC(0,4,10,1));
        f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,5,10,1));
        for (int i=0; i < letters.length; i++) {
          f.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,6,1,1));
          JLabel jl=new JLabel(""String_Node_Str"");
          jl.setForeground(Color.RED);
          f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
        }
        f.pack();
        for (int i=0; i < lcs.length; i++) {
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new ImageComponent(lcs[i].getB().getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,8,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,8,1,1));
          }
          JLabel jl=new JLabel(""String_Node_Str"");
          jl.setForeground(Color.RED);
          f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new JLabel(""String_Node_Str"" + lcs[i].getDecodedValue()),Utilities.getGBC(i * 2 + 1,9,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,9,1,1));
          }
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new JLabel(""String_Node_Str"" + Math.round(10 * lcs[i].getValityPercent()) / 10.0),Utilities.getGBC(i * 2 + 1,10,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,10,1,1));
          }
        }
        f.pack();
      }
 else {
        if (Utilities.isLoggerActive()) {
          logger.warning(""String_Node_Str"");
        }
      }
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,11,10,1));
      f.add(new ImageComponent(captcha.getImage()),Utilities.getGBC(0,12,10,1));
      f.pack();
      return null;
    }
  }
.waitForEDT();
  if (Utilities.isLoggerActive()) {
    logger.info(""String_Node_Str"" + guess + ""String_Node_Str""+ captcha.getValityPercent());
  }
  if (inpThread.isAlive()) {
synchronized (run) {
      try {
        run.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  if (run.ret == -2)   return -2;
  code=run.code;
  if (code == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (code.length() == 0) {
    code=guess;
  }
  if (code.length() != letters.length) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (code.indexOf(""String_Node_Str"") < 0) {
    String[] oldName=captchafile.getName().split(""String_Node_Str"");
    String ext=oldName[oldName.length - 1];
    String newName=captchafile.getParentFile().getAbsolutePath() + ""String_Node_Str"" + getMethodDirName()+ ""String_Node_Str""+ code+ ""String_Node_Str""+ ext;
    captchafile.renameTo(new File(newName));
  }
  int ret=0;
  for (int j=0; j < letters.length; j++) {
    final int i=j;
    if (!code.substring(i,i + 1).equals(""String_Node_Str"")) {
      if (guess != null && code.length() > i && guess.length() > i && code.substring(i,i + 1).equals(guess.substring(i,i + 1))) {
        ret++;
        if (lcs[i] != null) {
          lcs[i].getB().markGood();
        }
        if (lcs[i].getValityPercent() > 50) {
          letters[i].setOwner(this);
          letters[i].setSourcehash(captchaHash);
          letters[i].setDecodedValue(code.substring(i,i + 1));
          new Thread(new Runnable(){
            public void run(){
              final BasicWindow bws=new GuiRunnable<BasicWindow>(){
                @Override public BasicWindow runSave(){
                  return BasicWindow.showImage(letters[i].getImage(2),""String_Node_Str"" + letters[i].getDecodedValue());
                }
              }
.getReturnValue();
              try {
                Thread.sleep(1000);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
              new GuiRunnable<Object>(){
                @Override public Object runSave(){
                  bws.dispose();
                  return null;
                }
              }
.waitForEDT();
            }
          }
).start();
          letterDB.add(letters[i]);
        }
        if (!jas.getBoolean(""String_Node_Str"")) {
          letters[i].setOwner(this);
          letters[i].setSourcehash(captchaHash);
          letters[i].setDecodedValue(code.substring(i,i + 1));
          letterDB.add(letters[i]);
          new GuiRunnable<Object>(){
            @Override public Object runSave(){
              f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
              return null;
            }
          }
.waitForEDT();
        }
 else {
          new GuiRunnable<Object>(){
            @Override public Object runSave(){
              f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
              return null;
            }
          }
.waitForEDT();
        }
        new GuiRunnable<Object>(){
          @Override public Object runSave(){
            f.pack();
            return null;
          }
        }
.waitForEDT();
      }
 else {
        if (Utilities.isLoggerActive()) {
          logger.info(letterDB + ""String_Node_Str"");
        }
        if (lcs != null && lcs[i] != null && letterDB.size() > 30 && lcs[i] != null && lcs[i].getB() != null) {
          lcs[i].getB().markBad();
        }
        letters[i].setOwner(this);
        letters[i].setSourcehash(captchaHash);
        letters[i].setDecodedValue(code.substring(i,i + 1));
        letterDB.add(letters[i]);
        new Thread(new Runnable(){
          public void run(){
            final BasicWindow bws=new GuiRunnable<BasicWindow>(){
              @Override public BasicWindow runSave(){
                return BasicWindow.showImage(letters[i].getImage(2),""String_Node_Str"" + letters[i].getDecodedValue());
              }
            }
.getReturnValue();
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            new GuiRunnable<Object>(){
              @Override public Object runSave(){
                bws.dispose();
                return null;
              }
            }
.waitForEDT();
          }
        }
).start();
        new GuiRunnable<Object>(){
          @Override public Object runSave(){
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
            f.pack();
            return null;
          }
        }
.waitForEDT();
      }
    }
 else {
      new GuiRunnable<Object>(){
        @Override public Object runSave(){
          f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
          f.pack();
          return null;
        }
      }
.waitForEDT();
    }
  }
  sortLetterDB();
  new Thread(new Runnable(){
    public void run(){
      saveMTHFile();
    }
  }
).start();
  return ret;
}","public int trainCaptcha(final File captchafile,int letterNum){
  if (!captchafile.exists()) {
    if (Utilities.isLoggerActive()) {
      logger.severe(captchafile.getAbsolutePath() + ""String_Node_Str"");
    }
    return -1;
  }
  if (isShowDebugGui()) {
    destroyScrollPaneWindows();
  }
  final String captchaHash=JDHash.getMD5(captchafile);
  if (isCaptchaInMTH(captchaHash)) {
    if (Utilities.isLoggerActive()) {
      logger.fine(""String_Node_Str"" + captchafile);
    }
    return -1;
  }
  Image captchaImage=Utilities.loadImage(captchafile);
  final Captcha captcha=createCaptcha(captchaImage);
  int sk1Width=captcha.getWidth();
  int sk1Height=captcha.getHeight();
  if (sk1Height > 200 || sk1Width > 200) {
    if (sk1Height > sk1Width) {
      sk1Width=200 * sk1Width / sk1Height;
      sk1Height=200;
    }
 else {
      sk1Height=200 * sk1Height / sk1Width;
      sk1Width=200;
    }
  }
  final int skWidth=sk1Width;
  final int skHeight=sk1Height;
  if (captcha == null)   return -1;
  String code=null;
  new GuiRunnable<Object>(){
    @Override public Object runSave(){
      if (f != null) {
        f.dispose();
      }
      f=new JDialog(DummyFrame.getDialogParent());
      f.setLocation(500,10);
      f.setLayout(new GridBagLayout());
      f.add(new JLabel(""String_Node_Str"" + captchafile.getName()),Utilities.getGBC(0,0,10,1));
      f.add(new ImageComponent(captcha.getImage().getScaledInstance(skWidth,skHeight,1)),Utilities.getGBC(0,1,10,1));
      f.setSize(1400,800);
      f.pack();
      f.setVisible(true);
      return null;
    }
  }
.waitForEDT();
  final String guess=checkCaptcha(captchafile,captcha);
  final Letter[] letters=captcha.getLetters(letterNum);
  if (letters == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
class MyRunnable implements Runnable {
    public String code=null;
    public int ret=0;
    public void run(){
      if (getCodeFromFileName(captchafile.getName()) == null) {
        code=new GuiRunnable<String>(){
          @Override public String runSave(){
            return JOptionPane.showInputDialog(""String_Node_Str"" + guess,guess);
          }
        }
.getReturnValue();
        if (code != null && code.equals(guess)) {
          code=""String_Node_Str"";
        }
 else         if (code == null) {
          if (new GuiRunnable<Boolean>(){
            @Override public Boolean runSave(){
              return JOptionPane.showConfirmDialog(new JFrame(),""String_Node_Str"") == JOptionPane.OK_OPTION;
            }
          }
.getReturnValue()) {
            ret=-2;
          }
        }
      }
 else {
        code=getCodeFromFileName(captchafile.getName());
        if (Utilities.isLoggerActive()) {
          logger.warning(""String_Node_Str"" + captchaHash + ""String_Node_Str""+ code);
        }
      }
synchronized (this) {
        this.notify();
      }
    }
  }
  MyRunnable run=new MyRunnable();
  Thread inpThread=new Thread(run);
  inpThread.start();
  new GuiRunnable<Object>(){
    @Override public Object runSave(){
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,3,10,1));
      f.add(new ImageComponent(captcha.getImageWithGaps(1).getScaledInstance(skWidth,skHeight,1)),Utilities.getGBC(0,4,10,1));
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,5,10,1));
      for (int i=0; i < letters.length; i++) {
        f.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,6,1,1));
        JLabel jl=new JLabel(""String_Node_Str"");
        jl.setForeground(Color.RED);
        f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
      }
      f.pack();
      return null;
    }
  }
.waitForEDT();
  final LetterComperator[] lcs=captcha.getLetterComperators();
  if (lcs == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (lcs.length != letters.length) {
    logger.severe(""String_Node_Str"" + lcs.length + ""String_Node_Str""+ letters.length);
  }
  new GuiRunnable<Object>(){
    @Override public Object runSave(){
      if (guess != null) {
        f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,3,10,1));
        f.add(new ImageComponent(captcha.getImageWithGaps(1).getScaledInstance(skWidth,skHeight,1)),Utilities.getGBC(0,4,10,1));
        f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,5,10,1));
        for (int i=0; i < letters.length; i++) {
          f.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,6,1,1));
          JLabel jl=new JLabel(""String_Node_Str"");
          jl.setForeground(Color.RED);
          f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
        }
        f.pack();
        for (int i=0; i < lcs.length; i++) {
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new ImageComponent(lcs[i].getB().getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 1,8,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,8,1,1));
          }
          JLabel jl=new JLabel(""String_Node_Str"");
          jl.setForeground(Color.RED);
          f.add(jl,Utilities.getGBC(i * 2 + 2,6,1,1));
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new JLabel(""String_Node_Str"" + lcs[i].getDecodedValue()),Utilities.getGBC(i * 2 + 1,9,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,9,1,1));
          }
          if (lcs[i] != null && lcs[i].getB() != null) {
            f.add(new JLabel(""String_Node_Str"" + Math.round(10 * lcs[i].getValityPercent()) / 10.0),Utilities.getGBC(i * 2 + 1,10,1,1));
          }
 else {
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 1,10,1,1));
          }
        }
        f.pack();
      }
 else {
        if (Utilities.isLoggerActive()) {
          logger.warning(""String_Node_Str"");
        }
      }
      f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,11,10,1));
      f.add(new ImageComponent(captcha.getImage().getScaledInstance(skWidth,skHeight,1)),Utilities.getGBC(0,12,10,1));
      f.pack();
      return null;
    }
  }
.waitForEDT();
  if (Utilities.isLoggerActive()) {
    logger.info(""String_Node_Str"" + guess + ""String_Node_Str""+ captcha.getValityPercent());
  }
  if (inpThread.isAlive()) {
synchronized (run) {
      try {
        run.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  if (run.ret == -2)   return -2;
  code=run.code;
  if (code == null) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (code.length() == 0) {
    code=guess;
  }
  if (code.length() != letters.length) {
    File file=getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ captchafile.getName());
    file.getParentFile().mkdirs();
    captchafile.renameTo(file);
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return -1;
  }
  if (code.indexOf(""String_Node_Str"") < 0) {
    String[] oldName=captchafile.getName().split(""String_Node_Str"");
    String ext=oldName[oldName.length - 1];
    String newName=captchafile.getParentFile().getAbsolutePath() + ""String_Node_Str"" + getMethodDirName()+ ""String_Node_Str""+ code+ ""String_Node_Str""+ ext;
    captchafile.renameTo(new File(newName));
  }
  int ret=0;
  for (int j=0; j < letters.length; j++) {
    final int i=j;
    if (!code.substring(i,i + 1).equals(""String_Node_Str"")) {
      if (guess != null && code.length() > i && guess.length() > i && code.substring(i,i + 1).equals(guess.substring(i,i + 1))) {
        ret++;
        if (lcs[i] != null) {
          lcs[i].getB().markGood();
        }
        if (lcs[i].getValityPercent() > 50) {
          letters[i].setOwner(this);
          letters[i].setSourcehash(captchaHash);
          letters[i].setDecodedValue(code.substring(i,i + 1));
          new Thread(new Runnable(){
            public void run(){
              final BasicWindow bws=new GuiRunnable<BasicWindow>(){
                @Override public BasicWindow runSave(){
                  return BasicWindow.showImage(letters[i].getImage(2),""String_Node_Str"" + letters[i].getDecodedValue());
                }
              }
.getReturnValue();
              try {
                Thread.sleep(1000);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
              new GuiRunnable<Object>(){
                @Override public Object runSave(){
                  bws.dispose();
                  return null;
                }
              }
.waitForEDT();
            }
          }
).start();
          letterDB.add(letters[i]);
        }
        if (!jas.getBoolean(""String_Node_Str"")) {
          letters[i].setOwner(this);
          letters[i].setSourcehash(captchaHash);
          letters[i].setDecodedValue(code.substring(i,i + 1));
          letterDB.add(letters[i]);
          new GuiRunnable<Object>(){
            @Override public Object runSave(){
              f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
              return null;
            }
          }
.waitForEDT();
        }
 else {
          new GuiRunnable<Object>(){
            @Override public Object runSave(){
              f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
              return null;
            }
          }
.waitForEDT();
        }
        new GuiRunnable<Object>(){
          @Override public Object runSave(){
            f.pack();
            return null;
          }
        }
.waitForEDT();
      }
 else {
        if (Utilities.isLoggerActive()) {
          logger.info(letterDB + ""String_Node_Str"");
        }
        if (lcs != null && lcs[i] != null && letterDB.size() > 30 && lcs[i] != null && lcs[i].getB() != null) {
          lcs[i].getB().markBad();
        }
        letters[i].setOwner(this);
        letters[i].setSourcehash(captchaHash);
        letters[i].setDecodedValue(code.substring(i,i + 1));
        letterDB.add(letters[i]);
        new Thread(new Runnable(){
          public void run(){
            final BasicWindow bws=new GuiRunnable<BasicWindow>(){
              @Override public BasicWindow runSave(){
                return BasicWindow.showImage(letters[i].getImage(2),""String_Node_Str"" + letters[i].getDecodedValue());
              }
            }
.getReturnValue();
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            new GuiRunnable<Object>(){
              @Override public Object runSave(){
                bws.dispose();
                return null;
              }
            }
.waitForEDT();
          }
        }
).start();
        new GuiRunnable<Object>(){
          @Override public Object runSave(){
            f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
            f.pack();
            return null;
          }
        }
.waitForEDT();
      }
    }
 else {
      new GuiRunnable<Object>(){
        @Override public Object runSave(){
          f.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i + 1,13,1,1));
          f.pack();
          return null;
        }
      }
.waitForEDT();
    }
  }
  sortLetterDB();
  new Thread(new Runnable(){
    public void run(){
      saveMTHFile();
    }
  }
).start();
  return ret;
}"
20917,"/** 
 * Debug Methode. Zeigt den Captcha in verschiedenen bearbeitungsstadien an
 * @param captchafile
 */
public void showPreparedCaptcha(final File captchafile){
  if (!captchafile.exists()) {
    if (Utilities.isLoggerActive()) {
      logger.severe(captchafile.getAbsolutePath() + ""String_Node_Str"");
    }
    return;
  }
  Image captchaImage;
  captchaImage=Utilities.loadImage(captchafile);
  BasicWindow.showImage(captchaImage);
  Captcha captcha=createCaptcha(captchaImage);
  logger.info(""String_Node_Str"" + checkCaptcha(captchafile,captcha));
  if (bw3 != null) {
    bw3.dispose();
  }
  bw3=BasicWindow.showImage(captchaImage,""String_Node_Str"");
  bw3.add(new JLabel(""String_Node_Str""),Utilities.getGBC(2,0,2,2));
  bw3.setLocationByScreenPercent(50,70);
  bw3.add(new ImageComponent(captcha.getImage(1)),Utilities.getGBC(0,2,2,2));
  bw3.add(new JLabel(""String_Node_Str""),Utilities.getGBC(2,2,2,2));
  jas.executePrepareCommands(captchafile,captcha);
  bw3.add(new ImageComponent(captcha.getImage(1)),Utilities.getGBC(0,4,2,2));
  bw3.add(new JLabel(""String_Node_Str""),Utilities.getGBC(2,4,2,2));
  Letter[] letters=captcha.getLetters(letterNum);
  if (letters == null) {
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return;
  }
  bw3.add(new ImageComponent(captcha.getImageWithGaps(1)),Utilities.getGBC(0,6,2,2));
  bw3.add(new JLabel(""String_Node_Str""),Utilities.getGBC(2,6,2,2));
  bw3.refreshUI();
  if (bw2 != null) {
    bw2.destroy();
  }
  bw2=new BasicWindow();
  bw2.setTitle(""String_Node_Str"");
  bw2.setLayout(new GridBagLayout());
  bw2.setSize(300,300);
  if (Utilities.isLoggerActive()) {
    logger.info(""String_Node_Str"");
  }
  bw2.setAlwaysOnTop(true);
  bw2.setLocationByScreenPercent(50,5);
  bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,0,2,2));
  for (int i=0; i < letters.length; i++) {
    bw2.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 2,0,2,2));
  }
  bw2.setVisible(true);
  bw2.pack();
  bw2.setSize(300,bw2.getSize().height);
  LetterComperator[] lcs=captcha.getLetterComperators();
  for (int i=0; i < lcs.length; i++) {
    if (lcs[i] == null) {
      continue;
    }
    bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,6,2,2));
    Letter dif=lcs[i].getDifference();
    dif.removeSmallObjects(0.8,0.8,5);
    dif.clean();
    if (lcs[i].getB() != null) {
      bw2.add(new ImageComponent(lcs[i].getB().getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 2,6,2,1));
      bw2.add(new ImageComponent(dif.getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 2,7,2,1));
    }
 else {
      bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 2,6,2,2));
    }
    bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,8,2,2));
    bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,10,2,2));
    bw2.add(new JLabel(lcs[i].getValityPercent() + ""String_Node_Str""),Utilities.getGBC(i * 2 + 2,10,2,2));
  }
  JButton bt=new JButton(""String_Node_Str"");
  bw2.add(bt,Utilities.getGBC(0,12,2,2));
  bw2.pack();
  bw2.repack();
  bt.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      JAntiCaptcha.this.trainCaptcha(captchafile,4);
    }
  }
);
}","/** 
 * Debug Methode. Zeigt den Captcha in verschiedenen bearbeitungsstadien an
 * @param captchafile
 */
public void showPreparedCaptcha(final File captchafile){
  if (!captchafile.exists()) {
    if (Utilities.isLoggerActive()) {
      logger.severe(captchafile.getAbsolutePath() + ""String_Node_Str"");
    }
    return;
  }
  Image captchaImage;
  captchaImage=Utilities.loadImage(captchafile);
  BasicWindow.showImage(captchaImage);
  Captcha captcha=createCaptcha(captchaImage);
  int skWidth=captcha.getWidth();
  int skHeight=captcha.getHeight();
  if (skHeight > 200 || skWidth > 200) {
    if (skHeight > skWidth) {
      skWidth=200 * skWidth / skHeight;
      skHeight=200;
    }
 else {
      skHeight=200 * skHeight / skWidth;
      skWidth=200;
    }
  }
  logger.info(""String_Node_Str"" + checkCaptcha(captchafile,captcha));
  if (bw3 != null) {
    bw3.dispose();
  }
  bw3=BasicWindow.showImage(captchaImage.getScaledInstance(skWidth,skHeight,1),""String_Node_Str"");
  bw3.add(new JLabel(""String_Node_Str""),Utilities.getGBC(2,0,2,2));
  bw3.setLocationByScreenPercent(50,70);
  bw3.add(new ImageComponent(captcha.getImage(1).getScaledInstance(skWidth,skHeight,1)),Utilities.getGBC(0,2,2,2));
  bw3.add(new JLabel(""String_Node_Str""),Utilities.getGBC(2,2,2,2));
  jas.executePrepareCommands(captchafile,captcha);
  bw3.add(new ImageComponent(captcha.getImage(1).getScaledInstance(skWidth,skHeight,1)),Utilities.getGBC(0,4,2,2));
  bw3.add(new JLabel(""String_Node_Str""),Utilities.getGBC(2,4,2,2));
  Letter[] letters=captcha.getLetters(letterNum);
  if (letters == null) {
    if (Utilities.isLoggerActive()) {
      logger.severe(""String_Node_Str"");
    }
    return;
  }
  bw3.add(new ImageComponent(captcha.getImageWithGaps(1).getScaledInstance(skWidth,skHeight,1)),Utilities.getGBC(0,6,2,2));
  bw3.add(new JLabel(""String_Node_Str""),Utilities.getGBC(2,6,2,2));
  bw3.refreshUI();
  if (bw2 != null) {
    bw2.destroy();
  }
  bw2=new BasicWindow();
  bw2.setTitle(""String_Node_Str"");
  bw2.setLayout(new GridBagLayout());
  bw2.setSize(300,300);
  if (Utilities.isLoggerActive()) {
    logger.info(""String_Node_Str"");
  }
  bw2.setAlwaysOnTop(true);
  bw2.setLocationByScreenPercent(50,5);
  bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,0,2,2));
  for (int i=0; i < letters.length; i++) {
    bw2.add(new ImageComponent(letters[i].getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 2,0,2,2));
  }
  bw2.setVisible(true);
  bw2.pack();
  bw2.setSize(300,bw2.getSize().height);
  LetterComperator[] lcs=captcha.getLetterComperators();
  for (int i=0; i < lcs.length; i++) {
    if (lcs[i] == null) {
      continue;
    }
    bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,6,2,2));
    Letter dif=lcs[i].getDifference();
    dif.removeSmallObjects(0.8,0.8,5);
    dif.clean();
    if (lcs[i].getB() != null) {
      bw2.add(new ImageComponent(lcs[i].getB().getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 2,6,2,1));
      bw2.add(new ImageComponent(dif.getImage((int)Math.ceil(jas.getDouble(""String_Node_Str"")))),Utilities.getGBC(i * 2 + 2,7,2,1));
    }
 else {
      bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(i * 2 + 2,6,2,2));
    }
    bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,8,2,2));
    bw2.add(new JLabel(""String_Node_Str""),Utilities.getGBC(0,10,2,2));
    bw2.add(new JLabel(lcs[i].getValityPercent() + ""String_Node_Str""),Utilities.getGBC(i * 2 + 2,10,2,2));
  }
  JButton bt=new JButton(""String_Node_Str"");
  bw2.add(bt,Utilities.getGBC(0,12,2,2));
  bw2.pack();
  bw2.repack();
  bt.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      JAntiCaptcha.this.trainCaptcha(captchafile,4);
    }
  }
);
}"
20918,"public int getXDistanceTo(int x,int y){
  int mindist=Integer.MAX_VALUE;
  for (  int[] akt : object) {
    int xd=Math.abs(x - akt[0]);
    mindist=Math.min(mindist,xd);
  }
  return mindist;
}","public int getXDistanceTo(int x){
  int mindist=Integer.MAX_VALUE;
  for (  int[] akt : object) {
    int xd=Math.abs(x - akt[0]);
    mindist=Math.min(mindist,xd);
  }
  return mindist;
}"
20919,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(COOKIE_HOST,""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    return AvailableStatus.UNCHECKABLE;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
      if (filename == null) {
        filename=br.getRegex(""String_Node_Str"").getMatch(0);
        if (filename == null) {
          filename=br.getRegex(""String_Node_Str"").getMatch(0);
        }
      }
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null) {
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesize == null) {
      filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (filename == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
  link.setFinalFileName((filename.trim()));
  if (filesize != null) {
    logger.info(""String_Node_Str"" + filesize);
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(COOKIE_HOST,""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
      if (filename == null) {
        filename=br.getRegex(""String_Node_Str"").getMatch(0);
        if (filename == null) {
          filename=br.getRegex(""String_Node_Str"").getMatch(0);
        }
      }
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null) {
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesize == null) {
      filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (filename == null || filename.equals(""String_Node_Str"")) {
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      return AvailableStatus.UNCHECKABLE;
    }
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
  link.setFinalFileName((filename.trim()));
  if (filesize != null) {
    logger.info(""String_Node_Str"" + filesize);
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}"
20920,"public void checkErrors(DownloadLink theLink) throws NumberFormatException, PluginException {
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,""String_Node_Str"",10 * 60 * 1000l);
}","public void checkErrors(DownloadLink theLink) throws NumberFormatException, PluginException {
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
}"
20921,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(false);
  br.setCookie(COOKIE_HOST,""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    return AvailableStatus.UNCHECKABLE;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
      if (filename == null) {
        filename=br.getRegex(""String_Node_Str"").getMatch(0);
        if (filename == null) {
          filename=br.getRegex(""String_Node_Str"").getMatch(0);
          if (filename == null) {
            filename=br.getRegex(""String_Node_Str"").getMatch(0);
          }
        }
      }
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null) {
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesize == null) {
      filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (filename == null || filename.equals(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
  link.setName(filename.trim());
  if (filesize != null && !filesize.equals(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + filesize);
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(false);
  br.setCookie(COOKIE_HOST,""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
      if (filename == null) {
        filename=br.getRegex(""String_Node_Str"").getMatch(0);
        if (filename == null) {
          filename=br.getRegex(""String_Node_Str"").getMatch(0);
          if (filename == null) {
            filename=br.getRegex(""String_Node_Str"").getMatch(0);
          }
        }
      }
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null) {
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesize == null) {
      filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (filename == null || filename.equals(""String_Node_Str"")) {
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      return AvailableStatus.UNCHECKABLE;
    }
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
  link.setName(filename.trim());
  if (filesize != null && !filesize.equals(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + filesize);
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}"
20922,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException, IOException {
  String downloadURL=downloadLink.getDownloadURL();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(downloadURL);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileSize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileSize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  downloadLink.setDownloadSize(Regex.getSize(fileSize));
  downloadLink.setName(fileName);
  String link=Encoding.htmlDecode(br.getRegex(Pattern.compile(freelinkregex,Pattern.CASE_INSENSITIVE)).getMatch(0));
  if (link == null) {
    downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    return AvailableStatus.TRUE;
  }
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException, IOException {
  String downloadURL=downloadLink.getDownloadURL();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(downloadURL);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileSize=br.getRegex(""String_Node_Str"").getMatch(1);
  if (fileSize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fileName=br.getRegex(""String_Node_Str"").getMatch(0);
  downloadLink.setDownloadSize(Regex.getSize(fileSize));
  downloadLink.setName(fileName);
  String link=Encoding.htmlDecode(br.getRegex(Pattern.compile(freelinkregex,Pattern.CASE_INSENSITIVE)).getMatch(0));
  if (link == null) {
    downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    return AvailableStatus.TRUE;
  }
  return AvailableStatus.TRUE;
}"
20923,"public void handle(Request request,Response response){
  Document xml=JDUtilities.parseXmlString(""String_Node_Str"",false);
  response.setReturnType(""String_Node_Str"");
  response.setReturnStatus(Response.OK);
  if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Vector<String> commandvec=new Vector<String>();
    Vector<String> infovector=new Vector<String>();
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    response.addContent(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + getVersion() + ""String_Node_Str""+ ""String_Node_Str"");
    response.addContent(""String_Node_Str"");
    for (int commandcount=0; commandcount < commandvec.size(); commandcount++) {
      if (commandvec.get(commandcount).equals(""String_Node_Str"")) {
        if (commandcount != 0) {
          response.addContent(""String_Node_Str"");
        }
        response.addContent(""String_Node_Str"" + infovector.get(commandcount) + ""String_Node_Str"");
      }
 else {
        response.addContent(""String_Node_Str"" + commandvec.get(commandcount) + ""String_Node_Str""+ commandvec.get(commandcount)+ ""String_Node_Str""+ infovector.get(commandcount)+ ""String_Node_Str"");
      }
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    if (SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(Configuration.PARAM_GLOBAL_IP_DISABLE,false)) {
      response.addContent(""String_Node_Str"");
    }
 else {
      response.addContent(IPCheck.getIPAddress());
    }
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Random r=new Random();
    response.addContent(r.nextInt(255) + ""String_Node_Str"" + r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Property config=JDUtilities.getConfiguration();
    response.addContent(""String_Node_Str"");
    if (request.getParameters().containsKey(""String_Node_Str"")) {
      config=SubConfiguration.getConfig(request.getParameters().get(""String_Node_Str"").toUpperCase());
    }
    for (    Entry<String,Object> next : config.getProperties().entrySet()) {
      response.addContent(next.getKey() + ""String_Node_Str"" + next.getValue()+ ""String_Node_Str"");
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getJDTitle());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(getVersion());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(SubConfiguration.getConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,0));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      counter+=fp.getDownloadLinkList().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        fp_xml.appendChild(addDownloadLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getConnectionManager().getIncommingBandwidthUsage() / 1000);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getDownloadStatus().toString());
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      Element fp_xml=addGrabberPackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinks()) {
        fp_xml.appendChild(addGrabberLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(true);
    }
 else {
      response.addContent(false);
    }
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().startDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().pauseDownloads(!DownloadWatchDog.getInstance().isPaused());
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().stopDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().toggleStartStop();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer force=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    if (force == 1) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_WEBUPDATE_AUTO_RESTART,true);
      SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_WEBUPDATE_DISABLE,false);
    }
    WebUpdate.doUpdateCheck(true);
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    Reconnecter.doManualReconnect();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.restartJD(false);
      }
    }
).start();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.getController().exit();
      }
    }
).start();
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newdllimit=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newdllimit);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newsimdl=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newsimdl);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String link=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    ArrayList<String> links=new ArrayList<String>();
    for (    String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(link,false),null)) {
      links.add(tlink);
    }
    if (request.getParameters().size() > 0) {
      Iterator<String> it=request.getParameters().keySet().iterator();
      while (it.hasNext()) {
        String help=it.next();
        if (!request.getParameter(help).equals(""String_Node_Str"")) {
          links.add(request.getParameter(help));
        }
      }
    }
    Integer grabber=null;
    Integer start=null;
    Boolean hidegrabber=false;
    try {
      grabber=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
      start=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    }
 catch (    Exception e) {
    }
    if ((grabber != null) && (grabber == 0)) {
      hidegrabber=true;
    }
    StringBuilder ret=new StringBuilder();
    char tmp[]=new char[]{'""','\r','\n'};
    for (    String element : links) {
      ret.append('\""');
      ret.append(element.trim());
      ret.append(tmp);
    }
    link=ret.toString();
    new DistributeData(link,hidegrabber).start();
    if ((start != null) && start == 1) {
      DownloadWatchDog.getInstance().startDownloads();
    }
    response.addContent(""String_Node_Str"" + link + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    Integer grabber=null;
    Integer start=null;
    Boolean hidegrabber=false;
    Boolean startdl=false;
    try {
      grabber=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
      start=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    }
 catch (    Exception e) {
    }
    if ((grabber != null) && (grabber == 0)) {
      hidegrabber=true;
    }
    if ((start != null) && start == 1) {
      startdl=true;
    }
    if (dlcfilestr.matches(""String_Node_Str"")) {
      String containerFormat=new Regex(dlcfilestr,""String_Node_Str"").getMatch(0);
      File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ containerFormat);
      try {
        Browser.download(container,dlcfilestr);
        JDUtilities.getController().loadContainerFile(container,hidegrabber,startdl);
        try {
          Thread.sleep(1000);
        }
 catch (        Exception e) {
          JDLogger.exception(e);
        }
        container.delete();
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
    }
 else {
      JDUtilities.getController().loadContainerFile(new File(dlcfilestr),hidegrabber,startdl);
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<DownloadLink> dllinks=new ArrayList<DownloadLink>();
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    boolean savefromGrabber=new Regex(request.getRequestUrl(),""String_Node_Str"").matches();
    if (savefromGrabber) {
      if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
        response.addContent(ERROR_LINK_GRABBER_RUNNING);
      }
 else {
        ArrayList<LinkGrabberFilePackage> fps=LinkGrabberController.getInstance().getPackages();
        for (int i=0; i < fps.size(); i++) {
          dllinks.addAll(fps.get(i).getDownloadLinks());
        }
      }
    }
 else {
      dllinks=JDUtilities.getDownloadController().getAllDownloadLinks();
    }
    JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newrc=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newrc);
    if (newrc != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,newrc);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + newrc + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + newrc + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newuseprem=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newuseprem);
    if (newuseprem != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,newuseprem);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + newuseprem + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + newuseprem + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String[] data=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else     if (data.length < 2) {
      response.addContent(ERROR_TOO_FEW_PARAMETERS);
    }
 else {
      LinkGrabberFilePackage destPackage=null;
synchronized (LinkGrabberController.ControllerLock) {
        List<LinkGrabberFilePackage> srcPackages=new ArrayList<LinkGrabberFilePackage>();
        for (        LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
          if (pack.getName().equals(data[0])) {
            destPackage=pack;
            break;
          }
        }
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + data[0] + ""String_Node_Str"");
        }
 else {
          for (          LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
            for (            String src : data) {
              if (pack.getName().equals(src) && pack != destPackage) {
                srcPackages.add(pack);
              }
            }
          }
          for (          LinkGrabberFilePackage pack : srcPackages) {
            destPackage.addAll(pack.getDownloadLinks());
            LinkGrabberController.getInstance().removePackage(pack);
          }
          if (srcPackages.size() > 0) {
            if (srcPackages.size() < data.length - 1) {
              response.addContent(""String_Node_Str"");
            }
            response.addContent(""String_Node_Str"" + srcPackages.size() + ""String_Node_Str""+ data[0]+ ""String_Node_Str"");
            for (int i=0; i < srcPackages.size(); ++i) {
              if (i != 0) {
                response.addContent(""String_Node_Str"");
              }
              response.addContent(""String_Node_Str"" + srcPackages.get(i).getName() + ""String_Node_Str"");
            }
          }
 else {
            response.addContent(""String_Node_Str"" + data[0] + ""String_Node_Str"");
          }
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      String[] data=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      LinkGrabberFilePackage destPackage=null;
synchronized (LinkGrabberController.ControllerLock) {
        for (        LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
          if (pack.getName().equals(data[0])) {
            destPackage=pack;
            break;
          }
        }
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + data[0] + ""String_Node_Str"");
        }
 else {
          destPackage.setName(data[1]);
          LinkGrabberController.getInstance().throwRefresh();
          response.addContent(""String_Node_Str"" + data[0] + ""String_Node_Str""+ data[1]+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"") || request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      response.addContent(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        List<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
        if (request.getRequestUrl().matches(""String_Node_Str"")) {
          String[] data=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
          for (          LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
            for (            String name : data) {
              if (name.equalsIgnoreCase(pack.getName())) {
                packages.add(pack);
              }
            }
          }
        }
 else {
          packages.addAll(LinkGrabberController.getInstance().getPackages());
        }
        boolean avail=(packages.size() > 0);
        boolean hit=false;
        for (        LinkGrabberFilePackage pack : packages) {
          ArrayList<DownloadLink> links=pack.getDownloadLinks();
          ArrayList<FilePackage> fps=new ArrayList<FilePackage>();
          FilePackage fp=FilePackage.getInstance();
          fp.setName(pack.getName());
          fp.setName(pack.getName());
          fp.setComment(pack.getComment());
          fp.setPassword(pack.getPassword());
          fp.setExtractAfterDownload(pack.isExtractAfterDownload());
          fp.setDownloadDirectory(pack.getDownloadDirectory());
          if (pack.useSubDir()) {
            File file=new File(new File(pack.getDownloadDirectory()),fp.getName());
            fp.setDownloadDirectory(file.getAbsolutePath());
            if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
              if (!file.exists()) {
                if (!file.mkdirs()) {
                  logger.severe(""String_Node_Str"" + file.toString());
                  fp.setDownloadDirectory(pack.getDownloadDirectory());
                }
              }
            }
          }
          for (          DownloadLink link : links) {
            if (link.getFilePackage() == FilePackage.getDefaultFilePackage()) {
              fp.add(link);
              if (!fps.contains(fp))               fps.add(fp);
            }
 else {
              if (!fps.contains(link.getFilePackage()))               fps.add(link.getFilePackage());
            }
          }
          if (GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
            DownloadController.getInstance().addAllAt(fps,0);
          }
 else {
            DownloadController.getInstance().addAll(fps);
          }
          if (hit) {
            response.addContent(""String_Node_Str"");
          }
          response.addContent(""String_Node_Str"" + pack.getName() + ""String_Node_Str"");
          LinkGrabberController.getInstance().removePackage(pack);
          hit=true;
        }
        if (!avail) {
          response.addContent(""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      String[] data=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (data.length == 0) {
        response.addContent(ERROR_TOO_FEW_PARAMETERS);
      }
 else {
synchronized (LinkGrabberController.ControllerLock) {
          response.addContent(""String_Node_Str"");
          for (int i=0; i < data.length; ++i) {
            if (i > 0) {
              response.addContent(""String_Node_Str"");
            }
            if (data[i].equals(LINK_TYPE_OFFLINE) || data[i].equals(LINK_TYPE_AVAIL)) {
              response.addContent(data[i]);
            }
 else {
              response.addContent(""String_Node_Str"" + data[i] + ""String_Node_Str"");
            }
          }
          List<String> delLinks=new ArrayList<String>();
          List<String> delPackages=new ArrayList<String>();
          List<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>(LinkGrabberController.getInstance().getPackages());
          for (          LinkGrabberFilePackage pack : packages) {
            List<DownloadLink> links=new ArrayList<DownloadLink>(pack.getDownloadLinks());
            for (            DownloadLink link : links) {
              for (              String type : data) {
                if ((type.equals(LINK_TYPE_OFFLINE) && link.getAvailableStatus().equals(AvailableStatus.FALSE)) || (type.equals(LINK_TYPE_AVAIL) && link.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS))) {
                  pack.remove(link);
                  delLinks.add(link.getDownloadURL());
                }
              }
            }
            if (pack.getDownloadLinks().size() == 0) {
              delPackages.add(pack.getName());
            }
          }
          response.addContent(""String_Node_Str"" + delLinks.size() + ""String_Node_Str""+ delLinks+ ""String_Node_Str""+ delPackages.size()+ ""String_Node_Str""+ delPackages+ ""String_Node_Str"");
        }
      }
    }
  }
 else {
    response.addContent(""String_Node_Str"");
  }
}","public void handle(Request request,Response response){
  Document xml=JDUtilities.parseXmlString(""String_Node_Str"",false);
  response.setReturnType(""String_Node_Str"");
  response.setReturnStatus(Response.OK);
  if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Vector<String> commandvec=new Vector<String>();
    Vector<String> infovector=new Vector<String>();
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    commandvec.add(""String_Node_Str"");
    infovector.add(""String_Node_Str"");
    response.addContent(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + getVersion() + ""String_Node_Str""+ ""String_Node_Str"");
    response.addContent(""String_Node_Str"");
    for (int commandcount=0; commandcount < commandvec.size(); commandcount++) {
      if (commandvec.get(commandcount).equals(""String_Node_Str"")) {
        if (commandcount != 0) {
          response.addContent(""String_Node_Str"");
        }
        response.addContent(""String_Node_Str"" + infovector.get(commandcount) + ""String_Node_Str"");
      }
 else {
        response.addContent(""String_Node_Str"" + commandvec.get(commandcount) + ""String_Node_Str""+ commandvec.get(commandcount)+ ""String_Node_Str""+ infovector.get(commandcount)+ ""String_Node_Str"");
      }
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    if (SubConfiguration.getConfig(""String_Node_Str"").getBooleanProperty(Configuration.PARAM_GLOBAL_IP_DISABLE,false)) {
      response.addContent(""String_Node_Str"");
    }
 else {
      response.addContent(IPCheck.getIPAddress());
    }
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Random r=new Random();
    response.addContent(r.nextInt(255) + ""String_Node_Str"" + r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255)+ ""String_Node_Str""+ r.nextInt(255));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    Property config=JDUtilities.getConfiguration();
    response.addContent(""String_Node_Str"");
    if (request.getParameters().containsKey(""String_Node_Str"")) {
      config=SubConfiguration.getConfig(request.getParameters().get(""String_Node_Str"").toUpperCase());
    }
    for (    Entry<String,Object> next : config.getProperties().entrySet()) {
      response.addContent(next.getKey() + ""String_Node_Str"" + next.getValue()+ ""String_Node_Str"");
    }
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getJDTitle());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(getVersion());
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(SubConfiguration.getConfig(""String_Node_Str"").getIntegerProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,0));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().isPluginActive()) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      counter+=fp.getDownloadLinkList().size();
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        fp_xml.appendChild(addDownloadLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    int counter=0;
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          counter++;
        }
      }
    }
    response.addContent(counter);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    for (    FilePackage fp : JDUtilities.getController().getPackages()) {
      Element fp_xml=addFilePackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinkList()) {
        if (dl.getLinkStatus().hasStatus(LinkStatus.FINISHED)) {
          fp_xml.appendChild(addDownloadLink(xml,dl));
        }
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getConnectionManager().getIncommingBandwidthUsage() / 1000);
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(DownloadWatchDog.getInstance().getDownloadStatus().toString());
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    for (    LinkGrabberFilePackage fp : LinkGrabberController.getInstance().getPackages()) {
      Element fp_xml=addGrabberPackage(xml,fp);
      for (      DownloadLink dl : fp.getDownloadLinks()) {
        fp_xml.appendChild(addGrabberLink(xml,dl));
      }
    }
    response.addContent(JDUtilities.createXmlString(xml));
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(true);
    }
 else {
      response.addContent(false);
    }
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().startDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().pauseDownloads(!DownloadWatchDog.getInstance().isPaused());
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().stopDownloads();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    DownloadWatchDog.getInstance().toggleStartStop();
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer force=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    if (force == 1) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_WEBUPDATE_AUTO_RESTART,true);
      SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_WEBUPDATE_DISABLE,false);
    }
    WebUpdate.doUpdateCheck(true);
    response.addContent(""String_Node_Str"");
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    Reconnecter.doManualReconnect();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.restartJD(false);
      }
    }
).start();
  }
 else   if (request.getRequestUrl().equals(""String_Node_Str"")) {
    response.addContent(""String_Node_Str"");
    new Thread(new Runnable(){
      public void run(){
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException e) {
          JDLogger.exception(e);
        }
        JDUtilities.getController().exit();
      }
    }
).start();
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newdllimit=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SPEED,newdllimit.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newdllimit);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    Integer newsimdl=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").setProperty(Configuration.PARAM_DOWNLOAD_MAX_SIMULTAN,newsimdl.toString());
    SubConfiguration.getConfig(""String_Node_Str"").save();
    response.addContent(""String_Node_Str"" + newsimdl);
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String link=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    ArrayList<String> links=new ArrayList<String>();
    for (    String tlink : HTMLParser.getHttpLinks(Encoding.urlDecode(link,false),null)) {
      links.add(tlink);
    }
    if (request.getParameters().size() > 0) {
      Iterator<String> it=request.getParameters().keySet().iterator();
      while (it.hasNext()) {
        String help=it.next();
        if (!request.getParameter(help).equals(""String_Node_Str"")) {
          links.add(request.getParameter(help));
        }
      }
    }
    Integer grabber=null;
    Integer start=null;
    Boolean hidegrabber=false;
    try {
      grabber=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
      start=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    }
 catch (    Exception e) {
    }
    if ((grabber != null) && (grabber == 0)) {
      hidegrabber=true;
    }
    StringBuilder ret=new StringBuilder();
    char tmp[]=new char[]{'""','\r','\n'};
    for (    String element : links) {
      ret.append('\""');
      ret.append(element.trim());
      ret.append(tmp);
    }
    link=ret.toString();
    new DistributeData(link,hidegrabber).start();
    if ((start != null) && start == 1) {
      DownloadWatchDog.getInstance().startDownloads();
    }
    response.addContent(""String_Node_Str"" + link + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    Integer grabber=null;
    Integer start=null;
    Boolean hidegrabber=false;
    Boolean startdl=false;
    try {
      grabber=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
      start=Integer.parseInt(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    }
 catch (    Exception e) {
    }
    if ((grabber != null) && (grabber == 0)) {
      hidegrabber=true;
    }
    if ((start != null) && start == 1) {
      startdl=true;
    }
    if (dlcfilestr.matches(""String_Node_Str"")) {
      String containerFormat=new Regex(dlcfilestr,""String_Node_Str"").getMatch(0);
      File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""+ containerFormat);
      try {
        Browser.download(container,dlcfilestr);
        JDUtilities.getController().loadContainerFile(container,hidegrabber,startdl);
        try {
          Thread.sleep(1000);
        }
 catch (        Exception e) {
          JDLogger.exception(e);
        }
        container.delete();
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
    }
 else {
      JDUtilities.getController().loadContainerFile(new File(dlcfilestr),hidegrabber,startdl);
    }
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    ArrayList<DownloadLink> dllinks=new ArrayList<DownloadLink>();
    String dlcfilestr=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(1);
    dlcfilestr=Encoding.htmlDecode(dlcfilestr);
    boolean savefromGrabber=new Regex(request.getRequestUrl(),""String_Node_Str"").matches();
    if (savefromGrabber) {
      if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
        response.addContent(ERROR_LINK_GRABBER_RUNNING);
      }
 else {
        ArrayList<LinkGrabberFilePackage> fps=LinkGrabberController.getInstance().getPackages();
        for (int i=0; i < fps.size(); i++) {
          ArrayList<DownloadLink> fplinks=fps.get(i).getDownloadLinks();
          for (int j=0; j < fplinks.size(); j++) {
            dllinks.add(fplinks.get(i));
          }
        }
      }
    }
 else {
      dllinks=JDUtilities.getDownloadController().getAllDownloadLinks();
    }
    JDUtilities.getController().saveDLC(new File(dlcfilestr),dllinks);
    response.addContent(""String_Node_Str"" + dlcfilestr + ""String_Node_Str"");
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newrc=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newrc);
    if (newrc != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_ALLOW_RECONNECT,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_ALLOW_RECONNECT,newrc);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + newrc + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + newrc + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    boolean newuseprem=Boolean.parseBoolean(new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0));
    logger.fine(""String_Node_Str"" + newuseprem);
    if (newuseprem != JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,true)) {
      JDUtilities.getConfiguration().setProperty(Configuration.PARAM_USE_GLOBAL_PREMIUM,newuseprem);
      JDUtilities.getConfiguration().save();
      response.addContent(""String_Node_Str"" + newuseprem + ""String_Node_Str"");
    }
 else {
      response.addContent(""String_Node_Str"" + newuseprem + ""String_Node_Str"");
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    String[] data=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else     if (data.length < 2) {
      response.addContent(ERROR_TOO_FEW_PARAMETERS);
    }
 else {
      LinkGrabberFilePackage destPackage=null;
synchronized (LinkGrabberController.ControllerLock) {
        List<LinkGrabberFilePackage> srcPackages=new ArrayList<LinkGrabberFilePackage>();
        for (        LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
          if (pack.getName().equals(data[0])) {
            destPackage=pack;
            break;
          }
        }
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + data[0] + ""String_Node_Str"");
        }
 else {
          for (          LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
            for (            String src : data) {
              if (pack.getName().equals(src) && pack != destPackage) {
                srcPackages.add(pack);
              }
            }
          }
          for (          LinkGrabberFilePackage pack : srcPackages) {
            destPackage.addAll(pack.getDownloadLinks());
            LinkGrabberController.getInstance().removePackage(pack);
          }
          if (srcPackages.size() > 0) {
            if (srcPackages.size() < data.length - 1) {
              response.addContent(""String_Node_Str"");
            }
            response.addContent(""String_Node_Str"" + srcPackages.size() + ""String_Node_Str""+ data[0]+ ""String_Node_Str"");
            for (int i=0; i < srcPackages.size(); ++i) {
              if (i != 0) {
                response.addContent(""String_Node_Str"");
              }
              response.addContent(""String_Node_Str"" + srcPackages.get(i).getName() + ""String_Node_Str"");
            }
          }
 else {
            response.addContent(""String_Node_Str"" + data[0] + ""String_Node_Str"");
          }
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      String[] data=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      LinkGrabberFilePackage destPackage=null;
synchronized (LinkGrabberController.ControllerLock) {
        for (        LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
          if (pack.getName().equals(data[0])) {
            destPackage=pack;
            break;
          }
        }
        if (destPackage == null) {
          response.addContent(""String_Node_Str"" + data[0] + ""String_Node_Str"");
        }
 else {
          destPackage.setName(data[1]);
          LinkGrabberController.getInstance().throwRefresh();
          response.addContent(""String_Node_Str"" + data[0] + ""String_Node_Str""+ data[1]+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"") || request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      response.addContent(""String_Node_Str"");
synchronized (LinkGrabberController.ControllerLock) {
        List<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>();
        if (request.getRequestUrl().matches(""String_Node_Str"")) {
          String[] data=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
          for (          LinkGrabberFilePackage pack : LinkGrabberController.getInstance().getPackages()) {
            for (            String name : data) {
              if (name.equalsIgnoreCase(pack.getName())) {
                packages.add(pack);
              }
            }
          }
        }
 else {
          packages.addAll(LinkGrabberController.getInstance().getPackages());
        }
        boolean avail=(packages.size() > 0);
        boolean hit=false;
        for (        LinkGrabberFilePackage pack : packages) {
          ArrayList<DownloadLink> links=pack.getDownloadLinks();
          ArrayList<FilePackage> fps=new ArrayList<FilePackage>();
          FilePackage fp=FilePackage.getInstance();
          fp.setName(pack.getName());
          fp.setName(pack.getName());
          fp.setComment(pack.getComment());
          fp.setPassword(pack.getPassword());
          fp.setExtractAfterDownload(pack.isExtractAfterDownload());
          fp.setDownloadDirectory(pack.getDownloadDirectory());
          if (pack.useSubDir()) {
            File file=new File(new File(pack.getDownloadDirectory()),fp.getName());
            fp.setDownloadDirectory(file.getAbsolutePath());
            if (JDUtilities.getConfiguration().getBooleanProperty(Configuration.PARAM_CREATE_SUBFOLDER_BEFORE_DOWNLOAD,false)) {
              if (!file.exists()) {
                if (!file.mkdirs()) {
                  logger.severe(""String_Node_Str"" + file.toString());
                  fp.setDownloadDirectory(pack.getDownloadDirectory());
                }
              }
            }
          }
          for (          DownloadLink link : links) {
            if (link.getFilePackage() == FilePackage.getDefaultFilePackage()) {
              fp.add(link);
              if (!fps.contains(fp))               fps.add(fp);
            }
 else {
              if (!fps.contains(link.getFilePackage()))               fps.add(link.getFilePackage());
            }
          }
          if (GUIUtils.getConfig().getBooleanProperty(JDGuiConstants.PARAM_INSERT_NEW_LINKS_AT,false)) {
            DownloadController.getInstance().addAllAt(fps,0);
          }
 else {
            DownloadController.getInstance().addAll(fps);
          }
          if (hit) {
            response.addContent(""String_Node_Str"");
          }
          response.addContent(""String_Node_Str"" + pack.getName() + ""String_Node_Str"");
          LinkGrabberController.getInstance().removePackage(pack);
          hit=true;
        }
        if (!avail) {
          response.addContent(""String_Node_Str"");
        }
      }
    }
  }
 else   if (request.getRequestUrl().matches(""String_Node_Str"")) {
    if (LinkGrabberPanel.getLinkGrabber().isRunning()) {
      response.addContent(ERROR_LINK_GRABBER_RUNNING);
    }
 else {
      String[] data=new Regex(request.getRequestUrl(),""String_Node_Str"").getMatch(0).replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (data.length == 0) {
        response.addContent(ERROR_TOO_FEW_PARAMETERS);
      }
 else {
synchronized (LinkGrabberController.ControllerLock) {
          response.addContent(""String_Node_Str"");
          for (int i=0; i < data.length; ++i) {
            if (i > 0) {
              response.addContent(""String_Node_Str"");
            }
            if (data[i].equals(LINK_TYPE_OFFLINE) || data[i].equals(LINK_TYPE_AVAIL)) {
              response.addContent(data[i]);
            }
 else {
              response.addContent(""String_Node_Str"" + data[i] + ""String_Node_Str"");
            }
          }
          List<String> delLinks=new ArrayList<String>();
          List<String> delPackages=new ArrayList<String>();
          List<LinkGrabberFilePackage> packages=new ArrayList<LinkGrabberFilePackage>(LinkGrabberController.getInstance().getPackages());
          for (          LinkGrabberFilePackage pack : packages) {
            List<DownloadLink> links=new ArrayList<DownloadLink>(pack.getDownloadLinks());
            for (            DownloadLink link : links) {
              for (              String type : data) {
                if ((type.equals(LINK_TYPE_OFFLINE) && link.getAvailableStatus().equals(AvailableStatus.FALSE)) || (type.equals(LINK_TYPE_AVAIL) && link.getLinkStatus().hasStatus(LinkStatus.ERROR_ALREADYEXISTS))) {
                  pack.remove(link);
                  delLinks.add(link.getDownloadURL());
                }
              }
            }
            if (pack.getDownloadLinks().size() == 0) {
              delPackages.add(pack.getName());
            }
          }
          response.addContent(""String_Node_Str"" + delLinks.size() + ""String_Node_Str""+ delLinks+ ""String_Node_Str""+ delPackages.size()+ ""String_Node_Str""+ delPackages+ ""String_Node_Str"");
        }
      }
    }
  }
 else {
    response.addContent(""String_Node_Str"");
  }
}"
20924,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  String dllink=null;
  String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  boolean isStream=br.containsHTML(""String_Node_Str"");
  if (!isStream) {
    Browser brc=requestXML(br,""String_Node_Str"" + fileID,null,false);
    if (brc.containsHTML(""String_Node_Str"")) {
      String error=brc.getRegex(""String_Node_Str"").getMatch(0);
      if (error == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      if (error.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
      if (error.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    if (brc.containsHTML(""String_Node_Str"")) {
      int waitsecs=0;
      String waittime=brc.getRegex(""String_Node_Str"").getMatch(0);
      if (waittime != null)       waitsecs=Integer.parseInt(waittime);
      if (waitsecs > 0)       sleep(waitsecs * 1000l,downloadLink);
      dllink=brc.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
 else {
    br.getPage(""String_Node_Str"" + fileID + ""String_Node_Str"");
    dllink=br.getRedirectLocation();
  }
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,!isStream,1);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  String dllink=null;
  String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  boolean isStream=br.containsHTML(""String_Node_Str"");
  if (!isStream) {
    Browser brc=requestXML(br,""String_Node_Str"" + fileID,null,false);
    if (brc.containsHTML(""String_Node_Str"")) {
      String error=brc.getRegex(""String_Node_Str"").getMatch(0);
      if (error == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      if (error.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
      if (error.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    if (brc.containsHTML(""String_Node_Str"")) {
      int waitsecs=0;
      String waittime=brc.getRegex(""String_Node_Str"").getMatch(0);
      if (waittime != null)       waitsecs=Integer.parseInt(waittime);
      if (waitsecs > 0)       sleep(waitsecs * 1000l,downloadLink);
      dllink=brc.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
 else {
    br.getPage(""String_Node_Str"" + fileID + ""String_Node_Str"");
    dllink=br.getRedirectLocation();
  }
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  if (!dllink.contains(""String_Node_Str""))   dllink=""String_Node_Str"" + dllink;
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,!isStream,1);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20925,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   filename=br.getRegex(""String_Node_Str"").getMatch(1);
  if (filename == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  link.setName(filename.trim());
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize != null) {
    filesize=filesize.trim();
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize + ""String_Node_Str"";
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.setCustomCharset(""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null)   filename=br.getRegex(""String_Node_Str"").getMatch(1);
  if (filename == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  link.setName(filename.trim());
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize != null) {
    filesize=filesize.trim();
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize.replace(""String_Node_Str"",""String_Node_Str"");
    filesize=filesize + ""String_Node_Str"";
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}"
20926,"@Override public AccountInfo fetchAccountInfo(Account account) throws Exception {
  AccountInfo ai=new AccountInfo();
  this.setBrowserExclusive();
  br.getPage(""String_Node_Str"");
  br.forceDebug(true);
  Form login=br.getForm(0);
  login.put(""String_Node_Str"",account.getUser());
  login.put(""String_Node_Str"",account.getPass());
  br.submitForm(login);
  if (br.getRedirectLocation() == null) {
    account.setValid(false);
  }
 else {
    account.setValid(true);
    br.getPage(""String_Node_Str"");
    String validUntil=br.getRegex(""String_Node_Str"").getMatch(0);
    ai.setValidUntil(Regex.getMilliSeconds(""String_Node_Str"" + validUntil.trim(),""String_Node_Str"",null));
    String trafficLeft=br.getRegex(""String_Node_Str"").getMatch(0);
    ai.setTrafficLeft(Regex.getSize(trafficLeft));
  }
  return ai;
}","@Override public AccountInfo fetchAccountInfo(Account account) throws Exception {
  AccountInfo ai=new AccountInfo();
  this.setBrowserExclusive();
  br.getPage(""String_Node_Str"");
  br.forceDebug(true);
  Form login=br.getForm(0);
  login.put(""String_Node_Str"",account.getUser());
  login.put(""String_Node_Str"",account.getPass());
  br.submitForm(login);
  if (br.getRedirectLocation() == null || br.getCookie(""String_Node_Str"",""String_Node_Str"") == null) {
    account.setValid(false);
  }
 else {
    account.setValid(true);
    br.getPage(""String_Node_Str"");
    String validUntil=br.getRegex(""String_Node_Str"").getMatch(0);
    if (validUntil != null)     ai.setValidUntil(Regex.getMilliSeconds(""String_Node_Str"" + validUntil.trim(),""String_Node_Str"",null));
    String trafficLeft=br.getRegex(""String_Node_Str"").getMatch(0);
    if (trafficLeft != null)     ai.setTrafficLeft(Regex.getSize(trafficLeft));
  }
  return ai;
}"
20927,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  Form freeform=br.getFormBySubmitvalue(""String_Node_Str"");
  if (freeform == null) {
    freeform=br.getFormBySubmitvalue(""String_Node_Str"");
    if (freeform == null) {
      freeform=br.getFormbyKey(""String_Node_Str"");
    }
  }
  if (freeform != null)   br.submitForm(freeform);
  if (br.containsHTML(""String_Node_Str"")) {
    String filesizelimit=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
  if (br.containsHTML(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
  }
  if (br.containsHTML(""String_Node_Str"")) {
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"") && !br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    Recaptcha rc=new Recaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,false,1);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      if (br.containsHTML(""String_Node_Str"")) {
        int minutes=0, seconds=0, hours=0;
        String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmphrs != null)         hours=Integer.parseInt(tmphrs);
        String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmpmin != null)         minutes=Integer.parseInt(tmpmin);
        String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmpsec != null)         seconds=Integer.parseInt(tmpsec);
        int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
        logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
        String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
        String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmphrs == null && tmpmin == null && tmpsec == null) {
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
        }
 else {
          int minutes=0, seconds=0, hours=0;
          if (tmphrs != null)           hours=Integer.parseInt(tmphrs);
          if (tmpmin != null)           minutes=Integer.parseInt(tmpmin);
          if (tmpsec != null)           seconds=Integer.parseInt(tmpsec);
          int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
          logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
        }
      }
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  doFree2(downloadLink);
}"
20928,"@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    return AvailableStatus.UNCHECKABLE;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
      if (filename == null) {
        filename=br.getRegex(""String_Node_Str"").getMatch(0);
        if (filename == null) {
          filename=br.getRegex(""String_Node_Str"").getMatch(0);
        }
      }
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null) {
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesize == null) {
      filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (filename == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
  link.setName(filename.trim());
  if (filesize != null) {
    logger.info(""String_Node_Str"" + filesize);
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink link) throws IOException, PluginException {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    return AvailableStatus.UNCHECKABLE;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
      if (filename == null) {
        filename=br.getRegex(""String_Node_Str"").getMatch(0);
        if (filename == null) {
          filename=br.getRegex(""String_Node_Str"").getMatch(0);
        }
      }
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null) {
    filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesize == null) {
      filesize=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (filename == null) {
    logger.warning(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
  link.setName(filename.trim());
  if (filesize != null) {
    logger.info(""String_Node_Str"" + filesize);
    link.setDownloadSize(Regex.getSize(filesize));
  }
  return AvailableStatus.TRUE;
}"
20929,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.getPage(downloadLink.getDownloadURL());
  Form freeform=br.getFormBySubmitvalue(""String_Node_Str"");
  if (freeform == null) {
    freeform=br.getFormBySubmitvalue(""String_Node_Str"");
    if (freeform == null) {
      freeform=br.getFormbyKey(""String_Node_Str"");
    }
  }
  if (freeform != null)   br.submitForm(freeform);
  if (br.containsHTML(""String_Node_Str"")) {
    String filesizelimit=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filesizelimit != null) {
      filesizelimit=filesizelimit.trim();
      logger.warning(""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"" + filesizelimit + ""String_Node_Str"");
    }
 else {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    }
  }
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    int minutes=0, seconds=0, hours=0;
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs != null)     hours=Integer.parseInt(tmphrs);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpmin != null)     minutes=Integer.parseInt(tmpmin);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmpsec != null)     seconds=Integer.parseInt(tmpsec);
    int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
    logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
  }
  if (br.containsHTML(""String_Node_Str"")) {
    String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
    String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
    String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
    if (tmphrs == null && tmpmin == null && tmpsec == null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
    }
 else {
      int minutes=0, seconds=0, hours=0;
      if (tmphrs != null)       hours=Integer.parseInt(tmphrs);
      if (tmpmin != null)       minutes=Integer.parseInt(tmpmin);
      if (tmpsec != null)       seconds=Integer.parseInt(tmpsec);
      int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
      logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
    }
  }
  String md5hash=br.getRegex(""String_Node_Str"").getMatch(0);
  if (md5hash != null) {
    md5hash=md5hash.trim();
    logger.info(""String_Node_Str"" + md5hash);
    downloadLink.setMD5Hash(md5hash);
  }
  br.setFollowRedirects(false);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String passCode=null;
  boolean password=false;
  boolean recaptcha=false;
  if (br.containsHTML(""String_Node_Str"")) {
    password=true;
    logger.info(""String_Node_Str"");
  }
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[][] letters=new Regex(Encoding.htmlDecode(br.toString()),""String_Node_Str"").getMatches();
    if (letters == null || letters.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    SortedMap<Integer,String> capMap=new TreeMap<Integer,String>();
    for (    String[] letter : letters) {
      capMap.put(Integer.parseInt(letter[0]),letter[1]);
    }
    StringBuilder code=new StringBuilder();
    for (    String value : capMap.values()) {
      code.append(value);
    }
    DLForm.put(""String_Node_Str"",code.toString());
    logger.info(""String_Node_Str"" + code.toString() + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    String[] sitelinks=HTMLParser.getHttpLinks(br.toString(),null);
    String captchaurl=null;
    if (sitelinks == null || sitelinks.length == 0) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    for (    String link : sitelinks) {
      if (link.contains(""String_Node_Str"")) {
        captchaurl=link;
      }
    }
    if (captchaurl == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    String code=getCaptchaCode(captchaurl,downloadLink);
    DLForm.put(""String_Node_Str"",code);
    logger.info(""String_Node_Str"" + code + ""String_Node_Str"");
  }
 else   if (br.containsHTML(""String_Node_Str"") && !br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    Recaptcha rc=new Recaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,downloadLink);
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      rc.getForm().put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
      password=false;
    }
    recaptcha=true;
    rc.setCode(c);
    logger.info(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  if (ttt != null) {
    logger.info(""String_Node_Str"" + ttt.trim() + ""String_Node_Str"");
    int tt=Integer.parseInt(ttt);
    sleep(tt * 1001,downloadLink);
  }
  if (recaptcha == false) {
    if (password == true) {
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      DLForm.put(""String_Node_Str"",passCode);
      logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,false,1);
    logger.info(""String_Node_Str"");
  }
  boolean error=false;
  try {
    if (dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error=true;
    }
  }
 catch (  Exception e) {
    error=true;
  }
  if (br.getRedirectLocation() != null || error == true) {
    br.followConnection();
    logger.info(""String_Node_Str"");
    String dllink=br.getRedirectLocation();
    if (dllink == null) {
      if (br.containsHTML(""String_Node_Str"")) {
        int minutes=0, seconds=0, hours=0;
        String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmphrs != null)         hours=Integer.parseInt(tmphrs);
        String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmpmin != null)         minutes=Integer.parseInt(tmpmin);
        String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmpsec != null)         seconds=Integer.parseInt(tmpsec);
        int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
        logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        String tmphrs=br.getRegex(""String_Node_Str"").getMatch(0);
        String tmpmin=br.getRegex(""String_Node_Str"").getMatch(0);
        String tmpsec=br.getRegex(""String_Node_Str"").getMatch(0);
        if (tmphrs == null && tmpmin == null && tmpsec == null) {
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,60 * 60 * 1000l);
        }
 else {
          int minutes=0, seconds=0, hours=0;
          if (tmphrs != null)           hours=Integer.parseInt(tmphrs);
          if (tmpmin != null)           minutes=Integer.parseInt(tmpmin);
          if (tmpsec != null)           seconds=Integer.parseInt(tmpsec);
          int waittime=((3600 * hours) + (60 * minutes) + seconds+ 1) * 1000;
          logger.info(""String_Node_Str"" + waittime + ""String_Node_Str"");
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,waittime);
        }
      }
      if (br.containsHTML(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,10 * 60 * 1001l);
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
        downloadLink.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_RETRY);
      }
      if (br.containsHTML(""String_Node_Str"")) {
        logger.warning(""String_Node_Str"");
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
      if (dllink == null) {
        dllink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (dllink == null) {
          dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          if (dllink == null) {
            dllink=br.getRegex(""String_Node_Str"").getMatch(0);
          }
        }
      }
    }
    if (dllink == null) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,false,1);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  boolean error2=false;
  try {
    if (dl.getConnection().getContentType() != null && dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      error2=true;
    }
  }
 catch (  Exception e) {
    error2=true;
  }
  if (error2 == true) {
    logger.warning(""String_Node_Str"");
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.getPage(downloadLink.getDownloadURL());
  doFree2(downloadLink);
}"
20930,"@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.setDebug(true);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str"")) {
    String waittime=br.getRegex(""String_Node_Str"").getMatch(0);
    if (Long.parseLong(waittime.trim()) > 0) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Long.parseLong(waittime.trim()));
    }
  }
  Form[] forms=br.getForms();
  Form form=forms[1];
  long sleeptime=0;
  try {
    sleeptime=Long.parseLong(br.getRegex(""String_Node_Str"").getMatch(0)) + 1;
    logger.info(""String_Node_Str"" + sleeptime + ""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"");
    logger.info(br.toString());
    sleeptime=60 * 1000l;
  }
  if (sleeptime > 100)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,sleeptime);
  if (!this.skipperFailed) {
    form.put(""String_Node_Str"",""String_Node_Str"");
    form.put(""String_Node_Str"",""String_Node_Str"");
    form.put(""String_Node_Str"",""String_Node_Str"");
    form.put(""String_Node_Str"",""String_Node_Str"");
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"") && !this.skipperFailed) {
      skipperFailed=true;
      handleFree(link);
      return;
    }
  }
 else {
    this.sleep(sleeptime,link);
    br.submitForm(form);
  }
  if (!br.containsHTML(""String_Node_Str"")) {
    Recaptcha rc=new Recaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,link);
    rc.setCode(c);
    if (!br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  String dl_url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dl_url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dl_url,false,1);
  dl.setFilenameFix(true);
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.setDebug(true);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str"")) {
    String waittime=br.getRegex(""String_Node_Str"").getMatch(0);
    if (Long.parseLong(waittime.trim()) > 0) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Long.parseLong(waittime.trim()));
    }
  }
  Form[] forms=br.getForms();
  Form form=forms[1];
  long sleeptime=0;
  try {
    sleeptime=Long.parseLong(br.getRegex(""String_Node_Str"").getMatch(0)) + 1;
    logger.info(""String_Node_Str"" + sleeptime + ""String_Node_Str"");
  }
 catch (  Exception e) {
    logger.info(""String_Node_Str"");
    logger.info(br.toString());
    sleeptime=60 * 1000l;
  }
  if (sleeptime > 100 * 1000l)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,sleeptime);
  if (!this.skipperFailed) {
    form.put(""String_Node_Str"",""String_Node_Str"");
    form.put(""String_Node_Str"",""String_Node_Str"");
    form.put(""String_Node_Str"",""String_Node_Str"");
    form.put(""String_Node_Str"",""String_Node_Str"");
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str"") && !this.skipperFailed) {
      skipperFailed=true;
      handleFree(link);
      return;
    }
  }
 else {
    this.sleep(sleeptime,link);
    br.submitForm(form);
  }
  if (!br.containsHTML(""String_Node_Str"")) {
    Recaptcha rc=new Recaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,link);
    rc.setCode(c);
    if (!br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  String dl_url=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dl_url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dl_url,false,1);
  dl.setFilenameFix(true);
  dl.startDownload();
}"
20931,"/** 
 * Sucht alle Links heraus
 * @param data ist der Quelltext einer Html-Datei
 * @param url der Link von dem der Quelltext stammt (um die base automatisch zu setzen)
 * @return Linkliste aus data extrahiert
 */
public static String[] getHttpLinksIntern(String data,String url){
  data=data.trim();
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  while (true) {
    String nexttag=new Regex(data,""String_Node_Str"").getMatch(0);
    if (nexttag == null) {
      break;
    }
 else {
      String[] result=getHttpLinksIntern(nexttag,url);
      if (result.length == 0) {
        data=data.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        data=data.replaceFirst(""String_Node_Str"",ArrayToString(result));
      }
    }
  }
  String protocolPattern=""String_Node_Str"";
  if (!data.matches(""String_Node_Str"")) {
    int c=new Regex(data,""String_Node_Str"" + protocolPattern + ""String_Node_Str"").count();
    if (c == 0)     return new String[]{};
 else     if (c == 1 && data.length() < 100 && data.matches(""String_Node_Str"" + protocolPattern + ""String_Node_Str"")) {
      String link=data.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
      URLConnectionAdapter con=null;
      try {
        if (!link.matches(""String_Node_Str"") || (con=new Browser().openGetConnection(link.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""))).isOK()) {
          if (con != null)           con.disconnect();
          return new String[]{link.replaceAll(""String_Node_Str"",""String_Node_Str"")};
        }
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
      if (con != null)       con.disconnect();
    }
  }
  url=url == null ? ""String_Node_Str"" : url;
  Matcher m;
  String link;
  String basename=""String_Node_Str"";
  String host=""String_Node_Str"";
  LinkedList<String> set=new LinkedList<String>();
  Pattern[] basePattern=new Pattern[]{Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)};
  for (  Pattern element : basePattern) {
    m=element.matcher(data);
    if (m.find()) {
      url=m.group(2);
      break;
    }
  }
  String pro=""String_Node_Str"";
  if (url != null && url.trim().length() > 0) {
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    url=url.replace(pro + ""String_Node_Str"",""String_Node_Str"");
    int dot=url.lastIndexOf('/');
    if (dot != -1) {
      basename=pro + ""String_Node_Str"" + url.substring(0,dot + 1);
    }
 else {
      basename=pro + ""String_Node_Str"" + url+ ""String_Node_Str"";
    }
    dot=url.indexOf('/');
    if (dot != -1) {
      host=pro + ""String_Node_Str"" + url.substring(0,dot);
    }
 else {
      host=pro + ""String_Node_Str"" + url;
    }
    url=pro + ""String_Node_Str"" + url;
  }
 else {
    url=""String_Node_Str"";
  }
final class Httppattern {
    public Pattern p;
    public int group;
    public Httppattern(    Pattern p,    int group){
      this.p=p;
      this.group=group;
    }
  }
  Httppattern[] linkAndFormPattern=new Httppattern[]{new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),1),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),1),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),3),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),2),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),2)};
  for (  Httppattern element : linkAndFormPattern) {
    m=element.p.matcher(data);
    while (m.find()) {
      link=m.group(element.group);
      link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (!(link.length() > 3 && link.matches(""String_Node_Str"" + protocolPattern + ""String_Node_Str"")) && link.length() > 0) {
        if (link.length() > 2 && link.startsWith(""String_Node_Str"")) {
          link=pro + ""String_Node_Str"" + link;
        }
        if (link.charAt(0) == '/') {
          link=host + link;
        }
 else         if (link.charAt(0) == '#') {
          link=url + link;
        }
 else {
          link=basename + link;
        }
      }
      link=link.trim();
      try {
        new URL(link);
        if (!set.contains(link)) {
          set.add(link);
        }
      }
 catch (      MalformedURLException e) {
      }
    }
  }
  m=Pattern.compile(""String_Node_Str"" + protocolPattern + ""String_Node_Str""+ protocolPattern+ ""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(data);
  while (m.find()) {
    link=m.group(0);
    link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
    link=link.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    link=link.trim();
    if (!set.contains(link)) {
      set.add(link);
    }
  }
  return set.toArray(new String[set.size()]);
}","/** 
 * Sucht alle Links heraus
 * @param data ist der Quelltext einer Html-Datei
 * @param url der Link von dem der Quelltext stammt (um die base automatisch zu setzen)
 * @return Linkliste aus data extrahiert
 */
public static String[] getHttpLinksIntern(String data,String url){
  data=data.trim();
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
  while (true) {
    String nexttag=new Regex(data,""String_Node_Str"").getMatch(0);
    if (nexttag == null) {
      break;
    }
 else {
      String[] result=getHttpLinksIntern(nexttag,url);
      if (result.length == 0) {
        data=data.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        data=data.replaceFirst(""String_Node_Str"",ArrayToString(result));
      }
    }
  }
  String protocolPattern=""String_Node_Str"";
  if (!data.matches(""String_Node_Str"")) {
    int c=new Regex(data,""String_Node_Str"" + protocolPattern + ""String_Node_Str"").count();
    if (c == 0)     return new String[]{};
 else     if (c == 1 && data.length() < 100 && data.matches(""String_Node_Str"" + protocolPattern + ""String_Node_Str"")) {
      String link=data.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceFirst(""String_Node_Str"",""String_Node_Str"");
      URLConnectionAdapter con=null;
      try {
        if (!link.matches(""String_Node_Str"") || (con=new Browser().openGetConnection(link.replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""))).isOK()) {
          if (con != null)           con.disconnect();
          return new String[]{link.replaceAll(""String_Node_Str"",""String_Node_Str"")};
        }
      }
 catch (      Exception e) {
        JDLogger.exception(e);
      }
      if (con != null)       con.disconnect();
    }
  }
  url=url == null ? ""String_Node_Str"" : url;
  Matcher m;
  String link;
  String basename=""String_Node_Str"";
  String host=""String_Node_Str"";
  LinkedList<String> set=new LinkedList<String>();
  Pattern[] basePattern=new Pattern[]{Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE),Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)};
  for (  Pattern element : basePattern) {
    m=element.matcher(data);
    if (m.find()) {
      url=m.group(2);
      break;
    }
  }
  String pro=""String_Node_Str"";
  if (url != null && url.trim().length() > 0) {
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    if (url.startsWith(""String_Node_Str"")) {
      pro=""String_Node_Str"";
    }
    url=url.replace(pro + ""String_Node_Str"",""String_Node_Str"");
    int dot=url.lastIndexOf('/');
    if (dot != -1) {
      basename=pro + ""String_Node_Str"" + url.substring(0,dot + 1);
    }
 else {
      basename=pro + ""String_Node_Str"" + url+ ""String_Node_Str"";
    }
    dot=url.indexOf('/');
    if (dot != -1) {
      host=pro + ""String_Node_Str"" + url.substring(0,dot);
    }
 else {
      host=pro + ""String_Node_Str"" + url;
    }
    url=pro + ""String_Node_Str"" + url;
  }
 else {
    url=""String_Node_Str"";
  }
final class Httppattern {
    public Pattern p;
    public int group;
    public Httppattern(    Pattern p,    int group){
      this.p=p;
      this.group=group;
    }
  }
  Httppattern[] linkAndFormPattern=new Httppattern[]{new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),1),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),1),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),3),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),2),new Httppattern(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL),2)};
  for (  Httppattern element : linkAndFormPattern) {
    m=element.p.matcher(data);
    while (m.find()) {
      link=m.group(element.group);
      link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (!(link.length() > 3 && link.matches(""String_Node_Str"" + protocolPattern + ""String_Node_Str"")) && link.length() > 0) {
        if (link.length() > 2 && link.startsWith(""String_Node_Str"")) {
          link=pro + ""String_Node_Str"" + link;
        }
        if (link.charAt(0) == '/') {
          link=host + link;
        }
 else         if (link.charAt(0) == '#') {
          link=url + link;
        }
 else {
          link=basename + link;
        }
      }
      link=link.trim();
      try {
        new URL(link);
        if (!set.contains(link)) {
          set.add(link);
        }
      }
 catch (      MalformedURLException e) {
      }
    }
  }
  m=Pattern.compile(""String_Node_Str"" + protocolPattern + ""String_Node_Str""+ protocolPattern+ ""String_Node_Str"",Pattern.CASE_INSENSITIVE).matcher(data);
  while (m.find()) {
    link=m.group(0);
    link=link.replaceAll(""String_Node_Str"",""String_Node_Str"");
    link=link.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    link=link.trim();
    if (!set.contains(link)) {
      set.add(link);
    }
  }
  return set.toArray(new String[set.size()]);
}"
20932,"public static String urlDecode(String urlcoded,boolean isUrl){
  if (urlcoded == null)   return null;
  if (isUrl) {
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      urlcoded=URLDecoder.decode(urlcoded,""String_Node_Str"");
    }
 catch (    Exception e) {
      JDLogger.exception(e);
    }
  }
  return urlcoded;
}","public static String urlDecode(String urlcoded,boolean isUrl){
  if (urlcoded == null)   return null;
  if (isUrl) {
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
    urlcoded=urlcoded.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      urlcoded=URLDecoder.decode(urlcoded,""String_Node_Str"");
    }
 catch (    Exception e) {
      JDLogger.exception(e);
    }
  }
  return urlcoded;
}"
20933,"@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.setFollowRedirects(false);
  String passCode=null;
  String linkurl=null;
  String loginpw=br.getRegex(""String_Node_Str"").getMatch(0);
  if (br.containsHTML(""String_Node_Str"") && !(loginpw != null && loginpw.contains(""String_Node_Str""))) {
    logger.info(""String_Node_Str"");
    Form pwform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (pwform == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (link.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(""String_Node_Str"",link);
    }
 else {
      passCode=link.getStringProperty(""String_Node_Str"",null);
    }
    pwform.put(""String_Node_Str"",passCode);
    logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    br.submitForm(pwform);
    if (br.containsHTML(""String_Node_Str"") && !(loginpw != null && loginpw.contains(""String_Node_Str""))) {
      logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
      link.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    linkurl=br.getRedirectLocation();
  }
 else {
    linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
    if (linkurl == null) {
      linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (passCode != null) {
    link.setProperty(""String_Node_Str"",passCode);
  }
  if (linkurl == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,linkurl,true,-4);
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  requestFileInformation(link);
  br.setFollowRedirects(false);
  String passCode=null;
  String linkurl=null;
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    Form pwform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (pwform == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (link.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(""String_Node_Str"",link);
    }
 else {
      passCode=link.getStringProperty(""String_Node_Str"",null);
    }
    pwform.put(""String_Node_Str"",passCode);
    logger.info(""String_Node_Str"" + passCode + ""String_Node_Str"");
    br.submitForm(pwform);
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"" + passCode + ""String_Node_Str"");
      link.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    linkurl=br.getRedirectLocation();
  }
 else {
    linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
    if (linkurl == null) {
      linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
      if (linkurl == null) {
        linkurl=br.getRegex(""String_Node_Str"").getMatch(0);
      }
    }
  }
  if (passCode != null) {
    link.setProperty(""String_Node_Str"",passCode);
  }
  if (linkurl == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,linkurl,true,-4);
  dl.startDownload();
}"
20934,"@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setName(filename.trim());
  parameter.setDownloadSize(Regex.getSize(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink parameter) throws Exception {
  this.setBrowserExclusive();
  br.getPage(parameter.getDownloadURL());
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null) {
    filename=br.getRegex(""String_Node_Str"").getMatch(0);
    if (filename == null) {
      filename=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  parameter.setName(filename.trim());
  parameter.setDownloadSize(Regex.getSize(filesize));
  return AvailableStatus.TRUE;
}"
20935,"/** 
 * läd das Bild direkt in den vorgegebenen Ordner
 * @param destination
 */
public boolean directCaptchaLoad(String destination){
  file=new File(destination,System.currentTimeMillis() + getFileType());
  try {
    br.cloneBrowser().getDownload(file,imageUrl);
    return renameCaptcha(file,destination);
  }
 catch (  Exception e) {
  }
  return false;
}","/** 
 * läd das Bild direkt in den vorgegebenen Ordner
 * @param destination
 */
public boolean directCaptchaLoad(String destination){
  file=new File(destination,System.currentTimeMillis() + getFileType());
  try {
    URLConnectionAdapter urlc=br.cloneBrowser().openGetConnection(imageUrl);
    Browser.download(file,urlc);
    return renameCaptcha(file,destination);
  }
 catch (  Exception e) {
  }
  return false;
}"
20936,"/** 
 * @return true wenn erfolgreich geladen wurde
 */
public boolean start(){
  try {
    selectedImage=LoadImage.loadFile(host);
    loadinfo=getLoadInfo(selectedImage);
    if (loadinfo == null)     return false;
    final JDialog dialog=new GuiRunnable<JDialog>(){
      public JDialog runSave(){
        return new JDialog(owner);
      }
    }
.getReturnValue();
    dialog.setModal(true);
    dialog.setAlwaysOnTop(true);
    br.getPage(loadinfo.link);
    if (host == null) {
      host=br.getHost().toLowerCase();
      if (host.matches(""String_Node_Str""))       host=host.substring(host.indexOf('.') + 1);
    }
    if (dir == null)     dir=JDUtilities.getJDHomeDirectoryFromEnvironment().getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
    new File(dir).mkdir();
    if (loadDirect()) {
      if (opendir)       openDir(dir);
      new EasyMethodFile(host).copyExampleImage();
      return true;
    }
    if (selectedImage != null)     selectedImage.load(host);
 else {
      dialog.setTitle(JDL.L(""String_Node_Str"",""String_Node_Str""));
      images=getAllImages(br);
      loadImages();
      dialog.addWindowListener(new WindowListener(){
        public void windowActivated(        WindowEvent e){
        }
        public void windowClosed(        WindowEvent e){
        }
        public void windowClosing(        WindowEvent e){
          for (          LoadImage loadImage : images) {
            loadImage.file.delete();
          }
          dialog.dispose();
        }
        public void windowDeactivated(        WindowEvent e){
        }
        public void windowDeiconified(        WindowEvent e){
        }
        public void windowIconified(        WindowEvent e){
        }
        public void windowOpened(        WindowEvent e){
        }
      }
);
      final ArrayList<JButton> bts=new ArrayList<JButton>();
      System.out.println(images.size());
      for (int j=0; j < images.size(); j++) {
        final LoadImage f=images.get(j);
        if (f == null || f.file == null || !f.file.exists() || f.file.length() < 100)         continue;
        final BufferedImage captchaImage=JDImage.getImage(f.file);
        if (captchaImage == null) {
          f.file.delete();
          continue;
        }
        int area=captchaImage.getHeight(null) * captchaImage.getHeight(null);
        if (area < 50 || captchaImage.getHeight(null) > maxHeight || captchaImage.getWidth(null) > maxWeight || captchaImage.getWidth(null) < 10 || captchaImage.getHeight(null) < 5) {
          f.file.delete();
          continue;
        }
        double faktor=Math.max((double)captchaImage.getWidth(null) / 100,(double)captchaImage.getHeight(null) / 100);
        final int width=(int)(captchaImage.getWidth(null) / faktor);
        final int height=(int)(captchaImage.getHeight(null) / faktor);
        try {
          JButton ic=new GuiRunnable<JButton>(){
            public JButton runSave(){
              return new JButton(new ImageIcon(captchaImage.getScaledInstance(width,height,Image.SCALE_SMOOTH)));
            }
          }
.getReturnValue();
          ic.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              selectedImage=f;
              dialog.dispose();
            }
          }
);
          bts.add(ic);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      final JPanel panel=new GuiRunnable<JPanel>(){
        public JPanel runSave(){
          return new JPanel(new GridLayout((int)Math.ceil(((double)bts.size()) / 5),5));
        }
      }
.getReturnValue();
      for (      JButton button : bts) {
        panel.add(button);
      }
      new GuiRunnable<Object>(){
        public Object runSave(){
          dialog.add(new JScrollPane(panel));
          dialog.pack();
          dialog.setLocation(Screen.getCenterOfComponent(owner,dialog));
          dialog.setAlwaysOnTop(true);
          dialog.setVisible(true);
          return null;
        }
      }
.waitForEDT();
    }
    if (selectedImage != null && selectedImage.file != null) {
      loadProcess();
      if (opendir)       openDir(dir);
      new EasyMethodFile(host).copyExampleImage();
      return dir.length() > 0;
    }
 else     return false;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","/** 
 * @return true wenn erfolgreich geladen wurde
 */
public boolean start(){
  try {
    selectedImage=LoadImage.loadFile(host);
    loadinfo=getLoadInfo(selectedImage);
    if (loadinfo == null)     return false;
    final JDialog dialog=new GuiRunnable<JDialog>(){
      public JDialog runSave(){
        return new JDialog(owner);
      }
    }
.getReturnValue();
    dialog.setModal(true);
    dialog.setAlwaysOnTop(true);
    br.getPage(loadinfo.link);
    if (host == null) {
      host=br.getHost().toLowerCase();
      if (host.matches(""String_Node_Str""))       host=host.substring(host.indexOf('.') + 1);
    }
    if (dir == null)     dir=JDUtilities.getJDHomeDirectoryFromEnvironment().getAbsolutePath() + ""String_Node_Str"" + host+ ""String_Node_Str"";
    new File(dir).mkdir();
    if (loadDirect()) {
      if (opendir)       openDir(dir);
      new EasyMethodFile(host).copyExampleImage();
      return true;
    }
    if (selectedImage != null)     selectedImage.load(host);
 else {
      dialog.setTitle(JDL.L(""String_Node_Str"",""String_Node_Str""));
      images=getAllImages(br);
      loadImages();
      dialog.addWindowListener(new WindowListener(){
        public void windowActivated(        WindowEvent e){
        }
        public void windowClosed(        WindowEvent e){
        }
        public void windowClosing(        WindowEvent e){
          for (          LoadImage loadImage : images) {
            loadImage.file.delete();
          }
          dialog.dispose();
        }
        public void windowDeactivated(        WindowEvent e){
        }
        public void windowDeiconified(        WindowEvent e){
        }
        public void windowIconified(        WindowEvent e){
        }
        public void windowOpened(        WindowEvent e){
        }
      }
);
      final ArrayList<JButton> bts=new ArrayList<JButton>();
      for (int j=0; j < images.size(); j++) {
        final LoadImage f=images.get(j);
        if (f == null || f.file == null || !f.file.exists() || f.file.length() < 100)         continue;
        final BufferedImage captchaImage=JDImage.getImage(f.file);
        if (captchaImage == null) {
          f.file.delete();
          continue;
        }
        int area=captchaImage.getHeight(null) * captchaImage.getHeight(null);
        if (area < 50 || captchaImage.getHeight(null) > maxHeight || captchaImage.getWidth(null) > maxWeight || captchaImage.getWidth(null) < 10 || captchaImage.getHeight(null) < 5) {
          f.file.delete();
          continue;
        }
        double faktor=Math.max((double)captchaImage.getWidth(null) / 100,(double)captchaImage.getHeight(null) / 100);
        final int width=(int)(captchaImage.getWidth(null) / faktor);
        final int height=(int)(captchaImage.getHeight(null) / faktor);
        try {
          JButton ic=new GuiRunnable<JButton>(){
            public JButton runSave(){
              return new JButton(new ImageIcon(captchaImage.getScaledInstance(width,height,Image.SCALE_SMOOTH)));
            }
          }
.getReturnValue();
          ic.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              selectedImage=f;
              dialog.dispose();
            }
          }
);
          bts.add(ic);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      final JPanel panel=new GuiRunnable<JPanel>(){
        public JPanel runSave(){
          return new JPanel(new GridLayout((int)Math.ceil(((double)bts.size()) / 5),5));
        }
      }
.getReturnValue();
      for (      JButton button : bts) {
        panel.add(button);
      }
      new GuiRunnable<Object>(){
        public Object runSave(){
          dialog.add(new JScrollPane(panel));
          dialog.pack();
          dialog.setLocation(Screen.getCenterOfComponent(owner,dialog));
          dialog.setAlwaysOnTop(true);
          dialog.setVisible(true);
          return null;
        }
      }
.waitForEDT();
    }
    if (selectedImage != null && selectedImage.file != null) {
      loadProcess();
      if (opendir)       openDir(dir);
      new EasyMethodFile(host).copyExampleImage();
      return dir.length() > 0;
    }
 else     return false;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}"
20937,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
synchronized (LOCK) {
    if (this.isAborted(downloadLink))     return;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    int wait=60;
    String time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time != null)     wait=Integer.parseInt(time);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,wait * 1000l * 60);
  }
  Form freeform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (freeform == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  freeform.setAction(downloadLink.getDownloadURL());
  freeform.remove(""String_Node_Str"");
  br.submitForm(freeform);
  if (br.containsHTML(""String_Node_Str"")) {
    String passCode;
    DownloadLink link=downloadLink;
    Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (link.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,link);
    }
 else {
      passCode=link.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
    form.setAction(downloadLink.getDownloadURL());
    br.submitForm(form);
    form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (form != null && br.containsHTML(""String_Node_Str"")) {
      link.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY,JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.setProperty(""String_Node_Str"",passCode);
    }
  }
  Form downloadForm=br.getForm(1);
  if (downloadForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String current=br.getRegex(""String_Node_Str"").getMatch(0);
  if (current == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   sleep(Long.parseLong(wait.trim()) * 1000,downloadLink);
  downloadForm.put(""String_Node_Str"",current);
  downloadForm.put(""String_Node_Str"",""String_Node_Str"");
  downloadForm.put(""String_Node_Str"",""String_Node_Str"");
  downloadForm.setAction(downloadLink.getDownloadURL());
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=BrowserAdapter.openDownload(br,downloadLink,downloadForm,true,0);
  if (!(dl.getConnection().isContentDisposition()) && !dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      int wait2=60;
      String time=br.getRegex(""String_Node_Str"").getMatch(0);
      if (time != null)       wait2=Integer.parseInt(time);
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,wait2 * 1000l * 60);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
synchronized (LOCK) {
    if (this.isAborted(downloadLink))     return;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    int wait=60;
    String time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time != null)     wait=Integer.parseInt(time);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,wait * 1000l * 60);
  }
  Form freeform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (freeform == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  freeform.setAction(downloadLink.getDownloadURL());
  freeform.remove(""String_Node_Str"");
  br.submitForm(freeform);
  if (br.containsHTML(""String_Node_Str"")) {
    String passCode;
    DownloadLink link=downloadLink;
    Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (link.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,link);
    }
 else {
      passCode=link.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
    form.setAction(downloadLink.getDownloadURL());
    br.submitForm(form);
    form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (form != null && br.containsHTML(""String_Node_Str"")) {
      link.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY,JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.setProperty(""String_Node_Str"",passCode);
    }
  }
  Form downloadForm=br.getForm(1);
  if (downloadForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String current=br.getRegex(""String_Node_Str"").getMatch(0);
  if (current == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   sleep(Long.parseLong(wait.trim()) * 1000,downloadLink);
  downloadForm.put(""String_Node_Str"",current);
  downloadForm.put(""String_Node_Str"",""String_Node_Str"");
  downloadForm.put(""String_Node_Str"",""String_Node_Str"");
  downloadForm.setAction(downloadLink.getDownloadURL());
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=BrowserAdapter.openDownload(br,downloadLink,downloadForm,true,0);
  if (!(dl.getConnection().isContentDisposition()) && !dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",60 * 60 * 1000l);
    if (br.containsHTML(""String_Node_Str"")) {
      int wait2=60;
      String time=br.getRegex(""String_Node_Str"").getMatch(0);
      if (time != null)       wait2=Integer.parseInt(time);
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,wait2 * 1000l * 60);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20938,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.setDebug(true);
  br.getPage(downloadLink.getDownloadURL());
  Form premform=br.getForm(1);
  if (premform == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  premform.setPreferredSubmit(""String_Node_Str"");
  br.submitForm(premform);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null) {
      dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=BrowserAdapter.openDownload(br,downloadLink,dllink,true,0);
  if (!(dl.getConnection().isContentDisposition()) && !dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.setDebug(true);
  br.getPage(downloadLink.getDownloadURL());
  Form premform=br.getForm(1);
  if (premform == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  premform.setPreferredSubmit(""String_Node_Str"");
  br.submitForm(premform);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null) {
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null) {
      dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=BrowserAdapter.openDownload(br,downloadLink,dllink,true,0);
  if (!(dl.getConnection().isContentDisposition()) && !dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",60 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20939,"@Override public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1001l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
synchronized (LOCK) {
      if (counter > 10) {
        counter=0;
        throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,30 * 60 * 1001l);
      }
 else {
        counter++;
        throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 60 * 1001l);
      }
    }
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  br.getPage(link.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1001l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
synchronized (LOCK) {
      if (counter > 10) {
        counter=0;
        throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
      }
 else {
        counter++;
        throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,30 * 60 * 1000l);
      }
    }
  }
  dl.startDownload();
}"
20940,"private void getRedirectforAPI(String url,DownloadLink downloadLink) throws PluginException, InterruptedException {
  try {
    br.getPage(url);
    if (br.getRequest().getHttpConnection().getResponseCode() == 404)     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
 catch (  IOException e) {
    try {
      JDLogger.getLogger().info(br.getRequest().getHttpConnection().toString());
    }
 catch (    Throwable e2) {
    }
    JDLogger.exception(e);
    try {
      String passCode;
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      br.getPage(url + ""String_Node_Str"" + passCode);
      if (br.getRequest().getHttpConnection().getResponseCode() == 404)       throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      downloadLink.setProperty(""String_Node_Str"",passCode);
      return;
    }
 catch (    IOException e2) {
      try {
        JDLogger.getLogger().info(br.getRequest().getHttpConnection().toString());
      }
 catch (      Throwable e3) {
      }
      JDLogger.exception(e2);
      downloadLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
  }
}","private void getRedirectforAPI(String url,DownloadLink downloadLink) throws PluginException, InterruptedException {
  try {
    br.getPage(url);
    if (br.getRequest().getHttpConnection().getResponseCode() == 404)     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
 catch (  IOException e) {
    try {
      if (br.getRequest().getHttpConnection().getResponseCode() == 503)       limitReached(downloadLink,10 * 60,""String_Node_Str"");
    }
 catch (    IOException e1) {
      JDLogger.exception(e1);
    }
    try {
      JDLogger.getLogger().info(br.getRequest().getHttpConnection().toString());
    }
 catch (    Throwable e2) {
    }
    JDLogger.exception(e);
    try {
      String passCode;
      if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(null,downloadLink);
      }
 else {
        passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
      }
      br.getPage(url + ""String_Node_Str"" + passCode);
      if (br.getRequest().getHttpConnection().getResponseCode() == 404)       throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
      downloadLink.setProperty(""String_Node_Str"",passCode);
      return;
    }
 catch (    IOException e2) {
      try {
        if (br.getRequest().getHttpConnection().getResponseCode() == 503)         limitReached(downloadLink,10 * 60,""String_Node_Str"");
      }
 catch (      IOException e1) {
        JDLogger.exception(e1);
      }
      try {
        JDLogger.getLogger().info(br.getRequest().getHttpConnection().toString());
      }
 catch (      Throwable e3) {
      }
      JDLogger.exception(e2);
      downloadLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
  }
}"
20941,"@SuppressWarnings(""String_Node_Str"") public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + this.getURL() + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(getRequestMethod() + ""String_Node_Str"" + getURL().getPath()+ (getURL().getQuery() != null ? ""String_Node_Str"" + getURL().getQuery() : ""String_Node_Str"")+ ""String_Node_Str"");
  for (Iterator<Entry<String,List<String>>> it=this.getRequestProperties().entrySet().iterator(); it.hasNext(); ) {
    Entry<String,List<String>> next=it.next();
    StringBuilder value=new StringBuilder();
    for (    String v : next.getValue()) {
      value.append(';');
      value.append(v);
    }
    String v=value.toString();
    if (v.length() > 0)     v=v.substring(1);
    sb.append(next.getKey());
    sb.append(new char[]{':',' '});
    sb.append(v);
    sb.append(new char[]{'\r','\n'});
  }
  sb.append(new char[]{'\r','\n'});
  if (this.getRequest() != null) {
    if (getRequest() instanceof PostRequest) {
      sb.append(((PostRequest)getRequest()).getPostDataString());
      sb.append(new char[]{'\r','\n'});
    }
 else     if (getRequest() instanceof PostFormDataRequest) {
      sb.append(((PostFormDataRequest)getRequest()).getPostDataString());
      sb.append(new char[]{'\r','\n'});
    }
  }
  sb.append(""String_Node_Str"");
  for (Iterator<Entry<String,List<String>>> it=getHeaderFields().entrySet().iterator(); it.hasNext(); ) {
    Entry<String,List<String>> next=it.next();
    for (int i=next.getValue().size() - 1; i >= 0; i--) {
      if (next.getKey() == null) {
        sb.append(next.getValue().get(i));
        sb.append(new char[]{'\r','\n'});
      }
 else {
        sb.append(next.getKey());
        sb.append(new char[]{':',' '});
        sb.append(next.getValue().get(i));
        sb.append(new char[]{'\r','\n'});
      }
    }
  }
  sb.append(new char[]{'\r','\n'});
  return sb.toString();
}","@SuppressWarnings(""String_Node_Str"") public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + this.getURL() + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(getRequestMethod() + ""String_Node_Str"" + getURL().getPath()+ (getURL().getQuery() != null ? ""String_Node_Str"" + getURL().getQuery() : ""String_Node_Str"")+ ""String_Node_Str"");
  for (Iterator<Entry<String,List<String>>> it=this.getRequestProperties().entrySet().iterator(); it.hasNext(); ) {
    Entry<String,List<String>> next=it.next();
    StringBuilder value=new StringBuilder();
    for (    String v : next.getValue()) {
      value.append(';');
      value.append(v);
    }
    String v=value.toString();
    if (v.length() > 0)     v=v.substring(1);
    sb.append(next.getKey());
    sb.append(new char[]{':',' '});
    sb.append(v);
    sb.append(new char[]{'\r','\n'});
  }
  sb.append(new char[]{'\r','\n'});
  if (this.getRequest() != null) {
    if (getRequest() instanceof PostRequest) {
      if (((PostRequest)getRequest()).getPostDataString() != null)       sb.append(((PostRequest)getRequest()).getPostDataString());
      sb.append(new char[]{'\r','\n'});
    }
 else     if (getRequest() instanceof PostFormDataRequest) {
      if (((PostFormDataRequest)getRequest()).getPostDataString() != null)       sb.append(((PostFormDataRequest)getRequest()).getPostDataString());
      sb.append(new char[]{'\r','\n'});
    }
  }
  sb.append(""String_Node_Str"");
  for (Iterator<Entry<String,List<String>>> it=getHeaderFields().entrySet().iterator(); it.hasNext(); ) {
    Entry<String,List<String>> next=it.next();
    for (int i=next.getValue().size() - 1; i >= 0; i--) {
      if (next.getKey() == null) {
        sb.append(next.getValue().get(i));
        sb.append(new char[]{'\r','\n'});
      }
 else {
        sb.append(next.getKey());
        sb.append(new char[]{':',' '});
        sb.append(next.getValue().get(i));
        sb.append(new char[]{'\r','\n'});
      }
    }
  }
  sb.append(new char[]{'\r','\n'});
  return sb.toString();
}"
20942,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  if (parameter.matches(patternSupported_Info)) {
    br.getPage(parameter);
    String links_page[]=br.getRegex(""String_Node_Str"").getColumn(0);
    String streamlinks[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links_page == null && streamlinks == null)     return null;
    progress.setRange(links_page.length);
    if (links_page != null) {
      for (      String link : links_page) {
        String golink=""String_Node_Str"" + link;
        br.getPage(golink);
        String finallink=br.getRedirectLocation();
        if (finallink == null)         return null;
        DownloadLink dl_link=createDownloadlink(finallink);
        dl_link.addSourcePluginPassword(""String_Node_Str"");
        decryptedLinks.add(dl_link);
        progress.increase(1);
      }
      progress.setRange(streamlinks.length);
      if (streamlinks != null) {
        for (        String link : streamlinks) {
          String golink=""String_Node_Str"" + link;
          br.getPage(golink);
          String finallink=br.getRedirectLocation();
          if (finallink == null)           return null;
          DownloadLink dl_link=createDownloadlink(finallink);
          dl_link.addSourcePluginPassword(""String_Node_Str"");
          decryptedLinks.add(dl_link);
          progress.increase(1);
        }
      }
    }
  }
 else {
    br.getPage(parameter);
    DownloadLink dl;
    if (br.getRedirectLocation().equalsIgnoreCase(parameter))     br.getPage(parameter);
    if (br.getRedirectLocation().equalsIgnoreCase(parameter))     return null;
    String url=br.getRedirectLocation();
    decryptedLinks.add(dl=createDownloadlink(url));
    dl.addSourcePluginPassword(""String_Node_Str"");
    dl.setUrlDownload(url);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  if (parameter.matches(patternSupported_Info)) {
    br.getPage(parameter);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
    String links_page[]=br.getRegex(""String_Node_Str"").getColumn(0);
    String streamlinks[]=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links_page == null && streamlinks == null)     return null;
    progress.setRange(links_page.length);
    if (links_page != null) {
      for (      String link : links_page) {
        String golink=""String_Node_Str"" + link;
        br.getPage(golink);
        String finallink=br.getRedirectLocation();
        if (finallink == null)         return null;
        DownloadLink dl_link=createDownloadlink(finallink);
        dl_link.addSourcePluginPassword(""String_Node_Str"");
        decryptedLinks.add(dl_link);
        progress.increase(1);
      }
      progress.setRange(streamlinks.length);
      if (streamlinks != null) {
        for (        String link : streamlinks) {
          String golink=""String_Node_Str"" + link;
          br.getPage(golink);
          String finallink=br.getRedirectLocation();
          if (finallink == null)           return null;
          DownloadLink dl_link=createDownloadlink(finallink);
          dl_link.addSourcePluginPassword(""String_Node_Str"");
          decryptedLinks.add(dl_link);
          progress.increase(1);
        }
      }
    }
  }
 else {
    br.getPage(parameter);
    DownloadLink dl;
    if (br.getRedirectLocation().equalsIgnoreCase(parameter))     br.getPage(parameter);
    if (br.getRedirectLocation().equalsIgnoreCase(parameter))     return null;
    String url=br.getRedirectLocation();
    decryptedLinks.add(dl=createDownloadlink(url));
    dl.addSourcePluginPassword(""String_Node_Str"");
    dl.setUrlDownload(url);
  }
  return decryptedLinks;
}"
20943,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  for (int i=0; i <= 3; i++) {
    Recaptcha rc=new Recaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,param);
    rc.setCode(c);
    if (br.containsHTML(""String_Node_Str""))     continue;
    break;
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String[] links=HTMLParser.getHttpLinks(br.toString(),""String_Node_Str"");
  if (links.length == 0)   return null;
  for (  String finallink : links) {
    if (!finallink.contains(""String_Node_Str""))     decryptedLinks.add(createDownloadlink(finallink));
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  for (int i=0; i <= 3; i++) {
    Recaptcha rc=new Recaptcha(br);
    rc.parse();
    rc.load();
    File cf=rc.downloadCaptcha(getLocalCaptchaFile());
    String c=getCaptchaCode(cf,param);
    rc.setCode(c);
    if (br.containsHTML(""String_Node_Str""))     continue;
    break;
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String[] links=HTMLParser.getHttpLinks(br.toString(),""String_Node_Str"");
  if (links.length == 0)   return null;
  for (  String finallink : links) {
    if (!finallink.contains(""String_Node_Str"") && !finallink.contains(""String_Node_Str""))     decryptedLinks.add(createDownloadlink(finallink));
  }
  return decryptedLinks;
}"
20944,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1001);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",15 * 60 * 1000l);
  Form form=br.getForm(1);
  if (form == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  int tt=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
  sleep(tt * 1001l,downloadLink);
  br.submitForm(form);
  form=br.getForm(0);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,false,1);
  URLConnectionAdapter con=dl.getConnection();
  if (!con.isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",15 * 60 * 1000l);
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1001);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1001);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1001);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",15 * 60 * 1000l);
  Form form=br.getForm(1);
  if (form == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  int tt=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
  sleep(tt * 1001l,downloadLink);
  br.submitForm(form);
  form=br.getForm(0);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,false,1);
  URLConnectionAdapter con=dl.getConnection();
  if (!con.isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1001);
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",15 * 60 * 1000l);
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,10 * 60 * 1001);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20945,"@Override public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  requestFileInformation(link);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  for (int i=0; i <= 5; i++) {
    Form captchaform=br.getFormbyKey(""String_Node_Str"");
    String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaform == null || captchaurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    String code=getCaptchaCode(""String_Node_Str"" + captchaurl,link);
    captchaform.put(""String_Node_Str"",code);
    br.submitForm(captchaform);
    if (br.containsHTML(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      continue;
    }
    break;
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String freelink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (freelink == null)   freelink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (freelink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(""String_Node_Str"" + freelink);
  String getlink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (getlink == null)   getlink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (getlink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=30;
  if (ttt != null)   tt=Integer.parseInt(ttt);
  sleep(tt * 1001,link);
  br.getPage(""String_Node_Str"" + getlink);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,-2);
  if ((dl.getConnection().getContentType().contains(""String_Node_Str"")))   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  this.setBrowserExclusive();
  requestFileInformation(link);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
  for (int i=0; i <= 5; i++) {
    Form captchaform=br.getFormbyKey(""String_Node_Str"");
    String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaform == null || captchaurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    String code=getCaptchaCode(""String_Node_Str"" + captchaurl,link);
    captchaform.put(""String_Node_Str"",code);
    br.submitForm(captchaform);
    if (br.containsHTML(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      continue;
    }
    break;
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String freelink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (freelink == null)   freelink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (freelink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(""String_Node_Str"" + freelink);
  String getlink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (getlink == null)   getlink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (getlink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=30;
  if (ttt != null)   tt=Integer.parseInt(ttt);
  sleep(tt * 1001,link);
  br.getPage(""String_Node_Str"" + getlink);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  dl=jd.plugins.BrowserAdapter.openDownload(br,link,dllink,true,-2);
  if ((dl.getConnection().getContentType().contains(""String_Node_Str""))) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20946,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  br.setDebug(false);
  String error=br.getRegex(""String_Node_Str"").getMatch(0);
  if (error != null)   throw new PluginException(LinkStatus.ERROR_FATAL,Encoding.UTF8Encode(error));
  String url=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(url);
  if (br.getRegex(""String_Node_Str"").matches())   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null && !downloadLink.getBooleanProperty(""String_Node_Str"",true))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 60 * 1000l);
  String link=br.getRegex(""String_Node_Str"").getMatch(0);
  if (link == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(false);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,link,true,1);
  if (!dl.getConnection().isContentDisposition()) {
    dl.getConnection().disconnect();
    if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
      logger.severe(""String_Node_Str"");
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    }
    if (wait != null) {
      downloadLink.setProperty(""String_Node_Str"",false);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
  }
  if (dl.startDownload()) {
    downloadLink.setProperty(""String_Node_Str"",true);
  }
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  br.setDebug(false);
  String error=br.getRegex(""String_Node_Str"").getMatch(0);
  if (error != null)   throw new PluginException(LinkStatus.ERROR_FATAL,Encoding.UTF8Encode(error));
  String url=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.getPage(url);
  if (br.getRegex(""String_Node_Str"").matches())   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",10 * 60 * 1000l);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 60 * 1000l);
  String link=br.getRegex(""String_Node_Str"").getMatch(0);
  if (link == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(false);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,link,true,1);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20947,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, InterruptedException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(false);
  br.getPage(downloadLink.getDownloadURL());
  if (br.getRedirectLocation() != null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  br.setFollowRedirects(true);
  String filename=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(filename.trim() + ""String_Node_Str"");
  downloadLink.setDownloadSize(Regex.getSize(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, InterruptedException, PluginException {
  this.setBrowserExclusive();
  br.setFollowRedirects(false);
  br.getPage(downloadLink.getDownloadURL());
  if (br.getRedirectLocation() != null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String fsk18=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fsk18 != null)   br.getPage(fsk18);
  br.setFollowRedirects(true);
  String filename=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setName(filename.trim() + ""String_Node_Str"");
  downloadLink.setDownloadSize(Regex.getSize(filesize.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  return AvailableStatus.TRUE;
}"
20948,"@Override public int getMaxSimultanFreeDownloadNum(){
  return 1;
}","@Override public int getMaxSimultanFreeDownloadNum(){
  return 5;
}"
20949,"public String getDownloadUrl(Browser br,DownloadLink downloadLink) throws PluginException, IOException {
  String varLink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (varLink != null) {
    sleep(2000,downloadLink);
    return varLink;
  }
  br.setFollowRedirects(false);
  String fileID=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileID == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String starttimer=br.getRegex(""String_Node_Str"").getMatch(0);
  String redirect=null;
  if (starttimer != null) {
    sleep((Long.parseLong(starttimer) + 2) * 1000l,downloadLink);
  }
  br.postPage(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",""String_Node_Str"" + fileID + ""String_Node_Str"");
  redirect=br.getRegex(""String_Node_Str"").getMatch(0);
  if (redirect != null) {
    redirect=redirect.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (redirect == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  return redirect;
}","public String getDownloadUrl(Browser br,DownloadLink downloadLink) throws PluginException, IOException {
  String varLink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (varLink != null) {
    sleep(2000,downloadLink);
    return varLink;
  }
  br.setFollowRedirects(false);
  String fileID=br.getRegex(""String_Node_Str"").getMatch(0);
  if (fileID == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String starttimer=br.getRegex(""String_Node_Str"").getMatch(0);
  String redirect=null;
  if (starttimer != null) {
    sleep((Long.parseLong(starttimer) + 2) * 1000l,downloadLink);
  }
  br.postPage(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",""String_Node_Str"" + fileID + ""String_Node_Str"");
  redirect=br.getRegex(""String_Node_Str"").getMatch(0);
  if (redirect != null) {
    redirect=redirect.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 1000l);
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",15 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  if (redirect == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  return redirect;
}"
20950,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  String dllink=null;
  String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  boolean isStream=br.containsHTML(""String_Node_Str"");
  if (!isStream) {
    Browser brc=requestXML(br,""String_Node_Str"" + fileID,null,false);
    if (brc.containsHTML(""String_Node_Str"")) {
      String error=brc.getRegex(""String_Node_Str"").getMatch(0);
      if (error == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      if (error.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    if (brc.containsHTML(""String_Node_Str"")) {
      int waitsecs=0;
      String waittime=brc.getRegex(""String_Node_Str"").getMatch(0);
      if (waittime != null)       waitsecs=Integer.parseInt(waittime);
      if (waitsecs > 0)       sleep(waitsecs * 1000l,downloadLink);
      dllink=brc.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
 else {
    br.getPage(""String_Node_Str"" + fileID + ""String_Node_Str"");
    dllink=br.getRedirectLocation();
  }
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  String dllink=null;
  String fileID=new Regex(downloadLink.getDownloadURL(),""String_Node_Str"").getMatch(0);
  boolean isStream=br.containsHTML(""String_Node_Str"");
  if (!isStream) {
    Browser brc=requestXML(br,""String_Node_Str"" + fileID,null,false);
    if (brc.containsHTML(""String_Node_Str"")) {
      String error=brc.getRegex(""String_Node_Str"").getMatch(0);
      if (error == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
      if (error.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
      if (error.contains(""String_Node_Str""))       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
      throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    if (brc.containsHTML(""String_Node_Str"")) {
      int waitsecs=0;
      String waittime=brc.getRegex(""String_Node_Str"").getMatch(0);
      if (waittime != null)       waitsecs=Integer.parseInt(waittime);
      if (waitsecs > 0)       sleep(waitsecs * 1000l,downloadLink);
      dllink=brc.getRegex(""String_Node_Str"").getMatch(0);
    }
  }
 else {
    br.getPage(""String_Node_Str"" + fileID + ""String_Node_Str"");
    dllink=br.getRedirectLocation();
  }
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,!isStream,1);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20951,"private Browser requestXML(Browser br,String url,String post,boolean clonebrowser) throws IOException {
  Browser brc=br;
  if (clonebrowser)   brc=br.cloneBrowser();
  brc.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  brc.postPage(url,post != null ? post : ""String_Node_Str"");
  brc.getHeaders().remove(""String_Node_Str"");
  return brc;
}","private Browser requestXML(Browser br,String url,String post,boolean clonebrowser) throws IOException {
  Browser brc=br;
  if (clonebrowser)   brc=br.cloneBrowser();
  brc.setDebug(true);
  brc.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
  brc.postPage(url,post != null ? post : ""String_Node_Str"");
  brc.getHeaders().remove(""String_Node_Str"");
  return brc;
}"
20952,"private void prepareHibernateOrStandby(){
  logger.info(""String_Node_Str"");
  DownloadWatchDog.getInstance().stopDownloads();
  JDController.getInstance().syncDatabase();
}","private void prepareHibernateOrStandby(){
  logger.info(""String_Node_Str"");
  DownloadWatchDog.getInstance().stopDownloads();
  JDController.getInstance().syncDatabase();
  menuAction.setSelected(false);
}"
20953,"@Override public void resetDownloadlink(DownloadLink link){
}","@Override public void resetDownloadlink(DownloadLink link){
  link.setProperty(""String_Node_Str"",""String_Node_Str"");
}"
20954,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  String url=null;
  for (int i=0; i < NUMBER_OF_RETRIES; i++) {
    if (url != null)     break;
    requestFileInformation(downloadLink);
    try {
      Recaptcha rc=new Recaptcha(br);
      Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      String id=br.getRegex(""String_Node_Str"").getMatch(0);
      if (id != null) {
        rc.setId(id);
        InputField challenge=new InputField(""String_Node_Str"",null);
        InputField code=new InputField(""String_Node_Str"",null);
        form.addInputField(challenge);
        form.addInputField(code);
        rc.setForm(form);
        rc.load();
        File cf=rc.downloadCaptcha(getLocalCaptchaFile());
        try {
          String c=getCaptchaCode(cf,downloadLink);
          rc.setCode(c);
        }
 catch (        PluginException e) {
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
        }
      }
    }
 catch (    Exception e) {
      JDLogger.exception(e);
    }
    if (downloadLink.getStringProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      url=br.getRedirectLocation();
    }
 else {
      if (!br.containsHTML(""String_Node_Str"")) {
        String passCode;
        DownloadLink link=downloadLink;
        Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        if (link.getStringProperty(""String_Node_Str"",null) == null) {
          passCode=Plugin.getUserInput(null,link);
        }
 else {
          passCode=link.getStringProperty(""String_Node_Str"",null);
        }
        form.put(""String_Node_Str"",passCode);
        br.submitForm(form);
        form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        if (form != null && !br.containsHTML(""String_Node_Str"")) {
          link.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          link.setProperty(""String_Node_Str"",passCode);
        }
      }
      url=getDownloadUrl();
    }
  }
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (!dl.getConnection().isContentDisposition()) {
    logger.info(""String_Node_Str"");
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  String url=null;
  for (int i=0; i < NUMBER_OF_RETRIES; i++) {
    if (url != null)     break;
    requestFileInformation(downloadLink);
    try {
      Recaptcha rc=new Recaptcha(br);
      Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      String id=br.getRegex(""String_Node_Str"").getMatch(0);
      if (id != null) {
        rc.setId(id);
        InputField challenge=new InputField(""String_Node_Str"",null);
        InputField code=new InputField(""String_Node_Str"",null);
        form.addInputField(challenge);
        form.addInputField(code);
        rc.setForm(form);
        rc.load();
        File cf=rc.downloadCaptcha(getLocalCaptchaFile());
        try {
          String c=getCaptchaCode(cf,downloadLink);
          rc.setCode(c);
        }
 catch (        PluginException e) {
          throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
        }
      }
    }
 catch (    Exception e) {
      JDLogger.exception(e);
    }
    if (downloadLink.getStringProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      url=br.getRedirectLocation();
    }
 else {
      if (!br.containsHTML(""String_Node_Str"")) {
        String passCode;
        DownloadLink link=downloadLink;
        Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        if (link.getStringProperty(""String_Node_Str"",null) == null) {
          passCode=Plugin.getUserInput(null,link);
        }
 else {
          passCode=link.getStringProperty(""String_Node_Str"",null);
        }
        form.put(""String_Node_Str"",passCode);
        br.submitForm(form);
        form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        if (form != null && !br.containsHTML(""String_Node_Str"")) {
          link.setProperty(""String_Node_Str"",null);
          throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          link.setProperty(""String_Node_Str"",passCode);
        }
      }
      url=getDownloadUrl();
    }
  }
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (!dl.getConnection().isContentDisposition()) {
    logger.info(""String_Node_Str"");
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20955,"@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException, InterruptedException {
  this.setBrowserExclusive();
  String url=downloadLink.getDownloadURL();
  AvailableStatus status=AvailableStatus.TRUE;
  for (int i=0; i < NUMBER_OF_RETRIES; i++) {
    try {
      br.getPage(url);
      String redirectURL=br.getRedirectLocation();
      if (redirectURL != null && redirectURL.indexOf(ERROR_PAGE) > 0) {
        status=AvailableStatus.FALSE;
        String errorCode=redirectURL.substring(redirectURL.indexOf(""String_Node_Str"") + 1,redirectURL.length());
        if (errorCode.equals(""String_Node_Str"")) {
          logger.warning(""String_Node_Str"" + url + ""String_Node_Str"");
        }
        break;
      }
      if (redirectURL != null && br.getCookie(""String_Node_Str"",""String_Node_Str"") != null) {
        if (Plugin.extractFileNameFromURL(url).equals(""String_Node_Str"")) {
          br.getPage(redirectURL);
          break;
        }
        downloadLink.setProperty(""String_Node_Str"",""String_Node_Str"");
        if (!downloadLink.getStringProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          downloadLink.setName(Plugin.extractFileNameFromURL(br.getRedirectLocation()));
        }
        return AvailableStatus.TRUE;
      }
      break;
    }
 catch (    IOException e) {
      if (e.getMessage().contains(""String_Node_Str"")) {
        logger.info(""String_Node_Str"");
        Thread.sleep(200);
        continue;
      }
 else {
        status=AvailableStatus.FALSE;
      }
    }
  }
  if (status == AvailableStatus.FALSE)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.getRegex(offlinelink).matches())   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null)   filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setFinalFileName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  status=AvailableStatus.TRUE;
  return status;
}","@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws IOException, PluginException, InterruptedException {
  this.setBrowserExclusive();
  br.setFollowRedirects(false);
  downloadLink.setProperty(""String_Node_Str"",""String_Node_Str"");
  String url=downloadLink.getDownloadURL();
  AvailableStatus status=AvailableStatus.TRUE;
  for (int i=0; i < NUMBER_OF_RETRIES; i++) {
    try {
      br.getPage(url);
      String redirectURL=br.getRedirectLocation();
      if (redirectURL != null && redirectURL.indexOf(ERROR_PAGE) > 0) {
        status=AvailableStatus.FALSE;
        String errorCode=redirectURL.substring(redirectURL.indexOf(""String_Node_Str"") + 1,redirectURL.length());
        if (errorCode.equals(""String_Node_Str"")) {
          logger.warning(""String_Node_Str"" + url + ""String_Node_Str"");
        }
        break;
      }
      if (redirectURL != null && br.getCookie(""String_Node_Str"",""String_Node_Str"") != null) {
        if (url.contains(""String_Node_Str"")) {
          br.getPage(redirectURL);
          break;
        }
        downloadLink.setProperty(""String_Node_Str"",""String_Node_Str"");
        if (!downloadLink.getStringProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
          downloadLink.setName(Plugin.extractFileNameFromURL(br.getRedirectLocation()));
        }
        return AvailableStatus.TRUE;
      }
      break;
    }
 catch (    IOException e) {
      if (e.getMessage().contains(""String_Node_Str"")) {
        logger.info(""String_Node_Str"");
        Thread.sleep(200);
        continue;
      }
 else {
        status=AvailableStatus.FALSE;
      }
    }
  }
  if (status == AvailableStatus.FALSE)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  if (br.getRegex(offlinelink).matches())   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  String filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filesize == null)   filesize=br.getRegex(""String_Node_Str"").getMatch(0);
  if (filename == null || filesize == null)   throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  downloadLink.setFinalFileName(filename.trim());
  downloadLink.setDownloadSize(Regex.getSize(filesize));
  status=AvailableStatus.TRUE;
  return status;
}"
20956,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.getPage(downloadLink.getDownloadURL());
  String url=null;
  if (downloadLink.getStringProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    url=br.getRedirectLocation();
  }
 else {
    if (!br.containsHTML(""String_Node_Str"")) {
      String passCode;
      DownloadLink link=downloadLink;
      Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (link.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(null,link);
      }
 else {
        passCode=link.getStringProperty(""String_Node_Str"",null);
      }
      form.put(""String_Node_Str"",passCode);
      br.submitForm(form);
      form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (form != null && !br.containsHTML(""String_Node_Str"")) {
        link.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        link.setProperty(""String_Node_Str"",passCode);
      }
    }
    url=getDownloadUrl();
  }
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (!dl.getConnection().isContentDisposition()) {
    logger.info(""String_Node_Str"");
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.getPage(downloadLink.getDownloadURL());
  String url=null;
  if (downloadLink.getStringProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    url=br.getRedirectLocation();
  }
 else {
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
    if (!br.containsHTML(""String_Node_Str"")) {
      String passCode;
      DownloadLink link=downloadLink;
      Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (link.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(null,link);
      }
 else {
        passCode=link.getStringProperty(""String_Node_Str"",null);
      }
      form.put(""String_Node_Str"",passCode);
      br.submitForm(form);
      form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      if (form != null && !br.containsHTML(""String_Node_Str"")) {
        link.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        link.setProperty(""String_Node_Str"",passCode);
      }
    }
    url=getDownloadUrl();
  }
  if (url == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url,true,0);
  if (!dl.getConnection().isContentDisposition()) {
    logger.info(""String_Node_Str"");
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20957,"public void handleWebsiteDownload(DownloadLink link,Account account) throws Exception {
  if (account != null) {
    login(account,true);
  }
  int captchTries=10;
  Form form=null;
  String code=null;
  while (captchTries-- >= 0) {
    br.getPage(""String_Node_Str"" + wwwWorkaround + ""String_Node_Str""+ getDownloadID(link));
    String red=br.getRegex(""String_Node_Str"").getMatch(0);
    if (red != null) {
      logger.severe(""String_Node_Str"");
      br.getPage(red);
      String wait=br.getRegex(""String_Node_Str"").getMatch(0);
      int l=30;
      if (wait != null) {
        l=Integer.parseInt(wait.trim());
      }
      limitReached(link,l * 60,""String_Node_Str"");
    }
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    form=br.getForm(0);
    if (form != null && form.containsHTML(""String_Node_Str""))     form=br.getForm(1);
    if (form != null && form.containsHTML(""String_Node_Str"")) {
      String passCode;
      if (link.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",link);
      }
 else {
        passCode=link.getStringProperty(""String_Node_Str"",null);
      }
      form.put(""String_Node_Str"",passCode);
      br.submitForm(form);
      form=br.getForm(0);
      if (form != null && form.containsHTML(""String_Node_Str""))       form=br.getForm(1);
      if (form != null && form.containsHTML(""String_Node_Str"")) {
        link.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        link.setProperty(""String_Node_Str"",passCode);
      }
    }
    if (form != null && form.containsHTML(""String_Node_Str"")) {
      String captcha=form.getRegex(""String_Node_Str"").getMatch(0);
      File file=this.getLocalCaptchaFile();
      Browser c=br.cloneBrowser();
      c.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
      URLConnectionAdapter con=c.openGetConnection(captcha);
      Browser.download(file,con);
      code=getCaptchaCode(file,link);
      if (code == null)       continue;
      form.put(""String_Node_Str"",code);
      br.submitForm(form);
      form=br.getForm(0);
      if (form != null && form.containsHTML(""String_Node_Str""))       form=br.getForm(1);
      if (form != null && form.containsHTML(""String_Node_Str"")) {
        continue;
      }
 else {
        break;
      }
    }
  }
  if (form != null && form.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  doDownload(link,url,true,account);
}","public void handleWebsiteDownload(DownloadLink link,Account account) throws Exception {
  if (account != null) {
    login(account,true);
  }
  int captchTries=10;
  Form form=null;
  String code=null;
  while (captchTries-- >= 0) {
    br.getPage(""String_Node_Str"" + wwwWorkaround + ""String_Node_Str""+ getDownloadID(link));
    String red=br.getRegex(""String_Node_Str"").getMatch(0);
    if (red != null) {
      logger.severe(""String_Node_Str"");
      br.getPage(red);
      String wait=br.getRegex(""String_Node_Str"").getMatch(0);
      int l=30;
      if (wait != null) {
        l=Integer.parseInt(wait.trim());
      }
      limitReached(link,l * 60,""String_Node_Str"");
    }
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FATAL,""String_Node_Str"");
    form=br.getForm(0);
    if (form != null && form.containsHTML(""String_Node_Str""))     form=br.getForm(1);
    if (form != null && form.containsHTML(""String_Node_Str"")) {
      String passCode;
      if (link.getStringProperty(""String_Node_Str"",null) == null) {
        passCode=Plugin.getUserInput(""String_Node_Str"",link);
      }
 else {
        passCode=link.getStringProperty(""String_Node_Str"",null);
      }
      form.put(""String_Node_Str"",passCode);
      br.submitForm(form);
      form=br.getForm(0);
      if (form != null && form.containsHTML(""String_Node_Str""))       form=br.getForm(1);
      if (form != null && form.containsHTML(""String_Node_Str"")) {
        link.setProperty(""String_Node_Str"",null);
        throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        link.setProperty(""String_Node_Str"",passCode);
      }
    }
    if (form != null && form.containsHTML(""String_Node_Str"")) {
      String captcha=form.getRegex(""String_Node_Str"").getMatch(0);
      File file=this.getLocalCaptchaFile();
      Browser c=br.cloneBrowser();
      c.getHeaders().put(""String_Node_Str"",""String_Node_Str"");
      URLConnectionAdapter con=c.openGetConnection(captcha);
      Browser.download(file,con);
      code=getCaptchaCode(file,link);
      if (code == null)       continue;
      form.put(""String_Node_Str"",code);
      br.submitForm(form);
      form=br.getForm(0);
      if (form != null && form.containsHTML(""String_Node_Str""))       form=br.getForm(1);
      if (form != null && form.containsHTML(""String_Node_Str"")) {
        continue;
      }
 else {
        break;
      }
    }
  }
  if (form != null && form.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  if (br.containsHTML(""String_Node_Str"")) {
    br.getPage(""String_Node_Str"");
    wait=br.getRegex(""String_Node_Str"").getMatch(0);
    logger.info(""String_Node_Str"" + wait + ""String_Node_Str"");
    if (wait != null) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 60 * 1000l);
    }
 else     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,25 * 60 * 1000l);
  }
  String url=br.getRegex(""String_Node_Str"").getMatch(0);
  doDownload(link,url,true,account);
}"
20958,"@Override public void handlePremium(DownloadLink parameter,Account account) throws Exception {
  boolean free=false;
  STATUS filestatus=null;
synchronized (PREMLOCK) {
    filestatus=getFileStatus(parameter);
    if (filestatus != STATUS.API && filestatus != STATUS.OFFLINE) {
      if (filestatus == STATUS.BLOCKED) {
        login(account,false);
      }
 else {
        login(account,true);
      }
    }
    boolean check=filestatus == STATUS.BLOCKED && !(filestatus == STATUS.API || filestatus == STATUS.OFFLINE);
    if (!isPremium(account,br.cloneBrowser(),check)) {
      simultanpremium=1;
      free=true;
    }
 else {
      if (simultanpremium + 1 > 20) {
        simultanpremium=20;
      }
 else {
        simultanpremium++;
      }
    }
  }
switch (filestatus) {
case API:
    handleAPIDownload(parameter,account);
  return;
case OFFLINE:
try {
  logger.finest(br.getRequest().getHttpConnection() + ""String_Node_Str"");
}
 catch (Exception e) {
  JDLogger.exception(e);
}
logger.info(""String_Node_Str"" + br.toString());
throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
case BLOCKED:
if (free) {
if (wait != null) {
throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 60 * 1000l);
}
 else throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,25 * 60 * 1000l);
}
break;
case ONLINE:
if (free) {
handleWebsiteDownload(parameter,account);
return;
}
break;
}
String url=null;
br.setFollowRedirects(false);
br.getPage(""String_Node_Str"" + wwwWorkaround + ""String_Node_Str""+ getDownloadID(parameter));
if (br.containsHTML(""String_Node_Str"")) throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
if (br.getRedirectLocation() == null) {
String red=br.getRegex(""String_Node_Str"").getMatch(0);
if (red != null || br.containsHTML(""String_Node_Str"")) {
if (!isPremium(account,br.cloneBrowser(),true)) {
logger.info(""String_Node_Str"");
parameter.getLinkStatus().setRetryCount(parameter.getLinkStatus().getRetryCount() + 1);
throw new PluginException(LinkStatus.ERROR_RETRY);
}
 else {
throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
}
}
Form form=br.getForm(0);
if (form != null && form.containsHTML(""String_Node_Str"")) form=br.getForm(1);
if (form != null && form.containsHTML(""String_Node_Str"")) {
String passCode;
if (parameter.getStringProperty(""String_Node_Str"",null) == null) {
passCode=Plugin.getUserInput(""String_Node_Str"",parameter);
}
 else {
passCode=parameter.getStringProperty(""String_Node_Str"",null);
}
form.put(""String_Node_Str"",passCode);
br.submitForm(form);
form=br.getForm(0);
if (form != null && form.containsHTML(""String_Node_Str"")) form=br.getForm(1);
if (form != null && form.containsHTML(""String_Node_Str"")) {
parameter.setProperty(""String_Node_Str"",null);
throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
}
 else {
parameter.setProperty(""String_Node_Str"",passCode);
}
}
if (form != null && form.containsHTML(""String_Node_Str"")) {
if (!isPremium(account,br.cloneBrowser(),true)) {
logger.info(""String_Node_Str"");
parameter.getLinkStatus().setRetryCount(parameter.getLinkStatus().getRetryCount() + 1);
throw new PluginException(LinkStatus.ERROR_RETRY);
}
 else {
throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
}
}
url=br.getRegex(""String_Node_Str"").getMatch(0);
if (url == null) url=br.getRedirectLocation();
}
 else {
url=br.getRedirectLocation();
}
doDownload(parameter,url,true,account);
}","@Override public void handlePremium(DownloadLink parameter,Account account) throws Exception {
  boolean free=false;
  STATUS filestatus=null;
synchronized (PREMLOCK) {
    filestatus=getFileStatus(parameter);
    if (filestatus != STATUS.API && filestatus != STATUS.OFFLINE) {
      if (filestatus == STATUS.BLOCKED) {
        login(account,false);
      }
 else {
        login(account,true);
      }
    }
    boolean check=filestatus == STATUS.BLOCKED && !(filestatus == STATUS.API || filestatus == STATUS.OFFLINE);
    if (!isPremium(account,br.cloneBrowser(),check)) {
      simultanpremium=1;
      free=true;
    }
 else {
      if (simultanpremium + 1 > 20) {
        simultanpremium=20;
      }
 else {
        simultanpremium++;
      }
    }
  }
switch (filestatus) {
case API:
    handleAPIDownload(parameter,account);
  return;
case OFFLINE:
try {
  logger.finest(br.getRequest().getHttpConnection() + ""String_Node_Str"");
}
 catch (Exception e) {
  JDLogger.exception(e);
}
logger.info(""String_Node_Str"" + br.toString());
throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
case BLOCKED:
if (free) {
if (wait != null) {
throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 60 * 1000l);
}
 else throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,25 * 60 * 1000l);
}
break;
case ONLINE:
if (free) {
handleWebsiteDownload(parameter,account);
return;
}
break;
}
String url=null;
br.setFollowRedirects(false);
br.getPage(""String_Node_Str"" + wwwWorkaround + ""String_Node_Str""+ getDownloadID(parameter));
if (br.containsHTML(""String_Node_Str"")) throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
if (br.getRedirectLocation() == null) {
String red=br.getRegex(""String_Node_Str"").getMatch(0);
if (red != null || br.containsHTML(""String_Node_Str"")) {
if (!isPremium(account,br.cloneBrowser(),true)) {
logger.info(""String_Node_Str"");
parameter.getLinkStatus().setRetryCount(parameter.getLinkStatus().getRetryCount() + 1);
throw new PluginException(LinkStatus.ERROR_RETRY);
}
 else {
throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
}
}
Form form=br.getForm(0);
if (form != null && form.containsHTML(""String_Node_Str"")) form=br.getForm(1);
if (form != null && form.containsHTML(""String_Node_Str"")) {
String passCode;
if (parameter.getStringProperty(""String_Node_Str"",null) == null) {
passCode=Plugin.getUserInput(""String_Node_Str"",parameter);
}
 else {
passCode=parameter.getStringProperty(""String_Node_Str"",null);
}
form.put(""String_Node_Str"",passCode);
br.submitForm(form);
form=br.getForm(0);
if (form != null && form.containsHTML(""String_Node_Str"")) form=br.getForm(1);
if (form != null && form.containsHTML(""String_Node_Str"")) {
parameter.setProperty(""String_Node_Str"",null);
throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
}
 else {
parameter.setProperty(""String_Node_Str"",passCode);
}
}
if (form != null && form.containsHTML(""String_Node_Str"")) {
if (!isPremium(account,br.cloneBrowser(),true)) {
logger.info(""String_Node_Str"");
parameter.getLinkStatus().setRetryCount(parameter.getLinkStatus().getRetryCount() + 1);
throw new PluginException(LinkStatus.ERROR_RETRY);
}
 else {
throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
}
}
if (br.containsHTML(""String_Node_Str"")) {
br.getPage(""String_Node_Str"");
wait=br.getRegex(""String_Node_Str"").getMatch(0);
logger.info(""String_Node_Str"" + wait + ""String_Node_Str"");
if (wait != null) {
throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 60 * 1000l);
}
 else throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,25 * 60 * 1000l);
}
url=br.getRegex(""String_Node_Str"").getMatch(0);
if (url == null) url=br.getRedirectLocation();
}
 else {
url=br.getRedirectLocation();
}
doDownload(parameter,url,true,account);
}"
20959,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setDebug(true);
  if (downloadLink.getDownloadURL().contains(""String_Node_Str"")) {
    br.getPage(downloadLink.getDownloadURL() + ""String_Node_Str"");
  }
 else {
    br.getPage(downloadLink.getDownloadURL() + ""String_Node_Str"");
  }
  br.setDebug(true);
  boolean mayfail=br.getRegex(""String_Node_Str"").matches();
  String wait=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (wait != null) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 60 * 1000l);
  }
  wait=br.getRegex(""String_Node_Str"").getMatch(0);
  Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (wait == null)   wait=""String_Node_Str"";
  sleep(Long.parseLong(wait.trim()) * 1000l,downloadLink);
  br.setFollowRedirects(true);
  form.setAction(form.getAction() + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType() != null && con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    if ((br.containsHTML(""String_Node_Str"") && br.containsHTML(""String_Node_Str"")) || mayfail)     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setDebug(true);
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (downloadLink.getDownloadURL().contains(""String_Node_Str"")) {
    br.getPage(downloadLink.getDownloadURL() + ""String_Node_Str"");
  }
 else {
    br.getPage(downloadLink.getDownloadURL() + ""String_Node_Str"");
  }
  br.setDebug(true);
  boolean mayfail=br.getRegex(""String_Node_Str"").matches();
  String wait=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatch(0);
  if (wait != null) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 60 * 1000l);
  }
  wait=br.getRegex(""String_Node_Str"").getMatch(0);
  Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (wait == null)   wait=""String_Node_Str"";
  sleep(Long.parseLong(wait.trim()) * 1000l,downloadLink);
  br.setFollowRedirects(true);
  form.setAction(form.getAction() + ""String_Node_Str"");
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType() != null && con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    if ((br.containsHTML(""String_Node_Str"") && br.containsHTML(""String_Node_Str"")) || mayfail)     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20960,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.setFollowRedirects(false);
  br.getPage(downloadLink.getDownloadURL());
  if (br.getRedirectLocation() != null) {
    br.setFollowRedirects(true);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,br.getRedirectLocation(),true,-4);
  }
 else {
    Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    br.setFollowRedirects(true);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,true,0);
  }
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType() != null && con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    if ((br.containsHTML(""String_Node_Str"") && br.containsHTML(""String_Node_Str"")))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  br.setFollowRedirects(false);
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(downloadLink.getDownloadURL());
  if (br.getRedirectLocation() != null) {
    br.setFollowRedirects(true);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,br.getRedirectLocation(),true,-4);
  }
 else {
    Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    br.setFollowRedirects(true);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,true,0);
  }
  URLConnectionAdapter con=dl.getConnection();
  if (con.getContentType() != null && con.getContentType().contains(""String_Node_Str"")) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
    if ((br.containsHTML(""String_Node_Str"") && br.containsHTML(""String_Node_Str"")))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,""String_Node_Str"",30 * 60 * 1000l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20961,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.setFollowRedirects(false);
  br.getPage(parameter);
  String dlsite0=new Regex(param,""String_Node_Str"").getMatch(0);
  String dlsite1=""String_Node_Str"" + dlsite0;
  br.getPage(dlsite1);
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  progress.setRange(links.length);
  for (  String link : links) {
    String link1=""String_Node_Str"" + link;
    br.getPage(link1);
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null)     return decryptedLinks;
    DownloadLink dl=createDownloadlink(finallink);
    decryptedLinks.add(dl);
    progress.increase(1);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String dlsite0=new Regex(param,""String_Node_Str"").getMatch(0);
  String dlsite1=""String_Node_Str"" + dlsite0;
  br.getPage(dlsite1);
  if (!br.containsHTML(""String_Node_Str""))   throw new DecrypterException(JDL.L(""String_Node_Str"",""String_Node_Str""));
  String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
  if (links == null || links.length == 0)   return null;
  progress.setRange(links.length);
  for (  String link : links) {
    String link1=""String_Node_Str"" + link;
    br.getPage(link1);
    String finallink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (finallink == null)     return null;
    DownloadLink dl=createDownloadlink(finallink);
    decryptedLinks.add(dl);
    progress.increase(1);
  }
  return decryptedLinks;
}"
20962,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
synchronized (LOCK) {
    if (this.isAborted(downloadLink))     return;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    int wait=60;
    String time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time != null)     wait=Integer.parseInt(time);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,wait * 1000l * 60);
  }
  Form freeform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (freeform == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  freeform.setAction(downloadLink.getDownloadURL());
  freeform.remove(""String_Node_Str"");
  br.submitForm(freeform);
  if (br.containsHTML(""String_Node_Str"")) {
    String passCode;
    DownloadLink link=downloadLink;
    Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (link.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,link);
    }
 else {
      passCode=link.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
    form.setAction(downloadLink.getDownloadURL());
    br.submitForm(form);
    form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (form != null && br.containsHTML(""String_Node_Str"")) {
      link.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY,JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.setProperty(""String_Node_Str"",passCode);
    }
  }
  Form downloadForm=br.getForm(1);
  if (downloadForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String current=br.getRegex(""String_Node_Str"").getMatch(0);
  if (current == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   sleep(Long.parseLong(wait.trim()) * 1000,downloadLink);
  downloadForm.put(""String_Node_Str"",current);
  downloadForm.put(""String_Node_Str"",""String_Node_Str"");
  downloadForm.put(""String_Node_Str"",""String_Node_Str"");
  downloadForm.setAction(downloadLink.getDownloadURL());
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadForm,true,0);
  if (!(dl.getConnection().isContentDisposition()) && !dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
synchronized (LOCK) {
    if (this.isAborted(downloadLink))     return;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    int wait=60;
    String time=br.getRegex(""String_Node_Str"").getMatch(0);
    if (time != null)     wait=Integer.parseInt(time);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,wait * 1000l * 60);
  }
  Form freeform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (freeform == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  freeform.setAction(downloadLink.getDownloadURL());
  freeform.remove(""String_Node_Str"");
  br.submitForm(freeform);
  if (br.containsHTML(""String_Node_Str"")) {
    String passCode;
    DownloadLink link=downloadLink;
    Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (link.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,link);
    }
 else {
      passCode=link.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
    form.setAction(downloadLink.getDownloadURL());
    br.submitForm(form);
    form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (form != null && br.containsHTML(""String_Node_Str"")) {
      link.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY,JDL.L(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      link.setProperty(""String_Node_Str"",passCode);
    }
  }
  Form downloadForm=br.getForm(1);
  if (downloadForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String current=br.getRegex(""String_Node_Str"").getMatch(0);
  if (current == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   sleep(Long.parseLong(wait.trim()) * 1000,downloadLink);
  downloadForm.put(""String_Node_Str"",current);
  downloadForm.put(""String_Node_Str"",""String_Node_Str"");
  downloadForm.put(""String_Node_Str"",""String_Node_Str"");
  downloadForm.setAction(downloadLink.getDownloadURL());
  br.setFollowRedirects(true);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadForm,true,0);
  if (!(dl.getConnection().isContentDisposition()) && !dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    dl.getConnection().disconnect();
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,15 * 60 * 1001l);
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20963,"@Override public void handleFree(DownloadLink link) throws Exception {
  this.requestFileInformation(link);
  br.setDebug(true);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  int tt=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
  sleep(tt * 1001l,link);
  br.submitForm(DLForm);
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  dl=BrowserAdapter.openDownload(br,link,dllink,true,0);
  dl.startDownload();
}","@Override public void handleFree(DownloadLink link) throws Exception {
  this.requestFileInformation(link);
  br.setDebug(true);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String ttt=""String_Node_Str"";
  ttt=br.getRegex(""String_Node_Str"").getMatch(0);
  int tt=Integer.parseInt(ttt);
  sleep(tt * 1001,link);
  br.submitForm(DLForm);
  String server=br.getRegex(""String_Node_Str"").getMatch(0);
  String hash=br.getRegex(""String_Node_Str"").getMatch(0);
  String filename=br.getRegex(""String_Node_Str"").getMatch(0);
  if (server == null || hash == null || filename == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  String dllink=""String_Node_Str"" + server + ""String_Node_Str""+ hash+ ""String_Node_Str""+ filename;
  dl=BrowserAdapter.openDownload(br,link,dllink,true,0);
  String contenttypecheck=dl.getConnection().getContentType().toString();
  if ((contenttypecheck.contains(""String_Node_Str""))) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
  }
  dl.startDownload();
}"
20964,"public JAntiCaptcha(String methodName){
  methodDirName=JACMethod.forServiceName(methodName);
  getJACInfo();
  jas=new JACScript(this,methodDirName);
  loadMTHFile();
  if (Utilities.isLoggerActive()) {
    logger.fine(""String_Node_Str"" + letterDB.size());
  }
}","public JAntiCaptcha(String methodName){
  methodDirName=JACMethod.forServiceName(methodName);
  getJACInfo();
  jas=new JACScript(this,methodDirName);
  long time=System.currentTimeMillis();
  loadMTHFile();
  time=System.currentTimeMillis() - time;
  System.out.println(time);
  if (Utilities.isLoggerActive()) {
    logger.fine(""String_Node_Str"" + letterDB.size());
  }
}"
20965,"private int getLevenshteinDistance(boolean[] l1,boolean[] l2){
  if (l1 == null || l2 == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int n=l1.length;
  int m=l2.length;
  if (n == 0) {
    return m;
  }
 else   if (m == 0) {
    return n;
  }
  int p[], d[], c[];
{
    int n1=n + 1;
    p=new int[n1];
    d=new int[n1];
    c=new int[n1];
  }
  int i;
  int j;
  int j1, j2, i1, i2;
  boolean t_j;
  int cost=0;
  for (i=1; i <= n; i++) {
    p[i]=i;
    c[i]=i;
  }
  for (j=1; j <= m; j++) {
    j1=j;
    j2=--j1;
    j2--;
    t_j=l2[j1];
    d[0]=j;
    for (i=1; i <= n; i++) {
      i1=i - 1;
      cost=(l1[i1] == t_j) ? 0 : 1;
      d[i]=Math.min(d[i1] + costs,Math.min(p[i] + costs,p[i1] + cost * costs));
      if ((i > 1) && (j > 1) && (l1[i1] == l2[j2])&& (l1[i2=i1 - 1] == l2[j1])) {
        d[i]=Math.min(d[i],c[i2] + cost);
      }
    }
    for (i=1; i <= n; i++) {
      c[i]=p[i];
    }
    int[] _d=p;
    p=d;
    d=_d;
  }
  return p[n];
}","private int getLevenshteinDistance(boolean[] l1,boolean[] l2){
  if (l1 == null || l2 == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int n=l1.length;
  int m=l2.length;
  if (n == 0) {
    return m;
  }
 else   if (m == 0) {
    return n;
  }
  int p[], d[], c[];
{
    int n1=n + 1;
    p=new int[n1];
    d=new int[n1];
    c=new int[n1];
  }
  int i;
  int j;
  int j1, j2, i1, i2;
  boolean t_j;
  int cost=0;
  for (i=1; i <= n; i++) {
    p[i]=i;
  }
  for (j=1; j <= m; j++) {
    j1=j;
    j2=--j1;
    j2--;
    t_j=l2[j1];
    d[0]=j;
    for (i=1; i <= n; i++) {
      i1=i - 1;
      cost=(l1[i1] == t_j) ? 0 : costs;
      d[i]=Math.min(d[i1] + costs,Math.min(p[i] + costs,p[i1] + cost));
      if (i > 1 && j > 1 && l1[i1] == l2[j2] && l1[i2=i1 - 1] == l2[j1]) {
        d[i]=Math.min(d[i],c[i2] + (cost > 0 ? 1 : cost));
      }
    }
    for (i=0; i <= n; i++) {
      c[i]=p[i];
    }
    int[] _d=p;
    p=d;
    d=_d;
  }
  return p[n];
}"
20966,"public LevenShteinLetterComperator(JAntiCaptcha jac){
  letterDB=new boolean[jac.letterDB.size()][][][];
  this.jac=jac;
  for (int i=0; i < letterDB.length; i++) {
    letterDB[i]=getBooleanArrays(jac.letterDB.get(i));
  }
}","public LevenShteinLetterComperator(JAntiCaptcha jac){
  File letterDBBin=jac.getResourceFile(""String_Node_Str"");
  if (letterDBBin.exists()) {
    try {
      letterDB=new BinLetters(letterDBBin).readAll().toArray(new LevenshteinLetter[]{});
    }
 catch (    IOException e) {
    }
  }
  if (letterDB == null) {
    letterDB=new LevenshteinLetter[jac.letterDB.size()];
    for (int i=0; i < letterDB.length; i++) {
      letterDB[i]=new LevenshteinLetter(jac.letterDB.get(i));
    }
  }
}"
20967,"@Override public boolean initAddon(){
  if (menuAction == null)   menuAction=new MenuAction(JDL.L(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""){
    /** 
 */
    private static final long serialVersionUID=-5269457972563036769L;
    public void initDefaults(){
      this.setEnabled(true);
      setType(ToolBarAction.Types.TOGGLE);
      this.setIcon(""String_Node_Str"");
      this.addPropertyChangeListener(new PropertyChangeListener(){
        public void propertyChange(        PropertyChangeEvent evt){
          if (evt.getPropertyName() == SELECTED_KEY) {
            status=isSelected();
          }
        }
      }
);
    }
  }
;
switch (OSDetector.getOSID()) {
case OSDetector.OS_WINDOWS_2003:
case OSDetector.OS_WINDOWS_VISTA:
case OSDetector.OS_WINDOWS_XP:
case OSDetector.OS_WINDOWS_7:
case OSDetector.OS_WINDOWS_2000:
case OSDetector.OS_WINDOWS_NT:
    thread=new Thread(asthread=new JDAntiStandbyThread(Plugin.logger,this));
  thread.start();
break;
default :
logger.fine(""String_Node_Str"");
}
return true;
}","@Override public boolean initAddon(){
  if (menuAction == null)   menuAction=new MenuAction(""String_Node_Str"",""String_Node_Str""){
    private static final long serialVersionUID=-5269457972563036769L;
    @Override public void initDefaults(){
      this.setEnabled(true);
      this.setType(ToolBarAction.Types.TOGGLE);
      this.addPropertyChangeListener(new PropertyChangeListener(){
        public void propertyChange(        PropertyChangeEvent evt){
          if (evt.getPropertyName() == SELECTED_KEY) {
            status=isSelected();
          }
        }
      }
);
    }
  }
;
switch (OSDetector.getOSID()) {
case OSDetector.OS_WINDOWS_2003:
case OSDetector.OS_WINDOWS_VISTA:
case OSDetector.OS_WINDOWS_XP:
case OSDetector.OS_WINDOWS_7:
case OSDetector.OS_WINDOWS_2000:
case OSDetector.OS_WINDOWS_NT:
    thread=new Thread(asthread=new JDAntiStandbyThread(this));
  thread.start();
break;
default :
logger.fine(""String_Node_Str"" + OSDetector.getOSString() + ""String_Node_Str"");
}
return true;
}"
20968,"public void initDefaults(){
  this.setEnabled(true);
  setType(ToolBarAction.Types.TOGGLE);
  this.setIcon(""String_Node_Str"");
  this.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName() == SELECTED_KEY) {
        status=isSelected();
      }
    }
  }
);
}","@Override public void initDefaults(){
  this.setEnabled(true);
  this.setType(ToolBarAction.Types.TOGGLE);
  this.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName() == SELECTED_KEY) {
        status=isSelected();
      }
    }
  }
);
}"
20969,"public void initConfig(){
  SubConfiguration subConfig=getPluginConfig();
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_COMBOBOX_INDEX,subConfig,CONFIG_MODE,MODES_AVAIL,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(0));
}","private void initConfig(){
  config.addEntry(new ConfigEntry(ConfigContainer.TYPE_COMBOBOX_INDEX,getPluginConfig(),CONFIG_MODE,MODES_AVAIL,JDL.L(""String_Node_Str"",""String_Node_Str"")).setDefaultValue(0));
}"
20970,"public JDAntiStandbyThread(Logger logger,JDAntiStandby jdAntiStandby){
  super();
  this.logger=logger;
  this.jdAntiStandby=jdAntiStandby;
}","public JDAntiStandbyThread(JDAntiStandby jdAntiStandby){
  super();
  this.logger=JDLogger.getLogger();
  this.jdAntiStandby=jdAntiStandby;
}"
20971,"@Override public void run(){
  while (running) {
    try {
      if (jdAntiStandby.isStatus()) {
switch (jdAntiStandby.getPluginConfig().getIntegerProperty(""String_Node_Str"")) {
case 0:
          if (run) {
            run=false;
            logger.fine(""String_Node_Str"");
            kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS);
          }
        break;
case 1:
      if (DownloadWatchDog.getInstance().getDownloadStatus() == DownloadWatchDog.STATE.RUNNING) {
        if (!run) {
          run=true;
          logger.fine(""String_Node_Str"");
        }
        kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS | Kernel32.ES_SYSTEM_REQUIRED | Kernel32.ES_DISPLAY_REQUIRED);
      }
    if ((DownloadWatchDog.getInstance().getDownloadStatus() == DownloadWatchDog.STATE.NOT_RUNNING) || (DownloadWatchDog.getInstance().getDownloadStatus() == DownloadWatchDog.STATE.STOPPING)) {
      if (run) {
        run=false;
        logger.fine(""String_Node_Str"");
        kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS);
      }
    }
  break;
case 2:
if (!run) {
  run=true;
  logger.fine(""String_Node_Str"");
}
kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS | Kernel32.ES_SYSTEM_REQUIRED | Kernel32.ES_DISPLAY_REQUIRED);
break;
default :
logger.finest(""String_Node_Str"");
}
}
 else {
if (run) {
run=false;
logger.fine(""String_Node_Str"");
kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS);
}
}
Thread.sleep(sleep);
}
 catch (InterruptedException e) {
}
}
kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS);
logger.fine(""String_Node_Str"");
}","public void run(){
  while (running) {
    try {
      if (jdAntiStandby.isStatus()) {
switch (jdAntiStandby.getPluginConfig().getIntegerProperty(""String_Node_Str"")) {
case 0:
          if (run) {
            run=false;
            logger.fine(""String_Node_Str"");
            kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS);
          }
        break;
case 1:
      if (DownloadWatchDog.getInstance().getDownloadStatus() == DownloadWatchDog.STATE.RUNNING) {
        if (!run) {
          run=true;
          logger.fine(""String_Node_Str"");
        }
        kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS | Kernel32.ES_SYSTEM_REQUIRED | Kernel32.ES_DISPLAY_REQUIRED);
      }
    if ((DownloadWatchDog.getInstance().getDownloadStatus() == DownloadWatchDog.STATE.NOT_RUNNING) || (DownloadWatchDog.getInstance().getDownloadStatus() == DownloadWatchDog.STATE.STOPPING)) {
      if (run) {
        run=false;
        logger.fine(""String_Node_Str"");
        kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS);
      }
    }
  break;
case 2:
if (!run) {
  run=true;
  logger.fine(""String_Node_Str"");
}
kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS | Kernel32.ES_SYSTEM_REQUIRED | Kernel32.ES_DISPLAY_REQUIRED);
break;
default :
logger.finest(""String_Node_Str"");
}
}
 else {
if (run) {
run=false;
logger.fine(""String_Node_Str"");
kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS);
}
}
Thread.sleep(sleep);
}
 catch (InterruptedException e) {
}
}
kernel32.SetThreadExecutionState(Kernel32.ES_CONTINUOUS);
logger.fine(""String_Node_Str"");
}"
20972,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  boolean do_download=false;
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  String passCode=null;
  String watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
  if (watchAd != null) {
    downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    watchAd=""String_Node_Str"".concat(watchAd);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
    if (watchAd == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
    if (watchAd == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    watchAd=""String_Node_Str"" + watchAd;
    br.getPage(watchAd);
    String ticketTimeS=br.getRegex(""String_Node_Str"").getMatch(0);
    if (ticketTimeS == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    int ticketTime=Integer.parseInt(ticketTimeS) * 1000;
    this.sleep(ticketTime + 1,downloadLink);
    br.getPage(watchAd);
  }
  for (int retry=1; retry <= 5; retry++) {
    Form captchaForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
    String tag=br.getRegex(""String_Node_Str"").getMatch(0);
    String secret=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaForm == null || captchaurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (tag != null && secret != null) {
      secret=secret.substring(2);
      captchaForm.put(""String_Node_Str"",tag);
      InputField nv=new InputField(secret,""String_Node_Str"");
      captchaForm.addInputField(nv);
    }
 else {
      secret=br.getRegex(""String_Node_Str"").getMatch(0);
      String name=br.getRegex(""String_Node_Str"").getMatch(0);
      if (name != null && secret != null) {
        secret=secret.substring(2);
        captchaForm.put(name,secret);
        captchaForm.remove(""String_Node_Str"");
        captchaForm.remove(""String_Node_Str"");
        captchaForm.remove(""String_Node_Str"");
        captchaForm.put(""String_Node_Str"",""String_Node_Str"");
      }
 else       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    captchaForm.setAction(br.getURL());
    String captchaCode=getCaptchaCode(captchaurl,downloadLink);
    captchaForm.put(""String_Node_Str"",captchaCode);
    try {
      br.submitForm(captchaForm);
    }
 catch (    Exception e) {
      br.submitForm(captchaForm);
    }
    String directLink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (directLink == null) {
      Form pwform=br.getForm(2);
      if (pwform != null) {
        if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
          passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
        }
 else {
          passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
        }
        pwform.put(""String_Node_Str"",passCode);
        br.submitForm(pwform);
        directLink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (directLink == null) {
          downloadLink.setProperty(""String_Node_Str"",null);
          logger.info(""String_Node_Str"");
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
      }
    }
    if (directLink != null) {
      if (passCode != null)       downloadLink.setProperty(""String_Node_Str"",passCode);
      dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,directLink,true,-2);
      do_download=true;
      break;
    }
  }
  if (!do_download) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA,JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
 else   dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  boolean do_download=false;
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  String passCode=null;
  String watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
  if (watchAd != null) {
    downloadLink.getLinkStatus().setStatusText(JDL.L(""String_Node_Str"",""String_Node_Str""));
    watchAd=""String_Node_Str"".concat(watchAd);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
    if (watchAd == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    br.getPage(watchAd);
    watchAd=br.getRegex(""String_Node_Str"").getMatch(0);
    if (watchAd == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    watchAd=""String_Node_Str"" + watchAd;
    br.getPage(watchAd);
    String ticketTimeS=br.getRegex(""String_Node_Str"").getMatch(0);
    if (ticketTimeS == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    int ticketTime=Integer.parseInt(ticketTimeS) * 1000;
    this.sleep(ticketTime + 1,downloadLink);
    br.getPage(watchAd);
  }
  for (int retry=1; retry <= 5; retry++) {
    Form captchaForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    String captchaurl=br.getRegex(""String_Node_Str"").getMatch(0);
    String tag=br.getRegex(""String_Node_Str"").getMatch(0);
    String secret=br.getRegex(""String_Node_Str"").getMatch(0);
    if (captchaForm == null || captchaurl == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    if (tag != null && secret != null) {
      secret=secret.substring(2);
      captchaForm.put(""String_Node_Str"",tag);
      InputField nv=new InputField(secret,""String_Node_Str"");
      captchaForm.addInputField(nv);
    }
 else {
      secret=br.getRegex(""String_Node_Str"").getMatch(0);
      String name=br.getRegex(""String_Node_Str"").getMatch(0);
      if (name != null && secret != null) {
        secret=secret.substring(2);
        captchaForm.put(name,secret);
        captchaForm.remove(""String_Node_Str"");
        captchaForm.remove(""String_Node_Str"");
        captchaForm.remove(""String_Node_Str"");
        captchaForm.put(""String_Node_Str"",""String_Node_Str"");
      }
 else       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFECT);
    }
    captchaForm.setAction(br.getURL());
    String captchaCode=getCaptchaCode(captchaurl,downloadLink);
    captchaForm.put(""String_Node_Str"",captchaCode);
    try {
      br.submitForm(captchaForm);
    }
 catch (    Exception e) {
      br.submitForm(captchaForm);
    }
    String directLink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (directLink == null) {
      Form pwform=br.getForm(2);
      if (pwform != null && !br.getRegex(""String_Node_Str"").matches()) {
        if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
          passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
        }
 else {
          passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
        }
        pwform.put(""String_Node_Str"",passCode);
        br.submitForm(pwform);
        directLink=br.getRegex(""String_Node_Str"").getMatch(0);
        if (directLink == null) {
          downloadLink.setProperty(""String_Node_Str"",null);
          logger.info(""String_Node_Str"");
          throw new PluginException(LinkStatus.ERROR_RETRY);
        }
      }
    }
    if (directLink != null) {
      if (passCode != null)       downloadLink.setProperty(""String_Node_Str"",passCode);
      dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,directLink,true,-2);
      do_download=true;
      break;
    }
  }
  if (!do_download) {
    throw new PluginException(LinkStatus.ERROR_CAPTCHA,JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
 else   dl.startDownload();
}"
20973,"/** 
 * Checks if the downloadlink is valid and online. Throws a PluginException if this file is likely invalid, damaged or has any other errors.
 */
@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException, IOException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  String hash=new Regex(downloadLink.getDownloadURL().toLowerCase(),""String_Node_Str"").getMatch(0);
  downloadLink.setMD5Hash(hash);
  String name=br.getPage(""String_Node_Str"" + hash + ""String_Node_Str"").trim();
  parseError(name);
  String size=br.getPage(""String_Node_Str"" + hash + ""String_Node_Str"").trim();
  downloadLink.setFinalFileName(name);
  downloadLink.setDownloadSize(Long.parseLong(size));
  return AvailableStatus.TRUE;
}","/** 
 * Checks if the downloadlink is valid and online. Throws a PluginException if this file is likely invalid, damaged or has any other errors.
 */
@Override public AvailableStatus requestFileInformation(DownloadLink downloadLink) throws PluginException, IOException {
  this.setBrowserExclusive();
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  String hash=new Regex(downloadLink.getDownloadURL().toLowerCase(),""String_Node_Str"").getMatch(0);
  String name=br.getPage(""String_Node_Str"" + hash + ""String_Node_Str"").trim();
  parseError(name);
  String size=br.getPage(""String_Node_Str"" + hash + ""String_Node_Str"").trim();
  downloadLink.setFinalFileName(name);
  downloadLink.setDownloadSize(Long.parseLong(size));
  String md5hash=br.getPage(""String_Node_Str"" + hash + ""String_Node_Str"").trim();
  downloadLink.setMD5Hash(md5hash);
  return AvailableStatus.TRUE;
}"
20974,"private int getLevenshteinDistance(boolean[] l1,boolean[] l2){
  if (l1 == null || l2 == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int n=l1.length;
  int m=l2.length;
  if (n == 0) {
    return m;
  }
 else   if (m == 0) {
    return n;
  }
  int p[], d[], c[];
{
    int n1=n + 1;
    p=new int[n1];
    d=new int[n1];
    c=new int[n1];
  }
  int i;
  int j;
  int j1, j2, i1, i2;
  boolean t_j;
  int cost=0;
  for (i=1; i <= n; i++) {
    p[i]=i;
  }
  c=p;
  for (j=1; j <= m; j++) {
    j1=j;
    j2=--j1;
    j2--;
    t_j=l2[j1];
    d[0]=j;
    for (i=1; i <= n; i++) {
      i1=i - 1;
      cost=(l1[i1] == t_j) ? 1 : 0;
      d[i]=Math.min(d[i1] + costs,Math.min(p[i] + costs,p[i1] + cost * costs));
      if ((i > 1) && (j > 1) && (l1[i1] == l2[j2])&& (l1[i2=i1 - 1] == l2[j1])) {
        d[i]=Math.min(d[i],c[i2] + cost);
      }
    }
    for (i=1; i <= n; i++) {
      c[i]=p[i];
    }
    int[] _d=p;
    p=d;
    d=_d;
  }
  return p[n];
}","private int getLevenshteinDistance(boolean[] l1,boolean[] l2){
  if (l1 == null || l2 == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int n=l1.length;
  int m=l2.length;
  if (n == 0) {
    return m;
  }
 else   if (m == 0) {
    return n;
  }
  int p[], d[], c[];
{
    int n1=n + 1;
    p=new int[n1];
    d=new int[n1];
    c=new int[n1];
  }
  int i;
  int j;
  int j1, j2, i1, i2;
  boolean t_j;
  int cost=0;
  for (i=1; i <= n; i++) {
    p[i]=i;
    c[i]=i;
  }
  for (j=1; j <= m; j++) {
    j1=j;
    j2=--j1;
    j2--;
    t_j=l2[j1];
    d[0]=j;
    for (i=1; i <= n; i++) {
      i1=i - 1;
      cost=(l1[i1] == t_j) ? 0 : 1;
      d[i]=Math.min(d[i1] + costs,Math.min(p[i] + costs,p[i1] + cost * costs));
      if ((i > 1) && (j > 1) && (l1[i1] == l2[j2])&& (l1[i2=i1 - 1] == l2[j1])) {
        d[i]=Math.min(d[i],c[i2] + cost);
      }
    }
    for (i=1; i <= n; i++) {
      c[i]=p[i];
    }
    int[] _d=p;
    p=d;
    d=_d;
  }
  return p[n];
}"
20975,"public void checkErrors() throws NumberFormatException, PluginException {
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 1000l);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
  }
  if (br.containsHTML(""String_Node_Str"")) {
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,Integer.parseInt(wait.trim()) * 1000l);
    throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),30 * 60 * 1000l);
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1001l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1001l);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
  }
}","public void checkErrors() throws NumberFormatException, PluginException {
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 1000l);
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
  }
  if (br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_HOSTER_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1001l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1001l);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
  if (br.containsHTML(""String_Node_Str"")) {
    logger.info(""String_Node_Str"");
    throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_TEMP_DISABLE);
  }
}"
20976,"public void download(String ftpurl,final DownloadLink downloadLink) throws IOException, PluginException {
  SimpleFTP ftp=new SimpleFTP();
  try {
    if (new File(downloadLink.getFileOutput()).exists())     throw new PluginException(LinkStatus.ERROR_ALREADYEXISTS);
    URL url=new URL(ftpurl);
    ftp.connect(url);
    String path=url.getPath().substring(0,url.getPath().lastIndexOf(""String_Node_Str""));
    if (path.length() > 0)     ftp.cwd(path);
    ftp.bin();
    ftp.getBroadcaster().addListener(new FtpListener(){
      private long last=0;
      private long lastTime=System.currentTimeMillis();
      public void onDownloadProgress(      FtpEvent event){
        downloadLink.setDownloadCurrent(event.getProgress());
        if (System.currentTimeMillis() - lastTime > 250) {
          downloadLink.getDownloadInstance().getChunks().get(0).getSpeedMeter().addSpeedValue((event.getProgress() - last),System.currentTimeMillis() - lastTime);
          downloadLink.requestGuiUpdate();
          last=event.getProgress();
          lastTime=System.currentTimeMillis();
          downloadLink.setChunksProgress(new long[]{last});
        }
      }
    }
);
    File tmp;
    dl=new RAFDownload(this,downloadLink,null);
    dl.setResume(false);
    downloadLink.setDownloadInstance(dl);
    dl.addChunksDownloading(1);
    Chunk ch=dl.new Chunk(0,0,null,null);
    ch.setInProgress(true);
    dl.getChunks().add(ch);
    downloadLink.getLinkStatus().addStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
    try {
      ftp.download(downloadLink.getName(),tmp=new File(downloadLink.getFileOutput() + ""String_Node_Str""));
    }
  finally {
      downloadLink.getLinkStatus().removeStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
      downloadLink.setDownloadInstance(null);
      ch.setInProgress(false);
    }
    if (tmp.length() != downloadLink.getDownloadSize()) {
      tmp.delete();
      throw new PluginException(LinkStatus.ERROR_DOWNLOAD_INCOMPLETE);
    }
    if (downloadLink.getMD5Hash() != null && !downloadLink.getMD5Hash().equalsIgnoreCase(JDHash.getMD5(tmp))) {
      throw new PluginException(LinkStatus.ERROR_DOWNLOAD_FAILED,""String_Node_Str"");
    }
    if (downloadLink.getSha1Hash() != null && !downloadLink.getSha1Hash().equalsIgnoreCase(JDHash.getSHA1(tmp))) {
      throw new PluginException(LinkStatus.ERROR_DOWNLOAD_FAILED,""String_Node_Str"");
    }
    if (!tmp.renameTo(new File(downloadLink.getFileOutput()))) {
      throw new PluginException(LinkStatus.ERROR_DOWNLOAD_FAILED,""String_Node_Str"");
    }
    downloadLink.getLinkStatus().addStatus(LinkStatus.FINISHED);
  }
  finally {
    ftp.disconnect();
  }
}","public void download(String ftpurl,final DownloadLink downloadLink) throws IOException, PluginException {
  SimpleFTP ftp=new SimpleFTP();
  try {
    if (new File(downloadLink.getFileOutput()).exists())     throw new PluginException(LinkStatus.ERROR_ALREADYEXISTS);
    URL url=new URL(ftpurl);
    ftp.connect(url);
    String path=url.getPath().substring(0,url.getPath().lastIndexOf(""String_Node_Str""));
    if (path.length() > 0)     ftp.cwd(path);
    ftp.bin();
    ftp.getBroadcaster().addListener(new FtpListener(){
      private long last=0;
      private long lastTime=System.currentTimeMillis();
      public void onDownloadProgress(      FtpEvent event){
        downloadLink.setDownloadCurrent(event.getProgress());
        if (System.currentTimeMillis() - lastTime > 250) {
          downloadLink.getDownloadInstance().getChunks().get(0).getSpeedMeter().addSpeedValue((event.getProgress() - last),System.currentTimeMillis() - lastTime);
          downloadLink.requestGuiUpdate();
          last=event.getProgress();
          lastTime=System.currentTimeMillis();
          downloadLink.setChunksProgress(new long[]{last});
        }
      }
    }
);
    File tmp;
    dl=new RAFDownload(this,downloadLink,null);
    dl.setResume(false);
    downloadLink.setDownloadInstance(dl);
    dl.addChunksDownloading(1);
    Chunk ch=dl.new Chunk(0,0,null,null);
    ch.setInProgress(true);
    dl.getChunks().add(ch);
    String name=new Regex(ftpurl,""String_Node_Str"").getMatch(0);
    if (name == null) {
      logger.severe(""String_Node_Str"");
      name=downloadLink.getName();
    }
    downloadLink.getLinkStatus().addStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
    try {
      ftp.download(name,tmp=new File(downloadLink.getFileOutput() + ""String_Node_Str""));
    }
  finally {
      downloadLink.getLinkStatus().removeStatus(LinkStatus.DOWNLOADINTERFACE_IN_PROGRESS);
      downloadLink.setDownloadInstance(null);
      ch.setInProgress(false);
    }
    if (tmp.length() != downloadLink.getDownloadSize()) {
      tmp.delete();
      throw new PluginException(LinkStatus.ERROR_DOWNLOAD_INCOMPLETE);
    }
    if (downloadLink.getMD5Hash() != null && !downloadLink.getMD5Hash().equalsIgnoreCase(JDHash.getMD5(tmp))) {
      throw new PluginException(LinkStatus.ERROR_DOWNLOAD_FAILED,""String_Node_Str"");
    }
    if (downloadLink.getSha1Hash() != null && !downloadLink.getSha1Hash().equalsIgnoreCase(JDHash.getSHA1(tmp))) {
      throw new PluginException(LinkStatus.ERROR_DOWNLOAD_FAILED,""String_Node_Str"");
    }
    if (!tmp.renameTo(new File(downloadLink.getFileOutput()))) {
      throw new PluginException(LinkStatus.ERROR_DOWNLOAD_FAILED,""String_Node_Str"");
    }
    downloadLink.getLinkStatus().addStatus(LinkStatus.FINISHED);
  }
  finally {
    ftp.disconnect();
  }
}"
20977,"public void actionPerformed(ActionEvent e){
  problems.setText(""String_Node_Str"");
  if (e.getSource() == save) {
    if (name.getText().equals(""String_Node_Str"")) {
      problems.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return;
    }
 else     if (act.getExecutions().size() == 0) {
      problems.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return;
    }
    act.setName(name.getText());
    Calendar c=Calendar.getInstance();
    c.set(Calendar.YEAR,(Integer)year.getValue());
    c.set(Calendar.MONTH,(Integer)month.getValue() - 1);
    c.set(Calendar.DAY_OF_MONTH,(Integer)day.getValue());
    c.set(Calendar.HOUR_OF_DAY,(Integer)hour.getValue());
    c.set(Calendar.MINUTE,(Integer)minute.getValue());
    act.setDate(c.getTime());
    if (optDate.isSelected()) {
      act.setRepeat(0);
    }
 else     if (optHourly.isSelected()) {
      act.setRepeat(60);
    }
 else     if (optDaily.isSelected()) {
      act.setRepeat(1440);
    }
 else     if (optWeekly.isSelected()) {
      act.setRepeat(10080);
    }
 else     if (optSpecific.isSelected()) {
      act.setRepeat(((Integer)repeathour.getValue() * 60) + (Integer)repeatminute.getValue());
    }
    if (edit) {
      gui.updateActions(this);
    }
 else {
      schedule.addAction(act);
      gui.updateActions(this);
    }
    return;
  }
 else   if (e.getSource() == cboActions) {
    for (    SchedulerModuleInterface smi : schedule.getModules()) {
      if (smi.getTranslation().equals(cboActions.getSelectedItem())) {
        if (smi.needParameter())         parameter.setText(""String_Node_Str"");
 else         parameter.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
        parameter.setEnabled(smi.needParameter());
        parameter.requestFocus();
        return;
      }
    }
  }
 else   if (e.getSource() == add) {
    for (    SchedulerModuleInterface smi : schedule.getModules()) {
      if (smi.getTranslation().equals(cboActions.getSelectedItem())) {
        if (smi.needParameter() && !smi.checkParameter(parameter.getText())) {
          problems.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
          return;
        }
        if (parameter.getText().equals(JDL.L(""String_Node_Str"",""String_Node_Str"")))         act.addExecutions(new Executions(smi,""String_Node_Str""));
 else         act.addExecutions(new Executions(smi,parameter.getText()));
        tableModel.fireTableRowsInserted(act.getExecutions().size(),act.getExecutions().size());
        fillComboBox();
        return;
      }
    }
  }
 else   if (e.getSource() == delete) {
    act.removeExecution(table.getSelectedRow());
    tableModel.fireTableRowsDeleted(table.getSelectedRow(),table.getSelectedRow());
    delete.setEnabled(false);
    fillComboBox();
  }
 else   if (e.getSource() == cancel) {
    gui.removeTab(act);
  }
}","public void actionPerformed(ActionEvent e){
  problems.setText(""String_Node_Str"");
  if (e.getSource() == save) {
    if (name.getText().equals(""String_Node_Str"")) {
      problems.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return;
    }
 else     if (act.getExecutions().size() == 0) {
      problems.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      return;
    }
    act.setName(name.getText());
    Calendar c=Calendar.getInstance();
    c.set(Calendar.YEAR,(Integer)year.getValue());
    c.set(Calendar.MONTH,(Integer)month.getValue() - 1);
    c.set(Calendar.DAY_OF_MONTH,(Integer)day.getValue());
    c.set(Calendar.HOUR_OF_DAY,(Integer)hour.getValue());
    c.set(Calendar.MINUTE,(Integer)minute.getValue());
    act.setDate(c.getTime());
    if (optDate.isSelected()) {
      act.setRepeat(0);
    }
 else     if (optHourly.isSelected()) {
      act.setRepeat(60);
    }
 else     if (optDaily.isSelected()) {
      act.setRepeat(1440);
    }
 else     if (optWeekly.isSelected()) {
      act.setRepeat(10080);
    }
 else     if (optSpecific.isSelected()) {
      act.setRepeat(((Integer)repeathour.getValue() * 60) + (Integer)repeatminute.getValue());
    }
    act.setAlreadyHandled(false);
    if (edit) {
      gui.updateActions(this);
    }
 else {
      schedule.addAction(act);
      gui.updateActions(this);
    }
    return;
  }
 else   if (e.getSource() == cboActions) {
    for (    SchedulerModuleInterface smi : schedule.getModules()) {
      if (smi.getTranslation().equals(cboActions.getSelectedItem())) {
        if (smi.needParameter())         parameter.setText(""String_Node_Str"");
 else         parameter.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
        parameter.setEnabled(smi.needParameter());
        parameter.requestFocus();
        return;
      }
    }
  }
 else   if (e.getSource() == add) {
    for (    SchedulerModuleInterface smi : schedule.getModules()) {
      if (smi.getTranslation().equals(cboActions.getSelectedItem())) {
        if (smi.needParameter() && !smi.checkParameter(parameter.getText())) {
          problems.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
          return;
        }
        if (parameter.getText().equals(JDL.L(""String_Node_Str"",""String_Node_Str"")))         act.addExecutions(new Executions(smi,""String_Node_Str""));
 else         act.addExecutions(new Executions(smi,parameter.getText()));
        tableModel.fireTableRowsInserted(act.getExecutions().size(),act.getExecutions().size());
        fillComboBox();
        return;
      }
    }
  }
 else   if (e.getSource() == delete) {
    act.removeExecution(table.getSelectedRow());
    tableModel.fireTableRowsDeleted(table.getSelectedRow(),table.getSelectedRow());
    delete.setEnabled(false);
    fillComboBox();
  }
 else   if (e.getSource() == cancel) {
    gui.removeTab(act);
  }
}"
20978,"@Override public Component myTableCellRendererComponent(JDTableModel table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  if (!((Actions)value).isEnabled()) {
    jlr.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    nexttime=((Actions)value).getDate().getTime() - System.currentTimeMillis();
    if (nexttime < 0) {
      if (((Actions)value).getRepeat() == 0) {
        jlr.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        jlr.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else {
      jlr.setText(Formatter.formatSeconds(nexttime / 1000,false));
    }
  }
  return jlr;
}","@Override public Component myTableCellRendererComponent(JDTableModel table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  if (!((Actions)value).isEnabled()) {
    jlr.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    nexttime=((Actions)value).getDate().getTime() - System.currentTimeMillis();
    if (nexttime < 0) {
      if (((Actions)value).getRepeat() == 0) {
        jlr.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        jlr.setText(JDL.L(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else {
      if (nexttime < 60000)       nexttime=60000;
      jlr.setText(Formatter.formatSeconds(nexttime / 1000,false));
    }
  }
  return jlr;
}"
20979,"@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  FilePackage fp=FilePackage.getInstance();
  br.getPage(parameter.toString());
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
  if (fpName == null) {
    fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
    if (fpName == null) {
      fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
      if (fpName == null) {
        fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
        if (fpName == null) {
          fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
        }
      }
    }
  }
  fp.setName(fpName);
  String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL)).getMatch(0);
  String[] links=temp.split(""String_Node_Str"");
  progress.setRange(links.length);
  for (  String data : links) {
    decryptedLinks.add(createDownloadlink(data));
    progress.increase(1);
  }
  fp.addLinks(decryptedLinks);
  return decryptedLinks;
}","@Override public ArrayList<DownloadLink> decryptIt(CryptedLink parameter,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  FilePackage fp=FilePackage.getInstance();
  br.getPage(parameter.toString());
  String fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
  if (fpName == null) {
    fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
    if (fpName == null) {
      fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
      if (fpName == null) {
        fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
        if (fpName == null) {
          fpName=br.getRegex(""String_Node_Str"").getMatch(0).trim();
        }
      }
    }
  }
  fp.setName(fpName);
  String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.DOTALL)).getMatch(0);
  if (temp == null)   return null;
  String[] links=temp.split(""String_Node_Str"");
  if (links == null || links.length == 0)   return null;
  progress.setRange(links.length);
  for (  String data : links) {
    decryptedLinks.add(createDownloadlink(data));
    progress.increase(1);
  }
  fp.addLinks(decryptedLinks);
  return decryptedLinks;
}"
20980,"@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  String finalfn=downloadLink.getName();
  requestFileInformation(downloadLink);
  if (account != null) {
    login(account);
    br.getPage(downloadLink.getDownloadURL());
  }
  String downloadurl;
  String steplink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (steplink == null) {
    downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    if (downloadurl == null) {
      downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (downloadurl == null) {
      downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (downloadurl == null) {
      throw new PluginException(LinkStatus.ERROR_FATAL);
    }
  }
 else {
    downloadurl=""String_Node_Str"" + steplink;
    br.getPage(downloadurl);
    Form capform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (capform == null) {
      String form2search=br.getRegex(""String_Node_Str"").getMatch(0);
      if (form2search == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      capform=br.getFormbyProperty(""String_Node_Str"",form2search);
    }
    int i=0;
    Browser brc=br.cloneBrowser();
    while (capform != null) {
      String pagepiece=br.getRegex(""String_Node_Str"").getMatch(0);
      if (pagepiece == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      String[] captchalinks=HTMLParser.getHttpLinks(pagepiece,""String_Node_Str"");
      if (captchalinks == null || captchalinks.length == 0)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      String adr=null;
      File file=null;
      for (      String link : captchalinks) {
        URLConnectionAdapter con=brc.openGetConnection(link);
        if ((con.getContentType().contains(""String_Node_Str""))) {
          adr=link;
          file=this.getLocalCaptchaFile();
          Browser.download(file,con);
          break;
        }
        con.disconnect();
        continue;
      }
      if (adr == null || file == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      String code=getCaptchaCode(file,downloadLink);
      capform.getInputFieldByName(""String_Node_Str"").setValue(code);
      br.submitForm(capform);
      capform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
      i++;
      if (i > 3) {
        throw new PluginException(LinkStatus.ERROR_CAPTCHA);
      }
    }
    if (capform != null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    br.setFollowRedirects(false);
    steplink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (steplink == null) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    downloadurl=""String_Node_Str"" + steplink;
    br.getPage(downloadurl);
    if (br.getRedirectLocation() == null || br.getRedirectLocation().contains(""String_Node_Str"")) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    downloadurl=br.getRedirectLocation();
    if (downloadurl == null) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
  }
  downloadurl=downloadurl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(true);
  br.setDebug(true);
  downloadLink.setDownloadSize(0);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadurl,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
  downloadLink.setFinalFileName(finalfn);
  dl.startDownload();
}","@Override public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  String finalfn=downloadLink.getName();
  requestFileInformation(downloadLink);
  if (account != null) {
    login(account);
    br.getPage(downloadLink.getDownloadURL());
  }
  String downloadurl;
  String steplink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (steplink == null) {
    downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    if (downloadurl == null) {
      downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (downloadurl == null) {
      downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    }
    if (downloadurl == null) {
      throw new PluginException(LinkStatus.ERROR_FATAL);
    }
  }
 else {
    downloadurl=""String_Node_Str"" + steplink;
    br.getPage(downloadurl);
    downloadurl=br.getRegex(""String_Node_Str"").getMatch(0);
    Form capform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
    if (capform == null) {
      String form2search=br.getRegex(""String_Node_Str"").getMatch(0);
      if (form2search != null) {
        capform=br.getFormbyProperty(""String_Node_Str"",form2search);
      }
    }
    if (downloadurl == null && capform != null) {
      int i=0;
      Browser brc=br.cloneBrowser();
      while (capform != null) {
        String pagepiece=br.getRegex(""String_Node_Str"").getMatch(0);
        if (pagepiece == null)         throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
        String[] captchalinks=HTMLParser.getHttpLinks(pagepiece,""String_Node_Str"");
        if (captchalinks == null || captchalinks.length == 0)         throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
        String adr=null;
        File file=null;
        for (        String link : captchalinks) {
          URLConnectionAdapter con=brc.openGetConnection(link);
          if ((con.getContentType().contains(""String_Node_Str""))) {
            adr=link;
            file=this.getLocalCaptchaFile();
            Browser.download(file,con);
            break;
          }
          con.disconnect();
          continue;
        }
        if (adr == null || file == null)         throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
        String code=getCaptchaCode(file,downloadLink);
        capform.getInputFieldByName(""String_Node_Str"").setValue(code);
        br.submitForm(capform);
        capform=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
        i++;
        if (i > 3) {
          throw new PluginException(LinkStatus.ERROR_CAPTCHA);
        }
      }
      if (capform != null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    }
    br.setFollowRedirects(false);
    steplink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (steplink == null) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    downloadurl=""String_Node_Str"" + steplink;
    br.getPage(downloadurl);
    if (br.getRedirectLocation() == null || br.getRedirectLocation().contains(""String_Node_Str"")) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    downloadurl=br.getRedirectLocation();
    if (downloadurl == null) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
  }
  downloadurl=downloadurl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  br.setFollowRedirects(true);
  br.setDebug(true);
  downloadLink.setDownloadSize(0);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,downloadurl,false,1);
  if (dl.getConnection().getContentType().contains(""String_Node_Str"")) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_FATAL,JDL.L(""String_Node_Str"",""String_Node_Str""));
  }
  downloadLink.setFinalFileName(finalfn);
  dl.startDownload();
}"
20981,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  url=downloadLink.getDownloadURL();
  requestFileInformation(downloadLink);
  captchaCode=getCaptchaCode(""String_Node_Str"",downloadLink);
  Form form=br.getForm(1);
  if (form.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
  }
  form.put(""String_Node_Str"",captchaCode);
  br.submitForm(form);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
    }
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  }
  downloadLink.setProperty(""String_Node_Str"",passCode);
  String all=br.getRegex(""String_Node_Str"").getMatch(-1);
  String dec=br.getRegex(""String_Node_Str"").getMatch(-1);
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  String fun=""String_Node_Str"" + all + ""String_Node_Str""+ dec+ ""String_Node_Str"";
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  url=Context.toString(result);
  Context.exit();
  sleep(5000,downloadLink);
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url);
  if (!dl.getConnection().isContentDisposition()) {
    dl.getConnection().disconnect();
    throw new PluginException(LinkStatus.ERROR_FILE_NOT_FOUND);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  url=downloadLink.getDownloadURL();
  requestFileInformation(downloadLink);
  captchaCode=getCaptchaCode(""String_Node_Str"",downloadLink);
  Form form=br.getForm(1);
  if (form.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
  }
  form.put(""String_Node_Str"",captchaCode);
  br.submitForm(form);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
    }
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  }
  downloadLink.setProperty(""String_Node_Str"",passCode);
  String all=br.getRegex(""String_Node_Str"").getMatch(-1);
  String dec=br.getRegex(""String_Node_Str"").getMatch(-1);
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  String fun=""String_Node_Str"" + all + ""String_Node_Str""+ dec+ ""String_Node_Str"";
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  url=Context.toString(result);
  Context.exit();
  sleep(5000,downloadLink);
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url);
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    throw new PluginException(LinkStatus.ERROR_FATAL);
  }
  dl.startDownload();
}"
20982,"@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String passCode=null;
  if (br.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    DLForm.put(""String_Node_Str"",passCode);
  }
  int tt=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
  sleep(tt * 1001,downloadLink);
  jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,false,1);
  if (!(dl.getConnection().isContentDisposition())) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      downloadLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception, PluginException {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  Form DLForm=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (DLForm == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String passCode=null;
  if (br.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(""String_Node_Str"",downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    DLForm.put(""String_Node_Str"",passCode);
  }
  int tt=Integer.parseInt(br.getRegex(""String_Node_Str"").getMatch(0));
  sleep(tt * 1001,downloadLink);
  jd.plugins.BrowserAdapter.openDownload(br,downloadLink,DLForm,false,1);
  if (!(dl.getConnection().isContentDisposition())) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      logger.warning(""String_Node_Str"");
      downloadLink.setProperty(""String_Node_Str"",null);
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    throw new PluginException(LinkStatus.ERROR_FATAL);
  }
  if (passCode != null) {
    downloadLink.setProperty(""String_Node_Str"",passCode);
  }
  dl.startDownload();
}"
20983,"public FileBoxCom(PluginWrapper wrapper){
  super(wrapper);
}","public FileBoxCom(PluginWrapper wrapper){
  super(wrapper);
  enablePremium(""String_Node_Str"");
}"
20984,"@Override public AccountInfo fetchAccountInfo(Account account) throws Exception {
  AccountInfo ai=new AccountInfo();
  this.setBrowserExclusive();
  try {
    login(account);
  }
 catch (  PluginException e) {
    account.setValid(false);
    return ai;
  }
  String validUntil=br.getRegex(""String_Node_Str"").getMatch(0);
  if (validUntil == null) {
    account.setValid(false);
  }
 else {
    ai.setValidUntil(Regex.getMilliSeconds(validUntil,""String_Node_Str"",null));
    account.setValid(true);
  }
  br.getPage(""String_Node_Str"");
  String trafficleft=br.getRegex(""String_Node_Str"").getMatch(1);
  if (trafficleft != null)   ai.setTrafficLeft(Encoding.htmlDecode(trafficleft));
  String trafficmax=br.getRegex(""String_Node_Str"").getMatch(1);
  if (trafficmax != null)   ai.setTrafficMax(Regex.getSize(Encoding.htmlDecode(trafficmax)));
  return ai;
}","@Override public AccountInfo fetchAccountInfo(Account account) throws Exception {
  AccountInfo ai=new AccountInfo();
  this.setBrowserExclusive();
  try {
    login(account);
  }
 catch (  PluginException e) {
    account.setValid(false);
    return ai;
  }
  String validUntil=br.getRegex(""String_Node_Str"").getMatch(0);
  if (validUntil == null)   validUntil=br.getRegex(""String_Node_Str"").getMatch(0);
  if (validUntil == null) {
    account.setValid(false);
    return ai;
  }
 else {
    ai.setValidUntil(Regex.getMilliSeconds(validUntil,""String_Node_Str"",null));
    account.setValid(true);
  }
  br.getPage(""String_Node_Str"");
  String trafficleft=br.getRegex(""String_Node_Str"").getMatch(1);
  if (trafficleft != null)   ai.setTrafficLeft(Encoding.htmlDecode(trafficleft));
  String trafficmax=br.getRegex(""String_Node_Str"").getMatch(1);
  if (trafficmax != null)   ai.setTrafficMax(Regex.getSize(Encoding.htmlDecode(trafficmax)));
  return ai;
}"
20985,"public void login(Account account) throws Exception {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(""String_Node_Str"");
  Form form=br.getForm(0);
  form.put(form.getBestVariable(""String_Node_Str""),Encoding.urlEncode(account.getUser()));
  form.put(form.getBestVariable(""String_Node_Str""),Encoding.urlEncode(account.getPass()));
  br.submitForm(form);
  br.getPage(""String_Node_Str"");
  if (!br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
}","public void login(Account account) throws Exception {
  this.setBrowserExclusive();
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.getPage(""String_Node_Str"");
  Form form=br.getForm(0);
  form.put(form.getBestVariable(""String_Node_Str""),Encoding.urlEncode(account.getUser()));
  form.put(form.getBestVariable(""String_Node_Str""),Encoding.urlEncode(account.getPass()));
  br.submitForm(form);
  br.getPage(""String_Node_Str"");
  if (!br.containsHTML(""String_Node_Str"")) {
    if (!br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_PREMIUM,PluginException.VALUE_ID_PREMIUM_DISABLE);
  }
}"
20986,"@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  requestFileInformation(downloadLink);
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.setDebug(true);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  checkPassword(downloadLink);
  if (br.containsHTML(""String_Node_Str"")) {
    long wait=Regex.getMilliSeconds(br.getRegex(""String_Node_Str"").getMatch(0));
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    logger.info(""String_Node_Str"");
    linkStatus.setValue(wait);
    return;
  }
  String error=new Regex(br.getURL(),""String_Node_Str"").getMatch(0);
  if (error == null) {
    error=new Regex(br.getURL(),""String_Node_Str"").getMatch(0);
  }
  if (error != null) {
    String message=JDL.L(""String_Node_Str"" + error,error.replaceAll(""String_Node_Str"",""String_Node_Str""));
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_FATAL);
    linkStatus.setErrorMessage(message);
    return;
  }
  br.setFollowRedirects(false);
  Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (form == null && br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
  if (form != null) {
    form.put(""String_Node_Str"",""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,false,1);
  }
 else {
    String dlLink=br.getRedirectLocation();
    if (dlLink == null) {
      logger.severe(""String_Node_Str"" + br);
      throw new PluginException(LinkStatus.ERROR_FATAL);
    }
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dlLink,false,1);
  }
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  }
  dl.fakeContentRangeHeader(false);
  dl.setFileSizeVerified(true);
  if (dl.getConnection().getLongContentLength() == 0) {
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(10 * 60 * 1000l);
    return;
  }
  dl.startDownload();
}","@Override public void handleFree(DownloadLink downloadLink) throws Exception {
  LinkStatus linkStatus=downloadLink.getLinkStatus();
  requestFileInformation(downloadLink);
  br.setCookie(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  br.setDebug(true);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  checkPassword(downloadLink);
  if (br.containsHTML(""String_Node_Str"")) {
    long wait=Regex.getMilliSeconds(br.getRegex(""String_Node_Str"").getMatch(0));
    linkStatus.addStatus(LinkStatus.ERROR_IP_BLOCKED);
    logger.info(""String_Node_Str"");
    linkStatus.setValue(wait);
    return;
  }
  String error=new Regex(br.getURL(),""String_Node_Str"").getMatch(0);
  if (error == null) {
    error=new Regex(br.getURL(),""String_Node_Str"").getMatch(0);
  }
  if (error != null) {
    String message=JDL.L(""String_Node_Str"" + error,error.replaceAll(""String_Node_Str"",""String_Node_Str""));
    logger.severe(""String_Node_Str"");
    linkStatus.addStatus(LinkStatus.ERROR_FATAL);
    linkStatus.setErrorMessage(message);
    return;
  }
  br.setFollowRedirects(false);
  Form form=br.getFormbyProperty(""String_Node_Str"",""String_Node_Str"");
  if (form == null && br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
  if (form != null) {
    form.put(""String_Node_Str"",""String_Node_Str"");
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,form,false,1);
  }
 else {
    String dlLink=br.getRedirectLocation();
    if (dlLink == null) {
      logger.severe(""String_Node_Str"" + br);
      throw new PluginException(LinkStatus.ERROR_FATAL);
    }
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dlLink,false,1);
  }
  if (!dl.getConnection().isContentDisposition()) {
    br.followConnection();
    if (br.containsHTML(""String_Node_Str"")) {
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,5 * 60 * 1000l);
    }
    throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  }
  dl.fakeContentRangeHeader(false);
  dl.setFileSizeVerified(true);
  if (dl.getConnection().getLongContentLength() == 0) {
    dl.getConnection().disconnect();
    linkStatus.addStatus(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE);
    linkStatus.setValue(10 * 60 * 1000l);
    return;
  }
  dl.startDownload();
}"
20987,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  String pages[]=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
  progress.setRange(0);
  add(decryptedLinks,progress);
  if (pages.length > 1) {
    for (int i=2; i <= Integer.parseInt(pages[pages.length - 1]); i++) {
      br.getPage(parameter + ""String_Node_Str"" + i);
      add(decryptedLinks,progress);
    }
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    logger.warning(JDL.L(""String_Node_Str"",""String_Node_Str""));
    return new ArrayList<DownloadLink>();
  }
  String pages[]=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
  progress.setRange(0);
  add(decryptedLinks,progress);
  if (pages.length > 1) {
    for (int i=2; i <= Integer.parseInt(pages[pages.length - 1]); i++) {
      br.getPage(parameter + ""String_Node_Str"" + i);
      add(decryptedLinks,progress);
    }
  }
  return decryptedLinks;
}"
20988,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  try {
    br.getPage(parameter);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
    File captchaFile=null;
    String capTxt=""String_Node_Str"";
    String host=br.getHost();
    if (!host.startsWith(""String_Node_Str"")) {
      host=""String_Node_Str"" + host;
    }
    String pass=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass != null) {
      if (pass.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")) {
        pass=null;
      }
    }
    String forms[][]=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatches();
    if (forms.length != 0) {
      for (      String[] element : forms) {
        for (int retry=0; retry < 5; retry++) {
          Matcher matcher=PAT_CAPTCHA.matcher(element[2]);
          if (matcher.find()) {
            logger.finest(""String_Node_Str"");
            String captchaAdress=host + new Regex(element[2],Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            capTxt=getCaptchaCode(""String_Node_Str"",captchaAdress,param);
            String posthelp=HTMLParser.getFormInputHidden(element[2]);
            if (element[0].startsWith(""String_Node_Str"")) {
              br.postPage(element[0],posthelp + ""String_Node_Str"" + capTxt);
            }
 else {
              br.postPage(host + element[0],posthelp + ""String_Node_Str"" + capTxt);
            }
          }
 else {
            Matcher matcher_no=PAT_NO_CAPTCHA.matcher(element[2]);
            if (matcher_no.find()) {
              logger.finest(""String_Node_Str"");
              String posthelp=HTMLParser.getFormInputHidden(element[2]);
              if (element[0].startsWith(""String_Node_Str"")) {
                br.postPage(element[0],posthelp);
              }
 else {
                br.postPage(host + element[0],posthelp);
              }
              break;
            }
          }
          if (br.containsHTML(""String_Node_Str"")) {
            logger.warning(""String_Node_Str"");
            br.getPage(parameter);
          }
 else {
            break;
          }
          if (br.getHttpConnection().getURL().toString().equals(host + element[0])) {
            break;
          }
        }
        if (br.containsHTML(""String_Node_Str"")) {
          Form forms2[]=br.getForms();
          for (          Form form : forms2) {
            if (form.containsHTML(""String_Node_Str"")) {
              File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
              Browser.download(container,br.openFormConnection(form));
              decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
              break;
            }
          }
        }
 else {
          String links[]=null;
          if (br.containsHTML(""String_Node_Str"")) {
            String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            String temp2=Encoding.htmlDecode(Encoding.htmlDecode(Encoding.htmlDecode(temp)));
            links=new Regex(temp2,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
 else           if (br.containsHTML(""String_Node_Str"")) {
            String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            String temp2=Encoding.htmlDecode(Encoding.htmlDecode(temp));
            links=new Regex(temp2,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
 else {
            links=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
          for (          String element2 : links) {
            DownloadLink link=createDownloadlink(Encoding.htmlDecode(element2));
            link.addSourcePluginPassword(pass);
            decryptedLinks.add(link);
          }
        }
      }
    }
 else {
      String[] forms2=br.getRegex(""String_Node_Str"").getColumn(0);
      ArrayList<Form> forms3=new ArrayList<Form>();
      for (      String form : forms2) {
        String temp=form.replaceAll(""String_Node_Str"",""String_Node_Str"");
        Form tform=new Form(temp);
        tform.setAction(param.getCryptedUrl());
        tform.remove(null);
        tform.remove(null);
        forms3.add(tform);
      }
      boolean cont=false;
      Browser brc=null;
      for (      Form tform : forms3) {
        for (int retry=0; retry < 5; retry++) {
          brc=br.cloneBrowser();
          cont=false;
          if (tform.containsHTML(""String_Node_Str"")) {
            logger.finest(""String_Node_Str"");
            String captchaAdress=host + tform.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            captchaFile=getLocalCaptchaFile();
            Browser.download(captchaFile,captchaAdress);
            capTxt=getCaptchaCode(""String_Node_Str"",captchaFile,UserIO.NO_JAC,param,null,null);
            tform.put(""String_Node_Str"",capTxt);
            brc.submitForm(tform);
          }
 else {
            logger.finest(""String_Node_Str"");
            brc.submitForm(tform);
          }
          if (brc.containsHTML(""String_Node_Str"")) {
            cont=true;
            break;
          }
        }
        if (cont) {
          String[] links2=brc.getRegex(""String_Node_Str"").getColumn(0);
          for (          String dl : links2) {
            dl=dl.replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (!dl.startsWith(""String_Node_Str"")) {
              Browser br2=br.cloneBrowser();
              br2.getPage(dl);
              String flink=br2.getRegex(""String_Node_Str"").getMatch(0);
              if (flink == null && br2.getRedirectLocation() != null) {
                dl=br2.getRedirectLocation();
              }
 else {
                dl=flink;
              }
            }
            DownloadLink link=createDownloadlink(dl);
            link.addSourcePluginPassword(pass);
            decryptedLinks.add(link);
          }
        }
      }
    }
    if (decryptedLinks.size() == 0) {
      String[] links2=br.getRegex(""String_Node_Str"").getColumn(0);
      for (      String dl : links2) {
        DownloadLink link=createDownloadlink(dl);
        link.addSourcePluginPassword(pass);
        decryptedLinks.add(link);
      }
    }
  }
 catch (  PluginException e2) {
    throw e2;
  }
catch (  IOException e) {
    logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  try {
    br.getPage(parameter);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
    File captchaFile=null;
    String capTxt=""String_Node_Str"";
    String host=br.getHost();
    if (!host.startsWith(""String_Node_Str"")) {
      host=""String_Node_Str"" + host;
    }
    String pass=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass != null) {
      if (pass.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")) {
        pass=null;
      }
    }
    String forms[][]=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatches();
    if (forms.length != 0) {
      for (      String[] element : forms) {
        for (int retry=0; retry < 5; retry++) {
          Matcher matcher=PAT_CAPTCHA.matcher(element[2]);
          if (matcher.find()) {
            logger.finest(""String_Node_Str"");
            String captchaAdress=host + new Regex(element[2],Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            captchaFile=getLocalCaptchaFile();
            br.cloneBrowser().getDownload(captchaFile,captchaAdress);
            capTxt=getCaptchaCode(""String_Node_Str"",captchaFile,param);
            captchaFile.renameTo(new File(captchaFile.getParentFile(),capTxt + ""String_Node_Str""));
            String posthelp=HTMLParser.getFormInputHidden(element[2]);
            if (element[0].startsWith(""String_Node_Str"")) {
              br.postPage(element[0],posthelp + ""String_Node_Str"" + capTxt);
            }
 else {
              br.postPage(host + element[0],posthelp + ""String_Node_Str"" + capTxt);
            }
          }
 else {
            Matcher matcher_no=PAT_NO_CAPTCHA.matcher(element[2]);
            if (matcher_no.find()) {
              logger.finest(""String_Node_Str"");
              String posthelp=HTMLParser.getFormInputHidden(element[2]);
              if (element[0].startsWith(""String_Node_Str"")) {
                br.postPage(element[0],posthelp);
              }
 else {
                br.postPage(host + element[0],posthelp);
              }
              break;
            }
          }
          if (br.containsHTML(""String_Node_Str"")) {
            logger.warning(""String_Node_Str"");
            br.getPage(parameter);
          }
 else {
            break;
          }
          if (br.getHttpConnection().getURL().toString().equals(host + element[0])) {
            break;
          }
        }
        if (br.containsHTML(""String_Node_Str"")) {
          Form forms2[]=br.getForms();
          for (          Form form : forms2) {
            if (form.containsHTML(""String_Node_Str"")) {
              File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
              Browser.download(container,br.openFormConnection(form));
              decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
              break;
            }
          }
        }
 else {
          String links[]=null;
          if (br.containsHTML(""String_Node_Str"")) {
            String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            String temp2=Encoding.htmlDecode(Encoding.htmlDecode(Encoding.htmlDecode(temp)));
            links=new Regex(temp2,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
 else           if (br.containsHTML(""String_Node_Str"")) {
            String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            String temp2=Encoding.htmlDecode(Encoding.htmlDecode(temp));
            links=new Regex(temp2,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
 else {
            links=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
          for (          String element2 : links) {
            DownloadLink link=createDownloadlink(Encoding.htmlDecode(element2));
            link.addSourcePluginPassword(pass);
            decryptedLinks.add(link);
          }
        }
      }
    }
 else {
      String[] forms2=br.getRegex(""String_Node_Str"").getColumn(0);
      ArrayList<Form> forms3=new ArrayList<Form>();
      for (      String form : forms2) {
        String temp=form.replaceAll(""String_Node_Str"",""String_Node_Str"");
        Form tform=new Form(temp);
        tform.setAction(param.getCryptedUrl());
        tform.remove(null);
        tform.remove(null);
        forms3.add(tform);
      }
      boolean cont=false;
      Browser brc=null;
      for (      Form tform : forms3) {
        for (int retry=0; retry < 5; retry++) {
          brc=br.cloneBrowser();
          cont=false;
          if (tform.containsHTML(""String_Node_Str"")) {
            logger.finest(""String_Node_Str"");
            String captchaAdress=host + tform.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            captchaFile=getLocalCaptchaFile();
            brc.getDownload(captchaFile,captchaAdress);
            capTxt=getCaptchaCode(""String_Node_Str"",captchaFile,UserIO.NO_JAC,param,null,null);
            captchaFile.renameTo(new File(captchaFile.getParentFile(),capTxt + ""String_Node_Str""));
            tform.put(""String_Node_Str"",capTxt);
            brc.submitForm(tform);
          }
 else {
            logger.finest(""String_Node_Str"");
            brc.submitForm(tform);
          }
          if (brc.containsHTML(""String_Node_Str"")) {
            cont=true;
            break;
          }
        }
        if (cont) {
          String[] links2=brc.getRegex(""String_Node_Str"").getColumn(0);
          for (          String dl : links2) {
            dl=dl.replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (!dl.startsWith(""String_Node_Str"")) {
              Browser br2=br.cloneBrowser();
              br2.getPage(dl);
              String flink=br2.getRegex(""String_Node_Str"").getMatch(0);
              if (flink == null && br2.getRedirectLocation() != null) {
                dl=br2.getRedirectLocation();
              }
 else {
                dl=flink;
              }
            }
            DownloadLink link=createDownloadlink(dl);
            link.addSourcePluginPassword(pass);
            decryptedLinks.add(link);
          }
        }
      }
    }
    if (decryptedLinks.size() == 0) {
      String[] links2=br.getRegex(""String_Node_Str"").getColumn(0);
      for (      String dl : links2) {
        DownloadLink link=createDownloadlink(dl);
        link.addSourcePluginPassword(pass);
        decryptedLinks.add(link);
      }
    }
  }
 catch (  PluginException e2) {
    throw e2;
  }
catch (  IOException e) {
    logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
  return decryptedLinks;
}"
20989,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  ArrayList<String> linksList=new ArrayList<String>();
  String parameter=param.toString();
  br.setFollowRedirects(false);
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    logger.warning(JDL.L(""String_Node_Str"",""String_Node_Str""));
    return new ArrayList<DownloadLink>();
  }
  if (parameter.contains(""String_Node_Str"")) {
    String b64=br.getRegex(""String_Node_Str"").getMatch(0);
    if (b64 == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    b64=Encoding.Base64Decode(b64);
    String finallink=new Regex(b64,""String_Node_Str"").getMatch(0);
    if (finallink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    DownloadLink dl=createDownloadlink(finallink);
    decryptedLinks.add(dl);
    return decryptedLinks;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    for (int i=0; i <= 1; i++) {
      Form captchaForm=br.getFormbyKey(""String_Node_Str"");
      if (captchaForm == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      String code=br.getRegex(""String_Node_Str"").getMatch(0);
      if (code == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      captchaForm.put(""String_Node_Str"",code);
      br.submitForm(captchaForm);
      if (br.containsHTML(""String_Node_Str""))       continue;
      break;
    }
  }
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(DecrypterException.CAPTCHA);
  String[] pageLinks=br.getRegex(""String_Node_Str"").getColumn(0);
  for (int i=1; i < pageLinks.length; i++) {
    String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links == null || links.length == 0)     return null;
    for (    String link : links) {
      linksList.add(link);
    }
    br.getPage(pageLinks[i].replace(""String_Node_Str"",""String_Node_Str""));
  }
  progress.setRange(linksList.size());
  for (  String link : linksList) {
    br.getPage(link);
    String b64=br.getRegex(""String_Node_Str"").getMatch(0);
    if (b64 == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    b64=Encoding.Base64Decode(b64);
    String finallink=new Regex(b64,""String_Node_Str"").getMatch(0);
    if (finallink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    DownloadLink dl=createDownloadlink(finallink);
    decryptedLinks.add(dl);
    progress.increase(1);
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  ArrayList<String> linksList=new ArrayList<String>();
  String parameter=param.toString();
  br.setFollowRedirects(false);
  br.getPage(parameter);
  if (br.containsHTML(""String_Node_Str"")) {
    logger.warning(""String_Node_Str"");
    logger.warning(JDL.L(""String_Node_Str"",""String_Node_Str""));
    return new ArrayList<DownloadLink>();
  }
  if (parameter.contains(""String_Node_Str"")) {
    String b64=br.getRegex(""String_Node_Str"").getMatch(0);
    if (b64 == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    b64=Encoding.Base64Decode(b64);
    String finallink=new Regex(b64,""String_Node_Str"").getMatch(0);
    if (finallink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    DownloadLink dl=createDownloadlink(finallink);
    decryptedLinks.add(dl);
    return decryptedLinks;
  }
  if (br.containsHTML(""String_Node_Str"")) {
    for (int i=0; i <= 1; i++) {
      Form captchaForm=br.getFormbyKey(""String_Node_Str"");
      if (captchaForm == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      String code=br.getRegex(""String_Node_Str"").getMatch(0);
      if (code == null)       throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
      captchaForm.put(""String_Node_Str"",code);
      br.submitForm(captchaForm);
      if (br.containsHTML(""String_Node_Str""))       continue;
      break;
    }
  }
  if (br.containsHTML(""String_Node_Str""))   throw new DecrypterException(DecrypterException.CAPTCHA);
  System.out.println(""String_Node_Str"" + br.toString());
  String[] pageLinks=br.getRegex(""String_Node_Str"").getColumn(0);
  for (int i=0; i < pageLinks.length; i++) {
    br.getPage(pageLinks[i].replace(""String_Node_Str"",""String_Node_Str""));
    String[] links=br.getRegex(""String_Node_Str"").getColumn(0);
    if (links == null || links.length == 0)     return null;
    for (    String link : links) {
      linksList.add(link);
    }
  }
  progress.setRange(linksList.size());
  for (  String link : linksList) {
    br.getPage(link);
    String b64=br.getRegex(""String_Node_Str"").getMatch(0);
    if (b64 == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    b64=Encoding.Base64Decode(b64);
    String finallink=new Regex(b64,""String_Node_Str"").getMatch(0);
    if (finallink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    DownloadLink dl=createDownloadlink(finallink);
    decryptedLinks.add(dl);
    progress.increase(1);
  }
  return decryptedLinks;
}"
20990,"public static void createJacinfoXml(EasyMethodFile destination,String user,int lettersize,boolean showLoadDialog){
  String jacInfoXml=getjacInfoXmlString(destination,user,lettersize,showLoadDialog);
  destination.file=new File(destination.file.getParentFile(),destination.getName().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
  File ji=destination.getJacinfoXml();
  if (ji.exists())   ji.renameTo(new File(destination.file,""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""));
  JDIO.writeLocalFile(ji,jacInfoXml,false);
}","public static void createJacinfoXml(EasyMethodFile destination,String user,int lettersize,boolean showLoadDialog){
  String jacInfoXml=getjacInfoXmlString(destination,user,lettersize,showLoadDialog);
  destination.file=new File(destination.file.getParentFile(),destination.getName().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
  destination.file.mkdirs();
  File ji=destination.getJacinfoXml();
  if (ji.exists())   ji.renameTo(new File(destination.file,""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str""));
  JDIO.writeLocalFile(ji,jacInfoXml,false);
}"
20991,"public static void create(EasyMethodFile ParentHost,EasyMethodFile destination,String user,int lettersize){
  destination.file.mkdir();
  createJacinfoXml(destination,user,lettersize,false);
  copyScriptJas(ParentHost,destination);
}","public static void create(EasyMethodFile ParentHost,EasyMethodFile destination,String user,int lettersize){
  createJacinfoXml(destination,user,lettersize,false);
  copyScriptJas(ParentHost,destination);
}"
20992,"private void onErrorPluginDefect(DownloadLink downloadLink2,PluginForHost currentPlugin2){
  logger.warning(""String_Node_Str"" + currentPlugin.getHost() + ""String_Node_Str""+ downloadLink.getPlugin().getVersion()+ ""String_Node_Str"");
  logger.warning(downloadLink2.getLinkStatus().getErrorMessage());
  try {
    logger.finest(currentPlugin2.getBrowser().getRequest().getHttpConnection() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  try {
    logger.finest(currentPlugin2.getBrowser() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  downloadLink2.getLinkStatus().addStatus(LinkStatus.ERROR_FATAL);
  downloadLink2.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
  downloadLink.requestGuiUpdate();
}","private void onErrorPluginDefect(DownloadLink downloadLink2,PluginForHost currentPlugin2){
  logger.warning(""String_Node_Str"" + currentPlugin.getHost() + ""String_Node_Str""+ downloadLink.getPlugin().getVersion()+ ""String_Node_Str"");
  if (downloadLink2.getLinkStatus().getErrorMessage() != null)   logger.warning(downloadLink2.getLinkStatus().getErrorMessage());
  try {
    logger.finest(currentPlugin2.getBrowser().getRequest().getHttpConnection() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  try {
    logger.finest(currentPlugin2.getBrowser() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    JDLogger.exception(e);
  }
  downloadLink2.getLinkStatus().addStatus(LinkStatus.ERROR_FATAL);
  downloadLink2.getLinkStatus().setErrorMessage(JDL.L(""String_Node_Str"",""String_Node_Str""));
  downloadLink.requestGuiUpdate();
}"
20993,"protected boolean runCommands(ProgressController progress){
  int waitForReturn=configuration.getIntegerProperty(PROPERTY_IP_WAIT_FOR_RETURN,0);
  String executeIn=configuration.getStringProperty(PROPERTY_RECONNECT_EXECUTE_FOLDER);
  String command=configuration.getStringProperty(PROPERTY_TERMINAL);
  String[] cmds=command.split(""String_Node_Str"");
  command=cmds[0];
  for (int i=0; i < cmds.length - 1; i++) {
    cmds[i]=cmds[i + 1];
  }
  String batch=configuration.getStringProperty(PROPERTY_BATCHTEXT,""String_Node_Str"");
  String[] lines=Regex.getLines(batch);
  logger.info(""String_Node_Str"" + command);
  for (  String element : lines) {
    cmds[cmds.length - 1]=element;
    logger.finer(""String_Node_Str"" + JDUtilities.runCommand(command,cmds,executeIn,waitForReturn));
  }
  return true;
}","protected boolean runCommands(ProgressController progress){
  int waitForReturn=configuration.getIntegerProperty(PROPERTY_IP_WAIT_FOR_RETURN,0);
  String executeIn=configuration.getStringProperty(PROPERTY_RECONNECT_EXECUTE_FOLDER);
  String command=configuration.getStringProperty(PROPERTY_TERMINAL);
  String[] cmds=command.split(""String_Node_Str"");
  command=cmds[0];
  for (int i=0; i < cmds.length - 1; i++) {
    cmds[i]=cmds[i + 1];
  }
  String batch=configuration.getStringProperty(PROPERTY_BATCHTEXT,""String_Node_Str"");
  String[] lines=Regex.getLines(batch);
  logger.info(""String_Node_Str"" + command + ""String_Node_Str"");
  for (  String element : lines) {
    cmds[cmds.length - 1]=element;
    logger.finer(""String_Node_Str"" + JDUtilities.runCommand(command,cmds,executeIn,lines.length >= 2 ? waitForReturn : -1));
  }
  return true;
}"
20994,"public void handleFree(DownloadLink downloadLink) throws Exception {
  setBrowserExclusive();
  requestFileInformation(downloadLink);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  if (br.containsHTML(DOWNLOAD_NOTALLOWED)) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink != null) {
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
 else {
    if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
      String wait=br.getRegex(""String_Node_Str"").getMatch(0);
      if (wait != null)       throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Integer.parseInt(wait.trim()) * 1000l);
      throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,30 * 60 * 1000l);
    }
    Form form=br.getFormBySubmitvalue(""String_Node_Str"");
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,2 * 60 * 1001l);
    if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  setBrowserExclusive();
  requestFileInformation(downloadLink);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  checkErrors();
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink != null) {
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
 else {
    Form form=br.getFormBySubmitvalue(""String_Node_Str"");
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    br.submitForm(form);
    checkErrors();
    if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
}"
20995,"public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  if (this.isFreeAccount()) {
    simultanpremium=1;
    handleFree(downloadLink);
    return;
  }
 else {
    if (simultanpremium + 1 > 20) {
      simultanpremium=20;
    }
 else {
      simultanpremium++;
    }
  }
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  if (br.containsHTML(DOWNLOAD_NOTALLOWED)) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  }
  link=br.getRegex(PATTERN_PREMIUM_FINALURL).getMatch(0);
  if (link == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,link,true,0);
  URLConnectionAdapter con=dl.getConnection();
  if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  if (!con.isContentDisposition()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}","public void handlePremium(DownloadLink downloadLink,Account account) throws Exception {
  requestFileInformation(downloadLink);
  login(account);
  if (this.isFreeAccount()) {
    simultanpremium=1;
    handleFree(downloadLink);
    return;
  }
 else {
    if (simultanpremium + 1 > 20) {
      simultanpremium=20;
    }
 else {
      simultanpremium++;
    }
  }
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  checkErrors();
  link=br.getRegex(PATTERN_PREMIUM_FINALURL).getMatch(0);
  if (link == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  br.setDebug(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,link,true,0);
  URLConnectionAdapter con=dl.getConnection();
  if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  if (!con.isContentDisposition()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}"
20996,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  int submitvalue=getPluginConfig().getIntegerProperty(""String_Node_Str"",5);
  br.setDebug(true);
  String parameter=param.toString().replaceFirst(""String_Node_Str"",""String_Node_Str"");
  ArrayList<String> link_passwds=new ArrayList<String>();
  link_passwds.add(""String_Node_Str"");
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  br.setFollowRedirects(false);
  this.setBrowserExclusive();
  progress.setRange(3);
  br.getPage(parameter);
  try {
    Thread.sleep(500);
  }
 catch (  Exception e) {
  }
  br.getPage(parameter);
  progress.increase(1);
  int max=10;
  while (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    if (max-- <= 0) {
      logger.severe(""String_Node_Str"");
      return null;
    }
    String adr=""String_Node_Str"";
    progress.addToMax(1);
    String capTxt=getCaptchaCode(""String_Node_Str"",adr,param);
    Form post=br.getForm(0);
    post.put(""String_Node_Str"",capTxt);
    try {
      Thread.sleep(500);
    }
 catch (    Exception e) {
    }
    br.submitForm(post);
  }
  String[] ids=br.getRegex(""String_Node_Str"").getColumn(0);
  logger.finer(""String_Node_Str"" + ids.length);
  progress.addToMax(ids.length);
  Browser brc=br.cloneBrowser();
  for (  String element : ids) {
    for (int retry=1; retry < 5; retry++) {
      brc.getPage(""String_Node_Str"" + element);
      if (brc.containsHTML(""String_Node_Str"")) {
        String adr=""String_Node_Str"";
        String capTxt=getCaptchaCode(""String_Node_Str"",adr,param);
        Form post=brc.getForm(0);
        post.put(""String_Node_Str"",capTxt);
        brc.submitForm(post);
      }
 else {
        Form form=brc.getForm(0);
        if (form != null) {
          form.put(""String_Node_Str"",submitvalue + ""String_Node_Str"");
          brc.submitForm(form);
          if (brc.getRedirectLocation() == null) {
            logger.info(""String_Node_Str"");
            boolean found=false;
            for (int i=0; i <= 100; i++) {
              try {
                Thread.sleep(100);
              }
 catch (              Exception e) {
              }
              form.put(""String_Node_Str"",i + ""String_Node_Str"");
              brc.submitForm(form);
              if (brc.getRedirectLocation() != null) {
                found=true;
                getPluginConfig().setProperty(""String_Node_Str"",i);
                submitvalue=i;
                logger.info(""String_Node_Str"");
                break;
              }
            }
            if (found == false) {
              logger.info(""String_Node_Str"");
              getPluginConfig().setProperty(""String_Node_Str"",-1);
              return null;
            }
          }
        }
      }
      if (brc.getRedirectLocation() != null) {
        DownloadLink link=createDownloadlink(brc.getRedirectLocation());
        link.setSourcePluginPasswordList(link_passwds);
        decryptedLinks.add(link);
        break;
      }
    }
    progress.increase(1);
  }
  progress.increase(1);
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  int submitvalue=getPluginConfig().getIntegerProperty(""String_Node_Str"",5);
  br.setDebug(true);
  String parameter=param.toString().replaceFirst(""String_Node_Str"",""String_Node_Str"");
  ArrayList<String> link_passwds=new ArrayList<String>();
  link_passwds.add(""String_Node_Str"");
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  br.setFollowRedirects(false);
  this.setBrowserExclusive();
  progress.setRange(3);
  if (parameter.contains(""String_Node_Str"")) {
    String linkid=new Regex(parameter,""String_Node_Str"").getMatch(0);
    parameter=""String_Node_Str"" + linkid;
  }
  br.getPage(parameter);
  try {
    Thread.sleep(500);
  }
 catch (  Exception e) {
  }
  br.getPage(parameter);
  progress.increase(1);
  int max=10;
  while (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    if (max-- <= 0) {
      logger.severe(""String_Node_Str"");
      return null;
    }
    String adr=""String_Node_Str"";
    progress.addToMax(1);
    String capTxt=getCaptchaCode(""String_Node_Str"",adr,param);
    Form post=br.getForm(0);
    post.put(""String_Node_Str"",capTxt);
    try {
      Thread.sleep(500);
    }
 catch (    Exception e) {
    }
    br.submitForm(post);
  }
  String[] ids=br.getRegex(""String_Node_Str"").getColumn(0);
  logger.finer(""String_Node_Str"" + ids.length);
  progress.addToMax(ids.length);
  Browser brc=br.cloneBrowser();
  for (  String element : ids) {
    for (int retry=1; retry < 5; retry++) {
      brc.getPage(""String_Node_Str"" + element);
      if (brc.containsHTML(""String_Node_Str"")) {
        String adr=""String_Node_Str"";
        String capTxt=getCaptchaCode(""String_Node_Str"",adr,param);
        Form post=brc.getForm(0);
        post.put(""String_Node_Str"",capTxt);
        brc.submitForm(post);
      }
 else {
        Form form=brc.getForm(0);
        if (form != null) {
          form.put(""String_Node_Str"",submitvalue + ""String_Node_Str"");
          brc.submitForm(form);
          if (brc.getRedirectLocation() == null) {
            logger.info(""String_Node_Str"");
            boolean found=false;
            for (int i=0; i <= 100; i++) {
              try {
                Thread.sleep(100);
              }
 catch (              Exception e) {
              }
              form.put(""String_Node_Str"",i + ""String_Node_Str"");
              brc.submitForm(form);
              if (brc.getRedirectLocation() != null) {
                found=true;
                getPluginConfig().setProperty(""String_Node_Str"",i);
                submitvalue=i;
                logger.info(""String_Node_Str"");
                break;
              }
            }
            if (found == false) {
              logger.info(""String_Node_Str"");
              getPluginConfig().setProperty(""String_Node_Str"",-1);
              return null;
            }
          }
        }
      }
      if (brc.getRedirectLocation() != null) {
        DownloadLink link=createDownloadlink(brc.getRedirectLocation());
        link.setSourcePluginPasswordList(link_passwds);
        decryptedLinks.add(link);
        break;
      }
    }
    progress.increase(1);
  }
  progress.increase(1);
  return decryptedLinks;
}"
20997,"public void handleFree(DownloadLink downloadLink) throws Exception {
  setBrowserExclusive();
  requestFileInformation(downloadLink);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  if (br.containsHTML(DOWNLOAD_NOTALLOWED)) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  }
  Form form=br.getFormBySubmitvalue(""String_Node_Str"");
  if (form != null) {
    br.submitForm(form);
  }
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
  String wait=br.getRegex(""String_Node_Str"").getMatch(0);
  if (wait != null)   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,2 * 60 * 1001l);
  if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
  URLConnectionAdapter con=dl.getConnection();
  if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_RETRY);
  }
  if (!con.isContentDisposition()) {
    con.disconnect();
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
  }
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  setBrowserExclusive();
  requestFileInformation(downloadLink);
  String link=downloadLink.getDownloadURL();
  br.getPage(link);
  if (br.getRedirectLocation() != null) {
    link=br.getRedirectLocation().replaceAll(""String_Node_Str"",""String_Node_Str"");
    br.getPage(link);
  }
  if (br.containsHTML(DOWNLOAD_NOTALLOWED)) {
    throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,20 * 60 * 1000l);
  }
  String dllink=br.getRegex(""String_Node_Str"").getMatch(0);
  if (dllink != null) {
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
 else {
    Form form=br.getFormBySubmitvalue(""String_Node_Str"");
    if (form == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    br.submitForm(form);
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),10 * 60 * 1000l);
    String wait=br.getRegex(""String_Node_Str"").getMatch(0);
    if (wait != null)     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,Regex.getMilliSeconds(wait));
    if (br.containsHTML(""String_Node_Str""))     throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,null,2 * 60 * 1001l);
    if (br.getRedirectLocation() != null && br.getRedirectLocation().indexOf(""String_Node_Str"") > 0) {
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    dllink=br.getRegex(""String_Node_Str"").getMatch(0);
    if (dllink == null)     throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
    dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,dllink,true,1);
    URLConnectionAdapter con=dl.getConnection();
    if (Plugin.getFileNameFromHeader(con) == null || Plugin.getFileNameFromHeader(con).indexOf(""String_Node_Str"") >= 0) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_RETRY);
    }
    if (!con.isContentDisposition()) {
      con.disconnect();
      throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,10 * 60 * 1000l);
    }
    dl.startDownload();
  }
}"
20998,"public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),15 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),15 * 60 * 1000l);
  String captchaCode=getCaptchaCode(""String_Node_Str"",downloadLink);
  Form form=br.getForm(1);
  String passCode=null;
  if (form.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
  }
  form.put(""String_Node_Str"",captchaCode);
  br.submitForm(form);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
    }
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  }
  if (passCode != null)   downloadLink.setProperty(""String_Node_Str"",passCode);
  String all=br.getRegex(""String_Node_Str"").getMatch(-1);
  String dec=br.getRegex(""String_Node_Str"").getMatch(-1);
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  String fun=""String_Node_Str"" + all + ""String_Node_Str""+ dec+ ""String_Node_Str"";
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  String url=Context.toString(result);
  Context.exit();
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url);
  dl.startDownload();
}","public void handleFree(DownloadLink downloadLink) throws Exception {
  requestFileInformation(downloadLink);
  br.setFollowRedirects(true);
  br.getPage(downloadLink.getDownloadURL());
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),15 * 60 * 1000l);
  if (br.containsHTML(""String_Node_Str""))   throw new PluginException(LinkStatus.ERROR_TEMPORARILY_UNAVAILABLE,JDL.L(""String_Node_Str"",""String_Node_Str""),15 * 60 * 1000l);
  String captchaCode=getCaptchaCode(""String_Node_Str"",downloadLink);
  Form form=br.getForm(1);
  if (form == null)   throw new PluginException(LinkStatus.ERROR_PLUGIN_DEFEKT);
  String passCode=null;
  if (form.containsHTML(""String_Node_Str"")) {
    if (downloadLink.getStringProperty(""String_Node_Str"",null) == null) {
      passCode=Plugin.getUserInput(null,downloadLink);
    }
 else {
      passCode=downloadLink.getStringProperty(""String_Node_Str"",null);
    }
    form.put(""String_Node_Str"",passCode);
  }
  form.put(""String_Node_Str"",captchaCode);
  br.submitForm(form);
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    if (br.containsHTML(""String_Node_Str"")) {
      downloadLink.setProperty(""String_Node_Str"",null);
    }
    throw new PluginException(LinkStatus.ERROR_CAPTCHA);
  }
  if (br.containsHTML(""String_Node_Str"") || br.containsHTML(""String_Node_Str"")) {
    throw new PluginException(LinkStatus.ERROR_IP_BLOCKED,60 * 60 * 1000l);
  }
  if (passCode != null)   downloadLink.setProperty(""String_Node_Str"",passCode);
  String all=br.getRegex(""String_Node_Str"").getMatch(-1);
  String dec=br.getRegex(""String_Node_Str"").getMatch(-1);
  Context cx=Context.enter();
  Scriptable scope=cx.initStandardObjects();
  String fun=""String_Node_Str"" + all + ""String_Node_Str""+ dec+ ""String_Node_Str"";
  Object result=cx.evaluateString(scope,fun,""String_Node_Str"",1,null);
  String url=Context.toString(result);
  Context.exit();
  br.setFollowRedirects(true);
  dl=jd.plugins.BrowserAdapter.openDownload(br,downloadLink,url);
  dl.startDownload();
}"
20999,"private void startDownloadThread(DownloadLink dlink){
  Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_DOWNLOAD,dlink);
  String outputFilePath=dlink.getFileOutput();
  int index=outputFilePath.lastIndexOf(PATH_SEPARATOR);
  String outputFolder=outputFilePath.substring(0,index);
  File destinationFolder=new File(outputFolder);
  if (!destinationFolder.exists()) {
    if (!destinationFolder.mkdir()) {
      logger.warning(""String_Node_Str"" + destinationFolder + ""String_Node_Str"");
      LinkStatus status=dlink.getLinkStatus();
      status.setErrorMessage(""String_Node_Str"" + outputFolder);
      status.addStatus(LinkStatus.ERROR_LOCAL_IO);
      dlink.setEnabled(false);
      dlink.requestGuiUpdate();
    }
  }
  long freeDiskSpace=destinationFolder.getUsableSpace();
  long fileSize=dlink.getDownloadSize();
  if (freeDiskSpace > fileSize) {
    SingleDownloadController download=new SingleDownloadController(dlink);
    logger.info(""String_Node_Str"" + dlink.getHost());
    dlink.getLinkStatus().setActive(true);
    this.activateDownload(dlink,download);
    if (!stopMarkTracker.contains(dlink))     stopMarkTracker.add(dlink);
    download.start();
  }
 else {
    String fileName=dlink.getName();
    logger.warning(""String_Node_Str"" + fileName + ""String_Node_Str""+ outputFolder+ ""String_Node_Str""+ fileSize+ ""String_Node_Str""+ freeDiskSpace+ ""String_Node_Str"");
    String title=JDL.L(""String_Node_Str"",""String_Node_Str"" + outputFolder + ""String_Node_Str"");
    String message=JDL.L(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str"");
    UserIO.getInstance().requestConfirmDialog(UserIO.NO_CANCEL_OPTION,title,message);
    LinkStatus status=dlink.getLinkStatus();
    status.setErrorMessage(message);
    status.addStatus(LinkStatus.ERROR_LOCAL_IO);
    dlink.setEnabled(false);
    dlink.requestGuiUpdate();
  }
}","private void startDownloadThread(DownloadLink dlink){
  Interaction.handleInteraction(Interaction.INTERACTION_BEFORE_DOWNLOAD,dlink);
  String outputFilePath=dlink.getFileOutput();
  int index=outputFilePath.lastIndexOf(PATH_SEPARATOR);
  String outputFolder=outputFilePath.substring(0,index);
  File destinationFolder=new File(outputFolder);
  if (!destinationFolder.exists()) {
    boolean createFolder=destinationFolder.mkdirs();
    if (!createFolder) {
      logger.warning(""String_Node_Str"" + destinationFolder + ""String_Node_Str"");
      LinkStatus status=dlink.getLinkStatus();
      status.setErrorMessage(""String_Node_Str"" + outputFolder);
      status.addStatus(LinkStatus.ERROR_LOCAL_IO);
      dlink.setEnabled(false);
      dlink.requestGuiUpdate();
    }
 else {
      logger.info(""String_Node_Str"" + destinationFolder + ""String_Node_Str"");
    }
  }
  long freeDiskSpace=destinationFolder.getUsableSpace();
  long fileSize=dlink.getDownloadSize();
  if (freeDiskSpace > fileSize) {
    SingleDownloadController download=new SingleDownloadController(dlink);
    logger.info(""String_Node_Str"" + dlink.getHost());
    dlink.getLinkStatus().setActive(true);
    this.activateDownload(dlink,download);
    if (!stopMarkTracker.contains(dlink))     stopMarkTracker.add(dlink);
    download.start();
  }
 else {
    String fileName=dlink.getName();
    logger.warning(""String_Node_Str"" + fileName + ""String_Node_Str""+ outputFolder+ ""String_Node_Str""+ fileSize+ ""String_Node_Str""+ freeDiskSpace+ ""String_Node_Str"");
    String title=JDL.L(""String_Node_Str"",""String_Node_Str"" + outputFolder + ""String_Node_Str"");
    String message=JDL.L(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str"");
    UserIO.getInstance().requestConfirmDialog(UserIO.NO_CANCEL_OPTION,title,message);
    LinkStatus status=dlink.getLinkStatus();
    status.setErrorMessage(message);
    status.addStatus(LinkStatus.ERROR_LOCAL_IO);
    dlink.setEnabled(false);
    dlink.requestGuiUpdate();
  }
}"
21000,"public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  try {
    br.getPage(parameter);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
    File captchaFile=null;
    String capTxt=""String_Node_Str"";
    String host=br.getHost();
    if (!host.startsWith(""String_Node_Str"")) {
      host=""String_Node_Str"" + host;
    }
    String pass=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass != null) {
      if (pass.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")) {
        pass=null;
      }
    }
    String forms[][]=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatches();
    if (forms.length != 0) {
      for (      String[] element : forms) {
        for (int retry=0; retry < 5; retry++) {
          Matcher matcher=PAT_CAPTCHA.matcher(element[2]);
          if (matcher.find()) {
            logger.finest(""String_Node_Str"");
            String captchaAdress=host + new Regex(element[2],Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            capTxt=getCaptchaCode(""String_Node_Str"",captchaAdress,param);
            String posthelp=HTMLParser.getFormInputHidden(element[2]);
            if (element[0].startsWith(""String_Node_Str"")) {
              br.postPage(element[0],posthelp + ""String_Node_Str"" + capTxt);
            }
 else {
              br.postPage(host + element[0],posthelp + ""String_Node_Str"" + capTxt);
            }
          }
 else {
            Matcher matcher_no=PAT_NO_CAPTCHA.matcher(element[2]);
            if (matcher_no.find()) {
              logger.finest(""String_Node_Str"");
              String posthelp=HTMLParser.getFormInputHidden(element[2]);
              if (element[0].startsWith(""String_Node_Str"")) {
                br.postPage(element[0],posthelp);
              }
 else {
                br.postPage(host + element[0],posthelp);
              }
              break;
            }
          }
          if (br.containsHTML(""String_Node_Str"")) {
            logger.warning(""String_Node_Str"");
            br.getPage(parameter);
          }
 else {
            break;
          }
          if (br.getHttpConnection().getURL().toString().equals(host + element[0])) {
            break;
          }
        }
        if (br.containsHTML(""String_Node_Str"")) {
          Form forms2[]=br.getForms();
          for (          Form form : forms2) {
            if (form.containsHTML(""String_Node_Str"")) {
              File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
              Browser.download(container,br.openFormConnection(form));
              decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
              break;
            }
          }
        }
 else {
          String links[]=null;
          if (br.containsHTML(""String_Node_Str"")) {
            String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            String temp2=Encoding.htmlDecode(Encoding.htmlDecode(Encoding.htmlDecode(temp)));
            links=new Regex(temp2,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
 else           if (br.containsHTML(""String_Node_Str"")) {
            String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            String temp2=Encoding.htmlDecode(Encoding.htmlDecode(temp));
            links=new Regex(temp2,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
 else {
            links=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
          for (          String element2 : links) {
            DownloadLink link=createDownloadlink(Encoding.htmlDecode(element2));
            link.addSourcePluginPassword(pass);
            decryptedLinks.add(link);
          }
        }
      }
    }
 else {
      String[] forms2=br.getRegex(""String_Node_Str"").getColumn(0);
      ArrayList<Form> forms3=new ArrayList<Form>();
      for (      String form : forms2) {
        String temp=form.replaceAll(""String_Node_Str"",""String_Node_Str"");
        Form tform=new Form(temp);
        tform.setAction(param.getCryptedUrl());
        tform.remove(null);
        tform.remove(null);
        forms3.add(tform);
      }
      boolean cont=false;
      Browser brc=null;
      for (      Form tform : forms3) {
        for (int retry=0; retry < 5; retry++) {
          brc=br.cloneBrowser();
          cont=false;
          if (tform.containsHTML(""String_Node_Str"")) {
            logger.finest(""String_Node_Str"");
            String captchaAdress=host + tform.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            captchaFile=getLocalCaptchaFile();
            Browser.download(captchaFile,captchaAdress);
            capTxt=getCaptchaCode(""String_Node_Str"",captchaFile,UserIO.NO_JAC,param,null,null);
            tform.put(""String_Node_Str"",capTxt);
            brc.submitForm(tform);
          }
 else {
            logger.finest(""String_Node_Str"");
            brc.submitForm(tform);
          }
          if (brc.containsHTML(""String_Node_Str"")) {
            cont=true;
            break;
          }
        }
        if (cont) {
          String[] links2=brc.getRegex(""String_Node_Str"").getColumn(0);
          for (          String dl : links2) {
            dl=dl.replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (!dl.startsWith(""String_Node_Str"")) {
              Browser br2=br.cloneBrowser();
              br2.getPage(dl);
              String flink=br2.getRegex(""String_Node_Str"").getMatch(0);
              if (flink == null && br2.getRedirectLocation() != null) {
                dl=br2.getRedirectLocation();
              }
 else {
                dl=flink;
              }
            }
            DownloadLink link=createDownloadlink(dl);
            link.addSourcePluginPassword(pass);
            decryptedLinks.add(link);
          }
        }
      }
    }
  }
 catch (  PluginException e2) {
    throw e2;
  }
catch (  IOException e) {
    logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
  return decryptedLinks;
}","public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {
  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();
  String parameter=param.toString();
  this.setBrowserExclusive();
  br.getHeaders().put(""String_Node_Str"",RandomUserAgent.generate());
  try {
    br.getPage(parameter);
    if (br.getRedirectLocation() != null)     br.getPage(br.getRedirectLocation());
    File captchaFile=null;
    String capTxt=""String_Node_Str"";
    String host=br.getHost();
    if (!host.startsWith(""String_Node_Str"")) {
      host=""String_Node_Str"" + host;
    }
    String pass=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass == null)     pass=br.getRegex(""String_Node_Str"").getMatch(0);
    if (pass != null) {
      if (pass.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"") || pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")|| pass.equals(""String_Node_Str"")) {
        pass=null;
      }
    }
    String forms[][]=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE | Pattern.DOTALL)).getMatches();
    if (forms.length != 0) {
      for (      String[] element : forms) {
        for (int retry=0; retry < 5; retry++) {
          Matcher matcher=PAT_CAPTCHA.matcher(element[2]);
          if (matcher.find()) {
            logger.finest(""String_Node_Str"");
            String captchaAdress=host + new Regex(element[2],Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            capTxt=getCaptchaCode(""String_Node_Str"",captchaAdress,param);
            String posthelp=HTMLParser.getFormInputHidden(element[2]);
            if (element[0].startsWith(""String_Node_Str"")) {
              br.postPage(element[0],posthelp + ""String_Node_Str"" + capTxt);
            }
 else {
              br.postPage(host + element[0],posthelp + ""String_Node_Str"" + capTxt);
            }
          }
 else {
            Matcher matcher_no=PAT_NO_CAPTCHA.matcher(element[2]);
            if (matcher_no.find()) {
              logger.finest(""String_Node_Str"");
              String posthelp=HTMLParser.getFormInputHidden(element[2]);
              if (element[0].startsWith(""String_Node_Str"")) {
                br.postPage(element[0],posthelp);
              }
 else {
                br.postPage(host + element[0],posthelp);
              }
              break;
            }
          }
          if (br.containsHTML(""String_Node_Str"")) {
            logger.warning(""String_Node_Str"");
            br.getPage(parameter);
          }
 else {
            break;
          }
          if (br.getHttpConnection().getURL().toString().equals(host + element[0])) {
            break;
          }
        }
        if (br.containsHTML(""String_Node_Str"")) {
          Form forms2[]=br.getForms();
          for (          Form form : forms2) {
            if (form.containsHTML(""String_Node_Str"")) {
              File container=JDUtilities.getResourceFile(""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"");
              Browser.download(container,br.openFormConnection(form));
              decryptedLinks.addAll(JDUtilities.getController().getContainerLinks(container));
              break;
            }
          }
        }
 else {
          String links[]=null;
          if (br.containsHTML(""String_Node_Str"")) {
            String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            String temp2=Encoding.htmlDecode(Encoding.htmlDecode(Encoding.htmlDecode(temp)));
            links=new Regex(temp2,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
 else           if (br.containsHTML(""String_Node_Str"")) {
            String temp=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            String temp2=Encoding.htmlDecode(Encoding.htmlDecode(temp));
            links=new Regex(temp2,Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
 else {
            links=br.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getColumn(0);
          }
          for (          String element2 : links) {
            DownloadLink link=createDownloadlink(Encoding.htmlDecode(element2));
            link.addSourcePluginPassword(pass);
            decryptedLinks.add(link);
          }
        }
      }
    }
 else {
      String[] forms2=br.getRegex(""String_Node_Str"").getColumn(0);
      ArrayList<Form> forms3=new ArrayList<Form>();
      for (      String form : forms2) {
        String temp=form.replaceAll(""String_Node_Str"",""String_Node_Str"");
        Form tform=new Form(temp);
        tform.setAction(param.getCryptedUrl());
        tform.remove(null);
        tform.remove(null);
        forms3.add(tform);
      }
      boolean cont=false;
      Browser brc=null;
      for (      Form tform : forms3) {
        for (int retry=0; retry < 5; retry++) {
          brc=br.cloneBrowser();
          cont=false;
          if (tform.containsHTML(""String_Node_Str"")) {
            logger.finest(""String_Node_Str"");
            String captchaAdress=host + tform.getRegex(Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE)).getMatch(0);
            captchaFile=getLocalCaptchaFile();
            Browser.download(captchaFile,captchaAdress);
            capTxt=getCaptchaCode(""String_Node_Str"",captchaFile,UserIO.NO_JAC,param,null,null);
            tform.put(""String_Node_Str"",capTxt);
            brc.submitForm(tform);
          }
 else {
            logger.finest(""String_Node_Str"");
            brc.submitForm(tform);
          }
          if (brc.containsHTML(""String_Node_Str"")) {
            cont=true;
            break;
          }
        }
        if (cont) {
          String[] links2=brc.getRegex(""String_Node_Str"").getColumn(0);
          for (          String dl : links2) {
            dl=dl.replaceAll(""String_Node_Str"",""String_Node_Str"");
            if (!dl.startsWith(""String_Node_Str"")) {
              Browser br2=br.cloneBrowser();
              br2.getPage(dl);
              String flink=br2.getRegex(""String_Node_Str"").getMatch(0);
              if (flink == null && br2.getRedirectLocation() != null) {
                dl=br2.getRedirectLocation();
              }
 else {
                dl=flink;
              }
            }
            DownloadLink link=createDownloadlink(dl);
            link.addSourcePluginPassword(pass);
            decryptedLinks.add(link);
          }
        }
      }
    }
    if (decryptedLinks.size() == 0) {
      String[] links2=br.getRegex(""String_Node_Str"").getColumn(0);
      for (      String dl : links2) {
        DownloadLink link=createDownloadlink(dl);
        link.addSourcePluginPassword(pass);
        decryptedLinks.add(link);
      }
    }
  }
 catch (  PluginException e2) {
    throw e2;
  }
catch (  IOException e) {
    logger.log(java.util.logging.Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
  return decryptedLinks;
}"
