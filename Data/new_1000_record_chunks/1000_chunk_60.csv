record_number,buggy_code,fixed_code
59001,"public Account getCustomerAccount(Partner partner,Company company,boolean isSupplierAccount) throws AxelorException {
  AccountingSituation accountingSituation=accountCustomerService.getAccountingSituation(partner,company);
  if (accountingSituation != null) {
    if (!isSupplierAccount && accountingSituation.getCustomerAccount() != null) {
      return accountingSituation.getCustomerAccount();
    }
 else     if (isSupplierAccount && accountingSituation.getSupplierAccount() != null) {
      return accountingSituation.getSupplierAccount();
    }
  }
  AccountConfig accountConfig=accountConfigService.getAccountConfig(company);
  if (isSupplierAccount) {
    return accountConfigService.getSupplierAccount(accountConfig);
  }
 else {
    return accountConfigService.getCustomerAccount(accountConfig);
  }
}","public Account getCustomerAccount(Partner partner,Company company,boolean isSupplierAccount) throws AxelorException {
  AccountingSituation accountingSituation=accountCustomerService.getAccountingSituationService().getAccountingSituation(partner,company);
  if (accountingSituation != null) {
    if (!isSupplierAccount && accountingSituation.getCustomerAccount() != null) {
      return accountingSituation.getCustomerAccount();
    }
 else     if (isSupplierAccount && accountingSituation.getSupplierAccount() != null) {
      return accountingSituation.getSupplierAccount();
    }
  }
  AccountConfig accountConfig=accountConfigService.getAccountConfig(company);
  if (isSupplierAccount) {
    return accountConfigService.getSupplierAccount(accountConfig);
  }
 else {
    return accountConfigService.getCustomerAccount(accountConfig);
  }
}"
59002,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public BigDecimal getInTaxTotalRemaining(Invoice invoice) throws AxelorException {
  BigDecimal inTaxTotalRemaining=BigDecimal.ZERO;
  LOG.debug(""String_Node_Str"",invoice.getInvoiceId());
  if (invoice != null) {
    boolean isMinus=this.isMinus(invoice);
    LOG.debug(""String_Node_Str"");
    invoiceRepo.save(invoice);
    LOG.debug(""String_Node_Str"");
    MoveLine moveLine=this.getCustomerMoveLineByLoop(invoice);
    LOG.debug(""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (moveLine != null) {
      inTaxTotalRemaining=inTaxTotalRemaining.add(moveLine.getAmountRemaining());
      if (isMinus) {
        inTaxTotalRemaining=inTaxTotalRemaining.negate();
      }
    }
  }
  return inTaxTotalRemaining;
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public BigDecimal getInTaxTotalRemaining(Invoice invoice) throws AxelorException {
  BigDecimal inTaxTotalRemaining=BigDecimal.ZERO;
  LOG.debug(""String_Node_Str"",invoice.getInvoiceId());
  if (invoice != null) {
    boolean isMinus=this.isMinus(invoice);
    LOG.debug(""String_Node_Str"");
    Beans.get(InvoiceRepository.class).save(invoice);
    LOG.debug(""String_Node_Str"");
    MoveLine moveLine=this.getCustomerMoveLineByLoop(invoice);
    LOG.debug(""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (moveLine != null) {
      inTaxTotalRemaining=inTaxTotalRemaining.add(moveLine.getAmountRemaining());
      if (isMinus) {
        inTaxTotalRemaining=inTaxTotalRemaining.negate();
      }
    }
  }
  return inTaxTotalRemaining;
}"
59003,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void setExcessPayment(AccountClearance accountClearance) throws AxelorException {
  accountClearance.setMoveLineSet(new HashSet<MoveLine>());
  List<MoveLine> moveLineList=this.getExcessPayment(accountClearance);
  if (moveLineList != null && moveLineList.size() != 0) {
    accountClearance.getMoveLineSet().addAll(moveLineList);
  }
  accountClearance.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void setExcessPayment(AccountClearance accountClearance) throws AxelorException {
  accountClearance.setMoveLineSet(new HashSet<MoveLine>());
  List<MoveLine> moveLineList=(List<MoveLine>)this.getExcessPayment(accountClearance);
  if (moveLineList != null && moveLineList.size() != 0) {
    accountClearance.getMoveLineSet().addAll(moveLineList);
  }
  accountClearance.save();
}"
59004,"@Override public boolean checkAddressUsed(Long addressId){
  super.checkAddressUsed(addressId);
  if (addressId != null) {
    if (Invoice.all_().filter(""String_Node_Str"",addressId).fetchOne() != null)     return true;
  }
  return false;
}","@Override public boolean checkAddressUsed(Long addressId){
  super.checkAddressUsed(addressId);
  if (addressId != null) {
    if (Invoice.all().filter(""String_Node_Str"",addressId).fetchOne() != null)     return true;
  }
  return false;
}"
59005,"/** 
 * Fonction permettant de récupérer la liste des factures rejetées à passer en irrécouvrable d'une société
 * @param company Une société
 * @return
 */
public List<Invoice> getRejectInvoiceList(Company company){
  return Invoice.filter(""String_Node_Str"",IInvoice.TO_PASS_IN_IRRECOUVRABLE,company).fetch();
}","/** 
 * Fonction permettant de récupérer la liste des factures rejetées à passer en irrécouvrable d'une société
 * @param company Une société
 * @return
 */
public List<Invoice> getRejectInvoiceList(Company company){
  return (List<Invoice>)Invoice.filter(""String_Node_Str"",IInvoice.TO_PASS_IN_IRRECOUVRABLE,company).fetch();
}"
59006,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type avoir
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect7FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (moveLineReport.getCompany() != null) {
    companyCode=moveLineReport.getCompany().getCode();
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getCompany().getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<? extends Journal> journalList=Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moveList=Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        BigDecimal sumCredit=this.getSumCredit(""String_Node_Str"" + moveLineQueryStr,moveList);
        if (sumCredit.compareTo(BigDecimal.ZERO) == 1) {
          String exportNumber=this.getSaleExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList(moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=sumCredit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type avoir
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect7FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (moveLineReport.getCompany() != null) {
    companyCode=moveLineReport.getCompany().getCode();
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getCompany().getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=(List<Journal>)Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moveList=(List<Move>)Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        BigDecimal sumCredit=this.getSumCredit(""String_Node_Str"" + moveLineQueryStr,moveList);
        if (sumCredit.compareTo(BigDecimal.ZERO) == 1) {
          String exportNumber=this.getSaleExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList(moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=sumCredit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59007,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type trésorerie
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect8FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (company != null) {
    companyCode=moveLineReport.getCompany().getCode();
    moveQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moveList=Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        long moveLineListSize=MoveLine.filter(""String_Node_Str"" + moveLineQueryStr,moveList).count();
        if (moveLineListSize > 0) {
          String exportNumber=this.getTreasuryExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList(moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=""String_Node_Str"";
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type trésorerie
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect8FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (company != null) {
    companyCode=moveLineReport.getCompany().getCode();
    moveQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=(List<Journal>)Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moveList=(List<Move>)Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        long moveLineListSize=MoveLine.filter(""String_Node_Str"" + moveLineQueryStr,moveList).count();
        if (moveLineListSize > 0) {
          String exportNumber=this.getTreasuryExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList(moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=""String_Node_Str"";
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59008,"/** 
 * Méthode réalisant l'export SI - Agresso des fichiers détails
 * @param mlr
 * @param fileName
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") public void exportMoveLineAllTypeSelectFILE2(MoveLineReport moveLineReport,String fileName) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String companyCode=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  int typeSelect=moveLineReport.getTypeSelect();
  if (company != null) {
    companyCode=company.getCode();
    moveLineQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getJournal() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReportService.getJournalType(moveLineReport).getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (typeSelect != 8) {
    moveLineQueryStr+=String.format(""String_Node_Str"");
  }
  moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  Query queryDate=JPA.em().createQuery(""String_Node_Str"" + moveLineQueryStr + ""String_Node_Str"");
  List<LocalDate> dates=new ArrayList<LocalDate>();
  dates=queryDate.getResultList();
  LOG.debug(""String_Node_Str"",dates);
  List<String[]> allMoveLineData=new ArrayList<String[]>();
  for (  LocalDate localDate : dates) {
    Query queryExportAgressoRef=JPA.em().createQuery(""String_Node_Str"" + ""String_Node_Str"" + localDate.toString() + ""String_Node_Str""+ moveLineQueryStr);
    List<String> exportAgressoRefs=new ArrayList<String>();
    exportAgressoRefs=queryExportAgressoRef.getResultList();
    for (    String exportAgressoRef : exportAgressoRefs) {
      if (exportAgressoRef != null && !exportAgressoRef.isEmpty()) {
        int sequence=1;
        Query query=JPA.em().createQuery(""String_Node_Str"" + ""String_Node_Str"" + localDate.toString() + ""String_Node_Str""+ exportAgressoRef+ ""String_Node_Str""+ moveLineQueryStr+ ""String_Node_Str"");
        List<Long> accountIds=new ArrayList<Long>();
        accountIds=query.getResultList();
        LOG.debug(""String_Node_Str"",accountIds);
        for (        Long accountId : accountIds) {
          if (accountId != null) {
            String accountCode=Account.find(accountId).getCode();
            List<MoveLine> moveLines=MoveLine.filter(""String_Node_Str"" + localDate.toString() + ""String_Node_Str""+ exportAgressoRef+ ""String_Node_Str""+ moveLineQueryStr,accountId).fetch();
            LOG.debug(""String_Node_Str"",moveLines);
            if (moveLines.size() > 0) {
              List<MoveLine> moveLineList=this.consolidateMoveLineByAnalyticAxis(moveLines);
              List<MoveLine> sortMoveLineList=this.sortMoveLineByDebitCredit(moveLineList);
              for (              MoveLine moveLine3 : sortMoveLineList) {
                Journal journal=moveLine3.getMove().getJournal();
                LocalDate date=moveLine3.getDate();
                String items[]=null;
                if (typeSelect == 9) {
                  items=new String[13];
                }
 else {
                  items=new String[12];
                }
                items[0]=companyCode;
                items[1]=journal.getExportCode();
                items[2]=moveLine3.getMove().getExportNumber();
                items[3]=String.format(""String_Node_Str"",sequence);
                sequence++;
                items[4]=accountCode;
                BigDecimal totAmt=moveLine3.getCredit().subtract(moveLine3.getDebit());
                String moveLineSign=""String_Node_Str"";
                if (totAmt.compareTo(BigDecimal.ZERO) == -1) {
                  moveLineSign=""String_Node_Str"";
                  totAmt=totAmt.negate();
                }
                items[5]=moveLineSign;
                items[6]=totAmt.toString();
                String activeStr=""String_Node_Str"";
                String crbStr=""String_Node_Str"";
                String metiertr=""String_Node_Str"";
                String siteStr=""String_Node_Str"";
                for (                AnalyticAccount analyticAccount : moveLine3.getAnalyticAccountSet()) {
                  if (analyticAccount.getAnalyticAxis() != null && analyticAccount.getAnalyticAxis().getCode().equals(""String_Node_Str"")) {
                    activeStr=analyticAccount.getCode();
                  }
                  if (analyticAccount.getAnalyticAxis() != null && analyticAccount.getAnalyticAxis().getCode().equals(""String_Node_Str"")) {
                    crbStr=analyticAccount.getCode();
                  }
                  if (analyticAccount.getAnalyticAxis() != null && analyticAccount.getAnalyticAxis().getCode().equals(""String_Node_Str"")) {
                    metiertr=analyticAccount.getCode();
                  }
                  if (analyticAccount.getAnalyticAxis() != null && analyticAccount.getAnalyticAxis().getCode().equals(""String_Node_Str"")) {
                    siteStr=analyticAccount.getCode();
                  }
                }
                if (typeSelect == 9) {
                  items[7]=""String_Node_Str"";
                  items[8]=crbStr;
                  items[9]=siteStr;
                  items[10]=metiertr;
                  items[11]=activeStr;
                  items[12]=String.format(""String_Node_Str"",journal.getCode(),date.toString(""String_Node_Str""));
                }
 else {
                  items[7]=crbStr;
                  items[8]=siteStr;
                  items[9]=metiertr;
                  items[10]=activeStr;
                  items[11]=String.format(""String_Node_Str"",journal.getCode(),date.toString(""String_Node_Str""));
                }
                allMoveLineData.add(items);
              }
            }
          }
        }
      }
    }
  }
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveLineData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des fichiers détails
 * @param mlr
 * @param fileName
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") public void exportMoveLineAllTypeSelectFILE2(MoveLineReport moveLineReport,String fileName) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String companyCode=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  int typeSelect=moveLineReport.getTypeSelect();
  if (company != null) {
    companyCode=company.getCode();
    moveLineQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getJournal() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReportService.getJournalType(moveLineReport).getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (typeSelect != 8) {
    moveLineQueryStr+=String.format(""String_Node_Str"");
  }
  moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  Query queryDate=JPA.em().createQuery(""String_Node_Str"" + moveLineQueryStr + ""String_Node_Str"");
  List<LocalDate> dates=new ArrayList<LocalDate>();
  dates=queryDate.getResultList();
  LOG.debug(""String_Node_Str"",dates);
  List<String[]> allMoveLineData=new ArrayList<String[]>();
  for (  LocalDate localDate : dates) {
    Query queryExportAgressoRef=JPA.em().createQuery(""String_Node_Str"" + ""String_Node_Str"" + localDate.toString() + ""String_Node_Str""+ moveLineQueryStr);
    List<String> exportAgressoRefs=new ArrayList<String>();
    exportAgressoRefs=queryExportAgressoRef.getResultList();
    for (    String exportAgressoRef : exportAgressoRefs) {
      if (exportAgressoRef != null && !exportAgressoRef.isEmpty()) {
        int sequence=1;
        Query query=JPA.em().createQuery(""String_Node_Str"" + ""String_Node_Str"" + localDate.toString() + ""String_Node_Str""+ exportAgressoRef+ ""String_Node_Str""+ moveLineQueryStr+ ""String_Node_Str"");
        List<Long> accountIds=new ArrayList<Long>();
        accountIds=query.getResultList();
        LOG.debug(""String_Node_Str"",accountIds);
        for (        Long accountId : accountIds) {
          if (accountId != null) {
            String accountCode=Account.find(accountId).getCode();
            List<MoveLine> moveLines=(List<MoveLine>)MoveLine.filter(""String_Node_Str"" + localDate.toString() + ""String_Node_Str""+ exportAgressoRef+ ""String_Node_Str""+ moveLineQueryStr,accountId).fetch();
            LOG.debug(""String_Node_Str"",moveLines);
            if (moveLines.size() > 0) {
              List<MoveLine> moveLineList=this.consolidateMoveLineByAnalyticAxis(moveLines);
              List<MoveLine> sortMoveLineList=this.sortMoveLineByDebitCredit(moveLineList);
              for (              MoveLine moveLine3 : sortMoveLineList) {
                Journal journal=moveLine3.getMove().getJournal();
                LocalDate date=moveLine3.getDate();
                String items[]=null;
                if (typeSelect == 9) {
                  items=new String[13];
                }
 else {
                  items=new String[12];
                }
                items[0]=companyCode;
                items[1]=journal.getExportCode();
                items[2]=moveLine3.getMove().getExportNumber();
                items[3]=String.format(""String_Node_Str"",sequence);
                sequence++;
                items[4]=accountCode;
                BigDecimal totAmt=moveLine3.getCredit().subtract(moveLine3.getDebit());
                String moveLineSign=""String_Node_Str"";
                if (totAmt.compareTo(BigDecimal.ZERO) == -1) {
                  moveLineSign=""String_Node_Str"";
                  totAmt=totAmt.negate();
                }
                items[5]=moveLineSign;
                items[6]=totAmt.toString();
                String activeStr=""String_Node_Str"";
                String crbStr=""String_Node_Str"";
                String metiertr=""String_Node_Str"";
                String siteStr=""String_Node_Str"";
                for (                AnalyticAccount analyticAccount : moveLine3.getAnalyticAccountSet()) {
                  if (analyticAccount.getAnalyticAxis() != null && analyticAccount.getAnalyticAxis().getCode().equals(""String_Node_Str"")) {
                    activeStr=analyticAccount.getCode();
                  }
                  if (analyticAccount.getAnalyticAxis() != null && analyticAccount.getAnalyticAxis().getCode().equals(""String_Node_Str"")) {
                    crbStr=analyticAccount.getCode();
                  }
                  if (analyticAccount.getAnalyticAxis() != null && analyticAccount.getAnalyticAxis().getCode().equals(""String_Node_Str"")) {
                    metiertr=analyticAccount.getCode();
                  }
                  if (analyticAccount.getAnalyticAxis() != null && analyticAccount.getAnalyticAxis().getCode().equals(""String_Node_Str"")) {
                    siteStr=analyticAccount.getCode();
                  }
                }
                if (typeSelect == 9) {
                  items[7]=""String_Node_Str"";
                  items[8]=crbStr;
                  items[9]=siteStr;
                  items[10]=metiertr;
                  items[11]=activeStr;
                  items[12]=String.format(""String_Node_Str"",journal.getCode(),date.toString(""String_Node_Str""));
                }
 else {
                  items[7]=crbStr;
                  items[8]=siteStr;
                  items[9]=metiertr;
                  items[10]=activeStr;
                  items[11]=String.format(""String_Node_Str"",journal.getCode(),date.toString(""String_Node_Str""));
                }
                allMoveLineData.add(items);
              }
            }
          }
        }
      }
    }
  }
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveLineData);
}"
59009,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type achat
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect9FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (company != null) {
    companyCode=company.getCode();
    moveQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moveList=Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      int moveListSize=moveList.size();
      if (moveListSize > 0) {
        int i=0;
        for (        Move move : moveList) {
          List<MoveLine> moveLineList=MoveLine.filter(""String_Node_Str"" + moveLineQueryStr,moveList).fetch();
          if (moveLineList.size() > 0) {
            String exportNumber=this.getPurchaseExportNumber(company);
            String periodCode=move.getPeriod().getFromDate().toString(""String_Node_Str"");
            BigDecimal totalCredit=this.getSumCredit(moveLineList);
            String invoiceId=""String_Node_Str"";
            String dueDate=""String_Node_Str"";
            if (move.getInvoice() != null) {
              invoiceId=move.getInvoice().getInvoiceId();
              dueDate=move.getInvoice().getDueDate().toString();
            }
            MoveLine firstMoveLine=moveLineList.get(0);
            String items[]=new String[12];
            items[0]=companyCode;
            items[1]=journalCode;
            items[2]=exportNumber;
            items[3]=interfaceDate.toString(""String_Node_Str"");
            items[4]=""String_Node_Str"";
            items[5]=invoiceId;
            items[6]=dueDate;
            items[7]=firstMoveLine.getAccount().getCode();
            items[8]=totalCredit.toString();
            items[9]=reference;
            items[10]=dt.toString(""String_Node_Str"");
            items[11]=periodCode;
            allMoveData.add(items);
            this.updateMove(move,moveLineReport,interfaceDate,exportNumber);
            if (i % 10 == 0) {
              JPA.clear();
            }
            if (i++ % 100 == 0) {
              LOG.debug(""String_Node_Str"",i,moveListSize);
            }
          }
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type achat
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect9FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (company != null) {
    companyCode=company.getCode();
    moveQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=(List<Journal>)Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moveList=(List<Move>)Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      int moveListSize=moveList.size();
      if (moveListSize > 0) {
        int i=0;
        for (        Move move : moveList) {
          List<MoveLine> moveLineList=(List<MoveLine>)MoveLine.filter(""String_Node_Str"" + moveLineQueryStr,moveList).fetch();
          if (moveLineList.size() > 0) {
            String exportNumber=this.getPurchaseExportNumber(company);
            String periodCode=move.getPeriod().getFromDate().toString(""String_Node_Str"");
            BigDecimal totalCredit=this.getSumCredit(moveLineList);
            String invoiceId=""String_Node_Str"";
            String dueDate=""String_Node_Str"";
            if (move.getInvoice() != null) {
              invoiceId=move.getInvoice().getInvoiceId();
              dueDate=move.getInvoice().getDueDate().toString();
            }
            MoveLine firstMoveLine=moveLineList.get(0);
            String items[]=new String[12];
            items[0]=companyCode;
            items[1]=journalCode;
            items[2]=exportNumber;
            items[3]=interfaceDate.toString(""String_Node_Str"");
            items[4]=""String_Node_Str"";
            items[5]=invoiceId;
            items[6]=dueDate;
            items[7]=firstMoveLine.getAccount().getCode();
            items[8]=totalCredit.toString();
            items[9]=reference;
            items[10]=dt.toString(""String_Node_Str"");
            items[11]=periodCode;
            allMoveData.add(items);
            this.updateMove(move,moveLineReport,interfaceDate,exportNumber);
            if (i % 10 == 0) {
              JPA.clear();
            }
            if (i++ % 100 == 0) {
              LOG.debug(""String_Node_Str"",i,moveListSize);
            }
          }
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59010,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type vente
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect6FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (company != null) {
    companyCode=company.getCode();
    moveQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<? extends Journal> journalList=Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<? extends Move> moveList=Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        BigDecimal sumDebit=this.getSumDebit(""String_Node_Str"" + moveLineQueryStr,moveList);
        if (sumDebit.compareTo(BigDecimal.ZERO) == 1) {
          String exportNumber=this.getSaleExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList(moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=sumDebit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type vente
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect6FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (company != null) {
    companyCode=company.getCode();
    moveQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=(List<Journal>)Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<? extends Move> moveList=Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        BigDecimal sumDebit=this.getSumDebit(""String_Node_Str"" + moveLineQueryStr,moveList);
        if (sumDebit.compareTo(BigDecimal.ZERO) == 1) {
          String exportNumber=this.getSaleExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList((List<Move>)moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=sumDebit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59011,"public Move createMoveUseExcessPayment(Invoice invoice) throws AxelorException {
  Move move=null;
  Company company=invoice.getCompany();
  AccountConfig accountConfig=accountConfigService.getAccountConfig(company);
  List<MoveLine> creditMoveLineList=paymentService.getExcessPayment(invoice,accountConfigService.getCustomerAccount(accountConfig));
  if (creditMoveLineList != null && creditMoveLineList.size() != 0) {
    Partner partner=invoice.getPartner();
    Account account=invoice.getPartnerAccount();
    MoveLine invoiceCustomerMoveLine=this.getCustomerMoveLineByLoop(invoice);
    Journal journal=accountConfigService.getMiscOperationJournal(accountConfig);
    if (this.isSameAccount(creditMoveLineList,account)) {
      List<MoveLine> debitMoveLineList=new ArrayList<MoveLine>();
      debitMoveLineList.add(invoiceCustomerMoveLine);
      paymentService.useExcessPaymentOnMoveLines(debitMoveLineList,creditMoveLineList);
    }
 else {
      LOG.debug(""String_Node_Str"",new Object[]{invoice.getInvoiceId(),company.getName(),journal.getCode()});
      move=this.createMove(journal,company,null,partner,invoice.getInvoiceDate(),null);
      if (move != null) {
        BigDecimal totalCreditAmount=this.getTotalCreditAmount(creditMoveLineList);
        BigDecimal amount=totalCreditAmount.min(invoiceCustomerMoveLine.getDebit());
        MoveLine creditMoveLine=moveLineService.createMoveLine(move,partner,account,amount,false,false,toDay,1,null);
        move.getMoveLineList().add(creditMoveLine);
        paymentService.useExcessPaymentWithAmountConsolidated(creditMoveLineList,amount,move,2,partner,company,account,invoice.getInvoiceDate(),invoice.getDueDate());
        this.validateMove(move);
        Reconcile reconcile=reconcileService.createReconcile(invoiceCustomerMoveLine,creditMoveLine,amount);
        reconcileService.confirmReconcile(reconcile);
      }
    }
    invoice.setInTaxTotalRemaining(this.getInTaxTotalRemaining(invoice));
  }
  return move;
}","public Move createMoveUseExcessPayment(Invoice invoice) throws AxelorException {
  Move move=null;
  Company company=invoice.getCompany();
  AccountConfig accountConfig=accountConfigService.getAccountConfig(company);
  List<MoveLine> creditMoveLineList=(List<MoveLine>)paymentService.getExcessPayment(invoice,accountConfigService.getCustomerAccount(accountConfig));
  if (creditMoveLineList != null && creditMoveLineList.size() != 0) {
    Partner partner=invoice.getPartner();
    Account account=invoice.getPartnerAccount();
    MoveLine invoiceCustomerMoveLine=this.getCustomerMoveLineByLoop(invoice);
    Journal journal=accountConfigService.getMiscOperationJournal(accountConfig);
    if (this.isSameAccount(creditMoveLineList,account)) {
      List<MoveLine> debitMoveLineList=new ArrayList<MoveLine>();
      debitMoveLineList.add(invoiceCustomerMoveLine);
      paymentService.useExcessPaymentOnMoveLines(debitMoveLineList,creditMoveLineList);
    }
 else {
      LOG.debug(""String_Node_Str"",new Object[]{invoice.getInvoiceId(),company.getName(),journal.getCode()});
      move=this.createMove(journal,company,null,partner,invoice.getInvoiceDate(),null);
      if (move != null) {
        BigDecimal totalCreditAmount=this.getTotalCreditAmount(creditMoveLineList);
        BigDecimal amount=totalCreditAmount.min(invoiceCustomerMoveLine.getDebit());
        MoveLine creditMoveLine=moveLineService.createMoveLine(move,partner,account,amount,false,false,toDay,1,null);
        move.getMoveLineList().add(creditMoveLine);
        paymentService.useExcessPaymentWithAmountConsolidated(creditMoveLineList,amount,move,2,partner,company,account,invoice.getInvoiceDate(),invoice.getDueDate());
        this.validateMove(move);
        Reconcile reconcile=reconcileService.createReconcile(invoiceCustomerMoveLine,creditMoveLine,amount);
        reconcileService.confirmReconcile(reconcile);
      }
    }
    invoice.setInTaxTotalRemaining(this.getInTaxTotalRemaining(invoice));
  }
  return move;
}"
59012,"/** 
 * Méthode permettant d'employer les dûs sur l'avoir On récupère prioritairement les dûs (factures) selectionné sur l'avoir, puis les autres dûs du tiers 2 cas : - le compte des dûs est le même que celui de l'avoir : alors on lettre directement - le compte n'est pas le même : on créée une O.D. de passage sur le bon compte
 * @param invoice
 * @param company
 * @param useExcessPayment
 * @return
 * @throws AxelorException
 */
public Move createMoveUseInvoiceDue(Invoice invoice) throws AxelorException {
  Company company=invoice.getCompany();
  Account account=invoice.getPartnerAccount();
  Partner partner=invoice.getPartner();
  Move move=null;
  MoveLine invoiceCustomerMoveLine=this.getCustomerMoveLineByLoop(invoice);
  List<MoveLine> debitMoveLines=paymentService.getInvoiceDue(invoice,true);
  if (debitMoveLines != null && debitMoveLines.size() != 0) {
    if (this.isSameAccount(debitMoveLines,invoice.getPartnerAccount())) {
      List<MoveLine> creditMoveLineList=new ArrayList<MoveLine>();
      creditMoveLineList.add(invoiceCustomerMoveLine);
      paymentService.useExcessPaymentOnMoveLines(debitMoveLines,creditMoveLineList);
    }
 else {
      this.createMoveUseDebit(invoice,debitMoveLines,invoiceCustomerMoveLine);
    }
    reconcileService.balanceCredit(invoiceCustomerMoveLine,company,true);
    BigDecimal remainingPaidAmount=invoiceCustomerMoveLine.getAmountRemaining();
    if (remainingPaidAmount.compareTo(BigDecimal.ZERO) > 0) {
      this.createExcessMove(invoice,company,partner,account,remainingPaidAmount,invoiceCustomerMoveLine);
    }
    invoice.setInTaxTotalRemaining(this.getInTaxTotalRemaining(invoice));
  }
  return move;
}","/** 
 * Méthode permettant d'employer les dûs sur l'avoir On récupère prioritairement les dûs (factures) selectionné sur l'avoir, puis les autres dûs du tiers 2 cas : - le compte des dûs est le même que celui de l'avoir : alors on lettre directement - le compte n'est pas le même : on créée une O.D. de passage sur le bon compte
 * @param invoice
 * @param company
 * @param useExcessPayment
 * @return
 * @throws AxelorException
 */
public Move createMoveUseInvoiceDue(Invoice invoice) throws AxelorException {
  Company company=invoice.getCompany();
  Account account=invoice.getPartnerAccount();
  Partner partner=invoice.getPartner();
  Move move=null;
  MoveLine invoiceCustomerMoveLine=this.getCustomerMoveLineByLoop(invoice);
  List<MoveLine> debitMoveLines=(List<MoveLine>)paymentService.getInvoiceDue(invoice,true);
  if (debitMoveLines != null && debitMoveLines.size() != 0) {
    if (this.isSameAccount(debitMoveLines,invoice.getPartnerAccount())) {
      List<MoveLine> creditMoveLineList=new ArrayList<MoveLine>();
      creditMoveLineList.add(invoiceCustomerMoveLine);
      paymentService.useExcessPaymentOnMoveLines(debitMoveLines,creditMoveLineList);
    }
 else {
      this.createMoveUseDebit(invoice,debitMoveLines,invoiceCustomerMoveLine);
    }
    reconcileService.balanceCredit(invoiceCustomerMoveLine,company,true);
    BigDecimal remainingPaidAmount=invoiceCustomerMoveLine.getAmountRemaining();
    if (remainingPaidAmount.compareTo(BigDecimal.ZERO) > 0) {
      this.createExcessMove(invoice,company,partner,account,remainingPaidAmount,invoiceCustomerMoveLine);
    }
    invoice.setInTaxTotalRemaining(this.getInTaxTotalRemaining(invoice));
  }
  return move;
}"
59013,"/** 
 * Procédure permettant de récupérer l'objet de gestion déjà créé lors du prélèvement d'une autre facture
 * @param mlList La liste des lignes d'écriture de facture à prélever
 * @param ml Une ligne d'écriture de facture ) prélever
 * @return L'objet de gestion trouvé
 */
public DirectDebitManagement getDirectDebitManagement(List<MoveLine> moveLineList,MoveLine ml,long directDebitManagementMaxId){
  Partner partner=ml.getPartner();
  LOG.debug(""String_Node_Str"",partner.getFullName());
  List<MoveLine> moveLineListResult=MoveLine.filter(""String_Node_Str"",moveLineList,partner).fetch();
  for (  MoveLine moveLine : moveLineListResult) {
    Invoice invoice=cfonbExportService.getInvoice(moveLine);
    DirectDebitManagement directDebitManagement=invoice.getDirectDebitManagement();
    if (directDebitManagement != null && directDebitManagement.getId() > directDebitManagementMaxId) {
      LOG.debug(""String_Node_Str"",partner.getFullName());
      return invoice.getDirectDebitManagement();
    }
  }
  LOG.debug(""String_Node_Str"",partner.getFullName());
  return null;
}","/** 
 * Procédure permettant de récupérer l'objet de gestion déjà créé lors du prélèvement d'une autre facture
 * @param mlList La liste des lignes d'écriture de facture à prélever
 * @param ml Une ligne d'écriture de facture ) prélever
 * @return L'objet de gestion trouvé
 */
public DirectDebitManagement getDirectDebitManagement(List<MoveLine> moveLineList,MoveLine ml,long directDebitManagementMaxId){
  Partner partner=ml.getPartner();
  LOG.debug(""String_Node_Str"",partner.getFullName());
  List<MoveLine> moveLineListResult=(List<MoveLine>)MoveLine.filter(""String_Node_Str"",moveLineList,partner).fetch();
  for (  MoveLine moveLine : moveLineListResult) {
    Invoice invoice=cfonbExportService.getInvoice(moveLine);
    DirectDebitManagement directDebitManagement=invoice.getDirectDebitManagement();
    if (directDebitManagement != null && directDebitManagement.getId() > directDebitManagementMaxId) {
      LOG.debug(""String_Node_Str"",partner.getFullName());
      return invoice.getDirectDebitManagement();
    }
  }
  LOG.debug(""String_Node_Str"",partner.getFullName());
  return null;
}"
59014,"/** 
 * Methode permettant de récupérer la liste des échéances à prélever en fonction de la société et de la date de prélèvement
 * @param company Une société
 * @param debitDate Une date de prélèvement
 * @return
 */
public List<PaymentScheduleLine> getPaymentScheduleLineToDebit(AccountingBatch accountingBatch){
  Company company=accountingBatch.getCompany();
  LocalDate debitDate=accountingBatch.getDebitDate();
  Currency currency=accountingBatch.getCurrency();
  PaymentMode paymentMode=company.getAccountConfig().getDirectDebitPaymentMode();
  List<PaymentScheduleLine> paymentScheduleLineList=PaymentScheduleLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",company,debitDate,currency,paymentMode).fetch();
  if (paymentScheduleLineList.size() < 50) {
    LOG.debug(""String_Node_Str"",this.toStringPaymentScheduleLineList(paymentScheduleLineList));
  }
 else {
    LOG.debug(""String_Node_Str"",paymentScheduleLineList.size());
  }
  return paymentScheduleLineList;
}","/** 
 * Methode permettant de récupérer la liste des échéances à prélever en fonction de la société et de la date de prélèvement
 * @param company Une société
 * @param debitDate Une date de prélèvement
 * @return
 */
public List<PaymentScheduleLine> getPaymentScheduleLineToDebit(AccountingBatch accountingBatch){
  Company company=accountingBatch.getCompany();
  LocalDate debitDate=accountingBatch.getDebitDate();
  Currency currency=accountingBatch.getCurrency();
  PaymentMode paymentMode=company.getAccountConfig().getDirectDebitPaymentMode();
  List<PaymentScheduleLine> paymentScheduleLineList=(List<PaymentScheduleLine>)PaymentScheduleLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",company,debitDate,currency,paymentMode).fetch();
  if (paymentScheduleLineList.size() < 50) {
    LOG.debug(""String_Node_Str"",this.toStringPaymentScheduleLineList(paymentScheduleLineList));
  }
 else {
    LOG.debug(""String_Node_Str"",paymentScheduleLineList.size());
  }
  return paymentScheduleLineList;
}"
59015,"/** 
 * Méthode permettant de récupérer les factures d'échéance mensu grand compte d'un échéancier
 * @param paymentSchedule Un échéancier
 * @return
 */
public List<MoveLine> getInvoiceMoveLineListToReconcile(PaymentSchedule paymentSchedule){
  return MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",IMove.VALIDATED_MOVE,true,IInvoice.CLIENT_SALE,paymentSchedule).fetch();
}","/** 
 * Méthode permettant de récupérer les factures d'échéance mensu grand compte d'un échéancier
 * @param paymentSchedule Un échéancier
 * @return
 */
public List<MoveLine> getInvoiceMoveLineListToReconcile(PaymentSchedule paymentSchedule){
  return (List<MoveLine>)MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",IMove.VALIDATED_MOVE,true,IInvoice.CLIENT_SALE,paymentSchedule).fetch();
}"
59016,"public List<MoveLine> getInvoiceToExport(Company company,LocalDate scheduleDate,Currency currency){
  List<MoveLine> moveLineInvoiceList=new ArrayList<MoveLine>();
  PaymentMode paymentMode=company.getAccountConfig().getDirectDebitPaymentMode();
  List<MoveLine> moveLineList=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",IMove.VALIDATED_MOVE,company,true,paymentMode,currency).fetch();
  for (  MoveLine moveLine : moveLineList) {
    if (!this.isDebitBlocking(moveLine.getMove().getInvoice())) {
      moveLineInvoiceList.add(moveLine);
    }
  }
  List<Invoice> invoiceRejectList=Invoice.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",paymentMode,company,IMove.VALIDATED_MOVE,currency).fetch();
  for (  Invoice invoice : invoiceRejectList) {
    if (!this.isDebitBlocking(invoice)) {
      moveLineInvoiceList.add(invoice.getRejectMoveLine());
    }
  }
  return moveLineInvoiceList;
}","public List<MoveLine> getInvoiceToExport(Company company,LocalDate scheduleDate,Currency currency){
  List<MoveLine> moveLineInvoiceList=new ArrayList<MoveLine>();
  PaymentMode paymentMode=company.getAccountConfig().getDirectDebitPaymentMode();
  List<MoveLine> moveLineList=(List<MoveLine>)MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",IMove.VALIDATED_MOVE,company,true,paymentMode,currency).fetch();
  for (  MoveLine moveLine : moveLineList) {
    if (!this.isDebitBlocking(moveLine.getMove().getInvoice())) {
      moveLineInvoiceList.add(moveLine);
    }
  }
  List<Invoice> invoiceRejectList=(List<Invoice>)Invoice.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",paymentMode,company,IMove.VALIDATED_MOVE,currency).fetch();
  for (  Invoice invoice : invoiceRejectList) {
    if (!this.isDebitBlocking(invoice)) {
      moveLineInvoiceList.add(invoice.getRejectMoveLine());
    }
  }
  return moveLineInvoiceList;
}"
59017,"@Override public void process(){
  AccountingBatch accountingBatch=batch.getAccountingBatch();
  Company company=accountingBatch.getCompany();
  boolean updateCustAccountOk=accountingBatch.getUpdateCustAccountOk();
  boolean updateDueCustAccountOk=accountingBatch.getUpdateDueCustAccountOk();
  boolean updateDueReminderCustAccountOk=accountingBatch.getUpdateDueReminderCustAccountOk();
  List<AccountingSituation> accountingSituationList=AccountingSituation.all().filter(""String_Node_Str"",company).fetch();
  int i=0;
  JPA.clear();
  for (  AccountingSituation accountingSituation : accountingSituationList) {
    try {
      accountingSituation=accountCustomerService.updateAccountingSituationCustomerAccount(AccountingSituation.find(accountingSituation.getId()),updateCustAccountOk,updateDueCustAccountOk,updateDueReminderCustAccountOk);
      if (accountingSituation != null) {
        this.updateAccountingSituation(accountingSituation);
        i++;
      }
    }
 catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",AccountingSituation.find(accountingSituation.getId()).getName()),e),IException.ACCOUNT_CUSTOMER,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",AccountingSituation.find(accountingSituation.getId()).getName());
    }
 finally {
      if (i % 1 == 0) {
        JPA.clear();
      }
    }
  }
}","@Override public void process(){
  AccountingBatch accountingBatch=batch.getAccountingBatch();
  Company company=accountingBatch.getCompany();
  boolean updateCustAccountOk=accountingBatch.getUpdateCustAccountOk();
  boolean updateDueCustAccountOk=accountingBatch.getUpdateDueCustAccountOk();
  boolean updateDueReminderCustAccountOk=accountingBatch.getUpdateDueReminderCustAccountOk();
  List<AccountingSituation> accountingSituationList=(List<AccountingSituation>)AccountingSituation.all().filter(""String_Node_Str"",company).fetch();
  int i=0;
  JPA.clear();
  for (  AccountingSituation accountingSituation : accountingSituationList) {
    try {
      accountingSituation=accountCustomerService.updateAccountingSituationCustomerAccount(AccountingSituation.find(accountingSituation.getId()),updateCustAccountOk,updateDueCustAccountOk,updateDueReminderCustAccountOk);
      if (accountingSituation != null) {
        this.updateAccountingSituation(accountingSituation);
        i++;
      }
    }
 catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",AccountingSituation.find(accountingSituation.getId()).getName()),e),IException.ACCOUNT_CUSTOMER,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",AccountingSituation.find(accountingSituation.getId()).getName());
    }
 finally {
      if (i % 1 == 0) {
        JPA.clear();
      }
    }
  }
}"
59018,"public String updateAccountingSituationMarked(Company company){
  int anomaly=0;
  List<AccountingSituation> accountingSituationList=null;
  if (company != null) {
    accountingSituationList=AccountingSituation.all().filter(""String_Node_Str"",company).fetch();
  }
 else {
    accountingSituationList=AccountingSituation.all().filter(""String_Node_Str"").fetch();
  }
  int i=0;
  JPA.clear();
  for (  AccountingSituation accountingSituation : accountingSituationList) {
    try {
      accountingSituation=accountCustomerService.updateAccountingSituationCustomerAccount(AccountingSituation.find(accountingSituation.getId()),true,true,false);
      if (accountingSituation != null) {
        i++;
      }
    }
 catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",AccountingSituation.find(accountingSituation.getId()).getName()),e),IException.ACCOUNT_CUSTOMER,batch.getId());
      anomaly++;
      LOG.error(""String_Node_Str"",AccountingSituation.find(accountingSituation.getId()));
    }
 finally {
      if (i % 5 == 0) {
        JPA.clear();
      }
    }
  }
  if (anomaly != 0) {
    return ""String_Node_Str"" + anomaly + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + i + ""String_Node_Str"";
  }
}","public String updateAccountingSituationMarked(Company company){
  int anomaly=0;
  List<AccountingSituation> accountingSituationList=null;
  if (company != null) {
    accountingSituationList=(List<AccountingSituation>)AccountingSituation.all().filter(""String_Node_Str"",company).fetch();
  }
 else {
    accountingSituationList=(List<AccountingSituation>)AccountingSituation.all().filter(""String_Node_Str"").fetch();
  }
  int i=0;
  JPA.clear();
  for (  AccountingSituation accountingSituation : accountingSituationList) {
    try {
      accountingSituation=accountCustomerService.updateAccountingSituationCustomerAccount(AccountingSituation.find(accountingSituation.getId()),true,true,false);
      if (accountingSituation != null) {
        i++;
      }
    }
 catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",AccountingSituation.find(accountingSituation.getId()).getName()),e),IException.ACCOUNT_CUSTOMER,batch.getId());
      anomaly++;
      LOG.error(""String_Node_Str"",AccountingSituation.find(accountingSituation.getId()));
    }
 finally {
      if (i % 5 == 0) {
        JPA.clear();
      }
    }
  }
  if (anomaly != 0) {
    return ""String_Node_Str"" + anomaly + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + i + ""String_Node_Str"";
  }
}"
59019,"@Override protected void process(){
  if (!stop) {
    Company company=batch.getAccountingBatch().getCompany();
    AccountConfig accountConfig=company.getAccountConfig();
    Account doubtfulCustomerAccount=accountConfig.getDoubtfulCustomerAccount();
    String sixMonthDebtPassReason=accountConfig.getSixMonthDebtPassReason();
    String threeMonthDebtPassReason=accountConfig.getThreeMonthDebtPassReason();
    List<Move> moveList=doubtfulCustomerService.getMove(0,doubtfulCustomerAccount,company);
    LOG.debug(""String_Node_Str"",moveList.size());
    this.createDoubtFulCustomerMove(moveList,doubtfulCustomerAccount,sixMonthDebtPassReason);
    moveList=doubtfulCustomerService.getMove(1,doubtfulCustomerAccount,company);
    LOG.debug(""String_Node_Str"",moveList.size());
    this.createDoubtFulCustomerMove(moveList,doubtfulCustomerAccount,threeMonthDebtPassReason);
    List<MoveLine> moveLineList=doubtfulCustomerService.getRejectMoveLine(0,doubtfulCustomerAccount,company);
    LOG.debug(""String_Node_Str"",moveLineList.size());
    this.createDoubtFulCustomerRejectMove(moveLineList,doubtfulCustomerAccount,sixMonthDebtPassReason);
    moveLineList=doubtfulCustomerService.getRejectMoveLine(1,doubtfulCustomerAccount,company);
    LOG.debug(""String_Node_Str"",moveLineList.size());
    this.createDoubtFulCustomerRejectMove(moveLineList,doubtfulCustomerAccount,threeMonthDebtPassReason);
    updateCustomerAccountLog+=batchAccountCustomer.updateAccountingSituationMarked(Company.find(company.getId()));
  }
}","@Override protected void process(){
  if (!stop) {
    Company company=batch.getAccountingBatch().getCompany();
    AccountConfig accountConfig=company.getAccountConfig();
    Account doubtfulCustomerAccount=accountConfig.getDoubtfulCustomerAccount();
    String sixMonthDebtPassReason=accountConfig.getSixMonthDebtPassReason();
    String threeMonthDebtPassReason=accountConfig.getThreeMonthDebtPassReason();
    List<Move> moveList=doubtfulCustomerService.getMove(0,doubtfulCustomerAccount,company);
    LOG.debug(""String_Node_Str"",moveList.size());
    this.createDoubtFulCustomerMove(moveList,doubtfulCustomerAccount,sixMonthDebtPassReason);
    moveList=doubtfulCustomerService.getMove(1,doubtfulCustomerAccount,company);
    LOG.debug(""String_Node_Str"",moveList.size());
    this.createDoubtFulCustomerMove(moveList,doubtfulCustomerAccount,threeMonthDebtPassReason);
    List<MoveLine> moveLineList=(List<MoveLine>)doubtfulCustomerService.getRejectMoveLine(0,doubtfulCustomerAccount,company);
    LOG.debug(""String_Node_Str"",moveLineList.size());
    this.createDoubtFulCustomerRejectMove(moveLineList,doubtfulCustomerAccount,sixMonthDebtPassReason);
    moveLineList=(List<MoveLine>)doubtfulCustomerService.getRejectMoveLine(1,doubtfulCustomerAccount,company);
    LOG.debug(""String_Node_Str"",moveLineList.size());
    this.createDoubtFulCustomerRejectMove(moveLineList,doubtfulCustomerAccount,threeMonthDebtPassReason);
    updateCustomerAccountLog+=batchAccountCustomer.updateAccountingSituationMarked(Company.find(company.getId()));
  }
}"
59020,"protected void createInvoiceCfonbFile(Batch batchToExport){
  try {
    AccountingBatch accountingBatch=Batch.find(batch.getId()).getAccountingBatch();
    cfonbExportService.exportInvoiceCFONB(batch.getStartDate(),accountingBatch.getDebitDate(),Invoice.filter(""String_Node_Str"",batchToExport).fetch(),accountingBatch.getCompany(),accountingBatch.getBankDetails());
  }
 catch (  AxelorException e) {
    TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",batch.getId()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
  }
catch (  Exception e) {
    TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    LOG.error(""String_Node_Str"",batch.getId());
  }
}","protected void createInvoiceCfonbFile(Batch batchToExport){
  try {
    AccountingBatch accountingBatch=Batch.find(batch.getId()).getAccountingBatch();
    cfonbExportService.exportInvoiceCFONB(batch.getStartDate(),accountingBatch.getDebitDate(),(List<Invoice>)Invoice.filter(""String_Node_Str"",batchToExport).fetch(),accountingBatch.getCompany(),accountingBatch.getBankDetails());
  }
 catch (  AxelorException e) {
    TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",batch.getId()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
  }
catch (  Exception e) {
    TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    LOG.error(""String_Node_Str"",batch.getId());
  }
}"
59021,"protected void createMonthlyCfonbFile(Batch batchToExport){
  try {
    AccountingBatch accountingBatch=Batch.find(batch.getId()).getAccountingBatch();
    cfonbExportService.exportPaymentScheduleCFONB(batch.getStartDate(),accountingBatch.getDebitDate(),PaymentScheduleLine.filter(""String_Node_Str"",batchToExport).fetch(),accountingBatch.getCompany(),accountingBatch.getBankDetails());
  }
 catch (  AxelorException e) {
    TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",batch.getId()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
  }
catch (  Exception e) {
    TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    LOG.error(""String_Node_Str"",batch.getId());
  }
}","protected void createMonthlyCfonbFile(Batch batchToExport){
  try {
    AccountingBatch accountingBatch=Batch.find(batch.getId()).getAccountingBatch();
    cfonbExportService.exportPaymentScheduleCFONB(batch.getStartDate(),accountingBatch.getDebitDate(),(List<PaymentScheduleLine>)PaymentScheduleLine.filter(""String_Node_Str"",batchToExport).fetch(),accountingBatch.getCompany(),accountingBatch.getBankDetails());
  }
 catch (  AxelorException e) {
    TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",batch.getId()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
  }
catch (  Exception e) {
    TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    LOG.error(""String_Node_Str"",batch.getId());
  }
}"
59022,"public void runReimbursementExportProcess(Company company){
  int i=0;
  List<Reimbursement> reimbursementToCancelList=Reimbursement.filter(""String_Node_Str"",company).fetch();
  Status statusCan=Status.findByCode(""String_Node_Str"");
  for (  Reimbursement reimbursement : reimbursementToCancelList) {
    reimbursement.setStatus(statusCan);
  }
  List<Reimbursement> reimbursementList=Reimbursement.filter(""String_Node_Str"",company).fetch();
  List<Reimbursement> reimbursementToExport=new ArrayList<Reimbursement>();
  for (  Reimbursement reimbursement : reimbursementList) {
    try {
      reimbursement=Reimbursement.find(reimbursement.getId());
      if (reimbursementExportService.canBeReimbursed(reimbursement.getPartner(),reimbursement.getCompany())) {
        reimbursementExportService.reimburse(reimbursement,company);
        updateReimbursement(Reimbursement.find(reimbursement.getId()));
        reimbursementToExport.add(reimbursement);
        this.totalAmount=this.totalAmount.add(Reimbursement.find(reimbursement.getId()).getAmountReimbursed());
        i++;
      }
    }
 catch (    AxelorException e) {
      TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",Reimbursement.find(reimbursement.getId()).getRef()),e,e.getcategory()),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
    }
catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",Reimbursement.find(reimbursement.getId()).getRef()),e),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",Reimbursement.find(reimbursement.getId()).getRef());
    }
 finally {
      if (i % 10 == 0) {
        JPA.clear();
      }
    }
  }
  if (reimbursementToExport != null && reimbursementToExport.size() != 0) {
    try {
      reimbursementExportService.exportSepa(Company.find(company.getId()),Batch.find(batch.getId()).getStartDate(),reimbursementToExport,Batch.find(batch.getId()).getAccountingBatch().getBankDetails());
    }
 catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",batch.getId());
    }
    try {
      cfonbExportService.exportCFONB(Company.find(company.getId()),Batch.find(batch.getId()).getStartDate(),reimbursementToExport,Batch.find(batch.getId()).getAccountingBatch().getBankDetails());
    }
 catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",batch.getId());
    }
  }
}","public void runReimbursementExportProcess(Company company){
  int i=0;
  List<Reimbursement> reimbursementToCancelList=(List<Reimbursement>)Reimbursement.filter(""String_Node_Str"",company).fetch();
  Status statusCan=Status.findByCode(""String_Node_Str"");
  for (  Reimbursement reimbursement : reimbursementToCancelList) {
    reimbursement.setStatus(statusCan);
  }
  List<Reimbursement> reimbursementList=(List<Reimbursement>)Reimbursement.filter(""String_Node_Str"",company).fetch();
  List<Reimbursement> reimbursementToExport=new ArrayList<Reimbursement>();
  for (  Reimbursement reimbursement : reimbursementList) {
    try {
      reimbursement=Reimbursement.find(reimbursement.getId());
      if (reimbursementExportService.canBeReimbursed(reimbursement.getPartner(),reimbursement.getCompany())) {
        reimbursementExportService.reimburse(reimbursement,company);
        updateReimbursement(Reimbursement.find(reimbursement.getId()));
        reimbursementToExport.add(reimbursement);
        this.totalAmount=this.totalAmount.add(Reimbursement.find(reimbursement.getId()).getAmountReimbursed());
        i++;
      }
    }
 catch (    AxelorException e) {
      TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",Reimbursement.find(reimbursement.getId()).getRef()),e,e.getcategory()),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
    }
catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",Reimbursement.find(reimbursement.getId()).getRef()),e),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",Reimbursement.find(reimbursement.getId()).getRef());
    }
 finally {
      if (i % 10 == 0) {
        JPA.clear();
      }
    }
  }
  if (reimbursementToExport != null && reimbursementToExport.size() != 0) {
    try {
      reimbursementExportService.exportSepa(Company.find(company.getId()),Batch.find(batch.getId()).getStartDate(),reimbursementToExport,Batch.find(batch.getId()).getAccountingBatch().getBankDetails());
    }
 catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",batch.getId());
    }
    try {
      cfonbExportService.exportCFONB(Company.find(company.getId()),Batch.find(batch.getId()).getStartDate(),reimbursementToExport,Batch.find(batch.getId()).getAccountingBatch().getBankDetails());
    }
 catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",batch.getId());
    }
  }
}"
59023,"public void runCreateReimbursementExport(Company company){
  List<Reimbursement> reimbursementList=Reimbursement.filter(""String_Node_Str"",company).fetch();
  List<Partner> partnerList=Partner.filter(""String_Node_Str"",company).fetch();
  int i=0;
  for (  Reimbursement reimbursement : reimbursementList) {
    LOG.debug(""String_Node_Str"",reimbursement.getRef());
    updateReimbursement(Reimbursement.find(reimbursement.getId()));
  }
  for (  Partner partner : partnerList) {
    try {
      partner=Partner.find(partner.getId());
      LOG.debug(""String_Node_Str"",partner.getName());
      if (reimbursementExportService.canBeReimbursed(partner,Company.find(company.getId()))) {
        List<MoveLine> moveLineList=MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",IMove.VALIDATED_MOVE,Partner.find(partner.getId()),Company.find(company.getId()),IAccount.NULL).fetch();
        LOG.debug(""String_Node_Str"",moveLineList);
        if (moveLineList != null && moveLineList.size() != 0) {
          Reimbursement reimbursement=reimbursementExportService.runCreateReimbursement(moveLineList,Company.find(company.getId()),Partner.find(partner.getId()));
          if (reimbursement != null) {
            updateReimbursement(Reimbursement.find(reimbursement.getId()));
            this.totalAmount=this.totalAmount.add(Reimbursement.find(reimbursement.getId()).getAmountToReimburse());
            i++;
          }
        }
      }
    }
 catch (    AxelorException e) {
      TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",Partner.find(partner.getId()).getName()),e,e.getcategory()),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
    }
catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",Partner.find(partner.getId()).getName()),e),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",Partner.find(partner.getId()).getName());
    }
 finally {
      if (i % 10 == 0) {
        JPA.clear();
      }
    }
  }
}","public void runCreateReimbursementExport(Company company){
  List<Reimbursement> reimbursementList=(List<Reimbursement>)Reimbursement.filter(""String_Node_Str"",company).fetch();
  List<Partner> partnerList=(List<Partner>)Partner.filter(""String_Node_Str"",company).fetch();
  int i=0;
  for (  Reimbursement reimbursement : reimbursementList) {
    LOG.debug(""String_Node_Str"",reimbursement.getRef());
    updateReimbursement(Reimbursement.find(reimbursement.getId()));
  }
  for (  Partner partner : partnerList) {
    try {
      partner=Partner.find(partner.getId());
      LOG.debug(""String_Node_Str"",partner.getName());
      if (reimbursementExportService.canBeReimbursed(partner,Company.find(company.getId()))) {
        List<MoveLine> moveLineList=(List<MoveLine>)MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",IMove.VALIDATED_MOVE,Partner.find(partner.getId()),Company.find(company.getId()),IAccount.NULL).fetch();
        LOG.debug(""String_Node_Str"",moveLineList);
        if (moveLineList != null && moveLineList.size() != 0) {
          Reimbursement reimbursement=reimbursementExportService.runCreateReimbursement(moveLineList,Company.find(company.getId()),Partner.find(partner.getId()));
          if (reimbursement != null) {
            updateReimbursement(Reimbursement.find(reimbursement.getId()));
            this.totalAmount=this.totalAmount.add(Reimbursement.find(reimbursement.getId()).getAmountToReimburse());
            i++;
          }
        }
      }
    }
 catch (    AxelorException e) {
      TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",Partner.find(partner.getId()).getName()),e,e.getcategory()),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
    }
catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",Partner.find(partner.getId()).getName()),e),IException.REIMBURSEMENT,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",Partner.find(partner.getId()).getName());
    }
 finally {
      if (i % 10 == 0) {
        JPA.clear();
      }
    }
  }
}"
59024,"public void generateMail(){
  List<Mail> mailList=Mail.all().filter(""String_Node_Str"").fetch();
  LOG.debug(""String_Node_Str"",mailList.size());
  for (  Mail mail : mailList) {
    try {
      mailService.generatePdfMail(Mail.find(mail.getId()));
      mailDone++;
    }
 catch (    AxelorException e) {
      TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",mail.getName()),e,e.getcategory()),IException.REMINDER,batch.getId());
      mailAnomaly++;
    }
catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",mail.getName()),e),IException.REMINDER,batch.getId());
      mailAnomaly++;
      LOG.error(""String_Node_Str"",mail.getName());
    }
  }
}","public void generateMail(){
  List<Mail> mailList=(List<Mail>)Mail.all().filter(""String_Node_Str"").fetch();
  LOG.debug(""String_Node_Str"",mailList.size());
  for (  Mail mail : mailList) {
    try {
      mailService.generatePdfMail(Mail.find(mail.getId()));
      mailDone++;
    }
 catch (    AxelorException e) {
      TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",mail.getName()),e,e.getcategory()),IException.REMINDER,batch.getId());
      mailAnomaly++;
    }
catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",mail.getName()),e),IException.REMINDER,batch.getId());
      mailAnomaly++;
      LOG.error(""String_Node_Str"",mail.getName());
    }
  }
}"
59025,"public void reminderPartner(){
  int i=0;
  List<Partner> partnerList=Partner.all().filter(""String_Node_Str"",batch.getAccountingBatch().getCompany()).fetch();
  for (  Partner partner : partnerList) {
    try {
      boolean remindedOk=reminderService.reminderGenerate(Partner.find(partner.getId()),batch.getAccountingBatch().getCompany());
      if (remindedOk == true) {
        updatePartner(partner);
        i++;
      }
      LOG.debug(""String_Node_Str"",partner.getName());
    }
 catch (    AxelorException e) {
      TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",partner.getName()),e,e.getcategory()),IException.REMINDER,batch.getId());
      incrementAnomaly();
    }
catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",partner.getName()),e),IException.REMINDER,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",partner.getName());
    }
 finally {
      if (i % 10 == 0) {
        JPA.clear();
      }
    }
  }
}","public void reminderPartner(){
  int i=0;
  List<Partner> partnerList=(List<Partner>)Partner.all().filter(""String_Node_Str"",batch.getAccountingBatch().getCompany()).fetch();
  for (  Partner partner : partnerList) {
    try {
      boolean remindedOk=reminderService.reminderGenerate(Partner.find(partner.getId()),batch.getAccountingBatch().getCompany());
      if (remindedOk == true) {
        updatePartner(partner);
        i++;
      }
      LOG.debug(""String_Node_Str"",partner.getName());
    }
 catch (    AxelorException e) {
      TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",partner.getName()),e,e.getcategory()),IException.REMINDER,batch.getId());
      incrementAnomaly();
    }
catch (    Exception e) {
      TraceBackService.trace(new Exception(String.format(""String_Node_Str"",partner.getName()),e),IException.REMINDER,batch.getId());
      incrementAnomaly();
      LOG.error(""String_Node_Str"",partner.getName());
    }
 finally {
      if (i % 10 == 0) {
        JPA.clear();
      }
    }
  }
}"
59026,"public List<BillOfMaterial> getBillOfMaterialList(Product product){
  return BillOfMaterial.filter(""String_Node_Str"",product).fetch();
}","public List<BillOfMaterial> getBillOfMaterialList(Product product){
  return (List<BillOfMaterial>)BillOfMaterial.filter(""String_Node_Str"",product).fetch();
}"
59027,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void start(ManufOrder manufOrder){
  if (manufOrder.getOperationOrderList() != null) {
    OperationOrder operationOrderPriority=OperationOrder.filter(""String_Node_Str"",manufOrder).order(""String_Node_Str"").fetchOne();
    List<OperationOrder> operationOrderList=OperationOrder.filter(""String_Node_Str"",manufOrder,operationOrderPriority.getPriority()).fetch();
    for (    OperationOrder operationOrder : operationOrderList) {
      operationOrderWorkflowService.start(operationOrder);
    }
  }
  manufOrder.setStatusSelect(IManufOrder.STATUS_IN_PROGRESS);
  manufOrder.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void start(ManufOrder manufOrder){
  if (manufOrder.getOperationOrderList() != null) {
    OperationOrder operationOrderPriority=OperationOrder.filter(""String_Node_Str"",manufOrder).order(""String_Node_Str"").fetchOne();
    List<OperationOrder> operationOrderList=(List<OperationOrder>)OperationOrder.filter(""String_Node_Str"",manufOrder,operationOrderPriority.getPriority()).fetch();
    for (    OperationOrder operationOrder : operationOrderList) {
      operationOrderWorkflowService.start(operationOrder);
    }
  }
  manufOrder.setStatusSelect(IManufOrder.STATUS_IN_PROGRESS);
  manufOrder.save();
}"
59028,"public List<TimesheetLine> createTimesheetLines(Timesheet timesheet,Task task) throws AxelorException {
  List<TimesheetLine> timesheetLineList=Lists.newArrayList();
  List<SpentTime> spentTimeList=SpentTime.all().filter(""String_Node_Str"",timesheet.getUser(),task).fetch();
  for (  SpentTime spentTime : spentTimeList) {
    timesheetLineList.add(this.createTimesheetLine(timesheet,task,spentTime));
    spentTime.setTimesheetImputed(true);
    spentTime.save();
  }
  return timesheetLineList;
}","public List<TimesheetLine> createTimesheetLines(Timesheet timesheet,Task task) throws AxelorException {
  List<TimesheetLine> timesheetLineList=Lists.newArrayList();
  List<SpentTime> spentTimeList=(List<SpentTime>)SpentTime.all().filter(""String_Node_Str"",timesheet.getUser(),task).fetch();
  for (  SpentTime spentTime : spentTimeList) {
    timesheetLineList.add(this.createTimesheetLine(timesheet,task,spentTime));
    spentTime.setTimesheetImputed(true);
    spentTime.save();
  }
  return timesheetLineList;
}"
59029,"public List<TimesheetLine> getTimesheetLineToInvoice(Task task){
  return TimesheetLine.all().filter(""String_Node_Str"",task.getId()).fetch();
}","public List<TimesheetLine> getTimesheetLineToInvoice(Task task){
  return (List<TimesheetLine>)TimesheetLine.all().filter(""String_Node_Str"",task.getId()).fetch();
}"
59030,"public List<ExpenseLine> getExpenseLineToInvoice(Task task){
  return ExpenseLine.all().filter(""String_Node_Str"",task.getId()).fetch();
}","public List<ExpenseLine> getExpenseLineToInvoice(Task task){
  return (List<ExpenseLine>)ExpenseLine.all().filter(""String_Node_Str"",task.getId()).fetch();
}"
59031,"@Transactional void validatePurchaseOrder(Long poId){
  try {
    PurchaseOrder purchaseOrder=PurchaseOrder.find(poId);
    purchaseOrderServiceSupplychainImpl.computePurchaseOrder(purchaseOrder);
    if (purchaseOrder.getStatusSelect() == 4 || purchaseOrder.getStatusSelect() == 5 && purchaseOrder.getLocation() == null) {
      purchaseOrderServiceSupplychainImpl.createStocksMoves(purchaseOrder);
      StockMove stockMove=StockMove.all_().filter(""String_Node_Str"",purchaseOrder.getId()).fetchOne();
      if (stockMove != null) {
        stockMoveService.copyQtyToRealQty(stockMove);
        stockMoveService.realize(stockMove);
        stockMove.setRealDate(purchaseOrder.getDeliveryDate());
      }
      purchaseOrder.setValidationDate(purchaseOrder.getOrderDate());
      purchaseOrder.setValidatedByUser(userSerivce.getUser());
      purchaseOrder.setSupplierPartner(purchaseOrderServiceSupplychainImpl.validateSupplier(purchaseOrder));
      Invoice invoice=purchaseOrderInvoiceService.generateInvoice(purchaseOrder);
      invoice.setInvoiceDate(purchaseOrder.getValidationDate());
      invoiceService.compute(invoice);
      invoiceService.validate(invoice);
      invoiceService.ventilate(invoice);
    }
    purchaseOrder.save();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Transactional void validatePurchaseOrder(Long poId){
  try {
    PurchaseOrder purchaseOrder=PurchaseOrder.find(poId);
    purchaseOrderServiceSupplychainImpl.computePurchaseOrder(purchaseOrder);
    if (purchaseOrder.getStatusSelect() == 4 || purchaseOrder.getStatusSelect() == 5 && purchaseOrder.getLocation() == null) {
      purchaseOrderServiceSupplychainImpl.createStocksMoves(purchaseOrder);
      StockMove stockMove=StockMove.all().filter(""String_Node_Str"",purchaseOrder.getId()).fetchOne();
      if (stockMove != null) {
        stockMoveService.copyQtyToRealQty(stockMove);
        stockMoveService.realize(stockMove);
        stockMove.setRealDate(purchaseOrder.getDeliveryDate());
      }
      purchaseOrder.setValidationDate(purchaseOrder.getOrderDate());
      purchaseOrder.setValidatedByUser(userSerivce.getUser());
      purchaseOrder.setSupplierPartner(purchaseOrderServiceSupplychainImpl.validateSupplier(purchaseOrder));
      Invoice invoice=purchaseOrderInvoiceService.generateInvoice(purchaseOrder);
      invoice.setInvoiceDate(purchaseOrder.getValidationDate());
      invoiceService.compute(invoice);
      invoiceService.validate(invoice);
      invoiceService.ventilate(invoice);
    }
    purchaseOrder.save();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
59032,"@Transactional void validateSaleOrder(Long soId){
  try {
    SaleOrder saleOrder=SaleOrder.find(soId);
    for (    SaleOrderLine line : saleOrder.getSaleOrderLineList())     line.setTaxLine(saleOrderLineService.getTaxLine(saleOrder,line));
    saleOrderService.computeSaleOrder(saleOrder);
    if (saleOrder.getStatusSelect() == 3) {
      taskSaleOrderService.createTasks(saleOrder);
      saleOrderServiceStockImpl.createStocksMovesFromSaleOrder(saleOrder);
      saleOrderPurchaseService.createPurchaseOrders(saleOrder);
      saleOrder.setClientPartner(saleOrderService.validateCustomer(saleOrder));
      if (saleOrder.getInvoicingTypeSelect() == 1 || saleOrder.getInvoicingTypeSelect() == 5) {
        Invoice invoice=saleOrderInvoiceService.generatePerOrderInvoice(saleOrder);
        invoice.setInvoiceDate(saleOrder.getValidationDate());
        invoiceService.compute(invoice);
        invoiceService.validate(invoice);
        invoiceService.ventilate(invoice);
      }
      StockMove stockMove=StockMove.all_().filter(""String_Node_Str"",saleOrder).fetchOne();
      if (stockMove != null && stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
        stockMoveService.copyQtyToRealQty(stockMove);
        stockMoveService.validate(stockMove);
        stockMove.setRealDate(saleOrder.getValidationDate());
        if (saleOrder.getInvoicingTypeSelect() == 4) {
          Invoice invoice=stockMoveInvoiceService.createInvoiceFromSaleOrder(stockMove,saleOrder);
          invoice.setInvoiceDate(saleOrder.getValidationDate());
          invoiceService.compute(invoice);
          invoiceService.validate(invoice);
          invoiceService.ventilate(invoice);
        }
      }
    }
    saleOrder.save();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Transactional void validateSaleOrder(Long soId){
  try {
    SaleOrder saleOrder=SaleOrder.find(soId);
    for (    SaleOrderLine line : saleOrder.getSaleOrderLineList())     line.setTaxLine(saleOrderLineService.getTaxLine(saleOrder,line));
    saleOrderService.computeSaleOrder(saleOrder);
    if (saleOrder.getStatusSelect() == 3) {
      taskSaleOrderService.createTasks(saleOrder);
      saleOrderServiceStockImpl.createStocksMovesFromSaleOrder(saleOrder);
      saleOrderPurchaseService.createPurchaseOrders(saleOrder);
      saleOrder.setClientPartner(saleOrderService.validateCustomer(saleOrder));
      if (saleOrder.getInvoicingTypeSelect() == 1 || saleOrder.getInvoicingTypeSelect() == 5) {
        Invoice invoice=saleOrderInvoiceService.generatePerOrderInvoice(saleOrder);
        invoice.setInvoiceDate(saleOrder.getValidationDate());
        invoiceService.compute(invoice);
        invoiceService.validate(invoice);
        invoiceService.ventilate(invoice);
      }
      StockMove stockMove=StockMove.all().filter(""String_Node_Str"",saleOrder).fetchOne();
      if (stockMove != null && stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
        stockMoveService.copyQtyToRealQty(stockMove);
        stockMoveService.validate(stockMove);
        stockMove.setRealDate(saleOrder.getValidationDate());
        if (saleOrder.getInvoicingTypeSelect() == 4) {
          Invoice invoice=stockMoveInvoiceService.createInvoiceFromSaleOrder(stockMove,saleOrder);
          invoice.setInvoiceDate(saleOrder.getValidationDate());
          invoiceService.compute(invoice);
          invoiceService.validate(invoice);
          invoiceService.ventilate(invoice);
        }
      }
    }
    saleOrder.save();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
59033,"public boolean checkAddressUsed(Long addressId){
  LOG.debug(""String_Node_Str"",addressId);
  if (addressId != null) {
    if (Partner.all_().filter(""String_Node_Str"",addressId).fetchOne() != null)     return true;
  }
  return false;
}","public boolean checkAddressUsed(Long addressId){
  LOG.debug(""String_Node_Str"",addressId);
  if (addressId != null) {
    if (Partner.all().filter(""String_Node_Str"",addressId).fetchOne() != null)     return true;
  }
  return false;
}"
59034,"private void updateSalePriceOfVariant(Product product){
  List<Product> productVariantList=Product.filter(""String_Node_Str"",product).fetch();
  for (  Product productVariant : productVariantList) {
    productVariant.setCostPrice(product.getCostPrice());
    productVariant.setSalePrice(product.getSalePrice());
    productVariant.setManagPriceCoef(product.getManagPriceCoef());
    this.updateSalePrice(productVariant);
  }
}","private void updateSalePriceOfVariant(Product product){
  List<? extends Product> productVariantList=Product.filter(""String_Node_Str"",product).fetch();
  for (  Product productVariant : productVariantList) {
    productVariant.setCostPrice(product.getCostPrice());
    productVariant.setSalePrice(product.getSalePrice());
    productVariant.setManagPriceCoef(product.getManagPriceCoef());
    this.updateSalePrice(productVariant);
  }
}"
59035,"private Product getProductVariant(ProductVariant parentProductVariant,Product productSearched){
  LOG.debug(""String_Node_Str"",productSearched.getCode(),parentProductVariant.getName());
  ProductVariantValue productVariantValue1=parentProductVariant.getProductVariantValue1();
  ProductVariantValue productVariantValue2=parentProductVariant.getProductVariantValue2();
  ProductVariantValue productVariantValue3=parentProductVariant.getProductVariantValue3();
  ProductVariantValue productVariantValue4=parentProductVariant.getProductVariantValue4();
  if (productVariantValue1 != null) {
    LOG.debug(""String_Node_Str"",productVariantValue1.getProductVariantAttr().getCode(),productVariantValue1.getCode());
    List<Product> productList=Product.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",productSearched,productVariantValue1.getProductVariantAttr().getCode(),productVariantValue1.getCode()).fetch();
    if (productList == null || productList.isEmpty()) {
      return productSearched;
    }
    Product productFind=null;
    int nbAttr=0;
    for (    Product product : productList) {
      if (productVariantValue1 != null && productVariantValue2 != null && productVariantValue3 != null && productVariantValue4 != null) {
        if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)&& this.containsProductVariantValue(product,productVariantValue4)) {
          LOG.debug(""String_Node_Str"",product.getCode());
          return product;
        }
        if (nbAttr < 3) {
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=3;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=3;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue3) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=3;
          }
          if (this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=3;
          }
        }
        if (nbAttr < 2) {
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue3) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=2;
          }
        }
        if (nbAttr < 1) {
          if (this.containsProductVariantValue(product,productVariantValue1)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=1;
          }
        }
      }
      if (productVariantValue1 != null && productVariantValue2 != null && productVariantValue3 != null) {
        if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)) {
          LOG.debug(""String_Node_Str"",product.getCode());
          return product;
        }
        if (nbAttr < 2) {
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=2;
          }
        }
        if (nbAttr < 1) {
          if (this.containsProductVariantValue(product,productVariantValue1)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=1;
          }
        }
      }
      if (productVariantValue1 != null && productVariantValue2 != null) {
        if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2)) {
          LOG.debug(""String_Node_Str"",product.getCode());
          return product;
        }
        if (nbAttr < 1) {
          if (this.containsProductVariantValue(product,productVariantValue1)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=1;
          }
        }
      }
      if (productVariantValue1 != null) {
        if (this.containsProductVariantValue(product,productVariantValue1)) {
          LOG.debug(""String_Node_Str"",product.getCode());
          return product;
        }
      }
    }
    if (productFind != null) {
      LOG.debug(""String_Node_Str"",productFind.getCode(),nbAttr);
      return productFind;
    }
  }
  return productSearched;
}","private Product getProductVariant(ProductVariant parentProductVariant,Product productSearched){
  LOG.debug(""String_Node_Str"",productSearched.getCode(),parentProductVariant.getName());
  ProductVariantValue productVariantValue1=parentProductVariant.getProductVariantValue1();
  ProductVariantValue productVariantValue2=parentProductVariant.getProductVariantValue2();
  ProductVariantValue productVariantValue3=parentProductVariant.getProductVariantValue3();
  ProductVariantValue productVariantValue4=parentProductVariant.getProductVariantValue4();
  if (productVariantValue1 != null) {
    LOG.debug(""String_Node_Str"",productVariantValue1.getProductVariantAttr().getCode(),productVariantValue1.getCode());
    List<? extends Product> productList=Product.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",productSearched,productVariantValue1.getProductVariantAttr().getCode(),productVariantValue1.getCode()).fetch();
    if (productList == null || productList.isEmpty()) {
      return productSearched;
    }
    Product productFind=null;
    int nbAttr=0;
    for (    Product product : productList) {
      if (productVariantValue1 != null && productVariantValue2 != null && productVariantValue3 != null && productVariantValue4 != null) {
        if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)&& this.containsProductVariantValue(product,productVariantValue4)) {
          LOG.debug(""String_Node_Str"",product.getCode());
          return product;
        }
        if (nbAttr < 3) {
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=3;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=3;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue3) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=3;
          }
          if (this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=3;
          }
        }
        if (nbAttr < 2) {
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue3) && this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=2;
          }
        }
        if (nbAttr < 1) {
          if (this.containsProductVariantValue(product,productVariantValue1)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue4)) {
            productFind=product;
            nbAttr=1;
          }
        }
      }
      if (productVariantValue1 != null && productVariantValue2 != null && productVariantValue3 != null) {
        if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)) {
          LOG.debug(""String_Node_Str"",product.getCode());
          return product;
        }
        if (nbAttr < 2) {
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=2;
          }
          if (this.containsProductVariantValue(product,productVariantValue2) && this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=2;
          }
        }
        if (nbAttr < 1) {
          if (this.containsProductVariantValue(product,productVariantValue1)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue3)) {
            productFind=product;
            nbAttr=1;
          }
        }
      }
      if (productVariantValue1 != null && productVariantValue2 != null) {
        if (this.containsProductVariantValue(product,productVariantValue1) && this.containsProductVariantValue(product,productVariantValue2)) {
          LOG.debug(""String_Node_Str"",product.getCode());
          return product;
        }
        if (nbAttr < 1) {
          if (this.containsProductVariantValue(product,productVariantValue1)) {
            productFind=product;
            nbAttr=1;
          }
          if (this.containsProductVariantValue(product,productVariantValue2)) {
            productFind=product;
            nbAttr=1;
          }
        }
      }
      if (productVariantValue1 != null) {
        if (this.containsProductVariantValue(product,productVariantValue1)) {
          LOG.debug(""String_Node_Str"",product.getCode());
          return product;
        }
      }
    }
    if (productFind != null) {
      LOG.debug(""String_Node_Str"",productFind.getCode(),nbAttr);
      return productFind;
    }
  }
  return productSearched;
}"
59036,"/** 
 * Obtenir le coefficient entre deux unités dans une liste de conversion. Si l'unité de départ et l'unité d'arrivée ne se trouve pas dans la liste alors on inverse l'unité de départ avec l'unité d'arrivée. Si il n'y a toujours pas de résultat alors on déclenche une exception.
 * @param unitConversionList La liste des unités de conversion.
 * @param startUnit L'unité de départ.
 * @param endUnit L'unité d'arrivée.
 * @return Le coefficient de conversion.
 * @throws AxelorException Les unités demandés ne se trouvent pas dans la liste de conversion
 */
public BigDecimal getCoefficient(List<UnitConversion> unitConversionList,Unit startUnit,Unit endUnit) throws AxelorException {
  for (  UnitConversion unitConversion : unitConversionList) {
    if (unitConversion.getStartUnit().equals(startUnit) && unitConversion.getEndUnit().equals(endUnit)) {
      return unitConversion.getCoef();
    }
  }
  for (  UnitConversion unitConversion : unitConversionList) {
    if (unitConversion.getStartUnit().equals(endUnit) && unitConversion.getEndUnit().equals(startUnit)) {
      return BigDecimal.ONE.divide(unitConversion.getCoef(),6,RoundingMode.HALF_EVEN);
    }
  }
  throw new AxelorException(String.format(I18n.get(IExceptionMessage.UNIT_CONVERSION_1),startUnit.getName(),endUnit.getName()),IException.CONFIGURATION_ERROR);
}","/** 
 * Obtenir le coefficient entre deux unités dans une liste de conversion. Si l'unité de départ et l'unité d'arrivée ne se trouve pas dans la liste alors on inverse l'unité de départ avec l'unité d'arrivée. Si il n'y a toujours pas de résultat alors on déclenche une exception.
 * @param unitConversionList La liste des unités de conversion.
 * @param startUnit L'unité de départ.
 * @param endUnit L'unité d'arrivée.
 * @return Le coefficient de conversion.
 * @throws AxelorException Les unités demandés ne se trouvent pas dans la liste de conversion
 */
public BigDecimal getCoefficient(List<? extends UnitConversion> unitConversionList,Unit startUnit,Unit endUnit) throws AxelorException {
  for (  UnitConversion unitConversion : unitConversionList) {
    if (unitConversion.getStartUnit().equals(startUnit) && unitConversion.getEndUnit().equals(endUnit)) {
      return unitConversion.getCoef();
    }
  }
  for (  UnitConversion unitConversion : unitConversionList) {
    if (unitConversion.getStartUnit().equals(endUnit) && unitConversion.getEndUnit().equals(startUnit)) {
      return BigDecimal.ONE.divide(unitConversion.getCoef(),6,RoundingMode.HALF_EVEN);
    }
  }
  throw new AxelorException(String.format(I18n.get(IExceptionMessage.UNIT_CONVERSION_1),startUnit.getName(),endUnit.getName()),IException.CONFIGURATION_ERROR);
}"
59037,"private void generateMenuGraph(List<? extends MetaMenu> menuList){
  for (  MetaMenu menu : menuList) {
    String model=menu.getAction() != null ? menu.getAction().getModel() : null;
    if (model != null && !objectList.contains(model)) {
      updateFieldData(menu.getAction());
    }
    List<? extends MetaMenu> childList=MetaMenu.all_().filter(""String_Node_Str"",menu,group).order(""String_Node_Str"").order(""String_Node_Str"").fetch();
    generateMenuGraph(childList);
  }
}","private void generateMenuGraph(List<? extends MetaMenu> menuList){
  for (  MetaMenu menu : menuList) {
    String model=menu.getAction() != null ? menu.getAction().getModel() : null;
    if (model != null && !objectList.contains(model)) {
      updateFieldData(menu.getAction());
    }
    List<? extends MetaMenu> childList=MetaMenu.all().filter(""String_Node_Str"",menu,group).order(""String_Node_Str"").order(""String_Node_Str"").fetch();
    generateMenuGraph(childList);
  }
}"
59038,"private void writeObjects(File objectFile){
  try {
    List<? extends MetaMenu> menuList=MetaMenu.all_().filter(""String_Node_Str"",group).order(""String_Node_Str"").order(""String_Node_Str"").fetch();
    log.debug(""String_Node_Str"",menuList.size());
    generateMenuGraph(menuList);
    CsvTool.csvWriter(objectFile.getParent(),objectFile.getName(),';',csvHeaders,fieldDataList);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void writeObjects(File objectFile){
  try {
    List<? extends MetaMenu> menuList=MetaMenu.all().filter(""String_Node_Str"",group).order(""String_Node_Str"").order(""String_Node_Str"").fetch();
    log.debug(""String_Node_Str"",menuList.size());
    generateMenuGraph(menuList);
    CsvTool.csvWriter(objectFile.getParent(),objectFile.getName(),';',csvHeaders,fieldDataList);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
59039,"public Set<MetaField> setFields(String model) throws IOException {
  LOG.debug(""String_Node_Str"",model);
  Set<MetaField> fieldSet=new HashSet<MetaField>();
  List<String> fields=new ArrayList<String>();
  for (  MetaField field : MetaField.all_().filter(""String_Node_Str"",model).fetch()) {
    fieldSet.add(field);
    fields.add(field.getName());
  }
  LOG.debug(""String_Node_Str"",fields);
  return fieldSet;
}","public Set<MetaField> setFields(String model) throws IOException {
  LOG.debug(""String_Node_Str"",model);
  Set<MetaField> fieldSet=new HashSet<MetaField>();
  List<String> fields=new ArrayList<String>();
  for (  MetaField field : MetaField.all().filter(""String_Node_Str"",model).fetch()) {
    fieldSet.add(field);
    fields.add(field.getName());
  }
  LOG.debug(""String_Node_Str"",fields);
  return fieldSet;
}"
59040,"public List<MoveLine> getExcessPayment(AccountClearance accountClearance) throws AxelorException {
  Company company=accountClearance.getCompany();
  this.testCompanyField(company);
  List<MoveLine> moveLineList=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"",company,IMove.VALIDATED_MOVE,accountClearance.getAmountThreshold(),company.getAccountConfig().getClearanceAccountSet(),accountClearance.getDateThreshold()).fetch();
  LOG.debug(""String_Node_Str"",moveLineList);
  return moveLineList;
}","public List<? extends MoveLine> getExcessPayment(AccountClearance accountClearance) throws AxelorException {
  Company company=accountClearance.getCompany();
  this.testCompanyField(company);
  List<? extends MoveLine> moveLineList=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"",company,IMove.VALIDATED_MOVE,accountClearance.getAmountThreshold(),company.getAccountConfig().getClearanceAccountSet(),accountClearance.getDateThreshold()).fetch();
  LOG.debug(""String_Node_Str"",moveLineList);
  return moveLineList;
}"
59041,"/** 
 * Méthode permettant de récupérer l'ensemble des lignes d'écriture pour une société et un tiers
 * @param partner Un tiers
 * @param company Une société
 * @return
 */
public List<MoveLine> getMoveLine(Partner partner,Company company){
  return MoveLine.filter(""String_Node_Str"",partner,company).fetch();
}","/** 
 * Méthode permettant de récupérer l'ensemble des lignes d'écriture pour une société et un tiers
 * @param partner Un tiers
 * @param company Une société
 * @return
 */
public List<? extends MoveLine> getMoveLine(Partner partner,Company company){
  return MoveLine.filter(""String_Node_Str"",partner,company).fetch();
}"
59042,"/** 
 * Procédure permettant de remplacer les tags défini dans un mail par des valeurs
 * @param mail Un mail
 */
public Mail replaceTag(Mail mail){
  List<MailModelTag> mailModelTagList=MailModelTag.all().fetch();
  String content=mail.getContent();
  String subject=mail.getSubject();
  for (  MailModelTag mailModelTag : mailModelTagList) {
    LOG.debug(""String_Node_Str"",mailModelTag.getTag());
    String link=mailModelTag.getLink();
    LOG.debug(""String_Node_Str"",link);
    String[] links=link.split(""String_Node_Str"");
    LOG.debug(""String_Node_Str"",links.length);
    @SuppressWarnings(""String_Node_Str"") Class classGotten=mail.getClass();
    Field f=null;
    Object obj=mail;
    for (    String fieldName : links) {
      LOG.debug(""String_Node_Str"",fieldName);
      f=ObjectTool.getField(fieldName,classGotten);
      classGotten=f.getType();
      obj=ObjectTool.getObject(obj,fieldName);
      if (obj == null) {
        obj=new String(""String_Node_Str"");
        break;
      }
    }
    content=content.replaceAll(mailModelTag.getTag(),obj.toString());
    subject=subject.replaceAll(mailModelTag.getTag(),obj.toString());
  }
  mail.setContent(content);
  mail.setSubject(subject);
  return mail;
}","/** 
 * Procédure permettant de remplacer les tags défini dans un mail par des valeurs
 * @param mail Un mail
 */
public Mail replaceTag(Mail mail){
  List<? extends MailModelTag> mailModelTagList=MailModelTag.all().fetch();
  String content=mail.getContent();
  String subject=mail.getSubject();
  for (  MailModelTag mailModelTag : mailModelTagList) {
    LOG.debug(""String_Node_Str"",mailModelTag.getTag());
    String link=mailModelTag.getLink();
    LOG.debug(""String_Node_Str"",link);
    String[] links=link.split(""String_Node_Str"");
    LOG.debug(""String_Node_Str"",links.length);
    @SuppressWarnings(""String_Node_Str"") Class classGotten=mail.getClass();
    Field f=null;
    Object obj=mail;
    for (    String fieldName : links) {
      LOG.debug(""String_Node_Str"",fieldName);
      f=ObjectTool.getField(fieldName,classGotten);
      classGotten=f.getType();
      obj=ObjectTool.getObject(obj,fieldName);
      if (obj == null) {
        obj=new String(""String_Node_Str"");
        break;
      }
    }
    content=content.replaceAll(mailModelTag.getTag(),obj.toString());
    subject=subject.replaceAll(mailModelTag.getTag(),obj.toString());
  }
  mail.setContent(content);
  mail.setSubject(subject);
  return mail;
}"
59043,"/** 
 * Procédure permettant de générer les fichiers pdf des emails et courriers en masse
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void generateAllPdfMail(){
  LOG.debug(""String_Node_Str"");
  List<Mail> mailList=Mail.filter(""String_Node_Str"").fetch();
  LOG.debug(""String_Node_Str"",mailList.size());
  for (  Mail mail : mailList) {
    try {
      this.generatePdfMail(mail);
    }
 catch (    AxelorException e) {
      TraceBackService.trace(e);
      LOG.error(""String_Node_Str"",mail.getName());
    }
  }
}","/** 
 * Procédure permettant de générer les fichiers pdf des emails et courriers en masse
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void generateAllPdfMail(){
  LOG.debug(""String_Node_Str"");
  List<? extends Mail> mailList=Mail.filter(""String_Node_Str"").fetch();
  LOG.debug(""String_Node_Str"",mailList.size());
  for (  Mail mail : mailList) {
    try {
      this.generatePdfMail(mail);
    }
 catch (    AxelorException e) {
      TraceBackService.trace(e);
      LOG.error(""String_Node_Str"",mail.getName());
    }
  }
}"
59044,"/** 
 * Methode permettant de récupérer l'ensemble des emails/courriers associés à un contrat
 * @param contractLine Un contrat
 * @return
 */
public List<Mail> getMailList(Partner partner){
  return Mail.filter(""String_Node_Str"",partner).fetch();
}","/** 
 * Methode permettant de récupérer l'ensemble des emails/courriers associés à un contrat
 * @param contractLine Un contrat
 * @return
 */
public List<? extends Mail> getMailList(Partner partner){
  return Mail.filter(""String_Node_Str"",partner).fetch();
}"
59045,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type avoir
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect7FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (moveLineReport.getCompany() != null) {
    companyCode=moveLineReport.getCompany().getCode();
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getCompany().getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moveList=Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        BigDecimal sumCredit=this.getSumCredit(""String_Node_Str"" + moveLineQueryStr,moveList);
        if (sumCredit.compareTo(BigDecimal.ZERO) == 1) {
          String exportNumber=this.getSaleExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList(moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=sumCredit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type avoir
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect7FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (moveLineReport.getCompany() != null) {
    companyCode=moveLineReport.getCompany().getCode();
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getCompany().getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<? extends Journal> journalList=Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moveList=Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        BigDecimal sumCredit=this.getSumCredit(""String_Node_Str"" + moveLineQueryStr,moveList);
        if (sumCredit.compareTo(BigDecimal.ZERO) == 1) {
          String exportNumber=this.getSaleExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList(moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=sumCredit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59046,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type vente
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect6FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (company != null) {
    companyCode=company.getCode();
    moveQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moveList=Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        BigDecimal sumDebit=this.getSumDebit(""String_Node_Str"" + moveLineQueryStr,moveList);
        if (sumDebit.compareTo(BigDecimal.ZERO) == 1) {
          String exportNumber=this.getSaleExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList(moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=sumDebit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type vente
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect6FILE1(MoveLineReport moveLineReport,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  Company company=moveLineReport.getCompany();
  String dateQueryStr=String.format(""String_Node_Str"",company.getId());
  JournalType journalType=moveLineReportService.getJournalType(moveLineReport);
  if (moveLineReport.getJournal() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getJournal().getId());
  }
 else {
    dateQueryStr+=String.format(""String_Node_Str"",journalType.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (moveLineReport.getRef() != null) {
    reference=moveLineReport.getRef();
  }
  if (company != null) {
    companyCode=company.getCode();
    moveQueryStr+=String.format(""String_Node_Str"",company.getId());
  }
  if (moveLineReport.getPeriod() != null) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getPeriod().getId());
  }
  if (moveLineReport.getDateFrom() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateFrom().toString());
  }
  if (moveLineReport.getDateTo() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDateTo().toString());
  }
  if (moveLineReport.getDate() != null) {
    moveLineQueryStr+=String.format(""String_Node_Str"",moveLineReport.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=String.format(""String_Node_Str"",moveLineReport.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=moveLineReport.getDate();
  for (  LocalDate dt : allDates) {
    List<? extends Journal> journalList=Journal.filter(""String_Node_Str"",journalType).fetch();
    if (moveLineReport.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(moveLineReport.getJournal());
    }
    for (    Journal journal : journalList) {
      List<? extends Move> moveList=Move.filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moveList.size() > 0) {
        BigDecimal sumDebit=this.getSumDebit(""String_Node_Str"" + moveLineQueryStr,moveList);
        if (sumDebit.compareTo(BigDecimal.ZERO) == 1) {
          String exportNumber=this.getSaleExportNumber(company);
          Move firstMove=moveList.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          this.updateMoveList(moveList,moveLineReport,interfaceDate,exportNumber);
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=sumDebit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=accountConfigService.getExportPath(accountConfigService.getAccountConfig(company));
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59047,"public BigDecimal getSumDebit(String queryFilter,List<Move> moveList){
  Query q=JPA.em().createQuery(""String_Node_Str"" + queryFilter,BigDecimal.class);
  q.setParameter(1,moveList);
  BigDecimal result=(BigDecimal)q.getSingleResult();
  LOG.debug(""String_Node_Str"",result);
  if (result != null) {
    return result;
  }
 else {
    return BigDecimal.ZERO;
  }
}","public BigDecimal getSumDebit(String queryFilter,List<? extends Move> moveList){
  Query q=JPA.em().createQuery(""String_Node_Str"" + queryFilter,BigDecimal.class);
  q.setParameter(1,moveList);
  BigDecimal result=(BigDecimal)q.getSingleResult();
  LOG.debug(""String_Node_Str"",result);
  if (result != null) {
    return result;
  }
 else {
    return BigDecimal.ZERO;
  }
}"
59048,"/** 
 * Procédure permettant de créer un remboursement si un trop perçu est généré à la facture fin de cycle grand comptes
 * @param invoice Une facture
 * @throws AxelorException
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void createReimbursementInvoice(Invoice invoice) throws AxelorException {
  Company company=invoice.getCompany();
  Partner partner=invoice.getPartner();
  List<MoveLine> moveLineList=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"",IMove.VALIDATED_MOVE,partner,IAccount.NULL).fetch();
  this.createReimbursementInvoice(partner,company,moveLineList);
}","/** 
 * Procédure permettant de créer un remboursement si un trop perçu est généré à la facture fin de cycle grand comptes
 * @param invoice Une facture
 * @throws AxelorException
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void createReimbursementInvoice(Invoice invoice) throws AxelorException {
  Company company=invoice.getCompany();
  Partner partner=invoice.getPartner();
  List<? extends MoveLine> moveLineList=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"",IMove.VALIDATED_MOVE,partner,IAccount.NULL).fetch();
  this.createReimbursementInvoice(partner,company,moveLineList);
}"
59049,"/** 
 * Procédure permettant de cloturer un exercice comptable
 * @param year Un exercice comptable
 * @throws AxelorException 
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void closeYear(Year year) throws AxelorException {
  year=Year.find(year.getId());
  Status status=Status.findByCode(""String_Node_Str"");
  for (  Period period : year.getPeriodList()) {
    period.setStatus(status);
  }
  Company company=year.getCompany();
  if (company == null) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralServiceAccount.getExceptionAccountingMsg(),year.getName()),IException.CONFIGURATION_ERROR);
  }
  Query q=JPA.em().createQuery(""String_Node_Str"");
  q.setParameter(1,year.getFromDate());
  q.setParameter(2,year.getToDate());
  q.setParameter(3,year.getCompany());
  @SuppressWarnings(""String_Node_Str"") List<Partner> partnerList=q.getResultList();
  List<Partner> partnerListAll=Partner.all().fetch();
  LOG.debug(""String_Node_Str"",partnerListAll.size());
  LOG.debug(""String_Node_Str"",partnerList.size());
  AccountConfig accountConfig=accountConfigService.getAccountConfig(company);
  Account customerAccount=accountConfigService.getCustomerAccount(accountConfig);
  Account doubtfulCustomerAccount=accountConfigService.getDoubtfulCustomerAccount(accountConfig);
  for (  Partner partner : partnerList) {
    partner=Partner.find(partner.getId());
    LOG.debug(""String_Node_Str"",partner.getName());
    boolean find=false;
    for (    ReportedBalance reportedBalance : partner.getReportedBalanceList()) {
      if (reportedBalance.getCompany().equals(company)) {
        LOG.debug(""String_Node_Str"");
        ReportedBalanceLine reportedBalanceLine=this.createReportedBalanceLine(reportedBalance,this.computeReportedBalance(year.getFromDate(),year.getToDate(),partner,customerAccount,doubtfulCustomerAccount),year);
        LOG.debug(""String_Node_Str"",reportedBalanceLine);
        reportedBalance.getReportedBalanceLineList().add(reportedBalanceLine);
        reportedBalance.save();
        find=true;
      }
    }
    if (!find) {
      LOG.debug(""String_Node_Str"");
      ReportedBalance reportedBalance=this.createReportedBalance(company,partner);
      ReportedBalanceLine reportedBalanceLine=this.createReportedBalanceLine(reportedBalance,this.computeReportedBalance(year.getFromDate(),year.getToDate(),partner,customerAccount,doubtfulCustomerAccount),year);
      LOG.debug(""String_Node_Str"",reportedBalanceLine);
      reportedBalance.getReportedBalanceLineList().add(reportedBalanceLine);
      reportedBalance.save();
    }
    partner.save();
  }
  year.setStatus(status);
  year.save();
}","/** 
 * Procédure permettant de cloturer un exercice comptable
 * @param year Un exercice comptable
 * @throws AxelorException 
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void closeYear(Year year) throws AxelorException {
  year=Year.find(year.getId());
  Status status=Status.findByCode(""String_Node_Str"");
  for (  Period period : year.getPeriodList()) {
    period.setStatus(status);
  }
  Company company=year.getCompany();
  if (company == null) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralServiceAccount.getExceptionAccountingMsg(),year.getName()),IException.CONFIGURATION_ERROR);
  }
  Query q=JPA.em().createQuery(""String_Node_Str"");
  q.setParameter(1,year.getFromDate());
  q.setParameter(2,year.getToDate());
  q.setParameter(3,year.getCompany());
  @SuppressWarnings(""String_Node_Str"") List<Partner> partnerList=q.getResultList();
  List<? extends Partner> partnerListAll=Partner.all().fetch();
  LOG.debug(""String_Node_Str"",partnerListAll.size());
  LOG.debug(""String_Node_Str"",partnerList.size());
  AccountConfig accountConfig=accountConfigService.getAccountConfig(company);
  Account customerAccount=accountConfigService.getCustomerAccount(accountConfig);
  Account doubtfulCustomerAccount=accountConfigService.getDoubtfulCustomerAccount(accountConfig);
  for (  Partner partner : partnerList) {
    partner=Partner.find(partner.getId());
    LOG.debug(""String_Node_Str"",partner.getName());
    boolean find=false;
    for (    ReportedBalance reportedBalance : partner.getReportedBalanceList()) {
      if (reportedBalance.getCompany().equals(company)) {
        LOG.debug(""String_Node_Str"");
        ReportedBalanceLine reportedBalanceLine=this.createReportedBalanceLine(reportedBalance,this.computeReportedBalance(year.getFromDate(),year.getToDate(),partner,customerAccount,doubtfulCustomerAccount),year);
        LOG.debug(""String_Node_Str"",reportedBalanceLine);
        reportedBalance.getReportedBalanceLineList().add(reportedBalanceLine);
        reportedBalance.save();
        find=true;
      }
    }
    if (!find) {
      LOG.debug(""String_Node_Str"");
      ReportedBalance reportedBalance=this.createReportedBalance(company,partner);
      ReportedBalanceLine reportedBalanceLine=this.createReportedBalanceLine(reportedBalance,this.computeReportedBalance(year.getFromDate(),year.getToDate(),partner,customerAccount,doubtfulCustomerAccount),year);
      LOG.debug(""String_Node_Str"",reportedBalanceLine);
      reportedBalance.getReportedBalanceLineList().add(reportedBalanceLine);
      reportedBalance.save();
    }
    partner.save();
  }
  year.setStatus(status);
  year.save();
}"
59050,"@Deprecated public BigDecimal computeReportedBalance2(LocalDate fromDate,LocalDate toDate,Partner partner,Account account){
  List<MoveLine> moveLineList=MoveLine.all().filter(""String_Node_Str"",partner,fromDate,toDate,account).fetch();
  BigDecimal reportedBalanceAmount=BigDecimal.ZERO;
  for (  MoveLine moveLine : moveLineList) {
    if (moveLine.getDebit().compareTo(BigDecimal.ZERO) > 0) {
      reportedBalanceAmount=reportedBalanceAmount.subtract(moveLine.getAmountRemaining());
    }
 else     if (moveLine.getCredit().compareTo(BigDecimal.ZERO) > 0) {
      reportedBalanceAmount=reportedBalanceAmount.add(moveLine.getAmountRemaining());
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",reportedBalanceAmount);
  }
  return reportedBalanceAmount;
}","@Deprecated public BigDecimal computeReportedBalance2(LocalDate fromDate,LocalDate toDate,Partner partner,Account account){
  List<? extends MoveLine> moveLineList=MoveLine.all().filter(""String_Node_Str"",partner,fromDate,toDate,account).fetch();
  BigDecimal reportedBalanceAmount=BigDecimal.ZERO;
  for (  MoveLine moveLine : moveLineList) {
    if (moveLine.getDebit().compareTo(BigDecimal.ZERO) > 0) {
      reportedBalanceAmount=reportedBalanceAmount.subtract(moveLine.getAmountRemaining());
    }
 else     if (moveLine.getCredit().compareTo(BigDecimal.ZERO) > 0) {
      reportedBalanceAmount=reportedBalanceAmount.add(moveLine.getAmountRemaining());
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",reportedBalanceAmount);
  }
  return reportedBalanceAmount;
}"
59051,"/** 
 * Fonction permettant de récupérer les lignes d'écriture de rejet de facture à transférer sur le compte client douteux 
 * @param rule Le règle à appliquer : <ul> <li>0 = Créance de + 6 mois</li> <li>1 = Créance de + 3 mois</li> </ul>
 * @param doubtfulCustomerAccount Le compte client douteux
 * @param company La société
 * @return Les lignes d'écriture de rejet de facture à transférer sur le comtpe client douteux
 */
public List<MoveLine> getRejectMoveLine(int rule,Account doubtfulCustomerAccount,Company company){
  LocalDate date=null;
  List<MoveLine> moveLineList=null;
switch (rule) {
case 0:
    date=this.today.minusMonths(company.getAccountConfig().getSixMonthDebtMonthNumber());
  moveLineList=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,date,doubtfulCustomerAccount).fetch();
break;
case 1:
date=this.today.minusMonths(company.getAccountConfig().getThreeMonthDebtMontsNumber());
moveLineList=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,date,doubtfulCustomerAccount).fetch();
break;
default :
break;
}
LOG.debug(""String_Node_Str"",date);
return moveLineList;
}","/** 
 * Fonction permettant de récupérer les lignes d'écriture de rejet de facture à transférer sur le compte client douteux 
 * @param rule Le règle à appliquer : <ul> <li>0 = Créance de + 6 mois</li> <li>1 = Créance de + 3 mois</li> </ul>
 * @param doubtfulCustomerAccount Le compte client douteux
 * @param company La société
 * @return Les lignes d'écriture de rejet de facture à transférer sur le comtpe client douteux
 */
public List<? extends MoveLine> getRejectMoveLine(int rule,Account doubtfulCustomerAccount,Company company){
  LocalDate date=null;
  List<? extends MoveLine> moveLineList=null;
switch (rule) {
case 0:
    date=this.today.minusMonths(company.getAccountConfig().getSixMonthDebtMonthNumber());
  moveLineList=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,date,doubtfulCustomerAccount).fetch();
break;
case 1:
date=this.today.minusMonths(company.getAccountConfig().getThreeMonthDebtMontsNumber());
moveLineList=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,date,doubtfulCustomerAccount).fetch();
break;
default :
break;
}
LOG.debug(""String_Node_Str"",date);
return moveLineList;
}"
59052,"/** 
 * Méthode permettant de récupérer l'ensemble des lignes d'écriture d'un tiers
 * @param partner Un tiers
 * @param company Une société
 * @return
 */
public List<MoveLine> getMoveLine(Partner partner,Company company){
  return MoveLine.filter(""String_Node_Str"",partner,company).fetch();
}","/** 
 * Méthode permettant de récupérer l'ensemble des lignes d'écriture d'un tiers
 * @param partner Un tiers
 * @param company Une société
 * @return
 */
public List<? extends MoveLine> getMoveLine(Partner partner,Company company){
  return MoveLine.filter(""String_Node_Str"",partner,company).fetch();
}"
59053,"public BigDecimal getSubstractBalanceDue(Partner partner){
  List<MoveLine> moveLineQuery=MoveLine.filter(""String_Node_Str"",partner).fetch();
  BigDecimal balance=BigDecimal.ZERO;
  for (  MoveLine moveLine : moveLineQuery) {
    if (moveLine.getCredit().compareTo(BigDecimal.ZERO) > 0) {
      if (moveLine.getAccount() != null && moveLine.getAccount().getReconcileOk()) {
        balance=balance.subtract(moveLine.getAmountRemaining());
      }
    }
  }
  return balance;
}","public BigDecimal getSubstractBalanceDue(Partner partner){
  List<? extends MoveLine> moveLineQuery=MoveLine.filter(""String_Node_Str"",partner).fetch();
  BigDecimal balance=BigDecimal.ZERO;
  for (  MoveLine moveLine : moveLineQuery) {
    if (moveLine.getCredit().compareTo(BigDecimal.ZERO) > 0) {
      if (moveLine.getAccount() != null && moveLine.getAccount().getReconcileOk()) {
        balance=balance.subtract(moveLine.getAmountRemaining());
      }
    }
  }
  return balance;
}"
59054,"/** 
 * Récupérer la liste des factures à traiter.
 * @param invoiceBatch Le batch de facturation concerné.
 * @return Une liste de facture.
 */
protected static Collection<Invoice> invoices(InvoiceBatch invoiceBatch,boolean isTo){
  if (invoiceBatch.getOnSelectOk()) {
    return invoiceBatch.getInvoiceSet();
  }
 else {
    return invoiceQuery(invoiceBatch,isTo);
  }
}","/** 
 * Récupérer la liste des factures à traiter.
 * @param invoiceBatch Le batch de facturation concerné.
 * @return Une liste de facture.
 */
protected static Collection<? extends Invoice> invoices(InvoiceBatch invoiceBatch,boolean isTo){
  if (invoiceBatch.getOnSelectOk()) {
    return invoiceBatch.getInvoiceSet();
  }
 else {
    return invoiceQuery(invoiceBatch,isTo);
  }
}"
59055,"public static List<Invoice> invoiceQuery(InvoiceBatch invoiceBatch,boolean isTo){
  if (invoiceBatch != null) {
    List<Object> params=new ArrayList<Object>();
    String query=""String_Node_Str"";
    params.add(invoiceBatch.getCompany());
    query+=""String_Node_Str"";
    if (isTo) {
      params.add(invoiceBatch.getToStatusSelect());
    }
 else {
      params.add(invoiceBatch.getFromStatusSelect());
    }
    LOG.debug(""String_Node_Str"",query);
    return Invoice.filter(query,params.toArray()).fetch();
  }
 else {
    return new ArrayList<Invoice>();
  }
}","public static List<? extends Invoice> invoiceQuery(InvoiceBatch invoiceBatch,boolean isTo){
  if (invoiceBatch != null) {
    List<Object> params=new ArrayList<Object>();
    String query=""String_Node_Str"";
    params.add(invoiceBatch.getCompany());
    query+=""String_Node_Str"";
    if (isTo) {
      params.add(invoiceBatch.getToStatusSelect());
    }
 else {
      params.add(invoiceBatch.getFromStatusSelect());
    }
    LOG.debug(""String_Node_Str"",query);
    return Invoice.filter(query,params.toArray()).fetch();
  }
 else {
    return new ArrayList<Invoice>();
  }
}"
59056,"/** 
 * Méthode permettant de récupérer les trop-perçus pour un compte donné (411) et une facture
 * @param invoice Une facture
 * @param account Un compte
 * @return
 * @throws AxelorException
 */
public List<MoveLine> getExcessPayment(Invoice invoice,Account account) throws AxelorException {
  Company company=invoice.getCompany();
  List<MoveLine> creditMoveLines=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,""String_Node_Str"",true,invoice.getPartner(),account).fetch();
  LOG.debug(""String_Node_Str"",creditMoveLines.size());
  return creditMoveLines;
}","/** 
 * Méthode permettant de récupérer les trop-perçus pour un compte donné (411) et une facture
 * @param invoice Une facture
 * @param account Un compte
 * @return
 * @throws AxelorException
 */
public List<? extends MoveLine> getExcessPayment(Invoice invoice,Account account) throws AxelorException {
  Company company=invoice.getCompany();
  List<? extends MoveLine> creditMoveLines=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,""String_Node_Str"",true,invoice.getPartner(),account).fetch();
  LOG.debug(""String_Node_Str"",creditMoveLines.size());
  return creditMoveLines;
}"
59057,"public List<MoveLine> getInvoiceDue(Invoice invoice,boolean useOthersInvoiceDue) throws AxelorException {
  Company company=invoice.getCompany();
  Partner partner=invoice.getPartner();
  List<MoveLine> debitMoveLines=ms.getOrignalInvoiceFromRefund(invoice);
  List<MoveLine> othersDebitMoveLines=null;
  if (useOthersInvoiceDue) {
    if (debitMoveLines != null && debitMoveLines.size() != 0) {
      othersDebitMoveLines=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,""String_Node_Str"",true,partner,debitMoveLines).fetch();
    }
 else {
      othersDebitMoveLines=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,""String_Node_Str"",true,partner).fetch();
    }
    debitMoveLines.addAll(othersDebitMoveLines);
  }
  LOG.debug(""String_Node_Str"",debitMoveLines.size());
  return debitMoveLines;
}","public List<? extends MoveLine> getInvoiceDue(Invoice invoice,boolean useOthersInvoiceDue) throws AxelorException {
  Company company=invoice.getCompany();
  Partner partner=invoice.getPartner();
  List<? extends MoveLine> debitMoveLines=ms.getOrignalInvoiceFromRefund(invoice);
  List<? extends MoveLine> othersDebitMoveLines=null;
  if (useOthersInvoiceDue) {
    if (debitMoveLines != null && debitMoveLines.size() != 0) {
      othersDebitMoveLines=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,""String_Node_Str"",true,partner,debitMoveLines).fetch();
    }
 else {
      othersDebitMoveLines=MoveLine.filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",company,""String_Node_Str"",true,partner).fetch();
    }
    debitMoveLines.addAll(othersDebitMoveLines);
  }
  LOG.debug(""String_Node_Str"",debitMoveLines.size());
  return debitMoveLines;
}"
59058,"/** 
 * Récupérer les éléments à payer dans le bon ordre
 * @return
 */
public List<PaymentInvoiceToPay> getPaymentInvoiceToPayList(PaymentVoucher paymentVoucher){
  return PaymentInvoiceToPay.filter(""String_Node_Str"",paymentVoucher).fetch();
}","/** 
 * Récupérer les éléments à payer dans le bon ordre
 * @return
 */
public List<? extends PaymentInvoiceToPay> getPaymentInvoiceToPayList(PaymentVoucher paymentVoucher){
  return PaymentInvoiceToPay.filter(""String_Node_Str"",paymentVoucher).fetch();
}"
59059,"/** 
 * Searching move lines to pay
 * @param pv paymentVoucher
 * @param mlToIgnore moveLine list to ignore
 * @return moveLines a list of moveLines
 * @throws AxelorException 
 */
public List<MoveLine> getMoveLines(PaymentVoucher paymentVoucher,MoveLine excludeMoveLine) throws AxelorException {
  List<MoveLine> moveLines=null;
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  if (paymentVoucherToolService.isDebitToPay(paymentVoucher)) {
    query+=""String_Node_Str"";
  }
 else {
    query+=""String_Node_Str"";
  }
  moveLines=MoveLine.filter(query,paymentVoucher.getPartner(),paymentVoucher.getCompany()).fetch();
  moveLines.remove(excludeMoveLine);
  return moveLines;
}","/** 
 * Searching move lines to pay
 * @param pv paymentVoucher
 * @param mlToIgnore moveLine list to ignore
 * @return moveLines a list of moveLines
 * @throws AxelorException 
 */
public List<MoveLine> getMoveLines(PaymentVoucher paymentVoucher,MoveLine excludeMoveLine) throws AxelorException {
  List<? extends MoveLine> moveLines=null;
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  if (paymentVoucherToolService.isDebitToPay(paymentVoucher)) {
    query+=""String_Node_Str"";
  }
 else {
    query+=""String_Node_Str"";
  }
  moveLines=MoveLine.filter(query,paymentVoucher.getPartner(),paymentVoucher.getCompany()).fetch();
  moveLines.remove(excludeMoveLine);
  return moveLines;
}"
59060,"/** 
 * Méthode qui retourne le User de l'utilisateur connecté
 * @return UserLe user de l'utilisateur
 */
public User getUser(){
  User user=null;
  try {
    user=AuthUtils.getUser();
  }
 catch (  Exception ex) {
  }
  if (user == null) {
    user=User.findByCode(""String_Node_Str"");
    return user;
  }
  return null;
}","/** 
 * Méthode qui retourne le User de l'utilisateur connecté
 * @return UserLe user de l'utilisateur
 */
public User getUser(){
  User user=null;
  try {
    user=AuthUtils.getUser();
  }
 catch (  Exception ex) {
  }
  if (user == null) {
    user=User.findByCode(""String_Node_Str"");
  }
  return user;
}"
59061,"public MessageServiceCrmImpl(UserService userService){
  super(userService);
}","@Inject public MessageServiceCrmImpl(UserService userService){
  super(userService);
}"
59062,"public void assignToMe(ActionRequest request,ActionResponse response){
  if (request.getContext().get(""String_Node_Str"") != null) {
    Opportunity opportunity=Opportunity.find((Long)request.getContext().get(""String_Node_Str""));
    opportunity.setUserInfo(uis.getUserInfo());
    ose.saveOpportunity(opportunity);
  }
 else   if (!((List)request.getContext().get(""String_Node_Str"")).isEmpty()) {
    for (    Opportunity opportunity : Opportunity.all().filter(""String_Node_Str"",request.getContext().get(""String_Node_Str"")).fetch()) {
      opportunity.setUserInfo(uis.getUserInfo());
      ose.saveOpportunity(opportunity);
    }
  }
  response.setReload(true);
}","public void assignToMe(ActionRequest request,ActionResponse response){
  if (request.getContext().get(""String_Node_Str"") != null) {
    Opportunity opportunity=Opportunity.find((Long)request.getContext().get(""String_Node_Str""));
    opportunity.setUserInfo(uis.getUserInfo());
    ose.saveOpportunity(opportunity);
  }
 else   if (!((List)request.getContext().get(""String_Node_Str"")).isEmpty()) {
    for (    Opportunity opportunity : Opportunity.filter(""String_Node_Str"",request.getContext().get(""String_Node_Str"")).fetch()) {
      opportunity.setUserInfo(uis.getUserInfo());
      ose.saveOpportunity(opportunity);
    }
  }
  response.setReload(true);
}"
59063,"@SuppressWarnings(""String_Node_Str"") public void showDuplicate(ActionRequest request,ActionResponse response){
  String object=(String)request.getContext().get(""String_Node_Str"");
  LOG.debug(""String_Node_Str"",object);
  MetaModel model=MetaModel.all_().filter(""String_Node_Str"",object).fetchOne();
  if (model == null) {
    response.setFlash(""String_Node_Str"");
    return;
  }
  String table=model.getTableName();
  LOG.debug(""String_Node_Str"",table);
  List<String> fieldList=new ArrayList<String>();
  List<String> joinList=new ArrayList<String>();
  for (  HashMap<String,Object> field : (List<HashMap<String,Object>>)request.getContext().get(""String_Node_Str"")) {
    if ((Boolean)field.get(""String_Node_Str"")) {
      String name=CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE,(String)field.get(""String_Node_Str""));
      fieldList.add(name);
      joinList.add(String.format(""String_Node_Str"",name,name));
    }
  }
  if (fieldList.isEmpty()) {
    response.setFlash(""String_Node_Str"");
    return;
  }
  String fields=Joiner.on(""String_Node_Str"").join(fieldList);
  LOG.debug(""String_Node_Str"",fields);
  LOG.debug(""String_Node_Str"",joinList);
  Query query=JPA.em().createNativeQuery(String.format(""String_Node_Str"",table,fields,table,fields,Joiner.on(""String_Node_Str"").join(joinList)));
  List<String> ids=new ArrayList<String>();
  for (  Object id : query.getResultList())   ids.add(id.toString());
  if (ids.isEmpty())   response.setFlash(""String_Node_Str"");
 else   response.setView(ActionView.define(""String_Node_Str"").model(object).add(""String_Node_Str"",""String_Node_Str"").add(""String_Node_Str"",""String_Node_Str"").domain(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(ids) + ""String_Node_Str"").map());
}","@SuppressWarnings(""String_Node_Str"") public void showDuplicate(ActionRequest request,ActionResponse response){
  String object=(String)request.getContext().get(""String_Node_Str"");
  LOG.debug(""String_Node_Str"",object);
  List<String> joinList=new ArrayList<String>();
  joinList.add(""String_Node_Str"");
  for (  HashMap<String,Object> field : (List<HashMap<String,Object>>)request.getContext().get(""String_Node_Str"")) {
    if ((Boolean)field.get(""String_Node_Str""))     joinList.add(""String_Node_Str"" + field.get(""String_Node_Str"") + ""String_Node_Str""+ field.get(""String_Node_Str""));
  }
  if (joinList.size() > 1) {
    LOG.debug(""String_Node_Str"",joinList);
    Query query=JPA.em().createQuery(""String_Node_Str"" + object + ""String_Node_Str""+ object+ ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(joinList));
    String ids=Joiner.on(""String_Node_Str"").join(query.getResultList());
    if (ids.isEmpty())     response.setFlash(""String_Node_Str"");
 else     response.setView(ActionView.define(""String_Node_Str"").model(object).domain(""String_Node_Str"" + ids + ""String_Node_Str"").map());
  }
 else   response.setFlash(""String_Node_Str"");
}"
59064,"public void updateCurrencyConversion(ActionRequest request,ActionResponse response){
  General general=request.getContext().asType(General.class);
  LocalDate today=gs.getTodayDate();
  for (  CurrencyConversionLine ccl : general.getCurrencyConversionLineList()) {
    CurrencyConversionLine cclCoverd=CurrencyConversionLine.all().filter(""String_Node_Str"",ccl.getStartCurrency(),ccl.getEndCurrency(),today).fetchOne();
    LOG.info(""String_Node_Str"",today,ccl);
    if (ccl.isSelected() && ccl.getToDate() == null & cclCoverd == null) {
      BigDecimal currentRate=ccs.convert(ccl.getStartCurrency(),ccl.getEndCurrency());
      if (currentRate.compareTo(new BigDecimal(-1)) == 0) {
        response.setFlash(""String_Node_Str"");
        break;
      }
      ccl=CurrencyConversionLine.find(ccl.getId());
      ccl.setToDate(today.minusDays(1));
      ccs.saveCurrencyConversionLine(ccl);
      BigDecimal previousRate=ccl.getExchangeRate();
      String variations=ccs.getVariations(currentRate,previousRate);
      ccs.createCurrencyConversionLine(ccl.getStartCurrency(),ccl.getEndCurrency(),today,currentRate,General.find(general.getId()),variations);
    }
  }
  response.setReload(true);
}","public void updateCurrencyConversion(ActionRequest request,ActionResponse response){
  General general=request.getContext().asType(General.class);
  LocalDate today=GeneralService.getTodayDate();
  for (  CurrencyConversionLine ccl : general.getCurrencyConversionLineList()) {
    CurrencyConversionLine cclCoverd=CurrencyConversionLine.all_().filter(""String_Node_Str"",ccl.getStartCurrency(),ccl.getEndCurrency(),today).fetchOne();
    LOG.info(""String_Node_Str"",today,ccl);
    if (ccl.isSelected() && ccl.getToDate() == null & cclCoverd == null) {
      BigDecimal currentRate=ccs.convert(ccl.getStartCurrency(),ccl.getEndCurrency());
      if (currentRate.compareTo(new BigDecimal(-1)) == 0) {
        response.setFlash(""String_Node_Str"");
        break;
      }
      ccl=CurrencyConversionLine.find(ccl.getId());
      ccl.setToDate(today.minusDays(1));
      ccs.saveCurrencyConversionLine(ccl);
      BigDecimal previousRate=ccl.getExchangeRate();
      String variations=ccs.getVariations(currentRate,previousRate);
      ccs.createCurrencyConversionLine(ccl.getStartCurrency(),ccl.getEndCurrency(),today,currentRate,General.find(general.getId()),variations);
    }
  }
  response.setReload(true);
}"
59065,"@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getSuppliers(){
  List<? extends Partner> customers=Partner.all_().filter(""String_Node_Str"",2,3,false).fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Partner supplier : customers) {
    ObjectNode objectNode=factory.objectNode();
    objectNode.put(""String_Node_Str"",supplier.getFullName());
    objectNode.put(""String_Node_Str"",supplier.getFixedPhone() != null ? supplier.getFixedPhone() : ""String_Node_Str"");
    if (supplier.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",supplier.getEmailAddress().getAddress());
    }
    if (supplier.getMainInvoicingAddress() != null) {
      Address address=supplier.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}","@Transactional @Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getSuppliers(){
  List<? extends Partner> customers=Partner.all_().filter(""String_Node_Str"",2,3,false).fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Partner supplier : customers) {
    ObjectNode objectNode=factory.objectNode();
    objectNode.put(""String_Node_Str"",supplier.getFullName());
    objectNode.put(""String_Node_Str"",supplier.getFixedPhone() != null ? supplier.getFixedPhone() : ""String_Node_Str"");
    if (supplier.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",supplier.getEmailAddress().getAddress());
    }
    if (supplier.getMainInvoicingAddress() != null) {
      Address address=supplier.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      address.save();
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}"
59066,"@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getCustomers(){
  List<? extends Partner> customers=Partner.all_().filter(""String_Node_Str"",3,false).fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Partner customer : customers) {
    ObjectNode objectNode=factory.objectNode();
    objectNode.put(""String_Node_Str"",customer.getFullName());
    objectNode.put(""String_Node_Str"",customer.getFixedPhone() != null ? customer.getFixedPhone() : ""String_Node_Str"");
    if (customer.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",customer.getEmailAddress().getAddress());
    }
    if (customer.getMainInvoicingAddress() != null) {
      Address address=customer.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}","@Transactional @Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getCustomers(){
  List<? extends Partner> customers=Partner.all_().filter(""String_Node_Str"",3,false).fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Partner customer : customers) {
    ObjectNode objectNode=factory.objectNode();
    objectNode.put(""String_Node_Str"",customer.getFullName());
    objectNode.put(""String_Node_Str"",customer.getFixedPhone() != null ? customer.getFixedPhone() : ""String_Node_Str"");
    if (customer.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",customer.getEmailAddress().getAddress());
    }
    if (customer.getMainInvoicingAddress() != null) {
      Address address=customer.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      address.save();
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}"
59067,"@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getOpportunities(){
  List<? extends Opportunity> opportunities=Opportunity.all_().fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Opportunity opportunity : opportunities) {
    Partner partner=opportunity.getPartner();
    if (partner == null)     continue;
    ObjectNode objectNode=factory.objectNode();
    String currencyCode=""String_Node_Str"";
    if (opportunity.getCurrency() != null) {
      currencyCode=opportunity.getCurrency().getCode();
    }
    String amtLabel=""String_Node_Str"";
    if (!Strings.isNullOrEmpty(I18n.get(""String_Node_Str""))) {
      amtLabel=I18n.get(""String_Node_Str"");
    }
    String amount=amtLabel + ""String_Node_Str"" + opportunity.getAmount()+ ""String_Node_Str""+ currencyCode;
    objectNode.put(""String_Node_Str"",opportunity.getName() + ""String_Node_Str"" + amount);
    objectNode.put(""String_Node_Str"",partner.getFixedPhone() != null ? partner.getFixedPhone() : ""String_Node_Str"");
    if (partner.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",partner.getEmailAddress().getAddress());
    }
    if (partner.getMainInvoicingAddress() != null) {
      Address address=partner.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}","@Transactional @Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getOpportunities(){
  List<? extends Opportunity> opportunities=Opportunity.all_().fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Opportunity opportunity : opportunities) {
    Partner partner=opportunity.getPartner();
    if (partner == null)     continue;
    ObjectNode objectNode=factory.objectNode();
    String currencyCode=""String_Node_Str"";
    if (opportunity.getCurrency() != null) {
      currencyCode=opportunity.getCurrency().getCode();
    }
    String amtLabel=""String_Node_Str"";
    if (!Strings.isNullOrEmpty(I18n.get(""String_Node_Str""))) {
      amtLabel=I18n.get(""String_Node_Str"");
    }
    String amount=amtLabel + ""String_Node_Str"" + opportunity.getAmount()+ ""String_Node_Str""+ currencyCode;
    objectNode.put(""String_Node_Str"",opportunity.getName() + ""String_Node_Str"" + amount);
    objectNode.put(""String_Node_Str"",partner.getFixedPhone() != null ? partner.getFixedPhone() : ""String_Node_Str"");
    if (partner.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",partner.getEmailAddress().getAddress());
    }
    if (partner.getMainInvoicingAddress() != null) {
      Address address=partner.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      address.save();
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}"
59068,"@Transactional private String makeAddressString(Address address,ObjectNode objectNode){
  BigDecimal latit=address.getLatit();
  BigDecimal longit=address.getLongit();
  if (BigDecimal.ZERO.compareTo(latit) == 0 || BigDecimal.ZERO.compareTo(longit) == 0) {
    String qString=address.getFullName();
    Map<String,Object> latlng=addressService.getMapGoogle(qString,latit,longit);
    latit=(BigDecimal)latlng.get(""String_Node_Str"");
    longit=(BigDecimal)latlng.get(""String_Node_Str"");
    address.setLatit(latit);
    address.setLongit(longit);
    address.save();
  }
  objectNode.put(""String_Node_Str"",latit);
  objectNode.put(""String_Node_Str"",longit);
  StringBuilder addressString=new StringBuilder();
  if (address.getAddressL2() != null) {
    addressString.append(address.getAddressL2() + ""String_Node_Str"");
  }
  if (address.getAddressL3() != null) {
    addressString.append(address.getAddressL3() + ""String_Node_Str"");
  }
  if (address.getAddressL4() != null) {
    addressString.append(address.getAddressL4() + ""String_Node_Str"");
  }
  if (address.getAddressL5() != null) {
    addressString.append(address.getAddressL5() + ""String_Node_Str"");
  }
  if (address.getAddressL6() != null) {
    addressString.append(address.getAddressL6());
  }
  if (address.getAddressL7Country() != null) {
    addressString=addressString.append(""String_Node_Str"" + address.getAddressL7Country().getName());
  }
  return addressString.toString();
}","private String makeAddressString(Address address,ObjectNode objectNode){
  BigDecimal latit=address.getLatit();
  BigDecimal longit=address.getLongit();
  if (BigDecimal.ZERO.compareTo(latit) == 0 || BigDecimal.ZERO.compareTo(longit) == 0) {
    String qString=address.getFullName();
    Map<String,Object> latlng=addressService.getMapGoogle(qString,latit,longit);
    latit=(BigDecimal)latlng.get(""String_Node_Str"");
    longit=(BigDecimal)latlng.get(""String_Node_Str"");
    address.setLatit(latit);
    address.setLongit(longit);
  }
  objectNode.put(""String_Node_Str"",latit);
  objectNode.put(""String_Node_Str"",longit);
  StringBuilder addressString=new StringBuilder();
  if (address.getAddressL2() != null) {
    addressString.append(address.getAddressL2() + ""String_Node_Str"");
  }
  if (address.getAddressL3() != null) {
    addressString.append(address.getAddressL3() + ""String_Node_Str"");
  }
  if (address.getAddressL4() != null) {
    addressString.append(address.getAddressL4() + ""String_Node_Str"");
  }
  if (address.getAddressL5() != null) {
    addressString.append(address.getAddressL5() + ""String_Node_Str"");
  }
  if (address.getAddressL6() != null) {
    addressString.append(address.getAddressL6());
  }
  if (address.getAddressL7Country() != null) {
    addressString=addressString.append(""String_Node_Str"" + address.getAddressL7Country().getName());
  }
  return addressString.toString();
}"
59069,"@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getPartners(){
  List<? extends Partner> customers=Partner.all_().filter(""String_Node_Str"",2,3,2,3,false).fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Partner partner : customers) {
    ObjectNode objectNode=factory.objectNode();
    objectNode.put(""String_Node_Str"",partner.getFullName());
    objectNode.put(""String_Node_Str"",partner.getFixedPhone() != null ? partner.getFixedPhone() : ""String_Node_Str"");
    if (partner.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",partner.getEmailAddress().getAddress());
    }
    if (partner.getMainInvoicingAddress() != null) {
      Address address=partner.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",partner.getCustomerTypeSelect() == 2 ? ""String_Node_Str"" : ""String_Node_Str"");
    String pinChar=partner.getCustomerTypeSelect() == 2 ? ""String_Node_Str"" : ""String_Node_Str"";
    if (partner.getSupplierTypeSelect() == 2 || partner.getSupplierTypeSelect() == 3) {
      pinChar=pinChar + ""String_Node_Str"";
    }
    objectNode.put(""String_Node_Str"",pinChar);
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}","@Transactional @Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getPartners(){
  List<? extends Partner> customers=Partner.all_().filter(""String_Node_Str"",2,3,2,3,false).fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Partner partner : customers) {
    ObjectNode objectNode=factory.objectNode();
    objectNode.put(""String_Node_Str"",partner.getFullName());
    objectNode.put(""String_Node_Str"",partner.getFixedPhone() != null ? partner.getFixedPhone() : ""String_Node_Str"");
    if (partner.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",partner.getEmailAddress().getAddress());
    }
    if (partner.getMainInvoicingAddress() != null) {
      Address address=partner.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      address.save();
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",partner.getCustomerTypeSelect() == 2 ? ""String_Node_Str"" : ""String_Node_Str"");
    String pinChar=partner.getCustomerTypeSelect() == 2 ? ""String_Node_Str"" : ""String_Node_Str"";
    if (partner.getSupplierTypeSelect() == 2 || partner.getSupplierTypeSelect() == 3) {
      pinChar=pinChar + ""String_Node_Str"";
    }
    objectNode.put(""String_Node_Str"",pinChar);
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}"
59070,"@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getProspects(){
  List<? extends Partner> customers=Partner.all_().filter(""String_Node_Str"",2,false).fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Partner prospect : customers) {
    ObjectNode objectNode=factory.objectNode();
    objectNode.put(""String_Node_Str"",prospect.getFullName());
    objectNode.put(""String_Node_Str"",prospect.getFixedPhone() != null ? prospect.getFixedPhone() : ""String_Node_Str"");
    if (prospect.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",prospect.getEmailAddress().getAddress());
    }
    if (prospect.getMainInvoicingAddress() != null) {
      Address address=prospect.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}","@Transactional @Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_JSON) public JsonNode getProspects(){
  List<? extends Partner> customers=Partner.all_().filter(""String_Node_Str"",2,false).fetch();
  JsonNodeFactory factory=JsonNodeFactory.instance;
  ObjectNode mainNode=factory.objectNode();
  ArrayNode arrayNode=factory.arrayNode();
  for (  Partner prospect : customers) {
    ObjectNode objectNode=factory.objectNode();
    objectNode.put(""String_Node_Str"",prospect.getFullName());
    objectNode.put(""String_Node_Str"",prospect.getFixedPhone() != null ? prospect.getFixedPhone() : ""String_Node_Str"");
    if (prospect.getEmailAddress() != null) {
      objectNode.put(""String_Node_Str"",prospect.getEmailAddress().getAddress());
    }
    if (prospect.getMainInvoicingAddress() != null) {
      Address address=prospect.getMainInvoicingAddress();
      String addressString=makeAddressString(address,objectNode);
      address.save();
      objectNode.put(""String_Node_Str"",addressString);
    }
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    objectNode.put(""String_Node_Str"",""String_Node_Str"");
    arrayNode.add(objectNode);
  }
  mainNode.put(""String_Node_Str"",0);
  mainNode.put(""String_Node_Str"",arrayNode);
  return mainNode;
}"
59071,"public Message generateMessage(Object object,long objectId,String model,String tag,Template template) throws ClassNotFoundException, InstantiationException, IllegalAccessException, AxelorException {
  LOG.debug(""String_Node_Str"" + model);
  LOG.debug(""String_Node_Str"" + tag);
  LOG.debug(""String_Node_Str"" + objectId);
  LOG.debug(""String_Node_Str"" + object);
  TemplateMaker maker=new TemplateMaker(new Locale(""String_Node_Str""),'$','$');
  TemplateMaker addressMaker=new TemplateMaker(new Locale(""String_Node_Str""),'$','$');
  Class<? extends Model> myClass=(Class<? extends Model>)Class.forName(model);
  maker.setContext(JPA.find(myClass.newInstance().getClass(),objectId),tag);
  addressMaker.setContext(JPA.find(myClass.newInstance().getClass(),objectId),tag);
  String content=""String_Node_Str"";
  String subject=""String_Node_Str"";
  String toRecipients=""String_Node_Str"";
  String ccRecipients=""String_Node_Str"";
  String bccRecipients=""String_Node_Str"";
  String addressBlock=""String_Node_Str"";
  int mediaTypeSelect;
  if (template.getContent() != null) {
    maker.setTemplate(template.getContent());
    content=maker.make();
  }
  if (template.getContent() != null) {
    addressMaker.setTemplate(template.getAddressBlock());
    addressBlock=addressMaker.make();
  }
  MailAccount mailAccount=mailAccountService.getDefaultMailAccount();
  content+=messageService.getSignature(mailAccount);
  if (template.getSubject() != null) {
    maker.setTemplate(template.getSubject());
    subject=maker.make();
  }
  if (template.getToRecipients() != null) {
    maker.setTemplate(template.getToRecipients());
    toRecipients=maker.make();
  }
  if (template.getCcRecipients() != null) {
    maker.setTemplate(template.getCcRecipients());
    ccRecipients=maker.make();
  }
  if (template.getBccRecipients() != null) {
    maker.setTemplate(template.getBccRecipients());
    bccRecipients=maker.make();
  }
  mediaTypeSelect=template.getMediaTypeSelect();
  String filePath=null;
  BirtTemplate birtTemplate=template.getBirtTemplate();
  if (birtTemplate != null) {
    filePath=this.generatePdfFile(maker,birtTemplate.getName(),birtTemplate.getTemplateLink(),birtTemplate.getGeneratedFilePath(),birtTemplate.getFormat(),birtTemplate.getBirtTemplateParameterList());
  }
  if (filePath == null) {
    filePath=template.getFilePath();
  }
  JPA.clear();
  Message message=messageService.createMessage(model,new Long(objectId).intValue(),subject,content,this.getEmailAddress(toRecipients),this.getEmailAddress(ccRecipients),this.getEmailAddress(bccRecipients),mailAccount,filePath,addressBlock,mediaTypeSelect);
  return message;
}","public Message generateMessage(Object object,long objectId,String model,String tag,Template template) throws ClassNotFoundException, InstantiationException, IllegalAccessException, AxelorException {
  LOG.debug(""String_Node_Str"" + model);
  LOG.debug(""String_Node_Str"" + tag);
  LOG.debug(""String_Node_Str"" + objectId);
  LOG.debug(""String_Node_Str"" + object);
  TemplateMaker maker=new TemplateMaker(new Locale(""String_Node_Str""),'$','$');
  TemplateMaker addressMaker=new TemplateMaker(new Locale(""String_Node_Str""),'$','$');
  Class<? extends Model> myClass=(Class<? extends Model>)Class.forName(model);
  maker.setContext(JPA.find(myClass.newInstance().getClass(),objectId),tag);
  addressMaker.setContext(JPA.find(myClass.newInstance().getClass(),objectId),tag);
  String content=""String_Node_Str"";
  String subject=""String_Node_Str"";
  String toRecipients=""String_Node_Str"";
  String ccRecipients=""String_Node_Str"";
  String bccRecipients=""String_Node_Str"";
  String addressBlock=""String_Node_Str"";
  int mediaTypeSelect;
  if (template.getContent() != null) {
    maker.setTemplate(template.getContent());
    content=maker.make();
  }
  if (template.getAddressBlock() != null) {
    addressMaker.setTemplate(template.getAddressBlock());
    addressBlock=addressMaker.make();
  }
  MailAccount mailAccount=mailAccountService.getDefaultMailAccount();
  content+=messageService.getSignature(mailAccount);
  if (template.getSubject() != null) {
    maker.setTemplate(template.getSubject());
    subject=maker.make();
  }
  if (template.getToRecipients() != null) {
    maker.setTemplate(template.getToRecipients());
    toRecipients=maker.make();
  }
  if (template.getCcRecipients() != null) {
    maker.setTemplate(template.getCcRecipients());
    ccRecipients=maker.make();
  }
  if (template.getBccRecipients() != null) {
    maker.setTemplate(template.getBccRecipients());
    bccRecipients=maker.make();
  }
  mediaTypeSelect=template.getMediaTypeSelect();
  String filePath=null;
  BirtTemplate birtTemplate=template.getBirtTemplate();
  if (birtTemplate != null) {
    filePath=this.generatePdfFile(maker,birtTemplate.getName(),birtTemplate.getTemplateLink(),birtTemplate.getGeneratedFilePath(),birtTemplate.getFormat(),birtTemplate.getBirtTemplateParameterList());
  }
  if (filePath == null) {
    filePath=template.getFilePath();
  }
  JPA.clear();
  Message message=messageService.createMessage(model,new Long(objectId).intValue(),subject,content,this.getEmailAddress(toRecipients),this.getEmailAddress(ccRecipients),this.getEmailAddress(bccRecipients),mailAccount,filePath,addressBlock,mediaTypeSelect);
  return message;
}"
59072,"public PurchaseOrderSupplierLine create(Partner supplierPartner){
  return new PurchaseOrderSupplierLine(IPurchaseOrderSupplierLine.REQUESTED,supplierPartner);
}","public PurchaseOrderSupplierLine create(Partner supplierPartner,BigDecimal price){
  return new PurchaseOrderSupplierLine(price,IPurchaseOrderSupplierLine.REQUESTED,supplierPartner);
}"
59073,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void createPurchaseOrder(Partner supplierPartner,List<PurchaseOrderLine> purchaseOrderLineList,PurchaseOrder parentPurchaseOrder) throws AxelorException {
  LOG.debug(""String_Node_Str"",new Object[]{parentPurchaseOrder.getPurchaseOrderSeq(),supplierPartner.getFullName()});
  PurchaseOrder purchaseOrder=purchaseOrderService.createPurchaseOrder(parentPurchaseOrder.getProject(),user,parentPurchaseOrder.getCompany(),null,supplierPartner.getCurrency(),null,parentPurchaseOrder.getPurchaseOrderSeq(),parentPurchaseOrder.getExternalReference(),parentPurchaseOrder.getInvoicingTypeSelect(),purchaseOrderService.getLocation(parentPurchaseOrder.getCompany()),today,PriceList.all().filter(""String_Node_Str"",supplierPartner).fetchOne(),supplierPartner);
  purchaseOrder.setParentPurchaseOrder(parentPurchaseOrder);
  for (  PurchaseOrderLine purchaseOrderLine : purchaseOrderLineList) {
    purchaseOrder.addPurchaseOrderLineListItem(this.createPurchaseOrderLine(purchaseOrder,purchaseOrderLine));
  }
  purchaseOrderService.computePurchaseOrder(purchaseOrder);
  purchaseOrder.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void createPurchaseOrder(Partner supplierPartner,List<PurchaseOrderLine> purchaseOrderLineList,PurchaseOrder parentPurchaseOrder) throws AxelorException {
  LOG.debug(""String_Node_Str"",new Object[]{parentPurchaseOrder.getPurchaseOrderSeq(),supplierPartner.getFullName()});
  PurchaseOrder purchaseOrder=purchaseOrderService.createPurchaseOrder(parentPurchaseOrder.getProject(),user,parentPurchaseOrder.getCompany(),null,supplierPartner.getCurrency(),null,parentPurchaseOrder.getPurchaseOrderSeq(),parentPurchaseOrder.getExternalReference(),parentPurchaseOrder.getInvoicingTypeSelect(),purchaseOrderService.getLocation(parentPurchaseOrder.getCompany()),today,PriceList.all().filter(""String_Node_Str"",supplierPartner).fetchOne(),supplierPartner);
  purchaseOrder.setParentPurchaseOrder(parentPurchaseOrder);
  for (  PurchaseOrderLine purchaseOrderLine : purchaseOrderLineList) {
    purchaseOrder.addPurchaseOrderLineListItem(this.createPurchaseOrderLine(purchaseOrder,purchaseOrderLine));
  }
  purchaseOrderService.computePurchaseOrder(purchaseOrder);
  purchaseOrder.setStatusSelect(IPurchaseOrder.STATUS_RECEIVED);
  purchaseOrder.save();
}"
59074,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void generateSuppliersRequests(PurchaseOrderLine purchaseOrderLine){
  Product product=purchaseOrderLine.getProduct();
  if (product != null && product.getSupplierCatalogList() != null) {
    for (    SupplierCatalog supplierCatalog : product.getSupplierCatalogList()) {
      purchaseOrderLine.addPurchaseOrderSupplierLineListItem(purchaseOrderSupplierLineService.create(supplierCatalog.getSupplierPartner()));
    }
  }
  purchaseOrderLine.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void generateSuppliersRequests(PurchaseOrderLine purchaseOrderLine){
  Product product=purchaseOrderLine.getProduct();
  if (product != null && product.getSupplierCatalogList() != null) {
    for (    SupplierCatalog supplierCatalog : product.getSupplierCatalogList()) {
      purchaseOrderLine.addPurchaseOrderSupplierLineListItem(purchaseOrderSupplierLineService.create(supplierCatalog.getSupplierPartner(),supplierCatalog.getPrice()));
    }
  }
  purchaseOrderLine.save();
}"
59075,"protected void checkInvoiceDate() throws AxelorException {
  if (Invoice.all().filter(""String_Node_Str"",invoice.getInvoiceDate(),invoice.getOperationTypeSelect()).count() > 0) {
    throw new AxelorException(String.format(""String_Node_Str""),IException.CONFIGURATION_ERROR);
  }
}","protected void checkInvoiceDate() throws AxelorException {
  if (Invoice.filter(""String_Node_Str"",invoice.getInvoiceDate(),invoice.getOperationTypeSelect()).count() > 0) {
    throw new AxelorException(String.format(""String_Node_Str""),IException.CONFIGURATION_ERROR);
  }
}"
59076,"/** 
 * Confirms the payment voucher if the selected lines PiToPay 2nd O2M belongs to different companies -> error I - Payment with an amount If we pay a classical moveLine (invoice, reject ..) -> just create a payment If we pay a schedule 2 payments are created 1st reconciled with the invoice and the second reconciled with the schedule II - Payment with an excess Payment If we pay a moveLine having the same account, we just reconcile If we pay a with different account -> 1- switch money to the good account 2- reconcile then
 * @param paymentVoucher
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void confirmPaymentVoucher(PaymentVoucher paymentVoucher,boolean updateCustomerAccount) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  paymentVoucherSequenceService.setReference(paymentVoucher);
  Partner payerPartner=paymentVoucher.getPartner();
  PaymentMode paymentMode=paymentVoucher.getPaymentMode();
  Company company=paymentVoucher.getCompany();
  Journal journal=paymentMode.getBankJournal();
  LocalDate paymentDate=paymentVoucher.getPaymentDateTime().toLocalDate();
  boolean scheduleToBePaid=false;
  Account paymentModeAccount=paymentModeService.getCompanyAccount(paymentMode,company);
  paymentVoucherControlService.checkPaymentVoucherField(paymentVoucher,company,paymentModeAccount,journal);
  if (paymentVoucher.getRemainingAmount().compareTo(BigDecimal.ZERO) > 0 && !journal.getExcessPaymentOk()) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.INCONSISTENCY);
  }
  if (paymentVoucher.getPayboxPaidOk()) {
    paymentVoucherControlService.checkPayboxAmount(paymentVoucher);
  }
  Currency currencyToPay=null;
  boolean allRight=paymentVoucherControlService.checkIfSameAccount(paymentVoucher.getPaymentInvoiceToPayList(),paymentVoucher.getMoveLine());
  LOG.debug(""String_Node_Str"",allRight);
  if (allRight) {
    scheduleToBePaid=this.toPayWithExcessPayment(paymentVoucher.getPaymentInvoiceToPayList(),paymentVoucher.getMoveLine(),scheduleToBePaid,paymentDate);
  }
  if (paymentVoucher.getMoveLine() == null || (paymentVoucher.getMoveLine() != null && !allRight) || (scheduleToBePaid && !allRight && paymentVoucher.getMoveLine() != null)) {
    PaymentScheduleLine lastPaymentScheduleLine=null;
    Move move=moveService.createMove(paymentVoucher.getPaymentMode().getBankJournal(),company,null,payerPartner,paymentDate,paymentMode,false,paymentVoucher.getCashRegister());
    move.setPaymentVoucher(paymentVoucher);
    paymentVoucher.setGeneratedMove(move);
    BigDecimal paidLineTotal=BigDecimal.ZERO;
    int moveLineNo=1;
    boolean isDebitToPay=paymentVoucherToolService.isDebitToPay(paymentVoucher);
    for (    PaymentInvoiceToPay paymentInvoiceToPay : this.getPaymentInvoiceToPayList(paymentVoucher)) {
      MoveLine moveLineToPay=paymentInvoiceToPay.getMoveLine();
      LOG.debug(""String_Node_Str"",moveLineToPay.getDebit());
      LOG.debug(""String_Node_Str"",moveLineToPay.getAmountPaid());
      BigDecimal amountToPay=this.getAmountCurrencyConverted(moveLineToPay,paymentVoucher,paymentInvoiceToPay.getAmountToPay());
      if (amountToPay.compareTo(BigDecimal.ZERO) > 0) {
        paidLineTotal=paidLineTotal.add(amountToPay);
        this.payMoveLine(move,moveLineNo,payerPartner,moveLineToPay,amountToPay,paymentInvoiceToPay,isDebitToPay,paymentDate,updateCustomerAccount);
        moveLineNo+=1;
      }
    }
    MoveLine moveLine=null;
    if (paymentVoucher.getMoveLine() != null) {
      moveLine=moveLineService.createMoveLine(move,paymentVoucher.getPartner(),paymentVoucher.getMoveLine().getAccount(),paymentVoucher.getPaidAmount(),isDebitToPay,false,paymentDate,moveLineNo,null);
      Reconcile reconcile=reconcileService.createReconcile(moveLine,paymentVoucher.getMoveLine(),moveLine.getDebit(),!isDebitToPay);
      reconcileService.confirmReconcile(reconcile,updateCustomerAccount);
    }
 else {
      moveLine=moveLineService.createMoveLine(move,payerPartner,paymentModeAccount,paymentVoucher.getPaidAmount(),isDebitToPay,false,paymentDate,moveLineNo,null);
    }
    move.getMoveLineList().add(moveLine);
    if (paymentVoucher.getPaidAmount().compareTo(paidLineTotal) > 0) {
      BigDecimal remainingPaidAmount=paymentVoucher.getRemainingAmount();
      moveLine=moveLineService.createMoveLine(move,paymentVoucher.getPartner(),company.getAccountConfig().getCustomerAccount(),remainingPaidAmount,!isDebitToPay,false,paymentDate,moveLineNo++,null);
      move.getMoveLineList().add(moveLine);
      if (lastPaymentScheduleLine == null || paymentScheduleService.isLastSchedule(lastPaymentScheduleLine)) {
        if (isDebitToPay) {
          reconcileService.balanceCredit(moveLine,company,updateCustomerAccount);
        }
      }
    }
    moveService.validateMove(move);
    paymentVoucher.setGeneratedMove(move);
  }
  paymentVoucher.setStateSelect(IPaymentVoucher.STATE_CONFIRMED);
  paymentVoucherSequenceService.setReceiptNo(paymentVoucher,company,journal);
  paymentVoucher.save();
}","/** 
 * Confirms the payment voucher if the selected lines PiToPay 2nd O2M belongs to different companies -> error I - Payment with an amount If we pay a classical moveLine (invoice, reject ..) -> just create a payment If we pay a schedule 2 payments are created 1st reconciled with the invoice and the second reconciled with the schedule II - Payment with an excess Payment If we pay a moveLine having the same account, we just reconcile If we pay a with different account -> 1- switch money to the good account 2- reconcile then
 * @param paymentVoucher
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void confirmPaymentVoucher(PaymentVoucher paymentVoucher,boolean updateCustomerAccount) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  paymentVoucherSequenceService.setReference(paymentVoucher);
  Partner payerPartner=paymentVoucher.getPartner();
  PaymentMode paymentMode=paymentVoucher.getPaymentMode();
  Company company=paymentVoucher.getCompany();
  Journal journal=paymentMode.getBankJournal();
  LocalDate paymentDate=paymentVoucher.getPaymentDateTime().toLocalDate();
  boolean scheduleToBePaid=false;
  Account paymentModeAccount=paymentModeService.getCompanyAccount(paymentMode,company);
  paymentVoucherControlService.checkPaymentVoucherField(paymentVoucher,company,paymentModeAccount,journal);
  if (paymentVoucher.getRemainingAmount().compareTo(BigDecimal.ZERO) > 0 && !journal.getExcessPaymentOk()) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.INCONSISTENCY);
  }
  if (paymentVoucher.getPayboxPaidOk()) {
    paymentVoucherControlService.checkPayboxAmount(paymentVoucher);
  }
  Currency currencyToPay=null;
  boolean allRight=paymentVoucherControlService.checkIfSameAccount(paymentVoucher.getPaymentInvoiceToPayList(),paymentVoucher.getMoveLine());
  LOG.debug(""String_Node_Str"",allRight);
  if (allRight) {
    scheduleToBePaid=this.toPayWithExcessPayment(paymentVoucher.getPaymentInvoiceToPayList(),paymentVoucher.getMoveLine(),scheduleToBePaid,paymentDate);
  }
  if (paymentVoucher.getMoveLine() == null || (paymentVoucher.getMoveLine() != null && !allRight) || (scheduleToBePaid && !allRight && paymentVoucher.getMoveLine() != null)) {
    Move move=moveService.createMove(paymentVoucher.getPaymentMode().getBankJournal(),company,null,payerPartner,paymentDate,paymentMode,false,paymentVoucher.getCashRegister());
    move.setPaymentVoucher(paymentVoucher);
    paymentVoucher.setGeneratedMove(move);
    BigDecimal paidLineTotal=BigDecimal.ZERO;
    int moveLineNo=1;
    boolean isDebitToPay=paymentVoucherToolService.isDebitToPay(paymentVoucher);
    for (    PaymentInvoiceToPay paymentInvoiceToPay : this.getPaymentInvoiceToPayList(paymentVoucher)) {
      MoveLine moveLineToPay=paymentInvoiceToPay.getMoveLine();
      LOG.debug(""String_Node_Str"",moveLineToPay.getDebit());
      LOG.debug(""String_Node_Str"",moveLineToPay.getAmountPaid());
      BigDecimal amountToPay=this.getAmountCurrencyConverted(moveLineToPay,paymentVoucher,paymentInvoiceToPay.getAmountToPay());
      if (amountToPay.compareTo(BigDecimal.ZERO) > 0) {
        paidLineTotal=paidLineTotal.add(amountToPay);
        this.payMoveLine(move,moveLineNo,payerPartner,moveLineToPay,amountToPay,paymentInvoiceToPay,isDebitToPay,paymentDate,updateCustomerAccount);
        moveLineNo+=1;
      }
    }
    MoveLine moveLine=null;
    if (paymentVoucher.getMoveLine() != null) {
      moveLine=moveLineService.createMoveLine(move,paymentVoucher.getPartner(),paymentVoucher.getMoveLine().getAccount(),paymentVoucher.getPaidAmount(),isDebitToPay,false,paymentDate,moveLineNo,null);
      Reconcile reconcile=reconcileService.createReconcile(moveLine,paymentVoucher.getMoveLine(),moveLine.getDebit(),!isDebitToPay);
      reconcileService.confirmReconcile(reconcile,updateCustomerAccount);
    }
 else {
      moveLine=moveLineService.createMoveLine(move,payerPartner,paymentModeAccount,paymentVoucher.getPaidAmount(),isDebitToPay,false,paymentDate,moveLineNo,null);
    }
    move.getMoveLineList().add(moveLine);
    if (paymentVoucher.getPaidAmount().compareTo(paidLineTotal) > 0) {
      BigDecimal remainingPaidAmount=paymentVoucher.getRemainingAmount();
      moveLine=moveLineService.createMoveLine(move,paymentVoucher.getPartner(),company.getAccountConfig().getCustomerAccount(),remainingPaidAmount,!isDebitToPay,false,paymentDate,moveLineNo++,null);
      move.getMoveLineList().add(moveLine);
      if (isDebitToPay) {
        reconcileService.balanceCredit(moveLine,company,updateCustomerAccount);
      }
    }
    moveService.validateMove(move);
    paymentVoucher.setGeneratedMove(move);
  }
  paymentVoucher.setStateSelect(IPaymentVoucher.STATE_CONFIRMED);
  paymentVoucherSequenceService.setReceiptNo(paymentVoucher,company,journal);
  paymentVoucher.save();
}"
59077,"/** 
 * Procédure permettant de vérifier le remplissage et le bon contenu des champs de la saisie paiement et de la société
 * @param paymentVoucher Une saisie paiement
 * @param company Une société
 * @param paymentModeAccount Le compte de trésoreie du mode de règlement
 * @throws AxelorException
 */
public void checkPaymentVoucherField(PaymentVoucher paymentVoucher,Company company,Account paymentModeAccount,Journal journal) throws AxelorException {
  if (paymentVoucher.getRemainingAmount().compareTo(BigDecimal.ZERO) < 0) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),paymentVoucher.getRef()),IException.INCONSISTENCY);
  }
  if (!paymentVoucher.getAutoOk() && (paymentVoucher.getPaymentInvoiceToPayList() == null || paymentVoucher.getPaymentInvoiceToPayList().size() == 0)) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.INCONSISTENCY);
  }
  accountConfigService.getCustomerAccount(accountConfigService.getAccountConfig(company));
  if (journal == null || paymentModeAccount == null) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.CONFIGURATION_ERROR);
  }
  if (journal.getEditReceiptOk()) {
    paymentVoucherSequenceService.checkReceipt(paymentVoucher);
  }
}","/** 
 * Procédure permettant de vérifier le remplissage et le bon contenu des champs de la saisie paiement et de la société
 * @param paymentVoucher Une saisie paiement
 * @param company Une société
 * @param paymentModeAccount Le compte de trésoreie du mode de règlement
 * @throws AxelorException
 */
public void checkPaymentVoucherField(PaymentVoucher paymentVoucher,Company company,Account paymentModeAccount,Journal journal) throws AxelorException {
  if (paymentVoucher.getRemainingAmount().compareTo(BigDecimal.ZERO) < 0) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),paymentVoucher.getRef()),IException.INCONSISTENCY);
  }
  if (!paymentVoucher.getHasAutoInput() && (paymentVoucher.getPaymentInvoiceToPayList() == null || paymentVoucher.getPaymentInvoiceToPayList().size() == 0)) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.INCONSISTENCY);
  }
  accountConfigService.getCustomerAccount(accountConfigService.getAccountConfig(company));
  if (journal == null || paymentModeAccount == null) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.CONFIGURATION_ERROR);
  }
  if (journal.getEditReceiptOk()) {
    paymentVoucherSequenceService.checkReceipt(paymentVoucher);
  }
}"
59078,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public PaymentVoucher createPaymentVoucherIPO(Invoice invoice,DateTime dateTime,BigDecimal amount,PaymentMode paymentMode) throws AxelorException {
  MoveLine customerMoveLine=moveService.getCustomerMoveLineByQuery(invoice);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getInvoiceId());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",paymentMode.getCode());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getCompany().getName());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getPartner().getName());
  }
  PaymentVoucher paymentVoucher=this.createPaymentVoucher(invoice.getCompany(),null,null,paymentMode,dateTime,invoice.getPartner(),amount,null,invoice,null,null,null);
  paymentVoucher.setAutoOk(true);
  List<PaymentInvoiceToPay> lines=new ArrayList<PaymentInvoiceToPay>();
  lines.add(paymentInvoiceToPayService.createPaymentInvoiceToPay(paymentVoucher,1,invoice,customerMoveLine,customerMoveLine.getDebit(),customerMoveLine.getAmountRemaining(),amount));
  paymentVoucher.setPaymentInvoiceToPayList(lines);
  paymentVoucher.save();
  paymentVoucherConfirmService.confirmPaymentVoucher(paymentVoucher,false);
  return paymentVoucher;
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public PaymentVoucher createPaymentVoucherIPO(Invoice invoice,DateTime dateTime,BigDecimal amount,PaymentMode paymentMode) throws AxelorException {
  MoveLine customerMoveLine=moveService.getCustomerMoveLineByQuery(invoice);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getInvoiceId());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",paymentMode.getCode());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getCompany().getName());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getPartner().getName());
  }
  PaymentVoucher paymentVoucher=this.createPaymentVoucher(invoice.getCompany(),null,null,paymentMode,dateTime,invoice.getPartner(),amount,null,invoice,null,null,null);
  paymentVoucher.setHasAutoInput(true);
  List<PaymentInvoiceToPay> lines=new ArrayList<PaymentInvoiceToPay>();
  lines.add(paymentInvoiceToPayService.createPaymentInvoiceToPay(paymentVoucher,1,invoice,customerMoveLine,customerMoveLine.getDebit(),customerMoveLine.getAmountRemaining(),amount));
  paymentVoucher.setPaymentInvoiceToPayList(lines);
  paymentVoucher.save();
  paymentVoucherConfirmService.confirmPaymentVoucher(paymentVoucher,false);
  return paymentVoucher;
}"
59079,"/** 
 * Allows to load selected lines (from 1st 02M) to the 2nd O2M and dispatching amounts according to amountRemainnig for the loaded move and the paid amount remaining of the paymentVoucher 
 * @param paymentVoucher
 * @param paymentVoucherContext
 * @return 
 * @return 
 * @return values Map of data
 * @throws AxelorException 
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public PaymentVoucher loadSelectedLines(PaymentVoucher paymentVoucher,PaymentVoucher paymentVoucherContext) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  List<PaymentInvoice> newPiList=Lists.newArrayList();
  if (paymentVoucherContext.getPaymentInvoiceList() != null) {
    List<PaymentInvoiceToPay> piToPayLine=new ArrayList<PaymentInvoiceToPay>();
    BigDecimal paidAmount=BigDecimal.ZERO;
    if (paymentVoucherContext.getPaidAmount() == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.MISSING_FIELD);
    }
 else {
      paidAmount=paymentVoucherContext.getPaidAmount();
      BigDecimal amountToPay=BigDecimal.ZERO;
      int lineSeq=1;
      List<PaymentInvoice> pilSelected=new ArrayList<PaymentInvoice>();
      for (      PaymentInvoice pilContext : paymentVoucherContext.getPaymentInvoiceList()) {
        PaymentInvoice paymentInvoiceFromContext=PaymentInvoice.find(pilContext.getId());
        LOG.debug(""String_Node_Str"",paymentInvoiceFromContext);
        LOG.debug(""String_Node_Str"",pilContext.isSelected());
        if (pilContext.isSelected()) {
          pilSelected.add(paymentInvoiceFromContext);
        }
 else {
          PaymentInvoice paymentInvoice=new PaymentInvoice();
          if (paymentInvoiceFromContext.getMoveLine() != null) {
            paymentInvoice.setMoveLine(paymentInvoiceFromContext.getMoveLine());
          }
          paymentInvoice.setInvoiceAmount(paymentInvoiceFromContext.getInvoiceAmount());
          paymentInvoice.setPaidAmount(paymentInvoiceFromContext.getPaidAmount());
          paymentInvoice.setPaymentVoucher(paymentInvoiceFromContext.getPaymentVoucher());
          newPiList.add(paymentInvoice);
        }
      }
      paymentVoucher.getPaymentInvoiceList().clear();
      paymentVoucher.getPaymentInvoiceToPayList().clear();
      if (pilSelected != null && !pilSelected.isEmpty()) {
        if (paymentVoucherContext.getPaymentInvoiceToPayList() != null) {
          for (          PaymentInvoiceToPay pToPay : paymentVoucherContext.getPaymentInvoiceToPayList()) {
            PaymentInvoiceToPay piToPayFromContext=PaymentInvoiceToPay.find(pToPay.getId());
            PaymentInvoiceToPay piToPayOld=new PaymentInvoiceToPay();
            piToPayOld.setSequence(piToPayFromContext.getSequence());
            piToPayOld.setMoveLine(piToPayFromContext.getMoveLine());
            if (piToPayFromContext.getMoveLine() != null && piToPayFromContext.getMoveLine().getId() != null) {
              piToPayOld.setMoveLine(piToPayFromContext.getMoveLine());
            }
            piToPayOld.setTotalAmount(piToPayFromContext.getTotalAmount());
            piToPayOld.setRemainingAmount(piToPayFromContext.getRemainingAmount());
            piToPayOld.setAmountToPay(piToPayFromContext.getAmountToPay());
            piToPayOld.setPaymentVoucher(piToPayFromContext.getPaymentVoucher());
            piToPayLine.add(piToPayOld);
            if (paidAmount.compareTo(BigDecimal.ZERO) > 0) {
              paidAmount=paidAmount.subtract(piToPayFromContext.getAmountToPay());
            }
            lineSeq+=1;
          }
        }
        LOG.debug(""String_Node_Str"",piToPayLine);
        LOG.debug(""String_Node_Str"",pilSelected.size());
        for (        PaymentInvoice pil : pilSelected) {
          PaymentInvoiceToPay piToPay=new PaymentInvoiceToPay();
          MoveLine moveLine=pil.getMoveLine();
          Move move=moveLine.getMove();
          BigDecimal amountRemainingConverted=null;
          if (move.getInvoice() != null) {
            amountRemainingConverted=currencyService.getAmountCurrencyConverted(move.getInvoice().getCurrency(),paymentVoucher.getCurrency(),pil.getInvoiceAmount().subtract(pil.getPaidAmount()),paymentVoucher.getPaymentDateTime().toLocalDate());
            piToPay.setCurrency(move.getInvoice().getCurrency());
          }
 else {
            amountRemainingConverted=currencyService.getAmountCurrencyConverted(move.getCurrency(),paymentVoucher.getCurrency(),pil.getInvoiceAmount().subtract(pil.getPaidAmount()),paymentVoucher.getPaymentDateTime().toLocalDate());
            piToPay.setCurrency(move.getCurrency());
          }
          amountToPay=paidAmount.min(amountRemainingConverted);
          piToPay.setSequence(lineSeq);
          piToPay.setMoveLine(moveLine);
          piToPay.setTotalAmount(pil.getInvoiceAmount());
          piToPay.setRemainingAmount(pil.getInvoiceAmount().subtract(pil.getPaidAmount()));
          piToPay.setAmountToPay(amountToPay);
          piToPay.setPaymentVoucher(paymentVoucher);
          piToPayLine.add(piToPay);
          paidAmount=paidAmount.subtract(amountToPay);
          lineSeq+=1;
        }
      }
      if (piToPayLine != null && !piToPayLine.isEmpty()) {
        paymentVoucher.getPaymentInvoiceToPayList().addAll(piToPayLine);
      }
      paymentVoucher.getPaymentInvoiceList().addAll(newPiList);
    }
  }
  paymentVoucher.save();
  LOG.debug(""String_Node_Str"");
  return paymentVoucher;
}","/** 
 * Allows to load selected lines (from 1st 02M) to the 2nd O2M and dispatching amounts according to amountRemainnig for the loaded move and the paid amount remaining of the paymentVoucher 
 * @param paymentVoucher
 * @param paymentVoucherContext
 * @return 
 * @return 
 * @return values Map of data
 * @throws AxelorException 
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public PaymentVoucher loadSelectedLines(PaymentVoucher paymentVoucher,PaymentVoucher paymentVoucherContext) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  List<PaymentInvoice> newPiList=Lists.newArrayList();
  if (paymentVoucherContext.getPaymentInvoiceList() != null) {
    List<PaymentInvoiceToPay> piToPayLine=new ArrayList<PaymentInvoiceToPay>();
    BigDecimal paidAmount=BigDecimal.ZERO;
    if (paymentVoucherContext.getPaidAmount() == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.MISSING_FIELD);
    }
 else {
      paidAmount=paymentVoucherContext.getPaidAmount();
      BigDecimal amountToPay=BigDecimal.ZERO;
      int lineSeq=1;
      List<PaymentInvoice> paymentInvoiceSelectedList=new ArrayList<PaymentInvoice>();
      for (      PaymentInvoice pilContext : paymentVoucherContext.getPaymentInvoiceList()) {
        PaymentInvoice paymentInvoiceFromContext=PaymentInvoice.find(pilContext.getId());
        LOG.debug(""String_Node_Str"",paymentInvoiceFromContext);
        LOG.debug(""String_Node_Str"",pilContext.isSelected());
        if (pilContext.isSelected()) {
          paymentInvoiceSelectedList.add(paymentInvoiceFromContext);
        }
 else {
          PaymentInvoice paymentInvoice=new PaymentInvoice();
          if (paymentInvoiceFromContext.getMoveLine() != null) {
            paymentInvoice.setMoveLine(paymentInvoiceFromContext.getMoveLine());
          }
          paymentInvoice.setInvoiceAmount(paymentInvoiceFromContext.getInvoiceAmount());
          paymentInvoice.setPaidAmount(paymentInvoiceFromContext.getPaidAmount());
          paymentInvoice.setPaymentVoucher(paymentInvoiceFromContext.getPaymentVoucher());
          newPiList.add(paymentInvoice);
        }
      }
      paymentVoucher.getPaymentInvoiceList().clear();
      paymentVoucher.getPaymentInvoiceToPayList().clear();
      if (paymentInvoiceSelectedList != null && !paymentInvoiceSelectedList.isEmpty()) {
        if (paymentVoucherContext.getPaymentInvoiceToPayList() != null) {
          for (          PaymentInvoiceToPay pToPay : paymentVoucherContext.getPaymentInvoiceToPayList()) {
            PaymentInvoiceToPay piToPayFromContext=PaymentInvoiceToPay.find(pToPay.getId());
            PaymentInvoiceToPay piToPayOld=new PaymentInvoiceToPay();
            piToPayOld.setSequence(piToPayFromContext.getSequence());
            piToPayOld.setMoveLine(piToPayFromContext.getMoveLine());
            if (piToPayFromContext.getMoveLine() != null && piToPayFromContext.getMoveLine().getId() != null) {
              piToPayOld.setMoveLine(piToPayFromContext.getMoveLine());
            }
            piToPayOld.setTotalAmount(piToPayFromContext.getTotalAmount());
            piToPayOld.setRemainingAmount(piToPayFromContext.getRemainingAmount());
            piToPayOld.setAmountToPay(piToPayFromContext.getAmountToPay());
            piToPayOld.setPaymentVoucher(piToPayFromContext.getPaymentVoucher());
            piToPayLine.add(piToPayOld);
            if (paidAmount.compareTo(BigDecimal.ZERO) > 0) {
              paidAmount=paidAmount.subtract(piToPayFromContext.getAmountToPay());
            }
            lineSeq+=1;
          }
        }
        LOG.debug(""String_Node_Str"",piToPayLine);
        LOG.debug(""String_Node_Str"",paymentInvoiceSelectedList.size());
        for (        PaymentInvoice paymentInvoice : paymentInvoiceSelectedList) {
          PaymentInvoiceToPay paymentInvoiceToPay=new PaymentInvoiceToPay();
          MoveLine moveLine=paymentInvoice.getMoveLine();
          Move move=moveLine.getMove();
          BigDecimal amountRemainingConverted=null;
          paymentInvoiceToPay.setSequence(lineSeq);
          paymentInvoiceToPay.setMoveLine(moveLine);
          paymentInvoiceToPay.setTotalAmount(paymentInvoice.getInvoiceAmount());
          paymentInvoiceToPay.setRemainingAmount(paymentInvoice.getInvoiceAmount().subtract(paymentInvoice.getPaidAmount()));
          paymentInvoiceToPay.setPaymentVoucher(paymentVoucher);
          if (move.getInvoice() != null) {
            paymentInvoiceToPay.setCurrency(move.getInvoice().getCurrency());
          }
 else {
            paymentInvoiceToPay.setCurrency(move.getCurrency());
          }
          BigDecimal paidAmountConverted=currencyService.getAmountCurrencyConverted(paymentVoucher.getCurrency(),paymentInvoiceToPay.getCurrency(),paymentInvoiceToPay.getRemainingAmount(),paymentVoucher.getPaymentDateTime().toLocalDate());
          amountToPay=paidAmountConverted.min(paymentInvoiceToPay.getRemainingAmount());
          paymentInvoiceToPay.setAmountToPay(amountToPay);
          piToPayLine.add(paymentInvoiceToPay);
          paidAmount=paidAmount.subtract(amountToPay);
          lineSeq+=1;
        }
      }
      if (piToPayLine != null && !piToPayLine.isEmpty()) {
        paymentVoucher.getPaymentInvoiceToPayList().addAll(piToPayLine);
      }
      paymentVoucher.getPaymentInvoiceList().addAll(newPiList);
    }
  }
  paymentVoucher.save();
  LOG.debug(""String_Node_Str"");
  return paymentVoucher;
}"
59080,"/** 
 * Fonction qui crée une liste des factures ou échéances non payées susceptible de l'être
 * @param paymentVoucher Une saisie paiement
 * @param moveLineToPay Une écriture à payer
 * @return Une liste des factures ou échéances non payées
 * @throws AxelorException 
 */
public List<PaymentInvoice> setPaymentInvoiceList(PaymentVoucher paymentVoucher,MoveLine moveLineToPay) throws AxelorException {
  List<MoveLine> moveLineList=this.getMoveLines(paymentVoucher,moveLineToPay);
  List<PaymentInvoice> pil=new ArrayList<PaymentInvoice>();
  for (  MoveLine moveLine : moveLineList) {
    PaymentInvoice paymentInvoice=new PaymentInvoice();
    paymentInvoice.setMoveLine(moveLine);
    paymentInvoice.setInvoiceAmount(moveLine.getDebit());
    paymentInvoice.setPaidAmount(moveLine.getAmountPaid());
    paymentInvoice.setPaymentVoucher(paymentVoucher);
    Move move=moveLine.getMove();
    if (move.getInvoice() != null) {
      paymentInvoice.setCurrency(move.getInvoice().getCurrency());
    }
 else {
      paymentInvoice.setCurrency(move.getCurrency());
    }
    pil.add(paymentInvoice);
  }
  return pil;
}","/** 
 * Fonction qui crée une liste des factures ou échéances non payées susceptible de l'être
 * @param paymentVoucher Une saisie paiement
 * @param moveLineToPay Une écriture à payer
 * @return Une liste des factures ou échéances non payées
 * @throws AxelorException 
 */
public List<PaymentInvoice> setPaymentInvoiceList(PaymentVoucher paymentVoucher,MoveLine moveLineToPay) throws AxelorException {
  List<PaymentInvoice> paymentInvoiceList=new ArrayList<PaymentInvoice>();
  for (  MoveLine moveLine : this.getMoveLines(paymentVoucher,moveLineToPay)) {
    PaymentInvoice paymentInvoice=new PaymentInvoice();
    paymentInvoice.setMoveLine(moveLine);
    if (moveLine.getDebit().compareTo(BigDecimal.ZERO) > 0) {
      paymentInvoice.setInvoiceAmount(moveLine.getDebit());
    }
 else {
      paymentInvoice.setInvoiceAmount(moveLine.getCredit());
    }
    paymentInvoice.setPaidAmount(moveLine.getAmountPaid());
    paymentInvoice.setPaymentVoucher(paymentVoucher);
    Move move=moveLine.getMove();
    if (move.getInvoice() != null) {
      paymentInvoice.setCurrency(move.getInvoice().getCurrency());
    }
 else {
      paymentInvoice.setCurrency(move.getCurrency());
    }
    paymentInvoiceList.add(paymentInvoice);
  }
  return paymentInvoiceList;
}"
59081,"/** 
 * Allows to load the moveLine selected in header (invoice, schedule or rejected moveLine) directly in the 2nd O2M
 * @param paymentVoucher
 * @param moveLine
 * @param lineSeq
 * @param paymentVoucherContext
 * @return
 * @throws AxelorException 
 */
public List<PaymentInvoiceToPay> loadOneLine(PaymentVoucher paymentVoucher,MoveLine moveLine,int lineSeq) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  List<PaymentInvoiceToPay> paymentInvoiceToPayList=new ArrayList<PaymentInvoiceToPay>();
  PaymentInvoiceToPay paymentInvoiceToPay=new PaymentInvoiceToPay();
  if (paymentVoucher.getPaidAmount() == null) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.MISSING_FIELD);
  }
  if (moveLine == null) {
    return paymentInvoiceToPayList;
  }
  Move move=moveLine.getMove();
  BigDecimal paidAmount=null;
  if (move.getInvoice() != null && move.getInvoice().getCurrency() != move.getCurrency()) {
    LOG.debug(""String_Node_Str"");
    paymentInvoiceToPay.setCurrency(move.getInvoice().getCurrency());
    paymentInvoiceToPay.setTotalAmount(move.getInvoice().getInvoiceInTaxTotal());
    paymentInvoiceToPay.setRemainingAmount(move.getInvoice().getInvoiceInTaxTotal().subtract(move.getInvoice().getInvoiceAmountPaid()));
    paidAmount=currencyService.getAmountCurrencyConverted(move.getInvoice().getCurrency(),paymentVoucher.getCurrency(),paymentInvoiceToPay.getRemainingAmount(),paymentVoucher.getPaymentDateTime().toLocalDate());
  }
 else {
    LOG.debug(""String_Node_Str"");
    paymentInvoiceToPay.setCurrency(move.getCurrency());
    if (moveLine.getDebit().compareTo(moveLine.getCredit()) == 1) {
      paymentInvoiceToPay.setTotalAmount(moveLine.getDebit());
    }
 else {
      paymentInvoiceToPay.setTotalAmount(moveLine.getCredit());
    }
    paymentInvoiceToPay.setRemainingAmount(moveLine.getAmountRemaining());
    paidAmount=currencyService.getAmountCurrencyConverted(move.getCurrency(),paymentVoucher.getCurrency(),moveLine.getAmountRemaining(),paymentVoucher.getPaymentDateTime().toLocalDate());
  }
  LOG.debug(""String_Node_Str"",paidAmount);
  LOG.debug(""String_Node_Str"",paymentVoucher.getPaidAmount());
  BigDecimal amountToPay=paidAmount.min(paymentVoucher.getPaidAmount());
  paymentInvoiceToPay.setSequence(lineSeq);
  paymentInvoiceToPay.setMoveLine(moveLine);
  paymentInvoiceToPay.setAmountToPay(amountToPay);
  paymentInvoiceToPay.setPaymentVoucher(paymentVoucher);
  paymentInvoiceToPayList.add(paymentInvoiceToPay);
  LOG.debug(""String_Node_Str"");
  return paymentInvoiceToPayList;
}","/** 
 * Allows to load the moveLine selected in header (invoice, schedule or rejected moveLine) directly in the 2nd O2M
 * @param paymentVoucher
 * @param moveLine
 * @param lineSeq
 * @param paymentVoucherContext
 * @return
 * @throws AxelorException 
 */
public List<PaymentInvoiceToPay> loadOneLine(PaymentVoucher paymentVoucher,MoveLine moveLine,int lineSeq) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  List<PaymentInvoiceToPay> paymentInvoiceToPayList=new ArrayList<PaymentInvoiceToPay>();
  PaymentInvoiceToPay paymentInvoiceToPay=new PaymentInvoiceToPay();
  if (paymentVoucher.getPaidAmount() == null) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.MISSING_FIELD);
  }
  if (moveLine == null) {
    return paymentInvoiceToPayList;
  }
  Move move=moveLine.getMove();
  BigDecimal paidAmount=null;
  if (move.getInvoice() != null && !move.getInvoice().getCurrency().equals(move.getCurrency())) {
    LOG.debug(""String_Node_Str"");
    paymentInvoiceToPay.setCurrency(move.getInvoice().getCurrency());
    paymentInvoiceToPay.setTotalAmount(move.getInvoice().getInvoiceInTaxTotal());
    paymentInvoiceToPay.setRemainingAmount(move.getInvoice().getInvoiceInTaxTotal().subtract(move.getInvoice().getInvoiceAmountPaid()));
    paidAmount=currencyService.getAmountCurrencyConverted(paymentVoucher.getCurrency(),move.getInvoice().getCurrency(),paymentInvoiceToPay.getRemainingAmount(),paymentVoucher.getPaymentDateTime().toLocalDate());
  }
 else {
    LOG.debug(""String_Node_Str"");
    paymentInvoiceToPay.setCurrency(move.getCurrency());
    if (moveLine.getDebit().compareTo(moveLine.getCredit()) == 1) {
      paymentInvoiceToPay.setTotalAmount(moveLine.getDebit());
    }
 else {
      paymentInvoiceToPay.setTotalAmount(moveLine.getCredit());
    }
    paymentInvoiceToPay.setRemainingAmount(moveLine.getAmountRemaining());
    paidAmount=currencyService.getAmountCurrencyConverted(paymentVoucher.getCurrency(),move.getCurrency(),moveLine.getAmountRemaining(),paymentVoucher.getPaymentDateTime().toLocalDate());
  }
  LOG.debug(""String_Node_Str"",paidAmount);
  LOG.debug(""String_Node_Str"",paymentVoucher.getPaidAmount());
  BigDecimal amountToPay=paidAmount.min(paymentVoucher.getPaidAmount());
  paymentInvoiceToPay.setSequence(lineSeq);
  paymentInvoiceToPay.setMoveLine(moveLine);
  paymentInvoiceToPay.setAmountToPay(amountToPay);
  paymentInvoiceToPay.setPaymentVoucher(paymentVoucher);
  paymentInvoiceToPayList.add(paymentInvoiceToPay);
  LOG.debug(""String_Node_Str"");
  return paymentInvoiceToPayList;
}"
59082,"/** 
 * Allows to load selected lines (from 1st 02M) to the 2nd O2M and dispatching amounts according to amountRemainnig for the loaded move and the paid amount remaining of the paymentVoucher 
 * @param paymentVoucher
 * @param paymentVoucherContext
 * @return 
 * @return 
 * @return values Map of data
 * @throws AxelorException 
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public PaymentVoucher loadSelectedLines(PaymentVoucher paymentVoucher,PaymentVoucher paymentVoucherContext) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  List<PaymentInvoice> newPiList=new ArrayList<PaymentInvoice>();
  if (paymentVoucherContext.getPaymentInvoiceList() != null) {
    List<PaymentInvoiceToPay> piToPayLine=new ArrayList<PaymentInvoiceToPay>();
    BigDecimal paidAmount=BigDecimal.ZERO;
    if (paymentVoucherContext.getPaidAmount() == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.MISSING_FIELD);
    }
 else {
      paidAmount=paymentVoucherContext.getPaidAmount();
      BigDecimal amountToPay=BigDecimal.ZERO;
      int lineSeq=1;
      List<PaymentInvoice> pilSelected=new ArrayList<PaymentInvoice>();
      for (      PaymentInvoice pilContext : paymentVoucherContext.getPaymentInvoiceList()) {
        PaymentInvoice paymentInvoiceFromContext=PaymentInvoice.find(pilContext.getId());
        LOG.debug(""String_Node_Str"",paymentInvoiceFromContext);
        LOG.debug(""String_Node_Str"",pilContext.isSelected());
        if (pilContext.isSelected()) {
          pilSelected.add(paymentInvoiceFromContext);
        }
 else {
          PaymentInvoice paymentInvoice=new PaymentInvoice();
          if (paymentInvoiceFromContext.getMoveLine() != null) {
            paymentInvoice.setMoveLine(paymentInvoiceFromContext.getMoveLine());
          }
          paymentInvoice.setInvoiceAmount(paymentInvoiceFromContext.getInvoiceAmount());
          paymentInvoice.setPaidAmount(paymentInvoiceFromContext.getPaidAmount());
          paymentInvoice.setPaymentVoucher(paymentInvoiceFromContext.getPaymentVoucher());
          newPiList.add(paymentInvoice);
        }
      }
      paymentVoucher.getPaymentInvoiceList().clear();
      paymentVoucher.getPaymentInvoiceToPayList().clear();
      if (pilSelected != null && !pilSelected.isEmpty()) {
        if (paymentVoucherContext.getPaymentInvoiceToPayList() != null) {
          for (          PaymentInvoiceToPay pToPay : paymentVoucherContext.getPaymentInvoiceToPayList()) {
            PaymentInvoiceToPay piToPayFromContext=PaymentInvoiceToPay.find(pToPay.getId());
            PaymentInvoiceToPay piToPayOld=new PaymentInvoiceToPay();
            piToPayOld.setSequence(piToPayFromContext.getSequence());
            piToPayOld.setMoveLine(piToPayFromContext.getMoveLine());
            if (piToPayFromContext.getMoveLine() != null && piToPayFromContext.getMoveLine().getId() != null) {
              piToPayOld.setMoveLine(piToPayFromContext.getMoveLine());
            }
            piToPayOld.setTotalAmount(piToPayFromContext.getTotalAmount());
            piToPayOld.setRemainingAmount(piToPayFromContext.getRemainingAmount());
            piToPayOld.setAmountToPay(piToPayFromContext.getAmountToPay());
            piToPayOld.setPaymentVoucher(piToPayFromContext.getPaymentVoucher());
            piToPayLine.add(piToPayOld);
            if (paidAmount.compareTo(BigDecimal.ZERO) > 0) {
              paidAmount=paidAmount.subtract(piToPayFromContext.getAmountToPay());
            }
            lineSeq+=1;
          }
        }
        LOG.debug(""String_Node_Str"",piToPayLine);
        LOG.debug(""String_Node_Str"",pilSelected.size());
        for (        PaymentInvoice pil : pilSelected) {
          PaymentInvoiceToPay piToPay=new PaymentInvoiceToPay();
          MoveLine moveLine=pil.getMoveLine();
          Move move=moveLine.getMove();
          BigDecimal amountRemainingConverted=null;
          if (move.getInvoice() != null) {
            amountRemainingConverted=currencyService.getAmountCurrencyConverted(move.getInvoice().getCurrency(),paymentVoucher.getCurrency(),pil.getInvoiceAmount().subtract(pil.getPaidAmount()),paymentVoucher.getPaymentDateTime().toLocalDate());
            piToPay.setCurrency(move.getInvoice().getCurrency());
          }
 else {
            amountRemainingConverted=currencyService.getAmountCurrencyConverted(move.getCurrency(),paymentVoucher.getCurrency(),pil.getInvoiceAmount().subtract(pil.getPaidAmount()),paymentVoucher.getPaymentDateTime().toLocalDate());
            piToPay.setCurrency(move.getCurrency());
          }
          amountToPay=paidAmount.min(amountRemainingConverted);
          piToPay.setSequence(lineSeq);
          piToPay.setMoveLine(moveLine);
          piToPay.setTotalAmount(pil.getInvoiceAmount());
          piToPay.setRemainingAmount(pil.getInvoiceAmount().subtract(pil.getPaidAmount()));
          piToPay.setAmountToPay(amountToPay);
          piToPay.setPaymentVoucher(paymentVoucher);
          piToPayLine.add(piToPay);
          paidAmount=paidAmount.subtract(amountToPay);
          lineSeq+=1;
        }
      }
      if (piToPayLine != null && !piToPayLine.isEmpty()) {
        paymentVoucher.getPaymentInvoiceToPayList().addAll(piToPayLine);
      }
      paymentVoucher.getPaymentInvoiceList().addAll(newPiList);
    }
  }
  paymentVoucher.save();
  LOG.debug(""String_Node_Str"");
  return paymentVoucher;
}","/** 
 * Allows to load selected lines (from 1st 02M) to the 2nd O2M and dispatching amounts according to amountRemainnig for the loaded move and the paid amount remaining of the paymentVoucher 
 * @param paymentVoucher
 * @param paymentVoucherContext
 * @return 
 * @return 
 * @return values Map of data
 * @throws AxelorException 
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public PaymentVoucher loadSelectedLines(PaymentVoucher paymentVoucher,PaymentVoucher paymentVoucherContext) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  List<PaymentInvoice> newPiList=Lists.newArrayList();
  if (paymentVoucherContext.getPaymentInvoiceList() != null) {
    List<PaymentInvoiceToPay> piToPayLine=new ArrayList<PaymentInvoiceToPay>();
    BigDecimal paidAmount=BigDecimal.ZERO;
    if (paymentVoucherContext.getPaidAmount() == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.MISSING_FIELD);
    }
 else {
      paidAmount=paymentVoucherContext.getPaidAmount();
      BigDecimal amountToPay=BigDecimal.ZERO;
      int lineSeq=1;
      List<PaymentInvoice> pilSelected=new ArrayList<PaymentInvoice>();
      for (      PaymentInvoice pilContext : paymentVoucherContext.getPaymentInvoiceList()) {
        PaymentInvoice paymentInvoiceFromContext=PaymentInvoice.find(pilContext.getId());
        LOG.debug(""String_Node_Str"",paymentInvoiceFromContext);
        LOG.debug(""String_Node_Str"",pilContext.isSelected());
        if (pilContext.isSelected()) {
          pilSelected.add(paymentInvoiceFromContext);
        }
 else {
          PaymentInvoice paymentInvoice=new PaymentInvoice();
          if (paymentInvoiceFromContext.getMoveLine() != null) {
            paymentInvoice.setMoveLine(paymentInvoiceFromContext.getMoveLine());
          }
          paymentInvoice.setInvoiceAmount(paymentInvoiceFromContext.getInvoiceAmount());
          paymentInvoice.setPaidAmount(paymentInvoiceFromContext.getPaidAmount());
          paymentInvoice.setPaymentVoucher(paymentInvoiceFromContext.getPaymentVoucher());
          newPiList.add(paymentInvoice);
        }
      }
      paymentVoucher.getPaymentInvoiceList().clear();
      paymentVoucher.getPaymentInvoiceToPayList().clear();
      if (pilSelected != null && !pilSelected.isEmpty()) {
        if (paymentVoucherContext.getPaymentInvoiceToPayList() != null) {
          for (          PaymentInvoiceToPay pToPay : paymentVoucherContext.getPaymentInvoiceToPayList()) {
            PaymentInvoiceToPay piToPayFromContext=PaymentInvoiceToPay.find(pToPay.getId());
            PaymentInvoiceToPay piToPayOld=new PaymentInvoiceToPay();
            piToPayOld.setSequence(piToPayFromContext.getSequence());
            piToPayOld.setMoveLine(piToPayFromContext.getMoveLine());
            if (piToPayFromContext.getMoveLine() != null && piToPayFromContext.getMoveLine().getId() != null) {
              piToPayOld.setMoveLine(piToPayFromContext.getMoveLine());
            }
            piToPayOld.setTotalAmount(piToPayFromContext.getTotalAmount());
            piToPayOld.setRemainingAmount(piToPayFromContext.getRemainingAmount());
            piToPayOld.setAmountToPay(piToPayFromContext.getAmountToPay());
            piToPayOld.setPaymentVoucher(piToPayFromContext.getPaymentVoucher());
            piToPayLine.add(piToPayOld);
            if (paidAmount.compareTo(BigDecimal.ZERO) > 0) {
              paidAmount=paidAmount.subtract(piToPayFromContext.getAmountToPay());
            }
            lineSeq+=1;
          }
        }
        LOG.debug(""String_Node_Str"",piToPayLine);
        LOG.debug(""String_Node_Str"",pilSelected.size());
        for (        PaymentInvoice pil : pilSelected) {
          PaymentInvoiceToPay piToPay=new PaymentInvoiceToPay();
          MoveLine moveLine=pil.getMoveLine();
          Move move=moveLine.getMove();
          BigDecimal amountRemainingConverted=null;
          if (move.getInvoice() != null) {
            amountRemainingConverted=currencyService.getAmountCurrencyConverted(move.getInvoice().getCurrency(),paymentVoucher.getCurrency(),pil.getInvoiceAmount().subtract(pil.getPaidAmount()),paymentVoucher.getPaymentDateTime().toLocalDate());
            piToPay.setCurrency(move.getInvoice().getCurrency());
          }
 else {
            amountRemainingConverted=currencyService.getAmountCurrencyConverted(move.getCurrency(),paymentVoucher.getCurrency(),pil.getInvoiceAmount().subtract(pil.getPaidAmount()),paymentVoucher.getPaymentDateTime().toLocalDate());
            piToPay.setCurrency(move.getCurrency());
          }
          amountToPay=paidAmount.min(amountRemainingConverted);
          piToPay.setSequence(lineSeq);
          piToPay.setMoveLine(moveLine);
          piToPay.setTotalAmount(pil.getInvoiceAmount());
          piToPay.setRemainingAmount(pil.getInvoiceAmount().subtract(pil.getPaidAmount()));
          piToPay.setAmountToPay(amountToPay);
          piToPay.setPaymentVoucher(paymentVoucher);
          piToPayLine.add(piToPay);
          paidAmount=paidAmount.subtract(amountToPay);
          lineSeq+=1;
        }
      }
      if (piToPayLine != null && !piToPayLine.isEmpty()) {
        paymentVoucher.getPaymentInvoiceToPayList().addAll(piToPayLine);
      }
      paymentVoucher.getPaymentInvoiceList().addAll(newPiList);
    }
  }
  paymentVoucher.save();
  LOG.debug(""String_Node_Str"");
  return paymentVoucher;
}"
59083,"/** 
 * Allows to load the moveLine selected in header (invoice, schedule or rejected moveLine) directly in the 2nd O2M
 * @param paymentVoucher
 * @param moveLine
 * @param lineSeq
 * @param paymentVoucherContext
 * @return
 * @throws AxelorException 
 */
public List<PaymentInvoiceToPay> loadOneLine(PaymentVoucher paymentVoucher,MoveLine moveLine,int lineSeq) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  List<PaymentInvoiceToPay> piToPayLine=new ArrayList<PaymentInvoiceToPay>();
  PaymentInvoiceToPay piToPay=new PaymentInvoiceToPay();
  if (paymentVoucher.getPaidAmount() == null) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.MISSING_FIELD);
  }
  if (moveLine != null) {
    Move move=moveLine.getMove();
    BigDecimal paidAmount=null;
    if (move.getInvoice() != null && move.getInvoice().getCurrency() != move.getCurrency()) {
      LOG.debug(""String_Node_Str"");
      piToPay.setCurrency(move.getInvoice().getCurrency());
      piToPay.setTotalAmount(move.getInvoice().getInvoiceInTaxTotal());
      piToPay.setRemainingAmount(move.getInvoice().getInvoiceInTaxTotal().subtract(move.getInvoice().getInvoiceAmountPaid()));
      paidAmount=currencyService.getAmountCurrencyConverted(move.getInvoice().getCurrency(),paymentVoucher.getCurrency(),piToPay.getRemainingAmount(),paymentVoucher.getPaymentDateTime().toLocalDate());
    }
 else {
      LOG.debug(""String_Node_Str"");
      piToPay.setCurrency(move.getCurrency());
      if (moveLine.getDebit().compareTo(moveLine.getCredit()) == 1) {
        piToPay.setTotalAmount(moveLine.getDebit());
      }
 else {
        piToPay.setTotalAmount(moveLine.getCredit());
      }
      piToPay.setRemainingAmount(moveLine.getAmountRemaining());
      paidAmount=currencyService.getAmountCurrencyConverted(move.getCurrency(),paymentVoucher.getCurrency(),moveLine.getAmountRemaining(),paymentVoucher.getPaymentDateTime().toLocalDate());
    }
    LOG.debug(""String_Node_Str"",paidAmount);
    LOG.debug(""String_Node_Str"",paymentVoucher.getPaidAmount());
    BigDecimal amountToPay=paidAmount.min(paymentVoucher.getPaidAmount());
    piToPay.setSequence(lineSeq);
    piToPay.setMoveLine(moveLine);
    piToPay.setAmountToPay(amountToPay);
    piToPay.setPaymentVoucher(paymentVoucher);
    piToPayLine.add(piToPay);
    LOG.debug(""String_Node_Str"");
    return piToPayLine;
  }
  return piToPayLine;
}","/** 
 * Allows to load the moveLine selected in header (invoice, schedule or rejected moveLine) directly in the 2nd O2M
 * @param paymentVoucher
 * @param moveLine
 * @param lineSeq
 * @param paymentVoucherContext
 * @return
 * @throws AxelorException 
 */
public List<PaymentInvoiceToPay> loadOneLine(PaymentVoucher paymentVoucher,MoveLine moveLine,int lineSeq) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  List<PaymentInvoiceToPay> paymentInvoiceToPayList=new ArrayList<PaymentInvoiceToPay>();
  PaymentInvoiceToPay paymentInvoiceToPay=new PaymentInvoiceToPay();
  if (paymentVoucher.getPaidAmount() == null) {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg()),IException.MISSING_FIELD);
  }
  if (moveLine == null) {
    return paymentInvoiceToPayList;
  }
  Move move=moveLine.getMove();
  BigDecimal paidAmount=null;
  if (move.getInvoice() != null && move.getInvoice().getCurrency() != move.getCurrency()) {
    LOG.debug(""String_Node_Str"");
    paymentInvoiceToPay.setCurrency(move.getInvoice().getCurrency());
    paymentInvoiceToPay.setTotalAmount(move.getInvoice().getInvoiceInTaxTotal());
    paymentInvoiceToPay.setRemainingAmount(move.getInvoice().getInvoiceInTaxTotal().subtract(move.getInvoice().getInvoiceAmountPaid()));
    paidAmount=currencyService.getAmountCurrencyConverted(move.getInvoice().getCurrency(),paymentVoucher.getCurrency(),paymentInvoiceToPay.getRemainingAmount(),paymentVoucher.getPaymentDateTime().toLocalDate());
  }
 else {
    LOG.debug(""String_Node_Str"");
    paymentInvoiceToPay.setCurrency(move.getCurrency());
    if (moveLine.getDebit().compareTo(moveLine.getCredit()) == 1) {
      paymentInvoiceToPay.setTotalAmount(moveLine.getDebit());
    }
 else {
      paymentInvoiceToPay.setTotalAmount(moveLine.getCredit());
    }
    paymentInvoiceToPay.setRemainingAmount(moveLine.getAmountRemaining());
    paidAmount=currencyService.getAmountCurrencyConverted(move.getCurrency(),paymentVoucher.getCurrency(),moveLine.getAmountRemaining(),paymentVoucher.getPaymentDateTime().toLocalDate());
  }
  LOG.debug(""String_Node_Str"",paidAmount);
  LOG.debug(""String_Node_Str"",paymentVoucher.getPaidAmount());
  BigDecimal amountToPay=paidAmount.min(paymentVoucher.getPaidAmount());
  paymentInvoiceToPay.setSequence(lineSeq);
  paymentInvoiceToPay.setMoveLine(moveLine);
  paymentInvoiceToPay.setAmountToPay(amountToPay);
  paymentInvoiceToPay.setPaymentVoucher(paymentVoucher);
  paymentInvoiceToPayList.add(paymentInvoiceToPay);
  LOG.debug(""String_Node_Str"");
  return paymentInvoiceToPayList;
}"
59084,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void accept(PurchaseOrderSupplierLine purchaseOrderSupplierLine){
  PurchaseOrderLine purchaseOrderLine=purchaseOrderSupplierLine.getPurchaseOrderLine();
  purchaseOrderLine.setEstimatedDelivDate(purchaseOrderSupplierLine.getEstimatedDelivDate());
  purchaseOrderLine.setSupplierPartner(purchaseOrderSupplierLine.getSupplierPartner());
  purchaseOrderLine.setPrice(purchaseOrderSupplierLine.getPrice());
  purchaseOrderLine.setExTaxTotal(PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),purchaseOrderLine.getPrice()));
  purchaseOrderLine.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void accept(PurchaseOrderSupplierLine purchaseOrderSupplierLine){
  PurchaseOrderLine purchaseOrderLine=purchaseOrderSupplierLine.getPurchaseOrderLine();
  purchaseOrderLine.setEstimatedDelivDate(purchaseOrderSupplierLine.getEstimatedDelivDate());
  purchaseOrderLine.setSupplierPartner(purchaseOrderSupplierLine.getSupplierPartner());
  purchaseOrderLine.setPrice(purchaseOrderSupplierLine.getPrice());
  purchaseOrderLine.setExTaxTotal(PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),purchaseOrderLine.getPrice()));
  purchaseOrderSupplierLine.setStateSelect(IPurchaseOrderSupplierLine.ACCEPTED);
  purchaseOrderSupplierLine.save();
}"
59085,"/** 
 * Historise l'éxécution
 * @param schedulerI Instance de planificateur
 * @param currentDay Date d'éxécution
 * @param isImmediate Mettre a jour le cycle ? Dans le cas de facturation mémoire immédiate
 * @throws AxelorException
 */
public void addInHistory(SchedulerInstance schedulerI,LocalDate currentDay,boolean isImmediate) throws AxelorException {
  LocalDate date=this.getTheoricalExecutionDate(schedulerI);
  schedulerI.setLastExecutionDate(currentDay);
  if (!isImmediate) {
    schedulerI.setLastTheoreticalExecutionDate(date);
  }
  SchedulerInstanceHistory history=new SchedulerInstanceHistory();
  history.setLastExecutionDate(currentDay);
  history.setLastThoereticalExecutionDate(date);
  history.setSchedulerInstance(schedulerI);
  if (schedulerI.getSchedulerInstanceHistoryList() == null) {
    schedulerI.setSchedulerInstanceHistoryList(new ArrayList<SchedulerInstanceHistory>());
  }
  schedulerI.getSchedulerInstanceHistoryList().add(history);
  schedulerI.save();
}","/** 
 * Historise l'éxécution
 * @param schedulerI Instance de planificateur
 * @param currentDay Date d'éxécution
 * @param isImmediate Mettre a jour le cycle ? Dans le cas de facturation mémoire immédiate
 * @throws AxelorException
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void addInHistory(SchedulerInstance schedulerI,LocalDate currentDay,boolean isImmediate) throws AxelorException {
  LocalDate date=this.getTheoricalExecutionDate(schedulerI);
  schedulerI.setLastExecutionDate(currentDay);
  if (!isImmediate) {
    schedulerI.setLastTheoreticalExecutionDate(date);
  }
  SchedulerInstanceHistory history=new SchedulerInstanceHistory();
  history.setLastExecutionDate(currentDay);
  history.setLastThoereticalExecutionDate(date);
  history.setSchedulerInstance(schedulerI);
  if (schedulerI.getSchedulerInstanceHistoryList() == null) {
    schedulerI.setSchedulerInstanceHistoryList(new ArrayList<SchedulerInstanceHistory>());
  }
  schedulerI.getSchedulerInstanceHistoryList().add(history);
  schedulerI.save();
}"
59086,"public StockMove generateStockMove(Inventory inventory) throws AxelorException {
  Location toLocation=inventory.getLocation();
  Company company=toLocation.getCompany();
  if (company == null) {
    throw new AxelorException(String.format(""String_Node_Str"",toLocation.getName()),IException.CONFIGURATION_ERROR);
  }
  String inventorySeq=inventory.getInventorySeq();
  StockMove stockMove=this.createStockMoveHeader(inventory,company,toLocation,inventory.getDateT().toLocalDate(),inventorySeq);
  for (  InventoryLine inventoryLine : inventory.getInventoryLineList()) {
    BigDecimal currentQty=inventoryLine.getCurrentQty();
    BigDecimal realQty=inventoryLine.getRealQty();
    Product product=inventoryLine.getProduct();
    if (currentQty.compareTo(realQty) != 0) {
      BigDecimal diff=realQty.subtract(currentQty);
      StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,diff,product.getUnit(),null,stockMove,0);
      if (stockMoveLine == null) {
        throw new AxelorException(""String_Node_Str"" + inventorySeq,IException.CONFIGURATION_ERROR);
      }
      if (stockMove.getStockMoveLineList() == null) {
        stockMove.setStockMoveLineList(new ArrayList<StockMoveLine>());
      }
      stockMove.getStockMoveLineList().add(stockMoveLine);
    }
  }
  if (stockMove.getStockMoveLineList() != null) {
    stockMoveService.plan(stockMove);
    stockMoveService.copyQtyToRealQty(stockMove);
    stockMoveService.realize(stockMove);
  }
  return stockMove;
}","public StockMove generateStockMove(Inventory inventory) throws AxelorException {
  Location toLocation=inventory.getLocation();
  Company company=toLocation.getCompany();
  if (company == null) {
    throw new AxelorException(String.format(""String_Node_Str"",toLocation.getName()),IException.CONFIGURATION_ERROR);
  }
  String inventorySeq=inventory.getInventorySeq();
  StockMove stockMove=this.createStockMoveHeader(inventory,company,toLocation,inventory.getDateT().toLocalDate(),inventorySeq);
  for (  InventoryLine inventoryLine : inventory.getInventoryLineList()) {
    BigDecimal currentQty=inventoryLine.getCurrentQty();
    BigDecimal realQty=inventoryLine.getRealQty();
    Product product=inventoryLine.getProduct();
    if (currentQty.compareTo(realQty) != 0) {
      BigDecimal diff=realQty.subtract(currentQty);
      StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,diff,product.getUnit(),null,stockMove,0);
      if (stockMoveLine == null) {
        throw new AxelorException(""String_Node_Str"" + inventorySeq,IException.CONFIGURATION_ERROR);
      }
      stockMove.addStockMoveLineListItem(stockMoveLine);
    }
  }
  if (stockMove.getStockMoveLineList() != null) {
    stockMoveService.plan(stockMove);
    stockMoveService.copyQtyToRealQty(stockMove);
    stockMoveService.realize(stockMove);
  }
  return stockMove;
}"
59087,"/** 
 * Permet de créer une ligne détaillée de stock pour un entrepot, un produit, une variante de produit et un numéro de suivi donnés.
 * @param location Un entrepot
 * @param product Un produit
 * @param trackingNumber Un numéro de suivi
 * @return La ligne détaillée de stock
 */
public LocationLine createDetailLocationLine(Location location,Product product,TrackingNumber trackingNumber){
  LOG.debug(""String_Node_Str"",new Object[]{location.getName(),product.getCode(),trackingNumber.getTrackingNumberSeq()});
  LocationLine detailLocationLine=new LocationLine();
  detailLocationLine.setDetailsLocation(location);
  detailLocationLine.setProduct(product);
  detailLocationLine.setCurrentQty(BigDecimal.ZERO);
  detailLocationLine.setFutureQty(BigDecimal.ZERO);
  detailLocationLine.setTrackingNumber(trackingNumber);
  return detailLocationLine;
}","/** 
 * Permet de créer une ligne détaillée de stock pour un entrepot, un produit, une variante de produit et un numéro de suivi donnés.
 * @param location Un entrepot
 * @param product Un produit
 * @param trackingNumber Un numéro de suivi
 * @return La ligne détaillée de stock
 */
public LocationLine createDetailLocationLine(Location location,Product product,TrackingNumber trackingNumber){
  LOG.debug(""String_Node_Str"",new Object[]{location.getName(),product.getCode(),trackingNumber.getTrackingNumberSeq()});
  LocationLine detailLocationLine=new LocationLine();
  detailLocationLine.setDetailsLocation(location);
  location.addDetailsLocationLineListItem(detailLocationLine);
  detailLocationLine.setProduct(product);
  detailLocationLine.setCurrentQty(BigDecimal.ZERO);
  detailLocationLine.setFutureQty(BigDecimal.ZERO);
  detailLocationLine.setTrackingNumber(trackingNumber);
  return detailLocationLine;
}"
59088,"/** 
 * Permet de créer une ligne de stock pour un entrepot et un produit donnés.
 * @param location Un entrepot
 * @param product Un produit
 * @return La ligne de stock
 */
public LocationLine createLocationLine(Location location,Product product){
  LOG.debug(""String_Node_Str"",new Object[]{location.getName(),product.getCode()});
  LocationLine locationLine=new LocationLine();
  locationLine.setLocation(location);
  locationLine.setProduct(product);
  locationLine.setCurrentQty(BigDecimal.ZERO);
  locationLine.setFutureQty(BigDecimal.ZERO);
  return locationLine;
}","/** 
 * Permet de créer une ligne de stock pour un entrepot et un produit donnés.
 * @param location Un entrepot
 * @param product Un produit
 * @return La ligne de stock
 */
public LocationLine createLocationLine(Location location,Product product){
  LOG.debug(""String_Node_Str"",new Object[]{location.getName(),product.getCode()});
  LocationLine locationLine=new LocationLine();
  locationLine.setLocation(location);
  location.addLocationLineListItem(locationLine);
  locationLine.setProduct(product);
  locationLine.setCurrentQty(BigDecimal.ZERO);
  locationLine.setFutureQty(BigDecimal.ZERO);
  return locationLine;
}"
59089,"public TrackingNumber createTrackingNumber(Product product,Company company,LocalDate date) throws AxelorException {
  TrackingNumber trackingNumber=new TrackingNumber();
  if (product.getIsPerishable()) {
    trackingNumber.setPerishableExpirationDate(date.plusMonths(product.getPerishableNbrOfMonths()));
  }
  if (product.getHasWarranty()) {
    trackingNumber.setWarrantyExpirationDate(date.plusMonths(product.getWarrantyNbrOfMonths()));
  }
  trackingNumber.setProduct(product);
  trackingNumber.setCounter(0);
  String seq=sequenceService.getSequence(IAdministration.PRODUCT_TRACKING_NUMBER,product,company,false);
  if (seq == null) {
    throw new AxelorException(String.format(""String_Node_Str"",exceptionMsg,company.getName(),product.getCode()),IException.CONFIGURATION_ERROR);
  }
  trackingNumber.setTrackingNumberSeq(seq);
  return trackingNumber;
}","public TrackingNumber createTrackingNumber(Product product,Company company,LocalDate date) throws AxelorException {
  TrackingNumber trackingNumber=new TrackingNumber();
  if (product.getIsPerishable()) {
    trackingNumber.setPerishableExpirationDate(date.plusMonths(product.getPerishableNbrOfMonths()));
  }
  if (product.getHasWarranty()) {
    trackingNumber.setWarrantyExpirationDate(date.plusMonths(product.getWarrantyNbrOfMonths()));
  }
  trackingNumber.setProduct(product);
  trackingNumber.setCounter(BigDecimal.ZERO);
  String seq=sequenceService.getSequence(IAdministration.PRODUCT_TRACKING_NUMBER,product,company,false);
  if (seq == null) {
    throw new AxelorException(String.format(""String_Node_Str"",exceptionMsg,company.getName(),product.getCode()),IException.CONFIGURATION_ERROR);
  }
  trackingNumber.setTrackingNumberSeq(seq);
  return trackingNumber;
}"
59090,"public TrackingNumber getTrackingNumber(Product product,int sizeOfLot,Company company,LocalDate date) throws AxelorException {
  TrackingNumber trackingNumber=TrackingNumber.all().filter(""String_Node_Str"",product,sizeOfLot).fetchOne();
  if (trackingNumber == null) {
    trackingNumber=this.createTrackingNumber(product,company,date);
  }
  trackingNumber.setCounter(trackingNumber.getCounter() + 1);
  return trackingNumber;
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public TrackingNumber getTrackingNumber(Product product,BigDecimal sizeOfLot,Company company,LocalDate date) throws AxelorException {
  TrackingNumber trackingNumber=TrackingNumber.all().filter(""String_Node_Str"",product,sizeOfLot).fetchOne();
  if (trackingNumber == null) {
    trackingNumber=this.createTrackingNumber(product,company,date).save();
  }
  trackingNumber.setCounter(trackingNumber.getCounter().add(sizeOfLot));
  return trackingNumber;
}"
59091,"public void checkStockMin(LocationLine locationLine,boolean isDetailLocationLine) throws AxelorException {
  if (!isDetailLocationLine && locationLine.getCurrentQty().compareTo(BigDecimal.ZERO) == -1 && locationLine.getLocation().getTypeSelect() == ILocation.INTERNAL) {
    throw new AxelorException(String.format(""String_Node_Str"",locationLine.getProduct().getName(),locationLine.getProduct().getCode()),IException.CONFIGURATION_ERROR);
  }
 else   if (isDetailLocationLine && locationLine.getCurrentQty().compareTo(BigDecimal.ZERO) == -1 && locationLine.getLocation().getTypeSelect() == ILocation.INTERNAL) {
    String trackingNumber=""String_Node_Str"";
    if (locationLine.getTrackingNumber() != null) {
      trackingNumber=locationLine.getTrackingNumber().getTrackingNumberSeq();
    }
    throw new AxelorException(String.format(""String_Node_Str"",locationLine.getProduct().getName(),locationLine.getProduct().getCode(),trackingNumber),IException.CONFIGURATION_ERROR);
  }
}","public void checkStockMin(LocationLine locationLine,boolean isDetailLocationLine) throws AxelorException {
  if (!isDetailLocationLine && locationLine.getCurrentQty().compareTo(BigDecimal.ZERO) == -1 && locationLine.getLocation().getTypeSelect() == ILocation.INTERNAL) {
    throw new AxelorException(String.format(""String_Node_Str"",locationLine.getProduct().getName(),locationLine.getProduct().getCode()),IException.CONFIGURATION_ERROR);
  }
 else   if (isDetailLocationLine && locationLine.getCurrentQty().compareTo(BigDecimal.ZERO) == -1 && ((locationLine.getLocation() != null && locationLine.getLocation().getTypeSelect() == ILocation.INTERNAL) || (locationLine.getDetailsLocation() != null && locationLine.getDetailsLocation().getTypeSelect() == ILocation.INTERNAL))) {
    String trackingNumber=""String_Node_Str"";
    if (locationLine.getTrackingNumber() != null) {
      trackingNumber=locationLine.getTrackingNumber().getTrackingNumberSeq();
    }
    throw new AxelorException(String.format(""String_Node_Str"",locationLine.getProduct().getName(),locationLine.getProduct().getCode(),trackingNumber),IException.CONFIGURATION_ERROR);
  }
}"
59092,"/** 
 * Fonction appeler par le bouton imprimer
 * @param request
 * @param response
 * @return
 */
public void showPurchaseOrder(ActionRequest request,ActionResponse response){
  PurchaseOrder purchaseOrder=request.getContext().asType(PurchaseOrder.class);
  StringBuilder url=new StringBuilder();
  AxelorSettings axelorSettings=AxelorSettings.get();
  String language=""String_Node_Str"";
  try {
    language=purchaseOrder.getSupplierPartner().getLanguageSelect() != null ? purchaseOrder.getSupplierPartner().getLanguageSelect() : purchaseOrder.getCompany().getPrintingSettings().getLanguageSelect() != null ? purchaseOrder.getCompany().getPrintingSettings().getLanguageSelect() : ""String_Node_Str"";
  }
 catch (  NullPointerException e) {
    language=""String_Node_Str"";
  }
  language=language.equals(""String_Node_Str"") ? ""String_Node_Str"" : language;
  url.append(axelorSettings.get(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + purchaseOrder.getId()+ ""String_Node_Str""+ language+ axelorSettings.get(""String_Node_Str""));
  LOG.debug(""String_Node_Str"",url);
  String urlNotExist=URLService.notExist(url.toString());
  if (urlNotExist == null) {
    LOG.debug(""String_Node_Str"" + purchaseOrder.getPurchaseOrderSeq() + ""String_Node_Str""+ url.toString());
    String title=""String_Node_Str"";
    if (purchaseOrder.getPurchaseOrderSeq() != null) {
      title+=purchaseOrder.getPurchaseOrderSeq();
    }
    Map<String,Object> mapView=new HashMap<String,Object>();
    mapView.put(""String_Node_Str"",title);
    mapView.put(""String_Node_Str"",url);
    mapView.put(""String_Node_Str"",""String_Node_Str"");
    response.setView(mapView);
  }
 else {
    response.setFlash(urlNotExist);
  }
}","/** 
 * Fonction appeler par le bouton imprimer
 * @param request
 * @param response
 * @return
 */
public void showPurchaseOrder(ActionRequest request,ActionResponse response){
  PurchaseOrder purchaseOrder=request.getContext().asType(PurchaseOrder.class);
  StringBuilder url=new StringBuilder();
  AxelorSettings axelorSettings=AxelorSettings.get();
  String purchaseOrderIds=""String_Node_Str"";
  @SuppressWarnings(""String_Node_Str"") List<Integer> lstSelectedPurchaseOrder=(List<Integer>)request.getContext().get(""String_Node_Str"");
  if (lstSelectedPurchaseOrder != null) {
    for (    Integer it : lstSelectedPurchaseOrder) {
      purchaseOrderIds+=it.toString() + ""String_Node_Str"";
    }
  }
  if (!purchaseOrderIds.equals(""String_Node_Str"")) {
    purchaseOrderIds=""String_Node_Str"" + purchaseOrderIds.substring(0,purchaseOrderIds.length() - 1);
    purchaseOrder=purchaseOrder.find(new Long(lstSelectedPurchaseOrder.get(0)));
  }
 else   if (purchaseOrder.getId() != null) {
    purchaseOrderIds=""String_Node_Str"" + purchaseOrder.getId();
  }
  String language=""String_Node_Str"";
  try {
    language=purchaseOrder.getSupplierPartner().getLanguageSelect() != null ? purchaseOrder.getSupplierPartner().getLanguageSelect() : purchaseOrder.getCompany().getPrintingSettings().getLanguageSelect() != null ? purchaseOrder.getCompany().getPrintingSettings().getLanguageSelect() : ""String_Node_Str"";
  }
 catch (  NullPointerException e) {
    language=""String_Node_Str"";
  }
  language=language.equals(""String_Node_Str"") ? ""String_Node_Str"" : language;
  url.append(axelorSettings.get(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + purchaseOrderIds+ ""String_Node_Str""+ language+ axelorSettings.get(""String_Node_Str""));
  LOG.debug(""String_Node_Str"",url);
  String urlNotExist=URLService.notExist(url.toString());
  if (urlNotExist == null) {
    LOG.debug(""String_Node_Str"" + purchaseOrder.getPurchaseOrderSeq() + ""String_Node_Str""+ url.toString());
    String title=""String_Node_Str"";
    if (purchaseOrder.getPurchaseOrderSeq() != null) {
      title+=purchaseOrder.getPurchaseOrderSeq();
    }
    Map<String,Object> mapView=new HashMap<String,Object>();
    mapView.put(""String_Node_Str"",title);
    mapView.put(""String_Node_Str"",url);
    mapView.put(""String_Node_Str"",""String_Node_Str"");
    response.setView(mapView);
  }
 else {
    response.setFlash(urlNotExist);
  }
}"
59093,"public void createTasks(ActionRequest request,ActionResponse response) throws AxelorException {
  SalesOrder salesOrder=request.getContext().asType(SalesOrder.class);
  taskSalesOrderService.createTasks(SalesOrder.find(salesOrder.getId()));
  response.setReload(true);
}","public void createTasks(ActionRequest request,ActionResponse response) throws AxelorException {
  SalesOrder salesOrder=request.getContext().asType(SalesOrder.class);
  taskSalesOrderService.createTasks(SalesOrder.find(salesOrder.getId()));
}"
59094,"public long computeEntireCycleDuration(ProdResource prodResource,BigDecimal qty){
  long entireCycleDuration=0;
  entireCycleDuration+=prodResource.getStartingDuration();
  BigDecimal durationPerCycle=new BigDecimal(prodResource.getDurationPerCycle());
  entireCycleDuration+=(qty.divide(prodResource.getCapacityPerCycle())).multiply(durationPerCycle).longValue();
  entireCycleDuration+=prodResource.getEndingDuration();
  return entireCycleDuration;
}","public long computeEntireCycleDuration(ProdResource prodResource,BigDecimal qty){
  long machineDuration=this.computeMachineDuration(prodResource,qty);
  long humanDuration=this.computeHumanDuration(prodResource,qty);
  if (machineDuration >= humanDuration) {
    return machineDuration;
  }
 else {
    return humanDuration;
  }
}"
59095,"public void updateSalePrice(Product product) throws AxelorException {
  BigDecimal costPrice=product.getCostPrice();
  BigDecimal managePriceCoef=product.getManagPriceCoef();
  LOG.debug(""String_Node_Str"",costPrice);
  LOG.debug(""String_Node_Str"",costPrice);
  if (costPrice != null && managePriceCoef != null) {
    product.setSalePrice((costPrice.multiply(managePriceCoef)).setScale(5,BigDecimal.ROUND_HALF_UP));
    LOG.debug(""String_Node_Str"",product.getSalePrice());
  }
}","public void updateSalePrice(Product product) throws AxelorException {
  BigDecimal costPrice=product.getCostPrice();
  BigDecimal managePriceCoef=product.getManagPriceCoef();
  if (costPrice != null && managePriceCoef != null) {
    product.setSalePrice((costPrice.multiply(managePriceCoef)).setScale(5,BigDecimal.ROUND_HALF_UP));
  }
}"
59096,"public void updateSalePrice(Product product) throws AxelorException {
  BigDecimal costPrice=product.getCostPrice();
  BigDecimal managePriceCoef=product.getManagPriceCoef();
  if (costPrice != null && managePriceCoef != null) {
    product.setSalePrice(costPrice.multiply(managePriceCoef));
  }
}","public void updateSalePrice(Product product) throws AxelorException {
  BigDecimal costPrice=product.getCostPrice();
  BigDecimal managePriceCoef=product.getManagPriceCoef();
  LOG.debug(""String_Node_Str"",costPrice);
  LOG.debug(""String_Node_Str"",costPrice);
  if (costPrice != null && managePriceCoef != null) {
    product.setSalePrice((costPrice.multiply(managePriceCoef)).setScale(5,BigDecimal.ROUND_HALF_UP));
    LOG.debug(""String_Node_Str"",product.getSalePrice());
  }
}"
59097,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void cancel(ManufOrder manufOrder){
  if (manufOrder.getOperationOrderList() != null) {
    for (    OperationOrder operationOrder : manufOrder.getOperationOrderList()) {
      operationOrder.setStatusSelect(IOperationOrder.STATUS_CANCELED);
    }
  }
  manufOrder.setStatusSelect(IManufOrder.STATUS_CANCELED);
  manufOrder.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void cancel(ManufOrder manufOrder) throws AxelorException {
  if (manufOrder.getOperationOrderList() != null) {
    for (    OperationOrder operationOrder : manufOrder.getOperationOrderList()) {
      if (operationOrder.getStatusSelect() != IOperationOrder.STATUS_CANCELED) {
        operationOrderWorkflowService.cancel(operationOrder);
      }
    }
  }
  manufOrderStockMoveService.cancel(manufOrder);
  manufOrder.setStatusSelect(IManufOrder.STATUS_CANCELED);
  manufOrder.save();
}"
59098,"public void cancel(OperationOrder operationOrder) throws AxelorException {
  StockMove stockMove=operationOrder.getInStockMove();
  if (stockMove != null && stockMove.getStockMoveLineList() != null) {
    stockMoveService.cancel(stockMove);
  }
}","public void cancel(OperationOrder operationOrder) throws AxelorException {
  StockMove stockMove=operationOrder.getInStockMove();
  if (stockMove != null && stockMove.getStockMoveLineList() != null) {
    stockMoveService.cancel(stockMove);
    for (    StockMoveLine stockMoveLine : stockMove.getStockMoveLineList()) {
      stockMoveLine.setConsumedOperationOrder(null);
    }
  }
}"
59099,"private BigDecimal _computeToConsumeProduct(BillOfMaterial billOfMaterial) throws AxelorException {
  BigDecimal costPrice=BigDecimal.ZERO;
  if (billOfMaterial.getBillOfMaterialList() != null) {
    for (    BillOfMaterial billOfMaterialLine : billOfMaterial.getBillOfMaterialList()) {
      Product product=billOfMaterialLine.getProduct();
      if (product != null) {
        if (billOfMaterialLine.getIsRawMaterial()) {
          costPrice=costPrice.add(product.getCostPrice());
        }
 else {
          costPrice=costPrice.add(this._computeCostPrice(billOfMaterialLine));
        }
      }
    }
  }
  return costPrice;
}","private BigDecimal _computeToConsumeProduct(BillOfMaterial billOfMaterial) throws AxelorException {
  BigDecimal costPrice=BigDecimal.ZERO;
  if (billOfMaterial.getBillOfMaterialList() != null) {
    for (    BillOfMaterial billOfMaterialLine : billOfMaterial.getBillOfMaterialList()) {
      Product product=billOfMaterialLine.getProduct();
      if (product != null) {
        if (billOfMaterialLine.getIsRawMaterial()) {
          BigDecimal unitPrice=unitConversionService.convert(product.getUnit(),billOfMaterialLine.getUnit(),product.getCostPrice());
          costPrice=costPrice.add(unitPrice.multiply(billOfMaterialLine.getQty()));
        }
 else {
          costPrice=costPrice.add(this._computeCostPrice(billOfMaterialLine));
        }
      }
    }
  }
  return costPrice;
}"
59100,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void generatePurchaseOrder(Product product,BigDecimal qty,Location location,Project project,int type) throws AxelorException {
  MinStockRules minStockRules=this.getMinStockRules(product,location,type);
  if (minStockRules != null && minStockRules.getMinQty().compareTo(qty) == 1) {
    if (minStockRules.getOrderAlertSelect() == IMinStockRules.ORDER_ALERT_PURCHASE_ORDER) {
      Partner supplierPartner=product.getDefaultSupplierPartner();
      if (supplierPartner != null) {
        Company company=location.getCompany();
        PurchaseOrder purchaseOrder=purchaseOrderService.createPurchaseOrder(project,this.user,company,null,supplierPartner.getCurrency(),this.today.plusDays(supplierPartner.getDeliveryDelay()),null,supplychainConfigService.getSupplychainConfig(company).getSalesOrderInvoicingTypeSelect(),location,this.today,PriceList.filter(""String_Node_Str"",supplierPartner).fetchOne(),supplierPartner).save();
        purchaseOrder.addPurchaseOrderLineListItem(purchaseOrderLineService.createPurchaseOrderLine(purchaseOrder,product,""String_Node_Str"",null,minStockRules.getReOrderQty(),product.getUnit(),null));
        purchaseOrderService.computePurchaseOrder(purchaseOrder);
        purchaseOrder.save();
      }
    }
 else     if (minStockRules.getOrderAlertSelect() == IMinStockRules.ORDER_ALERT_PRODUCTION_ORDER) {
    }
 else     if (minStockRules.getOrderAlertSelect() == IMinStockRules.ORDER_ALERT_ALERT) {
    }
  }
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void generatePurchaseOrder(Product product,BigDecimal qty,LocationLine locationLine,Project project,int type) throws AxelorException {
  Location location=locationLine.getLocation();
  if (location == null) {
    return;
  }
  MinStockRules minStockRules=this.getMinStockRules(product,location,type);
  if (minStockRules == null) {
    return;
  }
  if (this.useMinStockRules(locationLine,minStockRules,qty,type)) {
    if (minStockRules.getOrderAlertSelect() == IMinStockRules.ORDER_ALERT_PURCHASE_ORDER) {
      Partner supplierPartner=product.getDefaultSupplierPartner();
      if (supplierPartner != null) {
        Company company=location.getCompany();
        PurchaseOrder purchaseOrder=purchaseOrderService.createPurchaseOrder(project,this.user,company,null,supplierPartner.getCurrency(),this.today.plusDays(supplierPartner.getDeliveryDelay()),null,supplychainConfigService.getSupplychainConfig(company).getSalesOrderInvoicingTypeSelect(),location,this.today,PriceList.filter(""String_Node_Str"",supplierPartner).fetchOne(),supplierPartner).save();
        purchaseOrder.addPurchaseOrderLineListItem(purchaseOrderLineService.createPurchaseOrderLine(purchaseOrder,product,""String_Node_Str"",null,minStockRules.getReOrderQty(),product.getUnit(),null));
        purchaseOrderService.computePurchaseOrder(purchaseOrder);
        purchaseOrder.save();
      }
    }
 else     if (minStockRules.getOrderAlertSelect() == IMinStockRules.ORDER_ALERT_PRODUCTION_ORDER) {
    }
 else     if (minStockRules.getOrderAlertSelect() == IMinStockRules.ORDER_ALERT_ALERT) {
    }
  }
}"
59101,"public void getProductInformation(ActionRequest request,ActionResponse response){
  SalesOrderLine salesOrderLine=request.getContext().asType(SalesOrderLine.class);
  SalesOrder salesOrder=salesOrderLine.getSalesOrder();
  if (salesOrder == null) {
    salesOrder=request.getContext().getParentContext().asType(SalesOrder.class);
  }
  if (salesOrder != null && salesOrderLine.getProduct() != null) {
    try {
      BigDecimal price=salesOrderLineService.getUnitPrice(salesOrder,salesOrderLine);
      response.setValue(""String_Node_Str"",salesOrderLineService.getTaxLine(salesOrder,salesOrderLine));
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getName());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getDefaultSupplierPartner());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getSaleSupplySelect());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getUnit());
      response.setValue(""String_Node_Str"",salesOrderLineService.getCompanyCostPrice(salesOrder,salesOrderLine));
      PriceList priceList=salesOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=salesOrderLineService.getPriceListLine(salesOrderLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}","public void getProductInformation(ActionRequest request,ActionResponse response){
  SalesOrderLine salesOrderLine=request.getContext().asType(SalesOrderLine.class);
  SalesOrder salesOrder=salesOrderLine.getSalesOrder();
  if (salesOrder == null) {
    salesOrder=request.getContext().getParentContext().asType(SalesOrder.class);
  }
  if (salesOrder != null && salesOrderLine.getProduct() != null) {
    try {
      BigDecimal price=salesOrderLineService.getUnitPrice(salesOrder,salesOrderLine);
      response.setValue(""String_Node_Str"",salesOrderLineService.getTaxLine(salesOrder,salesOrderLine));
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getName());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getSaleSupplySelect());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getUnit());
      response.setValue(""String_Node_Str"",salesOrderLineService.getCompanyCostPrice(salesOrder,salesOrderLine));
      PriceList priceList=salesOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=salesOrderLineService.getPriceListLine(salesOrderLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}"
59102,"public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}","public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}"
59103,"public void getProductInformation(ActionRequest request,ActionResponse response){
  SalesOrderSubLine salesOrderSubLine=request.getContext().asType(SalesOrderSubLine.class);
  SalesOrder salesOrder=null;
  if (salesOrderSubLine.getSalesOrderLine() != null && salesOrderSubLine.getSalesOrderLine().getSalesOrder() != null) {
    salesOrder=salesOrderSubLine.getSalesOrderLine().getSalesOrder();
  }
  if (salesOrder == null) {
    salesOrder=request.getContext().getParentContext().getParentContext().asType(SalesOrder.class);
  }
  if (salesOrder != null && salesOrderSubLine.getProduct() != null) {
    try {
      BigDecimal price=salesOrderSubLineService.getUnitPrice(salesOrder,salesOrderSubLine);
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getTaxLine(salesOrder,salesOrderSubLine));
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getUnitPrice(salesOrder,salesOrderSubLine));
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getName());
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getDefaultSupplierPartner());
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getUnit());
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getCompanyCostPrice(salesOrder,salesOrderSubLine));
      PriceList priceList=salesOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=salesOrderSubLineService.getPriceListLine(salesOrderSubLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}","public void getProductInformation(ActionRequest request,ActionResponse response){
  SalesOrderSubLine salesOrderSubLine=request.getContext().asType(SalesOrderSubLine.class);
  SalesOrder salesOrder=null;
  if (salesOrderSubLine.getSalesOrderLine() != null && salesOrderSubLine.getSalesOrderLine().getSalesOrder() != null) {
    salesOrder=salesOrderSubLine.getSalesOrderLine().getSalesOrder();
  }
  if (salesOrder == null) {
    salesOrder=request.getContext().getParentContext().getParentContext().asType(SalesOrder.class);
  }
  if (salesOrder != null && salesOrderSubLine.getProduct() != null) {
    try {
      BigDecimal price=salesOrderSubLineService.getUnitPrice(salesOrder,salesOrderSubLine);
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getTaxLine(salesOrder,salesOrderSubLine));
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getUnitPrice(salesOrder,salesOrderSubLine));
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getName());
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getUnit());
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getCompanyCostPrice(salesOrder,salesOrderSubLine));
      PriceList priceList=salesOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=salesOrderSubLineService.getPriceListLine(salesOrderSubLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}"
59104,"public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}","public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}"
59105,"public void compute(ActionRequest request,ActionResponse response){
  PurchaseOrderLine purchaseOrderLine=request.getContext().asType(PurchaseOrderLine.class);
  BigDecimal exTaxTotal=BigDecimal.ZERO;
  BigDecimal companyExTaxTotal=BigDecimal.ZERO;
  try {
    if (purchaseOrderLine.getPrice() != null && purchaseOrderLine.getQty() != null) {
      exTaxTotal=PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),purchaseOrderLineService.computeDiscount(purchaseOrderLine));
    }
    if (exTaxTotal != null) {
      PurchaseOrder purchaseOrder=purchaseOrderLine.getPurchaseOrder();
      if (purchaseOrder == null) {
        purchaseOrder=request.getContext().getParentContext().asType(PurchaseOrder.class);
      }
      if (purchaseOrder != null) {
        companyExTaxTotal=purchaseOrderLineService.getCompanyExTaxTotal(exTaxTotal,purchaseOrder);
      }
    }
    response.setValue(""String_Node_Str"",exTaxTotal);
    response.setValue(""String_Node_Str"",companyExTaxTotal);
  }
 catch (  Exception e) {
    response.setFlash(e.getMessage());
  }
}","public void compute(ActionRequest request,ActionResponse response){
  PurchaseOrderLine purchaseOrderLine=request.getContext().asType(PurchaseOrderLine.class);
  BigDecimal exTaxTotal=BigDecimal.ZERO;
  BigDecimal companyExTaxTotal=BigDecimal.ZERO;
  try {
    if (purchaseOrderLine.getPrice() != null && purchaseOrderLine.getQty() != null) {
      exTaxTotal=PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),purchaseOrderLineService.computeDiscount(purchaseOrderLine));
    }
    if (exTaxTotal != null) {
      PurchaseOrder purchaseOrder=purchaseOrderLine.getPurchaseOrder();
      if (purchaseOrder == null) {
        purchaseOrder=request.getContext().getParentContext().asType(PurchaseOrder.class);
      }
      if (purchaseOrder != null) {
        companyExTaxTotal=purchaseOrderLineService.getCompanyExTaxTotal(exTaxTotal,purchaseOrder);
      }
      response.setValue(""String_Node_Str"",purchaseOrderLineService.getMinSalePrice(purchaseOrder,purchaseOrderLine));
      response.setValue(""String_Node_Str"",purchaseOrderLineService.getSalePrice(purchaseOrder,purchaseOrderLine.getPrice()));
    }
    response.setValue(""String_Node_Str"",exTaxTotal);
    response.setValue(""String_Node_Str"",companyExTaxTotal);
  }
 catch (  Exception e) {
    response.setFlash(e.getMessage());
  }
}"
59106,"public void getProductInformation(ActionRequest request,ActionResponse response){
  PurchaseOrderLine purchaseOrderLine=request.getContext().asType(PurchaseOrderLine.class);
  PurchaseOrder purchaseOrder=purchaseOrderLine.getPurchaseOrder();
  if (purchaseOrder == null) {
    purchaseOrder=request.getContext().getParentContext().asType(PurchaseOrder.class);
  }
  if (purchaseOrder != null && purchaseOrderLine.getProduct() != null) {
    try {
      BigDecimal price=purchaseOrderLineService.getUnitPrice(purchaseOrder,purchaseOrderLine);
      response.setValue(""String_Node_Str"",purchaseOrderLineService.getTaxLine(purchaseOrder,purchaseOrderLine));
      response.setValue(""String_Node_Str"",purchaseOrderLine.getProduct().getName());
      response.setValue(""String_Node_Str"",purchaseOrderLine.getProduct().getUnit());
      PriceList priceList=purchaseOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=purchaseOrderLineService.getPriceListLine(purchaseOrderLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}","public void getProductInformation(ActionRequest request,ActionResponse response){
  PurchaseOrderLine purchaseOrderLine=request.getContext().asType(PurchaseOrderLine.class);
  PurchaseOrder purchaseOrder=purchaseOrderLine.getPurchaseOrder();
  if (purchaseOrder == null) {
    purchaseOrder=request.getContext().getParentContext().asType(PurchaseOrder.class);
  }
  if (purchaseOrder != null && purchaseOrderLine.getProduct() != null) {
    try {
      BigDecimal price=purchaseOrderLineService.getUnitPrice(purchaseOrder,purchaseOrderLine);
      response.setValue(""String_Node_Str"",purchaseOrderLineService.getTaxLine(purchaseOrder,purchaseOrderLine));
      response.setValue(""String_Node_Str"",purchaseOrderLine.getProduct().getName());
      response.setValue(""String_Node_Str"",purchaseOrderLine.getProduct().getUnit());
      response.setValue(""String_Node_Str"",purchaseOrderLineService.getQty(purchaseOrderLine));
      response.setValue(""String_Node_Str"",purchaseOrderLineService.getMinSalePrice(purchaseOrder,purchaseOrderLine));
      response.setValue(""String_Node_Str"",purchaseOrderLineService.getSalePrice(purchaseOrder,price));
      PriceList priceList=purchaseOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=purchaseOrderLineService.getPriceListLine(purchaseOrderLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}"
59107,"public BigDecimal getMinSalePrice(PurchaseOrder purchaseOrder,PurchaseOrderLine purchaseOrderLine) throws AxelorException {
  Product product=purchaseOrderLine.getProduct();
  return currencyService.getAmountCurrencyConverted(product.getPurchaseCurrency(),purchaseOrder.getCurrency(),product.getSalePrice(),purchaseOrder.getOrderDate());
}","public BigDecimal getMinSalePrice(PurchaseOrder purchaseOrder,PurchaseOrderLine purchaseOrderLine) throws AxelorException {
  Product product=purchaseOrderLine.getProduct();
  return currencyService.getAmountCurrencyConverted(product.getSaleCurrency(),purchaseOrder.getCurrency(),product.getSalePrice(),purchaseOrder.getOrderDate());
}"
59108,"public PurchaseOrderLine createPurchaseOrderLine(PurchaseOrder purchaseOrder,Product product,String description,ProductVariant productVariant,BigDecimal qty,Unit unit,Task task) throws AxelorException {
  PurchaseOrderLine purchaseOrderLine=new PurchaseOrderLine();
  purchaseOrderLine.setPurchaseOrder(purchaseOrder);
  purchaseOrderLine.setAmountInvoiced(BigDecimal.ZERO);
  purchaseOrderLine.setDeliveryDate(purchaseOrder.getDeliveryDate());
  purchaseOrderLine.setDescription(description);
  purchaseOrderLine.setIsInvoiced(false);
  purchaseOrderLine.setIsOrdered(false);
  purchaseOrderLine.setProduct(product);
  purchaseOrderLine.setProductName(product.getName());
  purchaseOrderLine.setProductVariant(productVariant);
  purchaseOrderLine.setQty(qty);
  purchaseOrderLine.setSequence(sequence);
  sequence++;
  purchaseOrderLine.setTask(task);
  purchaseOrderLine.setUnit(unit);
  purchaseOrderLine.setTaxLine(this.getTaxLine(purchaseOrder,purchaseOrderLine));
  BigDecimal price=this.getUnitPrice(purchaseOrder,purchaseOrderLine);
  PriceList priceList=purchaseOrder.getPriceList();
  if (priceList != null) {
    PriceListLine priceListLine=this.getPriceListLine(purchaseOrderLine,priceList);
    Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
    purchaseOrderLine.setDiscountAmount((BigDecimal)discounts.get(""String_Node_Str""));
    purchaseOrderLine.setDiscountTypeSelect((Integer)discounts.get(""String_Node_Str""));
    if (discounts.get(""String_Node_Str"") != null) {
      price=(BigDecimal)discounts.get(""String_Node_Str"");
    }
  }
  purchaseOrderLine.setPrice(price);
  BigDecimal exTaxTotal=PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),this.computeDiscount(purchaseOrderLine));
  BigDecimal companyExTaxTotal=this.getCompanyExTaxTotal(exTaxTotal,purchaseOrder);
  purchaseOrderLine.setExTaxTotal(exTaxTotal);
  purchaseOrderLine.setCompanyExTaxTotal(companyExTaxTotal);
  purchaseOrderLine.setAmountRemainingToBeInvoiced(exTaxTotal);
  return purchaseOrderLine;
}","public PurchaseOrderLine createPurchaseOrderLine(PurchaseOrder purchaseOrder,Product product,String description,ProductVariant productVariant,BigDecimal qty,Unit unit,Task task) throws AxelorException {
  PurchaseOrderLine purchaseOrderLine=new PurchaseOrderLine();
  purchaseOrderLine.setPurchaseOrder(purchaseOrder);
  purchaseOrderLine.setAmountInvoiced(BigDecimal.ZERO);
  purchaseOrderLine.setEstimatedDelivDate(purchaseOrder.getDeliveryDate());
  purchaseOrderLine.setDescription(description);
  purchaseOrderLine.setIsInvoiced(false);
  purchaseOrderLine.setIsOrdered(false);
  purchaseOrderLine.setProduct(product);
  purchaseOrderLine.setProductName(product.getName());
  purchaseOrderLine.setProductVariant(productVariant);
  purchaseOrderLine.setQty(qty);
  purchaseOrderLine.setSequence(sequence);
  sequence++;
  purchaseOrderLine.setTask(task);
  purchaseOrderLine.setUnit(unit);
  purchaseOrderLine.setTaxLine(this.getTaxLine(purchaseOrder,purchaseOrderLine));
  BigDecimal price=this.getUnitPrice(purchaseOrder,purchaseOrderLine);
  PriceList priceList=purchaseOrder.getPriceList();
  if (priceList != null) {
    PriceListLine priceListLine=this.getPriceListLine(purchaseOrderLine,priceList);
    Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
    purchaseOrderLine.setDiscountAmount((BigDecimal)discounts.get(""String_Node_Str""));
    purchaseOrderLine.setDiscountTypeSelect((Integer)discounts.get(""String_Node_Str""));
    if (discounts.get(""String_Node_Str"") != null) {
      price=(BigDecimal)discounts.get(""String_Node_Str"");
    }
  }
  purchaseOrderLine.setPrice(price);
  BigDecimal exTaxTotal=PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),this.computeDiscount(purchaseOrderLine));
  BigDecimal companyExTaxTotal=this.getCompanyExTaxTotal(exTaxTotal,purchaseOrder);
  purchaseOrderLine.setExTaxTotal(exTaxTotal);
  purchaseOrderLine.setCompanyExTaxTotal(companyExTaxTotal);
  purchaseOrderLine.setAmountRemainingToBeInvoiced(exTaxTotal);
  return purchaseOrderLine;
}"
59109,"public void compute(ActionRequest request,ActionResponse response){
  PurchaseOrderLine purchaseOrderLine=request.getContext().asType(PurchaseOrderLine.class);
  BigDecimal exTaxTotal=BigDecimal.ZERO;
  BigDecimal companyExTaxTotal=BigDecimal.ZERO;
  try {
    if (purchaseOrderLine.getPrice() != null && purchaseOrderLine.getQty() != null) {
      exTaxTotal=PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),purchaseOrderLineService.computeDiscount(purchaseOrderLine));
    }
    if (exTaxTotal != null) {
      PurchaseOrder purchaseOrder=purchaseOrderLine.getPurchaseOrder();
      if (purchaseOrder == null) {
        purchaseOrder=request.getContext().getParentContext().asType(PurchaseOrder.class);
      }
      if (purchaseOrder != null) {
        companyExTaxTotal=purchaseOrderLineService.getCompanyExTaxTotal(exTaxTotal,purchaseOrder);
      }
      response.setValue(""String_Node_Str"",purchaseOrderLineService.getMinSalePrice(purchaseOrder,purchaseOrderLine));
      response.setValue(""String_Node_Str"",purchaseOrderLineService.getSalePrice(purchaseOrder,purchaseOrderLine.getPrice()));
    }
    response.setValue(""String_Node_Str"",exTaxTotal);
    response.setValue(""String_Node_Str"",companyExTaxTotal);
  }
 catch (  Exception e) {
    response.setFlash(e.getMessage());
  }
}","public void compute(ActionRequest request,ActionResponse response){
  PurchaseOrderLine purchaseOrderLine=request.getContext().asType(PurchaseOrderLine.class);
  BigDecimal exTaxTotal=BigDecimal.ZERO;
  BigDecimal companyExTaxTotal=BigDecimal.ZERO;
  try {
    if (purchaseOrderLine.getPrice() != null && purchaseOrderLine.getQty() != null) {
      exTaxTotal=PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),purchaseOrderLineService.computeDiscount(purchaseOrderLine));
    }
    if (exTaxTotal != null) {
      PurchaseOrder purchaseOrder=purchaseOrderLine.getPurchaseOrder();
      if (purchaseOrder == null) {
        purchaseOrder=request.getContext().getParentContext().asType(PurchaseOrder.class);
      }
      if (purchaseOrder != null) {
        companyExTaxTotal=purchaseOrderLineService.getCompanyExTaxTotal(exTaxTotal,purchaseOrder);
        response.setValue(""String_Node_Str"",purchaseOrderLineService.getMinSalePrice(purchaseOrder,purchaseOrderLine));
        response.setValue(""String_Node_Str"",purchaseOrderLineService.getSalePrice(purchaseOrder,purchaseOrderLine.getPrice()));
      }
    }
    response.setValue(""String_Node_Str"",exTaxTotal);
    response.setValue(""String_Node_Str"",companyExTaxTotal);
  }
 catch (  Exception e) {
    response.setFlash(e.getMessage());
  }
}"
59110,"public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}","public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}"
59111,"public BigDecimal getAmountCurrencyConverted(Currency currencyStart,Currency currencyEnd,BigDecimal amountToPay,LocalDate localDate) throws AxelorException {
  if (!currencyStart.equals(currencyEnd)) {
    CurrencyConversionLine currencyConversionLine=this.getCurrencyConversionLine(currencyStart,currencyEnd,localDate);
    if (currencyConversionLine != null) {
      return amountToPay.multiply(currencyConversionLine.getExchangeRate()).setScale(2,RoundingMode.HALF_UP);
    }
 else {
      currencyConversionLine=this.getCurrencyConversionLine(currencyEnd,currencyStart,localDate);
    }
    if (currencyConversionLine == null) {
      throw new AxelorException(String.format(metaTranslations.get(IExceptionMessage.CURRENCY_1),currencyStart.getName(),currencyEnd.getName(),today),IException.CONFIGURATION_ERROR);
    }
    return amountToPay.divide(currencyConversionLine.getExchangeRate(),2,RoundingMode.HALF_UP).setScale(2,RoundingMode.HALF_UP);
  }
  return amountToPay;
}","public BigDecimal getAmountCurrencyConverted(Currency currencyStart,Currency currencyEnd,BigDecimal amountToPay,LocalDate localDate) throws AxelorException {
  if (!currencyStart.equals(currencyEnd)) {
    CurrencyConversionLine currencyConversionLine=this.getCurrencyConversionLine(currencyStart,currencyEnd,localDate);
    if (currencyConversionLine != null) {
      return amountToPay.multiply(currencyConversionLine.getExchangeRate()).setScale(2,RoundingMode.HALF_UP);
    }
 else {
      currencyConversionLine=this.getCurrencyConversionLine(currencyEnd,currencyStart,localDate);
    }
    if (currencyConversionLine == null) {
      throw new AxelorException(String.format(metaTranslations.get(IExceptionMessage.CURRENCY_1),currencyStart.getName(),currencyEnd.getName(),today),IException.CONFIGURATION_ERROR);
    }
    BigDecimal exchangeRate=currencyConversionLine.getExchangeRate();
    if (exchangeRate == null || exchangeRate.compareTo(BigDecimal.ZERO) == 0) {
      throw new AxelorException(String.format(metaTranslations.get(IExceptionMessage.CURRENCY_2),currencyStart.getName(),currencyEnd.getName(),today),IException.CONFIGURATION_ERROR);
    }
    return amountToPay.divide(exchangeRate,2,RoundingMode.HALF_UP).setScale(2,RoundingMode.HALF_UP);
  }
  return amountToPay;
}"
59112,"public Address createPrimaryAddress(Map<String,Object> context){
  String addressL4=(String)context.get(""String_Node_Str"");
  String addressL5=(String)context.get(""String_Node_Str"");
  String addressL6=(String)context.get(""String_Node_Str"") + ""String_Node_Str"" + (String)context.get(""String_Node_Str"");
  ;
  Country addressL7Country=null;
  Map<String,Object> countryContext=(Map<String,Object>)context.get(""String_Node_Str"");
  if (countryContext != null) {
    addressL7Country=Country.find(((Integer)countryContext.get(""String_Node_Str"")).longValue());
  }
  Address address=addressService.getAddress(null,null,addressL4,addressL5,addressL6,addressL7Country);
  if (address == null) {
    addressService.createAddress(null,null,addressL4,addressL5,addressL6,addressL7Country);
  }
  return address;
}","public Address createPrimaryAddress(Map<String,Object> context){
  String addressL4=(String)context.get(""String_Node_Str"");
  String addressL5=(String)context.get(""String_Node_Str"");
  String addressL6=(String)context.get(""String_Node_Str"") + ""String_Node_Str"" + (String)context.get(""String_Node_Str"");
  ;
  Country addressL7Country=null;
  Map<String,Object> countryContext=(Map<String,Object>)context.get(""String_Node_Str"");
  if (countryContext != null) {
    addressL7Country=Country.find(((Integer)countryContext.get(""String_Node_Str"")).longValue());
  }
  Address address=addressService.getAddress(null,null,addressL4,addressL5,addressL6,addressL7Country);
  if (address == null) {
    address=addressService.createAddress(null,null,addressL4,addressL5,addressL6,addressL7Country);
  }
  return address;
}"
59113,"public Address createOtherAddress(Map<String,Object> context){
  String addressL4=(String)context.get(""String_Node_Str"");
  String addressL5=(String)context.get(""String_Node_Str"");
  String addressL6=(String)context.get(""String_Node_Str"") + ""String_Node_Str"" + (String)context.get(""String_Node_Str"");
  Country addressL7Country=null;
  Map<String,Object> countryContext=(Map<String,Object>)context.get(""String_Node_Str"");
  if (countryContext != null) {
    addressL7Country=Country.find(((Integer)countryContext.get(""String_Node_Str"")).longValue());
  }
  Address address=addressService.getAddress(null,null,addressL4,addressL5,addressL6,addressL7Country);
  if (address == null) {
    addressService.createAddress(null,null,addressL4,addressL5,addressL6,addressL7Country);
  }
  return address;
}","public Address createOtherAddress(Map<String,Object> context){
  String addressL4=(String)context.get(""String_Node_Str"");
  String addressL5=(String)context.get(""String_Node_Str"");
  String addressL6=(String)context.get(""String_Node_Str"") + ""String_Node_Str"" + (String)context.get(""String_Node_Str"");
  Country addressL7Country=null;
  Map<String,Object> countryContext=(Map<String,Object>)context.get(""String_Node_Str"");
  if (countryContext != null) {
    addressL7Country=Country.find(((Integer)countryContext.get(""String_Node_Str"")).longValue());
  }
  Address address=addressService.getAddress(null,null,addressL4,addressL5,addressL6,addressL7Country);
  if (address == null) {
    address=addressService.createAddress(null,null,addressL4,addressL5,addressL6,addressL7Country);
  }
  return address;
}"
59114,"/** 
 * Convert lead into a partner
 * @param lead
 * @return
 * @throws AxelorException
 */
@Transactional public Lead convertLead(Lead lead,Partner partner,Partner contactPartner,Opportunity opportunity,Event callEvent,Event meetingEvent,Event taskEvent) throws AxelorException {
  if (partner != null && contactPartner != null) {
    if (partner.getContactPartnerSet() == null) {
      partner.setContactPartnerSet(new HashSet<Partner>());
    }
    partner.getContactPartnerSet().add(contactPartner);
  }
  if (opportunity != null && partner != null) {
    opportunity.setPartner(partner);
  }
  if (partner != null) {
    lead.setPartner(partner);
    partner.save();
  }
  if (contactPartner != null) {
    contactPartner.save();
  }
  if (opportunity != null) {
    opportunity.save();
  }
  if (callEvent != null) {
    callEvent.save();
  }
  if (meetingEvent != null) {
    meetingEvent.save();
  }
  if (taskEvent != null) {
    taskEvent.save();
  }
  lead.setPartner(partner);
  lead.setStatusSelect(ILead.STATUS_CONVERTED);
  lead.save();
  return lead;
}","/** 
 * Convert lead into a partner
 * @param lead
 * @return
 * @throws AxelorException
 */
@Transactional(rollbackOn={AxelorException.class,Exception.class}) public Lead convertLead(Lead lead,Partner partner,Partner contactPartner,Opportunity opportunity,Event callEvent,Event meetingEvent,Event taskEvent) throws AxelorException {
  if (partner != null && contactPartner != null) {
    if (partner.getContactPartnerSet() == null) {
      partner.setContactPartnerSet(new HashSet<Partner>());
    }
    partner.getContactPartnerSet().add(contactPartner);
  }
  if (opportunity != null && partner != null) {
    opportunity.setPartner(partner);
  }
  if (partner != null) {
    lead.setPartner(partner);
    partner.save();
  }
  if (contactPartner != null) {
    contactPartner.save();
  }
  if (opportunity != null) {
    opportunity.save();
  }
  if (callEvent != null) {
    callEvent.save();
  }
  if (meetingEvent != null) {
    meetingEvent.save();
  }
  if (taskEvent != null) {
    taskEvent.save();
  }
  lead.setPartner(partner);
  lead.setStatusSelect(ILead.STATUS_CONVERTED);
  lead.save();
  return lead;
}"
59115,"public ManufOrder createManufOrder(BigDecimal qty,int priority,boolean isToInvoice,Company company,BillOfMaterial billOfMaterial,LocalDateTime plannedStartDateT) throws AxelorException {
  logger.debug(""String_Node_Str"",priority);
  ProdProcess prodProcess=billOfMaterial.getProdProcess();
  ManufOrder manufOrder=new ManufOrder(isToInvoice,qty,company,this.getManufOrderSeq(),priority,this.isManagedConsumedProduct(billOfMaterial),billOfMaterial,prodProcess,plannedStartDateT,IManufOrder.STATUS_DRAFT);
  for (  ProdProcessLine prodProcessLine : this._sortProdProcessLineByPriority(prodProcess.getProdProcessLineList())) {
    OperationOrder operationOrder=operationOrderService.createOperationOrder(manufOrder,prodProcessLine.getPriority(),isToInvoice,prodProcessLine.getProdResource(),prodProcessLine.getProdResource(),prodProcessLine);
    operationOrder=operationOrderWorkflowService.plan(operationOrder);
    manufOrder.addOperationOrderListItem(operationOrder);
  }
  return manufOrder;
}","public ManufOrder createManufOrder(BigDecimal qty,int priority,boolean isToInvoice,Company company,BillOfMaterial billOfMaterial,LocalDateTime plannedStartDateT) throws AxelorException {
  logger.debug(""String_Node_Str"",priority);
  ProdProcess prodProcess=billOfMaterial.getProdProcess();
  ManufOrder manufOrder=new ManufOrder(isToInvoice,qty,company,this.getManufOrderSeq(),priority,this.isManagedConsumedProduct(billOfMaterial),billOfMaterial,prodProcess,plannedStartDateT,IManufOrder.STATUS_DRAFT);
  for (  ProdProcessLine prodProcessLine : this._sortProdProcessLineByPriority(prodProcess.getProdProcessLineList())) {
    manufOrder.addOperationOrderListItem(operationOrderService.createOperationOrder(manufOrder,prodProcessLine,isToInvoice));
  }
  if (!manufOrder.getIsConsProOnOperation()) {
    this.createToConsumeProdProductList(manufOrder,billOfMaterial);
  }
  this.createToProduceProdProductList(manufOrder,billOfMaterial);
  return manufOrder;
}"
59116,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public ManufOrder generateManufOrder(BigDecimal qty,int priority,boolean isToInvoice,Company company,BillOfMaterial billOfMaterial,LocalDateTime plannedStartDateT) throws AxelorException {
  ManufOrder manufOrder=this.createManufOrder(qty,priority,IS_TO_INVOICE,company,billOfMaterial,plannedStartDateT);
  if (!manufOrder.getIsConsProOnOperation()) {
    this.createToConsumeProdProductList(manufOrder,billOfMaterial);
  }
  this.createToProduceProdProductList(manufOrder,billOfMaterial);
  manufOrder.setStatusSelect(IManufOrder.STATUS_DRAFT);
  return manufOrder.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public ManufOrder generateManufOrder(BigDecimal qty,int priority,boolean isToInvoice,Company company,BillOfMaterial billOfMaterial,LocalDateTime plannedStartDateT) throws AxelorException {
  ManufOrder manufOrder=this.createManufOrder(qty,priority,IS_TO_INVOICE,company,billOfMaterial,plannedStartDateT);
  manufOrder=manufOrderWorkflowService.plan(manufOrder);
  return manufOrder.save();
}"
59117,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public OperationOrder createOperationOrder(ManufOrder manufOrder,int priority,boolean isToInvoice,ProdResource prodResource,ProdResource machineProdResource,ProdProcessLine prodProcessLine) throws AxelorException {
  logger.debug(""String_Node_Str"",priority,manufOrder.getManufOrderSeq());
  OperationOrder operationOrder=new OperationOrder(priority,this.computeName(manufOrder,priority),isToInvoice,manufOrder,prodResource,machineProdResource,IOperationOrder.STATUS_DRAFT,prodProcessLine);
  this._createToConsumeProdProductList(operationOrder,prodProcessLine);
  this._createHumanResourceList(operationOrder,machineProdResource);
  operationOrder.setStatusSelect(IOperationOrder.STATUS_DRAFT);
  return operationOrder.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public OperationOrder createOperationOrder(ManufOrder manufOrder,int priority,boolean isToInvoice,ProdResource prodResource,ProdResource machineProdResource,ProdProcessLine prodProcessLine) throws AxelorException {
  logger.debug(""String_Node_Str"",priority,manufOrder.getManufOrderSeq());
  OperationOrder operationOrder=new OperationOrder(priority,this.computeName(manufOrder,priority),isToInvoice,manufOrder,prodResource,machineProdResource,IOperationOrder.STATUS_DRAFT,prodProcessLine);
  this._createToConsumeProdProductList(operationOrder,prodProcessLine);
  this._createHumanResourceList(operationOrder,machineProdResource);
  return operationOrder.save();
}"
59118,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public ProductionOrder generateProductionOrder(BillOfMaterial billOfMaterial,BigDecimal qtyRequested,Project businessProject) throws AxelorException {
  ProductionOrder productionOrder=this.createProductionOrder(businessProject,false);
  BigDecimal qty=qtyRequested.divide(billOfMaterial.getQty());
  ManufOrder manufOrder=manufOrderService.generateManufOrder(qty,ManufOrderService.DEFAULT_PRIORITY,ManufOrderService.IS_TO_INVOICE,billOfMaterial.getCompany(),billOfMaterial,new LocalDateTime());
  manufOrder=manufOrderWorkflowService.plan(manufOrder);
  productionOrder.addManufOrderListItem(manufOrder);
  return productionOrder.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public ProductionOrder generateProductionOrder(BillOfMaterial billOfMaterial,BigDecimal qtyRequested,Project businessProject) throws AxelorException {
  ProductionOrder productionOrder=this.createProductionOrder(businessProject,false);
  BigDecimal qty=qtyRequested.divide(billOfMaterial.getQty());
  ManufOrder manufOrder=manufOrderService.generateManufOrder(qty,ManufOrderService.DEFAULT_PRIORITY,ManufOrderService.IS_TO_INVOICE,billOfMaterial.getCompany(),billOfMaterial,new LocalDateTime());
  productionOrder.addManufOrderListItem(manufOrder);
  return productionOrder.save();
}"
59119,"public PurchaseOrderLine createPurchaseOrderLine(PurchaseOrder purchaseOrder,Product product,String description,ProductVariant productVariant,BigDecimal qty,Unit unit,Task task) throws AxelorException {
  PurchaseOrderLine purchaseOrderLine=new PurchaseOrderLine();
  purchaseOrderLine.setAmountInvoiced(BigDecimal.ZERO);
  purchaseOrderLine.setDeliveryDate(purchaseOrder.getDeliveryDate());
  purchaseOrderLine.setDescription(description);
  purchaseOrderLine.setIsInvoiced(false);
  purchaseOrderLine.setIsOrdered(false);
  BigDecimal price=this.getUnitPrice(purchaseOrder,purchaseOrderLine);
  PriceList priceList=purchaseOrder.getPriceList();
  if (priceList != null) {
    PriceListLine priceListLine=this.getPriceListLine(purchaseOrderLine,priceList);
    Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
    purchaseOrderLine.setDiscountAmount((BigDecimal)discounts.get(""String_Node_Str""));
    purchaseOrderLine.setDiscountTypeSelect((Integer)discounts.get(""String_Node_Str""));
    if (discounts.get(""String_Node_Str"") != null) {
      price=(BigDecimal)discounts.get(""String_Node_Str"");
    }
  }
  purchaseOrderLine.setPrice(price);
  purchaseOrderLine.setProduct(product);
  purchaseOrderLine.setProductName(product.getName());
  purchaseOrderLine.setProductVariant(productVariant);
  purchaseOrderLine.setPurchaseOrder(purchaseOrder);
  purchaseOrderLine.setQty(qty);
  purchaseOrderLine.setSequence(sequence);
  sequence++;
  purchaseOrderLine.setTask(task);
  purchaseOrderLine.setUnit(unit);
  purchaseOrderLine.setTaxLine(this.getTaxLine(purchaseOrder,purchaseOrderLine));
  BigDecimal exTaxTotal=PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),this.computeDiscount(purchaseOrderLine));
  BigDecimal companyExTaxTotal=this.getCompanyExTaxTotal(exTaxTotal,purchaseOrder);
  purchaseOrderLine.setExTaxTotal(exTaxTotal);
  purchaseOrderLine.setCompanyExTaxTotal(companyExTaxTotal);
  purchaseOrderLine.setAmountRemainingToBeInvoiced(exTaxTotal);
  return purchaseOrderLine;
}","public PurchaseOrderLine createPurchaseOrderLine(PurchaseOrder purchaseOrder,Product product,String description,ProductVariant productVariant,BigDecimal qty,Unit unit,Task task) throws AxelorException {
  PurchaseOrderLine purchaseOrderLine=new PurchaseOrderLine();
  purchaseOrderLine.setPurchaseOrder(purchaseOrder);
  purchaseOrderLine.setAmountInvoiced(BigDecimal.ZERO);
  purchaseOrderLine.setDeliveryDate(purchaseOrder.getDeliveryDate());
  purchaseOrderLine.setDescription(description);
  purchaseOrderLine.setIsInvoiced(false);
  purchaseOrderLine.setIsOrdered(false);
  purchaseOrderLine.setProduct(product);
  purchaseOrderLine.setProductName(product.getName());
  purchaseOrderLine.setProductVariant(productVariant);
  purchaseOrderLine.setQty(qty);
  purchaseOrderLine.setSequence(sequence);
  sequence++;
  purchaseOrderLine.setTask(task);
  purchaseOrderLine.setUnit(unit);
  purchaseOrderLine.setTaxLine(this.getTaxLine(purchaseOrder,purchaseOrderLine));
  BigDecimal price=this.getUnitPrice(purchaseOrder,purchaseOrderLine);
  PriceList priceList=purchaseOrder.getPriceList();
  if (priceList != null) {
    PriceListLine priceListLine=this.getPriceListLine(purchaseOrderLine,priceList);
    Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
    purchaseOrderLine.setDiscountAmount((BigDecimal)discounts.get(""String_Node_Str""));
    purchaseOrderLine.setDiscountTypeSelect((Integer)discounts.get(""String_Node_Str""));
    if (discounts.get(""String_Node_Str"") != null) {
      price=(BigDecimal)discounts.get(""String_Node_Str"");
    }
  }
  purchaseOrderLine.setPrice(price);
  BigDecimal exTaxTotal=PurchaseOrderLineService.computeAmount(purchaseOrderLine.getQty(),this.computeDiscount(purchaseOrderLine));
  BigDecimal companyExTaxTotal=this.getCompanyExTaxTotal(exTaxTotal,purchaseOrder);
  purchaseOrderLine.setExTaxTotal(exTaxTotal);
  purchaseOrderLine.setCompanyExTaxTotal(companyExTaxTotal);
  purchaseOrderLine.setAmountRemainingToBeInvoiced(exTaxTotal);
  return purchaseOrderLine;
}"
59120,"public PurchaseOrder createPurchaseOrder(Project project,UserInfo buyerUserInfo,Company company,Partner contactPartner,Currency currency,LocalDate deliveryDate,String externalReference,int invoicingTypeSelect,Location location,LocalDate orderDate,PriceList priceList,Partner supplierPartner) throws AxelorException {
  PurchaseOrder purchaseOrder=new PurchaseOrder();
  purchaseOrder.setProject(project);
  purchaseOrder.setBuyerUserInfo(buyerUserInfo);
  purchaseOrder.setCompany(company);
  purchaseOrder.setContactPartner(contactPartner);
  purchaseOrder.setCurrency(currency);
  purchaseOrder.setDeliveryDate(deliveryDate);
  purchaseOrder.setExternalReference(externalReference);
  purchaseOrder.setInvoicingTypeSelect(invoicingTypeSelect);
  purchaseOrder.setLocation(location);
  purchaseOrder.setOrderDate(orderDate);
  purchaseOrder.setPriceList(priceList);
  purchaseOrder.setPurchaseOrderLineList(new ArrayList<PurchaseOrderLine>());
  purchaseOrder.setPurchaseOrderSeq(this.getSequence(company));
  purchaseOrder.setStatusSelect(IPurchaseOrder.STATUS_DRAFT);
  purchaseOrder.setSupplierPartner(supplierPartner);
  return purchaseOrder;
}","public PurchaseOrder createPurchaseOrder(Project project,UserInfo buyerUserInfo,Company company,Partner contactPartner,Currency currency,LocalDate deliveryDate,String externalReference,int invoicingTypeSelect,Location location,LocalDate orderDate,PriceList priceList,Partner supplierPartner) throws AxelorException {
  LOG.debug(""String_Node_Str"",new Object[]{company.getName(),externalReference,supplierPartner.getFullName()});
  PurchaseOrder purchaseOrder=new PurchaseOrder();
  purchaseOrder.setProject(project);
  purchaseOrder.setBuyerUserInfo(buyerUserInfo);
  purchaseOrder.setCompany(company);
  purchaseOrder.setContactPartner(contactPartner);
  purchaseOrder.setCurrency(currency);
  purchaseOrder.setDeliveryDate(deliveryDate);
  purchaseOrder.setExternalReference(externalReference);
  purchaseOrder.setInvoicingTypeSelect(invoicingTypeSelect);
  purchaseOrder.setLocation(location);
  purchaseOrder.setOrderDate(orderDate);
  purchaseOrder.setPriceList(priceList);
  purchaseOrder.setPurchaseOrderLineList(new ArrayList<PurchaseOrderLine>());
  purchaseOrder.setPurchaseOrderSeq(this.getSequence(company));
  purchaseOrder.setStatusSelect(IPurchaseOrder.STATUS_DRAFT);
  purchaseOrder.setSupplierPartner(supplierPartner);
  return purchaseOrder;
}"
59121,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void createPurchaseOrder(Partner supplierPartner,List<SalesOrderLine> salesOrderLineList,SalesOrder salesOrder) throws AxelorException {
  PurchaseOrder purchaseOrder=purchaseOrderService.createPurchaseOrder(salesOrder.getProject(),user,salesOrder.getCompany(),null,supplierPartner.getCurrency(),null,null,IPurchaseOrder.INVOICING_FREE,purchaseOrderService.getLocation(salesOrder.getCompany()),today,PriceList.all().filter(""String_Node_Str"",supplierPartner).fetchOne(),supplierPartner);
  for (  SalesOrderLine salesOrderLine : salesOrderLineList) {
    purchaseOrder.addPurchaseOrderLineListItem(purchaseOrderLineService.createPurchaseOrderLine(purchaseOrder,salesOrderLine));
  }
  purchaseOrder.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void createPurchaseOrder(Partner supplierPartner,List<SalesOrderLine> salesOrderLineList,SalesOrder salesOrder) throws AxelorException {
  LOG.debug(""String_Node_Str"",new Object[]{salesOrder.getSalesOrderSeq()});
  PurchaseOrder purchaseOrder=purchaseOrderService.createPurchaseOrder(salesOrder.getProject(),user,salesOrder.getCompany(),null,supplierPartner.getCurrency(),null,null,IPurchaseOrder.INVOICING_FREE,purchaseOrderService.getLocation(salesOrder.getCompany()),today,PriceList.all().filter(""String_Node_Str"",supplierPartner).fetchOne(),supplierPartner);
  for (  SalesOrderLine salesOrderLine : salesOrderLineList) {
    purchaseOrder.addPurchaseOrderLineListItem(purchaseOrderLineService.createPurchaseOrderLine(purchaseOrder,salesOrderLine));
  }
  purchaseOrder.save();
}"
59122,"public Map<Partner,List<SalesOrderLine>> splitBySupplierPartner(List<SalesOrderLine> salesOrderLineList){
  Map<Partner,List<SalesOrderLine>> salesOrderLinesBySupplierPartner=new HashMap<Partner,List<SalesOrderLine>>();
  for (  SalesOrderLine salesOrderLine : salesOrderLineList) {
    if (salesOrderLine.getSaleSupplySelect() == IProduct.SALE_SUPPLY_PURCHASE) {
      Partner supplierPartner=salesOrderLine.getSupplierPartner();
      if (!salesOrderLinesBySupplierPartner.containsKey(supplierPartner)) {
        salesOrderLinesBySupplierPartner.put(supplierPartner,new ArrayList<SalesOrderLine>());
      }
      salesOrderLinesBySupplierPartner.get(supplierPartner).add(salesOrderLine);
    }
  }
  return salesOrderLinesBySupplierPartner;
}","public Map<Partner,List<SalesOrderLine>> splitBySupplierPartner(List<SalesOrderLine> salesOrderLineList) throws AxelorException {
  Map<Partner,List<SalesOrderLine>> salesOrderLinesBySupplierPartner=new HashMap<Partner,List<SalesOrderLine>>();
  for (  SalesOrderLine salesOrderLine : salesOrderLineList) {
    if (salesOrderLine.getSaleSupplySelect() == IProduct.SALE_SUPPLY_PURCHASE) {
      Partner supplierPartner=salesOrderLine.getSupplierPartner();
      if (supplierPartner == null) {
        throw new AxelorException(String.format(""String_Node_Str"",salesOrderLine.getProductName()),IException.CONFIGURATION_ERROR);
      }
      if (!salesOrderLinesBySupplierPartner.containsKey(supplierPartner)) {
        salesOrderLinesBySupplierPartner.put(supplierPartner,new ArrayList<SalesOrderLine>());
      }
      salesOrderLinesBySupplierPartner.get(supplierPartner).add(salesOrderLine);
    }
  }
  return salesOrderLinesBySupplierPartner;
}"
59123,"public boolean isStockMoveProduct(SalesOrderLine salesOrderLine) throws AxelorException {
  Company company=salesOrderLine.getSalesOrder().getCompany();
  SupplychainConfig supplychainConfig=supplychainConfigService.getSupplychainConfig(company);
  Product product=salesOrderLine.getProduct();
  if (product != null && ((product.getProductTypeSelect().equals(IProduct.PRODUCT_TYPE_SERVICE) && supplychainConfig.getHasOutSmForNonStorableProduct()) || (product.getProductTypeSelect().equals(IProduct.PRODUCT_TYPE_STORABLE) && supplychainConfig.getHasOutSmForStorableProduct())) && salesOrderLine.getSaleSupplySelect() == IProduct.SALE_SUPPLY_FROM_STOCK) {
    return true;
  }
  return false;
}","public boolean isStockMoveProduct(SalesOrderLine salesOrderLine) throws AxelorException {
  Company company=salesOrderLine.getSalesOrder().getCompany();
  SupplychainConfig supplychainConfig=supplychainConfigService.getSupplychainConfig(company);
  Product product=salesOrderLine.getProduct();
  if (product != null && ((product.getProductTypeSelect().equals(IProduct.PRODUCT_TYPE_SERVICE) && supplychainConfig.getHasOutSmForNonStorableProduct()) || (product.getProductTypeSelect().equals(IProduct.PRODUCT_TYPE_STORABLE) && supplychainConfig.getHasOutSmForStorableProduct()))) {
    return true;
  }
  return false;
}"
59124,"private List<InvoiceLine> createInvoiceLine(Invoice invoice,StockMoveLine stockMoveLine) throws AxelorException {
  Product product=stockMoveLine.getProduct();
  if (product == null)   throw new AxelorException(String.format(""String_Node_Str"",stockMoveLine.getStockMove().getStockMoveSeq()),IException.CONFIGURATION_ERROR);
  InvoiceLineGenerator invoiceLineGenerator=new InvoiceLineGenerator(invoice,product,product.getName(),stockMoveLine.getPrice(),product.getDescription(),stockMoveLine.getQty(),stockMoveLine.getUnit(),null,product.getInvoiceLineType(),stockMoveLine.getProductVariant(),BigDecimal.ZERO,0,null,false){
    @Override public List<InvoiceLine> creates() throws AxelorException {
      InvoiceLine invoiceLine=this.createInvoiceLine();
      List<InvoiceLine> invoiceLines=new ArrayList<InvoiceLine>();
      invoiceLines.add(invoiceLine);
      return invoiceLines;
    }
  }
;
  return invoiceLineGenerator.creates();
}","private List<InvoiceLine> createInvoiceLine(Invoice invoice,StockMoveLine stockMoveLine) throws AxelorException {
  Product product=stockMoveLine.getProduct();
  if (product == null)   throw new AxelorException(String.format(""String_Node_Str"",stockMoveLine.getStockMove().getStockMoveSeq()),IException.CONFIGURATION_ERROR);
  Task task=null;
  if (invoice.getProject() != null) {
    task=invoice.getProject().getDefaultTask();
  }
  InvoiceLineGenerator invoiceLineGenerator=new InvoiceLineGenerator(invoice,product,product.getName(),stockMoveLine.getPrice(),product.getDescription(),stockMoveLine.getQty(),stockMoveLine.getUnit(),task,product.getInvoiceLineType(),stockMoveLine.getProductVariant(),BigDecimal.ZERO,0,null,false){
    @Override public List<InvoiceLine> creates() throws AxelorException {
      InvoiceLine invoiceLine=this.createInvoiceLine();
      List<InvoiceLine> invoiceLines=new ArrayList<InvoiceLine>();
      invoiceLines.add(invoiceLine);
      return invoiceLines;
    }
  }
;
  return invoiceLineGenerator.creates();
}"
59125,"public void getProductInformation(ActionRequest request,ActionResponse response){
  SalesOrderLine salesOrderLine=request.getContext().asType(SalesOrderLine.class);
  SalesOrder salesOrder=salesOrderLine.getSalesOrder();
  if (salesOrder == null) {
    salesOrder=request.getContext().getParentContext().asType(SalesOrder.class);
  }
  if (salesOrder != null && salesOrderLine.getProduct() != null) {
    try {
      BigDecimal price=salesOrderLineService.getUnitPrice(salesOrder,salesOrderLine);
      response.setValue(""String_Node_Str"",salesOrderLineService.getTaxLine(salesOrder,salesOrderLine));
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getName());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getSaleSupplySelect());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getUnit());
      response.setValue(""String_Node_Str"",salesOrderLineService.getCompanyCostPrice(salesOrder,salesOrderLine));
      PriceList priceList=salesOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=salesOrderLineService.getPriceListLine(salesOrderLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}","public void getProductInformation(ActionRequest request,ActionResponse response){
  SalesOrderLine salesOrderLine=request.getContext().asType(SalesOrderLine.class);
  SalesOrder salesOrder=salesOrderLine.getSalesOrder();
  if (salesOrder == null) {
    salesOrder=request.getContext().getParentContext().asType(SalesOrder.class);
  }
  if (salesOrder != null && salesOrderLine.getProduct() != null) {
    try {
      BigDecimal price=salesOrderLineService.getUnitPrice(salesOrder,salesOrderLine);
      response.setValue(""String_Node_Str"",salesOrderLineService.getTaxLine(salesOrder,salesOrderLine));
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getName());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getDefaultSupplierPartner());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getSaleSupplySelect());
      response.setValue(""String_Node_Str"",salesOrderLine.getProduct().getUnit());
      response.setValue(""String_Node_Str"",salesOrderLineService.getCompanyCostPrice(salesOrder,salesOrderLine));
      PriceList priceList=salesOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=salesOrderLineService.getPriceListLine(salesOrderLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}"
59126,"public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}","public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}"
59127,"public void getProductInformation(ActionRequest request,ActionResponse response){
  SalesOrderSubLine salesOrderSubLine=request.getContext().asType(SalesOrderSubLine.class);
  SalesOrder salesOrder=null;
  if (salesOrderSubLine.getSalesOrderLine() != null && salesOrderSubLine.getSalesOrderLine().getSalesOrder() != null) {
    salesOrder=salesOrderSubLine.getSalesOrderLine().getSalesOrder();
  }
  if (salesOrder == null) {
    salesOrder=request.getContext().getParentContext().getParentContext().asType(SalesOrder.class);
  }
  if (salesOrder != null && salesOrderSubLine.getProduct() != null) {
    try {
      BigDecimal price=salesOrderSubLineService.getUnitPrice(salesOrder,salesOrderSubLine);
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getTaxLine(salesOrder,salesOrderSubLine));
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getUnitPrice(salesOrder,salesOrderSubLine));
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getName());
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getUnit());
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getCompanyCostPrice(salesOrder,salesOrderSubLine));
      PriceList priceList=salesOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=salesOrderSubLineService.getPriceListLine(salesOrderSubLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}","public void getProductInformation(ActionRequest request,ActionResponse response){
  SalesOrderSubLine salesOrderSubLine=request.getContext().asType(SalesOrderSubLine.class);
  SalesOrder salesOrder=null;
  if (salesOrderSubLine.getSalesOrderLine() != null && salesOrderSubLine.getSalesOrderLine().getSalesOrder() != null) {
    salesOrder=salesOrderSubLine.getSalesOrderLine().getSalesOrder();
  }
  if (salesOrder == null) {
    salesOrder=request.getContext().getParentContext().getParentContext().asType(SalesOrder.class);
  }
  if (salesOrder != null && salesOrderSubLine.getProduct() != null) {
    try {
      BigDecimal price=salesOrderSubLineService.getUnitPrice(salesOrder,salesOrderSubLine);
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getTaxLine(salesOrder,salesOrderSubLine));
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getUnitPrice(salesOrder,salesOrderSubLine));
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getName());
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getDefaultSupplierPartner());
      response.setValue(""String_Node_Str"",salesOrderSubLine.getProduct().getUnit());
      response.setValue(""String_Node_Str"",salesOrderSubLineService.getCompanyCostPrice(salesOrder,salesOrderSubLine));
      PriceList priceList=salesOrder.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=salesOrderSubLineService.getPriceListLine(salesOrderSubLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
      this.resetProductInformation(response);
    }
  }
 else {
    this.resetProductInformation(response);
  }
}"
59128,"public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}","public void resetProductInformation(ActionResponse response){
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
  response.setValue(""String_Node_Str"",null);
}"
59129,"public Map<Partner,List<SalesOrderLine>> splitBySupplierPartner(List<SalesOrderLine> salesOrderLineList){
  Map<Partner,List<SalesOrderLine>> salesOrderLinesBySupplierPartner=new HashMap<Partner,List<SalesOrderLine>>();
  for (  SalesOrderLine salesOrderLine : salesOrderLineList) {
    Partner supplierPartner=salesOrderLine.getSupplierPartner();
    if (!salesOrderLinesBySupplierPartner.containsKey(supplierPartner)) {
      salesOrderLinesBySupplierPartner.put(supplierPartner,new ArrayList<SalesOrderLine>());
    }
    salesOrderLinesBySupplierPartner.get(supplierPartner).add(salesOrderLine);
  }
  return salesOrderLinesBySupplierPartner;
}","public Map<Partner,List<SalesOrderLine>> splitBySupplierPartner(List<SalesOrderLine> salesOrderLineList){
  Map<Partner,List<SalesOrderLine>> salesOrderLinesBySupplierPartner=new HashMap<Partner,List<SalesOrderLine>>();
  for (  SalesOrderLine salesOrderLine : salesOrderLineList) {
    if (salesOrderLine.getSaleSupplySelect() == IProduct.SALE_SUPPLY_PURCHASE) {
      Partner supplierPartner=salesOrderLine.getSupplierPartner();
      if (!salesOrderLinesBySupplierPartner.containsKey(supplierPartner)) {
        salesOrderLinesBySupplierPartner.put(supplierPartner,new ArrayList<SalesOrderLine>());
      }
      salesOrderLinesBySupplierPartner.get(supplierPartner).add(salesOrderLine);
    }
  }
  return salesOrderLinesBySupplierPartner;
}"
59130,"public void updateLocations(Location fromLocation,Location toLocation,Product product,BigDecimal qty,int fromStatus,int toStatus,LocalDate lastFutureStockMoveDate,ProductVariant productVariant,TrackingNumber trackingNumber) throws AxelorException {
switch (fromStatus) {
case IStockMove.STATUS_PLANNED:
    locationLineService.updateLocation(fromLocation,product,qty,false,true,true,null,trackingNumber,productVariant);
  locationLineService.updateLocation(toLocation,product,qty,false,true,false,null,trackingNumber,productVariant);
break;
case IStockMove.STATUS_REALIZED:
locationLineService.updateLocation(fromLocation,product,qty,true,true,true,null,trackingNumber,productVariant);
locationLineService.updateLocation(toLocation,product,qty,true,true,false,null,trackingNumber,productVariant);
break;
default :
break;
}
switch (toStatus) {
case IStockMove.STATUS_PLANNED:
locationLineService.updateLocation(fromLocation,product,qty,false,true,false,lastFutureStockMoveDate,trackingNumber,productVariant);
locationLineService.updateLocation(toLocation,product,qty,false,true,true,lastFutureStockMoveDate,trackingNumber,productVariant);
break;
case IStockMove.STATUS_REALIZED:
locationLineService.updateLocation(fromLocation,product,qty,true,true,false,null,trackingNumber,productVariant);
locationLineService.updateLocation(toLocation,product,qty,true,true,true,null,trackingNumber,productVariant);
break;
default :
break;
}
}","public void updateLocations(Location fromLocation,Location toLocation,Product product,BigDecimal qty,int fromStatus,int toStatus,LocalDate lastFutureStockMoveDate,ProductVariant productVariant,TrackingNumber trackingNumber,Project businessProject) throws AxelorException {
switch (fromStatus) {
case IStockMove.STATUS_PLANNED:
    locationLineService.updateLocation(fromLocation,product,qty,false,true,true,null,trackingNumber,productVariant,businessProject);
  locationLineService.updateLocation(toLocation,product,qty,false,true,false,null,trackingNumber,productVariant,businessProject);
break;
case IStockMove.STATUS_REALIZED:
locationLineService.updateLocation(fromLocation,product,qty,true,true,true,null,trackingNumber,productVariant,businessProject);
locationLineService.updateLocation(toLocation,product,qty,true,true,false,null,trackingNumber,productVariant,businessProject);
break;
default :
break;
}
switch (toStatus) {
case IStockMove.STATUS_PLANNED:
locationLineService.updateLocation(fromLocation,product,qty,false,true,false,lastFutureStockMoveDate,trackingNumber,productVariant,businessProject);
locationLineService.updateLocation(toLocation,product,qty,false,true,true,lastFutureStockMoveDate,trackingNumber,productVariant,businessProject);
break;
case IStockMove.STATUS_REALIZED:
locationLineService.updateLocation(fromLocation,product,qty,true,true,false,null,trackingNumber,productVariant,businessProject);
locationLineService.updateLocation(toLocation,product,qty,true,true,true,null,trackingNumber,productVariant,businessProject);
break;
default :
break;
}
}"
59131,"public boolean isManagedConsumedProduct(BillOfMaterial billOfMaterial){
  if (billOfMaterial != null && billOfMaterial.getProdProcess() != null && billOfMaterial.getProdProcess().getProdProcessLineList() != null) {
    for (    ProdProcessLine prodProcessLine : billOfMaterial.getProdProcess().getProdProcessLineList()) {
      if ((prodProcessLine.getToConsumeProdProductList() != null && !prodProcessLine.getToConsumeProdProductList().isEmpty()) || (prodProcessLine.getToProduceProdProductList() != null && !prodProcessLine.getToProduceProdProductList().isEmpty())) {
        return true;
      }
    }
  }
  return false;
}","public boolean isManagedConsumedProduct(BillOfMaterial billOfMaterial){
  if (billOfMaterial != null && billOfMaterial.getProdProcess() != null && billOfMaterial.getProdProcess().getProdProcessLineList() != null) {
    for (    ProdProcessLine prodProcessLine : billOfMaterial.getProdProcess().getProdProcessLineList()) {
      if ((prodProcessLine.getToConsumeProdProductList() != null && !prodProcessLine.getToConsumeProdProductList().isEmpty())) {
        return true;
      }
    }
  }
  return false;
}"
59132,"public OperationOrder createOperationOrder(ManufOrder manufOrder,int priority,boolean isToInvoice,ProdResource prodResource,ProdResource machineProdResource,ProdProcessLine prodProcessLine,LocalDateTime plannedStartDateT) throws AxelorException {
  logger.debug(""String_Node_Str"",priority,manufOrder.getManufOrderSeq());
  OperationOrder operationOrder=new OperationOrder(priority,this.computeName(manufOrder,priority),isToInvoice,manufOrder,prodResource,machineProdResource,IOperationOrder.STATUS_DRAFT,prodProcessLine,plannedStartDateT);
  operationOrder.setPlannedEndDateT(this.computePlannedEndDateT(operationOrder));
  operationOrder.setPlannedDuration(this.getDuration(this.computeDuration(operationOrder.getPlannedStartDateT(),operationOrder.getPlannedEndDateT())));
  this._createToConsumeProdProductList(operationOrder,prodProcessLine);
  this._createToProduceProdProductList(operationOrder,prodProcessLine);
  this._createHumanResourceList(operationOrder,machineProdResource);
  operationOrder=operationOrder.save();
  operationOrderStockMoveService.createToConsumeStockMove(operationOrder);
  operationOrderStockMoveService.createToProduceStockMove(operationOrder);
  operationOrder.setStatusSelect(IOperationOrder.STATUS_PLANNED);
  return operationOrder;
}","public OperationOrder createOperationOrder(ManufOrder manufOrder,int priority,boolean isToInvoice,ProdResource prodResource,ProdResource machineProdResource,ProdProcessLine prodProcessLine,LocalDateTime plannedStartDateT) throws AxelorException {
  logger.debug(""String_Node_Str"",priority,manufOrder.getManufOrderSeq());
  OperationOrder operationOrder=new OperationOrder(priority,this.computeName(manufOrder,priority),isToInvoice,manufOrder,prodResource,machineProdResource,IOperationOrder.STATUS_DRAFT,prodProcessLine,plannedStartDateT);
  operationOrder.setPlannedEndDateT(this.computePlannedEndDateT(operationOrder));
  operationOrder.setPlannedDuration(this.getDuration(this.computeDuration(operationOrder.getPlannedStartDateT(),operationOrder.getPlannedEndDateT())));
  this._createToConsumeProdProductList(operationOrder,prodProcessLine);
  this._createHumanResourceList(operationOrder,machineProdResource);
  operationOrder=operationOrder.save();
  operationOrderStockMoveService.createToConsumeStockMove(operationOrder);
  operationOrderStockMoveService.createToProduceStockMove(operationOrder);
  operationOrder.setStatusSelect(IOperationOrder.STATUS_PLANNED);
  return operationOrder;
}"
59133,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public ProductionOrder generateProductionOrder(BillOfMaterial billOfMaterial,BigDecimal qty) throws AxelorException {
  ProductionOrder productionOrder=this.createProductionOrder(null,false);
  ManufOrder manufOrder=manufOrderService.generateManufOrder(qty,ManufOrderService.DEFAULT_PRIORITY,ManufOrderService.IS_TO_INVOICE,billOfMaterial.getCompany(),billOfMaterial,new LocalDateTime());
  productionOrder.addManufOrderListItem(manufOrder);
  return productionOrder.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public ProductionOrder generateProductionOrder(BillOfMaterial billOfMaterial,BigDecimal qtyRequested) throws AxelorException {
  ProductionOrder productionOrder=this.createProductionOrder(null,false);
  BigDecimal qty=qtyRequested.divide(billOfMaterial.getQty());
  ManufOrder manufOrder=manufOrderService.generateManufOrder(qty,ManufOrderService.DEFAULT_PRIORITY,ManufOrderService.IS_TO_INVOICE,billOfMaterial.getCompany(),billOfMaterial,new LocalDateTime());
  productionOrder.addManufOrderListItem(manufOrder);
  return productionOrder.save();
}"
59134,"public Project createProject(String name,int businessStatusSelect,Partner clientPartner,Company company,Partner contactPartner,boolean isBusiness,boolean isProject){
  Project project=new Project();
  project.setName(name);
  project.setBusinessStatusSelect(businessStatusSelect);
  project.setCandidateSet(new HashSet<Candidate>());
  project.setClientPartner(clientPartner);
  project.setCompany(company);
  project.setContactPartner(contactPartner);
  project.setEmployeeSet(new HashSet<Employee>());
  project.setExportTypeSelect(IProject.REPORT_TYPE_PDF);
  project.setIsBusiness(isBusiness);
  project.setIsProject(isProject);
  project.setUnit(GeneralService.getUnit());
  return project;
}","public Project createProject(String name,int businessStatusSelect,Partner clientPartner,Company company,Partner contactPartner,boolean isBusiness,boolean isProject){
  Project project=new Project();
  project.setName(name);
  project.setBusinessStatusSelect(businessStatusSelect);
  project.setClientPartner(clientPartner);
  project.setCompany(company);
  project.setContactPartner(contactPartner);
  project.setExportTypeSelect(IProject.REPORT_TYPE_PDF);
  project.setIsBusiness(isBusiness);
  project.setIsProject(isProject);
  project.setUnit(GeneralService.getUnit());
  return project;
}"
59135,"public Object createObject(Map<String,Object> context,Object obj,Mapper mapper) throws AxelorException {
  if (context != null) {
    final int random=new Random().nextInt();
    for (    final Property p : mapper.getProperties()) {
      if (p.isVirtual() || p.isPrimary() || p.isVersion()) {
        continue;
      }
      LOG.debug(""String_Node_Str"",p.getName());
      Object value=context.get(p.getName());
      LOG.debug(""String_Node_Str"",value);
      if (value != null) {
        if (value instanceof String && p.isUnique()) {
          value=((String)value) + ""String_Node_Str"" + random+ ""String_Node_Str"";
        }
        if (value instanceof Map) {
          Map map=(Map)value;
          Object id=map.get(""String_Node_Str"");
          value=JPA.find((Class)p.getTarget(),Long.parseLong(id.toString()));
        }
        p.set(obj,value);
      }
    }
    return obj;
  }
  return null;
}","public Object createObject(Map<String,Object> context,Object obj,Mapper mapper) throws AxelorException {
  if (context != null) {
    final int random=new Random().nextInt();
    for (    final Property p : mapper.getProperties()) {
      if (p.isVirtual() || p.isPrimary() || p.isVersion()) {
        continue;
      }
      LOG.debug(""String_Node_Str"",p.getName());
      Object value=context.get(p.getName());
      LOG.debug(""String_Node_Str"",value);
      if (value != null) {
        if (value instanceof String && p.isUnique()) {
          value=((String)value) + ""String_Node_Str"" + random+ ""String_Node_Str"";
        }
        if (value instanceof Map) {
          LOG.debug(""String_Node_Str"");
          Map map=(Map)value;
          Object id=map.get(""String_Node_Str"");
          value=JPA.find((Class)p.getTarget(),Long.parseLong(id.toString()));
        }
        if (value instanceof List) {
          LOG.debug(""String_Node_Str"");
          List<Object> valueList=(List<Object>)value;
          List<Object> resultList=Lists.newArrayList();
          if (valueList != null) {
            for (            Object object : valueList) {
              Map map=(Map)object;
              Object id=map.get(""String_Node_Str"");
              resultList.add(JPA.find((Class)p.getTarget(),Long.parseLong(id.toString())));
            }
          }
          value=resultList;
        }
        p.set(obj,value);
      }
    }
    return obj;
  }
  return null;
}"
59136,"/** 
 * Obtenir la version de taxe d'un produit.
 * @param product
 * @param amendment
 * @return
 * @throws AxelorException 
 */
public TaxLine getTaxLine(LocalDate date,Product product,Company company,FiscalPosition fiscalPosition,boolean isPurchase) throws AxelorException {
  TaxLine taxLine=taxService.getTaxLine(this.getProductTax(product,company,fiscalPosition,isPurchase),date);
  if (taxLine != null) {
    return taxLine;
  }
  throw new AxelorException(String.format(""String_Node_Str"",product.getCode()),IException.CONFIGURATION_ERROR);
}","/** 
 * Obtenir la version de taxe d'un produit.
 * @param product
 * @param amendment
 * @return
 * @throws AxelorException 
 */
public TaxLine getTaxLine(LocalDate date,Product product,Company company,FiscalPosition fiscalPosition,boolean isPurchase) throws AxelorException {
  TaxLine taxLine=new TaxService().getTaxLine(this.getProductTax(product,company,fiscalPosition,isPurchase),date);
  if (taxLine != null) {
    return taxLine;
  }
  throw new AxelorException(String.format(""String_Node_Str"",product.getCode()),IException.CONFIGURATION_ERROR);
}"
59137,"protected InvoiceLineGenerator(Invoice invoice,Product product,String productName,BigDecimal price,String description,BigDecimal qty,Unit unit,Task task,InvoiceLineType invoiceLineType,ProductVariant productVariant,BigDecimal discountAmount,int discountTypeSelect,BigDecimal exTaxTotal,boolean isTaxInvoice){
  this.invoice=invoice;
  this.product=product;
  this.productName=productName;
  this.price=price;
  this.description=description;
  this.qty=qty;
  this.unit=unit;
  this.task=task;
  this.invoiceLineType=invoiceLineType;
  this.productVariant=productVariant;
  this.discountTypeSelect=discountTypeSelect;
  this.discountAmount=discountAmount;
  this.exTaxTotal=exTaxTotal;
  this.isTaxInvoice=isTaxInvoice;
  this.today=GeneralService.getTodayDate();
  this.currencyService=new CurrencyService(this.today);
}","protected InvoiceLineGenerator(Invoice invoice,Product product,String productName,BigDecimal price,String description,BigDecimal qty,Unit unit,Task task,InvoiceLineType invoiceLineType,ProductVariant productVariant,BigDecimal discountAmount,int discountTypeSelect,BigDecimal exTaxTotal,boolean isTaxInvoice){
  this.invoice=invoice;
  this.product=product;
  this.productName=productName;
  this.price=price;
  this.description=description;
  this.qty=qty;
  this.unit=unit;
  this.task=task;
  this.invoiceLineType=invoiceLineType;
  this.productVariant=productVariant;
  this.discountTypeSelect=discountTypeSelect;
  this.discountAmount=discountAmount;
  this.exTaxTotal=exTaxTotal;
  this.isTaxInvoice=isTaxInvoice;
  this.today=GeneralService.getTodayDate();
  this.currencyService=new CurrencyService(this.today);
  this.accountManagementService=new AccountManagementService();
}"
59138,"/** 
 * @return
 * @throws AxelorException 
 */
protected InvoiceLine createInvoiceLine() throws AxelorException {
  InvoiceLine invoiceLine=new InvoiceLine();
  invoiceLine.setInvoice(invoice);
  invoiceLine.setProduct(product);
  invoiceLine.setProductName(productName);
  invoiceLine.setDescription(description);
  invoiceLine.setPrice(price);
  invoiceLine.setQty(qty);
  if (exTaxTotal == null) {
    exTaxTotal=computeAmount(qty,price);
  }
  invoiceLine.setExTaxTotal(exTaxTotal);
  Partner partner=invoice.getPartner();
  Currency partnerCurrency=partner.getCurrency();
  if (partnerCurrency == null) {
    throw new AxelorException(String.format(""String_Node_Str"",partner.getFullName(),partner.getPartnerSeq()),IException.CONFIGURATION_ERROR);
  }
  invoiceLine.setAccountingExTaxTotal(currencyService.getAmountCurrencyConverted(invoice.getCurrency(),partnerCurrency,exTaxTotal,invoice.getInvoiceDate()));
  Company company=invoice.getCompany();
  Currency companyCurrency=company.getCurrency();
  if (companyCurrency == null) {
    throw new AxelorException(String.format(""String_Node_Str"",company.getName()),IException.CONFIGURATION_ERROR);
  }
  invoiceLine.setCompanyExTaxTotal(currencyService.getAmountCurrencyConverted(invoice.getCurrency(),companyCurrency,exTaxTotal,invoice.getInvoiceDate()));
  invoiceLine.setPricingListUnit(unit);
  if (taxLine == null) {
    boolean isPurchase=false;
    if (invoice.getOperationTypeSelect() == IInvoice.SUPPLIER_PURCHASE || invoice.getOperationTypeSelect() == IInvoice.SUPPLIER_REFUND) {
      isPurchase=true;
    }
    taxLine=new AccountManagementService().getTaxLine(invoice.getInvoiceDate(),product,invoice.getCompany(),partner.getFiscalPosition(),isPurchase);
  }
  invoiceLine.setTaxLine(taxLine);
  invoiceLine.setTask(task);
  invoiceLine.setInvoiceLineType(invoiceLineType);
  invoiceLine.setProductVariant(productVariant);
  invoiceLine.setDiscountTypeSelect(discountTypeSelect);
  invoiceLine.setDiscountAmount(discountAmount);
  return invoiceLine;
}","/** 
 * @return
 * @throws AxelorException 
 */
protected InvoiceLine createInvoiceLine() throws AxelorException {
  InvoiceLine invoiceLine=new InvoiceLine();
  invoiceLine.setInvoice(invoice);
  invoiceLine.setProduct(product);
  invoiceLine.setProductName(productName);
  invoiceLine.setDescription(description);
  invoiceLine.setPrice(price);
  invoiceLine.setQty(qty);
  if (exTaxTotal == null) {
    exTaxTotal=computeAmount(qty,price);
  }
  invoiceLine.setExTaxTotal(exTaxTotal);
  Partner partner=invoice.getPartner();
  Currency partnerCurrency=partner.getCurrency();
  if (partnerCurrency == null) {
    throw new AxelorException(String.format(""String_Node_Str"",partner.getFullName(),partner.getPartnerSeq()),IException.CONFIGURATION_ERROR);
  }
  invoiceLine.setAccountingExTaxTotal(currencyService.getAmountCurrencyConverted(invoice.getCurrency(),partnerCurrency,exTaxTotal,invoice.getInvoiceDate()));
  Company company=invoice.getCompany();
  Currency companyCurrency=company.getCurrency();
  if (companyCurrency == null) {
    throw new AxelorException(String.format(""String_Node_Str"",company.getName()),IException.CONFIGURATION_ERROR);
  }
  invoiceLine.setCompanyExTaxTotal(currencyService.getAmountCurrencyConverted(invoice.getCurrency(),companyCurrency,exTaxTotal,invoice.getInvoiceDate()));
  invoiceLine.setPricingListUnit(unit);
  if (taxLine == null) {
    boolean isPurchase=false;
    if (invoice.getOperationTypeSelect() == IInvoice.SUPPLIER_PURCHASE || invoice.getOperationTypeSelect() == IInvoice.SUPPLIER_REFUND) {
      isPurchase=true;
    }
    taxLine=accountManagementService.getTaxLine(invoice.getInvoiceDate(),product,invoice.getCompany(),partner.getFiscalPosition(),isPurchase);
  }
  invoiceLine.setTaxLine(taxLine);
  invoiceLine.setTask(task);
  invoiceLine.setInvoiceLineType(invoiceLineType);
  invoiceLine.setProductVariant(productVariant);
  invoiceLine.setDiscountTypeSelect(discountTypeSelect);
  invoiceLine.setDiscountAmount(discountAmount);
  return invoiceLine;
}"
59139,"@SuppressWarnings(""String_Node_Str"") public void convertLead(ActionRequest request,ActionResponse response) throws AxelorException {
  Context context=request.getContext();
  Map<String,Object> leadContext=(Map<String,Object>)context.get(""String_Node_Str"");
  Lead lead=Lead.find(((Integer)leadContext.get(""String_Node_Str"")).longValue());
  Partner partner=null;
  Partner contactPartner=null;
  Opportunity opportunity=null;
  Event callEvent=null;
  Event meetingEvent=null;
  Event taskEvent=null;
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    contactPartner=convertLeadWizardService.createPartner((Map<String,Object>)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    Map<String,Object> selectContactContext=(Map<String,Object>)context.get(""String_Node_Str"");
    contactPartner=Partner.find(((Integer)selectContactContext.get(""String_Node_Str"")).longValue());
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    partner=convertLeadWizardService.createPartner((Map<String,Object>)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    Map<String,Object> selectPartnerContext=(Map<String,Object>)context.get(""String_Node_Str"");
    partner=Partner.find(((Integer)selectPartnerContext.get(""String_Node_Str"")).longValue());
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    opportunity=convertLeadWizardService.createOpportunity((Map<String,Object>)context.get(""String_Node_Str""));
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    callEvent=convertLeadWizardService.createEvent((Map<String,Object>)context.get(""String_Node_Str""));
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    meetingEvent=convertLeadWizardService.createEvent((Map<String,Object>)context.get(""String_Node_Str""));
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    taskEvent=convertLeadWizardService.createEvent((Map<String,Object>)context.get(""String_Node_Str""));
  }
  leadService.convertLead(lead,partner,contactPartner,opportunity,callEvent,meetingEvent,taskEvent);
}","@SuppressWarnings(""String_Node_Str"") public void convertLead(ActionRequest request,ActionResponse response) throws AxelorException {
  Context context=request.getContext();
  Map<String,Object> leadContext=(Map<String,Object>)context.get(""String_Node_Str"");
  Lead lead=Lead.find(((Integer)leadContext.get(""String_Node_Str"")).longValue());
  Partner partner=null;
  Partner contactPartner=null;
  Opportunity opportunity=null;
  Event callEvent=null;
  Event meetingEvent=null;
  Event taskEvent=null;
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    contactPartner=convertLeadWizardService.createPartner((Map<String,Object>)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    Map<String,Object> selectContactContext=(Map<String,Object>)context.get(""String_Node_Str"");
    contactPartner=Partner.find(((Integer)selectContactContext.get(""String_Node_Str"")).longValue());
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    partner=convertLeadWizardService.createPartner((Map<String,Object>)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    Map<String,Object> selectPartnerContext=(Map<String,Object>)context.get(""String_Node_Str"");
    partner=Partner.find(((Integer)selectPartnerContext.get(""String_Node_Str"")).longValue());
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    opportunity=convertLeadWizardService.createOpportunity((Map<String,Object>)context.get(""String_Node_Str""));
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    callEvent=convertLeadWizardService.createEvent((Map<String,Object>)context.get(""String_Node_Str""));
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    meetingEvent=convertLeadWizardService.createEvent((Map<String,Object>)context.get(""String_Node_Str""));
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    taskEvent=convertLeadWizardService.createEvent((Map<String,Object>)context.get(""String_Node_Str""));
  }
  leadService.convertLead(lead,partner,contactPartner,opportunity,callEvent,meetingEvent,taskEvent);
  response.setFlash(""String_Node_Str"");
}"
59140,"@Override protected void process(){
  this.markEventReminderProcess();
}","@Override protected void process(){
  this.markEventReminderProcess();
  this.generateMessageProcess();
}"
59141,"public void setPartnerSequence(ActionRequest request,ActionResponse response) throws AxelorException {
  Partner partner=request.getContext().asType(Partner.class);
  if (partner.getPartnerSeq() == null) {
    String ref=sequenceService.getSequence(IAdministration.PARTNER,false);
    if (ref == null)     throw new AxelorException(""String_Node_Str"",IException.CONFIGURATION_ERROR);
 else     response.setValue(""String_Node_Str"",ref);
  }
}","public void setPartnerSequence(ActionRequest request,ActionResponse response) throws AxelorException {
  Partner partner=request.getContext().asType(Partner.class);
  partner=Partner.find(partner.getId());
  if (partner.getPartnerSeq() == null) {
    String ref=sequenceService.getSequence(IAdministration.PARTNER,false);
    if (ref == null)     throw new AxelorException(""String_Node_Str"",IException.CONFIGURATION_ERROR);
 else     response.setValue(""String_Node_Str"",ref);
  }
}"
59142,"protected InvoiceLineGenerator(Invoice invoice,Product product,String productName,BigDecimal price,String description,BigDecimal qty,Unit unit,Task task,InvoiceLineType invoiceLineType,ProductVariant productVariant,BigDecimal discountAmount,int discountTypeSelect,BigDecimal exTaxTotal,boolean isTaxInvoice){
  this.invoice=invoice;
  this.product=product;
  this.productName=productName;
  this.price=price;
  this.description=description;
  this.qty=qty;
  this.unit=unit;
  this.task=task;
  this.invoiceLineType=invoiceLineType;
  this.productVariant=productVariant;
  this.discountTypeSelect=discountTypeSelect;
  this.discountAmount=discountAmount;
  this.exTaxTotal=exTaxTotal;
  this.isTaxInvoice=isTaxInvoice;
  this.today=GeneralService.getTodayDate();
  this.currencyService=new CurrencyService(this.today);
  this.accountManagementService=new AccountManagementService();
}","protected InvoiceLineGenerator(Invoice invoice,Product product,String productName,BigDecimal price,String description,BigDecimal qty,Unit unit,Task task,InvoiceLineType invoiceLineType,ProductVariant productVariant,BigDecimal discountAmount,int discountTypeSelect,BigDecimal exTaxTotal,boolean isTaxInvoice){
  this.invoice=invoice;
  this.product=product;
  this.productName=productName;
  this.price=price;
  this.description=description;
  this.qty=qty;
  this.unit=unit;
  this.task=task;
  this.invoiceLineType=invoiceLineType;
  this.productVariant=productVariant;
  this.discountTypeSelect=discountTypeSelect;
  this.discountAmount=discountAmount;
  this.exTaxTotal=exTaxTotal;
  this.isTaxInvoice=isTaxInvoice;
  this.today=GeneralService.getTodayDate();
  this.currencyService=new CurrencyService(this.today);
}"
59143,"/** 
 * @return
 * @throws AxelorException 
 */
protected InvoiceLine createInvoiceLine() throws AxelorException {
  InvoiceLine invoiceLine=new InvoiceLine();
  invoiceLine.setInvoice(invoice);
  invoiceLine.setProduct(product);
  invoiceLine.setProductName(productName);
  invoiceLine.setDescription(description);
  invoiceLine.setPrice(price);
  invoiceLine.setQty(qty);
  if (exTaxTotal == null) {
    exTaxTotal=computeAmount(qty,price);
  }
  invoiceLine.setExTaxTotal(exTaxTotal);
  Partner partner=invoice.getPartner();
  Currency partnerCurrency=partner.getCurrency();
  if (partnerCurrency == null) {
    throw new AxelorException(String.format(""String_Node_Str"",partner.getFullName(),partner.getPartnerSeq()),IException.CONFIGURATION_ERROR);
  }
  invoiceLine.setAccountingExTaxTotal(currencyService.getAmountCurrencyConverted(invoice.getCurrency(),partnerCurrency,exTaxTotal,invoice.getInvoiceDate()));
  invoiceLine.setPricingListUnit(unit);
  if (vatLine == null) {
    boolean isPurchase=false;
    if (invoice.getOperationTypeSelect() == IInvoice.SUPPLIER_PURCHASE || invoice.getOperationTypeSelect() == IInvoice.SUPPLIER_REFUND) {
      isPurchase=true;
    }
    vatLine=accountManagementService.getVatLine(invoice.getInvoiceDate(),product,invoice.getCompany(),isPurchase);
  }
  invoiceLine.setVatLine(vatLine);
  invoiceLine.setTask(task);
  invoiceLine.setInvoiceLineType(invoiceLineType);
  invoiceLine.setProductVariant(productVariant);
  invoiceLine.setDiscountTypeSelect(discountTypeSelect);
  invoiceLine.setDiscountAmount(discountAmount);
  return invoiceLine;
}","/** 
 * @return
 * @throws AxelorException 
 */
protected InvoiceLine createInvoiceLine() throws AxelorException {
  InvoiceLine invoiceLine=new InvoiceLine();
  invoiceLine.setInvoice(invoice);
  invoiceLine.setProduct(product);
  invoiceLine.setProductName(productName);
  invoiceLine.setDescription(description);
  invoiceLine.setPrice(price);
  invoiceLine.setQty(qty);
  if (exTaxTotal == null) {
    exTaxTotal=computeAmount(qty,price);
  }
  invoiceLine.setExTaxTotal(exTaxTotal);
  Partner partner=invoice.getPartner();
  Currency partnerCurrency=partner.getCurrency();
  if (partnerCurrency == null) {
    throw new AxelorException(String.format(""String_Node_Str"",partner.getFullName(),partner.getPartnerSeq()),IException.CONFIGURATION_ERROR);
  }
  invoiceLine.setAccountingExTaxTotal(currencyService.getAmountCurrencyConverted(invoice.getCurrency(),partnerCurrency,exTaxTotal,invoice.getInvoiceDate()));
  Company company=invoice.getCompany();
  Currency companyCurrency=company.getCurrency();
  if (companyCurrency == null) {
    throw new AxelorException(String.format(""String_Node_Str"",company.getName()),IException.CONFIGURATION_ERROR);
  }
  invoiceLine.setCompanyExTaxTotal(currencyService.getAmountCurrencyConverted(invoice.getCurrency(),companyCurrency,exTaxTotal,invoice.getInvoiceDate()));
  invoiceLine.setPricingListUnit(unit);
  if (vatLine == null) {
    boolean isPurchase=false;
    if (invoice.getOperationTypeSelect() == IInvoice.SUPPLIER_PURCHASE || invoice.getOperationTypeSelect() == IInvoice.SUPPLIER_REFUND) {
      isPurchase=true;
    }
    vatLine=new AccountManagementService().getVatLine(invoice.getInvoiceDate(),product,invoice.getCompany(),isPurchase);
  }
  invoiceLine.setVatLine(vatLine);
  invoiceLine.setTask(task);
  invoiceLine.setInvoiceLineType(invoiceLineType);
  invoiceLine.setProductVariant(productVariant);
  invoiceLine.setDiscountTypeSelect(discountTypeSelect);
  invoiceLine.setDiscountAmount(discountAmount);
  return invoiceLine;
}"
59144,"public InvoiceGenerator createInvoiceGenerator(PurchaseOrder purchaseOrder) throws AxelorException {
  if (purchaseOrder.getCurrency() == null) {
    throw new AxelorException(String.format(""String_Node_Str"",purchaseOrder.getPurchaseOrderSeq()),IException.CONFIGURATION_ERROR);
  }
  InvoiceGenerator invoiceGenerator=new InvoiceGenerator(IInvoice.SUPPLIER_PURCHASE,purchaseOrder.getCompany(),purchaseOrder.getSupplierPartner(),purchaseOrder.getContactPartner(),purchaseOrder.getPriceList()){
    @Override public Invoice generate() throws AxelorException {
      return super.createInvoiceHeader();
    }
  }
;
  return invoiceGenerator;
}","public InvoiceGenerator createInvoiceGenerator(PurchaseOrder purchaseOrder) throws AxelorException {
  if (purchaseOrder.getCurrency() == null) {
    throw new AxelorException(String.format(""String_Node_Str"",purchaseOrder.getPurchaseOrderSeq()),IException.CONFIGURATION_ERROR);
  }
  InvoiceGenerator invoiceGenerator=new InvoiceGenerator(IInvoice.SUPPLIER_PURCHASE,purchaseOrder.getCompany(),purchaseOrder.getSupplierPartner(),purchaseOrder.getContactPartner(),purchaseOrder.getProject(),purchaseOrder.getPriceList()){
    @Override public Invoice generate() throws AxelorException {
      return super.createInvoiceHeader();
    }
  }
;
  return invoiceGenerator;
}"
59145,"public CurrencyConversionLine getCurrencyConversionLine(Currency startCurrency,Currency endCurrency,LocalDate localDate){
  List<CurrencyConversionLine> currencyConversionLineList=GeneralService.getCurrencyConfigurationLineList();
  if (currencyConversionLineList != null) {
    for (    CurrencyConversionLine currencyConversionLine : currencyConversionLineList) {
      if (currencyConversionLine.getStartCurrency().equals(startCurrency) && currencyConversionLine.getEndCurrency().equals(endCurrency) && currencyConversionLine.getFromDate().isBefore(localDate)&& (currencyConversionLine.getToDate() == null || currencyConversionLine.getToDate().isAfter(localDate))) {
        return currencyConversionLine;
      }
    }
  }
  return null;
}","private CurrencyConversionLine getCurrencyConversionLine(Currency startCurrency,Currency endCurrency,LocalDate localDate){
  List<CurrencyConversionLine> currencyConversionLineList=GeneralService.getCurrencyConfigurationLineList();
  if (currencyConversionLineList != null) {
    for (    CurrencyConversionLine currencyConversionLine : currencyConversionLineList) {
      if (currencyConversionLine.getStartCurrency().equals(startCurrency) && currencyConversionLine.getEndCurrency().equals(endCurrency) && currencyConversionLine.getFromDate().isBefore(localDate)&& (currencyConversionLine.getToDate() == null || currencyConversionLine.getToDate().isAfter(localDate))) {
        return currencyConversionLine;
      }
    }
  }
  return null;
}"
59146,"/** 
 * Fonction permettant de créer un courrier à destination des tiers pour un contrat standard
 * @param contractLine Un contrat
 * @param reminderMatrixLine Une ligne de relance
 * @param partnerConcerned Le tiers concerné
 * @return Un email
 * @throws AxelorException
 */
public Mail runMailStandard(ReminderMethodLine reminderMethodLine,Partner partner,Company company) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  if (reminderMethodLine.getReminderMailModel() != null) {
    MailModel reminderMailModel=reminderMethodLine.getReminderMailModel();
    Mail reminderMail=this.createGenericMail(reminderMailModel,null,today.plusDays(reminderMethodLine.getStandardDeadline()),partner.getMainInvoicingAddress(),company);
    LinkedList<ReminderHistory> reminderHistoryList=new LinkedList<ReminderHistory>();
    reminderHistoryList.addAll(partner.getReminder().getReminderHistoryList());
    reminderMail.setReminderHistory(reminderHistoryList.getLast());
    return this.replaceTag(reminderMail);
  }
 else {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionReminderMsg(),partner.getName(),reminderMethodLine.getReminderMethod().getName(),reminderMethodLine.getReminderLevel().getName()),IException.CONFIGURATION_ERROR);
  }
}","/** 
 * Fonction permettant de créer un courrier à destination des tiers pour un contrat standard
 * @param contractLine Un contrat
 * @param reminderMatrixLine Une ligne de relance
 * @param partnerConcerned Le tiers concerné
 * @return Un email
 * @throws AxelorException
 */
public Mail runMailStandard(ReminderMethodLine reminderMethodLine,Partner partner,Company company) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  if (reminderMethodLine.getReminderMailModel() != null) {
    MailModel reminderMailModel=reminderMethodLine.getReminderMailModel();
    Mail reminderMail=this.createGenericMail(reminderMailModel,null,today.plusDays(reminderMethodLine.getStandardDeadline()),partner.getMainInvoicingAddress(),company);
    reminderMail.setReminderHistory(this.getReminderHistory(partner,company));
    return this.replaceTag(reminderMail);
  }
 else {
    throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionReminderMsg(),partner.getName(),reminderMethodLine.getReminderMethod().getName(),reminderMethodLine.getReminderLevel().getName()),IException.CONFIGURATION_ERROR);
  }
}"
59147,"public void run(ActionRequest request,ActionResponse response){
  IndicatorGenerator indicatorGenerator=request.getContext().asType(IndicatorGenerator.class);
  indicatorGenerator.find(indicatorGenerator.getId());
  try {
    indicatorGeneratorService.run(indicatorGenerator);
    response.setReload(true);
    response.setFlash(""String_Node_Str"");
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}","public void run(ActionRequest request,ActionResponse response){
  IndicatorGenerator indicatorGenerator=request.getContext().asType(IndicatorGenerator.class);
  try {
    indicatorGeneratorService.run(IndicatorGenerator.find(indicatorGenerator.getId()));
    response.setReload(true);
    response.setFlash(""String_Node_Str"");
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}"
59148,"public void run(ActionRequest request,ActionResponse response){
  IndicatorGeneratorGrouping indicatorGeneratorGrouping=request.getContext().asType(IndicatorGeneratorGrouping.class);
  indicatorGeneratorGrouping.find(indicatorGeneratorGrouping.getId());
  try {
    indicatorGeneratorGroupingService.run(indicatorGeneratorGrouping);
    response.setReload(true);
    response.setFlash(""String_Node_Str"");
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}","public void run(ActionRequest request,ActionResponse response){
  IndicatorGeneratorGrouping indicatorGeneratorGrouping=request.getContext().asType(IndicatorGeneratorGrouping.class);
  try {
    indicatorGeneratorGroupingService.run(IndicatorGeneratorGrouping.find(indicatorGeneratorGrouping.getId()));
    response.setReload(true);
    response.setFlash(""String_Node_Str"");
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}"
59149,"public void export(ActionRequest request,ActionResponse response){
  IndicatorGeneratorGrouping indicatorGeneratorGrouping=request.getContext().asType(IndicatorGeneratorGrouping.class);
  indicatorGeneratorGrouping.find(indicatorGeneratorGrouping.getId());
  try {
    indicatorGeneratorGroupingService.export(indicatorGeneratorGrouping);
    response.setReload(true);
    response.setFlash(""String_Node_Str"");
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}","public void export(ActionRequest request,ActionResponse response){
  IndicatorGeneratorGrouping indicatorGeneratorGrouping=request.getContext().asType(IndicatorGeneratorGrouping.class);
  try {
    indicatorGeneratorGroupingService.export(IndicatorGeneratorGrouping.find(indicatorGeneratorGrouping.getId()));
    response.setReload(true);
    response.setFlash(""String_Node_Str"");
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}"
59150,"/** 
 * Methode permettant de récupérer la liste des échéances à prélever en fonction de la société et de la date de prélèvement
 * @param company Une société
 * @param debitDate Une date de prélèvement
 * @return
 */
public List<PaymentScheduleLine> getPaymentScheduleLineToDebit(Company company,LocalDate debitDate,PaymentMode paymentMode,Currency currency){
  return PaymentScheduleLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",company,debitDate.getDayOfMonth(),debitDate,debitDate,currency,paymentMode).fetch();
}","/** 
 * Methode permettant de récupérer la liste des échéances à prélever en fonction de la société et de la date de prélèvement
 * @param company Une société
 * @param debitDate Une date de prélèvement
 * @return
 */
public List<PaymentScheduleLine> getPaymentScheduleLineToDebit(Company company,LocalDate debitDate,PaymentMode paymentMode,Currency currency){
  return PaymentScheduleLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",company,debitDate,currency,paymentMode).fetch();
}"
59151,"/** 
 * Méthode permettant de récupérer les factures d'échéance mensu grand compte d'un échéancier
 * @param paymentSchedule Un échéancier
 * @return
 */
public List<MoveLine> getInvoiceMoveLineListToReconcile(PaymentSchedule paymentSchedule){
  return MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",IAccount.VALIDATED_MOVE,true,IInvoice.CLIENT_SALE,paymentSchedule).fetch();
}","/** 
 * Méthode permettant de récupérer les factures d'échéance mensu grand compte d'un échéancier
 * @param paymentSchedule Un échéancier
 * @return
 */
public List<MoveLine> getInvoiceMoveLineListToReconcile(PaymentSchedule paymentSchedule){
  return MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",IAccount.VALIDATED_MOVE,true,IInvoice.CLIENT_SALE,paymentSchedule).fetch();
}"
59152,"/** 
 * Méthode permettant de générer l'ensemble des exports des prélèvements pour Mensu
 * @param paymentScheduleExport Un objet d'export des prélèvements
 * @param company Une société
 * @param paymentMode Un mode de paiement
 * @param statusVal Un status
 * @param journal Un journal
 * @param isMajorAccount Le traitement concerne le prélèvement des échéances de mensu grand compte ?
 * @return 
 * @return
 * @throws AxelorException
 */
public List<PaymentScheduleLine> generateAllExportMensu(List<PaymentScheduleLine> pslList,Company company,PaymentMode paymentMode,Status statusVal,Journal journal){
  Move move=null;
  try {
    move=paymentScheduleExportService.createExportMensuMove(Journal.find(journal.getId()),Company.find(company.getId()),PaymentMode.find(paymentMode.getId()));
  }
 catch (  AxelorException e) {
    TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",batch.getId()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    stop=true;
  }
catch (  Exception e) {
    TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    LOG.error(""String_Node_Str"",batch.getId());
    stop=true;
  }
  int ref=1;
  int i=0;
  List<PaymentScheduleLine> pslListToExport=new ArrayList<PaymentScheduleLine>();
  if (!stop) {
    for (    PaymentScheduleLine paymentScheduleLine : pslList) {
      try {
        if (paymentScheduleExportService.isDebitBlocking(paymentScheduleLine)) {
          PaymentScheduleLine paymentScheduleLineToExport=paymentScheduleExportService.generateExportMensu(PaymentScheduleLine.find(paymentScheduleLine.getId()),pslList,Status.find(statusVal.getId()),Company.find(company.getId()),ref,Move.find(move.getId()));
          if (paymentScheduleLineToExport != null) {
            ref++;
            i++;
            pslListToExport.add(paymentScheduleLineToExport);
            updatePaymentScheduleLine(paymentScheduleLineToExport);
            this.totalAmount=this.totalAmount.add(PaymentScheduleLine.find(paymentScheduleLine.getId()).getInTaxAmount());
          }
        }
      }
 catch (      AxelorException e) {
        TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",paymentScheduleLine.getName()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
        incrementAnomaly();
      }
catch (      Exception e) {
        TraceBackService.trace(new Exception(String.format(""String_Node_Str"",paymentScheduleLine.getName()),e),IException.DIRECT_DEBIT,batch.getId());
        incrementAnomaly();
        LOG.error(""String_Node_Str"",paymentScheduleLine.getName());
      }
 finally {
        if (i % 10 == 0) {
          JPA.clear();
        }
      }
    }
  }
  try {
    if (ref != 1) {
      Account bankAccount=paymentModeService.getCompanyAccount(PaymentMode.find(paymentMode.getId()),Company.find(company.getId()));
      paymentScheduleExportService.createOppositeExportMensuMoveLine(Move.find(move.getId()),bankAccount,ref);
      paymentScheduleExportService.validateMove(Move.find(move.getId()));
    }
 else {
      paymentScheduleExportService.deleteMove(Move.find(move.getId()));
    }
  }
 catch (  AxelorException e) {
    TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",batch.getId()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
  }
catch (  Exception e) {
    TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    LOG.error(""String_Node_Str"",batch.getId());
  }
  return pslListToExport;
}","/** 
 * Méthode permettant de générer l'ensemble des exports des prélèvements pour Mensu
 * @param paymentScheduleExport Un objet d'export des prélèvements
 * @param company Une société
 * @param paymentMode Un mode de paiement
 * @param statusVal Un status
 * @param journal Un journal
 * @param isMajorAccount Le traitement concerne le prélèvement des échéances de mensu grand compte ?
 * @return 
 * @return
 * @throws AxelorException
 */
public List<PaymentScheduleLine> generateAllExportMensu(List<PaymentScheduleLine> pslList,Company company,PaymentMode paymentMode,Status statusVal,Journal journal){
  Move move=null;
  try {
    move=paymentScheduleExportService.createExportMensuMove(Journal.find(journal.getId()),Company.find(company.getId()),PaymentMode.find(paymentMode.getId()));
  }
 catch (  AxelorException e) {
    TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",batch.getId()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    stop=true;
  }
catch (  Exception e) {
    TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    LOG.error(""String_Node_Str"",batch.getId());
    stop=true;
  }
  int ref=1;
  int i=0;
  List<PaymentScheduleLine> pslListToExport=new ArrayList<PaymentScheduleLine>();
  if (!stop) {
    for (    PaymentScheduleLine paymentScheduleLine : pslList) {
      try {
        if (!paymentScheduleExportService.isDebitBlocking(paymentScheduleLine)) {
          PaymentScheduleLine paymentScheduleLineToExport=paymentScheduleExportService.generateExportMensu(PaymentScheduleLine.find(paymentScheduleLine.getId()),pslList,Status.find(statusVal.getId()),Company.find(company.getId()),ref,Move.find(move.getId()));
          if (paymentScheduleLineToExport != null) {
            ref++;
            i++;
            pslListToExport.add(paymentScheduleLineToExport);
            updatePaymentScheduleLine(paymentScheduleLineToExport);
            this.totalAmount=this.totalAmount.add(PaymentScheduleLine.find(paymentScheduleLine.getId()).getInTaxAmount());
          }
        }
      }
 catch (      AxelorException e) {
        TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",paymentScheduleLine.getName()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
        incrementAnomaly();
      }
catch (      Exception e) {
        TraceBackService.trace(new Exception(String.format(""String_Node_Str"",paymentScheduleLine.getName()),e),IException.DIRECT_DEBIT,batch.getId());
        incrementAnomaly();
        LOG.error(""String_Node_Str"",paymentScheduleLine.getName());
      }
 finally {
        if (i % 10 == 0) {
          JPA.clear();
        }
      }
    }
  }
  try {
    if (ref != 1) {
      Account bankAccount=paymentModeService.getCompanyAccount(PaymentMode.find(paymentMode.getId()),Company.find(company.getId()));
      paymentScheduleExportService.createOppositeExportMensuMoveLine(Move.find(move.getId()),bankAccount,ref);
      paymentScheduleExportService.validateMove(Move.find(move.getId()));
    }
 else {
      paymentScheduleExportService.deleteMove(Move.find(move.getId()));
    }
  }
 catch (  AxelorException e) {
    TraceBackService.trace(new AxelorException(String.format(""String_Node_Str"",batch.getId()),e,e.getcategory()),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
  }
catch (  Exception e) {
    TraceBackService.trace(new Exception(String.format(""String_Node_Str"",batch.getId()),e),IException.DIRECT_DEBIT,batch.getId());
    incrementAnomaly();
    LOG.error(""String_Node_Str"",batch.getId());
  }
  return pslListToExport;
}"
59153,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type avoir
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect7FILE1(MoveLineReport mlr,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  String dateQueryStr=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getCompany().getId());
  JournalType journalType=mlrs.getJournalType(mlr);
  if (mlr.getJournal() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getJournal().getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",journalType.getId());
  }
  if (mlr.getPeriod() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (mlr.getRef() != null) {
    reference=mlr.getRef();
  }
  if (mlr.getCompany() != null) {
    companyCode=mlr.getCompany().getCode();
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getCompany().getId());
  }
  if (mlr.getPeriod() != null) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (mlr.getDateFrom() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateFrom().toString());
  }
  if (mlr.getDateTo() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateTo().toString());
  }
  if (mlr.getDate() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=mlr.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.all().filter(""String_Node_Str"",journalType).fetch();
    if (mlr.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(mlr.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moves=Move.all().filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moves.size() > 0) {
        List<MoveLine> moveLines=MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + moveLineQueryStr,moves).fetch();
        LOG.debug(""String_Node_Str"",moveLines);
        if (moveLines.size() > 0) {
          String exportToAgressoNumber=sgs.getSequence(IAdministration.REFUND_INTERFACE,mlr.getCompany(),false);
          if (exportToAgressoNumber == null) {
            throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),mlr.getCompany().getName()),IException.CONFIGURATION_ERROR);
          }
          Move firstMove=moves.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          for (          Move move : moves) {
            move.setExportNumber(exportToAgressoNumber);
            move.setExportDate(interfaceDate);
            move.setAccountingOk(true);
            move.setMoveLineReport(mlr);
            move.save();
          }
          BigDecimal totalCredit=BigDecimal.ZERO;
          for (          MoveLine moveLine : moveLines) {
            totalCredit=totalCredit.add(moveLine.getCredit());
          }
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportToAgressoNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=totalCredit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=this.getFilePath(mlr);
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type avoir
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect7FILE1(MoveLineReport mlr,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  String dateQueryStr=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getCompany().getId());
  JournalType journalType=mlrs.getJournalType(mlr);
  if (mlr.getJournal() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getJournal().getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",journalType.getId());
  }
  if (mlr.getPeriod() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (mlr.getRef() != null) {
    reference=mlr.getRef();
  }
  if (mlr.getCompany() != null) {
    companyCode=mlr.getCompany().getCode();
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getCompany().getId());
  }
  if (mlr.getPeriod() != null) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (mlr.getDateFrom() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateFrom().toString());
  }
  if (mlr.getDateTo() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateTo().toString());
  }
  if (mlr.getDate() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=mlr.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.all().filter(""String_Node_Str"",journalType).fetch();
    if (mlr.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(mlr.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moves=Move.all().filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moves.size() > 0) {
        List<MoveLine> moveLines=MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + moveLineQueryStr,moves).fetch();
        LOG.debug(""String_Node_Str"",moveLines);
        if (moveLines.size() > 0) {
          String exportNumber=sgs.getSequence(IAdministration.REFUND_INTERFACE,mlr.getCompany(),false);
          if (exportNumber == null) {
            throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),mlr.getCompany().getName()),IException.CONFIGURATION_ERROR);
          }
          Move firstMove=moves.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          for (          Move move : moves) {
            move.setExportNumber(exportNumber);
            move.setExportDate(interfaceDate);
            move.setAccountingOk(true);
            move.setMoveLineReport(mlr);
            move.save();
          }
          BigDecimal totalCredit=BigDecimal.ZERO;
          for (          MoveLine moveLine : moveLines) {
            totalCredit=totalCredit.add(moveLine.getCredit());
          }
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=totalCredit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=this.getFilePath(mlr);
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59154,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type trésorerie
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect8FILE1(MoveLineReport mlr,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  String dateQueryStr=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getCompany().getId());
  JournalType journalType=mlrs.getJournalType(mlr);
  if (mlr.getJournal() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getJournal().getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",journalType.getId());
  }
  if (mlr.getPeriod() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (mlr.getRef() != null) {
    reference=mlr.getRef();
  }
  if (mlr.getCompany() != null) {
    companyCode=mlr.getCompany().getCode();
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getCompany().getId());
  }
  if (mlr.getPeriod() != null) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (mlr.getDateFrom() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateFrom().toString());
  }
  if (mlr.getDateTo() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateTo().toString());
  }
  if (mlr.getDate() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=mlr.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.all().filter(""String_Node_Str"",journalType).fetch();
    if (mlr.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(mlr.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moves=Move.all().filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moves.size() > 0) {
        List<MoveLine> moveLines=MoveLine.all().filter(""String_Node_Str"" + moveLineQueryStr,moves).fetch();
        LOG.debug(""String_Node_Str"",moveLines);
        if (moveLines.size() > 0) {
          String exportToAgressoNumber=sgs.getSequence(IAdministration.TREASURY_INTERFACE,mlr.getCompany(),false);
          if (exportToAgressoNumber == null) {
            throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),mlr.getCompany().getName()),IException.CONFIGURATION_ERROR);
          }
          Move firstMove=moves.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          for (          Move move : moves) {
            move.setExportNumber(exportToAgressoNumber);
            move.setExportDate(interfaceDate);
            move.setAccountingOk(true);
            move.setMoveLineReport(mlr);
            move.save();
          }
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportToAgressoNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=""String_Node_Str"";
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=this.getFilePath(mlr);
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type trésorerie
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect8FILE1(MoveLineReport mlr,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  String dateQueryStr=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getCompany().getId());
  JournalType journalType=mlrs.getJournalType(mlr);
  if (mlr.getJournal() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getJournal().getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",journalType.getId());
  }
  if (mlr.getPeriod() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (mlr.getRef() != null) {
    reference=mlr.getRef();
  }
  if (mlr.getCompany() != null) {
    companyCode=mlr.getCompany().getCode();
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getCompany().getId());
  }
  if (mlr.getPeriod() != null) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (mlr.getDateFrom() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateFrom().toString());
  }
  if (mlr.getDateTo() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateTo().toString());
  }
  if (mlr.getDate() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=mlr.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.all().filter(""String_Node_Str"",journalType).fetch();
    if (mlr.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(mlr.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moves=Move.all().filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moves.size() > 0) {
        List<MoveLine> moveLines=MoveLine.all().filter(""String_Node_Str"" + moveLineQueryStr,moves).fetch();
        LOG.debug(""String_Node_Str"",moveLines);
        if (moveLines.size() > 0) {
          String exportNumber=sgs.getSequence(IAdministration.TREASURY_INTERFACE,mlr.getCompany(),false);
          if (exportNumber == null) {
            throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),mlr.getCompany().getName()),IException.CONFIGURATION_ERROR);
          }
          Move firstMove=moves.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          for (          Move move : moves) {
            move.setExportNumber(exportNumber);
            move.setExportDate(interfaceDate);
            move.setAccountingOk(true);
            move.setMoveLineReport(mlr);
            move.save();
          }
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=""String_Node_Str"";
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=this.getFilePath(mlr);
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59155,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type achat
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect9FILE1(MoveLineReport mlr,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  String dateQueryStr=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getCompany().getId());
  JournalType journalType=mlrs.getJournalType(mlr);
  if (mlr.getJournal() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getJournal().getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",journalType.getId());
  }
  if (mlr.getPeriod() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (mlr.getRef() != null) {
    reference=mlr.getRef();
  }
  if (mlr.getCompany() != null) {
    companyCode=mlr.getCompany().getCode();
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getCompany().getId());
  }
  if (mlr.getPeriod() != null) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (mlr.getDateFrom() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateFrom().toString());
  }
  if (mlr.getDateTo() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateTo().toString());
  }
  if (mlr.getDate() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=mlr.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.all().filter(""String_Node_Str"",journalType).fetch();
    if (mlr.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(mlr.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moves=Move.all().filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moves.size() > 0) {
        for (        Move move : moves) {
          List<MoveLine> moveLines=MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + moveLineQueryStr,moves).fetch();
          LOG.debug(""String_Node_Str"",moveLines);
          if (moveLines.size() > 0) {
            String exportToAgressoNumber=sgs.getSequence(IAdministration.PURCHASE_INTERFACE,mlr.getCompany(),false);
            if (exportToAgressoNumber == null) {
              throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),mlr.getCompany().getName()),IException.CONFIGURATION_ERROR);
            }
            String periodCode=move.getPeriod().getFromDate().toString(""String_Node_Str"");
            move.setExportNumber(exportToAgressoNumber);
            move.setExportDate(interfaceDate);
            move.setAccountingOk(true);
            move.setMoveLineReport(mlr);
            move.save();
            BigDecimal totalDebit=BigDecimal.ZERO;
            for (            MoveLine moveLine : moveLines) {
              totalDebit=totalDebit.add(moveLine.getDebit());
            }
            String invoiceId=""String_Node_Str"";
            String dueDate=""String_Node_Str"";
            if (move.getInvoice() != null) {
              invoiceId=move.getInvoice().getInvoiceId();
              dueDate=move.getInvoice().getDueDate().toString();
            }
            MoveLine firstMoveLine=moveLines.get(0);
            String items[]=new String[12];
            items[0]=companyCode;
            items[1]=journalCode;
            items[2]=exportToAgressoNumber;
            items[3]=interfaceDate.toString(""String_Node_Str"");
            items[4]=""String_Node_Str"";
            items[5]=invoiceId;
            items[6]=dueDate;
            items[7]=firstMoveLine.getAccount().getCode();
            items[8]=totalDebit.toString();
            items[9]=reference;
            items[10]=dt.toString(""String_Node_Str"");
            items[11]=periodCode;
            allMoveData.add(items);
          }
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=this.getFilePath(mlr);
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type achat
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect9FILE1(MoveLineReport mlr,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  String dateQueryStr=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getCompany().getId());
  JournalType journalType=mlrs.getJournalType(mlr);
  if (mlr.getJournal() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getJournal().getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",journalType.getId());
  }
  if (mlr.getPeriod() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (mlr.getRef() != null) {
    reference=mlr.getRef();
  }
  if (mlr.getCompany() != null) {
    companyCode=mlr.getCompany().getCode();
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getCompany().getId());
  }
  if (mlr.getPeriod() != null) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (mlr.getDateFrom() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateFrom().toString());
  }
  if (mlr.getDateTo() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateTo().toString());
  }
  if (mlr.getDate() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=mlr.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.all().filter(""String_Node_Str"",journalType).fetch();
    if (mlr.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(mlr.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moves=Move.all().filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moves.size() > 0) {
        for (        Move move : moves) {
          List<MoveLine> moveLines=MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + moveLineQueryStr,moves).fetch();
          LOG.debug(""String_Node_Str"",moveLines);
          if (moveLines.size() > 0) {
            String exportNumber=sgs.getSequence(IAdministration.PURCHASE_INTERFACE,mlr.getCompany(),false);
            if (exportNumber == null) {
              throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),mlr.getCompany().getName()),IException.CONFIGURATION_ERROR);
            }
            String periodCode=move.getPeriod().getFromDate().toString(""String_Node_Str"");
            move.setExportNumber(exportNumber);
            move.setExportDate(interfaceDate);
            move.setAccountingOk(true);
            move.setMoveLineReport(mlr);
            move.save();
            BigDecimal totalDebit=BigDecimal.ZERO;
            for (            MoveLine moveLine : moveLines) {
              totalDebit=totalDebit.add(moveLine.getDebit());
            }
            String invoiceId=""String_Node_Str"";
            String dueDate=""String_Node_Str"";
            if (move.getInvoice() != null) {
              invoiceId=move.getInvoice().getInvoiceId();
              dueDate=move.getInvoice().getDueDate().toString();
            }
            MoveLine firstMoveLine=moveLines.get(0);
            String items[]=new String[12];
            items[0]=companyCode;
            items[1]=journalCode;
            items[2]=exportNumber;
            items[3]=interfaceDate.toString(""String_Node_Str"");
            items[4]=""String_Node_Str"";
            items[5]=invoiceId;
            items[6]=dueDate;
            items[7]=firstMoveLine.getAccount().getCode();
            items[8]=totalDebit.toString();
            items[9]=reference;
            items[10]=dt.toString(""String_Node_Str"");
            items[11]=periodCode;
            allMoveData.add(items);
          }
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=this.getFilePath(mlr);
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59156,"/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type vente
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect6FILE1(MoveLineReport mlr,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  String dateQueryStr=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getCompany().getId());
  JournalType journalType=mlrs.getJournalType(mlr);
  if (mlr.getJournal() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getJournal().getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",journalType.getId());
  }
  if (mlr.getPeriod() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (mlr.getRef() != null) {
    reference=mlr.getRef();
  }
  if (mlr.getCompany() != null) {
    companyCode=mlr.getCompany().getCode();
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getCompany().getId());
  }
  if (mlr.getPeriod() != null) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (mlr.getDateFrom() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateFrom().toString());
  }
  if (mlr.getDateTo() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateTo().toString());
  }
  if (mlr.getDate() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=mlr.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.all().filter(""String_Node_Str"",journalType).fetch();
    if (mlr.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(mlr.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moves=Move.all().filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moves.size() > 0) {
        List<MoveLine> moveLines=MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + moveLineQueryStr,moves).fetch();
        LOG.debug(""String_Node_Str"",moveLines);
        if (moveLines.size() > 0) {
          String exportToAgressoNumber=sgs.getSequence(IAdministration.SALES_INTERFACE,mlr.getCompany(),false);
          if (exportToAgressoNumber == null) {
            throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),mlr.getCompany().getName()),IException.CONFIGURATION_ERROR);
          }
          Move firstMove=moves.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          for (          Move move : moves) {
            move.setExportNumber(exportToAgressoNumber);
            move.setExportDate(interfaceDate);
            move.setAccountingOk(true);
            move.setMoveLineReport(mlr);
            move.save();
          }
          BigDecimal totalDebit=BigDecimal.ZERO;
          for (          MoveLine moveLine : moveLines) {
            totalDebit=totalDebit.add(moveLine.getDebit());
          }
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportToAgressoNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=totalDebit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=this.getFilePath(mlr);
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}","/** 
 * Méthode réalisant l'export SI - Agresso des en-têtes pour les journaux de type vente
 * @param mlr
 * @param replay
 * @throws AxelorException
 * @throws IOException 
 */
@SuppressWarnings(""String_Node_Str"") @Transactional(rollbackOn={AxelorException.class,Exception.class}) public void exportMoveLineTypeSelect6FILE1(MoveLineReport mlr,boolean replay) throws AxelorException, IOException {
  LOG.info(""String_Node_Str"");
  String dateQueryStr=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getCompany().getId());
  JournalType journalType=mlrs.getJournalType(mlr);
  if (mlr.getJournal() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getJournal().getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",journalType.getId());
  }
  if (mlr.getPeriod() != null) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (replay) {
    dateQueryStr+=""String_Node_Str"" + String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    dateQueryStr+=""String_Node_Str"";
  }
  dateQueryStr+=""String_Node_Str"";
  Query dateQuery=JPA.em().createQuery(""String_Node_Str"" + dateQueryStr + ""String_Node_Str"");
  List<LocalDate> allDates=new ArrayList<LocalDate>();
  allDates=dateQuery.getResultList();
  LOG.debug(""String_Node_Str"",allDates);
  List<String[]> allMoveData=new ArrayList<String[]>();
  String companyCode=""String_Node_Str"";
  String reference=""String_Node_Str"";
  String moveQueryStr=""String_Node_Str"";
  String moveLineQueryStr=""String_Node_Str"";
  if (mlr.getRef() != null) {
    reference=mlr.getRef();
  }
  if (mlr.getCompany() != null) {
    companyCode=mlr.getCompany().getCode();
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getCompany().getId());
  }
  if (mlr.getPeriod() != null) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getPeriod().getId());
  }
  if (mlr.getDateFrom() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateFrom().toString());
  }
  if (mlr.getDateTo() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDateTo().toString());
  }
  if (mlr.getDate() != null) {
    moveLineQueryStr+=""String_Node_Str"";
    moveLineQueryStr+=String.format(""String_Node_Str"",mlr.getDate().toString());
  }
  if (replay) {
    moveQueryStr+=""String_Node_Str"";
    moveQueryStr+=String.format(""String_Node_Str"",mlr.getId());
  }
 else {
    moveQueryStr+=""String_Node_Str"";
  }
  LocalDate interfaceDate=mlr.getDate();
  for (  LocalDate dt : allDates) {
    List<Journal> journalList=Journal.all().filter(""String_Node_Str"",journalType).fetch();
    if (mlr.getJournal() != null) {
      journalList=new ArrayList<Journal>();
      journalList.add(mlr.getJournal());
    }
    for (    Journal journal : journalList) {
      List<Move> moves=Move.all().filter(""String_Node_Str"" + moveQueryStr,dt,journal).fetch();
      String journalCode=journal.getExportCode();
      if (moves.size() > 0) {
        List<MoveLine> moveLines=MoveLine.all().filter(""String_Node_Str"" + ""String_Node_Str"" + moveLineQueryStr,moves).fetch();
        LOG.debug(""String_Node_Str"",moveLines);
        if (moveLines.size() > 0) {
          String exportNumber=sgs.getSequence(IAdministration.SALES_INTERFACE,mlr.getCompany(),false);
          if (exportNumber == null) {
            throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),mlr.getCompany().getName()),IException.CONFIGURATION_ERROR);
          }
          Move firstMove=moves.get(0);
          String periodCode=firstMove.getPeriod().getFromDate().toString(""String_Node_Str"");
          for (          Move move : moves) {
            move.setExportNumber(exportNumber);
            move.setExportDate(interfaceDate);
            move.setAccountingOk(true);
            move.setMoveLineReport(mlr);
            move.save();
          }
          BigDecimal totalDebit=BigDecimal.ZERO;
          for (          MoveLine moveLine : moveLines) {
            totalDebit=totalDebit.add(moveLine.getDebit());
          }
          String items[]=new String[8];
          items[0]=companyCode;
          items[1]=journalCode;
          items[2]=exportNumber;
          items[3]=interfaceDate.toString(""String_Node_Str"");
          items[4]=totalDebit.toString();
          items[5]=reference;
          items[6]=dt.toString(""String_Node_Str"");
          items[7]=periodCode;
          allMoveData.add(items);
        }
      }
    }
  }
  String fileName=""String_Node_Str"" + todayTime.toString(""String_Node_Str"") + ""String_Node_Str"";
  String filePath=this.getFilePath(mlr);
  new File(filePath).mkdirs();
  LOG.debug(""String_Node_Str"",filePath,fileName);
  CsvTool.csvWriter(filePath,fileName,'|',null,allMoveData);
}"
59157,"/** 
 * Méthode permettant d'employer les trop-perçus 2 cas :  - le compte des trop-perçus est le même que celui de la facture : alors on lettre directement - le compte n'est pas le même : on créée une O.D. de passage sur le bon compte
 * @param invoice
 * @return
 * @throws AxelorException
 */
public Move createMoveUseExcessPayment(Invoice invoice,boolean isDebitCustomer) throws AxelorException {
  Move move=null;
  if (invoice != null) {
    List<MoveLine> creditMoveLineList=pas.getExcessPayment(invoice,invoice.getCompany().getCustomerAccount());
    if (creditMoveLineList != null && creditMoveLineList.size() != 0) {
      Company company=invoice.getCompany();
      Partner partner=invoice.getClientPartner();
      Account account=invoice.getPartnerAccount();
      MoveLine invoiceCustomerMoveLine=mls.getCustomerMoveLine(invoice);
      if (company.getMiscOperationJournal() == null) {
        throw new AxelorException(String.format(""String_Node_Str"",company.getName()),IException.CONFIGURATION_ERROR);
      }
      Journal journal=company.getMiscOperationJournal();
      if (this.isSameAccount(creditMoveLineList,account)) {
        List<MoveLine> debitMoveLineList=new ArrayList<MoveLine>();
        debitMoveLineList.add(invoiceCustomerMoveLine);
        pas.useExcessPaymentOnMoveLines(debitMoveLineList,creditMoveLineList);
      }
 else {
        LOG.debug(""String_Node_Str"",new Object[]{invoice.getInvoiceId(),company.getName(),journal.getCode()});
        move=this.createMove(journal,company,null,partner,invoice.getInvoiceDate(),null,false);
        if (move != null) {
          BigDecimal totalCreditAmount=this.getTotalCreditAmount(creditMoveLineList);
          BigDecimal amount=totalCreditAmount.min(invoiceCustomerMoveLine.getDebit());
          MoveLine creditMoveLine=mls.createMoveLine(move,partner,account,amount,false,false,toDay,1,false,false,false,null);
          move.getMoveLineList().add(creditMoveLine);
          pas.useExcessPaymentWithAmountConsolidated(creditMoveLineList,amount,move,2,partner,company,account,invoice.getInvoiceDate(),invoice.getDueDate());
          this.validateMove(move);
          Reconcile reconcile=rs.createReconcile(invoiceCustomerMoveLine,creditMoveLine,amount);
          rs.confirmReconcile(reconcile);
        }
      }
      invoice.setInTaxTotalRemaining(this.getInTaxTotalRemaining(invoice,account));
    }
  }
  return move;
}","public Move createMoveUseExcessPayment(Invoice invoice) throws AxelorException {
  Move move=null;
  List<MoveLine> creditMoveLineList=pas.getExcessPayment(invoice,invoice.getCompany().getCustomerAccount());
  if (creditMoveLineList != null && creditMoveLineList.size() != 0) {
    Company company=invoice.getCompany();
    Partner partner=invoice.getClientPartner();
    Account account=invoice.getPartnerAccount();
    MoveLine invoiceCustomerMoveLine=this.getCustomerMoveLine(invoice);
    if (company.getMiscOperationJournal() == null) {
      throw new AxelorException(String.format(""String_Node_Str"",company.getName()),IException.CONFIGURATION_ERROR);
    }
    Journal journal=company.getMiscOperationJournal();
    if (this.isSameAccount(creditMoveLineList,account)) {
      List<MoveLine> debitMoveLineList=new ArrayList<MoveLine>();
      debitMoveLineList.add(invoiceCustomerMoveLine);
      pas.useExcessPaymentOnMoveLines(debitMoveLineList,creditMoveLineList);
    }
 else {
      LOG.debug(""String_Node_Str"",new Object[]{invoice.getInvoiceId(),company.getName(),journal.getCode()});
      move=this.createMove(journal,company,null,partner,invoice.getInvoiceDate(),null,false);
      if (move != null) {
        BigDecimal totalCreditAmount=this.getTotalCreditAmount(creditMoveLineList);
        BigDecimal amount=totalCreditAmount.min(invoiceCustomerMoveLine.getDebit());
        MoveLine creditMoveLine=mls.createMoveLine(move,partner,account,amount,false,false,toDay,1,false,false,false,null);
        move.getMoveLineList().add(creditMoveLine);
        pas.useExcessPaymentWithAmountConsolidated(creditMoveLineList,amount,move,2,partner,company,account,invoice.getInvoiceDate(),invoice.getDueDate());
        this.validateMove(move);
        Reconcile reconcile=rs.createReconcile(invoiceCustomerMoveLine,creditMoveLine,amount);
        rs.confirmReconcile(reconcile);
      }
    }
    invoice.setInTaxTotalRemaining(this.getInTaxTotalRemaining(invoice,account));
  }
  return move;
}"
59158,"protected void setMove() throws AxelorException {
  Move move=null;
  move=moveService.createMove(invoice);
  if (move != null) {
    invoice.setMove(move);
  }
}","protected void setMove() throws AxelorException {
  Move move=null;
  move=moveService.createMove(invoice);
  if (move != null) {
    invoice.setMove(move);
    moveService.createMoveUseExcessPaymentOrDue(invoice);
  }
}"
59159,"/** 
 * Utiliser le trop perçu entre deux listes de lignes d'écritures (une en débit, une en crédit) Si cette methode doit être utilisée, penser à ordonner les listes qui lui sont passées par date croissante Ceci permet de payer les facture de manière chronologique.
 * @param debitMoveLines = dûs
 * @param creditMoveLines = trop-perçu
 * @return
 * @throws AxelorException 
 */
public void useExcessPaymentOnMoveLines(List<MoveLine> debitMoveLines,List<MoveLine> creditMoveLines,boolean updateCustomerAccount) throws AxelorException {
  if (debitMoveLines != null && creditMoveLines != null) {
    LOG.debug(""String_Node_Str"",new Object[]{debitMoveLines.size(),creditMoveLines.size()});
    BigDecimal amount=null;
    Reconcile reconcile=null;
    BigDecimal debitTotalRemaining=BigDecimal.ZERO;
    BigDecimal creditTotalRemaining=BigDecimal.ZERO;
    for (    MoveLine creditMoveLine : creditMoveLines) {
      creditTotalRemaining=creditTotalRemaining.add(creditMoveLine.getAmountRemaining());
    }
    for (    MoveLine debitMoveLine : debitMoveLines) {
      debitTotalRemaining=debitTotalRemaining.add(debitMoveLine.getAmountRemaining());
    }
    for (    MoveLine creditMoveLine : creditMoveLines) {
      if (creditMoveLine.getAmountRemaining().compareTo(BigDecimal.ZERO) == 1) {
        for (        MoveLine debitMoveLine : debitMoveLines) {
          if ((debitMoveLine.getAmountRemaining().compareTo(BigDecimal.ZERO) == 1) && (creditMoveLine.getAmountRemaining().compareTo(BigDecimal.ZERO) == 1)) {
            if (debitMoveLine.getMaxAmountToReconcile() != null && debitMoveLine.getMaxAmountToReconcile().compareTo(BigDecimal.ZERO) > 0) {
              amount=debitMoveLine.getMaxAmountToReconcile().min(creditMoveLine.getAmountRemaining());
              debitMoveLine.setMaxAmountToReconcile(null);
            }
 else {
              amount=creditMoveLine.getAmountRemaining().min(debitMoveLine.getAmountRemaining());
            }
            LOG.debug(""String_Node_Str"",amount);
            LOG.debug(""String_Node_Str"",debitTotalRemaining);
            LOG.debug(""String_Node_Str"",creditTotalRemaining);
            BigDecimal nextDebitTotalRemaining=debitTotalRemaining.subtract(amount);
            BigDecimal nextCreditTotalRemaining=creditTotalRemaining.subtract(amount);
            if (nextDebitTotalRemaining.compareTo(BigDecimal.ZERO) <= 0 || nextCreditTotalRemaining.compareTo(BigDecimal.ZERO) <= 0) {
              LOG.debug(""String_Node_Str"");
              if (creditMoveLine.getPaymentScheduleLine() != null && !pss.isLastSchedule(creditMoveLine.getPaymentScheduleLine())) {
                reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amount,false,false,false);
              }
 else {
                reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amount,true,false,false);
              }
            }
 else {
              reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amount,false,false,false);
            }
            rcs.confirmReconcile(reconcile,updateCustomerAccount);
            debitTotalRemaining=debitTotalRemaining.subtract(amount);
            creditTotalRemaining=creditTotalRemaining.subtract(amount);
            LOG.debug(""String_Node_Str"",reconcile);
          }
        }
      }
    }
  }
}","/** 
 * Utiliser le trop perçu entre deux listes de lignes d'écritures (une en débit, une en crédit) Si cette methode doit être utilisée, penser à ordonner les listes qui lui sont passées par date croissante Ceci permet de payer les facture de manière chronologique.
 * @param debitMoveLines = dûs
 * @param creditMoveLines = trop-perçu
 * @return
 * @throws AxelorException 
 */
public void useExcessPaymentOnMoveLines(List<MoveLine> debitMoveLines,List<MoveLine> creditMoveLines,boolean updateCustomerAccount) throws AxelorException {
  if (debitMoveLines != null && creditMoveLines != null) {
    LOG.debug(""String_Node_Str"",new Object[]{debitMoveLines.size(),creditMoveLines.size()});
    BigDecimal amount=null;
    Reconcile reconcile=null;
    BigDecimal debitTotalRemaining=BigDecimal.ZERO;
    BigDecimal creditTotalRemaining=BigDecimal.ZERO;
    for (    MoveLine creditMoveLine : creditMoveLines) {
      LOG.debug(""String_Node_Str"",creditMoveLine);
      LOG.debug(""String_Node_Str"",creditMoveLine.getAmountRemaining());
      creditTotalRemaining=creditTotalRemaining.add(creditMoveLine.getAmountRemaining());
    }
    for (    MoveLine debitMoveLine : debitMoveLines) {
      LOG.debug(""String_Node_Str"",debitMoveLine);
      LOG.debug(""String_Node_Str"",debitMoveLine.getAmountRemaining());
      debitTotalRemaining=debitTotalRemaining.add(debitMoveLine.getAmountRemaining());
    }
    for (    MoveLine creditMoveLine : creditMoveLines) {
      if (creditMoveLine.getAmountRemaining().compareTo(BigDecimal.ZERO) == 1) {
        for (        MoveLine debitMoveLine : debitMoveLines) {
          if ((debitMoveLine.getAmountRemaining().compareTo(BigDecimal.ZERO) == 1) && (creditMoveLine.getAmountRemaining().compareTo(BigDecimal.ZERO) == 1)) {
            if (debitMoveLine.getMaxAmountToReconcile() != null && debitMoveLine.getMaxAmountToReconcile().compareTo(BigDecimal.ZERO) > 0) {
              amount=debitMoveLine.getMaxAmountToReconcile().min(creditMoveLine.getAmountRemaining());
              debitMoveLine.setMaxAmountToReconcile(null);
            }
 else {
              amount=creditMoveLine.getAmountRemaining().min(debitMoveLine.getAmountRemaining());
            }
            LOG.debug(""String_Node_Str"",amount);
            LOG.debug(""String_Node_Str"",debitTotalRemaining);
            LOG.debug(""String_Node_Str"",creditTotalRemaining);
            BigDecimal nextDebitTotalRemaining=debitTotalRemaining.subtract(amount);
            BigDecimal nextCreditTotalRemaining=creditTotalRemaining.subtract(amount);
            if (nextDebitTotalRemaining.compareTo(BigDecimal.ZERO) <= 0 || nextCreditTotalRemaining.compareTo(BigDecimal.ZERO) <= 0) {
              LOG.debug(""String_Node_Str"");
              if (creditMoveLine.getPaymentScheduleLine() != null && !pss.isLastSchedule(creditMoveLine.getPaymentScheduleLine())) {
                reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amount,false,false,false);
              }
 else {
                reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amount,true,false,false);
              }
            }
 else {
              reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amount,false,false,false);
            }
            rcs.confirmReconcile(reconcile,updateCustomerAccount);
            debitTotalRemaining=debitTotalRemaining.subtract(amount);
            creditTotalRemaining=creditTotalRemaining.subtract(amount);
            LOG.debug(""String_Node_Str"",reconcile);
          }
        }
      }
    }
  }
}"
59160,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public PaymentVoucher createPaymentVoucherIPO(Invoice invoice,DateTime dateTime,BigDecimal amount,PaymentMode paymentMode) throws AxelorException {
  MoveLine customerMoveLine=mls.getCustomerMoveLine(invoice,invoice.getRejectMoveLine() != null);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getInvoiceId());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",paymentMode.getCode());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getCompany().getName());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getClientPartner().getName());
  }
  PaymentVoucher paymentVoucher=this.createPaymentVoucher(invoice.getCompany(),null,paymentMode,dateTime,invoice.getClientPartner(),amount,null,invoice,null,null,null);
  paymentVoucher.setAutoOk(true);
  List<PaymentInvoiceToPay> lines=new ArrayList<PaymentInvoiceToPay>();
  lines.add(pitps.createPaymentInvoiceToPay(paymentVoucher,1,invoice,customerMoveLine,customerMoveLine.getDebit(),customerMoveLine.getAmountRemaining(),amount));
  paymentVoucher.setPaymentInvoiceToPayList(lines);
  paymentVoucher.save();
  this.confirmPaymentVoucher(paymentVoucher,false);
  return paymentVoucher;
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public PaymentVoucher createPaymentVoucherIPO(Invoice invoice,DateTime dateTime,BigDecimal amount,PaymentMode paymentMode) throws AxelorException {
  MoveLine customerMoveLine=ms.getCustomerMoveLine(invoice,invoice.getRejectMoveLine() != null);
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getInvoiceId());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",paymentMode.getCode());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getCompany().getName());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"",invoice.getClientPartner().getName());
  }
  PaymentVoucher paymentVoucher=this.createPaymentVoucher(invoice.getCompany(),null,paymentMode,dateTime,invoice.getClientPartner(),amount,null,invoice,null,null,null);
  paymentVoucher.setAutoOk(true);
  List<PaymentInvoiceToPay> lines=new ArrayList<PaymentInvoiceToPay>();
  lines.add(pitps.createPaymentInvoiceToPay(paymentVoucher,1,invoice,customerMoveLine,customerMoveLine.getDebit(),customerMoveLine.getAmountRemaining(),amount));
  paymentVoucher.setPaymentInvoiceToPayList(lines);
  paymentVoucher.save();
  this.confirmPaymentVoucher(paymentVoucher,false);
  return paymentVoucher;
}"
59161,"/** 
 * Main method. Can be launched by the script axelor-data.sh
 * @param args Arguments
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  final Commander cmd=new Commander();
  try {
    if (args == null || args.length == 0)     throw new Exception();
    cmd.parse(args);
    if (!cmd.getDataDir().isDirectory())     throw new Exception(""String_Node_Str"");
    if (!cmd.getConfig().isFile())     throw new Exception(""String_Node_Str"");
  }
 catch (  Exception e) {
    String message=e.getMessage();
    if (!Strings.isNullOrEmpty(message))     System.err.println(e.getMessage());
    Commander.usage();
    return;
  }
  if (cmd.getShowHelp() == Boolean.TRUE) {
    Commander.usage();
    return;
  }
  Injector injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      install(new JpaModule(""String_Node_Str"",true,true));
      install(new AuthModule.Simple());
      bindConstant().annotatedWith(Names.named(""String_Node_Str"")).to(cmd.getConfig().toString());
      bindConstant().annotatedWith(Names.named(""String_Node_Str"")).to(cmd.getDataDir().toString());
    }
  }
);
  CSVImporter importer=injector.getInstance(CSVImporter.class);
  importer.addListener(new Listener(){
    @Override public void imported(    Model bean){
    }
    @Override public void imported(    Integer total,    Integer success){
      System.out.println(""String_Node_Str"" + total);
      System.out.println(""String_Node_Str"" + success);
    }
    @Override public void handle(    Model bean,    Exception e){
    }
  }
);
  importer.run(null);
}","/** 
 * Main method. Can be launched by the script axelor-data.sh
 * @param args Arguments
 * @throws Exception
 */
public static void main(String[] args) throws Exception {
  final Commander cmd=new Commander();
  try {
    if (args == null || args.length == 0)     throw new Exception();
    cmd.parse(args);
    if (!cmd.getDataDir().isDirectory())     throw new Exception(""String_Node_Str"");
    if (!cmd.getConfig().isFile())     throw new Exception(""String_Node_Str"");
  }
 catch (  Exception e) {
    String message=e.getMessage();
    if (!Strings.isNullOrEmpty(message))     System.err.println(e.getMessage());
    Commander.usage();
    return;
  }
  if (cmd.getShowHelp() == Boolean.TRUE) {
    Commander.usage();
    return;
  }
  final String errorDir=cmd.getErrorDir() == null ? null : cmd.getErrorDir().getPath();
  Injector injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      install(new JpaModule(""String_Node_Str"",true,true));
      install(new AuthModule.Simple());
      bindConstant().annotatedWith(Names.named(""String_Node_Str"")).to(cmd.getConfig().toString());
      bindConstant().annotatedWith(Names.named(""String_Node_Str"")).to(cmd.getDataDir().toString());
      bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toProvider(Providers.<String>of(errorDir));
    }
  }
);
  CSVImporter importer=injector.getInstance(CSVImporter.class);
  importer.addListener(new Listener(){
    @Override public void imported(    Model bean){
    }
    @Override public void imported(    Integer total,    Integer success){
      System.out.println(""String_Node_Str"" + total);
      System.out.println(""String_Node_Str"" + success);
    }
    @Override public void handle(    Model bean,    Exception e){
    }
  }
);
  importer.run(null);
}"
59162,"@Override protected void configure(){
  install(new JpaModule(""String_Node_Str"",true,true));
  install(new AuthModule.Simple());
  bindConstant().annotatedWith(Names.named(""String_Node_Str"")).to(cmd.getConfig().toString());
  bindConstant().annotatedWith(Names.named(""String_Node_Str"")).to(cmd.getDataDir().toString());
}","@Override protected void configure(){
  install(new JpaModule(""String_Node_Str"",true,true));
  install(new AuthModule.Simple());
  bindConstant().annotatedWith(Names.named(""String_Node_Str"")).to(cmd.getConfig().toString());
  bindConstant().annotatedWith(Names.named(""String_Node_Str"")).to(cmd.getDataDir().toString());
  bind(String.class).annotatedWith(Names.named(""String_Node_Str"")).toProvider(Providers.<String>of(errorDir));
}"
59163,"@Override public Invoice generate() throws AxelorException {
  computeInvoice(invoice);
  return invoice;
}","@Override public Invoice generate() throws AxelorException {
  List<InvoiceLine> invoiceLines=new ArrayList<InvoiceLine>();
  invoiceLines.addAll(invoice.getInvoiceLineList());
  invoiceLines.addAll(invoice.getTaxInvoiceLineList());
  populate(invoice,invoiceLines);
  return invoice;
}"
59164,"public ProductVariant getStockProductVariant(ProductVariant productVariant){
  ProductVariant stockProductVariant=this.getProductVariant(productVariant.getProductVariantAttribute1(),productVariant.getProductVariantAttribute2(),productVariant.getProductVariantAttribute3(),productVariant.getProductVariantAttribute4(),productVariant.getProductVariantValue1(),productVariant.getProductVariantValue2(),productVariant.getProductVariantValue3(),productVariant.getProductVariantValue4(),true);
  if (stockProductVariant == null) {
    stockProductVariant=this.copyProductVariant(stockProductVariant,true);
  }
  return stockProductVariant;
}","public ProductVariant getStockProductVariant(ProductVariant productVariant){
  ProductVariant stockProductVariant=this.getProductVariant(productVariant.getProductVariantAttribute1(),productVariant.getProductVariantAttribute2(),productVariant.getProductVariantAttribute3(),productVariant.getProductVariantAttribute4(),productVariant.getProductVariantValue1(),productVariant.getProductVariantValue2(),productVariant.getProductVariantValue3(),productVariant.getProductVariantValue4(),true);
  if (stockProductVariant == null) {
    stockProductVariant=this.copyProductVariant(productVariant,true);
  }
  return stockProductVariant;
}"
59165,"/** 
 * Méthode permettant de créer un StockMove à partir d'un PurchaseOrder.
 * @param purchaseOrder une commande
 * @throws AxelorException Aucune séquence de StockMove n'a été configurée
 */
public void createStocksMoves(PurchaseOrder purchaseOrder) throws AxelorException {
  if (purchaseOrder.getPurchaseOrderLineList() != null && purchaseOrder.getCompany() != null) {
    Company company=purchaseOrder.getCompany();
    Location startLocation=Location.all().filter(""String_Node_Str"",purchaseOrder.getSupplierPartner()).fetchOne();
    if (startLocation == null) {
      startLocation=company.getSupplierVirtualLocation();
    }
    if (startLocation == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),company.getName()),IException.CONFIGURATION_ERROR);
    }
    StockMove stockMove=stockMoveService.createStockMove(null,company,purchaseOrder.getSupplierPartner(),startLocation,purchaseOrder.getLocation());
    stockMove.setStockMoveLineList(new ArrayList<StockMoveLine>());
    for (    PurchaseOrderLine purchaseOrderLine : purchaseOrder.getPurchaseOrderLineList()) {
      Product product=purchaseOrderLine.getProduct();
      if (product != null && ((company.getHasInSmForStorableProduct() && product.getProductTypeSelect().equals(IProduct.STORABLE)) || (company.getHasInSmForNonStorableProduct() && !product.getProductTypeSelect().equals(IProduct.STORABLE)))) {
        StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,purchaseOrderLine.getQty(),purchaseOrderLine.getUnit(),purchaseOrderLineService.computeDiscount(purchaseOrderLine),stockMove,purchaseOrderLine.getProductVariant(),2);
        if (stockMoveLine != null) {
          stockMove.getStockMoveLineList().add(stockMoveLine);
        }
      }
    }
    if (stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
      stockMoveService.validate(stockMove);
    }
  }
}","/** 
 * Méthode permettant de créer un StockMove à partir d'un PurchaseOrder.
 * @param purchaseOrder une commande
 * @throws AxelorException Aucune séquence de StockMove n'a été configurée
 */
public void createStocksMoves(PurchaseOrder purchaseOrder) throws AxelorException {
  if (purchaseOrder.getPurchaseOrderLineList() != null && purchaseOrder.getCompany() != null) {
    Company company=purchaseOrder.getCompany();
    Location startLocation=Location.all().filter(""String_Node_Str"",purchaseOrder.getSupplierPartner()).fetchOne();
    if (startLocation == null) {
      startLocation=company.getSupplierVirtualLocation();
    }
    if (startLocation == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),company.getName()),IException.CONFIGURATION_ERROR);
    }
    StockMove stockMove=stockMoveService.createStockMove(null,company,purchaseOrder.getSupplierPartner(),startLocation,purchaseOrder.getLocation());
    stockMove.setPurchaseOrder(purchaseOrder);
    stockMove.setStockMoveLineList(new ArrayList<StockMoveLine>());
    for (    PurchaseOrderLine purchaseOrderLine : purchaseOrder.getPurchaseOrderLineList()) {
      Product product=purchaseOrderLine.getProduct();
      if (product != null && ((company.getHasInSmForStorableProduct() && product.getProductTypeSelect().equals(IProduct.STORABLE)) || (company.getHasInSmForNonStorableProduct() && !product.getProductTypeSelect().equals(IProduct.STORABLE)))) {
        StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,purchaseOrderLine.getQty(),purchaseOrderLine.getUnit(),purchaseOrderLineService.computeDiscount(purchaseOrderLine),stockMove,purchaseOrderLine.getProductVariant(),2);
        if (stockMoveLine != null) {
          stockMove.getStockMoveLineList().add(stockMoveLine);
        }
      }
    }
    if (stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
      stockMoveService.validate(stockMove);
    }
  }
}"
59166,"/** 
 * Méthode permettant de créer un StockMove à partir d'un SalesOrder.
 * @param salesOrder l'objet salesOrder
 * @throws AxelorException Aucune séquence de StockMove (Livraison) n'a été configurée
 */
public void createStocksMovesFromSalesOrder(SalesOrder salesOrder) throws AxelorException {
  if (salesOrder.getSalesOrderLineList() != null && salesOrder.getCompany() != null) {
    Company company=salesOrder.getCompany();
    Location toLocation=Location.all().filter(""String_Node_Str"",company,ILocation.EXTERNAL).fetchOne();
    if (toLocation == null) {
      toLocation=company.getCustomerVirtualLocation();
    }
    if (toLocation == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),company.getName()),IException.CONFIGURATION_ERROR);
    }
    StockMove stockMove=stockMoveService.createStockMove(salesOrder.getDeliveryAddress(),company,salesOrder.getClientPartner(),salesOrder.getLocation(),toLocation);
    stockMove.setStockMoveLineList(new ArrayList<StockMoveLine>());
    for (    SalesOrderLine salesOrderLine : salesOrder.getSalesOrderLineList()) {
      Product product=salesOrderLine.getProduct();
      if (product != null && ((company.getHasOutSmForStorableProduct() && product.getProductTypeSelect().equals(IProduct.STORABLE)) || (company.getHasOutSmForNonStorableProduct() && !product.getProductTypeSelect().equals(IProduct.STORABLE)))) {
        StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,salesOrderLine.getQty(),salesOrderLine.getUnit(),salesOrderLineService.computeDiscount(salesOrderLine),stockMove,salesOrderLine.getProductVariant(),1);
        if (stockMoveLine != null) {
          stockMove.getStockMoveLineList().add(stockMoveLine);
        }
      }
    }
    if (stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
      stockMoveService.validate(stockMove);
    }
  }
}","/** 
 * Méthode permettant de créer un StockMove à partir d'un SalesOrder.
 * @param salesOrder l'objet salesOrder
 * @throws AxelorException Aucune séquence de StockMove (Livraison) n'a été configurée
 */
public void createStocksMovesFromSalesOrder(SalesOrder salesOrder) throws AxelorException {
  if (salesOrder.getSalesOrderLineList() != null && salesOrder.getCompany() != null) {
    Company company=salesOrder.getCompany();
    Location toLocation=Location.all().filter(""String_Node_Str"",company,ILocation.EXTERNAL).fetchOne();
    if (toLocation == null) {
      toLocation=company.getCustomerVirtualLocation();
    }
    if (toLocation == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),company.getName()),IException.CONFIGURATION_ERROR);
    }
    StockMove stockMove=stockMoveService.createStockMove(salesOrder.getDeliveryAddress(),company,salesOrder.getClientPartner(),salesOrder.getLocation(),toLocation);
    stockMove.setSalesOrder(salesOrder);
    stockMove.setStockMoveLineList(new ArrayList<StockMoveLine>());
    for (    SalesOrderLine salesOrderLine : salesOrder.getSalesOrderLineList()) {
      Product product=salesOrderLine.getProduct();
      if (product != null && ((company.getHasOutSmForStorableProduct() && product.getProductTypeSelect().equals(IProduct.STORABLE)) || (company.getHasOutSmForNonStorableProduct() && !product.getProductTypeSelect().equals(IProduct.STORABLE)))) {
        StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,salesOrderLine.getQty(),salesOrderLine.getUnit(),salesOrderLineService.computeDiscount(salesOrderLine),stockMove,salesOrderLine.getProductVariant(),1);
        if (stockMoveLine != null) {
          stockMove.getStockMoveLineList().add(stockMoveLine);
        }
      }
    }
    if (stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
      stockMoveService.validate(stockMove);
    }
  }
}"
59167,"public PriceListLine getPriceListLine(InvoiceLine invoiceLine,PriceList priceList){
  return priceListService.getPriceListLine(invoiceLine.getProduct(),priceList);
}","public PriceListLine getPriceListLine(InvoiceLine invoiceLine,PriceList priceList){
  return priceListService.getPriceListLine(invoiceLine.getProduct(),invoiceLine.getQty(),priceList);
}"
59168,"public void getProductInformation(ActionRequest request,ActionResponse response) throws AxelorException {
  InvoiceLine invoiceLine=request.getContext().asType(InvoiceLine.class);
  Invoice invoice=invoiceLine.getInvoice();
  if (invoice == null) {
    invoice=request.getContext().getParentContext().asType(Invoice.class);
  }
  if (invoice != null && invoiceLine.getProduct() != null) {
    try {
      boolean isPurchase=invoiceLineService.isPurchase(invoice);
      BigDecimal price=invoiceLineService.getUnitPrice(invoice,invoiceLine,isPurchase);
      response.setValue(""String_Node_Str"",invoiceLineService.getVatLine(invoice,invoiceLine,isPurchase));
      response.setValue(""String_Node_Str"",invoiceLine.getProduct().getName());
      PriceList priceList=invoice.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=invoiceLineService.getPriceListLine(invoiceLine,priceList);
        if (priceList.getIsDisplayed()) {
          response.setValue(""String_Node_Str"",priceListService.getDiscountAmount(priceListLine,price));
          response.setValue(""String_Node_Str"",priceListService.getDiscountTypeSelect(priceListLine));
        }
 else {
          price=priceListService.getUnitPriceDiscounted(priceListLine,price);
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
    }
  }
}","public void getProductInformation(ActionRequest request,ActionResponse response) throws AxelorException {
  InvoiceLine invoiceLine=request.getContext().asType(InvoiceLine.class);
  Invoice invoice=invoiceLine.getInvoice();
  if (invoice == null) {
    invoice=request.getContext().getParentContext().asType(Invoice.class);
  }
  if (invoice != null && invoiceLine.getProduct() != null) {
    try {
      boolean isPurchase=invoiceLineService.isPurchase(invoice);
      BigDecimal price=invoiceLineService.getUnitPrice(invoice,invoiceLine,isPurchase);
      response.setValue(""String_Node_Str"",invoiceLineService.getVatLine(invoice,invoiceLine,isPurchase));
      response.setValue(""String_Node_Str"",invoiceLine.getProduct().getName());
      PriceList priceList=invoice.getPriceList();
      if (priceList != null) {
        PriceListLine priceListLine=invoiceLineService.getPriceListLine(invoiceLine,priceList);
        Map<String,Object> discounts=priceListService.getDiscounts(priceList,priceListLine,price);
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        response.setValue(""String_Node_Str"",discounts.get(""String_Node_Str""));
        if (discounts.get(""String_Node_Str"") != null) {
          price=(BigDecimal)discounts.get(""String_Node_Str"");
        }
      }
      response.setValue(""String_Node_Str"",price);
    }
 catch (    Exception e) {
      response.setFlash(e.getMessage());
    }
  }
}"
59169,"public BigDecimal computeDiscount(PurchaseOrderLine purchaseOrderLine){
  BigDecimal unitPrice=purchaseOrderLine.getPrice();
  if (purchaseOrderLine.getDiscountTypeSelect() == IPriceListLine.AMOUNT_TYPE_FIXED) {
    return unitPrice.add(purchaseOrderLine.getDiscountAmount());
  }
 else   if (purchaseOrderLine.getDiscountTypeSelect() == IPriceListLine.AMOUNT_TYPE_PERCENT) {
    return unitPrice.multiply(BigDecimal.ONE.add(purchaseOrderLine.getDiscountAmount().divide(new BigDecimal(100))));
  }
  return unitPrice;
}","public BigDecimal computeDiscount(PurchaseOrderLine purchaseOrderLine){
  return priceListService.computeDiscount(purchaseOrderLine.getPrice(),purchaseOrderLine.getDiscountTypeSelect(),purchaseOrderLine.getDiscountAmount());
}"
59170,"/** 
 * Méthode permettant de créer un StockMove à partir d'un PurchaseOrder.
 * @param purchaseOrder une commande
 * @throws AxelorException Aucune séquence de StockMove n'a été configurée
 */
public void createStocksMoves(PurchaseOrder purchaseOrder) throws AxelorException {
  if (purchaseOrder.getPurchaseOrderLineList() != null && purchaseOrder.getCompany() != null) {
    Company company=purchaseOrder.getCompany();
    Location startLocation=Location.all().filter(""String_Node_Str"",purchaseOrder.getSupplierPartner()).fetchOne();
    if (startLocation == null) {
      startLocation=company.getSupplierVirtualLocation();
    }
    if (startLocation == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),company.getName()),IException.CONFIGURATION_ERROR);
    }
    StockMove stockMove=stockMoveService.createStockMove(null,company,purchaseOrder.getSupplierPartner(),startLocation,purchaseOrder.getLocation());
    stockMove.setStockMoveLineList(new ArrayList<StockMoveLine>());
    for (    PurchaseOrderLine purchaseOrderLine : purchaseOrder.getPurchaseOrderLineList()) {
      Product product=purchaseOrderLine.getProduct();
      if (product != null && ((company.getHasInSmForStorableProduct() && product.getProductTypeSelect().equals(IProduct.STORABLE)) || (company.getHasInSmForNonStorableProduct() && !product.getProductTypeSelect().equals(IProduct.STORABLE)))) {
        StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,purchaseOrderLine.getQty(),purchaseOrderLine.getUnit(),purchaseOrderLine.getPrice(),stockMove,purchaseOrderLine.getProductVariant(),2);
        if (stockMoveLine != null) {
          stockMove.getStockMoveLineList().add(stockMoveLine);
        }
      }
    }
    if (stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
      stockMoveService.validate(stockMove);
    }
  }
}","/** 
 * Méthode permettant de créer un StockMove à partir d'un PurchaseOrder.
 * @param purchaseOrder une commande
 * @throws AxelorException Aucune séquence de StockMove n'a été configurée
 */
public void createStocksMoves(PurchaseOrder purchaseOrder) throws AxelorException {
  if (purchaseOrder.getPurchaseOrderLineList() != null && purchaseOrder.getCompany() != null) {
    Company company=purchaseOrder.getCompany();
    Location startLocation=Location.all().filter(""String_Node_Str"",purchaseOrder.getSupplierPartner()).fetchOne();
    if (startLocation == null) {
      startLocation=company.getSupplierVirtualLocation();
    }
    if (startLocation == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),company.getName()),IException.CONFIGURATION_ERROR);
    }
    StockMove stockMove=stockMoveService.createStockMove(null,company,purchaseOrder.getSupplierPartner(),startLocation,purchaseOrder.getLocation());
    stockMove.setStockMoveLineList(new ArrayList<StockMoveLine>());
    for (    PurchaseOrderLine purchaseOrderLine : purchaseOrder.getPurchaseOrderLineList()) {
      Product product=purchaseOrderLine.getProduct();
      if (product != null && ((company.getHasInSmForStorableProduct() && product.getProductTypeSelect().equals(IProduct.STORABLE)) || (company.getHasInSmForNonStorableProduct() && !product.getProductTypeSelect().equals(IProduct.STORABLE)))) {
        StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,purchaseOrderLine.getQty(),purchaseOrderLine.getUnit(),purchaseOrderLineService.computeDiscount(purchaseOrderLine),stockMove,purchaseOrderLine.getProductVariant(),2);
        if (stockMoveLine != null) {
          stockMove.getStockMoveLineList().add(stockMoveLine);
        }
      }
    }
    if (stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
      stockMoveService.validate(stockMove);
    }
  }
}"
59171,"public BigDecimal computeDiscount(SalesOrderLine salesOrderLine){
  BigDecimal unitPrice=salesOrderLine.getPrice();
  if (salesOrderLine.getDiscountTypeSelect() == IPriceListLine.AMOUNT_TYPE_FIXED) {
    return unitPrice.add(salesOrderLine.getDiscountAmount());
  }
 else   if (salesOrderLine.getDiscountTypeSelect() == IPriceListLine.AMOUNT_TYPE_PERCENT) {
    return unitPrice.multiply(BigDecimal.ONE.add(salesOrderLine.getDiscountAmount().divide(new BigDecimal(100))));
  }
  return unitPrice;
}","public BigDecimal computeDiscount(SalesOrderLine salesOrderLine){
  return priceListService.computeDiscount(salesOrderLine.getPrice(),salesOrderLine.getDiscountTypeSelect(),salesOrderLine.getDiscountAmount());
}"
59172,"/** 
 * Méthode permettant de créer un StockMove à partir d'un SalesOrder.
 * @param salesOrder l'objet salesOrder
 * @throws AxelorException Aucune séquence de StockMove (Livraison) n'a été configurée
 */
public void createStocksMovesFromSalesOrder(SalesOrder salesOrder) throws AxelorException {
  if (salesOrder.getSalesOrderLineList() != null && salesOrder.getCompany() != null) {
    Company company=salesOrder.getCompany();
    Location toLocation=Location.all().filter(""String_Node_Str"",company,ILocation.EXTERNAL).fetchOne();
    if (toLocation == null) {
      toLocation=company.getCustomerVirtualLocation();
    }
    if (toLocation == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),company.getName()),IException.CONFIGURATION_ERROR);
    }
    StockMove stockMove=stockMoveService.createStockMove(salesOrder.getDeliveryAddress(),company,salesOrder.getClientPartner(),salesOrder.getLocation(),toLocation);
    stockMove.setStockMoveLineList(new ArrayList<StockMoveLine>());
    for (    SalesOrderLine salesOrderLine : salesOrder.getSalesOrderLineList()) {
      Product product=salesOrderLine.getProduct();
      if (product != null && ((company.getHasOutSmForStorableProduct() && product.getProductTypeSelect().equals(IProduct.STORABLE)) || (company.getHasOutSmForNonStorableProduct() && !product.getProductTypeSelect().equals(IProduct.STORABLE)))) {
        StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,salesOrderLine.getQty(),salesOrderLine.getUnit(),salesOrderLine.getPrice(),stockMove,salesOrderLine.getProductVariant(),1);
        if (stockMoveLine != null) {
          stockMove.getStockMoveLineList().add(stockMoveLine);
        }
      }
    }
    if (stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
      stockMoveService.validate(stockMove);
    }
  }
}","/** 
 * Méthode permettant de créer un StockMove à partir d'un SalesOrder.
 * @param salesOrder l'objet salesOrder
 * @throws AxelorException Aucune séquence de StockMove (Livraison) n'a été configurée
 */
public void createStocksMovesFromSalesOrder(SalesOrder salesOrder) throws AxelorException {
  if (salesOrder.getSalesOrderLineList() != null && salesOrder.getCompany() != null) {
    Company company=salesOrder.getCompany();
    Location toLocation=Location.all().filter(""String_Node_Str"",company,ILocation.EXTERNAL).fetchOne();
    if (toLocation == null) {
      toLocation=company.getCustomerVirtualLocation();
    }
    if (toLocation == null) {
      throw new AxelorException(String.format(""String_Node_Str"",GeneralService.getExceptionAccountingMsg(),company.getName()),IException.CONFIGURATION_ERROR);
    }
    StockMove stockMove=stockMoveService.createStockMove(salesOrder.getDeliveryAddress(),company,salesOrder.getClientPartner(),salesOrder.getLocation(),toLocation);
    stockMove.setStockMoveLineList(new ArrayList<StockMoveLine>());
    for (    SalesOrderLine salesOrderLine : salesOrder.getSalesOrderLineList()) {
      Product product=salesOrderLine.getProduct();
      if (product != null && ((company.getHasOutSmForStorableProduct() && product.getProductTypeSelect().equals(IProduct.STORABLE)) || (company.getHasOutSmForNonStorableProduct() && !product.getProductTypeSelect().equals(IProduct.STORABLE)))) {
        StockMoveLine stockMoveLine=stockMoveLineService.createStockMoveLine(product,salesOrderLine.getQty(),salesOrderLine.getUnit(),salesOrderLineService.computeDiscount(salesOrderLine),stockMove,salesOrderLine.getProductVariant(),1);
        if (stockMoveLine != null) {
          stockMove.getStockMoveLineList().add(stockMoveLine);
        }
      }
    }
    if (stockMove.getStockMoveLineList() != null && !stockMove.getStockMoveLineList().isEmpty()) {
      stockMoveService.validate(stockMove);
    }
  }
}"
59173,"public void generateInvoice(ActionRequest request,ActionResponse response){
  StockMove stockMove=request.getContext().asType(StockMove.class);
  Invoice invoice=null;
  int numInvoice=0;
  try {
    stockMove=StockMove.find(stockMove.getId());
    if (stockMove.getSalesOrder() != null) {
      invoice=stockMoveInvoiceService.createInvoiceFromSalesOrder(stockMove,stockMove.getSalesOrder());
      if (invoice != null)       numInvoice++;
    }
    if (stockMove.getPurchaseOrder() != null) {
      invoice=stockMoveInvoiceService.createInvoiceFromPurchaseOrder(stockMove,stockMove.getPurchaseOrder());
      if (invoice != null)       numInvoice++;
    }
    if (numInvoice > 0) {
      response.setReload(true);
      if (numInvoice == 1)       response.setFlash(""String_Node_Str"");
 else       response.setFlash(numInvoice + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}","public void generateInvoice(ActionRequest request,ActionResponse response){
  StockMove stockMove=request.getContext().asType(StockMove.class);
  Invoice invoice=null;
  try {
    stockMove=StockMove.find(stockMove.getId());
    if (stockMove.getSalesOrder() != null) {
      invoice=stockMoveInvoiceService.createInvoiceFromSalesOrder(stockMove,stockMove.getSalesOrder());
    }
    if (stockMove.getPurchaseOrder() != null) {
      invoice=stockMoveInvoiceService.createInvoiceFromPurchaseOrder(stockMove,stockMove.getPurchaseOrder());
    }
    if (invoice != null) {
      response.setReload(true);
      response.setFlash(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}"
59174,"public Task createTask(SalesOrderLine salesOrderLine) throws AxelorException {
  Task task=new Task();
  SalesOrder salesOrder=salesOrderLine.getSalesOrder();
  Project project=salesOrder.getProject();
  task.setProject(project);
  task.setSalesOrderLine(salesOrderLine);
  task.setProduct(salesOrderLine.getProduct());
  task.setQty(salesOrderLine.getQty());
  task.setPrice(salesOrderLine.getPrice());
  task.setName(salesOrderLine.getProductName());
  task.setDescription(salesOrderLine.getDescription());
  task.setStartDateT(todayTime);
  task.setIsTimesheetAffected(true);
  task.setIsToInvoice(salesOrderLine.getIsToInvoice());
  task.setInvoicingDate(salesOrderLine.getInvoicingDate());
  task.setStatusSelect(ITask.STATUS_DRAFT);
  task.setAmountToInvoice(currencyService.getAmountCurrencyConverted(salesOrder.getCurrency(),project.getCompany().getCurrency(),salesOrderLine.getAmountRemainingToBeInvoiced(),todayTime.toLocalDate()));
  task.setEstimatedAmount(salesOrderLine.getCompanyExTaxTotal());
  return task;
}","public Task createTask(SalesOrderLine salesOrderLine) throws AxelorException {
  Task task=new Task();
  SalesOrder salesOrder=salesOrderLine.getSalesOrder();
  Project project=salesOrder.getProject();
  task.setProject(project);
  task.setSalesOrderLine(salesOrderLine);
  task.setProduct(salesOrderLine.getProduct());
  task.setQty(salesOrderLine.getQty());
  task.setPrice(this.computeDiscount(salesOrderLine));
  task.setName(salesOrderLine.getProductName());
  task.setDescription(salesOrderLine.getDescription());
  task.setStartDateT(todayTime);
  task.setIsTimesheetAffected(true);
  task.setIsToInvoice(salesOrderLine.getIsToInvoice());
  task.setInvoicingDate(salesOrderLine.getInvoicingDate());
  task.setStatusSelect(ITask.STATUS_DRAFT);
  task.setAmountToInvoice(currencyService.getAmountCurrencyConverted(salesOrder.getCurrency(),project.getCompany().getCurrency(),salesOrderLine.getAmountRemainingToBeInvoiced(),todayTime.toLocalDate()));
  task.setEstimatedAmount(salesOrderLine.getCompanyExTaxTotal());
  return task;
}"
59175,"public void createTaskByLines(ActionRequest request,ActionResponse response) throws AxelorException {
  SalesOrder salesOrder=request.getContext().asType(SalesOrder.class);
  if (salesOrder != null) {
    taskService.get().createTasks(salesOrder);
  }
}","public void createTaskByLines(ActionRequest request,ActionResponse response) throws AxelorException {
  SalesOrder salesOrder=request.getContext().asType(SalesOrder.class);
  taskService.get().createTasks(salesOrder);
}"
59176,"public PriceListLine getPriceListLine(PurchaseOrderLine purchaseOrderLine,PriceList priceList){
  return priceListService.getPriceListLine(purchaseOrderLine.getProduct(),priceList);
}","public PriceListLine getPriceListLine(PurchaseOrderLine purchaseOrderLine,PriceList priceList){
  return priceListService.getPriceListLine(purchaseOrderLine.getProduct(),purchaseOrderLine.getQty(),priceList);
}"
59177,"public PriceListLine getPriceListLine(SalesOrderLine salesOrderLine,PriceList priceList){
  return priceListService.getPriceListLine(salesOrderLine.getProduct(),priceList);
}","public PriceListLine getPriceListLine(SalesOrderLine salesOrderLine,PriceList priceList){
  return priceListService.getPriceListLine(salesOrderLine.getProduct(),salesOrderLine.getQty(),priceList);
}"
59178,"public PriceListLine getPriceListLine(SalesOrderSubLine salesOrderSubLine,PriceList priceList){
  return priceListService.getPriceListLine(salesOrderSubLine.getProduct(),priceList);
}","public PriceListLine getPriceListLine(SalesOrderSubLine salesOrderSubLine,PriceList priceList){
  return priceListService.getPriceListLine(salesOrderSubLine.getProduct(),salesOrderSubLine.getQty(),priceList);
}"
59179,"public PriceListLine getPriceListLine(Product product,PriceList priceList){
  PriceListLine priceListLine=null;
  if (product != null && priceList != null) {
    priceListLine=this.getPriceListLine(product,priceList.getPriceListLineList());
    if (priceListLine == null) {
      priceListLine=this.getPriceListLine(product.getProductCategory(),priceList.getPriceListLineList());
    }
  }
  return priceListLine;
}","public PriceListLine getPriceListLine(Product product,BigDecimal qty,PriceList priceList){
  PriceListLine priceListLine=null;
  if (product != null && priceList != null) {
    priceListLine=PriceListLine.all().filter(""String_Node_Str"",product,qty).fetchOne();
    if (priceListLine == null && product.getProductCategory() != null) {
      priceListLine=PriceListLine.all().filter(""String_Node_Str"",product.getProductCategory(),qty).fetchOne();
    }
  }
  return priceListLine;
}"
59180,"public PurchaseOrder _computePurchaseOrderLines(PurchaseOrder purchaseOrder){
  if (purchaseOrder.getPurchaseOrderLineList() != null) {
    for (    PurchaseOrderLine purchaseOrderLine : purchaseOrder.getPurchaseOrderLineList()) {
      purchaseOrderLine.setExTaxTotal(purchaseOrderLineService.computePurchaseOrderLine(purchaseOrderLine));
    }
  }
  return purchaseOrder;
}","public PurchaseOrder _computePurchaseOrderLines(PurchaseOrder purchaseOrder) throws AxelorException {
  if (purchaseOrder.getPurchaseOrderLineList() != null) {
    for (    PurchaseOrderLine purchaseOrderLine : purchaseOrder.getPurchaseOrderLineList()) {
      purchaseOrderLine.setExTaxTotal(purchaseOrderLineService.computePurchaseOrderLine(purchaseOrderLine));
      purchaseOrderLine.setCompanyExTaxTotal(purchaseOrderLineService.getCompanyExTaxTotal(purchaseOrderLine.getExTaxTotal(),purchaseOrder));
    }
  }
  return purchaseOrder;
}"
59181,"public SalesOrder _computeSalesOrderLines(SalesOrder salesOrder){
  if (salesOrder.getSalesOrderLineList() != null) {
    for (    SalesOrderLine salesOrderLine : salesOrder.getSalesOrderLineList()) {
      salesOrderLine.setExTaxTotal(salesOrderLineService.computeSalesOrderLine(salesOrderLine));
    }
  }
  return salesOrder;
}","public SalesOrder _computeSalesOrderLines(SalesOrder salesOrder) throws AxelorException {
  if (salesOrder.getSalesOrderLineList() != null) {
    for (    SalesOrderLine salesOrderLine : salesOrder.getSalesOrderLineList()) {
      salesOrderLine.setExTaxTotal(salesOrderLineService.computeSalesOrderLine(salesOrderLine));
      salesOrderLine.setCompanyExTaxTotal(salesOrderLineService.getCompanyExTaxTotal(salesOrderLine.getExTaxTotal(),salesOrder));
    }
  }
  return salesOrder;
}"
59182,"private Message createMessage(String content,EmailAddress fromEmailAddress,UserInfo recipientUserInfo,String relatedTo1Select,int relatedTo1SelectId,String relatedTo2Select,int relatedTo2SelectId,LocalDateTime sendedDate,UserInfo senderUserInfo,boolean sentByEmail,int statusSelect,String subject,int typeSelect,List<EmailAddress> toEmailAddressList,List<EmailAddress> ccEmailAddressList,List<EmailAddress> bccEmailAddressList,MailAccount mailAccount,String filePath){
  Message message=new Message();
  message.setContent(content);
  message.setFromEmailAddress(fromEmailAddress);
  message.setRecipientUserInfo(recipientUserInfo);
  message.setRelatedTo1Select(relatedTo1Select);
  message.setRelatedTo1SelectId(relatedTo1SelectId);
  message.setRelatedTo2Select(relatedTo2Select);
  message.setRelatedTo2SelectId(relatedTo2SelectId);
  message.setSendedDateT(sendedDate);
  message.setSenderUserInfo(senderUserInfo);
  message.setSentByEmail(sentByEmail);
  message.setStatusSelect(statusSelect);
  message.setSubject(subject);
  message.setTypeSelect(typeSelect);
  Set<EmailAddress> toEmailAddressSet=Sets.newHashSet();
  if (toEmailAddressList != null) {
    toEmailAddressSet.addAll(toEmailAddressList);
  }
  message.setToEmailAddressSet(toEmailAddressSet);
  Set<EmailAddress> ccEmailAddressSet=Sets.newHashSet();
  if (ccEmailAddressList != null) {
    ccEmailAddressSet.addAll(ccEmailAddressList);
  }
  message.setCcEmailAddressSet(ccEmailAddressSet);
  Set<EmailAddress> bccEmailAddressSet=Sets.newHashSet();
  if (bccEmailAddressList != null) {
    bccEmailAddressSet.addAll(bccEmailAddressList);
  }
  message.setBccEmailAddressSet(ccEmailAddressSet);
  message.setMailAccount(mailAccount);
  message.setFilePath(filePath);
  return message;
}","private Message createMessage(String content,EmailAddress fromEmailAddress,UserInfo recipientUserInfo,String relatedTo1Select,int relatedTo1SelectId,String relatedTo2Select,int relatedTo2SelectId,LocalDateTime sendedDate,UserInfo senderUserInfo,boolean sentByEmail,int statusSelect,String subject,int typeSelect,List<EmailAddress> toEmailAddressList,List<EmailAddress> ccEmailAddressList,List<EmailAddress> bccEmailAddressList,MailAccount mailAccount,String filePath){
  Message message=new Message();
  message.setContent(content);
  message.setFromEmailAddress(fromEmailAddress);
  message.setRecipientUserInfo(recipientUserInfo);
  message.setRelatedTo1Select(relatedTo1Select);
  message.setRelatedTo1SelectId(relatedTo1SelectId);
  message.setRelatedTo2Select(relatedTo2Select);
  message.setRelatedTo2SelectId(relatedTo2SelectId);
  message.setSendedDateT(sendedDate);
  message.setSenderUserInfo(senderUserInfo);
  message.setSentByEmail(sentByEmail);
  message.setStatusSelect(statusSelect);
  message.setSubject(subject);
  message.setTypeSelect(typeSelect);
  Set<EmailAddress> toEmailAddressSet=Sets.newHashSet();
  if (toEmailAddressList != null) {
    toEmailAddressSet.addAll(toEmailAddressList);
  }
  message.setToEmailAddressSet(toEmailAddressSet);
  Set<EmailAddress> ccEmailAddressSet=Sets.newHashSet();
  if (ccEmailAddressList != null) {
    ccEmailAddressSet.addAll(ccEmailAddressList);
  }
  message.setCcEmailAddressSet(ccEmailAddressSet);
  Set<EmailAddress> bccEmailAddressSet=Sets.newHashSet();
  if (bccEmailAddressList != null) {
    bccEmailAddressSet.addAll(bccEmailAddressList);
  }
  message.setBccEmailAddressSet(bccEmailAddressSet);
  message.setMailAccount(mailAccount);
  message.setFilePath(filePath);
  return message;
}"
59183,"@Inject private AxelorSettings(){
  InputStream is=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"");
  if (is == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  properties=new Properties();
  try {
    EntityManagerFactory emf=JPA.em().getEntityManagerFactory();
    properties.load(is);
    properties.put(""String_Node_Str"",emf.getProperties().get(""String_Node_Str""));
    properties.put(""String_Node_Str"",emf.getProperties().get(""String_Node_Str""));
    properties.put(""String_Node_Str"",emf.getProperties().get(""String_Node_Str""));
    String dataSource=String.format(""String_Node_Str"",properties.get(""String_Node_Str""),properties.get(""String_Node_Str""),properties.get(""String_Node_Str""));
    properties.put(""String_Node_Str"",dataSource);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","@Inject private AxelorSettings(){
  InputStream is=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"");
  if (is == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  properties=new Properties();
  try {
    EntityManagerFactory emf=JPA.em().getEntityManagerFactory();
    properties.load(is);
    properties.put(""String_Node_Str"",emf.getProperties().get(""String_Node_Str""));
    properties.put(""String_Node_Str"",emf.getProperties().get(""String_Node_Str""));
    InputStream res=Thread.currentThread().getContextClassLoader().getResourceAsStream(""String_Node_Str"");
    String text=CharStreams.toString(new InputStreamReader(res,Charsets.UTF_8));
    Pattern pat=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
    Matcher mat=pat.matcher(text);
    while (mat.find()) {
      properties.put(""String_Node_Str"",mat.group(1));
    }
    String dataSource=String.format(""String_Node_Str"",properties.get(""String_Node_Str""),properties.get(""String_Node_Str""),properties.get(""String_Node_Str""));
    properties.put(""String_Node_Str"",dataSource);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}"
59184,"@SuppressWarnings(""String_Node_Str"") public int useExcessPaymentWithAmountConsolidated(List<MoveLine> creditMoveLines,BigDecimal remainingPaidAmount,Move move,int moveLineNo,Partner partner,Company company,Account account,LocalDate date,LocalDate dueDate) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  int moveLineNo2=moveLineNo;
  BigDecimal remainingPaidAmount2=remainingPaidAmount;
  List<Reconcile> reconcileList=new ArrayList<Reconcile>();
  int i=creditMoveLines.size();
  if (i != 0) {
    Query q=JPA.em().createQuery(""String_Node_Str"" + ""String_Node_Str"");
    q.setParameter(1,creditMoveLines);
    List<Map<Account,BigDecimal>> allMap=new ArrayList<Map<Account,BigDecimal>>();
    allMap=q.getResultList();
    for (    Map<Account,BigDecimal> map : allMap) {
      Account accountMap=(Account)map.values().toArray()[1];
      BigDecimal amountMap=(BigDecimal)map.values().toArray()[0];
      BigDecimal amountDebit=amountMap.min(remainingPaidAmount2);
      if (amountDebit.compareTo(BigDecimal.ZERO) > 0) {
        MoveLine debitMoveLine=mls.createMoveLine(move,partner,accountMap,amountDebit,true,false,date,dueDate,moveLineNo2,false,false,false,null);
        move.getMoveLineList().add(debitMoveLine);
        moveLineNo2++;
        for (        MoveLine creditMoveLine : creditMoveLines) {
          if (creditMoveLine.getAccount().equals(accountMap)) {
            Reconcile reconcile=null;
            i--;
            if (amountDebit.compareTo(BigDecimal.ZERO) < 0) {
              break;
            }
            BigDecimal amountToPay=amountDebit.min(creditMoveLine.getAmountRemaining());
            if (i == 0) {
              reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,true,false,false);
            }
 else {
              reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,false,false,false);
            }
            remainingPaidAmount2=remainingPaidAmount2.subtract(amountToPay);
            amountDebit=amountDebit.subtract(amountToPay);
            reconcileList.add(reconcile);
          }
        }
      }
    }
    for (    Reconcile reconcile : reconcileList) {
      rs.confirmReconcile(reconcile);
    }
  }
  if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) > 0) {
    MoveLine debitmoveLine=mls.createMoveLine(move,partner,account,remainingPaidAmount2,true,false,date,dueDate,moveLineNo2,false,false,false,null);
    move.getMoveLineList().add(debitmoveLine);
    moveLineNo2++;
  }
  LOG.debug(""String_Node_Str"");
  return moveLineNo2;
}","@SuppressWarnings(""String_Node_Str"") public int useExcessPaymentWithAmountConsolidated(List<MoveLine> creditMoveLines,BigDecimal remainingPaidAmount,Move move,int moveLineNo,Partner partner,Company company,Account account,LocalDate date,LocalDate dueDate) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  int moveLineNo2=moveLineNo;
  BigDecimal remainingPaidAmount2=remainingPaidAmount;
  List<Reconcile> reconcileList=new ArrayList<Reconcile>();
  int i=creditMoveLines.size();
  if (i != 0) {
    Query q=JPA.em().createQuery(""String_Node_Str"" + ""String_Node_Str"");
    q.setParameter(1,creditMoveLines);
    List<Map<Account,BigDecimal>> allMap=new ArrayList<Map<Account,BigDecimal>>();
    allMap=q.getResultList();
    for (    Map<Account,BigDecimal> map : allMap) {
      Account accountMap=(Account)map.values().toArray()[1];
      BigDecimal amountMap=(BigDecimal)map.values().toArray()[0];
      BigDecimal amountDebit=amountMap.min(remainingPaidAmount2);
      if (amountDebit.compareTo(BigDecimal.ZERO) > 0) {
        MoveLine debitMoveLine=mls.createMoveLine(move,partner,accountMap,amountDebit,true,false,date,dueDate,moveLineNo2,false,false,false,null);
        move.getMoveLineList().add(debitMoveLine);
        moveLineNo2++;
        for (        MoveLine creditMoveLine : creditMoveLines) {
          if (creditMoveLine.getAccount().equals(accountMap)) {
            Reconcile reconcile=null;
            i--;
            if (amountDebit.compareTo(BigDecimal.ZERO) <= 0) {
              break;
            }
            BigDecimal amountToPay=amountDebit.min(creditMoveLine.getAmountRemaining());
            if (i == 0) {
              reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,true,false,false);
            }
 else {
              reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,false,false,false);
            }
            remainingPaidAmount2=remainingPaidAmount2.subtract(amountToPay);
            amountDebit=amountDebit.subtract(amountToPay);
            reconcileList.add(reconcile);
          }
        }
      }
    }
    for (    Reconcile reconcile : reconcileList) {
      rs.confirmReconcile(reconcile);
    }
  }
  if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) > 0) {
    MoveLine debitmoveLine=mls.createMoveLine(move,partner,account,remainingPaidAmount2,true,false,date,dueDate,moveLineNo2,false,false,false,null);
    move.getMoveLineList().add(debitmoveLine);
    moveLineNo2++;
  }
  LOG.debug(""String_Node_Str"");
  return moveLineNo2;
}"
59185,"@Deprecated public int useExcessPaymentWithAmount(List<MoveLine> creditMoveLines,BigDecimal remainingPaidAmount,Move move,int moveLineNo,Partner partner,Company company,Account account) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  int moveLineNo2=moveLineNo;
  BigDecimal remainingPaidAmount2=remainingPaidAmount;
  List<Reconcile> reconcileList=new ArrayList<Reconcile>();
  int i=creditMoveLines.size();
  for (  MoveLine creditMoveLine : creditMoveLines) {
    i--;
    BigDecimal amountRemaining=creditMoveLine.getAmountRemaining();
    if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) < 0) {
      break;
    }
    BigDecimal amountToPay=remainingPaidAmount2.min(amountRemaining);
    MoveLine debitMoveLine=mls.createMoveLine(move,creditMoveLine.getPartner(),creditMoveLine.getAccount(),amountToPay,true,false,this.date,moveLineNo2,false,false,false,creditMoveLine.getName());
    move.getMoveLineList().add(debitMoveLine);
    moveLineNo2++;
    Reconcile reconcile=null;
    if (i == 0) {
      reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,true,false,false);
    }
 else {
      reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,false,false,false);
    }
    reconcileList.add(reconcile);
    remainingPaidAmount2=remainingPaidAmount2.subtract(amountToPay);
  }
  for (  Reconcile reconcile : reconcileList) {
    rs.confirmReconcile(reconcile);
  }
  if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) > 0) {
    MoveLine debitmoveLine=mls.createMoveLine(move,partner,account,remainingPaidAmount2,true,false,this.date,moveLineNo2,false,false,false,null);
    move.getMoveLineList().add(debitmoveLine);
    moveLineNo2++;
    rs.balanceCredit(debitmoveLine,company,true);
  }
  LOG.debug(""String_Node_Str"");
  return moveLineNo2;
}","@Deprecated public int useExcessPaymentWithAmount(List<MoveLine> creditMoveLines,BigDecimal remainingPaidAmount,Move move,int moveLineNo,Partner partner,Company company,Account account) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  int moveLineNo2=moveLineNo;
  BigDecimal remainingPaidAmount2=remainingPaidAmount;
  List<Reconcile> reconcileList=new ArrayList<Reconcile>();
  int i=creditMoveLines.size();
  for (  MoveLine creditMoveLine : creditMoveLines) {
    i--;
    BigDecimal amountRemaining=creditMoveLine.getAmountRemaining();
    if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) <= 0) {
      break;
    }
    BigDecimal amountToPay=remainingPaidAmount2.min(amountRemaining);
    MoveLine debitMoveLine=mls.createMoveLine(move,creditMoveLine.getPartner(),creditMoveLine.getAccount(),amountToPay,true,false,this.date,moveLineNo2,false,false,false,creditMoveLine.getName());
    move.getMoveLineList().add(debitMoveLine);
    moveLineNo2++;
    Reconcile reconcile=null;
    if (i == 0) {
      reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,true,false,false);
    }
 else {
      reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,false,false,false);
    }
    reconcileList.add(reconcile);
    remainingPaidAmount2=remainingPaidAmount2.subtract(amountToPay);
  }
  for (  Reconcile reconcile : reconcileList) {
    rs.confirmReconcile(reconcile);
  }
  if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) > 0) {
    MoveLine debitmoveLine=mls.createMoveLine(move,partner,account,remainingPaidAmount2,true,false,this.date,moveLineNo2,false,false,false,null);
    move.getMoveLineList().add(debitmoveLine);
    moveLineNo2++;
    rs.balanceCredit(debitmoveLine,company,true);
  }
  LOG.debug(""String_Node_Str"");
  return moveLineNo2;
}"
59186,"/** 
 * Il crée des écritures de trop percu avec des montants exacts pour chaque débitMoveLines  avec le compte du débitMoveLines. A la fin, si il reste un trop-percu alors créer un trop-perçu classique.
 * @param debitMoveLines Les lignes d'écriture à payer
 * @param remainingPaidAmount Le montant restant à payer
 * @param move	Une écriture
 * @param moveLineNo Un numéro de ligne d'écriture
 * @return 
 * @throws AxelorException
 */
public int createExcessPaymentWithAmount(List<MoveLine> debitMoveLines,BigDecimal remainingPaidAmount,Move move,int moveLineNo,Partner partner,Company company,PaymentInvoiceToPay paymentInvoiceToPay,Account account,LocalDate paymentDate,boolean updateCustomerAccount) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  int moveLineNo2=moveLineNo;
  BigDecimal remainingPaidAmount2=remainingPaidAmount;
  List<Reconcile> reconcileList=new ArrayList<Reconcile>();
  int i=debitMoveLines.size();
  for (  MoveLine debitMoveLine : debitMoveLines) {
    i--;
    BigDecimal amountRemaining=debitMoveLine.getAmountRemaining();
    if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) < 0) {
      break;
    }
    BigDecimal amountToPay=remainingPaidAmount2.min(amountRemaining);
    String invoiceName=""String_Node_Str"";
    if (debitMoveLine.getMove().getInvoice() != null) {
      invoiceName=debitMoveLine.getMove().getInvoice().getInvoiceId();
    }
 else {
      invoiceName=paymentInvoiceToPay.getPaymentVoucher().getRef();
    }
    MoveLine creditMoveLine=mls.createMoveLine(move,debitMoveLine.getPartner(),debitMoveLine.getAccount(),amountToPay,false,false,this.date,moveLineNo2,false,false,false,invoiceName);
    move.getMoveLineList().add(creditMoveLine);
    if (paymentInvoiceToPay != null) {
      creditMoveLine.setPaymentScheduleLine(paymentInvoiceToPay.getMoveLine().getPaymentScheduleLine());
      paymentInvoiceToPay.setMoveLineGenerated(creditMoveLine);
    }
    moveLineNo2++;
    Reconcile reconcile=null;
    if (i == 0) {
      LOG.debug(""String_Node_Str"");
      if (creditMoveLine.getPaymentScheduleLine() != null && !pss.isLastSchedule(creditMoveLine.getPaymentScheduleLine())) {
        reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,false,false,false);
      }
 else {
        reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,true,false,false);
      }
    }
 else {
      reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,false,false,false);
    }
    reconcileList.add(reconcile);
    remainingPaidAmount2=remainingPaidAmount2.subtract(amountRemaining);
  }
  for (  Reconcile reconcile : reconcileList) {
    rs.confirmReconcile(reconcile,updateCustomerAccount);
  }
  if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) > 0) {
    MoveLine moveLine=mls.createMoveLine(move,partner,account,remainingPaidAmount2,false,false,this.date,moveLineNo2,false,false,false,null);
    move.getMoveLineList().add(moveLine);
    moveLineNo2++;
    rs.balanceCredit(moveLine,company,updateCustomerAccount);
  }
  LOG.debug(""String_Node_Str"");
  return moveLineNo2;
}","/** 
 * Il crée des écritures de trop percu avec des montants exacts pour chaque débitMoveLines  avec le compte du débitMoveLines. A la fin, si il reste un trop-percu alors créer un trop-perçu classique.
 * @param debitMoveLines Les lignes d'écriture à payer
 * @param remainingPaidAmount Le montant restant à payer
 * @param move	Une écriture
 * @param moveLineNo Un numéro de ligne d'écriture
 * @return 
 * @throws AxelorException
 */
public int createExcessPaymentWithAmount(List<MoveLine> debitMoveLines,BigDecimal remainingPaidAmount,Move move,int moveLineNo,Partner partner,Company company,PaymentInvoiceToPay paymentInvoiceToPay,Account account,LocalDate paymentDate,boolean updateCustomerAccount) throws AxelorException {
  LOG.debug(""String_Node_Str"");
  int moveLineNo2=moveLineNo;
  BigDecimal remainingPaidAmount2=remainingPaidAmount;
  List<Reconcile> reconcileList=new ArrayList<Reconcile>();
  int i=debitMoveLines.size();
  for (  MoveLine debitMoveLine : debitMoveLines) {
    i--;
    BigDecimal amountRemaining=debitMoveLine.getAmountRemaining();
    if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) <= 0) {
      break;
    }
    BigDecimal amountToPay=remainingPaidAmount2.min(amountRemaining);
    String invoiceName=""String_Node_Str"";
    if (debitMoveLine.getMove().getInvoice() != null) {
      invoiceName=debitMoveLine.getMove().getInvoice().getInvoiceId();
    }
 else {
      invoiceName=paymentInvoiceToPay.getPaymentVoucher().getRef();
    }
    MoveLine creditMoveLine=mls.createMoveLine(move,debitMoveLine.getPartner(),debitMoveLine.getAccount(),amountToPay,false,false,this.date,moveLineNo2,false,false,false,invoiceName);
    move.getMoveLineList().add(creditMoveLine);
    if (paymentInvoiceToPay != null) {
      creditMoveLine.setPaymentScheduleLine(paymentInvoiceToPay.getMoveLine().getPaymentScheduleLine());
      paymentInvoiceToPay.setMoveLineGenerated(creditMoveLine);
    }
    moveLineNo2++;
    Reconcile reconcile=null;
    if (i == 0) {
      LOG.debug(""String_Node_Str"");
      if (creditMoveLine.getPaymentScheduleLine() != null && !pss.isLastSchedule(creditMoveLine.getPaymentScheduleLine())) {
        reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,false,false,false);
      }
 else {
        reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,true,false,false);
      }
    }
 else {
      reconcile=rcs.createGenericReconcile(debitMoveLine,creditMoveLine,amountToPay,false,false,false);
    }
    reconcileList.add(reconcile);
    remainingPaidAmount2=remainingPaidAmount2.subtract(amountRemaining);
  }
  for (  Reconcile reconcile : reconcileList) {
    rs.confirmReconcile(reconcile,updateCustomerAccount);
  }
  if (remainingPaidAmount2.compareTo(BigDecimal.ZERO) > 0) {
    MoveLine moveLine=mls.createMoveLine(move,partner,account,remainingPaidAmount2,false,false,this.date,moveLineNo2,false,false,false,null);
    move.getMoveLineList().add(moveLine);
    moveLineNo2++;
    rs.balanceCredit(moveLine,company,updateCustomerAccount);
  }
  LOG.debug(""String_Node_Str"");
  return moveLineNo2;
}"
59187,"public void createsTargets(TargetConfiguration targetConfiguration) throws AxelorException {
  if (targetConfiguration.getPeriodTypeSelect() == ITarget.NONE) {
    Target target=this.createTarget(targetConfiguration,targetConfiguration.getFromDate(),targetConfiguration.getToDate());
    this.update(target);
  }
 else {
    LocalDate oldDate=targetConfiguration.getFromDate();
    for (LocalDate date=oldDate; date.isBefore(targetConfiguration.getToDate()) || date.isEqual(targetConfiguration.getToDate()); date=this.getNextDate(targetConfiguration.getPeriodTypeSelect(),date)) {
      Target target2=Target.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",targetConfiguration.getUserInfo(),targetConfiguration.getTeam(),targetConfiguration.getPeriodTypeSelect(),targetConfiguration.getFromDate(),targetConfiguration.getToDate(),targetConfiguration.getCallEmittedNumber(),targetConfiguration.getMeetingNumber(),targetConfiguration.getOpportunityAmountEarned().doubleValue(),targetConfiguration.getOpportunityCreatedNumber(),targetConfiguration.getOpportunityCreatedWon()).fetchOne();
      if (target2 == null) {
        Target target=this.createTarget(targetConfiguration,oldDate,date.minusDays(1));
        this.update(target);
        oldDate=date;
      }
 else {
        throw new AxelorException(String.format(""String_Node_Str"",target2.getCode(),targetConfiguration.getCode()),IException.CONFIGURATION_ERROR);
      }
    }
  }
}","public void createsTargets(TargetConfiguration targetConfiguration) throws AxelorException {
  if (targetConfiguration.getPeriodTypeSelect() == ITarget.NONE) {
    Target target=this.createTarget(targetConfiguration,targetConfiguration.getFromDate(),targetConfiguration.getToDate());
    this.update(target);
  }
 else {
    LocalDate oldDate=targetConfiguration.getFromDate();
    for (LocalDate date=oldDate; date.isBefore(targetConfiguration.getToDate()) || date.isEqual(targetConfiguration.getToDate()); date=this.getNextDate(targetConfiguration.getPeriodTypeSelect(),date)) {
      Target target2=Target.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",targetConfiguration.getUserInfo(),targetConfiguration.getTeam(),targetConfiguration.getPeriodTypeSelect(),targetConfiguration.getFromDate(),targetConfiguration.getToDate(),targetConfiguration.getCallEmittedNumber(),targetConfiguration.getMeetingNumber(),targetConfiguration.getOpportunityAmountWon().doubleValue(),targetConfiguration.getOpportunityCreatedNumber(),targetConfiguration.getOpportunityCreatedWon()).fetchOne();
      if (target2 == null) {
        Target target=this.createTarget(targetConfiguration,oldDate,date.minusDays(1));
        this.update(target);
        oldDate=date;
      }
 else {
        throw new AxelorException(String.format(""String_Node_Str"",target2.getCode(),targetConfiguration.getCode()),IException.CONFIGURATION_ERROR);
      }
    }
  }
}"
59188,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void update(Target target){
  UserInfo userInfo=target.getUserInfo();
  Team team=target.getTeam();
  LocalDate fromDate=target.getFromDate();
  LocalDate toDate=target.getToDate();
  LocalDateTime fromDateTime=new LocalDateTime(fromDate.getYear(),fromDate.getMonthOfYear(),fromDate.getDayOfMonth(),0,0);
  LocalDateTime toDateTime=new LocalDateTime(toDate.getYear(),toDate.getMonthOfYear(),toDate.getDayOfMonth(),23,59);
  if (userInfo != null) {
    Query q=JPA.em().createQuery(""String_Node_Str"");
    q.setParameter(1,userInfo);
    q.setParameter(2,fromDateTime);
    q.setParameter(3,toDateTime);
    BigDecimal opportunityAmountEarned=(BigDecimal)q.getSingleResult();
    Long callEmittedNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setCallEmittedNumber(callEmittedNumber.intValue());
    Long meetingNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setMeetingNumber(meetingNumber.intValue());
    target.setOpportunityAmountEarned(opportunityAmountEarned);
    Long opportunityCreatedNumber=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedNumber(opportunityCreatedNumber.intValue());
    Long opportunityCreatedWon=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedWon(opportunityCreatedWon.intValue());
  }
 else   if (team != null) {
    Query q=JPA.em().createQuery(""String_Node_Str"");
    q.setParameter(1,team);
    q.setParameter(2,fromDateTime);
    q.setParameter(3,toDateTime);
    BigDecimal opportunityAmountEarned=(BigDecimal)q.getResultList();
    Long callEmittedNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setCallEmittedNumber(callEmittedNumber.intValue());
    Long meetingNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setMeetingNumber(meetingNumber.intValue());
    target.setOpportunityAmountEarned(opportunityAmountEarned);
    Long opportunityCreatedNumber=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedNumber(opportunityCreatedNumber.intValue());
    Long opportunityCreatedWon=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedWon(opportunityCreatedWon.intValue());
  }
  target.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void update(Target target){
  UserInfo userInfo=target.getUserInfo();
  Team team=target.getTeam();
  LocalDate fromDate=target.getFromDate();
  LocalDate toDate=target.getToDate();
  LocalDateTime fromDateTime=new LocalDateTime(fromDate.getYear(),fromDate.getMonthOfYear(),fromDate.getDayOfMonth(),0,0);
  LocalDateTime toDateTime=new LocalDateTime(toDate.getYear(),toDate.getMonthOfYear(),toDate.getDayOfMonth(),23,59);
  if (userInfo != null) {
    Query q=JPA.em().createQuery(""String_Node_Str"");
    q.setParameter(1,userInfo);
    q.setParameter(2,fromDateTime);
    q.setParameter(3,toDateTime);
    BigDecimal opportunityAmountWon=(BigDecimal)q.getSingleResult();
    Long callEmittedNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setCallEmittedNumber(callEmittedNumber.intValue());
    Long meetingNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setMeetingNumber(meetingNumber.intValue());
    target.setOpportunityAmountWon(opportunityAmountWon);
    Long opportunityCreatedNumber=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedNumber(opportunityCreatedNumber.intValue());
    Long opportunityCreatedWon=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedWon(opportunityCreatedWon.intValue());
  }
 else   if (team != null) {
    Query q=JPA.em().createQuery(""String_Node_Str"");
    q.setParameter(1,team);
    q.setParameter(2,fromDateTime);
    q.setParameter(3,toDateTime);
    BigDecimal opportunityAmountWon=(BigDecimal)q.getResultList();
    Long callEmittedNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setCallEmittedNumber(callEmittedNumber.intValue());
    Long meetingNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setMeetingNumber(meetingNumber.intValue());
    target.setOpportunityAmountWon(opportunityAmountWon);
    Long opportunityCreatedNumber=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedNumber(opportunityCreatedNumber.intValue());
    Long opportunityCreatedWon=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedWon(opportunityCreatedWon.intValue());
  }
  target.save();
}"
59189,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public Target createTarget(TargetConfiguration targetConfiguration,LocalDate fromDate,LocalDate toDate){
  Target target=new Target();
  target.setCallEmittedNumberTarget(targetConfiguration.getCallEmittedNumber());
  target.setMeetingNumberTarget(targetConfiguration.getMeetingNumber());
  target.setOpportunityAmountEarnedTarget(targetConfiguration.getOpportunityAmountEarned());
  target.setOpportunityCreatedNumberTarget(target.getOpportunityCreatedNumberTarget());
  target.setOpportunityCreatedWonTarget(target.getOpportunityCreatedWonTarget());
  target.setPeriodTypeSelect(targetConfiguration.getPeriodTypeSelect());
  target.setFromDate(fromDate);
  target.setToDate(toDate);
  target.setUserInfo(targetConfiguration.getUserInfo());
  target.setTeam(targetConfiguration.getTeam());
  target.setName(targetConfiguration.getName());
  target.setCode(targetConfiguration.getCode());
  return target.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public Target createTarget(TargetConfiguration targetConfiguration,LocalDate fromDate,LocalDate toDate){
  Target target=new Target();
  target.setCallEmittedNumberTarget(targetConfiguration.getCallEmittedNumber());
  target.setMeetingNumberTarget(targetConfiguration.getMeetingNumber());
  target.setOpportunityAmountWonTarget(targetConfiguration.getOpportunityAmountWon());
  target.setOpportunityCreatedNumberTarget(target.getOpportunityCreatedNumberTarget());
  target.setOpportunityCreatedWonTarget(target.getOpportunityCreatedWonTarget());
  target.setPeriodTypeSelect(targetConfiguration.getPeriodTypeSelect());
  target.setFromDate(fromDate);
  target.setToDate(toDate);
  target.setUserInfo(targetConfiguration.getUserInfo());
  target.setTeam(targetConfiguration.getTeam());
  target.setName(targetConfiguration.getName());
  target.setCode(targetConfiguration.getCode());
  return target.save();
}"
59190,"public void update(ActionRequest request,ActionResponse response){
  Target target=request.getContext().asType(Target.class);
  try {
    targetService.update(Target.find(target.getId()));
    response.setValue(""String_Node_Str"",target.getOpportunityAmountEarned());
    response.setValue(""String_Node_Str"",target.getOpportunityCreatedNumber());
    response.setValue(""String_Node_Str"",target.getOpportunityCreatedWon());
    response.setValue(""String_Node_Str"",target.getCallEmittedNumber());
    response.setValue(""String_Node_Str"",target.getMeetingNumber());
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}","public void update(ActionRequest request,ActionResponse response){
  Target target=request.getContext().asType(Target.class);
  try {
    targetService.update(Target.find(target.getId()));
    response.setValue(""String_Node_Str"",target.getOpportunityAmountWon());
    response.setValue(""String_Node_Str"",target.getOpportunityCreatedNumber());
    response.setValue(""String_Node_Str"",target.getOpportunityCreatedWon());
    response.setValue(""String_Node_Str"",target.getCallEmittedNumber());
    response.setValue(""String_Node_Str"",target.getMeetingNumber());
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}"
59191,"/** 
 * Fonction permettant de calculer le solde exigible d'un contrat Calcul du solde exigible du contrat : Montant Total des échéances (des factures et des échéanciers) échues (date du jour >= date de l’échéance) - Montant Total payé sur l’échéancier
 * @param contractLine Un contrat
 * @return Le solde exigible
 */
public BigDecimal getBalanceDue(Partner partner,Company company){
  LOG.debug(""String_Node_Str"");
  Query query=JPA.em().createNativeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setParameter(1,today.toDate(),TemporalType.DATE).setParameter(2,partner).setParameter(3,company);
  BigDecimal balance=(BigDecimal)query.getSingleResult();
  if (balance == null) {
    balance=BigDecimal.ZERO;
  }
  LOG.debug(""String_Node_Str"",balance);
  LOG.debug(""String_Node_Str"");
  return balance;
}","/** 
 * Fonction permettant de calculer le solde exigible d'un contrat Calcul du solde exigible du contrat : Montant Total des échéances (des factures et des échéanciers) échues (date du jour >= date de l’échéance) - Montant Total payé sur l’échéancier
 * @param contractLine Un contrat
 * @return Le solde exigible
 */
public BigDecimal getBalanceDue(Partner partner,Company company){
  LOG.debug(""String_Node_Str"",partner.getName(),company.getName());
  Query query=JPA.em().createNativeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setParameter(1,today.toDate(),TemporalType.DATE).setParameter(2,partner).setParameter(3,company);
  BigDecimal balance=(BigDecimal)query.getSingleResult();
  if (balance == null) {
    balance=BigDecimal.ZERO;
  }
  LOG.debug(""String_Node_Str"",balance);
  return balance;
}"
59192,"@Transactional public AccountingSituation updateAccountingSituationCustomerAccount(AccountingSituation accountingSituation,boolean updateCustAccount,boolean updateDueCustAccount,boolean updateDueReminderCustAccount){
  Partner partner=accountingSituation.getPartner();
  Company company=accountingSituation.getCompany();
  if (updateCustAccount) {
    accountingSituation.setBalanceCustAccount(this.getBalance(partner,company));
  }
  if (updateDueCustAccount) {
    accountingSituation.setBalanceDueCustAccount(this.getBalanceDue(partner,company));
  }
  if (updateDueReminderCustAccount) {
    accountingSituation.setBalanceDueReminderCustAccount(this.getBalanceDueReminder(partner,company));
  }
  accountingSituation.setCustAccountMustBeUpdateOk(false);
  accountingSituation.save();
  return accountingSituation;
}","@Transactional public AccountingSituation updateAccountingSituationCustomerAccount(AccountingSituation accountingSituation,boolean updateCustAccount,boolean updateDueCustAccount,boolean updateDueReminderCustAccount){
  Partner partner=accountingSituation.getPartner();
  Company company=accountingSituation.getCompany();
  LOG.debug(""String_Node_Str"",partner.getName(),company.getName(),updateCustAccount,updateDueReminderCustAccount);
  if (updateCustAccount) {
    accountingSituation.setBalanceCustAccount(this.getBalance(partner,company));
  }
  if (updateDueCustAccount) {
    accountingSituation.setBalanceDueCustAccount(this.getBalanceDue(partner,company));
  }
  if (updateDueReminderCustAccount) {
    accountingSituation.setBalanceDueReminderCustAccount(this.getBalanceDueReminder(partner,company));
  }
  accountingSituation.setCustAccountMustBeUpdateOk(false);
  accountingSituation.save();
  return accountingSituation;
}"
59193,"/** 
 * Fonction permettant de calculer le solde total d'un contrat
 * @param contractLine Un contrat
 * @return Le solde total
 */
public BigDecimal getBalance(Partner partner,Company company){
  LOG.debug(""String_Node_Str"");
  Query query=JPA.em().createNativeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setParameter(1,partner).setParameter(2,company);
  BigDecimal balance=(BigDecimal)query.getSingleResult();
  if (balance == null) {
    balance=BigDecimal.ZERO;
  }
  LOG.debug(""String_Node_Str"",balance);
  LOG.debug(""String_Node_Str"");
  return balance;
}","/** 
 * Fonction permettant de calculer le solde total d'un contrat
 * @param contractLine Un contrat
 * @return Le solde total
 */
public BigDecimal getBalance(Partner partner,Company company){
  LOG.debug(""String_Node_Str"",partner.getName(),company.getName());
  Query query=JPA.em().createNativeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setParameter(1,partner).setParameter(2,company);
  BigDecimal balance=(BigDecimal)query.getSingleResult();
  if (balance == null) {
    balance=BigDecimal.ZERO;
  }
  LOG.debug(""String_Node_Str"",balance);
  return balance;
}"
59194,"/** 
 * solde des échéanciers dont le type est non contentieux et qui ne sont pas bloqués 
 */
public BigDecimal getBalanceDueReminder(Partner partner,Company company){
  LOG.debug(""String_Node_Str"");
  Query query=JPA.em().createNativeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setParameter(1,company.getMailTransitTime()).setParameter(2,today.toDate(),TemporalType.DATE).setParameter(3,partner).setParameter(4,company);
  BigDecimal balance=(BigDecimal)query.getSingleResult();
  if (balance == null) {
    balance=BigDecimal.ZERO;
  }
  LOG.debug(""String_Node_Str"",balance);
  LOG.debug(""String_Node_Str"");
  return balance;
}","/** 
 * solde des échéanciers dont le type est non contentieux et qui ne sont pas bloqués 
 */
public BigDecimal getBalanceDueReminder(Partner partner,Company company){
  LOG.debug(""String_Node_Str"",partner.getName(),company.getName());
  Query query=JPA.em().createNativeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setParameter(1,company.getMailTransitTime()).setParameter(2,today.toDate(),TemporalType.DATE).setParameter(3,partner).setParameter(4,company);
  BigDecimal balance=(BigDecimal)query.getSingleResult();
  if (balance == null) {
    balance=BigDecimal.ZERO;
  }
  LOG.debug(""String_Node_Str"",balance);
  return balance;
}"
59195,"public void createsTargets(TargetConfiguration targetConfiguration) throws AxelorException {
  LocalDate oldDate=targetConfiguration.getFromDate();
  for (LocalDate date=oldDate; date.isBefore(targetConfiguration.getToDate()) || date.isEqual(targetConfiguration.getToDate()); date=this.getNextDate(targetConfiguration.getPeriodTypeSelect(),date)) {
    Target target2=Target.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",targetConfiguration.getUserInfo(),targetConfiguration.getTeam(),targetConfiguration.getPeriodTypeSelect(),targetConfiguration.getFromDate(),targetConfiguration.getToDate(),targetConfiguration.getCallEmittedNumber(),targetConfiguration.getMeetingNumber(),targetConfiguration.getOpportunityAmountEarned().doubleValue(),targetConfiguration.getOpportunityCreatedNumber(),targetConfiguration.getOpportunityCreatedWon()).fetchOne();
    if (target2 == null) {
      Target target=this.createTarget(targetConfiguration,oldDate,date.minusDays(1));
      this.update(target);
      oldDate=date;
    }
 else {
      throw new AxelorException(String.format(""String_Node_Str"",target2.getCode(),targetConfiguration.getCode()),IException.CONFIGURATION_ERROR);
    }
  }
}","public void createsTargets(TargetConfiguration targetConfiguration) throws AxelorException {
  if (targetConfiguration.getPeriodTypeSelect() == ITarget.NONE) {
    Target target=this.createTarget(targetConfiguration,targetConfiguration.getFromDate(),targetConfiguration.getToDate());
    this.update(target);
  }
 else {
    LocalDate oldDate=targetConfiguration.getFromDate();
    for (LocalDate date=oldDate; date.isBefore(targetConfiguration.getToDate()) || date.isEqual(targetConfiguration.getToDate()); date=this.getNextDate(targetConfiguration.getPeriodTypeSelect(),date)) {
      Target target2=Target.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",targetConfiguration.getUserInfo(),targetConfiguration.getTeam(),targetConfiguration.getPeriodTypeSelect(),targetConfiguration.getFromDate(),targetConfiguration.getToDate(),targetConfiguration.getCallEmittedNumber(),targetConfiguration.getMeetingNumber(),targetConfiguration.getOpportunityAmountEarned().doubleValue(),targetConfiguration.getOpportunityCreatedNumber(),targetConfiguration.getOpportunityCreatedWon()).fetchOne();
      if (target2 == null) {
        Target target=this.createTarget(targetConfiguration,oldDate,date.minusDays(1));
        this.update(target);
        oldDate=date;
      }
 else {
        throw new AxelorException(String.format(""String_Node_Str"",target2.getCode(),targetConfiguration.getCode()),IException.CONFIGURATION_ERROR);
      }
    }
  }
}"
59196,"public void update(ActionRequest request,ActionResponse response){
  Target target=request.getContext().asType(Target.class);
  try {
    targetService.update(target);
    response.setValue(""String_Node_Str"",target.getOpportunityAmountEarned());
    response.setValue(""String_Node_Str"",target.getOpportunityCreatedNumber());
    response.setValue(""String_Node_Str"",target.getOpportunityCreatedWon());
    response.setValue(""String_Node_Str"",target.getCallEmittedNumber());
    response.setValue(""String_Node_Str"",target.getMeetingNumber());
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}","public void update(ActionRequest request,ActionResponse response){
  Target target=request.getContext().asType(Target.class);
  try {
    targetService.update(Target.find(target.getId()));
    response.setValue(""String_Node_Str"",target.getOpportunityAmountEarned());
    response.setValue(""String_Node_Str"",target.getOpportunityCreatedNumber());
    response.setValue(""String_Node_Str"",target.getOpportunityCreatedWon());
    response.setValue(""String_Node_Str"",target.getCallEmittedNumber());
    response.setValue(""String_Node_Str"",target.getMeetingNumber());
  }
 catch (  Exception e) {
    TraceBackService.trace(response,e);
  }
}"
59197,"@Inject private GeneralService(){
  try {
    administrationId=General.all().fetchOne().getId();
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Inject private GeneralService(){
  General general=General.all().fetchOne();
  if (general != null) {
    administrationId=General.all().fetchOne().getId();
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}"
59198,"@Transactional public Inventory createInventory(String ref,LocalDate date,String description,Location location,boolean excludeOutOfStock,boolean includeObsolete,ProductFamily productFamily,ProductCategory productCategory) throws Exception {
  Inventory inventory=new Inventory();
  inventory.setStatusSelect(1);
  if (ref != null)   inventory.setInventorySeq(ref);
  if (date != null)   inventory.setDateT(date.toDateTimeAtStartOfDay());
 else   throw new Exception(""String_Node_Str"");
  if (description != null)   inventory.setDescription(description);
  if (location != null)   inventory.setLocation(location);
 else   throw new Exception(""String_Node_Str"");
  String query=""String_Node_Str"";
  List<Object> params=new ArrayList<Object>();
  params.add(location);
  if (excludeOutOfStock) {
    query+=""String_Node_Str"";
  }
  if (!includeObsolete) {
    query+=""String_Node_Str"";
    params.add(date);
  }
  if (productFamily != null) {
    query+=""String_Node_Str"";
    params.add(productFamily);
  }
  if (productCategory != null) {
    query+=""String_Node_Str"";
    params.add(productCategory);
  }
  List<LocationLine> locationLineList=LocationLine.all().filter(query,params.toArray()).fetch();
  if (locationLineList != null) {
    List<InventoryLine> inventoryLineList=new ArrayList<InventoryLine>();
    for (    LocationLine locationLine : locationLineList) {
      InventoryLine inventoryLine=new InventoryLine();
      inventoryLine.setProduct(locationLine.getProduct());
      inventoryLine.setCurrentQty(locationLine.getCurrentQty());
      inventoryLine.setInventory(inventory);
      inventoryLine.setTrackingNumber(locationLine.getTrackingNumber());
      inventoryLine.setProductVariant(locationLine.getProductVariant());
      inventoryLineList.add(inventoryLine);
    }
    inventory.setInventoryLineList(inventoryLineList);
  }
  inventory.save();
  return inventory;
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public Inventory createInventory(String ref,LocalDate date,String description,Location location,boolean excludeOutOfStock,boolean includeObsolete,ProductFamily productFamily,ProductCategory productCategory) throws Exception {
  Inventory inventory=new Inventory();
  inventory.setStatusSelect(1);
  if (ref != null)   inventory.setInventorySeq(ref);
  if (date != null)   inventory.setDateT(date.toDateTimeAtStartOfDay());
 else   throw new Exception(""String_Node_Str"");
  if (description != null)   inventory.setDescription(description);
  if (location != null)   inventory.setLocation(location);
 else   throw new Exception(""String_Node_Str"");
  String query=""String_Node_Str"";
  List<Object> params=new ArrayList<Object>();
  params.add(location);
  if (excludeOutOfStock) {
    query+=""String_Node_Str"";
  }
  if (!includeObsolete) {
    query+=""String_Node_Str"";
    params.add(date);
  }
  if (productFamily != null) {
    query+=""String_Node_Str"";
    params.add(productFamily);
  }
  if (productCategory != null) {
    query+=""String_Node_Str"";
    params.add(productCategory);
  }
  List<LocationLine> locationLineList=LocationLine.all().filter(query,params.toArray()).fetch();
  if (locationLineList != null) {
    List<InventoryLine> inventoryLineList=new ArrayList<InventoryLine>();
    for (    LocationLine locationLine : locationLineList) {
      InventoryLine inventoryLine=new InventoryLine();
      inventoryLine.setProduct(locationLine.getProduct());
      inventoryLine.setCurrentQty(locationLine.getCurrentQty());
      inventoryLine.setInventory(inventory);
      inventoryLine.setTrackingNumber(locationLine.getTrackingNumber());
      inventoryLine.setProductVariant(locationLine.getProductVariant());
      inventoryLineList.add(inventoryLine);
    }
    inventory.setInventoryLineList(inventoryLineList);
  }
  inventory.save();
  return inventory;
}"
59199,"public void createsTargets(TargetConfiguration targetConfiguration) throws AxelorException {
  LocalDate oldDate=targetConfiguration.getFromDate();
  for (LocalDate date=oldDate; date.isBefore(targetConfiguration.getToDate()) || date.isEqual(targetConfiguration.getToDate()); date=this.getNextDate(targetConfiguration.getPeriodTypeSelect(),date)) {
    Target target2=Target.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",targetConfiguration.getUserInfo(),targetConfiguration.getTeam(),targetConfiguration.getPeriodTypeSelect(),targetConfiguration.getFromDate(),targetConfiguration.getToDate(),targetConfiguration.getCallEmittedNumber(),targetConfiguration.getMeetingNumber(),targetConfiguration.getOpportunityAmountEarned().doubleValue(),targetConfiguration.getOpportunityCreatedNumber(),targetConfiguration.getOpportunityCreatedWon()).fetchOne();
    if (target2 == null) {
      Target target=this.createTarget(targetConfiguration,oldDate.plusDays(1),date);
      this.update(target);
      oldDate=date;
    }
 else {
      throw new AxelorException(String.format(""String_Node_Str"",target2.getCode(),targetConfiguration.getCode()),IException.CONFIGURATION_ERROR);
    }
  }
}","public void createsTargets(TargetConfiguration targetConfiguration) throws AxelorException {
  LocalDate oldDate=targetConfiguration.getFromDate();
  for (LocalDate date=oldDate; date.isBefore(targetConfiguration.getToDate()) || date.isEqual(targetConfiguration.getToDate()); date=this.getNextDate(targetConfiguration.getPeriodTypeSelect(),date)) {
    Target target2=Target.all().filter(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",targetConfiguration.getUserInfo(),targetConfiguration.getTeam(),targetConfiguration.getPeriodTypeSelect(),targetConfiguration.getFromDate(),targetConfiguration.getToDate(),targetConfiguration.getCallEmittedNumber(),targetConfiguration.getMeetingNumber(),targetConfiguration.getOpportunityAmountEarned().doubleValue(),targetConfiguration.getOpportunityCreatedNumber(),targetConfiguration.getOpportunityCreatedWon()).fetchOne();
    if (target2 == null) {
      Target target=this.createTarget(targetConfiguration,oldDate,date.minusDays(1));
      this.update(target);
      oldDate=date;
    }
 else {
      throw new AxelorException(String.format(""String_Node_Str"",target2.getCode(),targetConfiguration.getCode()),IException.CONFIGURATION_ERROR);
    }
  }
}"
59200,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void update(Target target){
  UserInfo userInfo=target.getUserInfo();
  Team team=target.getTeam();
  LocalDate fromDate=target.getFromDate();
  LocalDate toDate=target.getToDate();
  if (userInfo != null) {
    Query q=JPA.em().createQuery(""String_Node_Str"");
    q.setParameter(1,userInfo);
    BigDecimal opportunityAmountEarned=(BigDecimal)q.getResultList();
    Long callEmittedNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDate,toDate).count();
    target.setCallEmittedNumber(callEmittedNumber.intValue());
    Long meetingNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDate,toDate).count();
    target.setMeetingNumber(meetingNumber.intValue());
    target.setOpportunityAmountEarned(opportunityAmountEarned);
    Long opportunityCreatedNumber=Opportunity.all().filter(""String_Node_Str"",1,userInfo,fromDate,toDate).count();
    target.setOpportunityCreatedNumber(opportunityCreatedNumber.intValue());
    Long opportunityCreatedWon=Opportunity.all().filter(""String_Node_Str"",1,userInfo,fromDate,toDate).count();
    target.setOpportunityCreatedWon(opportunityCreatedWon.intValue());
  }
 else   if (team != null) {
    Query q=JPA.em().createQuery(""String_Node_Str"");
    q.setParameter(1,team);
    BigDecimal opportunityAmountEarned=(BigDecimal)q.getResultList();
    Long callEmittedNumber=Event.all().filter(""String_Node_Str"",1,team,fromDate,toDate).count();
    target.setCallEmittedNumber(callEmittedNumber.intValue());
    Long meetingNumber=Event.all().filter(""String_Node_Str"",1,team,fromDate,toDate).count();
    target.setMeetingNumber(meetingNumber.intValue());
    target.setOpportunityAmountEarned(opportunityAmountEarned);
    Long opportunityCreatedNumber=Opportunity.all().filter(""String_Node_Str"",1,team,fromDate,toDate).count();
    target.setOpportunityCreatedNumber(opportunityCreatedNumber.intValue());
    Long opportunityCreatedWon=Opportunity.all().filter(""String_Node_Str"",1,team,fromDate,toDate).count();
    target.setOpportunityCreatedWon(opportunityCreatedWon.intValue());
  }
  target.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void update(Target target){
  UserInfo userInfo=target.getUserInfo();
  Team team=target.getTeam();
  LocalDate fromDate=target.getFromDate();
  LocalDate toDate=target.getToDate();
  LocalDateTime fromDateTime=new LocalDateTime(fromDate.getYear(),fromDate.getMonthOfYear(),fromDate.getDayOfMonth(),0,0);
  LocalDateTime toDateTime=new LocalDateTime(toDate.getYear(),toDate.getMonthOfYear(),toDate.getDayOfMonth(),23,59);
  if (userInfo != null) {
    Query q=JPA.em().createQuery(""String_Node_Str"");
    q.setParameter(1,userInfo);
    q.setParameter(2,fromDateTime);
    q.setParameter(3,toDateTime);
    BigDecimal opportunityAmountEarned=(BigDecimal)q.getSingleResult();
    Long callEmittedNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setCallEmittedNumber(callEmittedNumber.intValue());
    Long meetingNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setMeetingNumber(meetingNumber.intValue());
    target.setOpportunityAmountEarned(opportunityAmountEarned);
    Long opportunityCreatedNumber=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedNumber(opportunityCreatedNumber.intValue());
    Long opportunityCreatedWon=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedWon(opportunityCreatedWon.intValue());
  }
 else   if (team != null) {
    Query q=JPA.em().createQuery(""String_Node_Str"");
    q.setParameter(1,team);
    q.setParameter(2,fromDateTime);
    q.setParameter(3,toDateTime);
    BigDecimal opportunityAmountEarned=(BigDecimal)q.getResultList();
    Long callEmittedNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setCallEmittedNumber(callEmittedNumber.intValue());
    Long meetingNumber=Event.all().filter(""String_Node_Str"",1,userInfo,fromDateTime,toDateTime).count();
    target.setMeetingNumber(meetingNumber.intValue());
    target.setOpportunityAmountEarned(opportunityAmountEarned);
    Long opportunityCreatedNumber=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedNumber(opportunityCreatedNumber.intValue());
    Long opportunityCreatedWon=Opportunity.all().filter(""String_Node_Str"",userInfo,fromDateTime,toDateTime).count();
    target.setOpportunityCreatedWon(opportunityCreatedWon.intValue());
  }
  target.save();
}"
59201,"public ProductVariant createProductVariant(ProductVariantAttribute productVariantAttribute1,ProductVariantAttribute productVariantAttribute2,ProductVariantAttribute productVariantAttribute3,ProductVariantAttribute productVariantAttribute4,ProductVariantValue productVariantValue1,ProductVariantValue productVariantValue2,ProductVariantValue productVariantValue3,ProductVariantValue productVariantValue4,boolean usedForStock){
  ProductVariant productVariant=new ProductVariant();
  productVariant.setProductVariantAttribute1(productVariantAttribute1);
  productVariant.setProductVariantAttribute2(productVariantAttribute2);
  productVariant.setProductVariantAttribute3(productVariantAttribute3);
  productVariant.setProductVariantAttribute4(productVariantAttribute4);
  productVariant.setProductVariantValue1(productVariantValue1);
  productVariant.setProductVariantValue2(productVariantValue2);
  productVariant.setProductVariantValue3(productVariantValue3);
  productVariant.setProductVariantValue4(productVariantValue4);
  productVariant.setUsedforStock(usedForStock);
  return productVariant;
}","public ProductVariant createProductVariant(ProductVariantAttribute productVariantAttribute1,ProductVariantAttribute productVariantAttribute2,ProductVariantAttribute productVariantAttribute3,ProductVariantAttribute productVariantAttribute4,ProductVariantValue productVariantValue1,ProductVariantValue productVariantValue2,ProductVariantValue productVariantValue3,ProductVariantValue productVariantValue4,boolean usedForStock){
  ProductVariant productVariant=new ProductVariant();
  productVariant.setProductVariantAttribute1(productVariantAttribute1);
  productVariant.setProductVariantAttribute2(productVariantAttribute2);
  productVariant.setProductVariantAttribute3(productVariantAttribute3);
  productVariant.setProductVariantAttribute4(productVariantAttribute4);
  productVariant.setProductVariantValue1(productVariantValue1);
  productVariant.setProductVariantValue2(productVariantValue2);
  productVariant.setProductVariantValue3(productVariantValue3);
  productVariant.setProductVariantValue4(productVariantValue4);
  productVariant.setUsedForStock(usedForStock);
  return productVariant;
}"
59202,"public void convertLead(ActionRequest request,ActionResponse response) throws AxelorException {
  Context context=request.getContext();
  Lead leadContext=(Lead)context.get(""String_Node_Str"");
  Lead lead=Lead.find(leadContext.getId());
  Partner partner=null;
  Partner contactPartner=null;
  Opportunity opportunity=null;
  Event callEvent=null;
  Event meetingEvent=null;
  Event taskEvent=null;
  if ((Boolean)context.get(""String_Node_Str"")) {
    contactPartner=this.createPartner((Partner)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    contactPartner=Partner.find((Long)context.get(""String_Node_Str""));
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    partner=this.createPartner((Partner)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    partner=Partner.find((Long)context.get(""String_Node_Str""));
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    opportunity=this.createOpportunity((Opportunity)context.get(""String_Node_Str""));
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    callEvent=this.createEvent((Event)context.get(""String_Node_Str""),1);
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    meetingEvent=this.createEvent((Event)context.get(""String_Node_Str""),2);
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    taskEvent=this.createEvent((Event)context.get(""String_Node_Str""),3);
  }
  leadService.convertLead(lead,partner,contactPartner,opportunity,callEvent,meetingEvent,taskEvent);
}","public void convertLead(ActionRequest request,ActionResponse response) throws AxelorException {
  Context context=request.getContext();
  Map<String,Object> leadContext=(Map<String,Object>)context.get(""String_Node_Str"");
  Lead lead=Lead.find(((Integer)leadContext.get(""String_Node_Str"")).longValue());
  Partner partner=null;
  Partner contactPartner=null;
  Opportunity opportunity=null;
  Event callEvent=null;
  Event meetingEvent=null;
  Event taskEvent=null;
  if ((Boolean)context.get(""String_Node_Str"")) {
    contactPartner=this.createPartner((Partner)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    contactPartner=Partner.find((Long)context.get(""String_Node_Str""));
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    partner=this.createPartner((Partner)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    partner=Partner.find((Long)context.get(""String_Node_Str""));
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    opportunity=this.createOpportunity((Opportunity)context.get(""String_Node_Str""));
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    callEvent=this.createEvent((Event)context.get(""String_Node_Str""),1);
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    meetingEvent=this.createEvent((Event)context.get(""String_Node_Str""),2);
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    taskEvent=this.createEvent((Event)context.get(""String_Node_Str""),3);
  }
  leadService.convertLead(lead,partner,contactPartner,opportunity,callEvent,meetingEvent,taskEvent);
}"
59203,"/** 
 * Create a partner from a lead
 * @param lead
 * @return
 * @throws AxelorException
 */
public Partner createPartner(Partner context) throws AxelorException {
  Partner partner=new Partner();
  if (context != null) {
    LOG.debug(""String_Node_Str"" + context);
    LOG.debug(""String_Node_Str"" + context.getPartnerTypeSelect());
    partner.setFirstName(context.getFirstName());
    partner.setName(context.getName());
    partner.setTitleSelect(context.getTitleSelect());
    partner.setCustomerTypeSelect(context.getCustomerTypeSelect());
    partner.setPartnerTypeSelect(context.getPartnerTypeSelect());
    partner.setIsContact(context.getIsContact());
    partner.setEmail(context.getEmail());
    partner.setFax(context.getFax());
    partner.setWebSite(context.getWebSite());
    partner.setMobilePhonePro(context.getMobilePhonePro());
    partner.setSource(context.getSource());
    partner.setDepartment(context.getDepartment());
    partner.setPicture(context.getPicture());
    partner.setBankDetails(context.getBankDetails());
    partner.setPartnerSeq(leadService.getSequence());
  }
  return partner;
}","public Partner createPartner(Map<String,Object> context) throws AxelorException {
  Mapper mapper=Mapper.of(Partner.class);
  Partner partner=Mapper.toBean(Partner.class,null);
  partner=(Partner)this.createObject(context,partner,mapper);
  partner.setPartnerSeq(leadService.getSequence());
  return partner;
}"
59204,"/** 
 * Create an event from a lead (Call or Meeting)
 * @param lead
 * @return
 * @throws AxelorException
 */
public Event createEvent(Event context,int type) throws AxelorException {
  if (context != null) {
    Event event=new Event();
    event.setDescription(context.getDescription());
    event.setDurationHours(context.getDurationHours());
    event.setDurationMinutesSelect(context.getDurationMinutesSelect());
    event.setEndDateTime(context.getEndDateTime());
    event.setEventCategory(context.getEventCategory());
    event.setIsTimesheetAffected(context.getIsTimesheetAffected());
    event.setLocation(context.getLocation());
    event.setMeetingType(context.getMeetingType());
    event.setPrioritySelect(context.getPrioritySelect());
    event.setProgressSelect(context.getProgressSelect());
    event.setProject(context.getProject());
    event.setRelatedToSelect(context.getRelatedToSelect());
    event.setRelatedToSelectId(context.getRelatedToSelectId());
    event.setReminder(context.getReminder());
    event.setResponsibleUserInfo(context.getResponsibleUserInfo());
    event.setStartDateTime(context.getStartDateTime());
    event.setSubject(context.getSubject());
    event.setTask(context.getTask());
    event.setTaskPartner(context.getTaskPartner());
    event.setTeam(context.getTeam());
    event.setTicketNumberSeq(context.getTicketNumberSeq());
    event.setTypeSelect(context.getTypeSelect());
    event.setUserInfo(context.getUserInfo());
    event.setTypeSelect(type);
    return event;
  }
  return null;
}","public Event createEvent(Map<String,Object> context,int type) throws AxelorException {
  Mapper mapper=Mapper.of(Event.class);
  Event event=Mapper.toBean(Event.class,null);
  event=(Event)this.createObject(context,event,mapper);
  event.setTypeSelect(type);
  return event;
}"
59205,"/** 
 * Create an opportunity from a lead
 * @param lead
 * @return
 * @throws AxelorException
 */
public Opportunity createOpportunity(Opportunity context) throws AxelorException {
  if (context != null) {
    Opportunity opportunity=new Opportunity();
    opportunity.setAmount(context.getAmount());
    opportunity.setCampaign(context.getCampaign());
    opportunity.setCompany(context.getCompany());
    opportunity.setBestCase(context.getBestCase());
    opportunity.setCurrency(context.getCurrency());
    opportunity.setDescription(context.getDescription());
    opportunity.setExpectedCloseDate(context.getExpectedCloseDate());
    opportunity.setName(context.getName());
    opportunity.setNextStep(context.getNextStep());
    opportunity.setOpportunityType(context.getOpportunityType());
    opportunity.setPartner(context.getPartner());
    opportunity.setProbability(context.getProbability());
    opportunity.setSalesStageSelect(context.getSalesStageSelect());
    opportunity.setSource(context.getSource());
    opportunity.setTeam(context.getTeam());
    opportunity.setUserInfo(context.getUserInfo());
    opportunity.setWorstCase(context.getWorstCase());
    return opportunity;
  }
  return null;
}","public Opportunity createOpportunity(Map<String,Object> context) throws AxelorException {
  Mapper mapper=Mapper.of(Opportunity.class);
  Opportunity opportunity=Mapper.toBean(Opportunity.class,null);
  opportunity=(Opportunity)this.createObject(context,opportunity,mapper);
  return opportunity;
}"
59206,"public void convertLead(ActionRequest request,ActionResponse response) throws AxelorException {
  Context context=request.getContext();
  Map<String,Object> leadContext=(Map<String,Object>)context.get(""String_Node_Str"");
  Lead lead=Lead.find(((Integer)leadContext.get(""String_Node_Str"")).longValue());
  Partner partner=null;
  Partner contactPartner=null;
  Opportunity opportunity=null;
  Event callEvent=null;
  Event meetingEvent=null;
  Event taskEvent=null;
  if ((Boolean)context.get(""String_Node_Str"")) {
    contactPartner=this.createPartner((Partner)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    contactPartner=Partner.find((Long)context.get(""String_Node_Str""));
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    partner=this.createPartner((Partner)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    partner=Partner.find((Long)context.get(""String_Node_Str""));
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    opportunity=this.createOpportunity((Opportunity)context.get(""String_Node_Str""));
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    callEvent=this.createEvent((Event)context.get(""String_Node_Str""),1);
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    meetingEvent=this.createEvent((Event)context.get(""String_Node_Str""),2);
  }
  if ((Boolean)context.get(""String_Node_Str"")) {
    taskEvent=this.createEvent((Event)context.get(""String_Node_Str""),3);
  }
  leadService.convertLead(lead,partner,contactPartner,opportunity,callEvent,meetingEvent,taskEvent);
}","public void convertLead(ActionRequest request,ActionResponse response) throws AxelorException {
  Context context=request.getContext();
  Map<String,Object> leadContext=(Map<String,Object>)context.get(""String_Node_Str"");
  Lead lead=Lead.find(((Integer)leadContext.get(""String_Node_Str"")).longValue());
  Partner partner=null;
  Partner contactPartner=null;
  Opportunity opportunity=null;
  Event callEvent=null;
  Event meetingEvent=null;
  Event taskEvent=null;
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    contactPartner=this.createPartner((Map<String,Object>)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    contactPartner=Partner.find((Long)context.get(""String_Node_Str""));
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    partner=this.createPartner((Map<String,Object>)context.get(""String_Node_Str""));
  }
 else   if (context.get(""String_Node_Str"") != null) {
    partner=Partner.find((Long)context.get(""String_Node_Str""));
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    opportunity=this.createOpportunity((Map<String,Object>)context.get(""String_Node_Str""));
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    callEvent=this.createEvent((Map<String,Object>)context.get(""String_Node_Str""),1);
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    meetingEvent=this.createEvent((Map<String,Object>)context.get(""String_Node_Str""),2);
  }
  if (context.get(""String_Node_Str"") != null && (Boolean)context.get(""String_Node_Str"")) {
    taskEvent=this.createEvent((Map<String,Object>)context.get(""String_Node_Str""),3);
  }
  leadService.convertLead(lead,partner,contactPartner,opportunity,callEvent,meetingEvent,taskEvent);
}"
59207,"public void checkDate(ActionRequest request,ActionResponse response){
  CurrencyConversionLine ccl=request.getContext().asType(CurrencyConversionLine.class);
  if (CurrencyConversionLine.all().filter(""String_Node_Str"",ccl.getStartCurrency(),ccl.getEndCurrency()).count() > 0) {
    String msg=""String_Node_Str"";
    response.setFlash(msg);
    response.setValue(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (CurrencyConversionLine.all().filter(""String_Node_Str"",ccl.getStartCurrency(),ccl.getEndCurrency(),ccl.getFromDate()).count() > 0) {
    String msg=""String_Node_Str"";
    response.setFlash(msg);
    response.setValue(""String_Node_Str"",""String_Node_Str"");
  }
}","public void checkDate(ActionRequest request,ActionResponse response){
  CurrencyConversionLine ccl=request.getContext().asType(CurrencyConversionLine.class);
  if (CurrencyConversionLine.all().filter(""String_Node_Str"",ccl.getStartCurrency(),ccl.getEndCurrency()).count() > 0) {
    String msg=""String_Node_Str"";
    response.setFlash(msg);
    response.setValue(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (CurrencyConversionLine.all().filter(""String_Node_Str"",ccl.getStartCurrency(),ccl.getEndCurrency(),ccl.getFromDate()).count() > 0) {
    String msg=""String_Node_Str"";
    response.setFlash(msg);
  }
}"
59208,"public Object evaluate(String query,Model context){
  try {
    Class<?> klass=this.extractClass(query);
    System.err.println(klass);
    StringBuilder sb=new StringBuilder(query);
    int n=0, i=sb.indexOf(""String_Node_Str"");
    while (i > -1) {
      sb.replace(i,i + 1,""String_Node_Str"" + (++n));
      i=sb.indexOf(""String_Node_Str"",i + 1);
    }
    TypedQuery<?> querie=JPA.em().createQuery(sb.toString(),klass);
    for (int j=1; j <= n; j++) {
      querie.setParameter(n,context);
    }
    return querie.getResultList();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}","public Object evaluate(String query,Model bean){
  try {
    Class<?> klass=this.extractClass(query);
    System.err.println(klass);
    StringBuilder sb=new StringBuilder(query);
    int n=0, i=sb.indexOf(""String_Node_Str"");
    while (i > -1) {
      sb.replace(i,i + 1,""String_Node_Str"" + (++n));
      i=sb.indexOf(""String_Node_Str"",i + 1);
    }
    TypedQuery<?> querie=JPA.em().createQuery(sb.toString(),klass);
    for (int j=1; j <= n; j++) {
      querie.setParameter(n,bean);
    }
    return querie.getResultList();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return null;
}"
59209,"public Map<String,Object> getContext(TemplateContext templateContext,Model context){
  Map<String,Object> map=Maps.newHashMap();
  if (templateContext.getTemplateContextLine() != null) {
    for (    TemplateContextLine line : templateContext.getTemplateContextLine()) {
      Object o=tcls.evaluate(line,context);
      map.put(line.getKey(),o);
    }
  }
  return map;
}","public Map<String,Object> getContext(TemplateContext templateContext,Model bean){
  Map<String,Object> map=Maps.newHashMap();
  if (templateContext.getTemplateContextLine() != null) {
    for (    TemplateContextLine line : templateContext.getTemplateContextLine()) {
      Object o=tcls.evaluate(line,bean);
      map.put(line.getKey(),o);
    }
  }
  return map;
}"
59210,"public Map<String,Object> getContext(Template template,Model context){
  if (template.getTemplateContext() == null) {
    return null;
  }
  return tcs.getContext(template.getTemplateContext(),context);
}","public Map<String,Object> getContext(Template template,Model bean){
  if (template.getTemplateContext() == null) {
    return null;
  }
  return tcs.getContext(template.getTemplateContext(),bean);
}"
59211,"public void updateLocations(Location fromLocation,Location toLocation,Product product,BigDecimal qty,int fromStatus,int toStatus,LocalDate lastFutureStockMoveDate,TrackingNumber trackingNumber,ProductVariant productVariant){
switch (fromStatus) {
case IStockMove.PLANNED:
    locationLineService.updateLocation(fromLocation,product,qty,false,true,true,null,trackingNumber,productVariant);
  locationLineService.updateLocation(toLocation,product,qty,false,true,false,null,trackingNumber,productVariant);
break;
case IStockMove.REALIZED:
locationLineService.updateLocation(fromLocation,product,qty,true,true,true,null,trackingNumber,productVariant);
locationLineService.updateLocation(toLocation,product,qty,true,true,false,null,trackingNumber,productVariant);
break;
default :
break;
}
switch (toStatus) {
case IStockMove.PLANNED:
locationLineService.updateLocation(fromLocation,product,qty,false,true,false,lastFutureStockMoveDate,trackingNumber,productVariant);
locationLineService.updateLocation(toLocation,product,qty,false,true,true,lastFutureStockMoveDate,trackingNumber,productVariant);
break;
case IStockMove.REALIZED:
locationLineService.updateLocation(fromLocation,product,qty,true,true,false,null,trackingNumber,productVariant);
locationLineService.updateLocation(toLocation,product,qty,true,true,true,null,trackingNumber,productVariant);
break;
default :
break;
}
}","public void updateLocations(Location fromLocation,Location toLocation,Product product,BigDecimal qty,int fromStatus,int toStatus,LocalDate lastFutureStockMoveDate,ProductVariant productVariant,TrackingNumber trackingNumber){
switch (fromStatus) {
case IStockMove.PLANNED:
    locationLineService.updateLocation(fromLocation,product,qty,false,true,true,null,trackingNumber,productVariant);
  locationLineService.updateLocation(toLocation,product,qty,false,true,false,null,trackingNumber,productVariant);
break;
case IStockMove.REALIZED:
locationLineService.updateLocation(fromLocation,product,qty,true,true,true,null,trackingNumber,productVariant);
locationLineService.updateLocation(toLocation,product,qty,true,true,false,null,trackingNumber,productVariant);
break;
default :
break;
}
switch (toStatus) {
case IStockMove.PLANNED:
locationLineService.updateLocation(fromLocation,product,qty,false,true,false,lastFutureStockMoveDate,trackingNumber,productVariant);
locationLineService.updateLocation(toLocation,product,qty,false,true,true,lastFutureStockMoveDate,trackingNumber,productVariant);
break;
case IStockMove.REALIZED:
locationLineService.updateLocation(fromLocation,product,qty,true,true,false,null,trackingNumber,productVariant);
locationLineService.updateLocation(toLocation,product,qty,true,true,true,null,trackingNumber,productVariant);
break;
default :
break;
}
}"
59212,"@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void plan(StockMove stockMove) throws AxelorException {
  LOG.debug(""String_Node_Str"",new Object[]{stockMove.getName()});
  Location fromLocation=stockMove.getFromLocation();
  Location toLocation=stockMove.getToLocation();
  if (fromLocation == null) {
    throw new AxelorException(String.format(""String_Node_Str"",exceptionMsg,stockMove.getName()),IException.CONFIGURATION_ERROR);
  }
  if (toLocation == null) {
    throw new AxelorException(String.format(""String_Node_Str"",exceptionMsg,stockMove.getName()),IException.CONFIGURATION_ERROR);
  }
  if (stockMove.getTypeSelect() == null || stockMove.getTypeSelect() == 0) {
    stockMove.setTypeSelect(this.getStockMoveType(fromLocation,toLocation));
  }
  if (stockMove.getStockMoveSeq() == null || stockMove.getStockMoveSeq().isEmpty()) {
    String refSequence=this.getSequenceStockMove(stockMove.getTypeSelect(),stockMove.getCompany());
    stockMove.setStockMoveSeq(refSequence);
    stockMove.setName(refSequence);
  }
  this.updateLocations(fromLocation,toLocation,stockMove.getStatusSelect(),IStockMove.PLANNED,stockMove.getStockMoveLineList(),stockMove.getEstimatedDate());
  if (stockMove.getEstimatedDate() == null) {
    stockMove.setEstimatedDate(this.today);
  }
  stockMove.setStatusSelect(IStockMove.PLANNED);
  stockMove.save();
}","@Transactional(rollbackOn={AxelorException.class,Exception.class}) public void plan(StockMove stockMove) throws AxelorException {
  LOG.debug(""String_Node_Str"",new Object[]{stockMove.getName()});
  Location fromLocation=stockMove.getFromLocation();
  Location toLocation=stockMove.getToLocation();
  if (fromLocation == null) {
    throw new AxelorException(String.format(""String_Node_Str"",exceptionMsg,stockMove.getName()),IException.CONFIGURATION_ERROR);
  }
  if (toLocation == null) {
    throw new AxelorException(String.format(""String_Node_Str"",exceptionMsg,stockMove.getName()),IException.CONFIGURATION_ERROR);
  }
  if (stockMove.getTypeSelect() == null || stockMove.getTypeSelect() == 0) {
    stockMove.setTypeSelect(this.getStockMoveType(fromLocation,toLocation));
  }
  if (stockMove.getStockMoveSeq() == null || stockMove.getStockMoveSeq().isEmpty()) {
    stockMove.setStockMoveSeq(this.getSequenceStockMove(stockMove.getTypeSelect(),stockMove.getCompany()));
  }
  if (stockMove.getName() == null || stockMove.getName().isEmpty()) {
    stockMove.setName(stockMove.getStockMoveSeq());
  }
  this.updateLocations(fromLocation,toLocation,stockMove.getStatusSelect(),IStockMove.PLANNED,stockMove.getStockMoveLineList(),stockMove.getEstimatedDate());
  if (stockMove.getEstimatedDate() == null) {
    stockMove.setEstimatedDate(this.today);
  }
  stockMove.setStatusSelect(IStockMove.PLANNED);
  stockMove.save();
}"
59213,"/** 
 * Checks if the session resource has the specified domain create permissions on the specified domain. This method takes into account any direct and inherited domain create permissions.
 * @param domainCreatePermission  the domain create permission to be checked
 * @param domainCreatePermissions the other (optional) domain create permissions to be checked
 * @return  <strong>true</strong> if the session resource has the specified domain create permissions,<strong>false</strong> otherwise
 */
public boolean hasDomainCreatePermissions(DomainCreatePermission domainCreatePermission,DomainCreatePermission... domainCreatePermissions);","/** 
 * Checks if the session resource has the specified domain create permissions. This method takes into account any direct and inherited domain create permissions.
 * @param domainCreatePermission  the domain create permission to be checked
 * @param domainCreatePermissions the other (optional) domain create permissions to be checked
 * @return  <strong>true</strong> if the session resource has the specified domain create permissions,<strong>false</strong> otherwise
 */
public boolean hasDomainCreatePermissions(DomainCreatePermission domainCreatePermission,DomainCreatePermission... domainCreatePermissions);"
59214,"/** 
 * Checks if the session resource has the specified domain create permissions on the specified domain. This method takes into account any direct and inherited domain create permissions.
 * @param domainCreatePermission  the domain create permission to be checked
 * @param domainCreatePermissions the other (optional) domain create permissions to be checked
 * @throws com.acciente.oacc.NotAuthorizedException if the session resource <strong>does not</strong> have thespecified domain create permissions
 */
public void assertDomainCreatePermissions(DomainCreatePermission domainCreatePermission,DomainCreatePermission... domainCreatePermissions);","/** 
 * Checks if the session resource has the specified domain create permissions. This method takes into account any direct and inherited domain create permissions.
 * @param domainCreatePermission  the domain create permission to be checked
 * @param domainCreatePermissions the other (optional) domain create permissions to be checked
 * @throws com.acciente.oacc.NotAuthorizedException if the session resource <strong>does not</strong> have thespecified domain create permissions
 */
public void assertDomainCreatePermissions(DomainCreatePermission domainCreatePermission,DomainCreatePermission... domainCreatePermissions);"
59215,"/** 
 * Returns a String representation of the specified vararg sequence with a mandatory first element. <pre><code> first | others    | result -------|-----------|-------- null  | []        | [null] null  | null      | [null, null] a     | []        | [a] a     | null      | [a, null] a     | [b, a]    | [a, b, a] a     | [b, null] | [a, b, null] </code></pre> (*) the returned String representation will not guarantee any order of elements and will not de-duplicate
 */
private static <T>String toString(T first,T... others){
  List<T> resultList;
  if (others == null) {
    resultList=new ArrayList<T>(2);
    resultList.add(null);
  }
 else {
    resultList=new ArrayList<T>(others.length + 1);
    Collections.addAll(resultList,others);
  }
  resultList.add(first);
  return resultList.toString();
}","/** 
 * Returns a String representation of the specified vararg sequence with a mandatory first element. <pre><code> first | others    | result -------|-----------|-------- null  | []        | [null] null  | null      | [null, null] a     | []        | [a] a     | null      | [a, null] a     | [b, a]    | [a, b, a] a     | [b, null] | [a, b, null] </code></pre> (*) the returned String representation will not guarantee any order of elements and will not de-duplicate
 */
@SafeVarargs public static <T>String toString(T first,T... others){
  List<T> resultList;
  if (others == null) {
    resultList=new ArrayList<>(2);
    resultList.add(null);
  }
 else {
    resultList=new ArrayList<>(others.length + 1);
    Collections.addAll(resultList,others);
  }
  resultList.add(first);
  return resultList.toString();
}"
59216,"private void __assertPermissionValid(SQLConnection connection,String resourceClassName,ResourcePermission resourcePermission){
  if (!resourcePermission.isSystemPermission()) {
    final List<String> permissionNames=resourceClassPermissionPersister.getPermissionNames(connection,resourceClassName);
    if (!permissionNames.contains(resourcePermission.getPermissionName())) {
      throw new IllegalArgumentException(""String_Node_Str"" + resourcePermission + ""String_Node_Str""+ resourceClassName);
    }
  }
}","private void __assertPermissionValid(SQLConnection connection,String resourceClassName,ResourcePermission resourcePermission){
  if (resourcePermission.isSystemPermission()) {
    if (ResourcePermissions.IMPERSONATE.equals(resourcePermission.getPermissionName()) || ResourcePermissions.RESET_CREDENTIALS.equals(resourcePermission.getPermissionName())) {
      final ResourceClassInternalInfo resourceClassInfo=resourceClassPersister.getResourceClassInfo(connection,resourceClassName);
      if (!resourceClassInfo.isAuthenticatable()) {
        throw new IllegalArgumentException(""String_Node_Str"" + String.valueOf(resourcePermission) + ""String_Node_Str""+ resourceClassName);
      }
    }
  }
 else {
    final List<String> permissionNames=resourceClassPermissionPersister.getPermissionNames(connection,resourceClassName);
    if (!permissionNames.contains(resourcePermission.getPermissionName())) {
      throw new IllegalArgumentException(""String_Node_Str"" + resourcePermission + ""String_Node_Str""+ resourceClassName);
    }
  }
}"
59217,"@Ignore @Test public void assertResourceCreatePermission_superUserInvalidPermission_shouldFailAsSystemResource(){
  authenticateSystemResource();
  final String resourceClassName=generateResourceClass(false,false);
  final Set<ResourceCreatePermission> allResourceCreatePermissionsForResourceClass=accessControlContext.getEffectiveResourceCreatePermissions(SYS_RESOURCE,resourceClassName);
  assertThat(allResourceCreatePermissionsForResourceClass.isEmpty(),is(true));
  try {
    accessControlContext.assertResourceCreatePermission(SYS_RESOURCE,resourceClassName,ResourceCreatePermissions.getInstance(ResourcePermissions.getInstance(ResourcePermissions.RESET_CREDENTIALS)));
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage().toLowerCase(),containsString(""String_Node_Str""));
  }
  try {
    accessControlContext.assertResourceCreatePermission(SYS_RESOURCE,resourceClassName,ResourceCreatePermissions.getInstance(ResourcePermissions.getInstance(ResourcePermissions.IMPERSONATE)));
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage().toLowerCase(),containsString(""String_Node_Str""));
  }
  final String domainName=generateDomain();
  final Set<ResourceCreatePermission> allResourceCreatePermissionsForResourceClassAndDomain=accessControlContext.getEffectiveResourceCreatePermissions(SYS_RESOURCE,resourceClassName,domainName);
  assertThat(allResourceCreatePermissionsForResourceClassAndDomain.isEmpty(),is(true));
  try {
    accessControlContext.assertResourceCreatePermission(SYS_RESOURCE,resourceClassName,ResourceCreatePermissions.getInstance(ResourcePermissions.getInstance(ResourcePermissions.RESET_CREDENTIALS)),domainName);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage().toLowerCase(),containsString(""String_Node_Str""));
  }
  try {
    accessControlContext.assertResourceCreatePermission(SYS_RESOURCE,resourceClassName,ResourceCreatePermissions.getInstance(ResourcePermissions.getInstance(ResourcePermissions.IMPERSONATE)),domainName);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage().toLowerCase(),containsString(""String_Node_Str""));
  }
}","@Test public void assertResourceCreatePermission_superUserInvalidPermission_shouldFailAsSystemResource(){
  authenticateSystemResource();
  final String resourceClassName=generateResourceClass(false,false);
  final Set<ResourceCreatePermission> allResourceCreatePermissionsForResourceClass=accessControlContext.getEffectiveResourceCreatePermissions(SYS_RESOURCE,resourceClassName);
  assertThat(allResourceCreatePermissionsForResourceClass.isEmpty(),is(true));
  try {
    accessControlContext.assertResourceCreatePermission(SYS_RESOURCE,resourceClassName,ResourceCreatePermissions.getInstance(ResourcePermissions.getInstance(ResourcePermissions.RESET_CREDENTIALS)));
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage().toLowerCase(),containsString(""String_Node_Str""));
  }
  try {
    accessControlContext.assertResourceCreatePermission(SYS_RESOURCE,resourceClassName,ResourceCreatePermissions.getInstance(ResourcePermissions.getInstance(ResourcePermissions.IMPERSONATE)));
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage().toLowerCase(),containsString(""String_Node_Str""));
  }
  final String domainName=generateDomain();
  final Set<ResourceCreatePermission> allResourceCreatePermissionsForResourceClassAndDomain=accessControlContext.getEffectiveResourceCreatePermissions(SYS_RESOURCE,resourceClassName,domainName);
  assertThat(allResourceCreatePermissionsForResourceClassAndDomain.isEmpty(),is(true));
  try {
    accessControlContext.assertResourceCreatePermission(SYS_RESOURCE,resourceClassName,ResourceCreatePermissions.getInstance(ResourcePermissions.getInstance(ResourcePermissions.RESET_CREDENTIALS)),domainName);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage().toLowerCase(),containsString(""String_Node_Str""));
  }
  try {
    accessControlContext.assertResourceCreatePermission(SYS_RESOURCE,resourceClassName,ResourceCreatePermissions.getInstance(ResourcePermissions.getInstance(ResourcePermissions.IMPERSONATE)),domainName);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage().toLowerCase(),containsString(""String_Node_Str""));
  }
}"
59218,"@Test public void createResourcePermission_caseSensitiveConsistent(){
  authenticateSystemResource();
  final String permissionNameBase=generateUniquePermissionName();
  final String permissionName_lower=permissionNameBase + ""String_Node_Str"";
  final String permissionName_UPPER=permissionNameBase + ""String_Node_Str"";
  final String resourceClassNameBase=generateUniquePermissionName();
  final String resourceClassName_lower=resourceClassNameBase + ""String_Node_Str"";
  accessControlContext.createResourceClass(resourceClassName_lower,false,false);
  List<String> permissionNames;
  if (isDatabaseCaseSensitive()) {
    final String resourceClassName_UPPER=resourceClassNameBase + ""String_Node_Str"";
    accessControlContext.createResourceClass(resourceClassName_UPPER,false,false);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.isEmpty(),is(true));
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_UPPER);
    assertThat(permissionNames.isEmpty(),is(true));
    accessControlContext.createResourcePermission(resourceClassName_lower,permissionName_lower);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.size(),is(1));
    assertThat(permissionNames,hasItem(permissionName_lower));
    assertThat(permissionNames,not(hasItem(permissionName_UPPER)));
    accessControlContext.createResourcePermission(resourceClassName_UPPER,permissionName_lower);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_UPPER);
    assertThat(permissionNames.size(),is(1));
    assertThat(permissionNames,hasItem(permissionName_lower));
    assertThat(permissionNames,not(hasItem(permissionName_UPPER)));
    accessControlContext.createResourcePermission(resourceClassName_lower,permissionName_UPPER);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.size(),is(2));
    assertThat(permissionNames,hasItems(permissionName_lower,permissionName_UPPER));
    accessControlContext.createResourcePermission(resourceClassName_UPPER,permissionName_UPPER);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_UPPER);
    assertThat(permissionNames.size(),is(2));
    assertThat(permissionNames,hasItems(permissionName_lower,permissionName_UPPER));
  }
 else {
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.isEmpty(),is(true));
    accessControlContext.createResourcePermission(resourceClassName_lower,permissionName_lower);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.size(),is(1));
    assertThat(permissionNames,hasItem(permissionName_lower));
    assertThat(permissionNames,not(hasItem(permissionName_UPPER)));
    accessControlContext.createResourcePermission(resourceClassName_lower,permissionName_UPPER);
    fail(""String_Node_Str"");
  }
}","@Test public void createResourcePermission_caseSensitiveConsistent(){
  authenticateSystemResource();
  final String permissionNameBase=generateUniquePermissionName();
  final String permissionName_lower=permissionNameBase + ""String_Node_Str"";
  final String permissionName_UPPER=permissionNameBase + ""String_Node_Str"";
  final String resourceClassNameBase=generateUniquePermissionName();
  final String resourceClassName_lower=resourceClassNameBase + ""String_Node_Str"";
  accessControlContext.createResourceClass(resourceClassName_lower,false,false);
  List<String> permissionNames;
  if (isDatabaseCaseSensitive()) {
    final String resourceClassName_UPPER=resourceClassNameBase + ""String_Node_Str"";
    accessControlContext.createResourceClass(resourceClassName_UPPER,false,false);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.isEmpty(),is(true));
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_UPPER);
    assertThat(permissionNames.isEmpty(),is(true));
    accessControlContext.createResourcePermission(resourceClassName_lower,permissionName_lower);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.size(),is(1));
    assertThat(permissionNames,hasItem(permissionName_lower));
    assertThat(permissionNames,not(hasItem(permissionName_UPPER)));
    accessControlContext.createResourcePermission(resourceClassName_UPPER,permissionName_lower);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_UPPER);
    assertThat(permissionNames.size(),is(1));
    assertThat(permissionNames,hasItem(permissionName_lower));
    assertThat(permissionNames,not(hasItem(permissionName_UPPER)));
    accessControlContext.createResourcePermission(resourceClassName_lower,permissionName_UPPER);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.size(),is(2));
    assertThat(permissionNames,hasItems(permissionName_lower,permissionName_UPPER));
    accessControlContext.createResourcePermission(resourceClassName_UPPER,permissionName_UPPER);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_UPPER);
    assertThat(permissionNames.size(),is(2));
    assertThat(permissionNames,hasItems(permissionName_lower,permissionName_UPPER));
  }
 else {
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.isEmpty(),is(true));
    accessControlContext.createResourcePermission(resourceClassName_lower,permissionName_lower);
    permissionNames=accessControlContext.getResourcePermissionNames(resourceClassName_lower);
    assertThat(permissionNames.size(),is(1));
    assertThat(permissionNames,hasItem(permissionName_lower));
    assertThat(permissionNames,not(hasItem(permissionName_UPPER)));
    try {
      accessControlContext.createResourcePermission(resourceClassName_lower,permissionName_UPPER);
      fail(""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.getMessage().toLowerCase(),containsString(""String_Node_Str""));
    }
  }
}"
59219,"private void assertPasswordEmpty(String password) throws AccessControlException {
  if (password != null && !password.isEmpty()) {
    throw new AccessControlException(""String_Node_Str"",true);
  }
}","private void assertPasswordEmpty(String password) throws AccessControlException {
  if (password != null && !password.isEmpty()) {
    throw new AccessControlException(""String_Node_Str"");
  }
}"
59220,"private void assertPasswordOK(String password) throws AccessControlException {
  if (password == null) {
    throw new AccessControlException(""String_Node_Str"",true);
  }
  if (password.length() != password.trim().length()) {
    throw new AccessControlException(""String_Node_Str"",true);
  }
  if (password.length() < 6) {
    throw new AccessControlException(""String_Node_Str"",true);
  }
}","private void assertPasswordOK(String password) throws AccessControlException {
  if (password == null) {
    throw new AccessControlException(""String_Node_Str"");
  }
  if (password.length() != password.trim().length()) {
    throw new AccessControlException(""String_Node_Str"");
  }
  if (password.length() < 6) {
    throw new AccessControlException(""String_Node_Str"");
  }
}"
59221,"private void assertParentDomainSpecified(String domainName) throws AccessControlException {
  if (domainName == null || domainName.isEmpty()) {
    throw new AccessControlException(""String_Node_Str"",true);
  }
}","private void assertParentDomainSpecified(String domainName) throws AccessControlException {
  if (domainName == null || domainName.isEmpty()) {
    throw new AccessControlException(""String_Node_Str"");
  }
}"
59222,"private void assertDomainSpecified(String domainName) throws AccessControlException {
  if (domainName == null || domainName.trim().isEmpty()) {
    throw new AccessControlException(""String_Node_Str"",true);
  }
}","private void assertDomainSpecified(String domainName) throws AccessControlException {
  if (domainName == null || domainName.trim().isEmpty()) {
    throw new AccessControlException(""String_Node_Str"");
  }
}"
59223,"protected void preSerialize(){
  this.dataSource=null;
  this.connection=null;
}","protected void preSerialize(){
  this.dataSource=null;
  this.connection=null;
  this.passwordEncryptor=null;
}"
59224,"protected void postDeserialize(Connection connection){
  this.dataSource=null;
  this.connection=connection;
}","protected void postDeserialize(Connection connection){
  this.dataSource=null;
  this.connection=connection;
  this.passwordEncryptor=new StrongCleanablePasswordEncryptor();
}"
59225,"public static TestSuite suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_unauthenticatedApiCalls.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_authenticate.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_unauthenticate.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setCredentials.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createResourceClass.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getDomainDescendants.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createDomain.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createResourceClassPermission.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createResource.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createAuthenticatableResource.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setDomainCreatePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveDomainCreatePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setDomainPermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveDomainPermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setResourceCreatePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveResourceCreatePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setResourcePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveResourcePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setGlobalPermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveGlobalPermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getResourcesByPermission.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_assertPostCreateResourcePermission.class));
  return suite;
}","public static TestSuite suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_serialize.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_unauthenticatedApiCalls.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_authenticate.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_unauthenticate.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setCredentials.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createResourceClass.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getDomainDescendants.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createDomain.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createResourceClassPermission.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createResource.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_createAuthenticatableResource.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setDomainCreatePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveDomainCreatePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setDomainPermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveDomainPermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setResourceCreatePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveResourceCreatePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setResourcePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveResourcePermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_setGlobalPermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getEffectiveGlobalPermissions.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_getResourcesByPermission.class));
  suite.addTest(new JUnit4TestAdapter(TestAccessControl_assertPostCreateResourcePermission.class));
  return suite;
}"
59226,"public void attachShutDownHookForceStopDockerContainers(@Observes(precedence=200) BeforeSuite event,final CubeRegistry cubeRegistry){
  Runtime.getRuntime().addShutdownHook(new Thread(() -> {
    final List<Cube<?>> cubes=cubeRegistry.getCubes();
    for (    Cube cube : cubes) {
      cube.stop();
      cube.destroy();
    }
  }
));
}","public void attachShutDownHookForceStopDockerContainers(@Observes(precedence=200) BeforeSuite event,final CubeRegistry cubeRegistry){
  Runtime.getRuntime().addShutdownHook(new Thread(() -> {
    final List<Cube<?>> cubes=cubeRegistry.getCubes();
    for (    Cube cube : cubes) {
      try {
        cube.stop();
      }
 catch (      final Throwable e) {
        Logger.getLogger(ForceStopDockerContainersShutdownHook.class.getName()).log(Level.WARNING,""String_Node_Str"" + cube.getId(),e);
      }
 finally {
        try {
          cube.destroy();
        }
 catch (        final Throwable ignore) {
        }
      }
    }
  }
));
}"
59227,"@Override public boolean call(){
  try {
    urlConnection=(HttpURLConnection)url.openConnection();
    urlConnection.connect();
    int connectionResponseCode=urlConnection.getResponseCode();
    if (responseCode != connectionResponseCode) {
      return false;
    }
    if (matcher != null) {
      String content=IOUtil.asString(urlConnection.getInputStream());
      if (matcher.startsWith(REGEXP_PREFIX)) {
        String pattern=matcher.substring(REGEXP_PREFIX.length());
        final boolean matches=Pattern.compile(pattern,Pattern.DOTALL).matcher(content).matches();
        if (!matches)         return false;
      }
 else {
        final boolean matches=content.startsWith(matcher);
        if (!matches)         return false;
      }
    }
    if (headers != null) {
      final Set<String> keys=headers.keySet();
      for (      String key : keys) {
        if (urlConnection.getHeaderField(key) != null) {
          String connectionHeaderValue=urlConnection.getHeaderField(key);
          if (!connectionHeaderValue.equals(headers.get(key))) {
            return false;
          }
        }
 else {
          return false;
        }
      }
    }
  }
 catch (  IOException e) {
    return false;
  }
  return true;
}","@Override public boolean call(){
  try {
    urlConnection=(HttpURLConnection)url.openConnection();
    urlConnection.connect();
    int connectionResponseCode=urlConnection.getResponseCode();
    if (responseCode != connectionResponseCode) {
      return false;
    }
    if (matcher != null) {
      String content=IOUtil.asString(urlConnection.getInputStream());
      if (matcher.startsWith(REGEXP_PREFIX)) {
        String pattern=matcher.substring(REGEXP_PREFIX.length());
        final boolean matches=Pattern.compile(pattern,Pattern.DOTALL).matcher(content).matches();
        if (!matches)         return false;
      }
 else {
        final boolean matches=content.startsWith(matcher);
        if (!matches)         return false;
      }
    }
    if (headers != null) {
      final Set<String> keys=headers.keySet();
      for (      String key : keys) {
        if (urlConnection.getHeaderField(key) != null) {
          String connectionHeaderValue=urlConnection.getHeaderField(key);
          if (!connectionHeaderValue.equals(headers.get(key))) {
            return false;
          }
        }
 else {
          return false;
        }
      }
    }
  }
 catch (  IOException e) {
    return false;
  }
 finally {
    if (urlConnection != null) {
      urlConnection.disconnect();
    }
  }
  return true;
}"
59228,"@Override public boolean await(){
  return Ping.ping(pollIterations,getSleepTime(),getTimeUnit(),new PingCommand(){
    @Override public boolean call(){
      try {
        urlConnection=(HttpURLConnection)url.openConnection();
        urlConnection.connect();
        int connectionResponseCode=urlConnection.getResponseCode();
        if (responseCode != connectionResponseCode) {
          return false;
        }
        if (matcher != null) {
          String content=IOUtil.asString(urlConnection.getInputStream());
          if (matcher.startsWith(REGEXP_PREFIX)) {
            String pattern=matcher.substring(REGEXP_PREFIX.length());
            final boolean matches=Pattern.compile(pattern,Pattern.DOTALL).matcher(content).matches();
            if (!matches)             return false;
          }
 else {
            final boolean matches=content.startsWith(matcher);
            if (!matches)             return false;
          }
        }
        if (headers != null) {
          final Set<String> keys=headers.keySet();
          for (          String key : keys) {
            if (urlConnection.getHeaderField(key) != null) {
              String connectionHeaderValue=urlConnection.getHeaderField(key);
              if (!connectionHeaderValue.equals(headers.get(key))) {
                return false;
              }
            }
 else {
              return false;
            }
          }
        }
      }
 catch (      IOException e) {
        return false;
      }
      return true;
    }
  }
);
}","@Override public boolean await(){
  return Ping.ping(pollIterations,getSleepTime(),getTimeUnit(),new PingCommand(){
    @Override public boolean call(){
      try {
        urlConnection=(HttpURLConnection)url.openConnection();
        urlConnection.connect();
        int connectionResponseCode=urlConnection.getResponseCode();
        if (responseCode != connectionResponseCode) {
          return false;
        }
        if (matcher != null) {
          String content=IOUtil.asString(urlConnection.getInputStream());
          if (matcher.startsWith(REGEXP_PREFIX)) {
            String pattern=matcher.substring(REGEXP_PREFIX.length());
            final boolean matches=Pattern.compile(pattern,Pattern.DOTALL).matcher(content).matches();
            if (!matches)             return false;
          }
 else {
            final boolean matches=content.startsWith(matcher);
            if (!matches)             return false;
          }
        }
        if (headers != null) {
          final Set<String> keys=headers.keySet();
          for (          String key : keys) {
            if (urlConnection.getHeaderField(key) != null) {
              String connectionHeaderValue=urlConnection.getHeaderField(key);
              if (!connectionHeaderValue.equals(headers.get(key))) {
                return false;
              }
            }
 else {
              return false;
            }
          }
        }
      }
 catch (      IOException e) {
        return false;
      }
 finally {
        if (urlConnection != null) {
          urlConnection.disconnect();
        }
      }
      return true;
    }
  }
);
}"
59229,"protected String[] getAllowedSuffixes(){
  return getAllowedSuffixes();
}","protected String[] getAllowedSuffixes(){
  return ALLOWED_SUFFIXES;
}"
59230,"public PollingAwaitStrategy(Cube<?> cube,DockerClientExecutor dockerClientExecutor,Await params){
  super(params.getSleepPollingTime());
  this.cube=cube;
  this.dockerClientExecutor=dockerClientExecutor;
  if (params.getIterations() != null) {
    this.pollIterations=params.getIterations();
  }
  if (params.getType() != null) {
    this.type=params.getType();
  }
  if (params.getPorts() != null) {
    this.ports=params.getPorts();
  }
}","public PollingAwaitStrategy(Cube<?> cube,DockerClientExecutor dockerClientExecutor,Await params){
  super(params.getSleepPollingTime());
  this.cube=cube;
  this.dockerClientExecutor=dockerClientExecutor;
  if (params.getIterations() != null) {
    this.pollIterations=params.getIterations();
  }
  if (params.getType() != null) {
    this.type=params.getType();
  }
  if (params.getPorts() != null && params.getPorts().size() > 0) {
    this.ports=params.getPorts();
  }
}"
59231,"private CubeContainer createConfigurationFromDockerfie(String[] portBinding,Set<String> links,CubeDockerFile cubeContainerClazzAnnotation,File dockerfileLocation,Environment[] environments){
  CubeContainer configuration=new CubeContainer();
  List<PortBinding> bindings=new ArrayList<PortBinding>();
  for (  String binding : portBinding) {
    bindings.add(PortBinding.valueOf(binding));
  }
  configuration.setPortBindings(bindings);
  if (links.size() > 0) {
    configuration.setLinks(org.arquillian.cube.docker.impl.client.config.Link.valuesOf(links));
  }
  if (environments != null) {
    final List<String> collectEnvironments=Arrays.stream(environments).map(environment -> environment.value()).collect(Collectors.toList());
    configuration.setEnv(collectEnvironments);
  }
  BuildImage dockerfileConfiguration=new BuildImage(dockerfileLocation.getAbsolutePath(),null,cubeContainerClazzAnnotation.nocache(),cubeContainerClazzAnnotation.remove());
  configuration.setBuildImage(dockerfileConfiguration);
  return configuration;
}","private CubeContainer createConfigurationFromDockerfie(String[] portBinding,Integer[] awaitPorts,Set<String> links,CubeDockerFile cubeContainerClazzAnnotation,File dockerfileLocation,Environment[] environments){
  CubeContainer configuration=new CubeContainer();
  List<PortBinding> bindings=new ArrayList<PortBinding>();
  for (  String binding : portBinding) {
    bindings.add(PortBinding.valueOf(binding));
  }
  configuration.setPortBindings(bindings);
  if (links.size() > 0) {
    configuration.setLinks(org.arquillian.cube.docker.impl.client.config.Link.valuesOf(links));
  }
  if (environments != null) {
    final List<String> collectEnvironments=Arrays.stream(environments).map(environment -> environment.value()).collect(Collectors.toList());
    configuration.setEnv(collectEnvironments);
  }
  BuildImage dockerfileConfiguration=new BuildImage(dockerfileLocation.getAbsolutePath(),null,cubeContainerClazzAnnotation.nocache(),cubeContainerClazzAnnotation.remove());
  configuration.setBuildImage(dockerfileConfiguration);
  final Await await=createAwait(awaitPorts);
  configuration.setAwait(await);
  return configuration;
}"
59232,"private CubeContainer createConfigurationFromImage(String[] portBinding,Set<String> links,Image image,File dockerfileLocation,Environment[] environments){
  CubeContainer configuration=new CubeContainer();
  List<PortBinding> bindings=new ArrayList<PortBinding>();
  for (  String binding : portBinding) {
    bindings.add(PortBinding.valueOf(binding));
  }
  configuration.setPortBindings(bindings);
  if (links.size() > 0) {
    configuration.setLinks(org.arquillian.cube.docker.impl.client.config.Link.valuesOf(links));
  }
  if (environments != null) {
    final List<String> collectEnvironments=Arrays.stream(environments).map(environment -> environment.value()).collect(Collectors.toList());
    configuration.setEnv(collectEnvironments);
  }
  configuration.setImage(org.arquillian.cube.docker.impl.client.config.Image.valueOf(image.value()));
  return configuration;
}","private CubeContainer createConfigurationFromImage(String[] portBinding,Integer[] awaitPorts,Set<String> links,Image image,File dockerfileLocation,Environment[] environments){
  CubeContainer configuration=new CubeContainer();
  List<PortBinding> bindings=new ArrayList<PortBinding>();
  for (  String binding : portBinding) {
    bindings.add(PortBinding.valueOf(binding));
  }
  configuration.setPortBindings(bindings);
  if (links.size() > 0) {
    configuration.setLinks(org.arquillian.cube.docker.impl.client.config.Link.valuesOf(links));
  }
  if (environments != null) {
    final List<String> collectEnvironments=Arrays.stream(environments).map(environment -> environment.value()).collect(Collectors.toList());
    configuration.setEnv(collectEnvironments);
  }
  configuration.setImage(org.arquillian.cube.docker.impl.client.config.Image.valueOf(image.value()));
  final Await await=createAwait(awaitPorts);
  configuration.setAwait(await);
  return configuration;
}"
59233,"private org.arquillian.cube.spi.Cube<?> createCubeFromDockerfile(String cubeName,String[] portBinding,Set<String> links,CubeDockerFile cubeContainerClazzAnnotation,Environment[] environments,File dockerfileLocation,Class<?> testClass){
  CubeContainer configuration=createConfigurationFromDockerfie(portBinding,links,cubeContainerClazzAnnotation,dockerfileLocation,environments);
  DockerCube newCube=new DockerCube(cubeName,configuration,dockerClientExecutorInstance.get());
  newCube.addMetadata(IsContainerObject.class,new IsContainerObject(testClass));
  injectorInstance.get().inject(newCube);
  return newCube;
}","private org.arquillian.cube.spi.Cube<?> createCubeFromDockerfile(String cubeName,String[] portBinding,Integer[] awaitPorts,Set<String> links,CubeDockerFile cubeContainerClazzAnnotation,Environment[] environments,File dockerfileLocation,Class<?> testClass){
  CubeContainer configuration=createConfigurationFromDockerfie(portBinding,awaitPorts,links,cubeContainerClazzAnnotation,dockerfileLocation,environments);
  DockerCube newCube=new DockerCube(cubeName,configuration,dockerClientExecutorInstance.get());
  newCube.addMetadata(IsContainerObject.class,new IsContainerObject(testClass));
  injectorInstance.get().inject(newCube);
  return newCube;
}"
59234,"private org.arquillian.cube.spi.Cube<?> createCubeFromImage(String cubeName,String[] portBinding,Set<String> links,Image image,Environment[] environment,File dockerfileLocation,Class<?> testClass){
  final CubeContainer configuration=createConfigurationFromImage(portBinding,links,image,dockerfileLocation,environment);
  DockerCube newCube=new DockerCube(cubeName,configuration,dockerClientExecutorInstance.get());
  newCube.addMetadata(IsContainerObject.class,new IsContainerObject(testClass));
  injectorInstance.get().inject(newCube);
  return newCube;
}","private org.arquillian.cube.spi.Cube<?> createCubeFromImage(String cubeName,String[] portBinding,Integer[] awaitPorts,Set<String> links,Image image,Environment[] environment,File dockerfileLocation,Class<?> testClass){
  final CubeContainer configuration=createConfigurationFromImage(portBinding,awaitPorts,links,image,dockerfileLocation,environment);
  DockerCube newCube=new DockerCube(cubeName,configuration,dockerClientExecutorInstance.get());
  newCube.addMetadata(IsContainerObject.class,new IsContainerObject(testClass));
  injectorInstance.get().inject(newCube);
  return newCube;
}"
59235,"/** 
 * @param testCase
 * @param field
 * @return returns the name of the cube if this cube would be linked by its parent, or null
 * @throws IllegalAccessException
 * @throws IOException
 * @throws InvocationTargetException
 */
private String enrichField(Object testCase,Field field) throws IllegalAccessException, IOException, InvocationTargetException {
  final Object cubeContainerObject=field.get(testCase);
  if (cubeContainerObject == null) {
    final Cube cubeAnnotation=field.getAnnotation(Cube.class);
    final Class<?> cubeContainerClazz=field.getType();
    final String cubeName=getCubeName(cubeAnnotation,cubeContainerClazz);
    final String[] cubePortBinding=getPortBindings(cubeAnnotation,cubeContainerClazz);
    final List<Method> methodsWithCubeDockerFile=ReflectionUtil.getMethodsWithAnnotation(cubeContainerClazz,CubeDockerFile.class);
    if (methodsWithCubeDockerFile.size() > 1) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",CubeDockerFile.class.getSimpleName(),CubeDockerFile.class.getSimpleName(),methodsWithCubeDockerFile));
    }
    if ((methodsWithCubeDockerFile.size() == 1 || cubeContainerClazz.isAnnotationPresent(CubeDockerFile.class)) && cubeContainerClazz.isAnnotationPresent(Image.class)) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",cubeContainerClazz.getSimpleName(),Image.class.getSimpleName(),CubeDockerFile.class.getSimpleName()));
    }
    File output=null;
    boolean imageSet=false;
    CubeDockerFile cubeContainerClazzAnnotation=null;
    if (methodsWithCubeDockerFile.size() == 1) {
      Method annotatedMethodWithCubeDockerFile=methodsWithCubeDockerFile.get(0);
      cubeContainerClazzAnnotation=annotatedMethodWithCubeDockerFile.getAnnotation(CubeDockerFile.class);
      final Object archive=annotatedMethodWithCubeDockerFile.invoke(null,new Object[0]);
      if (archive instanceof Archive) {
        Archive<?> genericArchive=(Archive<?>)archive;
        output=createTemporalDirectoryForCopyingDockerfile(cubeContainerClazz,cubeName);
        logger.finer(String.format(""String_Node_Str"",output,cubeName));
        genericArchive.as(ExplodedExporter.class).exportExplodedInto(output);
      }
    }
 else {
      if (cubeContainerClazz.isAnnotationPresent(CubeDockerFile.class)) {
        cubeContainerClazzAnnotation=cubeContainerClazz.getAnnotation(CubeDockerFile.class);
        output=createTemporalDirectoryForCopyingDockerfile(cubeContainerClazz,cubeName);
        logger.finer(String.format(""String_Node_Str"",output,cubeName));
        DockerFileUtil.copyDockerfileDirectory(cubeContainerClazz,cubeContainerClazzAnnotation,output);
      }
 else {
        if (!cubeContainerClazz.isAnnotationPresent(Image.class)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",testCase.getClass().getName(),cubeContainerClazz.getName(),CubeDockerFile.class.getSimpleName(),Image.class.getSimpleName()));
        }
        imageSet=true;
      }
    }
    final Object containerObjectInstance=ReflectionUtil.newInstance(cubeContainerClazz.getName(),new Class[0],new Class[0],cubeContainerClazz);
    enrichContainerObject(containerObjectInstance);
    field.set(testCase,containerObjectInstance);
    final Set<String> links=enrichAndReturnLinks(containerObjectInstance);
    org.arquillian.cube.spi.Cube<?> cube;
    if (imageSet) {
      cube=createCubeFromImage(cubeName,cubePortBinding,links,cubeContainerClazz.getAnnotation(Image.class),cubeContainerClazz.getAnnotationsByType(Environment.class),output,testCase.getClass());
    }
 else {
      cube=createCubeFromDockerfile(cubeName,cubePortBinding,links,cubeContainerClazzAnnotation,cubeContainerClazz.getAnnotationsByType(Environment.class),output,testCase.getClass());
    }
    logger.finer(String.format(""String_Node_Str"",cubeName,cube.configuration()));
    cubeRegistryInstance.get().addCube(cube);
    CubeController cubeController=cubeControllerInstance.get();
    cubeController.create(cubeName);
    cubeController.start(cubeName);
    enrichHostPort(containerObjectInstance,cube);
    return link(field,cubeName);
  }
  return null;
}","/** 
 * @param testCase
 * @param field
 * @return returns the name of the cube if this cube would be linked by its parent, or null
 * @throws IllegalAccessException
 * @throws IOException
 * @throws InvocationTargetException
 */
private String enrichField(Object testCase,Field field) throws IllegalAccessException, IOException, InvocationTargetException {
  final Object cubeContainerObject=field.get(testCase);
  if (cubeContainerObject == null) {
    final Cube cubeAnnotation=field.getAnnotation(Cube.class);
    final Class<?> cubeContainerClazz=field.getType();
    final List<Method> methodsWithCubeDockerFile=ReflectionUtil.getMethodsWithAnnotation(cubeContainerClazz,CubeDockerFile.class);
    if (methodsWithCubeDockerFile.size() > 1) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",CubeDockerFile.class.getSimpleName(),CubeDockerFile.class.getSimpleName(),methodsWithCubeDockerFile));
    }
    if ((methodsWithCubeDockerFile.size() == 1 || cubeContainerClazz.isAnnotationPresent(CubeDockerFile.class)) && cubeContainerClazz.isAnnotationPresent(Image.class)) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",cubeContainerClazz.getSimpleName(),Image.class.getSimpleName(),CubeDockerFile.class.getSimpleName()));
    }
    File output=null;
    boolean imageSet=false;
    CubeDockerFile cubeContainerClazzAnnotation=null;
    final String cubeName=getCubeName(cubeAnnotation,cubeContainerClazz);
    if (methodsWithCubeDockerFile.size() == 1) {
      Method annotatedMethodWithCubeDockerFile=methodsWithCubeDockerFile.get(0);
      cubeContainerClazzAnnotation=annotatedMethodWithCubeDockerFile.getAnnotation(CubeDockerFile.class);
      final Object archive=annotatedMethodWithCubeDockerFile.invoke(null,new Object[0]);
      if (archive instanceof Archive) {
        Archive<?> genericArchive=(Archive<?>)archive;
        output=createTemporalDirectoryForCopyingDockerfile(cubeContainerClazz,cubeName);
        logger.finer(String.format(""String_Node_Str"",output,cubeName));
        genericArchive.as(ExplodedExporter.class).exportExplodedInto(output);
      }
    }
 else {
      if (cubeContainerClazz.isAnnotationPresent(CubeDockerFile.class)) {
        cubeContainerClazzAnnotation=cubeContainerClazz.getAnnotation(CubeDockerFile.class);
        output=createTemporalDirectoryForCopyingDockerfile(cubeContainerClazz,cubeName);
        logger.finer(String.format(""String_Node_Str"",output,cubeName));
        DockerFileUtil.copyDockerfileDirectory(cubeContainerClazz,cubeContainerClazzAnnotation,output);
      }
 else {
        if (!cubeContainerClazz.isAnnotationPresent(Image.class)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",testCase.getClass().getName(),cubeContainerClazz.getName(),CubeDockerFile.class.getSimpleName(),Image.class.getSimpleName()));
        }
        imageSet=true;
      }
    }
    final Object containerObjectInstance=ReflectionUtil.newInstance(cubeContainerClazz.getName(),new Class[0],new Class[0],cubeContainerClazz);
    enrichContainerObject(containerObjectInstance);
    field.set(testCase,containerObjectInstance);
    final Set<String> links=enrichAndReturnLinks(containerObjectInstance);
    final String[] cubePortBinding=getPortBindings(cubeAnnotation,cubeContainerClazz);
    final int[] awaitPorts=getAwaitPorts(cubeAnnotation,cubeContainerClazz);
    final Environment[] environmentVariables=getEnvironmentAnnotations(field,cubeContainerClazz);
    org.arquillian.cube.spi.Cube<?> cube;
    if (imageSet) {
      cube=createCubeFromImage(cubeName,cubePortBinding,ArrayUtils.toObject(awaitPorts),links,cubeContainerClazz.getAnnotation(Image.class),environmentVariables,output,testCase.getClass());
    }
 else {
      cube=createCubeFromDockerfile(cubeName,cubePortBinding,ArrayUtils.toObject(awaitPorts),links,cubeContainerClazzAnnotation,environmentVariables,output,testCase.getClass());
    }
    logger.finer(String.format(""String_Node_Str"",cubeName,cube.configuration()));
    cubeRegistryInstance.get().addCube(cube);
    CubeController cubeController=cubeControllerInstance.get();
    cubeController.create(cubeName);
    cubeController.start(cubeName);
    enrichHostPort(containerObjectInstance,cube);
    return link(field,cubeName);
  }
  return null;
}"
59236,"public static <T>T getTopCubeAttribute(final Class<?> source,final String nameField,final Class<? extends Annotation> annotationClass,final T defaultValue){
  return AccessController.doPrivileged(new PrivilegedAction<T>(){
    @Override public T run(){
      Method field=null;
      try {
        field=annotationClass.getMethod(nameField);
      }
 catch (      NoSuchMethodException e) {
        throw new IllegalArgumentException(e);
      }
      Class<?> nextSource=source;
      boolean foundAnnotation=false;
      while (nextSource != Object.class) {
        if (nextSource.isAnnotationPresent(annotationClass)) {
          foundAnnotation=true;
          final Annotation annotation=nextSource.getAnnotation(annotationClass);
          final T value=getValue(annotation,field);
          if (defaultValue.getClass().isArray()) {
            if (!Arrays.equals((Object[])value,(Object[])defaultValue)) {
              return (T)value;
            }
          }
 else {
            if (!value.equals(defaultValue)) {
              return (T)value;
            }
          }
        }
        nextSource=source.getSuperclass();
      }
      return foundAnnotation ? defaultValue : null;
    }
  }
);
}","public static <T>T getTopCubeAttribute(final Class<?> source,final String nameField,final Class<? extends Annotation> annotationClass,final T defaultValue){
  return AccessController.doPrivileged((PrivilegedAction<T>)() -> {
    Method field=null;
    try {
      field=annotationClass.getMethod(nameField);
    }
 catch (    NoSuchMethodException e) {
      throw new IllegalArgumentException(e);
    }
    Class<?> nextSource=source;
    boolean foundAnnotation=false;
    while (nextSource != Object.class) {
      if (nextSource.isAnnotationPresent(annotationClass)) {
        foundAnnotation=true;
        final Annotation annotation=nextSource.getAnnotation(annotationClass);
        final T value=getValue(annotation,field);
        if (defaultValue.getClass().isArray()) {
          if (defaultValue.getClass().getComponentType().isPrimitive()) {
            if (!Arrays.equals((int[])value,(int[])defaultValue)) {
              return value;
            }
          }
 else {
            if (!Arrays.equals((Object[])value,(Object[])defaultValue)) {
              return value;
            }
          }
        }
 else {
          if (!value.equals(defaultValue)) {
            return value;
          }
        }
      }
      nextSource=nextSource.getSuperclass();
    }
    return foundAnnotation ? defaultValue : null;
  }
);
}"
59237,"@Override public Object lookup(ArquillianResource resource,Annotation... qualifiers){
  return resolveUrl();
}","@Override public Object lookup(ArquillianResource resource,Annotation... qualifiers){
  try {
    return resolveUrl();
  }
 catch (  MalformedURLException e) {
    throw new IllegalArgumentException(e);
  }
}"
59238,"private URL resolveUrl(){
  final UrlBuilder urlBuilder=UrlBuilder.create();
  final GrapheneConfiguration grapheneConfiguration=this.grapheneConfiguration.get();
  if (grapheneConfiguration.getScheme() != null) {
    urlBuilder.protocol(grapheneConfiguration.getScheme());
  }
  final CubeDockerConfiguration cubeDockerConfiguration=cubeDockerConfigurationInstance.get();
  final String configuredUrl=grapheneConfiguration.getUrl();
  if (configuredUrl != null && !configuredUrl.isEmpty()) {
    if (isAnAbsoluteUrl(configuredUrl) || startWithDockerHost(configuredUrl)) {
      String replacedWithDockerHostUrl=configuredUrl;
      if (isAnAbsoluteUrl(configuredUrl)) {
        replacedWithDockerHostUrl=configuredUrl.substring(1);
      }
      replacedWithDockerHostUrl=replacedWithDockerHostUrl.replace(""String_Node_Str"",cubeDockerConfiguration.getDockerServerIp());
      String host=resolveHost(replacedWithDockerHostUrl);
      if (!IpAddressValidator.validate(host)) {
        host=getInternalIp(cubeDockerConfiguration,host);
      }
      urlBuilder.host(host);
      int port=extractPort(replacedWithDockerHostUrl);
      if (port == NO_PORT) {
        port=8080;
      }
      urlBuilder.port(port);
      urlBuilder.context(resolveContext(replacedWithDockerHostUrl));
    }
 else {
      final SinglePortBindResolver.PortBindInfo portBindInfo=resolveBindPort(NO_PORT);
      urlBuilder.host(getInternalIp(cubeDockerConfiguration,portBindInfo.getContainerName()));
      urlBuilder.port(portBindInfo.getExposedPort());
      urlBuilder.context(configuredUrl);
    }
  }
 else {
    final SinglePortBindResolver.PortBindInfo portBindInfo=resolveBindPort(NO_PORT);
    urlBuilder.host(getInternalIp(cubeDockerConfiguration,portBindInfo.getContainerName()));
    urlBuilder.port(portBindInfo.getExposedPort());
  }
  try {
    return urlBuilder.build();
  }
 catch (  MalformedURLException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private URL resolveUrl() throws MalformedURLException {
  final UrlBuilder urlBuilder=UrlBuilder.create();
  final GrapheneConfiguration grapheneConfiguration=this.grapheneConfiguration.get();
  if (grapheneConfiguration.getScheme() != null) {
    urlBuilder.protocol(grapheneConfiguration.getScheme());
  }
  final CubeDockerConfiguration cubeDockerConfiguration=cubeDockerConfigurationInstance.get();
  final String configuredUrl=grapheneConfiguration.getUrl();
  if (configuredUrl != null && !configuredUrl.isEmpty()) {
    String replacedWithDockerHostUrl=configuredUrl;
    replacedWithDockerHostUrl=replacedWithDockerHostUrl.replace(""String_Node_Str"",cubeDockerConfiguration.getDockerServerIp());
    URL currentUrl=new URL(replacedWithDockerHostUrl);
    String host=currentUrl.getHost();
    if (!IpAddressValidator.validate(host)) {
      host=getInternalIp(cubeDockerConfiguration,host);
    }
    urlBuilder.host(host);
    int port=currentUrl.getPort();
    if (port == NO_PORT) {
      port=80;
    }
    urlBuilder.port(port);
    urlBuilder.context(currentUrl.getPath());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    return urlBuilder.build();
  }
 catch (  MalformedURLException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}"
59239,"@Test public void should_resolve_internal_ip_of_container(){
  final DockerCompositions compositions=ConfigUtil.load(SIMPLE_SCENARIO);
  when(cubeDockerConfiguration.getDockerContainersContent()).thenReturn(compositions);
  when(grapheneConfiguration.getUrl()).thenReturn(""String_Node_Str"");
  final URL url=(URL)dockerCubeCustomizableURLResourceProvider.lookup(null);
}","@Test public void should_resolve_internal_ip_of_container(){
  final DockerCompositions compositions=ConfigUtil.load(SIMPLE_SCENARIO);
  when(cubeDockerConfiguration.getDockerContainersContent()).thenReturn(compositions);
  when(grapheneConfiguration.getUrl()).thenReturn(""String_Node_Str"");
  final URL url=(URL)dockerCubeCustomizableURLResourceProvider.lookup(null);
  assertThat(url).hasProtocol(""String_Node_Str"").hasHost(""String_Node_Str"").hasPort(80).hasPath(""String_Node_Str"");
}"
59240,"@Test public void should_resolve_to_docker_host_if_no_url_provided(){
  final DockerCompositions compositions=ConfigUtil.load(SIMPLE_SCENARIO);
  when(cubeDockerConfiguration.getDockerContainersContent()).thenReturn(compositions);
  when(grapheneConfiguration.getUrl()).thenReturn(null);
  final URL url=(URL)dockerCubeCustomizableURLResourceProvider.lookup(null);
  assertThat(url).hasProtocol(""String_Node_Str"").hasHost(""String_Node_Str"").hasPort(80).hasNoPath();
}","@Test public void should_resolve_to_docker_host_if_no_url_provided(){
  final DockerCompositions compositions=ConfigUtil.load(SIMPLE_SCENARIO);
  when(cubeDockerConfiguration.getDockerContainersContent()).thenReturn(compositions);
  when(grapheneConfiguration.getUrl()).thenReturn(null);
  assertThatThrownBy(() -> {
    dockerCubeCustomizableURLResourceProvider.lookup(null);
  }
).hasMessage(""String_Node_Str"");
}"
59241,"@Ignore(""String_Node_Str"") @Test public void should_report_network_topology_of_docker_containers(){
  final TakeDockerEnvironment takeDockerEnvironment=new TakeDockerEnvironment();
  takeDockerEnvironment.propertyReportEvent=propertyReportEvent;
  Map<String,String> configuration=new HashMap<>();
  configuration.put(CubeDockerConfiguration.DOCKER_CONTAINERS,MULTIPLE_PORT_BINDING_SCENARIO);
  takeDockerEnvironment.reportDockerNetworks(new org.arquillian.cube.spi.event.lifecycle.AfterStart(""String_Node_Str""),CubeDockerConfiguration.fromMap(configuration,null),dockerClientExecutor,new ReporterConfiguration());
  verify(propertyReportEvent).fire(propertyReportEventArgumentCaptor.capture());
  final PropertyReportEvent propertyReportEvent=propertyReportEventArgumentCaptor.getValue();
  final PropertyEntry propertyEntry=propertyReportEvent.getPropertyEntry();
  assertThat(propertyEntry).isInstanceOf(GroupEntry.class);
  GroupEntry parent=(GroupEntry)propertyEntry;
  final List<PropertyEntry> rootEntries=parent.getPropertyEntries();
  assertThat(rootEntries).hasSize(1);
  final PropertyEntry networksEntry=rootEntries.get(0);
  assertThat(networksEntry).isInstanceOf(GroupEntry.class);
  GroupEntry networksGroupEntry=(GroupEntry)networksEntry;
  final List<PropertyEntry> propertyEntries=networksGroupEntry.getPropertyEntries();
  assertThat(propertyEntries).hasSize(1);
  PropertyEntry propertyScreenshotEntry=propertyEntries.get(0);
  assertThat(propertyScreenshotEntry).isInstanceOf(ScreenshotEntry.class);
  ScreenshotEntry screenshotEntry=(ScreenshotEntry)propertyScreenshotEntry;
  assertThat(screenshotEntry.getLink()).isEqualTo(""String_Node_Str"");
}","@Ignore(""String_Node_Str"") @Test public void should_report_network_topology_of_docker_containers(){
  final TakeDockerEnvironment takeDockerEnvironment=new TakeDockerEnvironment();
  takeDockerEnvironment.propertyReportEvent=propertyReportEvent;
  Map<String,String> configuration=new HashMap<>();
  configuration.put(CubeDockerConfiguration.DOCKER_CONTAINERS,MULTIPLE_PORT_BINDING_SCENARIO);
  configuration.put(""String_Node_Str"",DefinitionFormat.CUBE.name());
  takeDockerEnvironment.reportDockerNetworks(new org.arquillian.cube.spi.event.lifecycle.AfterStart(""String_Node_Str""),CubeDockerConfiguration.fromMap(configuration,null),dockerClientExecutor,new ReporterConfiguration());
  verify(propertyReportEvent).fire(propertyReportEventArgumentCaptor.capture());
  final PropertyReportEvent propertyReportEvent=propertyReportEventArgumentCaptor.getValue();
  final PropertyEntry propertyEntry=propertyReportEvent.getPropertyEntry();
  assertThat(propertyEntry).isInstanceOf(GroupEntry.class);
  GroupEntry parent=(GroupEntry)propertyEntry;
  final List<PropertyEntry> rootEntries=parent.getPropertyEntries();
  assertThat(rootEntries).hasSize(1);
  final PropertyEntry networksEntry=rootEntries.get(0);
  assertThat(networksEntry).isInstanceOf(GroupEntry.class);
  GroupEntry networksGroupEntry=(GroupEntry)networksEntry;
  final List<PropertyEntry> propertyEntries=networksGroupEntry.getPropertyEntries();
  assertThat(propertyEntries).hasSize(1);
  PropertyEntry propertyScreenshotEntry=propertyEntries.get(0);
  assertThat(propertyScreenshotEntry).isInstanceOf(ScreenshotEntry.class);
  ScreenshotEntry screenshotEntry=(ScreenshotEntry)propertyScreenshotEntry;
  assertThat(screenshotEntry.getLink()).isEqualTo(""String_Node_Str"");
}"
59242,"@Test public void shouldEnrichTestMethod() throws NoSuchMethodException {
  HostIpTestEnricher hostIpTestEnricher=new HostIpTestEnricher();
  hostIpTestEnricher.hostUriContext=new Instance<HostUriContext>(){
    @Override public HostUriContext get(){
      return new HostUriContext(""String_Node_Str"");
    }
  }
;
  MyTest test=new MyTest();
  Object[] myMethods=hostIpTestEnricher.resolve(test.getClass().getMethod(""String_Node_Str"",String.class,String.class));
  assertThat((String)myMethods[1],is(""String_Node_Str""));
}","@Test public void shouldEnrichTestMethod() throws NoSuchMethodException {
  HostIpTestEnricher hostIpTestEnricher=new HostIpTestEnricher();
  hostIpTestEnricher.hostUriContext=new Instance<HostIpContext>(){
    @Override public HostIpContext get(){
      return new HostIpContext(""String_Node_Str"");
    }
  }
;
  MyTest test=new MyTest();
  Object[] myMethods=hostIpTestEnricher.resolve(test.getClass().getMethod(""String_Node_Str"",String.class,String.class));
  assertThat((String)myMethods[1],is(""String_Node_Str""));
}"
59243,"@Override public HostUriContext get(){
  return new HostUriContext(""String_Node_Str"");
}","@Override public HostIpContext get(){
  return new HostIpContext(""String_Node_Str"");
}"
59244,"@Test public void shouldEnrichTest(){
  HostIpTestEnricher hostIpTestEnricher=new HostIpTestEnricher();
  hostIpTestEnricher.hostUriContext=new Instance<HostUriContext>(){
    @Override public HostUriContext get(){
      return new HostUriContext(""String_Node_Str"");
    }
  }
;
  MyTest test=new MyTest();
  hostIpTestEnricher.enrich(test);
  assertThat(test.hostIp,is(""String_Node_Str""));
}","@Test public void shouldEnrichTest(){
  HostIpTestEnricher hostIpTestEnricher=new HostIpTestEnricher();
  hostIpTestEnricher.hostUriContext=new Instance<HostIpContext>(){
    @Override public HostIpContext get(){
      return new HostIpContext(""String_Node_Str"");
    }
  }
;
  MyTest test=new MyTest();
  hostIpTestEnricher.enrich(test);
  assertThat(test.hostIp,is(""String_Node_Str""));
}"
59245,"private void configure(ArquillianDescriptor arquillianDescriptor){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveDockerInsideDocker(config);
  config=resolveDownloadDockerMachine(config);
  config=resolveAutoStartDockerMachine(config);
  config=resolveDefaultDockerMachine(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerIp(config);
  config=resolveTlsVerification(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config,injectorInstance.get());
  cubeConfiguration=resolveDynamicNames(cubeConfiguration);
  System.out.println(cubeConfiguration);
  hostUriContextInstanceProducer.set(new HostUriContext(cubeConfiguration.getDockerServerUri()));
  configurationProducer.set(cubeConfiguration);
}","private void configure(ArquillianDescriptor arquillianDescriptor){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveDockerInsideDocker(config);
  config=resolveDownloadDockerMachine(config);
  config=resolveAutoStartDockerMachine(config);
  config=resolveDefaultDockerMachine(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerIp(config);
  config=resolveTlsVerification(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config,injectorInstance.get());
  cubeConfiguration=resolveDynamicNames(cubeConfiguration);
  System.out.println(cubeConfiguration);
  hostUriContextInstanceProducer.set(new HostIpContext(cubeConfiguration.getDockerServerIp()));
  configurationProducer.set(cubeConfiguration);
}"
59246,"private static boolean noPreviousBindPortFound(int bindPort){
  return bindPort == -1;
}","private static boolean noPreviousBindPortFound(PortBindInfo bindPort){
  return bindPort == null;
}"
59247,"/** 
 * Method that tries to resolve a bind port by searching if there is only one binding port across all running containers
 * @param cubeDockerConfiguration where all docker configuration is exposed
 * @param excludedContainers where binding port search is ignored
 * @return binding port
 */
public static int resolveBindPort(CubeDockerConfiguration cubeDockerConfiguration,String... excludedContainers){
  final DockerCompositions dockerContainersContent=cubeDockerConfiguration.getDockerContainersContent();
  final Set<Map.Entry<String,CubeContainer>> containers=dockerContainersContent.getContainers().entrySet();
  int bindPort=-1;
  for (  Map.Entry<String,CubeContainer> cubeContainerEntry : containers) {
    if (shouldBeIgnored(cubeContainerEntry.getKey(),excludedContainers)) {
      continue;
    }
    final CubeContainer cubeContainer=cubeContainerEntry.getValue();
    if (hasMoreThanOneBindPort(cubeContainer)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (hasOnlyOneBindPort(cubeContainer)) {
      if (noPreviousBindPortFound(bindPort)) {
        bindPort=cubeContainer.getPortBindings().iterator().next().getBound();
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  if (noPreviousBindPortFound(bindPort)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return bindPort;
}","/** 
 * Method that tries to resolve a bind port by searching if there is only one binding port across all running containers
 * @param cubeDockerConfiguration where all docker configuration is exposed
 * @param excludedContainers      where binding port search is ignored
 * @return binding port
 */
public static int resolveBindPort(CubeDockerConfiguration cubeDockerConfiguration,String... excludedContainers){
  final PortBindInfo portBinding=resolvePortBindPort(cubeDockerConfiguration,excludedContainers);
  if (portBinding == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return portBinding.getBindPort();
}"
59248,"private URL resolveUrl(){
  final UrlBuilder urlBuilder=UrlBuilder.create();
  final GrapheneConfiguration grapheneConfiguration=this.grapheneConfiguration.get();
  if (grapheneConfiguration.getScheme() != null) {
    urlBuilder.protocol(grapheneConfiguration.getScheme());
  }
  final CubeDockerConfiguration cubeDockerConfiguration=cubeDockerConfigurationInstance.get();
  final String configuredUrl=grapheneConfiguration.getUrl();
  if (configuredUrl != null && !configuredUrl.isEmpty()) {
    if (isAnAbsoluteUrl(configuredUrl) || startWithDockerHost(configuredUrl)) {
      String replacedWithDockerHostUrl=configuredUrl;
      if (isAnAbsoluteUrl(configuredUrl)) {
        replacedWithDockerHostUrl=configuredUrl.substring(1);
      }
      replacedWithDockerHostUrl=replacedWithDockerHostUrl.replace(""String_Node_Str"",cubeDockerConfiguration.getDockerServerIp());
      urlBuilder.host(resolveHost(replacedWithDockerHostUrl));
      urlBuilder.port(resolvePort(replacedWithDockerHostUrl));
      urlBuilder.context(resolveContext(replacedWithDockerHostUrl));
    }
 else {
      urlBuilder.host(cubeDockerConfiguration.getDockerServerIp());
      urlBuilder.port(resolveBindPort(NO_PORT));
      urlBuilder.context(configuredUrl);
    }
  }
 else {
    urlBuilder.host(cubeDockerConfiguration.getDockerServerIp());
    urlBuilder.port(resolveBindPort(NO_PORT));
  }
  try {
    return urlBuilder.build();
  }
 catch (  MalformedURLException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","private URL resolveUrl(){
  final UrlBuilder urlBuilder=UrlBuilder.create();
  final GrapheneConfiguration grapheneConfiguration=this.grapheneConfiguration.get();
  if (grapheneConfiguration.getScheme() != null) {
    urlBuilder.protocol(grapheneConfiguration.getScheme());
  }
  final CubeDockerConfiguration cubeDockerConfiguration=cubeDockerConfigurationInstance.get();
  final String configuredUrl=grapheneConfiguration.getUrl();
  if (configuredUrl != null && !configuredUrl.isEmpty()) {
    if (isAnAbsoluteUrl(configuredUrl) || startWithDockerHost(configuredUrl)) {
      String replacedWithDockerHostUrl=configuredUrl;
      if (isAnAbsoluteUrl(configuredUrl)) {
        replacedWithDockerHostUrl=configuredUrl.substring(1);
      }
      replacedWithDockerHostUrl=replacedWithDockerHostUrl.replace(""String_Node_Str"",cubeDockerConfiguration.getDockerServerIp());
      urlBuilder.host(resolveHost(replacedWithDockerHostUrl));
      urlBuilder.port(resolvePort(replacedWithDockerHostUrl));
      urlBuilder.context(resolveContext(replacedWithDockerHostUrl));
    }
 else {
      final SinglePortBindResolver.PortBindInfo portBindInfo=resolveBindPort(NO_PORT);
      urlBuilder.host(getInternalIp(cubeDockerConfiguration,portBindInfo));
      urlBuilder.port(portBindInfo.getBindPort());
      urlBuilder.context(configuredUrl);
    }
  }
 else {
    final SinglePortBindResolver.PortBindInfo portBindInfo=resolveBindPort(NO_PORT);
    urlBuilder.host(getInternalIp(cubeDockerConfiguration,portBindInfo));
    urlBuilder.port(portBindInfo.getBindPort());
  }
  try {
    return urlBuilder.build();
  }
 catch (  MalformedURLException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
}"
59249,"private int resolveBindPort(int port){
  final CubeDockerConfiguration cubeDockerConfiguration=cubeDockerConfigurationInstance.get();
  final SeleniumContainers seleniumContainers=seleniumContainersInstance.get();
  if (port == NO_PORT) {
    return SinglePortBindResolver.resolveBindPort(cubeDockerConfiguration,seleniumContainers.getSeleniumContainerName(),seleniumContainers.getVncContainerName());
  }
 else {
    return SinglePortBindResolver.resolveBindPort(cubeDockerConfiguration,port,seleniumContainers.getSeleniumContainerName(),seleniumContainers.getVncContainerName());
  }
}","private SinglePortBindResolver.PortBindInfo resolveBindPort(int port){
  final CubeDockerConfiguration cubeDockerConfiguration=cubeDockerConfigurationInstance.get();
  final SeleniumContainers seleniumContainers=seleniumContainersInstance.get();
  if (port == NO_PORT) {
    return SinglePortBindResolver.resolvePortBindPort(cubeDockerConfiguration,seleniumContainers.getSeleniumContainerName(),seleniumContainers.getVncContainerName());
  }
 else {
    return SinglePortBindResolver.resolvePortBindPort(cubeDockerConfiguration,port,seleniumContainers.getSeleniumContainerName(),seleniumContainers.getVncContainerName());
  }
}"
59250,"private int resolvePort(String url){
  int port=extractPort(url);
  return resolveBindPort(port);
}","private int resolvePort(String url){
  int port=extractPort(url);
  final SinglePortBindResolver.PortBindInfo portBindInfo=resolveBindPort(port);
  if (portBindInfo == null) {
    return port;
  }
  return portBindInfo.getBindPort();
}"
59251,"@Before public void prepareCubeDockerConfiguration(){
  when(cubeDockerConfiguration.getDockerServerIp()).thenReturn(DOCKER_HOST);
  when(seleniumContainers.getSeleniumContainerName()).thenReturn(SeleniumContainers.SELENIUM_CONTAINER_NAME);
  when(seleniumContainers.getVncContainerName()).thenReturn(SeleniumContainers.VNC_CONTAINER_NAME);
  dockerCubeCustomizableURLResourceProvider=new DockerCubeCustomizableURLResourceProvider();
  dockerCubeCustomizableURLResourceProvider.cubeDockerConfigurationInstance=new Instance<CubeDockerConfiguration>(){
    @Override public CubeDockerConfiguration get(){
      return cubeDockerConfiguration;
    }
  }
;
  dockerCubeCustomizableURLResourceProvider.grapheneConfiguration=new Instance<GrapheneConfiguration>(){
    @Override public GrapheneConfiguration get(){
      return grapheneConfiguration;
    }
  }
;
  dockerCubeCustomizableURLResourceProvider.seleniumContainersInstance=new Instance<SeleniumContainers>(){
    @Override public SeleniumContainers get(){
      return seleniumContainers;
    }
  }
;
}","@Before public void prepareCubeDockerConfiguration(){
  when(cubeDockerConfiguration.getDockerServerIp()).thenReturn(DOCKER_HOST);
  when(seleniumContainers.getSeleniumContainerName()).thenReturn(SeleniumContainers.SELENIUM_CONTAINER_NAME);
  when(seleniumContainers.getVncContainerName()).thenReturn(SeleniumContainers.VNC_CONTAINER_NAME);
  when(hasPortBindings.getInternalIP()).thenReturn(""String_Node_Str"");
  when(cube.hasMetadata(HasPortBindings.class)).thenReturn(true);
  when(cube.getMetadata(HasPortBindings.class)).thenReturn(hasPortBindings);
  when(cubeRegistry.getCube(""String_Node_Str"")).thenReturn(cube);
  dockerCubeCustomizableURLResourceProvider=new DockerCubeCustomizableURLResourceProvider();
  dockerCubeCustomizableURLResourceProvider.cubeDockerConfigurationInstance=new Instance<CubeDockerConfiguration>(){
    @Override public CubeDockerConfiguration get(){
      return cubeDockerConfiguration;
    }
  }
;
  dockerCubeCustomizableURLResourceProvider.grapheneConfiguration=new Instance<GrapheneConfiguration>(){
    @Override public GrapheneConfiguration get(){
      return grapheneConfiguration;
    }
  }
;
  dockerCubeCustomizableURLResourceProvider.seleniumContainersInstance=new Instance<SeleniumContainers>(){
    @Override public SeleniumContainers get(){
      return seleniumContainers;
    }
  }
;
  dockerCubeCustomizableURLResourceProvider.cubeRegistryInstance=new Instance<CubeRegistry>(){
    @Override public CubeRegistry get(){
      return cubeRegistry;
    }
  }
;
}"
59252,"@Override public SeleniumContainers get(){
  return seleniumContainers;
}","@Override public CubeRegistry get(){
  return cubeRegistry;
}"
59253,"@Override public void check(RequiresDockerMachine context) throws UnsatisfiedRequirementException {
  String name=context.name();
  try {
    if (name != null && !name.isEmpty()) {
      String ip=commandLineExecutor.execCommand(""String_Node_Str"" + name);
      if (ip != null && !ip.isEmpty()) {
        throw new UnsatisfiedRequirementException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
 else {
      int machines=countLines(commandLineExecutor.execCommand(""String_Node_Str"")) - 1;
      if (machines > 0) {
        throw new UnsatisfiedRequirementException(""String_Node_Str"");
      }
    }
  }
 catch (  ExecutionException e) {
    throw new UnsatisfiedRequirementException(""String_Node_Str"");
  }
}","@Override public void check(RequiresDockerMachine context) throws UnsatisfiedRequirementException {
  String name=context.name();
  try {
    if (name != null && !name.isEmpty()) {
      String ip=commandLineExecutor.execCommand(new String[]{""String_Node_Str"",""String_Node_Str"",name});
      if (ip == null || ip.isEmpty()) {
        throw new UnsatisfiedRequirementException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
 else {
      int machines=countLines(commandLineExecutor.execCommand(new String[]{""String_Node_Str"",""String_Node_Str""})) - 1;
      if (machines > 0) {
        throw new UnsatisfiedRequirementException(""String_Node_Str"");
      }
    }
  }
 catch (  ExecutionException e) {
    throw new UnsatisfiedRequirementException(""String_Node_Str"");
  }
}"
59254,"@Override public void destroy() throws CubeControlException {
  if (state != State.STOPPED) {
    return;
  }
  try {
    lifecycle.fire(new BeforeDestroy(id));
    try {
      executor.removeContainer(id,configuration.getRemoveVolumes());
    }
 catch (    NotFoundException e) {
    }
    state=State.DESTROYED;
    lifecycle.fire(new AfterDestroy(id));
  }
 catch (  Exception e) {
    state=State.DESTORY_FAILED;
    throw CubeControlException.failedDestroy(id,e);
  }
}","@Override public void destroy() throws CubeControlException {
  if (state != State.STOPPED) {
    return;
  }
  try {
    lifecycle.fire(new BeforeDestroy(id));
    try {
      executor.removeContainer(id,configuration.getRemoveVolumes());
    }
 catch (    NotFoundException e) {
    }
catch (    NotModifiedException e) {
    }
    state=State.DESTROYED;
    lifecycle.fire(new AfterDestroy(id));
  }
 catch (  Exception e) {
    state=State.DESTORY_FAILED;
    throw CubeControlException.failedDestroy(id,e);
  }
}"
59255,"@Override public void stop() throws CubeControlException {
  if (state == State.STOPPED || state == State.PRE_RUNNING) {
    return;
  }
  try {
    lifecycle.fire(new BeforeStop(id));
    try {
      executor.stopContainer(id);
    }
 catch (    NotFoundException e) {
    }
    state=State.STOPPED;
    lifecycle.fire(new AfterStop(id));
  }
 catch (  Exception e) {
    state=State.STOP_FAILED;
    throw CubeControlException.failedStop(id,e);
  }
}","@Override public void stop() throws CubeControlException {
  if (state == State.STOPPED || state == State.PRE_RUNNING) {
    return;
  }
  try {
    lifecycle.fire(new BeforeStop(id));
    try {
      executor.stopContainer(id);
    }
 catch (    NotFoundException e) {
    }
catch (    NotModifiedException e) {
    }
    state=State.STOPPED;
    lifecycle.fire(new AfterStop(id));
  }
 catch (  Exception e) {
    state=State.STOP_FAILED;
    throw CubeControlException.failedStop(id,e);
  }
}"
59256,"@Test public void should_be_able_to_create_http_await_strategy(){
  String containerDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final CubeContainers load=ConfigUtil.load(new ByteArrayInputStream(containerDefinition.getBytes()));
  final CubeContainer tomcat=load.getContainers().get(""String_Node_Str"");
  HttpAwaitStrategy awaitStrategy=new HttpAwaitStrategy(cube,dockerClientExecutor,tomcat.getAwait());
  assertThat(awaitStrategy.getPollIterations(),is(10));
  assertThat(awaitStrategy.getUrl(),is(""String_Node_Str""));
  assertThat(awaitStrategy.getResponseCode(),is(201));
  assertThat(awaitStrategy.getMatcher(),is(""String_Node_Str""));
  assertThat((String)awaitStrategy.getHeaders().get(""String_Node_Str""),is(""String_Node_Str""));
}","@Test public void should_be_able_to_create_http_await_strategy(){
  String containerDefinition=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final DockerCompositions load=ConfigUtil.load(new ByteArrayInputStream(containerDefinition.getBytes()));
  final CubeContainer tomcat=load.getContainers().get(""String_Node_Str"");
  HttpAwaitStrategy awaitStrategy=new HttpAwaitStrategy(cube,dockerClientExecutor,tomcat.getAwait());
  assertThat(awaitStrategy.getPollIterations(),is(10));
  assertThat(awaitStrategy.getUrl(),is(""String_Node_Str""));
  assertThat(awaitStrategy.getResponseCode(),is(201));
  assertThat(awaitStrategy.getMatcher(),is(""String_Node_Str""));
  assertThat((String)awaitStrategy.getHeaders().get(""String_Node_Str""),is(""String_Node_Str""));
}"
59257,"public Top(String rootDockerFile,String rootDockerSocket){
  super();
  this.rootDockerFile=rootDockerFile;
  this.rootDockerSocket=rootDockerSocket;
  this.dockerEnvPath=Paths.get(rootDockerFile,DOCKERENV);
  this.dockerInitPath=Paths.get(rootDockerFile,DOCKERINIT);
  this.dockerSocketFile=Paths.get(rootDockerSocket,DOCKER_SOCK);
}","public Top(String rootDockerFile,String rootDockerSocket){
  super();
  this.rootDockerFile=rootDockerFile;
  this.rootDockerSocket=rootDockerSocket;
  this.dockerEnvPath=new File(rootDockerFile,DOCKERENV);
  this.dockerInitPath=new File(rootDockerFile,DOCKERINIT);
  this.dockerSocketFile=new File(rootDockerSocket,DOCKER_SOCK);
}"
59258,"/** 
 * Checks if current code is being executed inside Docker or not.
 * @return True if code is being executed inside Docker, false otherwise.
 */
public boolean isSpinning(){
  return Files.exists(dockerEnvPath) && Files.exists(dockerInitPath) && Files.exists(dockerSocketFile);
}","/** 
 * Checks if current code is being executed inside Docker or not.
 * @return True if code is being executed inside Docker, false otherwise.
 */
public boolean isSpinning(){
  return dockerEnvPath.exists() && dockerInitPath.exists() && dockerSocketFile.exists();
}"
59259,"public String buildImage(String location,Map<String,Object> params){
  BuildImageCmd buildImageCmd=createBuildCommand(location);
  configureBuildCommand(params,buildImageCmd);
  String imageId=buildImageCmd.exec(new BuildImageResultCallback()).awaitImageId();
  if (imageId == null) {
    throw new IllegalStateException(String.format(""String_Node_Str"",location));
  }
  return imageId.trim();
}","public String buildImage(String location,Map<String,Object> params){
  BuildImageCmd buildImageCmd=createBuildCommand(location);
  configureBuildCommand(params,buildImageCmd);
  String imageId=buildImageCmd.exec(new BuildImageResultCallback()).awaitImageId();
  if (imageId == null) {
    throw new IllegalStateException(String.format(""String_Node_Str"",location));
  }
  try {
    this.dockerClient.close();
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
  this.dockerClient=buildDockerClient();
  return imageId.trim();
}"
59260,"public DockerClientExecutor(CubeDockerConfiguration cubeConfiguration){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  String dockerServerUri=cubeConfiguration.getDockerServerUri();
  dockerUri=URI.create(dockerServerUri);
  dockerServerIp=cubeConfiguration.getDockerServerIp();
  configBuilder.withApiVersion(cubeConfiguration.getDockerServerVersion()).withDockerHost(dockerUri.toString());
  if (cubeConfiguration.getUsername() != null) {
    configBuilder.withRegistryUsername(cubeConfiguration.getUsername());
  }
  if (cubeConfiguration.getPassword() != null) {
    configBuilder.withRegistryPassword(cubeConfiguration.getPassword());
  }
  if (cubeConfiguration.getEmail() != null) {
    configBuilder.withRegistryEmail(cubeConfiguration.getEmail());
  }
  if (cubeConfiguration.getCertPath() != null) {
    configBuilder.withDockerCertPath(HomeResolverUtil.resolveHomeDirectoryChar(cubeConfiguration.getCertPath()));
  }
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}","public DockerClientExecutor(CubeDockerConfiguration cubeConfiguration){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  String dockerServerUri=cubeConfiguration.getDockerServerUri();
  dockerUri=URI.create(dockerServerUri);
  dockerServerIp=cubeConfiguration.getDockerServerIp();
  configBuilder.withApiVersion(cubeConfiguration.getDockerServerVersion()).withDockerHost(dockerUri.toString());
  if (cubeConfiguration.getUsername() != null) {
    configBuilder.withRegistryUsername(cubeConfiguration.getUsername());
  }
  if (cubeConfiguration.getPassword() != null) {
    configBuilder.withRegistryPassword(cubeConfiguration.getPassword());
  }
  if (cubeConfiguration.getEmail() != null) {
    configBuilder.withRegistryEmail(cubeConfiguration.getEmail());
  }
  if (cubeConfiguration.getCertPath() != null) {
    configBuilder.withDockerCertPath(HomeResolverUtil.resolveHomeDirectoryChar(cubeConfiguration.getCertPath()));
  }
  this.dockerClientConfig=configBuilder.build();
  this.cubeConfiguration=cubeConfiguration;
  this.dockerClient=buildDockerClient();
}"
59261,"public static Image valueOf(String image){
  String name=null;
  String tag=null;
  String[] parts=image.split(""String_Node_Str"");
  name=parts[0];
  if (parts.length > 1) {
    tag=parts[1];
  }
  return new Image(name,tag);
}","public static Image valueOf(String image){
  String name=null;
  String tag=null;
  String[] parts=image.split(""String_Node_Str"");
switch (parts.length) {
case 1:
case 2:
{
      String imageName=image;
      final int colonIndex=imageName.indexOf(':');
      if (colonIndex > -1) {
        name=imageName.substring(0,colonIndex);
        tag=imageName.substring(colonIndex + 1);
      }
 else {
        name=imageName;
      }
      break;
    }
case 3:
{
    String imageName=parts[2];
    final int colonIndex=imageName.indexOf(':');
    if (colonIndex > -1) {
      name=parts[0] + ""String_Node_Str"" + parts[1]+ ""String_Node_Str""+ imageName.substring(0,colonIndex);
      tag=imageName.substring(colonIndex + 1);
    }
 else {
      name=image;
    }
  }
}
return new Image(name,tag);
}"
59262,"public void pullImage(String imageName){
  PullImageCmd pullImageCmd=this.dockerClient.pullImageCmd(imageName);
  if (this.cubeConfiguration.getDockerRegistry() != null) {
    pullImageCmd.withRegistry(this.cubeConfiguration.getDockerRegistry());
  }
  int tagSeparator=imageName.indexOf(TAG_SEPARATOR);
  if (tagSeparator > 0) {
    pullImageCmd.withRepository(imageName.substring(0,tagSeparator));
    pullImageCmd.withTag(imageName.substring(tagSeparator + 1));
  }
  pullImageCmd.exec(new PullImageResultCallback()).awaitSuccess();
}","public void pullImage(String imageName){
  final Image image=Image.valueOf(imageName);
  PullImageCmd pullImageCmd=this.dockerClient.pullImageCmd(image.getName());
  if (this.cubeConfiguration.getDockerRegistry() != null) {
    pullImageCmd.withRegistry(this.cubeConfiguration.getDockerRegistry());
  }
  String tag=image.getTag();
  if (tag != null && !""String_Node_Str"".equals(tag)) {
    pullImageCmd.withTag(tag);
  }
  pullImageCmd.exec(new PullImageResultCallback()).awaitSuccess();
}"
59263,"private Machine parse(String output){
  String[] fields=output.split(""String_Node_Str"");
  return Machine.toMachine(fields);
}","private Machine parse(Map<String,Index> headersIndex,String output){
  String name=resolveField(headersIndex.get(""String_Node_Str""),output);
  String active=resolveField(headersIndex.get(""String_Node_Str""),output);
  String driver=resolveField(headersIndex.get(""String_Node_Str""),output);
  String state=resolveField(headersIndex.get(""String_Node_Str""),output);
  String url=resolveField(headersIndex.get(""String_Node_Str""),output);
  String swarm=resolveField(headersIndex.get(""String_Node_Str""),output);
  return new Machine(name,active,driver,state,url,swarm);
}"
59264,"private Machine(String name,String active,String driver,String state,String url,String swarm){
  super();
  this.name=name;
  this.active=active;
  this.driver=driver;
  this.state=state;
  this.url=url;
  this.swarm=swarm;
}","public Machine(String name,String active,String driver,String state,String url,String swarm){
  super();
  this.name=name;
  this.active=active;
  this.driver=driver;
  this.state=state;
  this.url=url;
  this.swarm=swarm;
}"
59265,"public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  Set<ExposedPort> allExposedPorts=resolveExposedPorts(containerConfiguration,createContainerCmd);
  if (!allExposedPorts.isEmpty()) {
    int numberOfExposedPorts=allExposedPorts.size();
    createContainerCmd.withExposedPorts(allExposedPorts.toArray(new ExposedPort[numberOfExposedPorts]));
  }
  if (containerConfiguration.containsKey(READ_ONLY_ROOT_FS)) {
    createContainerCmd.withReadonlyRootfs(asBoolean(containerConfiguration,READ_ONLY_ROOT_FS));
  }
  if (containerConfiguration.containsKey(LABELS)) {
    Map<String,String> labels=asMapOfStrings(containerConfiguration,LABELS);
    createContainerCmd.withLabels(labels);
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withNetworkDisabled(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    Collection<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(CPU_SET)) {
    createContainerCmd.withCpuset(asString(containerConfiguration,CPU_SET));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    Collection<String> env=asListOfString(containerConfiguration,ENV);
    env=resolveDockerServerIpInList(env);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    Collection<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    Collection<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    Collection<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    Collection<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(toVolumesFrom(volumesFrom));
  }
  if (containerConfiguration.containsKey(BINDS)) {
    Collection<String> binds=asListOfString(containerConfiguration,BINDS);
    createContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    createContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    Collection<String> portBindings=asListOfString(containerConfiguration,PORT_BINDINGS);
    Ports ports=assignPorts(portBindings);
    createContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    createContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    createContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    createContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    Collection<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    createContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    Collection<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    createContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    createContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    Collection<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    createContainerCmd.withCapAdd(toCapability(capAdds));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    Collection<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    createContainerCmd.withCapDrop(toCapability(capDrop));
  }
  if (containerConfiguration.containsKey(EXTRA_HOSTS)) {
    Collection<String> extraHosts=asListOfString(containerConfiguration,EXTRA_HOSTS);
    createContainerCmd.withExtraHosts(extraHosts.toArray(new String[extraHosts.size()]));
  }
  if (containerConfiguration.containsKey(ENTRYPOINT)) {
    Collection<String> entrypoints=asListOfString(containerConfiguration,ENTRYPOINT);
    createContainerCmd.withEntrypoint(entrypoints.toArray(new String[entrypoints.size()]));
  }
  if (containerConfiguration.containsKey(DOMAINNAME)) {
    String domainName=asString(containerConfiguration,DOMAINNAME);
    createContainerCmd.withDomainName(domainName);
  }
  boolean alwaysPull=false;
  if (containerConfiguration.containsKey(ALWAYS_PULL)) {
    alwaysPull=asBoolean(containerConfiguration,ALWAYS_PULL);
  }
  if (alwaysPull) {
    log.info(String.format(""String_Node_Str"",image));
    this.pullImage(image);
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    if (!alwaysPull) {
      log.warning(String.format(""String_Node_Str"",image));
      this.pullImage(image);
      return createContainerCmd.exec().getId();
    }
 else {
      throw e;
    }
  }
}","public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  Set<ExposedPort> allExposedPorts=resolveExposedPorts(containerConfiguration,createContainerCmd);
  if (!allExposedPorts.isEmpty()) {
    int numberOfExposedPorts=allExposedPorts.size();
    createContainerCmd.withExposedPorts(allExposedPorts.toArray(new ExposedPort[numberOfExposedPorts]));
  }
  if (containerConfiguration.containsKey(READ_ONLY_ROOT_FS)) {
    createContainerCmd.withReadonlyRootfs(asBoolean(containerConfiguration,READ_ONLY_ROOT_FS));
  }
  if (containerConfiguration.containsKey(LABELS)) {
    Map<String,String> labels=asMapOfStrings(containerConfiguration,LABELS);
    createContainerCmd.withLabels(labels);
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withNetworkDisabled(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    Collection<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(CPU_SET)) {
    createContainerCmd.withCpuset(asString(containerConfiguration,CPU_SET));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    Collection<String> env=asListOfString(containerConfiguration,ENV);
    env=resolveDockerServerIpInList(env);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    Collection<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    Collection<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    Collection<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    Collection<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(toVolumesFrom(volumesFrom));
  }
  if (containerConfiguration.containsKey(BINDS)) {
    Collection<String> binds=asListOfString(containerConfiguration,BINDS);
    createContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    createContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    Collection<String> portBindings=asListOfString(containerConfiguration,PORT_BINDINGS);
    Ports ports=assignPorts(portBindings);
    createContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    createContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    createContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    createContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    Collection<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    createContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    Collection<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    createContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    createContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    Collection<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    createContainerCmd.withCapAdd(toCapability(capAdds));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    Collection<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    createContainerCmd.withCapDrop(toCapability(capDrop));
  }
  if (containerConfiguration.containsKey(EXTRA_HOSTS)) {
    Collection<String> extraHosts=asListOfString(containerConfiguration,EXTRA_HOSTS);
    createContainerCmd.withExtraHosts(extraHosts.toArray(new String[extraHosts.size()]));
  }
  if (containerConfiguration.containsKey(ENTRYPOINT)) {
    Collection<String> entrypoints=asListOfString(containerConfiguration,ENTRYPOINT);
    createContainerCmd.withEntrypoint(entrypoints.toArray(new String[entrypoints.size()]));
  }
  if (containerConfiguration.containsKey(DOMAINNAME)) {
    String domainName=asString(containerConfiguration,DOMAINNAME);
    createContainerCmd.withDomainName(domainName);
  }
  boolean alwaysPull=false;
  if (containerConfiguration.containsKey(ALWAYS_PULL)) {
    alwaysPull=asBoolean(containerConfiguration,ALWAYS_PULL);
  }
  if (alwaysPull) {
    log.info(String.format(""String_Node_Str"",image));
    this.pullImage(image);
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    if (!alwaysPull) {
      log.warning(String.format(""String_Node_Str"",image));
      this.pullImage(image);
      return createContainerCmd.exec().getId();
    }
 else {
      throw e;
    }
  }
catch (  ProcessingException e) {
    if (e.getCause() instanceof UnsupportedSchemeException) {
      if (e.getCause().getMessage().contains(""String_Node_Str"")) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"",e.getCause());
      }
 else {
        throw e;
      }
    }
 else {
      throw e;
    }
  }
}"
59266,"private Map<String,String> resolveDefaultDockerMachine(Map<String,String> config){
  if (!config.containsKey(CubeDockerConfiguration.DOCKER_URI) && !config.containsKey(CubeDockerConfiguration.DOCKER_MACHINE_NAME)) {
    log.fine(""String_Node_Str"");
    if (dockerMachineInstance.get().isDockerMachineInstalled()) {
      Set<Machine> machines=this.dockerMachineInstance.get().list(""String_Node_Str"",""String_Node_Str"");
      if (machines.size() == 1) {
        log.fine(String.format(""String_Node_Str"",machines.iterator().next().getName()));
        config.put(CubeDockerConfiguration.DOCKER_MACHINE_NAME,getFirstMachine(machines).getName());
      }
    }
  }
  return config;
}","private Map<String,String> resolveDefaultDockerMachine(Map<String,String> config){
  if (!config.containsKey(CubeDockerConfiguration.DOCKER_URI) && !config.containsKey(CubeDockerConfiguration.DOCKER_MACHINE_NAME)) {
    log.fine(""String_Node_Str"");
    if (dockerMachineInstance.get().isDockerMachineInstalled(config.get(CubeDockerConfiguration.DOCKER_MACHINE_PATH))) {
      Set<Machine> machines=this.dockerMachineInstance.get().list(config.get(CubeDockerConfiguration.DOCKER_MACHINE_PATH),""String_Node_Str"",""String_Node_Str"");
      if (machines.size() == 1) {
        log.fine(String.format(""String_Node_Str"",machines.iterator().next().getName()));
        config.put(CubeDockerConfiguration.DOCKER_MACHINE_NAME,getFirstMachine(machines).getName());
      }
    }
  }
  return config;
}"
59267,"private void configure(ArquillianDescriptor arquillianDescriptor){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveDefaultDockerMachine(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerUriTcpProtocol(config);
  config=resolveServerIp(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config);
  System.out.println(cubeConfiguration);
  hostUriContextInstanceProducer.set(new HostUriContext(cubeConfiguration.getDockerServerUri()));
  configurationProducer.set(cubeConfiguration);
}","private void configure(ArquillianDescriptor arquillianDescriptor){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveAutoStartDockerMachine(config);
  config=resolveDefaultDockerMachine(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerUriTcpProtocol(config);
  config=resolveServerIp(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config);
  System.out.println(cubeConfiguration);
  hostUriContextInstanceProducer.set(new HostUriContext(cubeConfiguration.getDockerServerUri()));
  configurationProducer.set(cubeConfiguration);
}"
59268,"@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeDockerConfigurator.class).observer(DockerClientCreator.class).observer(CubeDockerRegistrar.class).observer(CubeSuiteLifecycleController.class).observer(BeforeStopContainerObserver.class).observer(Boot2DockerCreator.class).observer(DockerMachineCreator.class).observer(AfterClassContainerObjectObserver.class);
  builder.service(ResourceProvider.class,CubeResourceProvider.class);
  builder.service(TestEnricher.class,CubeContainerObjectTestEnricher.class);
  if (Validate.classExists(""String_Node_Str"")) {
    builder.observer(DockerServerIPConfigurator.class);
    builder.observer(CubeDockerAutoStartConfigurator.class);
  }
}","@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeDockerConfigurator.class).observer(DockerClientCreator.class).observer(CubeDockerRegistrar.class).observer(CubeSuiteLifecycleController.class).observer(BeforeStopContainerObserver.class).observer(Boot2DockerCreator.class).observer(DockerMachineCreator.class).observer(AfterClassContainerObjectObserver.class).observer(StopDockerMachineAfterSuiteObserver.class);
  builder.service(ResourceProvider.class,CubeResourceProvider.class);
  builder.service(TestEnricher.class,CubeContainerObjectTestEnricher.class);
  if (Validate.classExists(""String_Node_Str"")) {
    builder.observer(DockerServerIPConfigurator.class);
    builder.observer(CubeDockerAutoStartConfigurator.class);
  }
}"
59269,"public String execCommand(String... arguments){
  try {
    ProcessBuilder processBuilder=new ProcessBuilder(arguments);
    processBuilder.redirectErrorStream(true);
    Process pwd=processBuilder.start();
    pwd.waitFor();
    String output=IOUtil.asString(pwd.getInputStream());
    return output;
  }
 catch (  InterruptedException|IOException e) {
    throw new IllegalArgumentException(e);
  }
}","public String execCommand(String... arguments){
  try {
    ProcessBuilder processBuilder=new ProcessBuilder(arguments);
    processBuilder.redirectErrorStream(true);
    Process pwd=processBuilder.start();
    pwd.waitFor();
    String output=IOUtil.asString(pwd.getInputStream());
    if (pwd.exitValue() > 0) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",Arrays.toString(arguments),pwd.exitValue(),output));
    }
    return output;
  }
 catch (  InterruptedException|IOException e) {
    throw new IllegalArgumentException(e);
  }
}"
59270,"public boolean isDockerMachineInstalled(){
  return isDockerMachineInstalled(null);
}","/** 
 * Checks if Docker Machine is installed by running docker-machine and inspect the result.
 * @return true if it is installed, false otherwise.
 */
public boolean isDockerMachineInstalled(){
  return isDockerMachineInstalled(null);
}"
59271,"@Test public void shouldUseDockerMachineIfDockerHostIsSetOnServerURIAndMachineNameIsSet(){
  Map<String,String> config=new HashMap<>();
  config.put(CubeDockerConfiguration.DOCKER_URI,""String_Node_Str"");
  config.put(CubeDockerConfiguration.DOCKER_MACHINE_NAME,""String_Node_Str"");
  when(extensionDef.getExtensionProperties()).thenReturn(config);
  when(arquillianDescriptor.extension(""String_Node_Str"")).thenReturn(extensionDef);
  when(commandLineExecutor.execCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  fire(new CubeConfiguration());
  assertThat(config,hasEntry(CubeDockerConfiguration.DOCKER_URI,""String_Node_Str""));
  assertThat(config,hasEntry(is(CubeDockerConfiguration.CERT_PATH),endsWith(File.separator + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ config.get(CubeDockerConfiguration.DOCKER_MACHINE_NAME))));
}","@Test public void shouldUseDockerMachineIfDockerHostIsSetOnServerURIAndMachineNameIsSet(){
  Map<String,String> config=new HashMap<>();
  config.put(CubeDockerConfiguration.DOCKER_URI,""String_Node_Str"");
  config.put(CubeDockerConfiguration.DOCKER_MACHINE_NAME,""String_Node_Str"");
  when(extensionDef.getExtensionProperties()).thenReturn(config);
  when(arquillianDescriptor.extension(""String_Node_Str"")).thenReturn(extensionDef);
  when(commandLineExecutor.execCommandAsArray(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(new String[]{""String_Node_Str"",""String_Node_Str""});
  when(commandLineExecutor.execCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  fire(new CubeConfiguration());
  assertThat(config,hasEntry(CubeDockerConfiguration.DOCKER_URI,""String_Node_Str""));
  assertThat(config,hasEntry(is(CubeDockerConfiguration.CERT_PATH),endsWith(File.separator + ""String_Node_Str"" + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ config.get(CubeDockerConfiguration.DOCKER_MACHINE_NAME))));
}"
59272,"@Test public void dockerUriTcpShouldBeReplacedToHttpsInCaseOfDockerMachine(){
  Map<String,String> config=new HashMap<>();
  config.put(CubeDockerConfiguration.DOCKER_URI,""String_Node_Str"");
  config.put(CubeDockerConfiguration.DOCKER_MACHINE_NAME,""String_Node_Str"");
  when(extensionDef.getExtensionProperties()).thenReturn(config);
  when(arquillianDescriptor.extension(""String_Node_Str"")).thenReturn(extensionDef);
  when(commandLineExecutor.execCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  fire(new CubeConfiguration());
  assertThat(config,hasEntry(CubeDockerConfiguration.DOCKER_URI,""String_Node_Str""));
}","@Test public void dockerUriTcpShouldBeReplacedToHttpsInCaseOfDockerMachine(){
  Map<String,String> config=new HashMap<>();
  config.put(CubeDockerConfiguration.DOCKER_URI,""String_Node_Str"");
  config.put(CubeDockerConfiguration.DOCKER_MACHINE_NAME,""String_Node_Str"");
  when(extensionDef.getExtensionProperties()).thenReturn(config);
  when(arquillianDescriptor.extension(""String_Node_Str"")).thenReturn(extensionDef);
  when(commandLineExecutor.execCommand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(commandLineExecutor.execCommandAsArray(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(new String[]{""String_Node_Str"",""String_Node_Str""});
  fire(new CubeConfiguration());
  assertThat(config,hasEntry(CubeDockerConfiguration.DOCKER_URI,""String_Node_Str""));
}"
59273,"@Override public void changeToPreRunning(){
  if (state != State.DESTROYED) {
    return;
  }
  log.fine(String.format(""String_Node_Str"",id,configuration));
  state=State.PRE_RUNNING;
}","@Override public void changeToPreRunning(){
  if (state != State.DESTROYED && state != State.STARTED) {
    return;
  }
  log.fine(String.format(""String_Node_Str"",id,configuration));
  state=State.PRE_RUNNING;
}"
59274,"@Override public String toString(){
  String SEP=System.getProperty(""String_Node_Str"");
  StringBuilder content=new StringBuilder();
  content.append(""String_Node_Str"").append(SEP);
  if (dockerServerVersion != null) {
    content.append(""String_Node_Str"").append(dockerServerVersion).append(SEP);
  }
  if (dockerServerUri != null) {
    content.append(""String_Node_Str"").append(dockerServerUri).append(SEP);
  }
  if (dockerRegistry != null) {
    content.append(""String_Node_Str"").append(dockerRegistry).append(SEP);
  }
  if (boot2DockerPath != null) {
    content.append(""String_Node_Str"").append(boot2DockerPath).append(SEP);
  }
  if (dockerMachinePath != null) {
    content.append(""String_Node_Str"").append(dockerMachinePath).append(SEP);
  }
  if (machineName != null) {
    content.append(""String_Node_Str"").append(machineName).append(SEP);
  }
  if (username != null) {
    content.append(""String_Node_Str"").append(username).append(SEP);
  }
  if (password != null) {
    content.append(""String_Node_Str"").append(password).append(SEP);
  }
  if (email != null) {
    content.append(""String_Node_Str"").append(email).append(SEP);
  }
  if (certPath != null) {
    content.append(""String_Node_Str"").append(certPath).append(SEP);
  }
  if (dockerServerIp != null) {
    content.append(""String_Node_Str"").append(dockerServerIp).append(SEP);
  }
  if (definitionFormat != null) {
    content.append(""String_Node_Str"").append(definitionFormat).append(SEP);
  }
  if (autoStartContainers != null) {
    content.append(""String_Node_Str"").append(autoStartContainers).append(SEP);
  }
  if (dockerContainersContent != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream ps=new PrintStream(baos);
    MapUtils.verbosePrint(ps,null,dockerContainersContent);
    content.append(""String_Node_Str"").append(baos.toString()).append(SEP);
  }
  return content.toString();
}","@Override public String toString(){
  String SEP=System.getProperty(""String_Node_Str"");
  StringBuilder content=new StringBuilder();
  content.append(""String_Node_Str"").append(SEP);
  if (dockerServerVersion != null) {
    content.append(""String_Node_Str"").append(dockerServerVersion).append(SEP);
  }
  if (dockerServerUri != null) {
    content.append(""String_Node_Str"").append(dockerServerUri).append(SEP);
  }
  if (dockerRegistry != null) {
    content.append(""String_Node_Str"").append(dockerRegistry).append(SEP);
  }
  if (boot2DockerPath != null) {
    content.append(""String_Node_Str"").append(boot2DockerPath).append(SEP);
  }
  if (dockerMachinePath != null) {
    content.append(""String_Node_Str"").append(dockerMachinePath).append(SEP);
  }
  if (machineName != null) {
    content.append(""String_Node_Str"").append(machineName).append(SEP);
  }
  if (username != null) {
    content.append(""String_Node_Str"").append(username).append(SEP);
  }
  if (password != null) {
    content.append(""String_Node_Str"").append(password).append(SEP);
  }
  if (email != null) {
    content.append(""String_Node_Str"").append(email).append(SEP);
  }
  if (certPath != null) {
    content.append(""String_Node_Str"").append(certPath).append(SEP);
  }
  if (dockerServerIp != null) {
    content.append(""String_Node_Str"").append(dockerServerIp).append(SEP);
  }
  if (definitionFormat != null) {
    content.append(""String_Node_Str"").append(definitionFormat).append(SEP);
  }
  if (autoStartContainers != null) {
    content.append(""String_Node_Str"").append(autoStartContainers).append(SEP);
  }
  if (dockerContainersContent != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream ps=new PrintStream(baos);
    IOUtil.asString(dockerContainersContent);
    content.append(""String_Node_Str"").append(baos.toString()).append(SEP);
  }
  return content.toString();
}"
59275,"@Test public void should_merge_more_than_one_file_into_one() throws IOException {
  File newFile=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile.toURI()),CONTENT.getBytes());
  File newFile2=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile2.toURI()),CONTENT2.getBytes());
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",newFile.getAbsolutePath() + ""String_Node_Str"" + newFile2.getAbsolutePath());
  parameters.put(""String_Node_Str"",DefinitionFormat.COMPOSE.name());
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(parameters);
  final Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  assertThat(dockerContainersContent.containsKey(""String_Node_Str""),is(true));
  assertThat(dockerContainersContent.containsKey(""String_Node_Str""),is(true));
}","@Test public void should_merge_more_than_one_file_into_one() throws IOException {
  File newFile=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile.toURI()),CONTENT.getBytes());
  File newFile2=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile2.toURI()),CONTENT2.getBytes());
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",newFile.toURI().toString() + ""String_Node_Str"" + newFile2.toURI().toString());
  parameters.put(""String_Node_Str"",DefinitionFormat.COMPOSE.name());
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(parameters);
  final Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  assertThat(dockerContainersContent.containsKey(""String_Node_Str""),is(true));
  assertThat(dockerContainersContent.containsKey(""String_Node_Str""),is(true));
}"
59276,"@Test public void should_parse_and_load_configuration_file_from_container_configuration_file_and_property_set_file() throws IOException {
  File newFile=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile.toURI()),CONTENT.getBytes());
  File newFile2=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile2.toURI()),CONTENT2.getBytes());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",newFile.getAbsolutePath());
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(parameters);
  assertThat(cubeConfiguration.getDockerServerUri(),is(""String_Node_Str""));
  assertThat(cubeConfiguration.getDockerServerVersion(),is(""String_Node_Str""));
  Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> actualTomcat=(Map<String,Object>)dockerContainersContent.get(""String_Node_Str"");
  assertThat(actualTomcat,is(notNullValue()));
  String image=(String)actualTomcat.get(""String_Node_Str"");
  assertThat(image,is(""String_Node_Str""));
  assertThat(dockerContainersContent.containsKey(""String_Node_Str""),is(true));
}","@Test public void should_parse_and_load_configuration_file_from_container_configuration_file_and_property_set_file() throws IOException {
  File newFile=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile.toURI()),CONTENT.getBytes());
  File newFile2=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile2.toURI()),CONTENT2.getBytes());
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",newFile.toURI().toString());
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(parameters);
  assertThat(cubeConfiguration.getDockerServerUri(),is(""String_Node_Str""));
  assertThat(cubeConfiguration.getDockerServerVersion(),is(""String_Node_Str""));
  Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> actualTomcat=(Map<String,Object>)dockerContainersContent.get(""String_Node_Str"");
  assertThat(actualTomcat,is(notNullValue()));
  String image=(String)actualTomcat.get(""String_Node_Str"");
  assertThat(image,is(""String_Node_Str""));
  assertThat(dockerContainersContent.containsKey(""String_Node_Str""),is(true));
}"
59277,"@Test public void should_parse_and_load_configuration_file_from_container_configuration_file() throws IOException {
  File newFile=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile.toURI()),CONTENT.getBytes());
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",newFile.getAbsolutePath());
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(parameters);
  assertThat(cubeConfiguration.getDockerServerUri(),is(""String_Node_Str""));
  assertThat(cubeConfiguration.getDockerServerVersion(),is(""String_Node_Str""));
  Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> actualTomcat=(Map<String,Object>)dockerContainersContent.get(""String_Node_Str"");
  assertThat(actualTomcat,is(notNullValue()));
  String image=(String)actualTomcat.get(""String_Node_Str"");
  assertThat(image,is(""String_Node_Str""));
}","@Test public void should_parse_and_load_configuration_file_from_container_configuration_file() throws IOException {
  File newFile=testFolder.newFile(""String_Node_Str"");
  Files.write(Paths.get(newFile.toURI()),CONTENT.getBytes());
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  parameters.put(""String_Node_Str"",newFile.toURI().toString());
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(parameters);
  assertThat(cubeConfiguration.getDockerServerUri(),is(""String_Node_Str""));
  assertThat(cubeConfiguration.getDockerServerVersion(),is(""String_Node_Str""));
  Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> actualTomcat=(Map<String,Object>)dockerContainersContent.get(""String_Node_Str"");
  assertThat(actualTomcat,is(notNullValue()));
  String image=(String)actualTomcat.get(""String_Node_Str"");
  assertThat(image,is(""String_Node_Str""));
}"
59278,"@Override public Map<String,AutoStartOrderUtil.Node> parse(){
  Map<String,AutoStartOrderUtil.Node> nodes=new HashMap<>();
  for (  String deployableContainer : this.deployableContainers) {
    Map<String,Object> content=(Map<String,Object>)containerDefinition.get(deployableContainer);
    if (content == null) {
      return nodes;
    }
    if (content.containsKey(""String_Node_Str"")) {
      Set<String> links=(Set<String>)content.get(""String_Node_Str"");
      for (      String link : links) {
        String[] parsed=link.split(""String_Node_Str"");
        String name=parsed[0];
        if (containerDefinition.containsKey(name)) {
          AutoStartOrderUtil.Node child=AutoStartOrderUtil.Node.from(name);
          nodes.put(name,child);
        }
      }
    }
  }
  return nodes;
}","@Override public Map<String,AutoStartOrderUtil.Node> parse(){
  Map<String,AutoStartOrderUtil.Node> nodes=new HashMap<>();
  for (  String deployableContainer : this.deployableContainers) {
    Map<String,Object> content=(Map<String,Object>)containerDefinition.get(deployableContainer);
    if (content == null) {
      return nodes;
    }
    if (content.containsKey(""String_Node_Str"")) {
      Collection<String> links=(Collection<String>)content.get(""String_Node_Str"");
      for (      String link : links) {
        String[] parsed=link.split(""String_Node_Str"");
        String name=parsed[0];
        if (containerDefinition.containsKey(name)) {
          AutoStartOrderUtil.Node child=AutoStartOrderUtil.Node.from(name);
          nodes.put(name,child);
        }
      }
    }
  }
  return nodes;
}"
59279,"@SuppressWarnings(""String_Node_Str"") private static void addAll(Map<String,Node> nodes,CubeDockerConfiguration config,String id){
  Map<String,Object> content=(Map<String,Object>)config.getDockerContainersContent().get(id);
  if (content == null) {
    return;
  }
  Node parent=nodes.get(id);
  if (content.containsKey(""String_Node_Str"")) {
    List<String> links=(List<String>)content.get(""String_Node_Str"");
    for (    String link : links) {
      String[] parsed=link.split(""String_Node_Str"");
      String name=parsed[0];
      if (config.getDockerContainersContent().containsKey(name)) {
        Node child=nodes.get(name);
        if (child == null) {
          child=Node.from(name);
          nodes.put(name,child);
        }
        if (child.addAsChildOf(parent)) {
          addAll(nodes,config,name);
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private static void addAll(Map<String,Node> nodes,CubeDockerConfiguration config,String id){
  Map<String,Object> content=(Map<String,Object>)config.getDockerContainersContent().get(id);
  if (content == null) {
    return;
  }
  Node parent=nodes.get(id);
  if (content.containsKey(""String_Node_Str"")) {
    Collection<String> links=(Collection<String>)content.get(""String_Node_Str"");
    for (    String link : links) {
      String[] parsed=link.split(""String_Node_Str"");
      String name=parsed[0];
      if (config.getDockerContainersContent().containsKey(name)) {
        Node child=nodes.get(name);
        if (child == null) {
          child=Node.from(name);
          nodes.put(name,child);
        }
        if (child.addAsChildOf(parent)) {
          addAll(nodes,config,name);
        }
      }
    }
  }
}"
59280,"public void configure(@Observes ArquillianDescriptor arquillianDescriptor){
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(config);
  configurationProducer.set(cubeConfiguration);
}","public void configure(@Observes(precedence=-10) ArquillianDescriptor arquillianDescriptor){
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(config);
  configurationProducer.set(cubeConfiguration);
}"
59281,"@Override public Map<String,AutoStartOrderUtil.Node> parse(){
  Map<String,AutoStartOrderUtil.Node> nodes=new HashMap<>();
  for (  String deployableContainer : this.deployableContainers) {
    Map<String,Object> content=(Map<String,Object>)containerDefinition.get(deployableContainer);
    if (content == null) {
      return nodes;
    }
    if (content.containsKey(""String_Node_Str"")) {
      List<String> links=(List<String>)content.get(""String_Node_Str"");
      for (      String link : links) {
        String[] parsed=link.split(""String_Node_Str"");
        String name=parsed[0];
        if (containerDefinition.containsKey(name)) {
          AutoStartOrderUtil.Node child=AutoStartOrderUtil.Node.from(name);
          nodes.put(name,child);
        }
      }
    }
  }
  return nodes;
}","@Override public Map<String,AutoStartOrderUtil.Node> parse(){
  Map<String,AutoStartOrderUtil.Node> nodes=new HashMap<>();
  for (  String deployableContainer : this.deployableContainers) {
    Map<String,Object> content=(Map<String,Object>)containerDefinition.get(deployableContainer);
    if (content == null) {
      return nodes;
    }
    if (content.containsKey(""String_Node_Str"")) {
      Set<String> links=(Set<String>)content.get(""String_Node_Str"");
      for (      String link : links) {
        String[] parsed=link.split(""String_Node_Str"");
        String name=parsed[0];
        if (containerDefinition.containsKey(name)) {
          AutoStartOrderUtil.Node child=AutoStartOrderUtil.Node.from(name);
          nodes.put(name,child);
        }
      }
    }
  }
  return nodes;
}"
59282,"@SuppressWarnings(""String_Node_Str"") public static CubeDockerConfiguration fromMap(Map<String,String> map){
  CubeDockerConfiguration cubeConfiguration=new CubeDockerConfiguration();
  if (map.containsKey(DOCKER_SERVER_IP)) {
    cubeConfiguration.dockerServerIp=map.get(DOCKER_SERVER_IP);
  }
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(BOOT2DOCKER_PATH)) {
    cubeConfiguration.boot2DockerPath=map.get(BOOT2DOCKER_PATH);
  }
  if (map.containsKey(DOCKER_MACHINE_PATH)) {
    cubeConfiguration.dockerMachinePath=map.get(DOCKER_MACHINE_PATH);
  }
  if (map.containsKey(DOCKER_MACHINE_NAME)) {
    cubeConfiguration.machineName=map.get(DOCKER_MACHINE_NAME);
  }
  if (map.containsKey(USERNAME)) {
    cubeConfiguration.username=map.get(USERNAME);
  }
  if (map.containsKey(PASSWORD)) {
    cubeConfiguration.password=map.get(PASSWORD);
  }
  if (map.containsKey(EMAIL)) {
    cubeConfiguration.email=map.get(EMAIL);
  }
  if (map.containsKey(CERT_PATH)) {
    cubeConfiguration.certPath=map.get(CERT_PATH);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DEFINITION_FORMAT)) {
    String definitionContent=map.get(DEFINITION_FORMAT);
    cubeConfiguration.definitionFormat=DefinitionFormat.valueOf(DefinitionFormat.class,definitionContent);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=DockerContainerDefinitionParser.convert(content,cubeConfiguration.definitionFormat);
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=DockerContainerDefinitionParser.convert(URI.create(location),cubeConfiguration.definitionFormat);
    }
 catch (    IOException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (!map.containsKey(DOCKER_CONTAINERS) && !map.containsKey(DOCKER_CONTAINERS_FILE)) {
    try {
      cubeConfiguration.dockerContainersContent=DockerContainerDefinitionParser.convertDefault(cubeConfiguration.definitionFormat);
    }
 catch (    IOException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    String expression=map.get(AUTO_START_CONTAINERS);
    Map<String,Object> containerDefinitions=cubeConfiguration.getDockerContainersContent();
    AutoStartParser autoStartParser=AutoStartParserFactory.create(expression,containerDefinitions);
    cubeConfiguration.autoStartContainers=autoStartParser;
  }
  return cubeConfiguration;
}","@SuppressWarnings(""String_Node_Str"") public static CubeDockerConfiguration fromMap(Map<String,String> map){
  CubeDockerConfiguration cubeConfiguration=new CubeDockerConfiguration();
  if (map.containsKey(DOCKER_SERVER_IP)) {
    cubeConfiguration.dockerServerIp=map.get(DOCKER_SERVER_IP);
  }
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(BOOT2DOCKER_PATH)) {
    cubeConfiguration.boot2DockerPath=map.get(BOOT2DOCKER_PATH);
  }
  if (map.containsKey(DOCKER_MACHINE_PATH)) {
    cubeConfiguration.dockerMachinePath=map.get(DOCKER_MACHINE_PATH);
  }
  if (map.containsKey(DOCKER_MACHINE_NAME)) {
    cubeConfiguration.machineName=map.get(DOCKER_MACHINE_NAME);
  }
  if (map.containsKey(USERNAME)) {
    cubeConfiguration.username=map.get(USERNAME);
  }
  if (map.containsKey(PASSWORD)) {
    cubeConfiguration.password=map.get(PASSWORD);
  }
  if (map.containsKey(EMAIL)) {
    cubeConfiguration.email=map.get(EMAIL);
  }
  if (map.containsKey(CERT_PATH)) {
    cubeConfiguration.certPath=map.get(CERT_PATH);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DEFINITION_FORMAT)) {
    String definitionContent=map.get(DEFINITION_FORMAT);
    cubeConfiguration.definitionFormat=DefinitionFormat.valueOf(DefinitionFormat.class,definitionContent);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=DockerContainerDefinitionParser.convert(content,cubeConfiguration.definitionFormat);
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    final String location=map.get(DOCKER_CONTAINERS_FILE);
    final List<URI> resolveUri=new ArrayList<>();
    try {
      final URI uri=URI.create(location);
      resolveUri.add(uri);
      if (System.getProperty(CUBE_ENVIRONMENT) != null) {
        final String resolveFilename=resolveFilename(uri);
        final String environmentUri=uri.toString().replace(resolveFilename,resolveFilename + ""String_Node_Str"" + System.getProperty(CUBE_ENVIRONMENT));
        resolveUri.add(URI.create(environmentUri));
      }
      cubeConfiguration.dockerContainersContent=DockerContainerDefinitionParser.convert(cubeConfiguration.definitionFormat,resolveUri.toArray(new URI[resolveUri.size()]));
    }
 catch (    IOException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILES)) {
    String locations=map.get(DOCKER_CONTAINERS_FILES);
    List<URI> realLocations=getUris(locations);
    try {
      cubeConfiguration.dockerContainersContent=DockerContainerDefinitionParser.convert(cubeConfiguration.definitionFormat,realLocations.toArray(new URI[realLocations.size()]));
    }
 catch (    IOException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (!map.containsKey(DOCKER_CONTAINERS) && !map.containsKey(DOCKER_CONTAINERS_FILE) && !map.containsKey(DOCKER_CONTAINERS_FILES)) {
    try {
      cubeConfiguration.dockerContainersContent=DockerContainerDefinitionParser.convertDefault(cubeConfiguration.definitionFormat);
    }
 catch (    IOException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    String expression=map.get(AUTO_START_CONTAINERS);
    Map<String,Object> containerDefinitions=cubeConfiguration.getDockerContainersContent();
    AutoStartParser autoStartParser=AutoStartParserFactory.create(expression,containerDefinitions);
    cubeConfiguration.autoStartContainers=autoStartParser;
  }
  return cubeConfiguration;
}"
59283,"private DockerComposeConverter(String content){
  this.dockerComposeDefinitionMap=(Map<String,Object>)new Yaml().load(content);
  this.dockerComposeRootDirectory=Paths.get(""String_Node_Str"");
}","private DockerComposeConverter(String content){
  String resolvePlaceholders=resolvePlaceholders(content);
  this.dockerComposeDefinitionMap=(Map<String,Object>)new Yaml().load(content);
  this.dockerComposeRootDirectory=Paths.get(""String_Node_Str"");
}"
59284,"/** 
 * @param testCase
 * @param field
 * @return returns the name of the cube if this cube would be linked by its parent, or null
 * @throws IllegalAccessException
 * @throws IOException
 * @throws InvocationTargetException
 */
private String enrichField(Object testCase,Field field) throws IllegalAccessException, IOException, InvocationTargetException {
  final Object cubeContainerObject=field.get(testCase);
  if (cubeContainerObject == null) {
    final Cube cubeAnnotation=field.getAnnotation(Cube.class);
    final Class<?> cubeContainerClazz=field.getType();
    final String cubeName=getCubeName(cubeAnnotation,cubeContainerClazz);
    final String[] cubePortBinding=getPortBindings(cubeAnnotation,cubeContainerClazz);
    final List<Method> methodsWithCubeDockerFile=ReflectionUtil.getMethodsWithAnnotation(cubeContainerClazz,CubeDockerFile.class);
    if (methodsWithCubeDockerFile.size() > 1) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",CubeDockerFile.class.getSimpleName(),CubeDockerFile.class.getSimpleName(),methodsWithCubeDockerFile));
    }
    if ((methodsWithCubeDockerFile.size() == 1 || cubeContainerClazz.isAnnotationPresent(CubeDockerFile.class)) && cubeContainerClazz.isAnnotationPresent(Image.class)) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",cubeContainerClazz.getSimpleName(),Image.class.getSimpleName(),CubeDockerFile.class.getSimpleName()));
    }
    File output=null;
    boolean imageSet=false;
    CubeDockerFile cubeContainerClazzAnnotation=null;
    if (methodsWithCubeDockerFile.size() == 1) {
      Method annotatedMethodWithCubeDockerFile=methodsWithCubeDockerFile.get(0);
      cubeContainerClazzAnnotation=annotatedMethodWithCubeDockerFile.getAnnotation(CubeDockerFile.class);
      final Object archive=annotatedMethodWithCubeDockerFile.invoke(null,new Object[0]);
      if (archive instanceof Archive) {
        Archive<?> genericArchive=(Archive)archive;
        output=createTemporalDirectoryForCopyingDockerfile(cubeContainerClazz,cubeName);
        logger.finer(String.format(""String_Node_Str"",output,cubeName));
        genericArchive.as(ExplodedExporter.class).exportExplodedInto(output);
      }
    }
 else {
      if (cubeContainerClazz.isAnnotationPresent(CubeDockerFile.class)) {
        cubeContainerClazzAnnotation=cubeContainerClazz.getAnnotation(CubeDockerFile.class);
        output=createTemporalDirectoryForCopyingDockerfile(cubeContainerClazz,cubeName);
        logger.finer(String.format(""String_Node_Str"",output,cubeName));
        DockerFileUtil.copyDockerfileDirectory(cubeContainerClazz,cubeContainerClazzAnnotation,output);
      }
 else {
        if (!cubeContainerClazz.isAnnotationPresent(Image.class)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",testCase.getClass().getName(),cubeContainerClazz.getName(),CubeDockerFile.class.getSimpleName(),Image.class.getSimpleName()));
        }
        imageSet=true;
      }
    }
    final Object containerObjectInstance=ReflectionUtil.newInstance(cubeContainerClazz.getName(),new Class[0],new Class[0],cubeContainerClazz);
    enrichContainerObject(containerObjectInstance);
    field.set(testCase,containerObjectInstance);
    final Set<String> links=enrichAndReturnLinks(containerObjectInstance);
    org.arquillian.cube.spi.Cube cube;
    if (imageSet) {
      cube=createCubeFromImage(cubeName,cubePortBinding,links,cubeContainerClazz.getAnnotation(Image.class),output,testCase.getClass());
    }
 else {
      cube=createCubeFromDockerfile(cubeName,cubePortBinding,links,cubeContainerClazzAnnotation,output,testCase.getClass());
    }
    logger.finer(String.format(""String_Node_Str"",cubeName,cube.configuration()));
    cubeRegistryInstance.get().addCube(cube);
    CubeController cubeController=cubeControllerInstance.get();
    cubeController.create(cubeName);
    cubeController.start(cubeName);
    return link(field,cubeName);
  }
  return null;
}","/** 
 * @param testCase
 * @param field
 * @return returns the name of the cube if this cube would be linked by its parent, or null
 * @throws IllegalAccessException
 * @throws IOException
 * @throws InvocationTargetException
 */
private String enrichField(Object testCase,Field field) throws IllegalAccessException, IOException, InvocationTargetException {
  final Object cubeContainerObject=field.get(testCase);
  if (cubeContainerObject == null) {
    final Cube cubeAnnotation=field.getAnnotation(Cube.class);
    final Class<?> cubeContainerClazz=field.getType();
    final String cubeName=getCubeName(cubeAnnotation,cubeContainerClazz);
    final String[] cubePortBinding=getPortBindings(cubeAnnotation,cubeContainerClazz);
    final List<Method> methodsWithCubeDockerFile=ReflectionUtil.getMethodsWithAnnotation(cubeContainerClazz,CubeDockerFile.class);
    if (methodsWithCubeDockerFile.size() > 1) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",CubeDockerFile.class.getSimpleName(),CubeDockerFile.class.getSimpleName(),methodsWithCubeDockerFile));
    }
    if ((methodsWithCubeDockerFile.size() == 1 || cubeContainerClazz.isAnnotationPresent(CubeDockerFile.class)) && cubeContainerClazz.isAnnotationPresent(Image.class)) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",cubeContainerClazz.getSimpleName(),Image.class.getSimpleName(),CubeDockerFile.class.getSimpleName()));
    }
    File output=null;
    boolean imageSet=false;
    CubeDockerFile cubeContainerClazzAnnotation=null;
    if (methodsWithCubeDockerFile.size() == 1) {
      Method annotatedMethodWithCubeDockerFile=methodsWithCubeDockerFile.get(0);
      cubeContainerClazzAnnotation=annotatedMethodWithCubeDockerFile.getAnnotation(CubeDockerFile.class);
      final Object archive=annotatedMethodWithCubeDockerFile.invoke(null,new Object[0]);
      if (archive instanceof Archive) {
        Archive<?> genericArchive=(Archive)archive;
        output=createTemporalDirectoryForCopyingDockerfile(cubeContainerClazz,cubeName);
        logger.finer(String.format(""String_Node_Str"",output,cubeName));
        genericArchive.as(ExplodedExporter.class).exportExplodedInto(output);
      }
    }
 else {
      if (cubeContainerClazz.isAnnotationPresent(CubeDockerFile.class)) {
        cubeContainerClazzAnnotation=cubeContainerClazz.getAnnotation(CubeDockerFile.class);
        output=createTemporalDirectoryForCopyingDockerfile(cubeContainerClazz,cubeName);
        logger.finer(String.format(""String_Node_Str"",output,cubeName));
        DockerFileUtil.copyDockerfileDirectory(cubeContainerClazz,cubeContainerClazzAnnotation,output);
      }
 else {
        if (!cubeContainerClazz.isAnnotationPresent(Image.class)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",testCase.getClass().getName(),cubeContainerClazz.getName(),CubeDockerFile.class.getSimpleName(),Image.class.getSimpleName()));
        }
        imageSet=true;
      }
    }
    final Object containerObjectInstance=ReflectionUtil.newInstance(cubeContainerClazz.getName(),new Class[0],new Class[0],cubeContainerClazz);
    enrichContainerObject(containerObjectInstance);
    field.set(testCase,containerObjectInstance);
    final Set<String> links=enrichAndReturnLinks(containerObjectInstance);
    org.arquillian.cube.spi.Cube cube;
    if (imageSet) {
      cube=createCubeFromImage(cubeName,cubePortBinding,links,cubeContainerClazz.getAnnotation(Image.class),output,testCase.getClass());
    }
 else {
      cube=createCubeFromDockerfile(cubeName,cubePortBinding,links,cubeContainerClazzAnnotation,output,testCase.getClass());
    }
    logger.finer(String.format(""String_Node_Str"",cubeName,cube.configuration()));
    cubeRegistryInstance.get().addCube(cube);
    CubeController cubeController=cubeControllerInstance.get();
    cubeController.create(cubeName);
    cubeController.start(cubeName);
    enrichHostPort(containerObjectInstance,cube);
    return link(field,cubeName);
  }
  return null;
}"
59285,"public int getConnectionPort(){
  return 5000;
}","public int getConnectionPort(){
  return port;
}"
59286,"@Test public void shouldReturnOkAsPong() throws IOException {
  String pong=ping();
  assertThat(pong,containsString(""String_Node_Str""));
}","@Test public void shouldReturnOkAsPong() throws IOException {
  String pong=ping();
  assertThat(pong,containsString(""String_Node_Str""));
  assertThat(pingPongContainer.getConnectionPort(),is(5000));
}"
59287,"public void configure(@Observes CubeConfiguration event,ArquillianDescriptor arquillianDescriptor){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerIp(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config);
  configurationProducer.set(cubeConfiguration);
}","public void configure(@Observes CubeConfiguration event,ArquillianDescriptor arquillianDescriptor){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerUriTcpProtocol(config);
  config=resolveServerIp(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config);
  configurationProducer.set(cubeConfiguration);
}"
59288,"private Map<String,String> resolveServerIp(Map<String,String> config){
  String dockerServerUri=config.get(CubeDockerConfiguration.DOCKER_URI);
  if (dockerServerUri.contains(AbstractCliInternetAddressResolver.DOCKERHOST_TAG)) {
    if (isDockerMachineSet(config)) {
      dockerServerUri=resolveDockerMachine(dockerServerUri,config.get(CubeDockerConfiguration.DOCKER_MACHINE_NAME),config.get(CubeDockerConfiguration.DOCKER_MACHINE_PATH));
    }
 else {
      dockerServerUri=resolveBoot2Docker(dockerServerUri,config.get(CubeDockerConfiguration.BOOT2DOCKER_PATH));
    }
  }
  config.put(CubeDockerConfiguration.DOCKER_URI,dockerServerUri);
  if (!config.containsKey(CubeDockerConfiguration.CERT_PATH)) {
    config.put(CubeDockerConfiguration.CERT_PATH,HomeResolverUtil.resolveHomeDirectoryChar(getDefaultTlsDirectory(config)));
  }
  resolveDockerServerIp(config,dockerServerUri);
  return config;
}","private Map<String,String> resolveServerIp(Map<String,String> config){
  String dockerServerUri=config.get(CubeDockerConfiguration.DOCKER_URI);
  if (containsDockerHostTag(dockerServerUri)) {
    if (isDockerMachineSet(config)) {
      dockerServerUri=resolveDockerMachine(dockerServerUri,config.get(CubeDockerConfiguration.DOCKER_MACHINE_NAME),config.get(CubeDockerConfiguration.DOCKER_MACHINE_PATH));
    }
 else {
      dockerServerUri=resolveBoot2Docker(dockerServerUri,config.get(CubeDockerConfiguration.BOOT2DOCKER_PATH));
    }
  }
  config.put(CubeDockerConfiguration.DOCKER_URI,dockerServerUri);
  if (!config.containsKey(CubeDockerConfiguration.CERT_PATH)) {
    config.put(CubeDockerConfiguration.CERT_PATH,HomeResolverUtil.resolveHomeDirectoryChar(getDefaultTlsDirectory(config)));
  }
  resolveDockerServerIp(config,dockerServerUri);
  return config;
}"
59289,"@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeConfigurator.class).observer(CubeRegistrar.class).observer(CubeLifecycleController.class).observer(ClientCubeControllerCreator.class);
  builder.service(ResourceProvider.class,CubeControllerProvider.class);
  if (Validate.classExists(""String_Node_Str"")) {
    builder.observer(ProtocolMetadataUpdater.class).observer(CubeContainerLifecycleController.class).observer(ContainerConfigurationController.class).observer(CubeRemoteCommandObserver.class);
    builder.service(AuxiliaryArchiveAppender.class,CubeAuxiliaryArchiveAppender.class);
  }
  if (Validate.classExists(""String_Node_Str"")) {
    builder.service(ResourceProvider.class,CubeIDResourceProvider.class);
  }
}","@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeConfigurator.class).observer(CubeRegistrar.class).observer(CubeLifecycleController.class).observer(ClientCubeControllerCreator.class);
  builder.service(ResourceProvider.class,CubeControllerProvider.class).service(TestEnricher.class,HostIpTestEnricher.class);
  if (Validate.classExists(""String_Node_Str"")) {
    builder.observer(ProtocolMetadataUpdater.class).observer(CubeContainerLifecycleController.class).observer(ContainerConfigurationController.class).observer(CubeRemoteCommandObserver.class);
    builder.service(AuxiliaryArchiveAppender.class,CubeAuxiliaryArchiveAppender.class);
  }
  if (Validate.classExists(""String_Node_Str"")) {
    builder.service(ResourceProvider.class,CubeIDResourceProvider.class);
  }
}"
59290,"public void configure(@Observes CubeConfiguration event,ArquillianDescriptor arquillianDescriptor){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerUriTcpProtocol(config);
  config=resolveServerIp(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config);
  configurationProducer.set(cubeConfiguration);
}","public void configure(@Observes CubeConfiguration event,ArquillianDescriptor arquillianDescriptor){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerUriTcpProtocol(config);
  config=resolveServerIp(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config);
  hostUriContextInstanceProducer.set(new HostUriContext(cubeConfiguration.getDockerServerUri()));
  configurationProducer.set(cubeConfiguration);
}"
59291,"private ProtocolMetaData createProtocolMetadata(Cube cube,Archive<?> deployment){
  Binding bindings=cube.bindings();
  HTTPContext httpContext=new HTTPContext(bindings.getIP(),configuration.getEmbeddedPort());
  if (containsArquillianServletProtocol(deployment)) {
    addArquillianTestServlet(deployment,httpContext);
  }
  return new ProtocolMetaData().addContext(httpContext);
}","private ProtocolMetaData createProtocolMetadata(Cube cube,Archive<?> deployment){
  Binding bindings=cube.bindings();
  HTTPContext httpContext=null;
  if (this.configuration.isEmbeddedPortSet()) {
    httpContext=new HTTPContext(bindings.getIP(),this.configuration.getEmbeddedPort());
  }
 else {
    if (bindings.getNumberOfPortBindings() == 1) {
      httpContext=new HTTPContext(bindings.getIP(),bindings.getFirstPortBinding().getBindingPort());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  if (containsArquillianServletProtocol(deployment)) {
    addArquillianTestServlet(deployment,httpContext);
  }
  return new ProtocolMetaData().addContext(httpContext);
}"
59292,"private void configure(ArquillianDescriptor arquillianDescriptor,ContainerRegistry containerRegistry){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerUriTcpProtocol(config);
  config=resolveServerIp(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config);
  hostUriContextInstanceProducer.set(new HostUriContext(cubeConfiguration.getDockerServerUri()));
  configurationProducer.set(cubeConfiguration);
}","private void configure(ArquillianDescriptor arquillianDescriptor,ContainerRegistry containerRegistry){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveSystemEnvironmentVariables(config);
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerUriTcpProtocol(config);
  config=resolveServerIp(config);
  CubeDockerConfiguration cubeConfiguration=CubeDockerConfiguration.fromMap(config);
  System.out.println(cubeConfiguration);
  hostUriContextInstanceProducer.set(new HostUriContext(cubeConfiguration.getDockerServerUri()));
  configurationProducer.set(cubeConfiguration);
}"
59293,"@Override public String toString(){
  String SEP=System.getProperty(""String_Node_Str"");
  return ""String_Node_Str"" + SEP + ""String_Node_Str""+ dockerServerVersion+ '\''+ SEP+ ""String_Node_Str""+ dockerServerUri+ '\''+ SEP+ ""String_Node_Str""+ dockerRegistry+ '\''+ SEP+ ""String_Node_Str""+ boot2DockerPath+ '\''+ SEP+ ""String_Node_Str""+ dockerMachinePath+ '\''+ SEP+ ""String_Node_Str""+ machineName+ '\''+ SEP+ ""String_Node_Str""+ username+ '\''+ SEP+ ""String_Node_Str""+ password+ '\''+ SEP+ ""String_Node_Str""+ email+ '\''+ SEP+ ""String_Node_Str""+ certPath+ '\''+ SEP+ ""String_Node_Str""+ dockerServerIp+ '\''+ SEP+ ""String_Node_Str""+ definitionFormat+ SEP+ ""String_Node_Str""+ autoStartContainers+ SEP+ ""String_Node_Str""+ dockerContainersContent+ SEP+ '}';
}","@Override public String toString(){
  String SEP=System.getProperty(""String_Node_Str"");
  StringBuilder content=new StringBuilder();
  content.append(""String_Node_Str"").append(SEP);
  if (dockerServerVersion != null) {
    content.append(""String_Node_Str"").append(dockerServerVersion).append(SEP);
  }
  if (dockerServerUri != null) {
    content.append(""String_Node_Str"").append(dockerServerUri).append(SEP);
  }
  if (dockerRegistry != null) {
    content.append(""String_Node_Str"").append(dockerRegistry).append(SEP);
  }
  if (boot2DockerPath != null) {
    content.append(""String_Node_Str"").append(boot2DockerPath).append(SEP);
  }
  if (dockerMachinePath != null) {
    content.append(""String_Node_Str"").append(dockerMachinePath).append(SEP);
  }
  if (machineName != null) {
    content.append(""String_Node_Str"").append(machineName).append(SEP);
  }
  if (username != null) {
    content.append(""String_Node_Str"").append(username).append(SEP);
  }
  if (password != null) {
    content.append(""String_Node_Str"").append(password).append(SEP);
  }
  if (email != null) {
    content.append(""String_Node_Str"").append(email).append(SEP);
  }
  if (certPath != null) {
    content.append(""String_Node_Str"").append(certPath).append(SEP);
  }
  if (dockerServerIp != null) {
    content.append(""String_Node_Str"").append(dockerServerIp).append(SEP);
  }
  if (definitionFormat != null) {
    content.append(""String_Node_Str"").append(definitionFormat).append(SEP);
  }
  if (autoStartContainers != null) {
    content.append(""String_Node_Str"").append(autoStartContainers).append(SEP);
  }
  if (dockerContainersContent != null) {
    content.append(""String_Node_Str"").append(dockerContainersContent).append(SEP);
  }
  return content.toString();
}"
59294,"public static String asStringPreservingNewLines(InputStream response){
  StringWriter logwriter=new StringWriter();
  try (BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(response))){
    String line=null;
    while ((line=bufferedReader.readLine()) != null) {
      logwriter.write(line);
      logwriter.write(System.lineSeparator());
    }
    return logwriter.toString();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public static String asStringPreservingNewLines(InputStream response){
  StringWriter logwriter=new StringWriter();
  try (BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(response))){
    String line=null;
    while ((line=bufferedReader.readLine()) != null) {
      logwriter.write(line);
      logwriter.write(IOUtils.LINE_SEPARATOR_UNIX);
    }
    return logwriter.toString();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
59295,"@Override public String toString(){
  String SEP=System.getProperty(""String_Node_Str"");
  StringBuilder content=new StringBuilder();
  content.append(""String_Node_Str"").append(SEP);
  if (dockerServerVersion != null) {
    content.append(""String_Node_Str"").append(dockerServerVersion).append(SEP);
  }
  if (dockerServerUri != null) {
    content.append(""String_Node_Str"").append(dockerServerUri).append(SEP);
  }
  if (dockerRegistry != null) {
    content.append(""String_Node_Str"").append(dockerRegistry).append(SEP);
  }
  if (boot2DockerPath != null) {
    content.append(""String_Node_Str"").append(boot2DockerPath).append(SEP);
  }
  if (dockerMachinePath != null) {
    content.append(""String_Node_Str"").append(dockerMachinePath).append(SEP);
  }
  if (machineName != null) {
    content.append(""String_Node_Str"").append(machineName).append(SEP);
  }
  if (username != null) {
    content.append(""String_Node_Str"").append(username).append(SEP);
  }
  if (password != null) {
    content.append(""String_Node_Str"").append(password).append(SEP);
  }
  if (email != null) {
    content.append(""String_Node_Str"").append(email).append(SEP);
  }
  if (certPath != null) {
    content.append(""String_Node_Str"").append(certPath).append(SEP);
  }
  if (dockerServerIp != null) {
    content.append(""String_Node_Str"").append(dockerServerIp).append(SEP);
  }
  if (definitionFormat != null) {
    content.append(""String_Node_Str"").append(definitionFormat).append(SEP);
  }
  if (autoStartContainers != null) {
    content.append(""String_Node_Str"").append(autoStartContainers).append(SEP);
  }
  if (dockerContainersContent != null) {
    content.append(""String_Node_Str"").append(dockerContainersContent).append(SEP);
  }
  return content.toString();
}","@Override public String toString(){
  String SEP=System.getProperty(""String_Node_Str"");
  StringBuilder content=new StringBuilder();
  content.append(""String_Node_Str"").append(SEP);
  if (dockerServerVersion != null) {
    content.append(""String_Node_Str"").append(dockerServerVersion).append(SEP);
  }
  if (dockerServerUri != null) {
    content.append(""String_Node_Str"").append(dockerServerUri).append(SEP);
  }
  if (dockerRegistry != null) {
    content.append(""String_Node_Str"").append(dockerRegistry).append(SEP);
  }
  if (boot2DockerPath != null) {
    content.append(""String_Node_Str"").append(boot2DockerPath).append(SEP);
  }
  if (dockerMachinePath != null) {
    content.append(""String_Node_Str"").append(dockerMachinePath).append(SEP);
  }
  if (machineName != null) {
    content.append(""String_Node_Str"").append(machineName).append(SEP);
  }
  if (username != null) {
    content.append(""String_Node_Str"").append(username).append(SEP);
  }
  if (password != null) {
    content.append(""String_Node_Str"").append(password).append(SEP);
  }
  if (email != null) {
    content.append(""String_Node_Str"").append(email).append(SEP);
  }
  if (certPath != null) {
    content.append(""String_Node_Str"").append(certPath).append(SEP);
  }
  if (dockerServerIp != null) {
    content.append(""String_Node_Str"").append(dockerServerIp).append(SEP);
  }
  if (definitionFormat != null) {
    content.append(""String_Node_Str"").append(definitionFormat).append(SEP);
  }
  if (autoStartContainers != null) {
    content.append(""String_Node_Str"").append(autoStartContainers).append(SEP);
  }
  if (dockerContainersContent != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream ps=new PrintStream(baos);
    MapUtils.verbosePrint(ps,null,dockerContainersContent);
    content.append(""String_Node_Str"").append(baos.toString()).append(SEP);
  }
  return content.toString();
}"
59296,"private Ports assignPorts(List<String> portBindings){
  Ports ports=new Ports();
  for (  String portBinding : portBindings) {
    String[] elements=portBinding.split(PORTS_SEPARATOR);
    if (elements.length == 1) {
      log.info(""String_Node_Str"" + elements[0]);
      String exposedPortValue=elements[0].substring(0,elements[0].indexOf(""String_Node_Str""));
      ports.bind(ExposedPort.parse(elements[0]),toBinding(exposedPortValue));
    }
 else {
      if (elements.length == 2) {
        ports.bind(ExposedPort.parse(elements[1]),toBinding(elements[0]));
      }
    }
  }
  return ports;
}","private Ports assignPorts(List<String> portBindings){
  Ports ports=new Ports();
  for (  String portBinding : portBindings) {
    String[] elements=portBinding.split(PORTS_SEPARATOR);
    if (elements.length == 1) {
      log.info(""String_Node_Str"" + elements[0]);
      int positionOfProtocolSeparator=elements[0].indexOf(""String_Node_Str"");
      String bindingPortValue=elements[0];
      if (positionOfProtocolSeparator > -1) {
        bindingPortValue=elements[0].substring(0,positionOfProtocolSeparator);
      }
      ports.bind(ExposedPort.parse(elements[0]),toBinding(bindingPortValue));
    }
 else {
      if (elements.length == 2) {
        ports.bind(ExposedPort.parse(elements[1]),toBinding(elements[0]));
      }
    }
  }
  return ports;
}"
59297,"public static Binding binding(Map<String,Object> cubeConfiguration){
  Binding binding=new Binding(NO_GATEWAY);
  if (cubeConfiguration.containsKey(""String_Node_Str"")) {
    @SuppressWarnings(""String_Node_Str"") List<String> cubePortBindings=(List<String>)cubeConfiguration.get(""String_Node_Str"");
    for (    String cubePortBinding : cubePortBindings) {
      String[] elements=cubePortBinding.split(PORTS_SEPARATOR);
      if (elements.length == 1) {
        int exposedPort=Integer.parseInt(elements[0].substring(0,elements[0].indexOf(""String_Node_Str"")));
        binding.addPortBinding(exposedPort,exposedPort);
      }
 else {
        if (elements.length == 2) {
          int exposedPort=Integer.parseInt(elements[1].substring(0,elements[1].indexOf(""String_Node_Str"")));
          int port=Integer.parseInt(elements[0]);
          binding.addPortBinding(exposedPort,port);
        }
      }
    }
  }
  return binding;
}","public static Binding binding(Map<String,Object> cubeConfiguration){
  Binding binding=new Binding(NO_GATEWAY);
  if (cubeConfiguration.containsKey(""String_Node_Str"")) {
    @SuppressWarnings(""String_Node_Str"") List<String> cubePortBindings=(List<String>)cubeConfiguration.get(""String_Node_Str"");
    for (    String cubePortBinding : cubePortBindings) {
      String[] elements=cubePortBinding.split(PORTS_SEPARATOR);
      if (elements.length == 1) {
        int positionOfProtocolSeparator=elements[0].indexOf(""String_Node_Str"");
        String bindingPortValue=elements[0];
        if (positionOfProtocolSeparator > -1) {
          bindingPortValue=elements[0].substring(0,positionOfProtocolSeparator);
        }
        int exposedPort=Integer.parseInt(bindingPortValue);
        binding.addPortBinding(exposedPort,exposedPort);
      }
 else {
        if (elements.length == 2) {
          int exposedPort=Integer.parseInt(elements[1].substring(0,elements[1].indexOf(""String_Node_Str"")));
          int port=Integer.parseInt(elements[0]);
          binding.addPortBinding(exposedPort,port);
        }
      }
    }
  }
  return binding;
}"
59298,"public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  Set<ExposedPort> allExposedPorts=resolveExposedPorts(containerConfiguration,createContainerCmd);
  if (!allExposedPorts.isEmpty()) {
    int numberOfExposedPorts=allExposedPorts.size();
    createContainerCmd.withExposedPorts(allExposedPorts.toArray(new ExposedPort[numberOfExposedPorts]));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    env=resolveDockerServerIpInList(env);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(toVolumesFrom(volumesFrom));
  }
  boolean alwaysPull=false;
  if (containerConfiguration.containsKey(ALWAYS_PULL)) {
    alwaysPull=asBoolean(containerConfiguration,ALWAYS_PULL);
  }
  if (alwaysPull) {
    log.info(String.format(""String_Node_Str"",image));
    this.pullImage(image);
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    if (!alwaysPull) {
      log.warning(String.format(""String_Node_Str"",image));
      this.pullImage(image);
      return createContainerCmd.exec().getId();
    }
 else {
      throw e;
    }
  }
}","public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  Set<ExposedPort> allExposedPorts=resolveExposedPorts(containerConfiguration,createContainerCmd);
  if (!allExposedPorts.isEmpty()) {
    int numberOfExposedPorts=allExposedPorts.size();
    createContainerCmd.withExposedPorts(allExposedPorts.toArray(new ExposedPort[numberOfExposedPorts]));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withNetworkDisabled(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    env=resolveDockerServerIpInList(env);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(toVolumesFrom(volumesFrom));
  }
  if (containerConfiguration.containsKey(BINDS)) {
    List<String> binds=asListOfString(containerConfiguration,BINDS);
    createContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    createContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<String> portBindings=asListOfString(containerConfiguration,PORT_BINDINGS);
    Ports ports=assignPorts(portBindings);
    createContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    createContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    createContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    createContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    List<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    createContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    List<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    createContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    createContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    List<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    createContainerCmd.withCapAdd(toCapability(capAdds));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    List<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    createContainerCmd.withCapDrop(toCapability(capDrop));
  }
  boolean alwaysPull=false;
  if (containerConfiguration.containsKey(ALWAYS_PULL)) {
    alwaysPull=asBoolean(containerConfiguration,ALWAYS_PULL);
  }
  if (alwaysPull) {
    log.info(String.format(""String_Node_Str"",image));
    this.pullImage(image);
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    if (!alwaysPull) {
      log.warning(String.format(""String_Node_Str"",image));
      this.pullImage(image);
      return createContainerCmd.exec().getId();
    }
 else {
      throw e;
    }
  }
}"
59299,"public void startContainer(String id,Map<String,Object> containerConfiguration){
  StartContainerCmd startContainerCmd=this.dockerClient.startContainerCmd(id);
  if (containerConfiguration.containsKey(BINDS)) {
    List<String> binds=asListOfString(containerConfiguration,BINDS);
    startContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    startContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<String> portBindings=asListOfString(containerConfiguration,PORT_BINDINGS);
    Ports ports=assignPorts(portBindings);
    startContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    startContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    startContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    startContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    List<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    startContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    List<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    startContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    startContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    List<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    startContainerCmd.withCapAdd(toCapability(capAdds));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    List<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    startContainerCmd.withCapDrop(toCapability(capDrop));
  }
  startContainerCmd.exec();
}","public void startContainer(String id,Map<String,Object> containerConfiguration){
  StartContainerCmd startContainerCmd=this.dockerClient.startContainerCmd(id);
  startContainerCmd.exec();
}"
59300,"public void configure(@Observes ManagerStarted managerStarted){
  boot2DockerInstanceProducer.set(new Boot2Docker(new CommandLineExecutor()));
}","public void configure(@Observes(precedence=100) ManagerStarted managerStarted){
  boot2DockerInstanceProducer.set(new Boot2Docker(new CommandLineExecutor()));
}"
59301,"public void createClient(@Observes CubeConfiguration cubeConfiguration){
  dockerClientExecutorProducer.set(new DockerClientExecutor(cubeConfiguration,new CommandLineExecutor(),new OperatingSystemResolver()));
}","public void createClient(@Observes CubeConfiguration cubeConfiguration){
  dockerClientExecutorProducer.set(new DockerClientExecutor(cubeConfiguration,boot2DockerInstance.get(),new OperatingSystemResolver()));
}"
59302,"@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeConfigurator.class).observer(CubeClientCreator.class).observer(CubeRegistrar.class).observer(CubeLifecycleController.class).observer(CubeSuiteLifecycleController.class).observer(ClientCubeControllerCreator.class).observer(BeforeStopContainerObserver.class);
  builder.service(ResourceProvider.class,CubeResourceProvider.class);
  builder.service(ResourceProvider.class,CubeControllerProvider.class);
  if (Validate.classExists(""String_Node_Str"")) {
    builder.observer(ProtocolMetadataUpdater.class).observer(CubeContainerLifecycleController.class).observer(RemapContainerController.class).observer(CubeRemoteCommandObserver.class);
    builder.service(AuxiliaryArchiveAppender.class,CubeAuxiliaryArchiveAppender.class);
  }
  if (Validate.classExists(""String_Node_Str"")) {
    builder.service(ResourceProvider.class,CubeIDResourceProvider.class);
  }
}","@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeConfigurator.class).observer(CubeClientCreator.class).observer(CubeRegistrar.class).observer(CubeLifecycleController.class).observer(CubeSuiteLifecycleController.class).observer(ClientCubeControllerCreator.class).observer(BeforeStopContainerObserver.class).observer(Boot2DockerCreator.class);
  builder.service(ResourceProvider.class,CubeResourceProvider.class);
  builder.service(ResourceProvider.class,CubeControllerProvider.class);
  if (Validate.classExists(""String_Node_Str"")) {
    builder.observer(ProtocolMetadataUpdater.class).observer(CubeContainerLifecycleController.class).observer(ContainerConfigurationController.class).observer(CubeRemoteCommandObserver.class);
    builder.service(AuxiliaryArchiveAppender.class,CubeAuxiliaryArchiveAppender.class);
  }
  if (Validate.classExists(""String_Node_Str"")) {
    builder.service(ResourceProvider.class,CubeIDResourceProvider.class);
  }
}"
59303,"public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  Set<ExposedPort> allExposedPorts=resolveExposedPorts(containerConfiguration,createContainerCmd);
  if (!allExposedPorts.isEmpty()) {
    int numberOfExposedPorts=allExposedPorts.size();
    createContainerCmd.withExposedPorts(allExposedPorts.toArray(new ExposedPort[numberOfExposedPorts]));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(toVolumesFrom(volumesFrom));
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    log.warning(String.format(""String_Node_Str"",image));
    this.pullImage(image);
    return createContainerCmd.exec().getId();
  }
}","public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  Set<ExposedPort> allExposedPorts=resolveExposedPorts(containerConfiguration,createContainerCmd);
  if (!allExposedPorts.isEmpty()) {
    int numberOfExposedPorts=allExposedPorts.size();
    createContainerCmd.withExposedPorts(allExposedPorts.toArray(new ExposedPort[numberOfExposedPorts]));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    env=resolveBoot2DockerInList(env);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(toVolumesFrom(volumesFrom));
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    log.warning(String.format(""String_Node_Str"",image));
    this.pullImage(image);
    return createContainerCmd.exec().getId();
  }
}"
59304,"private String resolveBoot2Docker(String dockerServerUri,CubeConfiguration cubeConfiguration){
  String output=commandLineExecutor.execCommand(createBoot2DockerCommand(cubeConfiguration),""String_Node_Str"");
  Matcher m=IP_PATTERN.matcher(output);
  if (m.find()) {
    String ip=m.group();
    return dockerServerUri.replace(BOOT2DOCKER_TAG,ip);
  }
 else {
    String errorMessage=String.format(""String_Node_Str"",output);
    log.log(Level.SEVERE,errorMessage);
    throw new IllegalArgumentException(errorMessage);
  }
}","private String resolveBoot2Docker(String tag,CubeConfiguration cubeConfiguration){
  return tag.replaceAll(BOOT2DOCKER_TAG,boot2Docker.ip(cubeConfiguration,false));
}"
59305,"public DockerClientExecutor(CubeConfiguration cubeConfiguration,CommandLineExecutor commandLineExecutor,OperatingSystemResolver operatingSystemResolver){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  this.commandLineExecutor=commandLineExecutor;
  this.operatingSystemResolver=operatingSystemResolver;
  String dockerServerUri=resolveServerUri(cubeConfiguration);
  if (dockerServerUri.contains(BOOT2DOCKER_TAG)) {
    dockerServerUri=resolveBoot2Docker(dockerServerUri,cubeConfiguration);
    if (cubeConfiguration.getCertPath() == null) {
      configBuilder.withDockerCertPath(HomeResolverUtil.resolveHomeDirectoryChar(getDefaultTlsDirectory()));
    }
  }
  dockerUri=URI.create(dockerServerUri);
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  if (cubeConfiguration.getUsername() != null) {
    configBuilder.withUsername(cubeConfiguration.getUsername());
  }
  if (cubeConfiguration.getPassword() != null) {
    configBuilder.withPassword(cubeConfiguration.getPassword());
  }
  if (cubeConfiguration.getEmail() != null) {
    configBuilder.withEmail(cubeConfiguration.getEmail());
  }
  if (cubeConfiguration.getCertPath() != null) {
    configBuilder.withDockerCertPath(HomeResolverUtil.resolveHomeDirectoryChar(cubeConfiguration.getCertPath()));
  }
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}","public DockerClientExecutor(CubeConfiguration cubeConfiguration,Boot2Docker boot2Docker,OperatingSystemResolver operatingSystemResolver){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  this.boot2Docker=boot2Docker;
  this.operatingSystemResolver=operatingSystemResolver;
  String dockerServerUri=resolveServerUri(cubeConfiguration);
  if (dockerServerUri.contains(BOOT2DOCKER_TAG)) {
    dockerServerUri=resolveBoot2Docker(dockerServerUri,cubeConfiguration);
    if (cubeConfiguration.getCertPath() == null) {
      configBuilder.withDockerCertPath(HomeResolverUtil.resolveHomeDirectoryChar(getDefaultTlsDirectory()));
    }
  }
  dockerUri=URI.create(dockerServerUri);
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  if (cubeConfiguration.getUsername() != null) {
    configBuilder.withUsername(cubeConfiguration.getUsername());
  }
  if (cubeConfiguration.getPassword() != null) {
    configBuilder.withPassword(cubeConfiguration.getPassword());
  }
  if (cubeConfiguration.getEmail() != null) {
    configBuilder.withEmail(cubeConfiguration.getEmail());
  }
  if (cubeConfiguration.getCertPath() != null) {
    configBuilder.withDockerCertPath(HomeResolverUtil.resolveHomeDirectoryChar(cubeConfiguration.getCertPath()));
  }
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}"
59306,"@Test public void shouldGetDefaultBoot2DockerIfNoServerUriUnderMacOS(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(map);
  when(commandLineExecutor.execCommand(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(operatingSystemResolver.currentOperatingSystem()).thenReturn(OperatingSystem.MAC_OSX);
  DockerClientExecutor dockerClientExecutor=new DockerClientExecutor(cubeConfiguration,commandLineExecutor,operatingSystemResolver);
  assertThat(dockerClientExecutor.getDockerUri().getHost(),is(""String_Node_Str""));
}","@Test public void shouldGetDefaultBoot2DockerIfNoServerUriUnderMacOS(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(map);
  when(commandLineExecutor.execCommand(""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(operatingSystemResolver.currentOperatingSystem()).thenReturn(OperatingSystem.MAC_OSX);
  DockerClientExecutor dockerClientExecutor=new DockerClientExecutor(cubeConfiguration,new Boot2Docker(commandLineExecutor),operatingSystemResolver);
  assertThat(dockerClientExecutor.getDockerUri().getHost(),is(""String_Node_Str""));
}"
59307,"@Test public void shouldExecuteBoot2Docker(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(map);
  when(commandLineExecutor.execCommand(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  DockerClientExecutor dockerClientExecutor=new DockerClientExecutor(cubeConfiguration,commandLineExecutor,operatingSystemResolver);
  assertThat(dockerClientExecutor.getDockerUri().getHost(),is(""String_Node_Str""));
}","@Test public void shouldExecuteBoot2Docker(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(map);
  when(commandLineExecutor.execCommand(""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  DockerClientExecutor dockerClientExecutor=new DockerClientExecutor(cubeConfiguration,new Boot2Docker(commandLineExecutor),operatingSystemResolver);
  assertThat(dockerClientExecutor.getDockerUri().getHost(),is(""String_Node_Str""));
}"
59308,"@Test public void shouldGetDefaultBoot2DockerIfNoServerUriUnderWindows(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(map);
  when(commandLineExecutor.execCommand(""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(operatingSystemResolver.currentOperatingSystem()).thenReturn(OperatingSystem.WINDOWS_7);
  DockerClientExecutor dockerClientExecutor=new DockerClientExecutor(cubeConfiguration,commandLineExecutor,operatingSystemResolver);
  assertThat(dockerClientExecutor.getDockerUri().getHost(),is(""String_Node_Str""));
}","@Test public void shouldGetDefaultBoot2DockerIfNoServerUriUnderWindows(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  map.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(map);
  when(commandLineExecutor.execCommand(""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(operatingSystemResolver.currentOperatingSystem()).thenReturn(OperatingSystem.WINDOWS_7);
  DockerClientExecutor dockerClientExecutor=new DockerClientExecutor(cubeConfiguration,new Boot2Docker(commandLineExecutor),operatingSystemResolver);
  assertThat(dockerClientExecutor.getDockerUri().getHost(),is(""String_Node_Str""));
}"
59309,"@Test public void shouldGetDefaultUnixSocketIfNoServerUriUnderLinux(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(map);
  when(operatingSystemResolver.currentOperatingSystem()).thenReturn(OperatingSystem.LINUX_OS);
  DockerClientExecutor dockerClientExecutor=new DockerClientExecutor(cubeConfiguration,commandLineExecutor,operatingSystemResolver);
  assertThat(dockerClientExecutor.getDockerUri(),is(URI.create(""String_Node_Str"")));
}","@Test public void shouldGetDefaultUnixSocketIfNoServerUriUnderLinux(){
  Map<String,String> map=new HashMap<String,String>();
  map.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(map);
  when(operatingSystemResolver.currentOperatingSystem()).thenReturn(OperatingSystem.LINUX_OS);
  DockerClientExecutor dockerClientExecutor=new DockerClientExecutor(cubeConfiguration,new Boot2Docker(commandLineExecutor),operatingSystemResolver);
  assertThat(dockerClientExecutor.getDockerUri(),is(URI.create(""String_Node_Str"")));
}"
59310,"public void copyFromContainer(String containerId,Map<String,Object> configurationParameters) throws IOException {
  String to=null;
  String from=null;
  if (configurationParameters.containsKey(TO) && configurationParameters.containsKey(FROM)) {
    to=(String)configurationParameters.get(TO);
    from=(String)configurationParameters.get(FROM);
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerId));
  }
  InputStream response=dockerClient.copyFileFromContainerCmd(containerId,from).exec();
  Path toPath=Paths.get(to);
  Files.createDirectories(toPath);
  IOUtil.untar(response,toPath.toFile());
}","public void copyFromContainer(String containerId,Map<String,Object> configurationParameters) throws IOException {
  String to=null;
  String from=null;
  if (configurationParameters.containsKey(TO) && configurationParameters.containsKey(FROM)) {
    to=(String)configurationParameters.get(TO);
    from=(String)configurationParameters.get(FROM);
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerId));
  }
  InputStream response=dockerClient.copyFileFromContainerCmd(containerId,from).exec();
  Path toPath=Paths.get(to);
  File toPathFile=toPath.toFile();
  if (toPathFile.exists() && toPathFile.isFile()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",TO,toPath.normalize().toString()));
  }
  Files.createDirectories(toPath);
  IOUtil.untar(response,toPathFile);
}"
59311,"public void copyLog(String containerId,Map<String,Object> configurationParameters) throws IOException {
  String to=null;
  if (configurationParameters.containsKey(TO)) {
    to=(String)configurationParameters.get(TO);
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerId));
  }
  LogContainerCmd logContainerCmd=dockerClient.logContainerCmd(containerId).withStdErr().withStdOut();
  if (configurationParameters.containsKey(FOLLOW)) {
    logContainerCmd.withFollowStream((boolean)configurationParameters.get(FOLLOW));
  }
  if (configurationParameters.containsKey(STDOUT)) {
    logContainerCmd.withStdOut((boolean)configurationParameters.get(STDOUT));
  }
  if (configurationParameters.containsKey(STDERR)) {
    logContainerCmd.withStdErr((boolean)configurationParameters.get(STDERR));
  }
  if (configurationParameters.containsKey(TIMESTAMPS)) {
    logContainerCmd.withTimestamps((boolean)configurationParameters.get(TIMESTAMPS));
  }
  if (configurationParameters.containsKey(TAIL)) {
    logContainerCmd.withTail((int)configurationParameters.get(TAIL));
  }
  InputStream log=logContainerCmd.exec();
  Path toPath=Paths.get(to);
  Path toDirectory=toPath.getParent();
  Files.createDirectories(toDirectory);
  readDockerRawStream(log,new FileOutputStream(toPath.toFile()));
}","public void copyLog(String containerId,Map<String,Object> configurationParameters) throws IOException {
  String to=null;
  if (configurationParameters.containsKey(TO)) {
    to=(String)configurationParameters.get(TO);
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerId));
  }
  LogContainerCmd logContainerCmd=dockerClient.logContainerCmd(containerId).withStdErr().withStdOut();
  if (configurationParameters.containsKey(FOLLOW)) {
    logContainerCmd.withFollowStream((boolean)configurationParameters.get(FOLLOW));
  }
  if (configurationParameters.containsKey(STDOUT)) {
    logContainerCmd.withStdOut((boolean)configurationParameters.get(STDOUT));
  }
  if (configurationParameters.containsKey(STDERR)) {
    logContainerCmd.withStdErr((boolean)configurationParameters.get(STDERR));
  }
  if (configurationParameters.containsKey(TIMESTAMPS)) {
    logContainerCmd.withTimestamps((boolean)configurationParameters.get(TIMESTAMPS));
  }
  if (configurationParameters.containsKey(TAIL)) {
    logContainerCmd.withTail((int)configurationParameters.get(TAIL));
  }
  InputStream log=logContainerCmd.exec();
  Path toPath=Paths.get(to);
  File toPathFile=toPath.toFile();
  if (toPathFile.exists() && toPathFile.isDirectory()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",TO));
  }
  Path toDirectory=toPath.getParent();
  Files.createDirectories(toDirectory);
  readDockerRawStream(log,new FileOutputStream(toPathFile));
}"
59312,"public void configure(@Observes ManagerStarted managerStarted){
  boot2DockerInstanceProducer.set(new Boot2Docker(new CommandLineExecutor()));
}","public void configure(@Observes(precedence=100) ManagerStarted managerStarted){
  boot2DockerInstanceProducer.set(new Boot2Docker(new CommandLineExecutor()));
}"
59313,"private Map<String,String> resolveServerUriByOperativeSystem(Map<String,String> cubeConfiguration){
  if (!cubeConfiguration.containsKey(CubeConfiguration.DOCKER_URI)) {
    String serverUri=new OperatingSystemResolver().currentOperatingSystem().getFamily().getServerUri();
    cubeConfiguration.put(CubeConfiguration.DOCKER_URI,serverUri);
  }
  return cubeConfiguration;
}","private Map<String,String> resolveServerUriByOperativeSystem(Map<String,String> cubeConfiguration){
  if (!cubeConfiguration.containsKey(CubeConfiguration.DOCKER_URI)) {
    String serverUri=operatingSystemFamilyInstanceProducer.get().getServerUri();
    cubeConfiguration.put(CubeConfiguration.DOCKER_URI,serverUri);
  }
  return cubeConfiguration;
}"
59314,"public void configure(@Observes ArquillianDescriptor arquillianDescriptor){
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerIp(config);
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(config);
  configurationProducer.set(cubeConfiguration);
}","public void configure(@Observes ArquillianDescriptor arquillianDescriptor){
  operatingSystemFamilyInstanceProducer.set(new OperatingSystemResolver().currentOperatingSystem().getFamily());
  Map<String,String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties();
  config=resolveServerUriByOperativeSystem(config);
  config=resolveServerIp(config);
  CubeConfiguration cubeConfiguration=CubeConfiguration.fromMap(config);
  configurationProducer.set(cubeConfiguration);
}"
59315,"public void applyDockerServerIpChange(@Observes BeforeSetup event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry,CubeConfiguration cubeConfiguration){
  Container container=ContainerUtil.getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  ContainerDef containerConfiguration=container.getContainerConfiguration();
  resolveConfigurationPropertiesWithDockerServerIp(containerConfiguration,cubeConfiguration);
}","public void applyDockerServerIpChange(@Observes BeforeSetup event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry,CubeConfiguration cubeConfiguration) throws InstantiationException, IllegalAccessException, MalformedURLException {
  Container container=ContainerUtil.getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  ContainerDef containerConfiguration=container.getContainerConfiguration();
  boolean foundAttribute=resolveConfigurationPropertiesWithDockerServerIp(containerConfiguration,cubeConfiguration);
  if (!foundAttribute) {
    if (familyInstance.get().isBoot2Docker()) {
      Class<?> configurationClass=container.getDeployableContainer().getConfigurationClass();
      List<PropertyDescriptor> configurationClassHostOrAddressFields=filterConfigurationClassPropertiesByHostOrAddressAttribute(configurationClass);
      for (      PropertyDescriptor propertyDescriptor : configurationClassHostOrAddressFields) {
        containerConfiguration.overrideProperty(propertyDescriptor.getName(),cubeConfiguration.getDockerServerIp());
      }
    }
  }
}"
59316,"private void resolveConfigurationPropertiesWithDockerServerIp(ContainerDef containerDef,CubeConfiguration cubeConfiguration){
  for (  Entry<String,String> entry : containerDef.getContainerProperties().entrySet()) {
    if (hostPattern.matcher(entry.getKey()).matches() || addressPattern.matcher(entry.getKey()).matches()) {
      if (entry.getValue().contains(CubeConfiguration.DOCKER_SERVER_IP)) {
        containerDef.overrideProperty(entry.getKey(),entry.getValue().replaceAll(CubeConfiguration.DOCKER_SERVER_IP,cubeConfiguration.getDockerServerIp()));
      }
    }
  }
}","private boolean resolveConfigurationPropertiesWithDockerServerIp(ContainerDef containerDef,CubeConfiguration cubeConfiguration){
  boolean foundAttribute=false;
  for (  Entry<String,String> entry : containerDef.getContainerProperties().entrySet()) {
    if ((hostPattern.matcher(entry.getKey()).matches() || addressPattern.matcher(entry.getKey()).matches())) {
      foundAttribute=true;
      if (entry.getValue().contains(CubeConfiguration.DOCKER_SERVER_IP)) {
        containerDef.overrideProperty(entry.getKey(),entry.getValue().replaceAll(CubeConfiguration.DOCKER_SERVER_IP,cubeConfiguration.getDockerServerIp()));
      }
    }
  }
  return foundAttribute;
}"
59317,"public static final AwaitStrategy create(DockerClientExecutor dockerClientExecutor,Cube cube,Map<String,Object> options){
  if (options.containsKey(AWAIT)) {
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> awaitOptions=(Map<String,Object>)options.get(AWAIT);
    if (awaitOptions.containsKey(STRATEGY)) {
      String strategy=((String)awaitOptions.get(STRATEGY)).toLowerCase();
switch (strategy) {
case PollingAwaitStrategy.TAG:
        return new PollingAwaitStrategy(cube,dockerClientExecutor,awaitOptions);
case NativeAwaitStrategy.TAG:
      return new NativeAwaitStrategy(cube,dockerClientExecutor);
case StaticAwaitStrategy.TAG:
    return new StaticAwaitStrategy(cube,awaitOptions);
case SleepingAwaitStrategy.TAG:
  return new SleepingAwaitStrategy(cube,awaitOptions);
default :
return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}
 else {
log.warning(""String_Node_Str"");
return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}
 else {
log.warning(""String_Node_Str"");
return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}","public static final AwaitStrategy create(DockerClientExecutor dockerClientExecutor,Cube cube,Map<String,Object> options){
  if (options.containsKey(AWAIT)) {
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> awaitOptions=(Map<String,Object>)options.get(AWAIT);
    if (awaitOptions.containsKey(STRATEGY)) {
      String strategy=((String)awaitOptions.get(STRATEGY)).toLowerCase();
switch (strategy) {
case PollingAwaitStrategy.TAG:
        return new PollingAwaitStrategy(cube,dockerClientExecutor,awaitOptions);
case NativeAwaitStrategy.TAG:
      return new NativeAwaitStrategy(cube,dockerClientExecutor);
case StaticAwaitStrategy.TAG:
    return new StaticAwaitStrategy(cube,awaitOptions);
case SleepingAwaitStrategy.TAG:
  return new SleepingAwaitStrategy(cube,awaitOptions);
default :
return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}
 else {
log.fine(""String_Node_Str"");
return new PollingAwaitStrategy(cube,dockerClientExecutor,new HashMap<String,Object>());
}
}
 else {
log.fine(""String_Node_Str"");
return new PollingAwaitStrategy(cube,dockerClientExecutor,new HashMap<String,Object>());
}
}"
59318,"@Test public void should_create_native_await_strategy_if_no_strategy_is_provided(){
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> content=(Map<String,Object>)new Yaml().load(CONTENT_WITH_NO_STRATEGY);
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> tomcatConfig=(Map<String,Object>)content.get(""String_Node_Str"");
  AwaitStrategy strategy=AwaitStrategyFactory.create(null,cube,tomcatConfig);
  assertThat(strategy,instanceOf(NativeAwaitStrategy.class));
}","@Test public void should_create_native_await_strategy_if_no_strategy_is_provided(){
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> content=(Map<String,Object>)new Yaml().load(CONTENT_WITH_NO_STRATEGY);
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> tomcatConfig=(Map<String,Object>)content.get(""String_Node_Str"");
  AwaitStrategy strategy=AwaitStrategyFactory.create(null,cube,tomcatConfig);
  assertThat(strategy,instanceOf(PollingAwaitStrategy.class));
}"
59319,"private String getDefaultTlsDirectory(){
  return System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
}","private String getDefaultTlsDirectory(){
  return ""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
}"
59320,"public DockerClientExecutor(CubeConfiguration cubeConfiguration,CommandLineExecutor commandLineExecutor,OperatingSystemResolver operatingSystemResolver){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  this.commandLineExecutor=commandLineExecutor;
  this.operatingSystemResolver=operatingSystemResolver;
  String dockerServerUri=resolveServerUri(cubeConfiguration);
  if (dockerServerUri.contains(BOOT2DOCKER_TAG)) {
    dockerServerUri=resolveBoot2Docker(dockerServerUri,cubeConfiguration);
    if (cubeConfiguration.getCertPath() == null) {
      configBuilder.withDockerCertPath(getDefaultTlsDirectory());
    }
  }
  dockerUri=URI.create(dockerServerUri);
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  if (cubeConfiguration.getUsername() != null) {
    configBuilder.withUsername(cubeConfiguration.getUsername());
  }
  if (cubeConfiguration.getPassword() != null) {
    configBuilder.withPassword(cubeConfiguration.getPassword());
  }
  if (cubeConfiguration.getEmail() != null) {
    configBuilder.withEmail(cubeConfiguration.getEmail());
  }
  if (cubeConfiguration.getCertPath() != null) {
    configBuilder.withDockerCertPath(cubeConfiguration.getCertPath());
  }
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}","public DockerClientExecutor(CubeConfiguration cubeConfiguration,CommandLineExecutor commandLineExecutor,OperatingSystemResolver operatingSystemResolver){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  this.commandLineExecutor=commandLineExecutor;
  this.operatingSystemResolver=operatingSystemResolver;
  String dockerServerUri=resolveServerUri(cubeConfiguration);
  if (dockerServerUri.contains(BOOT2DOCKER_TAG)) {
    dockerServerUri=resolveBoot2Docker(dockerServerUri,cubeConfiguration);
    if (cubeConfiguration.getCertPath() == null) {
      configBuilder.withDockerCertPath(HomeResolverUtil.resolveHomeDirectoryChar(getDefaultTlsDirectory()));
    }
  }
  dockerUri=URI.create(dockerServerUri);
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  if (cubeConfiguration.getUsername() != null) {
    configBuilder.withUsername(cubeConfiguration.getUsername());
  }
  if (cubeConfiguration.getPassword() != null) {
    configBuilder.withPassword(cubeConfiguration.getPassword());
  }
  if (cubeConfiguration.getEmail() != null) {
    configBuilder.withEmail(cubeConfiguration.getEmail());
  }
  if (cubeConfiguration.getCertPath() != null) {
    configBuilder.withDockerCertPath(HomeResolverUtil.resolveHomeDirectoryChar(cubeConfiguration.getCertPath()));
  }
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}"
59321,"public String execStart(String containerId,String... commands){
  ExecCreateCmdResponse execCreateCmdResponse=this.dockerClient.execCreateCmd(containerId).withAttachStdout(true).withAttachStdin(false).withAttachStderr(false).withTty().withCmd(commands).exec();
  InputStream consoleOutputStream=dockerClient.execStartCmd(execCreateCmdResponse.getId()).withDetach(false).exec();
  String output;
  try {
    output=readExecResult(consoleOutputStream);
  }
 catch (  IOException e) {
    return ""String_Node_Str"";
  }
  return output;
}","public String execStart(String containerId,String... commands){
  ExecCreateCmdResponse execCreateCmdResponse=this.dockerClient.execCreateCmd(containerId).withAttachStdout(true).withAttachStdin(false).withAttachStderr(false).withTty().withCmd(commands).exec();
  InputStream consoleOutputStream=dockerClient.execStartCmd(execCreateCmdResponse.getId()).withDetach(false).exec();
  String output;
  try {
    output=readDockerRawStreamToString(consoleOutputStream);
  }
 catch (  IOException e) {
    return ""String_Node_Str"";
  }
  return output;
}"
59322,"public void copyLog(String containerId,Map<String,Object> configurationParameters) throws IOException {
  String to=null;
  if (configurationParameters.containsKey(TO)) {
    to=(String)configurationParameters.get(TO);
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerId));
  }
  LogContainerCmd logContainerCmd=dockerClient.logContainerCmd(containerId).withStdErr().withStdOut();
  if (configurationParameters.containsKey(FOLLOW)) {
    logContainerCmd.withFollowStream((boolean)configurationParameters.get(FOLLOW));
  }
  if (configurationParameters.containsKey(STDOUT)) {
    logContainerCmd.withStdOut((boolean)configurationParameters.get(STDOUT));
  }
  if (configurationParameters.containsKey(STDERR)) {
    logContainerCmd.withStdErr((boolean)configurationParameters.get(STDERR));
  }
  if (configurationParameters.containsKey(TIMESTAMPS)) {
    logContainerCmd.withTimestamps((boolean)configurationParameters.get(TIMESTAMPS));
  }
  if (configurationParameters.containsKey(TAIL)) {
    logContainerCmd.withTail((int)configurationParameters.get(TAIL));
  }
  InputStream log=logContainerCmd.exec();
  Path toPath=Paths.get(to);
  Path toDirectory=toPath.getParent();
  Files.createDirectories(toDirectory);
  String logContent=readExecResult(log);
  IOUtil.toFile(logContent,toPath.toFile());
}","public void copyLog(String containerId,Map<String,Object> configurationParameters) throws IOException {
  String to=null;
  if (configurationParameters.containsKey(TO)) {
    to=(String)configurationParameters.get(TO);
  }
 else {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerId));
  }
  LogContainerCmd logContainerCmd=dockerClient.logContainerCmd(containerId).withStdErr().withStdOut();
  if (configurationParameters.containsKey(FOLLOW)) {
    logContainerCmd.withFollowStream((boolean)configurationParameters.get(FOLLOW));
  }
  if (configurationParameters.containsKey(STDOUT)) {
    logContainerCmd.withStdOut((boolean)configurationParameters.get(STDOUT));
  }
  if (configurationParameters.containsKey(STDERR)) {
    logContainerCmd.withStdErr((boolean)configurationParameters.get(STDERR));
  }
  if (configurationParameters.containsKey(TIMESTAMPS)) {
    logContainerCmd.withTimestamps((boolean)configurationParameters.get(TIMESTAMPS));
  }
  if (configurationParameters.containsKey(TAIL)) {
    logContainerCmd.withTail((int)configurationParameters.get(TAIL));
  }
  InputStream log=logContainerCmd.exec();
  Path toPath=Paths.get(to);
  Path toDirectory=toPath.getParent();
  Files.createDirectories(toDirectory);
  readDockerRawStream(log,new FileOutputStream(toPath.toFile()));
}"
59323,"public String execStart(String containerId,String... commands){
  return ""String_Node_Str"";
}","public String execStart(String containerId,String... commands){
  ExecCreateCmdResponse execCreateCmdResponse=this.dockerClient.execCreateCmd(containerId).withAttachStdout(true).withAttachStdin(false).withAttachStderr(false).withTty().withCmd(commands).exec();
  InputStream consoleOutputStream=dockerClient.execStartCmd(execCreateCmdResponse.getId()).withDetach(false).exec();
  String output;
  try {
    output=readExecResult(consoleOutputStream);
  }
 catch (  IOException e) {
    return ""String_Node_Str"";
  }
  return output;
}"
59324,"private static boolean execContainerPing(DockerClientExecutor dockerClientExecutor,String containerId,String command){
  String result=dockerClientExecutor.execStart(containerId,command);
  try {
    int numberOfListenConnectons=Integer.parseInt(result.trim());
    return numberOfListenConnectons > 0;
  }
 catch (  NumberFormatException e) {
    return false;
  }
}","private static boolean execContainerPing(DockerClientExecutor dockerClientExecutor,String containerId,String command){
  String result=dockerClientExecutor.execStart(containerId,new String[]{""String_Node_Str"",""String_Node_Str"",command});
  try {
    int numberOfListenConnectons=Integer.parseInt(result.trim());
    return numberOfListenConnectons > 0;
  }
 catch (  NumberFormatException e) {
    return false;
  }
}"
59325,"public DockerClientExecutor(CubeConfiguration cubeConfiguration,CommandLineExecutor commandLineExecutor,OperatingSystemResolver operatingSystemResolver){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  this.commandLineExecutor=commandLineExecutor;
  this.operatingSystemResolver=operatingSystemResolver;
  String dockerServerUri=resolveServerUri(cubeConfiguration);
  if (dockerServerUri.contains(BOOT2DOCKER_TAG)) {
    dockerServerUri=resolveBoot2Docker(dockerServerUri,cubeConfiguration);
  }
  dockerUri=URI.create(dockerServerUri);
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  if (cubeConfiguration.getUsername() != null) {
    configBuilder.withUsername(cubeConfiguration.getUsername());
  }
  if (cubeConfiguration.getPassword() != null) {
    configBuilder.withPassword(cubeConfiguration.getPassword());
  }
  if (cubeConfiguration.getEmail() != null) {
    configBuilder.withEmail(cubeConfiguration.getEmail());
  }
  if (cubeConfiguration.getCertPath() != null) {
    configBuilder.withDockerCertPath(cubeConfiguration.getCertPath());
  }
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}","public DockerClientExecutor(CubeConfiguration cubeConfiguration,CommandLineExecutor commandLineExecutor,OperatingSystemResolver operatingSystemResolver){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  this.commandLineExecutor=commandLineExecutor;
  this.operatingSystemResolver=operatingSystemResolver;
  String dockerServerUri=resolveServerUri(cubeConfiguration);
  if (dockerServerUri.contains(BOOT2DOCKER_TAG)) {
    dockerServerUri=resolveBoot2Docker(dockerServerUri,cubeConfiguration);
    if (cubeConfiguration.getCertPath() == null) {
      configBuilder.withDockerCertPath(getDefaultTlsDirectory());
    }
  }
  dockerUri=URI.create(dockerServerUri);
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  if (cubeConfiguration.getUsername() != null) {
    configBuilder.withUsername(cubeConfiguration.getUsername());
  }
  if (cubeConfiguration.getPassword() != null) {
    configBuilder.withPassword(cubeConfiguration.getPassword());
  }
  if (cubeConfiguration.getEmail() != null) {
    configBuilder.withEmail(cubeConfiguration.getEmail());
  }
  if (cubeConfiguration.getCertPath() != null) {
    configBuilder.withDockerCertPath(cubeConfiguration.getCertPath());
  }
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}"
59326,"public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  Set<ExposedPort> allExposedPorts=resolveExposedPorts(containerConfiguration,createContainerCmd);
  if (!allExposedPorts.isEmpty()) {
    int numberOfExposedPorts=allExposedPorts.size();
    createContainerCmd.withExposedPorts(allExposedPorts.toArray(new ExposedPort[numberOfExposedPorts]));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(volumesFrom.toArray(new String[volumesFrom.size()]));
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    log.warning(String.format(""String_Node_Str"",image));
    this.pullImage(image);
    return createContainerCmd.exec().getId();
  }
}","public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  Set<ExposedPort> allExposedPorts=resolveExposedPorts(containerConfiguration,createContainerCmd);
  if (!allExposedPorts.isEmpty()) {
    int numberOfExposedPorts=allExposedPorts.size();
    createContainerCmd.withExposedPorts(allExposedPorts.toArray(new ExposedPort[numberOfExposedPorts]));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(toVolumesFrom(volumesFrom));
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    log.warning(String.format(""String_Node_Str"",image));
    this.pullImage(image);
    return createContainerCmd.exec().getId();
  }
}"
59327,"@SuppressWarnings(""String_Node_Str"") public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(BOOT2DOCKER_PATH)) {
    cubeConfiguration.boot2DockerPath=map.get(BOOT2DOCKER_PATH);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(content));
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(new FileInputStream(location)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    cubeConfiguration.autoStartContainers=ConfigUtil.trim(map.get(AUTO_START_CONTAINERS).split(""String_Node_Str""));
  }
  if (map.containsKey(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS)) {
    cubeConfiguration.shouldAllowToConnectToRunningContainers=Boolean.parseBoolean(map.get(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS));
  }
  return cubeConfiguration;
}","@SuppressWarnings(""String_Node_Str"") public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(BOOT2DOCKER_PATH)) {
    cubeConfiguration.boot2DockerPath=map.get(BOOT2DOCKER_PATH);
  }
  if (map.containsKey(USERNAME)) {
    cubeConfiguration.username=map.get(USERNAME);
  }
  if (map.containsKey(PASSWORD)) {
    cubeConfiguration.password=map.get(PASSWORD);
  }
  if (map.containsKey(EMAIL)) {
    cubeConfiguration.email=map.get(EMAIL);
  }
  if (map.containsKey(CERT_PATH)) {
    cubeConfiguration.certPath=map.get(CERT_PATH);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(content));
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(new FileInputStream(location)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    cubeConfiguration.autoStartContainers=ConfigUtil.trim(map.get(AUTO_START_CONTAINERS).split(""String_Node_Str""));
  }
  if (map.containsKey(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS)) {
    cubeConfiguration.shouldAllowToConnectToRunningContainers=Boolean.parseBoolean(map.get(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS));
  }
  return cubeConfiguration;
}"
59328,"public DockerClientExecutor(CubeConfiguration cubeConfiguration,CommandLineExecutor commandLineExecutor,OperatingSystemResolver operatingSystemResolver){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  this.commandLineExecutor=commandLineExecutor;
  this.operatingSystemResolver=operatingSystemResolver;
  String dockerServerUri=resolveServerUri(cubeConfiguration);
  if (dockerServerUri.contains(BOOT2DOCKER_TAG)) {
    dockerServerUri=resolveBoot2Docker(dockerServerUri,cubeConfiguration);
  }
  dockerUri=URI.create(dockerServerUri);
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}","public DockerClientExecutor(CubeConfiguration cubeConfiguration,CommandLineExecutor commandLineExecutor,OperatingSystemResolver operatingSystemResolver){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  this.commandLineExecutor=commandLineExecutor;
  this.operatingSystemResolver=operatingSystemResolver;
  String dockerServerUri=resolveServerUri(cubeConfiguration);
  if (dockerServerUri.contains(BOOT2DOCKER_TAG)) {
    dockerServerUri=resolveBoot2Docker(dockerServerUri,cubeConfiguration);
  }
  dockerUri=URI.create(dockerServerUri);
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  if (cubeConfiguration.getUsername() != null) {
    configBuilder.withUsername(cubeConfiguration.getUsername());
  }
  if (cubeConfiguration.getPassword() != null) {
    configBuilder.withPassword(cubeConfiguration.getPassword());
  }
  if (cubeConfiguration.getEmail() != null) {
    configBuilder.withEmail(cubeConfiguration.getEmail());
  }
  if (cubeConfiguration.getCertPath() != null) {
    configBuilder.withDockerCertPath(cubeConfiguration.getCertPath());
  }
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}"
59329,"public void createClient(@Observes CubeConfiguration cubeConfiguration){
  dockerClientExecutorProducer.set(new DockerClientExecutor(cubeConfiguration));
}","public void createClient(@Observes CubeConfiguration cubeConfiguration){
  dockerClientExecutorProducer.set(new DockerClientExecutor(cubeConfiguration,new CommandLineExecutor()));
}"
59330,"@SuppressWarnings(""String_Node_Str"") public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(content));
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(new FileInputStream(location)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    cubeConfiguration.autoStartContainers=ConfigUtil.trim(map.get(AUTO_START_CONTAINERS).split(""String_Node_Str""));
  }
  if (map.containsKey(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS)) {
    cubeConfiguration.shouldAllowToConnectToRunningContainers=Boolean.parseBoolean(map.get(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS));
  }
  return cubeConfiguration;
}","@SuppressWarnings(""String_Node_Str"") public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(BOOT2DOCKER_PATH)) {
    cubeConfiguration.boot2DockerPath=map.get(BOOT2DOCKER_PATH);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(content));
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(new FileInputStream(location)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    cubeConfiguration.autoStartContainers=ConfigUtil.trim(map.get(AUTO_START_CONTAINERS).split(""String_Node_Str""));
  }
  if (map.containsKey(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS)) {
    cubeConfiguration.shouldAllowToConnectToRunningContainers=Boolean.parseBoolean(map.get(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS));
  }
  return cubeConfiguration;
}"
59331,"public DockerClientExecutor(CubeConfiguration cubeConfiguration){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  dockerUri=URI.create(cubeConfiguration.getDockerServerUri());
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}","public DockerClientExecutor(CubeConfiguration cubeConfiguration,CommandLineExecutor commandLineExecutor){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  this.commandLineExecutor=commandLineExecutor;
  String dockerServerUri=cubeConfiguration.getDockerServerUri();
  if (dockerServerUri.contains(BOOT2DOCKER_TAG)) {
    dockerServerUri=resolveBoot2Docker(dockerServerUri,cubeConfiguration);
  }
  dockerUri=URI.create(dockerServerUri);
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(dockerUri.toString());
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}"
59332,"@SuppressWarnings(""String_Node_Str"") public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(BOOT2DOCKER_PATH)) {
    cubeConfiguration.boot2DockerPath=map.get(BOOT2DOCKER_PATH);
  }
  if (map.containsKey(USERNAME)) {
    cubeConfiguration.username=map.get(USERNAME);
  }
  if (map.containsKey(PASSWORD)) {
    cubeConfiguration.password=map.get(PASSWORD);
  }
  if (map.containsKey(EMAIL)) {
    cubeConfiguration.email=map.get(EMAIL);
  }
  if (map.containsKey(CERT_PATH)) {
    cubeConfiguration.certPath=map.get(CERT_PATH);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(content));
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(new FileInputStream(location)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    cubeConfiguration.autoStartContainers=ConfigUtil.trim(map.get(AUTO_START_CONTAINERS).split(""String_Node_Str""));
  }
  if (map.containsKey(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS)) {
    cubeConfiguration.shouldAllowToConnectToRunningContainers=Boolean.parseBoolean(map.get(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS));
  }
  return cubeConfiguration;
}","@SuppressWarnings(""String_Node_Str"") public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(BOOT2DOCKER_PATH)) {
    cubeConfiguration.boot2DockerPath=map.get(BOOT2DOCKER_PATH);
  }
  if (map.containsKey(USERNAME)) {
    cubeConfiguration.username=map.get(USERNAME);
  }
  if (map.containsKey(PASSWORD)) {
    cubeConfiguration.password=map.get(PASSWORD);
  }
  if (map.containsKey(EMAIL)) {
    cubeConfiguration.email=map.get(EMAIL);
  }
  if (map.containsKey(CERT_PATH)) {
    cubeConfiguration.certPath=map.get(CERT_PATH);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(content));
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(new FileInputStream(location)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    cubeConfiguration.autoStartContainers=ConfigUtil.trim(map.get(AUTO_START_CONTAINERS).split(""String_Node_Str""));
  }
  if (map.containsKey(CONNECTION_MODE)) {
    cubeConfiguration.connectionMode=ConnectionMode.valueOf(ConnectionMode.class,map.get(CONNECTION_MODE));
  }
  return cubeConfiguration;
}"
59333,"private void startAllSteps(List<String[]> autoStartSteps,boolean allowToConnectToRunningContainers){
  for (  final String[] cubeIds : autoStartSteps) {
    Map<String,Future<RuntimeException>> stepStatus=new HashMap<>();
    for (    final String cubeId : cubeIds) {
      Future<RuntimeException> result=executorServiceInst.get().submit(new StartCubes(cubeId,allowToConnectToRunningContainers));
      stepStatus.put(cubeId,result);
    }
    waitForCompletion(stepStatus,""String_Node_Str"");
  }
}","private void startAllSteps(List<String[]> autoStartSteps,ConnectionMode connectionMode){
  for (  final String[] cubeIds : autoStartSteps) {
    Map<String,Future<RuntimeException>> stepStatus=new HashMap<>();
    for (    final String cubeId : cubeIds) {
      Future<RuntimeException> result=executorServiceInst.get().submit(new StartCubes(cubeId,connectionMode));
      stepStatus.put(cubeId,result);
    }
    waitForCompletion(stepStatus,""String_Node_Str"");
  }
}"
59334,"public void startAutoContainers(@Observes(precedence=100) BeforeSuite event,final CubeConfiguration configuration){
  List<String[]> autoStartSteps=AutoStartOrderUtil.getAutoStartOrder(configuration);
  startAllSteps(autoStartSteps,configuration.shouldAllowToConnectToRunningContainers());
}","public void startAutoContainers(@Observes(precedence=100) BeforeSuite event,final CubeConfiguration configuration){
  List<String[]> autoStartSteps=AutoStartOrderUtil.getAutoStartOrder(configuration);
  startAllSteps(autoStartSteps,configuration.getConnectionMode());
}"
59335,"private StartCubes(String cubeId,boolean shouldAllowToConnectToRunningContainers){
  this.cubeId=cubeId;
  this.allowToConnectToRunningContainers=shouldAllowToConnectToRunningContainers;
}","private StartCubes(String cubeId,ConnectionMode connectionMode){
  this.cubeId=cubeId;
  this.connectionMode=connectionMode;
}"
59336,"public void startCubeMappedContainer(@Observes BeforeStart event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry,CubeConfiguration cubeConfiguration){
  Container container=ContainerUtil.getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  if (cubeConfiguration.shouldAllowToConnectToRunningContainers() && isCubeRunning(cube)) {
    controlEvent.fire(new PreRunningCube(cube));
    return;
  }
  controlEvent.fire(new CreateCube(cube));
  controlEvent.fire(new StartCube(cube));
}","public void startCubeMappedContainer(@Observes BeforeStart event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry,CubeConfiguration cubeConfiguration){
  Container container=ContainerUtil.getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  ConnectionMode connectionMode=cubeConfiguration.getConnectionMode();
  if (connectionMode.isAllowReconnect() && isCubeRunning(cube)) {
    controlEvent.fire(new PreRunningCube(cube));
    return;
  }
  controlEvent.fire(new CreateCube(cube));
  controlEvent.fire(new StartCube(cube));
  if (connectionMode.isAllowReconnect() && !connectionMode.isStoppable()) {
    controlEvent.fire(new PreRunningCube(cube));
  }
}"
59337,"@Test public void shouldUsePreRunningContainers(){
  Map<String,String> data=new HashMap<String,String>();
  data.put(""String_Node_Str"",""String_Node_Str"");
  data.put(""String_Node_Str"",""String_Node_Str"");
  data.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration configuration=CubeConfiguration.fromMap(data);
  bind(ApplicationScoped.class,CubeConfiguration.class,configuration);
  Container container=mock(Container.class);
  when(container.getNames()).thenReturn(new String[]{""String_Node_Str""});
  when(executor.listRunningContainers()).thenReturn(Arrays.asList(container));
  bind(ApplicationScoped.class,DockerClientExecutor.class,executor);
  fire(new BeforeSuite());
  assertEventFired(CreateCube.class,1);
  assertEventFired(StartCube.class,1);
  assertEventFired(PreRunningCube.class,1);
  assertEventFiredOnOtherThread(CreateCube.class);
  assertEventFiredOnOtherThread(StartCube.class);
  assertEventFiredOnOtherThread(PreRunningCube.class);
}","@Test public void shouldUsePreRunningContainers(){
  Map<String,String> data=new HashMap<String,String>();
  data.put(""String_Node_Str"",""String_Node_Str"");
  data.put(""String_Node_Str"",ConnectionMode.STARTORCONNECT.name());
  data.put(""String_Node_Str"",""String_Node_Str"");
  CubeConfiguration configuration=CubeConfiguration.fromMap(data);
  bind(ApplicationScoped.class,CubeConfiguration.class,configuration);
  Container container=mock(Container.class);
  when(container.getNames()).thenReturn(new String[]{""String_Node_Str""});
  when(executor.listRunningContainers()).thenReturn(Arrays.asList(container));
  bind(ApplicationScoped.class,DockerClientExecutor.class,executor);
  fire(new BeforeSuite());
  assertEventFired(CreateCube.class,1);
  assertEventFired(StartCube.class,1);
  assertEventFired(PreRunningCube.class,1);
  assertEventFiredOnOtherThread(CreateCube.class);
  assertEventFiredOnOtherThread(StartCube.class);
  assertEventFiredOnOtherThread(PreRunningCube.class);
}"
59338,"private Set<ExposedPort> resolveExposedPorts(Map<String,Object> containerConfiguration,CreateContainerCmd createContainerCmd){
  Set<ExposedPort> allExposedPorts=new HashSet<>();
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<String> portBindings=asListOfString(containerConfiguration,PORT_BINDINGS);
    Ports assignPorts=assignPorts(portBindings);
    Map<ExposedPort,Binding> bindings=assignPorts.getBindings();
    Set<ExposedPort> exposedPorts=bindings.keySet();
    allExposedPorts.addAll(exposedPorts);
  }
  if (containerConfiguration.containsKey(EXPOSED_PORTS)) {
    Set<ExposedPort> exposedPorts=toExposedPorts(asListOfString(containerConfiguration,EXPOSED_PORTS));
    allExposedPorts.addAll(exposedPorts);
  }
  return allExposedPorts;
}","private Set<ExposedPort> resolveExposedPorts(Map<String,Object> containerConfiguration,CreateContainerCmd createContainerCmd){
  Set<ExposedPort> allExposedPorts=new HashSet<>();
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<String> portBindings=asListOfString(containerConfiguration,PORT_BINDINGS);
    Ports assignPorts=assignPorts(portBindings);
    Map<ExposedPort,Binding[]> bindings=assignPorts.getBindings();
    Set<ExposedPort> exposedPorts=bindings.keySet();
    allExposedPorts.addAll(exposedPorts);
  }
  if (containerConfiguration.containsKey(EXPOSED_PORTS)) {
    Set<ExposedPort> exposedPorts=toExposedPorts(asListOfString(containerConfiguration,EXPOSED_PORTS));
    allExposedPorts.addAll(exposedPorts);
  }
  return allExposedPorts;
}"
59339,"public void startContainer(String id,Map<String,Object> containerConfiguration){
  StartContainerCmd startContainerCmd=this.dockerClient.startContainerCmd(id);
  if (containerConfiguration.containsKey(BINDS)) {
    List<String> binds=asListOfString(containerConfiguration,BINDS);
    startContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    startContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<String> portBindings=asListOfString(containerConfiguration,PORT_BINDINGS);
    Ports ports=assignPorts(portBindings);
    startContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    startContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    startContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    startContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    List<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    startContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    List<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    startContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    startContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    List<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    startContainerCmd.withCapAdd(capAdds.toArray(new String[capAdds.size()]));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    List<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    startContainerCmd.withCapDrop(capDrop.toArray(new String[capDrop.size()]));
  }
  startContainerCmd.exec();
}","public void startContainer(String id,Map<String,Object> containerConfiguration){
  StartContainerCmd startContainerCmd=this.dockerClient.startContainerCmd(id);
  if (containerConfiguration.containsKey(BINDS)) {
    List<String> binds=asListOfString(containerConfiguration,BINDS);
    startContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    startContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<String> portBindings=asListOfString(containerConfiguration,PORT_BINDINGS);
    Ports ports=assignPorts(portBindings);
    startContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    startContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    startContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    startContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    List<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    startContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    List<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    startContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    startContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    List<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    startContainerCmd.withCapAdd(toCapability(capAdds));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    List<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    startContainerCmd.withCapDrop(toCapability(capDrop));
  }
  startContainerCmd.exec();
}"
59340,"private static final ExposedPort[] toExposedPorts(List<String> exposedPortsList){
  ExposedPort[] exposedPorts=new ExposedPort[exposedPortsList.size()];
  for (int i=0; i < exposedPorts.length; i++) {
    exposedPorts[i]=ExposedPort.parse(exposedPortsList.get(i));
  }
  return exposedPorts;
}","private static final Set<ExposedPort> toExposedPorts(List<String> exposedPortsList){
  Set<ExposedPort> exposedPorts=new HashSet<>();
  for (  String exposedPort : exposedPortsList) {
    exposedPorts.add(ExposedPort.parse(exposedPort));
  }
  return exposedPorts;
}"
59341,"public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  if (containerConfiguration.containsKey(EXPOSED_PORTS)) {
    List<String> exposedPorts=asListOfString(containerConfiguration,EXPOSED_PORTS);
    createContainerCmd.withExposedPorts(toExposedPorts(exposedPorts));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(volumesFrom.toArray(new String[volumesFrom.size()]));
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    log.warning(String.format(""String_Node_Str"",image));
    this.pullImage(image);
    return createContainerCmd.exec().getId();
  }
}","public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  Set<ExposedPort> allExposedPorts=resolveExposedPorts(containerConfiguration,createContainerCmd);
  if (!allExposedPorts.isEmpty()) {
    int numberOfExposedPorts=allExposedPorts.size();
    createContainerCmd.withExposedPorts(allExposedPorts.toArray(new ExposedPort[numberOfExposedPorts]));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(volumesFrom.toArray(new String[volumesFrom.size()]));
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    log.warning(String.format(""String_Node_Str"",image));
    this.pullImage(image);
    return createContainerCmd.exec().getId();
  }
}"
59342,"@SuppressWarnings(""String_Node_Str"") public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(content));
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(new FileInputStream(location)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    cubeConfiguration.autoStartContainers=ConfigUtil.trim(map.get(AUTO_START_CONTAINERS).split(""String_Node_Str""));
  }
  return cubeConfiguration;
}","@SuppressWarnings(""String_Node_Str"") public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(content));
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=ConfigUtil.applyExtendsRules((Map<String,Object>)new Yaml().load(new FileInputStream(location)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  if (map.containsKey(AUTO_START_CONTAINERS)) {
    cubeConfiguration.autoStartContainers=ConfigUtil.trim(map.get(AUTO_START_CONTAINERS).split(""String_Node_Str""));
  }
  if (map.containsKey(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS)) {
    cubeConfiguration.shouldAllowToConnectToRunningContainers=Boolean.parseBoolean(map.get(SHOULD_ALLOW_TO_CONNECT_TO_RUNNING_CONTAINERS));
  }
  return cubeConfiguration;
}"
59343,"public void startAutoContainers(@Observes(precedence=100) BeforeSuite event,CubeConfiguration configuration){
  for (  String cubeId : configuration.getAutoStartContainers()) {
    controlEvent.fire(new CreateCube(cubeId));
    controlEvent.fire(new StartCube(cubeId));
  }
}","public void startAutoContainers(@Observes(precedence=100) BeforeSuite event,CubeConfiguration configuration){
  for (  String cubeId : configuration.getAutoStartContainers()) {
    if (configuration.shouldAllowToConnectToRunningContainers() && isCubeRunning(cubeId)) {
      controlEvent.fire(new PreRunningCube(cubeId));
    }
 else {
      controlEvent.fire(new CreateCube(cubeId));
      controlEvent.fire(new StartCube(cubeId));
    }
  }
}"
59344,"public void startCubeMappedContainer(@Observes BeforeStart event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry){
  Container container=ContainerUtil.getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  controlEvent.fire(new CreateCube(cube));
  controlEvent.fire(new StartCube(cube));
}","public void startCubeMappedContainer(@Observes BeforeStart event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry,CubeConfiguration cubeConfiguration){
  Container container=ContainerUtil.getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  if (cubeConfiguration.shouldAllowToConnectToRunningContainers() && isCubeRunning(cube)) {
    controlEvent.fire(new PreRunningCube(cube));
    return;
  }
  controlEvent.fire(new CreateCube(cube));
  controlEvent.fire(new StartCube(cube));
}"
59345,"@Override public void stop() throws CubeControlException {
  if (state == State.STOPPED) {
    return;
  }
  try {
    lifecycle.fire(new BeforeStop(id));
    executor.stopContainer(id);
    state=State.STOPPED;
    lifecycle.fire(new AfterStop(id));
  }
 catch (  Exception e) {
    state=State.STOP_FAILED;
    throw CubeControlException.failedStop(id,e);
  }
}","@Override public void stop() throws CubeControlException {
  if (state == State.STOPPED || state == State.PRE_RUNNING) {
    return;
  }
  try {
    lifecycle.fire(new BeforeStop(id));
    executor.stopContainer(id);
    state=State.STOPPED;
    lifecycle.fire(new AfterStop(id));
  }
 catch (  Exception e) {
    state=State.STOP_FAILED;
    throw CubeControlException.failedStop(id,e);
  }
}"
59346,"@Override public Binding bindings(){
  if (binding != null) {
    return binding;
  }
  if (state != State.STARTED) {
    throw new IllegalStateException(""String_Node_Str"" + id + ""String_Node_Str""+ State.STARTED+ ""String_Node_Str""+ state);
  }
  binding=BindingUtil.binding(executor,id);
  return binding;
}","@Override public Binding bindings(){
  if (binding != null) {
    return binding;
  }
  if (state != State.STARTED && state != State.PRE_RUNNING) {
    throw new IllegalStateException(""String_Node_Str"" + id + ""String_Node_Str""+ State.STARTED+ ""String_Node_Str""+ State.PRE_RUNNING+ ""String_Node_Str""+ state);
  }
  binding=BindingUtil.binding(executor,id);
  return binding;
}"
59347,"@Override public void start() throws CubeControlException {
  if (state == State.STARTED) {
    return;
  }
  try {
    lifecycle.fire(new BeforeStart(id));
    executor.startContainer(id,configuration);
    state=State.STARTED;
    if (!AwaitStrategyFactory.create(executor,this,configuration).await()) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",id));
    }
    lifecycle.fire(new AfterStart(id));
  }
 catch (  Exception e) {
    state=State.START_FAILED;
    throw CubeControlException.failedStart(id,e);
  }
}","@Override public void start() throws CubeControlException {
  if (state == State.STARTED || state == State.PRE_RUNNING) {
    return;
  }
  try {
    lifecycle.fire(new BeforeStart(id));
    executor.startContainer(id,configuration);
    state=State.STARTED;
    if (!AwaitStrategyFactory.create(executor,this,configuration).await()) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",id));
    }
    lifecycle.fire(new AfterStart(id));
  }
 catch (  Exception e) {
    state=State.START_FAILED;
    throw CubeControlException.failedStart(id,e);
  }
}"
59348,"@Before @SuppressWarnings(""String_Node_Str"") public void setup(){
  when(cube.getId()).thenReturn(CUBE_ID);
  when(container.getName()).thenReturn(CUBE_ID);
  when(container.getDeployableContainer()).thenReturn(deployableContainer);
  when(containerRegistry.getContainers()).thenReturn(Arrays.asList(container));
  registry=new DockerCubeRegistry();
  registry.addCube(cube);
  bind(ApplicationScoped.class,CubeRegistry.class,registry);
  bind(ApplicationScoped.class,ContainerRegistry.class,containerRegistry);
}","@Before @SuppressWarnings(""String_Node_Str"") public void setup(){
  when(cube.getId()).thenReturn(CUBE_ID);
  when(container.getName()).thenReturn(CUBE_ID);
  when(container.getDeployableContainer()).thenReturn(deployableContainer);
  when(containerRegistry.getContainers()).thenReturn(Arrays.asList(container));
  registry=new DockerCubeRegistry();
  registry.addCube(cube);
  bind(ApplicationScoped.class,CubeRegistry.class,registry);
  bind(ApplicationScoped.class,ContainerRegistry.class,containerRegistry);
  bind(ApplicationScoped.class,CubeConfiguration.class,new CubeConfiguration());
}"
59349,"public void startContainer(String id,Map<String,Object> containerConfiguration){
  StartContainerCmd startContainerCmd=this.dockerClient.startContainerCmd(id);
  if (containerConfiguration.containsKey(BINDS)) {
    List<String> binds=asListOfString(containerConfiguration,BINDS);
    startContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    startContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<Map<String,Object>> portBindings=asListOfMap(containerConfiguration,PORT_BINDINGS);
    Ports ports=new Ports();
    for (    Map<String,Object> map : portBindings) {
      if (map.containsKey(EXPOSED_PORT) && map.containsKey(PORT)) {
        String exposedPort=asString(map,EXPOSED_PORT);
        int port=asInt(map,PORT);
        ports.bind(ExposedPort.parse(exposedPort),toBinding(Integer.toString(port)));
      }
    }
    startContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    startContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    startContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    startContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    List<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    startContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    List<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    startContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    startContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    List<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    startContainerCmd.withCapAdd(capAdds.toArray(new String[capAdds.size()]));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    List<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    startContainerCmd.withCapDrop(capDrop.toArray(new String[capDrop.size()]));
  }
  startContainerCmd.exec();
}","public void startContainer(String id,Map<String,Object> containerConfiguration){
  StartContainerCmd startContainerCmd=this.dockerClient.startContainerCmd(id);
  if (containerConfiguration.containsKey(BINDS)) {
    List<String> binds=asListOfString(containerConfiguration,BINDS);
    startContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    startContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<String> portBindings=asListOfString(containerConfiguration,PORT_BINDINGS);
    Ports ports=assignPorts(portBindings);
    startContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    startContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    startContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    startContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    List<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    startContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    List<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    startContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    startContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    List<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    startContainerCmd.withCapAdd(capAdds.toArray(new String[capAdds.size()]));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    List<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    startContainerCmd.withCapDrop(capDrop.toArray(new String[capDrop.size()]));
  }
  startContainerCmd.exec();
}"
59350,"private Ports assignPorts(List<String> portBindings){
  Ports ports=new Ports();
  for (  String portBinding : portBindings) {
    String[] elements=portBinding.split(PORTS_SEPARATOR);
    if (elements.length == 1) {
      log.info(""String_Node_Str"" + elements[0]);
      String exposedPortValue=elements[0].substring(0,elements[0].indexOf(""String_Node_Str""));
      ports.bind(ExposedPort.parse(elements[0]),toBinding(exposedPortValue));
    }
 else {
      if (elements.length == 2) {
        ports.bind(ExposedPort.parse(elements[1]),toBinding(elements[0]));
      }
 else {
        if (elements.length == 3) {
          ports.bind(ExposedPort.parse(elements[2]),toBinding(elements[0] + elements[1]));
        }
      }
    }
  }
  return ports;
}","private Ports assignPorts(List<String> portBindings){
  Ports ports=new Ports();
  for (  String portBinding : portBindings) {
    String[] elements=portBinding.split(PORTS_SEPARATOR);
    if (elements.length == 1) {
      log.info(""String_Node_Str"" + elements[0]);
      String exposedPortValue=elements[0].substring(0,elements[0].indexOf(""String_Node_Str""));
      ports.bind(ExposedPort.parse(elements[0]),toBinding(exposedPortValue));
    }
 else {
      if (elements.length == 2) {
        ports.bind(ExposedPort.parse(elements[1]),toBinding(elements[0]));
      }
    }
  }
  return ports;
}"
59351,"public static Binding binding(Map<String,Object> cubeConfiguration){
  Binding binding=new Binding(NO_GATEWAY);
  if (cubeConfiguration.containsKey(""String_Node_Str"")) {
    @SuppressWarnings(""String_Node_Str"") List<Map<String,Object>> cubePortBindings=(List<Map<String,Object>>)cubeConfiguration.get(""String_Node_Str"");
    for (    Map<String,Object> cubePortBinding : cubePortBindings) {
      if (cubePortBinding.containsKey(""String_Node_Str"") && cubePortBinding.containsKey(""String_Node_Str"")) {
        String exposedPortAndProtocol=(String)cubePortBinding.get(""String_Node_Str"");
        int exposedPort=Integer.parseInt(exposedPortAndProtocol.substring(0,exposedPortAndProtocol.indexOf(""String_Node_Str"")));
        int port=(int)cubePortBinding.get(""String_Node_Str"");
        binding.addPortBinding(exposedPort,port);
      }
    }
  }
  return binding;
}","public static Binding binding(Map<String,Object> cubeConfiguration){
  Binding binding=new Binding(NO_GATEWAY);
  if (cubeConfiguration.containsKey(""String_Node_Str"")) {
    @SuppressWarnings(""String_Node_Str"") List<String> cubePortBindings=(List<String>)cubeConfiguration.get(""String_Node_Str"");
    for (    String cubePortBinding : cubePortBindings) {
      String[] elements=cubePortBinding.split(PORTS_SEPARATOR);
      if (elements.length == 1) {
        int exposedPort=Integer.parseInt(elements[0].substring(0,elements[0].indexOf(""String_Node_Str"")));
        binding.addPortBinding(exposedPort,exposedPort);
      }
 else {
        if (elements.length == 2) {
          int exposedPort=Integer.parseInt(elements[1].substring(0,elements[1].indexOf(""String_Node_Str"")));
          int port=Integer.parseInt(elements[0]);
          binding.addPortBinding(exposedPort,port);
        }
      }
    }
  }
  return binding;
}"
59352,"public static final AwaitStrategy create(DockerClientExecutor dockerClientExecutor,Cube cube,Map<String,Object> options){
  if (options.containsKey(AWAIT)) {
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> awaitOptions=(Map<String,Object>)options.get(AWAIT);
    if (awaitOptions.containsKey(STRATEGY)) {
      String strategy=((String)awaitOptions.get(STRATEGY)).toLowerCase();
switch (strategy) {
case PollingAwaitStrategy.TAG:
        return new PollingAwaitStrategy(cube);
case NativeAwaitStrategy.TAG:
      return new NativeAwaitStrategy(cube,dockerClientExecutor);
case StaticAwaitStrategy.TAG:
    return new StaticAwaitStrategy(cube,awaitOptions);
default :
  return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}
 else {
log.warning(""String_Node_Str"");
return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}
 else {
log.warning(""String_Node_Str"");
return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}","public static final AwaitStrategy create(DockerClientExecutor dockerClientExecutor,Cube cube,Map<String,Object> options){
  if (options.containsKey(AWAIT)) {
    @SuppressWarnings(""String_Node_Str"") Map<String,Object> awaitOptions=(Map<String,Object>)options.get(AWAIT);
    if (awaitOptions.containsKey(STRATEGY)) {
      String strategy=((String)awaitOptions.get(STRATEGY)).toLowerCase();
switch (strategy) {
case PollingAwaitStrategy.TAG:
        return new PollingAwaitStrategy(cube,awaitOptions);
case NativeAwaitStrategy.TAG:
      return new NativeAwaitStrategy(cube,dockerClientExecutor);
case StaticAwaitStrategy.TAG:
    return new StaticAwaitStrategy(cube,awaitOptions);
default :
  return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}
 else {
log.warning(""String_Node_Str"");
return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}
 else {
log.warning(""String_Node_Str"");
return new NativeAwaitStrategy(cube,dockerClientExecutor);
}
}"
59353,"@Override public boolean await(){
  Binding bindings=cube.bindings();
  for (  PortBinding ports : bindings.getPortBindings()) {
    log.fine(String.format(""String_Node_Str"",bindings.getIP(),ports.getBindingPort()));
    if (!Ping.ping(bindings.getIP(),ports.getBindingPort(),DEFAULT_POLL_ITERATIONS,DEFAULT_SLEEP_POLL_TIME,TimeUnit.MILLISECONDS)) {
      return false;
    }
  }
  return true;
}","@Override public boolean await(){
  Binding bindings=cube.bindings();
  for (  PortBinding ports : bindings.getPortBindings()) {
    log.fine(String.format(""String_Node_Str"",bindings.getIP(),ports.getBindingPort()));
    if (!Ping.ping(bindings.getIP(),ports.getBindingPort(),this.pollIterations,this.sleepPollTime,TimeUnit.MILLISECONDS)) {
      return false;
    }
  }
  return true;
}"
59354,"public PollingAwaitStrategy(Cube cube){
  this.cube=cube;
}","public PollingAwaitStrategy(Cube cube,Map<String,Object> params){
  this.cube=cube;
  if (params.containsKey(POLLING_TIME)) {
    this.sleepPollTime=(Integer)params.get(POLLING_TIME);
  }
  if (params.containsKey(ITERATIONS)) {
    this.pollIterations=(Integer)params.get(ITERATIONS);
  }
}"
59355,"@SuppressWarnings(""String_Node_Str"") public StaticAwaitStrategy(Cube cube,Map<String,Object> params){
  this.ip=(String)params.get(IP);
  this.ports.addAll((Collection<? extends Integer>)params.get(PORTS));
}","@SuppressWarnings(""String_Node_Str"") public StaticAwaitStrategy(Cube cube,Map<String,Object> params){
  this.ip=(String)params.get(IP);
  this.ports.addAll((Collection<? extends Integer>)params.get(PORTS));
  if (params.containsKey(POLLING_TIME)) {
    this.sleepPollTime=(Integer)params.get(POLLING_TIME);
  }
  if (params.containsKey(ITERATIONS)) {
    this.pollIterations=(Integer)params.get(ITERATIONS);
  }
}"
59356,"@Override public boolean await(){
  for (  Integer port : this.ports) {
    if (!Ping.ping(this.ip,port,DEFAULT_POLL_ITERATIONS,DEFAULT_SLEEP_POLL_TIME,TimeUnit.MILLISECONDS)) {
      return false;
    }
  }
  return true;
}","@Override public boolean await(){
  for (  Integer port : this.ports) {
    if (!Ping.ping(this.ip,port,this.pollIterations,this.sleepPollTime,TimeUnit.MILLISECONDS)) {
      return false;
    }
  }
  return true;
}"
59357,"@Override public boolean await(){
  InspectContainerResponse inspectContainer=this.dockerClientExecutor.inspectContainer(this.createContainer);
  HostConfig hostConfig=inspectContainer.getHostConfig();
  Ports portBindings=hostConfig.getPortBindings();
  Map<ExposedPort,Binding> bindings=portBindings.getBindings();
  NetworkSettings networkSettings=inspectContainer.getNetworkSettings();
  for (  Map.Entry<ExposedPort,Binding> binding : bindings.entrySet()) {
    if (!Ping.ping(networkSettings.getGateway(),binding.getValue().getHostPort(),DEFAULT_POLL_ITERATIONS,DEFAULT_SLEEP_POLL_TIME,TimeUnit.MILLISECONDS)) {
      return false;
    }
  }
  return true;
}","@Override public boolean await(){
  InspectContainerResponse inspectContainer=this.dockerClientExecutor.inspectContainer(this.createContainer);
  HostConfig hostConfig=inspectContainer.getHostConfig();
  Ports portBindings=hostConfig.getPortBindings();
  Map<ExposedPort,Binding> bindings=portBindings.getBindings();
  NetworkSettings networkSettings=inspectContainer.getNetworkSettings();
  for (  Map.Entry<ExposedPort,Binding> binding : bindings.entrySet()) {
    log.fine(String.format(""String_Node_Str"",networkSettings.getGateway(),binding.getValue().getHostPort()));
    if (!Ping.ping(networkSettings.getGateway(),binding.getValue().getHostPort(),DEFAULT_POLL_ITERATIONS,DEFAULT_SLEEP_POLL_TIME,TimeUnit.MILLISECONDS)) {
      return false;
    }
  }
  return true;
}"
59358,"public void startDockerImage(@Observes BeforeStart event,CubeConfiguration cubeConfiguration,ContainerMapping containerMapping){
  Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  Container container=getContainerByDeployableContainer(event.getDeployableContainer());
  String containerName=container.getName();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> containerConfiguration=(Map<String,Object>)dockerContainersContent.get(containerName);
  if (containerConfiguration == null) {
    return;
  }
  CreateContainerResponse createContainer=this.dockerClientExecutor.createContainer(containerName,containerConfiguration);
  dockerClientExecutor.startContainer(createContainer,containerConfiguration);
  if (!AwaitStrategyFactory.create(this.dockerClientExecutor,createContainer,containerConfiguration).await()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerName));
  }
  containerMapping.addContainer(containerName,createContainer.getId());
}","public void startDockerImage(@Observes BeforeStart event,CubeConfiguration cubeConfiguration,ContainerMapping containerMapping){
  Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  Container container=getContainerByDeployableContainer(event.getDeployableContainer());
  String containerName=container.getName();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> containerConfiguration=(Map<String,Object>)dockerContainersContent.get(containerName);
  if (containerConfiguration == null) {
    return;
  }
  log.fine(String.format(""String_Node_Str"",containerName,containerConfiguration));
  CreateContainerResponse createContainer=this.dockerClientExecutor.createContainer(containerName,containerConfiguration);
  log.fine(String.format(""String_Node_Str"",createContainer.getId()));
  dockerClientExecutor.startContainer(createContainer,containerConfiguration);
  if (!AwaitStrategyFactory.create(this.dockerClientExecutor,createContainer,containerConfiguration).await()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerName));
  }
  containerMapping.addContainer(containerName,createContainer.getId());
}"
59359,"@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeConfigurator.class).observer(CubeClientCreator.class).observer(CubeRegistrar.class).observer(CubeLifecycleController.class).observer(CubeSuiteLifecycleController.class).observer(CubeContainerLifecycleController.class);
  builder.observer(ProtocolMetadataUpdater.class);
  builder.service(ResourceProvider.class,CubeIDResourceProvider.class);
  builder.service(ResourceProvider.class,CubeResourceProvider.class);
}","@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeConfigurator.class).observer(CubeClientCreator.class).observer(CubeRegistrar.class).observer(CubeLifecycleController.class).observer(CubeSuiteLifecycleController.class).observer(CubeContainerLifecycleController.class).observer(RemapContainerController.class);
  builder.observer(ProtocolMetadataUpdater.class);
  builder.service(ResourceProvider.class,CubeIDResourceProvider.class);
  builder.service(ResourceProvider.class,CubeResourceProvider.class);
}"
59360,"public void startCubeMappedContainer(@Observes BeforeStart event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry){
  Container container=getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  controlEvent.fire(new CreateCube(cube));
  controlEvent.fire(new StartCube(cube));
}","public void startCubeMappedContainer(@Observes BeforeStart event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry){
  Container container=ContainerUtil.getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  controlEvent.fire(new CreateCube(cube));
  controlEvent.fire(new StartCube(cube));
}"
59361,"public void stopCubeMappedContainer(@Observes AfterStop event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry){
  Container container=getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  controlEvent.fire(new StopCube(cube));
  controlEvent.fire(new DestroyCube(cube));
}","public void stopCubeMappedContainer(@Observes AfterStop event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry){
  Container container=ContainerUtil.getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  controlEvent.fire(new StopCube(cube));
  controlEvent.fire(new DestroyCube(cube));
}"
59362,"public void remapContainer(@Observes BeforeSetup event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry){
  Container container=getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  ContainerDef containerConfiguration=container.getContainerConfiguration();
  Map<String,String> containerProperties=containerConfiguration.getContainerProperties();
  Binding binding=BindingUtil.binding(cube.configuration());
  Set<Entry<String,String>> properties=containerProperties.entrySet();
  for (  Entry<String,String> property : properties) {
    if (property.getKey().matches(""String_Node_Str"")) {
      int containerPort=Integer.parseInt(property.getValue());
      PortBinding bindingForExposedPort=null;
      if ((bindingForExposedPort=binding.getBindingForExposedPort(containerPort)) != null) {
        containerConfiguration.overrideProperty(property.getKey(),Integer.toString(bindingForExposedPort.getBindingPort()));
      }
    }
  }
}","public void remapContainer(@Observes BeforeSetup event,CubeRegistry cubeRegistry,ContainerRegistry containerRegistry) throws InstantiationException, IllegalAccessException {
  Container container=ContainerUtil.getContainerByDeployableContainer(containerRegistry,event.getDeployableContainer());
  if (container == null) {
    return;
  }
  Cube cube=cubeRegistry.getCube(container.getName());
  if (cube == null) {
    return;
  }
  Binding binding=BindingUtil.binding(cube.configuration());
  ContainerDef containerConfiguration=container.getContainerConfiguration();
  List<String> portPropertiesFromArquillianConfigurationFile=filterArquillianConfigurationPropertiesByPortAttribute(containerConfiguration);
  Class<?> configurationClass=container.getDeployableContainer().getConfigurationClass();
  List<PropertyDescriptor> configurationClassPortFields=filterConfigurationClassPropertiesByPortAttribute(configurationClass);
  Object newConfigurationInstance=configurationClass.newInstance();
  for (  PropertyDescriptor configurationClassPortField : configurationClassPortFields) {
    if (!portPropertiesFromArquillianConfigurationFile.contains(configurationClassPortField.getName())) {
      int containerPort=getDefaultPortFromConfigurationInstance(newConfigurationInstance,configurationClass,configurationClassPortField);
      PortBinding bindingForExposedPort=null;
      if ((bindingForExposedPort=binding.getBindingForExposedPort(containerPort)) != null) {
        containerConfiguration.overrideProperty(configurationClassPortField.getName(),Integer.toString(bindingForExposedPort.getBindingPort()));
      }
    }
  }
}"
59363,"@Test public void shouldRemapContainerPortIfItIsEqualToExposedOne(){
  Map<String,String> containerConfig=new HashMap<String,String>();
  containerConfig.put(""String_Node_Str"",""String_Node_Str"");
  when(containerDef.getContainerProperties()).thenReturn(containerConfig);
  fire(new BeforeSetup(deployableContainer));
  verify(containerDef).overrideProperty(""String_Node_Str"",""String_Node_Str"");
}","@Test public void shouldRemapContainerPortIfItIsEqualToExposedOne(){
  Map<String,String> containerConfig=new HashMap<String,String>();
  when(containerDef.getContainerProperties()).thenReturn(containerConfig);
  fire(new BeforeSetup(deployableContainer));
  verify(containerDef).overrideProperty(""String_Node_Str"",""String_Node_Str"");
}"
59364,"@Before public void setup(){
  Yaml yaml=new Yaml();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> content=(Map<String,Object>)yaml.load(CONTENT);
  when(cube.getId()).thenReturn(CUBE_ID);
  when(cube.configuration()).thenReturn(content);
  when(container.getName()).thenReturn(CUBE_ID);
  when(container.getDeployableContainer()).thenReturn(deployableContainer);
  when(container.getContainerConfiguration()).thenReturn(containerDef);
  when(containerRegistry.getContainers()).thenReturn(Arrays.asList(container));
  registry=new DockerCubeRegistry();
  registry.addCube(cube);
  bind(ApplicationScoped.class,CubeRegistry.class,registry);
  bind(ApplicationScoped.class,ContainerRegistry.class,containerRegistry);
}","@Before public void setup(){
  Yaml yaml=new Yaml();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> content=(Map<String,Object>)yaml.load(CONTENT);
  when(cube.getId()).thenReturn(CUBE_ID);
  when(cube.configuration()).thenReturn(content);
  when(container.getName()).thenReturn(CUBE_ID);
  when(container.getDeployableContainer()).thenReturn(deployableContainer);
  when(deployableContainer.getConfigurationClass()).thenReturn(ContainerConfiguration.class);
  when(container.getContainerConfiguration()).thenReturn(containerDef);
  when(containerRegistry.getContainers()).thenReturn(Arrays.asList(container));
  registry=new DockerCubeRegistry();
  registry.addCube(cube);
  bind(ApplicationScoped.class,CubeRegistry.class,registry);
  bind(ApplicationScoped.class,ContainerRegistry.class,containerRegistry);
}"
59365,"public static final AwaitStrategy create(DockerClientExecutor dockerClientExecutor,CreateContainerResponse createContainerResponse,Map<String,Object> options){
  if (options.containsKey(AWAIT)) {
    Map<String,Object> awaitOptions=(Map<String,Object>)options.get(AWAIT);
    if (awaitOptions.containsKey(STRATEGY)) {
      String strategy=((String)awaitOptions.get(STRATEGY)).toLowerCase();
switch (strategy) {
case PollingAwaitStrategy.TAG:
        return new PollingAwaitStrategy(dockerClientExecutor,createContainerResponse);
case NativeAwaitStrategy.TAG:
      return new NativeAwaitStrategy(dockerClientExecutor,createContainerResponse);
case StaticAwaitStrategy.TAG:
    return new StaticAwaitStrategy(awaitOptions);
default :
  return new NativeAwaitStrategy(dockerClientExecutor,createContainerResponse);
}
}
 else {
return new NativeAwaitStrategy(dockerClientExecutor,createContainerResponse);
}
}
 else {
return new NativeAwaitStrategy(dockerClientExecutor,createContainerResponse);
}
}","public static final AwaitStrategy create(DockerClientExecutor dockerClientExecutor,String containerId,Map<String,Object> options){
  if (options.containsKey(AWAIT)) {
    Map<String,Object> awaitOptions=(Map<String,Object>)options.get(AWAIT);
    if (awaitOptions.containsKey(STRATEGY)) {
      String strategy=((String)awaitOptions.get(STRATEGY)).toLowerCase();
switch (strategy) {
case PollingAwaitStrategy.TAG:
        return new PollingAwaitStrategy(dockerClientExecutor,containerId);
case NativeAwaitStrategy.TAG:
      return new NativeAwaitStrategy(dockerClientExecutor,containerId);
case StaticAwaitStrategy.TAG:
    return new StaticAwaitStrategy(awaitOptions);
default :
  return new NativeAwaitStrategy(dockerClientExecutor,containerId);
}
}
 else {
log.warning(""String_Node_Str"");
return new NativeAwaitStrategy(dockerClientExecutor,containerId);
}
}
 else {
log.warning(""String_Node_Str"");
return new NativeAwaitStrategy(dockerClientExecutor,containerId);
}
}"
59366,"@Override public boolean await(){
  if (this.dockerClientExecutor.waitContainer(this.createContainerResponse) == 0) {
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean await(){
  if (this.dockerClientExecutor.waitContainer(this.containerId) == 0) {
    return true;
  }
 else {
    return false;
  }
}"
59367,"public NativeAwaitStrategy(DockerClientExecutor dockerClientExecutor,CreateContainerResponse createContainerResponse){
  this.dockerClientExecutor=dockerClientExecutor;
  this.createContainerResponse=createContainerResponse;
}","public NativeAwaitStrategy(DockerClientExecutor dockerClientExecutor,String containerId){
  this.dockerClientExecutor=dockerClientExecutor;
  this.containerId=containerId;
}"
59368,"@Override public boolean await(){
  InspectContainerResponse inspectContainer=this.dockerClientExecutor.inspectContainer(this.createContainer);
  HostConfig hostConfig=inspectContainer.getHostConfig();
  Ports portBindings=hostConfig.getPortBindings();
  Map<ExposedPort,Binding> bindings=portBindings.getBindings();
  NetworkSettings networkSettings=inspectContainer.getNetworkSettings();
  for (  Map.Entry<ExposedPort,Binding> binding : bindings.entrySet()) {
    log.fine(String.format(""String_Node_Str"",networkSettings.getGateway(),binding.getValue().getHostPort()));
    if (!Ping.ping(networkSettings.getGateway(),binding.getValue().getHostPort(),DEFAULT_POLL_ITERATIONS,DEFAULT_SLEEP_POLL_TIME,TimeUnit.MILLISECONDS)) {
      return false;
    }
  }
  return true;
}","@Override public boolean await(){
  InspectContainerResponse inspectContainer=this.dockerClientExecutor.inspectContainer(this.containerId);
  HostConfig hostConfig=inspectContainer.getHostConfig();
  Ports portBindings=hostConfig.getPortBindings();
  Map<ExposedPort,Binding> bindings=portBindings.getBindings();
  NetworkSettings networkSettings=inspectContainer.getNetworkSettings();
  for (  Map.Entry<ExposedPort,Binding> binding : bindings.entrySet()) {
    log.fine(String.format(""String_Node_Str"",networkSettings.getGateway(),binding.getValue().getHostPort()));
    if (!Ping.ping(networkSettings.getGateway(),binding.getValue().getHostPort(),DEFAULT_POLL_ITERATIONS,DEFAULT_SLEEP_POLL_TIME,TimeUnit.MILLISECONDS)) {
      return false;
    }
  }
  return true;
}"
59369,"public PollingAwaitStrategy(DockerClientExecutor dockerClientExecutor,CreateContainerResponse createContainer){
  this.dockerClientExecutor=dockerClientExecutor;
  this.createContainer=createContainer;
}","public PollingAwaitStrategy(DockerClientExecutor dockerClientExecutor,String containerId){
  this.dockerClientExecutor=dockerClientExecutor;
  this.containerId=containerId;
}"
59370,"public void startDockerImage(@Observes BeforeStart event,CubeConfiguration cubeConfiguration,ContainerMapping containerMapping){
  Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  Container container=getContainerByDeployableContainer(event.getDeployableContainer());
  String containerName=container.getName();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> containerConfiguration=(Map<String,Object>)dockerContainersContent.get(containerName);
  if (containerConfiguration == null) {
    return;
  }
  log.fine(String.format(""String_Node_Str"",containerName,containerConfiguration));
  CreateContainerResponse createContainer=this.dockerClientExecutor.createContainer(containerName,containerConfiguration);
  log.fine(String.format(""String_Node_Str"",createContainer.getId()));
  dockerClientExecutor.startContainer(createContainer,containerConfiguration);
  if (!AwaitStrategyFactory.create(this.dockerClientExecutor,createContainer,containerConfiguration).await()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerName));
  }
  containerMapping.addContainer(containerName,createContainer.getId());
}","public void startDockerImage(@Observes BeforeStart event,CubeConfiguration cubeConfiguration,ContainerMapping containerMapping){
  Map<String,Object> dockerContainersContent=cubeConfiguration.getDockerContainersContent();
  Container container=getContainerByDeployableContainer(event.getDeployableContainer());
  String containerName=container.getName();
  @SuppressWarnings(""String_Node_Str"") Map<String,Object> containerConfiguration=(Map<String,Object>)dockerContainersContent.get(containerName);
  if (containerConfiguration == null) {
    return;
  }
  log.fine(String.format(""String_Node_Str"",containerName,containerConfiguration));
  String containerId=this.dockerClientExecutor.createContainer(containerName,containerConfiguration);
  log.fine(String.format(""String_Node_Str"",containerId));
  dockerClientExecutor.startContainer(containerId,containerConfiguration);
  if (!AwaitStrategyFactory.create(this.dockerClientExecutor,containerId,containerConfiguration).await()) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",containerName));
  }
  containerMapping.addContainer(containerName,containerId);
}"
59371,"public void removeContainer(CreateContainerResponse createContainerResponse){
  this.dockerClient.removeContainerCmd(createContainerResponse.getId()).exec();
}","public void removeContainer(String containerId){
  this.dockerClient.removeContainerCmd(containerId).exec();
}"
59372,"public void stopContainer(CreateContainerResponse createContainerResponse){
  this.dockerClient.stopContainerCmd(createContainerResponse.getId()).exec();
}","public void stopContainer(String containerId){
  this.dockerClient.stopContainerCmd(containerId).exec();
}"
59373,"public CreateContainerResponse createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  if (containerConfiguration.containsKey(EXPOSED_PORTS)) {
    List<String> exposedPorts=asListOfString(containerConfiguration,EXPOSED_PORTS);
    createContainerCmd.withExposedPorts(toExposedPorts(exposedPorts));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(volumesFrom.toArray(new String[volumesFrom.size()]));
  }
  try {
    return createContainerCmd.exec();
  }
 catch (  NotFoundException e) {
    this.pullImage(image);
    return createContainerCmd.exec();
  }
}","public String createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=getImageName(containerConfiguration);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  if (containerConfiguration.containsKey(EXPOSED_PORTS)) {
    List<String> exposedPorts=asListOfString(containerConfiguration,EXPOSED_PORTS);
    createContainerCmd.withExposedPorts(toExposedPorts(exposedPorts));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(volumesFrom.toArray(new String[volumesFrom.size()]));
  }
  try {
    return createContainerCmd.exec().getId();
  }
 catch (  NotFoundException e) {
    log.warning(String.format(""String_Node_Str"",image));
    this.pullImage(image);
    return createContainerCmd.exec().getId();
  }
}"
59374,"public void startContainer(CreateContainerResponse createContainerResponse,Map<String,Object> containerConfiguration){
  StartContainerCmd startContainerCmd=this.dockerClient.startContainerCmd(createContainerResponse.getId());
  if (containerConfiguration.containsKey(BINDS)) {
    List<String> binds=asListOfString(containerConfiguration,BINDS);
    startContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    startContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<Map<String,Object>> portBindings=asListOfMap(containerConfiguration,PORT_BINDINGS);
    Ports ports=new Ports();
    for (    Map<String,Object> map : portBindings) {
      if (map.containsKey(EXPOSED_PORT) && map.containsKey(PORT)) {
        String exposedPort=asString(map,EXPOSED_PORT);
        int port=asInt(map,PORT);
        ports.bind(ExposedPort.parse(exposedPort),toBinding(Integer.toString(port)));
      }
    }
    startContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    startContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    startContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    startContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    List<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    startContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    List<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    startContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    startContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    List<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    startContainerCmd.withCapAdd(capAdds.toArray(new String[capAdds.size()]));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    List<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    startContainerCmd.withCapDrop(capDrop.toArray(new String[capDrop.size()]));
  }
  startContainerCmd.exec();
}","public void startContainer(String containerId,Map<String,Object> containerConfiguration){
  StartContainerCmd startContainerCmd=this.dockerClient.startContainerCmd(containerId);
  if (containerConfiguration.containsKey(BINDS)) {
    List<String> binds=asListOfString(containerConfiguration,BINDS);
    startContainerCmd.withBinds(toBinds(binds));
  }
  if (containerConfiguration.containsKey(LINKS)) {
    startContainerCmd.withLinks(toLinks(asListOfString(containerConfiguration,LINKS)));
  }
  if (containerConfiguration.containsKey(PORT_BINDINGS)) {
    List<Map<String,Object>> portBindings=asListOfMap(containerConfiguration,PORT_BINDINGS);
    Ports ports=new Ports();
    for (    Map<String,Object> map : portBindings) {
      if (map.containsKey(EXPOSED_PORT) && map.containsKey(PORT)) {
        String exposedPort=asString(map,EXPOSED_PORT);
        int port=asInt(map,PORT);
        ports.bind(ExposedPort.parse(exposedPort),toBinding(Integer.toString(port)));
      }
    }
    startContainerCmd.withPortBindings(ports);
  }
  if (containerConfiguration.containsKey(PRIVILEGED)) {
    startContainerCmd.withPrivileged(asBoolean(containerConfiguration,PRIVILEGED));
  }
  if (containerConfiguration.containsKey(PUBLISH_ALL_PORTS)) {
    startContainerCmd.withPublishAllPorts(asBoolean(containerConfiguration,PUBLISH_ALL_PORTS));
  }
  if (containerConfiguration.containsKey(NETWORK_MODE)) {
    startContainerCmd.withNetworkMode(asString(containerConfiguration,NETWORK_MODE));
  }
  if (containerConfiguration.containsKey(DNS_SEARCH)) {
    List<String> dnsSearch=asListOfString(containerConfiguration,DNS_SEARCH);
    startContainerCmd.withDnsSearch(dnsSearch.toArray(new String[dnsSearch.size()]));
  }
  if (containerConfiguration.containsKey(DEVICES)) {
    List<Map<String,Object>> devices=asListOfMap(containerConfiguration,DEVICES);
    startContainerCmd.withDevices(toDevices(devices));
  }
  if (containerConfiguration.containsKey(RESTART_POLICY)) {
    Map<String,Object> restart=asMap(containerConfiguration,RESTART_POLICY);
    startContainerCmd.withRestartPolicy(toRestatPolicy(restart));
  }
  if (containerConfiguration.containsKey(CAP_ADD)) {
    List<String> capAdds=asListOfString(containerConfiguration,CAP_ADD);
    startContainerCmd.withCapAdd(capAdds.toArray(new String[capAdds.size()]));
  }
  if (containerConfiguration.containsKey(CAP_DROP)) {
    List<String> capDrop=asListOfString(containerConfiguration,CAP_DROP);
    startContainerCmd.withCapDrop(capDrop.toArray(new String[capDrop.size()]));
  }
  startContainerCmd.exec();
}"
59375,"public InspectContainerResponse inspectContainer(CreateContainerResponse createContainerResponse){
  return this.dockerClient.inspectContainerCmd(createContainerResponse.getId()).exec();
}","public InspectContainerResponse inspectContainer(String containerId){
  return this.dockerClient.inspectContainerCmd(containerId).exec();
}"
59376,"public int waitContainer(CreateContainerResponse createContainerResponse){
  return this.dockerClient.waitContainerCmd(createContainerResponse.getId()).exec();
}","public int waitContainer(String containerId){
  return this.dockerClient.waitContainerCmd(containerId).exec();
}"
59377,"@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeConfigurator.class);
  builder.observer(CubeLifecycle.class);
  builder.observer(ProtocolMetadataUpdater.class);
  builder.service(TestEnricher.class,ContainerEnricher.class);
  builder.service(TestEnricher.class,CubeEnricher.class);
}","@Override public void register(ExtensionBuilder builder){
  builder.observer(CubeConfigurator.class);
  builder.observer(CubeLifecycle.class);
  builder.observer(ProtocolMetadataUpdater.class);
  builder.service(TestEnricher.class,ContainerEnricher.class);
  builder.service(ResourceProvider.class,CubeResourceProvider.class);
}"
59378,"public static Binding binding(DockerClientExecutor executor,String cubeId){
  InspectContainerResponse inspectResponse=executor.getDockerClient().inspectContainerCmd(cubeId).exec();
  ;
  HostConfig hostConfig=inspectResponse.getHostConfig();
  String gatewayIp=inspectResponse.getNetworkSettings().getGateway();
  Binding binding=new Binding(gatewayIp);
  for (  Map.Entry<ExposedPort,com.github.dockerjava.api.model.Ports.Binding> bind : hostConfig.getPortBindings().getBindings().entrySet()) {
    binding.addPortBinding(bind.getKey().getPort(),bind.getValue().getHostPort());
  }
  return binding;
}","public static Binding binding(Map<String,Object> cubeConfiguration){
  Binding binding=new Binding(NO_GATEWAY);
  if (cubeConfiguration.containsKey(""String_Node_Str"")) {
    @SuppressWarnings(""String_Node_Str"") List<Map<String,Object>> cubePortBindings=(List<Map<String,Object>>)cubeConfiguration.get(""String_Node_Str"");
    for (    Map<String,Object> cubePortBinding : cubePortBindings) {
      if (cubePortBinding.containsKey(""String_Node_Str"") && cubePortBinding.containsKey(""String_Node_Str"")) {
        String exposedPortAndProtocol=(String)cubePortBinding.get(""String_Node_Str"");
        int exposedPort=Integer.parseInt(exposedPortAndProtocol.substring(0,exposedPortAndProtocol.indexOf(""String_Node_Str"")));
        int port=(int)cubePortBinding.get(""String_Node_Str"");
        binding.addPortBinding(exposedPort,port);
      }
    }
  }
  return binding;
}"
59379,"public CreateContainerResponse createContainer(String name,Map<String,Object> containerConfiguration){
  String image=asString(containerConfiguration,IMAGE);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  if (containerConfiguration.containsKey(EXPOSED_PORTS)) {
    List<String> exposedPorts=asListOfString(containerConfiguration,EXPOSED_PORTS);
    createContainerCmd.withExposedPorts(toExposedPorts(exposedPorts));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(volumesFrom.toArray(new String[volumesFrom.size()]));
  }
  return createContainerCmd.exec();
}","public CreateContainerResponse createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=asString(containerConfiguration,IMAGE);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  if (containerConfiguration.containsKey(EXPOSED_PORTS)) {
    List<String> exposedPorts=asListOfString(containerConfiguration,EXPOSED_PORTS);
    createContainerCmd.withExposedPorts(toExposedPorts(exposedPorts));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(volumesFrom.toArray(new String[volumesFrom.size()]));
  }
  return createContainerCmd.exec();
}"
59380,"public DockerClientExecutor(CubeConfiguration cubeConfiguration){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(cubeConfiguration.getDockerServerUri());
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
}","public DockerClientExecutor(CubeConfiguration cubeConfiguration){
  DockerClientConfigBuilder configBuilder=DockerClientConfig.createDefaultConfigBuilder();
  configBuilder.withVersion(cubeConfiguration.getDockerServerVersion()).withUri(cubeConfiguration.getDockerServerUri());
  this.dockerClient=DockerClientBuilder.getInstance(configBuilder.build()).build();
  this.cubeConfiguration=cubeConfiguration;
}"
59381,"public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=(Map<String,Object>)new Yaml().load(content);
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=(Map<String,Object>)new Yaml().load(new FileInputStream(location));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  return cubeConfiguration;
}","public static CubeConfiguration fromMap(Map<String,String> map){
  CubeConfiguration cubeConfiguration=new CubeConfiguration();
  if (map.containsKey(DOCKER_VERSION)) {
    cubeConfiguration.dockerServerVersion=map.get(DOCKER_VERSION);
  }
  if (map.containsKey(DOCKER_URI)) {
    cubeConfiguration.dockerServerUri=map.get(DOCKER_URI);
  }
  if (map.containsKey(DOCKER_REGISTRY)) {
    cubeConfiguration.dockerRegistry=map.get(DOCKER_REGISTRY);
  }
  if (map.containsKey(DOCKER_CONTAINERS)) {
    String content=map.get(DOCKER_CONTAINERS);
    cubeConfiguration.dockerContainersContent=(Map<String,Object>)new Yaml().load(content);
  }
  if (map.containsKey(DOCKER_CONTAINERS_FILE)) {
    String location=map.get(DOCKER_CONTAINERS_FILE);
    try {
      cubeConfiguration.dockerContainersContent=(Map<String,Object>)new Yaml().load(new FileInputStream(location));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalArgumentException(e);
    }
  }
  return cubeConfiguration;
}"
59382,"public CreateContainerResponse createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=asString(containerConfiguration,IMAGE);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  if (containerConfiguration.containsKey(EXPOSED_PORTS)) {
    List<String> exposedPorts=asListOfString(containerConfiguration,EXPOSED_PORTS);
    createContainerCmd.withExposedPorts(toExposedPorts(exposedPorts));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(volumesFrom.toArray(new String[volumesFrom.size()]));
  }
  return createContainerCmd.exec();
}","public CreateContainerResponse createContainer(String name,Map<String,Object> containerConfiguration){
  this.pingDockerServer();
  String image=asString(containerConfiguration,IMAGE);
  CreateContainerCmd createContainerCmd=this.dockerClient.createContainerCmd(image);
  createContainerCmd.withName(name);
  if (containerConfiguration.containsKey(EXPOSED_PORTS)) {
    List<String> exposedPorts=asListOfString(containerConfiguration,EXPOSED_PORTS);
    createContainerCmd.withExposedPorts(toExposedPorts(exposedPorts));
  }
  if (containerConfiguration.containsKey(WORKING_DIR)) {
    createContainerCmd.withWorkingDir(asString(containerConfiguration,WORKING_DIR));
  }
  if (containerConfiguration.containsKey(DISABLE_NETWORK)) {
    createContainerCmd.withDisableNetwork(asBoolean(containerConfiguration,DISABLE_NETWORK));
  }
  if (containerConfiguration.containsKey(HOST_NAME)) {
    createContainerCmd.withHostName(asString(containerConfiguration,HOST_NAME));
  }
  if (containerConfiguration.containsKey(PORT_SPECS)) {
    List<String> portSpecs=asListOfString(containerConfiguration,PORT_SPECS);
    createContainerCmd.withPortSpecs(portSpecs.toArray(new String[portSpecs.size()]));
  }
  if (containerConfiguration.containsKey(USER)) {
    createContainerCmd.withUser(asString(containerConfiguration,USER));
  }
  if (containerConfiguration.containsKey(TTY)) {
    createContainerCmd.withTty(asBoolean(containerConfiguration,TTY));
  }
  if (containerConfiguration.containsKey(STDIN_OPEN)) {
    createContainerCmd.withStdinOpen(asBoolean(containerConfiguration,STDIN_OPEN));
  }
  if (containerConfiguration.containsKey(STDIN_ONCE)) {
    createContainerCmd.withStdInOnce(asBoolean(containerConfiguration,STDIN_ONCE));
  }
  if (containerConfiguration.containsKey(MEMORY_LIMIT)) {
    createContainerCmd.withMemoryLimit(asInt(containerConfiguration,MEMORY_LIMIT));
  }
  if (containerConfiguration.containsKey(MEMORY_SWAP)) {
    createContainerCmd.withMemorySwap(asInt(containerConfiguration,MEMORY_SWAP));
  }
  if (containerConfiguration.containsKey(CPU_SHARES)) {
    createContainerCmd.withCpuShares(asInt(containerConfiguration,CPU_SHARES));
  }
  if (containerConfiguration.containsKey(ATTACH_STDIN)) {
    createContainerCmd.withAttachStdin(asBoolean(containerConfiguration,ATTACH_STDIN));
  }
  if (containerConfiguration.containsKey(ATTACH_STDERR)) {
    createContainerCmd.withAttachStderr(asBoolean(containerConfiguration,ATTACH_STDERR));
  }
  if (containerConfiguration.containsKey(ENV)) {
    List<String> env=asListOfString(containerConfiguration,ENV);
    createContainerCmd.withEnv(env.toArray(new String[env.size()]));
  }
  if (containerConfiguration.containsKey(CMD)) {
    List<String> cmd=asListOfString(containerConfiguration,CMD);
    createContainerCmd.withCmd(cmd.toArray(new String[cmd.size()]));
  }
  if (containerConfiguration.containsKey(DNS)) {
    List<String> dns=asListOfString(containerConfiguration,DNS);
    createContainerCmd.withDns(dns.toArray(new String[dns.size()]));
  }
  if (containerConfiguration.containsKey(VOLUMES)) {
    List<String> volumes=asListOfString(containerConfiguration,VOLUMES);
    createContainerCmd.withVolumes(toVolumes(volumes));
  }
  if (containerConfiguration.containsKey(VOLUMES_FROM)) {
    List<String> volumesFrom=asListOfString(containerConfiguration,VOLUMES_FROM);
    createContainerCmd.withVolumesFrom(volumesFrom.toArray(new String[volumesFrom.size()]));
  }
  try {
    return createContainerCmd.exec();
  }
 catch (  NotFoundException e) {
    this.pullImage(image);
    return createContainerCmd.exec();
  }
}"
59383,"public void pullImage(String imageName){
  PullImageCmd pullImageCmd=this.dockerClient.pullImageCmd(imageName);
  int tagSeparator=imageName.indexOf(TAG_SEPARATOR);
  if (tagSeparator > 0) {
    pullImageCmd.withRepository(imageName.substring(0,tagSeparator));
    pullImageCmd.withTag(imageName.substring(tagSeparator + 1));
  }
  InputStream exec=pullImageCmd.exec();
  String log=IOUtil.asString(exec);
}","public void pullImage(String imageName){
  PullImageCmd pullImageCmd=this.dockerClient.pullImageCmd(imageName);
  if (this.cubeConfiguration.getDockerRegistry() != null) {
    pullImageCmd.withRegistry(this.cubeConfiguration.getDockerRegistry());
  }
  int tagSeparator=imageName.indexOf(TAG_SEPARATOR);
  if (tagSeparator > 0) {
    pullImageCmd.withRepository(imageName.substring(0,tagSeparator));
    pullImageCmd.withTag(imageName.substring(tagSeparator + 1));
  }
  InputStream exec=pullImageCmd.exec();
  String log=IOUtil.asString(exec);
}"
59384,"@Override @SideOnly(Side.CLIENT) public ISound getSound(){
  return new SoundTile(this,getSoundEvent(),getVolume(),1.0F,true,0,Vector3.fromTileCenter(this).vec3());
}","@Override @SideOnly(Side.CLIENT) public ISound getSound(){
  return new SoundTile(this,getSoundEvent(),getVolume(),1.0F,true,0,new Vec3d(pos).addVector(0.5,0.5,0.5));
}"
59385,"@Override public <T>T getCapability(Capability<T> capability,final EnumFacing from){
  if (capability == CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY) {
    return CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY.cast(new IFluidHandler(){
      @Override public IFluidTankProperties[] getTankProperties(){
        FluidTankProperties[] properties=new FluidTankProperties[tanks.length];
        for (int i=0; i < tanks.length; i++) {
          FluidTankInfo info=tanks[i].getInfo();
          properties[i]=new FluidTankProperties(info.fluid,info.capacity);
        }
        return properties;
      }
      @Override public int fill(      FluidStack resource,      boolean doFill){
        if (from == null || allowInsertion(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
          if (resource == null) {
            return 0;
          }
          for (int j=0; j < tanks.length && tanks[j].getSpace() > 0; j++) {
            int toFill=tanks[j].fill(resource,doFill);
            if (toFill > 0) {
              return toFill;
            }
          }
        }
        return 0;
      }
      @Nullable @Override public FluidStack drain(      FluidStack resource,      boolean doDrain){
        if (from == null || allowExtraction(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
          if (resource == null) {
            return null;
          }
          for (int j=tanks.length - 1; j >= 0 && tanks[j].getFluidAmount() > 0; j--) {
            FluidStack toDrain=tanks[j].drain(resource,doDrain);
            if (toDrain != null) {
              return toDrain;
            }
          }
        }
        return null;
      }
      @Nullable @Override public FluidStack drain(      int maxDrain,      boolean doDrain){
        if (from == null || allowExtraction(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
          if (maxDrain <= 0) {
            return null;
          }
          for (int j=tanks.length - 1; j >= 0 && tanks[j].getFluidAmount() > 0; j--) {
            FluidStack toDrain=tanks[j].drain(maxDrain,doDrain);
            if (toDrain != null) {
              return toDrain;
            }
          }
        }
        return null;
      }
    }
);
  }
  return super.getCapability(capability,from);
}","@Override public <T>T getCapability(Capability<T> capability,final EnumFacing from){
  if (capability == CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY) {
    return CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY.cast(new IFluidHandler(){
      @Override public IFluidTankProperties[] getTankProperties(){
        FluidTankProperties[] properties=new FluidTankProperties[tanks.length];
        for (int i=0; i < tanks.length; i++) {
          FluidTankInfo info=tanks[i].getInfo();
          properties[i]=new FluidTankProperties(info.fluid,info.capacity);
        }
        return properties;
      }
      @Override public int fill(      FluidStack resource,      boolean doFill){
        if (from == null || allowInsertion(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
          if (resource == null) {
            return 0;
          }
          for (int j=0; j < tanks.length && tanks[j].getSpace() > 0; j++) {
            int toFill=tanks[j].fill(new FluidStack(resource,Math.min(resource.amount,amountInput)),doFill);
            if (toFill > 0) {
              return toFill;
            }
          }
        }
        return 0;
      }
      @Nullable @Override public FluidStack drain(      FluidStack resource,      boolean doDrain){
        if (from == null || allowExtraction(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
          if (resource == null) {
            return null;
          }
          for (int j=tanks.length - 1; j >= 0; j--) {
            if (tanks[j].getFluidAmount() <= 0) {
              continue;
            }
            return tanks[j].drain(new FluidStack(resource,Math.min(resource.amount,amountOutput)),doDrain);
          }
        }
        return null;
      }
      @Nullable @Override public FluidStack drain(      int maxDrain,      boolean doDrain){
        if (from == null || allowExtraction(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
          if (maxDrain <= 0) {
            return null;
          }
          for (int j=tanks.length - 1; j >= 0; j--) {
            if (tanks[j].getFluidAmount() <= 0) {
              continue;
            }
            return tanks[j].drain(Math.min(maxDrain,amountOutput),doDrain);
          }
        }
        return null;
      }
    }
);
  }
  return super.getCapability(capability,from);
}"
59386,"@Override public int fill(FluidStack resource,boolean doFill){
  if (from == null || allowInsertion(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
    if (resource == null) {
      return 0;
    }
    for (int j=0; j < tanks.length && tanks[j].getSpace() > 0; j++) {
      int toFill=tanks[j].fill(resource,doFill);
      if (toFill > 0) {
        return toFill;
      }
    }
  }
  return 0;
}","@Override public int fill(FluidStack resource,boolean doFill){
  if (from == null || allowInsertion(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
    if (resource == null) {
      return 0;
    }
    for (int j=0; j < tanks.length && tanks[j].getSpace() > 0; j++) {
      int toFill=tanks[j].fill(new FluidStack(resource,Math.min(resource.amount,amountInput)),doFill);
      if (toFill > 0) {
        return toFill;
      }
    }
  }
  return 0;
}"
59387,"@Nullable @Override public FluidStack drain(int maxDrain,boolean doDrain){
  if (from == null || allowExtraction(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
    if (maxDrain <= 0) {
      return null;
    }
    for (int j=tanks.length - 1; j >= 0 && tanks[j].getFluidAmount() > 0; j--) {
      FluidStack toDrain=tanks[j].drain(maxDrain,doDrain);
      if (toDrain != null) {
        return toDrain;
      }
    }
  }
  return null;
}","@Nullable @Override public FluidStack drain(int maxDrain,boolean doDrain){
  if (from == null || allowExtraction(sideConfig.sideTypes[sideCache[from.ordinal()]])) {
    if (maxDrain <= 0) {
      return null;
    }
    for (int j=tanks.length - 1; j >= 0; j--) {
      if (tanks[j].getFluidAmount() <= 0) {
        continue;
      }
      return tanks[j].drain(Math.min(maxDrain,amountOutput),doDrain);
    }
  }
  return null;
}"
59388,"@Override protected void updateElementInformation(){
  super.updateElementInformation();
  int change;
  int change2;
  if (GuiScreen.isShiftKeyDown()) {
    change=8000;
    change2=4000;
  }
 else   if (GuiScreen.isCtrlKeyDown()) {
    change=500;
    change2=100;
  }
 else {
    change=2000;
    change2=1000;
  }
  if (myTile.amountInput > 0) {
    decInput.setActive();
    decInput.setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.formatNumber(change)+ ""String_Node_Str""+ StringHelper.formatNumber(change2));
  }
 else {
    decInput.setDisabled();
    decInput.clearToolTip();
  }
  if (myTile.amountInput < 8000) {
    incInput.setActive();
    incInput.setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.formatNumber(change)+ ""String_Node_Str""+ StringHelper.formatNumber(change2));
  }
 else {
    incInput.setDisabled();
    incInput.clearToolTip();
  }
  if (myTile.amountOutput > 0) {
    decOutput.setActive();
    decOutput.setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.formatNumber(change)+ ""String_Node_Str""+ StringHelper.formatNumber(change2));
  }
 else {
    decOutput.setDisabled();
    decOutput.clearToolTip();
  }
  if (myTile.amountOutput < 8000) {
    incOutput.setActive();
    incOutput.setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.formatNumber(change)+ ""String_Node_Str""+ StringHelper.formatNumber(change2));
  }
 else {
    incOutput.setDisabled();
    incOutput.clearToolTip();
  }
  for (int i=0; i < lock.length; i++) {
    if (myTile.getTank(i).getFluid() == null) {
      lock[i].setDisabled();
    }
 else {
      lock[i].setActive();
    }
    if (myTile.locks[i]) {
      String color=StringHelper.WHITE;
      FluidStack fluid=myTile.getTank(i).getFluid();
      if (fluid.getFluid().getRarity() == EnumRarity.UNCOMMON) {
        color=StringHelper.YELLOW;
      }
 else       if (fluid.getFluid().getRarity() == EnumRarity.RARE) {
        color=StringHelper.BRIGHT_BLUE;
      }
 else       if (fluid.getFluid().getRarity() == EnumRarity.EPIC) {
        color=StringHelper.PINK;
      }
      lock[i].setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + color+ StringHelper.localize(fluid.getFluid().getLocalizedName(fluid))+ StringHelper.END);
      lock[i].setSheetX(176);
      lock[i].setHoverX(176);
    }
 else {
      lock[i].setToolTip(StringHelper.localize(""String_Node_Str""));
      lock[i].setSheetX(192);
      lock[i].setHoverX(192);
    }
  }
}","@Override protected void updateElementInformation(){
  super.updateElementInformation();
  int change;
  int change2;
  if (GuiScreen.isShiftKeyDown()) {
    change=1000;
    change2=100;
    if (GuiScreen.isCtrlKeyDown()) {
      change*=10;
      change2*=10;
    }
  }
 else   if (GuiScreen.isCtrlKeyDown()) {
    change=5;
    change2=1;
  }
 else {
    change=50;
    change2=10;
  }
  change=MathHelper.clamp(change,1,8000);
  change2=MathHelper.clamp(change2,1,8000);
  if (myTile.amountInput > 0) {
    decInput.setActive();
    decInput.setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.formatNumber(change)+ ""String_Node_Str""+ StringHelper.formatNumber(change2));
  }
 else {
    decInput.setDisabled();
    decInput.clearToolTip();
  }
  if (myTile.amountInput < 8000) {
    incInput.setActive();
    incInput.setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.formatNumber(change)+ ""String_Node_Str""+ StringHelper.formatNumber(change2));
  }
 else {
    incInput.setDisabled();
    incInput.clearToolTip();
  }
  if (myTile.amountOutput > 0) {
    decOutput.setActive();
    decOutput.setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.formatNumber(change)+ ""String_Node_Str""+ StringHelper.formatNumber(change2));
  }
 else {
    decOutput.setDisabled();
    decOutput.clearToolTip();
  }
  if (myTile.amountOutput < 8000) {
    incOutput.setActive();
    incOutput.setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.formatNumber(change)+ ""String_Node_Str""+ StringHelper.formatNumber(change2));
  }
 else {
    incOutput.setDisabled();
    incOutput.clearToolTip();
  }
  for (int i=0; i < lock.length; i++) {
    if (myTile.getTank(i).getFluid() == null) {
      lock[i].setDisabled();
    }
 else {
      lock[i].setActive();
    }
    if (myTile.locks[i]) {
      String color=StringHelper.WHITE;
      FluidStack fluid=myTile.getTank(i).getFluid();
      if (fluid.getFluid().getRarity() == EnumRarity.UNCOMMON) {
        color=StringHelper.YELLOW;
      }
 else       if (fluid.getFluid().getRarity() == EnumRarity.RARE) {
        color=StringHelper.BRIGHT_BLUE;
      }
 else       if (fluid.getFluid().getRarity() == EnumRarity.EPIC) {
        color=StringHelper.PINK;
      }
      lock[i].setToolTip(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + color+ StringHelper.localize(fluid.getFluid().getLocalizedName(fluid))+ StringHelper.END);
      lock[i].setSheetX(176);
      lock[i].setHoverX(176);
    }
 else {
      lock[i].setToolTip(StringHelper.localize(""String_Node_Str""));
      lock[i].setSheetX(192);
      lock[i].setHoverX(192);
    }
  }
}"
59389,"@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  int change;
  float pitch;
  if (GuiScreen.isShiftKeyDown()) {
    change=8000;
    pitch=0.9F;
    if (mouseButton == 1) {
      change=4000;
      pitch=0.8F;
    }
  }
 else   if (GuiScreen.isCtrlKeyDown()) {
    change=500;
    pitch=0.5F;
    if (mouseButton == 1) {
      change=100;
      pitch=0.4F;
    }
  }
 else {
    change=2000;
    pitch=0.7F;
    if (mouseButton == 1) {
      change=1000;
      pitch=0.6F;
    }
  }
  int curInput=myTile.amountInput;
  int curOutput=myTile.amountOutput;
  boolean[] curLocks=myTile.locks.clone();
switch (buttonName) {
case ""String_Node_Str"":
    myTile.amountInput-=change;
  pitch-=0.1F;
break;
case ""String_Node_Str"":
myTile.amountInput+=change;
pitch+=0.1F;
break;
case ""String_Node_Str"":
myTile.amountOutput-=change;
pitch-=0.1F;
break;
case ""String_Node_Str"":
myTile.amountOutput+=change;
pitch+=0.1F;
break;
case ""String_Node_Str"":
myTile.locks[0]=!myTile.locks[0];
pitch=myTile.locks[0] ? 0.8F : 0.4F;
break;
case ""String_Node_Str"":
myTile.locks[1]=!myTile.locks[1];
pitch=myTile.locks[1] ? 0.8F : 0.4F;
break;
case ""String_Node_Str"":
myTile.locks[2]=!myTile.locks[2];
pitch=myTile.locks[2] ? 0.8F : 0.4F;
break;
}
playClickSound(pitch);
myTile.sendModePacket();
myTile.amountInput=curInput;
myTile.amountOutput=curOutput;
myTile.locks=curLocks;
}","@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  int change;
  float pitch;
  if (GuiScreen.isShiftKeyDown()) {
    change=1000;
    pitch=0.9F;
    if (mouseButton == 1) {
      change=100;
      pitch=0.8F;
    }
    if (GuiScreen.isCtrlKeyDown()) {
      change*=10;
    }
  }
 else   if (GuiScreen.isCtrlKeyDown()) {
    change=5;
    pitch=0.5F;
    if (mouseButton == 1) {
      change=1;
      pitch=0.4F;
    }
  }
 else {
    change=50;
    pitch=0.7F;
    if (mouseButton == 1) {
      change=10;
      pitch=0.6F;
    }
  }
  change=MathHelper.clamp(change,1,8000);
  int curInput=myTile.amountInput;
  int curOutput=myTile.amountOutput;
  boolean[] curLocks=myTile.locks.clone();
switch (buttonName) {
case ""String_Node_Str"":
    myTile.amountInput-=change;
  pitch-=0.1F;
break;
case ""String_Node_Str"":
myTile.amountInput+=change;
pitch+=0.1F;
break;
case ""String_Node_Str"":
myTile.amountOutput-=change;
pitch-=0.1F;
break;
case ""String_Node_Str"":
myTile.amountOutput+=change;
pitch+=0.1F;
break;
case ""String_Node_Str"":
myTile.locks[0]=!myTile.locks[0];
pitch=myTile.locks[0] ? 0.8F : 0.4F;
break;
case ""String_Node_Str"":
myTile.locks[1]=!myTile.locks[1];
pitch=myTile.locks[1] ? 0.8F : 0.4F;
break;
case ""String_Node_Str"":
myTile.locks[2]=!myTile.locks[2];
pitch=myTile.locks[2] ? 0.8F : 0.4F;
break;
}
playClickSound(pitch);
myTile.sendModePacket();
myTile.amountInput=curInput;
myTile.amountOutput=curOutput;
myTile.locks=curLocks;
}"
59390,"public ContainerSatchel(ItemStack stack,InventoryPlayer inventory){
  super(stack,inventory);
  isCreative=ItemSatchel.isCreative(stack);
  isVoid=ItemSatchel.isVoid(stack);
  storageIndex=ItemSatchel.getStorageIndex(stack);
  rowSize=MathHelper.clamp(storageIndex,9,14);
  int rows=MathHelper.clamp(storageIndex,2,9);
  int slots=rowSize * rows;
  int yOffset=17;
  bindPlayerInventory(inventory);
switch (storageIndex) {
case 0:
    addSlotToContainer(isVoid ? new SlotSatchelVoid(containerWrapper,0,80,26) : new SlotSatchelCreative(this,containerWrapper,0,80,26));
  rowSize=1;
break;
case 1:
yOffset+=9;
for (int i=0; i < 9; i++) {
addSlotToContainer(new SlotValidated(this,containerWrapper,i,8 + i % rowSize * 18,yOffset + i / rowSize * 18));
}
break;
default :
for (int i=0; i < slots; i++) {
addSlotToContainer(new SlotValidated(this,containerWrapper,i,8 + i % rowSize * 18,yOffset + i / rowSize * 18));
}
break;
}
}","public ContainerSatchel(ItemStack stack,InventoryPlayer inventory){
  super(stack,inventory);
  isCreative=ItemSatchel.isCreative(stack);
  isVoid=ItemSatchel.isVoid(stack);
  storageIndex=ItemSatchel.getStorageIndex(stack);
  rowSize=MathHelper.clamp(storageIndex,9,14);
  int rows=MathHelper.clamp(storageIndex,2,9);
  int slots=rowSize * rows;
  int yOffset=17;
  bindPlayerInventory(inventory);
switch (storageIndex) {
case 0:
    if (isVoid) {
      addSlotToContainer(new SlotSatchelVoid(containerWrapper,0,80,26));
    }
 else {
      addSlotToContainer(new SlotSatchelCreative(this,containerWrapper,0,80,26));
    }
  rowSize=1;
break;
case 1:
yOffset+=9;
for (int i=0; i < 9; i++) {
addSlotToContainer(new SlotValidated(this,containerWrapper,i,8 + i % rowSize * 18,yOffset + i / rowSize * 18));
}
break;
default :
for (int i=0; i < slots; i++) {
addSlotToContainer(new SlotValidated(this,containerWrapper,i,8 + i % rowSize * 18,yOffset + i / rowSize * 18));
}
break;
}
}"
59391,"public ContainerSatchel(ItemStack stack,InventoryPlayer inventory){
  super(stack,inventory);
  isCreative=ItemSatchel.isCreative(stack);
  isVoid=ItemSatchel.isVoid(stack);
  storageIndex=ItemSatchel.getStorageIndex(stack);
  rowSize=MathHelper.clamp(storageIndex,9,14);
  int rows=MathHelper.clamp(storageIndex,2,9);
  int slots=rowSize * rows;
  int yOffset=17;
  bindPlayerInventory(inventory);
switch (storageIndex) {
case 0:
    addSlotToContainer(isVoid ? new Slot(containerWrapper,0,80,26){
      @Override public void putStack(      ItemStack stack){
      }
    }
 : new SlotSatchelCreative(this,containerWrapper,0,80,26));
  rowSize=1;
break;
case 1:
yOffset+=9;
for (int i=0; i < 9; i++) {
addSlotToContainer(new SlotValidated(this,containerWrapper,i,8 + i % rowSize * 18,yOffset + i / rowSize * 18));
}
break;
default :
for (int i=0; i < slots; i++) {
addSlotToContainer(new SlotValidated(this,containerWrapper,i,8 + i % rowSize * 18,yOffset + i / rowSize * 18));
}
break;
}
}","public ContainerSatchel(ItemStack stack,InventoryPlayer inventory){
  super(stack,inventory);
  isCreative=ItemSatchel.isCreative(stack);
  isVoid=ItemSatchel.isVoid(stack);
  storageIndex=ItemSatchel.getStorageIndex(stack);
  rowSize=MathHelper.clamp(storageIndex,9,14);
  int rows=MathHelper.clamp(storageIndex,2,9);
  int slots=rowSize * rows;
  int yOffset=17;
  bindPlayerInventory(inventory);
switch (storageIndex) {
case 0:
    addSlotToContainer(isVoid ? new SlotSatchelVoid(containerWrapper,0,80,26) : new SlotSatchelCreative(this,containerWrapper,0,80,26));
  rowSize=1;
break;
case 1:
yOffset+=9;
for (int i=0; i < 9; i++) {
addSlotToContainer(new SlotValidated(this,containerWrapper,i,8 + i % rowSize * 18,yOffset + i / rowSize * 18));
}
break;
default :
for (int i=0; i < slots; i++) {
addSlotToContainer(new SlotValidated(this,containerWrapper,i,8 + i % rowSize * 18,yOffset + i / rowSize * 18));
}
break;
}
}"
59392,"@Override public int colorMultiplier(ItemStack stack,int tintIndex){
  EntityList.EntityEggInfo info=null;
  if (stack.hasTagCompound()) {
    ResourceLocation id=new ResourceLocation(stack.getTagCompound().getString(""String_Node_Str""));
    info=EntityList.ENTITY_EGGS.get(id);
  }
  if (info != null) {
switch (tintIndex) {
case 1:
      return info.primaryColor;
case 2:
    return info.secondaryColor;
}
}
return 0xFFFFFF;
}","public int colorMultiplier(ItemStack stack,int tintIndex){
  EntityList.EntityEggInfo info=null;
  if (stack.hasTagCompound()) {
    ResourceLocation id=new ResourceLocation(stack.getTagCompound().getString(""String_Node_Str""));
    info=EntityList.ENTITY_EGGS.get(id);
  }
  if (info != null) {
switch (tintIndex) {
case 1:
      return info.primaryColor;
case 2:
    return info.secondaryColor;
}
}
return 0xFFFFFF;
}"
59393,"public static void refresh(){
  Minecraft.getMinecraft().addScheduledTask(EnchanterRecipeCategory::refresh);
}","public static void refresh(){
  FMLCommonHandler.instance().getMinecraftServerInstance().addScheduledTask(EnchanterRecipeCategory::refresh);
}"
59394,"@Override public void initialize(FMLInitializationEvent event){
  super.initialize(event);
  RenderCache.initialize();
  RenderStrongbox.initialize();
  Minecraft.getMinecraft().getItemColors().registerItemColorHandler(TEItems.itemMorb,TEItems.itemMorb);
}","@Override public void initialize(FMLInitializationEvent event){
  super.initialize(event);
  RenderCache.initialize();
  RenderStrongbox.initialize();
  Minecraft.getMinecraft().getItemColors().registerItemColorHandler(TEItems.itemMorb::colorMultiplier,TEItems.itemMorb);
}"
59395,"@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  int change;
  float pitch;
  if (GuiScreen.isShiftKeyDown()) {
    change=64;
    pitch=0.9F;
    if (mouseButton == 1) {
      change=32;
      pitch=0.8F;
    }
  }
 else   if (GuiScreen.isCtrlKeyDown()) {
    change=4;
    pitch=0.5F;
    if (mouseButton == 1) {
      change=1;
      pitch=0.4F;
    }
  }
 else {
    change=16;
    pitch=0.7F;
    if (mouseButton == 1) {
      change=8;
      pitch=0.6F;
    }
  }
  int curInput=myTile.amountInput;
  int curOutput=myTile.amountOutput;
  if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    myTile.amountInput-=change;
    pitch-=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    myTile.amountInput+=change;
    pitch+=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    myTile.amountOutput-=change;
    pitch-=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    myTile.amountOutput+=change;
    pitch+=0.1F;
  }
  playClickSound(1.0F,pitch);
  myTile.sendModePacket();
  myTile.amountInput=curInput;
  myTile.amountOutput=curOutput;
}","@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  int change;
  float pitch;
  if (GuiScreen.isShiftKeyDown()) {
    change=64;
    pitch=0.9F;
    if (mouseButton == 1) {
      change=32;
      pitch=0.8F;
    }
  }
 else   if (GuiScreen.isCtrlKeyDown()) {
    change=4;
    pitch=0.5F;
    if (mouseButton == 1) {
      change=1;
      pitch=0.4F;
    }
  }
 else {
    change=16;
    pitch=0.7F;
    if (mouseButton == 1) {
      change=8;
      pitch=0.6F;
    }
  }
  int curInput=myTile.amountInput;
  int curOutput=myTile.amountOutput;
  if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    myTile.amountInput-=change;
    pitch-=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    myTile.amountInput+=change;
    pitch+=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    myTile.amountOutput-=change;
    pitch-=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    myTile.amountOutput+=change;
    pitch+=0.1F;
  }
  playClickSound(pitch);
  myTile.sendModePacket();
  myTile.amountInput=curInput;
  myTile.amountOutput=curOutput;
}"
59396,"@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (myTile.modeFlag == 1) {
      playClickSound(1.0F,0.8F);
    }
 else {
      playClickSound(1.0F,0.6F);
    }
    myTile.toggleMode();
  }
}","@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (myTile.modeFlag == 1) {
      playClickSound(0.8F);
    }
 else {
      playClickSound(0.6F);
    }
    myTile.toggleMode();
  }
}"
59397,"@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (myTile.lockPrimary) {
      playClickSound(1.0F,0.6F);
    }
 else {
      playClickSound(1.0F,0.8F);
    }
    myTile.setMode(!myTile.lockPrimary);
  }
}","@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (myTile.lockPrimary) {
      playClickSound(0.6F);
    }
 else {
      playClickSound(0.8F);
    }
    myTile.setMode(!myTile.lockPrimary);
  }
}"
59398,"@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (myTile.lockPrimary) {
      playClickSound(1.0F,0.6F);
    }
 else {
      playClickSound(1.0F,0.8F);
    }
    myTile.setMode(!myTile.lockPrimary);
  }
}","@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (myTile.lockPrimary) {
      playClickSound(0.6F);
    }
 else {
      playClickSound(0.8F);
    }
    myTile.setMode(!myTile.lockPrimary);
  }
}"
59399,"@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (myTile.extractFlag) {
      playClickSound(1.0F,0.8F);
    }
 else {
      playClickSound(1.0F,0.6F);
    }
    myTile.setMode(!myTile.extractFlag);
  }
}","@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (myTile.extractFlag) {
      playClickSound(0.8F);
    }
 else {
      playClickSound(0.6F);
    }
    myTile.setMode(!myTile.extractFlag);
  }
}"
59400,"@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  int change;
  float pitch;
  if (GuiScreen.isShiftKeyDown()) {
    change=1000;
    pitch=0.9F;
    if (mouseButton == 1) {
      change=100;
      pitch=0.8F;
    }
    if (GuiScreen.isCtrlKeyDown()) {
      change*=10;
    }
  }
 else   if (GuiScreen.isCtrlKeyDown()) {
    change=5;
    pitch=0.5F;
    if (mouseButton == 1) {
      change=1;
      pitch=0.4F;
    }
  }
 else {
    change=50;
    pitch=0.7F;
    if (mouseButton == 1) {
      change=10;
      pitch=0.6F;
    }
  }
  int curReceive=baseTile.amountRecv;
  int curSend=baseTile.amountSend;
  if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    baseTile.amountRecv-=change;
    pitch-=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    baseTile.amountRecv+=change;
    pitch+=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    baseTile.amountSend-=change;
    pitch-=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    baseTile.amountSend+=change;
    pitch+=0.1F;
  }
  playClickSound(1.0F,pitch);
  baseTile.sendModePacket();
  baseTile.amountRecv=curReceive;
  baseTile.amountSend=curSend;
}","@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  int change;
  float pitch;
  if (GuiScreen.isShiftKeyDown()) {
    change=1000;
    pitch=0.9F;
    if (mouseButton == 1) {
      change=100;
      pitch=0.8F;
    }
    if (GuiScreen.isCtrlKeyDown()) {
      change*=10;
    }
  }
 else   if (GuiScreen.isCtrlKeyDown()) {
    change=5;
    pitch=0.5F;
    if (mouseButton == 1) {
      change=1;
      pitch=0.4F;
    }
  }
 else {
    change=50;
    pitch=0.7F;
    if (mouseButton == 1) {
      change=10;
      pitch=0.6F;
    }
  }
  int curReceive=baseTile.amountRecv;
  int curSend=baseTile.amountSend;
  if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    baseTile.amountRecv-=change;
    pitch-=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    baseTile.amountRecv+=change;
    pitch+=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    baseTile.amountSend-=change;
    pitch-=0.1F;
  }
 else   if (buttonName.equalsIgnoreCase(""String_Node_Str"")) {
    baseTile.amountSend+=change;
    pitch+=0.1F;
  }
  playClickSound(pitch);
  baseTile.sendModePacket();
  baseTile.amountRecv=curReceive;
  baseTile.amountSend=curSend;
}"
59401,"public void updateRender(){
  renderFlag=false;
  boolean sendUpdate=false;
  int curDisplayLevel=0;
  int curLight=getLightValue();
  if (tank.getFluidAmount() > 0) {
    curDisplayLevel=(int)(tank.getFluidAmount() / (float)getCapacity(level,enchantHolding) * (RENDER_LEVELS - 1));
    if (curDisplayLevel == 0) {
      curDisplayLevel=1;
    }
    if (lastDisplayLevel == 0) {
      lastDisplayLevel=curDisplayLevel;
      sendUpdate=true;
    }
  }
 else   if (lastDisplayLevel != 0) {
    lastDisplayLevel=0;
    sendUpdate=true;
  }
  if (curDisplayLevel != lastDisplayLevel) {
    lastDisplayLevel=curDisplayLevel;
    sendUpdate=true;
  }
  if (curLight != getLightValue()) {
    updateLighting();
    sendUpdate=true;
  }
  if (sendUpdate) {
    sendTilePacket(Side.CLIENT);
  }
}","public void updateRender(){
  renderFlag=false;
  boolean sendUpdate=false;
  int curDisplayLevel=0;
  int curLight=getLightValue();
  if (tank.getFluidAmount() > 0) {
    curDisplayLevel=(int)(tank.getFluidAmount() / (float)getCapacity(level,enchantHolding) * (RENDER_LEVELS - 1));
    if (curDisplayLevel == 0) {
      curDisplayLevel=1;
    }
    if (lastDisplayLevel == 0) {
      lastDisplayLevel=curDisplayLevel;
      sendUpdate=true;
    }
  }
 else   if (lastDisplayLevel != 0) {
    lastDisplayLevel=0;
    sendUpdate=true;
  }
  if (lastDisplayLevel != curDisplayLevel) {
    lastDisplayLevel=curDisplayLevel;
    sendUpdate=true;
  }
  if (sendUpdate) {
    updateLighting();
    sendTilePacket(Side.CLIENT);
  }
}"
59402,"@Override public void initGui(){
  super.initGui();
  slotInput=addElement(new ElementSlotOverlay(this,44,20).setSlotInfo(0,4,2));
  slotOutput[0]=(ElementSlotOverlay)addElement(new ElementSlotOverlay(this,112,31).setSlotInfo(3,1,2));
  slotOutput[1]=(ElementSlotOverlay)addElement(new ElementSlotOverlay(this,112,31).setSlotInfo(2,1,1));
  slotTankOutput[0]=(ElementSlotOverlay)addElement(new ElementSlotOverlay(this,152,9).setSlotInfo(3,3,2).setVisible(false));
  slotTankOutput[1]=(ElementSlotOverlay)addElement(new ElementSlotOverlay(this,152,9).setSlotInfo(1,3,1).setVisible(false));
  addElement(new ElementEnergyStored(this,8,8,baseTile.getEnergyStorage()));
  addElement(new ElementFluidTank(this,44,19,myTile.getTank(0)).setGauge(0).setAlwaysShow(true).setShort());
  addElement(new ElementFluidTank(this,152,9,myTile.getTank(1)).setGauge(1).setAlwaysShow(true));
  progressFluid=(ElementFluid)addElement(new ElementFluid(this,76,34).setFluid(myTile.getTankFluid(0)).setSize(24,16));
  progressOverlay=(ElementDualScaled)addElement(new ElementDualScaled(this,76,34).setMode(1).setBackground(false).setSize(24,16).setTexture(TEX_DROP_RIGHT,64,16));
  speed=(ElementDualScaled)addElement(new ElementDualScaled(this,44,52).setSize(16,16).setTexture(TEX_FLAME,32,16));
}","@Override public void initGui(){
  super.initGui();
  slotInput=addElement(new ElementSlotOverlay(this,44,19).setSlotInfo(0,4,2));
  slotOutput[0]=(ElementSlotOverlay)addElement(new ElementSlotOverlay(this,112,31).setSlotInfo(3,1,2));
  slotOutput[1]=(ElementSlotOverlay)addElement(new ElementSlotOverlay(this,112,31).setSlotInfo(2,1,1));
  slotTankOutput[0]=(ElementSlotOverlay)addElement(new ElementSlotOverlay(this,152,9).setSlotInfo(3,3,2).setVisible(false));
  slotTankOutput[1]=(ElementSlotOverlay)addElement(new ElementSlotOverlay(this,152,9).setSlotInfo(1,3,1).setVisible(false));
  addElement(new ElementEnergyStored(this,8,8,baseTile.getEnergyStorage()));
  addElement(new ElementFluidTank(this,44,19,myTile.getTank(0)).setGauge(0).setAlwaysShow(true).setShort());
  addElement(new ElementFluidTank(this,152,9,myTile.getTank(1)).setGauge(1).setAlwaysShow(true));
  progressFluid=(ElementFluid)addElement(new ElementFluid(this,76,34).setFluid(myTile.getTankFluid(0)).setSize(24,16));
  progressOverlay=(ElementDualScaled)addElement(new ElementDualScaled(this,76,34).setMode(1).setBackground(false).setSize(24,16).setTexture(TEX_DROP_RIGHT,64,16));
  speed=(ElementDualScaled)addElement(new ElementDualScaled(this,44,52).setSize(16,16).setTexture(TEX_FLAME,32,16));
}"
59403,"protected void drawSlotNoBorder(int x,int y){
  sizeX=0;
  sizeY=0;
  int offsetX=slotColor / 3 * 128;
  int offsetY=slotColor % 3 * 32;
switch (slotType) {
case 0:
    sizeX=16;
  sizeY=16;
offsetX+=8;
offsetY+=8;
break;
case 1:
sizeX=24;
sizeY=24;
offsetX+=36;
offsetY+=4;
break;
case 2:
sizeX=42;
sizeY=24;
offsetX+=75;
offsetY+=4;
break;
case 3:
sizeX=16;
sizeY=60;
offsetX=slotColor * 32 + 8;
offsetY=98;
break;
case 4:
sizeX=16;
sizeY=29;
offsetX=slotColor * 32 + 8;
offsetY=162;
break;
}
switch (slotRender) {
case 0:
sizeY/=2;
break;
case 1:
sizeY/=2;
y+=sizeY;
offsetY+=sizeY;
break;
case 2:
break;
}
gui.drawTexturedModalRect(x,y,offsetX,offsetY,sizeX,sizeY);
}","protected void drawSlotNoBorder(int x,int y){
  sizeX=0;
  sizeY=0;
  int offsetX=slotColor / 3 * 128;
  int offsetY=slotColor % 3 * 32;
switch (slotType) {
case 0:
    sizeX=16;
  sizeY=16;
offsetX+=8;
offsetY+=8;
break;
case 1:
sizeX=24;
sizeY=24;
offsetX+=36;
offsetY+=4;
break;
case 2:
sizeX=42;
sizeY=24;
offsetX+=75;
offsetY+=4;
break;
case 3:
sizeX=16;
sizeY=60;
offsetX=slotColor * 32 + 8;
offsetY=98;
break;
case 4:
sizeX=16;
sizeY=30;
offsetX=slotColor * 32 + 8;
offsetY=162;
break;
}
switch (slotRender) {
case 0:
sizeY/=2;
break;
case 1:
sizeY/=2;
y+=sizeY;
offsetY+=sizeY;
break;
case 2:
break;
}
gui.drawTexturedModalRect(x,y,offsetX,offsetY,sizeX,sizeY);
}"
59404,"private boolean canStartHandler(){
  if (!FluidHelper.isFluidHandler(inventory[1])) {
    hasFluidHandler=false;
    return false;
  }
  if (energyStorage.getEnergyStored() < TransposerManager.DEFAULT_ENERGY) {
    return false;
  }
  IFluidHandler handler=inventory[1].getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,null);
  if (!extractMode) {
    if (tank.getFluid() == null || tank.getFluidAmount() < Fluid.BUCKET_VOLUME) {
      return false;
    }
    return handler.fill(new FluidStack(tank.getFluid(),Fluid.BUCKET_VOLUME),false) > 0;
  }
 else {
    if (tank.getSpace() < Fluid.BUCKET_VOLUME) {
      return false;
    }
    FluidStack drain=handler.drain(Fluid.BUCKET_VOLUME,false);
    return tank.fill(drain,false) > 0;
  }
}","private boolean canStartHandler(){
  if (!FluidHelper.isFluidHandler(inventory[1])) {
    hasFluidHandler=false;
    return false;
  }
  if (energyStorage.getEnergyStored() < TransposerManager.DEFAULT_ENERGY) {
    return false;
  }
  if (inventory[2] != null) {
    return false;
  }
  IFluidHandler handler=inventory[1].getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,null);
  if (!extractMode) {
    if (tank.getFluid() == null || tank.getFluidAmount() < Fluid.BUCKET_VOLUME) {
      return false;
    }
    return handler.fill(new FluidStack(tank.getFluid(),Fluid.BUCKET_VOLUME),false) > 0;
  }
 else {
    if (tank.getSpace() < Fluid.BUCKET_VOLUME) {
      return false;
    }
    FluidStack drain=handler.drain(Fluid.BUCKET_VOLUME,false);
    return tank.fill(drain,false) > 0;
  }
}"
59405,"@Override public void initGui(){
  super.initGui();
  slotInput=addElement(new ElementSlotOverlay(this,53,26).setSlotInfo(0,0,2));
  slotOutput=addElement(new ElementSlotOverlay(this,112,31).setSlotInfo(3,1,2));
  addElement(new ElementEnergyStored(this,8,8,baseTile.getEnergyStorage()));
  progress=(ElementDualScaled)addElement(new ElementDualScaled(this,79,34).setMode(1).setSize(24,16).setTexture(TEX_ARROW_RIGHT,64,16));
  speed=(ElementDualScaled)addElement(new ElementDualScaled(this,53,44).setSize(16,16).setTexture(TEX_FLAME,32,16));
  modeSel=(ElementButton)addElement(new ElementButton(this,80,53,""String_Node_Str"",176,0,176,16,176,32,16,16,TEX_PATH));
}","@Override public void initGui(){
  super.initGui();
  slotInput=addElement(new ElementSlotOverlay(this,53,26).setSlotInfo(0,0,2));
  slotOutput=addElement(new ElementSlotOverlay(this,112,31).setSlotInfo(3,1,2));
  addElement(new ElementEnergyStored(this,8,8,baseTile.getEnergyStorage()));
  progress=(ElementDualScaled)addElement(new ElementDualScaled(this,79,34).setMode(1).setSize(24,16).setTexture(TEX_ARROW_RIGHT,64,16));
  speed=(ElementDualScaled)addElement(new ElementDualScaled(this,53,44).setSize(16,16).setTexture(TEX_COMPACT,32,16));
  modeSel=(ElementButton)addElement(new ElementButton(this,80,53,""String_Node_Str"",176,0,176,16,176,32,16,16,TEX_PATH));
}"
59406,"public static void registerIcons(TextureStitchEvent.Pre event){
  TextureMap map=event.getMap();
  CONFIG_NONE=register(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_BLUE=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_RED=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_YELLOW=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_ORANGE=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_GREEN=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_PURPLE=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_OPEN=register(map,CONFIG_ + ""String_Node_Str"");
  MACHINE_TOP=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_BOTTOM=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_SIDE=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_0=map.getMissingSprite();
  MACHINE_OVERLAY_1=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_2=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_3=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_4=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_C=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_FACE_FURNACE=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_PULVERIZER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_SAWMILL=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_SMELTER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_INSOLATOR=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_COMPACTOR=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_CRUCIBLE=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_REFINERY=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_TRANSPOSER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_CHARGER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_CENTRIFUGE=map.getMissingSprite();
  MACHINE_FACE_CRAFTER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_BREWER=map.getMissingSprite();
  MACHINE_FACE_ENCHANTER=map.getMissingSprite();
  MACHINE_FACE_PRECIPITATOR=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_EXTRUDER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_FURNACE=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_PULVERIZER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_SAWMILL=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_SMELTER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_INSOLATOR=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_COMPACTOR=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_CRUCIBLE=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_REFINERY=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_TRANSPOSER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_CHARGER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_CENTRIFUGE=map.getMissingSprite();
  MACHINE_ACTIVE_CRAFTER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_BREWER=map.getMissingSprite();
  MACHINE_ACTIVE_ENCHANTER=map.getMissingSprite();
  MACHINE_ACTIVE_PRECIPITATOR=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_EXTRUDER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_FRAME_TOP=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_FRAME_BOTTOM=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_FRAME_SIDE=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_FRAME_INNER=register(map,MACHINE_ + ""String_Node_Str"");
  AUTOMATON_SIDE=register(map,BLOCKS_ + ""String_Node_Str"");
  AUTOMATON_FACE_BREAKER=register(map,AUTOMATON_FACE_ + ""String_Node_Str"");
  AUTOMATON_FACE_COLLECTOR=register(map,AUTOMATON_FACE_ + ""String_Node_Str"");
  AUTOMATON_ACTIVE_BREAKER=register(map,AUTOMATON_ACTIVE_ + ""String_Node_Str"");
  AUTOMATON_ACTIVE_COLLECTOR=register(map,AUTOMATON_ACTIVE_ + ""String_Node_Str"");
  DEVICE_TOP=register(map,BLOCKS_ + ""String_Node_Str"");
  DEVICE_BOTTOM=register(map,BLOCKS_ + ""String_Node_Str"");
  DEVICE_SIDE=register(map,BLOCKS_ + ""String_Node_Str"");
  DEVICE_FACE_WATERGEN=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_NULLIFIER=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_HEAT_SINK=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_TAPPER=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_ITEM_BUFFER=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_EXTENDER=map.getMissingSprite();
  DEVICE_ACTIVE_WATERGEN=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_NULLIFIER=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_HEAT_SINK=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_TAPPER=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_ITEM_BUFFER=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_EXTENDER=map.getMissingSprite();
  DEVICE_FRAME_TOP=register(map,DEVICE_ + ""String_Node_Str"");
  DEVICE_FRAME_SIDE=register(map,DEVICE_ + ""String_Node_Str"");
  DEVICE_FRAME_BOTTOM=register(map,DEVICE_ + ""String_Node_Str"");
  DEVICE_FRAME_INNER=register(map,DEVICE_ + ""String_Node_Str"");
  DYNAMO_COIL_REDSTONE=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_STEAM=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_MAGMATIC=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_COMPRESSION=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_REACTANT=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_ENERVATION=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_NUMISMATIC=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_0=map.getMissingSprite();
  DYNAMO_OVERLAY_1=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_2=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_3=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_4=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_C=register(map,DYNAMO_ + ""String_Node_Str"");
  ICON_ACCEPT=map.getMissingSprite();
  ICON_ACCEPT_INACTIVE=map.getMissingSprite();
  ICON_SCHEMATIC=map.getMissingSprite();
  CELL_CONFIG_BLUE=registerCB(map,CELL_CONFIG_ + ""String_Node_Str"");
  CELL_CONFIG_ORANGE=registerCB(map,CELL_CONFIG_ + ""String_Node_Str"");
  CELL_INNER_0=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_1=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_2=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_3=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_4=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_C=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_0=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_1=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_2=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_3=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_4=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_C=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_0=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_1=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_2=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_3=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_4=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_5=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_6=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_7=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_8=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_C=register(map,CELL_ + ""String_Node_Str"");
  TANK_BOTTOM_0_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_C=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_C=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_C=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_C=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_C=register(map,TANK_ + ""String_Node_Str"");
  CACHE_BOTTOM_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_C=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_C=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_C=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_C=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_5=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_6=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_7=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_8=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_C=register(map,CACHE_ + ""String_Node_Str"");
  ILLUMINATOR_FRAME=register(map,BLOCKS_ + ""String_Node_Str"");
  CONFIG=new TextureAtlasSprite[]{CONFIG_NONE,CONFIG_BLUE,CONFIG_RED,CONFIG_YELLOW,CONFIG_ORANGE,CONFIG_GREEN,CONFIG_PURPLE,CONFIG_OPEN};
  MACHINE_OVERLAY=new TextureAtlasSprite[]{MACHINE_OVERLAY_0,MACHINE_OVERLAY_1,MACHINE_OVERLAY_2,MACHINE_OVERLAY_3,MACHINE_OVERLAY_4,MACHINE_OVERLAY_C};
  MACHINE_FACE=new TextureAtlasSprite[]{MACHINE_FACE_FURNACE,MACHINE_FACE_PULVERIZER,MACHINE_FACE_SAWMILL,MACHINE_FACE_SMELTER,MACHINE_FACE_INSOLATOR,MACHINE_FACE_COMPACTOR,MACHINE_FACE_CRUCIBLE,MACHINE_FACE_REFINERY,MACHINE_FACE_TRANSPOSER,MACHINE_FACE_CHARGER,MACHINE_FACE_CENTRIFUGE,MACHINE_FACE_CRAFTER,MACHINE_FACE_BREWER,MACHINE_FACE_ENCHANTER,MACHINE_FACE_PRECIPITATOR,MACHINE_FACE_EXTRUDER};
  MACHINE_ACTIVE=new TextureAtlasSprite[]{MACHINE_ACTIVE_FURNACE,MACHINE_ACTIVE_PULVERIZER,MACHINE_ACTIVE_SAWMILL,MACHINE_ACTIVE_SMELTER,MACHINE_ACTIVE_INSOLATOR,MACHINE_ACTIVE_COMPACTOR,MACHINE_ACTIVE_CRUCIBLE,MACHINE_ACTIVE_REFINERY,MACHINE_ACTIVE_TRANSPOSER,MACHINE_ACTIVE_CHARGER,MACHINE_ACTIVE_CENTRIFUGE,MACHINE_ACTIVE_CRAFTER,MACHINE_ACTIVE_BREWER,MACHINE_ACTIVE_ENCHANTER,MACHINE_ACTIVE_PRECIPITATOR,MACHINE_ACTIVE_EXTRUDER};
  AUTOMATON_FACE=new TextureAtlasSprite[]{AUTOMATON_FACE_BREAKER,AUTOMATON_FACE_COLLECTOR};
  AUTOMATON_ACTIVE=new TextureAtlasSprite[]{AUTOMATON_ACTIVE_BREAKER,AUTOMATON_ACTIVE_COLLECTOR};
  DEVICE_FACE=new TextureAtlasSprite[]{DEVICE_FACE_WATERGEN,DEVICE_FACE_NULLIFIER,DEVICE_FACE_HEAT_SINK,DEVICE_FACE_TAPPER};
  DEVICE_ACTIVE=new TextureAtlasSprite[]{DEVICE_ACTIVE_WATERGEN,DEVICE_ACTIVE_NULLIFIER,DEVICE_ACTIVE_HEAT_SINK,DEVICE_ACTIVE_TAPPER};
  DYNAMO=new TextureAtlasSprite[]{DYNAMO_STEAM,DYNAMO_MAGMATIC,DYNAMO_COMPRESSION,DYNAMO_REACTANT,DYNAMO_ENERVATION,DYNAMO_NUMISMATIC};
  DYNAMO_OVERLAY=new TextureAtlasSprite[]{DYNAMO_OVERLAY_0,DYNAMO_OVERLAY_1,DYNAMO_OVERLAY_2,DYNAMO_OVERLAY_3,DYNAMO_OVERLAY_4,DYNAMO_OVERLAY_C};
  CELL_CONFIG=new TextureAtlasSprite[]{CONFIG_NONE,CELL_CONFIG_BLUE,CELL_CONFIG_ORANGE};
  CELL_INNER=new TextureAtlasSprite[]{CELL_INNER_0,CELL_INNER_1,CELL_INNER_2,CELL_INNER_3,CELL_INNER_4,CELL_INNER_C};
  CELL_SIDE=new TextureAtlasSprite[]{CELL_SIDE_0,CELL_SIDE_1,CELL_SIDE_2,CELL_SIDE_3,CELL_SIDE_4,CELL_SIDE_C};
  CELL_METER=new TextureAtlasSprite[]{CELL_METER_0,CELL_METER_1,CELL_METER_2,CELL_METER_3,CELL_METER_4,CELL_METER_5,CELL_METER_6,CELL_METER_7,CELL_METER_8,CELL_METER_C};
  TANK_BOTTOM=new TextureAtlasSprite[][]{new TextureAtlasSprite[]{TANK_BOTTOM_0_0,TANK_BOTTOM_0_1,TANK_BOTTOM_0_2,TANK_BOTTOM_0_3,TANK_BOTTOM_0_4,TANK_BOTTOM_0_C},new TextureAtlasSprite[]{TANK_BOTTOM_1_0,TANK_BOTTOM_1_1,TANK_BOTTOM_1_2,TANK_BOTTOM_1_3,TANK_BOTTOM_1_4,TANK_BOTTOM_1_C}};
  TANK_TOP=new TextureAtlasSprite[]{TANK_TOP_0,TANK_TOP_1,TANK_TOP_2,TANK_TOP_3,TANK_TOP_4,TANK_TOP_C};
  TANK_SIDE=new TextureAtlasSprite[][]{new TextureAtlasSprite[]{TANK_SIDE_0_0,TANK_SIDE_0_1,TANK_SIDE_0_2,TANK_SIDE_0_3,TANK_SIDE_0_4,TANK_SIDE_0_C},new TextureAtlasSprite[]{TANK_SIDE_1_0,TANK_SIDE_1_1,TANK_SIDE_1_2,TANK_SIDE_1_3,TANK_SIDE_1_4,TANK_SIDE_1_C}};
  CACHE_BOTTOM=new TextureAtlasSprite[]{CACHE_BOTTOM_0,CACHE_BOTTOM_1,CACHE_BOTTOM_2,CACHE_BOTTOM_3,CACHE_BOTTOM_4,CACHE_BOTTOM_C};
  CACHE_TOP=new TextureAtlasSprite[]{CACHE_TOP_0,CACHE_TOP_1,CACHE_TOP_2,CACHE_TOP_3,CACHE_TOP_4,CACHE_TOP_C};
  CACHE_SIDE=new TextureAtlasSprite[]{CACHE_SIDE_0,CACHE_SIDE_1,CACHE_SIDE_2,CACHE_SIDE_3,CACHE_SIDE_4,CACHE_SIDE_C};
  CACHE_FACE=new TextureAtlasSprite[]{CACHE_FACE_0,CACHE_FACE_1,CACHE_FACE_2,CACHE_FACE_3,CACHE_FACE_4,CACHE_FACE_C};
  CACHE_METER=new TextureAtlasSprite[]{CACHE_METER_0,CACHE_METER_1,CACHE_METER_2,CACHE_METER_3,CACHE_METER_4,CACHE_METER_5,CACHE_METER_6,CACHE_METER_7,CACHE_METER_8,CACHE_METER_C};
}","public static void registerIcons(TextureStitchEvent.Pre event){
  TextureMap map=event.getMap();
  CONFIG_NONE=register(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_BLUE=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_RED=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_YELLOW=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_ORANGE=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_GREEN=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_PURPLE=registerCB(map,CONFIG_ + ""String_Node_Str"");
  CONFIG_OPEN=register(map,CONFIG_ + ""String_Node_Str"");
  MACHINE_TOP=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_BOTTOM=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_SIDE=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_0=map.getMissingSprite();
  MACHINE_OVERLAY_1=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_2=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_3=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_4=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_OVERLAY_C=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_FACE_FURNACE=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_PULVERIZER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_SAWMILL=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_SMELTER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_INSOLATOR=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_COMPACTOR=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_CRUCIBLE=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_REFINERY=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_TRANSPOSER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_CHARGER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_CENTRIFUGE=map.getMissingSprite();
  MACHINE_FACE_CRAFTER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_BREWER=map.getMissingSprite();
  MACHINE_FACE_ENCHANTER=map.getMissingSprite();
  MACHINE_FACE_PRECIPITATOR=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_FACE_EXTRUDER=register(map,MACHINE_FACE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_FURNACE=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_PULVERIZER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_SAWMILL=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_SMELTER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_INSOLATOR=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_COMPACTOR=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_CRUCIBLE=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_REFINERY=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_TRANSPOSER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_CHARGER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_CENTRIFUGE=map.getMissingSprite();
  MACHINE_ACTIVE_CRAFTER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_BREWER=map.getMissingSprite();
  MACHINE_ACTIVE_ENCHANTER=map.getMissingSprite();
  MACHINE_ACTIVE_PRECIPITATOR=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_ACTIVE_EXTRUDER=register(map,MACHINE_ACTIVE_ + ""String_Node_Str"");
  MACHINE_FRAME_TOP=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_FRAME_BOTTOM=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_FRAME_SIDE=register(map,MACHINE_ + ""String_Node_Str"");
  MACHINE_FRAME_INNER=register(map,MACHINE_ + ""String_Node_Str"");
  AUTOMATON_SIDE=register(map,BLOCKS_ + ""String_Node_Str"");
  AUTOMATON_FACE_BREAKER=register(map,AUTOMATON_FACE_ + ""String_Node_Str"");
  AUTOMATON_FACE_COLLECTOR=register(map,AUTOMATON_FACE_ + ""String_Node_Str"");
  AUTOMATON_ACTIVE_BREAKER=register(map,AUTOMATON_ACTIVE_ + ""String_Node_Str"");
  AUTOMATON_ACTIVE_COLLECTOR=register(map,AUTOMATON_ACTIVE_ + ""String_Node_Str"");
  DEVICE_TOP=register(map,BLOCKS_ + ""String_Node_Str"");
  DEVICE_BOTTOM=register(map,BLOCKS_ + ""String_Node_Str"");
  DEVICE_SIDE=register(map,BLOCKS_ + ""String_Node_Str"");
  DEVICE_FACE_WATERGEN=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_NULLIFIER=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_HEAT_SINK=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_TAPPER=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_ITEM_BUFFER=register(map,DEVICE_FACE_ + ""String_Node_Str"");
  DEVICE_FACE_EXTENDER=map.getMissingSprite();
  DEVICE_ACTIVE_WATERGEN=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_NULLIFIER=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_HEAT_SINK=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_TAPPER=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_ITEM_BUFFER=register(map,DEVICE_ACTIVE_ + ""String_Node_Str"");
  DEVICE_ACTIVE_EXTENDER=map.getMissingSprite();
  DEVICE_FRAME_TOP=register(map,DEVICE_ + ""String_Node_Str"");
  DEVICE_FRAME_SIDE=register(map,DEVICE_ + ""String_Node_Str"");
  DEVICE_FRAME_BOTTOM=register(map,DEVICE_ + ""String_Node_Str"");
  DEVICE_FRAME_INNER=register(map,DEVICE_ + ""String_Node_Str"");
  DYNAMO_COIL_REDSTONE=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_STEAM=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_MAGMATIC=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_COMPRESSION=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_REACTANT=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_ENERVATION=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_NUMISMATIC=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_0=map.getMissingSprite();
  DYNAMO_OVERLAY_1=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_2=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_3=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_4=register(map,DYNAMO_ + ""String_Node_Str"");
  DYNAMO_OVERLAY_C=register(map,DYNAMO_ + ""String_Node_Str"");
  ICON_ACCEPT=map.getMissingSprite();
  ICON_ACCEPT_INACTIVE=map.getMissingSprite();
  ICON_SCHEMATIC=map.getMissingSprite();
  CELL_CONFIG_BLUE=registerCB(map,CELL_CONFIG_ + ""String_Node_Str"");
  CELL_CONFIG_ORANGE=registerCB(map,CELL_CONFIG_ + ""String_Node_Str"");
  CELL_INNER_0=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_1=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_2=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_3=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_4=register(map,CELL_ + ""String_Node_Str"");
  CELL_INNER_C=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_0=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_1=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_2=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_3=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_4=register(map,CELL_ + ""String_Node_Str"");
  CELL_SIDE_C=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_0=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_1=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_2=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_3=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_4=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_5=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_6=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_7=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_8=register(map,CELL_ + ""String_Node_Str"");
  CELL_METER_C=register(map,CELL_ + ""String_Node_Str"");
  CELL_CENTER_0=register(map,""String_Node_Str"");
  CELL_CENTER_1=register(map,""String_Node_Str"");
  TANK_BOTTOM_0_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_0_C=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_BOTTOM_1_C=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_TOP_C=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_0_C=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_0=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_1=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_2=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_3=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_4=register(map,TANK_ + ""String_Node_Str"");
  TANK_SIDE_1_C=register(map,TANK_ + ""String_Node_Str"");
  CACHE_BOTTOM_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_BOTTOM_C=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_TOP_C=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_SIDE_C=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_FACE_C=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_0=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_1=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_2=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_3=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_4=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_5=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_6=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_7=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_8=register(map,CACHE_ + ""String_Node_Str"");
  CACHE_METER_C=register(map,CACHE_ + ""String_Node_Str"");
  ILLUMINATOR_FRAME=register(map,BLOCKS_ + ""String_Node_Str"");
  CONFIG=new TextureAtlasSprite[]{CONFIG_NONE,CONFIG_BLUE,CONFIG_RED,CONFIG_YELLOW,CONFIG_ORANGE,CONFIG_GREEN,CONFIG_PURPLE,CONFIG_OPEN};
  MACHINE_OVERLAY=new TextureAtlasSprite[]{MACHINE_OVERLAY_0,MACHINE_OVERLAY_1,MACHINE_OVERLAY_2,MACHINE_OVERLAY_3,MACHINE_OVERLAY_4,MACHINE_OVERLAY_C};
  MACHINE_FACE=new TextureAtlasSprite[]{MACHINE_FACE_FURNACE,MACHINE_FACE_PULVERIZER,MACHINE_FACE_SAWMILL,MACHINE_FACE_SMELTER,MACHINE_FACE_INSOLATOR,MACHINE_FACE_COMPACTOR,MACHINE_FACE_CRUCIBLE,MACHINE_FACE_REFINERY,MACHINE_FACE_TRANSPOSER,MACHINE_FACE_CHARGER,MACHINE_FACE_CENTRIFUGE,MACHINE_FACE_CRAFTER,MACHINE_FACE_BREWER,MACHINE_FACE_ENCHANTER,MACHINE_FACE_PRECIPITATOR,MACHINE_FACE_EXTRUDER};
  MACHINE_ACTIVE=new TextureAtlasSprite[]{MACHINE_ACTIVE_FURNACE,MACHINE_ACTIVE_PULVERIZER,MACHINE_ACTIVE_SAWMILL,MACHINE_ACTIVE_SMELTER,MACHINE_ACTIVE_INSOLATOR,MACHINE_ACTIVE_COMPACTOR,MACHINE_ACTIVE_CRUCIBLE,MACHINE_ACTIVE_REFINERY,MACHINE_ACTIVE_TRANSPOSER,MACHINE_ACTIVE_CHARGER,MACHINE_ACTIVE_CENTRIFUGE,MACHINE_ACTIVE_CRAFTER,MACHINE_ACTIVE_BREWER,MACHINE_ACTIVE_ENCHANTER,MACHINE_ACTIVE_PRECIPITATOR,MACHINE_ACTIVE_EXTRUDER};
  AUTOMATON_FACE=new TextureAtlasSprite[]{AUTOMATON_FACE_BREAKER,AUTOMATON_FACE_COLLECTOR};
  AUTOMATON_ACTIVE=new TextureAtlasSprite[]{AUTOMATON_ACTIVE_BREAKER,AUTOMATON_ACTIVE_COLLECTOR};
  DEVICE_FACE=new TextureAtlasSprite[]{DEVICE_FACE_WATERGEN,DEVICE_FACE_NULLIFIER,DEVICE_FACE_HEAT_SINK,DEVICE_FACE_TAPPER};
  DEVICE_ACTIVE=new TextureAtlasSprite[]{DEVICE_ACTIVE_WATERGEN,DEVICE_ACTIVE_NULLIFIER,DEVICE_ACTIVE_HEAT_SINK,DEVICE_ACTIVE_TAPPER};
  DYNAMO=new TextureAtlasSprite[]{DYNAMO_STEAM,DYNAMO_MAGMATIC,DYNAMO_COMPRESSION,DYNAMO_REACTANT,DYNAMO_ENERVATION,DYNAMO_NUMISMATIC};
  DYNAMO_OVERLAY=new TextureAtlasSprite[]{DYNAMO_OVERLAY_0,DYNAMO_OVERLAY_1,DYNAMO_OVERLAY_2,DYNAMO_OVERLAY_3,DYNAMO_OVERLAY_4,DYNAMO_OVERLAY_C};
  CELL_CONFIG=new TextureAtlasSprite[]{CONFIG_NONE,CELL_CONFIG_BLUE,CELL_CONFIG_ORANGE};
  CELL_INNER=new TextureAtlasSprite[]{CELL_INNER_0,CELL_INNER_1,CELL_INNER_2,CELL_INNER_3,CELL_INNER_4,CELL_INNER_C};
  CELL_SIDE=new TextureAtlasSprite[]{CELL_SIDE_0,CELL_SIDE_1,CELL_SIDE_2,CELL_SIDE_3,CELL_SIDE_4,CELL_SIDE_C};
  CELL_CENTER=new TextureAtlasSprite[]{CELL_CENTER_0,CELL_CENTER_1};
  CELL_METER=new TextureAtlasSprite[]{CELL_METER_0,CELL_METER_1,CELL_METER_2,CELL_METER_3,CELL_METER_4,CELL_METER_5,CELL_METER_6,CELL_METER_7,CELL_METER_8,CELL_METER_C};
  TANK_BOTTOM=new TextureAtlasSprite[][]{new TextureAtlasSprite[]{TANK_BOTTOM_0_0,TANK_BOTTOM_0_1,TANK_BOTTOM_0_2,TANK_BOTTOM_0_3,TANK_BOTTOM_0_4,TANK_BOTTOM_0_C},new TextureAtlasSprite[]{TANK_BOTTOM_1_0,TANK_BOTTOM_1_1,TANK_BOTTOM_1_2,TANK_BOTTOM_1_3,TANK_BOTTOM_1_4,TANK_BOTTOM_1_C}};
  TANK_TOP=new TextureAtlasSprite[]{TANK_TOP_0,TANK_TOP_1,TANK_TOP_2,TANK_TOP_3,TANK_TOP_4,TANK_TOP_C};
  TANK_SIDE=new TextureAtlasSprite[][]{new TextureAtlasSprite[]{TANK_SIDE_0_0,TANK_SIDE_0_1,TANK_SIDE_0_2,TANK_SIDE_0_3,TANK_SIDE_0_4,TANK_SIDE_0_C},new TextureAtlasSprite[]{TANK_SIDE_1_0,TANK_SIDE_1_1,TANK_SIDE_1_2,TANK_SIDE_1_3,TANK_SIDE_1_4,TANK_SIDE_1_C}};
  CACHE_BOTTOM=new TextureAtlasSprite[]{CACHE_BOTTOM_0,CACHE_BOTTOM_1,CACHE_BOTTOM_2,CACHE_BOTTOM_3,CACHE_BOTTOM_4,CACHE_BOTTOM_C};
  CACHE_TOP=new TextureAtlasSprite[]{CACHE_TOP_0,CACHE_TOP_1,CACHE_TOP_2,CACHE_TOP_3,CACHE_TOP_4,CACHE_TOP_C};
  CACHE_SIDE=new TextureAtlasSprite[]{CACHE_SIDE_0,CACHE_SIDE_1,CACHE_SIDE_2,CACHE_SIDE_3,CACHE_SIDE_4,CACHE_SIDE_C};
  CACHE_FACE=new TextureAtlasSprite[]{CACHE_FACE_0,CACHE_FACE_1,CACHE_FACE_2,CACHE_FACE_3,CACHE_FACE_4,CACHE_FACE_C};
  CACHE_METER=new TextureAtlasSprite[]{CACHE_METER_0,CACHE_METER_1,CACHE_METER_2,CACHE_METER_3,CACHE_METER_4,CACHE_METER_5,CACHE_METER_6,CACHE_METER_7,CACHE_METER_8,CACHE_METER_C};
}"
59407,"@Override public EnumActionResult onItemUseFirst(ItemStack stack,EntityPlayer player,World world,BlockPos pos,EnumFacing side,float hitX,float hitY,float hitZ,EnumHand hand){
  IBlockState state=world.getBlockState(pos);
  Block block=state.getBlock();
  if (world.isAirBlock(pos)) {
    return EnumActionResult.PASS;
  }
  RayTraceResult traceResult=RayTracer.retrace(player);
  PlayerInteractEvent event=new PlayerInteractEvent.RightClickBlock(player,hand,stack,pos,side,traceResult.hitVec);
  if (MinecraftForge.EVENT_BUS.post(event) || event.getResult() == Result.DENY) {
    return EnumActionResult.PASS;
  }
  if (ServerHelper.isServerWorld(world) && player.isSneaking() && block instanceof IDismantleable&& ((IDismantleable)block).canDismantle(world,pos,state,player)) {
    ((IDismantleable)block).dismantleBlock(world,pos,state,player,false);
    return EnumActionResult.SUCCESS;
  }
  if (BlockHelper.canRotate(block)) {
    if (player.isSneaking()) {
      world.setBlockState(pos,BlockHelper.rotateVanillaBlockAlt(world,state,pos),3);
      world.playSound(null,pos,block.getSoundType(state,world,pos,player).getBreakSound(),SoundCategory.BLOCKS,1.0F,0.6F);
    }
 else {
      world.setBlockState(pos,BlockHelper.rotateVanillaBlock(world,state,pos),3);
      world.playSound(null,pos,block.getSoundType(state,world,pos,player).getBreakSound(),SoundCategory.BLOCKS,1.0F,0.8F);
    }
    return ServerHelper.isServerWorld(world) ? EnumActionResult.SUCCESS : EnumActionResult.PASS;
  }
 else   if (!player.isSneaking() && block.rotateBlock(world,pos,side)) {
    player.swingArm(hand);
    return ServerHelper.isServerWorld(world) ? EnumActionResult.SUCCESS : EnumActionResult.PASS;
  }
  return EnumActionResult.PASS;
}","@Override public EnumActionResult onItemUseFirst(ItemStack stack,EntityPlayer player,World world,BlockPos pos,EnumFacing side,float hitX,float hitY,float hitZ,EnumHand hand){
  IBlockState state=world.getBlockState(pos);
  Block block=state.getBlock();
  if (world.isAirBlock(pos)) {
    return EnumActionResult.PASS;
  }
  RayTraceResult traceResult=RayTracer.retrace(player);
  PlayerInteractEvent event=new PlayerInteractEvent.RightClickBlock(player,hand,stack,pos,side,traceResult.hitVec);
  if (MinecraftForge.EVENT_BUS.post(event) || event.getResult() == Result.DENY) {
    return EnumActionResult.PASS;
  }
  if (ServerHelper.isServerWorld(world) && player.isSneaking() && block instanceof IDismantleable&& ((IDismantleable)block).canDismantle(world,pos,state,player)) {
    ((IDismantleable)block).dismantleBlock(world,pos,state,player,false);
    return EnumActionResult.SUCCESS;
  }
  if (BlockHelper.canRotate(block)) {
    world.setBlockState(pos,BlockHelper.rotateVanillaBlock(world,state,pos),3);
    player.swingArm(hand);
    return ServerHelper.isServerWorld(world) ? EnumActionResult.SUCCESS : EnumActionResult.PASS;
  }
 else   if (!player.isSneaking() && block.rotateBlock(world,pos,side)) {
    player.swingArm(hand);
    return ServerHelper.isServerWorld(world) ? EnumActionResult.SUCCESS : EnumActionResult.PASS;
  }
  return EnumActionResult.PASS;
}"
59408,"@Override public IExtendedBlockState handleState(IExtendedBlockState state,TileEntity tileEntity){
  TileCell cell=(TileCell)tileEntity;
  state=state.withProperty(TEProps.CREATIVE,cell.isCreative);
  state=state.withProperty(TEProps.LEVEL,cell.getLevel());
  state=state.withProperty(TEProps.LIGHT,Math.min(15,cell.getScaledEnergyStored(16)));
  state=state.withProperty(TEProps.SCALE,cell.getLightValue());
  state=state.withProperty(TEProps.FACING,EnumFacing.VALUES[cell.getFacing()]);
  state=state.withProperty(TEProps.SIDE_CONFIG,cell.sideCache.clone());
  return state;
}","@Override public IExtendedBlockState handleState(IExtendedBlockState state,TileEntity tileEntity){
  TileCell cell=(TileCell)tileEntity;
  if (cell == null) {
    return null;
  }
  state=state.withProperty(TEProps.CREATIVE,cell.isCreative);
  state=state.withProperty(TEProps.LEVEL,cell.getLevel());
  state=state.withProperty(TEProps.LIGHT,Math.min(15,cell.getScaledEnergyStored(16)));
  state=state.withProperty(TEProps.SCALE,cell.getLightValue());
  state=state.withProperty(TEProps.FACING,EnumFacing.VALUES[cell.getFacing()]);
  state=state.withProperty(TEProps.SIDE_CONFIG,cell.sideCache.clone());
  return state;
}"
59409,"@Override public IExtendedBlockState handleState(IExtendedBlockState state,TileEntity tile){
  TileDynamoBase dynamo=(TileDynamoBase)tile;
  state=state.withProperty(TEProps.CREATIVE,dynamo.isCreative);
  state=state.withProperty(TEProps.LEVEL,dynamo.getLevel());
  state=state.withProperty(TEProps.ACTIVE,dynamo.isActive);
  state=state.withProperty(TEProps.FACING,EnumFacing.VALUES[dynamo.getFacing()]);
  state=state.withProperty(TEProps.ACTIVE_SPRITE_PROPERTY,new ResourceLocation(dynamo.getActiveIcon().getIconName()));
  return state;
}","@Override public IExtendedBlockState handleState(IExtendedBlockState state,TileEntity tile){
  TileDynamoBase dynamo=(TileDynamoBase)tile;
  if (dynamo == null) {
    return null;
  }
  state=state.withProperty(TEProps.CREATIVE,dynamo.isCreative);
  state=state.withProperty(TEProps.LEVEL,dynamo.getLevel());
  state=state.withProperty(TEProps.ACTIVE,dynamo.isActive);
  state=state.withProperty(TEProps.FACING,EnumFacing.VALUES[dynamo.getFacing()]);
  state=state.withProperty(TEProps.ACTIVE_SPRITE_PROPERTY,new ResourceLocation(dynamo.getActiveIcon().getIconName()));
  return state;
}"
59410,"@Override public IExtendedBlockState handleState(IExtendedBlockState state,TileEntity tileEntity){
  TileMachineBase machineBase=((TileMachineBase)tileEntity);
  state=state.withProperty(TEProps.CREATIVE,machineBase.isCreative);
  state=state.withProperty(TEProps.LEVEL,machineBase.getLevel());
  state=state.withProperty(TEProps.ACTIVE,machineBase.isActive);
  state=state.withProperty(TEProps.FACING,EnumFacing.VALUES[machineBase.getFacing()]);
  state=state.withProperty(TEProps.SIDE_CONFIG,machineBase.sideCache);
  state=state.withProperty(TEProps.TILE,machineBase);
  return state;
}","@Override public IExtendedBlockState handleState(IExtendedBlockState state,TileEntity tileEntity){
  TileMachineBase machineBase=((TileMachineBase)tileEntity);
  if (machineBase == null) {
    return null;
  }
  state=state.withProperty(TEProps.CREATIVE,machineBase.isCreative);
  state=state.withProperty(TEProps.LEVEL,machineBase.getLevel());
  state=state.withProperty(TEProps.ACTIVE,machineBase.isActive);
  state=state.withProperty(TEProps.FACING,EnumFacing.VALUES[machineBase.getFacing()]);
  state=state.withProperty(TEProps.SIDE_CONFIG,machineBase.sideCache);
  state=state.withProperty(TEProps.TILE,machineBase);
  return state;
}"
59411,"@Override public IExtendedBlockState handleState(IExtendedBlockState state,TileEntity tileEntity){
  TileTank tank=((TileTank)tileEntity);
  state=state.withProperty(TEProps.CREATIVE,tank.isCreative);
  state=state.withProperty(TEProps.LEVEL,tank.getLevel());
  state=state.withProperty(TEProps.ACTIVE,tank.enableAutoOutput);
  state=state.withProperty(TEProps.FLUID,tank.getTankFluid());
  return state;
}","@Override public IExtendedBlockState handleState(IExtendedBlockState state,TileEntity tileEntity){
  TileTank tank=((TileTank)tileEntity);
  if (tank == null) {
    return null;
  }
  state=state.withProperty(TEProps.CREATIVE,tank.isCreative);
  state=state.withProperty(TEProps.LEVEL,tank.getLevel());
  state=state.withProperty(TEProps.ACTIVE,tank.enableAutoOutput);
  state=state.withProperty(TEProps.FLUID,tank.getTankFluid());
  return state;
}"
59412,"public boolean extractItem(int slot,int amount,EnumFacing side){
  if (slot > inventory.length) {
    return false;
  }
  ItemStack stack=inventory[slot];
  if (stack != null) {
    amount=Math.min(amount,stack.getMaxStackSize() - stack.stackSize);
    stack=inventory[slot].copy();
  }
  int initialAmount=amount;
  TileEntity adjInv=BlockHelper.getAdjacentTileEntity(this,side);
  if (Utils.isAccessibleInput(adjInv,side)) {
    IItemHandler inv=adjInv.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,side.getOpposite());
    for (int i=0; i < inv.getSlots() && amount > 0; i++) {
      ItemStack queryStack=inv.extractItem(i,amount,true);
      if (queryStack == null) {
        continue;
      }
      if (stack == null) {
        if (isItemValidForSlot(slot,queryStack)) {
          int toExtract=Math.min(amount,queryStack.stackSize);
          stack=inv.extractItem(i,toExtract,false);
          amount-=toExtract;
        }
      }
 else       if (ItemHelper.itemsEqualWithMetadata(stack,queryStack,true)) {
        int toExtract=Math.min(stack.getMaxStackSize() - stack.stackSize,Math.min(amount,queryStack.stackSize));
        ItemStack extracted=inv.extractItem(slot,toExtract,false);
        toExtract=Math.min(toExtract,extracted == null ? 0 : extracted.stackSize);
        stack.stackSize+=toExtract;
        amount-=toExtract;
      }
    }
    if (initialAmount != amount) {
      inventory[slot]=stack;
      adjInv.markDirty();
      return true;
    }
  }
  return false;
}","public boolean extractItem(int slot,int amount,EnumFacing side){
  if (slot > inventory.length) {
    return false;
  }
  ItemStack stack=inventory[slot];
  if (stack != null) {
    amount=Math.min(amount,stack.getMaxStackSize() - stack.stackSize);
    stack=inventory[slot].copy();
  }
  int initialAmount=amount;
  TileEntity adjInv=BlockHelper.getAdjacentTileEntity(this,side);
  if (Utils.isAccessibleInput(adjInv,side)) {
    IItemHandler inv=adjInv.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY,side.getOpposite());
    for (int i=0; i < inv.getSlots() && amount > 0; i++) {
      ItemStack queryStack=inv.extractItem(i,amount,true);
      if (queryStack == null) {
        continue;
      }
      if (stack == null) {
        if (isItemValidForSlot(slot,queryStack)) {
          int toExtract=Math.min(amount,queryStack.stackSize);
          stack=inv.extractItem(i,toExtract,false);
          amount-=toExtract;
        }
      }
 else       if (ItemHelper.itemsEqualWithMetadata(stack,queryStack,true)) {
        int toExtract=Math.min(stack.getMaxStackSize() - stack.stackSize,Math.min(amount,queryStack.stackSize));
        ItemStack extracted=inv.extractItem(i,toExtract,false);
        toExtract=Math.min(toExtract,extracted == null ? 0 : extracted.stackSize);
        stack.stackSize+=toExtract;
        amount-=toExtract;
      }
    }
    if (initialAmount != amount) {
      inventory[slot]=stack;
      adjInv.markDirty();
      return true;
    }
  }
  return false;
}"
59413,"public static int getEnergyValue(ItemStack stack){
  if (stack == null) {
    return 0;
  }
  int energy=fuels.get(new ComparableItemStack(stack));
  return energy > 0 ? energy : GameRegistry.getFuelValue(stack) * CoreProps.RF_PER_MJ * 3 / 2;
}","public static int getEnergyValue(ItemStack stack){
  if (stack == null) {
    return 0;
  }
  if (stack.getItem().hasContainerItem(stack)) {
    return 0;
  }
  int energy=fuels.get(new ComparableItemStack(stack));
  return energy > 0 ? energy : TileEntityFurnace.getItemBurnTime(stack) * CoreProps.RF_PER_MJ;
}"
59414,"@Override protected void transferOutput(){
  transferHandler();
  if (!enableAutoOutput) {
    return;
  }
  int side;
  for (int i=outputTracker + 1; i <= outputTracker + 6; i++) {
    side=i % 6;
    if (sideCache[side] == 2 || sideCache[side] == 4) {
      if (transferItem(2,ITEM_TRANSFER[level],EnumFacing.VALUES[side])) {
        outputTracker=side;
        break;
      }
    }
  }
}","@Override protected void transferOutput(){
  if (!enableAutoOutput) {
    return;
  }
  int side;
  for (int i=outputTracker + 1; i <= outputTracker + 6; i++) {
    side=i % 6;
    if (sideCache[side] == 2 || sideCache[side] == 4) {
      if (transferItem(2,ITEM_TRANSFER[level],EnumFacing.VALUES[side])) {
        outputTracker=side;
        break;
      }
    }
  }
}"
59415,"private void updateHandler(){
  boolean curActive=isActive;
  if (isActive) {
    processTick();
    if (processRem <= 0) {
      if (processFinishHandler()) {
        transferOutput();
        transferInput();
      }
      energyStorage.modifyEnergyStored(-processRem);
      if (!redstoneControlOrDisable() || !canStartHandler()) {
        processOff();
      }
 else {
        processStartHandler();
      }
    }
  }
 else   if (redstoneControlOrDisable()) {
    if (timeCheck() && !canStartHandler()) {
      transferOutput();
      transferInput();
    }
    if (timeCheckEighth() && canStartHandler()) {
      processStartHandler();
      processTick();
      isActive=true;
    }
  }
  updateIfChanged(curActive);
  chargeEnergy();
}","private void updateHandler(){
  boolean curActive=isActive;
  if (isActive) {
    processTick();
    if (processRem <= 0) {
      if (processFinishHandler()) {
        transferHandler();
        transferOutput();
        transferInput();
      }
      energyStorage.modifyEnergyStored(-processRem);
      if (!redstoneControlOrDisable() || !canStartHandler()) {
        processOff();
      }
 else {
        processStartHandler();
      }
    }
  }
 else   if (redstoneControlOrDisable()) {
    if (timeCheck()) {
      transferOutput();
      transferInput();
    }
    if (timeCheckEighth() && canStartHandler()) {
      processStartHandler();
      processTick();
      isActive=true;
    }
  }
  updateIfChanged(curActive);
  chargeEnergy();
}"
59416,"private boolean fillHandler(){
  IFluidHandler handler=inventory[1].getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,null);
  int filled=tank.getFluid() == null ? 0 : handler.fill(new FluidStack(tank.getFluid(),Fluid.BUCKET_VOLUME),true);
  IFluidTankProperties[] tankProperties=handler.getTankProperties();
  if (filled > 0) {
    tank.drain(filled,true);
    if (tankProperties[0].getContents().amount >= tankProperties[0].getCapacity()) {
      return true;
    }
    return false;
  }
  return true;
}","private boolean fillHandler(){
  IFluidHandler handler=inventory[1].getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,null);
  int filled=tank.getFluid() == null ? 0 : handler.fill(new FluidStack(tank.getFluid(),Fluid.BUCKET_VOLUME),true);
  IFluidTankProperties[] tankProperties=handler.getTankProperties();
  if (tankProperties == null || tankProperties.length < 1) {
    return true;
  }
  if (filled > 0) {
    tank.drain(filled,true);
    if (tankProperties[0].getContents().amount >= tankProperties[0].getCapacity()) {
      return true;
    }
    return false;
  }
  return true;
}"
59417,"private boolean emptyHandler(){
  IFluidHandler handler=inventory[1].getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,null);
  FluidStack drainStack=handler.drain(Fluid.BUCKET_VOLUME,true);
  int drained=drainStack == null ? 0 : drainStack.amount;
  IFluidTankProperties[] tankProperties=handler.getTankProperties();
  if (drained > 0) {
    tank.fill(drainStack,true);
    if (tankProperties[0].getContents() == null) {
      return true;
    }
    return false;
  }
  return true;
}","private boolean emptyHandler(){
  IFluidHandler handler=inventory[1].getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,null);
  FluidStack drainStack=handler.drain(Fluid.BUCKET_VOLUME,true);
  int drained=drainStack == null ? 0 : drainStack.amount;
  IFluidTankProperties[] tankProperties=handler.getTankProperties();
  if (tankProperties == null || tankProperties.length < 1) {
    return true;
  }
  if (drained > 0) {
    tank.fill(drainStack,true);
    if (tankProperties[0].getContents() == null) {
      return true;
    }
    return false;
  }
  return true;
}"
59418,"public BlockTank(){
  super(Material.GLASS);
  setUnlocalizedName(""String_Node_Str"");
  setHardness(15.0F);
  setResistance(25.0F);
}","public BlockTank(){
  super(Material.GLASS);
  setUnlocalizedName(""String_Node_Str"");
  setHardness(15.0F);
  setResistance(25.0F);
  basicGui=false;
}"
59419,"@Override protected void updateElementInformation(){
  super.updateElementInformation();
  slotInput.setVisible(myTile.hasSide(1));
  slotOutput[0].setVisible(myTile.hasSide(4));
  slotOutput[1].setVisible(myTile.hasSide(2));
  slotTank.setVisible(!myTile.extractFlag && myTile.hasSide(1));
  slotTankRev[0].setVisible(myTile.extractFlag && myTile.hasSide(4));
  slotTankRev[1].setVisible(myTile.extractFlag && myTile.hasSide(3));
  progressBackgroundRev.setVisible(myTile.extractFlag);
  progressFluid.setFluid(myTile.getTankFluid());
  progressFluid.setSize(myTile.getEnergyStored(null) > 0 ? myTile.getScaledProgress(PROGRESS) : 0,16);
  if (!myTile.hasSide(4)) {
    slotOutput[1].slotRender=2;
    slotTankRev[1].slotRender=2;
  }
 else {
    slotOutput[1].slotRender=1;
    slotTankRev[1].slotRender=1;
  }
  if (myTile.extractFlag) {
    progressFluid.setPosition(112,19);
  }
 else {
    progressFluid.setPosition(112 + PROGRESS - myTile.getScaledProgress(PROGRESS),19);
  }
  progressOverlay.setVisible(!myTile.extractFlag);
  progressOverlay.setQuantity(myTile.getEnergyStored(null) > 0 ? myTile.getScaledProgress(PROGRESS) : 0);
  progressOverlayRev.setVisible(myTile.extractFlag);
  progressOverlayRev.setQuantity(myTile.getEnergyStored(null) > 0 ? myTile.getScaledProgress(PROGRESS) : 0);
  speed.setQuantity(myTile.getEnergyStored(null) > 0 ? myTile.getScaledSpeed(SPEED) : 0);
  if (myTile.extractFlag) {
    modeSel.setToolTip(""String_Node_Str"");
    modeSel.setSheetX(192);
    modeSel.setHoverX(192);
  }
 else {
    modeSel.setToolTip(""String_Node_Str"");
    modeSel.setSheetX(176);
    modeSel.setHoverX(176);
  }
}","@Override protected void updateElementInformation(){
  super.updateElementInformation();
  slotInput.setVisible(myTile.hasSide(1));
  slotOutput[0].setVisible(myTile.hasSide(4));
  slotOutput[1].setVisible(myTile.hasSide(2));
  slotTank.setVisible(!myTile.extractFlag && myTile.hasSide(1));
  slotTankRev[0].setVisible(myTile.extractFlag && myTile.hasSide(4));
  slotTankRev[1].setVisible(myTile.extractFlag && myTile.hasSide(3));
  progressBackgroundRev.setVisible(myTile.extractFlag);
  progressFluid.setFluid(myTile.getTankFluid());
  progressFluid.setSize(myTile.getEnergyStored(null) > 0 ? myTile.getScaledProgress(PROGRESS) : 0,16);
  if (!myTile.hasSide(4)) {
    slotOutput[1].slotRender=2;
    slotTankRev[1].slotRender=2;
  }
 else {
    slotOutput[1].slotRender=1;
    slotTankRev[1].slotRender=1;
  }
  if (myTile.extractFlag) {
    progressFluid.setPosition(112,19);
  }
 else {
    progressFluid.setPosition(112 + PROGRESS - myTile.getScaledProgress(PROGRESS),19);
  }
  progressOverlay.setVisible(!myTile.extractFlag);
  progressOverlay.setQuantity(myTile.getEnergyStored(null) > 0 ? myTile.getScaledProgress(PROGRESS) : 0);
  progressOverlayRev.setVisible(myTile.extractFlag);
  progressOverlayRev.setQuantity(myTile.getEnergyStored(null) > 0 ? myTile.getScaledProgress(PROGRESS) : 0);
  speed.setQuantity(myTile.getEnergyStored(null) > 0 ? myTile.getScaledSpeed(SPEED) : 0);
  if (myTile.isActive) {
    modeSel.setToolTip(""String_Node_Str"");
    modeSel.setDisabled();
  }
 else   if (myTile.extractFlag) {
    modeSel.setToolTip(""String_Node_Str"");
    modeSel.setSheetX(192);
    modeSel.setHoverX(192);
    modeSel.setActive();
  }
 else {
    modeSel.setToolTip(""String_Node_Str"");
    modeSel.setSheetX(176);
    modeSel.setHoverX(176);
    modeSel.setActive();
  }
}"
59420,"public static void initialize(IModRegistry registry){
  IJeiHelpers jeiHelpers=registry.getJeiHelpers();
  IGuiHelper guiHelper=jeiHelpers.getGuiHelper();
  registry.addRecipeHandlers(new DynamoFuelHandler());
  initSteamCategory(registry,guiHelper);
  initMagmaticCategory(registry,guiHelper);
  initCompressionCategory(registry,guiHelper);
  initReactantItemCategory(registry,guiHelper);
  initReactantFluidCategory(registry,guiHelper);
  initEnervation(registry,guiHelper);
  initNumismatic(registry,guiHelper);
  initCoolantCategory(registry,guiHelper);
}","public static void initialize(IModRegistry registry){
  IJeiHelpers jeiHelpers=registry.getJeiHelpers();
  IGuiHelper guiHelper=jeiHelpers.getGuiHelper();
  registry.addRecipeHandlers(new DynamoFuelHandler());
  initSteam(registry,guiHelper);
  initMagmatic(registry,guiHelper);
  initCompression(registry,guiHelper);
  initReactantFluid(registry,guiHelper);
  initReactantSolid(registry,guiHelper);
  initEnervation(registry,guiHelper);
  initNumismatic(registry,guiHelper);
  initCoolantCategory(registry,guiHelper);
}"
59421,"@Override @SideOnly(Side.CLIENT) public void registerModels(){
  final ModelResourceLocation location=new ModelResourceLocation(""String_Node_Str"",""String_Node_Str"");
  ModelLoader.setCustomMeshDefinition(this,new ItemMeshDefinition(){
    @Override public ModelResourceLocation getModelLocation(    ItemStack stack){
      return location;
    }
  }
);
  ModelRegistryHelper.register(location,new CCBakeryModel(""String_Node_Str""));
  BlockBakery.registerItemKeyGenerator(this,new IItemStackKeyGenerator(){
    @Override public String generateKey(    ItemStack stack){
      String fluid=""String_Node_Str"";
      if (stack.getTagCompound() != null) {
        fluid=""String_Node_Str"" + stack.getTagCompound().getString(""String_Node_Str"");
      }
      return BlockBakery.defaultItemKeyGenerator.generateKey(stack) + fluid;
    }
  }
);
}","@Override @SideOnly(Side.CLIENT) public void registerModels(){
  final ModelResourceLocation location=new ModelResourceLocation(""String_Node_Str"",""String_Node_Str"");
  ModelLoader.setCustomMeshDefinition(this,new ItemMeshDefinition(){
    @Override public ModelResourceLocation getModelLocation(    ItemStack stack){
      return location;
    }
  }
);
  ModelLoader.setCustomModelResourceLocation(this,0,location);
  ModelRegistryHelper.register(location,new CCBakeryModel(""String_Node_Str""));
  BlockBakery.registerItemKeyGenerator(this,new IItemStackKeyGenerator(){
    @Override public String generateKey(    ItemStack stack){
      String fluid=""String_Node_Str"";
      if (stack.getTagCompound() != null) {
        fluid=""String_Node_Str"" + stack.getTagCompound().getString(""String_Node_Str"");
      }
      return BlockBakery.defaultItemKeyGenerator.generateKey(stack) + fluid;
    }
  }
);
}"
59422,"@Override public ItemStack decrStackSize(int slot,int amount){
  updateClient=true;
  return super.decrStackSize(slot,amount);
}","@Override public ItemStack decrStackSize(int slot,int amount){
  ItemStack result=super.decrStackSize(slot,amount);
  updateClient=true;
  return result;
}"
59423,"@Override public void setInventorySlotContents(int slot,ItemStack stack){
  updateClient=true;
  super.setInventorySlotContents(slot,stack);
}","@Override public void setInventorySlotContents(int slot,ItemStack stack){
  super.setInventorySlotContents(slot,stack);
  updateClient=true;
}"
59424,"@Override public boolean canTakeStack(EntityPlayer player){
  return ServerHelper.isClientWorld(player.worldObj) ? myTile.createItemClient(false,inventory.getStackInSlot(getSlotIndex())) : myTile.createItem(false,inventory.getStackInSlot(getSlotIndex()));
}","@Override public boolean canTakeStack(EntityPlayer player){
  myContainer.onCraftMatrixChanged(null);
  return ServerHelper.isClientWorld(player.worldObj) ? myTile.createItemClient(false,inventory.getStackInSlot(getSlotIndex())) : myTile.createItem(false,inventory.getStackInSlot(getSlotIndex()));
}"
59425,"@Override public ItemStack getStack(){
  myTile.createItem(false,inventory.getStackInSlot(getSlotIndex()));
  return this.inventory.getStackInSlot(getSlotIndex());
}","@Override public ItemStack getStack(){
  return this.inventory.getStackInSlot(getSlotIndex());
}"
59426,"@Override public void onPickupFromSlot(EntityPlayer player,ItemStack stack){
  myTile.createItem(true,inventory.getStackInSlot(getSlotIndex()));
  FMLCommonHandler.instance().firePlayerCraftingEvent(player,stack,myContainer.craftMatrix);
  this.onCrafting(stack);
  super.onPickupFromSlot(player,stack);
}","@Override public void onPickupFromSlot(EntityPlayer player,ItemStack stack){
  myTile.createItem(true,stack);
  FMLCommonHandler.instance().firePlayerCraftingEvent(player,stack,myContainer.craftMatrix);
  this.onCrafting(stack);
  super.onPickupFromSlot(player,stack);
}"
59427,"@Override public <T>T getCapability(Capability<T> capability,EnumFacing facing){
  if (capability == CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
    if (this instanceof ISidedInventory) {
      return CapabilityItemHandler.ITEM_HANDLER_CAPABILITY.cast(new SidedInvWrapper(((ISidedInventory)this),facing));
    }
 else {
      return CapabilityItemHandler.ITEM_HANDLER_CAPABILITY.cast(new InvWrapper(this));
    }
  }
  return super.getCapability(capability,facing);
}","@Override public <T>T getCapability(Capability<T> capability,EnumFacing facing){
  if (capability == CapabilityItemHandler.ITEM_HANDLER_CAPABILITY) {
    if (this instanceof ISidedInventory && facing != null) {
      return CapabilityItemHandler.ITEM_HANDLER_CAPABILITY.cast(new SidedInvWrapper(((ISidedInventory)this),facing));
    }
 else {
      return CapabilityItemHandler.ITEM_HANDLER_CAPABILITY.cast(new InvWrapper(this));
    }
  }
  return super.getCapability(capability,facing);
}"
59428,"@Override @SideOnly(Side.CLIENT) public TextureAtlasSprite getTexture(EnumFacing side,IBlockState state,BlockRenderLayer layer,IBlockAccess access,BlockPos pos){
  TileEntity tileEntity=access.getTileEntity(pos);
  if (tileEntity instanceof TileMachineBase) {
    TileMachineBase machine=((TileMachineBase)tileEntity);
    if (layer == BlockRenderLayer.SOLID) {
      if (side == EnumFacing.DOWN) {
        return IconRegistry.getIcon(""String_Node_Str"");
      }
 else       if (side == EnumFacing.UP) {
        return IconRegistry.getIcon(""String_Node_Str"");
      }
      return side.ordinal() != machine.getFacing() ? IconRegistry.getIcon(""String_Node_Str"") : machine.isActive ? IconRegistry.getIcon(""String_Node_Str"",machine.type) : IconRegistry.getIcon(""String_Node_Str"",machine.type);
    }
 else     if (layer == BlockRenderLayer.CUTOUT) {
      return machine.getTexture(side.ordinal(),1);
    }
  }
  return TextureUtils.getMissingSprite();
}","@Override @SideOnly(Side.CLIENT) public TextureAtlasSprite getTexture(EnumFacing side,IBlockState state,BlockRenderLayer layer,IBlockAccess access,BlockPos pos){
  TileEntity tileEntity=access.getTileEntity(pos);
  if (tileEntity instanceof TileMachineBase) {
    TileMachineBase machine=((TileMachineBase)tileEntity);
    return machine.getTexture(side.ordinal(),layer == BlockRenderLayer.SOLID ? 0 : 1);
  }
  return TextureUtils.getMissingSprite();
}"
59429,"@Override public void preInit(){
  RenderStrongbox.registerRenderers();
  ModelLoaderRegistry.registerLoader(ModelFlorb.LoaderFlorb.INSTANCE);
  TEAugments.itemAugment.registerModelVariants();
  TEItems.itemMaterial.registerModelVariants();
  TEItems.itemCapacitor.registerModelVariants();
  registerToolModel(TEItems.itemBattleWrench,""String_Node_Str"");
  registerToolModel(TEItems.itemChiller,""String_Node_Str"");
  registerToolModel(TEItems.toolDebugger,""String_Node_Str"");
  registerToolModel(TEItems.itemIgniter,""String_Node_Str"");
  registerToolModel(TEItems.toolMultimeter,""String_Node_Str"");
  registerToolModel(TEItems.itemWrench,""String_Node_Str"");
  registerModedToolModel(TEItems.itemPump,""String_Node_Str"");
  registerModedToolModel(TEItems.itemTransfuser,""String_Node_Str"");
  final int accessCount=ISecurable.AccessMode.values().length;
  final ModelResourceLocation[] satchelLocations=new ModelResourceLocation[ItemSatchel.NAMES.length * accessCount];
  for (int meta=0; meta < ItemSatchel.NAMES.length; meta++) {
    for (int access=0; access < accessCount; access++) {
      satchelLocations[meta * accessCount + access]=getSatchelLocation(meta,ISecurable.AccessMode.values()[access]);
    }
  }
  ModelLoader.setCustomMeshDefinition(TEItems.itemSatchel,new ItemMeshDefinition(){
    @Override public ModelResourceLocation getModelLocation(    ItemStack stack){
      return satchelLocations[stack.getMetadata() * accessCount + SecurityHelper.getAccess(stack).ordinal()];
    }
  }
);
  ModelLoader.registerItemVariants(TEItems.itemSatchel,satchelLocations);
  ModelLoader.setCustomModelResourceLocation(TEFlorbs.itemFlorb,0,ModelFlorb.MODEL_LOCATION);
  ModelLoader.setCustomModelResourceLocation(TEFlorbs.itemFlorb,1,ModelFlorb.MAGMATIC_MODEL_LOCATION);
  ModelLoader.setCustomModelResourceLocation(TEItems.itemDiagram,0,getDiagramLocation(""String_Node_Str""));
  ModelRegistryHelper.register(getDiagramLocation(""String_Node_Str""),new SchematicBakedModel());
  ModelLoader.registerItemVariants(TEItems.itemDiagram,getDiagramLocation(""String_Node_Str""));
  ModelLoader.setCustomModelResourceLocation(TEItems.itemDiagram,1,getDiagramLocation(""String_Node_Str""));
  registerBlockBakeryStuff(TEBlocks.blockMachine,""String_Node_Str"",BlockMachine.TYPES);
  registerBlockBakeryStuff(TEBlocks.blockDevice,""String_Node_Str"",BlockDevice.TYPES);
  registerBlockBakeryStuff(TEBlocks.blockDynamo,""String_Node_Str"",BlockDynamo.TYPES,RenderDynamo.instance);
  registerBlockBakeryStuff(TEBlocks.blockCell,""String_Node_Str"",BlockCell.TYPES,RenderCell.instance);
  registerBlockBakeryStuff(TEBlocks.blockTank,""String_Node_Str"",BlockTank.TYPES,RenderTank.instance);
  registerBlockBakeryStuff(TEBlocks.blockCache,""String_Node_Str"",BlockCache.TYPES);
  registerBlockBakeryStuff(TEBlocks.blockTesseract,""String_Node_Str"",BlockEnder.TYPES,RenderTesseract.instance);
  registerBlockBakeryStuff(TEBlocks.blockPlate,""String_Node_Str"",BlockPlate.TYPES,RenderPlate.instance);
  registerBlockBakeryStuff(TEBlocks.blockLight,""String_Node_Str"",BlockLight.TYPES,RenderLight.instance);
  ModelLoader.setCustomMeshDefinition(Item.getItemFromBlock(TEBlocks.blockSponge),new ItemMeshDefinition(){
    @Override public ModelResourceLocation getModelLocation(    ItemStack stack){
      boolean soaked=stack.getTagCompound() != null && stack.getTagCompound().hasKey(""String_Node_Str"");
      return new ModelResourceLocation(""String_Node_Str"",""String_Node_Str"" + String.valueOf(soaked).toLowerCase() + ""String_Node_Str""+ BlockSponge.Types.values()[stack.getMetadata()].getName());
    }
  }
);
  for (int i=0; i < BlockSponge.NAMES.length; i++) {
    ModelLoader.registerItemVariants(Item.getItemFromBlock(TEBlocks.blockSponge),new ModelResourceLocation(""String_Node_Str"",""String_Node_Str"" + BlockSponge.NAMES[i]));
    ModelLoader.registerItemVariants(Item.getItemFromBlock(TEBlocks.blockSponge),new ModelResourceLocation(""String_Node_Str"",""String_Node_Str"" + BlockSponge.NAMES[i]));
  }
  BlockBakery.registerItemKeyGenerator(Item.getItemFromBlock(TEBlocks.blockLight),new IItemStackKeyGenerator(){
    @Override public String generateKey(    ItemStack stack){
      StringBuilder builder=new StringBuilder();
      builder.append(stack.getMetadata());
      builder.append(""String_Node_Str"");
      builder.append(stack.getItem().getRegistryName().toString());
      builder.append(""String_Node_Str"");
      if (stack.hasTagCompound()) {
        builder.append(stack.getTagCompound().getByte(""String_Node_Str""));
      }
      return builder.toString();
    }
  }
);
  registerBlockBakeryStuff(TEBlocks.blockFrame,""String_Node_Str"",BlockFrame.TYPES,RenderFrame.instance);
  for (  EnumType type : EnumType.values()) {
    ModelResourceLocation location=new ModelResourceLocation(TEBlocks.blockWorkbench.getRegistryName(),""String_Node_Str"" + type.getName().toLowerCase(Locale.US));
    ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(TEBlocks.blockWorkbench),type.ordinal(),location);
  }
  for (  BlockGlass.Types type : BlockGlass.Types.values()) {
    ModelResourceLocation location=new ModelResourceLocation(TEBlocks.blockGlass.getRegistryName(),""String_Node_Str"" + type.getName().toLowerCase(Locale.US));
    ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(TEBlocks.blockGlass),type.ordinal(),location);
  }
  for (  EnumDyeColor color : EnumDyeColor.values()) {
    ModelResourceLocation location=new ModelResourceLocation(TEBlocks.blockRockwool.getRegistryName(),""String_Node_Str"" + color.getName().toLowerCase(Locale.US));
    ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(TEBlocks.blockRockwool),color.ordinal(),location);
  }
  registerDummyModel(TEBlocks.blockStrongbox,BlockStrongbox.TYPES);
  ModelRegistryHelper.registerItemRenderer(Item.getItemFromBlock(TEBlocks.blockStrongbox),RenderStrongbox.instance);
  registerDummyModel(TEBlocks.blockAirBarrier);
  registerDummyModel(TEBlocks.blockAirForce,BlockAirForce.FACING);
  registerDummyModel(TEBlocks.blockAirLight);
  registerDummyModel(TEBlocks.blockAirSignal,BlockAirSignal.INTENSITY);
  RenderEntityFlorb.initialize();
}","@Override public void preInit(){
  RenderStrongbox.registerRenderers();
  ModelLoaderRegistry.registerLoader(ModelFlorb.LoaderFlorb.INSTANCE);
  TEAugments.itemAugment.registerModelVariants();
  TEItems.itemMaterial.registerModelVariants();
  TEItems.itemCapacitor.registerModelVariants();
  registerToolModel(TEItems.itemBattleWrench,""String_Node_Str"");
  registerToolModel(TEItems.itemChiller,""String_Node_Str"");
  registerToolModel(TEItems.toolDebugger,""String_Node_Str"");
  registerToolModel(TEItems.itemIgniter,""String_Node_Str"");
  registerToolModel(TEItems.toolMultimeter,""String_Node_Str"");
  registerToolModel(TEItems.itemWrench,""String_Node_Str"");
  registerModedToolModel(TEItems.itemPump,""String_Node_Str"");
  registerModedToolModel(TEItems.itemTransfuser,""String_Node_Str"");
  final int accessCount=ISecurable.AccessMode.values().length;
  final ModelResourceLocation[] satchelLocations=new ModelResourceLocation[ItemSatchel.NAMES.length * accessCount];
  for (int meta=0; meta < ItemSatchel.NAMES.length; meta++) {
    for (int access=0; access < accessCount; access++) {
      satchelLocations[meta * accessCount + access]=getSatchelLocation(meta,ISecurable.AccessMode.values()[access]);
    }
  }
  ModelLoader.setCustomMeshDefinition(TEItems.itemSatchel,new ItemMeshDefinition(){
    @Override public ModelResourceLocation getModelLocation(    ItemStack stack){
      return satchelLocations[stack.getMetadata() * accessCount + SecurityHelper.getAccess(stack).ordinal()];
    }
  }
);
  ModelLoader.registerItemVariants(TEItems.itemSatchel,satchelLocations);
  ModelLoader.setCustomModelResourceLocation(TEFlorbs.itemFlorb,0,ModelFlorb.MODEL_LOCATION);
  ModelLoader.setCustomModelResourceLocation(TEFlorbs.itemFlorb,1,ModelFlorb.MAGMATIC_MODEL_LOCATION);
  ModelLoader.setCustomModelResourceLocation(TEItems.itemDiagram,0,getDiagramLocation(""String_Node_Str""));
  ModelRegistryHelper.register(getDiagramLocation(""String_Node_Str""),new SchematicBakedModel());
  ModelLoader.registerItemVariants(TEItems.itemDiagram,getDiagramLocation(""String_Node_Str""));
  ModelLoader.setCustomModelResourceLocation(TEItems.itemDiagram,1,getDiagramLocation(""String_Node_Str""));
  registerBlockBakeryStuff(TEBlocks.blockMachine,""String_Node_Str"",BlockMachine.TYPES);
  registerBlockBakeryStuff(TEBlocks.blockDevice,""String_Node_Str"",BlockDevice.TYPES);
  registerBlockBakeryStuff(TEBlocks.blockDynamo,""String_Node_Str"",BlockDynamo.TYPES,RenderDynamo.instance);
  registerBlockBakeryStuff(TEBlocks.blockCell,""String_Node_Str"",BlockCell.TYPES,RenderCell.instance);
  registerBlockBakeryStuff(TEBlocks.blockTank,""String_Node_Str"",BlockTank.TYPES,RenderTank.instance);
  registerBlockBakeryStuff(TEBlocks.blockCache,""String_Node_Str"",BlockCache.TYPES);
  registerBlockBakeryStuff(TEBlocks.blockTesseract,""String_Node_Str"",BlockEnder.TYPES,RenderTesseract.instance);
  registerBlockBakeryStuff(TEBlocks.blockPlate,""String_Node_Str"",BlockPlate.TYPES,RenderPlate.instance);
  registerBlockBakeryStuff(TEBlocks.blockLight,""String_Node_Str"",BlockLight.TYPES,RenderLight.instance);
  ModelLoader.setCustomMeshDefinition(Item.getItemFromBlock(TEBlocks.blockSponge),new ItemMeshDefinition(){
    @Override public ModelResourceLocation getModelLocation(    ItemStack stack){
      boolean soaked=stack.getTagCompound() != null && stack.getTagCompound().hasKey(""String_Node_Str"");
      return new ModelResourceLocation(""String_Node_Str"",""String_Node_Str"" + String.valueOf(soaked).toLowerCase() + ""String_Node_Str""+ BlockSponge.Types.values()[stack.getMetadata()].getName());
    }
  }
);
  for (int i=0; i < BlockSponge.NAMES.length; i++) {
    ModelLoader.registerItemVariants(Item.getItemFromBlock(TEBlocks.blockSponge),new ModelResourceLocation(""String_Node_Str"",""String_Node_Str"" + BlockSponge.NAMES[i]));
    ModelLoader.registerItemVariants(Item.getItemFromBlock(TEBlocks.blockSponge),new ModelResourceLocation(""String_Node_Str"",""String_Node_Str"" + BlockSponge.NAMES[i]));
  }
  BlockBakery.registerItemKeyGenerator(Item.getItemFromBlock(TEBlocks.blockLight),new IItemStackKeyGenerator(){
    @Override public String generateKey(    ItemStack stack){
      StringBuilder builder=new StringBuilder();
      builder.append(stack.getMetadata());
      builder.append(""String_Node_Str"");
      builder.append(stack.getItem().getRegistryName().toString());
      builder.append(""String_Node_Str"");
      if (stack.hasTagCompound()) {
        builder.append(stack.getTagCompound().getByte(""String_Node_Str""));
      }
      return builder.toString();
    }
  }
);
  BlockBakery.registerItemKeyGenerator(Item.getItemFromBlock(TEBlocks.blockTank),new IItemStackKeyGenerator(){
    @Override public String generateKey(    ItemStack stack){
      StringBuilder builder=new StringBuilder();
      builder.append(stack.getMetadata());
      builder.append(""String_Node_Str"");
      builder.append(stack.getItem().getRegistryName().toString());
      builder.append(""String_Node_Str"");
      if (stack.hasTagCompound() && stack.getTagCompound().hasKey(""String_Node_Str"")) {
        FluidStack fluid=FluidStack.loadFluidStackFromNBT(stack.getTagCompound().getCompoundTag(""String_Node_Str""));
        int level=(int)Math.min(TileTank.RENDER_LEVELS - 1,(long)fluid.amount * TileTank.RENDER_LEVELS / TileTank.CAPACITY[stack.getMetadata()]);
        builder.append(fluid.getFluid().getName());
        builder.append(""String_Node_Str"");
        builder.append(level);
      }
      return builder.toString();
    }
  }
);
  registerBlockBakeryStuff(TEBlocks.blockFrame,""String_Node_Str"",BlockFrame.TYPES,RenderFrame.instance);
  for (  EnumType type : EnumType.values()) {
    ModelResourceLocation location=new ModelResourceLocation(TEBlocks.blockWorkbench.getRegistryName(),""String_Node_Str"" + type.getName().toLowerCase(Locale.US));
    ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(TEBlocks.blockWorkbench),type.ordinal(),location);
  }
  for (  BlockGlass.Types type : BlockGlass.Types.values()) {
    ModelResourceLocation location=new ModelResourceLocation(TEBlocks.blockGlass.getRegistryName(),""String_Node_Str"" + type.getName().toLowerCase(Locale.US));
    ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(TEBlocks.blockGlass),type.ordinal(),location);
  }
  for (  EnumDyeColor color : EnumDyeColor.values()) {
    ModelResourceLocation location=new ModelResourceLocation(TEBlocks.blockRockwool.getRegistryName(),""String_Node_Str"" + color.getName().toLowerCase(Locale.US));
    ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(TEBlocks.blockRockwool),color.ordinal(),location);
  }
  registerDummyModel(TEBlocks.blockStrongbox,BlockStrongbox.TYPES);
  ModelRegistryHelper.registerItemRenderer(Item.getItemFromBlock(TEBlocks.blockStrongbox),RenderStrongbox.instance);
  registerDummyModel(TEBlocks.blockAirBarrier);
  registerDummyModel(TEBlocks.blockAirForce,BlockAirForce.FACING);
  registerDummyModel(TEBlocks.blockAirLight);
  registerDummyModel(TEBlocks.blockAirSignal,BlockAirSignal.INTENSITY);
  RenderEntityFlorb.initialize();
}"
59430,"@Override public String generateKey(ItemStack stack){
  StringBuilder builder=new StringBuilder();
  builder.append(stack.getMetadata());
  builder.append(""String_Node_Str"");
  builder.append(stack.getItem().getRegistryName().toString());
  builder.append(""String_Node_Str"");
  if (stack.hasTagCompound()) {
    builder.append(stack.getTagCompound().getByte(""String_Node_Str""));
  }
  return builder.toString();
}","@Override public String generateKey(ItemStack stack){
  StringBuilder builder=new StringBuilder();
  builder.append(stack.getMetadata());
  builder.append(""String_Node_Str"");
  builder.append(stack.getItem().getRegistryName().toString());
  builder.append(""String_Node_Str"");
  if (stack.hasTagCompound() && stack.getTagCompound().hasKey(""String_Node_Str"")) {
    FluidStack fluid=FluidStack.loadFluidStackFromNBT(stack.getTagCompound().getCompoundTag(""String_Node_Str""));
    int level=(int)Math.min(TileTank.RENDER_LEVELS - 1,(long)fluid.amount * TileTank.RENDER_LEVELS / TileTank.CAPACITY[stack.getMetadata()]);
    builder.append(fluid.getFluid().getName());
    builder.append(""String_Node_Str"");
    builder.append(level);
  }
  return builder.toString();
}"
59431,"@Override public void onEntityCollidedWithBlock(Entity entity){
  if (destination == -1 || entity.worldObj.isRemote) {
    return;
  }
  if (!redstoneControlOrDisable()) {
    return;
  }
  if (entity.timeUntilPortal > TELEPORT_DELAY) {
    entity.timeUntilPortal=entity.getPortalCooldown() + TELEPORT_DELAY;
    return;
  }
  if (!RegistryEnderAttuned.getRegistry().hasDestination(this)) {
    if (destination != -1) {
      internalSet.set(Boolean.FALSE);
      clearDestination();
      internalSet.set(null);
    }
    return;
  }
  IEnderDestination dest=RegistryEnderAttuned.getRegistry().getDestination(this,true);
  if (dest == null) {
    return;
  }
  if (dest.isNotValid()) {
    ;
  }
  int teleportCost=TELEPORT_COST;
  if (dest.dimension() != dimension()) {
    teleportCost=DIMENSION_TELEPORT_COST;
  }
  if (entity instanceof EntityEnderman) {
    teleportCost*=2;
  }
 else   if (entity instanceof EntityItem) {
    teleportCost/=1000;
  }
  if (storage.getEnergyStored() < teleportCost) {
    return;
  }
  Class<? extends Entity> comp=Entity.class;
  if (playerOnly) {
    comp=EntityPlayer.class;
  }
  if (!comp.isInstance(entity)) {
    return;
  }
  l:   if (filterSecure && !getAccess().isPublic()) {
    o:     if (entity instanceof EntityItem) {
      String name=((EntityItem)entity).func_145800_j();
      if (name == null) {
        break o;
      }
      if (getAccess().isRestricted() && RegistrySocial.playerHasAccess(name,getOwner())) {
        break l;
      }
      GameProfile i=MinecraftServer.getServer().func_152358_ax().func_152655_a(name);
      if (getOwner().getId().equals(i.getId())) {
        break l;
      }
    }
 else     if (canPlayerAccess((EntityPlayer)entity)) {
      break l;
    }
    return;
  }
  if (entity instanceof EntityLivingBase) {
    if (entity.timeUntilPortal++ <= TELEPORT_DELAY) {
      if (!(entity instanceof EntityPlayerMP)) {
        entity.timeUntilPortal++;
      }
      World world=entity.worldObj;
      int i=entity.timeUntilPortal >= TELEPORT_DELAY ? 100 : 99;
      double x=entity.posX, z=entity.posZ, y=entity.posY;
      y+=entity.height * .75;
      int amt=entity.timeUntilPortal * 5 / PARTICLE_DELAY;
      l:       if (i == 100 || amt != ((entity.timeUntilPortal - 2) * 5 / PARTICLE_DELAY)) {
        if (i != 100 && entity.timeUntilPortal > PARTICLE_DELAY) {
          break l;
        }
        PacketCoFHBase packet=getModePacket();
        packet.addByte(i);
        if (i == 99) {
          packet.addInt(amt);
        }
        packet.addFloat((float)x);
        packet.addFloat((float)y);
        packet.addFloat((float)z);
        if (i == 100) {
          packet.addInt(entity.getEntityId());
          packet.addInt(dest.x());
          packet.addInt(dest.y());
          packet.addInt(dest.z());
          packet.addInt(dest.dimension());
        }
        TargetPoint targ=new TargetPoint(world.provider.dimensionId,xCoord,yCoord,zCoord,50);
        PacketHandler.sendToAllAround(packet,targ);
      }
      if (i == 99) {
        return;
      }
    }
    entity.timeUntilPortal=entity.getPortalCooldown() + TELEPORT_DELAY;
  }
  if (storage.extractEnergy(teleportCost,false) == teleportCost) {
    if (dest.dimension() != dimension()) {
      EntityHelper.transferEntityToDimension(entity,dest.dimension(),MinecraftServer.getServer().getConfigurationManager());
    }
    teleportEntity(entity,dest.x() + .5,dest.y() + .2,dest.z() + .5);
  }
}","@Override public void onEntityCollidedWithBlock(Entity entity){
  if (destination == -1 || entity.worldObj.isRemote) {
    return;
  }
  if (!redstoneControlOrDisable()) {
    return;
  }
  if (entity.timeUntilPortal > TELEPORT_DELAY) {
    entity.timeUntilPortal=entity.getPortalCooldown() + TELEPORT_DELAY + 5;
    return;
  }
  if (!RegistryEnderAttuned.getRegistry().hasDestination(this)) {
    if (destination != -1) {
      internalSet.set(Boolean.FALSE);
      clearDestination();
      internalSet.set(null);
    }
    return;
  }
  IEnderDestination dest=RegistryEnderAttuned.getRegistry().getDestination(this,true);
  if (dest == null) {
    return;
  }
  if (dest.isNotValid()) {
    ;
  }
  int teleportCost=TELEPORT_COST;
  if (dest.dimension() != dimension()) {
    teleportCost=DIMENSION_TELEPORT_COST;
  }
  if (entity instanceof EntityEnderman) {
    teleportCost*=2;
  }
 else   if (entity instanceof EntityItem) {
    teleportCost/=1000;
  }
  if (storage.getEnergyStored() < teleportCost) {
    return;
  }
  Class<? extends Entity> comp=Entity.class;
  if (playerOnly) {
    comp=EntityPlayer.class;
  }
  if (!comp.isInstance(entity)) {
    return;
  }
  l:   if (filterSecure && !getAccess().isPublic()) {
    o:     if (entity instanceof EntityItem) {
      String name=((EntityItem)entity).func_145800_j();
      if (name == null) {
        break o;
      }
      if (getAccess().isRestricted() && RegistrySocial.playerHasAccess(name,getOwner())) {
        break l;
      }
      GameProfile i=MinecraftServer.getServer().func_152358_ax().func_152655_a(name);
      if (getOwner().getId().equals(i.getId())) {
        break l;
      }
    }
 else     if (canPlayerAccess((EntityPlayer)entity)) {
      break l;
    }
    return;
  }
  if (entity instanceof EntityLivingBase) {
    if (entity.timeUntilPortal <= TELEPORT_DELAY) {
      if (entity.timeUntilPortal < TELEPORT_DELAY) {
        entity.timeUntilPortal++;
        if (!(entity instanceof EntityPlayerMP)) {
          entity.timeUntilPortal++;
        }
      }
      World world=entity.worldObj;
      int i=entity.timeUntilPortal >= TELEPORT_DELAY ? 100 : 99;
      double x=entity.posX, z=entity.posZ, y=entity.posY;
      y+=entity.height * .75;
      int amt=entity.timeUntilPortal * 5 / PARTICLE_DELAY;
      l:       if (i == 100 || amt != ((entity.timeUntilPortal - 2) * 5 / PARTICLE_DELAY)) {
        if (i != 100 && entity.timeUntilPortal > PARTICLE_DELAY) {
          break l;
        }
        PacketCoFHBase packet=getModePacket();
        packet.addByte(i);
        if (i == 99) {
          packet.addInt(amt);
        }
        packet.addFloat((float)x);
        packet.addFloat((float)y);
        packet.addFloat((float)z);
        if (i == 100) {
          packet.addInt(entity.getEntityId());
          packet.addInt(dest.x());
          packet.addInt(dest.y());
          packet.addInt(dest.z());
          packet.addInt(dest.dimension());
        }
        TargetPoint targ=new TargetPoint(world.provider.dimensionId,xCoord,yCoord,zCoord,50);
        PacketHandler.sendToAllAround(packet,targ);
      }
      if (i == 99) {
        return;
      }
    }
  }
  if (storage.extractEnergy(teleportCost,false) == teleportCost) {
    entity.timeUntilPortal=entity.getPortalCooldown() + TELEPORT_DELAY + 5;
    double x=dest.x() + .5, y=dest.y() + .2, z=dest.z() + .5;
    if (dest.dimension() != dimension()) {
      EntityHelper.transferEntityToDimension(entity,x,y,z,dest.dimension(),MinecraftServer.getServer().getConfigurationManager());
    }
 else {
      teleportEntity(entity,x,y,z);
    }
  }
}"
59432,"@Override public ArrayList<ItemStack> dismantleBlock(EntityPlayer player,World world,int x,int y,int z,boolean returnDrops){
  TileTesseract tile=(TileTesseract)world.getTileEntity(x,y,z);
  if (ServerHelper.isServerWorld(world) && tile != null) {
    tile.removeFromRegistry();
    tile.inventory=new ItemStack[0];
  }
  return super.dismantleBlock(player,getItemStackTag(world,x,y,z),world,x,y,z,returnDrops,false);
}","@Override public ArrayList<ItemStack> dismantleBlock(EntityPlayer player,World world,int x,int y,int z,boolean returnDrops){
  TileTesseract tile=(TileTesseract)world.getTileEntity(x,y,z);
  if (tile != null) {
    tile.removeFromRegistry();
    tile.inventory=new ItemStack[0];
  }
  return super.dismantleBlock(player,getItemStackTag(world,x,y,z),world,x,y,z,returnDrops,false);
}"
59433,"public void addToRegistry(){
  RegistryEnderAttuned.getRegistry().add(this);
}","public void addToRegistry(){
  if (ServerHelper.isServerWorld(worldObj)) {
    RegistryEnderAttuned.getRegistry().add(this);
  }
}"
59434,"@Override public void onChunkUnload(){
  if (ServerHelper.isServerWorld(worldObj)) {
    removeFromRegistry();
  }
}","@Override public void onChunkUnload(){
  removeFromRegistry();
}"
59435,"@Override public void blockBroken(){
  if (ServerHelper.isServerWorld(worldObj)) {
    removeFromRegistry();
  }
}","@Override public void blockBroken(){
  removeFromRegistry();
}"
59436,"@Override public void validate(){
  super.validate();
  if (ServerHelper.isServerWorld(worldObj) && frequency != -1) {
    addToRegistry();
  }
}","@Override public void validate(){
  super.validate();
  if (frequency != -1) {
    addToRegistry();
  }
}"
59437,"public void removeFromRegistry(){
  RegistryEnderAttuned.getRegistry().remove(this);
}","public void removeFromRegistry(){
  if (ServerHelper.isServerWorld(worldObj)) {
    RegistryEnderAttuned.getRegistry().remove(this);
  }
}"
59438,"@Override public void onEntityCollidedWithBlock(Entity entity){
  if (!isActive || destination == -1 || entity.worldObj.isRemote) {
    return;
  }
  if (entity.timeUntilPortal > TELEPORT_DELAY) {
    entity.timeUntilPortal=entity.getPortalCooldown() + TELEPORT_DELAY;
    return;
  }
  if (!RegistryEnderAttuned.getRegistry().hasDestination(this)) {
    if (destination != -1) {
      internalSet.set(Boolean.FALSE);
      clearDestination();
      internalSet.set(null);
    }
    return;
  }
  IEnderDestination dest=RegistryEnderAttuned.getRegistry().getDestination(this,true);
  if (dest == null) {
    return;
  }
  int teleportCost=TELEPORT_COST;
  if (dest.dimension() != dimension()) {
    teleportCost=DIMENSION_TELEPORT_COST;
  }
  if (entity instanceof EntityEnderman) {
    teleportCost*=2;
  }
  if (storage.getEnergyStored() < teleportCost) {
    return;
  }
  Class<? extends Entity> comp=Entity.class;
  if (!getAccess().isPublic()) {
    comp=EntityPlayer.class;
  }
  if (!comp.isInstance(entity)) {
    return;
  }
  l:   if (!getAccess().isPublic()) {
    o:     if (entity instanceof EntityItem) {
      String name=((EntityItem)entity).func_145800_j();
      if (name == null) {
        break o;
      }
      if (getAccess().isRestricted() && SocialRegistry.playerHasAccess(name,getOwner())) {
        break l;
      }
      GameProfile i=MinecraftServer.getServer().func_152358_ax().func_152655_a(name);
      if (getOwner().getId().equals(i.getId())) {
        break l;
      }
    }
 else     if (canPlayerAccess((EntityPlayer)entity)) {
      break l;
    }
    return;
  }
  if (entity instanceof EntityLivingBase) {
    if (entity.timeUntilPortal++ <= TELEPORT_DELAY) {
      if (!(entity instanceof EntityPlayerMP)) {
        entity.timeUntilPortal++;
      }
      World world=entity.worldObj;
      int i=entity.timeUntilPortal >= TELEPORT_DELAY ? 100 : 99;
      double x=entity.posX, z=entity.posZ, y=entity.posY;
      y+=entity.height * .75;
      int amt=entity.timeUntilPortal * 5 / PARTICLE_DELAY;
      l:       if (i == 100 || amt != ((entity.timeUntilPortal - 2) * 5 / PARTICLE_DELAY)) {
        if (i != 100 && entity.timeUntilPortal > PARTICLE_DELAY) {
          break l;
        }
        PacketCoFHBase packet=getModePacket();
        packet.addByte(i);
        if (i == 99) {
          packet.addInt(amt);
        }
        packet.addFloat((float)x);
        packet.addFloat((float)y);
        packet.addFloat((float)z);
        if (i == 100) {
          packet.addInt(entity.getEntityId());
          packet.addInt(dest.x());
          packet.addInt(dest.y());
          packet.addInt(dest.z());
          packet.addInt(dest.dimension());
        }
        TargetPoint targ=new TargetPoint(world.provider.dimensionId,xCoord,yCoord,zCoord,50);
        PacketHandler.sendToAllAround(packet,targ);
      }
      if (i == 99) {
        return;
      }
    }
    entity.timeUntilPortal=entity.getPortalCooldown() + TELEPORT_DELAY;
  }
  if (storage.extractEnergy(teleportCost,false) == teleportCost) {
    if (dest.dimension() != dimension()) {
      EntityHelper.transferEntityToDimension(entity,dest.dimension(),MinecraftServer.getServer().getConfigurationManager());
    }
    teleportEntity(entity,dest.x() + .5,dest.y() + .2,dest.z() + .5);
  }
}","@Override public void onEntityCollidedWithBlock(Entity entity){
  if (destination == -1 || entity.worldObj.isRemote) {
    return;
  }
  if (entity.timeUntilPortal > TELEPORT_DELAY) {
    entity.timeUntilPortal=entity.getPortalCooldown() + TELEPORT_DELAY;
    return;
  }
  if (!RegistryEnderAttuned.getRegistry().hasDestination(this)) {
    if (destination != -1) {
      internalSet.set(Boolean.FALSE);
      clearDestination();
      internalSet.set(null);
    }
    return;
  }
  IEnderDestination dest=RegistryEnderAttuned.getRegistry().getDestination(this,true);
  if (dest == null) {
    return;
  }
  if (dest.isNotValid()) {
    ;
  }
  int teleportCost=TELEPORT_COST;
  if (dest.dimension() != dimension()) {
    teleportCost=DIMENSION_TELEPORT_COST;
  }
  if (entity instanceof EntityEnderman) {
    teleportCost*=2;
  }
  if (storage.getEnergyStored() < teleportCost) {
    return;
  }
  Class<? extends Entity> comp=Entity.class;
  if (!getAccess().isPublic()) {
    comp=EntityPlayer.class;
  }
  if (!comp.isInstance(entity)) {
    return;
  }
  l:   if (!getAccess().isPublic()) {
    o:     if (entity instanceof EntityItem) {
      String name=((EntityItem)entity).func_145800_j();
      if (name == null) {
        break o;
      }
      if (getAccess().isRestricted() && SocialRegistry.playerHasAccess(name,getOwner())) {
        break l;
      }
      GameProfile i=MinecraftServer.getServer().func_152358_ax().func_152655_a(name);
      if (getOwner().getId().equals(i.getId())) {
        break l;
      }
    }
 else     if (canPlayerAccess((EntityPlayer)entity)) {
      break l;
    }
    return;
  }
  if (entity instanceof EntityLivingBase) {
    if (entity.timeUntilPortal++ <= TELEPORT_DELAY) {
      if (!(entity instanceof EntityPlayerMP)) {
        entity.timeUntilPortal++;
      }
      World world=entity.worldObj;
      int i=entity.timeUntilPortal >= TELEPORT_DELAY ? 100 : 99;
      double x=entity.posX, z=entity.posZ, y=entity.posY;
      y+=entity.height * .75;
      int amt=entity.timeUntilPortal * 5 / PARTICLE_DELAY;
      l:       if (i == 100 || amt != ((entity.timeUntilPortal - 2) * 5 / PARTICLE_DELAY)) {
        if (i != 100 && entity.timeUntilPortal > PARTICLE_DELAY) {
          break l;
        }
        PacketCoFHBase packet=getModePacket();
        packet.addByte(i);
        if (i == 99) {
          packet.addInt(amt);
        }
        packet.addFloat((float)x);
        packet.addFloat((float)y);
        packet.addFloat((float)z);
        if (i == 100) {
          packet.addInt(entity.getEntityId());
          packet.addInt(dest.x());
          packet.addInt(dest.y());
          packet.addInt(dest.z());
          packet.addInt(dest.dimension());
        }
        TargetPoint targ=new TargetPoint(world.provider.dimensionId,xCoord,yCoord,zCoord,50);
        PacketHandler.sendToAllAround(packet,targ);
      }
      if (i == 99) {
        return;
      }
    }
    entity.timeUntilPortal=entity.getPortalCooldown() + TELEPORT_DELAY;
  }
  if (storage.extractEnergy(teleportCost,false) == teleportCost) {
    if (dest.dimension() != dimension()) {
      EntityHelper.transferEntityToDimension(entity,dest.dimension(),MinecraftServer.getServer().getConfigurationManager());
    }
    teleportEntity(entity,dest.x() + .5,dest.y() + .2,dest.z() + .5);
  }
}"
59439,"@Override public ContainerTEBase getGuiServer(InventoryPlayer inventory){
  return new ContainerTEBase(inventory,this);
}","@Override public ContainerTEBase getGuiServer(InventoryPlayer inventory){
  return new ContainerTEBase(inventory,this,false,false);
}"
59440,"public void addEntry(int theFreq,String freqName){
  if (ServerHelper.isClientWorld(worldObj)) {
    PacketHandler.sendToServer(PacketTileInfo.newPacket(this).addByte(PacketInfoID.ALTER_NAME_LIST.ordinal()).addBool(false).addString(getChannelString()).addString(String.valueOf(theFreq)).addString(freqName));
  }
}","public void addEntry(int theFreq,String freqName){
  if (ServerHelper.isClientWorld(worldObj)) {
    PacketHandler.sendToServer(PacketTileInfo.newPacket(this).addByte(PacketInfoID.ALTER_NAME_LIST.ordinal()).addBool(false).addString(getChannelString()).addInt(theFreq).addString(freqName));
  }
}"
59441,"public void removeEntry(int theFreq,String freqName){
  if (ServerHelper.isClientWorld(worldObj)) {
    PacketHandler.sendToServer(PacketTileInfo.newPacket(this).addByte(PacketInfoID.ALTER_NAME_LIST.ordinal()).addBool(true).addString(getChannelString()).addString(String.valueOf(theFreq)).addString(freqName));
  }
}","public void removeEntry(int theFreq,String freqName){
  if (ServerHelper.isClientWorld(worldObj)) {
    PacketHandler.sendToServer(PacketTileInfo.newPacket(this).addByte(PacketInfoID.ALTER_NAME_LIST.ordinal()).addBool(true).addString(getChannelString()).addInt(theFreq).addString(freqName));
  }
}"
59442,"@Override protected void updateElementInformation(){
  IEnderChannelRegistry data=RegistryEnderAttuned.getChannels(false);
  if (updated != data.updated()) {
    updated=data.updated();
    requested=false;
    IListBoxElement ele=frequencies.getSelectedElement();
    int sel=ele != null ? ((Frequency)ele.getValue()).freq : -1;
    int pos=slider.getSliderY();
    frequencies.removeAll();
    frequencies.setSelectedIndex(-1);
    for (    Frequency freq : data.getFrequencyList(null)) {
      frequencies.add(new ListBoxElementEnderText(freq));
      if (freq.freq == sel) {
        frequencies.setSelectedIndex(frequencies.getElementCount() - 1);
        this.freq.setText(String.valueOf(freq.freq));
        this.name.setText(freq.name);
      }
    }
    slider.setLimits(0,frequencies.getLastScrollPosition());
    slider.setValue(pos);
  }
 else   if (!requested && tileAccess != myTile.getAccess()) {
    requested=true;
    tileAccess=myTile.getAccess();
    RegistryEnderAttuned.requestChannelList(myTile.getChannelString());
  }
  boolean hasFreq=freq.getContentLength() > 0, hasName=name.getContentLength() > 0;
  assign.setEnabled(hasFreq && !String.valueOf(myTile.getFrequency()).equals(freq.getText()));
  clear.setEnabled(myTile.getFrequency() != -1);
  add.setEnabled(hasName && hasFreq && !name.getText().equals(RegistryEnderAttuned.getChannels(false).getFrequency(null,Integer.parseInt(freq.getText()))));
  remove.setEnabled(hasFreq && hasName && name.getText().equals(RegistryEnderAttuned.getChannels(false).getFrequency(null,Integer.parseInt(freq.getText()))));
}","@Override protected void updateElementInformation(){
  IEnderChannelRegistry data=RegistryEnderAttuned.getChannels(false);
  if (updated != data.updated()) {
    updated=data.updated();
    requested=false;
    IListBoxElement ele=frequencies.getSelectedElement();
    int sel=ele != null ? ((Frequency)ele.getValue()).freq : -1;
    int pos=slider.getSliderY();
    frequencies.removeAll();
    frequencies.setSelectedIndex(-1);
    for (    Frequency freq : data.getFrequencyList(null)) {
      frequencies.add(new ListBoxElementEnderText(freq));
      if (freq.freq == sel && String.valueOf(sel).equals(this.freq.getText())) {
        frequencies.setSelectedIndex(frequencies.getElementCount() - 1);
        this.freq.setText(String.valueOf(freq.freq));
        this.name.setText(freq.name);
      }
    }
    slider.setLimits(0,frequencies.getLastScrollPosition());
    slider.setValue(pos);
  }
 else   if (!requested && tileAccess != myTile.getAccess()) {
    requested=true;
    tileAccess=myTile.getAccess();
    RegistryEnderAttuned.requestChannelList(myTile.getChannelString());
  }
  boolean hasFreq=freq.getContentLength() > 0, hasName=name.getContentLength() > 0;
  assign.setEnabled(hasFreq && !String.valueOf(myTile.getFrequency()).equals(freq.getText()));
  clear.setEnabled(myTile.getFrequency() != -1);
  add.setEnabled(hasName && hasFreq && !name.getText().equals(RegistryEnderAttuned.getChannels(false).getFrequency(null,Integer.parseInt(freq.getText()))));
  remove.setEnabled(hasFreq && hasName && name.getText().equals(RegistryEnderAttuned.getChannels(false).getFrequency(null,Integer.parseInt(freq.getText()))));
}"
59443,"@Override public void initGui(){
  super.initGui();
  Keyboard.enableRepeatEvents(true);
  tileAccess=myTile.getAccess();
  RegistryEnderAttuned.requestChannelList(myTile.getChannelString());
  addTab(new TabRedstone(this,myTile));
  addTab(new TabConfigTesseract(this,myTile));
  generateInfo(""String_Node_Str"",2);
  addTab(new TabInfo(this,myInfo));
  addTab(new TabTutorial(this,StringHelper.tutorialTabRedstone() + ""String_Node_Str"" + StringHelper.tutorialTabConfigurationOperation()));
  if (myTile.enableSecurity() && myTile.isSecured()) {
    addTab(new TabSecurity(this,myTile,playerName));
  }
  addElement(freq=new ElementTextFieldLimited(this,102,27,26,11,(short)3).setFilter(""String_Node_Str"",false).setBackgroundColor(0,0,0).setText(String.valueOf(myTile.getFrequency())));
  addElement(name=new ElementTextField(this,8,42,108,11,(short)15).setBackgroundColor(0,0,0));
  addElement(assign=new ElementButton(this,131,18,20,20,208,192,208,212,176,40,TEX_PATH){
    @Override public void onClick(){
      int tempFreq=Integer.parseInt(freq.getText());
      myTile.setTileInfo(tempFreq);
    }
  }
.setToolTip(""String_Node_Str""));
  addElement(clear=new ElementButton(this,151,18,20,20,228,192,228,212,196,40,TEX_PATH){
    @Override public void onClick(){
      myTile.setTileInfo(-1);
    }
  }
.setToolTip(""String_Node_Str""));
  addElement(add=new ElementButton(this,139,40,16,16,208,128,208,144,176,92,TEX_PATH){
    @Override public void onClick(){
      int tempFreq=Integer.parseInt(freq.getText());
      RegistryEnderAttuned.getChannels(false).setFrequency(myTile.getChannelString(),tempFreq,GuiTesseract.this.name.getText());
      myTile.addEntry(tempFreq,GuiTesseract.this.name.getText());
    }
  }
.setToolTip(""String_Node_Str""));
  addElement(remove=new ElementButton(this,155,40,16,16,224,128,224,144,192,92,TEX_PATH){
    @Override public void onClick(){
      int tempFreq=Integer.parseInt(freq.getText());
      RegistryEnderAttuned.getChannels(false).removeFrequency(myTile.getChannelString(),tempFreq);
      myTile.removeEntry(tempFreq,GuiTesseract.this.name.getText());
    }
  }
.setToolTip(""String_Node_Str""));
  addElement(frequencies=new ElementListBox(this,7,57,130,104){
    @Override protected void onElementClicked(    IListBoxElement element){
      Frequency freq=(Frequency)element.getValue();
      GuiTesseract.this.name.setText(freq.name);
      GuiTesseract.this.freq.setText(String.valueOf(freq.freq));
    }
    @Override protected void onScrollV(    int newStartIndex){
      slider.setValue(newStartIndex);
    }
    @Override protected int drawElement(    int elementIndex,    int x,    int y){
      IListBoxElement element=_elements.get(elementIndex);
      if (((Frequency)element.getValue()).freq == myTile.getFrequency()) {
        element.draw(this,x,y,1,selectedTextColor);
      }
 else       if (elementIndex == _selectedIndex) {
        element.draw(this,x,y,selectedLineColor,selectedTextColor);
      }
 else {
        element.draw(this,x,y,backgroundColor,textColor);
      }
      return element.getHeight();
    }
  }
.setBackgroundColor(0,0));
  frequencies.setSelectedIndex(-1);
  IEnderChannelRegistry data=RegistryEnderAttuned.getChannels(false);
  updated=data.updated();
  for (  Frequency freq : data.getFrequencyList(null)) {
    frequencies.add(new ListBoxElementEnderText(freq));
    if (freq.freq == myTile.getFrequency()) {
      frequencies.setSelectedIndex(frequencies.getElementCount() - 1);
      this.name.setText(freq.name);
    }
  }
  addElement(slider=new SliderVertical(this,137,58,14,102,frequencies.getLastScrollPosition()){
    @Override public void onValueChanged(    int value){
      frequencies.scrollToV(value);
    }
  }
.setColor(0,0));
}","@Override public void initGui(){
  super.initGui();
  Keyboard.enableRepeatEvents(true);
  tileAccess=myTile.getAccess();
  RegistryEnderAttuned.requestChannelList(myTile.getChannelString());
  addTab(new TabRedstone(this,myTile));
  addTab(new TabConfigTesseract(this,myTile));
  generateInfo(""String_Node_Str"",2);
  addTab(new TabInfo(this,myInfo));
  addTab(new TabTutorial(this,StringHelper.tutorialTabRedstone() + ""String_Node_Str"" + StringHelper.tutorialTabConfigurationOperation()));
  if (myTile.enableSecurity() && myTile.isSecured()) {
    addTab(new TabSecurity(this,myTile,playerName));
  }
  int tempFreq=myTile.getFrequency();
  addElement(freq=new ElementTextFieldLimited(this,102,27,26,11,(short)3).setFilter(""String_Node_Str"",false).setBackgroundColor(0,0,0).setText(tempFreq >= 0 ? String.valueOf(tempFreq) : ""String_Node_Str""));
  addElement(name=new ElementTextField(this,8,42,128,11,(short)30).setBackgroundColor(0,0,0));
  addElement(assign=new ElementButton(this,131,18,20,20,208,192,208,212,176,40,TEX_PATH){
    @Override public void onClick(){
      int tempFreq=Integer.parseInt(freq.getText());
      myTile.setTileInfo(tempFreq);
    }
  }
.setToolTip(""String_Node_Str""));
  addElement(clear=new ElementButton(this,151,18,20,20,228,192,228,212,196,40,TEX_PATH){
    @Override public void onClick(){
      myTile.setTileInfo(-1);
    }
  }
.setToolTip(""String_Node_Str""));
  addElement(add=new ElementButton(this,139,40,16,16,208,128,208,144,176,92,TEX_PATH){
    @Override public void onClick(){
      int tempFreq=Integer.parseInt(freq.getText());
      RegistryEnderAttuned.getChannels(false).setFrequency(myTile.getChannelString(),tempFreq,GuiTesseract.this.name.getText());
      myTile.addEntry(tempFreq,GuiTesseract.this.name.getText());
    }
  }
.setToolTip(""String_Node_Str""));
  addElement(remove=new ElementButton(this,155,40,16,16,224,128,224,144,192,92,TEX_PATH){
    @Override public void onClick(){
      int tempFreq=Integer.parseInt(freq.getText());
      RegistryEnderAttuned.getChannels(false).removeFrequency(myTile.getChannelString(),tempFreq);
      myTile.removeEntry(tempFreq,GuiTesseract.this.name.getText());
    }
  }
.setToolTip(""String_Node_Str""));
  addElement(frequencies=new ElementListBox(this,7,57,130,104){
    @Override protected void onElementClicked(    IListBoxElement element){
      Frequency freq=(Frequency)element.getValue();
      GuiTesseract.this.name.setText(freq.name);
      GuiTesseract.this.freq.setText(String.valueOf(freq.freq));
    }
    @Override protected void onScrollV(    int newStartIndex){
      slider.setValue(newStartIndex);
    }
    @Override protected int drawElement(    int elementIndex,    int x,    int y){
      IListBoxElement element=_elements.get(elementIndex);
      if (((Frequency)element.getValue()).freq == myTile.getFrequency()) {
        element.draw(this,x,y,1,selectedTextColor);
      }
 else       if (elementIndex == _selectedIndex) {
        element.draw(this,x,y,selectedLineColor,selectedTextColor);
      }
 else {
        element.draw(this,x,y,backgroundColor,textColor);
      }
      return element.getHeight();
    }
  }
.setBackgroundColor(0,0));
  frequencies.setSelectedIndex(-1);
  IEnderChannelRegistry data=RegistryEnderAttuned.getChannels(false);
  updated=data.updated();
  for (  Frequency freq : data.getFrequencyList(null)) {
    frequencies.add(new ListBoxElementEnderText(freq));
    if (freq.freq == myTile.getFrequency()) {
      frequencies.setSelectedIndex(frequencies.getElementCount() - 1);
      this.name.setText(freq.name);
    }
  }
  addElement(slider=new SliderVertical(this,137,58,14,102,frequencies.getLastScrollPosition()){
    @Override public void onValueChanged(    int value){
      frequencies.scrollToV(value);
    }
  }
.setColor(0,0));
}"
59444,"@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setInteger(""String_Node_Str"",intensity);
  nbt.setInteger(""String_Node_Str"",angle);
}","@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setInteger(""String_Node_Str"",intensity);
  nbt.setInteger(""String_Node_Str"",angle);
  updateForce();
}"
59445,"public GuiAugmentableBase(Container container,TileEntity tile,EntityPlayer player,ResourceLocation texture){
  super(container,texture);
  myTile=(TileAugmentable)tile;
  name=myTile.getInventoryName();
  playerName=player.getGameProfile().getId();
  if (myTile.enableSecurity() && myTile.isSecured()) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabSecurity();
  }
  if (myTile.augmentRedstoneControl) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabRedstone();
  }
  if (myTile.augmentReconfigSides) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabConfiguration();
  }
  if (myTile.getMaxEnergyStored(ForgeDirection.UNKNOWN) > 0) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabFluxRequired();
  }
}","public GuiAugmentableBase(Container container,TileEntity tile,EntityPlayer player,ResourceLocation texture){
  super(container,texture);
  myTile=(TileAugmentable)tile;
  name=myTile.getInventoryName();
  playerName=SecurityHelper.getID(player);
  if (myTile.enableSecurity() && myTile.isSecured()) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabSecurity();
  }
  if (myTile.augmentRedstoneControl) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabRedstone();
  }
  if (myTile.augmentReconfigSides) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabConfiguration();
  }
  if (myTile.getMaxEnergyStored(ForgeDirection.UNKNOWN) > 0) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabFluxRequired();
  }
}"
59446,"public GuiCell(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile),TEXTURE);
  myTile=(TileCell)theTile;
  name=myTile.getInventoryName();
  playerName=inventory.player.getGameProfile().getId();
  generateInfo(""String_Node_Str"",2);
}","public GuiCell(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile),TEXTURE);
  myTile=(TileCell)theTile;
  name=myTile.getInventoryName();
  playerName=SecurityHelper.getID(inventory.player);
  generateInfo(""String_Node_Str"",2);
}"
59447,"public GuiSatchel(InventoryPlayer inventory,ContainerSatchel container){
  super(container);
  playerName=inventory.player.getGameProfile().getId();
  storageIndex=ItemSatchel.getStorageIndex(container.getContainerStack());
  enchanted=ItemSatchel.isEnchanted(container.getContainerStack());
  secure=SecurityHelper.isSecure(container.getContainerStack());
  texture=CoFHProps.TEXTURE_STORAGE[storageIndex];
  name=container.getInventoryName();
  allowUserInput=false;
  xSize=14 + 18 * MathHelper.clampI(storageIndex + 1,9,13);
  ySize=112 + 18 * MathHelper.clampI(storageIndex,2,8);
  if (storageIndex == ItemSatchel.Types.CREATIVE.ordinal()) {
    myInfo=StringHelper.localize(""String_Node_Str"");
  }
 else {
    myInfo=StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.localize(""String_Node_Str"");
    if (!enchanted) {
      myInfo+=""String_Node_Str"" + StringHelper.localize(""String_Node_Str"");
    }
  }
}","public GuiSatchel(InventoryPlayer inventory,ContainerSatchel container){
  super(container);
  playerName=SecurityHelper.getID(inventory.player);
  storageIndex=ItemSatchel.getStorageIndex(container.getContainerStack());
  enchanted=ItemSatchel.isEnchanted(container.getContainerStack());
  secure=SecurityHelper.isSecure(container.getContainerStack());
  texture=CoFHProps.TEXTURE_STORAGE[storageIndex];
  name=container.getInventoryName();
  allowUserInput=false;
  xSize=14 + 18 * MathHelper.clampI(storageIndex + 1,9,13);
  ySize=112 + 18 * MathHelper.clampI(storageIndex,2,8);
  if (storageIndex == ItemSatchel.Types.CREATIVE.ordinal()) {
    myInfo=StringHelper.localize(""String_Node_Str"");
  }
 else {
    myInfo=StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.localize(""String_Node_Str"");
    if (!enchanted) {
      myInfo+=""String_Node_Str"" + StringHelper.localize(""String_Node_Str"");
    }
  }
}"
59448,"public GuiStrongbox(InventoryPlayer inventory,TileEntity tile){
  super(new ContainerStrongbox(inventory,tile));
  myTile=(TileStrongbox)tile;
  playerName=inventory.player.getGameProfile().getId();
  storageIndex=myTile.getStorageIndex();
  texture=CoFHProps.TEXTURE_STORAGE[storageIndex];
  name=myTile.getInventoryName();
  xSize=14 + 18 * MathHelper.clampI(storageIndex + 1,9,13);
  ySize=112 + 18 * MathHelper.clampI(storageIndex,2,8);
  if (myTile.type == BlockStrongbox.Types.CREATIVE.ordinal()) {
    myInfo=StringHelper.localize(""String_Node_Str"");
  }
 else {
    myInfo=StringHelper.localize(""String_Node_Str"");
    if (myTile.enchant <= 0) {
      myInfo+=""String_Node_Str"" + StringHelper.localize(""String_Node_Str"");
    }
  }
}","public GuiStrongbox(InventoryPlayer inventory,TileEntity tile){
  super(new ContainerStrongbox(inventory,tile));
  myTile=(TileStrongbox)tile;
  playerName=SecurityHelper.getID(inventory.player);
  storageIndex=myTile.getStorageIndex();
  texture=CoFHProps.TEXTURE_STORAGE[storageIndex];
  name=myTile.getInventoryName();
  xSize=14 + 18 * MathHelper.clampI(storageIndex + 1,9,13);
  ySize=112 + 18 * MathHelper.clampI(storageIndex,2,8);
  if (myTile.type == BlockStrongbox.Types.CREATIVE.ordinal()) {
    myInfo=StringHelper.localize(""String_Node_Str"");
  }
 else {
    myInfo=StringHelper.localize(""String_Node_Str"");
    if (myTile.enchant <= 0) {
      myInfo+=""String_Node_Str"" + StringHelper.localize(""String_Node_Str"");
    }
  }
}"
59449,"public GuiWorkbench(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerWorkbench(inventory,theTile),TEXTURE);
  myTile=(TileWorkbench)theTile;
  name=myTile.getInventoryName();
  playerName=inventory.player.getGameProfile().getId();
  ySize=210;
  generateInfo(""String_Node_Str"",3);
}","public GuiWorkbench(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerWorkbench(inventory,theTile),TEXTURE);
  myTile=(TileWorkbench)theTile;
  name=myTile.getInventoryName();
  playerName=SecurityHelper.getID(inventory.player);
  ySize=210;
  generateInfo(""String_Node_Str"",3);
}"
59450,"public GuiDynamoBase(Container container,TileEntity tile,EntityPlayer player,ResourceLocation texture){
  super(container,texture);
  myTile=(TileDynamoBase)tile;
  name=myTile.getInventoryName();
  playerName=player.getGameProfile().getId();
  if (myTile.augmentRedstoneControl) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabRedstone();
  }
}","public GuiDynamoBase(Container container,TileEntity tile,EntityPlayer player,ResourceLocation texture){
  super(container,texture);
  myTile=(TileDynamoBase)tile;
  name=myTile.getInventoryName();
  playerName=SecurityHelper.getID(player);
  if (myTile.augmentRedstoneControl) {
    myTutorial+=""String_Node_Str"" + StringHelper.tutorialTabRedstone();
  }
}"
59451,"public GuiTesseract(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile,false,false),TEXTURE);
  myTile=(TileTesseract)theTile;
  name=myTile.getInventoryName();
  drawInventory=false;
  playerName=inventory.player.getGameProfile().getId();
  tempFreq=myTile.frequency;
  generateInfo(""String_Node_Str"",2);
}","public GuiTesseract(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile,false,false),TEXTURE);
  myTile=(TileTesseract)theTile;
  name=myTile.getInventoryName();
  drawInventory=false;
  playerName=SecurityHelper.getID(inventory.player);
  tempFreq=myTile.frequency;
  generateInfo(""String_Node_Str"",2);
}"
59452,"public GuiPlateImpulse(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile,false,false),TEXTURE);
  myTile=(TilePlateImpulse)theTile;
  name=myTile.getInventoryName();
  playerName=inventory.player.getGameProfile().getId();
  drawInventory=false;
  this.height=100;
  generateInfo(""String_Node_Str"",2);
}","public GuiPlateImpulse(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile,false,false),TEXTURE);
  myTile=(TilePlateImpulse)theTile;
  name=myTile.getInventoryName();
  playerName=SecurityHelper.getID(inventory.player);
  drawInventory=false;
  this.height=100;
  generateInfo(""String_Node_Str"",2);
}"
59453,"public GuiPlateSignal(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile,false,false),TEXTURE);
  myTile=(TilePlateSignal)theTile;
  name=myTile.getInventoryName();
  playerName=inventory.player.getGameProfile().getId();
  drawInventory=false;
  this.height=100;
  generateInfo(""String_Node_Str"",2);
}","public GuiPlateSignal(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile,false,false),TEXTURE);
  myTile=(TilePlateSignal)theTile;
  name=myTile.getInventoryName();
  playerName=SecurityHelper.getID(inventory.player);
  drawInventory=false;
  this.height=100;
  generateInfo(""String_Node_Str"",2);
}"
59454,"public GuiPlateTranslocate(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile,false,false),TEXTURE);
  myTile=(TilePlateTranslocate)theTile;
  name=myTile.getInventoryName();
  playerName=inventory.player.getGameProfile().getId();
  drawInventory=false;
  this.height=100;
  generateInfo(""String_Node_Str"",2);
}","public GuiPlateTranslocate(InventoryPlayer inventory,TileEntity theTile){
  super(new ContainerTEBase(inventory,theTile,false,false),TEXTURE);
  myTile=(TilePlateTranslocate)theTile;
  name=myTile.getInventoryName();
  playerName=SecurityHelper.getID(inventory.player);
  drawInventory=false;
  this.height=100;
  generateInfo(""String_Node_Str"",2);
}"
59455,"@Override protected void generate(){
  int energy;
  if (fuelRF <= 0) {
    if (EnergyHelper.isEnergyContainerItem(inventory[0])) {
      IEnergyContainerItem container=(IEnergyContainerItem)inventory[0].getItem();
      fuelRF+=container.extractEnergy(inventory[0],container.getEnergyStored(inventory[0]),false);
      currentFuelRF=redstoneRF;
    }
 else {
      energy=getEnergyValue(inventory[0]) * fuelMod / FUEL_MOD;
      fuelRF+=energy;
      currentFuelRF=energy;
      inventory[0]=ItemHelper.consumeItem(inventory[0]);
    }
  }
  energy=Math.min(fuelRF,calcEnergy() * energyMod);
  energyStorage.modifyEnergyStored(energy);
  fuelRF-=energy;
}","@Override protected void generate(){
  int energy;
  if (fuelRF <= 0) {
    if (EnergyHelper.isEnergyContainerItem(inventory[0])) {
      IEnergyContainerItem container=(IEnergyContainerItem)inventory[0].getItem();
      energy=container.extractEnergy(inventory[0],container.getEnergyStored(inventory[0]),false);
      fuelRF+=energy;
      currentFuelRF=energy;
    }
 else {
      energy=getEnergyValue(inventory[0]) * fuelMod / FUEL_MOD;
      fuelRF+=energy;
      currentFuelRF=energy;
      inventory[0]=ItemHelper.consumeItem(inventory[0]);
    }
  }
  energy=Math.min(fuelRF,calcEnergy() * energyMod);
  energyStorage.modifyEnergyStored(energy);
  fuelRF-=energy;
}"
59456,"protected void updateAdjacentSources(){
  inHell=worldObj.getBiomeGenForCoords(xCoord,zCoord) == BiomeGenBase.hell;
  adjacentSources=0;
  Block block=worldObj.getBlock(xCoord - 1,yCoord,zCoord);
  int bMeta=worldObj.getBlockMetadata(xCoord - 1,yCoord,zCoord);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
  block=worldObj.getBlock(xCoord + 1,yCoord,zCoord);
  bMeta=worldObj.getBlockMetadata(xCoord + 1,yCoord,zCoord);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
  block=worldObj.getBlock(xCoord,yCoord,zCoord - 1);
  bMeta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord - 1);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
  block=worldObj.getBlock(xCoord,yCoord,zCoord + 1);
  bMeta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord + 1);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
}","protected void updateAdjacentSources(){
  inHell=worldObj.getBiomeGenForCoords(xCoord,zCoord) == BiomeGenBase.hell;
  adjacentSources=0;
  Block block=worldObj.getBlock(xCoord,yCoord - 1,zCoord);
  int bMeta=worldObj.getBlockMetadata(xCoord,yCoord - 1,zCoord);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
  block=worldObj.getBlock(xCoord,yCoord + 1,zCoord);
  bMeta=worldObj.getBlockMetadata(xCoord,yCoord + 1,zCoord);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
  block=worldObj.getBlock(xCoord - 1,yCoord,zCoord);
  bMeta=worldObj.getBlockMetadata(xCoord - 1,yCoord,zCoord);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
  block=worldObj.getBlock(xCoord + 1,yCoord,zCoord);
  bMeta=worldObj.getBlockMetadata(xCoord + 1,yCoord,zCoord);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
  block=worldObj.getBlock(xCoord,yCoord,zCoord - 1);
  bMeta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord - 1);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
  block=worldObj.getBlock(xCoord,yCoord,zCoord + 1);
  bMeta=worldObj.getBlockMetadata(xCoord,yCoord,zCoord + 1);
  if (bMeta == 0 && (block == Blocks.water || block == Blocks.flowing_water)) {
    ++adjacentSources;
  }
}"
59457,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  if (augmentRedstoneControl) {
    rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  }
  if (augmentReconfigSides) {
    int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
    byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
    sideCache[0]=storedSideCache[0];
    sideCache[1]=storedSideCache[1];
    sideCache[facing]=storedSideCache[storedFacing];
    sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
    sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
    sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
    for (int i=0; i < 6; i++) {
      if (sideCache[i] >= getNumConfig(i)) {
        sideCache[i]=0;
      }
    }
    markDirty();
    sendUpdatePacket(Side.CLIENT);
  }
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  if (augmentRedstoneControl) {
    rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  }
  if (augmentReconfigSides) {
    int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
    byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
    sideCache[0]=storedSideCache[0];
    sideCache[1]=storedSideCache[1];
    sideCache[facing]=storedSideCache[storedFacing];
    sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
    sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
    sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
    for (int i=0; i < 6; i++) {
      if (sideCache[i] >= getNumConfig(i)) {
        sideCache[i]=0;
      }
    }
    markDirty();
    sendUpdatePacket(Side.CLIENT);
  }
}"
59458,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  RedstoneControlHelper.setItemStackTagRS(tag,this);
  ReconfigurableHelper.setItemStackTagReconfig(tag,this);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  RedstoneControlHelper.setItemStackTagRS(tag,this);
  ReconfigurableHelper.setItemStackTagReconfig(tag,this);
}"
59459,"@Override public void sendGuiNetworkData(Container container,ICrafting player){
  super.sendGuiNetworkData(container,player);
  player.sendProgressBarUpdate(container,0,canPlayerAccess(((EntityPlayer)player).getCommandSenderName()) ? 1 : 0);
}","@Override public void sendGuiNetworkData(Container container,ICrafting player){
  super.sendGuiNetworkData(container,player);
  player.sendProgressBarUpdate(container,0,canPlayerAccess(((EntityPlayer)player)) ? 1 : 0);
}"
59460,"@Override public boolean openGui(EntityPlayer player){
  if (canPlayerAccess(player.getCommandSenderName())) {
    if (hasGui()) {
      player.openGui(ThermalExpansion.instance,GuiHandler.TILE_ID,worldObj,xCoord,yCoord,zCoord);
    }
    return hasGui();
  }
  if (ServerHelper.isServerWorld(worldObj)) {
    player.addChatMessage(new ChatComponentText(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + getOwnerName()+ ""String_Node_Str""+ StringHelper.localize(""String_Node_Str"")));
  }
  return false;
}","@Override public boolean openGui(EntityPlayer player){
  if (canPlayerAccess(player)) {
    if (hasGui()) {
      player.openGui(ThermalExpansion.instance,GuiHandler.TILE_ID,worldObj,xCoord,yCoord,zCoord);
    }
    return hasGui();
  }
  if (ServerHelper.isServerWorld(worldObj)) {
    player.addChatMessage(new ChatComponentText(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + getOwnerName()+ ""String_Node_Str""+ StringHelper.localize(""String_Node_Str"")));
  }
  return false;
}"
59461,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
  byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
  sideCache[0]=storedSideCache[0];
  sideCache[1]=storedSideCache[1];
  sideCache[facing]=storedSideCache[storedFacing];
  sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
  sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
  sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
  for (int i=0; i < 6; i++) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  energySend=(tag.getInteger(""String_Node_Str"") * MAX_SEND[getType()]) / 1000;
  energyReceive=(tag.getInteger(""String_Node_Str"") * MAX_RECEIVE[getType()]) / 1000;
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
  byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
  sideCache[0]=storedSideCache[0];
  sideCache[1]=storedSideCache[1];
  sideCache[facing]=storedSideCache[storedFacing];
  sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
  sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
  sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
  for (int i=0; i < 6; i++) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  energySend=(tag.getInteger(""String_Node_Str"") * MAX_SEND[getType()]) / 1000;
  energyReceive=(tag.getInteger(""String_Node_Str"") * MAX_RECEIVE[getType()]) / 1000;
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}"
59462,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  RedstoneControlHelper.setItemStackTagRS(tag,this);
  ReconfigurableHelper.setItemStackTagReconfig(tag,this);
  tag.setInteger(""String_Node_Str"",(energySend * 1000) / MAX_SEND[getType()]);
  tag.setInteger(""String_Node_Str"",energyReceive * 1000 / MAX_RECEIVE[getType()]);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  RedstoneControlHelper.setItemStackTagRS(tag,this);
  ReconfigurableHelper.setItemStackTagReconfig(tag,this);
  tag.setInteger(""String_Node_Str"",(energySend * 1000) / MAX_SEND[getType()]);
  tag.setInteger(""String_Node_Str"",energyReceive * 1000 / MAX_RECEIVE[getType()]);
}"
59463,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  super.readPortableData(player,tag);
  actsSneaking=tag.getBoolean(""String_Node_Str"");
  leftClick=tag.getBoolean(""String_Node_Str"");
  tickSlot=tag.getByte(""String_Node_Str"");
  angle=tag.getByte(""String_Node_Str"");
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  super.readPortableData(player,tag);
  actsSneaking=tag.getBoolean(""String_Node_Str"");
  leftClick=tag.getBoolean(""String_Node_Str"");
  tickSlot=tag.getByte(""String_Node_Str"");
  angle=tag.getByte(""String_Node_Str"");
}"
59464,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  super.writePortableData(player,tag);
  tag.setBoolean(""String_Node_Str"",actsSneaking);
  tag.setBoolean(""String_Node_Str"",leftClick);
  tag.setByte(""String_Node_Str"",tickSlot);
  tag.setByte(""String_Node_Str"",angle);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  super.writePortableData(player,tag);
  tag.setBoolean(""String_Node_Str"",actsSneaking);
  tag.setBoolean(""String_Node_Str"",leftClick);
  tag.setByte(""String_Node_Str"",tickSlot);
  tag.setByte(""String_Node_Str"",angle);
}"
59465,"@Override public void sendGuiNetworkData(Container container,ICrafting player){
  player.sendProgressBarUpdate(container,0,canPlayerAccess(((EntityPlayer)player).getCommandSenderName()) ? 1 : 0);
}","@Override public void sendGuiNetworkData(Container container,ICrafting player){
  player.sendProgressBarUpdate(container,0,canPlayerAccess(((EntityPlayer)player)) ? 1 : 0);
}"
59466,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  if (augmentRedstoneControl) {
    rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  }
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  if (augmentRedstoneControl) {
    rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  }
}"
59467,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  RedstoneControlHelper.setItemStackTagRS(tag,this);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  RedstoneControlHelper.setItemStackTagRS(tag,this);
}"
59468,"@Override public void sendGuiNetworkData(Container container,ICrafting player){
  player.sendProgressBarUpdate(container,0,canPlayerAccess(((EntityPlayer)player).getCommandSenderName()) ? 1 : 0);
}","@Override public void sendGuiNetworkData(Container container,ICrafting player){
  player.sendProgressBarUpdate(container,0,canPlayerAccess(((EntityPlayer)player)) ? 1 : 0);
}"
59469,"@Override public boolean openGui(EntityPlayer player){
  if (CoreUtils.isFakePlayer(player)) {
    return true;
  }
  if (canPlayerAccess(player.getCommandSenderName())) {
    if (ServerHelper.isServerWorld(worldObj)) {
      sendNamesList((EntityPlayerMP)player);
    }
    player.openGui(ThermalExpansion.instance,GuiHandler.TILE_ID,worldObj,xCoord,yCoord,zCoord);
    return true;
  }
  if (ServerHelper.isServerWorld(worldObj)) {
    player.addChatMessage(new ChatComponentText(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + getOwnerName()+ ""String_Node_Str""+ StringHelper.localize(""String_Node_Str"")));
  }
  return true;
}","@Override public boolean openGui(EntityPlayer player){
  if (CoreUtils.isFakePlayer(player)) {
    return true;
  }
  if (canPlayerAccess(player)) {
    if (ServerHelper.isServerWorld(worldObj)) {
      sendNamesList((EntityPlayerMP)player);
    }
    player.openGui(ThermalExpansion.instance,GuiHandler.TILE_ID,worldObj,xCoord,yCoord,zCoord);
    return true;
  }
  if (ServerHelper.isServerWorld(worldObj)) {
    player.addChatMessage(new ChatComponentText(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + getOwnerName()+ ""String_Node_Str""+ StringHelper.localize(""String_Node_Str"")));
  }
  return true;
}"
59470,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  frequency=tag.getInteger(""String_Node_Str"");
  modeItem=tag.getByte(""String_Node_Str"");
  modeFluid=tag.getByte(""String_Node_Str"");
  modeEnergy=tag.getByte(""String_Node_Str"");
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  frequency=tag.getInteger(""String_Node_Str"");
  modeItem=tag.getByte(""String_Node_Str"");
  modeFluid=tag.getByte(""String_Node_Str"");
  modeEnergy=tag.getByte(""String_Node_Str"");
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}"
59471,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  RedstoneControlHelper.setItemStackTagRS(tag,this);
  tag.setInteger(""String_Node_Str"",frequency);
  tag.setByte(""String_Node_Str"",modeItem);
  tag.setByte(""String_Node_Str"",modeFluid);
  tag.setByte(""String_Node_Str"",modeEnergy);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  RedstoneControlHelper.setItemStackTagRS(tag,this);
  tag.setInteger(""String_Node_Str"",frequency);
  tag.setByte(""String_Node_Str"",modeItem);
  tag.setByte(""String_Node_Str"",modeFluid);
  tag.setByte(""String_Node_Str"",modeEnergy);
}"
59472,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  super.readPortableData(player,tag);
  lockPrimary=tag.getBoolean(""String_Node_Str"");
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  super.readPortableData(player,tag);
  lockPrimary=tag.getBoolean(""String_Node_Str"");
}"
59473,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  super.writePortableData(player,tag);
  tag.setBoolean(""String_Node_Str"",lockPrimary);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  super.writePortableData(player,tag);
  tag.setBoolean(""String_Node_Str"",lockPrimary);
}"
59474,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  super.readPortableData(player,tag);
  lockPrimary=tag.getBoolean(""String_Node_Str"");
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  super.readPortableData(player,tag);
  lockPrimary=tag.getBoolean(""String_Node_Str"");
}"
59475,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  super.writePortableData(player,tag);
  tag.setBoolean(""String_Node_Str"",lockPrimary);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  super.writePortableData(player,tag);
  tag.setBoolean(""String_Node_Str"",lockPrimary);
}"
59476,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  intensity=tag.getInteger(""String_Node_Str"");
  angle=tag.getInteger(""String_Node_Str"");
  updateForce();
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  intensity=tag.getInteger(""String_Node_Str"");
  angle=tag.getInteger(""String_Node_Str"");
  updateForce();
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}"
59477,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  tag.setInteger(""String_Node_Str"",intensity);
  tag.setInteger(""String_Node_Str"",angle);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  tag.setInteger(""String_Node_Str"",intensity);
  tag.setInteger(""String_Node_Str"",angle);
}"
59478,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  distance=tag.getByte(""String_Node_Str"");
  intensity=tag.getByte(""String_Node_Str"");
  duration=tag.getByte(""String_Node_Str"");
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  distance=tag.getByte(""String_Node_Str"");
  intensity=tag.getByte(""String_Node_Str"");
  duration=tag.getByte(""String_Node_Str"");
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}"
59479,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  tag.setByte(""String_Node_Str"",distance);
  tag.setByte(""String_Node_Str"",intensity);
  tag.setByte(""String_Node_Str"",duration);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  tag.setByte(""String_Node_Str"",distance);
  tag.setByte(""String_Node_Str"",intensity);
  tag.setByte(""String_Node_Str"",duration);
}"
59480,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  distance=tag.getByte(""String_Node_Str"");
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  distance=tag.getByte(""String_Node_Str"");
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}"
59481,"@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  tag.setByte(""String_Node_Str"",distance);
}","@Override public void writePortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player)) {
    return;
  }
  tag.setByte(""String_Node_Str"",distance);
}"
59482,"@Override public boolean canPlayerAccess(String name){
  AccessMode access=getAccess();
  if (access.isPublic() || (CoFHProps.enableOpSecureAccess && CoreUtils.isOp(name))) {
    return true;
  }
  UUID ownerID=getOwner().getId();
  if (ownerID.variant() == 0) {
    return true;
  }
  UUID otherID=UUID.fromString(PreYggdrasilConverter.func_152719_a(name));
  if (ownerID.equals(otherID)) {
    return true;
  }
  return access.isRestricted() && SocialRegistry.playerHasAccess(name,getOwner());
}","@Override public boolean canPlayerAccess(EntityPlayer player){
  AccessMode access=getAccess();
  String name=player.getCommandSenderName();
  if (access.isPublic() || (CoFHProps.enableOpSecureAccess && CoreUtils.isOp(name))) {
    return true;
  }
  UUID ownerID=getOwner().getId();
  if (ownerID.variant() == 0) {
    return true;
  }
  UUID otherID=player.getGameProfile().getId();
  if (ownerID.equals(otherID)) {
    return true;
  }
  return access.isRestricted() && SocialRegistry.playerHasAccess(name,getOwner());
}"
59483,"public int getNextStackIndex(){
  if (!needsWorld) {
    if ((leftClick && myFakePlayer.theItemInWorldManager.durabilityRemainingOnBlock > -1) || myFakePlayer.itemInUse != null) {
      return slotTracker;
    }
    if (tickSlot == 0) {
      return incrementTracker();
    }
 else     if (tickSlot == 1) {
      return getRandomStackIndex();
    }
    return 0;
  }
  return 0;
}","public int getNextStackIndex(){
  if ((leftClick && myFakePlayer.theItemInWorldManager.durabilityRemainingOnBlock > -1) || myFakePlayer.itemInUse != null) {
    return slotTracker;
  }
  if (tickSlot == 0) {
    return incrementTracker();
  }
 else   if (tickSlot == 1) {
    return getRandomStackIndex();
  }
  return 0;
}"
59484,"@Override public void onRedstoneUpdate(){
  if (!redstoneControlOrDisable() && !needsWorld && myFakePlayer.itemInUse != null) {
    myFakePlayer.stopUsingItem();
  }
 else {
    int coords[]=BlockHelper.getAdjacentCoordinatesForSide(xCoord,yCoord,zCoord,facing);
    Block block=worldObj.getBlock(coords[0],coords[1],coords[2]);
    if (block != null && block.isAir(worldObj,coords[0],coords[1],coords[2])) {
      doDeploy();
    }
  }
}","@Override public void onRedstoneUpdate(){
  if (!redstoneControlOrDisable() && myFakePlayer.itemInUse != null) {
    myFakePlayer.stopUsingItem();
  }
 else {
    int coords[]=BlockHelper.getAdjacentCoordinatesForSide(xCoord,yCoord,zCoord,facing);
    Block block=worldObj.getBlock(coords[0],coords[1],coords[2]);
    if (block != null && block.isAir(worldObj,coords[0],coords[1],coords[2])) {
      doDeploy();
    }
  }
}"
59485,"@Override public void updateEntity(){
  if (ServerHelper.isClientWorld(worldObj)) {
    return;
  }
  if (hasEnergy(ACTIVATION_ENERGY)) {
    if (!isActive) {
      worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    }
    isActive=true;
    boolean work=false;
    if (worldObj.getTotalWorldTime() % CoFHProps.TIME_CONSTANT_HALF == 0 && redstoneControlOrDisable()) {
      work=doDeploy();
    }
 else     if (!needsWorld) {
      if (leftClick && myFakePlayer.theItemInWorldManager.durabilityRemainingOnBlock > -1) {
        work=true;
        int tickSlot=getNextStackIndex();
        myFakePlayer.theItemInWorldManager.updateBlockRemoving();
        if (myFakePlayer.theItemInWorldManager.durabilityRemainingOnBlock >= 9) {
          work=simLeftClick(myFakePlayer,getStackInSlot(tickSlot),facing);
        }
      }
 else       if (!leftClick && myFakePlayer.itemInUse != null) {
        work=true;
        int slot=getNextStackIndex();
        myFakePlayer.inventory.currentItem=slot;
        myFakePlayer.tickItemInUse(getStackInSlot(slot));
        checkItemsUpdated();
      }
    }
    if (work) {
      drainEnergy(ACTIVATION_ENERGY);
    }
  }
 else {
    if (isActive) {
      worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    }
    isActive=false;
  }
  chargeEnergy();
}","@Override public void updateEntity(){
  if (ServerHelper.isClientWorld(worldObj)) {
    return;
  }
  if (hasEnergy(ACTIVATION_ENERGY)) {
    if (!isActive) {
      worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    }
    isActive=true;
    boolean work=false;
    if (worldObj.getTotalWorldTime() % CoFHProps.TIME_CONSTANT_HALF == 0 && redstoneControlOrDisable()) {
      work=doDeploy();
    }
 else {
      if (leftClick && myFakePlayer.theItemInWorldManager.durabilityRemainingOnBlock > -1) {
        work=true;
        int tickSlot=getNextStackIndex();
        myFakePlayer.theItemInWorldManager.updateBlockRemoving();
        if (myFakePlayer.theItemInWorldManager.durabilityRemainingOnBlock >= 9) {
          work=simLeftClick(myFakePlayer,getStackInSlot(tickSlot),facing);
        }
      }
 else       if (!leftClick && myFakePlayer.itemInUse != null) {
        work=true;
        int slot=getNextStackIndex();
        myFakePlayer.inventory.currentItem=slot;
        myFakePlayer.tickItemInUse(getStackInSlot(slot));
        checkItemsUpdated();
      }
    }
    if (work) {
      drainEnergy(ACTIVATION_ENERGY);
    }
  }
 else {
    if (isActive) {
      worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    }
    isActive=false;
  }
  chargeEnergy();
}"
59486,"@Override public boolean rotateBlock(){
  if (!needsWorld) {
    int coords[]=BlockHelper.getAdjacentCoordinatesForSide(xCoord,yCoord,zCoord,facing);
    myFakePlayer.theItemInWorldManager.cancelDestroyingBlock(coords[0],coords[1],coords[2]);
    myFakePlayer.theItemInWorldManager.durabilityRemainingOnBlock=-1;
  }
  return super.rotateBlock();
}","@Override public boolean rotateBlock(){
  if (inWorld) {
    int coords[]=BlockHelper.getAdjacentCoordinatesForSide(xCoord,yCoord,zCoord,facing);
    myFakePlayer.theItemInWorldManager.cancelDestroyingBlock(coords[0],coords[1],coords[2]);
    myFakePlayer.theItemInWorldManager.durabilityRemainingOnBlock=-1;
  }
  return super.rotateBlock();
}"
59487,"public void updateFakePlayer(int tickSlot){
  if (needsWorld) {
    myFakePlayer=new CoFHFakePlayer((WorldServer)worldObj);
    needsWorld=false;
  }
  myFakePlayer.inventory.mainInventory=new ItemStack[36];
  for (int i=0; i < MAX_SLOT; i++) {
    myFakePlayer.inventory.mainInventory[i]=getStackInSlot(i);
  }
  double x=xCoord + 0.5D;
  double y=yCoord - 1.1D;
  double z=zCoord + 0.5D;
  float pitch=this.angle == 0 ? 45.0F : this.angle == 1 ? 0F : -45F;
  float yaw;
switch (facing) {
case 0:
    pitch=this.angle == 0 ? -90.0F : this.angle == 1 ? 0F : 90F;
  yaw=0.0F;
y-=0.51D;
break;
case 1:
pitch=this.angle == 0 ? 90.0F : this.angle == 1 ? 0F : -90F;
yaw=0.0F;
y+=1.51D;
break;
case 2:
yaw=180.0F;
z-=0.51D;
y+=.5D;
break;
case 3:
yaw=0.0F;
z+=0.51D;
y+=.5D;
break;
case 4:
yaw=90.0F;
x-=0.51D;
y+=.5D;
break;
default :
yaw=-90.0F;
x+=0.51D;
y+=.5D;
}
myFakePlayer.setPositionAndRotation(x,y,z,yaw,pitch);
myFakePlayer.isSneaking=actsSneaking;
myFakePlayer.yOffset=-1.1F;
myFakePlayer.setItemInHand(tickSlot);
myFakePlayer.onUpdate();
}","public void updateFakePlayer(int tickSlot){
  myFakePlayer.inventory.mainInventory=new ItemStack[36];
  for (int i=0; i < MAX_SLOT; i++) {
    myFakePlayer.inventory.mainInventory[i]=getStackInSlot(i);
  }
  double x=xCoord + 0.5D;
  double y=yCoord - 1.1D;
  double z=zCoord + 0.5D;
  float pitch=this.angle == 0 ? 45.0F : this.angle == 1 ? 0F : -45F;
  float yaw;
switch (facing) {
case 0:
    pitch=this.angle == 0 ? -90.0F : this.angle == 1 ? 0F : 90F;
  yaw=0.0F;
y-=0.51D;
break;
case 1:
pitch=this.angle == 0 ? 90.0F : this.angle == 1 ? 0F : -90F;
yaw=0.0F;
y+=1.51D;
break;
case 2:
yaw=180.0F;
z-=0.51D;
y+=.5D;
break;
case 3:
yaw=0.0F;
z+=0.51D;
y+=.5D;
break;
case 4:
yaw=90.0F;
x-=0.51D;
y+=.5D;
break;
default :
yaw=-90.0F;
x+=0.51D;
y+=.5D;
}
myFakePlayer.setPositionAndRotation(x,y,z,yaw,pitch);
myFakePlayer.isSneaking=actsSneaking;
myFakePlayer.yOffset=-1.1F;
myFakePlayer.setItemInHand(tickSlot);
myFakePlayer.onUpdate();
}"
59488,"public void handleConfigSync(PacketCoFHBase payload){
  FMLEventHandler.instance.handleIdMappingEvent(null);
  TileCell.enableSecurity=payload.getBool();
  TileWorkbench.enableSecurity=payload.getBool();
  TileActivator.enableSecurity=payload.getBool();
  TileBreaker.enableSecurity=payload.getBool();
  TileNullifier.enableSecurity=payload.getBool();
  TileDynamoBase.enableSecurity=payload.getBool();
  for (int i=0; i < TileMachineBase.enableSecurity.length; i++) {
    TileMachineBase.enableSecurity[i]=payload.getBool();
  }
  TileStrongbox.enableSecurity=payload.getBool();
  ItemSatchel.enableSecurity=payload.getBool();
  log.info(""String_Node_Str"");
}","public void handleConfigSync(PacketCoFHBase payload){
  handleIdMapping();
  TileCell.enableSecurity=payload.getBool();
  TileWorkbench.enableSecurity=payload.getBool();
  TileActivator.enableSecurity=payload.getBool();
  TileBreaker.enableSecurity=payload.getBool();
  TileNullifier.enableSecurity=payload.getBool();
  TileDynamoBase.enableSecurity=payload.getBool();
  for (int i=0; i < TileMachineBase.enableSecurity.length; i++) {
    TileMachineBase.enableSecurity[i]=payload.getBool();
  }
  TileStrongbox.enableSecurity=payload.getBool();
  ItemSatchel.enableSecurity=payload.getBool();
  log.info(""String_Node_Str"");
}"
59489,"public void resetClientConfigs(){
  TileCell.configure();
  TileWorkbench.configure();
  TileActivator.configure();
  TileBreaker.configure();
  TileNullifier.configure();
  TileDynamoBase.configure();
  TileMachineBase.configure();
  TileStrongbox.configure();
  ItemSatchel.configure();
  FMLEventHandler.instance.handleIdMappingEvent(null);
  log.info(StringHelper.localize(""String_Node_Str""));
}","public void resetClientConfigs(){
  TileCell.configure();
  TileWorkbench.configure();
  TileActivator.configure();
  TileBreaker.configure();
  TileNullifier.configure();
  TileDynamoBase.configure();
  TileMachineBase.configure();
  TileStrongbox.configure();
  ItemSatchel.configure();
  handleIdMapping();
  log.info(StringHelper.localize(""String_Node_Str""));
}"
59490,"@SubscribeEvent public void onPlayerLogin(PlayerLoggedInEvent event){
  if (TEProps.enableAchievements) {
    event.player.addStat(TEAchievements.baseTE,1);
  }
  PacketTEBase.sendConfigSyncPacketToClient(event.player);
  handleIdMappingEvent(null);
}","@SubscribeEvent public void onPlayerLogin(PlayerLoggedInEvent event){
  if (TEProps.enableAchievements) {
    event.player.addStat(TEAchievements.baseTE,1);
  }
  PacketTEBase.sendConfigSyncPacketToClient(event.player);
}"
59491,"public FluidTankAdv getTank(){
  return tank;
}","@Override public FluidTankAdv getTank(){
  return tank;
}"
59492,"public TilePump(){
  sideCache=new byte[]{0,0,1,1,1,1};
  energyStorage=new EnergyStorage(0);
}","public TilePump(){
  sideConfig=defaultSideConfig;
  sideCache=new byte[]{0,0,1,1,1,1};
  energyStorage=new EnergyStorage(0);
}"
59493,"public FluidStack getTankFluid(){
  return tank.getFluid();
}","@Override public FluidStack getTankFluid(){
  return tank.getFluid();
}"
59494,"public static void initialize(){
}","public static void initialize(){
  defaultSideConfig=new SideConfig();
  defaultSideConfig.numGroup=2;
  defaultSideConfig.slotGroups=new int[][]{{},{}};
  defaultSideConfig.allowInsertion=new boolean[]{false,false};
  defaultSideConfig.allowExtraction=new boolean[]{false,false};
  defaultSideConfig.sideTex=new int[]{0,4};
  defaultSideConfig.defaultSides=new byte[]{0,0,1,1,1,1};
  GameRegistry.registerTileEntity(TilePump.class,""String_Node_Str"");
  configure();
}"
59495,"public static void initialize(){
  defaultSideConfig[TYPE]=new SideConfig();
  defaultSideConfig[TYPE].numGroup=3;
  defaultSideConfig[TYPE].slotGroups=new int[][]{{},{0},{1}};
  defaultSideConfig[TYPE].allowInsertion=new boolean[]{false,true,false};
  defaultSideConfig[TYPE].allowExtraction=new boolean[]{false,true,true};
  defaultSideConfig[TYPE].sideTex=new int[]{0,1,4};
  defaultSideConfig[TYPE].defaultSides=new byte[]{1,1,2,2,2,2};
  int maxPower=MathHelper.clampI(ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",10000),100,20000);
  ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",maxPower);
  defaultEnergyConfig[TYPE]=new EnergyConfig();
  defaultEnergyConfig[TYPE].setParams(1,maxPower,Math.max(480000,maxPower * 1200));
  GameRegistry.registerTileEntity(TileCharger.class,""String_Node_Str"");
}","public static void initialize(){
  defaultSideConfig[TYPE]=new SideConfig();
  defaultSideConfig[TYPE].numGroup=3;
  defaultSideConfig[TYPE].slotGroups=new int[][]{{},{0},{1}};
  defaultSideConfig[TYPE].allowInsertion=new boolean[]{false,true,false};
  defaultSideConfig[TYPE].allowExtraction=new boolean[]{false,true,true};
  defaultSideConfig[TYPE].sideTex=new int[]{0,1,4};
  defaultSideConfig[TYPE].defaultSides=new byte[]{1,1,2,2,2,2};
  int maxPower=MathHelper.clampI(ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",10000),100,20000);
  ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",maxPower);
  defaultEnergyConfig[TYPE]=new EnergyConfig();
  defaultEnergyConfig[TYPE].setParams(1,maxPower,Math.max(480000,maxPower * 60));
  GameRegistry.registerTileEntity(TileCharger.class,""String_Node_Str"");
}"
59496,"public RecipeHandlerCrucible(){
  super();
  this.maxEnergy=400000;
}","public RecipeHandlerCrucible(){
  super();
  this.maxEnergy=400 * 1200;
}"
59497,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  GL11.glPushMatrix();
  double offset=-0.5;
  if (type == ItemRenderType.EQUIPPED || type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    offset=0;
  }
  FluidStack fluid=null;
  if (item.stackTagCompound != null) {
    fluid=FluidStack.loadFluidStackFromNBT(item.stackTagCompound.getCompoundTag(""String_Node_Str""));
  }
  RenderUtils.preItemRender();
  CCRenderState.startDrawing();
  renderFluid(item.getItemDamage(),fluid,offset,offset,offset);
  CCRenderState.draw();
  CCRenderState.startDrawing();
  renderFrame(item.getItemDamage(),0,offset,offset,offset);
  CCRenderState.draw();
  RenderUtils.postItemRender();
  GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  GL11.glPushMatrix();
  double offset=-0.5;
  if (type == ItemRenderType.EQUIPPED || type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    offset=0;
  }
  FluidStack fluid=null;
  if (item.stackTagCompound != null) {
    fluid=FluidStack.loadFluidStackFromNBT(item.stackTagCompound.getCompoundTag(""String_Node_Str""));
  }
  RenderUtils.preItemRender();
  CCRenderState.startDrawing();
  renderFrame(item.getItemDamage(),0,offset,offset,offset);
  CCRenderState.draw();
  CCRenderState.startDrawing();
  renderFluid(item.getItemDamage(),fluid,offset,offset,offset);
  CCRenderState.draw();
  RenderUtils.postItemRender();
  GL11.glPopMatrix();
}"
59498,"public static void addDefaultRecipes(){
  boolean recipeNetherrack=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",true);
  boolean recipeBlazeRod=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",true);
  int tweakNetherrackRF=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF * 6 / 10);
  int tweakBlazeRodRF=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF / 10);
  if (recipeNetherrack) {
    if (tweakNetherrackRF >= TEProps.lavaRF / 10 && tweakNetherrackRF <= TEProps.lavaRF) {
      addTERecipe(tweakNetherrackRF,new ItemStack(Blocks.netherrack),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
    }
 else {
      addTERecipe(TEProps.lavaRF * 6 / 10,new ItemStack(Blocks.netherrack),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
      ThermalExpansion.log.info(""String_Node_Str"");
      ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF * 6 / 10);
    }
  }
  if (recipeBlazeRod) {
    if (tweakBlazeRodRF >= TEProps.lavaRF / 20 && tweakBlazeRodRF <= TEProps.lavaRF) {
      addTERecipe(tweakBlazeRodRF,new ItemStack(Items.blaze_rod),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME / 4));
    }
 else {
      addTERecipe(TEProps.lavaRF / 10,new ItemStack(Items.blaze_rod),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME / 4));
      ThermalExpansion.log.info(""String_Node_Str"");
      ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF / 10);
    }
  }
  int defaultCost=TEProps.lavaRF * 8 / 5;
  addTERecipe(defaultCost,new ItemStack(Blocks.cobblestone),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(defaultCost,new ItemStack(Blocks.stone),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(defaultCost,new ItemStack(Blocks.obsidian),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(800,new ItemStack(Items.snowball,4),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME / 2));
  addTERecipe(800,new ItemStack(Blocks.snow),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME / 2));
  addTERecipe(1600,new ItemStack(Blocks.ice),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(8000,new ItemStack(Items.redstone),new FluidStack(TFFluids.fluidRedstone,100));
  addTERecipe(8000 * 9,new ItemStack(Blocks.redstone_block),new FluidStack(TFFluids.fluidRedstone,100 * 9));
  addTERecipe(20000,new ItemStack(Items.glowstone_dust),new FluidStack(TFFluids.fluidGlowstone,250));
  addTERecipe(20000 * 4,new ItemStack(Blocks.glowstone),new FluidStack(TFFluids.fluidGlowstone,1000));
  addTERecipe(20000,new ItemStack(Items.ender_pearl),new FluidStack(TFFluids.fluidEnder,250));
  addTERecipe(8000,TFItems.dustPyrotheum,new FluidStack(TFFluids.fluidPyrotheum,100));
  addTERecipe(8000,TFItems.dustCryotheum,new FluidStack(TFFluids.fluidCryotheum,100));
  addTERecipe(8000,TFItems.dustCoal,new FluidStack(TFFluids.fluidCoal,100));
}","public static void addDefaultRecipes(){
  boolean recipeNetherrack=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",true);
  boolean recipeBlazeRod=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",true);
  int tweakNetherrackRF=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF * 6 / 10);
  int tweakBlazeRodRF=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF / 10);
  if (recipeNetherrack) {
    if (tweakNetherrackRF >= TEProps.lavaRF / 10 && tweakNetherrackRF <= TEProps.lavaRF) {
      addTERecipe(tweakNetherrackRF,new ItemStack(Blocks.netherrack),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
    }
 else {
      addTERecipe(TEProps.lavaRF * 6 / 10,new ItemStack(Blocks.netherrack),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
      ThermalExpansion.log.info(""String_Node_Str"");
      ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF * 6 / 10);
    }
  }
  if (recipeBlazeRod) {
    if (tweakBlazeRodRF >= TEProps.lavaRF / 20 && tweakBlazeRodRF <= TEProps.lavaRF) {
      addTERecipe(tweakBlazeRodRF,new ItemStack(Items.blaze_rod),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME / 4));
    }
 else {
      addTERecipe(TEProps.lavaRF / 10,new ItemStack(Items.blaze_rod),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME / 4));
      ThermalExpansion.log.info(""String_Node_Str"");
      ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF / 10);
    }
  }
  int defaultCost=TEProps.lavaRF * 9 / 5;
  addTERecipe(defaultCost,new ItemStack(Blocks.cobblestone),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(defaultCost,new ItemStack(Blocks.stone),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(defaultCost,new ItemStack(Blocks.obsidian),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(800,new ItemStack(Items.snowball,4),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME / 2));
  addTERecipe(800,new ItemStack(Blocks.snow),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME / 2));
  addTERecipe(1600,new ItemStack(Blocks.ice),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(8000,new ItemStack(Items.redstone),new FluidStack(TFFluids.fluidRedstone,100));
  addTERecipe(8000 * 9,new ItemStack(Blocks.redstone_block),new FluidStack(TFFluids.fluidRedstone,100 * 9));
  addTERecipe(20000,new ItemStack(Items.glowstone_dust),new FluidStack(TFFluids.fluidGlowstone,250));
  addTERecipe(20000 * 4,new ItemStack(Blocks.glowstone),new FluidStack(TFFluids.fluidGlowstone,1000));
  addTERecipe(20000,new ItemStack(Items.ender_pearl),new FluidStack(TFFluids.fluidEnder,250));
  addTERecipe(8000,TFItems.dustPyrotheum,new FluidStack(TFFluids.fluidPyrotheum,100));
  addTERecipe(8000,TFItems.dustCryotheum,new FluidStack(TFFluids.fluidCryotheum,100));
  addTERecipe(8000,TFItems.dustCoal,new FluidStack(TFFluids.fluidCoal,100));
}"
59499,"public CoFHPacket getConfigSync(){
  CoFHPacket payload=GenericTEPacket.getPacket(PacketTypes.CONFIG_SYNC);
  payload.addBool(TileCell.enableSecurity);
  payload.addBool(TileWorkbench.enableSecurity);
  payload.addBool(TileActivator.enableSecurity);
  payload.addBool(TileBreaker.enableSecurity);
  payload.addBool(TileNullifier.enableSecurity);
  payload.addBool(TileDynamoBase.enableSecurity);
  for (int i=0; i < TileMachineBase.enableSecurity.length; i++) {
    payload.addBool(TileMachineBase.enableSecurity[i]);
  }
  payload.addBool(TileStrongbox.enableSecurity);
  payload.addBool(ItemSatchel.enableSecurity);
  return payload;
}","public PacketCoFHBase getConfigSync(){
  PacketCoFHBase payload=PacketTEBase.getPacket(PacketTypes.CONFIG_SYNC);
  payload.addBool(TileCell.enableSecurity);
  payload.addBool(TileWorkbench.enableSecurity);
  payload.addBool(TileActivator.enableSecurity);
  payload.addBool(TileBreaker.enableSecurity);
  payload.addBool(TileNullifier.enableSecurity);
  payload.addBool(TileDynamoBase.enableSecurity);
  for (int i=0; i < TileMachineBase.enableSecurity.length; i++) {
    payload.addBool(TileMachineBase.enableSecurity[i]);
  }
  payload.addBool(TileStrongbox.enableSecurity);
  payload.addBool(ItemSatchel.enableSecurity);
  return payload;
}"
59500,"public void handleConfigSync(CoFHPacket payload){
  TileCell.enableSecurity=payload.getBool();
  TileWorkbench.enableSecurity=payload.getBool();
  TileActivator.enableSecurity=payload.getBool();
  TileBreaker.enableSecurity=payload.getBool();
  TileNullifier.enableSecurity=payload.getBool();
  TileDynamoBase.enableSecurity=payload.getBool();
  for (int i=0; i < TileMachineBase.enableSecurity.length; i++) {
    TileMachineBase.enableSecurity[i]=payload.getBool();
  }
  TileStrongbox.enableSecurity=payload.getBool();
  ItemSatchel.enableSecurity=payload.getBool();
  log.info(""String_Node_Str"");
}","public void handleConfigSync(PacketCoFHBase payload){
  TileCell.enableSecurity=payload.getBool();
  TileWorkbench.enableSecurity=payload.getBool();
  TileActivator.enableSecurity=payload.getBool();
  TileBreaker.enableSecurity=payload.getBool();
  TileNullifier.enableSecurity=payload.getBool();
  TileDynamoBase.enableSecurity=payload.getBool();
  for (int i=0; i < TileMachineBase.enableSecurity.length; i++) {
    TileMachineBase.enableSecurity[i]=payload.getBool();
  }
  TileStrongbox.enableSecurity=payload.getBool();
  ItemSatchel.enableSecurity=payload.getBool();
  log.info(""String_Node_Str"");
}"
59501,"@EventHandler public void initialize(FMLInitializationEvent event){
  TEItems.initialize();
  TEBlocks.initialize();
  TEPlugins.initialize();
  if (TEProps.enableAchievements) {
  }
  loadWorldGeneration();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,guiHandler);
  MinecraftForge.EVENT_BUS.register(proxy);
  GenericTEPacket.initialize();
  try {
    Field eBus=FMLModContainer.class.getDeclaredField(""String_Node_Str"");
    eBus.setAccessible(true);
    EventBus FMLbus=(EventBus)eBus.get(FMLCommonHandler.instance().findContainerFor(this));
    FMLbus.register(this);
  }
 catch (  Throwable t) {
    if (TEProps.enableDebugOutput) {
      t.printStackTrace();
    }
  }
}","@EventHandler public void initialize(FMLInitializationEvent event){
  TEItems.initialize();
  TEBlocks.initialize();
  TEPlugins.initialize();
  if (TEProps.enableAchievements) {
  }
  loadWorldGeneration();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,guiHandler);
  MinecraftForge.EVENT_BUS.register(proxy);
  PacketTEBase.initialize();
  try {
    Field eBus=FMLModContainer.class.getDeclaredField(""String_Node_Str"");
    eBus.setAccessible(true);
    EventBus FMLbus=(EventBus)eBus.get(FMLCommonHandler.instance().findContainerFor(this));
    FMLbus.register(this);
  }
 catch (  Throwable t) {
    if (TEProps.enableDebugOutput) {
      t.printStackTrace();
    }
  }
}"
59502,"@Override public CoFHPacket getPacket(){
  CoFHPacket payload=super.getPacket();
  payload.addBool(augmentReconfigSides);
  payload.addBool(augmentRedstoneControl);
  return payload;
}","@Override public PacketCoFHBase getPacket(){
  PacketCoFHBase payload=super.getPacket();
  payload.addBool(augmentReconfigSides);
  payload.addBool(augmentRedstoneControl);
  return payload;
}"
59503,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  if (augmentRedstoneControl) {
    RedstoneControlHelper.getControlFromNBT(tag);
  }
  if (augmentReconfigSides) {
    int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
    byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
    sideCache[0]=storedSideCache[0];
    sideCache[1]=storedSideCache[1];
    sideCache[facing]=storedSideCache[storedFacing];
    sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
    sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
    sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
    for (int i=0; i < 6; i++) {
      if (sideCache[i] >= getNumConfig(i)) {
        sideCache[i]=0;
      }
    }
  }
  if (augmentRedstoneControl || augmentReconfigSides) {
    sendUpdatePacket(Side.CLIENT);
  }
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  if (augmentRedstoneControl) {
    RedstoneControlHelper.getControlFromNBT(tag);
  }
  if (augmentReconfigSides) {
    int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
    byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
    sideCache[0]=storedSideCache[0];
    sideCache[1]=storedSideCache[1];
    sideCache[facing]=storedSideCache[storedFacing];
    sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
    sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
    sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
    for (int i=0; i < 6; i++) {
      if (sideCache[i] >= getNumConfig(i)) {
        sideCache[i]=0;
      }
    }
    markDirty();
    sendUpdatePacket(Side.CLIENT);
  }
}"
59504,"@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  if (!isServer) {
    augmentReconfigSides=payload.getBool();
    augmentRedstoneControl=payload.getBool();
  }
 else {
    payload.getBool();
    payload.getBool();
  }
}","@Override public void handleTilePacket(PacketCoFHBase payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  if (!isServer) {
    augmentReconfigSides=payload.getBool();
    augmentRedstoneControl=payload.getBool();
  }
 else {
    payload.getBool();
    payload.getBool();
  }
}"
59505,"@Override protected void handleGuiPacket(CoFHPacket payload){
  isActive=payload.getBool();
  energyStorage.setCapacity(payload.getInt());
  energyStorage.setEnergyStored(payload.getInt());
  boolean prevReconfig=augmentReconfigSides;
  boolean prevControl=augmentRedstoneControl;
  augmentReconfigSides=payload.getBool();
  augmentRedstoneControl=payload.getBool();
  if (augmentReconfigSides != prevReconfig || augmentRedstoneControl != prevControl) {
    onInstalled();
    sendUpdatePacket(Side.SERVER);
  }
}","@Override protected void handleGuiPacket(PacketCoFHBase payload){
  isActive=payload.getBool();
  energyStorage.setCapacity(payload.getInt());
  energyStorage.setEnergyStored(payload.getInt());
  boolean prevReconfig=augmentReconfigSides;
  boolean prevControl=augmentRedstoneControl;
  augmentReconfigSides=payload.getBool();
  augmentRedstoneControl=payload.getBool();
  if (augmentReconfigSides != prevReconfig || augmentRedstoneControl != prevControl) {
    onInstalled();
    sendUpdatePacket(Side.SERVER);
  }
}"
59506,"@Override public CoFHPacket getGuiPacket(){
  CoFHPacket payload=super.getGuiPacket();
  payload.addBool(isActive);
  payload.addInt(energyStorage.getMaxEnergyStored());
  payload.addInt(energyStorage.getEnergyStored());
  payload.addBool(augmentReconfigSides);
  payload.addBool(augmentRedstoneControl);
  return payload;
}","@Override public PacketCoFHBase getGuiPacket(){
  PacketCoFHBase payload=super.getGuiPacket();
  payload.addBool(isActive);
  payload.addInt(energyStorage.getMaxEnergyStored());
  payload.addInt(energyStorage.getEnergyStored());
  payload.addBool(augmentReconfigSides);
  payload.addBool(augmentRedstoneControl);
  return payload;
}"
59507,"@Override public void installAugments(){
  resetAugments();
  for (int i=0; i < augments.length; i++) {
    augmentStatus[i]=false;
    if (Utils.isAugmentItem(augments[i])) {
      augmentStatus[i]=installAugment(i);
    }
  }
  if (CoFHCore.proxy.isServer()) {
    onInstalled();
    sendUpdatePacket(Side.CLIENT);
  }
}","@Override public void installAugments(){
  resetAugments();
  for (int i=0; i < augments.length; i++) {
    augmentStatus[i]=false;
    if (Utils.isAugmentItem(augments[i])) {
      augmentStatus[i]=installAugment(i);
    }
  }
  if (CoreUtils.isServer()) {
    onInstalled();
    sendUpdatePacket(Side.CLIENT);
  }
}"
59508,"@Override public CoFHPacket getPacket(){
  CoFHPacket payload=super.getPacket();
  payload.addByte((byte)access.ordinal());
  payload.addString(owner);
  return payload;
}","@Override public PacketCoFHBase getPacket(){
  PacketCoFHBase payload=super.getPacket();
  payload.addByte((byte)access.ordinal());
  payload.addString(owner);
  return payload;
}"
59509,"@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  access=ISecurable.AccessMode.values()[payload.getByte()];
  if (!isServer) {
    owner=payload.getString();
  }
 else {
    payload.getString();
  }
}","@Override public void handleTilePacket(PacketCoFHBase payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  access=ISecurable.AccessMode.values()[payload.getByte()];
  if (!isServer) {
    owner=payload.getString();
  }
 else {
    payload.getString();
  }
}"
59510,"@Override public void onNeighborBlockChange(){
  wasPowered=isPowered;
  isPowered=worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord);
  if (wasPowered != isPowered && sendRedstoneUpdates()) {
    GenericTEPacket.sendRSPowerUpdatePacketToClients(this,worldObj,xCoord,yCoord,zCoord);
    onRedstoneUpdate();
  }
}","@Override public void onNeighborBlockChange(){
  wasPowered=isPowered;
  isPowered=worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord);
  if (wasPowered != isPowered && sendRedstoneUpdates()) {
    PacketTEBase.sendRSPowerUpdatePacketToClients(this,worldObj,xCoord,yCoord,zCoord);
    onRedstoneUpdate();
  }
}"
59511,"@Override public CoFHPacket getPacket(){
  CoFHPacket payload=super.getPacket();
  payload.addBool(isPowered);
  payload.addByte(rsMode.ordinal());
  payload.addBool(isActive);
  payload.addInt(energyStorage.getEnergyStored());
  return payload;
}","@Override public PacketCoFHBase getPacket(){
  PacketCoFHBase payload=super.getPacket();
  payload.addBool(isPowered);
  payload.addByte(rsMode.ordinal());
  payload.addBool(isActive);
  payload.addInt(energyStorage.getEnergyStored());
  return payload;
}"
59512,"@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  isPowered=payload.getBool();
  rsMode=ControlMode.values()[payload.getByte()];
  if (!isServer) {
    isActive=payload.getBool();
    energyStorage.setEnergyStored(payload.getInt());
  }
 else {
    payload.getBool();
    payload.getInt();
  }
}","@Override public void handleTilePacket(PacketCoFHBase payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  isPowered=payload.getBool();
  rsMode=ControlMode.values()[payload.getByte()];
  if (!isServer) {
    isActive=payload.getBool();
    energyStorage.setEnergyStored(payload.getInt());
  }
 else {
    payload.getBool();
    payload.getInt();
  }
}"
59513,"@Override public final void setControl(ControlMode control){
  rsMode=control;
  if (ServerHelper.isClientWorld(worldObj)) {
    GenericTEPacket.sendRSConfigUpdatePacketToServer(this,this.xCoord,this.yCoord,this.zCoord);
  }
 else {
    sendUpdatePacket(Side.CLIENT);
  }
}","@Override public final void setControl(ControlMode control){
  rsMode=control;
  if (ServerHelper.isClientWorld(worldObj)) {
    PacketTEBase.sendRSConfigUpdatePacketToServer(this,this.xCoord,this.yCoord,this.zCoord);
  }
 else {
    sendUpdatePacket(Side.CLIENT);
  }
}"
59514,"@Override public CoFHPacket getPacket(){
  CoFHPacket payload=super.getPacket();
  payload.addByteArray(sideCache);
  payload.addByte(facing);
  return payload;
}","@Override public PacketCoFHBase getPacket(){
  PacketCoFHBase payload=super.getPacket();
  payload.addByteArray(sideCache);
  payload.addByte(facing);
  return payload;
}"
59515,"@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  payload.getByteArray(sideCache);
  for (int i=0; i < 6; i++) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  if (!isServer) {
    facing=payload.getByte();
  }
 else {
    payload.getByte();
  }
}","@Override public void handleTilePacket(PacketCoFHBase payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  payload.getByteArray(sideCache);
  for (int i=0; i < 6; i++) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  if (!isServer) {
    facing=payload.getByte();
  }
 else {
    payload.getByte();
  }
}"
59516,"@Override public CoFHPacket getPacket(){
  CoFHPacket payload=super.getPacket();
  payload.addString(tileName);
  return payload;
}","@Override public PacketCoFHBase getPacket(){
  PacketCoFHBase payload=super.getPacket();
  payload.addString(tileName);
  return payload;
}"
59517,"public CoFHPacket getModePacket(){
  CoFHPacket payload=CoFHTileInfoPacket.newPacket(this);
  payload.addByte(TEProps.PacketID.MODE.ordinal());
  return payload;
}","public PacketCoFHBase getModePacket(){
  PacketCoFHBase payload=PacketTileInfo.newPacket(this);
  payload.addByte(TEProps.PacketID.MODE.ordinal());
  return payload;
}"
59518,"protected void handleFluidPacket(CoFHPacket payload){
}","protected void handleFluidPacket(PacketCoFHBase payload){
}"
59519,"@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  if (ServerHelper.isClientWorld(worldObj)) {
    tileName=payload.getString();
  }
 else {
    payload.getString();
  }
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  callNeighborTileChange();
}","@Override public void handleTilePacket(PacketCoFHBase payload,boolean isServer){
  if (ServerHelper.isClientWorld(worldObj)) {
    tileName=payload.getString();
  }
 else {
    payload.getString();
  }
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  callNeighborTileChange();
}"
59520,"@Override public void sendGuiNetworkData(Container container,ICrafting iCrafting){
  if (iCrafting instanceof EntityPlayer) {
    CoFHPacket guiPacket=getGuiPacket();
    if (guiPacket != null) {
      PacketHandler.sendTo(guiPacket,(EntityPlayer)iCrafting);
    }
  }
}","@Override public void sendGuiNetworkData(Container container,ICrafting iCrafting){
  if (iCrafting instanceof EntityPlayer) {
    PacketCoFHBase guiPacket=getGuiPacket();
    if (guiPacket != null) {
      PacketHandler.sendTo(guiPacket,(EntityPlayer)iCrafting);
    }
  }
}"
59521,"protected void handleGuiPacket(CoFHPacket payload){
}","protected void handleGuiPacket(PacketCoFHBase payload){
}"
59522,"public CoFHPacket getFluidPacket(){
  CoFHPacket payload=CoFHTileInfoPacket.newPacket(this);
  payload.addByte(TEProps.PacketID.FLUID.ordinal());
  return payload;
}","public PacketCoFHBase getFluidPacket(){
  PacketCoFHBase payload=PacketTileInfo.newPacket(this);
  payload.addByte(TEProps.PacketID.FLUID.ordinal());
  return payload;
}"
59523,"protected void handleModePacket(CoFHPacket payload){
}","protected void handleModePacket(PacketCoFHBase payload){
}"
59524,"public CoFHPacket getGuiPacket(){
  CoFHPacket payload=CoFHTileInfoPacket.newPacket(this);
  payload.addByte(TEProps.PacketID.GUI.ordinal());
  return payload;
}","public PacketCoFHBase getGuiPacket(){
  PacketCoFHBase payload=PacketTileInfo.newPacket(this);
  payload.addByte(TEProps.PacketID.GUI.ordinal());
  return payload;
}"
59525,"@Override public void handleTileInfoPacket(CoFHPacket payload,boolean isServer,EntityPlayer thePlayer){
switch (TEProps.PacketID.values()[payload.getByte()]) {
case GUI:
    handleGuiPacket(payload);
  return;
case FLUID:
handleFluidPacket(payload);
return;
case MODE:
handleModePacket(payload);
return;
default :
}
}","@Override public void handleTileInfoPacket(PacketCoFHBase payload,boolean isServer,EntityPlayer thePlayer){
switch (TEProps.PacketID.values()[payload.getByte()]) {
case GUI:
    handleGuiPacket(payload);
  return;
case FLUID:
handleFluidPacket(payload);
return;
case MODE:
handleModePacket(payload);
return;
default :
}
}"
59526,"@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean check){
  if (StringHelper.displayShiftForDetail && !StringHelper.isShiftKeyDown()) {
    list.add(StringHelper.shiftForDetails());
  }
  if (!StringHelper.isShiftKeyDown()) {
    return;
  }
  if (stack.stackTagCompound == null) {
    list.add(StringHelper.localize(""String_Node_Str""));
    return;
  }
  boolean lock=stack.stackTagCompound.getBoolean(""String_Node_Str"");
  if (lock) {
    list.add(StringHelper.localize(""String_Node_Str""));
  }
 else {
    list.add(StringHelper.localize(""String_Node_Str""));
  }
  list.add(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"");
  if (stack.stackTagCompound.hasKey(""String_Node_Str"")) {
    ItemStack stored=ItemHelper.readItemStackFromNBT(stack.stackTagCompound.getCompoundTag(""String_Node_Str""));
    list.add(""String_Node_Str"" + StringHelper.BRIGHT_GREEN + stored.stackSize+ ""String_Node_Str""+ StringHelper.getItemName(stored));
  }
}","@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean check){
  if (StringHelper.displayShiftForDetail && !StringHelper.isShiftKeyDown()) {
    list.add(StringHelper.shiftForDetails());
  }
  if (!StringHelper.isShiftKeyDown()) {
    return;
  }
  list.add(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + TileCache.SIZE[ItemHelper.getItemDamage(stack)]);
  if (stack.stackTagCompound == null) {
    list.add(StringHelper.localize(""String_Node_Str""));
    return;
  }
  boolean lock=stack.stackTagCompound.getBoolean(""String_Node_Str"");
  if (lock) {
    list.add(StringHelper.localize(""String_Node_Str""));
  }
 else {
    list.add(StringHelper.localize(""String_Node_Str""));
  }
  list.add(StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"");
  if (stack.stackTagCompound.hasKey(""String_Node_Str"")) {
    ItemStack stored=ItemHelper.readItemStackFromNBT(stack.stackTagCompound.getCompoundTag(""String_Node_Str""));
    list.add(""String_Node_Str"" + StringHelper.BRIGHT_GREEN + stored.stackSize+ ""String_Node_Str""+ StringHelper.getItemName(stored));
  }
}"
59527,"@Override public EnumRarity getRarity(ItemStack stack){
switch (BlockCache.Types.values()[stack.getItemDamage()]) {
case CREATIVE:
    return EnumRarity.epic;
case RESONANT:
  return EnumRarity.rare;
case REINFORCED:
return EnumRarity.uncommon;
default :
return EnumRarity.common;
}
}","@Override public EnumRarity getRarity(ItemStack stack){
switch (BlockCache.Types.values()[ItemHelper.getItemDamage(stack)]) {
case CREATIVE:
    return EnumRarity.epic;
case RESONANT:
  return EnumRarity.rare;
case REINFORCED:
return EnumRarity.uncommon;
default :
return EnumRarity.common;
}
}"
59528,"@Override public String getUnlocalizedName(ItemStack stack){
  return ""String_Node_Str"" + BlockCache.NAMES[stack.getItemDamage()] + ""String_Node_Str"";
}","@Override public String getUnlocalizedName(ItemStack stack){
  return ""String_Node_Str"" + BlockCache.NAMES[ItemHelper.getItemDamage(stack)] + ""String_Node_Str"";
}"
59529,"public void handleConfigSync(PacketCoFHBase payload){
  TileCell.enableSecurity=payload.getBool();
  TileWorkbench.enableSecurity=payload.getBool();
  TileActivator.enableSecurity=payload.getBool();
  TileBreaker.enableSecurity=payload.getBool();
  TileNullifier.enableSecurity=payload.getBool();
  TileDynamoBase.enableSecurity=payload.getBool();
  for (int i=0; i < TileMachineBase.enableSecurity.length; i++) {
    TileMachineBase.enableSecurity[i]=payload.getBool();
  }
  TileStrongbox.enableSecurity=payload.getBool();
  ItemSatchel.enableSecurity=payload.getBool();
  log.info(""String_Node_Str"");
}","public void handleConfigSync(PacketCoFHBase payload){
  FMLEventHandler.instance.handleIdMappingEvent(null);
  TileCell.enableSecurity=payload.getBool();
  TileWorkbench.enableSecurity=payload.getBool();
  TileActivator.enableSecurity=payload.getBool();
  TileBreaker.enableSecurity=payload.getBool();
  TileNullifier.enableSecurity=payload.getBool();
  TileDynamoBase.enableSecurity=payload.getBool();
  for (int i=0; i < TileMachineBase.enableSecurity.length; i++) {
    TileMachineBase.enableSecurity[i]=payload.getBool();
  }
  TileStrongbox.enableSecurity=payload.getBool();
  ItemSatchel.enableSecurity=payload.getBool();
  log.info(""String_Node_Str"");
}"
59530,"public void resetClientConfigs(){
  TileCell.configure();
  TileWorkbench.configure();
  TileActivator.configure();
  TileBreaker.configure();
  TileNullifier.configure();
  TileDynamoBase.configure();
  TileMachineBase.configure();
  TileStrongbox.configure();
  ItemSatchel.configure();
  log.info(StringHelper.localize(""String_Node_Str""));
}","public void resetClientConfigs(){
  TileCell.configure();
  TileWorkbench.configure();
  TileActivator.configure();
  TileBreaker.configure();
  TileNullifier.configure();
  TileDynamoBase.configure();
  TileMachineBase.configure();
  TileStrongbox.configure();
  ItemSatchel.configure();
  FMLEventHandler.instance.handleIdMappingEvent(null);
  log.info(StringHelper.localize(""String_Node_Str""));
}"
59531,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int hitSide,float hitX,float hitY,float hitZ){
  if (super.onBlockActivated(world,x,y,z,player,hitSide,hitX,hitY,hitZ)) {
    return true;
  }
  if (ServerHelper.isClientWorld(world)) {
    return true;
  }
  TileCache tile=(TileCache)world.getTileEntity(x,y,z);
  if (ItemHelper.isPlayerHoldingNothing(player) && player.isSneaking()) {
    tile.toggleLock();
    return true;
  }
  ItemStack heldStack=player.getCurrentEquippedItem();
  ItemStack ret=tile.insertItem(ForgeDirection.UNKNOWN,heldStack,false);
  if (!player.capabilities.isCreativeMode && ret != heldStack) {
    player.inventory.setInventorySlotContents(player.inventory.currentItem,ret);
  }
  return true;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int hitSide,float hitX,float hitY,float hitZ){
  if (super.onBlockActivated(world,x,y,z,player,hitSide,hitX,hitY,hitZ)) {
    if (Utils.isHoldingDebugger(player) || Utils.isHoldingMultimeter(player) || Utils.isHoldingUsableWrench(player,x,y,z)) {
      return true;
    }
  }
  TileCache tile=(TileCache)world.getTileEntity(x,y,z);
  if (ItemHelper.isPlayerHoldingNothing(player)) {
    if (player.isSneaking()) {
      tile.toggleLock();
      return true;
    }
    if (tile.getStoredItemType() != null) {
      for (int i=0; i < player.inventory.getSizeInventory(); i++) {
        if (tile.insertItem(ForgeDirection.UNKNOWN,player.inventory.getStackInSlot(i),true) != player.inventory.getStackInSlot(i)) {
          player.inventory.setInventorySlotContents(i,tile.insertItem(ForgeDirection.UNKNOWN,player.inventory.getStackInSlot(i),false));
        }
      }
    }
    return true;
  }
  ItemStack heldStack=player.getCurrentEquippedItem();
  ItemStack ret=tile.insertItem(ForgeDirection.UNKNOWN,heldStack,false);
  if (!player.capabilities.isCreativeMode && ret != heldStack) {
    player.inventory.setInventorySlotContents(player.inventory.currentItem,ret);
  }
  return false;
}"
59532,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  RedstoneControlHelper.getControlFromNBT(tag);
  int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
  byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
  sideCache[0]=storedSideCache[0];
  sideCache[1]=storedSideCache[1];
  sideCache[facing]=storedSideCache[storedFacing];
  sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
  sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
  sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
  for (int i=0; i < 6; i++) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  energySend=(tag.getInteger(""String_Node_Str"") * MAX_SEND[getType()]) / 1000;
  energyReceive=(tag.getInteger(""String_Node_Str"") * MAX_RECEIVE[getType()]) / 1000;
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
  byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
  sideCache[0]=storedSideCache[0];
  sideCache[1]=storedSideCache[1];
  sideCache[facing]=storedSideCache[storedFacing];
  sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
  sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
  sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
  for (int i=0; i < 6; i++) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  energySend=(tag.getInteger(""String_Node_Str"") * MAX_SEND[getType()]) / 1000;
  energyReceive=(tag.getInteger(""String_Node_Str"") * MAX_RECEIVE[getType()]) / 1000;
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}"
59533,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  if (augmentRedstoneControl) {
    RedstoneControlHelper.getControlFromNBT(tag);
  }
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  if (augmentRedstoneControl) {
    rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  }
}"
59534,"@Override public int[] getAccessibleSlotsFromSide(int side){
  return SLOTS;
}","@Override public int[] getAccessibleSlotsFromSide(int side){
  if (frequency == -1 || !redstoneControlOrDisable() || !canSendItems() || inventory[0] != null) {
    return TEProps.EMPTY_INVENTORY;
  }
  return SLOTS;
}"
59535,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  RedstoneControlHelper.getControlFromNBT(tag);
  frequency=tag.getInteger(""String_Node_Str"");
  modeItem=tag.getByte(""String_Node_Str"");
  modeFluid=tag.getByte(""String_Node_Str"");
  modeEnergy=tag.getByte(""String_Node_Str"");
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  frequency=tag.getInteger(""String_Node_Str"");
  modeItem=tag.getByte(""String_Node_Str"");
  modeFluid=tag.getByte(""String_Node_Str"");
  modeEnergy=tag.getByte(""String_Node_Str"");
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}"
59536,"@Override public boolean postInit(){
  if (enable[Types.ILLUMINATOR.ordinal()]) {
    TransposerManager.addTEFillRecipe(2000,BlockFrame.frameIlluminator,illuminator,new FluidStack(TFFluids.fluidGlowstone,1000),false);
  }
  if (enable[Types.LAMP_BASIC.ordinal()]) {
    GameRegistry.addRecipe(new ShapedOreRecipe(lampBasic,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'L',""String_Node_Str"",'S',""String_Node_Str""}));
  }
  return true;
}","@Override public boolean postInit(){
  if (enable[Types.ILLUMINATOR.ordinal()]) {
    TransposerManager.addTEFillRecipe(2000,BlockFrame.frameIlluminator,illuminator,new FluidStack(TFFluids.fluidGlowstone,1000),false);
  }
  if (enable[Types.LAMP_BASIC.ordinal()]) {
    GameRegistry.addRecipe(new ShapedOreRecipe(lampBasic,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'L',""String_Node_Str"",'S',""String_Node_Str""}));
    GameRegistry.addRecipe(new ShapedOreRecipe(lampBasicAlt,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'L',""String_Node_Str"",'S',""String_Node_Str""}));
  }
  return true;
}"
59537,"@Override public boolean initialize(){
  TileLight.initialize();
  illuminator=new ItemStack(this,1,0);
  lampBasic=new ItemStack(this,1,1);
  GameRegistry.registerCustomItemStack(""String_Node_Str"",illuminator);
  GameRegistry.registerCustomItemStack(""String_Node_Str"",lampBasic);
  return true;
}","@Override public boolean initialize(){
  TileLight.initialize();
  illuminator=new ItemStack(this,1,0);
  lampBasic=new ItemStack(this,1,1);
  lampBasicAlt=new ItemStack(this,1,2);
  GameRegistry.registerCustomItemStack(""String_Node_Str"",illuminator);
  GameRegistry.registerCustomItemStack(""String_Node_Str"",lampBasic);
  GameRegistry.registerCustomItemStack(""String_Node_Str"",lampBasicAlt);
  return true;
}"
59538,"public static void configure(){
  for (int i=0; i < BlockMachine.Types.values().length; i++) {
    String name=StringHelper.titleCase(BlockMachine.NAMES[i]);
    String comment=""String_Node_Str"" + name + ""String_Node_Str"";
    enableSecurity[i]=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"",enableSecurity[i],comment);
  }
}","public static void configure(){
  for (int i=0; i < BlockMachine.Types.values().length; i++) {
    String name=StringHelper.titleCase(BlockMachine.NAMES[i]);
    String comment=""String_Node_Str"" + name + ""String_Node_Str"";
    enableSecurity[i]=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"",enableSecurity[i],comment);
    comment=""String_Node_Str"" + name + ""String_Node_Str"";
    enableSound[i]=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"",enableSound[i],comment);
  }
}"
59539,"public ItemBlockSponge(Block block){
  super(block);
  setHasSubtypes(true);
  setMaxDamage(0);
}","public ItemBlockSponge(Block block){
  super(block);
  setHasSubtypes(true);
  setMaxDamage(0);
  setMaxStackSize(1);
  setNoRepair();
}"
59540,"@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (!(tile instanceof TileLight)) {
    return false;
  }
  TileLight theTile=(TileLight)tile;
  int bMeta=world.getBlockMetadata(x,y,z);
  RenderUtils.preWorldRender(world,x,y,z);
  int color=theTile.getColorMultiplier();
  boolean modified=theTile.modified;
  boolean active=theTile.getLightValue() > 0;
switch (BlockLight.Types.values()[bMeta]) {
case ILLUMINATOR:
    return renderWorldIlluminator(color,modified,x,y,z);
case LAMP_BASIC:
  return renderWorldLampBasic(color,active,x,y,z);
default :
return false;
}
}","@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (!(tile instanceof TileLight)) {
    return false;
  }
  TileLight theTile=(TileLight)tile;
  int bMeta=world.getBlockMetadata(x,y,z);
  RenderUtils.preWorldRender(world,x,y,z);
  int color=theTile.getColorMultiplier();
  boolean modified=theTile.modified;
  boolean active=theTile.getLightValue() > 0;
switch (BlockLight.Types.values()[bMeta]) {
case ILLUMINATOR:
    return renderWorldIlluminator(color,modified,x,y,z);
case LAMP_BASIC:
  return renderWorldLampHalo(color,active,x,y,z);
case LAMP_BASIC_ALT:
return renderWorldLampBasic(color,active,x,y,z);
default :
return false;
}
}"
59541,"@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  GL11.glPushMatrix();
  double offset=-0.5;
  if (type == ItemRenderType.EQUIPPED || type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    offset=0;
  }
  int metadata=item.getItemDamage();
  int color=0xFFFFFFFF;
  if (item.hasTagCompound()) {
    color=item.getTagCompound().getInteger(""String_Node_Str"");
    color=(color << 8) + 0xFF;
  }
  RenderUtils.preItemRender();
  RenderHelper.setBlockTextureSheet();
switch (BlockLight.Types.values()[metadata]) {
case ILLUMINATOR:
    renderItemIlluminator(color,item.hasTagCompound(),offset);
  break;
case LAMP_BASIC:
renderItemLampBasic(color,offset);
break;
}
RenderUtils.postItemRender();
GL11.glPopMatrix();
}","@Override public void renderItem(ItemRenderType type,ItemStack item,Object... data){
  GL11.glPushMatrix();
  double offset=-0.5;
  if (type == ItemRenderType.EQUIPPED || type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
    offset=0;
  }
  int metadata=item.getItemDamage();
  int color=0xFFFFFFFF;
  if (item.hasTagCompound()) {
    color=item.getTagCompound().getInteger(""String_Node_Str"");
    color=(color << 8) + 0xFF;
  }
  RenderUtils.preItemRender();
  RenderHelper.setBlockTextureSheet();
switch (BlockLight.Types.values()[metadata]) {
case ILLUMINATOR:
    renderItemIlluminator(color,item.hasTagCompound(),offset);
  break;
case LAMP_BASIC:
case LAMP_BASIC_ALT:
renderItemLampBasic(color,offset);
break;
}
RenderUtils.postItemRender();
GL11.glPopMatrix();
}"
59542,"public boolean renderWorldLampBasic(int color,boolean active,double x,double y,double z){
  if (BlockCoFHBase.renderPass == 0) {
    modelFrame[1].setColour(color);
    renderFrame(1,x,y,z);
    modelFrame[1].setColour(0xFFFFFFFF);
    return true;
  }
 else   if (active) {
    modelHalo[1].setColour(color - 0x80);
    renderHalo(1,x,y,z);
    modelHalo[1].setColour(0xFFFFFFFF);
  }
  return active;
}","public boolean renderWorldLampBasic(int color,boolean active,double x,double y,double z){
  if (BlockCoFHBase.renderPass == 0) {
    modelFrame[1].setColour(color);
    renderFrame(1,x,y,z);
    modelFrame[1].setColour(0xFFFFFFFF);
    return true;
  }
  return BlockCoFHBase.renderPass == 0;
}"
59543,"public static void addDefaultRecipes(){
  boolean recipeNetherrack=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",true);
  boolean recipeBlazeRod=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",true);
  int tweakNetherrackRF=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF * 6 / 10);
  int tweakBlazeRodRF=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF / 10);
  if (recipeNetherrack) {
    if (tweakNetherrackRF >= TEProps.lavaRF / 10 && tweakNetherrackRF <= TEProps.lavaRF) {
      addTERecipe(tweakNetherrackRF,new ItemStack(Blocks.netherrack),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
    }
 else {
      addTERecipe(TEProps.lavaRF * 6 / 10,new ItemStack(Blocks.netherrack),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
      ThermalExpansion.log.info(""String_Node_Str"");
      ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF * 6 / 10);
    }
  }
  if (recipeBlazeRod) {
    if (tweakBlazeRodRF >= TEProps.lavaRF / 20 && tweakBlazeRodRF <= TEProps.lavaRF) {
      addTERecipe(tweakBlazeRodRF,new ItemStack(Items.blaze_rod),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME / 4));
    }
 else {
      addTERecipe(TEProps.lavaRF / 10,new ItemStack(Items.blaze_rod),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME / 4));
      ThermalExpansion.log.info(""String_Node_Str"");
      ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF / 10);
    }
  }
  int defaultCost=TEProps.lavaRF * 8 / 5;
  addTERecipe(defaultCost,new ItemStack(Blocks.cobblestone),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(defaultCost,new ItemStack(Blocks.stone),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(defaultCost,new ItemStack(Blocks.obsidian),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(800,new ItemStack(Items.snowball,4),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME / 2));
  addTERecipe(800,new ItemStack(Blocks.snow),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME / 2));
  addTERecipe(1600,new ItemStack(Blocks.ice),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(8000,new ItemStack(Items.redstone),new FluidStack(TFFluids.fluidRedstone,100));
  addTERecipe(8000 * 9,new ItemStack(Blocks.redstone_block),new FluidStack(TFFluids.fluidRedstone,100 * 9));
  addTERecipe(20000,new ItemStack(Items.glowstone_dust),new FluidStack(TFFluids.fluidGlowstone,250));
  addTERecipe(20000 * 4,new ItemStack(Blocks.glowstone),new FluidStack(TFFluids.fluidGlowstone,1000));
  addTERecipe(20000,new ItemStack(Items.ender_pearl),new FluidStack(TFFluids.fluidEnder,250));
  addTERecipe(8000,TFItems.dustPyrotheum,new FluidStack(TFFluids.fluidPyrotheum,100));
  addTERecipe(8000,TFItems.dustCryotheum,new FluidStack(TFFluids.fluidCryotheum,100));
  addTERecipe(8000,TFItems.dustCoal,new FluidStack(TFFluids.fluidCoal,100));
}","public static void addDefaultRecipes(){
  boolean recipeNetherrack=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",true);
  boolean recipeBlazeRod=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",true);
  int tweakNetherrackRF=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF * 6 / 10);
  int tweakBlazeRodRF=ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF / 10);
  if (recipeNetherrack) {
    if (tweakNetherrackRF >= TEProps.lavaRF / 10 && tweakNetherrackRF <= TEProps.lavaRF) {
      addTERecipe(tweakNetherrackRF,new ItemStack(Blocks.netherrack),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
    }
 else {
      addTERecipe(TEProps.lavaRF * 6 / 10,new ItemStack(Blocks.netherrack),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
      ThermalExpansion.log.info(""String_Node_Str"");
      ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF * 6 / 10);
    }
  }
  if (recipeBlazeRod) {
    if (tweakBlazeRodRF >= TEProps.lavaRF / 20 && tweakBlazeRodRF <= TEProps.lavaRF) {
      addTERecipe(tweakBlazeRodRF,new ItemStack(Items.blaze_rod),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME / 4));
    }
 else {
      addTERecipe(TEProps.lavaRF / 10,new ItemStack(Items.blaze_rod),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME / 4));
      ThermalExpansion.log.info(""String_Node_Str"");
      ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",TEProps.lavaRF / 10);
    }
  }
  int defaultCost=TEProps.lavaRF * 8 / 5;
  addTERecipe(defaultCost,new ItemStack(Blocks.cobblestone),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(defaultCost,new ItemStack(Blocks.stone),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(defaultCost,new ItemStack(Blocks.obsidian),new FluidStack(FluidRegistry.LAVA,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(200,new ItemStack(Items.snowball),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME / 8));
  addTERecipe(800,new ItemStack(Blocks.snow),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME / 2));
  addTERecipe(1600,new ItemStack(Blocks.ice),new FluidStack(FluidRegistry.WATER,FluidContainerRegistry.BUCKET_VOLUME));
  addTERecipe(8000,new ItemStack(Items.redstone),new FluidStack(TFFluids.fluidRedstone,100));
  addTERecipe(8000 * 9,new ItemStack(Blocks.redstone_block),new FluidStack(TFFluids.fluidRedstone,100 * 9));
  addTERecipe(20000,new ItemStack(Items.glowstone_dust),new FluidStack(TFFluids.fluidGlowstone,250));
  addTERecipe(20000 * 4,new ItemStack(Blocks.glowstone),new FluidStack(TFFluids.fluidGlowstone,1000));
  addTERecipe(20000,new ItemStack(Items.ender_pearl),new FluidStack(TFFluids.fluidEnder,250));
  addTERecipe(8000,TFItems.dustPyrotheum,new FluidStack(TFFluids.fluidPyrotheum,100));
  addTERecipe(8000,TFItems.dustCryotheum,new FluidStack(TFFluids.fluidCryotheum,100));
  addTERecipe(8000,TFItems.dustCoal,new FluidStack(TFFluids.fluidCoal,100));
}"
59544,"public ItemStack insertItem(ForgeDirection from,ItemStack stack,boolean simulate){
  if (stack == null) {
    return null;
  }
  if (storedStack == null) {
    if (!simulate) {
      setStoredItemType(stack,stack.stackSize);
    }
    return null;
  }
  if (getStoredCount() == SIZE[type]) {
    return stack;
  }
  if (ItemHelper.itemsEqualWithMetadata(stack,storedStack,true)) {
    if (getStoredCount() + stack.stackSize > SIZE[type]) {
      ItemStack retStack=ItemHelper.cloneStack(stack,SIZE[type] - getStoredCount());
      if (!simulate) {
        setStoredItemCount(SIZE[type]);
      }
      return retStack;
    }
    if (!simulate) {
      setStoredItemCount(getStoredCount() + stack.stackSize);
    }
    return null;
  }
  return stack;
}","public ItemStack insertItem(ForgeDirection from,ItemStack stack,boolean simulate){
  if (stack == null) {
    return null;
  }
  if (storedStack == null) {
    if (!simulate) {
      setStoredItemType(stack,stack.stackSize);
    }
    return null;
  }
  if (getStoredCount() == SIZE[type]) {
    return stack;
  }
  if (ItemHelper.itemsIdentical(stack,storedStack)) {
    if (getStoredCount() + stack.stackSize > SIZE[type]) {
      ItemStack retStack=ItemHelper.cloneStack(stack,SIZE[type] - getStoredCount());
      if (!simulate) {
        setStoredItemCount(SIZE[type]);
      }
      return retStack;
    }
    if (!simulate) {
      setStoredItemCount(getStoredCount() + stack.stackSize);
    }
    return null;
  }
  return stack;
}"
59545,"@Override public boolean isSideSolid(IBlockAccess world,int x,int y,int z,ForgeDirection side){
  TileEntity te=world.getTileEntity(x,y,z);
  if (!(te instanceof TileDynamoBase)) {
    return false;
  }
  TileDynamoBase tile=(TileDynamoBase)te;
  return tile.facing == BlockHelper.SIDE_OPPOSITE[side.ordinal()];
}","@Override public boolean isSideSolid(IBlockAccess world,int x,int y,int z,ForgeDirection side){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (!(tile instanceof TileDynamoBase)) {
    return false;
  }
  TileDynamoBase theTile=(TileDynamoBase)tile;
  return theTile.facing == BlockHelper.SIDE_OPPOSITE[side.ordinal()];
}"
59546,"@Override public void onUpdate(ItemStack stack,World world,Entity entity,int slot,boolean isCurrentItem){
  if (slot > 8 || !isActive(stack) || isCurrentItem) {
    return;
  }
  InventoryPlayer playerInv=((EntityPlayer)entity).inventory;
  IEnergyContainerItem containerItem;
  int toSend=Math.min(getEnergyStored(stack),SEND[ItemHelper.getItemDamage(stack)]);
  if (EnergyHelper.isEnergyContainerItem(playerInv.getCurrentItem())) {
    containerItem=(IEnergyContainerItem)playerInv.mainInventory[playerInv.currentItem].getItem();
    extractEnergy(stack,containerItem.receiveEnergy(playerInv.mainInventory[playerInv.currentItem],toSend,false),false);
  }
}","@Override public void onUpdate(ItemStack stack,World world,Entity entity,int slot,boolean isCurrentItem){
  if (slot > 8 || !isActive(stack) || isCurrentItem) {
    return;
  }
  InventoryPlayer playerInv=((EntityPlayer)entity).inventory;
  IEnergyContainerItem containerItem;
  int toSend=Math.min(getEnergyStored(stack),SEND[ItemHelper.getItemDamage(stack)]);
  ItemStack currentItem=playerInv.getCurrentItem();
  if (EnergyHelper.isEnergyContainerItem(currentItem)) {
    containerItem=(IEnergyContainerItem)currentItem.getItem();
    extractEnergy(stack,containerItem.receiveEnergy(currentItem,toSend,false),false);
  }
}"
59547,"public static int addToInventory(IInventory theTile,int from,ItemStack stack){
  if (!InventoryHelper.isInsertion(theTile)) {
    return stack.stackSize;
  }
  stack=InventoryHelper.addToInsertion(theTile,from,stack);
  return stack == null ? 0 : stack.stackSize;
}","public static int addToInventory(IInventory tile,int from,ItemStack stack){
  if (!InventoryHelper.isInsertion(tile)) {
    return stack.stackSize;
  }
  stack=InventoryHelper.addToInsertion(tile,from,stack);
  return stack == null ? 0 : stack.stackSize;
}"
59548,"private static int addToPipeTile_do(TileEntity theTile,int side,ItemStack stack){
  if (theTile instanceof IPipeTile) {
    int used=((IPipeTile)theTile).injectItem(stack,true,ForgeDirection.VALID_DIRECTIONS[side ^ 1]);
    return used;
  }
  return 0;
}","private static int addToPipeTile_do(TileEntity tile,int side,ItemStack stack){
  if (tile instanceof IPipeTile) {
    int used=((IPipeTile)tile).injectItem(stack,true,ForgeDirection.VALID_DIRECTIONS[side ^ 1]);
    return used;
  }
  return 0;
}"
59549,"public static boolean isAdjacentInventory(int x,int y,int z,World worldObj,int side){
  TileEntity theTile=BlockHelper.getAdjacentTileEntity(worldObj,x,y,z,side);
  return isInventory(theTile,side);
}","public static boolean isAdjacentInventory(int x,int y,int z,World worldObj,int side){
  TileEntity tile=BlockHelper.getAdjacentTileEntity(worldObj,x,y,z,side);
  return isInventory(tile,side);
}"
59550,"public static int canAddToInventory(int xCoord,int yCoord,int zCoord,World worldObj,int from,ItemStack stack){
  TileEntity theTile=worldObj.getTileEntity(xCoord,yCoord,zCoord);
  if (!InventoryHelper.isInventory(theTile)) {
    return stack.stackSize;
  }
  stack=InventoryHelper.simulateInsertItemStackIntoInventory((IInventory)theTile,stack,from ^ 1);
  return stack == null ? 0 : stack.stackSize;
}","public static int canAddToInventory(int xCoord,int yCoord,int zCoord,World worldObj,int from,ItemStack stack){
  TileEntity tile=worldObj.getTileEntity(xCoord,yCoord,zCoord);
  if (!InventoryHelper.isInventory(tile)) {
    return stack.stackSize;
  }
  stack=InventoryHelper.simulateInsertItemStackIntoInventory((IInventory)tile,stack,from ^ 1);
  return stack == null ? 0 : stack.stackSize;
}"
59551,"void loadWorldGeneration(){
}","void loadWorldGeneration(){
  worldGen=new File(CoFHProps.configDir,""String_Node_Str"");
  if (!worldGen.exists()) {
    try {
      worldGen.createNewFile();
      CoreUtils.copyFileUsingStream(worldGenInternal,worldGen);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
}"
59552,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int hitSide,float hitX,float hitY,float hitZ){
  if (Utils.isHoldingMultimeter(player,x,y,z)) {
    return true;
  }
  if (player.isSneaking()) {
    if (Utils.isHoldingUsableWrench(player,x,y,z)) {
      if (ServerHelper.isServerWorld(world) && canDismantle(player,world,x,y,z)) {
        dismantleBlock(player,world,x,y,z,false);
      }
      Utils.usedWrench(player,x,y,z);
      return true;
    }
    return false;
  }
  TileTEBase tile=(TileTEBase)world.getTileEntity(x,y,z);
  if (tile == null) {
    return false;
  }
  if (Utils.isHoldingUsableWrench(player,x,y,z)) {
    if (ServerHelper.isServerWorld(world)) {
      tile.onWrench(player,hitSide);
    }
    Utils.usedWrench(player,x,y,z);
    return true;
  }
  return tile.openGui(player);
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int hitSide,float hitX,float hitY,float hitZ){
  if (Utils.isHoldingDebugger(player)) {
    return true;
  }
  if (Utils.isHoldingMultimeter(player)) {
    return true;
  }
  if (player.isSneaking()) {
    if (Utils.isHoldingUsableWrench(player,x,y,z)) {
      if (ServerHelper.isServerWorld(world) && canDismantle(player,world,x,y,z)) {
        dismantleBlock(player,world,x,y,z,false);
      }
      Utils.usedWrench(player,x,y,z);
      return true;
    }
    return false;
  }
  TileTEBase tile=(TileTEBase)world.getTileEntity(x,y,z);
  if (tile == null) {
    return false;
  }
  if (Utils.isHoldingUsableWrench(player,x,y,z)) {
    if (ServerHelper.isServerWorld(world)) {
      tile.onWrench(player,hitSide);
    }
    Utils.usedWrench(player,x,y,z);
    return true;
  }
  return tile.openGui(player);
}"
59553,"@Override public ArrayList<ItemStack> dismantleBlock(EntityPlayer player,World world,int x,int y,int z,boolean returnDrops){
  NBTTagCompound tag=getItemStackTag(world,x,y,z);
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile instanceof TileWorkbench) {
    ((TileWorkbench)tile).inventory=new ItemStack[((TileWorkbench)tile).inventory.length];
  }
  return super.dismantleBlock(player,tag,world,x,y,z,returnDrops,false);
}","@Override public ArrayList<ItemStack> dismantleBlock(EntityPlayer player,World world,int x,int y,int z,boolean returnDrops){
  NBTTagCompound tag=getItemStackTag(world,x,y,z);
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile instanceof TileWorkbench) {
    ((TileWorkbench)tile).inventory=new ItemStack[((TileWorkbench)tile).inventory.length];
  }
 else   if (tile instanceof TileAugmentable) {
    if (tag == null) {
      tag=new NBTTagCompound();
    }
    TileAugmentable theTile=(TileAugmentable)tile;
    ReconfigurableHelper.setItemStackTagReconfig(tag,theTile);
    tag.setInteger(""String_Node_Str"",theTile.getEnergyStored(ForgeDirection.UNKNOWN));
    theTile.writeAugmentsToNBT(tag);
  }
  return super.dismantleBlock(player,tag,world,x,y,z,returnDrops,false);
}"
59554,"@Override public NBTTagCompound getItemStackTag(World world,int x,int y,int z){
  NBTTagCompound tag=super.getItemStackTag(world,x,y,z);
  TileDynamoBase tile=(TileDynamoBase)world.getTileEntity(x,y,z);
  if (tile != null) {
    if (tag == null) {
      tag=new NBTTagCompound();
    }
    tag.setInteger(""String_Node_Str"",tile.getEnergyStored(ForgeDirection.UNKNOWN));
  }
  return tag;
}","@Override public NBTTagCompound getItemStackTag(World world,int x,int y,int z){
  NBTTagCompound tag=super.getItemStackTag(world,x,y,z);
  TileDynamoBase tile=(TileDynamoBase)world.getTileEntity(x,y,z);
  if (tile != null) {
    if (tag == null) {
      tag=new NBTTagCompound();
    }
    tag.setInteger(""String_Node_Str"",tile.getEnergyStored(ForgeDirection.UNKNOWN));
    tile.writeAugmentsToNBT(tag);
  }
  return tag;
}"
59555,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  RedstoneControlHelper.getControlFromNBT(tag);
  frequency=tag.getInteger(""String_Node_Str"");
  modeItem=tag.getByte(""String_Node_Str"");
  modeFluid=tag.getByte(""String_Node_Str"");
  modeEnergy=tag.getByte(""String_Node_Str"");
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  RedstoneControlHelper.getControlFromNBT(tag);
  frequency=tag.getInteger(""String_Node_Str"");
  modeItem=tag.getByte(""String_Node_Str"");
  modeFluid=tag.getByte(""String_Node_Str"");
  modeEnergy=tag.getByte(""String_Node_Str"");
  markDirty();
  sendUpdatePacket(Side.CLIENT);
}"
59556,"public static void initialize(){
  defaultSideConfig[TYPE]=new SideConfig();
  defaultSideConfig[TYPE].numGroup=3;
  defaultSideConfig[TYPE].slotGroups=new int[][]{{},{0},{1}};
  defaultSideConfig[TYPE].allowInsertion=new boolean[]{false,true,false};
  defaultSideConfig[TYPE].allowExtraction=new boolean[]{false,true,true};
  defaultSideConfig[TYPE].sideTex=new int[]{0,1,4};
  defaultSideConfig[TYPE].defaultSides=new byte[]{1,1,2,2,2,2};
  int maxPower=MathHelper.clampI(ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",400),100,500);
  ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",maxPower);
  defaultEnergyConfig[TYPE]=new EnergyConfig();
  defaultEnergyConfig[TYPE].setParams(1,maxPower,Math.max(480000,maxPower * 1200));
  GameRegistry.registerTileEntity(TileCharger.class,""String_Node_Str"");
}","public static void initialize(){
  defaultSideConfig[TYPE]=new SideConfig();
  defaultSideConfig[TYPE].numGroup=3;
  defaultSideConfig[TYPE].slotGroups=new int[][]{{},{0},{1}};
  defaultSideConfig[TYPE].allowInsertion=new boolean[]{false,true,false};
  defaultSideConfig[TYPE].allowExtraction=new boolean[]{false,true,true};
  defaultSideConfig[TYPE].sideTex=new int[]{0,1,4};
  defaultSideConfig[TYPE].defaultSides=new byte[]{1,1,2,2,2,2};
  int maxPower=MathHelper.clampI(ThermalExpansion.config.get(""String_Node_Str"",""String_Node_Str"",10000),100,20000);
  ThermalExpansion.config.set(""String_Node_Str"",""String_Node_Str"",maxPower);
  defaultEnergyConfig[TYPE]=new EnergyConfig();
  defaultEnergyConfig[TYPE].setParams(1,maxPower,Math.max(480000,maxPower * 1200));
  GameRegistry.registerTileEntity(TileCharger.class,""String_Node_Str"");
}"
59557,"@Override public void placeAir(){
  if (ServerHelper.isClientWorld(worldObj)) {
    return;
  }
  if (fullOnPlace) {
    return;
  }
  Block query;
  int queryMeta;
  Fluid queryFluid;
  int bucketCounter=0;
  for (int i=xCoord - 1; i <= xCoord + 1; i++) {
    for (int j=yCoord - 1; j <= yCoord + 1; j++) {
      for (int k=zCoord - 1; k <= zCoord + 1; k++) {
        query=worldObj.getBlock(i,j,k);
        queryMeta=worldObj.getBlockMetadata(i,j,k);
        if (queryMeta == 0) {
          queryFluid=FluidHelper.lookupFluidForBlock(query);
          if (!full && queryFluid != null) {
            if (fluid == null) {
              fluid=new FluidStack(queryFluid,1000);
              bucketCounter=1;
              worldObj.setBlock(i,j,k,TEBlocks.blockAirBarrier,0,3);
            }
 else             if (fluid.fluidID == queryFluid.getID()) {
              bucketCounter++;
              worldObj.setBlock(i,j,k,TEBlocks.blockAirBarrier,0,3);
            }
          }
        }
 else         if (query.isAir(worldObj,i,j,k) || query.getMaterial().isLiquid()) {
          worldObj.setBlock(i,j,k,TEBlocks.blockAirBarrier,0,3);
        }
      }
    }
  }
  if (fluid != null) {
    fluid.amount=bucketCounter * 1000;
    full=true;
  }
}","@Override public void placeAir(){
  if (ServerHelper.isClientWorld(worldObj)) {
    return;
  }
  if (fullOnPlace) {
    return;
  }
  Block query;
  int queryMeta;
  Fluid queryFluid;
  int bucketCounter=0;
  for (int i=xCoord - 1; i <= xCoord + 1; i++) {
    for (int j=yCoord - 1; j <= yCoord + 1; j++) {
      for (int k=zCoord - 1; k <= zCoord + 1; k++) {
        query=worldObj.getBlock(i,j,k);
        queryMeta=worldObj.getBlockMetadata(i,j,k);
        if (queryMeta == 0) {
          queryFluid=FluidHelper.lookupFluidForBlock(query);
          if (!full && queryFluid != null) {
            if (fluid == null) {
              fluid=new FluidStack(queryFluid,1000);
              bucketCounter=1;
              worldObj.setBlock(i,j,k,TEBlocks.blockAirBarrier,0,3);
            }
 else             if (fluid.fluidID == queryFluid.getID()) {
              bucketCounter++;
              worldObj.setBlock(i,j,k,TEBlocks.blockAirBarrier,0,3);
            }
          }
 else           if (query.isAir(worldObj,i,j,k)) {
            worldObj.setBlock(i,j,k,TEBlocks.blockAirBarrier,0,3);
          }
        }
 else         if (query.isAir(worldObj,i,j,k) || query.getMaterial().isLiquid()) {
          worldObj.setBlock(i,j,k,TEBlocks.blockAirBarrier,0,3);
        }
      }
    }
  }
  if (fluid != null) {
    fluid.amount=bucketCounter * 1000;
    full=true;
  }
}"
59558,"@Override public void readFromNBT(NBTTagCompound nbt){
  type=nbt.getByte(""String_Node_Str"");
  enchant=nbt.getByte(""String_Node_Str"");
  facing=nbt.getByte(""String_Node_Str"");
  if (type > 0) {
    inventory=new ItemStack[CoFHProps.STORAGE_SIZE[2 * type + enchant]];
  }
 else {
    inventory=new ItemStack[1];
  }
  super.readFromNBT(nbt);
}","@Override public void readFromNBT(NBTTagCompound nbt){
  type=nbt.getByte(""String_Node_Str"");
  enchant=nbt.getByte(""String_Node_Str"");
  facing=nbt.getByte(""String_Node_Str"");
  if (type > 0) {
    inventory=new ItemStack[CoFHProps.STORAGE_SIZE[getStorageIndex()]];
  }
 else {
    inventory=new ItemStack[1];
  }
  super.readFromNBT(nbt);
}"
59559,"@Override public int[] getAccessibleSlotsFromSide(int side){
  return access.isPublic() ? CoFHProps.SLOTS[type] : TEProps.EMPTY_INVENTORY;
}","@Override public int[] getAccessibleSlotsFromSide(int side){
  return access.isPublic() ? CoFHProps.SLOTS[getStorageIndex()] : TEProps.EMPTY_INVENTORY;
}"
59560,"@Override public void handleTilePacket(PacketCoFHBase payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  type=payload.getByte();
  enchant=payload.getByte();
  if (!isServer) {
    facing=payload.getByte();
    if (inventory.length <= 0) {
      createInventory();
    }
  }
 else {
    payload.getByte();
  }
}","@Override public void handleTilePacket(PacketCoFHBase payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  type=payload.getByte();
  byte prevEnchant=enchant;
  enchant=payload.getByte();
  if (!isServer) {
    facing=payload.getByte();
    if (enchant != prevEnchant || inventory.length <= 0) {
      createInventory();
    }
  }
 else {
    payload.getByte();
  }
}"
59561,"public int getStorageIndex(){
  return type > 0 ? 2 * type + enchant : 0;
}","public int getStorageIndex(){
  return type > 0 ? Math.min(2 * type + enchant,CoFHProps.STORAGE_SIZE.length - 1) : 0;
}"
59562,"@Override public void initGui(){
  super.initGui();
  if (myTile.type == BlockStrongbox.Types.CREATIVE.ordinal()) {
    myInfo=StringHelper.localize(""String_Node_Str"");
  }
 else {
    myInfo=StringHelper.localize(""String_Node_Str"") + ""String_Node_Str"" + StringHelper.localize(""String_Node_Str"");
    if (myTile.enchant <= 0) {
      myInfo+=""String_Node_Str"" + StringHelper.localize(""String_Node_Str"");
    }
  }
  addTab(new TabInfo(this,myInfo));
  if (myTile.enableSecurity() && myTile.isSecured()) {
    addTab(new TabSecurity(this,myTile,playerName));
  }
}","@Override public void initGui(){
  super.initGui();
  if (myTile.type == BlockStrongbox.Types.CREATIVE.ordinal()) {
    myInfo=StringHelper.localize(""String_Node_Str"");
  }
 else {
    myInfo=StringHelper.localize(""String_Node_Str"");
    if (myTile.enchant <= 0) {
      myInfo+=""String_Node_Str"" + StringHelper.localize(""String_Node_Str"");
    }
  }
  addTab(new TabInfo(this,myInfo));
  if (myTile.enableSecurity() && myTile.isSecured()) {
    addTab(new TabSecurity(this,myTile,playerName));
  }
}"
59563,"@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (((ContainerWorkbench)inventorySlots).canWriteSchematic()) {
      PacketTEBase.sendCreateSchematicPacketToServer();
      playSound(""String_Node_Str"",1.0F,0.8F);
    }
  }
 else   if (buttonName.equals(""String_Node_Str"")) {
    if (gridNotEmpty()) {
      myTile.clearCraftingGrid();
      playSound(""String_Node_Str"",1.0F,0.6F);
    }
 else     if (hasValidSchematic()) {
      myTile.setCraftingGrid();
      playSound(""String_Node_Str"",1.0F,0.8F);
    }
  }
}","@Override public void handleElementButtonClick(String buttonName,int mouseButton){
  if (buttonName.equals(""String_Node_Str"")) {
    if (((ContainerWorkbench)inventorySlots).canWriteSchematic()) {
      PacketTEBase.sendTabSchematicPacketToServer();
      playSound(""String_Node_Str"",1.0F,0.8F);
    }
  }
 else   if (buttonName.equals(""String_Node_Str"")) {
    if (gridNotEmpty()) {
      myTile.clearCraftingGrid();
      playSound(""String_Node_Str"",1.0F,0.6F);
    }
 else     if (hasValidSchematic()) {
      myTile.setCraftingGrid();
      playSound(""String_Node_Str"",1.0F,0.8F);
    }
  }
}"
59564,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int hitSide,float hitX,float hitY,float hitZ){
  if (Utils.isHoldingDebugger(player)) {
    return true;
  }
  if (Utils.isHoldingMultimeter(player)) {
    return true;
  }
  if (player.isSneaking()) {
    if (Utils.isHoldingUsableWrench(player,x,y,z)) {
      if (ServerHelper.isServerWorld(world) && canDismantle(player,world,x,y,z)) {
        dismantleBlock(player,world,x,y,z,false);
      }
      Utils.usedWrench(player,x,y,z);
      return true;
    }
    return false;
  }
  TileTEBase tile=(TileTEBase)world.getTileEntity(x,y,z);
  if (tile == null) {
    return false;
  }
  if (Utils.isHoldingUsableWrench(player,x,y,z)) {
    if (ServerHelper.isServerWorld(world)) {
      tile.onWrench(player,hitSide);
    }
    Utils.usedWrench(player,x,y,z);
    return true;
  }
  if (ServerHelper.isServerWorld(world)) {
    return tile.openGui(player);
  }
  return true;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int hitSide,float hitX,float hitY,float hitZ){
  if (Utils.isHoldingDebugger(player)) {
    return true;
  }
  if (Utils.isHoldingMultimeter(player)) {
    return true;
  }
  TileTEBase tile=(TileTEBase)world.getTileEntity(x,y,z);
  if (tile == null) {
    return false;
  }
  if (Utils.isHoldingUsableWrench(player,x,y,z)) {
    if (ServerHelper.isServerWorld(world)) {
      tile.onWrench(player,hitSide);
    }
    Utils.usedWrench(player,x,y,z);
    return true;
  }
  if (ServerHelper.isServerWorld(world)) {
    return tile.openGui(player);
  }
  return true;
}"
59565,"@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  if (augmentRedstoneControl) {
    RedstoneControlHelper.getControlFromNBT(tag);
  }
  if (augmentReconfigSides) {
    int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
    byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
    sideCache[0]=storedSideCache[0];
    sideCache[1]=storedSideCache[1];
    sideCache[facing]=storedSideCache[storedFacing];
    sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
    sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
    sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
    for (int i=0; i < 6; i++) {
      if (sideCache[i] >= getNumConfig(i)) {
        sideCache[i]=0;
      }
    }
    markDirty();
    sendUpdatePacket(Side.CLIENT);
  }
}","@Override public void readPortableData(EntityPlayer player,NBTTagCompound tag){
  if (!canPlayerAccess(player.getCommandSenderName())) {
    return;
  }
  if (augmentRedstoneControl) {
    rsMode=RedstoneControlHelper.getControlFromNBT(tag);
  }
  if (augmentReconfigSides) {
    int storedFacing=ReconfigurableHelper.getFacingFromNBT(tag);
    byte[] storedSideCache=ReconfigurableHelper.getSideCacheFromNBT(tag,getDefaultSides());
    sideCache[0]=storedSideCache[0];
    sideCache[1]=storedSideCache[1];
    sideCache[facing]=storedSideCache[storedFacing];
    sideCache[BlockHelper.getLeftSide(facing)]=storedSideCache[BlockHelper.getLeftSide(storedFacing)];
    sideCache[BlockHelper.getRightSide(facing)]=storedSideCache[BlockHelper.getRightSide(storedFacing)];
    sideCache[BlockHelper.getOppositeSide(facing)]=storedSideCache[BlockHelper.getOppositeSide(storedFacing)];
    for (int i=0; i < 6; i++) {
      if (sideCache[i] >= getNumConfig(i)) {
        sideCache[i]=0;
      }
    }
    markDirty();
    sendUpdatePacket(Side.CLIENT);
  }
}"
59566,"@Override @SideOnly(Side.CLIENT) public int getRenderType(){
  return TEProps.renderIdTesseract;
}","@Override @SideOnly(Side.CLIENT) public int getRenderType(){
  return TEProps.renderIdEnder;
}"
59567,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase living,ItemStack stack){
  if (ServerHelper.isServerWorld(world) && stack.stackTagCompound != null && stack.stackTagCompound.hasKey(""String_Node_Str"")) {
    TileTesseract tile=(TileTesseract)world.getTileEntity(x,y,z);
    tile.removeFromRegistry();
    tile.modeItem=stack.stackTagCompound.getByte(""String_Node_Str"");
    tile.modeFluid=stack.stackTagCompound.getByte(""String_Node_Str"");
    tile.modeEnergy=stack.stackTagCompound.getByte(""String_Node_Str"");
    tile.frequency=stack.stackTagCompound.getInteger(""String_Node_Str"");
    tile.isActive=tile.frequency != -1;
    tile.addToRegistry();
    tile.sendDescPacket();
  }
  super.onBlockPlacedBy(world,x,y,z,living,stack);
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase living,ItemStack stack){
  TileEntity aTile=world.getTileEntity(x,y,z);
  if (aTile instanceof TileTesseract) {
    TileTesseract tile=(TileTesseract)world.getTileEntity(x,y,z);
    tile.setInvName(ItemHelper.getNameFromItemStack(stack));
    if (SecurityHelper.isSecure(stack)) {
      String stackOwner=SecurityHelper.getOwnerName(stack);
      if (!stackOwner.isEmpty()) {
        tile.setOwnerName(stackOwner);
      }
 else       if (living instanceof ICommandSender) {
        tile.setOwnerName(living.getCommandSenderName());
      }
      tile.setAccessQuick(SecurityHelper.getAccess(stack));
    }
    if (RedstoneControlHelper.hasRSControl(stack)) {
      tile.setControl(RedstoneControlHelper.getControl(stack));
    }
    tile.onNeighborBlockChange();
    if (stack.stackTagCompound != null && stack.stackTagCompound.hasKey(""String_Node_Str"")) {
      if (ServerHelper.isServerWorld(world)) {
        tile.removeFromRegistry();
      }
      tile.modeItem=stack.stackTagCompound.getByte(""String_Node_Str"");
      tile.modeFluid=stack.stackTagCompound.getByte(""String_Node_Str"");
      tile.modeEnergy=stack.stackTagCompound.getByte(""String_Node_Str"");
      tile.frequency=stack.stackTagCompound.getInteger(""String_Node_Str"");
      tile.isActive=tile.frequency != -1;
      if (ServerHelper.isServerWorld(world)) {
        tile.addToRegistry();
        tile.sendDescPacket();
      }
    }
  }
 else {
    super.onBlockPlacedBy(world,x,y,z,living,stack);
  }
}"
59568,"@Override public int getRenderId(){
  return TEProps.renderIdTesseract;
}","@Override public int getRenderId(){
  return TEProps.renderIdEnder;
}"
59569,"public CoFHPacket getConfigSync(){
  CoFHPacket myPacket=GenericTEPacket.getPacket(PacketTypes.CONFIG_SYNC);
  myPacket.addBool(TileWorkbench.enableSecurity);
  myPacket.addBool(TileStrongbox.enableSecurity);
  return myPacket;
}","public CoFHPacket getConfigSync(){
  CoFHPacket payload=GenericTEPacket.getPacket(PacketTypes.CONFIG_SYNC);
  payload.addBool(TileWorkbench.enableSecurity);
  payload.addBool(TileStrongbox.enableSecurity);
  return payload;
}"
59570,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  GenericEventHandler.initialize();
  TECraftingHandler.initialize();
  TEPlayerTracker.initialize();
  boolean optionColorBlind=false;
  boolean optionDrawBorders=true;
  boolean optionEnableAchievements=true;
  int tweakLavaRF=TEProps.lavaRF;
  config.setConfiguration(new Configuration(new File(event.getModConfigurationDirectory(),""String_Node_Str"")));
  cleanConfig(true);
  TEItems.preInit();
  TEBlocks.preInit();
  TEFluids.preInit();
  TEPlugins.preInit();
  String category=""String_Node_Str"";
  String version=config.get(category,""String_Node_Str"",TEProps.VERSION);
  String comment=null;
  TEProps.enableUpdateNotice=config.get(category,""String_Node_Str"",TEProps.enableUpdateNotice);
  TEProps.enableDismantleLogging=config.get(category,""String_Node_Str"",TEProps.enableDismantleLogging);
  TEProps.enableDebugOutput=config.get(category,""String_Node_Str"",TEProps.enableDebugOutput);
  optionColorBlind=config.get(category,""String_Node_Str"",false);
  optionDrawBorders=config.get(category,""String_Node_Str"",true);
  category=""String_Node_Str"";
  tweakLavaRF=config.get(category,""String_Node_Str"",tweakLavaRF);
  comment=""String_Node_Str"";
  PulverizerManager.secondaryWoolPercentages=config.get(category,""String_Node_Str"",PulverizerManager.secondaryWoolPercentages,comment);
  category=""String_Node_Str"";
  comment=""String_Node_Str"";
  TEProps.holidayChristmas=!config.get(category,""String_Node_Str"",false,comment);
  if (optionColorBlind) {
    TEProps.textureGuiCommon=TEProps.PATH_COMMON_CB;
    TEProps.textureSelection=TEProps.TEXTURE_CB;
    BlockEnergyCell.textureSelection=BlockEnergyCell.TEXTURE_CB;
  }
  TEProps.enableGuiBorders=optionDrawBorders;
  if (tweakLavaRF >= 10000 && tweakLavaRF < TEProps.LAVA_MAX_RF) {
    TEProps.lavaRF=tweakLavaRF;
  }
 else {
    log.info(""String_Node_Str"");
  }
  if (PulverizerManager.secondaryWoolPercentages < 0 || PulverizerManager.secondaryWoolPercentages > 100) {
    PulverizerManager.secondaryWoolPercentages=25;
    log.info(""String_Node_Str"");
  }
  TEPlayerTracker.initialize();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  GenericEventHandler.initialize();
  TECraftingHandler.initialize();
  TEPlayerTracker.initialize();
  boolean optionColorBlind=false;
  boolean optionDrawBorders=true;
  boolean optionEnableAchievements=true;
  int tweakLavaRF=TEProps.lavaRF;
  config.setConfiguration(new Configuration(new File(event.getModConfigurationDirectory(),""String_Node_Str"")));
  cleanConfig(true);
  TEItems.preInit();
  TEBlocks.preInit();
  TEPlugins.preInit();
  String category=""String_Node_Str"";
  String version=config.get(category,""String_Node_Str"",TEProps.VERSION);
  String comment=null;
  TEProps.enableUpdateNotice=config.get(category,""String_Node_Str"",TEProps.enableUpdateNotice);
  TEProps.enableDismantleLogging=config.get(category,""String_Node_Str"",TEProps.enableDismantleLogging);
  TEProps.enableDebugOutput=config.get(category,""String_Node_Str"",TEProps.enableDebugOutput);
  optionColorBlind=config.get(category,""String_Node_Str"",false);
  optionDrawBorders=config.get(category,""String_Node_Str"",true);
  category=""String_Node_Str"";
  tweakLavaRF=config.get(category,""String_Node_Str"",tweakLavaRF);
  comment=""String_Node_Str"";
  PulverizerManager.secondaryWoolPercentages=config.get(category,""String_Node_Str"",PulverizerManager.secondaryWoolPercentages,comment);
  category=""String_Node_Str"";
  comment=""String_Node_Str"";
  TEProps.holidayChristmas=!config.get(category,""String_Node_Str"",false,comment);
  if (optionColorBlind) {
    TEProps.textureGuiCommon=TEProps.PATH_COMMON_CB;
    TEProps.textureSelection=TEProps.TEXTURE_CB;
    BlockCell.textureSelection=BlockCell.TEXTURE_CB;
  }
  TEProps.enableGuiBorders=optionDrawBorders;
  if (tweakLavaRF >= 10000 && tweakLavaRF < TEProps.LAVA_MAX_RF) {
    TEProps.lavaRF=tweakLavaRF;
  }
 else {
    log.info(""String_Node_Str"");
  }
  if (PulverizerManager.secondaryWoolPercentages < 0 || PulverizerManager.secondaryWoolPercentages > 100) {
    PulverizerManager.secondaryWoolPercentages=25;
    log.info(""String_Node_Str"");
  }
  TEPlayerTracker.initialize();
}"
59571,"@EventHandler public void postInit(FMLPostInitializationEvent event){
  TEItems.postInit();
  TEBlocks.postInit();
  TEFluids.postInit();
  TEPlugins.postInit();
  proxy.registerEntities();
  proxy.registerRenderInformation();
}","@EventHandler public void postInit(FMLPostInitializationEvent event){
  TEItems.postInit();
  TEBlocks.postInit();
  TEPlugins.postInit();
  proxy.registerEntities();
  proxy.registerRenderInformation();
}"
59572,"@EventHandler public void initialize(FMLInitializationEvent event){
  TEItems.initialize();
  TEBlocks.initialize();
  TEFluids.initialize();
  TEPlugins.initialize();
  if (TEProps.enableAchievements) {
  }
  loadWorldGeneration();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,guiHandler);
  GenericTEPacket.initialize();
  MinecraftForge.EVENT_BUS.register(proxy);
  try {
    Field eBus=FMLModContainer.class.getDeclaredField(""String_Node_Str"");
    eBus.setAccessible(true);
    EventBus FMLbus=(EventBus)eBus.get(FMLCommonHandler.instance().findContainerFor(this));
    FMLbus.register(this);
  }
 catch (  Throwable t) {
    if (TEProps.enableDebugOutput) {
      t.printStackTrace();
    }
  }
}","@EventHandler public void initialize(FMLInitializationEvent event){
  TEItems.initialize();
  TEBlocks.initialize();
  TEPlugins.initialize();
  if (TEProps.enableAchievements) {
  }
  loadWorldGeneration();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,guiHandler);
  GenericTEPacket.initialize();
  MinecraftForge.EVENT_BUS.register(proxy);
  try {
    Field eBus=FMLModContainer.class.getDeclaredField(""String_Node_Str"");
    eBus.setAccessible(true);
    EventBus FMLbus=(EventBus)eBus.get(FMLCommonHandler.instance().findContainerFor(this));
    FMLbus.register(this);
  }
 catch (  Throwable t) {
    if (TEProps.enableDebugOutput) {
      t.printStackTrace();
    }
  }
}"
59573,"public static void initialize(){
  blockMachine=addBlock(new BlockMachine());
  blockDevice=addBlock(new BlockDevice());
  blockDynamo=addBlock(new BlockDynamo());
  blockEnergyCell=addBlock(new BlockEnergyCell());
  blockTank=addBlock(new BlockTank());
  blockStrongbox=addBlock(new BlockStrongbox());
  blockCache=addBlock(new BlockCache());
  blockTesseract=addBlock(new BlockTesseract());
  blockLamp=addBlock(new BlockLamp());
  blockGlass=addBlock(new BlockGlass());
  blockRockwool=addBlock(new BlockRockwool());
  GameRegistry.registerBlock(blockMachine,ItemBlockMachine.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockDevice,ItemBlockDevice.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockDynamo,ItemBlockDynamo.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockEnergyCell,ItemBlockEnergyCell.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockTank,ItemBlockTank.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockStrongbox,ItemBlockStrongbox.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockCache,ItemBlockCache.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockTesseract,ItemBlockTesseract.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockLamp,ItemBlockLamp.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockGlass,ItemBlockGlass.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockRockwool,ItemBlockRockwool.class,""String_Node_Str"");
  for (  IInitializer initializer : blockList) {
    initializer.initialize();
  }
}","public static void initialize(){
  blockMachine=addBlock(new BlockMachine());
  blockDevice=addBlock(new BlockDevice());
  blockDynamo=addBlock(new BlockDynamo());
  blockCell=addBlock(new BlockCell());
  blockTank=addBlock(new BlockTank());
  blockStrongbox=addBlock(new BlockStrongbox());
  blockCache=addBlock(new BlockCache());
  blockTesseract=addBlock(new BlockTesseract());
  blockLamp=addBlock(new BlockLamp());
  blockGlass=addBlock(new BlockGlass());
  blockRockwool=addBlock(new BlockRockwool());
  GameRegistry.registerBlock(blockMachine,ItemBlockMachine.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockDevice,ItemBlockDevice.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockDynamo,ItemBlockDynamo.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockCell,ItemBlockCell.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockTank,ItemBlockTank.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockStrongbox,ItemBlockStrongbox.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockCache,ItemBlockCache.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockTesseract,ItemBlockTesseract.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockLamp,ItemBlockLamp.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockGlass,ItemBlockGlass.class,""String_Node_Str"");
  GameRegistry.registerBlock(blockRockwool,ItemBlockRockwool.class,""String_Node_Str"");
  for (  IInitializer initializer : blockList) {
    initializer.initialize();
  }
}"
59574,"@Override public boolean postInit(){
  if (enable[Types.BASIC.ordinal()]) {
    GameRegistry.addRecipe(new ShapedOreRecipe(cacheBasic,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'X',Blocks.log}));
  }
  if (enable[Types.HARDENED.ordinal()]) {
    GameRegistry.addRecipe(new UpgradeRecipe(cacheHardened,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'X',cacheBasic}));
    GameRegistry.addRecipe(new ShapedOreRecipe(cacheHardened,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'X',Blocks.log,'Y',""String_Node_Str""}));
  }
  if (enable[Types.REINFORCED.ordinal()]) {
    GameRegistry.addRecipe(new UpgradeRecipe(cacheReinforced,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',cacheHardened,'G',""String_Node_Str""}));
  }
  if (enable[Types.RESONANT.ordinal()]) {
    GameRegistry.addRecipe(new UpgradeRecipe(cacheResonant,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'X',cacheReinforced}));
  }
  return true;
}","@Override public boolean postInit(){
  if (enable[Types.BASIC.ordinal()]) {
    GameRegistry.addRecipe(new ShapedOreRecipe(cacheBasic,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'X',""String_Node_Str""}));
  }
  if (enable[Types.HARDENED.ordinal()]) {
    GameRegistry.addRecipe(new UpgradeRecipe(cacheHardened,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'X',cacheBasic}));
    GameRegistry.addRecipe(new ShapedOreRecipe(cacheHardened,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'X',""String_Node_Str"",'Y',""String_Node_Str""}));
  }
  if (enable[Types.REINFORCED.ordinal()]) {
    GameRegistry.addRecipe(new UpgradeRecipe(cacheReinforced,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',cacheHardened,'G',""String_Node_Str""}));
  }
  if (enable[Types.RESONANT.ordinal()]) {
    GameRegistry.addRecipe(new UpgradeRecipe(cacheResonant,new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'X',cacheReinforced}));
  }
  return true;
}"
59575,"@Override public void readFromNBT(NBTTagCompound nbt){
  type=nbt.getByte(""String_Node_Str"");
  facing=nbt.getByte(""String_Node_Str"");
  locked=nbt.getBoolean(""String_Node_Str"");
  storedStack=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
  maxCacheStackSize=SIZE[type] - storedStack.getMaxStackSize() * 2;
  super.readFromNBT(nbt);
}","@Override public void readFromNBT(NBTTagCompound nbt){
  type=nbt.getByte(""String_Node_Str"");
  facing=nbt.getByte(""String_Node_Str"");
  locked=nbt.getBoolean(""String_Node_Str"");
  if (nbt.hasKey(""String_Node_Str"")) {
    storedStack=ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""String_Node_Str""));
    maxCacheStackSize=SIZE[type] - storedStack.getMaxStackSize() * 2;
  }
 else {
    maxCacheStackSize=SIZE[type] - 64 * 2;
  }
  super.readFromNBT(nbt);
}"
59576,"@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setByte(""String_Node_Str"",type);
  nbt.setByte(""String_Node_Str"",facing);
  nbt.setBoolean(""String_Node_Str"",locked);
  nbt.setTag(""String_Node_Str"",storedStack.writeToNBT(new NBTTagCompound()));
}","@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setByte(""String_Node_Str"",type);
  nbt.setByte(""String_Node_Str"",facing);
  nbt.setBoolean(""String_Node_Str"",locked);
  if (storedStack != null) {
    nbt.setTag(""String_Node_Str"",storedStack.writeToNBT(new NBTTagCompound()));
  }
}"
59577,"public Payload getConfigSync(int packetID){
  Payload myPayload=Payload.getPayload(packetID);
  myPayload.addByte(PacketTypes.CONFIG_SYNC.ordinal());
  myPayload.addBool(TileWorkbench.enableSecurity);
  myPayload.addBool(TileStrongbox.enableSecurity);
  return myPayload;
}","public CoFHPacket getConfigSync(int packetID){
  CoFHPacket myPacket=CoFHPacket.getCoFHPacket(packetID);
  myPacket.addByte(PacketTypes.CONFIG_SYNC.ordinal());
  myPacket.addBool(TileWorkbench.enableSecurity);
  myPacket.addBool(TileStrongbox.enableSecurity);
  return myPacket;
}"
59578,"public void handleConfigSync(Payload payload){
  TileWorkbench.enableSecurity=payload.getBool();
  TileStrongbox.enableSecurity=payload.getBool();
  log.info(StringHelper.localize(""String_Node_Str""));
}","public void handleConfigSync(CoFHPacket payload){
  TileWorkbench.enableSecurity=payload.getBool();
  TileStrongbox.enableSecurity=payload.getBool();
  log.info(StringHelper.localize(""String_Node_Str""));
}"
59579,"@Override public void handleTilePacket(Payload payload){
  if (ServerHelper.isClientWorld(worldObj)) {
    invName=payload.getString();
  }
 else {
    payload.getString();
  }
}","@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  if (ServerHelper.isClientWorld(worldObj)) {
    invName=payload.getString();
  }
 else {
    payload.getString();
  }
}"
59580,"@Override public void handleTilePacket(Payload payload){
  isPowered=payload.getBool();
  rsDisable=payload.getBool();
  rsSetting=payload.getBool();
}","@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  isPowered=payload.getBool();
  rsDisable=payload.getBool();
  rsSetting=payload.getBool();
}"
59581,"@Override public void handleTilePacket(Payload payload){
  super.handleTilePacket(payload);
  isPowered=payload.getBool();
  rsDisable=payload.getBool();
  rsSetting=payload.getBool();
}","@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  super.handleTilePacket(payload);
  isPowered=payload.getBool();
  rsDisable=payload.getBool();
  rsSetting=payload.getBool();
}"
59582,"@Override public void handleTilePacket(Payload payload){
  super.handleTilePacket(payload);
  payload.getByteArray(sideCache);
  if (ServerHelper.isClientWorld(worldObj)) {
    facing=payload.getByte();
    isActive=payload.getBool();
  }
 else {
    payload.getByte();
    payload.getBool();
  }
  for (int i=0; i < 6; ++i) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  worldObj.updateAllLightTypes(xCoord,yCoord,zCoord);
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,getBlockType());
}","@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  super.handleTilePacket(payload);
  payload.getByteArray(sideCache);
  if (ServerHelper.isClientWorld(worldObj)) {
    facing=payload.getByte();
    isActive=payload.getBool();
  }
 else {
    payload.getByte();
    payload.getBool();
  }
  for (int i=0; i < 6; ++i) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  worldObj.updateAllLightTypes(xCoord,yCoord,zCoord);
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,getBlockType());
}"
59583,"@Override public void handleTilePacket(Payload payload){
  super.handleTilePacket(payload);
  payload.getByteArray(sideCache);
  if (ServerHelper.isClientWorld(worldObj)) {
    facing=payload.getByte();
    isActive=payload.getBool();
  }
 else {
    payload.getByte();
    payload.getBool();
  }
  for (int i=0; i < 6; ++i) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  worldObj.updateAllLightTypes(xCoord,yCoord,zCoord);
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,getBlockType());
}","@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  super.handleTilePacket(payload);
  payload.getByteArray(sideCache);
  if (ServerHelper.isClientWorld(worldObj)) {
    facing=payload.getByte();
    isActive=payload.getBool();
  }
 else {
    payload.getByte();
    payload.getBool();
  }
  for (int i=0; i < 6; ++i) {
    if (sideCache[i] >= getNumConfig(i)) {
      sideCache[i]=0;
    }
  }
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  worldObj.updateAllLightTypes(xCoord,yCoord,zCoord);
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,getBlockType());
}"
59584,"@Override public void handleTilePacket(Payload payload){
  super.handleTilePacket(payload);
  actsSneaking=payload.getBool();
  leftClick=payload.getBool();
  tickSlot=payload.getByte();
  angle=payload.getByte();
}","@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  super.handleTilePacket(payload);
  actsSneaking=payload.getBool();
  leftClick=payload.getBool();
  tickSlot=payload.getByte();
  angle=payload.getByte();
}"
59585,"@Override public void handleTileInfoPacket(Payload payload,NetHandler handler){
switch (TEProps.PacketID.values()[payload.getByte()]) {
case MODE:
    leftClick=payload.getBool();
  actsSneaking=payload.getBool();
tickSlot=payload.getByte();
angle=payload.getByte();
return;
default :
}
}","@Override public void handleTileInfoPacket(CoFHPacket payload,boolean isServer,EntityPlayer thePlayer){
switch (TEProps.PacketID.values()[payload.getByte()]) {
case MODE:
    leftClick=payload.getBool();
  actsSneaking=payload.getBool();
tickSlot=payload.getByte();
angle=payload.getByte();
return;
default :
}
}"
59586,"@Override public void handleTilePacket(Payload payload){
}","@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
}"
59587,"public void clearCraftingGrid(){
  for (int i=0; i < 9; i++) {
    inventory[getMatrixOffset() + i]=null;
  }
  PacketUtils.sendToServer(Payload.getInfoPayload(this).addByte(PacketInfoID.CLEAR_GRID.ordinal()).getPacket());
}","public void clearCraftingGrid(){
  for (int i=0; i < 9; i++) {
    inventory[getMatrixOffset() + i]=null;
  }
  PacketHandler.sendToServer(CoFHTileInfoPacket.getTileInfoPacket(this).addByte(PacketInfoID.CLEAR_GRID.ordinal()));
}"
59588,"@Override public void handleTilePacket(Payload payload){
  super.handleTilePacket(payload);
  access=ISecureTile.AccessMode.values()[payload.getByte()];
  selectedSchematic=payload.getByte();
  if (ServerHelper.isClientWorld(worldObj)) {
    owner=payload.getString();
  }
 else {
    payload.getString();
  }
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,getBlockType());
}","@Override public void handleTilePacket(CoFHPacket payload,boolean isServer){
  super.handleTilePacket(payload,isServer);
  access=ISecureTile.AccessMode.values()[payload.getByte()];
  selectedSchematic=payload.getByte();
  if (ServerHelper.isClientWorld(worldObj)) {
    owner=payload.getString();
  }
 else {
    payload.getString();
  }
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,getBlockType());
}"
59589,"@Override public void handleTileInfoPacket(Payload payload,NetHandler handler){
  int type=payload.getByte();
  if (type == PacketInfoID.CLEAR_GRID.ordinal()) {
    for (int i=0; i < 9; i++) {
      inventory[getMatrixOffset() + i]=null;
      if (handler.getPlayer().openContainer != null) {
        handler.getPlayer().openContainer.onCraftMatrixChanged(null);
      }
    }
  }
 else   if (type == PacketInfoID.SET_GRID.ordinal()) {
    for (int i=0; i < 9; i++) {
      inventory[getMatrixOffset() + i]=SchematicHelper.getSchematicSlot(getStackInSlot(getCurrentSchematicSlot()),i);
      if (handler.getPlayer().openContainer != null) {
        handler.getPlayer().openContainer.onCraftMatrixChanged(null);
      }
    }
  }
 else   if (type == PacketInfoID.NEI_SUP.ordinal()) {
    int slot;
    for (int i=0; i < 9; i++) {
      inventory[getMatrixOffset() + i]=null;
    }
    while ((slot=payload.getByte()) >= 0) {
      inventory[slot + getMatrixOffset()]=payload.getItemStack();
    }
    Container container=handler.getPlayer().openContainer;
    if (container != null) {
      ((ICrafting)handler.getPlayer()).sendContainerAndContentsToPlayer(container,container.getInventory());
      container.onCraftMatrixChanged(null);
    }
  }
}","@Override public void handleTileInfoPacket(CoFHPacket payload,boolean isServer,EntityPlayer thePlayer){
  int type=payload.getByte();
  if (type == PacketInfoID.CLEAR_GRID.ordinal()) {
    for (int i=0; i < 9; i++) {
      inventory[getMatrixOffset() + i]=null;
      if (thePlayer.openContainer != null) {
        thePlayer.openContainer.onCraftMatrixChanged(null);
      }
    }
  }
 else   if (type == PacketInfoID.SET_GRID.ordinal()) {
    for (int i=0; i < 9; i++) {
      inventory[getMatrixOffset() + i]=SchematicHelper.getSchematicSlot(getStackInSlot(getCurrentSchematicSlot()),i);
      if (thePlayer.openContainer != null) {
        thePlayer.openContainer.onCraftMatrixChanged(null);
      }
    }
  }
 else   if (type == PacketInfoID.NEI_SUP.ordinal()) {
    int slot;
    for (int i=0; i < 9; i++) {
      inventory[getMatrixOffset() + i]=null;
    }
    while ((slot=payload.getByte()) >= 0) {
      inventory[slot + getMatrixOffset()]=payload.getItemStack();
    }
    Container container=thePlayer.openContainer;
    if (container != null) {
      ((ICrafting)thePlayer).sendContainerAndContentsToPlayer(container,container.getInventory());
      container.onCraftMatrixChanged(null);
    }
  }
}"
59590,"public void setCraftingGrid(){
  for (int i=0; i < 9; i++) {
    inventory[getMatrixOffset() + i]=SchematicHelper.getSchematicSlot(getStackInSlot(getCurrentSchematicSlot()),i);
  }
  PacketUtils.sendToServer(Payload.getInfoPayload(this).addByte(PacketInfoID.SET_GRID.ordinal()).getPacket());
}","public void setCraftingGrid(){
  for (int i=0; i < 9; i++) {
    inventory[getMatrixOffset() + i]=SchematicHelper.getSchematicSlot(getStackInSlot(getCurrentSchematicSlot()),i);
  }
  PacketHandler.sendToServer(CoFHTileInfoPacket.getTileInfoPacket(this).addByte(PacketInfoID.SET_GRID.ordinal()));
}"
59591,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + interfaceNumber;
  result=prime * result + ((manufacturer == null) ? 0 : manufacturer.hashCode());
  result=prime * result + ((path == null) ? 0 : path.hashCode());
  result=prime * result + ((product == null) ? 0 : product.hashCode());
  result=prime * result + productId;
  result=prime * result + releaseNumber;
  result=prime * result + ((serialNumber == null) ? 0 : serialNumber.hashCode());
  result=prime * result + usage;
  result=prime * result + usagePage;
  result=prime * result + vendorId;
  return result;
}","@Override public int hashCode(){
  return path.hashCode();
}"
59592,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  HidDevice other=(HidDevice)obj;
  if (interfaceNumber != other.interfaceNumber) {
    return false;
  }
  if (manufacturer == null) {
    if (other.manufacturer != null) {
      return false;
    }
  }
 else   if (!manufacturer.equals(other.manufacturer)) {
    return false;
  }
  if (path == null) {
    if (other.path != null) {
      return false;
    }
  }
 else   if (!path.equals(other.path)) {
    return false;
  }
  if (product == null) {
    if (other.product != null) {
      return false;
    }
  }
 else   if (!product.equals(other.product)) {
    return false;
  }
  if (productId != other.productId) {
    return false;
  }
  if (releaseNumber != other.releaseNumber) {
    return false;
  }
  if (serialNumber == null) {
    if (other.serialNumber != null) {
      return false;
    }
  }
 else   if (!serialNumber.equals(other.serialNumber)) {
    return false;
  }
  if (usage != other.usage) {
    return false;
  }
  if (usagePage != other.usagePage) {
    return false;
  }
  if (vendorId != other.vendorId) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  HidDevice hidDevice=(HidDevice)o;
  if (!path.equals(hidDevice.path))   return false;
  return true;
}"
59593,"/** 
 * Prepare a batch api request using list of individual reuests.
 * @param requests list of api requests that has to be executed in batch.
 */
protected void prepareRequest(List<BoxAPIRequest> requests){
  JsonObject body=new JsonObject();
  JsonArray requestsJSONArray=new JsonArray();
  for (  BoxAPIRequest request : requests) {
    JsonObject batchRequest=new JsonObject();
    batchRequest.add(""String_Node_Str"",request.getMethod());
    batchRequest.add(""String_Node_Str"",request.getUrl().toString().substring(this.api.getBaseURL().length() - 1));
    if (request instanceof BoxJSONRequest) {
      BoxJSONRequest jsonRequest=(BoxJSONRequest)request;
      batchRequest.add(""String_Node_Str"",jsonRequest.getBodyAsJsonObject());
    }
    if (request.getHeaders() != null) {
      JsonObject batchRequestHeaders=new JsonObject();
      for (      RequestHeader header : request.getHeaders()) {
        if (header.getKey() != null && !header.getKey().isEmpty() && HttpHeaders.AUTHORIZATION.equals(header.getKey())) {
          batchRequestHeaders.add(header.getKey(),header.getValue());
        }
      }
      batchRequest.add(""String_Node_Str"",batchRequestHeaders);
    }
    requestsJSONArray.add(batchRequest);
  }
  body.add(""String_Node_Str"",requestsJSONArray);
  super.setBody(body);
}","/** 
 * Prepare a batch api request using list of individual reuests.
 * @param requests list of api requests that has to be executed in batch.
 */
protected void prepareRequest(List<BoxAPIRequest> requests){
  JsonObject body=new JsonObject();
  JsonArray requestsJSONArray=new JsonArray();
  for (  BoxAPIRequest request : requests) {
    JsonObject batchRequest=new JsonObject();
    batchRequest.add(""String_Node_Str"",request.getMethod());
    batchRequest.add(""String_Node_Str"",request.getUrl().toString().substring(this.api.getBaseURL().length() - 1));
    if (request instanceof BoxJSONRequest) {
      BoxJSONRequest jsonRequest=(BoxJSONRequest)request;
      batchRequest.add(""String_Node_Str"",jsonRequest.getBodyAsJsonValue());
    }
    if (request.getHeaders() != null) {
      JsonObject batchRequestHeaders=new JsonObject();
      for (      RequestHeader header : request.getHeaders()) {
        if (header.getKey() != null && !header.getKey().isEmpty() && HttpHeaders.AUTHORIZATION.equals(header.getKey())) {
          batchRequestHeaders.add(header.getKey(),header.getValue());
        }
      }
      batchRequest.add(""String_Node_Str"",batchRequestHeaders);
    }
    requestsJSONArray.add(batchRequest);
  }
  body.add(""String_Node_Str"",requestsJSONArray);
  super.setBody(body);
}"
59594,"/** 
 * Gets the body of this request as a JsonObject.
 * @return body represented as JsonObject.
 */
public JsonObject getBodyAsJsonObject(){
  return this.jsonObject;
}","/** 
 * Gets the body of this request as a JsonObject.
 * @return body represented as JsonObject.
 */
public JsonObject getBodyAsJsonObject(){
  if (this.jsonValue.isObject()) {
    return this.jsonValue.asObject();
  }
  return null;
}"
59595,"@Override protected String bodyToString(){
  return this.jsonObject.toString();
}","@Override protected String bodyToString(){
  return this.jsonValue.toString();
}"
59596,"/** 
 * Sets the body of this request to a given JsonObject.
 * @param body the JsonObject to use as the body.
 */
public void setBody(JsonObject body){
  super.setBody(body.toString());
  this.jsonObject=body;
}","/** 
 * Sets the body of this request to a given JsonObject.
 * @param body the JsonObject to use as the body.
 */
public void setBody(JsonObject body){
  super.setBody(body.toString());
  this.jsonValue=body;
}"
59597,"@Override public BoxAPIResponse onRequest(BoxAPIRequest request){
  Assert.assertEquals(""String_Node_Str"",request.getUrl().toString());
  return new BoxJSONResponse(){
    @Override public String getJSON(){
      return ""String_Node_Str"";
    }
  }
;
}","@Override public BoxAPIResponse onRequest(BoxAPIRequest request){
  Assert.assertEquals(""String_Node_Str"",request.getUrl().toString());
  return new BoxJSONResponse(){
    @Override public String getJSON(){
      return responseJSON;
    }
  }
;
}"
59598,"@Override public String getJSON(){
  return ""String_Node_Str"";
}","@Override public String getJSON(){
  return responseJSON;
}"
59599,"/** 
 * Renames this folder.
 * @param newName the new name of the folder.
 */
public void rename(String newName){
  URL url=FOLDER_INFO_URL_TEMPLATE.build(this.getAPI().getBaseURL(),this.getID());
  BoxJSONRequest request=new BoxJSONRequest(this.getAPI(),url,""String_Node_Str"");
  JsonObject updateInfo=new JsonObject();
  updateInfo.add(""String_Node_Str"",newName);
  request.setBody(updateInfo.toString());
  BoxAPIResponse response=request.send();
  response.disconnect();
}","/** 
 * Renames this folder.
 * @param newName the new name of the folder.
 */
public void rename(String newName){
  URL url=FOLDER_INFO_URL_TEMPLATE.build(this.getAPI().getBaseURL(),this.getID());
  BoxJSONRequest request=new BoxJSONRequest(this.getAPI(),url,""String_Node_Str"");
  JsonObject updateInfo=new JsonObject();
  updateInfo.add(""String_Node_Str"",newName);
  request.setBody(updateInfo.toString());
  BoxJSONResponse response=(BoxJSONResponse)request.send();
  response.getJSON();
}"
59600,"@Test @Category(IntegrationTestDebug.class) public void singleFileCollabSucceeds(){
  HashMap<String,BoxCollaboration.Info> collabsMap=new HashMap<String,BoxCollaboration.Info>();
  BoxAPIConnection api=new BoxAPIConnection(TestConfig.getAccessToken());
  BoxFolder rootFolder=BoxFolder.getRootFolder(api);
  String fileName=""String_Node_Str"";
  String fileContent=""String_Node_Str"";
  byte[] fileBytes=fileContent.getBytes(StandardCharsets.UTF_8);
  InputStream uploadStream=new ByteArrayInputStream(fileBytes);
  BoxFile uploadedFile=rootFolder.uploadFile(uploadStream,fileName).getResource();
  String collaboratorLogin=TestConfig.getCollaborator();
  BoxCollaboration.Role originalRole=BoxCollaboration.Role.VIEWER;
  BoxCollaboration.Role newRole=BoxCollaboration.Role.EDITOR;
  BoxCollaboration.Info collabInfo=uploadedFile.collaborate(collaboratorLogin,originalRole);
  collabsMap.put(collabInfo.getID(),collabInfo);
  assertThat(collabInfo.getRole(),is(equalTo(originalRole)));
  BoxCollaboration collab=collabInfo.getResource();
  collabInfo.setRole(newRole);
  collab.updateInfo(collabInfo);
  assertThat(collabInfo.getRole(),is(equalTo(newRole)));
  BoxCollaboration remoteCollab=new BoxCollaboration(api,collab.getID());
  BoxCollaboration.Info remoteInfo=remoteCollab.getInfo();
  assertThat(remoteInfo.getRole(),is(equalTo(newRole)));
  assertThat(remoteInfo.getCreatedBy().getID(),is(collabInfo.getCreatedBy().getID()));
  BoxCollaboration.Info collab2Info=uploadedFile.collaborate(""String_Node_Str"",originalRole);
  collabsMap.put(collab2Info.getID(),collab2Info);
  BoxResourceIterable<BoxCollaboration.Info> collabs=uploadedFile.getAllFileCollaborations();
  Iterator<BoxCollaboration.Info> collabIterator=collabs.iterator();
  int numCollabs=0;
  while (collabIterator.hasNext() && (numCollabs < 5)) {
    numCollabs++;
    BoxCollaboration.Info fileCollabInfo=collabIterator.next();
    BoxCollaboration.Info localFileCollabInfor=collabsMap.get(fileCollabInfo.getID());
    assertEquals(fileCollabInfo.getID(),localFileCollabInfor.getID());
    assertEquals(fileCollabInfo.getCreatedBy().getID(),localFileCollabInfor.getCreatedBy().getID());
    assertEquals(fileCollabInfo.getCreatedBy().getName(),localFileCollabInfor.getCreatedBy().getName());
    assertEquals(fileCollabInfo.getAccessibleBy().getID(),localFileCollabInfor.getAccessibleBy().getID());
    assertEquals(fileCollabInfo.getAccessibleBy().getName(),localFileCollabInfor.getAccessibleBy().getName());
    assertEquals(fileCollabInfo.getRole(),localFileCollabInfor.getRole());
    assertEquals(fileCollabInfo.getStatus(),localFileCollabInfor.getStatus());
  }
  BoxCollaboration.Info colInfo=collabIterator.next();
  assertThat(colInfo.getID(),is(equalTo(collab2Info.getID())));
  assertEquals(colInfo.getID(),collab2Info.getID());
  assertEquals(colInfo.getID(),collabInfo.getID());
  assertEquals(collabs.iterator().hasNext(),true);
  colInfo=collabIterator.next();
  assertEquals(colInfo.getID(),collabInfo.getID());
  assertEquals(collabs.iterator().hasNext(),false);
  assertEquals(2,numCollabs);
  uploadedFile.delete();
}","@Test @Category(IntegrationTest.class) public void singleFileCollabSucceeds(){
  HashMap<String,BoxCollaboration.Info> collabsMap=new HashMap<String,BoxCollaboration.Info>();
  BoxAPIConnection api=new BoxAPIConnection(TestConfig.getAccessToken());
  BoxFolder rootFolder=BoxFolder.getRootFolder(api);
  String fileName=""String_Node_Str"";
  String fileContent=""String_Node_Str"";
  byte[] fileBytes=fileContent.getBytes(StandardCharsets.UTF_8);
  InputStream uploadStream=new ByteArrayInputStream(fileBytes);
  BoxFile uploadedFile=rootFolder.uploadFile(uploadStream,fileName).getResource();
  String collaboratorLogin=TestConfig.getCollaborator();
  BoxCollaboration.Role originalRole=BoxCollaboration.Role.VIEWER;
  BoxCollaboration.Role newRole=BoxCollaboration.Role.EDITOR;
  BoxCollaboration.Info collabInfo=uploadedFile.collaborate(collaboratorLogin,originalRole);
  collabsMap.put(collabInfo.getID(),collabInfo);
  assertThat(collabInfo.getRole(),is(equalTo(originalRole)));
  BoxCollaboration collab=collabInfo.getResource();
  collabInfo.setRole(newRole);
  collab.updateInfo(collabInfo);
  assertThat(collabInfo.getRole(),is(equalTo(newRole)));
  BoxCollaboration remoteCollab=new BoxCollaboration(api,collab.getID());
  BoxCollaboration.Info remoteInfo=remoteCollab.getInfo();
  assertThat(remoteInfo.getRole(),is(equalTo(newRole)));
  assertThat(remoteInfo.getCreatedBy().getID(),is(collabInfo.getCreatedBy().getID()));
  BoxCollaboration.Info collab2Info=uploadedFile.collaborate(""String_Node_Str"",originalRole);
  collabsMap.put(collab2Info.getID(),collab2Info);
  BoxResourceIterable<BoxCollaboration.Info> collabs=uploadedFile.getAllFileCollaborations();
  Iterator<BoxCollaboration.Info> collabIterator=collabs.iterator();
  int numCollabs=0;
  while (collabIterator.hasNext()) {
    numCollabs++;
    BoxCollaboration.Info fileCollabInfo=collabIterator.next();
    BoxCollaboration.Info localFileCollabInfor=collabsMap.get(fileCollabInfo.getID());
    assertEquals(fileCollabInfo.getID(),localFileCollabInfor.getID());
    assertEquals(fileCollabInfo.getCreatedBy().getID(),localFileCollabInfor.getCreatedBy().getID());
    assertEquals(fileCollabInfo.getCreatedBy().getName(),localFileCollabInfor.getCreatedBy().getName());
    assertEquals(fileCollabInfo.getAccessibleBy().getID(),localFileCollabInfor.getAccessibleBy().getID());
    assertEquals(fileCollabInfo.getAccessibleBy().getName(),localFileCollabInfor.getAccessibleBy().getName());
    assertEquals(fileCollabInfo.getRole(),localFileCollabInfor.getRole());
    assertEquals(fileCollabInfo.getStatus(),localFileCollabInfor.getStatus());
  }
  assertEquals(collabIterator.hasNext(),false);
  assertEquals(2,numCollabs);
  uploadedFile.delete();
}"
59601,"/** 
 * Updates the information about this collaboration with any info fields that have been modified locally.
 * @param info the updated info.
 */
public void updateInfo(Info info){
  BoxAPIConnection api=this.getAPI();
  URL url=COLLABORATION_URL_TEMPLATE.build(api.getBaseURL(),this.getID());
  BoxJSONRequest request=new BoxJSONRequest(api,url,""String_Node_Str"");
  request.setBody(info.getPendingChanges());
  BoxJSONResponse response=(BoxJSONResponse)request.send();
  JsonObject jsonObject=JsonObject.readFrom(response.getJSON());
  info.update(jsonObject);
}","/** 
 * Updates the information about this collaboration with any info fields that have been modified locally.
 * @param info the updated info.
 */
public void updateInfo(Info info){
  BoxAPIConnection api=this.getAPI();
  URL url=COLLABORATION_URL_TEMPLATE.build(api.getBaseURL(),this.getID());
  BoxJSONRequest request=new BoxJSONRequest(api,url,""String_Node_Str"");
  request.setBody(info.getPendingChanges());
  BoxAPIResponse boxAPIResponse=request.send();
  if (boxAPIResponse instanceof BoxJSONResponse) {
    BoxJSONResponse response=(BoxJSONResponse)boxAPIResponse;
    JsonObject jsonObject=JsonObject.readFrom(response.getJSON());
    info.update(jsonObject);
  }
}"
59602,"@Override public BoxResource getResource(){
  return BoxTask.this;
}","@Override public BoxTask getResource(){
  return BoxTask.this;
}"
59603,"@Test @Category(IntegrationTest.class) public void updateInfoSucceeds(){
  BoxAPIConnection api=new BoxAPIConnection(TestConfig.getAccessToken());
  BoxFolder rootFolder=BoxFolder.getRootFolder(api);
  String fileName=""String_Node_Str"";
  byte[] fileBytes=""String_Node_Str"".getBytes(StandardCharsets.UTF_8);
  String originalMessage=""String_Node_Str"";
  String changedMessage=""String_Node_Str"";
  InputStream uploadStream=new ByteArrayInputStream(fileBytes);
  BoxFile uploadedFile=rootFolder.uploadFile(uploadStream,fileName).getResource();
  Date dueAt=new Date();
  BoxTask.Info taskInfo=uploadedFile.addTask(""String_Node_Str"",originalMessage,dueAt);
  BoxTask task=taskInfo.getResource();
  taskInfo.setMessage(changedMessage);
  taskInfo.setDueAt(dueAt);
  task.updateInfo(taskInfo);
  assertThat(taskInfo.getMessage(),is(equalTo(changedMessage)));
  assertThat(taskInfo.getDueAt(),is(equalTo(dueAt)));
  uploadedFile.delete();
}","@Test @Category(IntegrationTest.class) public void updateInfoSucceeds(){
  BoxAPIConnection api=new BoxAPIConnection(TestConfig.getAccessToken());
  BoxFolder rootFolder=BoxFolder.getRootFolder(api);
  String fileName=""String_Node_Str"";
  byte[] fileBytes=""String_Node_Str"".getBytes(StandardCharsets.UTF_8);
  String originalMessage=""String_Node_Str"";
  String changedMessage=""String_Node_Str"";
  InputStream uploadStream=new ByteArrayInputStream(fileBytes);
  BoxFile uploadedFile=rootFolder.uploadFile(uploadStream,fileName).getResource();
  Date dueAt=new Date();
  BoxTask.Info taskInfo=uploadedFile.addTask(BoxTask.Action.REVIEW,originalMessage,dueAt);
  BoxTask task=taskInfo.getResource();
  taskInfo.setMessage(changedMessage);
  taskInfo.setDueAt(dueAt);
  task.updateInfo(taskInfo);
  assertThat(taskInfo.getMessage(),is(equalTo(changedMessage)));
  assertThat(taskInfo.getDueAt(),is(equalTo(dueAt)));
  uploadedFile.delete();
}"
59604,"private JsonObject loadNextJsonObject(){
  if (this.currentPage == null) {
    this.loadNextPage();
  }
  while (this.currentPage.hasNext() || this.hasMorePages) {
    while (this.currentPage.hasNext()) {
      JsonObject jsonObject=this.currentPage.next().asObject();
      if (this.filter.shouldInclude(jsonObject)) {
        return jsonObject;
      }
    }
    if (this.hasMorePages) {
      this.loadNextPage();
    }
  }
  return null;
}","private JsonObject loadNextJsonObject(){
  if (this.currentPage == null) {
    this.loadNextPage();
  }
  while (this.currentPage.hasNext() || this.hasMorePages) {
    while (this.currentPage.hasNext()) {
      JsonObject jsonObject=this.currentPage.next().asObject();
      if (this.filter == null || this.filter.shouldInclude(jsonObject)) {
        return jsonObject;
      }
    }
    if (this.hasMorePages) {
      this.loadNextPage();
    }
  }
  return null;
}"
59605,"/** 
 * Sets the request body to the contents of a String. <p>If the contents of the body are large, then it may be more efficient to use an   {@link InputStream} instead ofa String. Using a String requires that the entire body be in memory before sending the request.</p>
 * @param body a String containing the contents of the body.
 */
public void setBody(String body){
  this.bodyLength=body.length();
  this.body=new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_8));
}","/** 
 * Sets the request body to the contents of a String. <p>If the contents of the body are large, then it may be more efficient to use an   {@link InputStream} instead ofa String. Using a String requires that the entire body be in memory before sending the request.</p>
 * @param body a String containing the contents of the body.
 */
public void setBody(String body){
  byte[] bytes=body.getBytes(StandardCharsets.UTF_8);
  this.bodyLength=bytes.length;
  this.body=new ByteArrayInputStream(bytes);
}"
59606,"boolean add(E item){
  boolean newItem=!this.linkedHashSet.remove(item);
  if (newItem) {
    this.linkedHashSet.add(item);
  }
  if (this.linkedHashSet.size() >= MAX_SIZE) {
    Iterator<E> it=this.linkedHashSet.iterator();
    it.next();
    it.remove();
  }
  return newItem;
}","boolean add(E item){
  boolean newItem=!this.linkedHashSet.remove(item);
  this.linkedHashSet.add(item);
  if (this.linkedHashSet.size() >= MAX_SIZE) {
    Iterator<E> it=this.linkedHashSet.iterator();
    it.next();
    it.remove();
  }
  return newItem;
}"
59607,"/** 
 * Indicates whether or not an event ID is a duplicate. <p>This method can be overridden by a subclass in order to provide custom de-duping logic.</p>
 * @param eventID the event ID.
 * @return         true if the event is a duplicate; otherwise false.
 */
protected boolean isDuplicate(String eventID){
  if (this.receivedEvents == null) {
    this.receivedEvents=new LinkedHashSet<String>(LRU_SIZE);
  }
  boolean newEvent=this.receivedEvents.add(eventID);
  if (newEvent && this.receivedEvents.size() > LRU_SIZE) {
    this.receivedEvents.iterator().remove();
  }
  return !newEvent;
}","/** 
 * Indicates whether or not an event ID is a duplicate. <p>This method can be overridden by a subclass in order to provide custom de-duping logic.</p>
 * @param eventID the event ID.
 * @return         true if the event is a duplicate; otherwise false.
 */
protected boolean isDuplicate(String eventID){
  if (this.receivedEvents == null) {
    this.receivedEvents=new LRUCache<String>();
  }
  return !this.receivedEvents.add(eventID);
}"
59608,"/** 
 * Sets the refresh token to use when refreshing an access token.
 * @param refreshToken a valid refresh token.
 */
public void setRefreshToken(String refreshToken){
  this.refreshToken=refreshToken;
  this.lastRefresh=System.currentTimeMillis();
}","/** 
 * Sets the refresh token to use when refreshing an access token.
 * @param refreshToken a valid refresh token.
 */
public void setRefreshToken(String refreshToken){
  this.refreshToken=refreshToken;
}"
59609,"private void loadNextPage(){
  QueryStringBuilder builder=new QueryStringBuilder();
  builder.addParam(""String_Node_Str"",this.limit);
  builder.addParam(""String_Node_Str"",this.offset);
  URL url;
  try {
    url=new URL(this.url,builder.toString());
  }
 catch (  MalformedURLException e) {
    throw new BoxAPIException(""String_Node_Str"");
  }
  BoxAPIRequest request=new BoxAPIRequest(this.api,url,""String_Node_Str"");
  BoxJSONResponse response=(BoxJSONResponse)request.send();
  String json=response.getJSON();
  JsonObject jsonObject=JsonObject.readFrom(json);
  String totalCountString=jsonObject.get(""String_Node_Str"").toString();
  this.totalCount=Double.valueOf(totalCountString).longValue();
  String offsetString=jsonObject.get(""String_Node_Str"").toString();
  this.offset=Double.valueOf(offsetString).longValue();
  this.hasMorePages=(this.offset + this.limit) < this.totalCount;
  JsonArray jsonArray=jsonObject.get(""String_Node_Str"").asArray();
  this.currentPage=jsonArray.iterator();
}","private void loadNextPage(){
  QueryStringBuilder builder=new QueryStringBuilder();
  builder.addParam(""String_Node_Str"",this.limit);
  builder.addParam(""String_Node_Str"",this.offset);
  URL url;
  try {
    url=new URL(this.url,builder.toString());
  }
 catch (  MalformedURLException e) {
    throw new BoxAPIException(""String_Node_Str"");
  }
  BoxAPIRequest request=new BoxAPIRequest(this.api,url,""String_Node_Str"");
  BoxJSONResponse response=(BoxJSONResponse)request.send();
  String json=response.getJSON();
  JsonObject jsonObject=JsonObject.readFrom(json);
  String totalCountString=jsonObject.get(""String_Node_Str"").toString();
  this.totalCount=Double.valueOf(totalCountString).longValue();
  String offsetString=jsonObject.get(""String_Node_Str"").toString();
  this.hasMorePages=(this.offset + this.limit) < this.totalCount;
  this.offset=Double.valueOf(offsetString).longValue() + this.limit;
  JsonArray jsonArray=jsonObject.get(""String_Node_Str"").asArray();
  this.currentPage=jsonArray.iterator();
}"
59610,"/** 
 * Adds all the given entries to the classpath suffix.
 * @param entries
 */
void addAllToSuffix(final String... entries){
  for (  final String classPathEntry : entries) {
    this.addToPrefix(classPathEntry);
  }
}","/** 
 * Adds all the given entries to the classpath suffix.
 * @param entries
 */
void addAllToSuffix(final String... entries){
  for (  final String classPathEntry : entries) {
    this.addToSuffix(classPathEntry);
  }
}"
59611,"/** 
 * Wait for all client alarms to finish executing and gracefully shutdown the clock.
 */
@Override public void close(){
  LOG.entering(CLASS_NAME,""String_Node_Str"");
synchronized (this.schedule) {
    if (this.isClosed) {
      LOG.log(Level.FINEST,""String_Node_Str"");
      return;
    }
    this.isClosed=true;
    final Time stopEvent=new StopTime(Math.max(this.timer.getCurrent(),this.lastClientAlarm + 1));
    LOG.log(Level.FINE,""String_Node_Str"",stopEvent);
    this.schedule.add(stopEvent);
    this.schedule.notify();
  }
  LOG.exiting(CLASS_NAME,""String_Node_Str"");
}","/** 
 * Wait for all client alarms to finish executing and gracefully shutdown the clock.
 */
@Override public void close(){
  LOG.entering(CLASS_NAME,""String_Node_Str"");
synchronized (this.schedule) {
    if (this.isClosed) {
      LOG.log(Level.FINEST,""String_Node_Str"");
      return;
    }
    this.isClosed=true;
    final Time stopEvent=new StopTime(Math.max(this.timer.getCurrent(),this.lastClientAlarm + 1));
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{stopEvent,this.numClientAlarms});
    this.schedule.add(stopEvent);
    this.schedule.notify();
  }
  LOG.exiting(CLASS_NAME,""String_Node_Str"");
}"
59612,"/** 
 * Start Hello REEF job with Driver and Client sharing the same process.
 * @param args command line parameters - not used.
 * @throws InjectionException configuration error.
 */
public static void main(final String[] args) throws InjectionException {
  try (final REEFEnvironment reef=REEFEnvironment.fromConfiguration(LOCAL_DRIVER_MODULE,DRIVER_CONFIG)){
    reef.run();
    final ReefServiceProtos.JobStatusProto status=reef.getLastStatus();
    LOG.log(Level.INFO,""String_Node_Str"",status);
  }
 }","/** 
 * Start Hello REEF job with Driver and Client sharing the same process.
 * @param args command line parameters - not used.
 * @throws InjectionException configuration error.
 */
public static void main(final String[] args) throws InjectionException {
  try (final REEFEnvironment reef=REEFEnvironment.fromConfiguration(LOCAL_DRIVER_MODULE,DRIVER_CONFIG,ENVIRONMENT_CONFIG)){
    reef.run();
    final ReefServiceProtos.JobStatusProto status=reef.getLastStatus();
    LOG.log(Level.INFO,""String_Node_Str"",status);
  }
 }"
59613,"/** 
 * Run REEF in-process using specified runtime and fail (raise an exception) in a specified class.
 * @param failMsgClass A class that should fail during the test.
 * @param runtimeConfig REEF runtime configuration. Can be e.g. Local or YARN.
 * @param timeOut REEF application timeout - not used yet.
 * @return Final job status. Final status for tests is usually somethingwith state = FAILED and exception like SimulatedDriverFailure.
 * @throws InjectionException configuration error.
 */
public static ReefServiceProtos.JobStatusProto runInProcess(final Class<?> failMsgClass,final Configuration runtimeConfig,final int timeOut) throws InjectionException {
  try (final REEFEnvironment reef=REEFEnvironment.fromConfiguration(runtimeConfig,buildDriverConfig(failMsgClass))){
    reef.run();
    return reef.getLastStatus();
  }
 }","/** 
 * Run REEF in-process using specified runtime and fail (raise an exception) in a specified class.
 * @param failMsgClass A class that should fail during the test.
 * @param runtimeConfig REEF runtime configuration. Can be e.g. Local or YARN.
 * @param timeOut REEF application timeout - not used yet.
 * @return Final job status. Final status for tests is usually somethingwith state = FAILED and exception like SimulatedDriverFailure.
 * @throws InjectionException configuration error.
 */
public static ReefServiceProtos.JobStatusProto runInProcess(final Class<?> failMsgClass,final Configuration runtimeConfig,final int timeOut) throws InjectionException {
  final Configuration driverConfig=TANG.newConfigurationBuilder(buildDriverConfig(failMsgClass)).bindNamedParameter(RemoteConfiguration.ManagerName.class,""String_Node_Str"").bindNamedParameter(RemoteConfiguration.MessageCodec.class,REEFMessageCodec.class).build();
  try (final REEFEnvironment reef=REEFEnvironment.fromConfiguration(runtimeConfig,driverConfig)){
    reef.run();
    return reef.getLastStatus();
  }
 }"
59614,"private static Configuration buildDriverConfig(final Class<?> failMsgClass){
  final Configuration driverConfig=DriverConfiguration.CONF.set(DriverConfiguration.GLOBAL_LIBRARIES,EnvironmentUtils.getClassLocation(FailDriver.class)).set(DriverConfiguration.DRIVER_IDENTIFIER,""String_Node_Str"" + failMsgClass.getSimpleName()).set(DriverConfiguration.ON_DRIVER_STARTED,FailDriver.StartHandler.class).set(DriverConfiguration.ON_DRIVER_STOP,FailDriver.StopHandler.class).set(DriverConfiguration.ON_EVALUATOR_ALLOCATED,FailDriver.AllocatedEvaluatorHandler.class).set(DriverConfiguration.ON_EVALUATOR_COMPLETED,FailDriver.CompletedEvaluatorHandler.class).set(DriverConfiguration.ON_EVALUATOR_FAILED,FailDriver.FailedEvaluatorHandler.class).set(DriverConfiguration.ON_CONTEXT_ACTIVE,FailDriver.ActiveContextHandler.class).set(DriverConfiguration.ON_CONTEXT_MESSAGE,FailDriver.ContextMessageHandler.class).set(DriverConfiguration.ON_CONTEXT_CLOSED,FailDriver.ClosedContextHandler.class).set(DriverConfiguration.ON_CONTEXT_FAILED,FailDriver.FailedContextHandler.class).set(DriverConfiguration.ON_TASK_RUNNING,FailDriver.RunningTaskHandler.class).set(DriverConfiguration.ON_TASK_SUSPENDED,FailDriver.SuspendedTaskHandler.class).set(DriverConfiguration.ON_TASK_MESSAGE,FailDriver.TaskMessageHandler.class).set(DriverConfiguration.ON_TASK_FAILED,FailDriver.FailedTaskHandler.class).set(DriverConfiguration.ON_TASK_COMPLETED,FailDriver.CompletedTaskHandler.class).build();
  return Tang.Factory.getTang().newConfigurationBuilder(driverConfig).bindNamedParameter(FailDriver.FailMsgClassName.class,failMsgClass.getName()).build();
}","private static Configuration buildDriverConfig(final Class<?> failMsgClass){
  final Configuration driverConfig=DriverConfiguration.CONF.set(DriverConfiguration.GLOBAL_LIBRARIES,EnvironmentUtils.getClassLocation(FailDriver.class)).set(DriverConfiguration.DRIVER_IDENTIFIER,""String_Node_Str"" + failMsgClass.getSimpleName()).set(DriverConfiguration.ON_DRIVER_STARTED,FailDriver.StartHandler.class).set(DriverConfiguration.ON_DRIVER_STOP,FailDriver.StopHandler.class).set(DriverConfiguration.ON_EVALUATOR_ALLOCATED,FailDriver.AllocatedEvaluatorHandler.class).set(DriverConfiguration.ON_EVALUATOR_COMPLETED,FailDriver.CompletedEvaluatorHandler.class).set(DriverConfiguration.ON_EVALUATOR_FAILED,FailDriver.FailedEvaluatorHandler.class).set(DriverConfiguration.ON_CONTEXT_ACTIVE,FailDriver.ActiveContextHandler.class).set(DriverConfiguration.ON_CONTEXT_MESSAGE,FailDriver.ContextMessageHandler.class).set(DriverConfiguration.ON_CONTEXT_CLOSED,FailDriver.ClosedContextHandler.class).set(DriverConfiguration.ON_CONTEXT_FAILED,FailDriver.FailedContextHandler.class).set(DriverConfiguration.ON_TASK_RUNNING,FailDriver.RunningTaskHandler.class).set(DriverConfiguration.ON_TASK_SUSPENDED,FailDriver.SuspendedTaskHandler.class).set(DriverConfiguration.ON_TASK_MESSAGE,FailDriver.TaskMessageHandler.class).set(DriverConfiguration.ON_TASK_FAILED,FailDriver.FailedTaskHandler.class).set(DriverConfiguration.ON_TASK_COMPLETED,FailDriver.CompletedTaskHandler.class).build();
  return TANG.newConfigurationBuilder(driverConfig).bindNamedParameter(FailDriver.FailMsgClassName.class,failMsgClass.getName()).build();
}"
59615,"public void testFailDriverTaskMessage() throws BindException, InjectionException {
  failOn(TaskMessage.class);
}","@Test public void testFailDriverTaskMessage() throws BindException, InjectionException {
  failOn(TaskMessage.class);
}"
59616,"public void testDriverCompleted() throws BindException, InjectionException {
  final ReefServiceProtos.JobStatusProto status=FailClient.runInProcess(REEFEnvironmentFailDriverTest.class,LOCAL_DRIVER_MODULE,0);
  Assert.assertNotNull(""String_Node_Str"",status);
  Assert.assertTrue(""String_Node_Str"",status.hasState());
  Assert.assertEquals(""String_Node_Str"",ReefServiceProtos.State.DONE,status.getState());
}","@Test public void testDriverCompleted() throws BindException, InjectionException {
  final ReefServiceProtos.JobStatusProto status=FailClient.runInProcess(REEFEnvironmentFailDriverTest.class,LOCAL_DRIVER_MODULE,0);
  Assert.assertNotNull(""String_Node_Str"",status);
  Assert.assertTrue(""String_Node_Str"",status.hasState());
  Assert.assertEquals(""String_Node_Str"",ReefServiceProtos.State.DONE,status.getState());
}"
59617,"public void testFailDriverStop() throws BindException, InjectionException {
  failOn(StopTime.class);
}","@Test public void testFailDriverStop() throws BindException, InjectionException {
  failOn(StopTime.class);
}"
59618,"public void testFailDriverCompletedTask() throws BindException, InjectionException {
  failOn(CompletedTask.class);
}","@Test public void testFailDriverCompletedTask() throws BindException, InjectionException {
  failOn(CompletedTask.class);
}"
59619,"public void testFailDriverActiveContext() throws BindException, InjectionException {
  failOn(ActiveContext.class);
}","@Test public void testFailDriverActiveContext() throws BindException, InjectionException {
  failOn(ActiveContext.class);
}"
59620,"public void testFailDriverAlarm() throws BindException, InjectionException {
  failOn(Alarm.class);
}","@Test public void testFailDriverAlarm() throws BindException, InjectionException {
  failOn(Alarm.class);
}"
59621,"public void testFailDriverCompletedEvaluator() throws BindException, InjectionException {
  failOn(CompletedEvaluator.class);
}","@Test public void testFailDriverCompletedEvaluator() throws BindException, InjectionException {
  failOn(CompletedEvaluator.class);
}"
59622,"public void testFailDriverRunningTask() throws BindException, InjectionException {
  failOn(RunningTask.class);
}","@Test public void testFailDriverRunningTask() throws BindException, InjectionException {
  failOn(RunningTask.class);
}"
59623,"public void testFailDriverSuspendedTask() throws BindException, InjectionException {
  failOn(SuspendedTask.class);
}","@Test public void testFailDriverSuspendedTask() throws BindException, InjectionException {
  failOn(SuspendedTask.class);
}"
59624,"/** 
 * Sets the state to RUNNING after the handlers for TaskStart have been called.
 */
void setRunning(){
  this.setState(State.RUNNING);
}","/** 
 * Sets the state to RUNNING after the handlers for TaskStart have been called.
 */
void setRunning(){
  this.setState(State.RUNNING);
  this.heartbeat();
}"
59625,"/** 
 * Run a job with a waiting timeout after which it will be killed, if it did not complete yet.
 * @param driverConfig the configuration for the driver. See DriverConfiguration for details.
 * @param timeOut      timeout on the job.
 * @return the state of the job after execution.
 */
public LauncherStatus run(final Configuration driverConfig,final long timeOut){
  final long endTime=System.currentTimeMillis() + timeOut;
  this.reef.submit(driverConfig);
synchronized (this) {
    while (!this.status.isDone()) {
      try {
        final long waitTime=endTime - System.currentTimeMillis();
        if (waitTime <= 0) {
          break;
        }
        LOG.log(Level.FINE,""String_Node_Str"",waitTime);
        this.wait(waitTime);
      }
 catch (      final InterruptedException ex) {
        LOG.log(Level.FINE,""String_Node_Str"",ex);
      }
    }
    if (System.currentTimeMillis() >= endTime) {
      LOG.log(Level.WARNING,""String_Node_Str"");
      this.status=LauncherStatus.FORCE_CLOSED;
    }
  }
  this.reef.close();
  return this.status;
}","/** 
 * Run a job with a waiting timeout after which it will be killed, if it did not complete yet.
 * @param driverConfig the configuration for the driver. See DriverConfiguration for details.
 * @param timeOut      timeout on the job.
 * @return the state of the job after execution.
 */
public LauncherStatus run(final Configuration driverConfig,final long timeOut){
  final long endTime=System.currentTimeMillis() + timeOut;
  this.reef.submit(driverConfig);
synchronized (this) {
    while (!this.status.isDone()) {
      try {
        final long waitTime=endTime - System.currentTimeMillis();
        if (waitTime <= 0) {
          break;
        }
        LOG.log(Level.FINE,""String_Node_Str"",waitTime);
        this.wait(waitTime);
      }
 catch (      final InterruptedException ex) {
        LOG.log(Level.FINE,""String_Node_Str"",ex);
      }
    }
    if (System.currentTimeMillis() >= endTime) {
      LOG.log(Level.WARNING,""String_Node_Str"");
      this.status=LauncherStatus.FORCE_CLOSED;
    }
  }
  this.reef.close();
synchronized (this) {
    return this.status;
  }
}"
59626,"/** 
 * @return the current status of the job.
 */
public LauncherStatus getStatus(){
  return this.status;
}","/** 
 * @return the current status of the job.
 */
public LauncherStatus getStatus(){
synchronized (this) {
    return this.status;
  }
}"
59627,"@Inject ConfigurableDirectoryTempFileCreator(@Parameter(TempFileRootFolder.class) final String rootFolder) throws IOException {
  this.tempFolderAsFile=new File(rootFolder);
  this.tempFolderAsFile.mkdirs();
  this.tempFolderAsPath=this.tempFolderAsFile.toPath();
  LOG.log(Level.FINE,""String_Node_Str"",this.tempFolderAsFile.getAbsolutePath());
}","@Inject ConfigurableDirectoryTempFileCreator(@Parameter(TempFileRootFolder.class) final String rootFolder) throws IOException {
  this.tempFolderAsFile=new File(rootFolder);
  if (!this.tempFolderAsFile.exists() && !this.tempFolderAsFile.mkdirs()) {
    LOG.log(Level.WARNING,""String_Node_Str"",this.tempFolderAsFile.getAbsolutePath());
  }
  this.tempFolderAsPath=this.tempFolderAsFile.toPath();
  LOG.log(Level.FINE,""String_Node_Str"",this.tempFolderAsFile.getAbsolutePath());
}"
59628,"@Inject WorkingDirectoryTempFileCreator() throws IOException {
  this.tempFolderAsFile=new File(""String_Node_Str"");
  this.tempFolderAsFile.mkdirs();
  this.tempFolderAsPath=this.tempFolderAsFile.toPath();
  LOG.log(Level.FINE,""String_Node_Str"",this.tempFolderAsFile.getAbsolutePath());
}","@Inject WorkingDirectoryTempFileCreator() throws IOException {
  this.tempFolderAsFile=new File(""String_Node_Str"");
  if (!this.tempFolderAsFile.exists() && !this.tempFolderAsFile.mkdirs()) {
    LOG.log(Level.WARNING,""String_Node_Str"",this.tempFolderAsFile.getAbsolutePath());
  }
  this.tempFolderAsPath=this.tempFolderAsFile.toPath();
  LOG.log(Level.FINE,""String_Node_Str"",this.tempFolderAsFile.getAbsolutePath());
}"
59629,"public File createJobSubmissionJAR(final JobSubmissionEvent jobSubmissionEvent,final Configuration driverConfiguration) throws IOException {
  final File jobSubmissionFolder=makejobSubmissionFolder();
  LOG.log(Level.FINE,""String_Node_Str"",jobSubmissionFolder);
  final File localFolder=new File(jobSubmissionFolder,this.fileNames.getLocalFolderName());
  final File globalFolder=new File(jobSubmissionFolder,this.fileNames.getGlobalFolderName());
  this.copy(jobSubmissionEvent.getGlobalFileSet(),globalFolder);
  this.copy(jobSubmissionEvent.getLocalFileSet(),localFolder);
  this.configurationSerializer.toFile(driverConfiguration,new File(localFolder,this.fileNames.getDriverConfigurationName()));
  final File jarFile=File.createTempFile(this.fileNames.getJobFolderPrefix(),this.fileNames.getJarFileSuffix());
  LOG.log(Level.FINE,""String_Node_Str"",jarFile);
  new JARFileMaker(jarFile).addChildren(jobSubmissionFolder).close();
  if (this.deleteTempFilesOnExit) {
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{jobSubmissionFolder.getAbsolutePath(),jarFile.getAbsolutePath()});
    jobSubmissionFolder.delete();
    jarFile.deleteOnExit();
  }
 else {
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{jobSubmissionFolder.getAbsolutePath(),jarFile.getAbsolutePath()});
  }
  return jarFile;
}","public File createJobSubmissionJAR(final JobSubmissionEvent jobSubmissionEvent,final Configuration driverConfiguration) throws IOException {
  final File jobSubmissionFolder=makejobSubmissionFolder();
  LOG.log(Level.FINE,""String_Node_Str"",jobSubmissionFolder);
  final File localFolder=new File(jobSubmissionFolder,this.fileNames.getLocalFolderName());
  final File globalFolder=new File(jobSubmissionFolder,this.fileNames.getGlobalFolderName());
  copy(jobSubmissionEvent.getGlobalFileSet(),globalFolder);
  copy(jobSubmissionEvent.getLocalFileSet(),localFolder);
  this.configurationSerializer.toFile(driverConfiguration,new File(localFolder,this.fileNames.getDriverConfigurationName()));
  final File jarFile=File.createTempFile(this.fileNames.getJobFolderPrefix(),this.fileNames.getJarFileSuffix());
  LOG.log(Level.FINE,""String_Node_Str"",jarFile);
  new JARFileMaker(jarFile).addChildren(jobSubmissionFolder).close();
  if (this.deleteTempFilesOnExit) {
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{jobSubmissionFolder.getAbsolutePath(),jarFile.getAbsolutePath()});
    if (!jobSubmissionFolder.delete()) {
      LOG.log(Level.WARNING,""String_Node_Str"",jobSubmissionFolder.getAbsolutePath());
    }
    jarFile.deleteOnExit();
  }
 else {
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{jobSubmissionFolder.getAbsolutePath(),jarFile.getAbsolutePath()});
  }
  return jarFile;
}"
59630,"public static void copy(final Iterable<FileResource> files,final File destinationFolder){
  if (!destinationFolder.exists()) {
    destinationFolder.mkdirs();
  }
  for (  final FileResource fileProto : files) {
    final File sourceFile=toFile(fileProto);
    final File destinationFile=new File(destinationFolder,fileProto.getName());
    if (destinationFile.exists()) {
      LOG.log(Level.FINEST,""String_Node_Str"",sourceFile.getAbsolutePath());
    }
 else {
      try {
        Files.copy(sourceFile.toPath(),destinationFile.toPath());
      }
 catch (      final IOException e) {
        final String message=new StringBuilder(""String_Node_Str"").append(sourceFile.getAbsolutePath()).append(""String_Node_Str"").append(destinationFile.getAbsolutePath()).append(""String_Node_Str"").toString();
        throw new RuntimeException(message,e);
      }
    }
  }
}","public static void copy(final Iterable<FileResource> files,final File destinationFolder){
  if (!destinationFolder.exists() && !destinationFolder.mkdirs()) {
    LOG.log(Level.WARNING,""String_Node_Str"",destinationFolder.getAbsolutePath());
  }
  for (  final FileResource fileProto : files) {
    final File sourceFile=toFile(fileProto);
    final File destinationFile=new File(destinationFolder,fileProto.getName());
    if (destinationFile.exists()) {
      LOG.log(Level.FINEST,""String_Node_Str"",sourceFile.getAbsolutePath());
    }
 else {
      try {
        Files.copy(sourceFile.toPath(),destinationFile.toPath());
      }
 catch (      final IOException e) {
        final String message=new StringBuilder(""String_Node_Str"").append(sourceFile.getAbsolutePath()).append(""String_Node_Str"").append(destinationFile.getAbsolutePath()).append(""String_Node_Str"").toString();
        throw new RuntimeException(message,e);
      }
    }
  }
}"
59631,"/** 
 * Adds a file to the JAR. If inputFile is a folder, it will be added recursively.
 * @param inputFile
 * @throws IOException
 */
public JARFileMaker add(final File inputFile) throws IOException {
  final String fileNameInJAR=makeRelative(inputFile);
  if (inputFile.isDirectory()) {
    final JarEntry entry=new JarEntry(fileNameInJAR);
    entry.setTime(inputFile.lastModified());
    this.jarOutputStream.putNextEntry(entry);
    this.jarOutputStream.closeEntry();
    for (    final File nestedFile : inputFile.listFiles()) {
      add(nestedFile);
    }
    return this;
  }
  final JarEntry entry=new JarEntry(fileNameInJAR);
  entry.setTime(inputFile.lastModified());
  this.jarOutputStream.putNextEntry(entry);
  try (final BufferedInputStream in=new BufferedInputStream(new FileInputStream(inputFile))){
    IOUtils.copy(in,this.jarOutputStream);
    this.jarOutputStream.closeEntry();
  }
 catch (  final FileNotFoundException ex) {
    LOG.log(Level.WARNING,""String_Node_Str"" + inputFile,ex);
  }
  return this;
}","/** 
 * Adds a file to the JAR. If inputFile is a folder, it will be added recursively.
 * @param inputFile
 * @throws IOException
 */
public JARFileMaker add(final File inputFile) throws IOException {
  final String fileNameInJAR=makeRelative(inputFile);
  if (inputFile.isDirectory()) {
    final JarEntry entry=new JarEntry(fileNameInJAR);
    entry.setTime(inputFile.lastModified());
    this.jarOutputStream.putNextEntry(entry);
    this.jarOutputStream.closeEntry();
    final File[] files=inputFile.listFiles();
    if (files != null) {
      for (      final File nestedFile : files) {
        add(nestedFile);
      }
    }
    return this;
  }
  final JarEntry entry=new JarEntry(fileNameInJAR);
  entry.setTime(inputFile.lastModified());
  this.jarOutputStream.putNextEntry(entry);
  try (final BufferedInputStream in=new BufferedInputStream(new FileInputStream(inputFile))){
    IOUtils.copy(in,this.jarOutputStream);
    this.jarOutputStream.closeEntry();
  }
 catch (  final FileNotFoundException ex) {
    LOG.log(Level.WARNING,""String_Node_Str"" + inputFile,ex);
  }
  return this;
}"
59632,"public JARFileMaker addChildren(final File folder) throws IOException {
  this.relativeStartCanonicalPath=folder.getCanonicalPath();
  for (  final File f : folder.listFiles()) {
    this.add(f);
  }
  this.relativeStartCanonicalPath=null;
  return this;
}","public JARFileMaker addChildren(final File folder) throws IOException {
  this.relativeStartCanonicalPath=folder.getCanonicalPath();
  final File[] files=folder.listFiles();
  if (files != null) {
    for (    final File f : files) {
      this.add(f);
    }
  }
  this.relativeStartCanonicalPath=null;
  return this;
}"
59633,"/** 
 * @return the process ID of the JVM, if running on Linux/Windows. This returns -1 for other OSs.
 */
public static long getPID(){
  if (isUnix()) {
    try {
      final Process process=new ProcessBuilder().command(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").start();
      final byte[] returnBytes=new byte[128];
      process.getInputStream().read(returnBytes);
      final Long result=Long.valueOf(new String(returnBytes,StandardCharsets.UTF_8).trim());
      process.destroy();
      return result;
    }
 catch (    final Exception e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
      return -1;
    }
  }
 else   if (isWindows()) {
    try {
      final Process process=new ProcessBuilder().command(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").start();
      final byte[] returnBytes=new byte[128];
      process.getInputStream().read(returnBytes);
      final Long result=Long.valueOf(new String(returnBytes,StandardCharsets.UTF_8).split(""String_Node_Str"")[1].trim());
      process.destroy();
      return result;
    }
 catch (    final Exception e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
      return -1;
    }
  }
 else {
    return -1;
  }
}","/** 
 * @return the process ID of the JVM, if running on Linux/Windows. This returns -1 for other OSs.
 */
public static long getPID(){
  if (isUnix()) {
    try {
      final Process process=new ProcessBuilder().command(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").start();
      final byte[] returnBytes=new byte[128];
      if (process.getInputStream().read(returnBytes) == -1) {
        LOG.log(Level.FINE,""String_Node_Str"");
      }
      final Long result=Long.valueOf(new String(returnBytes,StandardCharsets.UTF_8).trim());
      process.destroy();
      return result;
    }
 catch (    final Exception e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
      return -1;
    }
  }
 else   if (isWindows()) {
    try {
      final Process process=new ProcessBuilder().command(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").start();
      final byte[] returnBytes=new byte[128];
      if (process.getInputStream().read(returnBytes) == -1) {
        LOG.log(Level.FINE,""String_Node_Str"");
      }
      final Long result=Long.valueOf(new String(returnBytes,StandardCharsets.UTF_8).split(""String_Node_Str"")[1].trim());
      process.destroy();
      return result;
    }
 catch (    final Exception e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
      return -1;
    }
  }
 else {
    return -1;
  }
}"
59634,"public void addCLRFiles(final File folder) throws BindException {
  try (final LoggingScope ls=this.loggingScopeFactory.getNewLoggingScope(""String_Node_Str"")){
    ConfigurationModule result=this.driverConfigModule;
    for (    final File f : folder.listFiles()) {
      if (f.canRead() && f.exists() && f.isFile()) {
        result=result.set(DriverConfiguration.GLOBAL_FILES,f.getAbsolutePath());
      }
    }
    this.driverConfigModule=result.set(DriverConfiguration.DRIVER_MEMORY,this.driverMemory).set(DriverConfiguration.DRIVER_IDENTIFIER,this.driverId).set(DriverConfiguration.DRIVER_JOB_SUBMISSION_DIRECTORY,this.jobSubmissionDirectory);
    final Path globalLibFile=Paths.get(NativeInterop.GLOBAL_LIBRARIES_FILENAME);
    if (!Files.exists(globalLibFile)) {
      LOG.log(Level.FINE,""String_Node_Str"",globalLibFile.toAbsolutePath());
    }
 else {
      String globalLibString=""String_Node_Str"";
      try {
        globalLibString=new String(Files.readAllBytes(globalLibFile),StandardCharsets.UTF_8);
      }
 catch (      final Exception e) {
        LOG.log(Level.WARNING,""String_Node_Str"" + globalLibFile.toAbsolutePath());
      }
      for (      final String s : globalLibString.split(""String_Node_Str"")) {
        final File f=new File(s);
        this.driverConfigModule=this.driverConfigModule.set(DriverConfiguration.GLOBAL_LIBRARIES,f.getPath());
      }
    }
    this.driverConfiguration=Configurations.merge(this.driverConfigModule.build(),getHTTPConfiguration(),getNameServerConfiguration());
  }
 }","public void addCLRFiles(final File folder) throws BindException {
  try (final LoggingScope ls=this.loggingScopeFactory.getNewLoggingScope(""String_Node_Str"")){
    ConfigurationModule result=this.driverConfigModule;
    final File[] files=folder.listFiles();
    if (files != null) {
      for (      final File f : files) {
        if (f.canRead() && f.exists() && f.isFile()) {
          result=result.set(DriverConfiguration.GLOBAL_FILES,f.getAbsolutePath());
        }
      }
    }
    this.driverConfigModule=result.set(DriverConfiguration.DRIVER_MEMORY,this.driverMemory).set(DriverConfiguration.DRIVER_IDENTIFIER,this.driverId).set(DriverConfiguration.DRIVER_JOB_SUBMISSION_DIRECTORY,this.jobSubmissionDirectory);
    final Path globalLibFile=Paths.get(NativeInterop.GLOBAL_LIBRARIES_FILENAME);
    if (!Files.exists(globalLibFile)) {
      LOG.log(Level.FINE,""String_Node_Str"",globalLibFile.toAbsolutePath());
    }
 else {
      String globalLibString=""String_Node_Str"";
      try {
        globalLibString=new String(Files.readAllBytes(globalLibFile),StandardCharsets.UTF_8);
      }
 catch (      final Exception e) {
        LOG.log(Level.WARNING,""String_Node_Str"" + globalLibFile.toAbsolutePath());
      }
      for (      final String s : globalLibString.split(""String_Node_Str"")) {
        final File f=new File(s);
        this.driverConfigModule=this.driverConfigModule.set(DriverConfiguration.GLOBAL_LIBRARIES,f.getPath());
      }
    }
    this.driverConfiguration=Configurations.merge(this.driverConfigModule.build(),getHTTPConfiguration(),getNameServerConfiguration());
  }
 }"
59635,"/** 
 * @param args command line parameters.
 * @throws BindException      configuration error.
 * @throws InjectionException configuration error.
 */
@Test public void testMultipleInstances() throws BindException, InjectionException {
  final Configuration runtimeConfiguration=LocalRuntimeConfiguration.CONF.set(LocalRuntimeConfiguration.MAX_NUMBER_OF_EVALUATORS,2).build();
  final LauncherStatus status=runReefJob(runtimeConfiguration,JOB_TIMEOUT);
  Assert.assertTrue(""String_Node_Str"" + status,status.isSuccess());
}","/** 
 * @throws BindException      configuration error.
 * @throws InjectionException configuration error.
 */
@Test public void testMultipleInstances() throws BindException, InjectionException {
  final Configuration runtimeConfiguration=LocalRuntimeConfiguration.CONF.set(LocalRuntimeConfiguration.MAX_NUMBER_OF_EVALUATORS,2).build();
  final LauncherStatus status=runReefJob(runtimeConfiguration,JOB_TIMEOUT);
  Assert.assertTrue(""String_Node_Str"" + status,status.isSuccess());
}"
59636,"/** 
 * Wait a certain period of time for the result of the task.
 */
@Override public TOutput get(final long timeout,final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
  if (!countDownLatch.await(timeout,unit)) {
    throw new TimeoutException();
  }
  if (userResult != null) {
    return userResult;
  }
 else {
    assert(userException != null);
    throw new ExecutionException(userException);
  }
}","/** 
 * Wait a certain period of time for the result of the task.
 */
@Override public TOutput get(final long timeout,final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
}"
59637,"/** 
 * Concurrency: Called by multiple threads. Parameter: Same arguments can come in multiple times. (e.g. preemption message coming before tasklet completion message multiple times)
 */
void completeTasklet(final String workerId,final int taskletId,final Serializable result){
  lock.lock();
  try {
    if (!terminated) {
      if (runningWorkers.containsKey(workerId)) {
        final VortexWorkerManager worker=this.runningWorkers.get(workerId);
        final Tasklet tasklet=worker.taskletCompleted(taskletId,result);
        this.schedulingPolicy.taskletCompleted(worker,tasklet);
        noWorkerOrResource.signal();
      }
    }
  }
  finally {
    lock.unlock();
  }
}","/** 
 * Concurrency: Called by multiple threads. Parameter: Same arguments can come in multiple times. (e.g. preemption message coming before tasklet completion message multiple times)
 */
void completeTasklet(final String workerId,final int taskletId,final Serializable result){
  lock.lock();
  try {
    if (!terminated && runningWorkers.containsKey(workerId)) {
      final VortexWorkerManager worker=this.runningWorkers.get(workerId);
      final Tasklet tasklet=worker.taskletCompleted(taskletId,result);
      this.schedulingPolicy.taskletCompleted(worker,tasklet);
      noWorkerOrResource.signal();
    }
  }
  finally {
    lock.unlock();
  }
}"
59638,"/** 
 * Concurrency: Called by multiple threads. Parameter: Same arguments can come in multiple times. (e.g. preemption message coming before tasklet error message multiple times)
 */
void errorTasklet(final String workerId,final int taskletId,final Exception exception){
  lock.lock();
  try {
    if (!terminated) {
      if (runningWorkers.containsKey(workerId)) {
        final VortexWorkerManager worker=this.runningWorkers.get(workerId);
        final Tasklet tasklet=worker.taskletThrewException(taskletId,exception);
        this.schedulingPolicy.taskletFailed(worker,tasklet);
        noWorkerOrResource.signal();
      }
    }
  }
  finally {
    lock.unlock();
  }
}","/** 
 * Concurrency: Called by multiple threads. Parameter: Same arguments can come in multiple times. (e.g. preemption message coming before tasklet error message multiple times)
 */
void errorTasklet(final String workerId,final int taskletId,final Exception exception){
  lock.lock();
  try {
    if (!terminated && runningWorkers.containsKey(workerId)) {
      final VortexWorkerManager worker=this.runningWorkers.get(workerId);
      final Tasklet tasklet=worker.taskletThrewException(taskletId,exception);
      this.schedulingPolicy.taskletFailed(worker,tasklet);
      noWorkerOrResource.signal();
    }
  }
  finally {
    lock.unlock();
  }
}"
59639,"<TOutput extends Serializable>Tasklet taskletCompleted(final Integer taskletId,final TOutput result){
  final Tasklet<?,TOutput> tasklet=runningTasklets.remove(taskletId);
  assert(tasklet != null);
  tasklet.completed(result);
  return tasklet;
}","<TOutput extends Serializable>Tasklet taskletCompleted(final Integer taskletId,final TOutput result){
}"
59640,"Tasklet taskletThrewException(final Integer taskletId,final Exception exception){
  final Tasklet tasklet=runningTasklets.remove(taskletId);
  assert(tasklet != null);
  tasklet.threwException(exception);
  return tasklet;
}","Tasklet taskletThrewException(final Integer taskletId,final Exception exception){
}"
59641,"<TInput extends Serializable,TOutput extends Serializable>void launchTasklet(final Tasklet<TInput,TOutput> tasklet){
  assert(!runningTasklets.containsKey(tasklet.getId()));
  runningTasklets.put(tasklet.getId(),tasklet);
  final TaskletExecutionRequest<TInput,TOutput> taskletExecutionRequest=new TaskletExecutionRequest<>(tasklet.getId(),tasklet.getUserFunction(),tasklet.getInput());
  vortexRequestor.send(reefTask,taskletExecutionRequest);
}","<TInput extends Serializable,TOutput extends Serializable>void launchTasklet(final Tasklet<TInput,TOutput> tasklet){
}"
59642,"private void setupBridge(final ClrHandlersInitializer initializer){
  LOG.log(Level.INFO,""String_Node_Str"");
  try (final LoggingScope lb=this.loggingScopeFactory.setupBridge()){
    final CLRBufferedLogHandler handler=getCLRBufferedLogHandler();
    if (handler == null) {
      LOG.log(Level.WARNING,""String_Node_Str"");
    }
 else {
      handler.setDriverInitialized();
      LOG.log(Level.INFO,""String_Node_Str"");
    }
    final String portNumber=httpServer == null ? null : Integer.toString((httpServer.getPort()));
    if (portNumber != null) {
      try {
        final File outputFileName=new File(reefFileNames.getDriverHttpEndpoint());
        BufferedWriter out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFileName),StandardCharsets.UTF_8));
        out.write(localAddressProvider.getLocalAddress() + ""String_Node_Str"" + portNumber+ ""String_Node_Str"");
        out.close();
      }
 catch (      IOException ex) {
        throw new RuntimeException(ex);
      }
    }
    this.evaluatorRequestorBridge=new EvaluatorRequestorBridge(JobDriver.this.evaluatorRequestor,false,loggingScopeFactory);
    JobDriver.this.handlerManager=initializer.getClrHandlers(portNumber,evaluatorRequestorBridge);
    try (final LoggingScope lp=this.loggingScopeFactory.getNewLoggingScope(""String_Node_Str"")){
      final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(""String_Node_Str"");
      NativeInterop.clrSystemHttpServerHandlerOnNext(JobDriver.this.handlerManager.getHttpServerEventHandler(),httpServerEventBridge,this.interopLogger);
      final String specList=httpServerEventBridge.getUriSpecification();
      LOG.log(Level.INFO,""String_Node_Str"",specList);
      if (specList != null) {
        final String[] specs=specList.split(""String_Node_Str"");
        for (        final String s : specs) {
          final HttpHandler h=new HttpServerBridgeEventHandler();
          h.setUriSpecification(s);
          this.httpServer.addHttpHandler(h);
        }
      }
    }
   }
   LOG.log(Level.INFO,""String_Node_Str"");
}","private void setupBridge(final ClrHandlersInitializer initializer){
  LOG.log(Level.INFO,""String_Node_Str"");
  try (final LoggingScope lb=this.loggingScopeFactory.setupBridge()){
    final CLRBufferedLogHandler handler=getCLRBufferedLogHandler();
    if (handler == null) {
      LOG.log(Level.WARNING,""String_Node_Str"");
    }
 else {
      handler.setDriverInitialized();
      LOG.log(Level.INFO,""String_Node_Str"");
    }
    final String portNumber=httpServer == null ? null : Integer.toString(httpServer.getPort());
    if (portNumber != null) {
      try {
        final File outputFileName=new File(reefFileNames.getDriverHttpEndpoint());
        BufferedWriter out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFileName),StandardCharsets.UTF_8));
        out.write(localAddressProvider.getLocalAddress() + ""String_Node_Str"" + portNumber+ ""String_Node_Str"");
        out.close();
      }
 catch (      IOException ex) {
        throw new RuntimeException(ex);
      }
    }
    this.evaluatorRequestorBridge=new EvaluatorRequestorBridge(JobDriver.this.evaluatorRequestor,false,loggingScopeFactory);
    JobDriver.this.handlerManager=initializer.getClrHandlers(portNumber,evaluatorRequestorBridge);
    try (final LoggingScope lp=this.loggingScopeFactory.getNewLoggingScope(""String_Node_Str"")){
      final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(""String_Node_Str"");
      NativeInterop.clrSystemHttpServerHandlerOnNext(JobDriver.this.handlerManager.getHttpServerEventHandler(),httpServerEventBridge,this.interopLogger);
      final String specList=httpServerEventBridge.getUriSpecification();
      LOG.log(Level.INFO,""String_Node_Str"",specList);
      if (specList != null) {
        final String[] specs=specList.split(""String_Node_Str"");
        for (        final String s : specs) {
          final HttpHandler h=new HttpServerBridgeEventHandler();
          h.setUriSpecification(s);
          this.httpServer.addHttpHandler(h);
        }
      }
    }
   }
   LOG.log(Level.INFO,""String_Node_Str"");
}"
59643,"/** 
 * Compare the <b>State</b> of two LauncherStatus objects. Note that it does NOT compare the exceptions - just the states.
 * @return True if both LauncherStatus objects are in the same state.
 */
@Override public boolean equals(final Object other){
  return this == other || (other instanceof LauncherStatus && ((LauncherStatus)other).state == this.state);
}","/** 
 * Compare the <b>State</b> of two LauncherStatus objects. Note that it does NOT compare the exceptions - just the states.
 * @return True if both LauncherStatus objects are in the same state.
 */
@Override public boolean equals(final Object other){
  return this == other || other instanceof LauncherStatus && ((LauncherStatus)other).state == this.state;
}"
59644,"/** 
 * @param messageSourceID The message's sourceID. This will be accessible in the Driver for routing.
 * @param theBytes        The actual content of the message, serialized into a byte[]
 * @return a new EvaluatorMessage with the given content.
 */
public static ContextMessage from(final String messageSourceID,final byte[] theBytes){
  assert(theBytes != null && messageSourceID != null);
  return new ContextMessage(messageSourceID,theBytes);
}","/** 
 * @param messageSourceID The message's sourceID. This will be accessible in the Driver for routing.
 * @param theBytes        The actual content of the message, serialized into a byte[]
 * @return a new EvaluatorMessage with the given content.
 */
public static ContextMessage from(final String messageSourceID,final byte[] theBytes){
}"
59645,"public ServiceRuntimeException(final Throwable cause){
  super(cause);
  this.isWrappedServiceException=(cause instanceof ServiceException);
}","public ServiceRuntimeException(final Throwable cause){
  super(cause);
  this.isWrappedServiceException=cause instanceof ServiceException;
}"
59646,"/** 
 * Inform the client of a failed job.
 * @param jobStatusProto
 */
private synchronized void onJobFailure(final JobStatusProto jobStatusProto){
  assert(jobStatusProto.getState() == ReefServiceProtos.State.FAILED);
  final String id=this.jobId;
  final Optional<byte[]> data=jobStatusProto.hasException() ? Optional.of(jobStatusProto.getException().toByteArray()) : Optional.<byte[]>empty();
  final Optional<Throwable> cause=this.exceptionCodec.fromBytes(data);
  final String message=cause.isPresent() ? cause.get().getMessage() : ""String_Node_Str"";
  final Optional<String> description=Optional.of(message);
  final FailedJob failedJob=new FailedJob(id,message,description,cause,data);
  this.failedJobEventHandler.onNext(failedJob);
}","/** 
 * Inform the client of a failed job.
 * @param jobStatusProto status of the failed job
 */
private synchronized void onJobFailure(final JobStatusProto jobStatusProto){
}"
59647,"@Override public synchronized void onJobStatusMessage(final RemoteMessage<ReefServiceProtos.JobStatusProto> message){
  final ReefServiceProtos.JobStatusProto status=message.getMessage();
  final String jobIdentifier=status.getIdentifier();
  LOG.log(Level.FINE,""String_Node_Str"" + jobIdentifier);
  if (status.getState() == ReefServiceProtos.State.INIT) {
    try {
      final RunningJobImpl runningJob=this.newRunningJob(status.getIdentifier(),message.getIdentifier().toString());
      this.put(runningJob);
    }
 catch (    final BindException|InjectionException configError) {
      throw new RuntimeException(""String_Node_Str"" + status,configError);
    }
  }
  this.get(jobIdentifier).onNext(status);
  if ((status.getState() != ReefServiceProtos.State.RUNNING) && (status.getState() != ReefServiceProtos.State.INIT)) {
    this.remove(status.getIdentifier());
  }
  LOG.log(Level.FINE,""String_Node_Str"" + jobIdentifier);
}","@Override public synchronized void onJobStatusMessage(final RemoteMessage<ReefServiceProtos.JobStatusProto> message){
  final ReefServiceProtos.JobStatusProto status=message.getMessage();
  final String jobIdentifier=status.getIdentifier();
  LOG.log(Level.FINE,""String_Node_Str"" + jobIdentifier);
  if (status.getState() == ReefServiceProtos.State.INIT) {
    try {
      final RunningJobImpl runningJob=this.newRunningJob(status.getIdentifier(),message.getIdentifier().toString());
      this.put(runningJob);
    }
 catch (    final BindException|InjectionException configError) {
      throw new RuntimeException(""String_Node_Str"" + status,configError);
    }
  }
  this.get(jobIdentifier).onNext(status);
  if (status.getState() != ReefServiceProtos.State.RUNNING && status.getState() != ReefServiceProtos.State.INIT) {
    this.remove(status.getIdentifier());
  }
  LOG.log(Level.FINE,""String_Node_Str"" + jobIdentifier);
}"
59648,"/** 
 * Process a message with status READY from a context.
 * @param contextStatusProto
 * @param notifyClientOnNewActiveContext whether or not to inform the application when this in fact refers to a newcontext.
 */
private synchronized void onContextReady(final ReefServiceProtos.ContextStatusProto contextStatusProto,final boolean notifyClientOnNewActiveContext){
  assert(ReefServiceProtos.ContextStatusProto.State.READY == contextStatusProto.getContextState());
  final String contextID=contextStatusProto.getContextId();
  if (this.isUnknownContextId(contextID)) {
    this.onNewContext(contextStatusProto,notifyClientOnNewActiveContext);
  }
  for (  final ReefServiceProtos.ContextStatusProto.ContextMessageProto contextMessageProto : contextStatusProto.getContextMessageList()) {
    final byte[] theMessage=contextMessageProto.getMessage().toByteArray();
    final String sourceID=contextMessageProto.getSourceId();
    this.messageDispatcher.onContextMessage(new ContextMessageImpl(theMessage,contextID,sourceID));
  }
}","/** 
 * Process a message with status READY from a context.
 * @param contextStatusProto
 * @param notifyClientOnNewActiveContext whether or not to inform the application when this in fact refers to a newcontext.
 */
private synchronized void onContextReady(final ReefServiceProtos.ContextStatusProto contextStatusProto,final boolean notifyClientOnNewActiveContext){
}"
59649,"private synchronized void onContextFailed(final ReefServiceProtos.ContextStatusProto contextStatusProto){
  assert(ReefServiceProtos.ContextStatusProto.State.FAIL == contextStatusProto.getContextState());
  final String contextID=contextStatusProto.getContextId();
  LOG.log(Level.FINE,""String_Node_Str"",contextID);
  if (this.isUnknownContextId(contextID)) {
    this.onNewContext(contextStatusProto,false);
  }
  final EvaluatorContext context=getContext(contextID);
  this.removeContext(context);
  this.messageDispatcher.onContextFailed(context.getFailedContext(contextStatusProto));
}","private synchronized void onContextFailed(final ReefServiceProtos.ContextStatusProto contextStatusProto){
}"
59650,"private synchronized void onContextDone(final ReefServiceProtos.ContextStatusProto contextStatusProto){
  assert(ReefServiceProtos.ContextStatusProto.State.DONE == contextStatusProto.getContextState());
  final String contextID=contextStatusProto.getContextId();
  if (isUnknownContextId(contextID)) {
    throw new RuntimeException(""String_Node_Str"" + contextID + ""String_Node_Str"");
  }
 else {
    LOG.log(Level.FINE,""String_Node_Str"",contextID);
    final EvaluatorContext context=getContext(contextID);
    removeContext(context);
    if (context.isRootContext()) {
      LOG.log(Level.FINE,""String_Node_Str"",contextID);
    }
 else {
      final EvaluatorContext parentContext=this.getContext(context.getParentId().get());
      this.messageDispatcher.onContextClose(context.getClosedContext(parentContext));
    }
  }
}","private synchronized void onContextDone(final ReefServiceProtos.ContextStatusProto contextStatusProto){
}"
59651,"public synchronized FailedContext getFailedContext(final ReefServiceProtos.ContextStatusProto contextStatusProto){
  assert(ReefServiceProtos.ContextStatusProto.State.FAIL == contextStatusProto.getContextState());
  final String id=this.getId();
  final Optional<String> description=Optional.empty();
  final Optional<byte[]> data=contextStatusProto.hasError() ? Optional.of(contextStatusProto.getError().toByteArray()) : Optional.<byte[]>empty();
  final Optional<Throwable> cause=data.isPresent() ? this.exceptionCodec.fromBytes(data) : Optional.<Throwable>empty();
  final String message=cause.isPresent() ? cause.get().getMessage() : ""String_Node_Str"";
  final Optional<ActiveContext> parentContext=getParentId().isPresent() ? Optional.<ActiveContext>of(this.contextRepresenters.getContext(getParentId().get())) : Optional.<ActiveContext>empty();
  final String evaluatorID=getEvaluatorId();
  return new FailedContextImpl(id,message,description,cause,data,parentContext,this.evaluatorDescriptor,evaluatorID);
}","public synchronized FailedContext getFailedContext(final ReefServiceProtos.ContextStatusProto contextStatusProto){
}"
59652,"/** 
 * Merges the Configurations provided by the evaluatorConfigurationProviders into the given serviceConfiguration, if any.
 */
private Optional<Configuration> makeRootServiceConfiguration(final Optional<Configuration> serviceConfiguration){
  final EvaluatorType evaluatorType=this.evaluatorManager.getEvaluatorDescriptor().getProcess().getType();
  if (EvaluatorType.CLR == evaluatorType) {
    LOG.log(Level.FINE,""String_Node_Str"",evaluatorType);
    return serviceConfiguration;
  }
  if ((!serviceConfiguration.isPresent()) && this.evaluatorConfigurationProviders.isEmpty()) {
    LOG.info(""String_Node_Str"");
    return Optional.empty();
  }
 else {
    final ConfigurationBuilder configurationBuilder=getConfigurationBuilder(serviceConfiguration);
    for (    final ConfigurationProvider configurationProvider : this.evaluatorConfigurationProviders) {
      configurationBuilder.addConfiguration(configurationProvider.getConfiguration());
    }
    return Optional.of(configurationBuilder.build());
  }
}","/** 
 * Merges the Configurations provided by the evaluatorConfigurationProviders into the given serviceConfiguration, if any.
 */
private Optional<Configuration> makeRootServiceConfiguration(final Optional<Configuration> serviceConfiguration){
  final EvaluatorType evaluatorType=this.evaluatorManager.getEvaluatorDescriptor().getProcess().getType();
  if (EvaluatorType.CLR == evaluatorType) {
    LOG.log(Level.FINE,""String_Node_Str"",evaluatorType);
    return serviceConfiguration;
  }
  if (!serviceConfiguration.isPresent() && this.evaluatorConfigurationProviders.isEmpty()) {
    LOG.info(""String_Node_Str"");
    return Optional.empty();
  }
 else {
    final ConfigurationBuilder configurationBuilder=getConfigurationBuilder(serviceConfiguration);
    for (    final ConfigurationProvider configurationProvider : this.evaluatorConfigurationProviders) {
      configurationBuilder.addConfiguration(configurationProvider.getConfiguration());
    }
    return Optional.of(configurationBuilder.build());
  }
}"
59653,"/** 
 * Process an evaluator message that indicates a crash.
 * @param evaluatorStatusProto
 */
private synchronized void onEvaluatorFailed(final ReefServiceProtos.EvaluatorStatusProto evaluatorStatusProto){
  assert(evaluatorStatusProto.getState() == ReefServiceProtos.State.FAILED);
  final EvaluatorException evaluatorException;
  if (evaluatorStatusProto.hasError()) {
    final Optional<Throwable> exception=this.exceptionCodec.fromBytes(evaluatorStatusProto.getError().toByteArray());
    if (exception.isPresent()) {
      evaluatorException=new EvaluatorException(getId(),exception.get());
    }
 else {
      evaluatorException=new EvaluatorException(getId(),new Exception(""String_Node_Str""));
    }
  }
 else {
    evaluatorException=new EvaluatorException(getId(),new Exception(""String_Node_Str""));
  }
  onEvaluatorException(evaluatorException);
}","/** 
 * Process an evaluator message that indicates a crash.
 * @param evaluatorStatusProto
 */
private synchronized void onEvaluatorFailed(final ReefServiceProtos.EvaluatorStatusProto evaluatorStatusProto){
}"
59654,"/** 
 * Process an evaluator message that indicates that the evaluator shut down cleanly.
 * @param message
 */
private synchronized void onEvaluatorDone(final ReefServiceProtos.EvaluatorStatusProto message){
  assert(message.getState() == ReefServiceProtos.State.DONE);
  LOG.log(Level.FINEST,""String_Node_Str"",getId());
  this.stateManager.setDone();
  this.messageDispatcher.onEvaluatorCompleted(new CompletedEvaluatorImpl(this.evaluatorId));
  close();
}","/** 
 * Process an evaluator message that indicates that the evaluator shut down cleanly.
 * @param message
 */
private synchronized void onEvaluatorDone(final ReefServiceProtos.EvaluatorStatusProto message){
}"
59655,"/** 
 * Return true if the state is DONE, FAILED, or KILLED, <em>and</em> there are no messages queued or in processing.
 */
public boolean isClosed(){
  return this.messageDispatcher.isEmpty() && (this.stateManager.isDoneOrFailedOrKilled());
}","/** 
 * Return true if the state is DONE, FAILED, or KILLED, <em>and</em> there are no messages queued or in processing.
 */
public boolean isClosed(){
  return this.messageDispatcher.isEmpty() && this.stateManager.isDoneOrFailedOrKilled();
}"
59656,"synchronized boolean isAllocatedOrSubmittedOrRunning(){
  return (this.state == EvaluatorState.ALLOCATED || this.state == EvaluatorState.SUBMITTED || this.state == EvaluatorState.RUNNING);
}","synchronized boolean isAllocatedOrSubmittedOrRunning(){
  return this.state == EvaluatorState.ALLOCATED || this.state == EvaluatorState.SUBMITTED || this.state == EvaluatorState.RUNNING;
}"
59657,"@Inject Evaluators(){
  LOG.log(Level.FINE,""String_Node_Str"");
  assert(SingletonAsserter.assertSingleton(Evaluators.class));
}","@Inject Evaluators(){
}"
59658,"private synchronized void onRMRunning(final RuntimeStatusEvent runtimeStatusEvent){
  assert(runtimeStatusEvent.getState() == ReefServiceProtos.State.RUNNING);
  if (this.isIdle()) {
    this.driverIdleManager.get().onPotentiallyIdle(IDLE_MESSAGE);
  }
}","private synchronized void onRMRunning(final RuntimeStatusEvent runtimeStatusEvent){
}"
59659,"private synchronized void onRMFailure(final RuntimeStatusEvent runtimeStatusEvent){
  assert(runtimeStatusEvent.getState() == ReefServiceProtos.State.FAILED);
  this.resourceManagerErrorHandler.onNext(runtimeStatusEvent.getError().get());
}","private synchronized void onRMFailure(final RuntimeStatusEvent runtimeStatusEvent){
}"
59660,"private synchronized void onRMDone(final RuntimeStatusEvent runtimeStatusEvent){
  assert(runtimeStatusEvent.getState() == ReefServiceProtos.State.DONE);
  LOG.log(Level.INFO,""String_Node_Str"");
  this.driverStatusManager.onComplete();
}","private synchronized void onRMDone(final RuntimeStatusEvent runtimeStatusEvent){
}"
59661,"private void onTaskDone(final ReefServiceProtos.TaskStatusProto taskStatusProto){
  assert(ReefServiceProtos.State.DONE == taskStatusProto.getState());
  assert(this.isKnown());
  this.messageDispatcher.onTaskCompleted(new CompletedTaskImpl(this.context,getResult(taskStatusProto),this.taskId));
  this.setState(ReefServiceProtos.State.DONE);
}","private void onTaskDone(final ReefServiceProtos.TaskStatusProto taskStatusProto){
}"
59662,"private void onTaskSuspend(final ReefServiceProtos.TaskStatusProto taskStatusProto){
  assert(ReefServiceProtos.State.SUSPEND == taskStatusProto.getState());
  assert(this.isKnown());
  this.messageDispatcher.onTaskSuspended(new SuspendedTaskImpl(this.context,getResult(taskStatusProto),this.taskId));
  this.setState(ReefServiceProtos.State.SUSPEND);
}","private void onTaskSuspend(final ReefServiceProtos.TaskStatusProto taskStatusProto){
}"
59663,"private void onTaskFailed(final ReefServiceProtos.TaskStatusProto taskStatusProto){
  assert(ReefServiceProtos.State.FAILED == taskStatusProto.getState());
  final Optional<ActiveContext> evaluatorContext=Optional.<ActiveContext>of(this.context);
  final Optional<byte[]> bytes=Optional.ofNullable(getResult(taskStatusProto));
  final Optional<Throwable> exception=this.exceptionCodec.fromBytes(bytes);
  final String message=exception.isPresent() ? exception.get().getMessage() : ""String_Node_Str"";
  final Optional<String> description=Optional.empty();
  final FailedTask failedTask=new FailedTask(this.taskId,message,description,exception,bytes,evaluatorContext);
  this.messageDispatcher.onTaskFailed(failedTask);
  this.setState(ReefServiceProtos.State.FAILED);
}","private void onTaskFailed(final ReefServiceProtos.TaskStatusProto taskStatusProto){
}"
59664,"private void onTaskInit(final ReefServiceProtos.TaskStatusProto taskStatusProto){
  assert((ReefServiceProtos.State.INIT == taskStatusProto.getState()));
  if (this.isKnown()) {
    LOG.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"",this.taskId);
  }
 else {
    final RunningTask runningTask=new RunningTaskImpl(this.evaluatorManager,this.taskId,this.context,this);
    this.messageDispatcher.onTaskRunning(runningTask);
    this.setState(ReefServiceProtos.State.RUNNING);
  }
}","private void onTaskInit(final ReefServiceProtos.TaskStatusProto taskStatusProto){
}"
59665,"private void onTaskRunning(final ReefServiceProtos.TaskStatusProto taskStatusProto){
  assert(taskStatusProto.getState() == ReefServiceProtos.State.RUNNING);
  if (this.isNotRunning()) {
    throw new IllegalStateException(""String_Node_Str"" + this.taskId + ""String_Node_Str""+ this.state);
  }
  if (driverRestartManager.getEvaluatorRestartState(evaluatorManager.getId()) == EvaluatorRestartState.REREGISTERED) {
    final RunningTask runningTask=new RunningTaskImpl(this.evaluatorManager,this.taskId,this.context,this);
    this.driverRestartManager.setEvaluatorProcessed(evaluatorManager.getId());
    this.messageDispatcher.onDriverRestartTaskRunning(runningTask);
  }
  for (  final ReefServiceProtos.TaskStatusProto.TaskMessageProto taskMessageProto : taskStatusProto.getTaskMessageList()) {
    this.messageDispatcher.onTaskMessage(new TaskMessageImpl(taskMessageProto.getMessage().toByteArray(),this.taskId,this.context.getId(),taskMessageProto.getSourceId()));
  }
}","private void onTaskRunning(final ReefServiceProtos.TaskStatusProto taskStatusProto){
}"
59666,"public static void copy(final Iterable<FileResource> files,final File destinationFolder){
  if (!destinationFolder.exists()) {
    destinationFolder.mkdirs();
  }
  for (  final FileResource fileProto : files) {
    final File sourceFile=toFile(fileProto);
    final File destinationFile=new File(destinationFolder,fileProto.getName());
    if (destinationFile.exists()) {
      LOG.log(Level.FINEST,""String_Node_Str"",sourceFile.getAbsolutePath());
    }
 else {
      try {
        java.nio.file.Files.copy(sourceFile.toPath(),destinationFile.toPath());
      }
 catch (      final IOException e) {
        final String message=new StringBuilder(""String_Node_Str"").append(sourceFile.getAbsolutePath()).append(""String_Node_Str"").append(destinationFile.getAbsolutePath()).append(""String_Node_Str"").toString();
        throw new RuntimeException(message,e);
      }
    }
  }
}","public static void copy(final Iterable<FileResource> files,final File destinationFolder){
  if (!destinationFolder.exists()) {
    destinationFolder.mkdirs();
  }
  for (  final FileResource fileProto : files) {
    final File sourceFile=toFile(fileProto);
    final File destinationFile=new File(destinationFolder,fileProto.getName());
    if (destinationFile.exists()) {
      LOG.log(Level.FINEST,""String_Node_Str"",sourceFile.getAbsolutePath());
    }
 else {
      try {
        Files.copy(sourceFile.toPath(),destinationFile.toPath());
      }
 catch (      final IOException e) {
        final String message=new StringBuilder(""String_Node_Str"").append(sourceFile.getAbsolutePath()).append(""String_Node_Str"").append(destinationFile.getAbsolutePath()).append(""String_Node_Str"").toString();
        throw new RuntimeException(message,e);
      }
    }
  }
}"
59667,"/** 
 * Check that the topology builds up as expected even when the root task is added after child tasks start running.
 */
@Test public void testLateRootTask() throws InterruptedException {
  final String rootTaskId=""String_Node_Str"";
  final String[] childTaskIds=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  final AtomicInteger numMsgs=new AtomicInteger(0);
  final EStage<GroupCommunicationMessage> senderStage=new ThreadPoolStage<>(new EventHandler<GroupCommunicationMessage>(){
    @Override public void onNext(    final GroupCommunicationMessage msg){
      numMsgs.getAndIncrement();
    }
  }
,1);
  final CommunicationGroupDriverImpl communicationGroupDriver=new CommunicationGroupDriverImpl(GroupName.class,new AvroConfigurationSerializer(),senderStage,new BroadcastingEventHandler<RunningTask>(),new BroadcastingEventHandler<FailedTask>(),new BroadcastingEventHandler<FailedEvaluator>(),new BroadcastingEventHandler<GroupCommunicationMessage>(),""String_Node_Str"",4,2);
  communicationGroupDriver.addBroadcast(BroadcastOperatorName.class,BroadcastOperatorSpec.newBuilder().setSenderId(rootTaskId).build()).addReduce(ReduceOperatorName.class,ReduceOperatorSpec.newBuilder().setReceiverId(rootTaskId).build());
  final ExecutorService pool=Executors.newFixedThreadPool(4);
  final CountDownLatch countDownLatch=new CountDownLatch(4);
  for (int index=0; index < 3; index++) {
    final String childId=childTaskIds[index];
    pool.submit(new Runnable(){
      @Override public void run(){
        final Configuration childTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,childId).set(TaskConfiguration.TASK,DummyTask.class).build();
        communicationGroupDriver.addTask(childTaskConf);
        communicationGroupDriver.runTask(childId);
        countDownLatch.countDown();
      }
    }
);
  }
  pool.submit(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(3000);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      final Configuration rootTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,rootTaskId).set(TaskConfiguration.TASK,DummyTask.class).build();
      communicationGroupDriver.addTask(rootTaskConf);
      communicationGroupDriver.runTask(rootTaskId);
      countDownLatch.countDown();
    }
  }
);
  pool.shutdown();
  final boolean allThreadsFinished=countDownLatch.await(10,TimeUnit.SECONDS);
  assertTrue(""String_Node_Str"",allThreadsFinished);
  assertEquals(""String_Node_Str"",12,numMsgs.get());
}","/** 
 * Check that the topology builds up as expected even when the root task is added after child tasks start running.
 */
@Test public void testLateRootTask() throws InterruptedException {
  final String rootTaskId=""String_Node_Str"";
  final String[] childTaskIds=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  final AtomicInteger numMsgs=new AtomicInteger(0);
  final EStage<GroupCommunicationMessage> senderStage=new SyncStage<>(new EventHandler<GroupCommunicationMessage>(){
    @Override public void onNext(    final GroupCommunicationMessage msg){
      numMsgs.getAndIncrement();
    }
  }
);
  final CommunicationGroupDriverImpl communicationGroupDriver=new CommunicationGroupDriverImpl(GroupName.class,new AvroConfigurationSerializer(),senderStage,new BroadcastingEventHandler<RunningTask>(),new BroadcastingEventHandler<FailedTask>(),new BroadcastingEventHandler<FailedEvaluator>(),new BroadcastingEventHandler<GroupCommunicationMessage>(),""String_Node_Str"",4,2);
  communicationGroupDriver.addBroadcast(BroadcastOperatorName.class,BroadcastOperatorSpec.newBuilder().setSenderId(rootTaskId).build()).addReduce(ReduceOperatorName.class,ReduceOperatorSpec.newBuilder().setReceiverId(rootTaskId).build());
  final ExecutorService pool=Executors.newFixedThreadPool(4);
  final CountDownLatch countDownLatch=new CountDownLatch(4);
  for (int index=0; index < 3; index++) {
    final String childId=childTaskIds[index];
    pool.submit(new Runnable(){
      @Override public void run(){
        final Configuration childTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,childId).set(TaskConfiguration.TASK,DummyTask.class).build();
        communicationGroupDriver.addTask(childTaskConf);
        communicationGroupDriver.runTask(childId);
        countDownLatch.countDown();
      }
    }
);
  }
  pool.submit(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(3000);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      final Configuration rootTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,rootTaskId).set(TaskConfiguration.TASK,DummyTask.class).build();
      communicationGroupDriver.addTask(rootTaskConf);
      communicationGroupDriver.runTask(rootTaskId);
      countDownLatch.countDown();
    }
  }
);
  pool.shutdown();
  final boolean allThreadsFinished=countDownLatch.await(10,TimeUnit.SECONDS);
  assertTrue(""String_Node_Str"",allThreadsFinished);
  assertEquals(""String_Node_Str"",12,numMsgs.get());
}"
59668,"/** 
 * Checks that TreeTopology works correctly with the following task add sequence: child -> root -> child.
 */
@Test public void testLateRootAndChildTask() throws InterruptedException {
  final String rootTaskId=""String_Node_Str"";
  final String[] childTaskIds=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  final AtomicInteger numMsgs=new AtomicInteger(0);
  final EStage<GroupCommunicationMessage> senderStage=new ThreadPoolStage<>(new EventHandler<GroupCommunicationMessage>(){
    @Override public void onNext(    final GroupCommunicationMessage msg){
      numMsgs.getAndIncrement();
    }
  }
,1);
  final CommunicationGroupDriverImpl communicationGroupDriver=new CommunicationGroupDriverImpl(GroupName.class,new AvroConfigurationSerializer(),senderStage,new BroadcastingEventHandler<RunningTask>(),new BroadcastingEventHandler<FailedTask>(),new BroadcastingEventHandler<FailedEvaluator>(),new BroadcastingEventHandler<GroupCommunicationMessage>(),""String_Node_Str"",8,2);
  communicationGroupDriver.addBroadcast(BroadcastOperatorName.class,BroadcastOperatorSpec.newBuilder().setSenderId(rootTaskId).build()).addReduce(ReduceOperatorName.class,ReduceOperatorSpec.newBuilder().setReceiverId(rootTaskId).build());
  final ExecutorService pool=Executors.newFixedThreadPool(8);
  final CountDownLatch countDownLatch=new CountDownLatch(8);
  for (int index=0; index < 2; index++) {
    final String childId=childTaskIds[index];
    pool.submit(new Runnable(){
      @Override public void run(){
        final Configuration childTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,childId).set(TaskConfiguration.TASK,DummyTask.class).build();
        communicationGroupDriver.addTask(childTaskConf);
        communicationGroupDriver.runTask(childId);
        countDownLatch.countDown();
      }
    }
);
  }
  pool.submit(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(3000);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      final Configuration rootTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,rootTaskId).set(TaskConfiguration.TASK,DummyTask.class).build();
      communicationGroupDriver.addTask(rootTaskConf);
      communicationGroupDriver.runTask(rootTaskId);
      countDownLatch.countDown();
    }
  }
);
  for (int index=2; index < 7; index++) {
    final String childId=childTaskIds[index];
    pool.submit(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(6000);
        }
 catch (        final InterruptedException e) {
          throw new RuntimeException(e);
        }
        final Configuration childTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,childId).set(TaskConfiguration.TASK,DummyTask.class).build();
        communicationGroupDriver.addTask(childTaskConf);
        communicationGroupDriver.runTask(childId);
        countDownLatch.countDown();
      }
    }
);
  }
  pool.shutdown();
  final boolean allThreadsFinished=countDownLatch.await(10,TimeUnit.SECONDS);
  assertTrue(""String_Node_Str"",allThreadsFinished);
  assertEquals(""String_Node_Str"",28,numMsgs.get());
}","/** 
 * Checks that TreeTopology works correctly with the following task add sequence: child -> root -> child.
 */
@Test public void testLateRootAndChildTask() throws InterruptedException {
  final String rootTaskId=""String_Node_Str"";
  final String[] childTaskIds=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  final AtomicInteger numMsgs=new AtomicInteger(0);
  final EStage<GroupCommunicationMessage> senderStage=new SyncStage<>(new EventHandler<GroupCommunicationMessage>(){
    @Override public void onNext(    final GroupCommunicationMessage msg){
      numMsgs.getAndIncrement();
    }
  }
);
  final CommunicationGroupDriverImpl communicationGroupDriver=new CommunicationGroupDriverImpl(GroupName.class,new AvroConfigurationSerializer(),senderStage,new BroadcastingEventHandler<RunningTask>(),new BroadcastingEventHandler<FailedTask>(),new BroadcastingEventHandler<FailedEvaluator>(),new BroadcastingEventHandler<GroupCommunicationMessage>(),""String_Node_Str"",8,2);
  communicationGroupDriver.addBroadcast(BroadcastOperatorName.class,BroadcastOperatorSpec.newBuilder().setSenderId(rootTaskId).build()).addReduce(ReduceOperatorName.class,ReduceOperatorSpec.newBuilder().setReceiverId(rootTaskId).build());
  final ExecutorService pool=Executors.newFixedThreadPool(8);
  final CountDownLatch countDownLatch=new CountDownLatch(8);
  for (int index=0; index < 2; index++) {
    final String childId=childTaskIds[index];
    pool.submit(new Runnable(){
      @Override public void run(){
        final Configuration childTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,childId).set(TaskConfiguration.TASK,DummyTask.class).build();
        communicationGroupDriver.addTask(childTaskConf);
        communicationGroupDriver.runTask(childId);
        countDownLatch.countDown();
      }
    }
);
  }
  pool.submit(new Runnable(){
    @Override public void run(){
      try {
        Thread.sleep(3000);
      }
 catch (      final InterruptedException e) {
        throw new RuntimeException(e);
      }
      final Configuration rootTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,rootTaskId).set(TaskConfiguration.TASK,DummyTask.class).build();
      communicationGroupDriver.addTask(rootTaskConf);
      communicationGroupDriver.runTask(rootTaskId);
      countDownLatch.countDown();
    }
  }
);
  for (int index=2; index < 7; index++) {
    final String childId=childTaskIds[index];
    pool.submit(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(6000);
        }
 catch (        final InterruptedException e) {
          throw new RuntimeException(e);
        }
        final Configuration childTaskConf=TaskConfiguration.CONF.set(TaskConfiguration.IDENTIFIER,childId).set(TaskConfiguration.TASK,DummyTask.class).build();
        communicationGroupDriver.addTask(childTaskConf);
        communicationGroupDriver.runTask(childId);
        countDownLatch.countDown();
      }
    }
);
  }
  pool.shutdown();
  final boolean allThreadsFinished=countDownLatch.await(10,TimeUnit.SECONDS);
  assertTrue(""String_Node_Str"",allThreadsFinished);
  assertEquals(""String_Node_Str"",28,numMsgs.get());
}"
59669,"/** 
 * Gets parameters from C#: <p/> args[0]: Driver folder. args[1]: Job ID. args[2]: Number of Evaluators. args[3]: First port to open. args[4]: Port range size. args[5]: Port open trial count.
 */
static LocalSubmissionFromCS fromCommandLine(final String[] args){
  final File driverFolder=new File(args[0]);
  final String jobId=args[1];
  final int numberOfEvaluators=Integer.valueOf(args[2]);
  final int tcpBeginPort=Integer.valueOf(args[3]);
  final int tcpRangeCount=Integer.valueOf(args[4]);
  final int tcpTryCount=Integer.valueOf(args[5]);
  return new LocalSubmissionFromCS(driverFolder,jobId,numberOfEvaluators,tcpBeginPort,tcpRangeCount,tcpTryCount);
}","/** 
 * Gets parameters from C#: <p/> args[0]: Driver folder. args[1]: Job ID. args[2]: Number of Evaluators. args[3]: First port to open. args[4]: Port range size. args[5]: Port open trial count.
 */
static LocalSubmissionFromCS fromCommandLine(final String[] args){
  final File driverFolder=new File(args[0]);
  final String jobId=args[1];
  final int numberOfEvaluators=Integer.parseInt(args[2]);
  final int tcpBeginPort=Integer.parseInt(args[3]);
  final int tcpRangeCount=Integer.parseInt(args[4]);
  final int tcpTryCount=Integer.parseInt(args[5]);
  return new LocalSubmissionFromCS(driverFolder,jobId,numberOfEvaluators,tcpBeginPort,tcpRangeCount,tcpTryCount);
}"
59670,"/** 
 * We leave a file behind in job submission directory so that clr client can figure out the applicationId and yarn rest endpoint.
 * @param driverFolder
 * @param applicationId
 * @throws IOException
 */
private void writeDriverHttpEndPoint(final File driverFolder,final String applicationId,final Path dfsPath) throws IOException {
  final FileSystem fs=FileSystem.get(yarnConfiguration);
  final Path httpEndpointPath=new Path(dfsPath,fileNames.getDriverHttpEndpoint());
  String trackingUri=null;
  for (int i=0; i < 60; i++) {
    try {
      LOG.log(Level.INFO,""String_Node_Str"" + i + ""String_Node_Str""+ httpEndpointPath.toString());
      if (fs.exists(httpEndpointPath)) {
        FSDataInputStream input=fs.open(httpEndpointPath);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        trackingUri=reader.readLine();
        reader.close();
        break;
      }
    }
 catch (    Exception ex) {
    }
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ex2) {
      break;
    }
  }
  if (null == trackingUri) {
    trackingUri=""String_Node_Str"";
    LOG.log(Level.WARNING,""String_Node_Str"" + httpEndpointPath.toString());
  }
  final File driverHttpEndpointFile=new File(driverFolder,fileNames.getDriverHttpEndpoint());
  BufferedWriter out=new BufferedWriter(new FileWriter(driverHttpEndpointFile));
  out.write(applicationId + ""String_Node_Str"");
  out.write(trackingUri + ""String_Node_Str"");
  String addr=yarnConfiguration.get(""String_Node_Str"");
  if (null == addr || addr.startsWith(""String_Node_Str"")) {
    String str2=yarnConfiguration.get(""String_Node_Str"");
    if (null != str2) {
      for (      String rm : str2.split(""String_Node_Str"")) {
        out.write(yarnConfiguration.get(""String_Node_Str"" + rm) + ""String_Node_Str"");
      }
    }
  }
 else {
    out.write(addr + ""String_Node_Str"");
  }
  out.close();
}","/** 
 * We leave a file behind in job submission directory so that clr client can figure out the applicationId and yarn rest endpoint.
 * @param driverFolder
 * @param applicationId
 * @throws IOException
 */
private void writeDriverHttpEndPoint(final File driverFolder,final String applicationId,final Path dfsPath) throws IOException {
  final FileSystem fs=FileSystem.get(yarnConfiguration);
  final Path httpEndpointPath=new Path(dfsPath,fileNames.getDriverHttpEndpoint());
  String trackingUri=null;
  for (int i=0; i < 60; i++) {
    try {
      LOG.log(Level.INFO,""String_Node_Str"" + i + ""String_Node_Str""+ httpEndpointPath.toString());
      if (fs.exists(httpEndpointPath)) {
        FSDataInputStream input=fs.open(httpEndpointPath);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,StandardCharsets.UTF_8));
        trackingUri=reader.readLine();
        reader.close();
        break;
      }
    }
 catch (    Exception ex) {
    }
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ex2) {
      break;
    }
  }
  if (null == trackingUri) {
    trackingUri=""String_Node_Str"";
    LOG.log(Level.WARNING,""String_Node_Str"" + httpEndpointPath.toString());
  }
  final File driverHttpEndpointFile=new File(driverFolder,fileNames.getDriverHttpEndpoint());
  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(driverHttpEndpointFile),StandardCharsets.UTF_8));
  out.write(applicationId + ""String_Node_Str"");
  out.write(trackingUri + ""String_Node_Str"");
  String addr=yarnConfiguration.get(""String_Node_Str"");
  if (null == addr || addr.startsWith(""String_Node_Str"")) {
    String str2=yarnConfiguration.get(""String_Node_Str"");
    if (null != str2) {
      for (      String rm : str2.split(""String_Node_Str"")) {
        out.write(yarnConfiguration.get(""String_Node_Str"" + rm) + ""String_Node_Str"");
      }
    }
  }
 else {
    out.write(addr + ""String_Node_Str"");
  }
  out.close();
}"
59671,"/** 
 * Takes 5 parameters from the C# side: [0]: String. Driver folder. [1]: String. Driver identifier. [2]: int. Driver memory. [3~5]: int. TCP configurations. [6]: int. Max application submissions. [7]: int. Evaluator recovery timeout for driver restart. > 0 => restart is enabled.
 */
static YarnSubmissionFromCS fromCommandLine(final String[] args){
  final File driverFolder=new File(args[0]);
  final String jobId=args[1];
  final int driverMemory=Integer.valueOf(args[2]);
  final int tcpBeginPort=Integer.valueOf(args[3]);
  final int tcpRangeCount=Integer.valueOf(args[4]);
  final int tcpTryCount=Integer.valueOf(args[5]);
  final int maxApplicationSubmissions=Integer.valueOf(args[6]);
  final int driverRecoveryTimeout=Integer.valueOf(args[7]);
  final int priority=1;
  final String queue=""String_Node_Str"";
  return new YarnSubmissionFromCS(driverFolder,jobId,driverMemory,tcpBeginPort,tcpRangeCount,tcpTryCount,maxApplicationSubmissions,driverRecoveryTimeout,priority,queue);
}","/** 
 * Takes 5 parameters from the C# side: [0]: String. Driver folder. [1]: String. Driver identifier. [2]: int. Driver memory. [3~5]: int. TCP configurations. [6]: int. Max application submissions. [7]: int. Evaluator recovery timeout for driver restart. > 0 => restart is enabled.
 */
static YarnSubmissionFromCS fromCommandLine(final String[] args){
  final File driverFolder=new File(args[0]);
  final String jobId=args[1];
  final int driverMemory=Integer.parseInt(args[2]);
  final int tcpBeginPort=Integer.parseInt(args[3]);
  final int tcpRangeCount=Integer.parseInt(args[4]);
  final int tcpTryCount=Integer.parseInt(args[5]);
  final int maxApplicationSubmissions=Integer.parseInt(args[6]);
  final int driverRecoveryTimeout=Integer.parseInt(args[7]);
  final int priority=1;
  final String queue=""String_Node_Str"";
  return new YarnSubmissionFromCS(driverFolder,jobId,driverMemory,tcpBeginPort,tcpRangeCount,tcpTryCount,maxApplicationSubmissions,driverRecoveryTimeout,priority,queue);
}"
59672,"public String getFailedTaskString(){
  final String description=jfailedTask.getDescription().isPresent() ? jfailedTask.getDescription().get().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"";
  final String cause=jfailedTask.getReason().isPresent() ? jfailedTask.getReason().get().toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"";
  final String data=jfailedTask.getData().isPresent() ? new String(jfailedTask.getData().get()).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"";
  final String poorSerializedString=""String_Node_Str"" + jfailedTask.getId().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ jfailedTask.getMessage().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ description+ ""String_Node_Str""+ cause+ ""String_Node_Str""+ data;
  LOG.log(Level.INFO,""String_Node_Str"" + poorSerializedString);
  return poorSerializedString;
}","public String getFailedTaskString(){
  final String description=jfailedTask.getDescription().isPresent() ? jfailedTask.getDescription().get().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"";
  final String cause=jfailedTask.getReason().isPresent() ? jfailedTask.getReason().get().toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"";
  final String data=jfailedTask.getData().isPresent() ? new String(jfailedTask.getData().get(),StandardCharsets.UTF_8).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"";
  final String poorSerializedString=""String_Node_Str"" + jfailedTask.getId().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ jfailedTask.getMessage().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ description+ ""String_Node_Str""+ cause+ ""String_Node_Str""+ data;
  LOG.log(Level.INFO,""String_Node_Str"" + poorSerializedString);
  return poorSerializedString;
}"
59673,"public void addCLRFiles(final File folder) throws BindException {
  try (final LoggingScope ls=this.loggingScopeFactory.getNewLoggingScope(""String_Node_Str"")){
    ConfigurationModule result=this.driverConfigModule;
    for (    final File f : folder.listFiles()) {
      if (f.canRead() && f.exists() && f.isFile()) {
        result=result.set(DriverConfiguration.GLOBAL_FILES,f.getAbsolutePath());
      }
    }
    this.driverConfigModule=result.set(DriverConfiguration.DRIVER_MEMORY,this.driverMemory).set(DriverConfiguration.DRIVER_IDENTIFIER,this.driverId).set(DriverConfiguration.DRIVER_JOB_SUBMISSION_DIRECTORY,this.jobSubmissionDirectory);
    final Path globalLibFile=Paths.get(NativeInterop.GLOBAL_LIBRARIES_FILENAME);
    if (!Files.exists(globalLibFile)) {
      LOG.log(Level.FINE,""String_Node_Str"",globalLibFile.toAbsolutePath());
    }
 else {
      String globalLibString=""String_Node_Str"";
      try {
        globalLibString=new String(Files.readAllBytes(globalLibFile));
      }
 catch (      final Exception e) {
        LOG.log(Level.WARNING,""String_Node_Str"" + globalLibFile.toAbsolutePath());
      }
      for (      final String s : globalLibString.split(""String_Node_Str"")) {
        final File f=new File(s);
        this.driverConfigModule=this.driverConfigModule.set(DriverConfiguration.GLOBAL_LIBRARIES,f.getPath());
      }
    }
    this.driverConfiguration=Configurations.merge(this.driverConfigModule.build(),getHTTPConfiguration(),getNameServerConfiguration());
  }
 }","public void addCLRFiles(final File folder) throws BindException {
  try (final LoggingScope ls=this.loggingScopeFactory.getNewLoggingScope(""String_Node_Str"")){
    ConfigurationModule result=this.driverConfigModule;
    for (    final File f : folder.listFiles()) {
      if (f.canRead() && f.exists() && f.isFile()) {
        result=result.set(DriverConfiguration.GLOBAL_FILES,f.getAbsolutePath());
      }
    }
    this.driverConfigModule=result.set(DriverConfiguration.DRIVER_MEMORY,this.driverMemory).set(DriverConfiguration.DRIVER_IDENTIFIER,this.driverId).set(DriverConfiguration.DRIVER_JOB_SUBMISSION_DIRECTORY,this.jobSubmissionDirectory);
    final Path globalLibFile=Paths.get(NativeInterop.GLOBAL_LIBRARIES_FILENAME);
    if (!Files.exists(globalLibFile)) {
      LOG.log(Level.FINE,""String_Node_Str"",globalLibFile.toAbsolutePath());
    }
 else {
      String globalLibString=""String_Node_Str"";
      try {
        globalLibString=new String(Files.readAllBytes(globalLibFile),StandardCharsets.UTF_8);
      }
 catch (      final Exception e) {
        LOG.log(Level.WARNING,""String_Node_Str"" + globalLibFile.toAbsolutePath());
      }
      for (      final String s : globalLibString.split(""String_Node_Str"")) {
        final File f=new File(s);
        this.driverConfigModule=this.driverConfigModule.set(DriverConfiguration.GLOBAL_LIBRARIES,f.getPath());
      }
    }
    this.driverConfiguration=Configurations.merge(this.driverConfigModule.build(),getHTTPConfiguration(),getNameServerConfiguration());
  }
 }"
59674,"private void evaluatorFailedHandlerWaitForCLRBridgeSetup(final long handle,final FailedEvaluator eval,final boolean isRestartFailed){
  if (handle == 0) {
    if (JobDriver.this.clrBridgeSetup) {
      final String message=""String_Node_Str"";
      LOG.log(Level.WARNING,message);
      JobDriver.this.jobMessageObserver.sendMessageToClient(message.getBytes());
      return;
    }
 else {
      clock.scheduleAlarm(0,new EventHandler<Alarm>(){
        @Override public void onNext(        final Alarm time){
          if (JobDriver.this.clrBridgeSetup) {
            handleFailedEvaluatorInCLR(eval,isRestartFailed);
          }
 else {
            LOG.log(Level.INFO,""String_Node_Str"");
            clock.scheduleAlarm(5000,this);
          }
        }
      }
);
    }
  }
 else {
    handleFailedEvaluatorInCLR(eval,isRestartFailed);
  }
}","private void evaluatorFailedHandlerWaitForCLRBridgeSetup(final long handle,final FailedEvaluator eval,final boolean isRestartFailed){
  if (handle == 0) {
    if (JobDriver.this.clrBridgeSetup) {
      final String message=""String_Node_Str"";
      LOG.log(Level.WARNING,message);
      JobDriver.this.jobMessageObserver.sendMessageToClient(message.getBytes(StandardCharsets.UTF_8));
    }
 else {
      clock.scheduleAlarm(0,new EventHandler<Alarm>(){
        @Override public void onNext(        final Alarm time){
          if (JobDriver.this.clrBridgeSetup) {
            handleFailedEvaluatorInCLR(eval,isRestartFailed);
          }
 else {
            LOG.log(Level.INFO,""String_Node_Str"");
            clock.scheduleAlarm(5000,this);
          }
        }
      }
);
    }
  }
 else {
    handleFailedEvaluatorInCLR(eval,isRestartFailed);
  }
}"
59675,"private void handleFailedEvaluatorInCLR(final FailedEvaluator eval,final boolean isRestartFailed){
  final String message=""String_Node_Str"";
  LOG.log(Level.INFO,message);
  final FailedEvaluatorBridge failedEvaluatorBridge=new FailedEvaluatorBridge(eval,JobDriver.this.evaluatorRequestor,JobDriver.this.isRestarted,loggingScopeFactory);
  if (isRestartFailed) {
    NativeInterop.clrSystemDriverRestartFailedEvaluatorHandlerOnNext(JobDriver.this.driverRestartFailedEvaluatorHandler,failedEvaluatorBridge,JobDriver.this.interopLogger);
  }
 else {
    NativeInterop.clrSystemFailedEvaluatorHandlerOnNext(JobDriver.this.failedEvaluatorHandler,failedEvaluatorBridge,JobDriver.this.interopLogger);
  }
  final int additionalRequestedEvaluatorNumber=failedEvaluatorBridge.getNewlyRequestedEvaluatorNumber();
  if (additionalRequestedEvaluatorNumber > 0) {
    LOG.log(Level.INFO,""String_Node_Str"" + additionalRequestedEvaluatorNumber);
  }
  JobDriver.this.jobMessageObserver.sendMessageToClient(message.getBytes());
}","private void handleFailedEvaluatorInCLR(final FailedEvaluator eval,final boolean isRestartFailed){
  final String message=""String_Node_Str"";
  LOG.log(Level.INFO,message);
  final FailedEvaluatorBridge failedEvaluatorBridge=new FailedEvaluatorBridge(eval,JobDriver.this.evaluatorRequestor,JobDriver.this.isRestarted,loggingScopeFactory);
  if (isRestartFailed) {
    NativeInterop.clrSystemDriverRestartFailedEvaluatorHandlerOnNext(JobDriver.this.driverRestartFailedEvaluatorHandler,failedEvaluatorBridge,JobDriver.this.interopLogger);
  }
 else {
    NativeInterop.clrSystemFailedEvaluatorHandlerOnNext(JobDriver.this.failedEvaluatorHandler,failedEvaluatorBridge,JobDriver.this.interopLogger);
  }
  final int additionalRequestedEvaluatorNumber=failedEvaluatorBridge.getNewlyRequestedEvaluatorNumber();
  if (additionalRequestedEvaluatorNumber > 0) {
    LOG.log(Level.INFO,""String_Node_Str"" + additionalRequestedEvaluatorNumber);
  }
  JobDriver.this.jobMessageObserver.sendMessageToClient(message.getBytes(StandardCharsets.UTF_8));
}"
59676,"/** 
 * process http request.
 */
@Override public void onHttpRequest(final ParsedHttpRequest parsedHttpRequest,final HttpServletResponse response) throws IOException, ServletException {
  LOG.log(Level.INFO,""String_Node_Str"",parsedHttpRequest.getRequestUri());
  try (final LoggingScope ls=loggingScopeFactory.httpRequest(parsedHttpRequest.getRequestUri())){
    final AvroHttpSerializer httpSerializer=new AvroHttpSerializer();
    final AvroHttpRequest avroHttpRequest=httpSerializer.toAvro(parsedHttpRequest);
    final String requestString=httpSerializer.toString(avroHttpRequest);
    final byte[] requestBytes=requestString.getBytes();
    try {
      final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(requestBytes);
      NativeInterop.clrSystemHttpServerHandlerOnNext(JobDriver.this.httpServerEventHandler,httpServerEventBridge,JobDriver.this.interopLogger);
      final String responseBody=new String(httpServerEventBridge.getQueryResponseData(),""String_Node_Str"");
      response.getWriter().println(responseBody);
      LOG.log(Level.INFO,""String_Node_Str"",responseBody);
    }
 catch (    final Exception ex) {
      LOG.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new RuntimeException(ex);
    }
  }
 }","/** 
 * process http request.
 */
@Override public void onHttpRequest(final ParsedHttpRequest parsedHttpRequest,final HttpServletResponse response) throws IOException, ServletException {
  LOG.log(Level.INFO,""String_Node_Str"",parsedHttpRequest.getRequestUri());
  try (final LoggingScope ls=loggingScopeFactory.httpRequest(parsedHttpRequest.getRequestUri())){
    final AvroHttpSerializer httpSerializer=new AvroHttpSerializer();
    final AvroHttpRequest avroHttpRequest=httpSerializer.toAvro(parsedHttpRequest);
    final String requestString=httpSerializer.toString(avroHttpRequest);
    final byte[] requestBytes=requestString.getBytes(Charset.forName(AvroHttpSerializer.JSON_CHARSET));
    try {
      final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(requestBytes);
      NativeInterop.clrSystemHttpServerHandlerOnNext(JobDriver.this.httpServerEventHandler,httpServerEventBridge,JobDriver.this.interopLogger);
      final String responseBody=new String(httpServerEventBridge.getQueryResponseData(),""String_Node_Str"");
      response.getWriter().println(responseBody);
      LOG.log(Level.INFO,""String_Node_Str"",responseBody);
    }
 catch (    final Exception ex) {
      LOG.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new RuntimeException(ex);
    }
  }
 }"
59677,"private void setupBridge(final ClrHandlersInitializer initializer){
  LOG.log(Level.INFO,""String_Node_Str"");
  try (final LoggingScope lb=this.loggingScopeFactory.setupBridge()){
    final CLRBufferedLogHandler handler=getCLRBufferedLogHandler();
    if (handler == null) {
      LOG.log(Level.WARNING,""String_Node_Str"");
    }
 else {
      handler.setDriverInitialized();
      LOG.log(Level.INFO,""String_Node_Str"");
    }
    final String portNumber=httpServer == null ? null : Integer.toString((httpServer.getPort()));
    if (portNumber != null) {
      try {
        final File outputFileName=new File(reefFileNames.getDriverHttpEndpoint());
        BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));
        out.write(localAddressProvider.getLocalAddress() + ""String_Node_Str"" + portNumber+ ""String_Node_Str"");
        out.close();
      }
 catch (      IOException ex) {
        throw new RuntimeException(ex);
      }
    }
    this.evaluatorRequestorBridge=new EvaluatorRequestorBridge(JobDriver.this.evaluatorRequestor,false,loggingScopeFactory);
    final long[] handlers=initializer.getClrHandlers(portNumber,evaluatorRequestorBridge);
    if (handlers != null) {
      if (handlers.length != NativeInterop.N_HANDLERS) {
        throw new RuntimeException(String.format(""String_Node_Str"",String.valueOf(handlers.length),String.valueOf(NativeInterop.N_HANDLERS)));
      }
      this.allocatedEvaluatorHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.ALLOCATED_EVALUATOR_KEY)];
      this.activeContextHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.ACTIVE_CONTEXT_KEY)];
      this.taskMessageHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.TASK_MESSAGE_KEY)];
      this.failedTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.FAILED_TASK_KEY)];
      this.failedEvaluatorHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.FAILED_EVALUATOR_KEY)];
      this.httpServerEventHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.HTTP_SERVER_KEY)];
      this.completedTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.COMPLETED_TASK_KEY)];
      this.runningTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.RUNNING_TASK_KEY)];
      this.suspendedTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.SUSPENDED_TASK_KEY)];
      this.completedEvaluatorHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.COMPLETED_EVALUATOR_KEY)];
      this.closedContextHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.CLOSED_CONTEXT_KEY)];
      this.failedContextHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.FAILED_CONTEXT_KEY)];
      this.contextMessageHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.CONTEXT_MESSAGE_KEY)];
      this.driverRestartActiveContextHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.DRIVER_RESTART_ACTIVE_CONTEXT_KEY)];
      this.driverRestartRunningTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.DRIVER_RESTART_RUNNING_TASK_KEY)];
      this.driverRestartCompletedHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.DRIVER_RESTART_COMPLETED_KEY)];
      this.driverRestartFailedEvaluatorHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.DRIVER_RESTART_FAILED_EVALUATOR_KEY)];
    }
    try (final LoggingScope lp=this.loggingScopeFactory.getNewLoggingScope(""String_Node_Str"")){
      final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(""String_Node_Str"");
      NativeInterop.clrSystemHttpServerHandlerOnNext(this.httpServerEventHandler,httpServerEventBridge,this.interopLogger);
      final String specList=httpServerEventBridge.getUriSpecification();
      LOG.log(Level.INFO,""String_Node_Str"",specList);
      if (specList != null) {
        final String[] specs=specList.split(""String_Node_Str"");
        for (        final String s : specs) {
          final HttpHandler h=new HttpServerBridgeEventHandler();
          h.setUriSpecification(s);
          this.httpServer.addHttpHandler(h);
        }
      }
    }
     this.clrBridgeSetup=true;
  }
   LOG.log(Level.INFO,""String_Node_Str"");
}","private void setupBridge(final ClrHandlersInitializer initializer){
  LOG.log(Level.INFO,""String_Node_Str"");
  try (final LoggingScope lb=this.loggingScopeFactory.setupBridge()){
    final CLRBufferedLogHandler handler=getCLRBufferedLogHandler();
    if (handler == null) {
      LOG.log(Level.WARNING,""String_Node_Str"");
    }
 else {
      handler.setDriverInitialized();
      LOG.log(Level.INFO,""String_Node_Str"");
    }
    final String portNumber=httpServer == null ? null : Integer.toString((httpServer.getPort()));
    if (portNumber != null) {
      try {
        final File outputFileName=new File(reefFileNames.getDriverHttpEndpoint());
        BufferedWriter out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFileName),StandardCharsets.UTF_8));
        out.write(localAddressProvider.getLocalAddress() + ""String_Node_Str"" + portNumber+ ""String_Node_Str"");
        out.close();
      }
 catch (      IOException ex) {
        throw new RuntimeException(ex);
      }
    }
    this.evaluatorRequestorBridge=new EvaluatorRequestorBridge(JobDriver.this.evaluatorRequestor,false,loggingScopeFactory);
    final long[] handlers=initializer.getClrHandlers(portNumber,evaluatorRequestorBridge);
    if (handlers != null) {
      if (handlers.length != NativeInterop.N_HANDLERS) {
        throw new RuntimeException(String.format(""String_Node_Str"",String.valueOf(handlers.length),String.valueOf(NativeInterop.N_HANDLERS)));
      }
      this.allocatedEvaluatorHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.ALLOCATED_EVALUATOR_KEY)];
      this.activeContextHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.ACTIVE_CONTEXT_KEY)];
      this.taskMessageHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.TASK_MESSAGE_KEY)];
      this.failedTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.FAILED_TASK_KEY)];
      this.failedEvaluatorHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.FAILED_EVALUATOR_KEY)];
      this.httpServerEventHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.HTTP_SERVER_KEY)];
      this.completedTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.COMPLETED_TASK_KEY)];
      this.runningTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.RUNNING_TASK_KEY)];
      this.suspendedTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.SUSPENDED_TASK_KEY)];
      this.completedEvaluatorHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.COMPLETED_EVALUATOR_KEY)];
      this.closedContextHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.CLOSED_CONTEXT_KEY)];
      this.failedContextHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.FAILED_CONTEXT_KEY)];
      this.contextMessageHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.CONTEXT_MESSAGE_KEY)];
      this.driverRestartActiveContextHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.DRIVER_RESTART_ACTIVE_CONTEXT_KEY)];
      this.driverRestartRunningTaskHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.DRIVER_RESTART_RUNNING_TASK_KEY)];
      this.driverRestartCompletedHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.DRIVER_RESTART_COMPLETED_KEY)];
      this.driverRestartFailedEvaluatorHandler=handlers[NativeInterop.HANDLERS.get(NativeInterop.DRIVER_RESTART_FAILED_EVALUATOR_KEY)];
    }
    try (final LoggingScope lp=this.loggingScopeFactory.getNewLoggingScope(""String_Node_Str"")){
      final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(""String_Node_Str"");
      NativeInterop.clrSystemHttpServerHandlerOnNext(this.httpServerEventHandler,httpServerEventBridge,this.interopLogger);
      final String specList=httpServerEventBridge.getUriSpecification();
      LOG.log(Level.INFO,""String_Node_Str"",specList);
      if (specList != null) {
        final String[] specs=specList.split(""String_Node_Str"");
        for (        final String s : specs) {
          final HttpHandler h=new HttpServerBridgeEventHandler();
          h.setUriSpecification(s);
          this.httpServer.addHttpHandler(h);
        }
      }
    }
     this.clrBridgeSetup=true;
  }
   LOG.log(Level.INFO,""String_Node_Str"");
}"
59678,"private void handleFailedEvaluator(final FailedEvaluator eval,final boolean isRestartFailed){
  try (final LoggingScope ls=loggingScopeFactory.evaluatorFailed(eval.getId())){
synchronized (JobDriver.this) {
      LOG.log(Level.SEVERE,""String_Node_Str"",eval);
      for (      final FailedContext failedContext : eval.getFailedContextList()) {
        final String failedContextId=failedContext.getId();
        LOG.log(Level.INFO,""String_Node_Str"" + failedContextId + ""String_Node_Str"");
        JobDriver.this.contexts.remove(failedContextId);
      }
      String message=""String_Node_Str"" + eval.getId() + ""String_Node_Str""+ eval.getEvaluatorException().getMessage();
      JobDriver.this.jobMessageObserver.sendMessageToClient(message.getBytes());
      if (isRestartFailed) {
        evaluatorFailedHandlerWaitForCLRBridgeSetup(driverRestartFailedEvaluatorHandler,eval,isRestartFailed);
      }
 else {
        evaluatorFailedHandlerWaitForCLRBridgeSetup(failedEvaluatorHandler,eval,isRestartFailed);
      }
    }
  }
 }","private void handleFailedEvaluator(final FailedEvaluator eval,final boolean isRestartFailed){
  try (final LoggingScope ls=loggingScopeFactory.evaluatorFailed(eval.getId())){
synchronized (JobDriver.this) {
      LOG.log(Level.SEVERE,""String_Node_Str"",eval);
      for (      final FailedContext failedContext : eval.getFailedContextList()) {
        final String failedContextId=failedContext.getId();
        LOG.log(Level.INFO,""String_Node_Str"" + failedContextId + ""String_Node_Str"");
        JobDriver.this.contexts.remove(failedContextId);
      }
      String message=""String_Node_Str"" + eval.getId() + ""String_Node_Str""+ eval.getEvaluatorException().getMessage();
      JobDriver.this.jobMessageObserver.sendMessageToClient(message.getBytes(StandardCharsets.UTF_8));
      if (isRestartFailed) {
        evaluatorFailedHandlerWaitForCLRBridgeSetup(driverRestartFailedEvaluatorHandler,eval,isRestartFailed);
      }
 else {
        evaluatorFailedHandlerWaitForCLRBridgeSetup(failedEvaluatorHandler,eval,isRestartFailed);
      }
    }
  }
 }"
59679,"@Override public void onNext(final ContextMessage message){
  LOG.log(Level.SEVERE,""String_Node_Str"",message.get());
  try (final LoggingScope ls=loggingScopeFactory.contextMessageReceived(message.get().toString())){
    if (JobDriver.this.contextMessageHandler != 0) {
      final ContextMessageBridge contextMessageBridge=new ContextMessageBridge(message);
      LOG.log(Level.INFO,""String_Node_Str"");
      NativeInterop.clrSystemContextMessageHandlerOnNext(JobDriver.this.contextMessageHandler,contextMessageBridge);
    }
  }
 }","@Override public void onNext(final ContextMessage message){
  LOG.log(Level.SEVERE,""String_Node_Str"",message.get());
  try (final LoggingScope ls=loggingScopeFactory.contextMessageReceived(new String(message.get(),StandardCharsets.UTF_8))){
    if (JobDriver.this.contextMessageHandler != 0) {
      final ContextMessageBridge contextMessageBridge=new ContextMessageBridge(message);
      LOG.log(Level.INFO,""String_Node_Str"");
      NativeInterop.clrSystemContextMessageHandlerOnNext(JobDriver.this.contextMessageHandler,contextMessageBridge);
    }
  }
 }"
59680,"@Override public void onNext(final byte[] bytes){
  throw new RuntimeException(""String_Node_Str"" + new String(bytes));
}","@Override public void onNext(final byte[] bytes){
  throw new RuntimeException(""String_Node_Str"" + new String(bytes,StandardCharsets.UTF_8));
}"
59681,"@Override public void onNext(final byte[] bytes){
  LOG.log(Level.INFO,""String_Node_Str"",new String(bytes));
}","@Override public void onNext(final byte[] bytes){
  LOG.log(Level.INFO,""String_Node_Str"",new String(bytes,StandardCharsets.UTF_8));
}"
59682,"@Override public void onNext(final StartTime startTime){
  final long pid=OSUtils.getPID();
  final File outfile=new File(PID_FILE_NAME);
  LOG.log(Level.FINEST,""String_Node_Str"" + pid + ""String_Node_Str""+ outfile.getAbsolutePath());
  try (final PrintWriter p=new PrintWriter((new FileOutputStream(PID_FILE_NAME)))){
    p.write(String.valueOf(pid));
    p.write(""String_Node_Str"");
  }
 catch (  final FileNotFoundException e) {
    LOG.log(Level.WARNING,""String_Node_Str"",e);
  }
}","@Override public void onNext(final StartTime startTime){
  final long pid=OSUtils.getPID();
  final File outfile=new File(PID_FILE_NAME);
  LOG.log(Level.FINEST,""String_Node_Str"" + pid + ""String_Node_Str""+ outfile.getAbsolutePath());
  try (final PrintWriter p=new PrintWriter(PID_FILE_NAME,""String_Node_Str"")){
    p.write(String.valueOf(pid));
    p.write(""String_Node_Str"");
  }
 catch (  final FileNotFoundException|UnsupportedEncodingException e) {
    LOG.log(Level.WARNING,""String_Node_Str"",e);
  }
}"
59683,"@Override public void onNext(final StopTime stopTime){
  try (final PrintWriter out=new PrintWriter(""String_Node_Str"" + launchID + ""String_Node_Str"")){
    out.print(profiler.objectGraphToString());
  }
 catch (  final FileNotFoundException e) {
    LOG.log(Level.WARNING,""String_Node_Str"",e);
  }
}","@Override public void onNext(final StopTime stopTime){
  try (final PrintWriter out=new PrintWriter(""String_Node_Str"" + launchID + ""String_Node_Str"",""String_Node_Str"")){
    out.print(profiler.objectGraphToString());
  }
 catch (  final FileNotFoundException|UnsupportedEncodingException e) {
    LOG.log(Level.WARNING,""String_Node_Str"",e);
  }
}"
59684,"public static String runCommand(final String command){
  final StringBuilder sb=new StringBuilder();
  try {
    final String cmd=OSUtils.isWindows() ? ""String_Node_Str"" + command : command;
    final Process proc=Runtime.getRuntime().exec(cmd);
    try (final BufferedReader input=new BufferedReader(new InputStreamReader(proc.getInputStream()))){
      String line;
      while ((line=input.readLine()) != null) {
        sb.append(line).append('\n');
      }
    }
   }
 catch (  final IOException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"" + command,ex);
    sb.append(ex);
  }
  return sb.toString();
}","public static String runCommand(final String command){
  final StringBuilder sb=new StringBuilder();
  try {
    final String cmd=OSUtils.isWindows() ? ""String_Node_Str"" + command : command;
    final Process proc=Runtime.getRuntime().exec(cmd);
    try (final BufferedReader input=new BufferedReader(new InputStreamReader(proc.getInputStream(),StandardCharsets.UTF_8))){
      String line;
      while ((line=input.readLine()) != null) {
        sb.append(line).append('\n');
      }
    }
   }
 catch (  final IOException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"" + command,ex);
    sb.append(ex);
  }
  return sb.toString();
}"
59685,"/** 
 * @return the process ID of the JVM, if running on Linux. This returns -1 for other OSs.
 */
public static long getPID(){
  if (isLinux()) {
    try {
      final Process process=new ProcessBuilder().command(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").start();
      final byte[] returnBytes=new byte[128];
      process.getInputStream().read(returnBytes);
      final Long result=Long.valueOf(new String(returnBytes).trim());
      process.destroy();
      return result;
    }
 catch (    final IOException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
      return -1;
    }
  }
 else {
    return -1;
  }
}","/** 
 * @return the process ID of the JVM, if running on Linux. This returns -1 for other OSs.
 */
public static long getPID(){
  if (isLinux()) {
    try {
      final Process process=new ProcessBuilder().command(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").start();
      final byte[] returnBytes=new byte[128];
      process.getInputStream().read(returnBytes);
      final Long result=Long.valueOf(new String(returnBytes,StandardCharsets.UTF_8).trim());
      process.destroy();
      return result;
    }
 catch (    final IOException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
      return -1;
    }
  }
 else {
    return -1;
  }
}"
59686,"/** 
 * Load CLR libraries
 */
public void loadLib() throws IOException {
  LOG.log(Level.INFO,""String_Node_Str"" + new Date().toString());
  try (final LoggingScope lb=loggingScopeFactory.loadLib()){
    this.loadBridgeDLL();
    this.loadAllManagedDLLs(this.reefFileNames.getLocalFolder());
    this.loadAllManagedDLLs(this.reefFileNames.getGlobalFolder());
  }
   LOG.log(Level.INFO,""String_Node_Str"" + new Date().toString());
}","/** 
 * Load CLR libraries.
 */
public void loadLib() throws IOException {
  LOG.log(Level.INFO,""String_Node_Str"" + new Date().toString());
  try (final LoggingScope lb=loggingScopeFactory.loadLib()){
    this.loadBridgeDLL();
    this.loadAllManagedDLLs(this.reefFileNames.getLocalFolder());
    this.loadAllManagedDLLs(this.reefFileNames.getGlobalFolder());
  }
   LOG.log(Level.INFO,""String_Node_Str"" + new Date().toString());
}"
59687,"/** 
 * load assembly
 * @param fileOut
 * @param managed
 */
private void loadAssembly(final File fileOut,final boolean managed){
  if (managed) {
    NativeInterop.loadClrAssembly(fileOut.toString());
    LOG.log(Level.INFO,""String_Node_Str"");
  }
 else {
    System.load(fileOut.toString());
    LOG.log(Level.INFO,""String_Node_Str"");
  }
}","/** 
 * load assembly.
 * @param fileOut
 * @param managed
 */
private void loadAssembly(final File fileOut,final boolean managed){
  if (managed) {
    NativeInterop.loadClrAssembly(fileOut.toString());
    LOG.log(Level.INFO,""String_Node_Str"");
  }
 else {
    System.load(fileOut.toString());
    LOG.log(Level.INFO,""String_Node_Str"");
  }
}"
59688,"/** 
 * Set the driver memory
 */
public void setDriverInfo(final String identifier,final int memory,final String jobSubmissionDirectory){
  if (identifier == null || identifier.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (memory <= 0) {
    throw new RuntimeException(""String_Node_Str"" + memory);
  }
  this.driverMemory=memory;
  this.driverId=identifier;
  if (jobSubmissionDirectory != null && !jobSubmissionDirectory.equals(""String_Node_Str"")) {
    this.jobSubmissionDirectory=jobSubmissionDirectory;
  }
 else {
    LOG.log(Level.FINE,""String_Node_Str"" + this.jobSubmissionDirectory);
  }
}","/** 
 * Set the driver memory.
 */
public void setDriverInfo(final String identifier,final int memory,final String jobSubmissionDirectory){
  if (identifier == null || identifier.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (memory <= 0) {
    throw new RuntimeException(""String_Node_Str"" + memory);
  }
  this.driverMemory=memory;
  this.driverId=identifier;
  if (jobSubmissionDirectory != null && !jobSubmissionDirectory.equals(""String_Node_Str"")) {
    this.jobSubmissionDirectory=jobSubmissionDirectory;
  }
 else {
    LOG.log(Level.FINE,""String_Node_Str"" + this.jobSubmissionDirectory);
  }
}"
59689,"/** 
 * process http request
 */
@Override public void onHttpRequest(final ParsedHttpRequest parsedHttpRequest,final HttpServletResponse response) throws IOException, ServletException {
  LOG.log(Level.INFO,""String_Node_Str"",parsedHttpRequest.getRequestUri());
  try (final LoggingScope ls=loggingScopeFactory.httpRequest(parsedHttpRequest.getRequestUri())){
    final AvroHttpSerializer httpSerializer=new AvroHttpSerializer();
    final AvroHttpRequest avroHttpRequest=httpSerializer.toAvro(parsedHttpRequest);
    final String requestString=httpSerializer.toString(avroHttpRequest);
    final byte[] requestBytes=requestString.getBytes();
    try {
      final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(requestBytes);
      NativeInterop.ClrSystemHttpServerHandlerOnNext(JobDriver.this.httpServerEventHandler,httpServerEventBridge,JobDriver.this.interopLogger);
      final String responseBody=new String(httpServerEventBridge.getQueryResponseData(),""String_Node_Str"");
      response.getWriter().println(responseBody);
      LOG.log(Level.INFO,""String_Node_Str"",responseBody);
    }
 catch (    final Exception ex) {
      LOG.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new RuntimeException(ex);
    }
  }
 }","/** 
 * process http request.
 */
@Override public void onHttpRequest(final ParsedHttpRequest parsedHttpRequest,final HttpServletResponse response) throws IOException, ServletException {
  LOG.log(Level.INFO,""String_Node_Str"",parsedHttpRequest.getRequestUri());
  try (final LoggingScope ls=loggingScopeFactory.httpRequest(parsedHttpRequest.getRequestUri())){
    final AvroHttpSerializer httpSerializer=new AvroHttpSerializer();
    final AvroHttpRequest avroHttpRequest=httpSerializer.toAvro(parsedHttpRequest);
    final String requestString=httpSerializer.toString(avroHttpRequest);
    final byte[] requestBytes=requestString.getBytes();
    try {
      final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(requestBytes);
      NativeInterop.ClrSystemHttpServerHandlerOnNext(JobDriver.this.httpServerEventHandler,httpServerEventBridge,JobDriver.this.interopLogger);
      final String responseBody=new String(httpServerEventBridge.getQueryResponseData(),""String_Node_Str"");
      response.getWriter().println(responseBody);
      LOG.log(Level.INFO,""String_Node_Str"",responseBody);
    }
 catch (    final Exception ex) {
      LOG.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new RuntimeException(ex);
    }
  }
 }"
59690,"/** 
 * returns URI specification for the handler
 */
@Override public String getUriSpecification(){
  return uriSpecification;
}","/** 
 * returns URI specification for the handler.
 */
@Override public String getUriSpecification(){
  return uriSpecification;
}"
59691,"/** 
 * Main method that starts the CLR Bridge from Java
 * @param args command line parameters.
 */
public static void main(final String[] args){
  LOG.log(Level.INFO,""String_Node_Str"" + new Date());
  try {
    if (args == null || args.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final File dotNetFolder=new File(args[0]).getAbsoluteFile();
    String[] removedArgs=Arrays.copyOfRange(args,1,args.length);
    final Configuration config=getClientConfiguration(removedArgs);
    final Injector commandLineInjector=Tang.Factory.getTang().newInjector(parseCommandLine(removedArgs));
    final int waitTime=commandLineInjector.getNamedInstance(WaitTimeForDriver.class);
    final int driverMemory=commandLineInjector.getNamedInstance(DriverMemoryInMb.class);
    final String driverIdentifier=commandLineInjector.getNamedInstance(DriverIdentifier.class);
    final String jobSubmissionDirectory=commandLineInjector.getNamedInstance(DriverJobSubmissionDirectory.class);
    final boolean submit=commandLineInjector.getNamedInstance(Submit.class);
    final Injector injector=Tang.Factory.getTang().newInjector(config);
    final JobClient client=injector.getInstance(JobClient.class);
    client.setDriverInfo(driverIdentifier,driverMemory,jobSubmissionDirectory);
    if (submit) {
      client.submit(dotNetFolder,true,null);
      client.waitForCompletion(waitTime);
    }
 else {
      client.submit(dotNetFolder,false,config);
      client.waitForCompletion(0);
    }
    LOG.info(""String_Node_Str"");
  }
 catch (  final BindException|InjectionException|IOException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}","/** 
 * Main method that starts the CLR Bridge from Java.
 * @param args command line parameters.
 */
public static void main(final String[] args){
  LOG.log(Level.INFO,""String_Node_Str"" + new Date());
  try {
    if (args == null || args.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final File dotNetFolder=new File(args[0]).getAbsoluteFile();
    String[] removedArgs=Arrays.copyOfRange(args,1,args.length);
    final Configuration config=getClientConfiguration(removedArgs);
    final Injector commandLineInjector=Tang.Factory.getTang().newInjector(parseCommandLine(removedArgs));
    final int waitTime=commandLineInjector.getNamedInstance(WaitTimeForDriver.class);
    final int driverMemory=commandLineInjector.getNamedInstance(DriverMemoryInMb.class);
    final String driverIdentifier=commandLineInjector.getNamedInstance(DriverIdentifier.class);
    final String jobSubmissionDirectory=commandLineInjector.getNamedInstance(DriverJobSubmissionDirectory.class);
    final boolean submit=commandLineInjector.getNamedInstance(Submit.class);
    final Injector injector=Tang.Factory.getTang().newInjector(config);
    final JobClient client=injector.getInstance(JobClient.class);
    client.setDriverInfo(driverIdentifier,driverMemory,jobSubmissionDirectory);
    if (submit) {
      client.submit(dotNetFolder,true,null);
      client.waitForCompletion(waitTime);
    }
 else {
      client.submit(dotNetFolder,false,config);
      client.waitForCompletion(0);
    }
    LOG.info(""String_Node_Str"");
  }
 catch (  final BindException|InjectionException|IOException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}"
59692,"/** 
 * Main method that starts the CLR Bridge from Java
 * @param args command line parameters.
 */
public static void main(final String[] args){
  try {
    if (args == null || args.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final File dotNetFolder=new File(args[0]).getAbsoluteFile();
    ConfigurationModule driverConfigModule=JobClient.getDriverConfiguration();
    ConfigurationModule result=driverConfigModule;
    for (    final File f : dotNetFolder.listFiles()) {
      if (f.canRead() && f.exists() && f.isFile()) {
        result=result.set(DriverConfiguration.GLOBAL_FILES,f.getAbsolutePath());
      }
    }
    driverConfigModule=result;
    Configuration driverConfiguration=Configurations.merge(driverConfigModule.build(),JobClient.getHTTPConfiguration());
    LOG.log(Level.INFO,""String_Node_Str"");
    final Configuration runtimeConfiguration=YarnClientConfiguration.CONF.build();
    final REEF reef=Tang.Factory.getTang().newInjector(runtimeConfiguration).getInstance(REEFImplementation.class);
    reef.submit(driverConfiguration);
    LOG.info(""String_Node_Str"");
  }
 catch (  final BindException|InjectionException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}","/** 
 * Main method that starts the CLR Bridge from Java.
 * @param args command line parameters.
 */
public static void main(final String[] args){
  try {
    if (args == null || args.length == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    final File dotNetFolder=new File(args[0]).getAbsoluteFile();
    ConfigurationModule driverConfigModule=JobClient.getDriverConfiguration();
    ConfigurationModule result=driverConfigModule;
    for (    final File f : dotNetFolder.listFiles()) {
      if (f.canRead() && f.exists() && f.isFile()) {
        result=result.set(DriverConfiguration.GLOBAL_FILES,f.getAbsolutePath());
      }
    }
    driverConfigModule=result;
    Configuration driverConfiguration=Configurations.merge(driverConfigModule.build(),JobClient.getHTTPConfiguration());
    LOG.log(Level.INFO,""String_Node_Str"");
    final Configuration runtimeConfiguration=YarnClientConfiguration.CONF.build();
    final REEF reef=Tang.Factory.getTang().newInjector(runtimeConfiguration).getInstance(REEFImplementation.class);
    reef.submit(driverConfiguration);
    LOG.info(""String_Node_Str"");
  }
 catch (  final BindException|InjectionException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}"
59693,"/** 
 * Generate a new checkpoint Name
 * @return the checkpoint name
 */
public String getNewName();","/** 
 * Generate a new checkpoint Name.
 * @return the checkpoint name
 */
public String getNewName();"
59694,"/** 
 * The global list of racks
 * @return list of all rack descriptors
 */
public Collection<RackDescriptor> getRacks();","/** 
 * The global list of racks.
 * @return list of all rack descriptors
 */
public Collection<RackDescriptor> getRacks();"
59695,"/** 
 * Instantiated via CLRProcessFactory
 */
CLRProcess(){
}","/** 
 * Instantiated via CLRProcessFactory.
 */
CLRProcess(){
}"
59696,"/** 
 * Set the launch identifier
 * @param launchID
 * @return this
 */
EvaluatorProcess setLaunchID(final String launchID);","/** 
 * Set the launch identifier.
 * @param launchID
 * @return this
 */
EvaluatorProcess setLaunchID(final String launchID);"
59697,"/** 
 * Set the error handler remote identifier
 * @param errorHandlerRID
 * @return this
 */
EvaluatorProcess setErrorHandlerRID(final String errorHandlerRID);","/** 
 * Set the error handler remote identifier.
 * @param errorHandlerRID
 * @return this
 */
EvaluatorProcess setErrorHandlerRID(final String errorHandlerRID);"
59698,"/** 
 * Set memory size of process in megabytes
 * @param megaBytes
 * @return this
 */
EvaluatorProcess setMemory(final int megaBytes);","/** 
 * Set memory size of process in megabytes.
 * @param megaBytes
 * @return this
 */
EvaluatorProcess setMemory(final int megaBytes);"
59699,"/** 
 * set number of cores
 * @param cores the number of cores
 * @return
 */
public Builder setNumberOfCores(final int cores){
  this.cores=cores;
  return this;
}","/** 
 * set number of cores.
 * @param cores the number of cores
 * @return
 */
public Builder setNumberOfCores(final int cores){
  this.cores=cores;
  return this;
}"
59700,"private void loadCLRBridgeDLL() throws IOException {
}","private void loadCLRBridgeDLL() throws IOException {
  try {
    File bridgeClrDLLFile=this.reefFileNames.getBridgeClrDLLFile();
    LOG.log(Level.INFO,""String_Node_Str"",bridgeClrDLLFile);
    loadManagedDLL(bridgeClrDLLFile);
  }
 catch (  final Throwable t) {
    LOG.log(Level.WARNING,""String_Node_Str"",this.reefFileNames.getBridgeClrDLLFile().getAbsolutePath());
    final String tempLoadDir=System.getProperty(USER_DIR) + this.reefFileNames.getLoadDir();
    new File(tempLoadDir).mkdir();
    LOG.log(Level.INFO,""String_Node_Str"",tempLoadDir);
    String bridgeClrDllName=this.reefFileNames.getBridgeClrDllName();
    LOG.log(Level.INFO,""String_Node_Str"",bridgeClrDllName);
    loadFromReefJar(bridgeClrDllName,true);
  }
}"
59701,"/** 
 * Send the evaluatorControlProto to the Evaluator.
 * @param evaluatorControlProto
 * @throws java.lang.IllegalStateException if the remote ID hasn't been set via setRemoteID() prior to this call
 * @throws java.lang.IllegalStateException if the Evaluator isn't running.
 */
public synchronized void send(final EvaluatorRuntimeProtocol.EvaluatorControlProto evaluatorControlProto){
  if (!this.wrapped.isPresent()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!this.stateManager.isRunning()) {
    final String msg=new StringBuilder().append(""String_Node_Str"").append(this.evaluatorId).append(""String_Node_Str"").append(this.stateManager.toString()).append(""String_Node_Str"").append(evaluatorControlProto.toString()).toString();
    throw new IllegalStateException(msg);
  }
  this.wrapped.get().onNext(evaluatorControlProto);
}","/** 
 * Send the evaluatorControlProto to the Evaluator.
 * @param evaluatorControlProto
 * @throws java.lang.IllegalStateException if the remote ID hasn't been set via setRemoteID() prior to this call
 * @throws java.lang.IllegalStateException if the Evaluator isn't running.
 */
public synchronized void send(final EvaluatorRuntimeProtocol.EvaluatorControlProto evaluatorControlProto){
  if (!this.wrapped.isPresent()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (!this.stateManager.isRunning()) {
    LOG.log(Level.WARNING,""String_Node_Str"",new Object[]{this.evaluatorId,this.stateManager,evaluatorControlProto});
    return;
  }
  this.wrapped.get().onNext(evaluatorControlProto);
}"
59702,"public synchronized void onEvaluatorHeartbeatMessage(final RemoteMessage<EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto> evaluatorHeartbeatProtoRemoteMessage){
  final EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto evaluatorHeartbeatProto=evaluatorHeartbeatProtoRemoteMessage.getMessage();
  LOG.log(Level.FINEST,""String_Node_Str"",evaluatorHeartbeatProto);
  if (this.stateManager.isDoneOrFailedOrKilled()) {
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{this.getId(),this.stateManager});
    return;
  }
  this.sanityChecker.check(evaluatorId,evaluatorHeartbeatProto.getTimestamp());
  final String evaluatorRID=evaluatorHeartbeatProtoRemoteMessage.getIdentifier().toString();
  if (evaluatorHeartbeatProto.getRecovery()) {
    this.evaluatorControlHandler.setRemoteID(evaluatorRID);
    this.stateManager.setRunning();
    this.driverStatusManager.oneContainerRecovered();
    final int numRecoveredContainers=this.driverStatusManager.getNumRecoveredContainers();
    LOG.log(Level.FINE,""String_Node_Str"",this.evaluatorId);
    final int expectedEvaluatorsNumber=this.driverStatusManager.getNumPreviousContainers();
    if (numRecoveredContainers > expectedEvaluatorsNumber) {
      LOG.log(Level.SEVERE,""String_Node_Str"",new Object[]{expectedEvaluatorsNumber,numRecoveredContainers});
      throw new RuntimeException(""String_Node_Str"");
    }
 else     if (numRecoveredContainers == expectedEvaluatorsNumber) {
      LOG.log(Level.INFO,""String_Node_Str"",expectedEvaluatorsNumber);
      this.driverStatusManager.setRestartCompleted();
      this.messageDispatcher.OnDriverRestartCompleted(new DriverRestartCompleted(System.currentTimeMillis()));
    }
 else {
      LOG.log(Level.INFO,""String_Node_Str"",new Object[]{expectedEvaluatorsNumber,numRecoveredContainers});
    }
  }
  if (this.stateManager.isSubmitted()) {
    this.evaluatorControlHandler.setRemoteID(evaluatorRID);
    this.stateManager.setRunning();
    LOG.log(Level.FINEST,""String_Node_Str"",this.evaluatorId);
  }
  if (evaluatorHeartbeatProto.hasEvaluatorStatus()) {
    this.onEvaluatorStatusMessage(evaluatorHeartbeatProto.getEvaluatorStatus());
  }
  final boolean informClientOfNewContexts=!evaluatorHeartbeatProto.hasTaskStatus();
  this.contextRepresenters.onContextStatusMessages(evaluatorHeartbeatProto.getContextStatusList(),informClientOfNewContexts);
  if (evaluatorHeartbeatProto.hasTaskStatus()) {
    this.onTaskStatusMessage(evaluatorHeartbeatProto.getTaskStatus());
  }
  LOG.log(Level.FINE,""String_Node_Str"",this.getId());
}","public void onEvaluatorHeartbeatMessage(final RemoteMessage<EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto> evaluatorHeartbeatProtoRemoteMessage){
  final EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto evaluatorHeartbeatProto=evaluatorHeartbeatProtoRemoteMessage.getMessage();
  LOG.log(Level.FINEST,""String_Node_Str"",evaluatorHeartbeatProto);
synchronized (this.evaluatorDescriptor) {
    if (this.stateManager.isDoneOrFailedOrKilled()) {
      LOG.log(Level.FINE,""String_Node_Str"",new Object[]{this.getId(),this.stateManager});
      return;
    }
    this.sanityChecker.check(evaluatorId,evaluatorHeartbeatProto.getTimestamp());
    final String evaluatorRID=evaluatorHeartbeatProtoRemoteMessage.getIdentifier().toString();
    if (evaluatorHeartbeatProto.getRecovery()) {
      this.evaluatorControlHandler.setRemoteID(evaluatorRID);
      this.stateManager.setRunning();
      this.driverStatusManager.oneContainerRecovered();
      final int numRecoveredContainers=this.driverStatusManager.getNumRecoveredContainers();
      LOG.log(Level.FINE,""String_Node_Str"",this.evaluatorId);
      final int expectedEvaluatorsNumber=this.driverStatusManager.getNumPreviousContainers();
      if (numRecoveredContainers > expectedEvaluatorsNumber) {
        LOG.log(Level.SEVERE,""String_Node_Str"",new Object[]{expectedEvaluatorsNumber,numRecoveredContainers});
        throw new RuntimeException(""String_Node_Str"");
      }
 else       if (numRecoveredContainers == expectedEvaluatorsNumber) {
        LOG.log(Level.INFO,""String_Node_Str"",expectedEvaluatorsNumber);
        this.driverStatusManager.setRestartCompleted();
        this.messageDispatcher.OnDriverRestartCompleted(new DriverRestartCompleted(System.currentTimeMillis()));
      }
 else {
        LOG.log(Level.INFO,""String_Node_Str"",new Object[]{expectedEvaluatorsNumber,numRecoveredContainers});
      }
    }
    if (this.stateManager.isSubmitted()) {
      this.evaluatorControlHandler.setRemoteID(evaluatorRID);
      this.stateManager.setRunning();
      LOG.log(Level.FINEST,""String_Node_Str"",this.evaluatorId);
    }
    if (evaluatorHeartbeatProto.hasEvaluatorStatus()) {
      this.onEvaluatorStatusMessage(evaluatorHeartbeatProto.getEvaluatorStatus());
    }
    final boolean informClientOfNewContexts=!evaluatorHeartbeatProto.hasTaskStatus();
    this.contextRepresenters.onContextStatusMessages(evaluatorHeartbeatProto.getContextStatusList(),informClientOfNewContexts);
    if (evaluatorHeartbeatProto.hasTaskStatus()) {
      this.onTaskStatusMessage(evaluatorHeartbeatProto.getTaskStatus());
    }
    LOG.log(Level.FINE,""String_Node_Str"",this.getId());
  }
}"
59703,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Configuration build() throws BindException {
  ConfigurationModule c=deepCopy();
  if (!c.reqSet.containsAll(c.builder.reqDecl)) {
    Set<Field> missingSet=new MonotonicHashSet<>();
    for (    Field f : c.builder.reqDecl) {
      if (!c.reqSet.contains(f)) {
        missingSet.add(f);
      }
    }
    throw new BindException(""String_Node_Str"" + builder.toString(missingSet));
  }
  for (  Class<?> clazz : c.builder.freeImpls.keySet()) {
    Impl<?> i=c.builder.freeImpls.get(clazz);
    if (c.setImpls.containsKey(i)) {
      c.builder.b.bind(clazz,c.setImpls.get(i));
    }
 else     if (c.setLateImpls.containsKey(i)) {
      c.builder.b.bind(ReflectionUtilities.getFullName(clazz),c.setLateImpls.get(i));
    }
 else     if (c.setImplSets.containsKey(i) || c.setLateImplSets.containsKey(i)) {
      for (      Class<?> clz : c.setImplSets.getValuesForKey(i)) {
        c.builder.b.bindSetEntry((Class)clazz,(Class)clz);
      }
      for (      String s : c.setLateImplSets.getValuesForKey(i)) {
        c.builder.b.bindSetEntry((Class)clazz,s);
      }
    }
 else {
      c.builder.b.bindList((Class)clazz,c.setImplLists.get(i));
    }
  }
  for (  Class<? extends Name<?>> clazz : c.builder.freeParams.keySet()) {
    Param<?> p=c.builder.freeParams.get(clazz);
    String s=c.setParams.get(p);
    boolean foundOne=false;
    if (s != null) {
      c.builder.b.bindNamedParameter(clazz,s);
      foundOne=true;
    }
    List list=c.setParamLists.get(p);
    if (list != null) {
      c.builder.b.bindList((Class)clazz,list);
      foundOne=true;
    }
    for (    String paramStr : c.setParamSets.getValuesForKey(p)) {
      c.builder.b.bindSetEntry((Class)clazz,paramStr);
      foundOne=true;
    }
    if (!foundOne) {
      if (!(p instanceof OptionalParameter)) {
        throw new IllegalStateException();
      }
    }
  }
  return c.builder.b.build();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Configuration build() throws BindException {
  ConfigurationModule c=deepCopy();
  if (!c.reqSet.containsAll(c.builder.reqDecl)) {
    Set<Field> missingSet=new MonotonicHashSet<>();
    for (    Field f : c.builder.reqDecl) {
      if (!c.reqSet.contains(f)) {
        missingSet.add(f);
      }
    }
    throw new BindException(""String_Node_Str"" + builder.toString(missingSet));
  }
  for (  Class<?> clazz : c.builder.freeImpls.keySet()) {
    Impl<?> i=c.builder.freeImpls.get(clazz);
    if (c.setImpls.containsKey(i)) {
      c.builder.b.bind(clazz,c.setImpls.get(i));
    }
 else     if (c.setLateImpls.containsKey(i)) {
      c.builder.b.bind(ReflectionUtilities.getFullName(clazz),c.setLateImpls.get(i));
    }
 else     if (c.setImplSets.containsKey(i) || c.setLateImplSets.containsKey(i)) {
      for (      Class<?> clz : c.setImplSets.getValuesForKey(i)) {
        c.builder.b.bindSetEntry((Class)clazz,(Class)clz);
      }
      for (      String s : c.setLateImplSets.getValuesForKey(i)) {
        c.builder.b.bindSetEntry((Class)clazz,s);
      }
    }
 else     if (c.setImplLists.containsKey(i)) {
      c.builder.b.bindList((Class)clazz,c.setImplLists.get(i));
    }
  }
  for (  Class<? extends Name<?>> clazz : c.builder.freeParams.keySet()) {
    Param<?> p=c.builder.freeParams.get(clazz);
    String s=c.setParams.get(p);
    boolean foundOne=false;
    if (s != null) {
      c.builder.b.bindNamedParameter(clazz,s);
      foundOne=true;
    }
    List list=c.setParamLists.get(p);
    if (list != null) {
      c.builder.b.bindList((Class)clazz,list);
      foundOne=true;
    }
    for (    String paramStr : c.setParamSets.getValuesForKey(p)) {
      c.builder.b.bindSetEntry((Class)clazz,paramStr);
      foundOne=true;
    }
    if (!foundOne) {
      if (!(p instanceof OptionalParameter)) {
        throw new IllegalStateException();
      }
    }
  }
  return c.builder.b.build();
}"
59704,"/** 
 * process http request
 */
@Override public void onHttpRequest(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {
  LOG.log(Level.INFO,""String_Node_Str"",request.getRequestURI());
  final AvroHttpSerializer httpSerializer=new AvroHttpSerializer();
  final AvroHttpRequest avroHttpRequest=httpSerializer.toAvro(request);
  final byte[] requestBytes=httpSerializer.toBytes(avroHttpRequest);
  try {
    final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(requestBytes);
    NativeInterop.ClrSystemHttpServerHandlerOnNext(JobDriver.this.httpServerEventHandler,httpServerEventBridge,JobDriver.this.interopLogger);
    final String responseBody=new String(httpServerEventBridge.getQueryResponseData(),""String_Node_Str"");
    response.getWriter().println(responseBody);
    LOG.log(Level.INFO,""String_Node_Str"",responseBody);
  }
 catch (  final Exception ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new RuntimeException(ex);
  }
}","/** 
 * process http request
 */
@Override public void onHttpRequest(final ParsedHttpRequest parsedHttpRequest,final HttpServletResponse response) throws IOException, ServletException {
  LOG.log(Level.INFO,""String_Node_Str"",parsedHttpRequest.getRequestUri());
  final AvroHttpSerializer httpSerializer=new AvroHttpSerializer();
  final AvroHttpRequest avroHttpRequest=httpSerializer.toAvro(parsedHttpRequest);
  final byte[] requestBytes=httpSerializer.toBytes(avroHttpRequest);
  try {
    final HttpServerEventBridge httpServerEventBridge=new HttpServerEventBridge(requestBytes);
    NativeInterop.ClrSystemHttpServerHandlerOnNext(JobDriver.this.httpServerEventHandler,httpServerEventBridge,JobDriver.this.interopLogger);
    final String responseBody=new String(httpServerEventBridge.getQueryResponseData(),""String_Node_Str"");
    response.getWriter().println(responseBody);
    LOG.log(Level.INFO,""String_Node_Str"",responseBody);
  }
 catch (  final Exception ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new RuntimeException(ex);
  }
}"
59705,"/** 
 * Constructs a messaging transport
 * @param hostAddress the server host address
 * @param port  the server listening port; when it is 0, randomly assign a port number
 * @param clientStage the client-side stage that handles transport events
 * @param serverStage the server-side stage that handles transport events
 * @param numberOfTries the number of tries of connection
 * @param retryTimeout the timeout of reconnection
 */
public NettyMessagingTransport(final String hostAddress,int port,final EStage<TransportEvent> clientStage,final EStage<TransportEvent> serverStage,final int numberOfTries,final int retryTimeout){
  if (port < 0) {
    throw new RemoteRuntimeException(""String_Node_Str"" + port);
  }
  this.numberOfTries=numberOfTries;
  this.retryTimeout=retryTimeout;
  this.clientEventListener=new NettyClientEventListener(this.addrToLinkRefMap,clientStage);
  this.serverEventListener=new NettyServerEventListener(this.addrToLinkRefMap,serverStage);
  this.serverBossGroup=new NioEventLoopGroup(SERVER_BOSS_NUM_THREADS,new DefaultThreadFactory(CLASS_NAME + ""String_Node_Str""));
  this.serverWorkerGroup=new NioEventLoopGroup(SERVER_WORKER_NUM_THREADS,new DefaultThreadFactory(CLASS_NAME + ""String_Node_Str""));
  this.clientWorkerGroup=new NioEventLoopGroup(CLIENT_WORKER_NUM_THREADS,new DefaultThreadFactory(CLASS_NAME + ""String_Node_Str""));
  this.clientBootstrap=new Bootstrap();
  this.clientBootstrap.group(this.clientWorkerGroup).channel(NioSocketChannel.class).handler(new NettyChannelInitializer(new NettyDefaultChannelHandlerFactory(""String_Node_Str"",this.clientChannelGroup,this.clientEventListener))).option(ChannelOption.SO_REUSEADDR,true).option(ChannelOption.SO_KEEPALIVE,true);
  this.serverBootstrap=new ServerBootstrap();
  this.serverBootstrap.group(this.serverBossGroup,this.serverWorkerGroup).channel(NioServerSocketChannel.class).childHandler(new NettyChannelInitializer(new NettyDefaultChannelHandlerFactory(""String_Node_Str"",this.serverChannelGroup,this.serverEventListener))).option(ChannelOption.SO_BACKLOG,128).option(ChannelOption.SO_REUSEADDR,true).childOption(ChannelOption.SO_KEEPALIVE,true);
  LOG.log(Level.FINE,""String_Node_Str"",port);
  Channel acceptor=null;
  try {
    if (port > 0) {
      acceptor=this.serverBootstrap.bind(new InetSocketAddress(hostAddress,port)).sync().channel();
    }
 else {
      final Random rand=new Random();
      while (acceptor == null) {
        port=rand.nextInt(10000) + 10000;
        LOG.log(Level.FINEST,""String_Node_Str"",port);
        acceptor=this.serverBootstrap.bind(new InetSocketAddress(hostAddress,port)).sync().channel();
      }
    }
  }
 catch (  Exception ex) {
    final RuntimeException transportException=new TransportRuntimeException(""String_Node_Str"" + this.serverPort);
    LOG.log(Level.SEVERE,""String_Node_Str"" + this.serverPort,transportException);
    this.clientWorkerGroup.shutdownGracefully();
    this.serverBossGroup.shutdownGracefully();
    this.serverWorkerGroup.shutdownGracefully();
    throw transportException;
  }
  this.acceptor=acceptor;
  this.serverPort=port;
  this.localAddress=new InetSocketAddress(hostAddress,this.serverPort);
  LOG.log(Level.FINE,""String_Node_Str"",this.localAddress);
}","/** 
 * Constructs a messaging transport
 * @param hostAddress the server host address
 * @param port  the server listening port; when it is 0, randomly assign a port number
 * @param clientStage the client-side stage that handles transport events
 * @param serverStage the server-side stage that handles transport events
 * @param numberOfTries the number of tries of connection
 * @param retryTimeout the timeout of reconnection
 */
public NettyMessagingTransport(final String hostAddress,int port,final EStage<TransportEvent> clientStage,final EStage<TransportEvent> serverStage,final int numberOfTries,final int retryTimeout){
  if (port < 0) {
    throw new RemoteRuntimeException(""String_Node_Str"" + port);
  }
  this.numberOfTries=numberOfTries;
  this.retryTimeout=retryTimeout;
  this.clientEventListener=new NettyClientEventListener(this.addrToLinkRefMap,clientStage);
  this.serverEventListener=new NettyServerEventListener(this.addrToLinkRefMap,serverStage);
  this.serverBossGroup=new NioEventLoopGroup(SERVER_BOSS_NUM_THREADS,new DefaultThreadFactory(CLASS_NAME + ""String_Node_Str""));
  this.serverWorkerGroup=new NioEventLoopGroup(SERVER_WORKER_NUM_THREADS,new DefaultThreadFactory(CLASS_NAME + ""String_Node_Str""));
  this.clientWorkerGroup=new NioEventLoopGroup(CLIENT_WORKER_NUM_THREADS,new DefaultThreadFactory(CLASS_NAME + ""String_Node_Str""));
  this.clientBootstrap=new Bootstrap();
  this.clientBootstrap.group(this.clientWorkerGroup).channel(NioSocketChannel.class).handler(new NettyChannelInitializer(new NettyDefaultChannelHandlerFactory(""String_Node_Str"",this.clientChannelGroup,this.clientEventListener))).option(ChannelOption.SO_REUSEADDR,true).option(ChannelOption.SO_KEEPALIVE,true);
  this.serverBootstrap=new ServerBootstrap();
  this.serverBootstrap.group(this.serverBossGroup,this.serverWorkerGroup).channel(NioServerSocketChannel.class).childHandler(new NettyChannelInitializer(new NettyDefaultChannelHandlerFactory(""String_Node_Str"",this.serverChannelGroup,this.serverEventListener))).option(ChannelOption.SO_BACKLOG,128).option(ChannelOption.SO_REUSEADDR,true).childOption(ChannelOption.SO_KEEPALIVE,true);
  LOG.log(Level.FINE,""String_Node_Str"",port);
  Channel acceptor=null;
  try {
    if (port > 0) {
      acceptor=this.serverBootstrap.bind(new InetSocketAddress(hostAddress,port)).sync().channel();
    }
 else {
      while (acceptor == null) {
        port=randPort.nextInt(10000) + 10000;
        LOG.log(Level.FINEST,""String_Node_Str"",port);
        try {
          acceptor=this.serverBootstrap.bind(new InetSocketAddress(hostAddress,port)).sync().channel();
        }
 catch (        final Exception ex) {
          LOG.log(Level.FINEST,""String_Node_Str"",port);
        }
      }
    }
  }
 catch (  final Exception ex) {
    final RuntimeException transportException=new TransportRuntimeException(""String_Node_Str"" + port);
    LOG.log(Level.SEVERE,""String_Node_Str"" + port,transportException);
    this.clientWorkerGroup.shutdownGracefully();
    this.serverBossGroup.shutdownGracefully();
    this.serverWorkerGroup.shutdownGracefully();
    throw transportException;
  }
  this.acceptor=acceptor;
  this.serverPort=port;
  this.localAddress=new InetSocketAddress(hostAddress,this.serverPort);
  LOG.log(Level.FINE,""String_Node_Str"",this.localAddress);
}"
59706,"@Override public void onNext(final RemoteMessage<EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto> evaluatorHeartbeatMessage){
  final EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto heartbeat=evaluatorHeartbeatMessage.getMessage();
  final ReefServiceProtos.EvaluatorStatusProto status=heartbeat.getEvaluatorStatus();
  final String evaluatorId=status.getEvaluatorId();
  LOG.log(Level.FINEST,""String_Node_Str"",evaluatorId);
  LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{evaluatorId,status.getState(),heartbeat.getTimestamp(),evaluatorHeartbeatMessage.getIdentifier()});
  if (heartbeat.hasRecovery() && heartbeat.getRecovery()) {
    EvaluatorManager recoveredEvaluator=this.evaluatorManagerFactory.recoverEvaluatorManager(heartbeat);
    evaluators.put(recoveredEvaluator);
  }
  final Optional<EvaluatorManager> evaluatorManager=this.evaluators.get(evaluatorId);
  if (evaluatorManager.isPresent()) {
    evaluatorManager.get().onEvaluatorHeartbeatMessage(evaluatorHeartbeatMessage);
  }
 else {
    final StringBuilder message=new StringBuilder(""String_Node_Str"");
    message.append(evaluatorId);
    if (heartbeat.hasEvaluatorStatus()) {
      message.append(""String_Node_Str"");
      message.append(status.getState());
    }
    message.append('\'');
    throw new RuntimeException(message.toString());
  }
  LOG.log(Level.FINEST,""String_Node_Str"",evaluatorId);
}","@Override public void onNext(final RemoteMessage<EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto> evaluatorHeartbeatMessage){
  final EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto heartbeat=evaluatorHeartbeatMessage.getMessage();
  final ReefServiceProtos.EvaluatorStatusProto status=heartbeat.getEvaluatorStatus();
  final String evaluatorId=status.getEvaluatorId();
  LOG.log(Level.FINEST,""String_Node_Str"",evaluatorId);
  LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{evaluatorId,status.getState(),heartbeat.getTimestamp(),evaluatorHeartbeatMessage.getIdentifier()});
  if (heartbeat.hasRecovery() && heartbeat.getRecovery()) {
    final EvaluatorManager recoveredEvaluator=this.evaluatorManagerFactory.recoverEvaluatorManager(heartbeat);
    this.evaluators.put(recoveredEvaluator);
  }
  final Optional<EvaluatorManager> evaluatorManager=this.evaluators.get(evaluatorId);
  if (evaluatorManager.isPresent()) {
    evaluatorManager.get().onEvaluatorHeartbeatMessage(evaluatorHeartbeatMessage);
  }
 else {
    final StringBuilder message=new StringBuilder(""String_Node_Str"");
    message.append(evaluatorId);
    if (heartbeat.hasEvaluatorStatus()) {
      message.append(""String_Node_Str"");
      message.append(status.getState());
    }
    message.append('\'');
    throw new RuntimeException(message.toString());
  }
  LOG.log(Level.FINEST,""String_Node_Str"",evaluatorId);
}"
59707,"public synchronized void onEvaluatorHeartbeatMessage(final RemoteMessage<EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto> evaluatorHeartbeatProtoRemoteMessage){
  final EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto evaluatorHeartbeatProto=evaluatorHeartbeatProtoRemoteMessage.getMessage();
  LOG.log(Level.FINEST,""String_Node_Str"",evaluatorHeartbeatProto);
  this.sanityChecker.check(evaluatorId,evaluatorHeartbeatProto.getTimestamp());
  final String evaluatorRID=evaluatorHeartbeatProtoRemoteMessage.getIdentifier().toString();
  if (evaluatorHeartbeatProto.hasRecovery() && evaluatorHeartbeatProto.getRecovery()) {
    this.evaluatorControlHandler.setRemoteID(evaluatorRID);
    this.stateManager.setRunning();
    this.evaluatorId=evaluatorRID;
    LOG.log(Level.FINE,""String_Node_Str"",this.evaluatorId);
  }
  if (this.stateManager.isSubmitted()) {
    this.evaluatorControlHandler.setRemoteID(evaluatorRID);
    this.stateManager.setRunning();
    LOG.log(Level.FINEST,""String_Node_Str"",this.evaluatorId);
  }
  if (evaluatorHeartbeatProto.hasEvaluatorStatus()) {
    this.onEvaluatorStatusMessage(evaluatorHeartbeatProto.getEvaluatorStatus());
  }
  for (  final ReefServiceProtos.ContextStatusProto contextStatusProto : evaluatorHeartbeatProto.getContextStatusList()) {
    this.onContextStatusMessage(contextStatusProto,!evaluatorHeartbeatProto.hasTaskStatus());
  }
  if (evaluatorHeartbeatProto.hasTaskStatus()) {
    this.onTaskStatusMessage(evaluatorHeartbeatProto.getTaskStatus());
  }
  LOG.log(Level.FINE,""String_Node_Str"",this.getId());
}","public synchronized void onEvaluatorHeartbeatMessage(final RemoteMessage<EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto> evaluatorHeartbeatProtoRemoteMessage){
  final EvaluatorRuntimeProtocol.EvaluatorHeartbeatProto evaluatorHeartbeatProto=evaluatorHeartbeatProtoRemoteMessage.getMessage();
  LOG.log(Level.FINEST,""String_Node_Str"",evaluatorHeartbeatProto);
  this.sanityChecker.check(evaluatorId,evaluatorHeartbeatProto.getTimestamp());
  final String evaluatorRID=evaluatorHeartbeatProtoRemoteMessage.getIdentifier().toString();
  if (evaluatorHeartbeatProto.hasRecovery() && evaluatorHeartbeatProto.getRecovery()) {
    this.evaluatorControlHandler.setRemoteID(evaluatorRID);
    this.stateManager.setRunning();
    this.evaluatorId=evaluatorHeartbeatProto.getEvaluatorStatus().getEvaluatorId();
    LOG.log(Level.FINE,""String_Node_Str"",this.evaluatorId);
  }
  if (this.stateManager.isSubmitted()) {
    this.evaluatorControlHandler.setRemoteID(evaluatorRID);
    this.stateManager.setRunning();
    LOG.log(Level.FINEST,""String_Node_Str"",this.evaluatorId);
  }
  if (evaluatorHeartbeatProto.hasEvaluatorStatus()) {
    this.onEvaluatorStatusMessage(evaluatorHeartbeatProto.getEvaluatorStatus());
  }
  for (  final ReefServiceProtos.ContextStatusProto contextStatusProto : evaluatorHeartbeatProto.getContextStatusList()) {
    this.onContextStatusMessage(contextStatusProto,!evaluatorHeartbeatProto.hasTaskStatus());
  }
  if (evaluatorHeartbeatProto.hasTaskStatus()) {
    this.onTaskStatusMessage(evaluatorHeartbeatProto.getTaskStatus());
  }
  LOG.log(Level.FINE,""String_Node_Str"",this.getId());
}"
59708,"@Override public List<String> build(){
  final List<String> result=new LinkedList<>();
  result.add(EVALUATOR_PATH);
  result.add(errorHandlerRID);
  result.add(evaluatorConfigurationPath);
  if ((null != this.standardOutPath) && (!standardOutPath.isEmpty())) {
    result.add(""String_Node_Str"" + this.standardOutPath);
  }
  if ((null != this.standardErrPath) && (!standardErrPath.isEmpty())) {
    result.add(""String_Node_Str"" + this.standardErrPath);
  }
  LOG.log(Level.FINE,""String_Node_Str"",StringUtils.join(result,' '));
  return result;
}","@Override public List<String> build(){
  final List<String> result=new LinkedList<>();
  File f=new File(EVALUATOR_PATH);
  if (!f.exists()) {
    LOG.log(Level.WARNING,""String_Node_Str"",f.getAbsolutePath());
  }
  result.add(f.getPath());
  result.add(errorHandlerRID);
  result.add(evaluatorConfigurationPath);
  if ((null != this.standardOutPath) && (!standardOutPath.isEmpty())) {
    result.add(""String_Node_Str"" + this.standardOutPath);
  }
  if ((null != this.standardErrPath) && (!standardErrPath.isEmpty())) {
    result.add(""String_Node_Str"" + this.standardErrPath);
  }
  LOG.log(Level.FINE,""String_Node_Str"",StringUtils.join(result,' '));
  return result;
}"
59709,"void setLink(Link<byte[]> link){
  LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{Thread.currentThread(),link});
  if (linkRef.compareAndSet(null,link)) {
    consumeQueue();
  }
}","void setLink(Link<byte[]> link){
  LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{Thread.currentThread(),link});
  if (linkRef.compareAndSet(null,link)) {
    consumeQueue();
  }
 else {
    consumeQueue();
  }
}"
59710,"/** 
 * @return the class path for the process.
 */
public String getClasspath(){
  return Joiner.on(File.pathSeparator).join(getClassPathList());
}","/** 
 * @return the class path for the process.
 */
public String getClasspath(){
  return StringUtils.join(getClassPathList(),File.pathSeparatorChar);
}"
59711,"public List<String> getClassPathList(){
  return Arrays.asList(getLocalFolderPath() + ""String_Node_Str"",getGlobalFolderPath() + ""String_Node_Str"");
}","public List<String> getClassPathList(){
  return OSUtils.isWindows() ? Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getLocalFolderPath() + ""String_Node_Str"",getGlobalFolderPath() + ""String_Node_Str"") : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",getLocalFolderPath() + ""String_Node_Str"",getGlobalFolderPath() + ""String_Node_Str"");
}"
59712,"/** 
 * Processes a resource launch request.
 * @param launchRequest the launch request to be processed.
 */
final void onResourceLaunchRequest(final DriverRuntimeProtocol.ResourceLaunchProto launchRequest){
synchronized (this.theContainers) {
    final Container c=this.theContainers.get(launchRequest.getIdentifier());
    c.addGlobalFiles(this.fileNames.getGlobalFolder());
    c.addLocalFiles(getLocalFiles(launchRequest));
    final List<String> classPath=this.fileNames.getClassPathList();
    final File evaluatorConfigurationFile=new File(c.getFolder(),fileNames.getEvaluatorConfigurationPath());
    try {
      this.configurationSerializer.toFile(this.configurationSerializer.fromString(launchRequest.getEvaluatorConf()),evaluatorConfigurationFile);
    }
 catch (    final IOException|BindException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    final LaunchCommandBuilder commandBuilder;
switch (launchRequest.getType()) {
case JVM:
      commandBuilder=new JavaLaunchCommandBuilder().setClassPath(classPath);
    break;
case CLR:
  commandBuilder=new CLRLaunchCommandBuilder();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + launchRequest.getType());
}
final List<String> command=commandBuilder.setErrorHandlerRID(this.remoteManager.getMyIdentifier()).setLaunchID(c.getNodeID()).setConfigurationFileName(this.fileNames.getEvaluatorConfigurationPath()).setMemory(c.getMemory()).build();
LOG.log(Level.FINEST,""String_Node_Str"",c);
c.run(command);
}
}","/** 
 * Processes a resource launch request.
 * @param launchRequest the launch request to be processed.
 */
final void onResourceLaunchRequest(final DriverRuntimeProtocol.ResourceLaunchProto launchRequest){
synchronized (this.theContainers) {
    final Container c=this.theContainers.get(launchRequest.getIdentifier());
    c.addGlobalFiles(this.fileNames.getGlobalFolder());
    c.addLocalFiles(getLocalFiles(launchRequest));
    final File evaluatorConfigurationFile=new File(c.getFolder(),fileNames.getEvaluatorConfigurationPath());
    try {
      this.configurationSerializer.toFile(this.configurationSerializer.fromString(launchRequest.getEvaluatorConf()),evaluatorConfigurationFile);
    }
 catch (    final IOException|BindException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    final LaunchCommandBuilder commandBuilder;
switch (launchRequest.getType()) {
case JVM:
      commandBuilder=new JavaLaunchCommandBuilder().setClassPath(this.fileNames.getClassPathList());
    break;
case CLR:
  commandBuilder=new CLRLaunchCommandBuilder();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + launchRequest.getType());
}
final List<String> command=commandBuilder.setErrorHandlerRID(this.remoteManager.getMyIdentifier()).setLaunchID(c.getNodeID()).setConfigurationFileName(this.fileNames.getEvaluatorConfigurationPath()).setMemory(c.getMemory()).build();
LOG.log(Level.FINEST,""String_Node_Str"",c);
c.run(command);
}
}"
59713,"@Override public void onNext(final DriverRuntimeProtocol.ResourceLaunchProto resourceLaunchProto){
  try {
    final String containerId=resourceLaunchProto.getIdentifier();
    LOG.log(Level.FINEST,""String_Node_Str"",containerId);
    final Container container=this.containers.get(containerId);
    LOG.log(Level.FINEST,""String_Node_Str"",container.getId());
    final Map<String,LocalResource> localResources=this.evaluatorSetupHelper.getResources(resourceLaunchProto);
    final LaunchCommandBuilder commandBuilder;
switch (resourceLaunchProto.getType()) {
case JVM:
      commandBuilder=new JavaLaunchCommandBuilder().setClassPath(this.fileNames.getClasspath());
    break;
case CLR:
  commandBuilder=new CLRLaunchCommandBuilder();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + resourceLaunchProto.getType());
}
final List<String> command=commandBuilder.setErrorHandlerRID(resourceLaunchProto.getRemoteId()).setLaunchID(resourceLaunchProto.getIdentifier()).setConfigurationFileName(this.fileNames.getEvaluatorConfigurationPath()).setMemory(container.getResource().getMemory()).setStandardErr(ApplicationConstants.LOG_DIR_EXPANSION_VAR + ""String_Node_Str"" + this.fileNames.getEvaluatorStderrFileName()).setStandardOut(ApplicationConstants.LOG_DIR_EXPANSION_VAR + ""String_Node_Str"" + this.fileNames.getEvaluatorStdoutFileName()).build();
LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{containerId,command,localResources});
final ContainerLaunchContext ctx=YarnTypes.getContainerLaunchContext(command,localResources);
this.yarnContainerManager.get().submit(container,ctx);
LOG.log(Level.FINEST,""String_Node_Str"",containerId);
}
 catch (final Throwable e) {
LOG.log(Level.WARNING,""String_Node_Str"" + resourceLaunchProto,e);
throw new RuntimeException(e);
}
}","@Override public void onNext(final DriverRuntimeProtocol.ResourceLaunchProto resourceLaunchProto){
  try {
    final String containerId=resourceLaunchProto.getIdentifier();
    LOG.log(Level.FINEST,""String_Node_Str"",containerId);
    final Container container=this.containers.get(containerId);
    LOG.log(Level.FINEST,""String_Node_Str"",container.getId());
    final Map<String,LocalResource> localResources=this.evaluatorSetupHelper.getResources(resourceLaunchProto);
    final LaunchCommandBuilder commandBuilder;
switch (resourceLaunchProto.getType()) {
case JVM:
      commandBuilder=new JavaLaunchCommandBuilder().setClassPath(this.fileNames.getClasspath());
    break;
case CLR:
  commandBuilder=new CLRLaunchCommandBuilder();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + resourceLaunchProto.getType());
}
final List<String> command=commandBuilder.setErrorHandlerRID(resourceLaunchProto.getRemoteId()).setLaunchID(resourceLaunchProto.getIdentifier()).setConfigurationFileName(this.fileNames.getEvaluatorConfigurationPath()).setMemory(container.getResource().getMemory()).setStandardErr(ApplicationConstants.LOG_DIR_EXPANSION_VAR + ""String_Node_Str"" + this.fileNames.getEvaluatorStderrFileName()).setStandardOut(ApplicationConstants.LOG_DIR_EXPANSION_VAR + ""String_Node_Str"" + this.fileNames.getEvaluatorStdoutFileName()).build();
if (LOG.isLoggable(Level.FINEST)) {
LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{containerId,StringUtils.join(command,' '),localResources});
}
final ContainerLaunchContext ctx=YarnTypes.getContainerLaunchContext(command,localResources);
this.yarnContainerManager.get().submit(container,ctx);
LOG.log(Level.FINEST,""String_Node_Str"",containerId);
}
 catch (final Throwable e) {
LOG.log(Level.WARNING,""String_Node_Str"" + resourceLaunchProto,e);
throw new RuntimeException(e);
}
}"
59714,"private String getClassPath(){
  return StringUtils.join(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.filenames.getClasspath()),';');
}","private String getClassPath(){
  return StringUtils.join(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.filenames.getClasspath()),File.pathSeparatorChar);
}"
59715,"private String getClasspath(){
  return StringUtils.join(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.fileNames.getClasspath()),':');
}","private String getClasspath(){
  return StringUtils.join(OSUtils.isWindows() ? Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.fileNames.getClasspath()) : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.fileNames.getClasspath()),File.pathSeparatorChar);
}"
59716,"@Test public void testHttpServer() throws BindException, InjectionException {
  final Configuration runtimeConfiguration=LocalRuntimeConfiguration.CONF.set(LocalRuntimeConfiguration.NUMBER_OF_THREADS,2).build();
  final LauncherStatus status=HelloREEFHttp.runHelloReef(runtimeConfiguration,10 * 1000);
  Assert.assertTrue(""String_Node_Str"" + status,status.isSuccess());
}","@Test public void testHttpServer() throws BindException, InjectionException {
  final Configuration runtimeConfiguration=LocalRuntimeConfiguration.CONF.set(LocalRuntimeConfiguration.NUMBER_OF_THREADS,2).build();
  final LauncherStatus status=HelloREEFHttp.runHelloReef(runtimeConfiguration,10 * 1000);
  Assert.assertEquals(LauncherStatus.FORCE_CLOSED,status);
}"
59717,"@Inject PoisonedContextStartHandler(final @Parameter(CrashProbability.class) double crashProbability,final @Parameter(CrashTimeout.class) int timeOut,final Clock clock){
  this.crashProbability=crashProbability;
  this.timeOut=timeOut;
  this.clock=clock;
}","@Inject public PoisonedContextStartHandler(final @Parameter(CrashProbability.class) double crashProbability,final @Parameter(CrashTimeout.class) int timeOut,final Clock clock){
  this.crashProbability=crashProbability;
  this.timeOut=timeOut;
  this.clock=clock;
}"
59718,"@Override public void onNext(final ContextStart contextStart){
  LOG.log(Level.INFO,""String_Node_Str"",this.crashProbability);
  final Random random=new Random();
  if (random.nextDouble() <= this.crashProbability) {
    final int timeToCrash=random.nextInt(this.timeOut) * 1000;
    LOG.log(Level.INFO,""String_Node_Str"",timeToCrash);
    this.clock.scheduleAlarm(timeToCrash,new PoisonedAlarmHandler());
  }
}","@Override public void onNext(final ContextStart contextStart){
  LOG.log(Level.INFO,""String_Node_Str"",this.crashProbability);
  if (this.random.nextDouble() <= this.crashProbability) {
    final int timeToCrash=this.random.nextInt(this.timeOut) * 1000;
    LOG.log(Level.INFO,""String_Node_Str"",timeToCrash);
    if (timeToCrash == 0) {
      throw new PoisonException(""String_Node_Str"" + System.currentTimeMillis());
    }
 else {
      this.clock.scheduleAlarm(timeToCrash,new PoisonedAlarmHandler());
    }
  }
 else {
    LOG.info(""String_Node_Str"");
  }
}"
59719,"@Inject PoisonedTaskStartHandler(final @Parameter(CrashProbability.class) double crashProbability,final @Parameter(CrashTimeout.class) int timeOut,final Clock clock){
  this.crashProbability=crashProbability;
  this.timeOut=timeOut;
  this.clock=clock;
}","@Inject public PoisonedTaskStartHandler(final @Parameter(CrashProbability.class) double crashProbability,final @Parameter(CrashTimeout.class) int timeOut,final Clock clock){
  this.crashProbability=crashProbability;
  this.timeOut=timeOut;
  this.clock=clock;
}"
59720,"@Override public void onNext(final TaskStart taskStart){
  LOG.log(Level.INFO,""String_Node_Str"",this.crashProbability);
  final Random random=new Random();
  if (random.nextDouble() <= this.crashProbability) {
    LOG.info(""String_Node_Str"");
    final int timeToCrash=random.nextInt(this.timeOut) * 1000;
    if (timeToCrash == 0) {
      LOG.info(""String_Node_Str"");
      throw new PoisonException(""String_Node_Str"" + System.currentTimeMillis());
    }
 else {
      LOG.log(Level.INFO,""String_Node_Str"",timeToCrash);
      this.clock.scheduleAlarm(timeToCrash,new PoisonedAlarmHandler());
    }
  }
 else {
    LOG.info(""String_Node_Str"");
  }
}","@Override public void onNext(final TaskStart taskStart){
  LOG.log(Level.INFO,""String_Node_Str"",this.crashProbability);
  if (this.random.nextDouble() <= this.crashProbability) {
    final int timeToCrash=this.random.nextInt(this.timeOut) * 1000;
    LOG.log(Level.INFO,""String_Node_Str"",timeToCrash);
    if (timeToCrash == 0) {
      throw new PoisonException(""String_Node_Str"" + System.currentTimeMillis());
    }
 else {
      this.clock.scheduleAlarm(timeToCrash,new PoisonedAlarmHandler());
    }
  }
 else {
    LOG.info(""String_Node_Str"");
  }
}"
59721,"@Override public void onNext(final EvaluatorRequest request){
  LOG.log(Level.FINE,""String_Node_Str"",request.getNumber());
  for (; ; ) {
    try {
      this.resourceRequestGate.await();
      break;
    }
 catch (    final InterruptedException ex) {
      LOG.log(Level.FINEST,""String_Node_Str"",ex);
    }
  }
  LOG.log(Level.FINE,""String_Node_Str"",request);
  this.resourceRequestGate=new CountDownLatch(1);
  this.requestor.submit(request);
}","@Override public void onNext(final EvaluatorRequest request){
  try {
    LOG.log(Level.FINE,""String_Node_Str"",request.getNumber());
    this.resourceRequestGate.await();
    LOG.log(Level.FINE,""String_Node_Str"",request);
    this.resourceRequestGate=new CountDownLatch(1);
    this.requestor.submit(request);
  }
 catch (  final InterruptedException ex) {
    LOG.log(Level.FINEST,""String_Node_Str"",ex);
  }
}"
59722,"/** 
 * Closes all EvaluatorManager instances managed.
 */
@Override public synchronized void close(){
  for (  final EvaluatorManager evaluatorManager : new ArrayList<>(this.evaluators.values())) {
    LOG.log(Level.WARNING,""String_Node_Str"",evaluatorManager.getId());
    evaluatorManager.close();
  }
}","/** 
 * Closes all EvaluatorManager instances managed.
 */
@Override public void close(){
  final List<EvaluatorManager> evaluatorsCopy;
synchronized (this) {
    evaluatorsCopy=new ArrayList<>(this.evaluators.values());
  }
  for (  final EvaluatorManager evaluatorManager : evaluatorsCopy) {
    LOG.log(Level.WARNING,""String_Node_Str"",evaluatorManager.getId());
    evaluatorManager.close();
  }
}"
59723,"/** 
 * Flushes the remaining buffered logs and shuts down the log scheduler thread.
 */
@Override public void close() throws SecurityException {
  logAll();
  this.logScheduler.shutdown();
}","/** 
 * Flushes the remaining buffered logs and shuts down the log scheduler thread.
 */
@Override public synchronized void close() throws SecurityException {
  if (driverInitialized) {
    this.logAll();
  }
  this.logScheduler.shutdown();
}"
59724,"/** 
 * Get an input split to be assigned to this evaluator Allocates one if its not already allocated
 * @param evaluatorId
 * @return
 */
public NumberedSplit<V> getInputSplit(final String evaluatorId){
synchronized (evaluatorToSplits) {
    if (evaluatorToSplits.containsKey(evaluatorId)) {
      LOG.log(Level.FINE,""String_Node_Str"");
      LOG.log(Level.FINE,evaluatorToSplits.toString());
      return evaluatorToSplits.get(evaluatorId);
    }
  }
  LOG.log(Level.FINE,""String_Node_Str"");
  if (locationToSplits.containsKey(evaluatorId)) {
    LOG.log(Level.FINE,""String_Node_Str"" + evaluatorId);
    final NumberedSplit<V> split=allocateSplit(evaluatorId,locationToSplits.get(evaluatorId));
    LOG.log(Level.FINE,evaluatorToSplits.toString());
    if (split != null) {
      return split;
    }
  }
  LOG.log(Level.FINE,evaluatorId + ""String_Node_Str"");
  final NumberedSplit<V> split=allocateSplit(evaluatorId,unallocatedSplits);
  LOG.log(Level.FINE,evaluatorToSplits.toString());
  if (split != null) {
    return split;
  }
  throw new RuntimeException(""String_Node_Str"" + evaluatorId);
}","/** 
 * Get an input split to be assigned to this evaluator Allocates one if its not already allocated
 * @param evaluatorId
 * @return
 */
public NumberedSplit<V> getInputSplit(final String hostName,final String evaluatorId){
synchronized (evaluatorToSplits) {
    if (evaluatorToSplits.containsKey(evaluatorId)) {
      LOG.log(Level.FINE,""String_Node_Str"");
      LOG.log(Level.FINE,evaluatorToSplits.toString());
      return evaluatorToSplits.get(evaluatorId);
    }
  }
  LOG.log(Level.FINE,""String_Node_Str"");
  if (locationToSplits.containsKey(hostName)) {
    LOG.log(Level.FINE,""String_Node_Str"" + evaluatorId + ""String_Node_Str""+ hostName);
    final NumberedSplit<V> split=allocateSplit(evaluatorId,locationToSplits.get(hostName));
    LOG.log(Level.FINE,evaluatorToSplits.toString());
    if (split != null) {
      return split;
    }
  }
  LOG.log(Level.FINE,hostName + ""String_Node_Str"");
  final NumberedSplit<V> split=allocateSplit(evaluatorId,unallocatedSplits);
  LOG.log(Level.FINE,evaluatorToSplits.toString());
  if (split != null) {
    return split;
  }
  throw new RuntimeException(""String_Node_Str"" + evaluatorId);
}"
59725,"private NumberedSplit<V> allocateSplit(final String evaluatorId,final BlockingQueue<NumberedSplit<V>> value){
  if (value == null) {
    LOG.log(Level.FINE,""String_Node_Str"");
    return null;
  }
  final NumberedSplit<V> split=value.poll();
  if (split != null && (value == unallocatedSplits || unallocatedSplits.remove(split))) {
    LOG.log(Level.FINE,""String_Node_Str"" + split.getIndex() + ""String_Node_Str"");
    final NumberedSplit<V> old=evaluatorToSplits.putIfAbsent(evaluatorId,split);
    if (old != null) {
      final String msg=""String_Node_Str"" + ""String_Node_Str"";
      LOG.severe(msg);
      throw new RuntimeException(msg);
    }
 else {
      LOG.log(Level.FINE,""String_Node_Str"" + split.getIndex());
      return split;
    }
  }
  return null;
}","private NumberedSplit<V> allocateSplit(final String evaluatorId,final BlockingQueue<NumberedSplit<V>> value){
  if (value == null) {
    LOG.log(Level.FINE,""String_Node_Str"");
    return null;
  }
  while (true) {
    final NumberedSplit<V> split=value.poll();
    if (split == null)     return null;
    if (value == unallocatedSplits || unallocatedSplits.remove(split)) {
      LOG.log(Level.FINE,""String_Node_Str"" + split.getIndex() + ""String_Node_Str"");
      final NumberedSplit<V> old=evaluatorToSplits.putIfAbsent(evaluatorId,split);
      if (old != null) {
        final String msg=""String_Node_Str"" + ""String_Node_Str"";
        LOG.severe(msg);
        throw new RuntimeException(msg);
      }
 else {
        LOG.log(Level.FINE,""String_Node_Str"" + split.getIndex());
        return split;
      }
    }
  }
}"
59726,"/** 
 * Initializes the locations of splits mapping
 * @param splits
 */
public EvaluatorToPartitionMapper(V[] splits){
  try {
    for (int splitNum=0; splitNum < splits.length; splitNum++) {
      LOG.log(Level.FINE,""String_Node_Str"" + splitNum);
      final V split=splits[splitNum];
      final String[] locations=split.getLocations();
      final NumberedSplit<V> numberedSplit=new NumberedSplit<V>(split,splitNum);
      unallocatedSplits.add(numberedSplit);
      for (      final String location : locations) {
        BlockingQueue<NumberedSplit<V>> newSplitQue=new LinkedBlockingQueue<NumberedSplit<V>>();
        final BlockingQueue<NumberedSplit<V>> splitQue=locationToSplits.putIfAbsent(location,newSplitQue);
        if (splitQue != null) {
          newSplitQue=splitQue;
        }
        newSplitQue.add(numberedSplit);
      }
    }
    LOG.log(Level.FINE,locationToSplits.toString());
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * Initializes the locations of splits mapping
 * @param splits
 */
public EvaluatorToPartitionMapper(V[] splits){
  try {
    for (int splitNum=0; splitNum < splits.length; splitNum++) {
      LOG.log(Level.FINE,""String_Node_Str"" + splitNum);
      final V split=splits[splitNum];
      final String[] locations=split.getLocations();
      final NumberedSplit<V> numberedSplit=new NumberedSplit<V>(split,splitNum);
      unallocatedSplits.add(numberedSplit);
      for (      final String location : locations) {
        BlockingQueue<NumberedSplit<V>> newSplitQue=new LinkedBlockingQueue<NumberedSplit<V>>();
        final BlockingQueue<NumberedSplit<V>> splitQue=locationToSplits.putIfAbsent(location,newSplitQue);
        if (splitQue != null) {
          newSplitQue=splitQue;
        }
        newSplitQue.add(numberedSplit);
      }
    }
    for (    Map.Entry<String,BlockingQueue<NumberedSplit<V>>> locSplit : locationToSplits.entrySet()) {
      LOG.log(Level.FINE,locSplit.getKey() + ""String_Node_Str"" + locSplit.getValue().toString());
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
59727,"@Override public Configuration getConfiguration(AllocatedEvaluator allocatedEvaluator){
  try {
    final NumberedSplit<InputSplit> numberedSplit=evaluatorToPartitionMapper.getInputSplit(allocatedEvaluator.getId());
    final Configuration contextIdConfiguration=ContextConfiguration.CONF.set(ContextConfiguration.IDENTIFIER,""String_Node_Str"" + numberedSplit.getIndex()).build();
    final Tang tang=Tang.Factory.getTang();
    final JavaConfigurationBuilder jcb=tang.newConfigurationBuilder(contextIdConfiguration);
    if (inMemory) {
      jcb.bindImplementation(DataSet.class,InMemoryInputFormatDataSet.class);
    }
 else {
      jcb.bindImplementation(DataSet.class,InputFormatDataSet.class);
    }
    jcb.bindNamedParameter(InputFormatExternalConstructor.SerializedJobConf.class,serializedJobConf);
    jcb.bindNamedParameter(InputSplitExternalConstructor.SerializedInputSplit.class,WritableSerializer.serialize(numberedSplit.getEntry()));
    jcb.bindConstructor(InputSplit.class,(Class<? extends ExternalConstructor<InputSplit>>)InputSplitExternalConstructor.class);
    return jcb.build();
  }
 catch (  BindException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public Configuration getConfiguration(AllocatedEvaluator allocatedEvaluator){
  try {
    final NumberedSplit<InputSplit> numberedSplit=evaluatorToPartitionMapper.getInputSplit(allocatedEvaluator.getEvaluatorDescriptor().getNodeDescriptor().getName(),allocatedEvaluator.getId());
    final Configuration contextIdConfiguration=ContextConfiguration.CONF.set(ContextConfiguration.IDENTIFIER,""String_Node_Str"" + numberedSplit.getIndex()).build();
    final Tang tang=Tang.Factory.getTang();
    final JavaConfigurationBuilder jcb=tang.newConfigurationBuilder(contextIdConfiguration);
    if (inMemory) {
      jcb.bindImplementation(DataSet.class,InMemoryInputFormatDataSet.class);
    }
 else {
      jcb.bindImplementation(DataSet.class,InputFormatDataSet.class);
    }
    jcb.bindNamedParameter(InputFormatExternalConstructor.SerializedJobConf.class,serializedJobConf);
    jcb.bindNamedParameter(InputSplitExternalConstructor.SerializedInputSplit.class,WritableSerializer.serialize(numberedSplit.getEntry()));
    jcb.bindConstructor(InputSplit.class,(Class<? extends ExternalConstructor<InputSplit>>)InputSplitExternalConstructor.class);
    return jcb.build();
  }
 catch (  BindException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
59728,"@Override public byte[] call(final byte[] arg0) throws Exception {
  int numEx=0;
  for (  final Pair<?,?> keyValue : dataSet) {
    ++numEx;
  }
  return Integer.toString(numEx).getBytes();
}","@Override public byte[] call(final byte[] arg0) throws Exception {
  int numEx=0;
  for (  final Pair<?,?> keyValue : dataSet) {
    LOG.finest(keyValue.toString());
    ++numEx;
  }
  return Integer.toString(numEx).getBytes();
}"
59729,"@Override public Pair<K,V> next(){
  fetchRecord();
  return new Pair<K,V>(key,value);
}","@Override public Pair<K,V> next(){
  Pair<K,V> retPair=new Pair<K,V>(key,value);
  fetchRecord();
  return retPair;
}"
59730,"@Inject public InputFormatLoadingService(InputFormat<K,V> inputFormat,@Parameter(InputFormatExternalConstructor.SerializedJobConf.class) String serializedJobConf,@Parameter(DataLoadingRequestBuilder.NumberOfDesiredSplits.class) int numberOfDesiredSplits,@Parameter(DataLoadingRequestBuilder.LoadDataIntoMemory.class) boolean inMemory){
  this.serializedJobConf=serializedJobConf;
  this.inMemory=inMemory;
  final JobConf jobConf=WritableSerializer.deserialize(serializedJobConf);
  try {
    final InputSplit[] inputSplits=inputFormat.getSplits(jobConf,numberOfDesiredSplits);
    this.numberOfPartitions=inputSplits.length;
    LOG.info(""String_Node_Str"" + numberOfPartitions);
    this.evaluatorToPartitionMapper=new EvaluatorToPartitionMapper<>(inputSplits);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Inject public InputFormatLoadingService(InputFormat<K,V> inputFormat,@Parameter(InputFormatExternalConstructor.SerializedJobConf.class) String serializedJobConf,@Parameter(DataLoadingRequestBuilder.NumberOfDesiredSplits.class) int numberOfDesiredSplits,@Parameter(DataLoadingRequestBuilder.LoadDataIntoMemory.class) boolean inMemory){
  this.serializedJobConf=serializedJobConf;
  this.inMemory=inMemory;
  final JobConf jobConf=WritableSerializer.deserialize(serializedJobConf);
  try {
    final InputSplit[] inputSplits=inputFormat.getSplits(jobConf,numberOfDesiredSplits);
    for (    InputSplit inputSplit : inputSplits) {
      LOG.info(""String_Node_Str"" + inputSplit.toString());
    }
    this.numberOfPartitions=inputSplits.length;
    LOG.info(""String_Node_Str"" + numberOfPartitions);
    this.evaluatorToPartitionMapper=new EvaluatorToPartitionMapper<>(inputSplits);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
59731,"/** 
 * Get an input split to be assigned to this evaluator Allocates one if its not already allocated
 * @param evaluatorId
 * @return
 */
public NumberedSplit<V> getInputSplit(final String evaluatorId){
synchronized (evaluatorToSplits) {
    if (evaluatorToSplits.containsKey(evaluatorId)) {
      LOG.log(Level.FINE,""String_Node_Str"");
      LOG.log(Level.FINE,evaluatorToSplits.toString());
      return evaluatorToSplits.get(evaluatorId);
    }
  }
  LOG.log(Level.FINE,""String_Node_Str"");
  if (locationToSplits.containsKey(evaluatorId)) {
    LOG.log(Level.FINE,""String_Node_Str"" + evaluatorId);
    final NumberedSplit<V> split=allocateSplit(evaluatorId,locationToSplits.get(evaluatorId));
    LOG.log(Level.FINE,evaluatorToSplits.toString());
    if (split != null) {
      return split;
    }
  }
  LOG.log(Level.FINE,evaluatorId + ""String_Node_Str"");
  final NumberedSplit<V> split=allocateSplit(evaluatorId,unallocatedSplits);
  LOG.log(Level.FINE,evaluatorToSplits.toString());
  if (split != null) {
    return split;
  }
  throw new RuntimeException(""String_Node_Str"" + evaluatorId);
}","/** 
 * Get an input split to be assigned to this evaluator Allocates one if its not already allocated
 * @param evaluatorId
 * @return
 */
public NumberedSplit<V> getInputSplit(final String hostName,final String evaluatorId){
synchronized (evaluatorToSplits) {
    if (evaluatorToSplits.containsKey(evaluatorId)) {
      LOG.log(Level.FINE,""String_Node_Str"");
      LOG.log(Level.FINE,evaluatorToSplits.toString());
      return evaluatorToSplits.get(evaluatorId);
    }
  }
  LOG.log(Level.FINE,""String_Node_Str"");
  if (locationToSplits.containsKey(hostName)) {
    LOG.log(Level.FINE,""String_Node_Str"" + evaluatorId + ""String_Node_Str""+ hostName);
    final NumberedSplit<V> split=allocateSplit(evaluatorId,locationToSplits.get(hostName));
    LOG.log(Level.FINE,evaluatorToSplits.toString());
    if (split != null) {
      return split;
    }
  }
  LOG.log(Level.FINE,hostName + ""String_Node_Str"");
  final NumberedSplit<V> split=allocateSplit(evaluatorId,unallocatedSplits);
  LOG.log(Level.FINE,evaluatorToSplits.toString());
  if (split != null) {
    return split;
  }
  throw new RuntimeException(""String_Node_Str"" + evaluatorId);
}"
59732,"private NumberedSplit<V> allocateSplit(final String evaluatorId,final BlockingQueue<NumberedSplit<V>> value){
  if (value == null) {
    LOG.log(Level.FINE,""String_Node_Str"");
    return null;
  }
  final NumberedSplit<V> split=value.poll();
  if (split != null && (value == unallocatedSplits || unallocatedSplits.remove(split))) {
    LOG.log(Level.FINE,""String_Node_Str"" + split.getIndex() + ""String_Node_Str"");
    final NumberedSplit<V> old=evaluatorToSplits.putIfAbsent(evaluatorId,split);
    if (old != null) {
      final String msg=""String_Node_Str"" + ""String_Node_Str"";
      LOG.severe(msg);
      throw new RuntimeException(msg);
    }
 else {
      LOG.log(Level.FINE,""String_Node_Str"" + split.getIndex());
      return split;
    }
  }
  return null;
}","private NumberedSplit<V> allocateSplit(final String evaluatorId,final BlockingQueue<NumberedSplit<V>> value){
  if (value == null) {
    LOG.log(Level.FINE,""String_Node_Str"");
    return null;
  }
  while (true) {
    final NumberedSplit<V> split=value.poll();
    if (split == null)     return null;
    if (value == unallocatedSplits || unallocatedSplits.remove(split)) {
      LOG.log(Level.FINE,""String_Node_Str"" + split.getIndex() + ""String_Node_Str"");
      final NumberedSplit<V> old=evaluatorToSplits.putIfAbsent(evaluatorId,split);
      if (old != null) {
        final String msg=""String_Node_Str"" + ""String_Node_Str"";
        LOG.severe(msg);
        throw new RuntimeException(msg);
      }
 else {
        LOG.log(Level.FINE,""String_Node_Str"" + split.getIndex());
        return split;
      }
    }
  }
}"
59733,"/** 
 * Initializes the locations of splits mapping
 * @param splits
 */
public EvaluatorToPartitionMapper(V[] splits){
  try {
    for (int splitNum=0; splitNum < splits.length; splitNum++) {
      LOG.log(Level.FINE,""String_Node_Str"" + splitNum);
      final V split=splits[splitNum];
      final String[] locations=split.getLocations();
      final NumberedSplit<V> numberedSplit=new NumberedSplit<V>(split,splitNum);
      unallocatedSplits.add(numberedSplit);
      for (      final String location : locations) {
        BlockingQueue<NumberedSplit<V>> newSplitQue=new LinkedBlockingQueue<NumberedSplit<V>>();
        final BlockingQueue<NumberedSplit<V>> splitQue=locationToSplits.putIfAbsent(location,newSplitQue);
        if (splitQue != null) {
          newSplitQue=splitQue;
        }
        newSplitQue.add(numberedSplit);
      }
    }
    LOG.log(Level.FINE,locationToSplits.toString());
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * Initializes the locations of splits mapping
 * @param splits
 */
public EvaluatorToPartitionMapper(V[] splits){
  try {
    for (int splitNum=0; splitNum < splits.length; splitNum++) {
      LOG.log(Level.FINE,""String_Node_Str"" + splitNum);
      final V split=splits[splitNum];
      final String[] locations=split.getLocations();
      final NumberedSplit<V> numberedSplit=new NumberedSplit<V>(split,splitNum);
      unallocatedSplits.add(numberedSplit);
      for (      final String location : locations) {
        BlockingQueue<NumberedSplit<V>> newSplitQue=new LinkedBlockingQueue<NumberedSplit<V>>();
        final BlockingQueue<NumberedSplit<V>> splitQue=locationToSplits.putIfAbsent(location,newSplitQue);
        if (splitQue != null) {
          newSplitQue=splitQue;
        }
        newSplitQue.add(numberedSplit);
      }
    }
    for (    Map.Entry<String,BlockingQueue<NumberedSplit<V>>> locSplit : locationToSplits.entrySet()) {
      LOG.log(Level.FINE,locSplit.getKey() + ""String_Node_Str"" + locSplit.getValue().toString());
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
59734,"@Override public Configuration getConfiguration(AllocatedEvaluator allocatedEvaluator){
  try {
    final NumberedSplit<InputSplit> numberedSplit=evaluatorToPartitionMapper.getInputSplit(allocatedEvaluator.getId());
    final Configuration contextIdConfiguration=ContextConfiguration.CONF.set(ContextConfiguration.IDENTIFIER,""String_Node_Str"" + numberedSplit.getIndex()).build();
    final Tang tang=Tang.Factory.getTang();
    final JavaConfigurationBuilder jcb=tang.newConfigurationBuilder(contextIdConfiguration);
    if (inMemory) {
      jcb.bindImplementation(DataSet.class,InMemoryInputFormatDataSet.class);
    }
 else {
      jcb.bindImplementation(DataSet.class,InputFormatDataSet.class);
    }
    jcb.bindNamedParameter(InputFormatExternalConstructor.SerializedJobConf.class,serializedJobConf);
    jcb.bindNamedParameter(InputSplitExternalConstructor.SerializedInputSplit.class,WritableSerializer.serialize(numberedSplit.getEntry()));
    jcb.bindConstructor(InputSplit.class,(Class<? extends ExternalConstructor<InputSplit>>)InputSplitExternalConstructor.class);
    return jcb.build();
  }
 catch (  BindException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public Configuration getConfiguration(AllocatedEvaluator allocatedEvaluator){
  try {
    final NumberedSplit<InputSplit> numberedSplit=evaluatorToPartitionMapper.getInputSplit(allocatedEvaluator.getEvaluatorDescriptor().getNodeDescriptor().getName(),allocatedEvaluator.getId());
    final Configuration contextIdConfiguration=ContextConfiguration.CONF.set(ContextConfiguration.IDENTIFIER,""String_Node_Str"" + numberedSplit.getIndex()).build();
    final Tang tang=Tang.Factory.getTang();
    final JavaConfigurationBuilder jcb=tang.newConfigurationBuilder(contextIdConfiguration);
    if (inMemory) {
      jcb.bindImplementation(DataSet.class,InMemoryInputFormatDataSet.class);
    }
 else {
      jcb.bindImplementation(DataSet.class,InputFormatDataSet.class);
    }
    jcb.bindNamedParameter(InputFormatExternalConstructor.SerializedJobConf.class,serializedJobConf);
    jcb.bindNamedParameter(InputSplitExternalConstructor.SerializedInputSplit.class,WritableSerializer.serialize(numberedSplit.getEntry()));
    jcb.bindConstructor(InputSplit.class,(Class<? extends ExternalConstructor<InputSplit>>)InputSplitExternalConstructor.class);
    return jcb.build();
  }
 catch (  BindException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
59735,"/** 
 * Cancels the running process if it is running.
 */
public void cancel(){
  if (this.isStarted() && !this.isEnded()) {
    this.process.destroy();
  }
  if (this.isStarted() && !this.isEnded()) {
    LOG.log(Level.WARNING,""String_Node_Str"");
    if (OSUtils.isLinux()) {
      LOG.log(Level.WARNING,""String_Node_Str"");
      try {
        final long pid=readPID();
        OSUtils.kill(pid);
      }
 catch (      final IOException|InterruptedException e) {
        LOG.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * Cancels the running process if it is running.
 */
public final void cancel(){
  this.stateLock.lock();
  try {
    if (this.processIsRunning()) {
      this.process.destroy();
      this.doneCond.await(DESTROY_WAIT_TIME,TimeUnit.MILLISECONDS);
    }
    if (this.processIsRunning()) {
      LOG.log(Level.WARNING,""String_Node_Str"");
      if (OSUtils.isLinux()) {
        LOG.log(Level.WARNING,""String_Node_Str"");
        try {
          final long pid=readPID();
          OSUtils.kill(pid);
        }
 catch (        final IOException|InterruptedException e) {
          LOG.log(Level.SEVERE,""String_Node_Str"",e);
        }
      }
    }
  }
 catch (  final InterruptedException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",new Object[]{this.id,ex});
  }
 finally {
    this.stateLock.unlock();
  }
}"
59736,"private long readPID() throws IOException {
  final String PIDFileName=this.folder.getAbsolutePath() + ""String_Node_Str"" + PIDStoreStartHandler.PID_FILE_NAME;
  try (final BufferedReader r=new BufferedReader(new FileReader(PIDFileName))){
    return Long.valueOf(r.readLine());
  }
 }","/** 
 * @return the PID stored in the PID file.
 * @throws IOException if the file can't be read.
 */
private long readPID() throws IOException {
  final String PIDFileName=this.folder.getAbsolutePath() + ""String_Node_Str"" + PIDStoreStartHandler.PID_FILE_NAME;
  try (final BufferedReader r=new BufferedReader(new FileReader(PIDFileName))){
    return Long.valueOf(r.readLine());
  }
 }"
59737,"/** 
 * @param command the command to execute.
 * @param id      The ID of the process. This is used to name files and in the logs created by this process.
 * @param folder  The folder in which this will store its stdout and stderr output
 */
public RunnableProcess(final List<String> command,final String id,final File folder){
  this.command=new ArrayList<>(command);
  this.id=id;
  this.folder=folder;
  assert(this.folder.isDirectory());
  this.folder.mkdirs();
}","/** 
 * @param command the command to execute.
 * @param id      The ID of the process. This is used to name files and in the logs created by this process.
 * @param folder  The folder in which this will store its stdout and stderr output
 */
public RunnableProcess(final List<String> command,final String id,final File folder){
  this.command=new ArrayList<>(command);
  this.id=id;
  this.folder=folder;
  assert(this.folder.isDirectory());
  this.folder.mkdirs();
  LOG.log(Level.FINEST,""String_Node_Str"");
}"
59738,"@Override public void run(){
  if (isEnded() || isStarted()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final File errFile=new File(folder,STD_ERROR_FILE_NAME);
  final File outFile=new File(folder,STD_OUT_FILE_NAME);
  try {
    LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{this.id,errFile.getAbsolutePath(),outFile.getAbsolutePath()});
    this.process=new ProcessBuilder().command(this.command).directory(this.folder).redirectError(errFile).redirectOutput(outFile).start();
    this.started=true;
  }
 catch (  final IOException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",new Object[]{this.id,this.command,ex});
  }
  try {
    final int returnCode=process.waitFor();
    this.ended=true;
    LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{this.id,returnCode});
  }
 catch (  final InterruptedException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",new Object[]{this.id,ex});
  }
}","/** 
 * Runs the configured process.
 * @throws java.lang.IllegalStateException if the process is already running or has been running before.
 */
@Override public final void run(){
  this.stateLock.lock();
  try {
    if (this.getState() != State.INIT) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    final File errFile=new File(folder,STD_ERROR_FILE_NAME);
    final File outFile=new File(folder,STD_OUT_FILE_NAME);
    try {
      LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{this.id,errFile.getAbsolutePath(),outFile.getAbsolutePath()});
      this.process=new ProcessBuilder().command(this.command).directory(this.folder).redirectError(errFile).redirectOutput(outFile).start();
      this.setState(State.RUNNING);
    }
 catch (    final IOException ex) {
      LOG.log(Level.SEVERE,""String_Node_Str"",new Object[]{this.id,this.command,ex});
    }
  }
  finally {
    this.stateLock.unlock();
  }
  try {
    final int returnValue=process.waitFor();
    this.stateLock.lock();
    try {
      this.setState(State.ENDED);
      this.doneCond.signalAll();
    }
  finally {
      this.stateLock.unlock();
    }
    LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{this.id,returnValue});
  }
 catch (  final InterruptedException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",new Object[]{this.id,ex});
  }
}"
59739,"/** 
 * Check to see if two boundConstructors take indistinguishable arguments. If so (and they are in the same class), then this would lead to ambiguous injection targets, and we want to fail fast. TODO could be faster. Currently O(n^2) in number of parameters.
 * @param def
 * @return
 */
private boolean equalsIgnoreOrder(ConstructorDef<?> def){
  if (getArgs().length != def.getArgs().length) {
    return false;
  }
  for (int i=0; i < getArgs().length; i++) {
    boolean found=false;
    for (int j=0; j < getArgs().length; j++) {
      if (getArgs()[i].getName().equals(getArgs()[j].getName())) {
        found=true;
      }
    }
    if (!found) {
      return false;
    }
  }
  return true;
}","/** 
 * Check to see if two boundConstructors take indistinguishable arguments. If so (and they are in the same class), then this would lead to ambiguous injection targets, and we want to fail fast. TODO could be faster. Currently O(n^2) in number of parameters.
 * @param def
 * @return
 */
private boolean equalsIgnoreOrder(ConstructorDef<?> def){
  if (getArgs().length != def.getArgs().length) {
    return false;
  }
  for (int i=0; i < getArgs().length; i++) {
    boolean found=false;
    for (int j=0; j < def.getArgs().length; j++) {
      if (getArgs()[i].getName().equals(def.getArgs()[j].getName())) {
        found=true;
      }
    }
    if (!found) {
      return false;
    }
  }
  return true;
}"
59740,"@Override public void addLibrary(final File file){
  this.files.add(file);
}","@Override public void addLibrary(final File file){
  this.libraries.add(file);
}"
59741,"/** 
 * Creates the given number of temp files.
 * @param n
 * @return
 * @throws IOException
 */
private Set<File> getTempFiles(final int n) throws IOException {
  final Set<File> theFiles=new HashSet<>();
  for (int i=0; i < n; ++i) {
    final File tempFile=this.tempFileCreator.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempFile.deleteOnExit();
    theFiles.add(tempFile);
  }
  return theFiles;
}","/** 
 * Creates the given number of temp files.
 * @param n
 * @return
 * @throws IOException
 */
private Set<File> getTempFiles(final int n) throws IOException, InjectionException {
  final TempFileCreator tempFileCreator=Tang.Factory.getTang().newInjector(testEnvironment.getRuntimeConfiguration()).getInstance(TempFileCreator.class);
  final Set<File> theFiles=new HashSet<>();
  for (int i=0; i < n; ++i) {
    final File tempFile=tempFileCreator.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tempFile.deleteOnExit();
    theFiles.add(tempFile);
  }
  return theFiles;
}"
59742,"/** 
 * Assembles the configuration based on TestDriverConfiguration
 * @param theFiles
 * @return
 * @throws BindException
 * @throws IOException
 */
private static Configuration getTestDriverConfiguration(final Set<File> theFiles) throws BindException, IOException {
  ConfigurationModule testDriverConfigurationModule=TestDriverConfiguration.CONF;
  for (  final File f : theFiles) {
    LOG.log(Level.INFO,""String_Node_Str"" + f.getName());
    testDriverConfigurationModule=testDriverConfigurationModule.set(TestDriverConfiguration.EXPECTED_FILE_NAME,f.getName());
  }
  final Configuration testDriverConfiguration=testDriverConfigurationModule.build();
  return testDriverConfiguration;
}","/** 
 * Assembles the configuration based on TestDriverConfiguration
 * @param theFiles
 * @return
 * @throws BindException
 * @throws IOException
 */
private static Configuration getTestDriverConfiguration(final Set<File> theFiles) throws BindException, IOException {
  ConfigurationModule testDriverConfigurationModule=TestDriverConfiguration.CONF;
  for (  final File f : theFiles) {
    LOG.log(Level.FINEST,""String_Node_Str"" + f.getName());
    testDriverConfigurationModule=testDriverConfigurationModule.set(TestDriverConfiguration.EXPECTED_FILE_NAME,f.getName());
  }
  final Configuration testDriverConfiguration=testDriverConfigurationModule.build();
  return testDriverConfiguration;
}"
59743,"/** 
 * Assembles the driver configuration using the DriverConfiguration class.
 * @param theFiles
 * @return
 * @throws BindException
 */
private static Configuration getDriverConfiguration(final Set<File> theFiles) throws BindException {
  ConfigurationModule driverConfigurationModule=EnvironmentUtils.addClasspath(DriverConfiguration.CONF,DriverConfiguration.GLOBAL_LIBRARIES).set(DriverConfiguration.DRIVER_IDENTIFIER,""String_Node_Str"").set(DriverConfiguration.ON_DRIVER_STARTED,Driver.StartHandler.class).set(DriverConfiguration.ON_EVALUATOR_ALLOCATED,Driver.EvaluatorAllocatedHandler.class);
  for (  final File f : theFiles) {
    LOG.log(Level.INFO,""String_Node_Str"" + f.getAbsolutePath());
    driverConfigurationModule=driverConfigurationModule.set(DriverConfiguration.LOCAL_FILES,f.getAbsolutePath());
  }
  return driverConfigurationModule.build();
}","/** 
 * Assembles the driver configuration using the DriverConfiguration class.
 * @param theFiles
 * @return
 * @throws BindException
 */
private static Configuration getDriverConfiguration(final Set<File> theFiles) throws BindException {
  ConfigurationModule driverConfigurationModule=EnvironmentUtils.addClasspath(DriverConfiguration.CONF,DriverConfiguration.GLOBAL_LIBRARIES).set(DriverConfiguration.DRIVER_IDENTIFIER,""String_Node_Str"").set(DriverConfiguration.ON_DRIVER_STARTED,Driver.StartHandler.class).set(DriverConfiguration.ON_EVALUATOR_ALLOCATED,Driver.EvaluatorAllocatedHandler.class);
  for (  final File f : theFiles) {
    LOG.log(Level.FINEST,""String_Node_Str"" + f.getAbsolutePath());
    driverConfigurationModule=driverConfigurationModule.set(DriverConfiguration.LOCAL_FILES,f.getAbsolutePath());
  }
  return driverConfigurationModule.build();
}"
59744,"/** 
 * Get a set of all classpath entries EXCEPT of those under excludeEnv directories. Every excludeEnv entry is an environment variable name.
 * @return A set of classpath entries as strings.
 */
public static Set<String> getAllClasspathJars(final String... excludeEnv){
  final Set<String> jars=new HashSet<>();
  final Set<Path> excludePaths=new HashSet<>();
  for (  final String env : excludeEnv) {
    final File file=new File(env);
    if (file.exists()) {
      excludePaths.add(file.toPath());
    }
  }
  for (  final String path : System.getProperty(""String_Node_Str"").split(File.pathSeparator)) {
    try {
      final File file=new File(path);
      if (file.exists()) {
        final Path absolutePath=file.toPath();
        boolean toBeAdded=true;
        for (        final Path prefix : excludePaths) {
          if (absolutePath.startsWith(prefix)) {
            toBeAdded=false;
          }
        }
        if (toBeAdded) {
          jars.add(absolutePath.toString());
        }
      }
    }
 catch (    final InvalidPathException ex) {
      LOG.log(Level.FINE,""String_Node_Str"",new Object[]{path,ex});
    }
  }
  return jars;
}","/** 
 * Get a set of all classpath entries EXCEPT of those under excludeEnv directories. Every excludeEnv entry is an environment variable name.
 * @return A set of classpath entries as strings.
 */
public static Set<String> getAllClasspathJars(final String... excludeEnv){
  final Set<String> jars=new HashSet<>();
  final Set<Path> excludePaths=new HashSet<>();
  for (  final String env : excludeEnv) {
    final String path=System.getenv(env);
    if (null != path) {
      final File file=new File(path);
      if (file.exists()) {
        excludePaths.add(file.toPath());
      }
    }
  }
  for (  final String path : System.getProperty(""String_Node_Str"").split(File.pathSeparator)) {
    try {
      final File file=new File(path);
      if (file.exists()) {
        final Path absolutePath=file.toPath();
        boolean toBeAdded=true;
        for (        final Path prefix : excludePaths) {
          if (absolutePath.startsWith(prefix)) {
            toBeAdded=false;
          }
        }
        if (toBeAdded) {
          jars.add(absolutePath.toString());
        }
      }
    }
 catch (    final InvalidPathException ex) {
      LOG.log(Level.FINE,""String_Node_Str"",new Object[]{path,ex});
    }
  }
  return jars;
}"
59745,"@Override public void onNext(final RemoteMessage<ReefServiceProtos.RuntimeErrorProto> error){
  LOG.log(Level.WARNING,""String_Node_Str"",new Object[]{error.getIdentifier(),error.getMessage().getMessage()});
  this.runningJobMap.remove(error.getIdentifier());
  this.runtimeErrorHandlerFuture.get().onNext(new FailedRuntime(error.getMessage()));
}","@Override public void onNext(final RemoteMessage<ReefServiceProtos.RuntimeErrorProto> error){
  LOG.log(Level.WARNING,""String_Node_Str"",new Object[]{error.getIdentifier(),error.getMessage().getMessage()});
  this.runningJobMap.remove(error.getIdentifier().toString());
  this.runtimeErrorHandlerFuture.get().onNext(new FailedRuntime(error.getMessage()));
}"
59746,"@Override public void submit(final EvaluatorRequest req){
  LOG.log(Level.FINEST,""String_Node_Str"");
  final DriverRuntimeProtocol.ResourceRequestProto.Builder request=DriverRuntimeProtocol.ResourceRequestProto.newBuilder();
switch (req.getSize()) {
case MEDIUM:
    request.setResourceSize(ReefServiceProtos.SIZE.MEDIUM);
  break;
case LARGE:
request.setResourceSize(ReefServiceProtos.SIZE.LARGE);
break;
case XLARGE:
request.setResourceSize(ReefServiceProtos.SIZE.XLARGE);
break;
default :
request.setResourceSize(ReefServiceProtos.SIZE.SMALL);
}
request.setResourceCount(req.getNumber());
if (req.getMegaBytes() > 0) {
request.setMemorySize(req.getMegaBytes());
}
final ResourceCatalog.Descriptor descriptor=req.getDescriptor();
if (descriptor != null) {
if (descriptor instanceof RackDescriptor) {
request.addRackName(descriptor.getName());
}
 else if (descriptor instanceof NodeDescriptor) {
request.addNodeName(descriptor.getName());
}
}
this.futureResourceRequestHandler.get().onNext(request.build());
}","@Override public void submit(final EvaluatorRequest req){
  LOG.log(Level.FINEST,""String_Node_Str"");
  final DriverRuntimeProtocol.ResourceRequestProto.Builder request=DriverRuntimeProtocol.ResourceRequestProto.newBuilder();
  if (null != req.getSize()) {
switch (req.getSize()) {
case MEDIUM:
      request.setResourceSize(ReefServiceProtos.SIZE.MEDIUM);
    break;
case LARGE:
  request.setResourceSize(ReefServiceProtos.SIZE.LARGE);
break;
case XLARGE:
request.setResourceSize(ReefServiceProtos.SIZE.XLARGE);
break;
default :
request.setResourceSize(ReefServiceProtos.SIZE.SMALL);
}
}
 else {
if (req.getMegaBytes() <= 0) {
throw new RuntimeException(""String_Node_Str"");
}
}
request.setResourceCount(req.getNumber());
if (req.getMegaBytes() > 0) {
request.setMemorySize(req.getMegaBytes());
}
final ResourceCatalog.Descriptor descriptor=req.getDescriptor();
if (descriptor != null) {
if (descriptor instanceof RackDescriptor) {
request.addRackName(descriptor.getName());
}
 else if (descriptor instanceof NodeDescriptor) {
request.addNodeName(descriptor.getName());
}
}
this.futureResourceRequestHandler.get().onNext(request.build());
}"
59747,"/** 
 * Update job status and notify the waiting thread.
 */
private synchronized void setStatusAndNotify(final LauncherStatus status){
  this.status=status;
  this.notify();
}","/** 
 * Update job status and notify the waiting thread.
 */
private synchronized void setStatusAndNotify(final LauncherStatus status){
  LOG.log(Level.FINEST,""String_Node_Str"",new Object[]{this.status,status});
  this.status=status;
  this.notify();
}"
59748,"@Override public void onNext(final RemoteMessage<RuntimeErrorProto> error){
  LOG.log(Level.WARNING,""String_Node_Str"",error.getMessage().getMessage());
  this.runtimeErrorHandlerFuture.get().onNext(new FailedRuntime(error.getMessage()));
}","@Override public void onNext(final RemoteMessage<RuntimeErrorProto> error){
  LOG.log(Level.WARNING,""String_Node_Str"",new Object[]{error.getIdentifier(),error.getMessage().getMessage()});
  runningJobMap.remove(error.getIdentifier());
  this.runtimeErrorHandlerFuture.get().onNext(new FailedRuntime(error.getMessage()));
}"
59749,"public DispatchingEStage(final REEFErrorHandler errorHandler,final int numThreads){
  this.errorHandler=errorHandler;
  this.stage=new ThreadPoolStage<>(new EventHandler<DelayedOnNext>(){
    @Override public void onNext(    final DelayedOnNext promise){
      promise.handler.onNext(promise.message);
    }
  }
,numThreads);
}","public DispatchingEStage(final REEFErrorHandler errorHandler,final int numThreads){
  this.errorHandler=errorHandler;
  this.stage=new ThreadPoolStage<>(new EventHandler<DelayedOnNext>(){
    @Override public void onNext(    final DelayedOnNext promise){
      try {
        promise.handler.onNext(promise.message);
      }
  finally {
        queueLength.decrementAndGet();
      }
    }
  }
,numThreads);
}"
59750,"public <T,U extends T>DelayedOnNext(final EventHandler<T> handler,final U message){
  this.handler=(EventHandler<Object>)handler;
  this.message=message;
}","@SuppressWarnings(""String_Node_Str"") public <T,U extends T>DelayedOnNext(final EventHandler<T> handler,final U message){
  this.handler=(EventHandler<Object>)handler;
  this.message=message;
}"
59751,"/** 
 * Dispatch a new message by type.
 * @param type Type of event handler - must match the register() call.
 * @param message A message to process. Must be a subclass of T.
 * @param < T > Message type that event handler supports.
 * @param < U > input message type. Must be a subclass of T.
 */
public <T,U extends T>void onNext(final Class<T> type,final U message){
  final EventHandler<T> handler=(EventHandler<T>)this.handlers.get(type);
  this.stage.onNext(new DelayedOnNext(handler,message));
}","/** 
 * Dispatch a new message by type.
 * @param type Type of event handler - must match the register() call.
 * @param message A message to process. Must be a subclass of T.
 * @param < T > Message type that event handler supports.
 * @param < U > input message type. Must be a subclass of T.
 */
@SuppressWarnings(""String_Node_Str"") public <T,U extends T>void onNext(final Class<T> type,final U message){
  final EventHandler<T> handler=(EventHandler<T>)this.handlers.get(type);
  this.queueLength.incrementAndGet();
  this.stage.onNext(new DelayedOnNext(handler,message));
}"
59752,"@Override public void onNext(final IdleClock idleClock){
  LOG.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{idleClock,runtimeStatusProto.getState(),runtimeStatusProto.getOutstandingContainerRequests(),runtimeStatusProto.getContainerAllocationCount()});
synchronized (DriverManager.this.evaluators) {
    if (ReefServiceProtos.State.RUNNING == runtimeStatusProto.getState() && 0 == runtimeStatusProto.getOutstandingContainerRequests() && 0 == runtimeStatusProto.getContainerAllocationCount()) {
      LOG.log(Level.FINEST,""String_Node_Str"");
      DriverManager.this.clockFuture.get().close();
    }
  }
}","@Override public void onNext(final IdleClock idleClock){
  LOG.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",new Object[]{idleClock,runtimeStatusProto.getState(),runtimeStatusProto.getOutstandingContainerRequests(),runtimeStatusProto.getContainerAllocationCount()});
synchronized (DriverManager.this.evaluators) {
    if (ReefServiceProtos.State.RUNNING == runtimeStatusProto.getState() && 0 == runtimeStatusProto.getOutstandingContainerRequests() && 0 == runtimeStatusProto.getContainerAllocationCount() && DriverManager.this.evaluatorsClosed()) {
      try {
        Thread.sleep(500);
      }
 catch (      final InterruptedException ex) {
        LOG.log(Level.WARNING,""String_Node_Str"",ex);
      }
      LOG.log(Level.FINEST,""String_Node_Str"");
      DriverManager.this.clockFuture.get().close();
    }
  }
}"
59753,"/** 
 * @return current running task, or null if there is not one.
 */
final RunningTask getRunningTask(){
synchronized (this.evaluatorDescriptor) {
    return this.runningTask;
  }
}","/** 
 * @return current running task, or null if there is not one.
 */
RunningTask getRunningTask(){
synchronized (this.evaluatorDescriptor) {
    return this.runningTask;
  }
}"
59754,"private final void removeEvaluatorContext(final EvaluatorContext context){
  this.activeContextList.remove(context);
  this.activeContextIds.remove(context.getId());
}","private void removeEvaluatorContext(final EvaluatorContext context){
  this.activeContextList.remove(context);
  this.activeContextIds.remove(context.getId());
}"
59755,"@Override public final String getId(){
  return this.evaluatorId;
}","@Override public String getId(){
  return this.evaluatorId;
}"
59756,"public final EvaluatorDescriptor getEvaluatorDescriptor(){
  return this.evaluatorDescriptor;
}","public EvaluatorDescriptor getEvaluatorDescriptor(){
  return this.evaluatorDescriptor;
}"
59757,"private final void addEvaluatorContext(final EvaluatorContext context){
  this.activeContextList.add(context);
  this.activeContextIds.add(context.getId());
}","private void addEvaluatorContext(final EvaluatorContext context){
  this.activeContextList.add(context);
  this.activeContextIds.add(context.getId());
}"
59758,"/** 
 * Resource status information from the (actual) resource manager.
 */
final void handle(final DriverRuntimeProtocol.ResourceStatusProto resourceStatusProto){
synchronized (this.evaluatorDescriptor) {
    LOG.log(Level.FINEST,""String_Node_Str"",resourceStatusProto.getState());
    if (resourceStatusProto.getState() == ReefServiceProtos.State.DONE || resourceStatusProto.getState() == ReefServiceProtos.State.FAILED) {
      if (this.state.ordinal() < STATE.DONE.ordinal()) {
        final StringBuilder sb=new StringBuilder();
        sb.append(""String_Node_Str"" + this.evaluatorId + ""String_Node_Str""+ resourceStatusProto.getState()+ ""String_Node_Str""+ this.state);
        if (resourceStatusProto.getDiagnostics() != null && ""String_Node_Str"".equals(resourceStatusProto.getDiagnostics())) {
          sb.append(""String_Node_Str"" + resourceStatusProto.getDiagnostics());
        }
        if (runningTask != null) {
          sb.append(""String_Node_Str"" + runningTask.getId() + ""String_Node_Str"");
        }
        this.isResourceReleased=true;
        handle(new EvaluatorException(this.evaluatorId,sb.toString(),runningTask));
        this.state=STATE.KILLED;
      }
    }
  }
}","/** 
 * Resource status information from the (actual) resource manager.
 */
void handle(final DriverRuntimeProtocol.ResourceStatusProto resourceStatusProto){
synchronized (this.evaluatorDescriptor) {
    LOG.log(Level.FINEST,""String_Node_Str"",resourceStatusProto.getState());
    if (resourceStatusProto.getState() == ReefServiceProtos.State.DONE || resourceStatusProto.getState() == ReefServiceProtos.State.FAILED) {
      if (this.state.ordinal() < State.DONE.ordinal()) {
        final StringBuilder sb=new StringBuilder();
        sb.append(""String_Node_Str"" + this.evaluatorId + ""String_Node_Str""+ resourceStatusProto.getState()+ ""String_Node_Str""+ this.state);
        if (resourceStatusProto.getDiagnostics() != null && ""String_Node_Str"".equals(resourceStatusProto.getDiagnostics())) {
          sb.append(""String_Node_Str"" + resourceStatusProto.getDiagnostics());
        }
        if (runningTask != null) {
          sb.append(""String_Node_Str"" + runningTask.getId() + ""String_Node_Str"");
        }
        this.isResourceReleased=true;
        handle(new EvaluatorException(this.evaluatorId,sb.toString(),runningTask));
        this.state=State.KILLED;
      }
    }
  }
}"
59759,"/** 
 * @return NodeDescriptor for the node executing this evaluator
 */
final NodeDescriptor getNodeDescriptor(){
  return this.getEvaluatorDescriptor().getNodeDescriptor();
}","/** 
 * @return NodeDescriptor for the node executing this evaluator
 */
NodeDescriptor getNodeDescriptor(){
  return this.getEvaluatorDescriptor().getNodeDescriptor();
}"
59760,"@Override public final void close(){
synchronized (this.evaluatorDescriptor) {
    if (STATE.RUNNING == this.state) {
      LOG.log(Level.WARNING,""String_Node_Str"",getId());
      try {
        final EvaluatorRuntimeProtocol.EvaluatorControlProto evaluatorControlProto=EvaluatorRuntimeProtocol.EvaluatorControlProto.newBuilder().setTimestamp(System.currentTimeMillis()).setIdentifier(getId()).setKillEvaluator(EvaluatorRuntimeProtocol.KillEvaluatorProto.newBuilder().build()).build();
        handle(evaluatorControlProto);
      }
  finally {
        this.state=STATE.KILLED;
      }
    }
  }
  if (!this.isResourceReleased) {
    this.isResourceReleased=true;
    try {
      this.clock.scheduleAlarm(100,new EventHandler<Alarm>(){
        @Override public void onNext(        final Alarm alarm){
          EvaluatorManager.this.resourceReleaseHandler.onNext(DriverRuntimeProtocol.ResourceReleaseProto.newBuilder().setIdentifier(EvaluatorManager.this.evaluatorId).build());
        }
      }
);
    }
 catch (    final IllegalStateException e) {
      LOG.log(Level.WARNING,""String_Node_Str"",e);
      EvaluatorManager.this.resourceReleaseHandler.onNext(DriverRuntimeProtocol.ResourceReleaseProto.newBuilder().setIdentifier(EvaluatorManager.this.evaluatorId).build());
    }
 finally {
      EvaluatorManager.this.driverManager.release(EvaluatorManager.this);
    }
  }
}","@Override public void close(){
synchronized (this.evaluatorDescriptor) {
    if (State.RUNNING == this.state) {
      LOG.log(Level.WARNING,""String_Node_Str"",getId());
      try {
        final EvaluatorRuntimeProtocol.EvaluatorControlProto evaluatorControlProto=EvaluatorRuntimeProtocol.EvaluatorControlProto.newBuilder().setTimestamp(System.currentTimeMillis()).setIdentifier(getId()).setKillEvaluator(EvaluatorRuntimeProtocol.KillEvaluatorProto.newBuilder().build()).build();
        handle(evaluatorControlProto);
      }
  finally {
        this.state=State.KILLED;
      }
    }
  }
  if (!this.isResourceReleased) {
    this.isResourceReleased=true;
    try {
      this.clock.scheduleAlarm(100,new EventHandler<Alarm>(){
        @Override public void onNext(        final Alarm alarm){
          EvaluatorManager.this.resourceReleaseHandler.onNext(DriverRuntimeProtocol.ResourceReleaseProto.newBuilder().setIdentifier(EvaluatorManager.this.evaluatorId).build());
        }
      }
);
    }
 catch (    final IllegalStateException e) {
      LOG.log(Level.WARNING,""String_Node_Str"",e);
      EvaluatorManager.this.resourceReleaseHandler.onNext(DriverRuntimeProtocol.ResourceReleaseProto.newBuilder().setIdentifier(EvaluatorManager.this.evaluatorId).build());
    }
 finally {
      EvaluatorManager.this.driverManager.release(EvaluatorManager.this);
    }
  }
}"
59761,"private final EvaluatorContext getEvaluatorContext(final String id){
  for (  final EvaluatorContext context : this.activeContextList) {
    if (context.getId().equals(id))     return context;
  }
  throw new RuntimeException(""String_Node_Str"" + id);
}","private EvaluatorContext getEvaluatorContext(final String id){
  for (  final EvaluatorContext context : this.activeContextList) {
    if (context.getId().equals(id))     return context;
  }
  throw new RuntimeException(""String_Node_Str"" + id);
}"
59762,"public AutoCloseable registerHandler(final Class<? extends T> messageType,final EventHandler<RemoteMessage<? extends T>> theHandler){
  final EventHandler<RemoteMessage<? extends T>> handler=msgTypeToHandlerMap.put(messageType,theHandler);
  if (handler != null) {
    msgTypeToHandlerMap.replace(messageType,theHandler);
  }
  LOG.log(Level.FINER,""String_Node_Str"",messageType);
  return new Subscription(messageType,this);
}","/** 
 * Registers an event handler for a message type and returns a subscription
 * @param <T,         U extends T>
 * @param messageType
 * @param theHandler
 */
@Override public <T,U extends T>AutoCloseable registerHandler(final Class<U> messageType,final EventHandler<RemoteMessage<T>> theHandler){
  if (LOG.isLoggable(Level.FINE)) {
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{this.name,messageType.getName(),theHandler.getClass().getName()});
  }
  return this.handlerContainer.registerHandler(messageType,theHandler);
}"
59763,"public AutoCloseable registerErrorHandler(final EventHandler<Exception> theHandler){
  transport.registerErrorHandler(theHandler);
  return new Subscription(new Exception(),this);
}","/** 
 * Registers an exception handler and returns a subscription
 * @param theHandler
 */
@Override public AutoCloseable registerErrorHandler(final EventHandler<Exception> theHandler){
  if (LOG.isLoggable(Level.FINE)) {
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{this.name,theHandler.getClass().getName()});
  }
  return this.handlerContainer.registerErrorHandler(theHandler);
}"
59764,"/** 
 * Returns my identifier
 */
@Override public RemoteIdentifier getMyIdentifier(){
  return myIdentifier;
}","/** 
 * Returns my identifier
 */
@Override public RemoteIdentifier getMyIdentifier(){
  return this.myIdentifier;
}"
59765,"@Override public void close(){
  if (closed.compareAndSet(false,true)) {
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{this.name,myIdentifier});
    final Runnable closeRunnable=new Runnable(){
      @Override public void run(){
        try {
          LOG.log(Level.FINE,""String_Node_Str"",myIdentifier);
          reSendStage.close();
          LOG.log(Level.FINE,""String_Node_Str"");
        }
 catch (        final Exception e) {
          LOG.log(Level.SEVERE,""String_Node_Str"",e);
        }
        try {
          LOG.log(Level.FINE,""String_Node_Str"",myIdentifier);
          transport.close();
          LOG.log(Level.FINE,""String_Node_Str"");
        }
 catch (        final Exception e) {
          LOG.log(Level.SEVERE,""String_Node_Str"",e);
        }
        try {
          LOG.log(Level.FINE,""String_Node_Str"",myIdentifier);
          reRecvStage.close();
          LOG.log(Level.FINE,""String_Node_Str"");
        }
 catch (        final Exception e) {
          LOG.log(Level.SEVERE,""String_Node_Str"",e);
        }
      }
    }
;
    final ExecutorService closeExecutor=Executors.newSingleThreadExecutor();
    closeExecutor.submit(closeRunnable);
    closeExecutor.shutdown();
    if (!closeExecutor.isShutdown()) {
      LOG.log(Level.SEVERE,""String_Node_Str"");
    }
    final long endTime=System.currentTimeMillis() + CLOSE_EXECUTOR_TIMEOUT;
    while (!closeExecutor.isTerminated()) {
      try {
        final long waitTime=endTime - System.currentTimeMillis();
        closeExecutor.awaitTermination(waitTime,TimeUnit.MILLISECONDS);
      }
 catch (      final InterruptedException e) {
      }
    }
    if (closeExecutor.isTerminated()) {
      LOG.log(Level.FINE,""String_Node_Str"");
    }
 else {
      LOG.log(Level.SEVERE,""String_Node_Str"");
    }
  }
}","@Override public void close(){
  if (closed.compareAndSet(false,true)) {
    LOG.log(Level.FINE,""String_Node_Str"",new Object[]{this.name,this.myIdentifier});
    final Runnable closeRunnable=new Runnable(){
      @Override public void run(){
        try {
          LOG.log(Level.FINE,""String_Node_Str"",myIdentifier);
          reSendStage.close();
          LOG.log(Level.FINE,""String_Node_Str"");
        }
 catch (        final Exception e) {
          LOG.log(Level.SEVERE,""String_Node_Str"",e);
        }
        try {
          LOG.log(Level.FINE,""String_Node_Str"",myIdentifier);
          transport.close();
          LOG.log(Level.FINE,""String_Node_Str"");
        }
 catch (        final Exception e) {
          LOG.log(Level.SEVERE,""String_Node_Str"",e);
        }
        try {
          LOG.log(Level.FINE,""String_Node_Str"",myIdentifier);
          reRecvStage.close();
          LOG.log(Level.FINE,""String_Node_Str"");
        }
 catch (        final Exception e) {
          LOG.log(Level.SEVERE,""String_Node_Str"",e);
        }
      }
    }
;
    final ExecutorService closeExecutor=Executors.newSingleThreadExecutor();
    closeExecutor.submit(closeRunnable);
    closeExecutor.shutdown();
    if (!closeExecutor.isShutdown()) {
      LOG.log(Level.SEVERE,""String_Node_Str"");
    }
    final long endTime=System.currentTimeMillis() + CLOSE_EXECUTOR_TIMEOUT;
    while (!closeExecutor.isTerminated()) {
      try {
        final long waitTime=endTime - System.currentTimeMillis();
        closeExecutor.awaitTermination(waitTime,TimeUnit.MILLISECONDS);
      }
 catch (      final InterruptedException e) {
        LOG.log(Level.FINE,""String_Node_Str"",e);
      }
    }
    if (closeExecutor.isTerminated()) {
      LOG.log(Level.FINE,""String_Node_Str"");
    }
 else {
      LOG.log(Level.SEVERE,""String_Node_Str"");
    }
  }
}"
59766,"@Test public void testThreeConstructors() throws BindException, InjectionException {
  JavaConfigurationBuilder cb=tang.newConfigurationBuilder();
  cb.bindNamedParameter(TCInt.class,""String_Node_Str"");
  cb.bindNamedParameter(TCString.class,""String_Node_Str"");
  ThreeConstructors tc=tang.newInjector(cb.build()).getInstance(ThreeConstructors.class);
  Assert.assertEquals(1,tc.i);
  Assert.assertEquals(""String_Node_Str"",tc.s);
  cb=tang.newConfigurationBuilder();
  cb.bindNamedParameter(TCInt.class,""String_Node_Str"");
  tc=tang.newInjector(cb.build()).getInstance(ThreeConstructors.class);
  Assert.assertEquals(1,tc.i);
  Assert.assertEquals(""String_Node_Str"",tc.s);
  cb=tang.newConfigurationBuilder();
  cb.bindNamedParameter(TCString.class,""String_Node_Str"");
  tc=tang.newInjector(cb.build()).getInstance(ThreeConstructors.class);
  Assert.assertEquals(-1,tc.i);
  Assert.assertEquals(""String_Node_Str"",tc.s);
  cb=tang.newConfigurationBuilder();
  cb.bindNamedParameter(TCFloat.class,""String_Node_Str"");
  tc=tang.newInjector(cb.build()).getInstance(ThreeConstructors.class);
  Assert.assertEquals(-1,tc.i);
  Assert.assertEquals(""String_Node_Str"",tc.s);
  Assert.assertEquals(2.0f,tc.f);
}","@Test public void testThreeConstructors() throws BindException, InjectionException {
  JavaConfigurationBuilder cb=tang.newConfigurationBuilder();
  cb.bindNamedParameter(TCInt.class,""String_Node_Str"");
  cb.bindNamedParameter(TCString.class,""String_Node_Str"");
  ThreeConstructors tc=tang.newInjector(cb.build()).getInstance(ThreeConstructors.class);
  Assert.assertEquals(1,tc.i);
  Assert.assertEquals(""String_Node_Str"",tc.s);
  cb=tang.newConfigurationBuilder();
  cb.bindNamedParameter(TCInt.class,""String_Node_Str"");
  tc=tang.newInjector(cb.build()).getInstance(ThreeConstructors.class);
  Assert.assertEquals(1,tc.i);
  Assert.assertEquals(""String_Node_Str"",tc.s);
  cb=tang.newConfigurationBuilder();
  cb.bindNamedParameter(TCString.class,""String_Node_Str"");
  tc=tang.newInjector(cb.build()).getInstance(ThreeConstructors.class);
  Assert.assertEquals(-1,tc.i);
  Assert.assertEquals(""String_Node_Str"",tc.s);
  cb=tang.newConfigurationBuilder();
  cb.bindNamedParameter(TCFloat.class,""String_Node_Str"");
  tc=tang.newInjector(cb.build()).getInstance(ThreeConstructors.class);
  Assert.assertEquals(-1,tc.i);
  Assert.assertEquals(""String_Node_Str"",tc.s);
  Assert.assertEquals(2.0f,tc.f,1e-9);
}"
59767,"/** 
 * Retained Evaluator client. Parameters are injected automatically by TANG.
 * @param command Shell command to run on each Evaluator.
 * @param reef    Reference to the REEF framework.
 */
@Inject JobClient(final REEF reef,@Parameter(Launch.Command.class) final String command,@Parameter(Launch.NumRuns.class) final Integer numRuns) throws BindException {
  this.reef=reef;
  this.command=command;
  this.maxRuns=numRuns;
  this.isInteractive=this.command == Launch.Command.class.getAnnotation(NamedParameter.class).default_value();
  this.prompt=this.isInteractive ? new BufferedReader(new InputStreamReader(System.in)) : null;
  this.driverConfiguration=EnvironmentUtils.addClasspath(DriverConfiguration.CONF,DriverConfiguration.GLOBAL_LIBRARIES).set(DriverConfiguration.DRIVER_IDENTIFIER,""String_Node_Str"" + System.currentTimeMillis()).set(DriverConfiguration.ON_EVALUATOR_ALLOCATED,JobDriver.AllocatedEvaluatorHandler.class).set(DriverConfiguration.ON_EVALUATOR_FAILED,JobDriver.FailedEvaluatorHandler.class).set(DriverConfiguration.ON_CONTEXT_ACTIVE,JobDriver.ActiveContextHandler.class).set(DriverConfiguration.ON_CONTEXT_CLOSED,JobDriver.ClosedContextHandler.class).set(DriverConfiguration.ON_CONTEXT_FAILED,JobDriver.FailedContextHandler.class).set(DriverConfiguration.ON_ACTIVITY_COMPLETED,JobDriver.CompletedActivityHandler.class).set(DriverConfiguration.ON_CLIENT_MESSAGE,JobDriver.ClientMessageHandler.class).set(DriverConfiguration.ON_DRIVER_STARTED,JobDriver.StartHandler.class).set(DriverConfiguration.ON_DRIVER_STOP,JobDriver.StopHandler.class).build();
}","/** 
 * Retained Evaluator client. Parameters are injected automatically by TANG.
 * @param command Shell command to run on each Evaluator.
 * @param reef    Reference to the REEF framework.
 */
@Inject JobClient(final REEF reef,@Parameter(Launch.Command.class) final String command,@Parameter(Launch.NumRuns.class) final Integer numRuns,@Parameter(Launch.NumEval.class) final Integer numEvaluators) throws BindException {
  this.reef=reef;
  this.command=command;
  this.maxRuns=numRuns;
  this.isInteractive=this.command == Launch.Command.class.getAnnotation(NamedParameter.class).default_value();
  this.prompt=this.isInteractive ? new BufferedReader(new InputStreamReader(System.in)) : null;
  final JavaConfigurationBuilder configBuilder=Tang.Factory.getTang().newConfigurationBuilder();
  configBuilder.addConfiguration(EnvironmentUtils.addClasspath(DriverConfiguration.CONF,DriverConfiguration.GLOBAL_LIBRARIES).set(DriverConfiguration.DRIVER_IDENTIFIER,""String_Node_Str"" + System.currentTimeMillis()).set(DriverConfiguration.ON_EVALUATOR_ALLOCATED,JobDriver.AllocatedEvaluatorHandler.class).set(DriverConfiguration.ON_EVALUATOR_FAILED,JobDriver.FailedEvaluatorHandler.class).set(DriverConfiguration.ON_CONTEXT_ACTIVE,JobDriver.ActiveContextHandler.class).set(DriverConfiguration.ON_CONTEXT_CLOSED,JobDriver.ClosedContextHandler.class).set(DriverConfiguration.ON_CONTEXT_FAILED,JobDriver.FailedContextHandler.class).set(DriverConfiguration.ON_ACTIVITY_COMPLETED,JobDriver.CompletedActivityHandler.class).set(DriverConfiguration.ON_CLIENT_MESSAGE,JobDriver.ClientMessageHandler.class).set(DriverConfiguration.ON_DRIVER_STARTED,JobDriver.StartHandler.class).set(DriverConfiguration.ON_DRIVER_STOP,JobDriver.StopHandler.class).build());
  configBuilder.bindNamedParameter(Launch.NumEval.class,""String_Node_Str"" + numEvaluators);
  this.driverConfiguration=configBuilder.build();
}"
59768,"/** 
 * Main method that starts the Retained Evaluators job.
 * @param args command line parameters.
 */
public static void main(final String[] args){
  try {
    final Configuration commandLineConf=parseCommandLine(args);
    final Configuration runtimeConfig=getClientConfiguration(commandLineConf);
    LOG.log(Level.INFO,""String_Node_Str"",ConfigurationFile.toConfigurationString(runtimeConfig));
    final Configuration driverConfig=EnvironmentUtils.addClasspath(DriverConfiguration.CONF,DriverConfiguration.GLOBAL_LIBRARIES).set(DriverConfiguration.DRIVER_IDENTIFIER,""String_Node_Str"" + System.currentTimeMillis()).set(DriverConfiguration.ON_EVALUATOR_ALLOCATED,JobDriver.AllocatedEvaluatorHandler.class).set(DriverConfiguration.ON_EVALUATOR_FAILED,JobDriver.FailedEvaluatorHandler.class).set(DriverConfiguration.ON_CONTEXT_ACTIVE,JobDriver.ActiveContextHandler.class).set(DriverConfiguration.ON_CONTEXT_CLOSED,JobDriver.ClosedContextHandler.class).set(DriverConfiguration.ON_CONTEXT_FAILED,JobDriver.FailedContextHandler.class).set(DriverConfiguration.ON_ACTIVITY_COMPLETED,JobDriver.CompletedActivityHandler.class).set(DriverConfiguration.ON_DRIVER_STARTED,JobDriver.StartHandler.class).set(DriverConfiguration.ON_DRIVER_STOP,JobDriver.StopHandler.class).build();
    DriverLauncher.getLauncher(runtimeConfig).run(TANGUtils.merge(driverConfig,commandLineConf),0);
  }
 catch (  final BindException|InjectionException|IOException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}","/** 
 * Main method that starts the Retained Evaluators job.
 * @param args command line parameters.
 */
public static void main(final String[] args){
  try {
    final Configuration commandLineConf=parseCommandLine(args);
    final Configuration runtimeConfig=getClientConfiguration(commandLineConf);
    LOG.log(Level.INFO,""String_Node_Str"",ConfigurationFile.toConfigurationString(runtimeConfig));
    final Configuration driverConfig=EnvironmentUtils.addClasspath(DriverConfiguration.CONF,DriverConfiguration.GLOBAL_LIBRARIES).set(DriverConfiguration.DRIVER_IDENTIFIER,""String_Node_Str"" + System.currentTimeMillis()).set(DriverConfiguration.ON_DRIVER_STARTED,JobDriver.StartHandler.class).set(DriverConfiguration.ON_EVALUATOR_ALLOCATED,JobDriver.AllocatedEvaluatorHandler.class).set(DriverConfiguration.ON_ACTIVITY_RUNNING,JobDriver.RunningActivityHandler.class).set(DriverConfiguration.ON_ACTIVITY_COMPLETED,JobDriver.CompletedActivityHandler.class).build();
    DriverLauncher.getLauncher(runtimeConfig).run(TANGUtils.merge(driverConfig,commandLineConf),0);
  }
 catch (  final BindException|InjectionException|IOException ex) {
    LOG.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}"
59769,"public <T,U extends T>void addParser(Class<U> clazz,Class<? extends ExternalConstructor<T>> ec) throws BindException {
  Constructor<? extends ExternalConstructor<T>> c;
  try {
    c=ec.getConstructor(String.class);
  }
 catch (  NoSuchMethodException e) {
    throw new BindException(""String_Node_Str"" + ReflectionUtilities.getFullName(ec) + ""String_Node_Str"",e);
  }
  c.setAccessible(true);
  parsers.put(ReflectionUtilities.getFullName(clazz),c);
}","public <T,U extends T>void addParser(Class<U> clazz,Class<? extends ExternalConstructor<T>> ec) throws BindException {
  Constructor<? extends ExternalConstructor<T>> c;
  try {
    c=ec.getDeclaredConstructor(String.class);
    c.setAccessible(true);
  }
 catch (  NoSuchMethodException e) {
    throw new BindException(""String_Node_Str"" + ReflectionUtilities.getFullName(ec) + ""String_Node_Str"",e);
  }
  c.setAccessible(true);
  parsers.put(ReflectionUtilities.getFullName(clazz),c);
}"
59770,"@SuppressWarnings(""String_Node_Str"") private <T>void addConfiguration(ClassHierarchy ns,ConfigurationBuilderImpl builder) throws BindException {
  namespace=namespace.merge(ns);
  ((ClassHierarchyImpl)namespace).parameterParser.mergeIn(((ClassHierarchyImpl)namespace).parameterParser);
  for (  ClassNode<?> cn : builder.boundImpls.keySet()) {
    bind(cn.getFullName(),builder.boundImpls.get(cn).getFullName());
  }
  for (  ClassNode<?> cn : builder.boundConstructors.keySet()) {
    bind(cn.getFullName(),builder.boundConstructors.get(cn).getFullName());
  }
  for (  NamedParameterNode<?> np : builder.namedParameters.keySet()) {
    bind(np.getFullName(),builder.namedParameters.get(np));
  }
  for (  ClassNode<?> cn : builder.legacyConstructors.keySet()) {
    registerLegacyConstructor(cn,builder.legacyConstructors.get(cn).getArgs());
  }
  for (  Entry<NamedParameterNode<Set<?>>,Object> e : builder.boundSetEntries) {
    String name=((NamedParameterNode<Set<T>>)(NamedParameterNode<?>)e.getKey()).getFullName();
    if (e.getValue() instanceof Node) {
      bindSetEntry(name,(Node)e.getValue());
    }
 else     if (e.getValue() instanceof String) {
      bindSetEntry(name,(String)e.getValue());
    }
 else {
      throw new IllegalStateException();
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private <T>void addConfiguration(ClassHierarchy ns,ConfigurationBuilderImpl builder) throws BindException {
  namespace=namespace.merge(ns);
  if ((namespace instanceof ClassHierarchyImpl || builder.namespace instanceof ClassHierarchyImpl)) {
    if ((namespace instanceof ClassHierarchyImpl && builder.namespace instanceof ClassHierarchyImpl)) {
      ((ClassHierarchyImpl)namespace).parameterParser.mergeIn(((ClassHierarchyImpl)builder.namespace).parameterParser);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  for (  ClassNode<?> cn : builder.boundImpls.keySet()) {
    bind(cn.getFullName(),builder.boundImpls.get(cn).getFullName());
  }
  for (  ClassNode<?> cn : builder.boundConstructors.keySet()) {
    bind(cn.getFullName(),builder.boundConstructors.get(cn).getFullName());
  }
  for (  NamedParameterNode<?> np : builder.namedParameters.keySet()) {
    bind(np.getFullName(),builder.namedParameters.get(np));
  }
  for (  ClassNode<?> cn : builder.legacyConstructors.keySet()) {
    registerLegacyConstructor(cn,builder.legacyConstructors.get(cn).getArgs());
  }
  for (  Entry<NamedParameterNode<Set<?>>,Object> e : builder.boundSetEntries) {
    String name=((NamedParameterNode<Set<T>>)(NamedParameterNode<?>)e.getKey()).getFullName();
    if (e.getValue() instanceof Node) {
      bindSetEntry(name,(Node)e.getValue());
    }
 else     if (e.getValue() instanceof String) {
      bindSetEntry(name,(String)e.getValue());
    }
 else {
      throw new IllegalStateException();
    }
  }
}"
59771,"private static String getNthPrefix(String str,int n){
  n++;
  for (int i=0; i < str.length(); i++) {
    char c=str.charAt(i);
    if (c == '.' || c == '$') {
      n--;
    }
    if (n == 0) {
      return str.substring(0,i);
    }
  }
  if (n == 1) {
    return str;
  }
 else {
    throw new ArrayIndexOutOfBoundsException();
  }
}","private static String getNthPrefix(String str,int n){
  n++;
  for (int i=0; i < str.length(); i++) {
    char c=str.charAt(i);
    if (c == '.' || c == '$' || c == '+') {
      n--;
    }
    if (n == 0) {
      return str.substring(0,i);
    }
  }
  if (n == 1) {
    return str;
  }
 else {
    throw new ArrayIndexOutOfBoundsException();
  }
}"
59772,"public void validatePlan() throws IOException, BindException, InjectionException {
  final Tang t=Tang.Factory.getTang();
  final InputStream chin=new FileInputStream(ch);
  final ClassHierarchyProto.Node root;
  try {
    root=ClassHierarchyProto.Node.parseFrom(chin);
  }
  finally {
    chin.close();
  }
  final ClassHierarchy ch=new ProtocolBufferClassHierarchy(root);
  final ConfigurationBuilder cb=t.newConfigurationBuilder(ch);
  ConfigurationFile.addConfiguration(cb,inConfig);
  if (target != null) {
    Injector i=t.newInjector(cb.build());
    InjectionPlan<?> ip=i.getInjectionPlan(target);
    if (!ip.isInjectable()) {
      throw new InjectionException(target + ""String_Node_Str"" + ip.toCantInjectString());
    }
  }
  ConfigurationFile.writeConfigurationFile(cb.build(),outConfig);
}","public void validatePlan() throws IOException, BindException, InjectionException {
  final Tang t=Tang.Factory.getTang();
  final InputStream chin=new FileInputStream(ch);
  final ClassHierarchyProto.Node root;
  try {
    root=ClassHierarchyProto.Node.parseFrom(chin);
  }
  finally {
    chin.close();
  }
  final ClassHierarchy ch=new ProtocolBufferClassHierarchy(root);
  final ConfigurationBuilder cb=t.newConfigurationBuilder(ch);
  if (!inConfig.canRead()) {
    throw new IOException(""String_Node_Str"" + inConfig);
  }
  ConfigurationFile.addConfiguration(cb,inConfig);
  if (target != null) {
    Injector i=t.newInjector(cb.build());
    InjectionPlan<?> ip=i.getInjectionPlan(target);
    if (!ip.isInjectable()) {
      throw new InjectionException(target + ""String_Node_Str"" + ip.toCantInjectString());
    }
  }
  ConfigurationFile.writeConfigurationFile(cb.build(),outConfig);
}"
59773,"private Node register(String s){
  final Class<?> c;
  try {
    c=classForName(s);
  }
 catch (  ClassNotFoundException e1) {
    return null;
  }
  try {
    Node n=getAlreadyBoundNode(c);
    return n;
  }
 catch (  NameResolutionException e) {
  }
  if (c.getSuperclass() != null) {
    register(ReflectionUtilities.getFullName(c.getSuperclass()));
  }
  for (  Class<?> i : c.getInterfaces()) {
    register(ReflectionUtilities.getFullName(i));
  }
  Class<?> enclosing=c.getEnclosingClass();
  if (enclosing != null) {
    register(ReflectionUtilities.getFullName(enclosing));
  }
  Node n=registerClass(c);
  for (  Class<?> inner_class : c.getDeclaredClasses()) {
    register(ReflectionUtilities.getFullName(inner_class));
  }
  if (n instanceof ClassNode) {
    ClassNode<?> cls=(ClassNode<?>)n;
    for (    ConstructorDef<?> def : cls.getInjectableConstructors()) {
      for (      ConstructorArg arg : def.getArgs()) {
        register(arg.getType());
        if (arg.getNamedParameterName() != null) {
          NamedParameterNode<?> np=(NamedParameterNode<?>)register(arg.getNamedParameterName());
          try {
            if (np.isSet()) {
            }
 else {
              if (!ReflectionUtilities.isCoercable(classForName(arg.getType()),classForName(np.getFullArgName()))) {
                throw new ClassHierarchyException(""String_Node_Str"" + arg.getType() + ""String_Node_Str""+ np.getName()+ ""String_Node_Str""+ np.getFullArgName());
              }
            }
          }
 catch (          ClassNotFoundException e) {
            throw new ClassHierarchyException(""String_Node_Str"" + arg.getType(),e);
          }
        }
      }
    }
  }
 else   if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    register(np.getFullArgName());
  }
  return n;
}","private Node register(String s){
  final Class<?> c;
  try {
    c=classForName(s);
  }
 catch (  ClassNotFoundException e1) {
    return null;
  }
  try {
    Node n=getAlreadyBoundNode(c);
    return n;
  }
 catch (  NameResolutionException e) {
  }
  if (c.getSuperclass() != null) {
    register(ReflectionUtilities.getFullName(c.getSuperclass()));
  }
  for (  Class<?> i : c.getInterfaces()) {
    register(ReflectionUtilities.getFullName(i));
  }
  Class<?> enclosing=c.getEnclosingClass();
  if (enclosing != null) {
    register(ReflectionUtilities.getFullName(enclosing));
  }
  Node n=registerClass(c);
  for (  Class<?> inner_class : c.getDeclaredClasses()) {
    register(ReflectionUtilities.getFullName(inner_class));
  }
  if (n instanceof ClassNode) {
    ClassNode<?> cls=(ClassNode<?>)n;
    for (    ConstructorDef<?> def : cls.getInjectableConstructors()) {
      for (      ConstructorArg arg : def.getArgs()) {
        register(arg.getType());
        if (arg.getNamedParameterName() != null) {
          NamedParameterNode<?> np=(NamedParameterNode<?>)register(arg.getNamedParameterName());
          try {
            if (np.isSet()) {
            }
 else {
              if (!ReflectionUtilities.isCoercable(classForName(arg.getType()),classForName(np.getFullArgName()))) {
                throw new ClassHierarchyException(""String_Node_Str"" + cls.getFullName() + ""String_Node_Str""+ arg.getType()+ ""String_Node_Str""+ np.getName()+ ""String_Node_Str""+ np.getFullArgName());
              }
            }
          }
 catch (          ClassNotFoundException e) {
            throw new ClassHierarchyException(""String_Node_Str"" + arg.getType(),e);
          }
        }
      }
    }
  }
 else   if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    register(np.getFullArgName());
  }
  return n;
}"
59774,"@Override protected String toAmbiguousInjectString(){
  if (alternatives.length == 1) {
    return alternatives[0].toAmbiguousInjectString();
  }
 else   if (selectedIndex != -1) {
    return alternatives[selectedIndex].toAmbiguousInjectString();
  }
 else {
    List<InjectionPlan<?>> alts=new ArrayList<>();
    for (    InjectionPlan<?> alt : alternatives) {
      if (alt.isAmbiguous()) {
        alts.add(alt);
      }
    }
    if (alts.size() == 1) {
      return alts.get(0).toAmbiguousInjectString();
    }
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + getNode().getFullName());
    for (    InjectionPlan<?> alt : alts) {
      sb.append(""String_Node_Str"" + alt.toShallowString() + ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
}","@Override protected String toAmbiguousInjectString(){
  if (alternatives.length == 1) {
    return alternatives[0].toAmbiguousInjectString();
  }
 else   if (selectedIndex != -1) {
    return alternatives[selectedIndex].toAmbiguousInjectString();
  }
 else {
    List<InjectionPlan<?>> alts=new ArrayList<>();
    List<InjectionPlan<?>> ambig=new ArrayList<>();
    for (    InjectionPlan<?> alt : alternatives) {
      if (alt.isFeasible()) {
        alts.add(alt);
      }
      if (alt.isAmbiguous()) {
        ambig.add(alt);
      }
    }
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + getNode().getFullName());
    for (    InjectionPlan<?> alt : alts) {
      sb.append(""String_Node_Str"" + alt.toShallowString() + ""String_Node_Str"");
    }
    for (    InjectionPlan<?> alt : ambig) {
      sb.append(""String_Node_Str"" + alt.toShallowString() + ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
}"
59775,"@Override protected String toAmbiguousInjectString(){
  if (alternatives.length == 1) {
    return alternatives[0].toAmbiguousInjectString();
  }
 else   if (selectedIndex != -1) {
    return alternatives[selectedIndex].toAmbiguousInjectString();
  }
 else {
    List<InjectionPlan<?>> alts=new ArrayList<>();
    for (    InjectionPlan<?> alt : alternatives) {
      if (alt.isFeasible()) {
        alts.add(alt);
      }
    }
    if (alts.size() == 1) {
      throw new IllegalStateException(""String_Node_Str"" + alts.get(0).toPrettyString());
    }
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + getNode().getFullName());
    for (    InjectionPlan<?> alt : alts) {
      sb.append(""String_Node_Str"" + alt.toShallowString() + ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
}","@Override protected String toAmbiguousInjectString(){
  if (alternatives.length == 1) {
    return alternatives[0].toAmbiguousInjectString();
  }
 else   if (selectedIndex != -1) {
    return alternatives[selectedIndex].toAmbiguousInjectString();
  }
 else {
    List<InjectionPlan<?>> alts=new ArrayList<>();
    for (    InjectionPlan<?> alt : alternatives) {
      if (alt.isAmbiguous()) {
        alts.add(alt);
      }
    }
    if (alts.size() == 1) {
      return alts.get(0).toAmbiguousInjectString();
    }
    StringBuffer sb=new StringBuffer(""String_Node_Str"" + getNode().getFullName());
    for (    InjectionPlan<?> alt : alts) {
      sb.append(""String_Node_Str"" + alt.toShallowString() + ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    return sb.toString();
  }
}"
59776,"@Override public Injector createChildInjector(Configuration... configurations) throws BindException {
  return forkInjector(configurations);
}","@Override @Deprecated public Injector createChildInjector(Configuration... configurations) throws BindException {
  return forkInjector(configurations);
}"
59777,"private static InjectorImpl copy(InjectorImpl old,Configuration... configurations) throws BindException {
  final InjectorImpl i;
  try {
    final ConfigurationBuilder cb=old.c.newBuilder();
    for (    Configuration c : configurations) {
      cb.addConfiguration(c);
    }
    i=new InjectorImpl(cb.build());
  }
 catch (  BindException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
  for (  ClassNode<?> cn : old.instances.keySet()) {
    if (!(cn.getFullName().equals(""String_Node_Str""))) {
      try {
        ClassNode<?> new_cn=(ClassNode<?>)i.namespace.getNode(cn.getFullName());
        i.instances.put(new_cn,old.instances.get(cn));
      }
 catch (      BindException e) {
        throw new IllegalStateException(""String_Node_Str"" + cn.getFullName() + ""String_Node_Str"");
      }
    }
  }
  for (  NamedParameterNode<?> np : old.namedParameterInstances.keySet()) {
    Object o=old.namedParameterInstances.get(np);
    NamedParameterNode<?> new_np=(NamedParameterNode<?>)i.namespace.getNode(np.getFullName());
    i.namedParameterInstances.put(new_np,o);
  }
  if (old.aspect != null) {
    i.bindAspect(old.aspect.createChildAspect());
  }
  return i;
}","private static InjectorImpl copy(InjectorImpl old,Configuration... configurations) throws BindException {
  final InjectorImpl i;
  try {
    final ConfigurationBuilder cb=old.c.newBuilder();
    for (    Configuration c : configurations) {
      cb.addConfiguration(c);
    }
    i=new InjectorImpl(cb.build());
  }
 catch (  BindException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
  for (  ClassNode<?> cn : old.instances.keySet()) {
    if (cn.getFullName().equals(ReflectionUtilities.getFullName(Injector.class)) || cn.getFullName().equals(ReflectionUtilities.getFullName(InjectorImpl.class))) {
      throw new IllegalStateException();
    }
    try {
      ClassNode<?> new_cn=(ClassNode<?>)i.namespace.getNode(cn.getFullName());
      i.instances.put(new_cn,old.instances.get(cn));
    }
 catch (    BindException e) {
      throw new IllegalStateException(""String_Node_Str"" + cn.getFullName() + ""String_Node_Str"");
    }
  }
  for (  NamedParameterNode<?> np : old.namedParameterInstances.keySet()) {
    Object o=old.namedParameterInstances.get(np);
    NamedParameterNode<?> new_np=(NamedParameterNode<?>)i.namespace.getNode(np.getFullName());
    i.namedParameterInstances.put(new_np,o);
  }
  if (old.aspect != null) {
    i.bindAspect(old.aspect.createChildAspect());
  }
  return i;
}"
59778,"/** 
 * This gets really nasty now that constructors can invoke operations on us. The upshot is that we should check to see if instances have been registered by callees after each recursive invocation of injectFromPlan or constructor invocations. The error handling currently bails if the thing we just instantiated should be discarded. This could happen if (for instance), a constructor did a bindVolatileInstance of its own class to an instance, or somehow triggered an injection of itself with a different plan (an injection of itself with the same plan would lead to an infinite recursion, so it's not really our problem).
 * @param plan
 * @return
 * @throws InjectionException
 */
@SuppressWarnings(""String_Node_Str"") private <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan.isAmbiguous()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan instanceof InjectionFuturePlan) {
    InjectionFuturePlan<T> fut=(InjectionFuturePlan<T>)plan;
    final String key=fut.getNode().getFullName();
    try {
      InjectionFuture<?> ret=new InjectionFuture<>(this,javaNamespace.classForName(fut.getNode().getFullName()));
      pendingFutures.add(ret);
      return (T)ret;
    }
 catch (    ClassNotFoundException e) {
      throw new InjectionException(""String_Node_Str"" + key);
    }
  }
 else   if (plan.getNode() instanceof ClassNode && null != getCachedInstance((ClassNode<T>)plan.getNode())) {
    return getCachedInstance((ClassNode<T>)plan.getNode());
  }
 else   if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    final Object[] args=new Object[constructor.getArgs().length];
    final InjectionPlan<?>[] argPlans=constructor.getArgs();
    for (int i=0; i < argPlans.length; i++) {
      args[i]=injectFromPlan(argPlans[i]);
    }
    try {
      T ret;
      concurrentModificationGuard=true;
      try {
        ConstructorDef<T> def=(ConstructorDef<T>)constructor.getConstructorDef();
        java.lang.reflect.Constructor<T> c=getConstructor(def);
        if (aspect != null) {
          ret=aspect.inject(def,c,args);
        }
 else {
          ret=c.newInstance(args);
        }
      }
 catch (      IllegalArgumentException e) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"" + constructor.getConstructorDef() + ""String_Node_Str"");
        for (        Object o : args) {
          sb.append(""String_Node_Str"" + o);
        }
        sb.append(""String_Node_Str"");
        throw new IllegalStateException(sb.toString(),e);
      }
      if (ret instanceof ExternalConstructor) {
        ret=((ExternalConstructor<T>)ret).newInstance();
      }
      concurrentModificationGuard=false;
      instances.put(constructor.getNode(),ret);
      return ret;
    }
 catch (    ReflectiveOperationException e) {
      throw new InjectionException(""String_Node_Str"",e);
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    return injectFromPlan(ambiguous.getDelegatedPlan());
  }
 else   if (plan instanceof SetInjectionPlan) {
    SetInjectionPlan<T> setPlan=(SetInjectionPlan<T>)plan;
    Set<T> ret=new MonotonicHashSet<>();
    for (    InjectionPlan<T> subplan : setPlan.getEntryPlans()) {
      ret.add(injectFromPlan(subplan));
    }
    return (T)ret;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}","/** 
 * This gets really nasty now that constructors can invoke operations on us. The upshot is that we should check to see if instances have been registered by callees after each recursive invocation of injectFromPlan or constructor invocations. The error handling currently bails if the thing we just instantiated should be discarded. This could happen if (for instance), a constructor did a bindVolatileInstance of its own class to an instance, or somehow triggered an injection of itself with a different plan (an injection of itself with the same plan would lead to an infinite recursion, so it's not really our problem).
 * @param plan
 * @return
 * @throws InjectionException
 */
@SuppressWarnings(""String_Node_Str"") private <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan.isAmbiguous()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan instanceof InjectionFuturePlan) {
    InjectionFuturePlan<T> fut=(InjectionFuturePlan<T>)plan;
    final String key=fut.getNode().getFullName();
    try {
      InjectionFuture<?> ret=new InjectionFuture<>(this,javaNamespace.classForName(fut.getNode().getFullName()));
      pendingFutures.add(ret);
      return (T)ret;
    }
 catch (    ClassNotFoundException e) {
      throw new InjectionException(""String_Node_Str"" + key);
    }
  }
 else   if (plan.getNode() instanceof ClassNode && null != getCachedInstance((ClassNode<T>)plan.getNode())) {
    return getCachedInstance((ClassNode<T>)plan.getNode());
  }
 else   if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    final Object[] args=new Object[constructor.getArgs().length];
    final InjectionPlan<?>[] argPlans=constructor.getArgs();
    for (int i=0; i < argPlans.length; i++) {
      args[i]=injectFromPlan(argPlans[i]);
    }
    try {
      concurrentModificationGuard=true;
      T ret;
      try {
        ConstructorDef<T> def=(ConstructorDef<T>)constructor.getConstructorDef();
        java.lang.reflect.Constructor<T> c=getConstructor(def);
        if (aspect != null) {
          ret=aspect.inject(def,c,args);
        }
 else {
          ret=c.newInstance(args);
        }
      }
 catch (      IllegalArgumentException e) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"" + constructor.getConstructorDef() + ""String_Node_Str"");
        for (        Object o : args) {
          sb.append(""String_Node_Str"" + o);
        }
        sb.append(""String_Node_Str"");
        throw new IllegalStateException(sb.toString(),e);
      }
      if (ret instanceof ExternalConstructor) {
        ret=((ExternalConstructor<T>)ret).newInstance();
      }
      instances.put(constructor.getNode(),ret);
      return ret;
    }
 catch (    ReflectiveOperationException e) {
      throw new InjectionException(""String_Node_Str"",e);
    }
 finally {
      concurrentModificationGuard=false;
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    return injectFromPlan(ambiguous.getDelegatedPlan());
  }
 else   if (plan instanceof SetInjectionPlan) {
    SetInjectionPlan<T> setPlan=(SetInjectionPlan<T>)plan;
    Set<T> ret=new MonotonicHashSet<>();
    for (    InjectionPlan<T> subplan : setPlan.getEntryPlans()) {
      ret.add(injectFromPlan(subplan));
    }
    return (T)ret;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}"
59779,"/** 
 * This gets really nasty now that constructors can invoke operations on us. The upshot is that we should check to see if instances have been registered by callees after each recursive invocation of injectFromPlan or constructor invocations. The error handling currently bails if the thing we just instantiated should be discarded. This could happen if (for instance), a constructor did a bindVolatileInstance of its own class to an instance, or somehow triggered an injection of itself with a different plan (an injection of itself with the same plan would lead to an infinite recursion, so it's not really our problem).
 * @param plan
 * @return
 * @throws InjectionException
 */
@SuppressWarnings(""String_Node_Str"") private <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan.isAmbiguous()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan.getNode() instanceof ClassNode) {
    T cached=getCachedInstance((ClassNode<T>)plan.getNode());
    if (cached != null) {
      return cached;
    }
  }
  if (plan instanceof InjectionFuturePlan) {
    InjectionFuturePlan<T> fut=(InjectionFuturePlan<T>)plan;
    final String key=fut.getNode().getFullName();
    try {
      InjectionFuture<?> ret=new InjectionFuture<>(this,javaNamespace.classForName(fut.getNode().getFullName()));
      pendingFutures.add(ret);
      return (T)ret;
    }
 catch (    ClassNotFoundException e) {
      throw new InjectionException(""String_Node_Str"" + key);
    }
  }
 else   if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    final Object[] args=new Object[constructor.getArgs().length];
    final InjectionPlan<?>[] argPlans=constructor.getArgs();
    for (int i=0; i < argPlans.length; i++) {
      args[i]=injectFromPlan(argPlans[i]);
    }
    try {
      T ret;
      concurrentModificationGuard=true;
      try {
        ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
      }
 catch (      IllegalArgumentException e) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"" + constructor + ""String_Node_Str"");
        for (        Object o : args) {
          sb.append(""String_Node_Str"" + o);
        }
        sb.append(""String_Node_Str"");
        throw new IllegalStateException(sb.toString(),e);
      }
      if (ret instanceof ExternalConstructor) {
        ret=((ExternalConstructor<T>)ret).newInstance();
      }
      concurrentModificationGuard=false;
      instances.put(constructor.getNode(),ret);
      return ret;
    }
 catch (    ReflectiveOperationException e) {
      throw new InjectionException(""String_Node_Str"",e);
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    return injectFromPlan(ambiguous.getDelegatedPlan());
  }
 else   if (plan instanceof SetInjectionPlan) {
    SetInjectionPlan<T> setPlan=(SetInjectionPlan<T>)plan;
    Set<T> ret=new MonotonicHashSet<>();
    for (    InjectionPlan<T> subplan : setPlan.getEntryPlans()) {
      ret.add(injectFromPlan(subplan));
    }
    return (T)ret;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}","/** 
 * This gets really nasty now that constructors can invoke operations on us. The upshot is that we should check to see if instances have been registered by callees after each recursive invocation of injectFromPlan or constructor invocations. The error handling currently bails if the thing we just instantiated should be discarded. This could happen if (for instance), a constructor did a bindVolatileInstance of its own class to an instance, or somehow triggered an injection of itself with a different plan (an injection of itself with the same plan would lead to an infinite recursion, so it's not really our problem).
 * @param plan
 * @return
 * @throws InjectionException
 */
@SuppressWarnings(""String_Node_Str"") private <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan.isAmbiguous()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan.getNode() instanceof ClassNode) {
    T cached=getCachedInstance((ClassNode<T>)plan.getNode());
    if (cached != null) {
      return cached;
    }
  }
  if (plan instanceof InjectionFuturePlan) {
    InjectionFuturePlan<T> fut=(InjectionFuturePlan<T>)plan;
    final String key=fut.getNode().getFullName();
    try {
      InjectionFuture<?> ret=new InjectionFuture<>(this,javaNamespace.classForName(fut.getNode().getFullName()));
      pendingFutures.add(ret);
      return (T)ret;
    }
 catch (    ClassNotFoundException e) {
      throw new InjectionException(""String_Node_Str"" + key);
    }
  }
 else   if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    final Object[] args=new Object[constructor.getArgs().length];
    final InjectionPlan<?>[] argPlans=constructor.getArgs();
    for (int i=0; i < argPlans.length; i++) {
      args[i]=injectFromPlan(argPlans[i]);
    }
    try {
      T ret;
      concurrentModificationGuard=true;
      try {
        ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
      }
 catch (      IllegalArgumentException e) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"" + constructor.getConstructorDef() + ""String_Node_Str"");
        for (        Object o : args) {
          sb.append(""String_Node_Str"" + o);
        }
        sb.append(""String_Node_Str"");
        throw new IllegalStateException(sb.toString(),e);
      }
      if (ret instanceof ExternalConstructor) {
        ret=((ExternalConstructor<T>)ret).newInstance();
      }
      concurrentModificationGuard=false;
      instances.put(constructor.getNode(),ret);
      return ret;
    }
 catch (    ReflectiveOperationException e) {
      throw new InjectionException(""String_Node_Str"",e);
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    return injectFromPlan(ambiguous.getDelegatedPlan());
  }
 else   if (plan instanceof SetInjectionPlan) {
    SetInjectionPlan<T> setPlan=(SetInjectionPlan<T>)plan;
    Set<T> ret=new MonotonicHashSet<>();
    for (    InjectionPlan<T> subplan : setPlan.getEntryPlans()) {
      ret.add(injectFromPlan(subplan));
    }
    return (T)ret;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}"
59780,"/** 
 * This gets really nasty now that constructors can invoke operations on us. The upshot is that we should check to see if instances have been registered by callees after each recursive invocation of injectFromPlan or constructor invocations. The error handling currently bails if the thing we just instantiated should be discarded. This could happen if (for instance), a constructor did a bindVolatileInstance of its own class to an instance, or somehow triggered an injection of itself with a different plan (an injection of itself with the same plan would lead to an infinite recursion, so it's not really our problem).
 * @param plan
 * @return
 * @throws InjectionException
 */
@SuppressWarnings(""String_Node_Str"") private <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan.isAmbiguous()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan.getNode() instanceof ClassNode) {
    T cached=getCachedInstance((ClassNode<T>)plan.getNode());
    if (cached != null) {
      return cached;
    }
  }
  if (plan instanceof InjectionFuturePlan) {
    InjectionFuturePlan<T> fut=(InjectionFuturePlan<T>)plan;
    final String key=fut.getNode().getFullName();
    try {
      InjectionFuture<?> ret=new InjectionFuture<>(this,javaNamespace.classForName(fut.getNode().getFullName()));
      pendingFutures.add(ret);
      return (T)ret;
    }
 catch (    ClassNotFoundException e) {
      throw new InjectionException(""String_Node_Str"" + key);
    }
  }
 else   if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    final Object[] args=new Object[constructor.getArgs().length];
    final InjectionPlan<?>[] argPlans=constructor.getArgs();
    for (int i=0; i < argPlans.length; i++) {
      args[i]=injectFromPlan(argPlans[i]);
    }
    try {
      T ret;
      concurrentModificationGuard=true;
      try {
        ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
      }
 catch (      IllegalArgumentException e) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"" + constructor.getConstructorDef() + ""String_Node_Str"");
        for (        Object o : args) {
          sb.append(""String_Node_Str"" + o);
        }
        sb.append(""String_Node_Str"");
        throw new IllegalStateException(sb.toString(),e);
      }
      if (ret instanceof ExternalConstructor) {
        ret=((ExternalConstructor<T>)ret).newInstance();
      }
      concurrentModificationGuard=false;
      instances.put(constructor.getNode(),ret);
      return ret;
    }
 catch (    ReflectiveOperationException e) {
      throw new InjectionException(""String_Node_Str"",e);
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    return injectFromPlan(ambiguous.getDelegatedPlan());
  }
 else   if (plan instanceof SetInjectionPlan) {
    SetInjectionPlan<T> setPlan=(SetInjectionPlan<T>)plan;
    Set<T> ret=new MonotonicHashSet<>();
    for (    InjectionPlan<T> subplan : setPlan.getEntryPlans()) {
      ret.add(injectFromPlan(subplan));
    }
    return (T)ret;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}","/** 
 * This gets really nasty now that constructors can invoke operations on us. The upshot is that we should check to see if instances have been registered by callees after each recursive invocation of injectFromPlan or constructor invocations. The error handling currently bails if the thing we just instantiated should be discarded. This could happen if (for instance), a constructor did a bindVolatileInstance of its own class to an instance, or somehow triggered an injection of itself with a different plan (an injection of itself with the same plan would lead to an infinite recursion, so it's not really our problem).
 * @param plan
 * @return
 * @throws InjectionException
 */
@SuppressWarnings(""String_Node_Str"") private <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan.isAmbiguous()) {
    throw new InjectionException(""String_Node_Str"" + plan.getNode().getFullName() + ""String_Node_Str""+ plan.toCantInjectString());
  }
  if (plan instanceof InjectionFuturePlan) {
    InjectionFuturePlan<T> fut=(InjectionFuturePlan<T>)plan;
    final String key=fut.getNode().getFullName();
    try {
      InjectionFuture<?> ret=new InjectionFuture<>(this,javaNamespace.classForName(fut.getNode().getFullName()));
      pendingFutures.add(ret);
      return (T)ret;
    }
 catch (    ClassNotFoundException e) {
      throw new InjectionException(""String_Node_Str"" + key);
    }
  }
 else   if (plan.getNode() instanceof ClassNode && null != getCachedInstance((ClassNode<T>)plan.getNode())) {
    return getCachedInstance((ClassNode<T>)plan.getNode());
  }
 else   if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    final Object[] args=new Object[constructor.getArgs().length];
    final InjectionPlan<?>[] argPlans=constructor.getArgs();
    for (int i=0; i < argPlans.length; i++) {
      args[i]=injectFromPlan(argPlans[i]);
    }
    try {
      T ret;
      concurrentModificationGuard=true;
      try {
        ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
      }
 catch (      IllegalArgumentException e) {
        StringBuilder sb=new StringBuilder(""String_Node_Str"" + constructor.getConstructorDef() + ""String_Node_Str"");
        for (        Object o : args) {
          sb.append(""String_Node_Str"" + o);
        }
        sb.append(""String_Node_Str"");
        throw new IllegalStateException(sb.toString(),e);
      }
      if (ret instanceof ExternalConstructor) {
        ret=((ExternalConstructor<T>)ret).newInstance();
      }
      concurrentModificationGuard=false;
      instances.put(constructor.getNode(),ret);
      return ret;
    }
 catch (    ReflectiveOperationException e) {
      throw new InjectionException(""String_Node_Str"",e);
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    return injectFromPlan(ambiguous.getDelegatedPlan());
  }
 else   if (plan instanceof SetInjectionPlan) {
    SetInjectionPlan<T> setPlan=(SetInjectionPlan<T>)plan;
    Set<T> ret=new MonotonicHashSet<>();
    for (    InjectionPlan<T> subplan : setPlan.getEntryPlans()) {
      ret.add(injectFromPlan(subplan));
    }
    return (T)ret;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}"
59781,"/** 
 * @param args
 * @throws FileNotFoundException 
 * @throws MalformedURLException 
 */
public static void main(String[] args) throws FileNotFoundException, MalformedURLException {
  int i=0;
  String doc=null;
  String jar=null;
  boolean tangTests=false;
  while (i < args.length) {
    if (args[i].equals(""String_Node_Str"")) {
      i++;
      doc=args[i];
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      i++;
      jar=args[i];
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      tangTests=true;
    }
    i++;
  }
  final Tint t;
  if (jar != null) {
    File f=new File(jar);
    if (!f.exists()) {
      throw new FileNotFoundException(jar);
    }
    t=new Tint(new URL[]{f.toURI().toURL()},tangTests);
  }
 else {
    t=new Tint(new URL[0],tangTests);
  }
  if (doc != null) {
    PrintStream out=new PrintStream(new FileOutputStream(new File(doc)));
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    String currentPackage=""String_Node_Str"";
    for (    NamedParameterNode<?> n : t.getNames()) {
      String fullName=n.getFullName();
      String tok[]=fullName.split(""String_Node_Str"");
      StringBuffer sb=new StringBuffer(tok[0]);
      for (int j=1; j < tok.length; j++) {
        if (tok[j].matches(""String_Node_Str"") || j > 4) {
          break;
        }
 else         sb.append(""String_Node_Str"" + tok[j]);
      }
      String pack=sb.toString();
      if (!currentPackage.equals(pack)) {
        currentPackage=pack;
        out.println(t.endPackage());
        out.println(t.startPackage(currentPackage));
      }
      out.println(t.toHtmlString(n,currentPackage));
    }
    out.println(t.endPackage());
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    for (    Field f : t.modules.keySet()) {
      String moduleName=ReflectionUtilities.getFullName(f);
      String declaringClassName=ReflectionUtilities.getFullName(f.getDeclaringClass());
      out.println(""String_Node_Str"" + moduleName + ""String_Node_Str"");
      out.println(""String_Node_Str"");
      out.println(t.modules.get(f).toPrettyString());
      out.println(""String_Node_Str"");
    }
    out.println(""String_Node_Str"");
    for (    String s : t.usages.keySet()) {
      out.println(""String_Node_Str"" + s + ""String_Node_Str"");
      for (      Node n : t.usages.getValuesForKey(s)) {
        out.println(""String_Node_Str"" + n.getFullName() + ""String_Node_Str"");
      }
    }
    out.println(""String_Node_Str"");
    out.close();
  }
}","/** 
 * @param args
 * @throws FileNotFoundException 
 * @throws MalformedURLException 
 */
public static void main(String[] args) throws FileNotFoundException, MalformedURLException {
  int i=0;
  String doc=null;
  String jar=null;
  boolean tangTests=false;
  while (i < args.length) {
    if (args[i].equals(""String_Node_Str"")) {
      i++;
      doc=args[i];
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      i++;
      jar=args[i];
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      tangTests=true;
    }
    i++;
  }
  final Tint t;
  if (jar != null) {
    File f=new File(jar);
    if (!f.exists()) {
      throw new FileNotFoundException(jar);
    }
    t=new Tint(new URL[]{f.toURI().toURL()},tangTests);
  }
 else {
    t=new Tint(new URL[0],tangTests);
  }
  if (doc != null) {
    PrintStream out=new PrintStream(new FileOutputStream(new File(doc)));
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    String currentPackage=""String_Node_Str"";
    for (    Node n : t.getNamesUsedAndSet()) {
      String fullName=n.getFullName();
      String tok[]=fullName.split(""String_Node_Str"");
      StringBuffer sb=new StringBuffer(tok[0]);
      for (int j=1; j < tok.length; j++) {
        if (tok[j].matches(""String_Node_Str"") || j > 4) {
          break;
        }
 else         sb.append(""String_Node_Str"" + tok[j]);
      }
      String pack=sb.toString();
      if (!currentPackage.equals(pack)) {
        currentPackage=pack;
        out.println(t.endPackage());
        out.println(t.startPackage(currentPackage));
      }
      if (n instanceof NamedParameterNode<?>) {
        out.println(t.toHtmlString((NamedParameterNode<?>)n,currentPackage));
      }
 else       if (n instanceof ClassNode<?>) {
        out.println(t.toHtmlString((ClassNode<?>)n,currentPackage));
      }
 else {
        throw new IllegalStateException();
      }
    }
    out.println(t.endPackage());
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    for (    Field f : t.modules.keySet()) {
      String moduleName=ReflectionUtilities.getFullName(f);
      String declaringClassName=ReflectionUtilities.getFullName(f.getDeclaringClass());
      out.println(""String_Node_Str"" + moduleName + ""String_Node_Str"");
      out.println(""String_Node_Str"");
      out.println(t.modules.get(f).toPrettyString());
      out.println(""String_Node_Str"");
    }
    out.println(""String_Node_Str"");
    for (    String s : t.usages.keySet()) {
      out.println(""String_Node_Str"" + s + ""String_Node_Str"");
      for (      Node n : t.usages.getValuesForKey(s)) {
        out.println(""String_Node_Str"" + n.getFullName() + ""String_Node_Str"");
      }
    }
    out.println(""String_Node_Str"");
    out.close();
  }
}"
59782,"public String toHtmlString(NamedParameterNode<?> n,String pack){
  final String sep=""String_Node_Str"";
  String fullName=stripPrefix(n.getFullName(),pack);
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + n.getSimpleArgName() + sep+ fullName+ sep);
  if (n.getDefaultInstanceAsString() != null) {
    String instance=stripPrefix(n.getDefaultInstanceAsString(),pack);
    sb.append(instance);
  }
  sb.append(sep);
  if (!n.getDocumentation().equals(""String_Node_Str"")) {
    sb.append(n.getDocumentation());
  }
  Set<Node> uses=getUsesOf(n);
  sb.append(sep);
  for (  Node u : uses) {
    sb.append(stripPrefix(u.getFullName(),pack) + ""String_Node_Str"");
  }
  sb.append(sep);
  for (  Field f : getSettersOf(n)) {
    sb.append(stripPrefix(ReflectionUtilities.getFullName(f),pack) + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public String toHtmlString(ClassNode<?> n,String pack){
  final String sep=""String_Node_Str"";
  String fullName=stripPrefix(n.getFullName(),pack);
  final String type;
  try {
    if (ch.classForName(n.getFullName()).isInterface()) {
      type=""String_Node_Str"";
    }
 else {
      type=""String_Node_Str"";
    }
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"" + type + sep+ fullName+ sep);
  if (n.getDefaultImplementation() != null) {
    String instance=stripPrefix(n.getDefaultImplementation(),pack);
    sb.append(instance);
  }
  sb.append(sep);
  sb.append(""String_Node_Str"");
  Set<Node> uses=getUsesOf(n);
  sb.append(sep);
  for (  Node u : uses) {
    sb.append(stripPrefix(u.getFullName(),pack) + ""String_Node_Str"");
  }
  sb.append(sep);
  for (  Field f : getSettersOf(n)) {
    sb.append(stripPrefix(ReflectionUtilities.getFullName(f),pack) + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
59783,"@Override public boolean visit(ClassNode<?> node){
  return true;
}","@Override public boolean visit(ClassNode<?> node){
  if (usedKeys.contains(node.getFullName())) {
    names.add(node);
  }
  if (setterKeys.contains(node)) {
    names.add(node);
  }
  return true;
}"
59784,"public Set<Node> getUsesOf(final NamedParameterNode<?> name){
  return usages.getValuesForKey(name.getFullName());
}","public Set<Node> getUsesOf(final Node name){
  return usages.getValuesForKey(name.getFullName());
}"
59785,"public Tint(URL[] jars,boolean checkTang){
  Object[] args=new Object[jars.length + 6];
  for (int i=0; i < jars.length; i++) {
    args[i]=jars[i];
  }
  args[args.length - 1]=new TypeAnnotationsScanner();
  args[args.length - 2]=new SubTypesScanner();
  args[args.length - 3]=new MethodAnnotationsScanner();
  args[args.length - 4]=new MethodParameterScanner();
  args[args.length - 5]=""String_Node_Str"";
  args[args.length - 6]=""String_Node_Str"";
  Reflections r=new Reflections(args);
  Set<Class<?>> classes=new MonotonicSet<>();
  Set<String> strings=new TreeSet<>();
  Set<String> moduleBuilders=new MonotonicSet<>();
  Set<String> injectConstructors=r.getStore().getConstructorsAnnotatedWith(ReflectionUtilities.getFullName(Inject.class));
  for (  String s : injectConstructors) {
    strings.add(s.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  Set<String> parameterConstructors=r.getStore().get(MethodParameterScanner.class,ReflectionUtilities.getFullName(Parameter.class));
  for (  String s : parameterConstructors) {
    strings.add(s.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  strings.addAll(r.getStore().get(TypeAnnotationsScanner.class,ReflectionUtilities.getFullName(DefaultImplementation.class)));
  strings.addAll(r.getStore().get(TypeAnnotationsScanner.class,ReflectionUtilities.getFullName(NamedParameter.class)));
  strings.addAll(r.getStore().get(TypeAnnotationsScanner.class,ReflectionUtilities.getFullName(Unit.class)));
  strings.addAll(r.getStore().get(SubTypesScanner.class,ReflectionUtilities.getFullName(Name.class)));
  moduleBuilders.addAll(r.getStore().get(SubTypesScanner.class,ReflectionUtilities.getFullName(ConfigurationModuleBuilder.class)));
  ch=Tang.Factory.getTang().getDefaultClassHierarchy(jars,new Class[0]);
  for (  Class<?> c : classes) {
    strings.add(ReflectionUtilities.getFullName(c));
  }
  for (  String s : strings) {
    try {
      if (checkTang || !s.startsWith(""String_Node_Str"")) {
        ch.getNode(s);
      }
    }
 catch (    ClassHierarchyException|NameResolutionException e) {
      System.err.println(e.getMessage());
    }
  }
  for (  String mb : moduleBuilders) {
    try {
      @SuppressWarnings(""String_Node_Str"") Class<ConfigurationModuleBuilder> cmb=(Class<ConfigurationModuleBuilder>)ch.classForName(mb);
      for (      Field f : cmb.getFields()) {
        if (ReflectionUtilities.isCoercable(ConfigurationModule.class,f.getType())) {
          int mod=f.getModifiers();
          if (!Modifier.isPrivate(mod)) {
            if (!Modifier.isFinal(mod)) {
              System.err.println(""String_Node_Str"" + f);
            }
            if (!Modifier.isStatic(f.getModifiers())) {
              System.err.println(""String_Node_Str"" + f);
            }
 else {
              String s=f.getDeclaringClass() + ""String_Node_Str"" + f.getName();
              try {
                f.setAccessible(true);
                modules.put(f,(ConfigurationModule)(f.get(null)));
              }
 catch (              ExceptionInInitializerError e) {
                System.err.println(""String_Node_Str"" + ReflectionUtilities.getFullName(f) + ""String_Node_Str""+ e.getCause().getMessage());
              }
catch (              IllegalAccessException e) {
                throw new RuntimeException(e);
              }
            }
          }
        }
      }
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
    NodeVisitor<Node> v=new AbstractClassHierarchyNodeVisitor(){
      @Override public boolean visit(      NamedParameterNode<?> node){
        if (node.getDefaultInstanceAsString() != null && !usages.contains(node.getDefaultInstanceAsString(),node)) {
          usages.put(node.getDefaultInstanceAsString(),node);
        }
        return true;
      }
      @Override public boolean visit(      PackageNode node){
        return true;
      }
      @Override public boolean visit(      ClassNode<?> node){
        for (        ConstructorDef<?> d : node.getInjectableConstructors()) {
          for (          ConstructorArg a : d.getArgs()) {
            if (a.getNamedParameterName() != null && !usages.contains(a.getNamedParameterName(),node)) {
              usages.put(a.getNamedParameterName(),node);
            }
          }
        }
        return true;
      }
    }
;
    Walk.preorder(v,null,ch.getNamespace());
  }
  for (  Field f : modules.keySet()) {
    ConfigurationModule m=modules.get(f);
    Set<NamedParameterNode<?>> nps=m.getBoundNamedParameters();
    for (    NamedParameterNode<?> np : nps) {
      setters.put(np,f);
    }
  }
}","public Tint(URL[] jars,boolean checkTang){
  Object[] args=new Object[jars.length + 6];
  for (int i=0; i < jars.length; i++) {
    args[i]=jars[i];
  }
  args[args.length - 1]=new TypeAnnotationsScanner();
  args[args.length - 2]=new SubTypesScanner();
  args[args.length - 3]=new MethodAnnotationsScanner();
  args[args.length - 4]=new MethodParameterScanner();
  args[args.length - 5]=""String_Node_Str"";
  args[args.length - 6]=""String_Node_Str"";
  Reflections r=new Reflections(args);
  Set<Class<?>> classes=new MonotonicSet<>();
  Set<String> strings=new TreeSet<>();
  Set<String> moduleBuilders=new MonotonicSet<>();
  Set<String> injectConstructors=r.getStore().getConstructorsAnnotatedWith(ReflectionUtilities.getFullName(Inject.class));
  for (  String s : injectConstructors) {
    strings.add(s.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  Set<String> parameterConstructors=r.getStore().get(MethodParameterScanner.class,ReflectionUtilities.getFullName(Parameter.class));
  for (  String s : parameterConstructors) {
    strings.add(s.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  Set<String> defaultStrings=r.getStore().get(TypeAnnotationsScanner.class,ReflectionUtilities.getFullName(DefaultImplementation.class));
  strings.addAll(defaultStrings);
  strings.addAll(r.getStore().get(TypeAnnotationsScanner.class,ReflectionUtilities.getFullName(NamedParameter.class)));
  strings.addAll(r.getStore().get(TypeAnnotationsScanner.class,ReflectionUtilities.getFullName(Unit.class)));
  strings.addAll(r.getStore().get(SubTypesScanner.class,ReflectionUtilities.getFullName(Name.class)));
  moduleBuilders.addAll(r.getStore().get(SubTypesScanner.class,ReflectionUtilities.getFullName(ConfigurationModuleBuilder.class)));
  ch=Tang.Factory.getTang().getDefaultClassHierarchy(jars,new Class[0]);
  for (  String s : defaultStrings) {
    try {
      if (checkTang || !s.startsWith(""String_Node_Str"")) {
        try {
          DefaultImplementation di=ch.classForName(s).getAnnotation(DefaultImplementation.class);
          String diName=di.value() == Void.class ? di.name() : ReflectionUtilities.getFullName(di.value());
          strings.add(diName);
          usages.put(diName,ch.getNode(s));
        }
 catch (        ClassHierarchyException|NameResolutionException e) {
          System.err.println(e.getMessage());
        }
      }
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
  }
  for (  String s : strings) {
    try {
      if (checkTang || !s.startsWith(""String_Node_Str"")) {
        ch.getNode(s);
      }
    }
 catch (    ClassHierarchyException|NameResolutionException e) {
      System.err.println(e.getMessage());
    }
  }
  for (  String mb : moduleBuilders) {
    if (checkTang || !mb.startsWith(""String_Node_Str"")) {
      try {
        @SuppressWarnings(""String_Node_Str"") Class<ConfigurationModuleBuilder> cmb=(Class<ConfigurationModuleBuilder>)ch.classForName(mb);
        for (        Field f : cmb.getFields()) {
          if (ReflectionUtilities.isCoercable(ConfigurationModule.class,f.getType())) {
            int mod=f.getModifiers();
            if (!Modifier.isPrivate(mod)) {
              if (!Modifier.isFinal(mod)) {
                System.err.println(""String_Node_Str"" + f);
              }
              if (!Modifier.isStatic(f.getModifiers())) {
                System.err.println(""String_Node_Str"" + f);
              }
 else {
                try {
                  f.setAccessible(true);
                  modules.put(f,(ConfigurationModule)(f.get(null)));
                  for (                  Entry<String,String> e : modules.get(f).toStringPairs()) {
                    try {
                      Node n=ch.getNode(e.getKey());
                      setters.put(n,f);
                    }
 catch (                    NameResolutionException ex) {
                    }
                    try {
                      Node n=ch.getNode(e.getValue());
                      usages.put(ReflectionUtilities.getFullName(f),n);
                    }
 catch (                    NameResolutionException ex) {
                    }
                  }
                }
 catch (                ExceptionInInitializerError e) {
                  System.err.println(""String_Node_Str"" + ReflectionUtilities.getFullName(f) + ""String_Node_Str""+ e.getCause().getMessage());
                }
catch (                IllegalAccessException e) {
                  throw new RuntimeException(e);
                }
              }
            }
          }
        }
      }
 catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
  for (  Class<?> c : classes) {
    strings.add(ReflectionUtilities.getFullName(c));
  }
  NodeVisitor<Node> v=new AbstractClassHierarchyNodeVisitor(){
    @Override public boolean visit(    NamedParameterNode<?> node){
      if (node.getDefaultInstanceAsString() != null && !usages.contains(node.getDefaultInstanceAsString(),node)) {
        usages.put(node.getDefaultInstanceAsString(),node);
      }
      return true;
    }
    @Override public boolean visit(    PackageNode node){
      return true;
    }
    @Override public boolean visit(    ClassNode<?> node){
      for (      ConstructorDef<?> d : node.getInjectableConstructors()) {
        for (        ConstructorArg a : d.getArgs()) {
          if (a.getNamedParameterName() != null && !usages.contains(a.getNamedParameterName(),node)) {
            usages.put(a.getNamedParameterName(),node);
          }
        }
      }
      return true;
    }
  }
;
  Walk.preorder(v,null,ch.getNamespace());
  for (  Field f : modules.keySet()) {
    ConfigurationModule m=modules.get(f);
    Set<NamedParameterNode<?>> nps=m.getBoundNamedParameters();
    for (    NamedParameterNode<?> np : nps) {
      if (!setters.contains(np,f)) {
        setters.put(np,f);
      }
    }
  }
}"
59786,"public Set<Field> getSettersOf(final NamedParameterNode<?> name){
  return setters.getValuesForKey(name);
}","public Set<Field> getSettersOf(final Node name){
  return setters.getValuesForKey(name);
}"
59787,"public String stripPrefixHelper(String s,String prefix){
  if (s.startsWith(prefix)) {
    return s.substring(prefix.length() + 1);
  }
 else {
    return s;
  }
}","public String stripPrefixHelper(String s,String prefix){
  if (!""String_Node_Str"".equals(prefix) && s.startsWith(prefix)) {
    try {
      return s.substring(prefix.length() + 1);
    }
 catch (    StringIndexOutOfBoundsException e) {
      throw new RuntimeException(""String_Node_Str"" + prefix + ""String_Node_Str""+ s,e);
    }
  }
 else {
    return s;
  }
}"
59788,"/** 
 * Process current edge of the injection plan.
 * @param aNodeFrom Current injection plan node.
 * @param aNodeTo Destination injection plan node.
 * @return true to proceed with the next node, false to cancel.
 */
@Override public boolean visit(final InjectionPlan<?> aNodeFrom,final InjectionPlan<?> aNodeTo){
  mGraphStr.append(""String_Node_Str"").append(aNodeFrom.getNode().getName()).append(""String_Node_Str"").append(aNodeTo.getNode().getName()).append(""String_Node_Str"");
  return true;
}","/** 
 * Process current edge of the injection plan.
 * @param aNodeFrom Current injection plan node.
 * @param aNodeTo Destination injection plan node.
 * @return true to proceed with the next node, false to cancel.
 */
@Override public boolean visit(final InjectionPlan<?> aNodeFrom,final InjectionPlan<?> aNodeTo){
  mGraphStr.append(""String_Node_Str"").append(aNodeFrom.getClass()).append('_').append(aNodeFrom.getNode().getName()).append(""String_Node_Str"").append(aNodeTo.getClass()).append('_').append(aNodeTo.getNode().getName()).append(""String_Node_Str"");
  return true;
}"
59789,"@Override protected String toInfeasibleInjectString(){
  if (alternatives.length == 1) {
    return alternatives[0].toInfeasibleInjectString();
  }
 else   if (alternatives.length == 0) {
    return ""String_Node_Str"" + this.getNode();
  }
 else   if (selectedIndex != -1) {
    return alternatives[selectedIndex].toInfeasibleInjectString();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + toPrettyString());
  }
}","@Override protected String toInfeasibleInjectString(){
  if (alternatives.length == 1) {
    return alternatives[0].toInfeasibleInjectString();
  }
 else   if (alternatives.length == 0) {
    return ""String_Node_Str"" + this.getNode();
  }
 else   if (selectedIndex != -1) {
    return alternatives[selectedIndex].toInfeasibleInjectString();
  }
 else {
    return ""String_Node_Str"" + toPrettyString();
  }
}"
59790,"/** 
 * Get child elements of the injection plan tree. TODO: use ArrayList internally (and maybe for input, too).
 * @return A list of injection sub-plans.
 */
@Override public Collection<InjectionPlan<?>> getChildren(){
  return (Collection)Collections.unmodifiableList(Arrays.asList(this.alternatives));
}","/** 
 * Get child elements of the injection plan tree. TODO: use ArrayList internally (and maybe for input, too).
 * @return A list of injection sub-plans.
 */
@Override public Collection<InjectionPlan<?>> getChildren(){
  return (Collection)Collections.unmodifiableCollection(Arrays.asList(this.alternatives));
}"
59791,"public <T>ConfigurationModule set(Param<T> opt,String val){
  processSet(opt);
  setParams.put(opt,val);
  return this;
}","public final <T>ConfigurationModule set(Param<T> opt,String val){
  ConfigurationModule c=deepCopy();
  c.processSet(opt);
  c.setParams.put(opt,val);
  return c;
}"
59792,"public <T>ConfigurationModule bindImplementation(Class<T> iface,Impl<? extends T> opt){
  processUse(opt);
  freeImpls.put(opt,iface);
  return this;
}","public final <T>ConfigurationModule bindImplementation(Class<T> iface,Impl<? extends T> opt){
  ConfigurationModule c=deepCopy();
  c.processUse(opt);
  c.freeImpls.put(opt,iface);
  return c;
}"
59793,"public ConfigurationModule(){
  for (  Field f : getClass().getDeclaredFields()) {
    Class<?> t=f.getType();
    if (paramTypes.contains(t)) {
      if (!Modifier.isPublic(f.getModifiers())) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f);
      }
      if (!Modifier.isStatic(f.getModifiers())) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f);
      }
      if (!Modifier.isFinal(f.getModifiers())) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f);
      }
      final Object o;
      try {
        o=f.get(null);
      }
 catch (      IllegalArgumentException|IllegalAccessException e) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f);
      }
      if (map.containsKey(o)) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ map.get(o)+ ""String_Node_Str""+ f);
      }
      if (t == RequiredImpl.class || t == RequiredParameter.class) {
        reqUse.add(f);
        reqSet.add(f);
      }
 else {
        optUse.add(f);
      }
      map.put(o,f);
    }
  }
}","public ConfigurationModule(){
  if (getClass().getEnclosingClass() == null) {
    throw new ClassHierarchyException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  for (  Field f : getClass().getEnclosingClass().getDeclaredFields()) {
    Class<?> t=f.getType();
    if (paramTypes.contains(t)) {
      if (!Modifier.isPublic(f.getModifiers())) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f);
      }
      if (!Modifier.isStatic(f.getModifiers())) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f);
      }
      if (!Modifier.isFinal(f.getModifiers())) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f);
      }
      final Object o;
      try {
        o=f.get(null);
      }
 catch (      IllegalArgumentException|IllegalAccessException e) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ f);
      }
      if (map.containsKey(o)) {
        throw new ClassHierarchyException(""String_Node_Str"" + getClass() + ""String_Node_Str""+ map.get(o)+ ""String_Node_Str""+ f);
      }
      if (t == RequiredImpl.class || t == RequiredParameter.class) {
        reqUse.add(f);
        reqSet.add(f);
      }
 else {
        optUse.add(f);
      }
      map.put(o,f);
    }
  }
}"
59794,"private <T>void processUse(Object impl){
  Field f=map.get(impl);
  if (f == null) {
  }
  reqUse.remove(f);
  optUse.remove(f);
}","private final <T>void processUse(Object impl){
  Field f=map.get(impl);
  if (f == null) {
  }
  reqUse.remove(f);
  optUse.remove(f);
}"
59795,"public <T>ConfigurationModule bindNamedParameter(Class<? extends Name<T>> iface,Impl<? extends T> opt){
  processUse(opt);
  freeImpls.put(opt,iface);
  return this;
}","public final <T>ConfigurationModule bindNamedParameter(Class<? extends Name<T>> iface,Impl<? extends T> opt){
  ConfigurationModule c=deepCopy();
  c.processUse(opt);
  c.freeImpls.put(opt,iface);
  return c;
}"
59796,"public <T>ConfigurationModule bind(Class<?> iface,Impl<?> opt){
  processUse(opt);
  freeImpls.put(opt,iface);
  return this;
}","public final <T>ConfigurationModule bind(Class<?> iface,Impl<?> opt){
  ConfigurationModule c=deepCopy();
  c.processUse(opt);
  c.freeImpls.put(opt,iface);
  return c;
}"
59797,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public Configuration build() throws BindException {
  if (!(reqUse.isEmpty() && optUse.isEmpty())) {
    throw new ClassHierarchyException(""String_Node_Str"" + reqUse + ""String_Node_Str""+ optUse);
  }
  if (!reqSet.isEmpty()) {
    throw new BindException(""String_Node_Str"" + reqSet);
  }
  for (  Impl<?> i : setImpls.keySet()) {
    b.bind(freeImpls.get(i),setImpls.get(i));
  }
  for (  Param<?> p : setParams.keySet()) {
    b.bindNamedParameter((Class)freeParams.get(p),setParams.get(p));
  }
  return b.build();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public final Configuration build() throws BindException {
  ConfigurationModule c=deepCopy();
  if (!(c.reqUse.isEmpty() && c.optUse.isEmpty())) {
    throw new ClassHierarchyException(""String_Node_Str"" + toString(c.reqUse) + ""String_Node_Str""+ toString(c.optUse));
  }
  if (!c.reqSet.isEmpty()) {
    throw new BindException(""String_Node_Str"" + toString(c.reqSet));
  }
  for (  Impl<?> i : c.setImpls.keySet()) {
    c.b.bind(c.freeImpls.get(i),c.setImpls.get(i));
  }
  for (  Param<?> p : c.setParams.keySet()) {
    c.b.bindNamedParameter((Class)c.freeParams.get(p),c.setParams.get(p));
  }
  return c.b.build();
}"
59798,"public <T>ConfigurationModule bindSingletonImplementation(Class<T> iface,Impl<? extends T> opt) throws BindException {
  processUse(opt);
  try {
    b.bindSingleton(iface);
    freeImpls.put(opt,iface);
  }
 catch (  BindException e) {
    throw new RuntimeException(e);
  }
  return this;
}","public final <T>ConfigurationModule bindSingletonImplementation(Class<T> iface,Impl<? extends T> opt) throws BindException {
  ConfigurationModule c=deepCopy();
  c.processUse(opt);
  try {
    c.b.bindSingleton(iface);
    c.freeImpls.put(opt,iface);
  }
 catch (  BindException e) {
    throw new RuntimeException(e);
  }
  return c;
}"
59799,"public <T>ConfigurationModule bindSingleton(Class<T> iface){
  try {
    b.bindSingleton(iface);
  }
 catch (  BindException e) {
    throw new RuntimeException(e);
  }
  return this;
}","public final <T>ConfigurationModule bindSingleton(Class<T> iface){
  ConfigurationModule c=deepCopy();
  try {
    c.b.bindSingleton(iface);
  }
 catch (  BindException e) {
    throw new RuntimeException(e);
  }
  return c;
}"
59800,"public <T>ConfigurationModule bindConstructor(Class<T> c,Impl<? extends ExternalConstructor<? extends T>> v){
  processUse(v);
  freeImpls.put(v,c);
  return this;
}","public final <T>ConfigurationModule bindConstructor(Class<T> cons,Impl<? extends ExternalConstructor<? extends T>> v){
  ConfigurationModule c=deepCopy();
  c.processUse(v);
  c.freeImpls.put(v,cons);
  return c;
}"
59801,"private <T>void processSet(Object impl){
  Field f=map.get(impl);
  if (f == null) {
  }
  reqSet.remove(f);
}","private final <T>void processSet(Object impl){
  Field f=map.get(impl);
  if (f == null) {
  }
  reqSet.remove(f);
}"
59802,"/** 
 * Get child elements of the injection plan tree. By default, returns an empty list.
 * @return An empty list.
 */
@Override public Collection<InjectionPlan<?>> getChildren(){
  return Collections.EMPTY_LIST;
}","/** 
 * Get child elements of the injection plan tree. By default, returns an empty list.
 * @return An empty list.
 */
@SuppressWarnings(""String_Node_Str"") @Override public Collection<InjectionPlan<?>> getChildren(){
  return Collections.EMPTY_LIST;
}"
59803,"/** 
 * Get child elements of the injection plan tree.
 * @return A list with single prerequisite injection plan.
 */
@Override public Collection<InjectionPlan<?>> getChildren(){
  return (Collection)Collections.singletonList(this.preReq);
}","/** 
 * Get child elements of the injection plan tree.
 * @return A list with single prerequisite injection plan.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Collection<InjectionPlan<?>> getChildren(){
  return (Collection)Collections.singletonList(this.preReq);
}"
59804,"@Override protected String toInfeasibleInjectString(){
  if (alternatives.length == 1) {
    return alternatives[0].toInfeasibleInjectString();
  }
 else   if (alternatives.length == 0) {
    return ""String_Node_Str"" + this.getNode();
  }
 else   if (selectedIndex != -1) {
    return alternatives[selectedIndex].toInfeasibleInjectString();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + toPrettyString());
  }
}","@Override protected String toInfeasibleInjectString(){
  if (alternatives.length == 1) {
    return alternatives[0].toInfeasibleInjectString();
  }
 else   if (alternatives.length == 0) {
    return ""String_Node_Str"" + this.getNode().getFullName();
  }
 else   if (selectedIndex != -1) {
    return alternatives[selectedIndex].toInfeasibleInjectString();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + toPrettyString());
  }
}"
59805,"/** 
 * Get child elements of the injection plan tree. TODO: use ArrayList internally (and maybe for input, too).
 * @return A list of injection sub-plans.
 */
@Override public Collection<InjectionPlan<?>> getChildren(){
  return (Collection)Collections.unmodifiableList(Arrays.asList(this.alternatives));
}","/** 
 * Get child elements of the injection plan tree. TODO: use ArrayList internally (and maybe for input, too).
 * @return A list of injection sub-plans.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Collection<InjectionPlan<?>> getChildren(){
  return (Collection)Collections.unmodifiableList(Arrays.asList(this.alternatives));
}"
59806,"/** 
 * Process current configuration node of NamedParameterNode type.
 * @param node Current configuration node.
 * @return true to proceed with the next node, false to cancel.
 */
public abstract boolean visit(NamedParameterNode node);","/** 
 * Process current configuration node of NamedParameterNode type.
 * @param node Current configuration node.
 * @return true to proceed with the next node, false to cancel.
 */
public abstract boolean visit(NamedParameterNode<?> node);"
59807,"public static <T>NamedParameterNode<T> createNamedParameterNode(Node parent,Class<? extends Name<T>> clazz,Class<T> argClass) throws ClassHierarchyException {
  final String simpleName=ReflectionUtilities.getSimpleName(clazz);
  final String fullName=ReflectionUtilities.getFullName(clazz);
  final String fullArgName=ReflectionUtilities.getFullName(argClass);
  final String simpleArgName=ReflectionUtilities.getSimpleName(argClass);
  final String defaultInstanceAsString;
  NamedParameter namedParameter=clazz.getAnnotation(NamedParameter.class);
  if (namedParameter == null || namedParameter.default_value().isEmpty()) {
    if (namedParameter.default_class() != Void.class) {
      defaultInstanceAsString=ReflectionUtilities.getFullName(namedParameter.default_class());
      boolean isSubclass=false;
      for (      Class<?> c : ReflectionUtilities.classAndAncestors(namedParameter.default_class())) {
        if (c.equals(argClass)) {
          isSubclass=true;
          break;
        }
      }
      if (!isSubclass) {
        throw new ClassHierarchyException(clazz + ""String_Node_Str"" + defaultInstanceAsString+ ""String_Node_Str""+ argClass);
      }
    }
 else {
      defaultInstanceAsString=null;
    }
  }
 else {
    if (namedParameter.default_class() != Void.class) {
      throw new ClassHierarchyException(""String_Node_Str"" + fullName + ""String_Node_Str"");
    }
    defaultInstanceAsString=namedParameter.default_value();
  }
  final String documentation;
  final String shortName;
  if (namedParameter != null) {
    documentation=namedParameter.doc();
    shortName=namedParameter.short_name() == null || namedParameter.short_name().isEmpty() ? null : namedParameter.short_name();
  }
 else {
    documentation=""String_Node_Str"";
    shortName=null;
  }
  return new NamedParameterNodeImpl<>(parent,simpleName,fullName,fullArgName,simpleArgName,documentation,shortName,defaultInstanceAsString);
}","public static <T>NamedParameterNode<T> createNamedParameterNode(Node parent,Class<? extends Name<T>> clazz,Class<T> argClass) throws ClassHierarchyException {
  final String simpleName=ReflectionUtilities.getSimpleName(clazz);
  final String fullName=ReflectionUtilities.getFullName(clazz);
  final String fullArgName=ReflectionUtilities.getFullName(argClass);
  final String simpleArgName=ReflectionUtilities.getSimpleName(argClass);
  final NamedParameter namedParameter=clazz.getAnnotation(NamedParameter.class);
  if (namedParameter == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final boolean hasStringDefault=!namedParameter.default_value().isEmpty();
  final boolean hasClassDefault=namedParameter.default_class() != Void.class;
  final String defaultInstanceAsString;
  if (hasStringDefault && hasClassDefault) {
    throw new ClassHierarchyException(""String_Node_Str"" + fullName + ""String_Node_Str"");
  }
 else   if (!(hasStringDefault || hasClassDefault)) {
    defaultInstanceAsString=null;
  }
 else   if (namedParameter.default_class() != Void.class) {
    defaultInstanceAsString=ReflectionUtilities.getFullName(namedParameter.default_class());
    boolean isSubclass=false;
    for (    final Class<?> c : ReflectionUtilities.classAndAncestors(namedParameter.default_class())) {
      if (c.equals(argClass)) {
        isSubclass=true;
        break;
      }
    }
    if (!isSubclass) {
      throw new ClassHierarchyException(clazz + ""String_Node_Str"" + defaultInstanceAsString+ ""String_Node_Str""+ argClass);
    }
  }
 else {
    defaultInstanceAsString=namedParameter.default_value();
  }
  final String documentation=namedParameter.doc();
  final String shortName=namedParameter.short_name().isEmpty() ? null : namedParameter.short_name();
  return new NamedParameterNodeImpl<>(parent,simpleName,fullName,fullArgName,simpleArgName,documentation,shortName,defaultInstanceAsString);
}"
59808,"@Override protected String toInfeasibleInjectString(){
  throw new IllegalArgumentException(""String_Node_Str"" + this.toString());
}","@Override protected String toInfeasibleInjectString(){
  return getNode() + ""String_Node_Str"";
}"
59809,"@SuppressWarnings(""String_Node_Str"") @Test public void testBindFromString() throws BindException, InjectionException {
  JavaConfigurationBuilder b=Tang.Factory.getTang().newConfigurationBuilder(IdentifierParser.class);
  b.bindNamedParameter(IdName.class,""String_Node_Str"");
  Configuration c=b.build();
  String s=ConfigurationFile.toConfigurationString(c);
  JavaConfigurationBuilder b2=Tang.Factory.getTang().newConfigurationBuilder(IdentifierParser.class);
  ConfigurationFile.addConfiguration(b2,s);
  Configuration c2=b2.build();
  Assert.assertEquals(""String_Node_Str"",c2.getNamedParameter((NamedParameterNode<?>)c2.getClassHierarchy().getNode(ReflectionUtilities.getFullName(IdName.class))));
  Injector i=Tang.Factory.getTang().newInjector(c2);
  Assert.assertEquals(""String_Node_Str"",i.getNamedInstance(IdName.class).toString());
}","@SuppressWarnings(""String_Node_Str"") @Test public void testBindFromString() throws BindException, InjectionException {
  JavaConfigurationBuilder b=Tang.Factory.getTang().newConfigurationBuilder(IdentifierParser.class);
  b.bindNamedParameter(IdName.class,""String_Node_Str"");
  Configuration c=b.build();
  String s=ConfigurationFile.toConfigurationString(c);
  JavaConfigurationBuilder b2=Tang.Factory.getTang().newConfigurationBuilder(IdentifierParser.class);
  ConfigurationFile.addConfiguration(b2,s);
  Configuration c2=b2.build();
  Assert.assertEquals(""String_Node_Str"",c2.getNamedParameter((NamedParameterNode<?>)c2.getClassHierarchy().getNode(ReflectionUtilities.getFullName(IdName.class))));
  Injector i=Tang.Factory.getTang().newInjector(c2);
  Assert.assertEquals(""String_Node_Str"",i.getNamedInstance(IdName.class).toString());
  Assert.assertTrue(i.getNamedInstance(IdName.class) instanceof BIdentifier);
}"
59810,"/** 
 * @param aArgs command line arguments.
 * @throws BindException configuration error.
 * @throws InjectionException configuration error.
 * @throws IOException cannot process command line parameters.
 */
public static void main(final String[] aArgs) throws BindException, InjectionException, IOException {
  final Tang tang=Tang.Factory.getTang();
  final ConfigurationBuilder confBuilder=tang.newConfigurationBuilder();
  new CommandLine(confBuilder).processCommandLine(aArgs);
  final Configuration config=confBuilder.build();
  final Injector injector=tang.newInjector(config);
  final PrintTypeHierarchy myself=injector.getInstance(PrintTypeHierarchy.class);
  final GraphVisitorGraphviz visitor=new GraphVisitorGraphviz(config);
  Walk.preorder(visitor,visitor,config);
  System.out.println(visitor);
  System.out.println(myself);
  System.out.println(ConfigurationFile.toConfigurationString(config));
}","/** 
 * @param aArgs command line arguments.
 * @throws BindException configuration error.
 * @throws InjectionException configuration error.
 * @throws IOException cannot process command line parameters.
 */
public static void main(final String[] aArgs) throws BindException, InjectionException, IOException {
  final Tang tang=Tang.Factory.getTang();
  final ConfigurationBuilder confBuilder=tang.newConfigurationBuilder();
  new CommandLine(confBuilder).processCommandLine(aArgs);
  final Configuration config=confBuilder.build();
  final Injector injector=tang.newInjector(config);
  final PrintTypeHierarchy myself=injector.getInstance(PrintTypeHierarchy.class);
  final GraphVisitorGraphviz visitor=new GraphVisitorGraphviz(config);
  Walk.preorder(visitor,visitor,config);
  System.out.println(visitor);
}"
59811,"@SuppressWarnings(""String_Node_Str"") <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan.isAmbiguous()) {
    throw new IllegalArgumentException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    if (singletonInstances.containsKey(constructor.getNode())) {
      if (constructor.getNode().isUnit()) {
        return (T)singletonInstances.get(constructor.getNode());
      }
 else {
        throw new SingletonInjectionException(""String_Node_Str"" + constructor.getNode());
      }
    }
    Object[] args=new Object[constructor.getArgs().length];
    for (int i=0; i < constructor.getArgs().length; i++) {
      args[i]=injectFromPlan(constructor.getArgs()[i]);
    }
    if (!singletonInstances.containsKey(constructor.getNode())) {
      try {
        T ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
        if (c.isSingleton(constructor.getNode()) || constructor.getNode().isUnit()) {
          if (!singletonInstances.containsKey(constructor.getNode())) {
            singletonInstances.put(constructor.getNode(),ret);
          }
        }
        return ret;
      }
 catch (      ReflectiveOperationException e) {
        throw new InjectionException(""String_Node_Str"",e);
      }
    }
 else {
      return (T)singletonInstances.get(constructor.getNode());
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    if (ambiguous.isInjectable()) {
      Node ambigNode=ambiguous.getNode();
      boolean ambigIsUnit=ambigNode instanceof ClassNode && ((ClassNode<?>)ambigNode).isUnit();
      if (singletonInstances.containsKey(ambiguous.getNode())) {
        if (ambigIsUnit) {
          return (T)singletonInstances.get(ambiguous.getNode());
        }
 else {
          throw new SingletonInjectionException(""String_Node_Str"" + ambiguous.getNode());
        }
      }
      Object ret=injectFromPlan(ambiguous.getDelegatedPlan());
      if (c.isSingleton(ambiguous.getNode()) || ambigIsUnit) {
        singletonInstances.put((ClassNode<?>)ambiguous.getNode(),ret);
      }
      if (ret instanceof ExternalConstructor) {
        return ((ExternalConstructor<T>)ret).newInstance();
      }
 else {
        return (T)ret;
      }
    }
 else {
      if (ambiguous.getNumAlternatives() == 0) {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
 else {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}","/** 
 * This gets really nasty now that constructors can invoke operations on us. The upshot is that we should check to see if singletons have been registered by callees after each recursive invocation of injectFromPlan or constructor invocations. The error handling currently bails if the thing we just instantiated should be discarded. This could happen if (for instance), a constructor did a bindVolatileInstance of its own class to an instance, or somehow triggered an injection of itself with a different plan (an injection of itself with the same plan would lead to an infinite recursion, so it's not really our problem).
 * @param plan
 * @return
 * @throws InjectionException
 */
@SuppressWarnings(""String_Node_Str"") <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan.isAmbiguous()) {
    throw new IllegalArgumentException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    if (singletonInstances.containsKey(constructor.getNode())) {
      return (T)singletonInstances.get(constructor.getNode());
    }
    Object[] args=new Object[constructor.getArgs().length];
    for (int i=0; i < constructor.getArgs().length; i++) {
      args[i]=injectFromPlan(constructor.getArgs()[i]);
    }
    if (!singletonInstances.containsKey(constructor.getNode())) {
      try {
        T ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
        if (c.isSingleton(constructor.getNode()) || constructor.getNode().isUnit()) {
          singletonInstances.put(constructor.getNode(),ret);
        }
        return ret;
      }
 catch (      ReflectiveOperationException e) {
        throw new InjectionException(""String_Node_Str"",e);
      }
    }
 else {
      return (T)singletonInstances.get(constructor.getNode());
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    if (ambiguous.isInjectable()) {
      Node ambigNode=ambiguous.getNode();
      boolean ambigIsUnit=ambigNode instanceof ClassNode && ((ClassNode<?>)ambigNode).isUnit();
      if (singletonInstances.containsKey(ambiguous.getNode())) {
        return (T)singletonInstances.get(ambiguous.getNode());
      }
      Object ret=injectFromPlan(ambiguous.getDelegatedPlan());
      if (c.isSingleton(ambiguous.getNode()) || ambigIsUnit) {
        singletonInstances.put((ClassNode<?>)ambiguous.getNode(),ret);
      }
      if (ret instanceof ExternalConstructor) {
        return ((ExternalConstructor<T>)ret).newInstance();
      }
 else {
        return (T)ret;
      }
    }
 else {
      if (ambiguous.getNumAlternatives() == 0) {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
 else {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}"
59812,"private static void newline(StringBuffer pretty,int indent){
  pretty.append('\n');
  for (int j=0; j < indent * 3; j++) {
    pretty.append(' ');
  }
}","private static void newline(StringBuffer pretty,int indent){
  pretty.append('\n');
  for (int j=0; j < indent * 2; j++) {
    pretty.append(' ');
  }
}"
59813,"public String toPrettyString(){
  String ugly=node.getFullName() + ""String_Node_Str"" + toString();
  StringBuffer pretty=new StringBuffer();
  int currentIndent=0;
  for (int i=0; i < ugly.length(); i++) {
    char c=ugly.charAt(i);
    if (c == '[') {
      currentIndent++;
      pretty.append(c);
      newline(pretty,currentIndent);
    }
 else     if (c == ']') {
      currentIndent--;
      pretty.append(c);
    }
 else     if (c == '|') {
      newline(pretty,currentIndent);
      pretty.append(c);
    }
 else {
      pretty.append(c);
    }
  }
  return pretty.toString();
}","public String toPrettyString(){
  String ugly=node.getFullName() + ""String_Node_Str"" + toString();
  StringBuffer pretty=new StringBuffer();
  int currentIndent=1;
  for (int i=0; i < ugly.length(); i++) {
    char c=ugly.charAt(i);
    if (c == '(') {
      if (ugly.charAt(i + 1) == ')') {
        pretty.append(""String_Node_Str"");
        i++;
      }
 else {
        newline(pretty,currentIndent);
        currentIndent++;
        pretty.append(c);
        pretty.append(' ');
      }
    }
 else     if (c == '[') {
      if (ugly.charAt(i + 1) == ']') {
        pretty.append(""String_Node_Str"");
        i++;
      }
 else {
        newline(pretty,currentIndent);
        currentIndent++;
        pretty.append(c);
        pretty.append(' ');
      }
    }
 else     if (c == ')' || c == ']') {
      currentIndent--;
      newline(pretty,currentIndent);
      pretty.append(c);
    }
 else     if (c == '|') {
      newline(pretty,currentIndent);
      pretty.append(c);
    }
 else     if (c == ',') {
      currentIndent--;
      newline(pretty,currentIndent);
      pretty.append(c);
      currentIndent++;
    }
 else {
      pretty.append(c);
    }
  }
  return pretty.toString();
}"
59814,"@Override public String toString(){
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  if (this.alternatives.length == 0) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(alternatives[0]);
  }
  for (int i=1; i < alternatives.length; i++) {
    sb.append(""String_Node_Str"" + alternatives[i]);
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","@Override public String toString(){
  if (alternatives.length == 1) {
    return getNode().getName() + ""String_Node_Str"" + alternatives[0];
  }
 else   if (alternatives.length == 0) {
    return getNode().getName() + ""String_Node_Str"";
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  sb.append(getNode().getName() + ""String_Node_Str"" + alternatives[0]);
  for (int i=1; i < alternatives.length; i++) {
    sb.append(""String_Node_Str"" + alternatives[i]);
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
59815,"@SuppressWarnings(""String_Node_Str"") <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan.isAmbiguous()) {
    throw new IllegalArgumentException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    Constructor<T> constructor=(Constructor<T>)plan;
    if (singletonInstances.containsKey(constructor.getNode())) {
      if (constructor.getNode().isUnit()) {
        return (T)singletonInstances.get(constructor.getNode());
      }
 else {
        throw new SingletonInjectionException(""String_Node_Str"" + constructor.getNode());
      }
    }
    Object[] args=new Object[constructor.getArgs().length];
    for (int i=0; i < constructor.getArgs().length; i++) {
      args[i]=injectFromPlan(constructor.getArgs()[i]);
    }
    if (!singletonInstances.containsKey(constructor.getNode())) {
      try {
        T ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
        if (c.isSingleton(constructor.getNode()) || constructor.getNode().isUnit()) {
          singletonInstances.put(constructor.getNode(),ret);
        }
        return ret;
      }
 catch (      ReflectiveOperationException e) {
        throw new InjectionException(""String_Node_Str"",e);
      }
    }
 else {
      return (T)singletonInstances.get(constructor.getNode());
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    if (ambiguous.isInjectable()) {
      Node ambigNode=ambiguous.getNode();
      boolean ambigIsUnit=ambigNode instanceof ClassNode && ((ClassNode<?>)ambigNode).isUnit();
      if (singletonInstances.containsKey(ambiguous.getNode())) {
        if (ambigIsUnit) {
          return (T)singletonInstances.get(ambiguous.getNode());
        }
 else {
          throw new SingletonInjectionException(""String_Node_Str"" + ambiguous.getNode());
        }
      }
      Object ret=injectFromPlan(ambiguous.getDelegatedPlan());
      if (c.isSingleton(ambiguous.getNode()) || ambigIsUnit) {
        singletonInstances.put((ClassNode<?>)ambiguous.getNode(),ret);
      }
      if (ret instanceof ExternalConstructor) {
        return ((ExternalConstructor<T>)ret).newInstance();
      }
 else {
        return (T)ret;
      }
    }
 else {
      if (ambiguous.getNumAlternatives() == 0) {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
 else {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}","@SuppressWarnings(""String_Node_Str"") <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan.isAmbiguous()) {
    throw new IllegalArgumentException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    if (singletonInstances.containsKey(constructor.getNode())) {
      if (constructor.getNode().isUnit()) {
        return (T)singletonInstances.get(constructor.getNode());
      }
 else {
        throw new SingletonInjectionException(""String_Node_Str"" + constructor.getNode());
      }
    }
    Object[] args=new Object[constructor.getArgs().length];
    for (int i=0; i < constructor.getArgs().length; i++) {
      args[i]=injectFromPlan(constructor.getArgs()[i]);
    }
    if (!singletonInstances.containsKey(constructor.getNode())) {
      try {
        T ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
        if (c.isSingleton(constructor.getNode()) || constructor.getNode().isUnit()) {
          if (!singletonInstances.containsKey(constructor.getNode())) {
            singletonInstances.put(constructor.getNode(),ret);
          }
        }
        return ret;
      }
 catch (      ReflectiveOperationException e) {
        throw new InjectionException(""String_Node_Str"",e);
      }
    }
 else {
      return (T)singletonInstances.get(constructor.getNode());
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    if (ambiguous.isInjectable()) {
      Node ambigNode=ambiguous.getNode();
      boolean ambigIsUnit=ambigNode instanceof ClassNode && ((ClassNode<?>)ambigNode).isUnit();
      if (singletonInstances.containsKey(ambiguous.getNode())) {
        if (ambigIsUnit) {
          return (T)singletonInstances.get(ambiguous.getNode());
        }
 else {
          throw new SingletonInjectionException(""String_Node_Str"" + ambiguous.getNode());
        }
      }
      Object ret=injectFromPlan(ambiguous.getDelegatedPlan());
      if (c.isSingleton(ambiguous.getNode()) || ambigIsUnit) {
        singletonInstances.put((ClassNode<?>)ambiguous.getNode(),ret);
      }
      if (ret instanceof ExternalConstructor) {
        return ((ExternalConstructor<T>)ret).newInstance();
      }
 else {
        return (T)ret;
      }
    }
 else {
      if (ambiguous.getNumAlternatives() == 0) {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
 else {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}"
59816,"/** 
 * This gets really nasty now that constructors can invoke operations on us. The upshot is that we should check to see if singletons have been registered by callees after each recursive invocation of injectFromPlan or constructor invocations. The error handling currently bails if the thing we just instantiated should be discarded. This could happen if (for instance), a constructor did a bindVolatileInstance of its own class to an instance, or somehow triggered an injection of itself with a different plan (an injection of itself with the same plan would lead to an infinite recursion, so it's not really our problem).
 * @param plan
 * @return
 * @throws InjectionException
 */
@SuppressWarnings(""String_Node_Str"") <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan.isAmbiguous()) {
    throw new IllegalArgumentException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    if (singletonInstances.containsKey(constructor.getNode())) {
      return (T)singletonInstances.get(constructor.getNode());
    }
    Object[] args=new Object[constructor.getArgs().length];
    for (int i=0; i < constructor.getArgs().length; i++) {
      args[i]=injectFromPlan(constructor.getArgs()[i]);
    }
    if (!singletonInstances.containsKey(constructor.getNode())) {
      try {
        T ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
        if (c.isSingleton(constructor.getNode()) || constructor.getNode().isUnit()) {
          if (!singletonInstances.containsKey(constructor.getNode())) {
            singletonInstances.put(constructor.getNode(),ret);
          }
 else {
            if (singletonInstances.get(constructor.getNode()) != ret) {
              throw new InjectionException(""String_Node_Str"" + constructor + ""String_Node_Str""+ constructor.getNode().getName()+ ""String_Node_Str"");
            }
          }
        }
        return ret;
      }
 catch (      ReflectiveOperationException e) {
        throw new InjectionException(""String_Node_Str"",e);
      }
    }
 else {
      return (T)singletonInstances.get(constructor.getNode());
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    if (ambiguous.isInjectable()) {
      Node ambigNode=ambiguous.getNode();
      boolean ambigIsUnit=ambigNode instanceof ClassNode && ((ClassNode<?>)ambigNode).isUnit();
      if (singletonInstances.containsKey(ambiguous.getNode())) {
        return (T)singletonInstances.get(ambiguous.getNode());
      }
      Object ret=injectFromPlan(ambiguous.getDelegatedPlan());
      if (c.isSingleton(ambiguous.getNode()) || ambigIsUnit) {
        singletonInstances.put((ClassNode<?>)ambiguous.getNode(),ret);
      }
      if (ret instanceof ExternalConstructor) {
        return ((ExternalConstructor<T>)ret).newInstance();
      }
 else {
        return (T)ret;
      }
    }
 else {
      if (ambiguous.getNumAlternatives() == 0) {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
 else {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}","/** 
 * This gets really nasty now that constructors can invoke operations on us. The upshot is that we should check to see if singletons have been registered by callees after each recursive invocation of injectFromPlan or constructor invocations. The error handling currently bails if the thing we just instantiated should be discarded. This could happen if (for instance), a constructor did a bindVolatileInstance of its own class to an instance, or somehow triggered an injection of itself with a different plan (an injection of itself with the same plan would lead to an infinite recursion, so it's not really our problem).
 * @param plan
 * @return
 * @throws InjectionException
 */
@SuppressWarnings(""String_Node_Str"") <T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan.isAmbiguous()) {
    throw new IllegalArgumentException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan instanceof JavaInstance) {
    return ((JavaInstance<T>)plan).instance;
  }
 else   if (plan instanceof Constructor) {
    final Constructor<T> constructor=(Constructor<T>)plan;
    if (singletonInstances.containsKey(constructor.getNode())) {
      return (T)singletonInstances.get(constructor.getNode());
    }
    Object[] args=new Object[constructor.getArgs().length];
    for (int i=0; i < constructor.getArgs().length; i++) {
      args[i]=injectFromPlan(constructor.getArgs()[i]);
    }
    if (!singletonInstances.containsKey(constructor.getNode())) {
      try {
        T ret=getConstructor((ConstructorDef<T>)constructor.getConstructorDef()).newInstance(args);
        if (ret instanceof ExternalConstructor) {
          ret=((ExternalConstructor<T>)ret).newInstance();
        }
        if (c.isSingleton(constructor.getNode()) || constructor.getNode().isUnit()) {
          if (!singletonInstances.containsKey(constructor.getNode())) {
            singletonInstances.put(constructor.getNode(),ret);
          }
 else {
            if (singletonInstances.get(constructor.getNode()) != ret) {
              throw new InjectionException(""String_Node_Str"" + constructor + ""String_Node_Str""+ constructor.getNode().getName()+ ""String_Node_Str"");
            }
          }
        }
        return ret;
      }
 catch (      ReflectiveOperationException e) {
        throw new InjectionException(""String_Node_Str"",e);
      }
    }
 else {
      return (T)singletonInstances.get(constructor.getNode());
    }
  }
 else   if (plan instanceof Subplan) {
    Subplan<T> ambiguous=(Subplan<T>)plan;
    if (ambiguous.isInjectable()) {
      Node ambigNode=ambiguous.getNode();
      boolean ambigIsUnit=ambigNode instanceof ClassNode && ((ClassNode<?>)ambigNode).isUnit();
      if (singletonInstances.containsKey(ambiguous.getNode())) {
        return (T)singletonInstances.get(ambiguous.getNode());
      }
      Object ret=injectFromPlan(ambiguous.getDelegatedPlan());
      if (c.isSingleton(ambiguous.getNode()) || ambigIsUnit) {
        singletonInstances.put((ClassNode<?>)ambiguous.getNode(),ret);
      }
      if (ret instanceof ExternalConstructor) {
        return ((ExternalConstructor<T>)ret).newInstance();
      }
 else {
        return (T)ret;
      }
    }
 else {
      if (ambiguous.getNumAlternatives() == 0) {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
 else {
        throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}"
59817,"NamedParameterNode(Node parent,Class<? extends Name<T>> clazz,Class<T> argClass) throws BindException {
  super(parent,clazz);
  this.clazz=clazz;
  this.namedParameter=clazz.getAnnotation(NamedParameter.class);
  this.argClass=argClass;
  if (this.namedParameter == null || namedParameter.default_value().length() == 0) {
    this.defaultInstance=null;
  }
 else {
    this.defaultInstance=ReflectionUtilities.parse(this.argClass,namedParameter.default_value());
  }
}","NamedParameterNode(Node parent,Class<? extends Name<T>> clazz,Class<T> argClass) throws BindException {
  super(parent,clazz);
  this.clazz=clazz;
  this.namedParameter=clazz.getAnnotation(NamedParameter.class);
  this.argClass=argClass;
  if (this.namedParameter == null || namedParameter.default_value().length() == 0) {
    this.defaultInstance=null;
  }
 else {
    try {
      this.defaultInstance=ReflectionUtilities.parse(this.argClass,namedParameter.default_value());
    }
 catch (    UnsupportedOperationException e) {
      throw new BindException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ namedParameter.default_value()+ ""String_Node_Str"",e);
    }
  }
}"
59818,"public Constructor(TypeHierarchy.ConstructorDef<T> constructor,InjectionPlan<?>[] args){
  this.constructor=constructor;
  this.args=args;
  int numAlternatives=1;
  boolean isAmbiguous=false;
  boolean isInjectable=true;
  for (  InjectionPlan<?> a : args) {
    numAlternatives*=a.getNumAlternatives();
    if (a.isAmbiguous())     isAmbiguous=true;
    if (!a.isInjectable())     isInjectable=false;
  }
  this.numAlternatives=numAlternatives;
  this.isAmbiguous=isAmbiguous;
  this.isInjectable=isInjectable;
}","public Constructor(ClassNode<T> cn,TypeHierarchy.ConstructorDef<T> constructor,InjectionPlan<?>[] args){
  this.constructor=constructor;
  this.args=args;
  int numAlternatives=1;
  boolean isAmbiguous=false;
  boolean isInjectable=true;
  for (  InjectionPlan<?> a : args) {
    numAlternatives*=a.getNumAlternatives();
    if (a.isAmbiguous())     isAmbiguous=true;
    if (!a.isInjectable())     isInjectable=false;
  }
  this.numAlternatives=numAlternatives;
  this.isAmbiguous=isAmbiguous;
  this.isInjectable=isInjectable;
  this.cn=cn;
}"
59819,"private void populateSingletons() throws InjectionException {
  if (!populated) {
    populated=true;
    for (    ClassNode<?> cn : tc.singletons) {
      if (!tc.singletonInstances.containsKey(cn)) {
        Object o=getInstance(cn.getClazz());
        tc.singletonInstances.put(cn,o);
      }
    }
  }
}","private void populateSingletons() throws InjectionException {
  if (!populated) {
    populated=true;
    boolean stillHope=true;
    boolean allSucceeded=false;
    while (!allSucceeded) {
      boolean oneSucceeded=false;
      allSucceeded=true;
      for (      ClassNode<?> cn : tc.singletons) {
        if (!tc.singletonInstances.containsKey(cn)) {
          try {
            getInstance(cn.getClazz());
            System.err.println(""String_Node_Str"" + cn);
            oneSucceeded=true;
          }
 catch (          SingletonInjectionException e) {
            System.err.println(""String_Node_Str"" + cn);
            allSucceeded=false;
            if (!stillHope) {
              throw e;
            }
          }
        }
      }
      if (!oneSucceeded) {
        stillHope=false;
      }
    }
  }
}"
59820,"private void buildInjectionPlan(String name,Map<String,InjectionPlan<?>> memo){
  if (memo.containsKey(name)) {
    if (InjectionPlan.BUILDING == memo.get(name)) {
      throw new IllegalStateException(""String_Node_Str"" + name);
    }
 else {
      return;
    }
  }
  memo.put(name,InjectionPlan.BUILDING);
  Node n;
  try {
    n=tc.namespace.getNode(name);
  }
 catch (  NameResolutionException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + name,e);
  }
  final InjectionPlan<?> ip;
  if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    Object instance=tc.namedParameterInstances.get(n);
    if (instance == null) {
      instance=np.defaultInstance;
    }
    ip=new Instance<Object>(np,instance);
  }
 else   if (n instanceof ClassNode) {
    ClassNode<?> cn=(ClassNode<?>)n;
    if (tc.singletonInstances.containsKey(cn)) {
      ip=new Instance<Object>(cn,tc.singletonInstances.get(cn));
    }
 else     if (tc.boundConstructors.containsKey(cn)) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
 else     if (tc.boundImpls.containsKey(cn) && !tc.boundImpls.get(cn).equals(cn.getClazz())) {
      String implName=tc.boundImpls.get(cn).getName();
      buildInjectionPlan(implName,memo);
      ip=memo.get(implName);
    }
 else {
      List<ClassNode<?>> classNodes=new ArrayList<ClassNode<?>>();
      if (tc.boundImpls.get(cn) == null) {
        for (        ClassNode<?> c : tc.namespace.getKnownImpls(cn)) {
          classNodes.add(c);
        }
      }
      classNodes.add(cn);
      List<InjectionPlan<?>> sub_ips=new ArrayList<InjectionPlan<?>>();
      for (      ClassNode<?> thisCN : classNodes) {
        List<InjectionPlan<?>> constructors=new ArrayList<InjectionPlan<?>>();
        for (        ConstructorDef<?> def : thisCN.injectableConstructors) {
          List<InjectionPlan<?>> args=new ArrayList<InjectionPlan<?>>();
          for (          ConstructorArg arg : def.args) {
            String argName=arg.getName();
            buildInjectionPlan(argName,memo);
            args.add(memo.get(argName));
          }
          @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) InjectionPlan.Constructor constructor=new InjectionPlan.Constructor(def,args.toArray(new InjectionPlan[0]));
          constructors.add(constructor);
        }
        sub_ips.add(wrapInjectionPlans(thisCN.getName(),constructors,false));
      }
      if (classNodes.size() == 1 && classNodes.get(0).getClazz().getName().equals(name)) {
        ip=wrapInjectionPlans(name,sub_ips,false);
      }
 else {
        ip=wrapInjectionPlans(name,sub_ips,true);
      }
    }
  }
 else   if (n instanceof PackageNode) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (n instanceof NamespaceNode) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + n);
  }
  memo.put(name,ip);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void buildInjectionPlan(String name,Map<String,InjectionPlan<?>> memo){
  if (memo.containsKey(name)) {
    if (InjectionPlan.BUILDING == memo.get(name)) {
      throw new IllegalStateException(""String_Node_Str"" + name);
    }
 else {
      return;
    }
  }
  memo.put(name,InjectionPlan.BUILDING);
  Node n;
  try {
    n=tc.namespace.getNode(name);
  }
 catch (  NameResolutionException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + name,e);
  }
  final InjectionPlan<?> ip;
  if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    Object instance=tc.namedParameterInstances.get(n);
    if (instance == null) {
      instance=np.defaultInstance;
    }
    ip=new Instance<Object>(np,instance);
  }
 else   if (n instanceof ClassNode) {
    ClassNode<?> cn=(ClassNode<?>)n;
    if (tc.singletonInstances.containsKey(cn)) {
      ip=new Instance<Object>(cn,tc.singletonInstances.get(cn));
    }
 else     if (tc.boundConstructors.containsKey(cn)) {
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
 else     if (tc.boundImpls.containsKey(cn) && !tc.boundImpls.get(cn).equals(cn.getClazz())) {
      String implName=tc.boundImpls.get(cn).getName();
      buildInjectionPlan(implName,memo);
      ip=new InjectionPlan.DelegatedImpl(cn,memo.get(implName));
      memo.put(cn.getClazz().getName(),ip);
    }
 else {
      List<ClassNode<?>> classNodes=new ArrayList<ClassNode<?>>();
      if (tc.boundImpls.get(cn) == null) {
        for (        ClassNode<?> c : tc.namespace.getKnownImpls(cn)) {
          classNodes.add(c);
        }
      }
      classNodes.add(cn);
      List<InjectionPlan<?>> sub_ips=new ArrayList<InjectionPlan<?>>();
      for (      ClassNode<?> thisCN : classNodes) {
        List<InjectionPlan<?>> constructors=new ArrayList<InjectionPlan<?>>();
        for (        ConstructorDef<?> def : thisCN.injectableConstructors) {
          List<InjectionPlan<?>> args=new ArrayList<InjectionPlan<?>>();
          for (          ConstructorArg arg : def.args) {
            String argName=arg.getName();
            buildInjectionPlan(argName,memo);
            args.add(memo.get(argName));
          }
          InjectionPlan.Constructor constructor=new InjectionPlan.Constructor(thisCN,def,args.toArray(new InjectionPlan[0]));
          constructors.add(constructor);
        }
        sub_ips.add(wrapInjectionPlans(thisCN.getName(),constructors,false));
      }
      if (classNodes.size() == 1 && classNodes.get(0).getClazz().getName().equals(name)) {
        ip=wrapInjectionPlans(name,sub_ips,false);
      }
 else {
        ip=wrapInjectionPlans(name,sub_ips,true);
      }
    }
  }
 else   if (n instanceof PackageNode) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (n instanceof NamespaceNode) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + n);
  }
  memo.put(name,ip);
}"
59821,"<T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan.isAmbiguous()) {
    throw new IllegalArgumentException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan instanceof InjectionPlan.Instance) {
    return ((InjectionPlan.Instance<T>)plan).instance;
  }
 else   if (plan instanceof InjectionPlan.Constructor) {
    InjectionPlan.Constructor<T> constructor=(InjectionPlan.Constructor<T>)plan;
    Object[] args=new Object[constructor.args.length];
    for (int i=0; i < constructor.args.length; i++) {
      args[i]=injectFromPlan(constructor.args[i]);
    }
    try {
      return constructor.constructor.constructor.newInstance(args);
    }
 catch (    ReflectiveOperationException e) {
      throw new InjectionException(""String_Node_Str"",e);
    }
  }
 else   if (plan instanceof AmbiguousInjectionPlan) {
    AmbiguousInjectionPlan<T> ambiguous=(AmbiguousInjectionPlan<T>)plan;
    for (    InjectionPlan<? extends T> p : ambiguous.alternatives) {
      if (p.isInjectable() && !p.isAmbiguous()) {
        return injectFromPlan(p);
      }
    }
    throw new IllegalStateException(""String_Node_Str"");
  }
 else   if (plan instanceof InfeasibleInjectionPlan) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}","<T>T injectFromPlan(InjectionPlan<T> plan) throws InjectionException {
  if (!plan.isFeasible()) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan.isAmbiguous()) {
    throw new IllegalArgumentException(""String_Node_Str"" + plan.toPrettyString());
  }
  if (plan instanceof InjectionPlan.Instance) {
    return ((InjectionPlan.Instance<T>)plan).instance;
  }
 else   if (plan instanceof InjectionPlan.DelegatedImpl) {
    InjectionPlan.DelegatedImpl<T> delegated=(DelegatedImpl<T>)plan;
    if (tc.singletonInstances.containsKey(delegated.getNode())) {
      throw new SingletonInjectionException(""String_Node_Str"" + delegated.getNode());
    }
    T ret=injectFromPlan(delegated.impl);
    if (tc.singletons.contains(delegated.getNode())) {
      tc.singletonInstances.put(delegated.getNode(),ret);
    }
    return ret;
  }
 else   if (plan instanceof InjectionPlan.Constructor) {
    InjectionPlan.Constructor<T> constructor=(InjectionPlan.Constructor<T>)plan;
    if (tc.singletonInstances.containsKey(constructor.getNode())) {
      throw new SingletonInjectionException(""String_Node_Str"" + constructor.getNode());
    }
    Object[] args=new Object[constructor.args.length];
    for (int i=0; i < constructor.args.length; i++) {
      args[i]=injectFromPlan(constructor.args[i]);
    }
    try {
      T ret=constructor.constructor.constructor.newInstance(args);
      if (tc.singletons.contains(constructor.getNode())) {
        tc.singletonInstances.put(constructor.getNode(),ret);
      }
      System.err.println(""String_Node_Str"" + constructor.getNode());
      return ret;
    }
 catch (    ReflectiveOperationException e) {
      throw new InjectionException(""String_Node_Str"",e);
    }
  }
 else   if (plan instanceof AmbiguousInjectionPlan) {
    AmbiguousInjectionPlan<T> ambiguous=(AmbiguousInjectionPlan<T>)plan;
    for (    InjectionPlan<? extends T> p : ambiguous.alternatives) {
      if (p.isInjectable() && !p.isAmbiguous()) {
        return injectFromPlan(p);
      }
    }
    throw new IllegalStateException(""String_Node_Str"");
  }
 else   if (plan instanceof InfeasibleInjectionPlan) {
    throw new InjectionException(""String_Node_Str"" + plan.toPrettyString());
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + plan);
  }
}"
59822,"/** 
 * Force Tang to treat the specified constructor as though it had an @Inject annotation.
 * @param c The class the constructor instantiates.
 * @param args The arguments taken by the constructor, in declaration order.
 */
public <T>void registerLegacyConstructor(Class<?> c,Class<?>... args) throws BindException ;","/** 
 * Force Tang to treat the specified constructor as though it had an @Inject annotation.
 * @param c The class the constructor instantiates.
 * @param args The arguments taken by the constructor, in declaration order.
 */
public <T>void registerLegacyConstructor(Class<T> c,Class<?>... args) throws BindException ;"
59823,"public void processConfigFile(PropertiesConfiguration confFile) throws IOException, BindException {
  Iterator<String> it=confFile.getKeys();
  Map<String,String> shortNames=new HashMap<String,String>();
  while (it.hasNext()) {
    String key=it.next();
    String longName=shortNames.get(key);
    String[] values=confFile.getStringArray(key);
    if (longName != null) {
      key=longName;
    }
    for (    String value : values) {
      boolean isSingleton=false;
      if (value.equals(ConfigurationImpl.SINGLETON)) {
        isSingleton=true;
      }
      if (value.equals(ConfigurationImpl.REGISTERED)) {
        try {
          this.conf.namespace.register(conf.classForName(key));
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + key + ""String_Node_Str"",e);
        }
      }
 else       if (key.equals(ConfigurationImpl.IMPORT)) {
        if (isSingleton) {
          throw new IllegalArgumentException(""String_Node_Str"" + ConfigurationImpl.IMPORT + ""String_Node_Str""+ ConfigurationImpl.SINGLETON+ ""String_Node_Str"");
        }
        try {
          this.conf.namespace.register(conf.classForName(value));
          String[] tok=value.split(ReflectionUtilities.regexp);
          try {
            this.conf.namespace.getNode(tok[tok.length - 1]);
            throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1]);
          }
 catch (          NameResolutionException e) {
            String oldValue=shortNames.put(tok[tok.length - 1],value);
            if (oldValue != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1] + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value);
            }
          }
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + value + ""String_Node_Str"",e);
        }
      }
 else {
        if (isSingleton) {
          final Class<?> c;
          try {
            c=conf.classForName(key);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
          bindSingleton(c);
        }
 else {
          bind(key,value);
        }
      }
    }
  }
}","public void processConfigFile(PropertiesConfiguration confFile) throws IOException, BindException {
  Iterator<String> it=confFile.getKeys();
  Map<String,String> shortNames=new HashMap<String,String>();
  while (it.hasNext()) {
    String key=it.next();
    String longName=shortNames.get(key);
    String[] values=confFile.getStringArray(key);
    if (longName != null) {
      key=longName;
    }
    for (    String value : values) {
      boolean isSingleton=false;
      if (value.equals(ConfigurationImpl.SINGLETON)) {
        isSingleton=true;
      }
      if (value.equals(ConfigurationImpl.REGISTERED)) {
        try {
          this.conf.namespace.register(conf.classForName(key));
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + key + ""String_Node_Str"",e);
        }
      }
 else       if (key.equals(ConfigurationImpl.IMPORT)) {
        if (isSingleton) {
          throw new IllegalArgumentException(""String_Node_Str"" + ConfigurationImpl.IMPORT + ""String_Node_Str""+ ConfigurationImpl.SINGLETON+ ""String_Node_Str"");
        }
        try {
          this.conf.namespace.register(conf.classForName(value));
          String[] tok=value.split(ReflectionUtilities.regexp);
          try {
            this.conf.namespace.getNode(tok[tok.length - 1]);
            throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1]);
          }
 catch (          NameResolutionException e) {
            String oldValue=shortNames.put(tok[tok.length - 1],value);
            if (oldValue != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1] + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value);
            }
          }
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + value + ""String_Node_Str"",e);
        }
      }
 else       if (value.startsWith(ConfigurationImpl.INIT)) {
        String parseValue=value.substring(ConfigurationImpl.INIT.length(),value.length());
        parseValue=parseValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
        parseValue=parseValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
        String[] classes=parseValue.split(""String_Node_Str"");
        Class<?>[] clazzes=new Class[classes.length];
        for (int i=0; i < classes.length; i++) {
          try {
            clazzes[i]=conf.classForName(classes[i]);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"" + classes[i] + ""String_Node_Str""+ key);
          }
        }
        try {
          registerLegacyConstructor(conf.classForName(key),clazzes);
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + key + ""String_Node_Str""+ value);
        }
      }
 else {
        if (isSingleton) {
          final Class<?> c;
          try {
            c=conf.classForName(key);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
          bindSingleton(c);
        }
 else {
          bind(key,value);
        }
      }
    }
  }
}"
59824,"@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>void bindConstructor(Class<T> c,Class<? extends ExternalConstructor<? extends T>> v) throws BindException {
  try {
    conf.boundConstructors.put((ClassNode<?>)conf.namespace.register(c),(Class)v);
  }
 catch (  ClassCastException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str"");
  }
}","@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>void bindConstructor(Class<T> c,Class<? extends ExternalConstructor<? extends T>> v) throws BindException {
  conf.namespace.register(v);
  try {
    conf.boundConstructors.put((ClassNode<?>)conf.namespace.register(c),(Class)v);
  }
 catch (  ClassCastException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str"");
  }
}"
59825,"@Override public <T>void registerLegacyConstructor(Class<?> c,Class<?>... args) throws BindException {
  throw new UnsupportedOperationException();
}","@Override public <T>void registerLegacyConstructor(Class<T> c,final Class<?>... args) throws BindException {
  @SuppressWarnings(""String_Node_Str"") ClassNode<T> cn=(ClassNode<T>)conf.namespace.register(c);
  conf.legacyConstructors.put(cn,cn.createConstructorDef(args));
}"
59826,"/** 
 * Obtain the effective configuration of this ConfigurationBuilderImpl instance. This consists of string-string pairs that could be written directly to a Properties file, for example. Currently, this method does not return information about default parameter values that were specified by parameter annotations, or about the auto-discovered stuff in TypeHierarchy. All of that should be automatically imported as these keys are parsed on the other end.
 * @return A string containing enough information to rebuild thisconfiguration object (assuming the same classes / jars are available when the string is parsed by Tang).
 */
@Override public String toConfigurationString(){
  StringBuilder s=new StringBuilder();
  if (dirtyBit) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  for (  Class<?> opt : namespace.getRegisteredClasses()) {
    try {
      Node n=namespace.getNode(opt);
      if (n instanceof NamedParameterNode) {
        s.append(n.getFullName() + ""String_Node_Str"" + REGISTERED+ ""String_Node_Str"");
      }
    }
 catch (    NameResolutionException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
  }
  for (  Node opt : boundImpls.keySet()) {
    s.append(opt.getFullName() + ""String_Node_Str"" + boundImpls.get(opt).getName()+ ""String_Node_Str"");
  }
  for (  Node opt : boundConstructors.keySet()) {
    s.append(opt.getFullName() + ""String_Node_Str"" + boundConstructors.get(opt).getName()+ ""String_Node_Str"");
  }
  for (  Node opt : namedParameters.keySet()) {
    s.append(opt.getFullName() + ""String_Node_Str"" + namedParameters.get(opt)+ ""String_Node_Str"");
  }
  for (  Node opt : singletons) {
    s.append(opt.getFullName() + ""String_Node_Str"" + SINGLETON+ ""String_Node_Str"");
  }
  return s.toString();
}","/** 
 * Obtain the effective configuration of this ConfigurationBuilderImpl instance. This consists of string-string pairs that could be written directly to a Properties file, for example. Currently, this method does not return information about default parameter values that were specified by parameter annotations, or about the auto-discovered stuff in TypeHierarchy. All of that should be automatically imported as these keys are parsed on the other end.
 * @return A string containing enough information to rebuild thisconfiguration object (assuming the same classes / jars are available when the string is parsed by Tang).
 */
@Override public String toConfigurationString(){
  StringBuilder s=new StringBuilder();
  if (dirtyBit) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  for (  Class<?> opt : namespace.getRegisteredClasses()) {
    try {
      Node n=namespace.getNode(opt);
      if (n instanceof NamedParameterNode) {
        s.append(n.getFullName() + ""String_Node_Str"" + REGISTERED+ ""String_Node_Str"");
      }
    }
 catch (    NameResolutionException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
  }
  for (  Node opt : boundImpls.keySet()) {
    s.append(opt.getFullName() + ""String_Node_Str"" + boundImpls.get(opt).getName()+ ""String_Node_Str"");
  }
  for (  Node opt : boundConstructors.keySet()) {
    s.append(opt.getFullName() + ""String_Node_Str"" + boundConstructors.get(opt).getName()+ ""String_Node_Str"");
  }
  for (  Node opt : namedParameters.keySet()) {
    s.append(opt.getFullName() + ""String_Node_Str"" + namedParameters.get(opt)+ ""String_Node_Str"");
  }
  for (  Node opt : singletons) {
    s.append(opt.getFullName() + ""String_Node_Str"" + SINGLETON+ ""String_Node_Str"");
  }
  for (  ClassNode<?> cn : legacyConstructors.keySet()) {
    s.append(cn.getFullName() + ""String_Node_Str"" + INIT+ ""String_Node_Str""+ join(""String_Node_Str"",legacyConstructors.get(cn).constructor.getParameterTypes())+ ""String_Node_Str"");
  }
  return s.toString();
}"
59827,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void buildInjectionPlan(String name,Map<String,InjectionPlan<?>> memo){
  if (memo.containsKey(name)) {
    if (InjectionPlan.BUILDING == memo.get(name)) {
      throw new IllegalStateException(""String_Node_Str"" + name);
    }
 else {
      return;
    }
  }
  memo.put(name,InjectionPlan.BUILDING);
  Node n;
  try {
    n=tc.namespace.getNode(name);
  }
 catch (  NameResolutionException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + name,e);
  }
  final InjectionPlan<?> ip;
  if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    Object instance=tc.namedParameterInstances.get(n);
    if (instance == null) {
      instance=np.defaultInstance;
    }
    ip=new Instance<Object>(np,instance);
  }
 else   if (n instanceof ClassNode) {
    ClassNode<?> cn=(ClassNode<?>)n;
    if (tc.singletonInstances.containsKey(cn)) {
      ip=new Instance<Object>(cn,tc.singletonInstances.get(cn));
    }
 else     if (tc.boundConstructors.containsKey(cn)) {
      String constructorName=tc.boundConstructors.get(cn).getName();
      buildInjectionPlan(constructorName,memo);
      ip=new InjectionPlan.DelegatedImpl(cn,memo.get(constructorName));
      memo.put(cn.getClazz().getName(),ip);
    }
 else     if (tc.boundImpls.containsKey(cn) && !tc.boundImpls.get(cn).equals(cn.getClazz())) {
      String implName=tc.boundImpls.get(cn).getName();
      buildInjectionPlan(implName,memo);
      ip=new InjectionPlan.DelegatedImpl(cn,memo.get(implName));
      memo.put(cn.getClazz().getName(),ip);
    }
 else {
      List<ClassNode<?>> classNodes=new ArrayList<ClassNode<?>>();
      if (tc.boundImpls.get(cn) == null) {
        for (        ClassNode<?> c : tc.namespace.getKnownImpls(cn)) {
          classNodes.add(c);
        }
      }
      classNodes.add(cn);
      List<InjectionPlan<?>> sub_ips=new ArrayList<InjectionPlan<?>>();
      for (      ClassNode<?> thisCN : classNodes) {
        List<InjectionPlan<?>> constructors=new ArrayList<InjectionPlan<?>>();
        for (        ConstructorDef<?> def : thisCN.injectableConstructors) {
          List<InjectionPlan<?>> args=new ArrayList<InjectionPlan<?>>();
          for (          ConstructorArg arg : def.args) {
            String argName=arg.getName();
            buildInjectionPlan(argName,memo);
            args.add(memo.get(argName));
          }
          InjectionPlan.Constructor constructor=new InjectionPlan.Constructor(thisCN,def,args.toArray(new InjectionPlan[0]));
          constructors.add(constructor);
        }
        sub_ips.add(wrapInjectionPlans(thisCN.getName(),constructors,false));
      }
      if (classNodes.size() == 1 && classNodes.get(0).getClazz().getName().equals(name)) {
        ip=wrapInjectionPlans(name,sub_ips,false);
      }
 else {
        ip=wrapInjectionPlans(name,sub_ips,true);
      }
    }
  }
 else   if (n instanceof PackageNode) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (n instanceof NamespaceNode) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + n);
  }
  memo.put(name,ip);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void buildInjectionPlan(String name,Map<String,InjectionPlan<?>> memo){
  if (memo.containsKey(name)) {
    if (InjectionPlan.BUILDING == memo.get(name)) {
      throw new IllegalStateException(""String_Node_Str"" + name);
    }
 else {
      return;
    }
  }
  memo.put(name,InjectionPlan.BUILDING);
  Node n;
  try {
    n=tc.namespace.getNode(name);
  }
 catch (  NameResolutionException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + name,e);
  }
  final InjectionPlan<?> ip;
  if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    Object instance=tc.namedParameterInstances.get(n);
    if (instance == null) {
      instance=np.defaultInstance;
    }
    ip=new Instance<Object>(np,instance);
  }
 else   if (n instanceof ClassNode) {
    ClassNode<?> cn=(ClassNode<?>)n;
    if (tc.singletonInstances.containsKey(cn)) {
      ip=new Instance<Object>(cn,tc.singletonInstances.get(cn));
    }
 else     if (tc.boundConstructors.containsKey(cn)) {
      String constructorName=tc.boundConstructors.get(cn).getName();
      buildInjectionPlan(constructorName,memo);
      ip=new InjectionPlan.DelegatedImpl(cn,memo.get(constructorName));
      memo.put(cn.getClazz().getName(),ip);
    }
 else     if (tc.boundImpls.containsKey(cn) && !tc.boundImpls.get(cn).equals(cn.getClazz())) {
      String implName=tc.boundImpls.get(cn).getName();
      buildInjectionPlan(implName,memo);
      ip=new InjectionPlan.DelegatedImpl(cn,memo.get(implName));
      memo.put(cn.getClazz().getName(),ip);
    }
 else {
      List<ClassNode<?>> classNodes=new ArrayList<ClassNode<?>>();
      if (tc.boundImpls.get(cn) == null) {
        for (        ClassNode<?> c : tc.namespace.getKnownImpls(cn)) {
          classNodes.add(c);
        }
      }
      classNodes.add(cn);
      List<InjectionPlan<?>> sub_ips=new ArrayList<InjectionPlan<?>>();
      for (      ClassNode<?> thisCN : classNodes) {
        final List<InjectionPlan<?>> constructors=new ArrayList<InjectionPlan<?>>();
        final List<ConstructorDef<?>> constructorList=new ArrayList<>();
        if (tc.legacyConstructors.containsKey(thisCN)) {
          constructorList.add(tc.legacyConstructors.get(thisCN));
        }
        constructorList.addAll(Arrays.asList(thisCN.injectableConstructors));
        for (        ConstructorDef<?> def : constructorList) {
          List<InjectionPlan<?>> args=new ArrayList<InjectionPlan<?>>();
          for (          ConstructorArg arg : def.args) {
            String argName=arg.getName();
            buildInjectionPlan(argName,memo);
            args.add(memo.get(argName));
          }
          InjectionPlan.Constructor constructor=new InjectionPlan.Constructor(thisCN,def,args.toArray(new InjectionPlan[0]));
          constructors.add(constructor);
        }
        sub_ips.add(wrapInjectionPlans(thisCN.getName(),constructors,false));
      }
      if (classNodes.size() == 1 && classNodes.get(0).getClazz().getName().equals(name)) {
        ip=wrapInjectionPlans(name,sub_ips,false);
      }
 else {
        ip=wrapInjectionPlans(name,sub_ips,true);
      }
    }
  }
 else   if (n instanceof PackageNode) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (n instanceof NamespaceNode) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + n);
  }
  memo.put(name,ip);
}"
59828,"public ClassNode(Node parent,Class<T> clazz,boolean isPrefixTarget,boolean isSingleton) throws BindException {
  super(parent,clazz);
  this.clazz=clazz;
  this.isPrefixTarget=isPrefixTarget;
  this.isSingleton=isSingleton;
  final boolean injectable=isInjectionCandidate(clazz);
  Constructor<T>[] constructors=(Constructor<T>[])clazz.getDeclaredConstructors();
  MonotonicSet<ConstructorDef<T>> injectableConstructors=new MonotonicSet<ConstructorDef<T>>();
  for (int k=0; k < constructors.length; k++) {
    if (constructors[k].getAnnotation(Inject.class) != null) {
      if (!injectable) {
        throw new BindException(""String_Node_Str"" + clazz);
      }
      if (constructors[k].isSynthetic()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      Class<?>[] paramTypes=constructors[k].getParameterTypes();
      Annotation[][] paramAnnotations=constructors[k].getParameterAnnotations();
      if (paramTypes.length != paramAnnotations.length) {
        throw new IllegalStateException();
      }
      ConstructorArg[] args=new ConstructorArg[paramTypes.length];
      for (int i=0; i < paramTypes.length; i++) {
        Parameter named=null;
        for (int j=0; j < paramAnnotations[i].length; j++) {
          Annotation annotation=paramAnnotations[i][j];
          if (annotation instanceof Parameter) {
            named=(Parameter)annotation;
          }
        }
        args[i]=new ConstructorArg(paramTypes[i],named);
      }
      ConstructorDef<T> def;
      try {
        def=new ConstructorDef<T>(args,constructors[k]);
      }
 catch (      BindException e) {
        throw new BindException(""String_Node_Str"" + constructors[k] + ""String_Node_Str""+ clazz,e);
      }
      if (injectableConstructors.contains(def)) {
        throw new BindException(""String_Node_Str"" + clazz + ""String_Node_Str""+ def+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        injectableConstructors.add(def);
      }
    }
  }
  this.injectableConstructors=injectableConstructors.toArray((ConstructorDef<T>[])new ConstructorDef[0]);
}","public ClassNode(Node parent,Class<T> clazz,boolean isPrefixTarget,boolean isSingleton) throws BindException {
  super(parent,clazz);
  this.clazz=clazz;
  this.isPrefixTarget=isPrefixTarget;
  this.isSingleton=isSingleton;
  Constructor<T>[] constructors=(Constructor<T>[])clazz.getDeclaredConstructors();
  MonotonicSet<ConstructorDef<T>> injectableConstructors=new MonotonicSet<ConstructorDef<T>>();
  for (int k=0; k < constructors.length; k++) {
    if (constructors[k].getAnnotation(Inject.class) != null) {
      if (constructors[k].isSynthetic()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      ConstructorDef<T> def=createConstructorDef(constructors[k]);
      if (injectableConstructors.contains(def)) {
        throw new BindException(""String_Node_Str"" + clazz + ""String_Node_Str""+ def+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        injectableConstructors.add(def);
      }
    }
  }
  this.injectableConstructors=injectableConstructors.toArray((ConstructorDef<T>[])new ConstructorDef[0]);
}"
59829,"private boolean isInjectionCandidate(Class<?> clazz){
  final boolean injectable;
  if (clazz.isLocalClass() || clazz.isMemberClass()) {
    if (!Modifier.isStatic(clazz.getModifiers())) {
      injectable=false;
    }
 else {
      injectable=true;
    }
  }
 else {
    injectable=true;
  }
  return injectable;
}","public boolean isInjectionCandidate(){
  final boolean injectable;
  if (clazz.isLocalClass() || clazz.isMemberClass()) {
    if (!Modifier.isStatic(clazz.getModifiers())) {
      injectable=false;
    }
 else {
      injectable=true;
    }
  }
 else {
    injectable=true;
  }
  return injectable;
}"
59830,"/** 
 * Obtain the effective configuration of this ConfigurationBuilderImpl instance. This consists of string-string pairs that could be dumped directly to a Properties file, for example. Currently, this method does not return information about default parameter values that were specified by parameter annotations, or about the auto-discovered stuff in TypeHierarchy. All of that should be automatically imported as these keys are parsed on the other end.
 * @return a String to String map
 */
public Map<String,String> getConfiguration(){
  if (dirtyBit) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Map<String,String> ret=new HashMap<String,String>();
  for (  Class<?> opt : namespace.getRegisteredClasses()) {
    try {
      Node n=namespace.getNode(opt);
      if (n instanceof NamedParameterNode) {
        ret.put(opt.getName(),REGISTERED);
      }
    }
 catch (    NameResolutionException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
  }
  for (  Node opt : boundImpls.keySet()) {
    ret.put(opt.getFullName(),boundImpls.get(opt).getName());
  }
  for (  Node opt : boundConstructors.keySet()) {
    ret.put(opt.getFullName(),boundConstructors.get(opt).getName());
  }
  for (  Node opt : namedParameters.keySet()) {
    ret.put(opt.getFullName(),namedParameters.get(opt));
  }
  for (  Node opt : singletons) {
    ret.put(opt.getFullName(),SINGLETON);
  }
  return ret;
}","/** 
 * Obtain the effective configuration of this ConfigurationBuilderImpl instance. This consists of string-string pairs that could be dumped directly to a Properties file, for example. Currently, this method does not return information about default parameter values that were specified by parameter annotations, or about the auto-discovered stuff in TypeHierarchy. All of that should be automatically imported as these keys are parsed on the other end.
 * @return a String to String map
 */
private Map<String,String> getConfiguration(){
  if (dirtyBit) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Map<String,String> ret=new HashMap<String,String>();
  for (  Class<?> opt : namespace.getRegisteredClasses()) {
    try {
      Node n=namespace.getNode(opt);
      if (n instanceof NamedParameterNode) {
        ret.put(opt.getName(),REGISTERED);
      }
    }
 catch (    NameResolutionException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
  }
  for (  Node opt : boundImpls.keySet()) {
    ret.put(opt.getFullName(),boundImpls.get(opt).getName());
  }
  for (  Node opt : boundConstructors.keySet()) {
    ret.put(opt.getFullName(),boundConstructors.get(opt).getName());
  }
  for (  Node opt : namedParameters.keySet()) {
    ret.put(opt.getFullName(),namedParameters.get(opt));
  }
  for (  Node opt : singletons) {
    ret.put(opt.getFullName(),SINGLETON);
  }
  return ret;
}"
59831,"@Override public void writeConfigurationFile(OutputStream o){
  PrintStream s=new PrintStream(o);
  if (dirtyBit) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Map<String,String> effectiveConfiguration=getConfiguration();
  for (  String k : effectiveConfiguration.keySet()) {
    s.println(k + ""String_Node_Str"" + effectiveConfiguration.get(k));
  }
}","@Override public void writeConfigurationFile(OutputStream o){
  PrintStream s=new PrintStream(o);
  if (dirtyBit) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  for (  Class<?> opt : namespace.getRegisteredClasses()) {
    try {
      Node n=namespace.getNode(opt);
      if (n instanceof NamedParameterNode) {
        s.println(opt.getName() + ""String_Node_Str"" + REGISTERED);
      }
    }
 catch (    NameResolutionException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
  }
  for (  Node opt : boundImpls.keySet()) {
    s.println(opt.getFullName() + ""String_Node_Str"" + boundImpls.get(opt).getName());
  }
  for (  Node opt : boundConstructors.keySet()) {
    s.println(opt.getFullName() + ""String_Node_Str"" + boundConstructors.get(opt).getName());
  }
  for (  Node opt : namedParameters.keySet()) {
    s.println(opt.getFullName() + ""String_Node_Str"" + namedParameters.get(opt));
  }
  for (  Node opt : singletons) {
    s.println(opt.getFullName() + ""String_Node_Str"" + SINGLETON);
  }
}"
59832,"ConstructorDef(ConstructorArg[] args,Constructor<T> constructor) throws BindException {
  this.args=args;
  this.constructor=constructor;
  constructor.setAccessible(true);
  for (int i=0; i < this.args.length; i++) {
    for (int j=i + 1; j < this.args.length; j++) {
      if (this.args[i].toString().equals(this.args[j].toString())) {
        throw new BindException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
}","ConstructorDef(ConstructorArg[] args,Constructor<T> constructor) throws BindException {
  this.args=args;
  this.constructor=constructor;
  constructor.setAccessible(true);
  for (int i=0; i < this.args.length; i++) {
    for (int j=i + 1; j < this.args.length; j++) {
      if (this.args[i].equals(this.args[j])) {
        throw new BindException(""String_Node_Str"" + ""String_Node_Str"" + constructor);
      }
    }
  }
}"
59833,"public void processConfigFile(PropertiesConfiguration confFile) throws IOException, BindException {
  Iterator<String> it=confFile.getKeys();
  Map<String,String> shortNames=new HashMap<String,String>();
  while (it.hasNext()) {
    String key=it.next();
    String longName=shortNames.get(key);
    String[] values=confFile.getStringArray(key);
    if (longName != null) {
      key=longName;
    }
    for (    String value : values) {
      boolean isSingleton=false;
      if (value.equals(ConfigurationImpl.SINGLETON)) {
        isSingleton=true;
      }
      if (value.equals(ConfigurationImpl.REGISTERED)) {
        try {
          this.conf.namespace.register(conf.classForName(key));
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + key + ""String_Node_Str"",e);
        }
      }
      if (key.equals(ConfigurationImpl.IMPORT)) {
        if (isSingleton) {
          throw new IllegalArgumentException(""String_Node_Str"" + ConfigurationImpl.IMPORT + ""String_Node_Str""+ ConfigurationImpl.SINGLETON+ ""String_Node_Str"");
        }
        try {
          this.conf.namespace.register(conf.classForName(value));
          String[] tok=value.split(ReflectionUtilities.regexp);
          try {
            this.conf.namespace.getNode(tok[tok.length - 1]);
            throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1]);
          }
 catch (          NameResolutionException e) {
            String oldValue=shortNames.put(tok[tok.length - 1],value);
            if (oldValue != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1] + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value);
            }
          }
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + value + ""String_Node_Str"",e);
        }
      }
 else {
        if (isSingleton) {
          final Class<?> c;
          try {
            c=conf.classForName(key);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
          bindSingleton(c);
        }
 else {
          bind(key,value);
        }
      }
    }
  }
}","public void processConfigFile(PropertiesConfiguration confFile) throws IOException, BindException {
  Iterator<String> it=confFile.getKeys();
  Map<String,String> shortNames=new HashMap<String,String>();
  while (it.hasNext()) {
    String key=it.next();
    String longName=shortNames.get(key);
    String[] values=confFile.getStringArray(key);
    if (longName != null) {
      key=longName;
    }
    for (    String value : values) {
      boolean isSingleton=false;
      if (value.equals(ConfigurationImpl.SINGLETON)) {
        isSingleton=true;
      }
      if (value.equals(ConfigurationImpl.REGISTERED)) {
        try {
          this.conf.namespace.register(conf.classForName(key));
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + key + ""String_Node_Str"",e);
        }
      }
 else       if (key.equals(ConfigurationImpl.IMPORT)) {
        if (isSingleton) {
          throw new IllegalArgumentException(""String_Node_Str"" + ConfigurationImpl.IMPORT + ""String_Node_Str""+ ConfigurationImpl.SINGLETON+ ""String_Node_Str"");
        }
        try {
          this.conf.namespace.register(conf.classForName(value));
          String[] tok=value.split(ReflectionUtilities.regexp);
          try {
            this.conf.namespace.getNode(tok[tok.length - 1]);
            throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1]);
          }
 catch (          NameResolutionException e) {
            String oldValue=shortNames.put(tok[tok.length - 1],value);
            if (oldValue != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1] + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value);
            }
          }
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + value + ""String_Node_Str"",e);
        }
      }
 else {
        if (isSingleton) {
          final Class<?> c;
          try {
            c=conf.classForName(key);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
          bindSingleton(c);
        }
 else {
          bind(key,value);
        }
      }
    }
  }
}"
59834,"String getFullName(){
  if (parent == null) {
    return name;
  }
 else {
    return parent.getFullName() + ""String_Node_Str"" + name;
  }
}","String getFullName(){
  if (parent == null) {
    return name;
  }
 else {
    String parentName=parent.getFullName();
    if (parentName.length() == 0) {
      return name;
    }
 else {
      return parent.getFullName() + ""String_Node_Str"" + name;
    }
  }
}"
59835,"@Override public void processConfigFile(File file) throws IOException, BindException {
  PropertiesConfiguration confFile;
  try {
    confFile=new PropertiesConfiguration(file);
  }
 catch (  ConfigurationException e) {
    throw new BindException(""String_Node_Str"",e);
  }
  Iterator<String> it=confFile.getKeys();
  Map<String,String> shortNames=new HashMap<String,String>();
  while (it.hasNext()) {
    String key=it.next();
    String longName=shortNames.get(key);
    String[] values=confFile.getStringArray(key);
    if (longName != null) {
      key=longName;
    }
    for (    String value : values) {
      boolean isSingleton=false;
      if (value.equals(ConfigurationImpl.SINGLETON)) {
        isSingleton=true;
      }
      if (value.equals(ConfigurationImpl.REGISTERED)) {
        try {
          this.conf.namespace.register(conf.classForName(key));
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + key + ""String_Node_Str"",e);
        }
      }
      if (key.equals(ConfigurationImpl.IMPORT)) {
        if (isSingleton) {
          throw new IllegalArgumentException(""String_Node_Str"" + ConfigurationImpl.IMPORT + ""String_Node_Str""+ ConfigurationImpl.SINGLETON+ ""String_Node_Str"");
        }
        try {
          this.conf.namespace.register(conf.classForName(value));
          String[] tok=value.split(TypeHierarchy.regexp);
          try {
            this.conf.namespace.getNode(tok[tok.length - 1]);
            throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1]);
          }
 catch (          NameResolutionException e) {
            String oldValue=shortNames.put(tok[tok.length - 1],value);
            if (oldValue != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1] + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value);
            }
          }
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + value + ""String_Node_Str"",e);
        }
      }
 else {
        if (isSingleton) {
          final Class<?> c;
          try {
            c=conf.classForName(key);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
          bindSingleton(c);
        }
 else {
          try {
            bind(key,value);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
        }
      }
    }
  }
}","@Override public void processConfigFile(File file) throws IOException, BindException {
  PropertiesConfiguration confFile;
  try {
    confFile=new PropertiesConfiguration(file);
  }
 catch (  ConfigurationException e) {
    throw new BindException(""String_Node_Str"",e);
  }
  Iterator<String> it=confFile.getKeys();
  Map<String,String> shortNames=new HashMap<String,String>();
  while (it.hasNext()) {
    String key=it.next();
    String longName=shortNames.get(key);
    String[] values=confFile.getStringArray(key);
    if (longName != null) {
      key=longName;
    }
    for (    String value : values) {
      boolean isSingleton=false;
      if (value.equals(ConfigurationImpl.SINGLETON)) {
        isSingleton=true;
      }
      if (value.equals(ConfigurationImpl.REGISTERED)) {
        try {
          this.conf.namespace.register(conf.classForName(key));
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + key + ""String_Node_Str"",e);
        }
      }
      if (key.equals(ConfigurationImpl.IMPORT)) {
        if (isSingleton) {
          throw new IllegalArgumentException(""String_Node_Str"" + ConfigurationImpl.IMPORT + ""String_Node_Str""+ ConfigurationImpl.SINGLETON+ ""String_Node_Str"");
        }
        try {
          this.conf.namespace.register(conf.classForName(value));
          String[] tok=value.split(ReflectionUtilities.regexp);
          try {
            this.conf.namespace.getNode(tok[tok.length - 1]);
            throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1]);
          }
 catch (          NameResolutionException e) {
            String oldValue=shortNames.put(tok[tok.length - 1],value);
            if (oldValue != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1] + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value);
            }
          }
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + value + ""String_Node_Str"",e);
        }
      }
 else {
        if (isSingleton) {
          final Class<?> c;
          try {
            c=conf.classForName(key);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
          bindSingleton(c);
        }
 else {
          try {
            bind(key,value);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
        }
      }
    }
  }
}"
59836,"Node(Node parent,String name){
  this.parent=parent;
  this.name=name;
  if (parent != null) {
    parent.put(this);
  }
}","Node(Node parent,String name){
  this.parent=parent;
  this.name=name;
  if (parent != null) {
    if (name.length() == 0) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    parent.put(this);
  }
}"
59837,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private <T>NamespaceNode<T> registerNamespace(Namespace conf,ClassNode<T> classNode) throws BindException {
  String[] path=conf.value().split(regexp);
  Node root=namespace;
  for (int i=0; i < path.length - 1; i++) {
    if (!root.contains(path[i])) {
      Node newRoot=new NamespaceNode<T>(root,path[i]);
      root=newRoot;
    }
 else {
      root=root.get(path[i]);
      if (!(root instanceof NamespaceNode)) {
        throw new BindException(""String_Node_Str"" + root + ""String_Node_Str"");
      }
    }
  }
  if (root instanceof NamespaceNode) {
    Node target=((NamespaceNode<?>)root).getTarget();
    if (target != null) {
      throw new BindException(""String_Node_Str"");
    }
  }
  Node n=root.get(path[path.length - 1]);
  NamespaceNode<T> ret;
  if (n == null) {
    ret=new NamespaceNode<T>(root,path[path.length - 1],classNode);
  }
 else   if (n instanceof NamespaceNode) {
    ret=(NamespaceNode<T>)n;
    ret.setTarget(classNode);
    for (    Node child : ret.children.values()) {
      if (true) {
        throw new BindException(""String_Node_Str"");
      }
 else {
        try {
          classNode.put(child);
        }
 catch (        IllegalArgumentException e) {
          throw new BindException(""String_Node_Str"" + ret.getFullName() + ""String_Node_Str""+ child.getFullName());
        }
      }
    }
  }
 else {
    throw new BindException(""String_Node_Str"" + n + ""String_Node_Str"");
  }
  return ret;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private <T>NamespaceNode<T> registerNamespace(Namespace conf,ClassNode<T> classNode) throws BindException {
  String[] path=conf.value().split(ReflectionUtilities.regexp);
  Node root=namespace;
  for (int i=0; i < path.length - 1; i++) {
    if (!root.contains(path[i])) {
      Node newRoot=new NamespaceNode<T>(root,path[i]);
      root=newRoot;
    }
 else {
      root=root.get(path[i]);
      if (!(root instanceof NamespaceNode)) {
        throw new BindException(""String_Node_Str"" + root + ""String_Node_Str"");
      }
    }
  }
  if (root instanceof NamespaceNode) {
    Node target=((NamespaceNode<?>)root).getTarget();
    if (target != null) {
      throw new BindException(""String_Node_Str"");
    }
  }
  Node n=root.get(path[path.length - 1]);
  NamespaceNode<T> ret;
  if (n == null) {
    ret=new NamespaceNode<T>(root,path[path.length - 1],classNode);
  }
 else   if (n instanceof NamespaceNode) {
    ret=(NamespaceNode<T>)n;
    ret.setTarget(classNode);
    for (    Node child : ret.children.values()) {
      if (true) {
        throw new BindException(""String_Node_Str"");
      }
 else {
        try {
          classNode.put(child);
        }
 catch (        IllegalArgumentException e) {
          throw new BindException(""String_Node_Str"" + ret.getFullName() + ""String_Node_Str""+ child.getFullName());
        }
      }
    }
  }
 else {
    throw new BindException(""String_Node_Str"" + n + ""String_Node_Str"");
  }
  return ret;
}"
59838,"@SuppressWarnings(""String_Node_Str"") NamedParameterNode(Node parent,Class<? extends Name<T>> clazz,Class<T> argClass) throws BindException {
  super(parent,clazz);
  this.clazz=clazz;
  this.namedParameter=clazz.getAnnotation(NamedParameter.class);
  this.argClass=argClass;
  if (this.namedParameter == null || namedParameter.default_value().length() == 0) {
    this.defaultInstance=null;
  }
 else {
    this.defaultInstance=ReflectionUtilities.parse(this.argClass,namedParameter.default_value());
  }
}","NamedParameterNode(Node parent,Class<? extends Name<T>> clazz,Class<T> argClass) throws BindException {
  super(parent,clazz);
  this.clazz=clazz;
  this.namedParameter=clazz.getAnnotation(NamedParameter.class);
  this.argClass=argClass;
  if (this.namedParameter == null || namedParameter.default_value().length() == 0) {
    this.defaultInstance=null;
  }
 else {
    this.defaultInstance=ReflectionUtilities.parse(this.argClass,namedParameter.default_value());
  }
}"
59839,"private <T,U>Node buildPathToNode(Class<U> clazz,boolean isPrefixTarget) throws BindException {
  String[] path=clazz.getName().split(regexp);
  Node root=namespace;
  for (int i=0; i < path.length - 1; i++) {
    root=root.get(path[i]);
  }
  if (root == null) {
    throw new NullPointerException();
  }
  Node parent=root;
  Class<?> argType=getNamedParameterTargetOrNull(clazz);
  if (argType == null) {
    return new ClassNode<U>(parent,clazz,isPrefixTarget,false);
  }
 else {
    if (isPrefixTarget) {
      throw new BindException(clazz + ""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") NamedParameterNode<T> np=new NamedParameterNode<T>(parent,(Class<? extends Name<T>>)clazz,(Class<T>)argType);
    String shortName=np.getShortName();
    if (shortName != null) {
      NamedParameterNode<?> oldNode=shortNames.get(shortName);
      if (oldNode != null) {
        if (oldNode.getNameClass() == np.getNameClass()) {
          throw new IllegalStateException(""String_Node_Str"" + oldNode.getNameClass() + ""String_Node_Str""+ shortName);
        }
        throw new BindException(""String_Node_Str"" + oldNode.getNameClass() + ""String_Node_Str""+ np.getNameClass()+ ""String_Node_Str""+ shortName);
      }
      shortNames.put(shortName,np);
    }
    return np;
  }
}","private <T,U>Node buildPathToNode(Class<U> clazz,boolean isPrefixTarget) throws BindException {
  String[] path=clazz.getName().split(ReflectionUtilities.regexp);
  Node root=namespace;
  for (int i=0; i < path.length - 1; i++) {
    root=root.get(path[i]);
  }
  if (root == null) {
    throw new NullPointerException();
  }
  Node parent=root;
  Class<?> argType=getNamedParameterTargetOrNull(clazz);
  if (argType == null) {
    return new ClassNode<U>(parent,clazz,isPrefixTarget,false);
  }
 else {
    if (isPrefixTarget) {
      throw new BindException(clazz + ""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") NamedParameterNode<T> np=new NamedParameterNode<T>(parent,(Class<? extends Name<T>>)clazz,(Class<T>)argType);
    String shortName=np.getShortName();
    if (shortName != null) {
      NamedParameterNode<?> oldNode=shortNames.get(shortName);
      if (oldNode != null) {
        if (oldNode.getNameClass() == np.getNameClass()) {
          throw new IllegalStateException(""String_Node_Str"" + oldNode.getNameClass() + ""String_Node_Str""+ shortName);
        }
        throw new BindException(""String_Node_Str"" + oldNode.getNameClass() + ""String_Node_Str""+ np.getNameClass()+ ""String_Node_Str""+ shortName);
      }
      shortNames.put(shortName,np);
    }
    return np;
  }
}"
59840,"public Node register(Class<?> c) throws BindException {
  if (c == null) {
    return null;
  }
  try {
    Node n=getNode(c);
    return n;
  }
 catch (  NameResolutionException e) {
  }
  if (c.getSuperclass() != null) {
    register(c.getSuperclass());
  }
  for (  Class<?> i : c.getInterfaces()) {
    register(i);
  }
  register(c.getEnclosingClass());
  Package pack=c.getPackage();
  if (pack != null) {
    String[] packageList=pack.getName().split(regexp);
    for (int i=0; i < packageList.length; i++) {
      try {
        registerPackage(Arrays.copyOf(packageList,i + 1));
      }
 catch (      NameResolutionException e) {
        throw new IllegalStateException(""String_Node_Str"" + Arrays.toString(Arrays.copyOf(packageList,i + 1)) + ""String_Node_Str"",e);
      }
    }
  }
  Node n=registerClass(c);
  for (  Class<?> inner_class : c.getDeclaredClasses()) {
    register(inner_class);
  }
  if (n instanceof ClassNode) {
    ClassNode<?> cls=(ClassNode<?>)n;
    for (    ConstructorDef<?> def : cls.injectableConstructors) {
      for (      ConstructorArg arg : def.args) {
        register(arg.type);
        if (arg.name != null) {
          NamedParameterNode<?> np=(NamedParameterNode<?>)register(arg.name.value());
          if (!ReflectionUtilities.isCoercable(arg.type,np.getArgClass())) {
            throw new BindException(""String_Node_Str"" + arg.type + ""String_Node_Str""+ np.getName()+ ""String_Node_Str""+ np.getArgClass());
          }
        }
      }
    }
  }
 else   if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    register(np.argClass);
  }
  return n;
}","public Node register(Class<?> c) throws BindException {
  if (c == null) {
    return null;
  }
  try {
    Node n=getNode(c);
    return n;
  }
 catch (  NameResolutionException e) {
  }
  if (c.getSuperclass() != null) {
    register(c.getSuperclass());
  }
  for (  Class<?> i : c.getInterfaces()) {
    register(i);
  }
  register(c.getEnclosingClass());
  Package pack=c.getPackage();
  if (pack != null) {
    String[] packageList=pack.getName().split(ReflectionUtilities.regexp);
    for (int i=0; i < packageList.length; i++) {
      try {
        registerPackage(Arrays.copyOf(packageList,i + 1));
      }
 catch (      NameResolutionException e) {
        throw new IllegalStateException(""String_Node_Str"" + Arrays.toString(Arrays.copyOf(packageList,i + 1)) + ""String_Node_Str"",e);
      }
    }
  }
  Node n=registerClass(c);
  for (  Class<?> inner_class : c.getDeclaredClasses()) {
    register(inner_class);
  }
  if (n instanceof ClassNode) {
    ClassNode<?> cls=(ClassNode<?>)n;
    for (    ConstructorDef<?> def : cls.injectableConstructors) {
      for (      ConstructorArg arg : def.args) {
        register(arg.type);
        if (arg.name != null) {
          NamedParameterNode<?> np=(NamedParameterNode<?>)register(arg.name.value());
          if (!ReflectionUtilities.isCoercable(arg.type,np.getArgClass())) {
            throw new BindException(""String_Node_Str"" + arg.type + ""String_Node_Str""+ np.getName()+ ""String_Node_Str""+ np.getArgClass());
          }
        }
      }
    }
  }
 else   if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    register(np.argClass);
  }
  return n;
}"
59841,"@Test public void test() throws Exception {
  ConfigurationBuilderImpl t=(ConfigurationBuilderImpl)tang.newConfigurationBuilder();
  t.register(Tweeter.class);
  t.bindImplementation(TweetFactory.class,MockTweetFactory.class);
  t.bindImplementation(SMS.class,MockSMS.class);
  t.bindNamedParameter(Tweeter.PhoneNumber.class,new Long(867 - 5309).toString());
  Tweeter tw=(Tweeter)new InjectorImpl(t.build()).getInstance(Tweeter.class);
  tw.sendMessage();
}","@Test public void test() throws Exception {
  ConfigurationBuilder t=tang.newConfigurationBuilder();
  t.register(Tweeter.class);
  t.bindImplementation(TweetFactory.class,MockTweetFactory.class);
  t.bindImplementation(SMS.class,MockSMS.class);
  t.bindNamedParameter(Tweeter.PhoneNumber.class,new Long(867 - 5309).toString());
  Tweeter tw=(Tweeter)tang.newInjector(t.build()).getInstance(Tweeter.class);
  tw.sendMessage();
}"
59842,"@Override public Injector createChildInjector(Configuration... configurations) throws BindException {
  InjectorImpl ret;
  ret=copy(this);
  return ret;
}","@Override public Injector createChildInjector(Configuration... configurations) throws BindException {
  InjectorImpl ret;
  ret=copy(this,configurations);
  return ret;
}"
59843,"@Override public void processConfigFile(File file) throws IOException, BindException {
  PropertiesConfiguration confFile;
  try {
    confFile=new PropertiesConfiguration(file);
  }
 catch (  ConfigurationException e) {
    throw new BindException(""String_Node_Str"",e);
  }
  Iterator<String> it=confFile.getKeys();
  Map<String,String> shortNames=new HashMap<String,String>();
  while (it.hasNext()) {
    String key=it.next();
    String longName=shortNames.get(key);
    String[] values=confFile.getStringArray(key);
    if (longName != null) {
      key=longName;
    }
    for (    String value : values) {
      boolean isSingleton=false;
      if (value.equals(ConfigurationImpl.SINGLETON)) {
        isSingleton=true;
      }
      if (value.equals(ConfigurationImpl.REGISTERED)) {
        try {
          this.conf.namespace.register(conf.classForName(key));
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + key + ""String_Node_Str"",e);
        }
      }
      if (key.equals(ConfigurationImpl.IMPORT)) {
        if (isSingleton) {
          throw new IllegalArgumentException(""String_Node_Str"" + ConfigurationImpl.IMPORT + ""String_Node_Str""+ ConfigurationImpl.SINGLETON+ ""String_Node_Str"");
        }
        try {
          this.conf.namespace.register(conf.classForName(value));
          String[] tok=value.split(ReflectionUtilities.regexp);
          try {
            this.conf.namespace.getNode(tok[tok.length - 1]);
            throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1]);
          }
 catch (          NameResolutionException e) {
            String oldValue=shortNames.put(tok[tok.length - 1],value);
            if (oldValue != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1] + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value);
            }
          }
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + value + ""String_Node_Str"",e);
        }
      }
 else {
        if (isSingleton) {
          final Class<?> c;
          try {
            c=conf.classForName(key);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
          bindSingleton(c);
        }
 else {
          try {
            bind(key,value);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
        }
      }
    }
  }
}","public void processConfigFile(PropertiesConfiguration confFile) throws IOException, BindException {
  Iterator<String> it=confFile.getKeys();
  Map<String,String> shortNames=new HashMap<String,String>();
  while (it.hasNext()) {
    String key=it.next();
    String longName=shortNames.get(key);
    String[] values=confFile.getStringArray(key);
    if (longName != null) {
      key=longName;
    }
    for (    String value : values) {
      boolean isSingleton=false;
      if (value.equals(ConfigurationImpl.SINGLETON)) {
        isSingleton=true;
      }
      if (value.equals(ConfigurationImpl.REGISTERED)) {
        try {
          this.conf.namespace.register(conf.classForName(key));
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + key + ""String_Node_Str"",e);
        }
      }
      if (key.equals(ConfigurationImpl.IMPORT)) {
        if (isSingleton) {
          throw new IllegalArgumentException(""String_Node_Str"" + ConfigurationImpl.IMPORT + ""String_Node_Str""+ ConfigurationImpl.SINGLETON+ ""String_Node_Str"");
        }
        try {
          this.conf.namespace.register(conf.classForName(value));
          String[] tok=value.split(ReflectionUtilities.regexp);
          try {
            this.conf.namespace.getNode(tok[tok.length - 1]);
            throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1]);
          }
 catch (          NameResolutionException e) {
            String oldValue=shortNames.put(tok[tok.length - 1],value);
            if (oldValue != null) {
              throw new IllegalArgumentException(""String_Node_Str"" + tok[tok.length - 1] + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ value);
            }
          }
        }
 catch (        ClassNotFoundException e) {
          throw new BindException(""String_Node_Str"" + value + ""String_Node_Str"",e);
        }
      }
 else {
        if (isSingleton) {
          final Class<?> c;
          try {
            c=conf.classForName(key);
          }
 catch (          ClassNotFoundException e) {
            throw new BindException(""String_Node_Str"",e);
          }
          bindSingleton(c);
        }
 else {
          bind(key,value);
        }
      }
    }
  }
}"
59844,"@Override public void addConfiguration(Configuration ti) throws BindException {
  ConfigurationImpl t=(ConfigurationImpl)ti;
  if (t.dirtyBit) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    for (    Class<?> c : t.namespace.getRegisteredClasses()) {
      register(c);
    }
    for (    ClassNode<?> cn : t.boundImpls.keySet()) {
      bind(cn.getClazz(),t.boundImpls.get(cn));
    }
    for (    ClassNode<?> cn : t.boundConstructors.keySet()) {
      bind(cn.getClazz(),t.boundConstructors.get(cn));
    }
    for (    ClassNode<?> cn : t.singletons) {
      try {
        bindSingleton(cn.getClazz());
      }
 catch (      BindException e) {
        throw new IllegalStateException(""String_Node_Str"",e);
      }
    }
    for (    NamedParameterNode<?> np : t.namedParameters.keySet()) {
      bind(np.getNameClass().getName(),t.namedParameters.get(np));
    }
  }
 catch (  ReflectiveOperationException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
}","@Override public void addConfiguration(Configuration ti) throws BindException {
  ConfigurationImpl t=(ConfigurationImpl)ti;
  if (t.dirtyBit) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  Class<?> c : t.namespace.getRegisteredClasses()) {
    register(c);
  }
  for (  ClassNode<?> cn : t.boundImpls.keySet()) {
    bind(cn.getClazz(),t.boundImpls.get(cn));
  }
  for (  ClassNode<?> cn : t.boundConstructors.keySet()) {
    bind(cn.getClazz(),t.boundConstructors.get(cn));
  }
  for (  ClassNode<?> cn : t.singletons) {
    try {
      bindSingleton(cn.getClazz());
    }
 catch (    BindException e) {
      throw new IllegalStateException(""String_Node_Str"",e);
    }
  }
  for (  NamedParameterNode<?> np : t.namedParameters.keySet()) {
    bind(np.getNameClass().getName(),t.namedParameters.get(np));
  }
}"
59845,"@Override @SuppressWarnings(""String_Node_Str"") public <T>InjectorImpl bindVolatileInstance(Class<T> c,T o) throws InjectionException {
  tc.dirtyBit=true;
  Node n;
  try {
    n=tc.namespace.getNode(c);
  }
 catch (  NameResolutionException e) {
    throw new InjectionException(""String_Node_Str"" + c,e);
  }
  if (n instanceof NamedParameterNode) {
    NamedParameterNode<T> np=(NamedParameterNode<T>)n;
    tc.namedParameterInstances.put(np,o);
    ClassNode<T> cn=(ClassNode<T>)n;
    cn.setIsSingleton();
    tc.singletonInstances.put(cn,o);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override @SuppressWarnings(""String_Node_Str"") public <T>InjectorImpl bindVolatileInstance(Class<T> c,T o) throws InjectionException {
  tc.dirtyBit=true;
  Node n;
  try {
    n=tc.namespace.getNode(c);
  }
 catch (  NameResolutionException e) {
    throw new InjectionException(""String_Node_Str"" + c,e);
  }
  if (n instanceof NamedParameterNode) {
    NamedParameterNode<T> np=(NamedParameterNode<T>)n;
    tc.namedParameterInstances.put(np,o);
  }
 else   if (n instanceof ClassNode) {
    ClassNode<T> cn=(ClassNode<T>)n;
    cn.setIsSingleton();
    tc.singletonInstances.put(cn,o);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + c + ""String_Node_Str"");
  }
  System.err.println(""String_Node_Str"");
  return this;
}"
59846,"@SuppressWarnings(""String_Node_Str"") private <T>NamespaceNode<T> registerNamespace(Namespace conf,ClassNode<T> classNode) throws BindException {
  String[] path=conf.value().split(regexp);
  Node root=namespace;
  for (int i=0; i < path.length - 1; i++) {
    if (!root.contains(path[i])) {
      Node newRoot=new NamespaceNode<T>(root,path[i]);
      root=newRoot;
    }
 else {
      root=root.get(path[i]);
      if (!(root instanceof NamespaceNode)) {
        throw new BindException(""String_Node_Str"" + root + ""String_Node_Str"");
      }
    }
  }
  Node n=root.get(path[path.length - 1]);
  NamespaceNode<T> ret;
  if (n == null) {
    ret=new NamespaceNode<T>(root,path[path.length - 1],classNode);
  }
 else   if (n instanceof NamespaceNode) {
    ret=(NamespaceNode<T>)n;
    ret.setTarget(classNode);
    for (    Node child : ret.children.values()) {
      classNode.put(child);
    }
  }
 else {
    throw new BindException(""String_Node_Str"" + n + ""String_Node_Str"");
  }
  return ret;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private <T>NamespaceNode<T> registerNamespace(Namespace conf,ClassNode<T> classNode) throws BindException {
  String[] path=conf.value().split(regexp);
  Node root=namespace;
  for (int i=0; i < path.length - 1; i++) {
    if (!root.contains(path[i])) {
      Node newRoot=new NamespaceNode<T>(root,path[i]);
      root=newRoot;
    }
 else {
      root=root.get(path[i]);
      if (!(root instanceof NamespaceNode)) {
        throw new BindException(""String_Node_Str"" + root + ""String_Node_Str"");
      }
    }
  }
  if (root instanceof NamespaceNode) {
    Node target=((NamespaceNode<?>)root).getTarget();
    if (target != null) {
      throw new BindException(""String_Node_Str"");
    }
  }
  Node n=root.get(path[path.length - 1]);
  NamespaceNode<T> ret;
  if (n == null) {
    ret=new NamespaceNode<T>(root,path[path.length - 1],classNode);
  }
 else   if (n instanceof NamespaceNode) {
    ret=(NamespaceNode<T>)n;
    ret.setTarget(classNode);
    for (    Node child : ret.children.values()) {
      if (true) {
        throw new BindException(""String_Node_Str"");
      }
 else {
        try {
          classNode.put(child);
        }
 catch (        IllegalArgumentException e) {
          throw new BindException(""String_Node_Str"" + ret.getFullName() + ""String_Node_Str""+ child.getFullName());
        }
      }
    }
  }
 else {
    throw new BindException(""String_Node_Str"" + n + ""String_Node_Str"");
  }
  return ret;
}"
59847,"@SuppressWarnings(""String_Node_Str"") <T>ClassNode<T>[] getKnownImpls(ClassNode<T> c){
  return knownImpls.getValuesForKey(c).toArray(new ClassNode[0]);
}","@SuppressWarnings(""String_Node_Str"") <T>Set<ClassNode<T>> getKnownImpls(ClassNode<T> c){
  return (Set<ClassNode<T>>)(Set<?>)knownImpls.getValuesForKey(c);
}"
59848,"@SuppressWarnings(""String_Node_Str"") NamedParameterNode(Node parent,Class<? extends Name<T>> clazz) throws BindException {
  super(parent,clazz);
  this.clazz=clazz;
  for (  Constructor<?> c : clazz.getDeclaredConstructors()) {
    for (    Annotation a : c.getDeclaredAnnotations()) {
      if (a instanceof Inject) {
        throw new BindException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
      }
    }
  }
  Class<T> parameterClass;
  try {
    Type[] interfaces=clazz.getGenericInterfaces();
    if (interfaces.length != 1) {
      throw new IllegalArgumentException();
    }
    Type genericNameType=interfaces[0];
    if (genericNameType instanceof ParameterizedType) {
      ParameterizedType ptype=(ParameterizedType)genericNameType;
      if (ptype.getRawType() != Name.class) {
        throw new BindException(""String_Node_Str"" + clazz.getName() + ""String_Node_Str"");
      }
      try {
        Type t=ptype.getActualTypeArguments()[0];
        if (t instanceof ParameterizedType) {
          t=((ParameterizedType)t).getRawType();
        }
        parameterClass=(Class<T>)t;
      }
 catch (      ClassCastException e) {
        throw new IllegalArgumentException();
      }
    }
 else {
      throw new IllegalArgumentException();
    }
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz + ""String_Node_Str""+ ""String_Node_Str"");
  }
  this.namedParameter=clazz.getAnnotation(NamedParameter.class);
  this.argClass=parameterClass;
  this.defaultInstance=(this.namedParameter == null || namedParameter.default_value().length() == 0) ? null : ReflectionUtilities.parse(this.argClass,namedParameter.default_value());
}","@SuppressWarnings(""String_Node_Str"") NamedParameterNode(Node parent,Class<? extends Name<T>> clazz,Class<T> argClass) throws BindException {
  super(parent,clazz);
  this.clazz=clazz;
  this.namedParameter=clazz.getAnnotation(NamedParameter.class);
  this.argClass=argClass;
  if (this.namedParameter == null || namedParameter.default_value().length() == 0) {
    this.defaultInstance=null;
  }
 else {
    this.defaultInstance=ReflectionUtilities.parse(this.argClass,namedParameter.default_value());
  }
}"
59849,"private <T,U>Node buildPathToNode(Class<U> clazz,boolean isPrefixTarget) throws BindException {
  String[] path=clazz.getName().split(regexp);
  Node root=namespace;
  for (int i=0; i < path.length - 1; i++) {
    root=root.get(path[i]);
  }
  if (root == null) {
    throw new NullPointerException();
  }
  Node parent=root;
  if (clazz.getAnnotation(NamedParameter.class) == null) {
    return new ClassNode<U>(parent,clazz,isPrefixTarget,false);
  }
 else {
    if (isPrefixTarget) {
      throw new BindException(clazz + ""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") NamedParameterNode<T> np=new NamedParameterNode<T>(parent,(Class<? extends Name<T>>)clazz);
    String shortName=np.getShortName();
    if (shortName != null) {
      NamedParameterNode<?> oldNode=shortNames.get(shortName);
      if (oldNode != null) {
        if (oldNode.getNameClass() == np.getNameClass()) {
          throw new IllegalStateException(""String_Node_Str"" + oldNode.getNameClass() + ""String_Node_Str""+ shortName);
        }
        throw new BindException(""String_Node_Str"" + oldNode.getNameClass() + ""String_Node_Str""+ np.getNameClass()+ ""String_Node_Str""+ shortName);
      }
      shortNames.put(shortName,np);
    }
    return np;
  }
}","private <T,U>Node buildPathToNode(Class<U> clazz,boolean isPrefixTarget) throws BindException {
  String[] path=clazz.getName().split(regexp);
  Node root=namespace;
  for (int i=0; i < path.length - 1; i++) {
    root=root.get(path[i]);
  }
  if (root == null) {
    throw new NullPointerException();
  }
  Node parent=root;
  Class<?> argType=getNamedParameterTargetOrNull(clazz);
  if (argType == null) {
    return new ClassNode<U>(parent,clazz,isPrefixTarget,false);
  }
 else {
    if (isPrefixTarget) {
      throw new BindException(clazz + ""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") NamedParameterNode<T> np=new NamedParameterNode<T>(parent,(Class<? extends Name<T>>)clazz,(Class<T>)argType);
    String shortName=np.getShortName();
    if (shortName != null) {
      NamedParameterNode<?> oldNode=shortNames.get(shortName);
      if (oldNode != null) {
        if (oldNode.getNameClass() == np.getNameClass()) {
          throw new IllegalStateException(""String_Node_Str"" + oldNode.getNameClass() + ""String_Node_Str""+ shortName);
        }
        throw new BindException(""String_Node_Str"" + oldNode.getNameClass() + ""String_Node_Str""+ np.getNameClass()+ ""String_Node_Str""+ shortName);
      }
      shortNames.put(shortName,np);
    }
    return np;
  }
}"
59850,"/** 
 * @param args
 * @throws IOException 
 * @throws NumberFormatException
 * @throws ParseException
 */
public <T>void processCommandLine(String[] args) throws BindException, IOException ;","/** 
 * @param args
 * @throws IOException
 * @throws NumberFormatException
 * @throws ParseException
 */
public <T>void processCommandLine(String[] args) throws BindException, IOException ;"
59851,"/** 
 * Needed when you want to make a class available for injection, but don't want to bind a subclass to its implementation. Without this call, by the time injector.newInstance() is called, ConfigurationBuilderImpl has been locked down, and the class won't be found.
 * @param c
 */
public void register(Class<?> c){
  conf.namespace.register(c);
}","/** 
 * Needed when you want to make a class available for injection, but don't want to bind a subclass to its implementation. Without this call, by the time injector.newInstance() is called, ConfigurationBuilderImpl has been locked down, and the class won't be found.
 * @param c
 */
@Override public void register(Class<?> c) throws BindException {
  conf.namespace.register(c);
}"
59852,"public ClassNode(Node parent,Class<T> clazz,boolean isPrefixTarget,boolean isSingleton){
  super(parent,clazz);
  this.clazz=clazz;
  this.isPrefixTarget=isPrefixTarget;
  this.isSingleton=isSingleton;
  boolean injectable=true;
  if (clazz.isLocalClass() || clazz.isMemberClass()) {
    if (!Modifier.isStatic(clazz.getModifiers())) {
      injectable=false;
    }
  }
  Constructor<T>[] constructors=(Constructor<T>[])clazz.getDeclaredConstructors();
  List<ConstructorDef<T>> injectableConstructors=new ArrayList<ConstructorDef<T>>();
  for (int k=0; k < constructors.length; k++) {
    if (constructors[k].getAnnotation(Inject.class) != null) {
      if (!injectable) {
        throw new IllegalArgumentException(""String_Node_Str"" + clazz);
      }
      if (constructors[k].isSynthetic()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      Class<?>[] paramTypes=constructors[k].getParameterTypes();
      Annotation[][] paramAnnotations=constructors[k].getParameterAnnotations();
      if (paramTypes.length != paramAnnotations.length) {
        throw new IllegalStateException();
      }
      ConstructorArg[] args=new ConstructorArg[paramTypes.length];
      for (int i=0; i < paramTypes.length; i++) {
        Parameter named=null;
        for (int j=0; j < paramAnnotations[i].length; j++) {
          Annotation annotation=paramAnnotations[i][j];
          if (annotation instanceof Parameter) {
            named=(Parameter)annotation;
            Node n;
            try {
              n=getNode(named.value());
            }
 catch (            NameResolutionException e) {
              n=buildPathToNode(named.value(),false);
            }
            if (!(n instanceof NamedParameterNode)) {
              throw new IllegalStateException();
            }
            NamedParameterNode<?> np=(NamedParameterNode<?>)n;
            if (!ReflectionUtilities.isCoercable(paramTypes[i],np.argClass)) {
              throw new IllegalArgumentException(""String_Node_Str"" + paramTypes[i] + ""String_Node_Str""+ np.name+ ""String_Node_Str""+ np.argClass);
            }
          }
        }
        args[i]=new ConstructorArg(paramTypes[i],named);
      }
      ConstructorDef<T> def=new ConstructorDef<T>(args,constructors[k]);
      if (injectableConstructors.contains(def)) {
        throw new IllegalStateException(""String_Node_Str"" + clazz + ""String_Node_Str""+ def+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        injectableConstructors.add(def);
      }
    }
  }
  this.injectableConstructors=injectableConstructors.toArray((ConstructorDef<T>[])new ConstructorDef[0]);
}","public ClassNode(Node parent,Class<T> clazz,boolean isPrefixTarget,boolean isSingleton){
  super(parent,clazz);
  this.clazz=clazz;
  this.isPrefixTarget=isPrefixTarget;
  this.isSingleton=isSingleton;
  boolean injectable=true;
  if (clazz.isLocalClass() || clazz.isMemberClass()) {
    if (!Modifier.isStatic(clazz.getModifiers())) {
      injectable=false;
    }
  }
  Constructor<T>[] constructors=(Constructor<T>[])clazz.getDeclaredConstructors();
  List<ConstructorDef<T>> injectableConstructors=new ArrayList<ConstructorDef<T>>();
  for (int k=0; k < constructors.length; k++) {
    if (constructors[k].getAnnotation(Inject.class) != null) {
      if (!injectable) {
        throw new IllegalArgumentException(""String_Node_Str"" + clazz);
      }
      if (constructors[k].isSynthetic()) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      Class<?>[] paramTypes=constructors[k].getParameterTypes();
      Annotation[][] paramAnnotations=constructors[k].getParameterAnnotations();
      if (paramTypes.length != paramAnnotations.length) {
        throw new IllegalStateException();
      }
      ConstructorArg[] args=new ConstructorArg[paramTypes.length];
      for (int i=0; i < paramTypes.length; i++) {
        Parameter named=null;
        for (int j=0; j < paramAnnotations[i].length; j++) {
          Annotation annotation=paramAnnotations[i][j];
          if (annotation instanceof Parameter) {
            named=(Parameter)annotation;
          }
        }
        args[i]=new ConstructorArg(paramTypes[i],named);
      }
      ConstructorDef<T> def=new ConstructorDef<T>(args,constructors[k]);
      if (injectableConstructors.contains(def)) {
        throw new IllegalStateException(""String_Node_Str"" + clazz + ""String_Node_Str""+ def+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        injectableConstructors.add(def);
      }
    }
  }
  this.injectableConstructors=injectableConstructors.toArray((ConstructorDef<T>[])new ConstructorDef[0]);
}"
59853,"public Node register(Class<?> c){
  if (c == null) {
    return null;
  }
  try {
    Node n=getNode(c);
    return n;
  }
 catch (  NameResolutionException e) {
  }
  if (c.getSuperclass() != null) {
    register(c.getSuperclass());
  }
  for (  Class<?> i : c.getInterfaces()) {
    register(i);
  }
  register(c.getEnclosingClass());
  Package pack=c.getPackage();
  if (pack != null) {
    String[] packageList=pack.getName().split(regexp);
    for (int i=0; i < packageList.length; i++) {
      try {
        registerPackage(Arrays.copyOf(packageList,i + 1));
      }
 catch (      NameResolutionException e) {
        throw new IllegalStateException(""String_Node_Str"" + Arrays.toString(Arrays.copyOf(packageList,i + 1)) + ""String_Node_Str"",e);
      }
    }
  }
  Node n=registerClass(c);
  for (  Class<?> inner_class : c.getDeclaredClasses()) {
    register(inner_class);
  }
  if (n instanceof ClassNode) {
    ClassNode<?> cls=(ClassNode<?>)n;
    for (    ConstructorDef<?> def : cls.injectableConstructors) {
      for (      ConstructorArg arg : def.args) {
        try {
          getNode(arg.type);
        }
 catch (        NameResolutionException e) {
          register(arg.type);
        }
      }
    }
  }
 else   if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    try {
      getNode(np.argClass);
    }
 catch (    NameResolutionException e) {
      register(np.argClass);
    }
  }
  return n;
}","public Node register(Class<?> c){
  if (c == null) {
    return null;
  }
  try {
    Node n=getNode(c);
    return n;
  }
 catch (  NameResolutionException e) {
  }
  if (c.getSuperclass() != null) {
    register(c.getSuperclass());
  }
  for (  Class<?> i : c.getInterfaces()) {
    register(i);
  }
  register(c.getEnclosingClass());
  Package pack=c.getPackage();
  if (pack != null) {
    String[] packageList=pack.getName().split(regexp);
    for (int i=0; i < packageList.length; i++) {
      try {
        registerPackage(Arrays.copyOf(packageList,i + 1));
      }
 catch (      NameResolutionException e) {
        throw new IllegalStateException(""String_Node_Str"" + Arrays.toString(Arrays.copyOf(packageList,i + 1)) + ""String_Node_Str"",e);
      }
    }
  }
  Node n=registerClass(c);
  for (  Class<?> inner_class : c.getDeclaredClasses()) {
    register(inner_class);
  }
  if (n instanceof ClassNode) {
    ClassNode<?> cls=(ClassNode<?>)n;
    for (    ConstructorDef<?> def : cls.injectableConstructors) {
      for (      ConstructorArg arg : def.args) {
        register(arg.type);
        if (arg.name != null) {
          NamedParameterNode<?> np=(NamedParameterNode<?>)register(arg.name.value());
          if (!ReflectionUtilities.isCoercable(arg.type,np.getArgClass())) {
            throw new IllegalArgumentException(""String_Node_Str"" + arg.type + ""String_Node_Str""+ np.getName()+ ""String_Node_Str""+ np.getArgClass());
          }
        }
      }
    }
  }
 else   if (n instanceof NamedParameterNode) {
    NamedParameterNode<?> np=(NamedParameterNode<?>)n;
    try {
      getNode(np.argClass);
    }
 catch (    NameResolutionException e) {
      register(np.argClass);
    }
  }
  return n;
}"
59854,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>void setClassVivifier(Class<T> c,Class<Vivifier<? extends T>> v){
  namespace.register(c);
  try {
    vivifier.put(namespace.getNode(c),(Class)v);
  }
 catch (  NameResolutionException e) {
    throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str"");
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>void setClassVivifier(Class<T> c,Class<? extends Vivifier<? extends T>> v){
  namespace.register(c);
  try {
    vivifier.put(namespace.getNode(c),(Class)v);
  }
 catch (  NameResolutionException e) {
    throw new IllegalStateException(""String_Node_Str"" + c + ""String_Node_Str"");
  }
}"
59855,"public boolean canInject(String name) throws NameResolutionException {
  Node n=namespace.getNode(name);
  if (n instanceof NamedParameterNode) {
    NamedParameterNode np=(NamedParameterNode)n;
    return boundValues.get(np) != null;
  }
 else   if (n instanceof ClassNode) {
    ClassNode c=(ClassNode)n;
    Class<?> clz=(Class<?>)boundValues.get(c);
    if (clz != null) {
      return canInject(clz.getName());
    }
    for (    ConstructorDef def : c.injectableConstructors) {
      boolean canInject=true;
      for (      ConstructorArg arg : def.args) {
        if (!canInject(arg.getFullyQualifiedName(c.clazz))) {
          canInject=false;
          break;
        }
      }
      if (canInject) {
        return true;
      }
    }
    return false;
  }
 else {
    throw new IllegalArgumentException();
  }
}","public boolean canInject(String name){
  Node n;
  try {
    n=namespace.getNode(name);
  }
 catch (  NameResolutionException e) {
    e.printStackTrace();
    return false;
  }
  if (n instanceof NamedParameterNode) {
    NamedParameterNode np=(NamedParameterNode)n;
    return boundValues.get(np) != null;
  }
 else   if (n instanceof ClassNode) {
    ClassNode c=(ClassNode)n;
    Class<?> clz=(Class<?>)boundValues.get(c);
    if (clz != null) {
      return canInject(clz.getName());
    }
    for (    ConstructorDef def : c.injectableConstructors) {
      boolean canInject=true;
      for (      ConstructorArg arg : def.args) {
        if (!canInject(arg.getFullyQualifiedName(c.clazz))) {
          canInject=false;
          break;
        }
      }
      if (canInject) {
        return true;
      }
    }
    throw new IllegalStateException(""String_Node_Str"" + name);
  }
 else {
    throw new IllegalArgumentException();
  }
}"
59856,"public Object getInstance(Class<?> clazz) throws NameResolutionException, ReflectiveOperationException {
  Node n=namespace.getNode(clazz);
  if (n instanceof ClassNode && !(n instanceof NamedParameterNode)) {
    Class<?> c=(Class<?>)boundValues.get(n);
    if (c != null) {
      return getInstance(c);
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + n.toString() + ""String_Node_Str""+ n.getClass()+ ""String_Node_Str"");
  }
  List<ConstructorDef> defs=new ArrayList<ConstructorDef>();
  for (  ConstructorDef def : ((ClassNode)n).injectableConstructors) {
    boolean canInject=true;
    for (    ConstructorArg arg : def.args) {
      String name=arg.getFullyQualifiedName(clazz);
      try {
        if (!canInject(name)) {
          canInject=false;
        }
      }
 catch (      NameResolutionException e) {
        canInject=false;
      }
    }
    if (canInject) {
      defs.add(def);
    }
  }
  for (int i=0; i < defs.size(); i++) {
    for (int j=0; j < defs.size(); j++) {
      if (defs.get(i).isMoreSpecificThan(defs.get(j))) {
        defs.remove(j);
        if (i >= j) {
          i--;
        }
        j--;
      }
    }
  }
  if (defs.size() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz);
  }
  if (defs.size() > 1) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz + ""String_Node_Str""+ Arrays.toString(defs.toArray()));
  }
  List<Object> args=new ArrayList<Object>();
  for (  ConstructorArg arg : defs.get(0).args) {
    Node argNode=namespace.getNode(arg.getFullyQualifiedName(clazz));
    if (argNode instanceof NamedParameterNode) {
      args.add(boundValues.get(argNode));
    }
 else     if (argNode instanceof ClassNode) {
      args.add(getInstance(((ClassNode)argNode).clazz));
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + argNode);
    }
  }
  try {
    return defs.get(0).constructor.newInstance(args.toArray());
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalStateException(""String_Node_Str"" + defs.get(0).constructor + ""String_Node_Str""+ Arrays.toString(args.toArray())+ ""String_Node_Str""+ e.getMessage(),e);
  }
}","public Object getInstance(Class<?> clazz) throws NameResolutionException, ReflectiveOperationException {
  Node n=namespace.getNode(clazz);
  if (n instanceof ClassNode && !(n instanceof NamedParameterNode)) {
    Class<?> c=(Class<?>)boundValues.get(n);
    if (c != null) {
      return getInstance(c);
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + n.toString() + ""String_Node_Str""+ n.getClass()+ ""String_Node_Str"");
  }
  List<ConstructorDef> defs=new ArrayList<ConstructorDef>();
  for (  ConstructorDef def : ((ClassNode)n).injectableConstructors) {
    boolean canInject=true;
    for (    ConstructorArg arg : def.args) {
      String name=arg.getFullyQualifiedName(clazz);
      if (!canInject(name)) {
        canInject=false;
      }
    }
    if (canInject) {
      defs.add(def);
    }
  }
  for (int i=0; i < defs.size(); i++) {
    for (int j=0; j < defs.size(); j++) {
      if (defs.get(i).isMoreSpecificThan(defs.get(j))) {
        defs.remove(j);
        if (i >= j) {
          i--;
        }
        j--;
      }
    }
  }
  if (defs.size() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz);
  }
  if (defs.size() > 1) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz + ""String_Node_Str""+ Arrays.toString(defs.toArray()));
  }
  List<Object> args=new ArrayList<Object>();
  for (  ConstructorArg arg : defs.get(0).args) {
    Node argNode=namespace.getNode(arg.getFullyQualifiedName(clazz));
    if (argNode instanceof NamedParameterNode) {
      args.add(boundValues.get(argNode));
    }
 else     if (argNode instanceof ClassNode) {
      args.add(getInstance(((ClassNode)argNode).clazz));
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + argNode);
    }
  }
  try {
    return defs.get(0).constructor.newInstance(args.toArray());
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalStateException(""String_Node_Str"" + defs.get(0).constructor + ""String_Node_Str""+ Arrays.toString(args.toArray())+ ""String_Node_Str""+ e.getMessage(),e);
  }
}"
59857,"String getName(){
  return name == null ? type.getName() : name.value().getSimpleName();
}","String getName(){
  return name == null ? type.getName() : name.value().getName();
}"
59858,"String getFullyQualifiedName(Class<?> targetClass){
  String name=getName();
  if (!name.contains(""String_Node_Str"")) {
    name=targetClass.getName() + ""String_Node_Str"" + name;
  }
  return name;
}","String getFullyQualifiedName(Class<?> targetClass){
  String name=getName();
  if (!name.contains(""String_Node_Str"")) {
    name=targetClass.getName() + ""String_Node_Str"" + name;
    throw new IllegalStateException(""String_Node_Str"");
  }
  return name;
}"
59859,"public ClassNode(Class<?> clazz,boolean isPrefixTarget){
  super(clazz.getSimpleName());
  boolean injectable=true;
  if (clazz.isLocalClass() || clazz.isMemberClass()) {
    if (!Modifier.isStatic(clazz.getModifiers())) {
      injectable=false;
    }
  }
  this.clazz=clazz;
  this.isPrefixTarget=isPrefixTarget;
  boolean injectAllConstructors=(clazz.getAnnotation(Inject.class) != null);
  Constructor<?>[] constructors=clazz.getConstructors();
  List<ConstructorDef> injectableConstructors=new ArrayList<ConstructorDef>();
  if (injectAllConstructors && !injectable) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz);
  }
  for (int k=0; k < constructors.length; k++) {
    if (injectAllConstructors || null != constructors[k].getAnnotation(Inject.class)) {
      if (!injectable) {
        throw new IllegalArgumentException(""String_Node_Str"" + clazz);
      }
      if (constructors[k].isSynthetic()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      Class<?>[] paramTypes=constructors[k].getParameterTypes();
      Annotation[][] paramAnnotations=constructors[k].getParameterAnnotations();
      if (paramTypes.length != paramAnnotations.length) {
        throw new IllegalStateException();
      }
      ConstructorArg[] args=new ConstructorArg[paramTypes.length];
      for (int i=0; i < paramTypes.length; i++) {
        Parameter named=null;
        for (int j=0; j < paramAnnotations[i].length; j++) {
          Annotation annotation=paramAnnotations[i][j];
          if (annotation instanceof Parameter) {
            named=(Parameter)annotation;
            Node n;
            try {
              n=getNode(named.value());
            }
 catch (            NameResolutionException e) {
              n=buildPathToNode(named.value(),false);
            }
            if (!(n instanceof NamedParameterNode)) {
              throw new IllegalStateException();
            }
            NamedParameterNode np=(NamedParameterNode)n;
            if (!ReflectionUtilities.isCoercable(paramTypes[i],np.argClass)) {
              throw new IllegalArgumentException(""String_Node_Str"" + paramTypes[i] + ""String_Node_Str""+ np.name+ ""String_Node_Str""+ np.argClass);
            }
          }
        }
        args[i]=new ConstructorArg(paramTypes[i],named);
      }
      ConstructorDef def=new ConstructorDef(args,constructors[k]);
      if (injectableConstructors.contains(def)) {
        throw new IllegalStateException(""String_Node_Str"" + clazz + ""String_Node_Str""+ def+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        injectableConstructors.add(def);
      }
    }
  }
  this.injectableConstructors=injectableConstructors.toArray(new ConstructorDef[0]);
}","public ClassNode(Class<?> clazz,boolean isPrefixTarget){
  super(clazz.getSimpleName());
  boolean injectable=true;
  if (clazz.isLocalClass() || clazz.isMemberClass()) {
    if (!Modifier.isStatic(clazz.getModifiers())) {
      injectable=false;
    }
  }
  this.clazz=clazz;
  this.isPrefixTarget=isPrefixTarget;
  boolean injectAllConstructors=(clazz.getAnnotation(Inject.class) != null);
  Constructor<?>[] constructors=clazz.getDeclaredConstructors();
  List<ConstructorDef> injectableConstructors=new ArrayList<ConstructorDef>();
  if (injectAllConstructors && !injectable) {
    throw new IllegalArgumentException(""String_Node_Str"" + clazz);
  }
  for (int k=0; k < constructors.length; k++) {
    if (injectAllConstructors || null != constructors[k].getAnnotation(Inject.class)) {
      if (!injectable) {
        throw new IllegalArgumentException(""String_Node_Str"" + clazz);
      }
      if (constructors[k].isSynthetic()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      Class<?>[] paramTypes=constructors[k].getParameterTypes();
      Annotation[][] paramAnnotations=constructors[k].getParameterAnnotations();
      if (paramTypes.length != paramAnnotations.length) {
        throw new IllegalStateException();
      }
      ConstructorArg[] args=new ConstructorArg[paramTypes.length];
      for (int i=0; i < paramTypes.length; i++) {
        Parameter named=null;
        for (int j=0; j < paramAnnotations[i].length; j++) {
          Annotation annotation=paramAnnotations[i][j];
          if (annotation instanceof Parameter) {
            named=(Parameter)annotation;
            Node n;
            try {
              n=getNode(named.value());
            }
 catch (            NameResolutionException e) {
              n=buildPathToNode(named.value(),false);
            }
            if (!(n instanceof NamedParameterNode)) {
              throw new IllegalStateException();
            }
            NamedParameterNode np=(NamedParameterNode)n;
            if (!ReflectionUtilities.isCoercable(paramTypes[i],np.argClass)) {
              throw new IllegalArgumentException(""String_Node_Str"" + paramTypes[i] + ""String_Node_Str""+ np.name+ ""String_Node_Str""+ np.argClass);
            }
          }
        }
        args[i]=new ConstructorArg(paramTypes[i],named);
      }
      ConstructorDef def=new ConstructorDef(args,constructors[k]);
      if (injectableConstructors.contains(def)) {
        throw new IllegalStateException(""String_Node_Str"" + clazz + ""String_Node_Str""+ def+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        injectableConstructors.add(def);
      }
    }
  }
  this.injectableConstructors=injectableConstructors.toArray(new ConstructorDef[0]);
}"
59860,"ConstructorDef(ConstructorArg[] args,Constructor<?> constructor){
  this.args=args;
  this.constructor=constructor;
  for (int i=0; i < this.args.length; i++) {
    for (int j=i + 1; j < this.args.length; j++) {
      if (this.args[i].toString().equals(this.args[j].toString())) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
}","ConstructorDef(ConstructorArg[] args,Constructor<?> constructor){
  this.args=args;
  this.constructor=constructor;
  constructor.setAccessible(true);
  for (int i=0; i < this.args.length; i++) {
    for (int j=i + 1; j < this.args.length; j++) {
      if (this.args[i].toString().equals(this.args[j].toString())) {
        throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
}"
59861,"public void resolveAllClasses(){
  for (Class<?>[] classes=findUnresolvedClasses(); classes.length > 0; classes=findUnresolvedClasses()) {
    for (    Class<?> c : classes) {
      registerClass(c);
    }
  }
}","public void resolveAllClasses(){
  for (Class<?>[] classes=findUnresolvedClasses(); classes.length > 0; classes=findUnresolvedClasses()) {
    registerClass(classes[0]);
  }
}"
59862,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  float paddingLeft=getPaddingLeft();
  float paddingRight=getPaddingRight();
  float paddingTop=getPaddingTop();
  float paddingBottom=getPaddingBottom();
  float width=getWidth() - (paddingLeft + paddingRight);
  float height=getHeight() - (paddingTop + paddingBottom);
  float radius=(width > height ? width / 2 : height / 2);
  float rectLeft=width / 2 - radius + paddingLeft;
  float rectTop=height / 2 - radius + paddingTop;
  float rectRight=width / 2 - radius + paddingLeft + width;
  float rectBottom=height / 2 - radius + paddingTop + height;
  mRect.set(rectLeft,rectTop,rectRight,rectBottom);
  mPaint.setColor(mStrokeColor);
  mPaint.setShader(null);
  canvas.drawArc(mRect,mStartAngle,mSweepAngle,false,mPaint);
  mPaint.setColor(mPointStartColor);
  mPaint.setShader(new LinearGradient(getWidth(),getHeight(),0,0,mPointEndColor,mPointStartColor,Shader.TileMode.CLAMP));
  if (mPointSize > 0) {
    if (mPoint > mStartAngle + mPointSize / 2) {
      canvas.drawArc(mRect,mPoint - mPointSize / 2,mPointSize,false,mPaint);
    }
 else {
      canvas.drawArc(mRect,mPoint,mPointSize,false,mPaint);
    }
  }
 else {
    if (mValue == mStartValue)     canvas.drawArc(mRect,mStartAngle,DEFAULT_LONG_POINTER_SIZE,false,mPaint);
 else     canvas.drawArc(mRect,mStartAngle,mPoint - mStartAngle,false,mPaint);
  }
  if (mDividerSize > 0) {
    mPaint.setColor(mDividerColor);
    mPaint.setShader(null);
    int i=mDividerDrawFirst ? 0 : 1;
    int max=mDividerDrawLast ? mDividersCount + 1 : mDividersCount;
    for (; i < max; i++) {
      canvas.drawArc(mRect,mStartAngle + i * mDividerStepAngle,mDividerSize,false,mPaint);
    }
  }
}","@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  float padding=getStrokeWidth();
  float size=getWidth() < getHeight() ? getWidth() : getHeight();
  float width=size - (2 * padding);
  float height=size - (2 * padding);
  float radius=(width < height ? width / 2 : height / 2);
  float rectLeft=(getWidth() - (2 * padding)) / 2 - radius + padding;
  float rectTop=(getHeight() - (2 * padding)) / 2 - radius + padding;
  float rectRight=(getWidth() - (2 * padding)) / 2 - radius + padding + width;
  float rectBottom=(getHeight() - (2 * padding)) / 2 - radius + padding + height;
  mRect.set(rectLeft,rectTop,rectRight,rectBottom);
  mPaint.setColor(mStrokeColor);
  mPaint.setShader(null);
  canvas.drawArc(mRect,mStartAngle,mSweepAngle,false,mPaint);
  mPaint.setColor(mPointStartColor);
  mPaint.setShader(new LinearGradient(getWidth(),getHeight(),0,0,mPointEndColor,mPointStartColor,Shader.TileMode.CLAMP));
  if (mPointSize > 0) {
    if (mPoint > mStartAngle + mPointSize / 2) {
      canvas.drawArc(mRect,mPoint - mPointSize / 2,mPointSize,false,mPaint);
    }
 else {
      canvas.drawArc(mRect,mPoint,mPointSize,false,mPaint);
    }
  }
 else {
    if (mValue == mStartValue)     canvas.drawArc(mRect,mStartAngle,DEFAULT_LONG_POINTER_SIZE,false,mPaint);
 else     canvas.drawArc(mRect,mStartAngle,mPoint - mStartAngle,false,mPaint);
  }
  if (mDividerSize > 0) {
    mPaint.setColor(mDividerColor);
    mPaint.setShader(null);
    int i=mDividerDrawFirst ? 0 : 1;
    int max=mDividerDrawLast ? mDividersCount + 1 : mDividersCount;
    for (; i < max; i++) {
      canvas.drawArc(mRect,mStartAngle + i * mDividerStepAngle,mDividerSize,false,mPaint);
    }
  }
}"
59863,"@Override public boolean isItemValidForSlot(int slot,ItemStack itemStack){
  if (itemStack == null) {
    return false;
  }
switch (slot) {
case BASE:
case TARGET:
    return !Carving.chisel.getItemsForChiseling(itemStack).isEmpty();
case OUTPUT:
  return false;
case CHISEL:
return itemStack.getItem() instanceof IChiselItem;
default :
return itemStack.getItem() == ChiselItems.upgrade && Upgrade.values()[slot - MIN_UPGRADE].ordinal() == itemStack.getItemDamage();
}
}","@Override public boolean isItemValidForSlot(int slot,ItemStack itemStack){
  if (itemStack == null) {
    return false;
  }
switch (slot) {
case BASE:
    return true;
case TARGET:
  return false;
case OUTPUT:
return false;
case CHISEL:
return itemStack.getItem() instanceof IChiselItem;
default :
return itemStack.getItem() == ChiselItems.upgrade && Upgrade.values()[slot - MIN_UPGRADE].ordinal() == itemStack.getItemDamage();
}
}"
59864,"@SideOnly(Side.CLIENT) @SuppressWarnings(""String_Node_Str"") @Override public void registerIcons(String modName,Block block,IIconRegister register){
  IIcon base=register.registerIcon(modName + ""String_Node_Str"" + texturePath);
  int wh=(int)Math.sqrt(size);
  TextureSubmap[][] submaps=new TextureSubmap[wh][wh];
  TextureSubmap[][] submapsSmall=new TextureSubmap[wh][wh];
  for (int i=0; i < size; i++) {
    AbstractSubmapManager manager=(AbstractSubmapManager)TextureType.CTMX.createManagerFor(CarvingUtils.getDefaultVariationFor(block,meta,0),texturePath + ""String_Node_Str"" + i);
    manager.registerIcons(modName,block,register);
    Object cached=manager.getCachedObject();
    Triple<IIcon,TextureSubmap,TextureSubmap> triple=(Triple<IIcon,TextureSubmap,TextureSubmap>)cached;
    submaps[i % wh][i / wh]=triple.getMiddle();
    submapsSmall[i % wh][i / wh]=triple.getRight();
    if (i == 0) {
      defaultIcon=triple.getRight().getSubIcon(0,0);
    }
  }
}","@SideOnly(Side.CLIENT) @SuppressWarnings(""String_Node_Str"") @Override public void registerIcons(String modName,Block block,IIconRegister register){
  IIcon base=register.registerIcon(modName + ""String_Node_Str"" + texturePath);
  int wh=(int)Math.sqrt(size);
  TextureSubmap[][] submaps=new TextureSubmap[wh][wh];
  TextureSubmap[][] submapsSmall=new TextureSubmap[wh][wh];
  for (int i=0; i < size; i++) {
    AbstractSubmapManager manager=(AbstractSubmapManager)TextureType.CTMX.createManagerFor(CarvingUtils.getDefaultVariationFor(block,meta,0),texturePath + ""String_Node_Str"" + i);
    manager.registerIcons(modName,block,register);
    Object cached=manager.getCachedObject();
    Triple<IIcon,TextureSubmap,TextureSubmap> triple=(Triple<IIcon,TextureSubmap,TextureSubmap>)cached;
    submaps[i % wh][i / wh]=triple.getMiddle();
    submapsSmall[i % wh][i / wh]=triple.getRight();
    if (i == 0) {
      defaultIcon=triple.getRight().getSubIcon(0,0);
    }
  }
  submap=new Submap(base,wh,submaps);
  smallSubmap=new Submap(base,wh,submapsSmall);
}"
59865,"@Override public boolean hitEntity(ItemStack stack,EntityLivingBase target,EntityLivingBase attacker){
  if (target instanceof EntityPig) {
    double x=target.posX;
    double y=target.posY;
    double z=target.posZ;
    EntityPigZombie zambie=new EntityPigZombie(attacker.worldObj);
    zambie.setAttackTarget(attacker);
    zambie.forceSpawn=true;
    zambie.setLocationAndAngles(x,y,z,0.0F,0.0F);
    attacker.worldObj.spawnEntityInWorld(zambie);
    attacker.attackEntityAsMob(zambie);
    target.setDead();
  }
  stack.damageItem(1,attacker);
  return super.hitEntity(stack,attacker,target);
}","@Override public boolean hitEntity(ItemStack stack,EntityLivingBase target,EntityLivingBase attacker){
  stack.damageItem(1,attacker);
  return super.hitEntity(stack,attacker,target);
}"
59866,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase player,ItemStack stack){
  super.onBlockPlacedBy(world,x,y,z,player,stack);
  int heading=MathHelper.floor_double(player.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  TileEntityPresent te=(TileEntityPresent)world.getTileEntity(x,y,z);
  world.setBlockMetadataWithNotify(x,y,z,stack.getItemDamage(),3);
  te.setRotation(heading);
  te.findConnections();
  if (te.isConnected()) {
    TileEntityPresent other=te.getConnection();
    other.setRotation(heading);
  }
  world.markBlockForUpdate(x,y,z);
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase player,ItemStack stack){
  super.onBlockPlacedBy(world,x,y,z,player,stack);
  int heading=MathHelper.floor_double(player.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  TileEntityPresent te=(TileEntityPresent)world.getTileEntity(x,y,z);
  world.setBlockMetadataWithNotify(x,y,z,stack.getItemDamage(),3);
  te.setRotation(heading);
  if (!world.isRemote) {
    te.findConnections();
    if (te.isConnected()) {
      TileEntityPresent other=te.getConnection();
      other.setRotation(heading);
    }
    world.markBlockForUpdate(x,y,z);
  }
}"
59867,"@Override public ItemStack decrStackSize(int slot,int amount){
  slot=getAdjustedSlot(slot);
  ItemStack[] inv=inventory;
  if (isConnected() && slot >= getTrueSizeInventory()) {
    inv=connection.inventory;
    slot%=getTrueSizeInventory();
  }
  if (inv[slot] != null) {
    ItemStack itemstack;
    if (inv[slot].stackSize <= amount) {
      itemstack=inv[slot];
      inv[slot]=null;
      this.markDirty();
      return itemstack;
    }
 else {
      itemstack=inv[slot].splitStack(amount);
      if (inv[slot].stackSize == 0) {
        inv[slot]=null;
      }
      this.markDirty();
      return itemstack;
    }
  }
 else {
    return null;
  }
}","@Override public ItemStack decrStackSize(int slot,int amount){
  slot=getAdjustedSlot(slot);
  ItemStack[] inv=inventory;
  if (isConnected() && slot >= getTrueSizeInventory()) {
    inv=connection.inventory;
    slot%=getTrueSizeInventory();
    connection.markDirty();
  }
  if (inv[slot] != null) {
    ItemStack itemstack;
    if (inv[slot].stackSize <= amount) {
      itemstack=inv[slot];
      inv[slot]=null;
      this.markDirty();
      return itemstack;
    }
 else {
      itemstack=inv[slot].splitStack(amount);
      if (inv[slot].stackSize == 0) {
        inv[slot]=null;
      }
      this.markDirty();
      return itemstack;
    }
  }
 else {
    return null;
  }
}"
59868,"public void disconnect(){
  if (isConnected()) {
    this.connection.cachedDir=null;
    this.connection.connection=null;
    this.connection.markDirty();
    this.cachedDir=null;
    this.connection=null;
    this.markDirty();
    PacketHandler.INSTANCE.sendToDimension(new MessagePresentConnect(this,ForgeDirection.UNKNOWN,false),worldObj.provider.dimensionId);
  }
}","/** 
 * @param preserveDir If true, this is only a virtual disconnect, meaning the other chest still exists, but is still loaded, so maintain a cachedDir for reconnection upon chunk load.
 */
public void disconnect(boolean preserveDir){
  if (isConnected()) {
    if (!preserveDir) {
      this.connection.cachedDir=null;
      this.cachedDir=null;
    }
    this.connection.connection=null;
    this.connection.markDirty();
    this.connection=null;
    this.markDirty();
    PacketHandler.INSTANCE.sendToDimension(new MessagePresentConnect(this,ForgeDirection.UNKNOWN,false,preserveDir),worldObj.provider.dimensionId);
  }
}"
59869,"@Override public void setInventorySlotContents(int slot,ItemStack stack){
  slot=getAdjustedSlot(slot);
  if (slot < getTrueSizeInventory()) {
    inventory[slot]=stack;
  }
 else   if (isConnected()) {
    connection.inventory[slot % getTrueSizeInventory()]=stack;
  }
}","@Override public void setInventorySlotContents(int slot,ItemStack stack){
  slot=getAdjustedSlot(slot);
  if (slot < getTrueSizeInventory()) {
    inventory[slot]=stack;
  }
 else   if (isConnected()) {
    connection.inventory[slot % getTrueSizeInventory()]=stack;
    connection.markDirty();
  }
}"
59870,"public void findConnections(){
  if (!isConnected()) {
    for (    ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
      if (dir != ForgeDirection.UP && dir != ForgeDirection.DOWN) {
        if (connectTo(dir)) {
          break;
        }
      }
    }
  }
}","public void findConnections(){
  if (!isConnected()) {
    if (cachedDir != null) {
      if (connectTo(cachedDir)) {
        return;
      }
    }
    for (    ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
      if (dir != ForgeDirection.UP && dir != ForgeDirection.DOWN) {
        if (connectTo(dir)) {
          return;
        }
      }
    }
  }
}"
59871,"@Override public void updateEntity(){
  if (isConnected() && connection.isInvalid()) {
    disconnect();
  }
  if (autoSearch && worldObj != null) {
    if (cachedDir != null) {
      connectTo(cachedDir);
    }
 else {
      findConnections();
    }
    autoSearch=false;
  }
}","@Override public void updateEntity(){
  if (!isConnected() && autoSearch && worldObj != null) {
    if (cachedDir != null) {
      connectTo(cachedDir);
    }
 else     if (!worldObj.isRemote) {
      findConnections();
    }
    autoSearch=false;
  }
}"
59872,"public boolean connectTo(ForgeDirection dir){
  TileEntity te=worldObj.getTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
  if (te instanceof TileEntityPresent) {
    return connectTo((TileEntityPresent)te,dir);
  }
  return false;
}","public boolean connectTo(ForgeDirection dir){
  int x=xCoord + dir.offsetX, y=yCoord + dir.offsetY, z=zCoord + dir.offsetZ;
  TileEntity te=getTileSafe(x,y,z);
  if (te instanceof TileEntityPresent) {
    return connectTo((TileEntityPresent)te,dir);
  }
  return !exists(x,y,z);
}"
59873,"@Override public void toBytes(ByteBuf buf){
  super.toBytes(buf);
  buf.writeInt(dir.ordinal());
  buf.writeBoolean(connect);
}","@Override public void toBytes(ByteBuf buf){
  super.toBytes(buf);
  buf.writeInt(dir.ordinal());
  buf.writeBoolean(connect);
  buf.writeBoolean(preserveDir);
}"
59874,"@Override public void fromBytes(ByteBuf buf){
  super.fromBytes(buf);
  dir=ForgeDirection.values()[buf.readInt()];
  connect=buf.readBoolean();
}","@Override public void fromBytes(ByteBuf buf){
  super.fromBytes(buf);
  dir=ForgeDirection.values()[buf.readInt()];
  connect=buf.readBoolean();
  preserveDir=buf.readBoolean();
}"
59875,"@Override public IMessage onMessage(MessagePresentConnect message,MessageContext ctx){
  TileEntity te=message.getTileEntity(ctx);
  if (te instanceof TileEntityPresent) {
    if (message.connect) {
      ((TileEntityPresent)te).connectTo(message.dir);
    }
 else {
      ((TileEntityPresent)te).disconnect();
    }
  }
  return null;
}","@Override public IMessage onMessage(MessagePresentConnect message,MessageContext ctx){
  TileEntity te=message.getTileEntity(ctx);
  if (te instanceof TileEntityPresent) {
    if (message.connect) {
      ((TileEntityPresent)te).connectTo(message.dir);
    }
 else {
      ((TileEntityPresent)te).disconnect(message.preserveDir);
    }
  }
  return null;
}"
59876,"public MessagePresentConnect(TileEntityPresent present,ForgeDirection dir,boolean connecting){
  super(present);
  this.dir=dir;
  this.connect=connecting;
}","public MessagePresentConnect(TileEntityPresent present,ForgeDirection dir,boolean connecting,boolean preserveDir){
  super(present);
  this.dir=dir;
  this.connect=connecting;
  this.preserveDir=preserveDir;
}"
59877,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase player,ItemStack stack){
  super.onBlockPlacedBy(world,x,y,z,player,stack);
  int heading=MathHelper.floor_double(player.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  TileEntityPresent te=(TileEntityPresent)world.getTileEntity(x,y,z);
  world.setBlockMetadataWithNotify(x,y,z,stack.getItemDamage(),3);
  te.setRotation(heading);
  if (!world.isRemote) {
    te.findConnections();
    if (te.isConnected()) {
      TileEntityPresent other=te.getConnection();
      other.setRotation(heading);
    }
    world.markBlockForUpdate(x,y,z);
  }
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase player,ItemStack stack){
  super.onBlockPlacedBy(world,x,y,z,player,stack);
  int heading=MathHelper.floor_double(player.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  TileEntityPresent te=(TileEntityPresent)world.getTileEntity(x,y,z);
  world.setBlockMetadataWithNotify(x,y,z,stack.getItemDamage(),3);
  te.setRotation(heading);
  te.findConnections();
  if (te.isConnected()) {
    TileEntityPresent other=te.getConnection();
    other.setRotation(heading);
  }
  world.markBlockForUpdate(x,y,z);
}"
59878,"public IIcon getIcon(IBlockAccess world,int x,int y,int z,int side){
  int metadata=world.getBlockMetadata(x,y,z);
  if (metadata < 0 || metadata > 15)   metadata=0;
  CarvableVariation variation=map[metadata];
  if (variation == null)   return GeneralClient.getMissingIcon();
switch (variation.kind) {
case NORMAL:
case TOPSIDE:
case TOPBOTSIDE:
    return getIcon(side,metadata);
case CTM3:
  int tex=CTM.getTexture(world,x,y,z,side);
int row=tex / 16;
int col=tex % 16;
return variation.ctm.seams[col / 4].icons[col % 4 + row * 4];
case CTMV:
{
if (side < 2) return variation.iconTop;
Block block=world.getBlock(x,y,z);
boolean topConnected=CTM.isConnected(world,x,y + 1,z,side,block,metadata);
boolean botConnected=CTM.isConnected(world,x,y - 1,z,side,block,metadata);
if (topConnected && botConnected) return variation.seamsCtmVert.icons[2];
if (topConnected && !botConnected) return variation.seamsCtmVert.icons[3];
if (!topConnected && botConnected) return variation.seamsCtmVert.icons[1];
return variation.seamsCtmVert.icons[0];
}
case CTMH:
if (side < 2) return variation.iconTop;
Block block=CTM.getBlockOrFacade(world,x,y,z,side);
boolean p;
boolean n;
boolean reverse=side == 2 || side == 4;
if (side < 4) {
p=CTM.isConnected(world,x - 1,y,z,side,block,metadata);
n=CTM.isConnected(world,x + 1,y,z,side,block,metadata);
}
 else {
p=CTM.isConnected(world,x,y,z - 1,side,block,metadata);
n=CTM.isConnected(world,x,y,z + 1,side,block,metadata);
}
if (p && n) return variation.seamsCtmVert.icons[1];
 else if (p) return variation.seamsCtmVert.icons[reverse ? 2 : 3];
 else if (n) return variation.seamsCtmVert.icons[reverse ? 3 : 2];
return variation.seamsCtmVert.icons[0];
case V9:
case V4:
int variationSize=(variation.kind == V9) ? 3 : 2;
int xModulus=x % variationSize;
int zModulus=z % variationSize;
int textureX=(xModulus < 0) ? (xModulus + variationSize) : xModulus;
int textureZ=(zModulus < 0) ? (zModulus + variationSize) : zModulus;
int textureY=(variationSize - (y % variationSize) - 1);
if (side == 2 || side == 5) {
textureX=(variationSize - textureX - 1);
textureZ=(variationSize - textureZ - 1);
}
int index;
if (side == 0 || side == 1) {
index=textureX + textureZ * variationSize;
}
 else if (side == 2 || side == 3) {
index=textureX + textureY * variationSize;
}
 else {
index=textureZ + textureY * variationSize;
}
return variation.variations9.icons[index];
case CTMX:
return variation.icon;
case R16:
case R9:
case R4:
int indexRan=x + y + z;
if ((side == 2) || (side == 5)) {
indexRan=-indexRan;
}
while (indexRan < 0) {
indexRan=indexRan + 10000;
}
return variation.variations9.icons[indexRan % ((variation.kind == R9) ? 9 : 4)];
}
return GeneralClient.getMissingIcon();
}","public IIcon getIcon(IBlockAccess world,int x,int y,int z,int side){
  int metadata=world.getBlockMetadata(x,y,z);
  if (metadata < 0 || metadata > 15)   metadata=0;
  CarvableVariation variation=map[metadata];
  if (variation == null)   return GeneralClient.getMissingIcon();
switch (variation.kind) {
case NORMAL:
case TOPSIDE:
case TOPBOTSIDE:
    return getIcon(side,metadata);
case CTM3:
  int tex=CTM.getTexture(world,x,y,z,side);
int row=tex / 16;
int col=tex % 16;
return variation.ctm.seams[col / 4].icons[col % 4 + row * 4];
case CTMV:
{
if (side < 2) return variation.iconTop;
Block block=world.getBlock(x,y,z);
boolean topConnected=CTM.isConnected(world,x,y + 1,z,side,block,metadata);
boolean botConnected=CTM.isConnected(world,x,y - 1,z,side,block,metadata);
if (topConnected && botConnected) return variation.seamsCtmVert.icons[2];
if (topConnected && !botConnected) return variation.seamsCtmVert.icons[3];
if (!topConnected && botConnected) return variation.seamsCtmVert.icons[1];
return variation.seamsCtmVert.icons[0];
}
case CTMH:
if (side < 2) return variation.iconTop;
Block block=CTM.getBlockOrFacade(world,x,y,z,side);
boolean p;
boolean n;
boolean reverse=side == 2 || side == 5;
if (side < 4) {
p=CTM.isConnected(world,x - 1,y,z,side,block,metadata);
n=CTM.isConnected(world,x + 1,y,z,side,block,metadata);
}
 else {
p=CTM.isConnected(world,x,y,z - 1,side,block,metadata);
n=CTM.isConnected(world,x,y,z + 1,side,block,metadata);
}
if (p && n) return variation.seamsCtmVert.icons[1];
 else if (p) return variation.seamsCtmVert.icons[reverse ? 2 : 3];
 else if (n) return variation.seamsCtmVert.icons[reverse ? 3 : 2];
return variation.seamsCtmVert.icons[0];
case V9:
case V4:
int variationSize=(variation.kind == V9) ? 3 : 2;
int xModulus=x % variationSize;
int zModulus=z % variationSize;
int textureX=(xModulus < 0) ? (xModulus + variationSize) : xModulus;
int textureZ=(zModulus < 0) ? (zModulus + variationSize) : zModulus;
int textureY=(variationSize - (y % variationSize) - 1);
if (side == 2 || side == 5) {
textureX=(variationSize - textureX - 1);
textureZ=(variationSize - textureZ - 1);
}
int index;
if (side == 0 || side == 1) {
index=textureX + textureZ * variationSize;
}
 else if (side == 2 || side == 3) {
index=textureX + textureY * variationSize;
}
 else {
index=textureZ + textureY * variationSize;
}
return variation.variations9.icons[index];
case CTMX:
return variation.icon;
case R16:
case R9:
case R4:
int indexRan=x + y + z;
if ((side == 2) || (side == 5)) {
indexRan=-indexRan;
}
while (indexRan < 0) {
indexRan=indexRan + 10000;
}
return variation.variations9.icons[indexRan % ((variation.kind == R9) ? 9 : 4)];
}
return GeneralClient.getMissingIcon();
}"
59879,"@Override public CarvableVariation getVariation(ItemStack stack){
  return carverHelper.getVariation(stack.getItemDamage());
}","@Override public CarvableVariation getVariation(ItemStack stack){
  return carverHelper.getVariation(blockMeta + (stack.getItemDamage() / 8));
}"
59880,"@Override public void onBlockPlacedBy(World par1World,int par2,int par3,int par4,EntityLivingBase par5EntityLiving,ItemStack par6ItemStack){
  int meta=MathHelper.floor_double((par5EntityLiving.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
  meta=meta == 0 ? 2 : meta == 2 ? 3 : meta == 3 ? 0 : 1;
  meta+=par1World.getBlockMetadata(par2,par3,par4) % 8;
  par1World.setBlockMetadataWithNotify(par2,par3,par4,meta,2);
}","@Override public void onBlockPlacedBy(World par1World,int par2,int par3,int par4,EntityLivingBase par5EntityLiving,ItemStack par6ItemStack){
  int meta=MathHelper.floor_double((par5EntityLiving.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
  meta=meta == 0 ? 2 : meta == 2 ? 3 : meta == 3 ? 0 : 1;
  meta+=par1World.getBlockMetadata(par2,par3,par4) % 8;
  if (par6ItemStack.getItemDamage() >= 8) {
    meta+=8;
  }
  par1World.setBlockMetadataWithNotify(par2,par3,par4,meta,2);
}"
59881,"public AxisAlignedBB getBoundingBox(TileEntityPresent me){
  if (me == null) {
    return AxisAlignedBB.getBoundingBox(minX,minY,minZ,maxX,maxY,maxZ);
  }
  int x=me.xCoord, y=me.yCoord, z=me.zCoord;
  if (me.isConnected()) {
    ForgeDirection dir=me.getConnectionDir();
    if (dir != ForgeDirection.NORTH && (!me.isParent() || dir == ForgeDirection.SOUTH)) {
      return AxisAlignedBB.getBoundingBox(x + minX,y + minY,z + minZ,x + maxX + dir.offsetX,y + maxY,z + maxZ + dir.offsetZ);
    }
 else {
      return AxisAlignedBB.getBoundingBox(x + dir.offsetX + minX,y + minY,z + dir.offsetZ + minZ,x + maxX,y + maxY,z + maxZ);
    }
  }
  return AxisAlignedBB.getBoundingBox(x + minX,y + minY,z + minZ,x + maxX,y + maxY,z + maxZ);
}","public AxisAlignedBB getBoundingBox(TileEntityPresent me){
  if (me == null) {
    System.out.println(-1);
    return AxisAlignedBB.getBoundingBox(minX,minY,minZ,maxX,maxY,maxZ);
  }
  int x=me.xCoord, y=me.yCoord, z=me.zCoord;
  if (me.isConnected()) {
    ForgeDirection dir=me.getConnectionDir();
    if (dir == ForgeDirection.EAST || (me.isParent() && dir == ForgeDirection.SOUTH) || (!me.isParent() && dir == ForgeDirection.SOUTH)) {
      return AxisAlignedBB.getBoundingBox(x + minX,y + minY,z + minZ,x + maxX + dir.offsetX,y + maxY,z + maxZ + dir.offsetZ);
    }
 else {
      return AxisAlignedBB.getBoundingBox(x + dir.offsetX + minX,y + minY,z + dir.offsetZ + minZ,x + maxX,y + maxY,z + maxZ);
    }
  }
  return AxisAlignedBB.getBoundingBox(x + minX,y + minY,z + minZ,x + maxX,y + maxY,z + maxZ);
}"
59882,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase player,ItemStack stack){
  super.onBlockPlacedBy(world,x,y,z,player,stack);
  int heading=MathHelper.floor_double(player.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  TileEntityPresent te=(TileEntityPresent)world.getTileEntity(x,y,z);
  world.setBlockMetadataWithNotify(x,y,z,heading,3);
  te.findConnections();
  if (te.isConnected()) {
    TileEntityPresent other=te.getConnection();
    world.setBlockMetadataWithNotify(other.xCoord,other.yCoord,other.zCoord,heading,3);
  }
  te.setType(stack.getItemDamage());
  world.markBlockForUpdate(x,y,z);
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase player,ItemStack stack){
  super.onBlockPlacedBy(world,x,y,z,player,stack);
  int heading=MathHelper.floor_double(player.rotationYaw * 4.0F / 360.0F + 0.5D) & 3;
  TileEntityPresent te=(TileEntityPresent)world.getTileEntity(x,y,z);
  world.setBlockMetadataWithNotify(x,y,z,stack.getItemDamage(),3);
  te.setRotation(heading);
  te.findConnections();
  if (te.isConnected()) {
    TileEntityPresent other=te.getConnection();
    other.setRotation(heading);
  }
  world.markBlockForUpdate(x,y,z);
}"
59883,"@Override public void breakBlock(World world,int x,int y,int z,Block present,int meta){
  TileEntityPresent tileEntityPresent=(TileEntityPresent)world.getTileEntity(x,y,z);
  if (tileEntityPresent != null) {
    for (int c=0; c < tileEntityPresent.getSizeInventory(); c++) {
      ItemStack itemStack=tileEntityPresent.getStackInSlot(c);
      if (itemStack != null) {
        dropBlockAsItem(world,x,y,z,itemStack);
      }
    }
    world.func_147453_f(x,y,z,this);
  }
  super.breakBlock(world,x,y,z,this,meta);
}","@Override public void breakBlock(World world,int x,int y,int z,Block present,int meta){
  TileEntityPresent tileEntityPresent=(TileEntityPresent)world.getTileEntity(x,y,z);
  if (tileEntityPresent != null) {
    for (int c=0; c < tileEntityPresent.getTrueSizeInventory(); c++) {
      ItemStack itemStack=tileEntityPresent.getTrueStackInSlot(c);
      if (itemStack != null) {
        dropBlockAsItem(world,x,y,z,itemStack);
      }
    }
    world.func_147453_f(x,y,z,this);
  }
  super.breakBlock(world,x,y,z,this,meta);
}"
59884,"@Override public void readFromNBT(NBTTagCompound tag){
  super.readFromNBT(tag);
  NBTTagList nbttaglist=tag.getTagList(""String_Node_Str"",10);
  inventory=new ItemStack[this.getSizeInventory()];
  for (int i=0; i < nbttaglist.tagCount(); ++i) {
    NBTTagCompound nbttagcompound1=nbttaglist.getCompoundTagAt(i);
    int j=nbttagcompound1.getByte(""String_Node_Str"") & 255;
    if (j >= 0 && j < inventory.length) {
      inventory[j]=ItemStack.loadItemStackFromNBT(nbttagcompound1);
    }
  }
  this.isParent=tag.getBoolean(""String_Node_Str"");
  this.type=tag.getInteger(""String_Node_Str"");
  if (tag.hasKey(""String_Node_Str"")) {
    cachedDir=ForgeDirection.values()[tag.getInteger(""String_Node_Str"")];
  }
  autoSearch=true;
}","@Override public void readFromNBT(NBTTagCompound tag){
  super.readFromNBT(tag);
  NBTTagList nbttaglist=tag.getTagList(""String_Node_Str"",10);
  for (int i=0; i < nbttaglist.tagCount(); ++i) {
    NBTTagCompound nbttagcompound1=nbttaglist.getCompoundTagAt(i);
    int j=nbttagcompound1.getByte(""String_Node_Str"") & 255;
    if (j >= 0 && j < getTrueSizeInventory()) {
      inventory[j]=ItemStack.loadItemStackFromNBT(nbttagcompound1);
    }
  }
  this.isParent=tag.getBoolean(""String_Node_Str"");
  this.rotation=tag.getInteger(""String_Node_Str"");
  if (tag.hasKey(""String_Node_Str"")) {
    cachedDir=ForgeDirection.values()[tag.getInteger(""String_Node_Str"")];
  }
  autoSearch=true;
}"
59885,"@Override public ItemStack decrStackSize(int slot,int amount){
  ItemStack[] inv=inventory;
  if (isConnected() && slot >= inventory.length) {
    inv=connection.inventory;
    slot%=inventory.length;
  }
  if (inv[slot] != null) {
    ItemStack itemstack;
    if (inv[slot].stackSize <= amount) {
      itemstack=inv[slot];
      inv[slot]=null;
      this.markDirty();
      return itemstack;
    }
 else {
      itemstack=inv[slot].splitStack(amount);
      if (inv[slot].stackSize == 0) {
        inv[slot]=null;
      }
      this.markDirty();
      return itemstack;
    }
  }
 else {
    return null;
  }
}","@Override public ItemStack decrStackSize(int slot,int amount){
  slot=getAdjustedSlot(slot);
  ItemStack[] inv=inventory;
  if (isConnected() && slot >= getTrueSizeInventory()) {
    inv=connection.inventory;
    slot%=getTrueSizeInventory();
  }
  if (inv[slot] != null) {
    ItemStack itemstack;
    if (inv[slot].stackSize <= amount) {
      itemstack=inv[slot];
      inv[slot]=null;
      this.markDirty();
      return itemstack;
    }
 else {
      itemstack=inv[slot].splitStack(amount);
      if (inv[slot].stackSize == 0) {
        inv[slot]=null;
      }
      this.markDirty();
      return itemstack;
    }
  }
 else {
    return null;
  }
}"
59886,"public void disconnect(){
  if (isConnected()) {
    this.connection.cachedDir=null;
    this.connection.connection=null;
    this.cachedDir=null;
    this.connection=null;
    PacketHandler.INSTANCE.sendToDimension(new MessagePresentConnect(this,ForgeDirection.UNKNOWN,false),worldObj.provider.dimensionId);
  }
}","public void disconnect(){
  if (isConnected()) {
    this.connection.cachedDir=null;
    this.connection.connection=null;
    this.connection.markDirty();
    this.cachedDir=null;
    this.connection=null;
    this.markDirty();
    PacketHandler.INSTANCE.sendToDimension(new MessagePresentConnect(this,ForgeDirection.UNKNOWN,false),worldObj.provider.dimensionId);
  }
}"
59887,"@Override public void setInventorySlotContents(int slot,ItemStack stack){
  if (slot < inventory.length) {
    inventory[slot]=stack;
  }
 else   if (isConnected()) {
    connection.inventory[slot % inventory.length]=stack;
  }
}","@Override public void setInventorySlotContents(int slot,ItemStack stack){
  slot=getAdjustedSlot(slot);
  if (slot < getTrueSizeInventory()) {
    inventory[slot]=stack;
  }
 else   if (isConnected()) {
    connection.inventory[slot % getTrueSizeInventory()]=stack;
  }
}"
59888,"@Override public void writeToNBT(NBTTagCompound tag){
  super.writeToNBT(tag);
  NBTTagList nbttaglist=new NBTTagList();
  for (int i=0; i < inventory.length; ++i) {
    if (inventory[i] != null) {
      NBTTagCompound nbttagcompound1=new NBTTagCompound();
      nbttagcompound1.setByte(""String_Node_Str"",(byte)i);
      inventory[i].writeToNBT(nbttagcompound1);
      nbttaglist.appendTag(nbttagcompound1);
    }
  }
  tag.setTag(""String_Node_Str"",nbttaglist);
  tag.setBoolean(""String_Node_Str"",isParent);
  tag.setInteger(""String_Node_Str"",type);
  if (cachedDir != null) {
    tag.setInteger(""String_Node_Str"",cachedDir.ordinal());
  }
}","@Override public void writeToNBT(NBTTagCompound tag){
  super.writeToNBT(tag);
  NBTTagList nbttaglist=new NBTTagList();
  for (int i=0; i < getTrueSizeInventory(); ++i) {
    if (inventory[i] != null) {
      NBTTagCompound nbttagcompound1=new NBTTagCompound();
      nbttagcompound1.setByte(""String_Node_Str"",(byte)i);
      inventory[i].writeToNBT(nbttagcompound1);
      nbttaglist.appendTag(nbttagcompound1);
    }
  }
  tag.setTag(""String_Node_Str"",nbttaglist);
  tag.setBoolean(""String_Node_Str"",isParent);
  tag.setInteger(""String_Node_Str"",rotation);
  if (cachedDir != null) {
    tag.setInteger(""String_Node_Str"",cachedDir.ordinal());
  }
}"
59889,"@Override public ItemStack getStackInSlot(int slot){
  if (slot >= inventory.length) {
    return isConnected() ? connection.inventory[slot % inventory.length] : null;
  }
 else {
    return inventory[slot];
  }
}","@Override public ItemStack getStackInSlot(int slot){
  slot=getAdjustedSlot(slot);
  if (slot >= getTrueSizeInventory()) {
    return isConnected() ? connection.inventory[slot % getTrueSizeInventory()] : null;
  }
 else {
    return inventory[slot];
  }
}"
59890,"@Override public int getSizeInventory(){
  return isConnected() ? inventory.length + connection.inventory.length : inventory.length;
}","@Override public int getSizeInventory(){
  return isConnected() ? getTrueSizeInventory() + connection.getTrueSizeInventory() : getTrueSizeInventory();
}"
59891,"private void bindTexture(TileEntityPresent present){
  int idx=present.getType() + (present.isConnected() ? 0 : 16);
  ResourceLocation rl=textureCache.get(idx);
  if (rl == null) {
    String res=ChiselBlocks.present.getModelTexture(present.getType());
    res+=present.isConnected() ? ""String_Node_Str"" : ""String_Node_Str"";
    rl=new ResourceLocation(""String_Node_Str"",res);
    textureCache.put(idx,rl);
  }
  bindTexture(rl);
}","private void bindTexture(TileEntityPresent present){
  int idx=present.getWorldObj().getBlockMetadata(present.xCoord,present.yCoord,present.zCoord) + (present.isConnected() ? 0 : 16);
  ResourceLocation rl=textureCache.get(idx);
  if (rl == null) {
    String res=ChiselBlocks.present.getModelTexture(idx % 16);
    res+=present.isConnected() ? ""String_Node_Str"" : ""String_Node_Str"";
    rl=new ResourceLocation(""String_Node_Str"",res);
    textureCache.put(idx,rl);
  }
  bindTexture(rl);
}"
59892,"public BlockCarvableIcePillar(Material m){
  super(m);
  this.slipperiness=0.98F;
  this.setTickRandomly(true);
}","public BlockCarvableIcePillar(Material m){
  super(m);
  this.slipperiness=0.98F;
  this.setTickRandomly(true);
  setStained(true);
}"
59893,"/** 
 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given coordinates.  Args: blockAccess, x, y, z, side
 */
@SideOnly(Side.CLIENT) public boolean shouldSideBeRendered(IBlockAccess p_149646_1_,int p_149646_2_,int p_149646_3_,int p_149646_4_,int p_149646_5_){
  return super.shouldSideBeRendered(p_149646_1_,p_149646_2_,p_149646_3_,p_149646_4_,1 - p_149646_5_);
}","/** 
 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given coordinates. Args: blockAccess, x, y, z, side
 */
@SideOnly(Side.CLIENT) public boolean shouldSideBeRendered(IBlockAccess p_149646_1_,int p_149646_2_,int p_149646_3_,int p_149646_4_,int p_149646_5_){
  Block block=p_149646_1_.getBlock(p_149646_2_,p_149646_3_,p_149646_4_);
  return block == this ? false : super.shouldSideBeRendered(p_149646_1_,p_149646_2_,p_149646_3_,p_149646_4_,p_149646_5_);
}"
59894,"public void create(IStairsCreator creator,String name,Block[] blocks){
  for (int i=0; i < blocks.length; i++) {
    String n=name + ""String_Node_Str"" + i;
    blocks[i]=creator == null ? new BlockCarvableStairs(blockBase,i * 2,carverHelper) : creator.create(blockBase,i * 2,carverHelper);
    blocks[i].setBlockName(n);
    GameRegistry.registerBlock(blocks[i],ItemCarvable.class,n);
    for (int meta=0; meta < 2 && i * 2 + meta < carverHelper.variations.size(); meta++) {
      CarvableVariation variation=carverHelper.variations.get(i * 2 + meta);
      carverHelper.registerVariation(name,variation,blocks[i],meta * 8);
      GameRegistry.addRecipe(new ItemStack(blocks[i],4,meta * 8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(blockBase,1,i * 2 + meta));
    }
  }
}","public void create(IStairsCreator creator,String name,Block[] blocks){
  for (int i=0; i < blocks.length; i++) {
    String n=name + ""String_Node_Str"" + i;
    blocks[i]=creator == null ? new BlockCarvableStairs(blockBase,i * 2,carverHelper) : creator.create(blockBase,i * 2,carverHelper);
    blocks[i].setBlockName(""String_Node_Str"" + n);
    GameRegistry.registerBlock(blocks[i],ItemCarvable.class,n);
    for (int meta=0; meta < 2 && i * 2 + meta < carverHelper.variations.size(); meta++) {
      CarvableVariation variation=carverHelper.variations.get(i * 2 + meta);
      carverHelper.registerVariation(name,variation,blocks[i],meta * 8);
      GameRegistry.addRecipe(new ItemStack(blocks[i],4,meta * 8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(blockBase,1,i * 2 + meta));
    }
  }
}"
59895,"/** 
 * Removes a varaition with the passed   {@link Block} and metadata from this group.
 * @param block The  {@link Block} of the {@link ICarvingVariation variation}
 * @param metadata The metadata of the  {@link ICarvingVariation variation}
 * @return The ICarvingVariation that was removed. Null if nothing was removed.
 */
ICarvingVariation removeVariation(Block block,int metadata);","/** 
 * Removes a variation to this group. Do not call this from external code, as it will fail to remove the inverse lookup from the registry.
 * @param variation An  {@link ICarvingVariation} to add to this group
 */
boolean removeVariation(ICarvingVariation variation);"
59896,"/** 
 * Adds a variation to this group.
 * @param variation An  {@link ICarvingVariation} to add to this group
 */
void addVariation(ICarvingVariation variation);","/** 
 * Adds a variation to this group. Do not call this from external code, as it will fail to remove the inverse lookup from the registry.
 * @param variation An  {@link ICarvingVariation} to add to this group
 */
void addVariation(ICarvingVariation variation);"
59897,"@Override public ICarvingVariation removeVariation(Block block,int metadata){
  ICarvingVariation toRemove=null;
  for (  ICarvingVariation v : variations) {
    if (v.getBlock() == block && v.getBlockMeta() == metadata) {
      toRemove=v;
    }
  }
  return toRemove == null ? null : variations.remove(toRemove) ? toRemove : null;
}","@Override public boolean removeVariation(ICarvingVariation variation){
  ICarvingVariation toRemove=null;
  for (  ICarvingVariation v : variations) {
    if (v.getBlock() == variation.getBlock() && v.getBlockMeta() == variation.getBlockMeta()) {
      toRemove=v;
    }
  }
  return toRemove == null ? false : variations.remove(toRemove);
}"
59898,"@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block b,int modelId,RenderBlocks renderer){
  BlockPane block=(BlockPane)b;
  Tessellator tessellator=Tessellator.instance;
  tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
  float f=1.0F;
  int i1=block.colorMultiplier(world,x,y,z);
  float f1=(i1 >> 16 & 255) / 255.0F;
  float f2=(i1 >> 8 & 255) / 255.0F;
  float f3=(i1 & 255) / 255.0F;
  if (EntityRenderer.anaglyphEnable) {
    float f4=(f1 * 30.0F + f2 * 59.0F + f3 * 11.0F) / 100.0F;
    float f5=(f1 * 30.0F + f2 * 70.0F) / 100.0F;
    float f6=(f1 * 30.0F + f3 * 70.0F) / 100.0F;
    f1=f4;
    f2=f5;
    f3=f6;
  }
  tessellator.setColorOpaque_F(f * f1,f * f2,f * f3);
  int meta=world.getBlockMetadata(x,y,z);
  IIcon iconPane=block.getIcon(2,meta);
  IIcon iconTop=block.getIcon(1,meta);
  IIcon iconSide=block.getIcon(0,meta);
  if (iconPane == null || iconTop == null || iconSide == null)   return false;
  paneRenderer.set(x,y,z,iconPane,iconTop,iconSide);
  boolean connectsNorth=block.canPaneConnectToBlock(world.getBlock(x,y,z - 1));
  boolean connectsSouth=block.canPaneConnectToBlock(world.getBlock(x,y,z + 1));
  boolean connectsWest=block.canPaneConnectToBlock(world.getBlock(x - 1,y,z));
  boolean connectsEast=block.canPaneConnectToBlock(world.getBlock(x + 1,y,z));
  boolean connectsTop=block.canPaneConnectToBlock(world.getBlock(x,y + 1,z));
  boolean connectsBottom=block.canPaneConnectToBlock(world.getBlock(x,y - 1,z));
  boolean connectsTopNorth=block.canPaneConnectToBlock(world.getBlock(x,y + 1,z - 1));
  boolean connectsTopSouth=block.canPaneConnectToBlock(world.getBlock(x,y + 1,z + 1));
  boolean connectsTopWest=block.canPaneConnectToBlock(world.getBlock(x - 1,y + 1,z));
  boolean connectsTopEast=block.canPaneConnectToBlock(world.getBlock(x + 1,y + 1,z));
  boolean connectsBottomNorth=block.canPaneConnectToBlock(world.getBlock(x,y - 1,z - 1));
  boolean connectsBottomSouth=block.canPaneConnectToBlock(world.getBlock(x,y - 1,z + 1));
  boolean connectsBottomWest=block.canPaneConnectToBlock(world.getBlock(x - 1,y - 1,z));
  boolean connectsBottomEast=block.canPaneConnectToBlock(world.getBlock(x + 1,y - 1,z));
  boolean isolatedTop=!connectsTopNorth && !connectsTopSouth && !connectsTopWest&& !connectsTopEast;
  boolean isolatedBottom=!connectsBottomNorth && !connectsBottomSouth && !connectsBottomWest&& !connectsBottomEast;
  if (!connectsNorth && !connectsSouth && !connectsWest&& !connectsEast) {
    connectsNorth=connectsSouth=connectsWest=connectsEast=true;
  }
  int connections=0;
  if (connectsNorth) {
    paneRenderer.renderNorthPane();
    if (!connectsBottom || !connectsBottomNorth && !isolatedBottom)     paneRenderer.renderVerticalNS(-0.0003,0.0,0.5,0.5,0.0);
    if (!connectsTop || !connectsTopNorth && !isolatedTop)     paneRenderer.renderVerticalNS(+1.0003,0.0,0.5,0.5,0.0);
    connections++;
  }
  if (connectsSouth) {
    paneRenderer.renderSouthPane();
    if (!connectsBottom || !connectsBottomSouth && !isolatedBottom)     paneRenderer.renderVerticalNS(-0.0004,0.5,1.0,1.0,0.5);
    if (!connectsTop || !connectsTopSouth && !isolatedTop)     paneRenderer.renderVerticalNS(+1.0004,0.5,1.0,1.0,0.5);
    connections++;
  }
  if (connectsWest) {
    paneRenderer.renderWestPane();
    if (!connectsBottom || !connectsBottomWest && !isolatedBottom)     paneRenderer.renderVerticalWE(-0.0001,0.0,0.5,0.5,0.0);
    if (!connectsTop || !connectsTopWest && !isolatedTop)     paneRenderer.renderVerticalWE(+1.0001,0.0,0.5,0.5,0.0);
    connections++;
  }
  if (connectsEast) {
    paneRenderer.renderEastPane();
    if (!connectsBottom || !connectsBottomEast && !isolatedBottom)     paneRenderer.renderVerticalWE(-0.0002,0.5,1.0,1.0,0.5);
    if (!connectsTop || !connectsTopEast && !isolatedTop)     paneRenderer.renderVerticalWE(+1.0002,0.5,1.0,1.0,0.5);
    connections++;
  }
  if (connections == 1) {
    if (connectsNorth)     paneRenderer.renderHorizontalNS(0.5,1.0,0.0);
    if (connectsSouth)     paneRenderer.renderHorizontalNS(0.5,0.0,1.0);
    if (connectsEast)     paneRenderer.renderHorizontalWE(0.5,0.0,1.0);
    if (connectsWest)     paneRenderer.renderHorizontalWE(0.5,1.0,0.0);
  }
 else   if (connections == 4) {
    paneRenderer.renderHorizontalNS(0.0,1.0,0.0);
    paneRenderer.renderHorizontalNS(1.0,0.0,1.0);
    paneRenderer.renderHorizontalWE(0.0,0.0,1.0);
    paneRenderer.renderHorizontalWE(1.0,1.0,0.0);
  }
  return true;
}","@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block b,int modelId,RenderBlocks renderer){
  BlockPane block=(BlockPane)b;
  Tessellator tessellator=Tessellator.instance;
  tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
  float f=1.0F;
  int i1=block.colorMultiplier(world,x,y,z);
  float f1=(i1 >> 16 & 255) / 255.0F;
  float f2=(i1 >> 8 & 255) / 255.0F;
  float f3=(i1 & 255) / 255.0F;
  if (EntityRenderer.anaglyphEnable) {
    float f4=(f1 * 30.0F + f2 * 59.0F + f3 * 11.0F) / 100.0F;
    float f5=(f1 * 30.0F + f2 * 70.0F) / 100.0F;
    float f6=(f1 * 30.0F + f3 * 70.0F) / 100.0F;
    f1=f4;
    f2=f5;
    f3=f6;
  }
  tessellator.setColorOpaque_F(f * f1,f * f2,f * f3);
  int meta=world.getBlockMetadata(x,y,z);
  IIcon iconPane=block.getIcon(2,meta);
  IIcon iconTop=block.getIcon(1,meta);
  IIcon iconSide=block.getIcon(0,meta);
  if (iconPane == null || iconTop == null || iconSide == null)   return false;
  if (renderer.hasOverrideBlockTexture()) {
    paneRenderer.set(x,y,z,renderer.overrideBlockTexture,renderer.overrideBlockTexture,renderer.overrideBlockTexture);
  }
 else {
    paneRenderer.set(x,y,z,iconPane,iconTop,iconSide);
  }
  boolean connectsNorth=block.canPaneConnectToBlock(world.getBlock(x,y,z - 1));
  boolean connectsSouth=block.canPaneConnectToBlock(world.getBlock(x,y,z + 1));
  boolean connectsWest=block.canPaneConnectToBlock(world.getBlock(x - 1,y,z));
  boolean connectsEast=block.canPaneConnectToBlock(world.getBlock(x + 1,y,z));
  boolean connectsTop=block.canPaneConnectToBlock(world.getBlock(x,y + 1,z));
  boolean connectsBottom=block.canPaneConnectToBlock(world.getBlock(x,y - 1,z));
  boolean connectsTopNorth=block.canPaneConnectToBlock(world.getBlock(x,y + 1,z - 1));
  boolean connectsTopSouth=block.canPaneConnectToBlock(world.getBlock(x,y + 1,z + 1));
  boolean connectsTopWest=block.canPaneConnectToBlock(world.getBlock(x - 1,y + 1,z));
  boolean connectsTopEast=block.canPaneConnectToBlock(world.getBlock(x + 1,y + 1,z));
  boolean connectsBottomNorth=block.canPaneConnectToBlock(world.getBlock(x,y - 1,z - 1));
  boolean connectsBottomSouth=block.canPaneConnectToBlock(world.getBlock(x,y - 1,z + 1));
  boolean connectsBottomWest=block.canPaneConnectToBlock(world.getBlock(x - 1,y - 1,z));
  boolean connectsBottomEast=block.canPaneConnectToBlock(world.getBlock(x + 1,y - 1,z));
  boolean isolatedTop=!connectsTopNorth && !connectsTopSouth && !connectsTopWest&& !connectsTopEast;
  boolean isolatedBottom=!connectsBottomNorth && !connectsBottomSouth && !connectsBottomWest&& !connectsBottomEast;
  if (!connectsNorth && !connectsSouth && !connectsWest&& !connectsEast) {
    connectsNorth=connectsSouth=connectsWest=connectsEast=true;
  }
  int connections=0;
  if (connectsNorth) {
    paneRenderer.renderNorthPane();
    if (!connectsBottom || !connectsBottomNorth && !isolatedBottom)     paneRenderer.renderVerticalNS(-0.0003,0.0,0.5,0.5,0.0);
    if (!connectsTop || !connectsTopNorth && !isolatedTop)     paneRenderer.renderVerticalNS(+1.0003,0.0,0.5,0.5,0.0);
    connections++;
  }
  if (connectsSouth) {
    paneRenderer.renderSouthPane();
    if (!connectsBottom || !connectsBottomSouth && !isolatedBottom)     paneRenderer.renderVerticalNS(-0.0004,0.5,1.0,1.0,0.5);
    if (!connectsTop || !connectsTopSouth && !isolatedTop)     paneRenderer.renderVerticalNS(+1.0004,0.5,1.0,1.0,0.5);
    connections++;
  }
  if (connectsWest) {
    paneRenderer.renderWestPane();
    if (!connectsBottom || !connectsBottomWest && !isolatedBottom)     paneRenderer.renderVerticalWE(-0.0001,0.0,0.5,0.5,0.0);
    if (!connectsTop || !connectsTopWest && !isolatedTop)     paneRenderer.renderVerticalWE(+1.0001,0.0,0.5,0.5,0.0);
    connections++;
  }
  if (connectsEast) {
    paneRenderer.renderEastPane();
    if (!connectsBottom || !connectsBottomEast && !isolatedBottom)     paneRenderer.renderVerticalWE(-0.0002,0.5,1.0,1.0,0.5);
    if (!connectsTop || !connectsTopEast && !isolatedTop)     paneRenderer.renderVerticalWE(+1.0002,0.5,1.0,1.0,0.5);
    connections++;
  }
  if (connections == 1) {
    if (connectsNorth)     paneRenderer.renderHorizontalNS(0.5,1.0,0.0);
    if (connectsSouth)     paneRenderer.renderHorizontalNS(0.5,0.0,1.0);
    if (connectsEast)     paneRenderer.renderHorizontalWE(0.5,0.0,1.0);
    if (connectsWest)     paneRenderer.renderHorizontalWE(0.5,1.0,0.0);
  }
 else   if (connections == 4) {
    paneRenderer.renderHorizontalNS(0.0,1.0,0.0);
    paneRenderer.renderHorizontalNS(1.0,0.0,1.0);
    paneRenderer.renderHorizontalWE(0.0,0.0,1.0);
    paneRenderer.renderHorizontalWE(1.0,1.0,0.0);
  }
  return true;
}"
59899,"@EventHandler public void init(FMLInitializationEvent event){
  Features.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(this,new ChiselGuiHandler());
  registerWorldgen(Features.MARBLE,ChiselBlocks.marble,Configurations.marbleAmount);
  registerWorldgen(Features.LIMESTONE,ChiselBlocks.limestone,Configurations.limestoneAmount);
  registerWorldgen(Features.ANDESITE,ChiselBlocks.andesite,Configurations.andesiteAmount);
  registerWorldgen(Features.GRANITE,ChiselBlocks.granite,Configurations.graniteAmount);
  registerWorldgen(Features.DIORITE,ChiselBlocks.diorite,Configurations.dioriteAmount);
  proxy.init();
  MinecraftForge.EVENT_BUS.register(this);
  FMLCommonHandler.instance().bus().register(instance);
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","@EventHandler public void init(FMLInitializationEvent event){
  Features.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(this,new ChiselGuiHandler());
  addWorldgen(Features.MARBLE,ChiselBlocks.marble,Configurations.marbleAmount);
  addWorldgen(Features.LIMESTONE,ChiselBlocks.limestone,Configurations.limestoneAmount);
  addWorldgen(Features.ANDESITE,ChiselBlocks.andesite,Configurations.andesiteAmount,40,100,0.5);
  addWorldgen(Features.GRANITE,ChiselBlocks.granite,Configurations.graniteAmount,40,100,0.5);
  addWorldgen(Features.DIORITE,ChiselBlocks.diorite,Configurations.dioriteAmount,40,100,0.5);
  GameRegistry.registerWorldGenerator(GeneratorChisel.INSTANCE,1000);
  proxy.init();
  MinecraftForge.EVENT_BUS.register(this);
  FMLCommonHandler.instance().bus().register(instance);
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
59900,"protected void genStandardOre(World world,Random random,int x,int z,int bot,int top){
  for (int l=0; l < amount; ++l) {
    int i1=x + random.nextInt(16);
    int j1=bot + random.nextInt(top - bot);
    int k1=z + random.nextInt(16);
    gen.generate(world,random,i1,j1,k1);
  }
}","protected void genStandardOre(WorldGenMinable gen,WorldGenInfo info,World world,Random random,int x,int z){
  for (int l=0; l < info.amount; ++l) {
    if (random.nextDouble() < info.chance) {
      int avgX=x + random.nextInt(16);
      int avgY=info.minY + random.nextInt(info.maxY - info.minY) + 1;
      int avgZ=z + random.nextInt(16);
      gen.generate(world,random,avgX,avgY,avgZ);
    }
  }
}"
59901,"@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  genStandardOre(world,random,chunkX * 16,chunkZ * 16,40,128);
}","@Override public void generate(Random random,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  for (  WorldGenMinable gen : map.keySet()) {
    genStandardOre(gen,map.get(gen),world,random,chunkX * 16,chunkZ * 16);
  }
}"
59902,"/** 
 * Called when an item is chiseled using this chisel
 * @param world {@link World} object
 * @param inv The inventory this chisel is currently in
 * @param slot The slot index of the chisel in the inventory
 * @param chisel The  {@link ItemStack} representing the chisel
 * @param target The  {@link ItemStack} representing the target item
 */
void onChisel(World world,IInventory inv,int slot,ItemStack chisel,ICarvingVariation target);","/** 
 * Called when an item is chiseled using this chisel
 * @param world {@link World} object
 * @param inv The inventory this chisel is currently in
 * @param slot The slot index of the chisel in the inventory
 * @param chisel The  {@link ItemStack} representing the chisel
 * @param target The  {@link ItemStack} representing the target item
 * @return True if the chisel should be damaged. False otherwise.
 */
boolean onChisel(World world,IInventory inv,int slot,ItemStack chisel,ICarvingVariation target);"
59903,"/** 
 * Calls IChiselItem#onChisel() and sends the chisel packet for sound/animation 
 */
private void chiselItem(int chiseled){
  if (!worldObj.isRemote) {
    ((IChiselItem)inventory[CHISEL].getItem()).onChisel(worldObj,this,CHISEL,inventory[CHISEL],General.getVariation(inventory[TARGET]));
    PacketHandler.INSTANCE.sendToDimension(new MessageAutoChisel(this,chiseled,true),worldObj.provider.dimensionId);
  }
 else {
    GeneralChiselClient.spawnAutoChiselFX(this,lastBase != null ? lastBase : inventory[BASE]);
    chiseling=false;
    if (lastBase != null) {
      lastBase.stackSize-=toChisel;
      if (lastBase.stackSize <= 0) {
        lastBase=null;
      }
    }
  }
}","/** 
 * Calls IChiselItem#onChisel() and sends the chisel packet for sound/animation 
 */
private void chiselItem(int chiseled){
  if (!worldObj.isRemote) {
    if (((IChiselItem)inventory[CHISEL].getItem()).onChisel(worldObj,this,CHISEL,inventory[CHISEL],General.getVariation(inventory[TARGET]))) {
      inventory[CHISEL].setItemDamage(inventory[CHISEL].getItemDamage() - 1);
      if (inventory[CHISEL].getItemDamage() >= inventory[CHISEL].getMaxDamage()) {
        inventory[CHISEL]=null;
      }
    }
    PacketHandler.INSTANCE.sendToDimension(new MessageAutoChisel(this,chiseled,true),worldObj.provider.dimensionId);
  }
 else {
    GeneralChiselClient.spawnAutoChiselFX(this,lastBase != null ? lastBase : inventory[BASE]);
    chiseling=false;
    if (lastBase != null) {
      lastBase.stackSize-=toChisel;
      if (lastBase.stackSize <= 0) {
        lastBase=null;
      }
    }
  }
}"
59904,"@Override public void onPickupFromSlot(EntityPlayer player,ItemStack itemstack){
  ItemStack stack=player.inventory.getItemStack();
  ItemStack crafted=selInventory.inventory[InventoryChiselSelection.normalSlots];
  if (stack == null) {
    if (crafted != null && crafted.stackSize > 0)     crafted.stackSize--;
    if (crafted.stackSize == 0)     crafted=null;
    selInventory.setInventorySlotContents(InventoryChiselSelection.normalSlots,crafted);
  }
 else {
    putStack(new ItemStack(itemstack.getItem(),itemstack.stackSize,itemstack.getItemDamage()));
    player.inventory.setItemStack(null);
    if (selInventory.inventory[InventoryChiselSelection.normalSlots] == null)     return;
    player.inventory.setItemStack(new ItemStack(itemstack.getItem(),selInventory.inventory[InventoryChiselSelection.normalSlots].stackSize,itemstack.getItemDamage()));
    selInventory.setInventorySlotContents(InventoryChiselSelection.normalSlots,null);
  }
  selInventory.updateItems();
  ((IChiselItem)container.chisel.getItem()).onChisel(player.worldObj,player.inventory,player.inventory.currentItem,container.chisel,General.getVariation(crafted));
  if (player.worldObj.isRemote) {
    String sound=Carving.chisel.getVariationSound(crafted.getItem(),crafted.getItemDamage());
    GeneralClient.playChiselSound(player.worldObj,MathHelper.floor_double(player.posX),MathHelper.floor_double(player.posY),MathHelper.floor_double(player.posZ),sound);
  }
}","@Override public void onPickupFromSlot(EntityPlayer player,ItemStack itemstack){
  ItemStack stack=player.inventory.getItemStack();
  ItemStack crafted=selInventory.inventory[InventoryChiselSelection.normalSlots];
  if (stack == null) {
    if (crafted != null && crafted.stackSize > 0)     crafted.stackSize--;
    if (crafted.stackSize == 0)     crafted=null;
    selInventory.setInventorySlotContents(InventoryChiselSelection.normalSlots,crafted);
  }
 else {
    putStack(new ItemStack(itemstack.getItem(),itemstack.stackSize,itemstack.getItemDamage()));
    player.inventory.setItemStack(null);
    if (selInventory.inventory[InventoryChiselSelection.normalSlots] == null)     return;
    player.inventory.setItemStack(new ItemStack(itemstack.getItem(),selInventory.inventory[InventoryChiselSelection.normalSlots].stackSize,itemstack.getItemDamage()));
    selInventory.setInventorySlotContents(InventoryChiselSelection.normalSlots,null);
  }
  selInventory.updateItems();
  if (((IChiselItem)container.chisel.getItem()).onChisel(player.worldObj,player.inventory,player.inventory.currentItem,container.chisel,General.getVariation(crafted))) {
    container.chisel.damageItem(1,player);
    if (container.chisel.stackSize <= 0) {
      player.inventory.mainInventory[player.inventory.currentItem]=null;
    }
  }
  if (player.worldObj.isRemote) {
    String sound=Carving.chisel.getVariationSound(crafted.getItem(),crafted.getItemDamage());
    GeneralClient.playChiselSound(player.worldObj,MathHelper.floor_double(player.posX),MathHelper.floor_double(player.posY),MathHelper.floor_double(player.posZ),sound);
  }
}"
59905,"@SubscribeEvent public void onInteract(PlayerInteractEvent event){
  ItemStack held=event.entityPlayer.getCurrentEquippedItem();
  int slot=event.entityPlayer.inventory.currentItem;
  if (held == null || !(held.getItem() instanceof IChiselItem)) {
    return;
  }
  IChiselItem chisel=(IChiselItem)held.getItem();
switch (event.action) {
case LEFT_CLICK_BLOCK:
    int x=event.x, y=event.y, z=event.z;
  Block block=event.world.getBlock(x,y,z);
int metadata=event.world.getBlockMetadata(x,y,z);
List<ICarvingVariation> list=Carving.chisel.getVariations(block,metadata);
if (list == null || list.isEmpty()) {
break;
}
ICarvingVariation[] variations=list.toArray(new CarvingVariation[]{});
if (chisel.canChiselBlock(event.world,x,y,z,block,metadata)) {
ItemStack target=General.getChiselTarget(held);
ChiselMode mode=General.getChiselMode(held);
ForgeDirection sideHit=ForgeDirection.VALID_DIRECTIONS[event.face];
if (target != null) {
for (ICarvingVariation v : variations) {
if (v.getBlock() == Block.getBlockFromItem(target.getItem()) && v.getBlockMeta() == target.getItemDamage()) {
mode.chiselAll(event.entityPlayer,event.world,x,y,z,sideHit,v);
}
}
}
 else {
int idx=0;
for (int i=0; i < variations.length; i++) {
ICarvingVariation v=variations[i];
if (v.getBlock() == block && v.getBlockMeta() == metadata) {
idx=(i + 1) % variations.length;
}
}
ICarvingVariation newVar=variations[idx];
mode.chiselAll(event.entityPlayer,event.world,x,y,z,sideHit,newVar);
event.entityPlayer.inventory.currentItem=slot;
}
}
break;
case RIGHT_CLICK_AIR:
case RIGHT_CLICK_BLOCK:
if (event.world.getTotalWorldTime() == lastTickClick) {
break;
}
 else {
lastTickClick=event.world.getTotalWorldTime();
}
if (!event.world.isRemote && event.entityPlayer.isSneaking()) {
ChiselMode mode=General.getChiselMode(held);
General.setChiselMode(held,ChiselMode.values()[(mode.ordinal() + 1) % 3]);
event.entityPlayer.addChatMessage(new ChatComponentText(General.getChiselMode(held).toString()));
break;
}
if (!event.world.isRemote && chisel.canOpenGui(event.world,event.entityPlayer,held)) {
event.entityPlayer.openGui(Chisel.instance,0,event.world,0,0,0);
}
break;
}
}","@SubscribeEvent public void onInteract(PlayerInteractEvent event){
  ItemStack held=event.entityPlayer.getCurrentEquippedItem();
  int slot=event.entityPlayer.inventory.currentItem;
  if (held == null || !(held.getItem() instanceof IChiselItem)) {
    return;
  }
  IChiselItem chisel=(IChiselItem)held.getItem();
switch (event.action) {
case LEFT_CLICK_BLOCK:
    int x=event.x, y=event.y, z=event.z;
  Block block=event.world.getBlock(x,y,z);
int metadata=event.world.getBlockMetadata(x,y,z);
List<ICarvingVariation> list=Carving.chisel.getVariations(block,metadata);
if (list == null || list.isEmpty()) {
break;
}
ICarvingVariation[] variations=list.toArray(new CarvingVariation[]{});
if (chisel.canChiselBlock(event.world,x,y,z,block,metadata)) {
ItemStack target=General.getChiselTarget(held);
ChiselMode mode=General.getChiselMode(held);
ForgeDirection sideHit=ForgeDirection.VALID_DIRECTIONS[event.face];
if (target != null) {
for (ICarvingVariation v : variations) {
if (v.getBlock() == Block.getBlockFromItem(target.getItem()) && v.getBlockMeta() == target.getItemDamage()) {
mode.chiselAll(event.entityPlayer,event.world,x,y,z,sideHit,v);
}
}
}
 else {
int idx=0;
for (int i=0; i < variations.length; i++) {
ICarvingVariation v=variations[i];
if (v.getBlock() == block && v.getBlockMeta() == metadata) {
idx=(i + 1) % variations.length;
}
}
ICarvingVariation newVar=variations[idx];
mode.chiselAll(event.entityPlayer,event.world,x,y,z,sideHit,newVar);
event.entityPlayer.inventory.currentItem=slot;
}
}
break;
case RIGHT_CLICK_AIR:
case RIGHT_CLICK_BLOCK:
if (event.world.getTotalWorldTime() == lastTickClick) {
break;
}
 else {
lastTickClick=event.world.getTotalWorldTime();
}
if (!event.world.isRemote && chisel.canOpenGui(event.world,event.entityPlayer,held)) {
event.entityPlayer.openGui(Chisel.instance,0,event.world,0,0,0);
}
break;
}
}"
59906,"@Override public void onChisel(World world,IInventory inv,int slot,ItemStack chisel,ICarvingVariation target){
  if (Configurations.allowChiselDamage) {
    chisel.setItemDamage(chisel.getItemDamage() + 1);
    if (chisel.getItemDamage() >= chisel.getMaxDamage()) {
      inv.decrStackSize(slot,1);
    }
  }
}","@Override public boolean onChisel(World world,IInventory inv,int slot,ItemStack chisel,ICarvingVariation target){
  return Configurations.allowChiselDamage;
}"
59907,"public MessageChiselSound(int x,int y,int z,ICarvingVariation v){
  super(x,y,z);
  this.block=Block.getIdFromBlock(v.getBlock());
  this.meta=(byte)v.getBlockMeta();
}","public MessageChiselSound(int x,int y,int z,ICarvingVariation v,boolean breakChisel){
  super(x,y,z);
  this.block=Block.getIdFromBlock(v.getBlock());
  this.meta=(byte)v.getBlockMeta();
  this.breakChisel=breakChisel;
}"
59908,"@Override public void toBytes(ByteBuf buf){
  super.toBytes(buf);
  buf.writeInt(block);
  buf.writeByte(meta);
}","@Override public void toBytes(ByteBuf buf){
  super.toBytes(buf);
  buf.writeInt(block);
  buf.writeByte(meta);
  buf.writeBoolean(breakChisel);
}"
59909,"@Override public void fromBytes(ByteBuf buf){
  super.fromBytes(buf);
  block=buf.readInt();
  meta=buf.readByte();
}","@Override public void fromBytes(ByteBuf buf){
  super.fromBytes(buf);
  block=buf.readInt();
  meta=buf.readByte();
  breakChisel=buf.readBoolean();
}"
59910,"@Override public IMessage onMessage(MessageChiselSound message,MessageContext ctx){
  String sound=ItemChisel.carving.getVariationSound(Block.getBlockById(message.block),message.meta);
  GeneralChiselClient.spawnChiselEffect(message.x,message.y,message.z,sound);
  return null;
}","@Override public IMessage onMessage(MessageChiselSound message,MessageContext ctx){
  String sound=ItemChisel.carving.getVariationSound(Block.getBlockById(message.block),message.meta);
  GeneralChiselClient.spawnChiselEffect(message.x,message.y,message.z,sound);
  if (message.breakChisel) {
    EntityPlayer player=Chisel.proxy.getClientPlayer();
    player.renderBrokenItemStack(player.getCurrentEquippedItem());
  }
  return null;
}"
59911,"@Override public void setInventorySlotContents(int slot,ItemStack stack){
  inventory[slot]=stack;
  if (stack != null && stack.stackSize > getInventoryStackLimit()) {
    stack.stackSize=getInventoryStackLimit();
  }
  if (worldObj.isRemote && slot == BASE && stack != null) {
    lastBase=stack.copy();
    lastBase.stackSize++;
  }
  if (!worldObj.isRemote) {
    slotChanged(slot);
  }
}","@Override public void setInventorySlotContents(int slot,ItemStack stack){
  inventory[slot]=stack;
  if (stack != null && stack.stackSize > getInventoryStackLimit()) {
    stack.stackSize=getInventoryStackLimit();
  }
  if (worldObj.isRemote && slot == BASE && stack != null) {
    lastBase=stack.copy();
  }
  if (!worldObj.isRemote) {
    slotChanged(slot);
  }
}"
59912,"public ContainerAutoChisel(InventoryPlayer player,TileEntityAutoChisel tileEntityAutoChisel){
  ContainerAutoChisel.player=player.player;
  autoChisel=tileEntityAutoChisel;
  addSlot(tileEntityAutoChisel,0,53,15);
  addSlot(tileEntityAutoChisel,1,78,51);
  addSlot(tileEntityAutoChisel,2,103,15);
  addSlot(tileEntityAutoChisel,3,8,62);
  addSlot(tileEntityAutoChisel,4,151,11);
  addSlot(tileEntityAutoChisel,5,151,31);
  addSlot(tileEntityAutoChisel,6,151,51);
  bindPlayerInventory(player);
}","public ContainerAutoChisel(InventoryPlayer player,TileEntityAutoChisel tileEntityAutoChisel){
  this.player=player.player;
  autoChisel=tileEntityAutoChisel;
  addSlot(tileEntityAutoChisel,0,53,15);
  addSlot(tileEntityAutoChisel,1,78,51);
  addSlot(tileEntityAutoChisel,2,103,15);
  addSlot(tileEntityAutoChisel,3,8,62);
  addSlot(tileEntityAutoChisel,4,151,11);
  addSlot(tileEntityAutoChisel,5,151,31);
  addSlot(tileEntityAutoChisel,6,151,51);
  bindPlayerInventory(player);
}"
59913,"public static void init(){
  Block concreteRecipeBlock=Block.getBlockFromName(Configurations.config.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
  if (concreteRecipeBlock == null)   concreteRecipeBlock=Blocks.gravel;
  if (Configurations.featureEnabled(""String_Node_Str""))   FurnaceRecipes.smelting().func_151393_a(concreteRecipeBlock,new ItemStack(ModBlocks.concrete),0.1F);
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.sandstoneScribbles,1),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.sandstone,1,8)});
  for (int meta=0; meta < 16; meta++) {
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.marbleSlab,6,0),new Object[]{""String_Node_Str"",'*',new ItemStack(ModBlocks.marble,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.limestoneSlab,6,0),new Object[]{""String_Node_Str"",'*',new ItemStack(ModBlocks.limestone,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.marblePillarSlab,6,0),new Object[]{""String_Node_Str"",'*',new ItemStack(ModBlocks.marblePillar,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.marblePillar,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(ModBlocks.marble,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.marble,4),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(ModBlocks.marblePillar,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.icePillar,6,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(ModBlocks.ice,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.ice,4,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(ModBlocks.icePillar,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(Blocks.sandstone,1,1),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.sandstoneScribbles,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.carpet,8,meta),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(Items.string,1),'Y',new ItemStack(Blocks.wool,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.carpetFloor,3,meta),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.carpet,1,meta)});
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(Blocks.sandstone,1,0),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.sandstone,1,0)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(Blocks.sandstone,1,1),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.sandstone,1,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.holystone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.feather,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.grimstone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.coal,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.lavastone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.lava_bucket,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.waterstone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.water_bucket,1)});
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ModBlocks.fantasy,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.gold_nugget,1)});
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.fantasy2,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(ModBlocks.fantasy,1),'X',""String_Node_Str""}));
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.tyrian,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.iron_ingot,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.temple,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.dye,1,4)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.factory,Configurations.factoryBlockAmount,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.iron_ingot,1)});
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ModBlocks.voidstone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'x',new ItemStack(Blocks.stone,1),'y',new ItemStack(Items.ender_pearl,1),'o',new ItemStack(Blocks.obsidian,1)});
    GameRegistry.addRecipe(new ItemStack(ModBlocks.voidstone2,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'x',new ItemStack(Blocks.stone,1),'y',new ItemStack(Items.ender_eye,1),'o',new ItemStack(Blocks.obsidian,1)});
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ModBlocks.voidstonePillar,4,0),new Object[]{""String_Node_Str"",""String_Node_Str"",'x',new ItemStack(ModBlocks.voidstone,1)});
    GameRegistry.addRecipe(new ItemStack(ModBlocks.voidstonePillar2,4,0),new Object[]{""String_Node_Str"",""String_Node_Str"",'x',new ItemStack(ModBlocks.voidstone2,1)});
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.roadLine,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",('w'),""String_Node_Str"",('r'),Items.redstone}));
  if (Configurations.chiselRecipe) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModItems.chisel,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Items.stick,'Y',Items.iron_ingot}));
  }
 else {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModItems.chisel,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',Items.stick,'Y',Items.iron_ingot}));
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModItems.itemBallOMoss,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Blocks.vine,'Y',Items.stick});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModItems.itemCloudInABottle,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Blocks.glass,'Y',Items.quartz});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addShapelessRecipe(new ItemStack(ModItems.smashingRock,16),new Object[]{new ItemStack(Items.stone_pickaxe),new ItemStack(Items.glass_bottle,1),new ItemStack(Items.stone_shovel)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.paperWall,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",('p'),Items.paper,('s'),""String_Node_Str""}));
  String[] sGNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < 16; i++) {
    OreDictionary.registerOre(""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str""),new ItemStack(Blocks.stained_hardened_clay,1,i));
    OreDictionary.registerOre(""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str""),new ItemStack(Blocks.wool,1,i));
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(ModBlocks.woolenClay,2,i),new Object[]{""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"")}));
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.laboratory,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.quartz,1)});
  if (Configurations.autoChisel)   GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.autoChisel,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('X'),""String_Node_Str"",Character.valueOf('Y'),ModItems.chisel}));
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.hexPlating,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',""String_Node_Str""}));
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.bone,4),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',Items.bone});
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int x=0; x < 16; x++) {
      GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.jackolantern[x]),new Object[]{new ItemStack(ModBlocks.pumpkin[x],1),new ItemStack(Item.getItemFromBlock(Blocks.torch),1)});
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.technical,Configurations.factoryBlockAmount,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'x',""String_Node_Str"",'y',Items.iron_ingot}));
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int x=0; x < 16; x++) {
      GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.present[x]),new Object[]{new ItemStack(Blocks.chest,1),new ItemStack(Items.dye,1,x)});
    }
  }
}","public static void init(){
  Block concreteRecipeBlock=Block.getBlockFromName(Configurations.config.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
  if (concreteRecipeBlock == null)   concreteRecipeBlock=Blocks.gravel;
  if (Configurations.featureEnabled(""String_Node_Str""))   FurnaceRecipes.smelting().func_151393_a(concreteRecipeBlock,new ItemStack(ModBlocks.concrete),0.1F);
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.sandstoneScribbles,1),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.sandstone,1,8)});
  for (int meta=0; meta < 16; meta++) {
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.marbleSlab,6,0),new Object[]{""String_Node_Str"",'*',new ItemStack(ModBlocks.marble,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.limestoneSlab,6,0),new Object[]{""String_Node_Str"",'*',new ItemStack(ModBlocks.limestone,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.marblePillarSlab,6,0),new Object[]{""String_Node_Str"",'*',new ItemStack(ModBlocks.marblePillar,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.marblePillar,6),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(ModBlocks.marble,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.marble,4),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(ModBlocks.marblePillar,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.icePillar,6,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(ModBlocks.ice,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.ice,4,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(ModBlocks.icePillar,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(Blocks.sandstone,1,1),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.sandstoneScribbles,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.carpet,8,meta),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',new ItemStack(Items.string,1),'Y',new ItemStack(Blocks.wool,1,meta)});
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ItemStack(ModBlocks.carpetFloor,3,meta),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.carpet,1,meta)});
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(Blocks.sandstone,1,0),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.sandstone,1,0)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(Blocks.sandstone,1,1),new Object[]{""String_Node_Str"",'X',new ItemStack(ModBlocks.sandstone,1,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.holystone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.feather,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.grimstone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.coal,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.lavastone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.lava_bucket,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.waterstone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.water_bucket,1)});
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ModBlocks.fantasy,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.gold_nugget,1)});
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.fantasy2,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(ModBlocks.fantasy,1),'X',""String_Node_Str""}));
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.tyrian,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.iron_ingot,1)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.temple,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.dye,1,4)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.factory,Configurations.factoryBlockAmount,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.iron_ingot,1)});
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ModBlocks.voidstone,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'x',new ItemStack(Blocks.stone,1),'y',new ItemStack(Items.ender_pearl,1),'o',new ItemStack(Blocks.obsidian,1)});
    GameRegistry.addRecipe(new ItemStack(ModBlocks.voidstone2,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'x',new ItemStack(Blocks.stone,1),'y',new ItemStack(Items.ender_eye,1),'o',new ItemStack(Blocks.obsidian,1)});
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ItemStack(ModBlocks.voidstonePillar,4,0),new Object[]{""String_Node_Str"",""String_Node_Str"",'x',new ItemStack(ModBlocks.voidstone,1)});
    GameRegistry.addRecipe(new ItemStack(ModBlocks.voidstonePillar2,4,0),new Object[]{""String_Node_Str"",""String_Node_Str"",'x',new ItemStack(ModBlocks.voidstone2,1)});
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.roadLine,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",('w'),""String_Node_Str"",('r'),Items.redstone}));
  if (Configurations.chiselRecipe) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModItems.chisel,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Items.stick,'Y',Items.iron_ingot}));
  }
 else {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModItems.chisel,1),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',Items.stick,'Y',Items.iron_ingot}));
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModItems.itemBallOMoss,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Blocks.vine,'Y',Items.stick});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModItems.itemCloudInABottle,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',Blocks.glass,'Y',Items.quartz});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addShapelessRecipe(new ItemStack(ModItems.smashingRock,16),new Object[]{new ItemStack(Items.stone_pickaxe),new ItemStack(Items.glass_bottle,1),new ItemStack(Items.stone_shovel)});
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.paperWall,8),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",('p'),Items.paper,('s'),""String_Node_Str""}));
  String[] sGNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < 16; i++) {
    OreDictionary.registerOre(""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str""),new ItemStack(Blocks.stained_hardened_clay,1,i));
    OreDictionary.registerOre(""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str""),new ItemStack(Blocks.wool,1,i));
    if (Configurations.featureEnabled(""String_Node_Str""))     GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(ModBlocks.woolenClay,2,i),new Object[]{""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"")}));
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.laboratory,8,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'*',new ItemStack(Blocks.stone,1),'X',new ItemStack(Items.quartz,1)});
  if (Configurations.autoChisel)   GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.autoChisel,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",Character.valueOf('X'),""String_Node_Str"",Character.valueOf('Y'),ModItems.chisel}));
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.hexPlating,1),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',""String_Node_Str"",'Y',""String_Node_Str""}));
  if (Configurations.featureEnabled(""String_Node_Str""))   GameRegistry.addRecipe(new ItemStack(ModBlocks.bone,4),new Object[]{""String_Node_Str"",""String_Node_Str"",'X',Items.bone});
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int x=0; x < 16; x++) {
      GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.jackolantern[x]),new Object[]{new ItemStack(ModBlocks.pumpkin[x],1),new ItemStack(Item.getItemFromBlock(Blocks.torch),1)});
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.technical,Configurations.factoryBlockAmount,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'x',""String_Node_Str"",'y',Items.iron_ingot}));
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int x=0; x < 16; x++) {
      GameRegistry.addShapelessRecipe(new ItemStack(ModBlocks.present[x]),new Object[]{new ItemStack(Blocks.chest,1),new ItemStack(Items.dye,1,x)});
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(ModBlocks.sign,4,0),new Object[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'x',""String_Node_Str"",'y',Items.sign}));
  }
}"
59914,"public BlockCarvable(Material m){
  super(m);
  carverHelper=new CarvableHelper();
  setCreativeTab(ModTabs.tabChiselBlocks);
}","public BlockCarvable(Material m){
  super(m);
  carverHelper=new CarvableHelper();
  setResistance(10.0F);
  setHardness(2.0F);
  setCreativeTab(ModTabs.tabChiselBlocks);
}"
59915,"public static void load(){
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    autoChisel=new BlockAutoChisel().setBlockTextureName(""String_Node_Str"").setCreativeTab(ModTabs.tabChisel).setBlockName(""String_Node_Str"").setBlockTextureName(Chisel.MOD_ID + ""String_Node_Str"");
    GameRegistry.registerBlock(autoChisel,""String_Node_Str"");
    Chisel.proxy.registerTileEntities();
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    marble=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    marble.carverHelper.setChiselBlockName(""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    marble.carverHelper.register(marble,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",marble);
    OreDictionary.registerOre(""String_Node_Str"",marble);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    marbleSlab=(BlockMarbleSlab)new BlockMarbleSlab(marble).setHardness(2.0F).setResistance(10F);
    marbleSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    marbleSlab.carverHelper.register(marbleSlab,""String_Node_Str"",ItemMarbleSlab.class);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      if (Configurations.oldPillars) {
        marblePillar=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
        marblePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
 else {
        marblePillar=(BlockCarvable)new BlockMarblePillar(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
        marblePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
      marblePillar.carverHelper.register(marblePillar,""String_Node_Str"");
      Carving.chisel.setGroupClass(""String_Node_Str"",""String_Node_Str"");
      marblePillarSlab=(BlockMarbleSlab)new BlockMarbleSlab(marblePillar).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
      marblePillarSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
      if (Configurations.oldPillars) {
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
 else {
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
      marblePillarSlab.carverHelper.register(marblePillarSlab,""String_Node_Str"",ItemMarbleSlab.class);
    }
    BlockMarbleStairsMaker makerMarbleStairs=new BlockMarbleStairsMaker(marble);
    makerMarbleStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    makerMarbleStairs.create(""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    limestone=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    limestone.carverHelper.setChiselBlockName(""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    limestone.carverHelper.register(limestone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",limestone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    limestoneSlab=(BlockMarbleSlab)new BlockMarbleSlab(limestone).setHardness(2.0F).setResistance(10F);
    limestoneSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    limestoneSlab.carverHelper.register(limestoneSlab,""String_Node_Str"",ItemMarbleSlab.class);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    BlockMarbleStairsMaker makerLimestoneStairs=new BlockMarbleStairsMaker(limestone);
    makerLimestoneStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    makerLimestoneStairs.create(""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    cobblestone=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.cobblestone,0,0);
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    cobblestone.carverHelper.register(cobblestone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    glass=(BlockCarvableGlass)new BlockCarvableGlass().setHardness(0.3F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glass,0,0);
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    glass.carverHelper.register(glass,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    sandstone=(BlockCarvable)new BlockCarvable(Material.rock).setStepSound(Block.soundTypeStone).setHardness(0.8F);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.sandstone,0,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.sandstone,1,1);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.sandstone,2,2);
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    sandstone.carverHelper.register(sandstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      sandSnakestone=(BlockSnakestone)new BlockSnakestone(""String_Node_Str"").setBlockName(""String_Node_Str"");
      GameRegistry.registerBlock(sandSnakestone,ItemCarvable.class,""String_Node_Str"");
      Carving.chisel.addVariation(""String_Node_Str"",sandSnakestone,1,16);
      Carving.chisel.addVariation(""String_Node_Str"",sandSnakestone,13,17);
      Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    sandstoneScribbles=(BlockCarvable)new BlockCarvable(Material.rock).setStepSound(Block.soundTypeStone).setHardness(0.8F);
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    sandstoneScribbles.carverHelper.register(sandstoneScribbles,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    concrete=(BlockConcrete)new BlockConcrete().setStepSound(Block.soundTypeStone).setHardness(0.5F);
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    concrete.carverHelper.register(concrete,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",concrete);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    roadLine=(BlockRoadLine)new BlockRoadLine().setStepSound(Block.soundTypeStone).setHardness(0.01F).setBlockName(""String_Node_Str"");
    GameRegistry.registerBlock(roadLine,ItemCarvable.class,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    iron=(BlockBeaconBase)new BlockBeaconBase().setHardness(5F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.iron_block,0,0);
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    iron.carverHelper.register(iron,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    gold=(BlockBeaconBase)new BlockBeaconBase().setHardness(3F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.gold_block,0,0);
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    gold.carverHelper.register(gold,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    diamond=(BlockBeaconBase)new BlockBeaconBase().setHardness(5F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.diamond_block,0,0);
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    diamond.carverHelper.register(diamond,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    lightstone=(BlockLightstoneCarvable)new BlockLightstoneCarvable().setHardness(0.3F).setLightLevel(1.0F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glowstone,0,0);
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    lightstone.carverHelper.register(lightstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    lapis=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(3F).setResistance(5F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.lapis_block,0,0);
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    lapis.carverHelper.register(lapis,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    emerald=(BlockBeaconBase)new BlockBeaconBase().setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.emerald_block,0,0);
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    emerald.carverHelper.register(emerald,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    netherBrick=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.nether_brick,0,0);
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    netherBrick.carverHelper.register(netherBrick,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    netherrack=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(0.4F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.netherrack,0,0);
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    netherrack.carverHelper.register(netherrack,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    cobblestoneMossy=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.mossy_cobblestone,0,0);
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    cobblestoneMossy.carverHelper.register(cobblestoneMossy,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    stoneBrick=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    for (int i=0; i < 4; i++) {
      if (i == 1) {
        if (Configurations.allowMossy)         Carving.chisel.addVariation(""String_Node_Str"",Blocks.stonebrick,i,i);
      }
 else       Carving.chisel.addVariation(""String_Node_Str"",Blocks.stonebrick,i,i);
    }
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    stoneBrick.carverHelper.register(stoneBrick,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    snakestone=(BlockSnakestone)new BlockSnakestone(""String_Node_Str"").setBlockName(""String_Node_Str"");
    GameRegistry.registerBlock(snakestone,ItemCarvable.class,""String_Node_Str"");
    Carving.chisel.addVariation(""String_Node_Str"",snakestone,1,16);
    Carving.chisel.addVariation(""String_Node_Str"",snakestone,13,17);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    dirt=(BlockCarvable)new BlockCarvable(Material.ground).setHardness(0.5F).setStepSound(Block.soundTypeGravel).setBlockName(""String_Node_Str"");
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.dirt,0,0);
    dirt.carverHelper.setChiselBlockName(""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    dirt.carverHelper.register(dirt,""String_Node_Str"");
    dirt.setHarvestLevel(""String_Node_Str"",0);
    OreDictionary.registerOre(""String_Node_Str"",dirt);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    ice=(BlockMarbleIce)new BlockMarbleIce().setHardness(0.5F).setLightOpacity(3).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.ice,0,0);
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    ice.carverHelper.register(ice,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      icePillar=(BlockMarbleIce)new BlockMarbleIce().setHardness(0.5F).setLightOpacity(3).setStepSound(Block.soundTypeGlass);
      icePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      icePillar.carverHelper.register(icePillar,""String_Node_Str"");
      Carving.chisel.setGroupClass(""String_Node_Str"",""String_Node_Str"");
    }
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      BlockMarbleStairsMaker makerIceStairs=new BlockMarbleStairsMaker(Blocks.ice);
      makerIceStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,Blocks.ice);
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      makerIceStairs.create(new BlockMarbleStairsMakerCreator(){
        @Override public BlockMarbleStairs create(        Block block,        int meta,        CarvableHelper helper){
          return new BlockMarbleIceStairs(block,meta,helper);
        }
      }
,""String_Node_Str"");
      Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    String[] plank_names={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] plank_ucnames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (int i=0; i < 6; i++) {
      String n=plank_names[i];
      String u=plank_ucnames[i];
      final String orename=n.replace('-','_') + ""String_Node_Str"";
      planks[i]=(BlockCarvable)(new BlockCarvable(Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood);
      planks[i].carverHelper.setChiselBlockName(u + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",1,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",2,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",6,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",8,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",9,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",10,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",11,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",13,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",3,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",4,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",5,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",7,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",12,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",14,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",15,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.register(planks[i],orename);
      Carving.chisel.addVariation(orename,Blocks.planks,i,0);
      planks[i].setHarvestLevel(""String_Node_Str"",0);
      Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
      Carving.chisel.setVariationSound(orename,Chisel.MOD_ID + ""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    obsidian=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(50.0F).setResistance(2000.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.obsidian,0,0);
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    obsidian.carverHelper.register(obsidian,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    obsidianSnakestone=(BlockSnakestoneObsidian)new BlockSnakestoneObsidian(""String_Node_Str"").setBlockName(""String_Node_Str"").setHardness(50.0F).setResistance(2000.0F);
    GameRegistry.registerBlock(obsidianSnakestone,ItemCarvable.class,""String_Node_Str"");
    Carving.chisel.addVariation(""String_Node_Str"",obsidianSnakestone,1,16);
    Carving.chisel.addVariation(""String_Node_Str"",obsidianSnakestone,13,17);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    paneIron=(BlockCarvablePane)new BlockCarvablePane(Material.iron,true).setHardness(0.3F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.iron_bars,0,0);
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    paneIron.carverHelper.register(paneIron,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    paneGlass=(BlockCarvablePane)new BlockCarvablePane(Material.glass,false).setHardness(0.3F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glass_pane,0,0);
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    paneGlass.carverHelper.register(paneGlass,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    redstone=(BlockCarvablePowered)(new BlockCarvablePowered(Material.iron)).setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.redstone_block,0,0);
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    redstone.carverHelper.register(redstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    holystone=(BlockHolystone)new BlockHolystone(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundHolystoneFootstep);
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    holystone.carverHelper.register(holystone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",holystone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    lavastone=(BlockLavastone)new BlockLavastone(Material.rock,""String_Node_Str"").setHardness(2.0F).setResistance(10F);
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    lavastone.carverHelper.register(lavastone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",lavastone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    fantasy=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F);
    fantasy.carverHelper.setChiselBlockName(""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    fantasy.carverHelper.register(fantasy,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",fantasy);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    carpet=(BlockCarvable)new BlockCarvable(Material.cloth).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeCloth);
    carpet.carverHelper.setChiselBlockName(""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    carpet.carverHelper.forbidChiseling=true;
    carpet.carverHelper.register(carpet,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",carpet);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    carpetFloor=(BlockMarbleCarpet)new BlockMarbleCarpet(Material.cloth).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeCloth);
    carpetFloor.carverHelper.setChiselBlockName(""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    carpetFloor.carverHelper.forbidChiseling=true;
    carpetFloor.carverHelper.register(carpetFloor,""String_Node_Str"");
    for (int i=0; i < 16; i++) {
      String group=""String_Node_Str"" + i;
      Carving.needle.addVariation(group,Blocks.carpet,i,0);
      Carving.needle.addVariation(group,carpetFloor,i,2);
      Carving.needle.addVariation(group,carpet,i,1);
    }
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    bookshelf=(BlockCarvable)new BlockMarbleBookshelf().setHardness(1.5F).setStepSound(Block.soundTypeWood);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.bookshelf,0,0);
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    bookshelf.carverHelper.register(bookshelf,""String_Node_Str"");
    bookshelf.setHarvestLevel(""String_Node_Str"",0);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    tyrian=(BlockCarvable)new BlockCarvable(Material.iron).setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    tyrian.carverHelper.setChiselBlockName(""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    tyrian.carverHelper.register(tyrian,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",tyrian);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    temple=(BlockCarvable)new BlockEldritch().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundTempleFootstep);
    temple.carverHelper.setChiselBlockName(""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    temple.carverHelper.register(temple,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      templeMossy=(BlockCarvable)new BlockEldritch().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundTempleFootstep);
      templeMossy.carverHelper.setChiselBlockName(""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      templeMossy.carverHelper.register(templeMossy,""String_Node_Str"");
      Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    cloud=(BlockCloud)new BlockCloud().setHardness(0.2F).setLightOpacity(3).setStepSound(Block.soundTypeCloth);
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    cloud.carverHelper.register(cloud,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",cloud);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    factory=(BlockCarvable)new BlockCarvable(Material.iron).setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundMetalFootstep);
    factory.carverHelper.setChiselBlockName(""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    factory.carverHelper.register(factory,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  String[] sGNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (Configurations.featureEnabled(""String_Node_Str""))   for (int i=0; i < 16; i++) {
    final String blockName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    String oreName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String texName=""String_Node_Str"" + sGNames[i].toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    int glassPrefix=(i & 3) << 2;
    int glassId=i >> 2;
    Carving.chisel.addVariation(blockName,Blocks.stained_glass,i,0);
    if (glassPrefix == 0) {
      stainedGlass[glassId]=(BlockCarvableGlass)new BlockCarvableGlass().setStained(true).setHardness(0.3F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str"");
      stainedGlass[glassId].carverHelper.registerBlock(stainedGlass[glassId],blockName);
    }
    stainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix,texName + ""String_Node_Str"");
    stainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 1,texName + ""String_Node_Str"");
    stainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 2,texName + ""String_Node_Str"");
    stainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 3,texName + ""String_Node_Str"");
    OreDictionary.registerOre(oreName,new ItemStack(Blocks.stained_glass,1,i));
    Carving.chisel.registerOre(blockName,oreName);
    for (    CarvableVariation cv : stainedGlass[glassId].carverHelper.variations) {
      if (cv.metadata < glassPrefix || cv.metadata >= glassPrefix + 4)       continue;
      stainedGlass[glassId].carverHelper.registerVariation(blockName,cv,stainedGlass[glassId],cv.metadata);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   for (int i=0; i < 16; i++) {
    final String blockName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    String oreName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String texName=""String_Node_Str"" + sGNames[i].toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    Carving.chisel.addVariation(blockName,Blocks.stained_glass_pane,i,0);
    int glassPrefix=(i & 1) << 3;
    int glassId=i >> 1;
    if (glassPrefix == 0) {
      stainedGlassPane[glassId]=(BlockCarvablePane)new BlockCarvablePane(Material.glass,true).setStained(true).setHardness(0.3F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str"");
      stainedGlassPane[glassId].carverHelper.registerBlock(stainedGlassPane[glassId],blockName);
      stainedGlassPane[glassId].carverHelper.blockName=""String_Node_Str"";
    }
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 1,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 2,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 3,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 4,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 5,texName + ""String_Node_Str"");
    OreDictionary.registerOre(oreName,new ItemStack(Blocks.stained_glass_pane,1,i));
    Carving.chisel.registerOre(blockName,oreName);
    for (    CarvableVariation cv : stainedGlassPane[glassId].carverHelper.variations) {
      if (cv.metadata < glassPrefix || cv.metadata >= glassPrefix + 8)       continue;
      stainedGlassPane[glassId].carverHelper.registerVariation(blockName,cv,stainedGlassPane[glassId],cv.metadata);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    paperWall=(BlockCarvablePane)new BlockCarvablePane(Material.ground,true).setCreativeTab(ModTabs.tabChiselBlocks).setHardness(0.5F).setResistance(10F);
    paperWall.carverHelper.setChiselBlockName(""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    paperWall.carverHelper.register(paperWall,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    woolenClay=(BlockCarvable)new BlockCarvable(Material.clay).setCreativeTab(ModTabs.tabChiselBlocks).setHardness(2F).setResistance(10F);
    woolenClay.carverHelper.setChiselBlockName(""String_Node_Str"");
    for (int i=0; i < 16; i++)     woolenClay.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str"" + i + ""String_Node_Str""),i,""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    woolenClay.carverHelper.register(woolenClay,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    laboratory=(BlockCarvable)new BlockCarvable(Material.iron).setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundMetalFootstep);
    laboratory.carverHelper.setChiselBlockName(""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    laboratory.carverHelper.register(laboratory,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int metadata=0; metadata < 16; metadata++) {
      pumpkin[metadata]=(BlockCarvablePumpkin)new BlockCarvablePumpkin(false).setBlockName(""String_Node_Str"").setCreativeTab(ModTabs.tabChiselBlocks);
      pumpkin[metadata].setInformation(""String_Node_Str"" + (metadata + 1) + ""String_Node_Str"");
      GameRegistry.registerBlock(pumpkin[metadata],""String_Node_Str"" + (metadata + 1));
      Carving.chisel.addVariation(""String_Node_Str"",pumpkin[metadata],0,(metadata + 1));
    }
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.pumpkin,0,0);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int metadata=0; metadata < 16; metadata++) {
      jackolantern[metadata]=(BlockCarvablePumpkin)new BlockCarvablePumpkin(true).setBlockName(""String_Node_Str"").setCreativeTab(ModTabs.tabChiselBlocks);
      jackolantern[metadata].setInformation(""String_Node_Str"" + (metadata + 1) + ""String_Node_Str"");
      GameRegistry.registerBlock(jackolantern[metadata],(""String_Node_Str"" + (metadata + 1)));
      Carving.chisel.addVariation(""String_Node_Str"",jackolantern[metadata],0,(metadata + 1));
    }
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.lit_pumpkin,0,0);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    leaf=(BlockLeaf)new BlockLeaf(Material.leaves).setHardness(0.2F).setStepSound(Block.soundTypeGrass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves,0,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves,1,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves,2,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves,3,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves2,0,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves2,1,0);
    if (Configurations.fancy) {
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    }
 else {
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    }
    leaf.carverHelper.register(leaf,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int x=0; x < 16; x++) {
      present[x]=(BlockPresent)new BlockPresent(x).setHardness(2.0F).setResistance(10.0F).setBlockName(""String_Node_Str"");
      GameRegistry.registerBlock(present[x],""String_Node_Str"" + x);
      Carving.chisel.addVariation(""String_Node_Str"",present[x],0,(x + 1));
    }
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    voidstone=(BlockCarvable)new BlockCarvable().setStepSound(Block.soundTypeStone).setCreativeTab(ModTabs.tabChiselBlocks).setHardness(5.0F).setResistance(10.0F);
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    voidstone.carverHelper.register(voidstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    voidstone2=(BlockMarbleTexturedOre)new BlockMarbleTexturedOre(Material.rock,Chisel.MOD_ID + ""String_Node_Str"").setStepSound(Block.soundTypeStone).setCreativeTab(ModTabs.tabChiselBlocks).setHardness(5.0F).setResistance(10.0F);
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    voidstone2.carverHelper.register(voidstone2,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    voidstonePillar=(BlockVoidstonePillar)new BlockVoidstonePillar().setStepSound(Block.soundTypeStone);
    voidstonePillar.carvableHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    voidstonePillar.carvableHelper.register(voidstonePillar,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    voidstonePillar2=(BlockVoidstonePillar2)new BlockVoidstonePillar2().setStepSound(Block.soundTypeStone);
    voidstonePillar2.carvableHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    voidstonePillar2.carvableHelper.register(voidstonePillar2,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    waterstone=(BlockWaterstone)new BlockWaterstone(Material.rock,""String_Node_Str"").setHardness(2.0F).setResistance(10.0F);
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    waterstone.carverHelper.register(waterstone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",waterstone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    hexPlating=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10.0F);
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    hexPlating.carverHelper.register(hexPlating,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    fantasy2=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F);
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    fantasy2.carverHelper.register(fantasy2,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",fantasy2);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    grimstone=(BlockGrimstone)new BlockGrimstone(Material.rock).setHardness(2.0F).setResistance(10F);
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    grimstone.carverHelper.register(grimstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    technical=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F);
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    technical.carverHelper.register(technical,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    technical2=(BlockCarvableGlass)new BlockCarvableGlass().setHardness(2.0F).setResistance(10F);
    technical2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    technical2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    technical2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    technical2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    technical2.carverHelper.register(technical2,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    bone=(BlockCarvable)new BlockCarvable(Material.rock);
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    bone.carverHelper.register(bone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    scorching=(BlockCarvable)new BlockCarvable(Material.rock).setLightLevel(1F);
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    scorching.carverHelper.register(scorching,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    brickCustom=(BlockCarvable)new BlockCarvable(Material.rock).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.brick_block,0,0);
    brickCustom.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    brickCustom.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    brickCustom.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    brickCustom.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    brickCustom.carverHelper.register(brickCustom,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.torch,0,0);
    for (int metadata=0; metadata < 6; metadata++) {
      torch[metadata]=(BlockCarvableTorch)new BlockCarvableTorch().setBlockName(""String_Node_Str"").setCreativeTab(ModTabs.tabChiselBlocks);
      torch[metadata].setInformation(""String_Node_Str"" + (metadata + 1));
      GameRegistry.registerBlock(torch[metadata],""String_Node_Str"" + (metadata + 1));
      Carving.chisel.addVariation(""String_Node_Str"",torch[metadata],0,(metadata + 1));
    }
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    sign=(BlockCarvable)new BlockCarvable(Material.iron);
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    sign.carverHelper.register(sign,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"") && Loader.isModLoaded(""String_Node_Str"")) {
    arcane=(BlockCarvable)new BlockCarvable(Material.rock).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",GameRegistry.findBlock(""String_Node_Str"",""String_Node_Str""),6,0);
    Carving.chisel.addVariation(""String_Node_Str"",GameRegistry.findBlock(""String_Node_Str"",""String_Node_Str""),7,1);
    arcane.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    arcane.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    arcane.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    arcane.carverHelper.register(arcane,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
}","public static void load(){
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    autoChisel=new BlockAutoChisel().setBlockTextureName(""String_Node_Str"").setCreativeTab(ModTabs.tabChisel).setBlockName(""String_Node_Str"").setBlockTextureName(Chisel.MOD_ID + ""String_Node_Str"");
    GameRegistry.registerBlock(autoChisel,""String_Node_Str"");
    Chisel.proxy.registerTileEntities();
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    marble=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    marble.carverHelper.setChiselBlockName(""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    marble.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    marble.carverHelper.register(marble,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",marble);
    OreDictionary.registerOre(""String_Node_Str"",marble);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    marbleSlab=(BlockMarbleSlab)new BlockMarbleSlab(marble).setHardness(2.0F).setResistance(10F);
    marbleSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    marbleSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    marbleSlab.carverHelper.register(marbleSlab,""String_Node_Str"",ItemMarbleSlab.class);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      if (Configurations.oldPillars) {
        marblePillar=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
        marblePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
 else {
        marblePillar=(BlockCarvable)new BlockMarblePillar(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
        marblePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        marblePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
      marblePillar.carverHelper.register(marblePillar,""String_Node_Str"");
      Carving.chisel.setGroupClass(""String_Node_Str"",""String_Node_Str"");
      marblePillarSlab=(BlockMarbleSlab)new BlockMarbleSlab(marblePillar).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
      marblePillarSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
      if (Configurations.oldPillars) {
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
 else {
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
        marblePillarSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      }
      marblePillarSlab.carverHelper.register(marblePillarSlab,""String_Node_Str"",ItemMarbleSlab.class);
    }
    BlockMarbleStairsMaker makerMarbleStairs=new BlockMarbleStairsMaker(marble);
    makerMarbleStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    makerMarbleStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    makerMarbleStairs.create(""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    limestone=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    limestone.carverHelper.setChiselBlockName(""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    limestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    limestone.carverHelper.register(limestone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",limestone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    limestoneSlab=(BlockMarbleSlab)new BlockMarbleSlab(limestone).setHardness(2.0F).setResistance(10F);
    limestoneSlab.carverHelper.setChiselBlockName(""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    limestoneSlab.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    limestoneSlab.carverHelper.register(limestoneSlab,""String_Node_Str"",ItemMarbleSlab.class);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    BlockMarbleStairsMaker makerLimestoneStairs=new BlockMarbleStairsMaker(limestone);
    makerLimestoneStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    makerLimestoneStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    makerLimestoneStairs.create(""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    cobblestone=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.cobblestone,0,0);
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    cobblestone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    cobblestone.carverHelper.register(cobblestone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    glass=(BlockCarvableGlass)new BlockCarvableGlass().setHardness(0.3F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glass,0,0);
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    glass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    glass.carverHelper.register(glass,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    sandstone=(BlockCarvable)new BlockCarvable(Material.rock).setStepSound(Block.soundTypeStone).setHardness(0.8F);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.sandstone,0,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.sandstone,1,1);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.sandstone,2,2);
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    sandstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    sandstone.carverHelper.register(sandstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      sandSnakestone=(BlockSnakestone)new BlockSnakestone(""String_Node_Str"").setBlockName(""String_Node_Str"");
      GameRegistry.registerBlock(sandSnakestone,ItemCarvable.class,""String_Node_Str"");
      Carving.chisel.addVariation(""String_Node_Str"",sandSnakestone,1,16);
      Carving.chisel.addVariation(""String_Node_Str"",sandSnakestone,13,17);
      Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    sandstoneScribbles=(BlockCarvable)new BlockCarvable(Material.rock).setStepSound(Block.soundTypeStone).setHardness(0.8F);
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    sandstoneScribbles.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    sandstoneScribbles.carverHelper.register(sandstoneScribbles,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    concrete=(BlockConcrete)new BlockConcrete().setStepSound(Block.soundTypeStone).setHardness(0.5F);
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    concrete.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    concrete.carverHelper.register(concrete,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",concrete);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    roadLine=(BlockRoadLine)new BlockRoadLine().setStepSound(Block.soundTypeStone).setHardness(0.01F).setBlockName(""String_Node_Str"");
    GameRegistry.registerBlock(roadLine,ItemCarvable.class,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    iron=(BlockBeaconBase)new BlockBeaconBase().setHardness(5F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.iron_block,0,0);
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    iron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    iron.carverHelper.register(iron,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    gold=(BlockBeaconBase)new BlockBeaconBase().setHardness(3F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.gold_block,0,0);
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    gold.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    gold.carverHelper.register(gold,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    diamond=(BlockBeaconBase)new BlockBeaconBase().setHardness(5F).setResistance(10F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.diamond_block,0,0);
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    diamond.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    diamond.carverHelper.register(diamond,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    lightstone=(BlockLightstoneCarvable)new BlockLightstoneCarvable().setHardness(0.3F).setLightLevel(1.0F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glowstone,0,0);
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    lightstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    lightstone.carverHelper.register(lightstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    lapis=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(3F).setResistance(5F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.lapis_block,0,0);
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    lapis.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    lapis.carverHelper.register(lapis,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    emerald=(BlockBeaconBase)new BlockBeaconBase().setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.emerald_block,0,0);
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    emerald.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    emerald.carverHelper.register(emerald,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    netherBrick=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.nether_brick,0,0);
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    netherBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    netherBrick.carverHelper.register(netherBrick,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    netherrack=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(0.4F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.netherrack,0,0);
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    netherrack.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    netherrack.carverHelper.register(netherrack,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    cobblestoneMossy=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.mossy_cobblestone,0,0);
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    cobblestoneMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    cobblestoneMossy.carverHelper.register(cobblestoneMossy,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    stoneBrick=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(1.5F).setResistance(10.0F).setStepSound(Block.soundTypeStone);
    for (int i=0; i < 4; i++) {
      if (i == 1) {
        if (Configurations.allowMossy)         Carving.chisel.addVariation(""String_Node_Str"",Blocks.stonebrick,i,i);
      }
 else       Carving.chisel.addVariation(""String_Node_Str"",Blocks.stonebrick,i,i);
    }
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    stoneBrick.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    stoneBrick.carverHelper.register(stoneBrick,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    snakestone=(BlockSnakestone)new BlockSnakestone(""String_Node_Str"").setBlockName(""String_Node_Str"");
    GameRegistry.registerBlock(snakestone,ItemCarvable.class,""String_Node_Str"");
    Carving.chisel.addVariation(""String_Node_Str"",snakestone,1,16);
    Carving.chisel.addVariation(""String_Node_Str"",snakestone,13,17);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    dirt=(BlockCarvable)new BlockCarvable(Material.ground).setHardness(0.5F).setStepSound(Block.soundTypeGravel).setBlockName(""String_Node_Str"");
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.dirt,0,0);
    dirt.carverHelper.setChiselBlockName(""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    dirt.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    dirt.carverHelper.register(dirt,""String_Node_Str"");
    dirt.setHarvestLevel(""String_Node_Str"",0);
    OreDictionary.registerOre(""String_Node_Str"",dirt);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    ice=(BlockMarbleIce)new BlockMarbleIce().setHardness(0.5F).setLightOpacity(3).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.ice,0,0);
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    ice.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    ice.carverHelper.register(ice,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      icePillar=(BlockMarbleIce)new BlockMarbleIce().setHardness(0.5F).setLightOpacity(3).setStepSound(Block.soundTypeGlass);
      icePillar.carverHelper.setChiselBlockName(""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      icePillar.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      icePillar.carverHelper.register(icePillar,""String_Node_Str"");
      Carving.chisel.setGroupClass(""String_Node_Str"",""String_Node_Str"");
    }
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      BlockMarbleStairsMaker makerIceStairs=new BlockMarbleStairsMaker(Blocks.ice);
      makerIceStairs.carverHelper.setChiselBlockName(""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,Blocks.ice);
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      makerIceStairs.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      makerIceStairs.create(new BlockMarbleStairsMakerCreator(){
        @Override public BlockMarbleStairs create(        Block block,        int meta,        CarvableHelper helper){
          return new BlockMarbleIceStairs(block,meta,helper);
        }
      }
,""String_Node_Str"");
      Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    String[] plank_names={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    String[] plank_ucnames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    for (int i=0; i < 6; i++) {
      String n=plank_names[i];
      String u=plank_ucnames[i];
      final String orename=n.replace('-','_') + ""String_Node_Str"";
      planks[i]=(BlockCarvable)(new BlockCarvable(Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundTypeWood);
      planks[i].carverHelper.setChiselBlockName(u + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",1,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",2,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",6,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",8,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",9,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",10,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",11,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",13,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",3,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",4,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",5,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",7,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",12,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(u + ""String_Node_Str"",14,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.addVariation(""String_Node_Str"" + n + ""String_Node_Str"",15,""String_Node_Str"" + n + ""String_Node_Str"");
      planks[i].carverHelper.register(planks[i],orename);
      Carving.chisel.addVariation(orename,Blocks.planks,i,0);
      planks[i].setHarvestLevel(""String_Node_Str"",0);
      Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
      Carving.chisel.setVariationSound(orename,Chisel.MOD_ID + ""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    obsidian=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(50.0F).setResistance(2000.0F).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.obsidian,0,0);
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    obsidian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    obsidian.carverHelper.register(obsidian,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    obsidianSnakestone=(BlockSnakestoneObsidian)new BlockSnakestoneObsidian(""String_Node_Str"").setBlockName(""String_Node_Str"").setHardness(50.0F).setResistance(2000.0F);
    GameRegistry.registerBlock(obsidianSnakestone,ItemCarvable.class,""String_Node_Str"");
    Carving.chisel.addVariation(""String_Node_Str"",obsidianSnakestone,1,16);
    Carving.chisel.addVariation(""String_Node_Str"",obsidianSnakestone,13,17);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    paneIron=(BlockCarvablePane)new BlockCarvablePane(Material.iron,true).setHardness(0.3F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.iron_bars,0,0);
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    paneIron.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    paneIron.carverHelper.register(paneIron,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    paneGlass=(BlockCarvablePane)new BlockCarvablePane(Material.glass,false).setHardness(0.3F).setStepSound(Block.soundTypeGlass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.glass_pane,0,0);
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    paneGlass.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    paneGlass.carverHelper.register(paneGlass,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    redstone=(BlockCarvablePowered)(new BlockCarvablePowered(Material.iron)).setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.redstone_block,0,0);
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    redstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    redstone.carverHelper.register(redstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    holystone=(BlockHolystone)new BlockHolystone(Material.rock).setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundHolystoneFootstep);
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    holystone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    holystone.carverHelper.register(holystone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",holystone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    lavastone=(BlockLavastone)new BlockLavastone(Material.rock,""String_Node_Str"").setHardness(2.0F).setResistance(10F);
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    lavastone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    lavastone.carverHelper.register(lavastone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",lavastone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    fantasy=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F);
    fantasy.carverHelper.setChiselBlockName(""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    fantasy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    fantasy.carverHelper.register(fantasy,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",fantasy);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    carpet=(BlockCarvable)new BlockCarvable(Material.cloth).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeCloth);
    carpet.carverHelper.setChiselBlockName(""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    carpet.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    carpet.carverHelper.forbidChiseling=true;
    carpet.carverHelper.register(carpet,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",carpet);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    carpetFloor=(BlockMarbleCarpet)new BlockMarbleCarpet(Material.cloth).setHardness(2.0F).setResistance(10F).setStepSound(Block.soundTypeCloth);
    carpetFloor.carverHelper.setChiselBlockName(""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    carpetFloor.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    carpetFloor.carverHelper.forbidChiseling=true;
    carpetFloor.carverHelper.register(carpetFloor,""String_Node_Str"");
    for (int i=0; i < 16; i++) {
      String group=""String_Node_Str"" + i;
      Carving.needle.addVariation(group,Blocks.carpet,i,0);
      Carving.needle.addVariation(group,carpetFloor,i,2);
      Carving.needle.addVariation(group,carpet,i,1);
    }
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    bookshelf=(BlockCarvable)new BlockMarbleBookshelf().setHardness(1.5F).setStepSound(Block.soundTypeWood);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.bookshelf,0,0);
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    bookshelf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    bookshelf.carverHelper.register(bookshelf,""String_Node_Str"");
    bookshelf.setHarvestLevel(""String_Node_Str"",0);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    tyrian=(BlockCarvable)new BlockCarvable(Material.iron).setHardness(5.0F).setResistance(10.0F).setStepSound(Block.soundTypeMetal);
    tyrian.carverHelper.setChiselBlockName(""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    tyrian.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    tyrian.carverHelper.register(tyrian,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",tyrian);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    temple=(BlockCarvable)new BlockEldritch().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundTempleFootstep);
    temple.carverHelper.setChiselBlockName(""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    temple.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    temple.carverHelper.register(temple,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    if (Configurations.featureEnabled(""String_Node_Str"")) {
      templeMossy=(BlockCarvable)new BlockEldritch().setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundTempleFootstep);
      templeMossy.carverHelper.setChiselBlockName(""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
      templeMossy.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
      templeMossy.carverHelper.register(templeMossy,""String_Node_Str"");
      Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    cloud=(BlockCloud)new BlockCloud().setHardness(0.2F).setLightOpacity(3).setStepSound(Block.soundTypeCloth);
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    cloud.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    cloud.carverHelper.register(cloud,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",cloud);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    factory=(BlockCarvable)new BlockCarvable(Material.iron).setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundMetalFootstep);
    factory.carverHelper.setChiselBlockName(""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    factory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    factory.carverHelper.register(factory,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  String[] sGNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  if (Configurations.featureEnabled(""String_Node_Str""))   for (int i=0; i < 16; i++) {
    final String blockName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    String oreName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String texName=""String_Node_Str"" + sGNames[i].toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    int glassPrefix=(i & 3) << 2;
    int glassId=i >> 2;
    Carving.chisel.addVariation(blockName,Blocks.stained_glass,i,0);
    if (glassPrefix == 0) {
      stainedGlass[glassId]=(BlockCarvableGlass)new BlockCarvableGlass().setStained(true).setHardness(0.3F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str"");
      stainedGlass[glassId].carverHelper.registerBlock(stainedGlass[glassId],blockName);
    }
    stainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix,texName + ""String_Node_Str"");
    stainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 1,texName + ""String_Node_Str"");
    stainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 2,texName + ""String_Node_Str"");
    stainedGlass[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 3,texName + ""String_Node_Str"");
    OreDictionary.registerOre(oreName,new ItemStack(Blocks.stained_glass,1,i));
    Carving.chisel.registerOre(blockName,oreName);
    for (    CarvableVariation cv : stainedGlass[glassId].carverHelper.variations) {
      if (cv.metadata < glassPrefix || cv.metadata >= glassPrefix + 4)       continue;
      stainedGlass[glassId].carverHelper.registerVariation(blockName,cv,stainedGlass[glassId],cv.metadata);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str""))   for (int i=0; i < 16; i++) {
    final String blockName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
    String oreName=""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String texName=""String_Node_Str"" + sGNames[i].toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
    Carving.chisel.addVariation(blockName,Blocks.stained_glass_pane,i,0);
    int glassPrefix=(i & 1) << 3;
    int glassId=i >> 1;
    if (glassPrefix == 0) {
      stainedGlassPane[glassId]=(BlockCarvablePane)new BlockCarvablePane(Material.glass,true).setStained(true).setHardness(0.3F).setStepSound(Block.soundTypeGlass).setBlockName(""String_Node_Str"");
      stainedGlassPane[glassId].carverHelper.registerBlock(stainedGlassPane[glassId],blockName);
      stainedGlassPane[glassId].carverHelper.blockName=""String_Node_Str"";
    }
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 1,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 2,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 3,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 4,texName + ""String_Node_Str"");
    stainedGlassPane[glassId].carverHelper.addVariation(sGNames[i] + ""String_Node_Str"",glassPrefix + 5,texName + ""String_Node_Str"");
    OreDictionary.registerOre(oreName,new ItemStack(Blocks.stained_glass_pane,1,i));
    Carving.chisel.registerOre(blockName,oreName);
    for (    CarvableVariation cv : stainedGlassPane[glassId].carverHelper.variations) {
      if (cv.metadata < glassPrefix || cv.metadata >= glassPrefix + 8)       continue;
      stainedGlassPane[glassId].carverHelper.registerVariation(blockName,cv,stainedGlassPane[glassId],cv.metadata);
    }
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    paperWall=(BlockCarvablePane)new BlockCarvablePane(Material.ground,true).setCreativeTab(ModTabs.tabChiselBlocks).setHardness(0.5F).setResistance(10F);
    paperWall.carverHelper.setChiselBlockName(""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    paperWall.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    paperWall.carverHelper.register(paperWall,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    woolenClay=(BlockCarvable)new BlockCarvable(Material.clay).setCreativeTab(ModTabs.tabChiselBlocks).setHardness(2F).setResistance(10F);
    woolenClay.carverHelper.setChiselBlockName(""String_Node_Str"");
    for (int i=0; i < 16; i++)     woolenClay.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str"" + i + ""String_Node_Str""),i,""String_Node_Str"" + sGNames[i].replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    woolenClay.carverHelper.register(woolenClay,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    laboratory=(BlockCarvable)new BlockCarvable(Material.iron).setHardness(2.0F).setResistance(10F).setStepSound(Chisel.soundMetalFootstep);
    laboratory.carverHelper.setChiselBlockName(""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    laboratory.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    laboratory.carverHelper.register(laboratory,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int metadata=0; metadata < 16; metadata++) {
      pumpkin[metadata]=(BlockCarvablePumpkin)new BlockCarvablePumpkin(false).setBlockName(""String_Node_Str"").setCreativeTab(ModTabs.tabChiselBlocks);
      pumpkin[metadata].setInformation(""String_Node_Str"" + (metadata + 1) + ""String_Node_Str"");
      GameRegistry.registerBlock(pumpkin[metadata],""String_Node_Str"" + (metadata + 1));
      Carving.chisel.addVariation(""String_Node_Str"",pumpkin[metadata],0,(metadata + 1));
    }
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.pumpkin,0,0);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int metadata=0; metadata < 16; metadata++) {
      jackolantern[metadata]=(BlockCarvablePumpkin)new BlockCarvablePumpkin(true).setBlockName(""String_Node_Str"").setCreativeTab(ModTabs.tabChiselBlocks);
      jackolantern[metadata].setInformation(""String_Node_Str"" + (metadata + 1) + ""String_Node_Str"");
      GameRegistry.registerBlock(jackolantern[metadata],(""String_Node_Str"" + (metadata + 1)));
      Carving.chisel.addVariation(""String_Node_Str"",jackolantern[metadata],0,(metadata + 1));
    }
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.lit_pumpkin,0,0);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    leaf=(BlockLeaf)new BlockLeaf(Material.leaves).setHardness(0.2F).setStepSound(Block.soundTypeGrass);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves,0,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves,1,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves,2,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves,3,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves2,0,0);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.leaves2,1,0);
    if (Configurations.fancy) {
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    }
 else {
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
      leaf.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    }
    leaf.carverHelper.register(leaf,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    for (int x=0; x < 16; x++) {
      present[x]=(BlockPresent)new BlockPresent(x).setHardness(2.0F).setResistance(10.0F).setBlockName(""String_Node_Str"");
      GameRegistry.registerBlock(present[x],""String_Node_Str"" + x);
      Carving.chisel.addVariation(""String_Node_Str"",present[x],0,(x + 1));
    }
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    voidstone=(BlockCarvable)new BlockCarvable().setStepSound(Block.soundTypeStone).setCreativeTab(ModTabs.tabChiselBlocks).setHardness(5.0F).setResistance(10.0F);
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    voidstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    voidstone.carverHelper.register(voidstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    voidstone2=(BlockMarbleTexturedOre)new BlockMarbleTexturedOre(Material.rock,Chisel.MOD_ID + ""String_Node_Str"").setStepSound(Block.soundTypeStone).setCreativeTab(ModTabs.tabChiselBlocks).setHardness(5.0F).setResistance(10.0F);
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    voidstone2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    voidstone2.carverHelper.register(voidstone2,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    voidstonePillar=(BlockVoidstonePillar)new BlockVoidstonePillar().setStepSound(Block.soundTypeStone);
    voidstonePillar.carvableHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    voidstonePillar.carvableHelper.register(voidstonePillar,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    voidstonePillar2=(BlockVoidstonePillar2)new BlockVoidstonePillar2().setStepSound(Block.soundTypeStone);
    voidstonePillar2.carvableHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    voidstonePillar2.carvableHelper.register(voidstonePillar2,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    waterstone=(BlockWaterstone)new BlockWaterstone(Material.rock,""String_Node_Str"").setHardness(2.0F).setResistance(10.0F);
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    waterstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    waterstone.carverHelper.register(waterstone,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",waterstone);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    hexPlating=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10.0F);
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    hexPlating.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    hexPlating.carverHelper.register(hexPlating,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    fantasy2=(BlockCarvable)new BlockCarvable().setHardness(2.0F).setResistance(10F);
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    fantasy2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    fantasy2.carverHelper.register(fantasy2,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",fantasy2);
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    grimstone=(BlockGrimstone)new BlockGrimstone(Material.rock).setHardness(2.0F).setResistance(10F);
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    grimstone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    grimstone.carverHelper.register(grimstone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    technical=(BlockCarvable)new BlockCarvable(Material.rock).setHardness(2.0F).setResistance(10F);
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),6,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),7,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),8,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),9,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),10,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),11,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),12,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),13,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),14,""String_Node_Str"");
    technical.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),15,""String_Node_Str"");
    technical.carverHelper.register(technical,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
    technical2=(BlockCarvableGlass)new BlockCarvableGlass().setHardness(2.0F).setResistance(10F);
    technical2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    technical2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    technical2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    technical2.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    technical2.carverHelper.register(technical2,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    bone=(BlockCarvable)new BlockCarvable(Material.rock);
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    bone.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    bone.carverHelper.register(bone,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    scorching=(BlockCarvable)new BlockCarvable(Material.rock).setLightLevel(1F);
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    scorching.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    scorching.carverHelper.register(scorching,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    brickCustom=(BlockCarvable)new BlockCarvable(Material.rock).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.brick_block,0,0);
    brickCustom.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    brickCustom.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    brickCustom.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    brickCustom.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),5,""String_Node_Str"");
    brickCustom.carverHelper.register(brickCustom,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    Carving.chisel.addVariation(""String_Node_Str"",Blocks.torch,0,0);
    for (int metadata=0; metadata < 6; metadata++) {
      torch[metadata]=(BlockCarvableTorch)new BlockCarvableTorch().setBlockName(""String_Node_Str"").setCreativeTab(ModTabs.tabChiselBlocks);
      torch[metadata].setInformation(""String_Node_Str"" + (metadata + 1));
      GameRegistry.registerBlock(torch[metadata],""String_Node_Str"" + (metadata + 1));
      Carving.chisel.addVariation(""String_Node_Str"",torch[metadata],0,(metadata + 1));
    }
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"")) {
    sign=(BlockCarvable)new BlockCarvable(Material.iron).setHardness(2.0F).setResistance(10.0F);
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),3,""String_Node_Str"");
    sign.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),4,""String_Node_Str"");
    sign.carverHelper.register(sign,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
  if (Configurations.featureEnabled(""String_Node_Str"") && Loader.isModLoaded(""String_Node_Str"")) {
    arcane=(BlockCarvable)new BlockCarvable(Material.rock).setStepSound(Block.soundTypeStone);
    Carving.chisel.addVariation(""String_Node_Str"",GameRegistry.findBlock(""String_Node_Str"",""String_Node_Str""),6,0);
    Carving.chisel.addVariation(""String_Node_Str"",GameRegistry.findBlock(""String_Node_Str"",""String_Node_Str""),7,1);
    arcane.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),0,""String_Node_Str"");
    arcane.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),1,""String_Node_Str"");
    arcane.carverHelper.addVariation(StatCollector.translateToLocal(""String_Node_Str""),2,""String_Node_Str"");
    arcane.carverHelper.register(arcane,""String_Node_Str"");
    Carving.chisel.registerOre(""String_Node_Str"",""String_Node_Str"");
  }
}"
59916,"@Override public void updateEntity(){
  super.updateEntity();
  checkForAdjacentPresents();
  float f;
  if (!worldObj.isRemote && numPlayersUsing != 0 && (+xCoord + yCoord + zCoord) % 200 == 0) {
    numPlayersUsing=0;
    f=5.0F;
    List list=worldObj.getEntitiesWithinAABB(EntityPlayer.class,AxisAlignedBB.getBoundingBox(xCoord - f,yCoord - f,zCoord - f,(xCoord + 1) + f,(yCoord + 1) + f,(zCoord + 1) + f));
    Iterator iterator=list.iterator();
    while (iterator.hasNext()) {
      EntityPlayer player=(EntityPlayer)iterator.next();
      if (player.openContainer instanceof ContainerPresent) {
        IInventory inventory=((ContainerPresent)player.openContainer).getLowerPresentInventory();
        if (inventory == this || inventory instanceof InventoryLargePresent && ((InventoryLargePresent)inventory).isPartOfLargePresent(this)) {
          ++numPlayersUsing;
        }
      }
    }
  }
  prevLidAngle=lidAngle;
  f=0.1F;
  double d2;
  if (numPlayersUsing > 0 && lidAngle == 0.0F && adjacentChestZNeg == null && adjacentChestXNeg == null) {
    double d1=xCoord + 0.5D;
    d2=xCoord + 0.5D;
    if (adjacentChestZPos != null) {
      d2+=0.5D;
    }
    if (adjacentChestXPos != null) {
      d1+=0.5D;
    }
    worldObj.playSoundEffect(d1,yCoord + 0.5D,d2,""String_Node_Str"",0.5F,worldObj.rand.nextFloat() * 0.1F + 0.9F);
  }
  if (numPlayersUsing == 0 && lidAngle > 0.0F || numPlayersUsing > 0 && lidAngle < 1.0F) {
    float f1=lidAngle;
    if (numPlayersUsing > 0) {
      lidAngle+=f;
    }
 else {
      lidAngle-=f;
    }
    if (lidAngle > 1.0F) {
      lidAngle=1.0F;
    }
    float f2=0.5F;
    if (lidAngle < f2 && f1 >= f2 && adjacentChestZNeg == null && adjacentChestXNeg == null) {
      d2=xCoord + 0.5D;
      double d0=zCoord + 0.5D;
      if (adjacentChestZPos != null) {
        d0+=0.5D;
      }
      if (adjacentChestXPos != null) {
        d2+=0.5D;
      }
      worldObj.playSoundEffect(d2,yCoord + 0.5D,d0,""String_Node_Str"",0.5F,worldObj.rand.nextFloat() * 0.1F + 0.9F);
    }
    if (lidAngle < 0.0F) {
      lidAngle=0.0F;
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  checkForAdjacentPresents();
  float f;
  if (!worldObj.isRemote && numPlayersUsing != 0 && (+xCoord + yCoord + zCoord) % 200 == 0) {
    numPlayersUsing=0;
    f=5.0F;
    List<?> list=worldObj.getEntitiesWithinAABB(EntityPlayer.class,AxisAlignedBB.getBoundingBox(xCoord - f,yCoord - f,zCoord - f,(xCoord + 1) + f,(yCoord + 1) + f,(zCoord + 1) + f));
    Iterator<?> iterator=list.iterator();
    while (iterator.hasNext()) {
      EntityPlayer player=(EntityPlayer)iterator.next();
      if (player.openContainer instanceof ContainerPresent) {
        IInventory inventory=((ContainerPresent)player.openContainer).getLowerPresentInventory();
        if (inventory == this || inventory instanceof InventoryLargePresent && ((InventoryLargePresent)inventory).isPartOfLargePresent(this)) {
          ++numPlayersUsing;
        }
      }
    }
  }
  prevLidAngle=lidAngle;
  f=0.1F;
  double d2;
  if (numPlayersUsing > 0 && lidAngle == 0.0F && adjacentChestZNeg == null && adjacentChestXNeg == null) {
    double d1=xCoord + 0.5D;
    d2=xCoord + 0.5D;
    if (adjacentChestZPos != null) {
      d2+=0.5D;
    }
    if (adjacentChestXPos != null) {
      d1+=0.5D;
    }
    worldObj.playSoundEffect(d1,yCoord + 0.5D,d2,""String_Node_Str"",0.5F,worldObj.rand.nextFloat() * 0.1F + 0.9F);
  }
  if (numPlayersUsing == 0 && lidAngle > 0.0F || numPlayersUsing > 0 && lidAngle < 1.0F) {
    float f1=lidAngle;
    if (numPlayersUsing > 0) {
      lidAngle+=f;
    }
 else {
      lidAngle-=f;
    }
    if (lidAngle > 1.0F) {
      lidAngle=1.0F;
    }
    float f2=0.5F;
    if (lidAngle < f2 && f1 >= f2 && adjacentChestZNeg == null && adjacentChestXNeg == null) {
      d2=xCoord + 0.5D;
      double d0=zCoord + 0.5D;
      if (adjacentChestZPos != null) {
        d0+=0.5D;
      }
      if (adjacentChestXPos != null) {
        d2+=0.5D;
      }
      worldObj.playSoundEffect(d2,yCoord + 0.5D,d0,""String_Node_Str"",0.5F,worldObj.rand.nextFloat() * 0.1F + 0.9F);
    }
    if (lidAngle < 0.0F) {
      lidAngle=0.0F;
    }
  }
}"
59917,"void registerBlock(Block block,String name,Class cl){
  block.setBlockName(name);
  GameRegistry.registerBlock(block,cl,name);
  chiselBlocks.add(block);
}","void registerBlock(Block block,String name,Class<? extends ItemCarvable> cl){
  block.setBlockName(name);
  GameRegistry.registerBlock(block,cl,name);
  chiselBlocks.add(block);
}"
59918,"public void register(Block block,String name,Class cl){
  registerBlock(block,name,cl);
  if (block instanceof BlockMarbleSlab) {
    BlockMarbleSlab slab=(BlockMarbleSlab)block;
  }
  for (  CarvableVariation variation : variations) {
    registerVariation(name,variation,block,variation.metadata);
    if (block instanceof BlockMarbleSlab && ((BlockMarbleSlab)block).isBottom) {
      BlockMarbleSlab slab=(BlockMarbleSlab)block;
      slab.top.setHarvestLevel(""String_Node_Str"",0,variation.metadata);
      if (!forbidChiseling) {
        Carving.chisel.addVariation(name + ""String_Node_Str"",slab.top,variation.metadata,0);
        Carving.chisel.setGroupClass(name + ""String_Node_Str"",name);
      }
    }
  }
}","public void register(Block block,String name,Class<? extends ItemCarvable> cl){
  registerBlock(block,name,cl);
  if (block instanceof BlockMarbleSlab) {
    BlockMarbleSlab slab=(BlockMarbleSlab)block;
  }
  for (  CarvableVariation variation : variations) {
    registerVariation(name,variation,block,variation.metadata);
    if (block instanceof BlockMarbleSlab && ((BlockMarbleSlab)block).isBottom) {
      BlockMarbleSlab slab=(BlockMarbleSlab)block;
      slab.top.setHarvestLevel(""String_Node_Str"",0,variation.metadata);
      if (!forbidChiseling) {
        Carving.chisel.addVariation(name + ""String_Node_Str"",slab.top,variation.metadata,0);
        Carving.chisel.setGroupClass(name + ""String_Node_Str"",name);
      }
    }
  }
}"
59919,"public void registerSubBlocks(Block block,CreativeTabs tabs,List list){
  for (  CarvableVariation variation : variations) {
    list.add(new ItemStack(block,1,variation.metadata));
  }
}","public void registerSubBlocks(Block block,CreativeTabs tabs,List<ItemStack> list){
  for (  CarvableVariation variation : variations) {
    list.add(new ItemStack(block,1,variation.metadata));
  }
}"
59920,"public ContainerPresent(IInventory player,IInventory chest){
  super(player,chest);
  lower=chest;
  rows=chest.getSizeInventory() / 9;
  chest.openInventory();
  int a=(rows - 4) * 18, b, c;
  for (int d=0; d < rows; d++) {
    for (int e=0; e < 9; e++) {
      addSlotToContainer(new Slot(chest,e + d * 9,8 + e * 18,18 + d * 18));
    }
  }
  for (int d=0; d < 3; d++) {
    for (int e=0; e < 9; e++) {
      addSlotToContainer(new Slot(player,e + d * 9 + 9,8 + e * 18,103 + d * 18 + a));
    }
  }
  for (int d=0; d < 9; d++) {
    addSlotToContainer(new Slot(player,d,8 + d * 18,161 + a));
  }
}","public ContainerPresent(IInventory player,IInventory chest){
  super(player,chest);
  lower=chest;
  rows=chest.getSizeInventory() / 9;
  chest.openInventory();
  int a=(rows - 4) * 18;
  for (int d=0; d < rows; d++) {
    for (int e=0; e < 9; e++) {
      addSlotToContainer(new Slot(chest,e + d * 9,8 + e * 18,18 + d * 18));
    }
  }
  for (int d=0; d < 3; d++) {
    for (int e=0; e < 9; e++) {
      addSlotToContainer(new Slot(player,e + d * 9 + 9,8 + e * 18,103 + d * 18 + a));
    }
  }
  for (int d=0; d < 9; d++) {
    addSlotToContainer(new Slot(player,d,8 + d * 18,161 + a));
  }
}"
59921,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int size,float hitX,float hitY,float hitZ){
  if (world.isRemote)   return false;
  TileEntity tile=world.getTileEntity(x,y,z);
  TileEntityAutoChisel autoChisel;
  if (tile != null && tile instanceof TileEntityAutoChisel) {
    TileEntityAutoChisel autoChisel1=(TileEntityAutoChisel)tile;
  }
  return true;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int size,float hitX,float hitY,float hitZ){
  if (world.isRemote)   return false;
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile != null && tile instanceof TileEntityAutoChisel) {
  }
  return true;
}"
59922,"public synchronized void moveToUpdating(){
  updated.left=(int)GameMath.gate(0,updated.left,mapWidth);
  updated.right=(int)GameMath.gate(0,updated.right,mapWidth);
  updated.top=(int)GameMath.gate(0,updated.top,mapHeight);
  updated.bottom=(int)GameMath.gate(0,updated.bottom,mapHeight);
  updating=new Rect(updated);
  updated.setEmpty();
}","public synchronized void moveToUpdating(){
  updating=new Rect(updated);
  updated.setEmpty();
}"
59923,"public synchronized void updateFogArea(int x,int y,int w,int h){
  updated.union(x,y);
  updated.union(x + w,y + h);
}","public synchronized void updateFogArea(int x,int y,int w,int h){
  updated.union(x,y);
  updated.union(x + w,y + h);
  updated=updated.intersect(new Rect(0,0,mapWidth,mapHeight));
}"
59924,"protected void onClick(){
  text.destroy();
  onClose();
}","protected void onClick(){
  onClose();
}"
59925,"@Override protected void createChildren(){
  super.createChildren();
  bg=Chrome.get(Chrome.Type.TOAST_TR);
  add(bg);
  close=new SimpleButton(Icons.get(Icons.CLOSE)){
    protected void onClick(){
      text.destroy();
      onClose();
    }
  }
;
  add(close);
  text=PixelScene.renderMultiline(8);
  add(text);
}","@Override protected void createChildren(){
  super.createChildren();
  bg=Chrome.get(Chrome.Type.TOAST_TR);
  add(bg);
  close=new SimpleButton(Icons.get(Icons.CLOSE)){
    protected void onClick(){
      onClose();
    }
  }
;
  add(close);
  text=PixelScene.renderMultiline(8);
  add(text);
}"
59926,"@Override public void filter(int minMode,int maxMode){
  fModeMin=minMode;
  fModeMax=maxMode;
  if (id != -1)   super.filter(fModeMin=minMode,fModeMax=maxMode);
}","@Override public void filter(int minMode,int maxMode){
  if (fModeMin == minMode && fModeMax == maxMode)   return;
  fModeMin=minMode;
  fModeMax=maxMode;
  if (id != -1)   super.filter(fModeMin,fModeMax);
}"
59927,"@Override protected void generate(){
  super.generate();
  bitmap(bitmap);
  filter(fModeMin,fModeMax);
  wrap(wModeH,wModeV);
}","@Override protected void generate(){
  super.generate();
  bitmap(bitmap);
  super.filter(fModeMin,fModeMax);
  super.wrap(wModeH,wModeV);
}"
59928,"@Override public void wrap(int s,int t){
  wModeH=s;
  wModeV=t;
  if (id != -1)   super.wrap(wModeH=s,wModeV=t);
}","@Override public void wrap(int s,int t){
  if (wModeH == s && wModeV == t)   return;
  wModeH=s;
  wModeV=t;
  if (id != -1)   super.wrap(wModeH,wModeV);
}"
59929,"@Override protected void updateMatrix(){
  float sx=scroll.x + shakeX;
  float sy=scroll.y + shakeY;
  matrix[0]=+zoom * invW2;
  matrix[5]=-zoom * invH2;
  matrix[12]=-1 + x * invW2 - sx * matrix[0];
  matrix[13]=+1 - y * invH2 - sy * matrix[5];
}","@Override protected void updateMatrix(){
  float sx=Math.round(scroll.x + shakeX);
  float sy=Math.round(scroll.y + shakeY);
  matrix[0]=+zoom * invW2;
  matrix[5]=-zoom * invH2;
  matrix[12]=-1 + x * invW2 - sx * matrix[0];
  matrix[13]=+1 - y * invH2 - sy * matrix[5];
}"
59930,"@Override public boolean touchUp(int screenX,int screenY,int pointer,int button){
  eventTouch.dispatch(pointers.remove(button).up());
  return true;
}","@Override public boolean touchUp(int screenX,int screenY,int pointer,int button){
  Touch touch=pointers.remove(button);
  if (touch != null) {
    eventTouch.dispatch(touch.up());
    return true;
  }
  return false;
}"
59931,"@Override protected void createChildren(){
  super.createChildren();
  slot=new ItemSlot(){
    @Override protected void onClick(){
      if (NoosaInputProcessor.modifier) {
        onLongClick();
        return;
      }
      if (targeting) {
        GameScene.handleCell(lastTarget.pos);
      }
 else {
        Item item=select(slotNum);
        if (item.stackable || item instanceof Wand || item instanceof Boomerang)         useTargeting();
        item.execute(Dungeon.hero);
      }
    }
    @Override protected boolean onLongClick(){
      return QuickSlotButton.this.onLongClick();
    }
    @Override protected void onTouchDown(){
      icon.lightness(0.7f);
    }
    @Override protected void onTouchUp(){
      icon.resetColor();
    }
  }
;
  add(slot);
  crossB=Icons.TARGET.get();
  crossB.visible=false;
  add(crossB);
  crossM=new Image();
  crossM.copy(crossB);
}","@Override protected void createChildren(){
  super.createChildren();
  slot=new ItemSlot(){
    @Override protected void onClick(){
      if (!Dungeon.hero.isAlive())       return;
      if (NoosaInputProcessor.modifier) {
        onLongClick();
        return;
      }
      if (targeting) {
        GameScene.handleCell(lastTarget.pos);
      }
 else {
        Item item=select(slotNum);
        if (item.stackable || item instanceof Wand || item instanceof Boomerang)         useTargeting();
        item.execute(Dungeon.hero);
      }
    }
    @Override protected boolean onLongClick(){
      return QuickSlotButton.this.onLongClick();
    }
    @Override protected void onTouchDown(){
      icon.lightness(0.7f);
    }
    @Override protected void onTouchUp(){
      icon.resetColor();
    }
  }
;
  add(slot);
  crossB=Icons.TARGET.get();
  crossB.visible=false;
  add(crossB);
  crossM=new Image();
  crossM.copy(crossB);
}"
59932,"@Override public void create(){
  super.create();
  Image shpx=Icons.SHPX.get();
  shpx.x=align((Camera.main.width - shpx.width()) / 2);
  shpx.y=align(30);
  add(shpx);
  new Flare(7,64).color(0x225511,true).show(shpx,0).angularSpeed=+20;
  BitmapTextMultiline shpxtitle=createMultiline(TTL_SHPX,8);
  shpxtitle.maxWidth=Math.min(Camera.main.width,120);
  shpxtitle.measure();
  shpxtitle.hardlight(Window.SHPX_COLOR);
  add(shpxtitle);
  shpxtitle.x=align((Camera.main.width - shpxtitle.width()) / 2);
  shpxtitle.y=align(shpx.y + shpx.height + 5);
  BitmapTextMultiline shpxtext=createMultiline(TXT_SHPX,8);
  shpxtext.maxWidth=Math.min(Camera.main.width,120);
  shpxtext.measure();
  add(shpxtext);
  shpxtext.x=align((Camera.main.width - shpxtext.width()) / 2);
  shpxtext.y=align(shpxtitle.y + shpxtitle.height() + 12);
  BitmapTextMultiline shpxlink=createMultiline(LNK_SHPX,8);
  shpxlink.maxWidth=Math.min(Camera.main.width,120);
  shpxlink.measure();
  shpxlink.hardlight(Window.SHPX_COLOR);
  add(shpxlink);
  shpxlink.x=shpxtext.x;
  shpxlink.y=shpxtext.y + shpxtext.height();
  TouchArea shpxhotArea=new TouchArea(shpxlink){
    @Override protected void onClick(    Touch touch){
      Gdx.net.openURI(""String_Node_Str"" + LNK_WATA);
    }
  }
;
  add(shpxhotArea);
  BitmapTextMultiline title=createMultiline(TTL_WATA,8);
  title.maxWidth=Math.min(Camera.main.width,120);
  title.measure();
  title.hardlight(Window.TITLE_COLOR);
  add(title);
  title.x=align((Camera.main.width - title.width()) / 2);
  title.y=align(wata.y + wata.height + 5);
  BitmapTextMultiline text=createMultiline(TXT_WATA,8);
  text.maxWidth=Math.min(Camera.main.width,120);
  text.measure();
  add(text);
  text.x=align((Camera.main.width - text.width()) / 2);
  text.y=align(title.y + title.height() + 12);
  BitmapTextMultiline link=createMultiline(LNK_WATA,8);
  link.maxWidth=Math.min(Camera.main.width,120);
  link.measure();
  link.hardlight(Window.TITLE_COLOR);
  add(link);
  link.x=text.x;
  link.y=text.y + text.height();
  TouchArea hotArea=new TouchArea(link){
    @Override protected void onClick(    NoosaInputProcessor.Touch touch){
      Gdx.net.openURI(""String_Node_Str"" + LNK_SHPX);
    }
  }
;
  add(hotArea);
  Image wata=Icons.WATA.get();
  wata.x=align(text.x + (text.width() - wata.width) / 2);
  wata.y=text.y - wata.height - 8;
  add(wata);
  new Flare(7,64).color(0x112233,true).show(wata,0).angularSpeed=+20;
  Archs archs=new Archs();
  archs.setSize(Camera.main.width,Camera.main.height);
  addToBack(archs);
  ExitButton btnExit=new ExitButton();
  btnExit.setPos(Camera.main.width - btnExit.width(),0);
  add(btnExit);
  fadeIn();
}","@Override public void create(){
  super.create();
  Image shpx=Icons.SHPX.get();
  shpx.x=align((Camera.main.width - shpx.width()) / 2);
  shpx.y=align(30);
  add(shpx);
  new Flare(7,64).color(0x225511,true).show(shpx,0).angularSpeed=+20;
  BitmapTextMultiline shpxtitle=createMultiline(TTL_SHPX,8);
  shpxtitle.maxWidth=Math.min(Camera.main.width,120);
  shpxtitle.measure();
  shpxtitle.hardlight(Window.SHPX_COLOR);
  add(shpxtitle);
  shpxtitle.x=align((Camera.main.width - shpxtitle.width()) / 2);
  shpxtitle.y=align(shpx.y + shpx.height + 5);
  BitmapTextMultiline shpxtext=createMultiline(TXT_SHPX,8);
  shpxtext.maxWidth=Math.min(Camera.main.width,120);
  shpxtext.measure();
  add(shpxtext);
  shpxtext.x=align((Camera.main.width - shpxtext.width()) / 2);
  shpxtext.y=align(shpxtitle.y + shpxtitle.height() + 12);
  BitmapTextMultiline shpxlink=createMultiline(LNK_SHPX,8);
  shpxlink.maxWidth=Math.min(Camera.main.width,120);
  shpxlink.measure();
  shpxlink.hardlight(Window.SHPX_COLOR);
  add(shpxlink);
  shpxlink.x=shpxtext.x;
  shpxlink.y=shpxtext.y + shpxtext.height();
  TouchArea shpxhotArea=new TouchArea(shpxlink){
    @Override protected void onClick(    NoosaInputProcessor.Touch touch){
      Gdx.net.openURI(""String_Node_Str"" + LNK_WATA);
    }
  }
;
  add(shpxhotArea);
  Image wata=Icons.WATA.get();
  wata.x=align((Camera.main.width - wata.width()) / 2);
  wata.y=shpxlink.y + wata.height + 25;
  add(wata);
  new Flare(7,64).color(0x112233,true).show(wata,0).angularSpeed=+20;
  BitmapTextMultiline title=createMultiline(TTL_WATA,8);
  title.maxWidth=Math.min(Camera.main.width,120);
  title.measure();
  title.hardlight(Window.TITLE_COLOR);
  add(title);
  title.x=align((Camera.main.width - title.width()) / 2);
  title.y=align(wata.y + wata.height + 5);
  BitmapTextMultiline text=createMultiline(TXT_WATA,8);
  text.maxWidth=Math.min(Camera.main.width,120);
  text.measure();
  add(text);
  text.x=align((Camera.main.width - text.width()) / 2);
  text.y=align(title.y + title.height() + 12);
  BitmapTextMultiline link=createMultiline(LNK_WATA,8);
  link.maxWidth=Math.min(Camera.main.width,120);
  link.measure();
  link.hardlight(Window.TITLE_COLOR);
  add(link);
  link.x=text.x;
  link.y=text.y + text.height();
  TouchArea hotArea=new TouchArea(link){
    @Override protected void onClick(    NoosaInputProcessor.Touch touch){
      Gdx.net.openURI(""String_Node_Str"" + LNK_SHPX);
    }
  }
;
  add(hotArea);
  Archs archs=new Archs();
  archs.setSize(Camera.main.width,Camera.main.height);
  addToBack(archs);
  ExitButton btnExit=new ExitButton();
  btnExit.setPos(Camera.main.width - btnExit.width(),0);
  add(btnExit);
  fadeIn();
}"
59933,"public WndSettings(boolean inGame){
  super();
  if (inGame) {
    int w=BTN_HEIGHT;
    btnZoomOut=new RedButton(TXT_ZOOM_OUT){
      @Override protected void onClick(){
        zoom(Camera.main.zoom - 1);
      }
    }
;
    add(btnZoomOut.setRect(0,0,w,BTN_HEIGHT));
    btnZoomIn=new RedButton(TXT_ZOOM_IN){
      @Override protected void onClick(){
        zoom(Camera.main.zoom + 1);
      }
    }
;
    add(btnZoomIn.setRect(WIDTH - w,0,w,BTN_HEIGHT));
    add(new RedButton(TXT_ZOOM_DEFAULT){
      @Override protected void onClick(){
        zoom(PixelScene.defaultZoom);
      }
    }
.setRect(btnZoomOut.right(),0,WIDTH - btnZoomIn.width() - btnZoomOut.width(),BTN_HEIGHT));
    updateEnabled();
  }
 else {
    CheckBox btnScaleUp=new CheckBox(TXT_SCALE_UP){
      @Override protected void onClick(){
        super.onClick();
        PixelDungeon.scaleUp(checked());
      }
    }
;
    btnScaleUp.setRect(0,0,WIDTH,BTN_HEIGHT);
    btnScaleUp.checked(PixelDungeon.scaleUp());
    add(btnScaleUp);
  }
  CheckBox btnMusic=new CheckBox(TXT_MUSIC){
    @Override protected void onClick(){
      super.onClick();
      PixelDungeon.music(checked());
    }
  }
;
  btnMusic.checked(PixelDungeon.music());
  add(btnMusic);
  CheckBox btnSound=new CheckBox(TXT_SOUND){
    @Override protected void onClick(){
      super.onClick();
      PixelDungeon.soundFx(checked());
      Sample.INSTANCE.play(Assets.SND_CLICK);
    }
  }
;
  btnSound.setRect(0,btnMusic.bottom() + GAP,WIDTH,BTN_HEIGHT);
  btnSound.checked(PixelDungeon.soundFx());
  add(btnSound);
  Button lastBtn=btnSound;
  if (!inGame) {
    Application.ApplicationType type=Gdx.app.getType();
    if (type == Application.ApplicationType.Android || type == Application.ApplicationType.iOS) {
      RedButton btnOrientation=new RedButton(orientationText()){
        @Override protected void onClick(){
          PixelDungeon.landscape(!PixelDungeon.landscape());
        }
      }
;
      btnOrientation.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
      add(btnOrientation);
      lastBtn=btnOrientation;
    }
 else     if (type == Application.ApplicationType.Desktop) {
      RedButton btnKeymap=new RedButton(TXT_BINDINGS){
        @Override protected void onClick(){
          parent.add(new WndKeymap());
        }
      }
;
      btnKeymap.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
      add(btnKeymap);
      RedButton btnResolution=new RedButton(resolutionText()){
        @Override protected void onClick(){
          PixelDungeon.fullscreen(!PixelDungeon.fullscreen());
        }
      }
;
      btnResolution.enable(PixelDungeon.instance.getPlatformSupport().isFullscreenEnabled());
      btnResolution.setRect(0,btnKeymap.bottom() + GAP,WIDTH,BTN_HEIGHT);
      add(btnResolution);
      lastBtn=btnResolution;
    }
  }
 else {
    CheckBox btnBrightness=new CheckBox(TXT_BRIGHTNESS){
      @Override protected void onClick(){
        super.onClick();
        PixelDungeon.brightness(checked());
      }
    }
;
    btnBrightness.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
    btnBrightness.checked(PixelDungeon.brightness());
    add(btnBrightness);
    lastBtn=btnBrightness;
  }
  resize(WIDTH,(int)lastBtn.bottom());
}","public WndSettings(boolean inGame){
  super();
  if (inGame) {
    int w=BTN_HEIGHT;
    btnZoomOut=new RedButton(TXT_ZOOM_OUT){
      @Override protected void onClick(){
        zoom(Camera.main.zoom - 1);
      }
    }
;
    add(btnZoomOut.setRect(0,0,w,BTN_HEIGHT));
    btnZoomIn=new RedButton(TXT_ZOOM_IN){
      @Override protected void onClick(){
        zoom(Camera.main.zoom + 1);
      }
    }
;
    add(btnZoomIn.setRect(WIDTH - w,0,w,BTN_HEIGHT));
    add(new RedButton(TXT_ZOOM_DEFAULT){
      @Override protected void onClick(){
        zoom(PixelScene.defaultZoom);
      }
    }
.setRect(btnZoomOut.right(),0,WIDTH - btnZoomIn.width() - btnZoomOut.width(),BTN_HEIGHT));
    updateEnabled();
  }
 else {
    CheckBox btnScaleUp=new CheckBox(TXT_SCALE_UP){
      @Override protected void onClick(){
        super.onClick();
        PixelDungeon.scaleUp(checked());
      }
    }
;
    btnScaleUp.setRect(0,0,WIDTH,BTN_HEIGHT);
    btnScaleUp.checked(PixelDungeon.scaleUp());
    add(btnScaleUp);
  }
  CheckBox btnMusic=new CheckBox(TXT_MUSIC){
    @Override protected void onClick(){
      super.onClick();
      PixelDungeon.music(checked());
    }
  }
;
  btnMusic.setRect(0,BTN_HEIGHT + GAP,WIDTH,BTN_HEIGHT);
  btnMusic.checked(PixelDungeon.music());
  add(btnMusic);
  CheckBox btnSound=new CheckBox(TXT_SOUND){
    @Override protected void onClick(){
      super.onClick();
      PixelDungeon.soundFx(checked());
      Sample.INSTANCE.play(Assets.SND_CLICK);
    }
  }
;
  btnSound.setRect(0,btnMusic.bottom() + GAP,WIDTH,BTN_HEIGHT);
  btnSound.checked(PixelDungeon.soundFx());
  add(btnSound);
  Button lastBtn=btnSound;
  if (!inGame) {
    Application.ApplicationType type=Gdx.app.getType();
    if (type == Application.ApplicationType.Android || type == Application.ApplicationType.iOS) {
      RedButton btnOrientation=new RedButton(orientationText()){
        @Override protected void onClick(){
          PixelDungeon.landscape(!PixelDungeon.landscape());
        }
      }
;
      btnOrientation.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
      add(btnOrientation);
      lastBtn=btnOrientation;
    }
 else     if (type == Application.ApplicationType.Desktop) {
      RedButton btnKeymap=new RedButton(TXT_BINDINGS){
        @Override protected void onClick(){
          parent.add(new WndKeymap());
        }
      }
;
      btnKeymap.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
      add(btnKeymap);
      RedButton btnResolution=new RedButton(resolutionText()){
        @Override protected void onClick(){
          PixelDungeon.fullscreen(!PixelDungeon.fullscreen());
        }
      }
;
      btnResolution.enable(PixelDungeon.instance.getPlatformSupport().isFullscreenEnabled());
      btnResolution.setRect(0,btnKeymap.bottom() + GAP,WIDTH,BTN_HEIGHT);
      add(btnResolution);
      lastBtn=btnResolution;
    }
  }
 else {
    CheckBox btnBrightness=new CheckBox(TXT_BRIGHTNESS){
      @Override protected void onClick(){
        super.onClick();
        PixelDungeon.brightness(checked());
      }
    }
;
    btnBrightness.setRect(0,btnSound.bottom() + GAP,WIDTH,BTN_HEIGHT);
    btnBrightness.checked(PixelDungeon.brightness());
    add(btnBrightness);
    lastBtn=btnBrightness;
  }
  resize(WIDTH,(int)lastBtn.bottom());
}"
59934,"@Override public void update(){
  super.update();
  Sample.INSTANCE.play(Assets.SND_CLICK,1,1,1.2f);
}","@Override public void update(){
  super.update();
  if (brightness < 1.0f && brightness > MIN_BRIGHTNESS) {
    if ((brightness-=Game.elapsed) <= MIN_BRIGHTNESS) {
      brightness=MIN_BRIGHTNESS;
    }
    updateBrightness();
  }
}"
59935,"private void populateList(){
  listContent.clear();
  tempPos=0;
  final PDInputProcessor inputProcessor=(PDInputProcessor)Game.instance.getInputProcessor();
  final Map<Integer,PDInputProcessor.GameActionWrapper> keyMappings=inputProcessor.getKeyMappings();
  final Map<GameAction,KeyPair> mappings=new TreeMap<>();
  for (  Map.Entry<Integer,PDInputProcessor.GameActionWrapper> entry : keyMappings.entrySet()) {
    final Integer key=entry.getKey();
    final PDInputProcessor.GameActionWrapper value=entry.getValue();
    final GameAction action=value.gameAction;
    KeyPair keyPair=mappings.get(action);
    if (keyPair == null) {
      mappings.put(action,keyPair=new KeyPair());
    }
    if (value.defaultKey) {
      keyPair.key1=key;
    }
 else {
      keyPair.key2=key;
    }
  }
  for (  Map.Entry<GameAction,KeyPair> entry : mappings.entrySet()) {
    addKey(listContent,width,entry);
  }
  listContent.setSize(0,tempPos);
}","private void populateList(){
  listContent.clear();
  tempPos=0;
  final PDInputProcessor inputProcessor=(PDInputProcessor)Game.instance.getInputProcessor();
  final Map<Integer,PDInputProcessor.GameActionWrapper> keyMappings=inputProcessor.getKeyMappings();
  final Map<GameAction,KeyPair> mappings=new TreeMap<>();
  for (  GameAction action : GameAction.values()) {
    if (action.getDescription() != null) {
      mappings.put(action,new KeyPair());
    }
  }
  for (  Map.Entry<Integer,PDInputProcessor.GameActionWrapper> entry : keyMappings.entrySet()) {
    final Integer key=entry.getKey();
    final PDInputProcessor.GameActionWrapper value=entry.getValue();
    final GameAction action=value.gameAction;
    KeyPair keyPair=mappings.get(action);
    if (keyPair == null) {
      mappings.put(action,keyPair=new KeyPair());
    }
    if (value.defaultKey) {
      keyPair.key1=key;
    }
 else {
      keyPair.key2=key;
    }
  }
  for (  Map.Entry<GameAction,KeyPair> entry : mappings.entrySet()) {
    addKey(listContent,width,entry);
  }
  listContent.setSize(0,tempPos);
}"
59936,"public int[] columnTypes(ResultSet res){
  ResultSetMetaData md=res.getMetaData();
  int n=md.getColumnCount();
  cts=new int[n];
  for (int i=0; i < n; i++) {
    int ct=md.getColumnType(i + 1);
    if (ct == -5 || ct == -6 || (ct >= 2 & ct <= 8)) {
      cts[i]=1;
    }
 else {
      cts[i]=0;
    }
  }
}","public int[] columnTypes(ResultSet res) throws java.sql.SQLException {
  try {
    ResultSetMetaData md=res.getMetaData();
    int n=md.getColumnCount();
    int[] cts=new int[n];
    for (int i=0; i < n; i++) {
      int ct=md.getColumnType(i + 1);
      if (ct == -5 || ct == -6 || (ct >= 2 & ct <= 8)) {
        cts[i]=1;
      }
 else {
        cts[i]=0;
      }
    }
    return cts;
  }
 catch (  java.sql.SQLException e) {
    throw e;
  }
}"
59937,"@Override protected void paintComponent(Graphics g){
  super.paintComponent(g);
  g.drawImage(image,0,0,this);
}","@Override protected void paintComponent(Graphics g){
  super.paintComponent(g);
  if (image == null) {
    return;
  }
  float xScale=getWidth() / (float)image.getWidth();
  float yScale=getHeight() / (float)image.getHeight();
  float scale=Math.min(xScale,yScale);
  g.drawImage(image,0,0,(int)(image.getWidth() * scale),(int)(image.getHeight() * scale),this);
}"
59938,"public ScreenInfoPanel(@Nonnull List<Screen> screens){
  imagePanel=new ImagePanel();
  viewTree=new JTree(new DefaultMutableTreeNode(""String_Node_Str""));
  viewTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  viewTree.addTreeSelectionListener(this);
  JScrollPane treeScroller=new JScrollPane(viewTree);
  rootPicker=new JComboBox(new Vector<Object>(screens));
  rootPicker.addItemListener(this);
  JPanel settingsPanel=new JPanel(new GridLayout(1,2));
  showBoundsBox=new JCheckBox(""String_Node_Str"",true);
  showBoundsBox.addItemListener(this);
  forceAlpha=new JCheckBox(""String_Node_Str"",true);
  forceAlpha.addItemListener(this);
  settingsPanel.add(showBoundsBox);
  settingsPanel.add(forceAlpha);
  settingsPanel.setBorder(new EmptyBorder(10,0,0,0));
  infoTable=new JTable();
  infoTable.setRowSelectionAllowed(false);
  infoTable.setColumnSelectionAllowed(false);
  infoTable.setCellSelectionEnabled(false);
  infoTable.setShowGrid(true);
  JPanel bottomPanel=new JPanel(new BorderLayout());
  bottomPanel.setBorder(new EmptyBorder(10,10,10,10));
  bottomPanel.add(infoTable,BorderLayout.CENTER);
  bottomPanel.add(infoTable.getTableHeader(),BorderLayout.NORTH);
  bottomPanel.add(settingsPanel,BorderLayout.SOUTH);
  JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.add(rootPicker,BorderLayout.NORTH);
  leftPanel.add(treeScroller,BorderLayout.CENTER);
  leftPanel.add(bottomPanel,BorderLayout.SOUTH);
  JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  splitPane.setLeftComponent(leftPanel);
  splitPane.setRightComponent(imagePanel);
  add(splitPane);
  selectedScreen=screens.get(0);
  update();
}","public ScreenInfoPanel(@Nonnull List<Screen> screens){
  super(new BorderLayout());
  imagePanel=new ImagePanel();
  viewTree=new JTree(new DefaultMutableTreeNode(""String_Node_Str""));
  viewTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  viewTree.addTreeSelectionListener(this);
  JScrollPane treeScroller=new JScrollPane(viewTree);
  rootPicker=new JComboBox(new Vector<Object>(screens));
  rootPicker.addItemListener(this);
  JPanel settingsPanel=new JPanel(new GridLayout(1,2));
  showBoundsBox=new JCheckBox(""String_Node_Str"",true);
  showBoundsBox.addItemListener(this);
  forceAlpha=new JCheckBox(""String_Node_Str"",true);
  forceAlpha.addItemListener(this);
  settingsPanel.add(showBoundsBox);
  settingsPanel.add(forceAlpha);
  settingsPanel.setBorder(new EmptyBorder(10,0,0,0));
  infoTable=new JTable();
  infoTable.setRowSelectionAllowed(false);
  infoTable.setColumnSelectionAllowed(false);
  infoTable.setCellSelectionEnabled(false);
  infoTable.setShowGrid(true);
  JPanel bottomPanel=new JPanel(new BorderLayout());
  bottomPanel.setBorder(new EmptyBorder(10,10,10,10));
  bottomPanel.add(infoTable,BorderLayout.CENTER);
  bottomPanel.add(infoTable.getTableHeader(),BorderLayout.NORTH);
  bottomPanel.add(settingsPanel,BorderLayout.SOUTH);
  JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.add(rootPicker,BorderLayout.NORTH);
  leftPanel.add(treeScroller,BorderLayout.CENTER);
  leftPanel.add(bottomPanel,BorderLayout.SOUTH);
  JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  splitPane.setLeftComponent(leftPanel);
  splitPane.setRightComponent(imagePanel);
  add(splitPane,BorderLayout.CENTER);
  selectedScreen=screens.get(0);
  update();
}"
59939,"@Override public String toString(){
  return name + ""String_Node_Str"" + ordinal+ ""String_Node_Str"";
}","@Override public String toString(){
  return name + ""String_Node_Str"" + value+ ""String_Node_Str""+ ordinal+ ""String_Node_Str"";
}"
59940,"private static void renderTextView(TextView view,Graphics2D canvas){
  canvas.setColor(view.isSelected() ? Color.RED : Color.BLACK);
  canvas.setStroke(view.isSelected() ? THICK : THIN);
  canvas.drawRect(view.left,view.top,view.getWidth(),view.getHeight());
}","private static void renderTextView(TextView view,Graphics2D canvas){
  canvas.setColor(view.isSelected() ? Color.RED : Color.BLACK);
  canvas.setStroke(view.isSelected() ? THICK : THIN);
  canvas.drawRect(view.left,view.top,view.getWidth(),view.getHeight());
  canvas.translate(view.left,view.top);
  String text=view.text.length() < 20 ? view.text : view.text.substring(0,20);
  canvas.drawString(text,20,view.getHeight() / 2);
  canvas.translate(-view.left,-view.top);
}"
59941,"public static BufferedImage createBitmap(int bitmapObjectId,byte[] data,int width,int height){
  if (cache.containsKey(bitmapObjectId)) {
    return cache.get(bitmapObjectId);
  }
  if (data.length != width * height * 4) {
    throw new IllegalArgumentException(""String_Node_Str"" + data.length + ""String_Node_Str""+ width+ ""String_Node_Str""+ height);
  }
  BufferedImage image=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
  for (int i=0; i < data.length; i+=4) {
    int pixel=i / 4;
    int value=0xff000000 | (data[i + 1] << 16) | (data[i + 2] << 8)| data[i + 3];
    image.setRGB(pixel % width,pixel / width,value);
  }
  cache.put(bitmapObjectId,image);
  return image;
}","public static BufferedImage createBitmap(int bitmapObjectId,byte[] data,int width,int height){
  if (cache.containsKey(bitmapObjectId)) {
    return cache.get(bitmapObjectId);
  }
  if (data.length != width * height * 4) {
    throw new IllegalArgumentException(""String_Node_Str"" + data.length + ""String_Node_Str""+ width+ ""String_Node_Str""+ height);
  }
  BufferedImage image=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
  for (int i=0; i < data.length; i+=4) {
    int pixel=i / 4;
    int value=((data[i + 3] << 24) & 0xff000000) | ((data[i] << 16) & 0xff0000) | ((data[i + 1] << 8) & 0xff00)| (data[i + 2] & 0xff);
    image.setRGB(pixel % width,pixel / width,value);
  }
  cache.put(bitmapObjectId,image);
  return image;
}"
59942,"private void renderImageView(ImageView view,Graphics2D canvas){
  renderView(view,canvas);
  canvas.translate(view.left,view.top);
  int left=(view.getWidth() - view.getImage().getWidth()) / 2;
  int top=(view.getHeight() - view.getImage().getHeight()) / 2;
  canvas.drawImage(view.getImage(),left,top,null);
  canvas.translate(-view.left,-view.top);
}","private void renderImageView(ImageView view,Graphics2D canvas){
  renderView(view,canvas);
  canvas.translate(view.left,view.top);
  final BufferedImage image=view.getImage();
  if (image.getWidth() < view.getWidth() && image.getHeight() < view.getHeight()) {
    int left=(view.getWidth() - image.getWidth()) / 2;
    int top=(view.getHeight() - image.getHeight()) / 2;
    canvas.drawImage(image,left,top,null);
  }
 else {
    canvas.drawImage(image,0,0,view.getWidth(),view.getHeight(),null);
  }
  canvas.translate(-view.left,-view.top);
}"
59943,"@Override public void valueChanged(TreeSelectionEvent event){
  if (selectedView != null) {
    selectedView.setSelected(false);
  }
  DefaultMutableTreeNode newNode=(DefaultMutableTreeNode)event.getNewLeadSelectionPath().getLastPathComponent();
  View newView=(View)newNode.getUserObject();
  newView.setSelected(true);
  selectedView=newView;
  updateImage(false);
}","@Override public void valueChanged(TreeSelectionEvent event){
  if (selectedView != null) {
    selectedView.setSelected(false);
  }
  if (event.getNewLeadSelectionPath() == null) {
    selectedView=null;
    return;
  }
  DefaultMutableTreeNode newNode=(DefaultMutableTreeNode)event.getNewLeadSelectionPath().getLastPathComponent();
  View newView=(View)newNode.getUserObject();
  newView.setSelected(true);
  selectedView=newView;
  updateImage(false);
}"
59944,"public MainWindow(List<ViewGroup> roots){
  super(""String_Node_Str"");
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  this.roots=roots;
  imagePanel=new ImagePanel();
  viewTree=new JTree(new DefaultMutableTreeNode(""String_Node_Str""));
  viewTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  viewTree.addTreeSelectionListener(this);
  JScrollPane treeScroller=new JScrollPane(viewTree);
  splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  splitPane.setLeftComponent(treeScroller);
  splitPane.setRightComponent(imagePanel);
  splitPane.setDividerLocation(300);
  splitPane.setPreferredSize(new Dimension(800,700));
  add(splitPane);
  setVisible(true);
  showViewTree(roots.get(0));
  updateImage(true);
}","public MainWindow(List<ViewGroup> roots){
  super(""String_Node_Str"");
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  this.roots=roots;
  imagePanel=new ImagePanel();
  viewTree=new JTree(new DefaultMutableTreeNode(""String_Node_Str""));
  viewTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  viewTree.addTreeSelectionListener(this);
  JScrollPane treeScroller=new JScrollPane(viewTree);
  rootPicker=new JComboBox(new Vector<Object>(roots));
  rootPicker.addItemListener(this);
  JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.add(rootPicker,BorderLayout.NORTH);
  leftPanel.add(treeScroller,BorderLayout.CENTER);
  splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
  splitPane.setLeftComponent(leftPanel);
  splitPane.setRightComponent(imagePanel);
  add(splitPane);
  setVisible(true);
  selectedRoot=roots.get(0);
  update();
}"
59945,"public void updateImage(boolean resize){
  BufferedImage image=renderer.renderViews(roots.get(0));
  imagePanel.setImage(image);
  if (resize) {
    Dimension size=new Dimension((int)(imagePanel.getPreferredSize().getWidth() + 310),(int)imagePanel.getPreferredSize().getHeight());
    splitPane.setPreferredSize(size);
    pack();
  }
}","public void updateImage(boolean resize){
  BufferedImage image=renderer.renderViews(selectedRoot);
  imagePanel.setImage(image);
  if (resize) {
    Dimension size=new Dimension((int)(imagePanel.getPreferredSize().getWidth() + rootPicker.getPreferredSize().getWidth() + 15),(int)imagePanel.getPreferredSize().getHeight() + 25);
    setPreferredSize(size);
    pack();
  }
}"
59946,"public void showViewTree(ViewGroup root){
  DefaultMutableTreeNode rootNode=new DefaultMutableTreeNode(root);
  addChildViews(rootNode,root);
  DefaultTreeModel model=new DefaultTreeModel(rootNode);
  viewTree.setModel(model);
}","public void showViewTree(){
  DefaultMutableTreeNode rootNode=new DefaultMutableTreeNode(selectedRoot);
  addChildViews(rootNode,selectedRoot);
  DefaultTreeModel model=new DefaultTreeModel(rootNode);
  viewTree.setModel(model);
}"
59947,"/** 
 * Callback method invoked when the file header is read. Will only occur once per file.
 * @param version Version number identifying which version of the BMD file format that the data complies to.
 * @param data    Header data (if converted from HPROF this will be the original HPROF header)
 */
public void onHeader(int version,@Nonnull byte[] data) throws IOException ;","/** 
 * Callback method invoked when the file header is read. Will only occur once per file.
 * @param version Version number identifying which version of the BMD file format that the data complies to.
 * @param data    Header data (if converted from HPROF this will be the original HPROF header)
 */
void onHeader(int version,@Nonnull byte[] data) throws IOException ;"
59948,"/** 
 * Callback method invoked when a record is read. The reader, and stream, are positioned after the record header when this method is invoked.
 * @param tag    The tag of the record (as defined in BmdTag)
 * @param reader The reader used to read the BMD data.
 */
public void onRecord(BmdTag tag,@Nonnull BmdReader reader) throws IOException ;","/** 
 * Callback method invoked when a record is read. The reader, and stream, are positioned after the record header when this method is invoked.
 * @param tag    The tag of the record (as defined in BmdTag)
 * @param reader The reader used to read the BMD data.
 */
void onRecord(BmdTag tag,@Nonnull BmdReader reader) throws IOException ;"
59949,"public void writeHeader(int version,byte[] metadata) throws IOException {
  writeInt32(version);
  writeByteArrayWithLength(metadata != null ? metadata : new byte[]{});
}","public void writeHeader(int version,@Nullable byte[] metadata) throws IOException {
  writeInt32(version);
  writeByteArrayWithLength(metadata != null ? metadata : EMPTY);
}"
59950,"public void writeInstanceDump(Instance instance) throws IOException {
  final long start=getCurrentPosition();
  writeTag(BmdTag.INSTANCE_DUMP);
  writeInt32(mapObjectId(instance.getObjectId()));
  writeInt32(mapObjectId(instance.getClassObjectId()));
  ClassDefinition currentClass=classesByOriginalId.get(instance.getClassObjectId());
  ByteArrayInputStream in=new ByteArrayInputStream(instance.getInstanceFieldData());
  while (currentClass != null) {
    int fieldCount=currentClass.getInstanceFields().size();
    for (int i=0; i < fieldCount; i++) {
      InstanceField field=currentClass.getInstanceFields().get(i);
      BasicType type=field.getType();
      if (type == BasicType.OBJECT) {
        int id=readInt(in);
        writeInt32(mapObjectId(id));
      }
 else {
        skip(in,type.size);
      }
    }
    currentClass=classesByOriginalId.get(currentClass.getSuperClassObjectId());
  }
  if (in.available() != 0) {
    throw new IllegalStateException(""String_Node_Str"" + in.available());
  }
  if (collectStats) {
    Stats.increment(Stats.Type.INSTANCE,Stats.Variant.BMD,writer.getCurrentPosition() - start);
  }
}","public void writeInstanceDump(@Nonnull Instance instance) throws IOException {
  final long start=getCurrentPosition();
  writeTag(BmdTag.INSTANCE_DUMP);
  writeInt32(mapObjectId(instance.getObjectId()));
  writeInt32(mapObjectId(instance.getClassObjectId()));
  ClassDefinition currentClass=classesByOriginalId.get(instance.getClassObjectId());
  ByteArrayInputStream in=new ByteArrayInputStream(instance.getInstanceFieldData());
  while (currentClass != null) {
    int fieldCount=currentClass.getInstanceFields().size();
    for (int i=0; i < fieldCount; i++) {
      InstanceField field=currentClass.getInstanceFields().get(i);
      BasicType type=field.getType();
      if (type == BasicType.OBJECT) {
        int id=readInt(in);
        writeInt32(mapObjectId(id));
      }
 else {
        skip(in,type.size);
      }
    }
    currentClass=classesByOriginalId.get(currentClass.getSuperClassObjectId());
  }
  if (in.available() != 0) {
    throw new IllegalStateException(""String_Node_Str"" + in.available());
  }
  if (collectStats) {
    Stats.increment(Stats.Type.INSTANCE,Stats.Variant.BMD,writer.getCurrentPosition() - start);
  }
}"
59951,"/** 
 * Must be called after the first pass (where class data is processed) is finished, before the second pass is started.
 */
public void startSecondPass(){
  if (stringIds.isEmpty() || classesByOriginalId.isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  readObjects=true;
}","/** 
 * Must be called after the first pass (where class data is processed) is finished, before the second pass is started.
 */
public void startSecondPass(){
  if (stringIds.isEmpty() || classesByOriginalId.isEmpty()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  firstPass=false;
}"
59952,"public void writeLegacyRecord(int tag,byte[] data) throws IOException {
  writeInt32(BmdTag.LEGACY_HPROF_RECORD.value);
  writeInt32(tag);
  writeInt32(data.length);
  writeRawBytes(data);
}","public void writeLegacyRecord(int tag,@Nonnull byte[] data) throws IOException {
  writeInt32(BmdTag.LEGACY_HPROF_RECORD.value);
  writeInt32(tag);
  writeInt32(data.length);
  writeRawBytes(data);
}"
59953,"@Override public void onRecord(int tag,int timestamp,int length,@Nonnull HprofReader reader) throws IOException {
  if (!readObjects) {
switch (tag) {
case Tag.STRING:
      readStringRecord(timestamp,length,reader);
    break;
case Tag.LOAD_CLASS:
  if (collectStats) {
    Stats.increment(Stats.Type.CLASS,Stats.Variant.HPROF,length + 9);
  }
ClassDefinition classDef=reader.readLoadClassRecord();
classesByOriginalId.put(classDef.getObjectId(),classDef);
break;
case Tag.HEAP_DUMP:
case Tag.HEAP_DUMP_SEGMENT:
ClassDumpProcessor dumpProcessor=new ClassDumpProcessor();
HeapDumpReader dumpReader=new HeapDumpReader(reader.getInputStream(),length,dumpProcessor);
while (dumpReader.hasNext()) {
dumpReader.next();
}
break;
case Tag.UNLOAD_CLASS:
case Tag.HEAP_DUMP_END:
super.onRecord(tag,timestamp,length,reader);
break;
default :
byte[] data=read(reader.getInputStream(),length);
writer.writeLegacyRecord(tag,data);
break;
}
}
 else {
switch (tag) {
case Tag.HEAP_DUMP:
case Tag.HEAP_DUMP_SEGMENT:
ObjectDumpProcessor dumpProcessor=new ObjectDumpProcessor();
HeapDumpReader dumpReader=new HeapDumpReader(reader.getInputStream(),length,dumpProcessor);
while (dumpReader.hasNext()) {
dumpReader.next();
}
break;
default :
super.onRecord(tag,timestamp,length,reader);
}
}
}","@Override public void onRecord(int tag,int timestamp,int length,@Nonnull HprofReader reader) throws IOException {
  if (firstPass) {
switch (tag) {
case Tag.STRING:
      readStringRecord(timestamp,length,reader);
    break;
case Tag.LOAD_CLASS:
  if (collectStats) {
    Stats.increment(Stats.Type.CLASS,Stats.Variant.HPROF,length + 9);
  }
ClassDefinition classDef=reader.readLoadClassRecord();
classesByOriginalId.put(classDef.getObjectId(),classDef);
break;
case Tag.HEAP_DUMP:
case Tag.HEAP_DUMP_SEGMENT:
ClassDumpProcessor dumpProcessor=new ClassDumpProcessor();
HeapDumpReader dumpReader=new HeapDumpReader(reader.getInputStream(),length,dumpProcessor);
while (dumpReader.hasNext()) {
dumpReader.next();
}
break;
case Tag.UNLOAD_CLASS:
case Tag.HEAP_DUMP_END:
super.onRecord(tag,timestamp,length,reader);
break;
default :
byte[] data=read(reader.getInputStream(),length);
writer.writeLegacyRecord(tag,data);
break;
}
}
 else {
switch (tag) {
case Tag.HEAP_DUMP:
case Tag.HEAP_DUMP_SEGMENT:
ObjectDumpProcessor dumpProcessor=new ObjectDumpProcessor();
HeapDumpReader dumpReader=new HeapDumpReader(reader.getInputStream(),length,dumpProcessor);
while (dumpReader.hasNext()) {
dumpReader.next();
}
break;
default :
super.onRecord(tag,timestamp,length,reader);
}
}
}"
59954,"public void writeClassDefinition(ClassDefinition classDef) throws IOException {
  final long start=getCurrentPosition();
  writeTag(BmdTag.CLASS_DEFINITION);
  writeInt32(mapObjectId(classDef.getObjectId()));
  writeInt32(mapObjectId(classDef.getSuperClassObjectId()));
  writeInt32(mapStringId(classDef.getNameStringId()));
  int constantFieldCount=classDef.getConstantFields().size();
  writeInt32(constantFieldCount);
  for (int i=0; i < constantFieldCount; i++) {
    ConstantField field=classDef.getConstantFields().get(i);
    writeInt32(field.getPoolIndex());
    writeInt32(convertType(field.getType()).id);
    writeFieldValue(field.getType(),field.getValue());
  }
  int staticFieldCount=classDef.getStaticFields().size();
  writeInt32(staticFieldCount);
  for (int i=0; i < staticFieldCount; i++) {
    StaticField field=classDef.getStaticFields().get(i);
    writeInt32(mapStringId(field.getFieldNameId()));
    writeInt32(convertType(field.getType()).id);
    writeFieldValue(field.getType(),field.getValue());
  }
  int skippedFieldSize=0;
  List<InstanceField> keptFields=new ArrayList<InstanceField>();
  int instanceFieldCount=classDef.getInstanceFields().size();
  for (int i=0; i < instanceFieldCount; i++) {
    InstanceField field=classDef.getInstanceFields().get(i);
    if (field.getType() != BasicType.OBJECT) {
      skippedFieldSize+=field.getType().size;
    }
 else {
      keptFields.add(field);
    }
  }
  int keptFieldCount=keptFields.size();
  writeInt32(keptFieldCount);
  for (int i=0; i < keptFieldCount; i++) {
    InstanceField field=keptFields.get(i);
    writeInt32(mapStringId(field.getFieldNameId()));
    writeInt32(convertType(field.getType()).id);
  }
  writeInt32(skippedFieldSize);
  if (collectStats) {
    Stats.increment(Stats.Type.CLASS,Stats.Variant.BMD,writer.getCurrentPosition() - start);
  }
}","public void writeClassDefinition(@Nonnull ClassDefinition classDef) throws IOException {
  final long start=getCurrentPosition();
  writeTag(BmdTag.CLASS_DEFINITION);
  writeInt32(mapObjectId(classDef.getObjectId()));
  writeInt32(mapObjectId(classDef.getSuperClassObjectId()));
  writeInt32(mapStringId(classDef.getNameStringId()));
  int constantFieldCount=classDef.getConstantFields().size();
  writeInt32(constantFieldCount);
  for (int i=0; i < constantFieldCount; i++) {
    ConstantField field=classDef.getConstantFields().get(i);
    writeInt32(field.getPoolIndex());
    writeInt32(convertType(field.getType()).id);
    writeFieldValue(field.getType(),field.getValue());
  }
  int staticFieldCount=classDef.getStaticFields().size();
  writeInt32(staticFieldCount);
  for (int i=0; i < staticFieldCount; i++) {
    StaticField field=classDef.getStaticFields().get(i);
    writeInt32(mapStringId(field.getFieldNameId()));
    writeInt32(convertType(field.getType()).id);
    writeFieldValue(field.getType(),field.getValue());
  }
  int skippedFieldSize=0;
  List<InstanceField> keptFields=new ArrayList<InstanceField>();
  int instanceFieldCount=classDef.getInstanceFields().size();
  for (int i=0; i < instanceFieldCount; i++) {
    InstanceField field=classDef.getInstanceFields().get(i);
    if (field.getType() != BasicType.OBJECT) {
      skippedFieldSize+=field.getType().size;
    }
 else {
      keptFields.add(field);
    }
  }
  int keptFieldCount=keptFields.size();
  writeInt32(keptFieldCount);
  for (int i=0; i < keptFieldCount; i++) {
    InstanceField field=keptFields.get(i);
    writeInt32(mapStringId(field.getFieldNameId()));
    writeInt32(convertType(field.getType()).id);
  }
  writeInt32(skippedFieldSize);
  if (collectStats) {
    Stats.increment(Stats.Type.CLASS,Stats.Variant.BMD,writer.getCurrentPosition() - start);
  }
}"
59955,"public void writeString(HprofString string,boolean hashed) throws IOException {
  writeTag(hashed ? BmdTag.HASHED_STRING : BmdTag.STRING);
  writeInt32(string.getId());
  byte[] stringData=string.getValue().getBytes();
  if (hashed) {
    writeRawVarint32(stringData.length);
    writeInt32(string.getValue().hashCode());
  }
 else {
    writeByteArrayWithLength(stringData);
  }
}","public void writeString(@Nonnull HprofString string,boolean hashed) throws IOException {
  writeTag(hashed ? BmdTag.HASHED_STRING : BmdTag.STRING);
  writeInt32(string.getId());
  byte[] stringData=string.getValue().getBytes();
  if (hashed) {
    writeRawVarint32(stringData.length);
    writeInt32(string.getValue().hashCode());
  }
 else {
    writeByteArrayWithLength(stringData);
  }
}"
59956,"/** 
 * Crunch a HPROF file, converting it to BMD format.
 * @param source the HPROF data source
 * @param out    Output (BMD)
 * @throws IOException If an error occurs while writing the output data
 */
public static void crunch(@Nonnull HprofSource source,@Nonnull OutputStream out,@Nullable Config config) throws IOException, TimeoutException {
  if (config == null) {
    config=new Config();
  }
  Stats.setEnabled(config.collectStats);
  Stats.increment(Stats.Type.TOTAL,Stats.Variant.HPROF,source.getDataSize());
  final long start=System.currentTimeMillis();
  final long limit=config.timeLimit != Config.NO_TIME_LIMIT ? start + config.timeLimit : Long.MAX_VALUE;
  CountingOutputStream cOut=new CountingOutputStream(out);
  if (config.collectStats) {
    out=cOut;
  }
  CrunchProcessor processor=new CrunchProcessor(out,true);
  InputStream in=new BufferedInputStream(source.open());
  HprofReader reader=new HprofReader(in,processor);
  while (reader.hasNext()) {
    reader.next();
    checkTimeLimit(limit);
    iterationSleep(config);
  }
  processor.startSecondPass();
  in.close();
  in=new BufferedInputStream(source.open());
  reader=new HprofReader(in,processor);
  while (reader.hasNext()) {
    reader.next();
    checkTimeLimit(limit);
    iterationSleep(config);
  }
  processor.finishAndWriteOutput();
  Stats.increment(Stats.Type.TOTAL,Stats.Variant.BMD,cOut.getCount());
  Stats.printStats();
}","/** 
 * Crunch a HPROF file, converting it to BMD format.
 * @param source the HPROF data source
 * @param out    Output (BMD)
 * @throws IOException If an error occurs while writing the output data
 */
public static void crunch(@Nonnull HprofSource source,@Nonnull OutputStream out,@Nullable Config config) throws IOException, TimeoutException {
  if (config == null) {
    config=new Config();
  }
  Stats.setEnabled(config.collectStats);
  Stats.increment(Stats.Type.TOTAL,Stats.Variant.HPROF,source.getDataSize());
  final long start=System.currentTimeMillis();
  final long limit=config.timeLimit != Config.NO_TIME_LIMIT ? start + config.timeLimit : Long.MAX_VALUE;
  CountingOutputStream cOut=new CountingOutputStream(out);
  if (config.collectStats) {
    out=cOut;
  }
  CrunchProcessor processor=new CrunchProcessor(out,true);
  InputStream in=new BufferedInputStream(source.open());
  try {
    HprofReader reader=new HprofReader(in,processor);
    while (reader.hasNext()) {
      reader.next();
      checkTimeLimit(limit);
      iterationSleep(config);
    }
    processor.startSecondPass();
  }
  finally {
    in.close();
  }
  in=new BufferedInputStream(source.open());
  try {
    HprofReader reader=new HprofReader(in,processor);
    while (reader.hasNext()) {
      reader.next();
      checkTimeLimit(limit);
      iterationSleep(config);
    }
    processor.finishAndWriteOutput();
  }
  finally {
    in.close();
  }
  Stats.increment(Stats.Type.TOTAL,Stats.Variant.BMD,cOut.getCount());
  Stats.printStats();
}"
59957,"/** 
 * Reads a short value from a byte buffer.
 * @param buffer the buffer to read from.
 * @return a short value
 */
public static short readShort(byte[] buffer){
  return (short)(((buffer[0] & 0xff)) | ((buffer[1] & 0xff) << 8));
}","/** 
 * Reads a short value from a byte buffer.
 * @param buffer the buffer to read from.
 * @return a short value
 */
public static short readShort(byte[] buffer){
  return (short)(((buffer[1] & 0xff)) | ((buffer[0] & 0xff) << 8));
}"
59958,"@Override public void onRecord(int tag,int timestamp,int length,HprofReader reader) throws IOException {
  if (!readObjects) {
switch (tag) {
case Tag.STRING:
      HprofString string=reader.readStringRecord(length,timestamp);
    stringIds.put(string.getId(),nextStringId);
  string.setId(nextStringId);
nextStringId++;
writer.writeString(string,true);
break;
case Tag.LOAD_CLASS:
ClassDefinition classDef=reader.readLoadClassRecord();
classesByOriginalId.put(classDef.getObjectId(),classDef);
break;
case Tag.HEAP_DUMP:
case Tag.HEAP_DUMP_SEGMENT:
ClassDumpProcessor dumpProcessor=new ClassDumpProcessor();
HeapDumpReader dumpReader=new HeapDumpReader(reader.getInputStream(),length,dumpProcessor);
while (dumpReader.hasNext()) {
dumpReader.next();
}
break;
case Tag.UNLOAD_CLASS:
case Tag.HEAP_DUMP_END:
super.onRecord(tag,timestamp,length,reader);
break;
default :
byte[] data=read(reader.getInputStream(),length);
writer.writeLegacyRecord(tag,data);
break;
}
}
 else {
switch (tag) {
case Tag.HEAP_DUMP:
case Tag.HEAP_DUMP_SEGMENT:
ObjectDumpProcessor dumpProcessor=new ObjectDumpProcessor();
HeapDumpReader dumpReader=new HeapDumpReader(reader.getInputStream(),length,dumpProcessor);
while (dumpReader.hasNext()) {
dumpReader.next();
}
break;
default :
super.onRecord(tag,timestamp,length,reader);
}
}
}","@Override public void onRecord(int tag,int timestamp,int length,HprofReader reader) throws IOException {
  if (!readObjects) {
switch (tag) {
case Tag.STRING:
      HprofString string=reader.readStringRecord(length,timestamp);
    stringIds.put(string.getId(),nextStringId);
  string.setId(nextStringId);
nextStringId++;
boolean hashed=!(string.getValue().startsWith(""String_Node_Str""));
writer.writeString(string,hashed);
break;
case Tag.LOAD_CLASS:
ClassDefinition classDef=reader.readLoadClassRecord();
classesByOriginalId.put(classDef.getObjectId(),classDef);
break;
case Tag.HEAP_DUMP:
case Tag.HEAP_DUMP_SEGMENT:
ClassDumpProcessor dumpProcessor=new ClassDumpProcessor();
HeapDumpReader dumpReader=new HeapDumpReader(reader.getInputStream(),length,dumpProcessor);
while (dumpReader.hasNext()) {
dumpReader.next();
}
break;
case Tag.UNLOAD_CLASS:
case Tag.HEAP_DUMP_END:
super.onRecord(tag,timestamp,length,reader);
break;
default :
byte[] data=read(reader.getInputStream(),length);
writer.writeLegacyRecord(tag,data);
break;
}
}
 else {
switch (tag) {
case Tag.HEAP_DUMP:
case Tag.HEAP_DUMP_SEGMENT:
ObjectDumpProcessor dumpProcessor=new ObjectDumpProcessor();
HeapDumpReader dumpReader=new HeapDumpReader(reader.getInputStream(),length,dumpProcessor);
while (dumpReader.hasNext()) {
dumpReader.next();
}
break;
default :
super.onRecord(tag,timestamp,length,reader);
}
}
}"
59959,"private int mapObjectId(int id){
  if (!objectIds.containsKey(id)) {
    mappedIds.add(nextObjectId);
    objectIds.put(id,nextObjectId);
    nextObjectId++;
  }
  if (mappedIds.contains(id)) {
    throw new IllegalArgumentException(""String_Node_Str"" + id);
  }
  return objectIds.get(id);
}","private int mapObjectId(int id){
  if (id == 0) {
    return 0;
  }
  if (!objectIds.containsKey(id)) {
    mappedIds.add(nextObjectId);
    objectIds.put(id,nextObjectId);
    nextObjectId++;
  }
  if (mappedIds.contains(id)) {
    throw new IllegalArgumentException(""String_Node_Str"" + id);
  }
  return objectIds.get(id);
}"
59960,"private void verifySuperClass(ClassDefinition cls){
  int superId=cls.getSuperClassObjectId();
  if (classes.containsKey(superId)) {
    verifySuperClass(classes.get(superId));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + strings.get(cls.getNameStringId()) + ""String_Node_Str""+ superId+ ""String_Node_Str"");
  }
}","private void verifySuperClass(ClassDefinition cls){
  int superId=cls.getSuperClassObjectId();
  String className=strings.get(cls.getNameStringId());
  if (classes.containsKey(superId)) {
    verifySuperClass(classes.get(superId));
  }
 else   if (!className.equals(""String_Node_Str"")) {
    throw new IllegalStateException(""String_Node_Str"" + className + ""String_Node_Str""+ superId+ ""String_Node_Str"");
  }
}"
59961,"private void readObjectArray(InputStream in) throws IOException {
  int originalObjectId=readInt(in);
  in.skip(4);
  int count=readInt(in);
  int originalElementClassId=readInt(in);
  int[] elements=new int[count];
  for (int i=0; i < count; i++) {
    elements[i]=readInt(in);
  }
  writer.writeObjectArray(originalObjectId,originalElementClassId,elements);
}","private void readObjectArray(InputStream in) throws IOException {
  int originalObjectId=readInt(in);
  skip(in,4);
  int count=readInt(in);
  int originalElementClassId=readInt(in);
  int[] elements=new int[count];
  for (int i=0; i < count; i++) {
    elements[i]=readInt(in);
  }
  writer.writeObjectArray(originalObjectId,originalElementClassId,elements);
}"
59962,"public void writeInstanceDump(Instance instance) throws IOException {
  writeInt32(BmdTag.INSTANCE_DUMP);
  writeInt32(mapObjectId(instance.getObjectId()));
  writeInt32(mapObjectId(instance.getClassObjectId()));
  ClassDefinition currentClass=classesByOriginalId.get(instance.getClassObjectId());
  ByteArrayInputStream in=new ByteArrayInputStream(instance.getInstanceFieldData());
  while (currentClass != null) {
    int fieldCount=currentClass.getInstanceFields().size();
    for (int i=0; i < fieldCount; i++) {
      InstanceField field=currentClass.getInstanceFields().get(i);
      BasicType type=field.getType();
      if (type == BasicType.OBJECT) {
        int id=readInt(in);
        writeInt32(mapObjectId(id));
      }
 else {
        in.skip(type.size);
      }
    }
    currentClass=classesByOriginalId.get(currentClass.getSuperClassObjectId());
  }
  if (in.available() != 0) {
    throw new IllegalStateException(""String_Node_Str"" + in.available());
  }
}","public void writeInstanceDump(Instance instance) throws IOException {
  writeInt32(BmdTag.INSTANCE_DUMP);
  writeInt32(mapObjectId(instance.getObjectId()));
  writeInt32(mapObjectId(instance.getClassObjectId()));
  ClassDefinition currentClass=classesByOriginalId.get(instance.getClassObjectId());
  ByteArrayInputStream in=new ByteArrayInputStream(instance.getInstanceFieldData());
  while (currentClass != null) {
    int fieldCount=currentClass.getInstanceFields().size();
    for (int i=0; i < fieldCount; i++) {
      InstanceField field=currentClass.getInstanceFields().get(i);
      BasicType type=field.getType();
      if (type == BasicType.OBJECT) {
        int id=readInt(in);
        writeInt32(mapObjectId(id));
      }
 else {
        skip(in,type.size);
      }
    }
    currentClass=classesByOriginalId.get(currentClass.getSuperClassObjectId());
  }
  if (in.available() != 0) {
    throw new IllegalStateException(""String_Node_Str"" + in.available());
  }
}"
59963,"private void readPrimitiveArray(InputStream in) throws IOException {
  int originalObjectId=readInt(in);
  in.skip(4);
  int count=readInt(in);
  BasicType type=BasicType.fromType(in.read());
  in.skip(count * type.size);
  writer.writePrimitiveArray(originalObjectId,type,count);
}","private void readPrimitiveArray(InputStream in) throws IOException {
  int originalObjectId=readInt(in);
  skip(in,4);
  int count=readInt(in);
  BasicType type=BasicType.fromType(in.read());
  skip(in,count * type.size);
  writer.writePrimitiveArray(originalObjectId,type,count);
}"
59964,"@Override public void onHeapRecord(int tag,HeapDumpReader reader) throws IOException {
  InputStream in=reader.getInputStream();
switch (tag) {
case HeapTag.INSTANCE_DUMP:
    Instance instance=reader.readInstanceDump();
  writer.writeInstanceDump(instance);
break;
case HeapTag.OBJECT_ARRAY_DUMP:
readObjectArray(in);
break;
case HeapTag.PRIMITIVE_ARRAY_DUMP:
readPrimitiveArray(in);
break;
case HeapTag.ROOT_UNKNOWN:
roots.add(readInt(in));
break;
case HeapTag.ROOT_JNI_GLOBAL:
roots.add(readInt(in));
in.skip(4);
break;
case HeapTag.ROOT_JNI_LOCAL:
roots.add(readInt(in));
in.skip(8);
break;
case HeapTag.ROOT_JAVA_FRAME:
roots.add(readInt(in));
in.skip(8);
break;
case HeapTag.ROOT_NATIVE_STACK:
roots.add(readInt(in));
in.skip(4);
break;
case HeapTag.ROOT_STICKY_CLASS:
roots.add(readInt(in));
break;
case HeapTag.ROOT_THREAD_BLOCK:
roots.add(readInt(in));
in.skip(4);
break;
case HeapTag.ROOT_MONITOR_USED:
roots.add(readInt(in));
break;
case HeapTag.ROOT_THREAD_OBJECT:
roots.add(readInt(in));
in.skip(8);
break;
case HeapTag.HPROF_ROOT_INTERNED_STRING:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_FINALIZING:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_DEBUGGER:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_REFERENCE_CLEANUP:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_VM_INTERNAL:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_JNI_MONITOR:
roots.add(readInt(in));
in.skip(8);
break;
default :
super.onHeapRecord(tag,reader);
}
}","@Override public void onHeapRecord(int tag,HeapDumpReader reader) throws IOException {
  InputStream in=reader.getInputStream();
switch (tag) {
case HeapTag.INSTANCE_DUMP:
    Instance instance=reader.readInstanceDump();
  writer.writeInstanceDump(instance);
break;
case HeapTag.OBJECT_ARRAY_DUMP:
readObjectArray(in);
break;
case HeapTag.PRIMITIVE_ARRAY_DUMP:
readPrimitiveArray(in);
break;
case HeapTag.ROOT_UNKNOWN:
roots.add(readInt(in));
break;
case HeapTag.ROOT_JNI_GLOBAL:
roots.add(readInt(in));
skip(in,4);
break;
case HeapTag.ROOT_JNI_LOCAL:
roots.add(readInt(in));
skip(in,8);
break;
case HeapTag.ROOT_JAVA_FRAME:
roots.add(readInt(in));
skip(in,8);
break;
case HeapTag.ROOT_NATIVE_STACK:
roots.add(readInt(in));
skip(in,4);
break;
case HeapTag.ROOT_STICKY_CLASS:
roots.add(readInt(in));
break;
case HeapTag.ROOT_THREAD_BLOCK:
roots.add(readInt(in));
skip(in,4);
break;
case HeapTag.ROOT_MONITOR_USED:
roots.add(readInt(in));
break;
case HeapTag.ROOT_THREAD_OBJECT:
roots.add(readInt(in));
skip(in,8);
break;
case HeapTag.HPROF_ROOT_INTERNED_STRING:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_FINALIZING:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_DEBUGGER:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_REFERENCE_CLEANUP:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_VM_INTERNAL:
roots.add(readInt(in));
break;
case HeapTag.HPROF_ROOT_JNI_MONITOR:
roots.add(readInt(in));
skip(in,8);
break;
default :
super.onHeapRecord(tag,reader);
}
}"
59965,"/** 
 * Crunch a HPROF file, converting it to BMD format.
 * @param inFile Input file (hprof)
 * @param out    Output (BMD)
 * @throws IOException If an error occurs while writing the output data
 */
public static void crunch(File inFile,OutputStream out) throws IOException {
  CrunchProcessor processor=new CrunchProcessor(out);
  InputStream in=new FileInputStream(inFile);
  HprofReader reader=new HprofReader(in,processor);
  while (reader.hasNext()) {
    reader.next();
  }
  processor.allClassesRead();
  in.close();
  in=new FileInputStream(inFile);
  reader=new HprofReader(in,processor);
  while (reader.hasNext()) {
    reader.next();
  }
  processor.finish();
}","/** 
 * Crunch a HPROF file, converting it to BMD format.
 * @param inFile Input file (hprof)
 * @param out    Output (BMD)
 * @throws IOException If an error occurs while writing the output data
 */
public static void crunch(File inFile,OutputStream out) throws IOException {
  CrunchProcessor processor=new CrunchProcessor(out);
  InputStream in=new BufferedInputStream(new FileInputStream(inFile));
  HprofReader reader=new HprofReader(in,processor);
  while (reader.hasNext()) {
    reader.next();
  }
  processor.allClassesRead();
  in.close();
  in=new BufferedInputStream(new FileInputStream(inFile));
  reader=new HprofReader(in,processor);
  while (reader.hasNext()) {
    reader.next();
  }
  processor.finish();
}"
59966,"@Override public void onRecord(int tag,int timestamp,int length,HprofReader reader) throws IOException {
  if (tag == Tag.STRING) {
    reader.getInputStream().skip(length);
  }
 else   if (tag == Tag.HEAP_DUMP || tag == Tag.HEAP_DUMP_SEGMENT) {
    if (writeUpdatedClassDefinitions) {
      writeClasses(tag,timestamp);
      writeUpdatedClassDefinitions=false;
    }
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    HeapDumpReader heapReader=new HeapDumpReader(reader.getInputStream(),length,new ClassDefinitionRemoverProcessor(buffer));
    while (heapReader.hasNext()) {
      heapReader.next();
    }
    byte[] data=buffer.toByteArray();
    writer.writeRecordHeader(tag,timestamp,data.length);
    out.write(data);
  }
 else {
    super.onRecord(tag,timestamp,length,reader);
  }
}","@Override public void onRecord(int tag,int timestamp,int length,HprofReader reader) throws IOException {
  if (tag == Tag.STRING) {
    skip(reader.getInputStream(),length);
  }
 else   if (tag == Tag.HEAP_DUMP || tag == Tag.HEAP_DUMP_SEGMENT) {
    if (writeUpdatedClassDefinitions) {
      writeClasses(tag,timestamp);
      writeUpdatedClassDefinitions=false;
    }
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    HeapDumpReader heapReader=new HeapDumpReader(reader.getInputStream(),length,new ClassDefinitionRemoverProcessor(buffer));
    while (heapReader.hasNext()) {
      heapReader.next();
    }
    byte[] data=buffer.toByteArray();
    writer.writeRecordHeader(tag,timestamp,data.length);
    out.write(data);
  }
 else {
    super.onRecord(tag,timestamp,length,reader);
  }
}"
59967,"/** 
 * Read a class dump record. The class definition should already have been created from a LOAD_CLASS record.
 * @param loadedClasses Map of class ids and loaded classes. The class dump being read must be in this map
 */
public ClassDefinition readClassDumpRecord(Map<Integer,ClassDefinition> loadedClasses) throws IOException {
  int objectId=readInt(in);
  ClassDefinition cls=loadedClasses.get(objectId);
  if (cls == null) {
    throw new IllegalStateException(""String_Node_Str"" + objectId);
  }
  cls.setObjectId(objectId);
  cls.setStackTraceSerial(readInt(in));
  cls.setSuperClassObjectId(readInt(in));
  cls.setClassLoaderObjectId(readInt(in));
  cls.setSignersObjectId(readInt(in));
  cls.setProtectionDomainObjectId(readInt(in));
  in.skip(8);
  cls.setInstanceSize(readInt(in));
  short constantCount=readShort(in);
  List<ConstantField> constantFields=constantCount > 0 ? new ArrayList<ConstantField>() : null;
  cls.setConstantFields(constantFields);
  for (int i=0; i < constantCount; i++) {
    short poolIndex=readShort(in);
    BasicType type=BasicType.fromType(readByte(in));
    byte[] value=read(in,type.size);
    constantFields.add(new ConstantField(poolIndex,type,value));
  }
  short staticCount=readShort(in);
  ArrayList<StaticField> staticFields=staticCount > 0 ? new ArrayList<StaticField>() : null;
  cls.setStaticFields(staticFields);
  for (int i=0; i < staticCount; i++) {
    int nameId=readInt(in);
    BasicType type=BasicType.fromType(readByte(in));
    byte[] value=read(in,type.size);
    staticFields.add(new StaticField(type,value,nameId));
  }
  short fieldCount=readShort(in);
  ArrayList<InstanceField> instanceFields=fieldCount > 0 ? new ArrayList<InstanceField>() : null;
  cls.setInstanceFields(instanceFields);
  for (int i=0; i < fieldCount; i++) {
    int nameId=readInt(in);
    BasicType type=BasicType.fromType(readByte(in));
    instanceFields.add(new InstanceField(type,nameId));
  }
  return cls;
}","/** 
 * Read a class dump record. The class definition should already have been created from a LOAD_CLASS record.
 * @param loadedClasses Map of class ids and loaded classes. The class dump being read must be in this map
 */
public ClassDefinition readClassDumpRecord(Map<Integer,ClassDefinition> loadedClasses) throws IOException {
  int objectId=readInt(in);
  ClassDefinition cls=loadedClasses.get(objectId);
  if (cls == null) {
    throw new IllegalStateException(""String_Node_Str"" + objectId);
  }
  cls.setObjectId(objectId);
  cls.setStackTraceSerial(readInt(in));
  cls.setSuperClassObjectId(readInt(in));
  cls.setClassLoaderObjectId(readInt(in));
  cls.setSignersObjectId(readInt(in));
  cls.setProtectionDomainObjectId(readInt(in));
  skip(in,8);
  cls.setInstanceSize(readInt(in));
  short constantCount=readShort(in);
  if (constantCount > 0) {
    List<ConstantField> constantFields=new ArrayList<ConstantField>();
    cls.setConstantFields(constantFields);
    for (int i=0; i < constantCount; i++) {
      short poolIndex=readShort(in);
      BasicType type=BasicType.fromType(readByte(in));
      byte[] value=read(in,type.size);
      constantFields.add(new ConstantField(poolIndex,type,value));
    }
  }
  short staticCount=readShort(in);
  if (staticCount > 0) {
    ArrayList<StaticField> staticFields=new ArrayList<StaticField>();
    cls.setStaticFields(staticFields);
    for (int i=0; i < staticCount; i++) {
      int nameId=readInt(in);
      BasicType type=BasicType.fromType(readByte(in));
      byte[] value=read(in,type.size);
      staticFields.add(new StaticField(type,value,nameId));
    }
  }
  short fieldCount=readShort(in);
  if (fieldCount > 0) {
    ArrayList<InstanceField> instanceFields=new ArrayList<InstanceField>();
    cls.setInstanceFields(instanceFields);
    for (int i=0; i < fieldCount; i++) {
      int nameId=readInt(in);
      BasicType type=BasicType.fromType(readByte(in));
      instanceFields.add(new InstanceField(type,nameId));
    }
  }
  return cls;
}"
59968,"protected void skipHeapRecord(int tag,InputStream in) throws IOException {
switch (tag) {
case HeapTag.ROOT_UNKNOWN:
    in.skip(4);
  break;
case HeapTag.ROOT_JNI_GLOBAL:
in.skip(8);
break;
case HeapTag.ROOT_JNI_LOCAL:
in.skip(12);
break;
case HeapTag.ROOT_JAVA_FRAME:
in.skip(12);
break;
case HeapTag.ROOT_NATIVE_STACK:
in.skip(8);
break;
case HeapTag.ROOT_STICKY_CLASS:
in.skip(4);
break;
case HeapTag.ROOT_THREAD_BLOCK:
in.skip(8);
break;
case HeapTag.ROOT_MONITOR_USED:
in.skip(4);
break;
case HeapTag.ROOT_THREAD_OBJECT:
in.skip(12);
break;
case HeapTag.CLASS_DUMP:
{
in.skip(36);
short constantCount=readShort(in);
for (int i=0; i < constantCount; i++) {
in.skip(2);
BasicType type=BasicType.fromType(in.read());
in.skip(type.size);
}
short staticCount=readShort(in);
for (int i=0; i < staticCount; i++) {
in.skip(4);
BasicType type=BasicType.fromType(in.read());
in.skip(type.size);
}
short fieldCount=readShort(in);
for (int i=0; i < fieldCount; i++) {
in.skip(4);
in.skip(1);
}
break;
}
case HeapTag.INSTANCE_DUMP:
{
in.skip(12);
int size=readInt(in);
in.skip(size);
break;
}
case HeapTag.OBJECT_ARRAY_DUMP:
{
in.skip(8);
int count=readInt(in);
in.skip(4);
in.skip(4 * count);
break;
}
case HeapTag.PRIMITIVE_ARRAY_DUMP:
{
in.skip(8);
int count=readInt(in);
BasicType type=BasicType.fromType(in.read());
in.skip(type.size * count);
break;
}
case HeapTag.HPROF_HEAP_DUMP_INFO:
in.skip(8);
break;
case HeapTag.HPROF_ROOT_INTERNED_STRING:
in.skip(4);
break;
case HeapTag.HPROF_ROOT_FINALIZING:
in.skip(4);
break;
case HeapTag.HPROF_ROOT_DEBUGGER:
in.skip(4);
break;
case HeapTag.HPROF_ROOT_REFERENCE_CLEANUP:
in.skip(4);
break;
case HeapTag.HPROF_ROOT_VM_INTERNAL:
in.skip(4);
break;
case HeapTag.HPROF_ROOT_JNI_MONITOR:
in.skip(12);
break;
case HeapTag.HPROF_UNREACHABLE:
in.skip(4);
break;
case HeapTag.HPROF_PRIMITIVE_ARRAY_NODATA_DUMP:
in.skip(13);
break;
default :
System.out.println(""String_Node_Str"" + Integer.toHexString(tag));
throw new IllegalArgumentException(""String_Node_Str"" + Integer.toHexString(tag) + ""String_Node_Str"");
}
}","protected void skipHeapRecord(int tag,InputStream in) throws IOException {
switch (tag) {
case HeapTag.ROOT_UNKNOWN:
    skip(in,4);
  break;
case HeapTag.ROOT_JNI_GLOBAL:
skip(in,8);
break;
case HeapTag.ROOT_JNI_LOCAL:
skip(in,12);
break;
case HeapTag.ROOT_JAVA_FRAME:
skip(in,12);
break;
case HeapTag.ROOT_NATIVE_STACK:
skip(in,8);
break;
case HeapTag.ROOT_STICKY_CLASS:
skip(in,4);
break;
case HeapTag.ROOT_THREAD_BLOCK:
skip(in,8);
break;
case HeapTag.ROOT_MONITOR_USED:
skip(in,4);
break;
case HeapTag.ROOT_THREAD_OBJECT:
skip(in,12);
break;
case HeapTag.CLASS_DUMP:
{
skip(in,36);
short constantCount=readShort(in);
for (int i=0; i < constantCount; i++) {
skip(in,2);
BasicType type=BasicType.fromType(in.read());
skip(in,type.size);
}
short staticCount=readShort(in);
for (int i=0; i < staticCount; i++) {
skip(in,4);
BasicType type=BasicType.fromType(in.read());
skip(in,type.size);
}
short fieldCount=readShort(in);
for (int i=0; i < fieldCount; i++) {
skip(in,4);
skip(in,1);
}
break;
}
case HeapTag.INSTANCE_DUMP:
{
skip(in,12);
int size=readInt(in);
skip(in,size);
break;
}
case HeapTag.OBJECT_ARRAY_DUMP:
{
skip(in,8);
int count=readInt(in);
skip(in,4);
skip(in,4 * count);
break;
}
case HeapTag.PRIMITIVE_ARRAY_DUMP:
{
skip(in,8);
int count=readInt(in);
BasicType type=BasicType.fromType(in.read());
skip(in,type.size * count);
break;
}
case HeapTag.HPROF_HEAP_DUMP_INFO:
skip(in,8);
break;
case HeapTag.HPROF_ROOT_INTERNED_STRING:
skip(in,4);
break;
case HeapTag.HPROF_ROOT_FINALIZING:
skip(in,4);
break;
case HeapTag.HPROF_ROOT_DEBUGGER:
skip(in,4);
break;
case HeapTag.HPROF_ROOT_REFERENCE_CLEANUP:
skip(in,4);
break;
case HeapTag.HPROF_ROOT_VM_INTERNAL:
skip(in,4);
break;
case HeapTag.HPROF_ROOT_JNI_MONITOR:
skip(in,12);
break;
case HeapTag.HPROF_UNREACHABLE:
skip(in,4);
break;
case HeapTag.HPROF_PRIMITIVE_ARRAY_NODATA_DUMP:
skip(in,13);
break;
default :
System.out.println(""String_Node_Str"" + Integer.toHexString(tag));
throw new IllegalArgumentException(""String_Node_Str"" + Integer.toHexString(tag) + ""String_Node_Str"");
}
}"
59969,"@Override public void onRecord(int tag,int timestamp,int length,HprofReader reader) throws IOException {
  reader.getInputStream().skip(length);
}","@Override public void onRecord(int tag,int timestamp,int length,HprofReader reader) throws IOException {
  skip(reader.getInputStream(),length);
}"
59970,"@Override public void run(C configuration,Environment environment) throws Exception {
  pool=getJedisFactory(configuration).build(environment);
  environment.healthChecks().register(""String_Node_Str"",new JedisHealthCheck(pool));
  environment.jersey().register(new JedisFactory(pool));
}","@Override public void run(C configuration,Environment environment) throws Exception {
  pool=getJedisFactory(configuration).build(environment);
  environment.healthChecks().register(""String_Node_Str"",new JedisHealthCheck(pool));
  environment.jersey().register(new JedisPoolBinder(pool));
}"
59971,"public static long getRandomLong(long val,Random rand){
  if (val == 0) {
    return 0;
  }
  int low=(int)(val & Integer.MIN_VALUE);
  int mid=(int)((val >>> 31) & Integer.MIN_VALUE);
  int high=(int)((val >>> 62) & Integer.MIN_VALUE);
  boolean mh=(mid | high) > 0;
  long r=mh ? rand.nextInt() & Integer.MAX_VALUE : rand.nextInt(low);
  if (mh)   r|=(high > 0 ? rand.nextInt() & Integer.MAX_VALUE : rand.nextInt(mid)) << 31;
  if (high > 0)   r|=rand.nextInt(high) << 62;
  return r;
}","public static long getRandomLong(long val,Random rand){
  if (val == 0) {
    return 0;
  }
  int low=(int)(val & Integer.MAX_VALUE);
  int mid=(int)((val >>> 31) & Integer.MAX_VALUE);
  int high=(int)((val >>> 62) & Integer.MAX_VALUE);
  boolean mh=(mid | high) > 0;
  long r=mh ? rand.nextInt() & Integer.MAX_VALUE : rand.nextInt(low);
  if (mh)   r|=(high > 0 ? rand.nextInt() & Integer.MAX_VALUE : rand.nextInt(mid)) << 31;
  if (high > 0)   r|=rand.nextInt(high) << 62;
  return r;
}"
59972,"@Override public ItemStack transferStackInSlot(EntityPlayer player,int slotIndex){
  ItemStack stack=null;
  Slot slot=(Slot)inventorySlots.get(slotIndex);
  int invPlayer=27;
  int invFull=invPlayer + 9;
  int invTile=invFull + getSizeInventory();
  if (slot != null && slot.getHasStack()) {
    ItemStack stackInSlot=slot.getStack();
    stack=stackInSlot.copy();
    if (slotIndex < invFull) {
      if (!mergeItemStack(stackInSlot,invFull,invTile,false)) {
        return null;
      }
    }
 else     if (!mergeItemStack(stackInSlot,0,invFull,true)) {
      return null;
    }
    if (stackInSlot.stackSize <= 0) {
      slot.putStack((ItemStack)null);
    }
 else {
      slot.putStack(stackInSlot);
      slot.onSlotChanged();
    }
    if (stackInSlot.stackSize >= stack.stackSize) {
      return null;
    }
  }
  return stack;
}","@Override public ItemStack transferStackInSlot(EntityPlayer player,int slotIndex){
  ItemStack stack=null;
  Slot slot=(Slot)inventorySlots.get(slotIndex);
  int invPlayer=27;
  int invFull=invPlayer + 9;
  int invTile=invFull + getSizeInventory();
  if (slot != null && slot.getHasStack()) {
    ItemStack stackInSlot=slot.getStack();
    stack=stackInSlot.copy();
    if (slotIndex < invFull) {
      if (!mergeItemStack(stackInSlot,invFull,invTile,false)) {
        return null;
      }
    }
 else     if (!mergeItemStack(stackInSlot,0,invFull,true)) {
      return null;
    }
    if (stackInSlot.stackSize <= 0) {
      slot.putStack((ItemStack)null);
    }
 else {
      slot.putStack(stackInSlot);
      slot.onSlotChanged();
    }
    if (stackInSlot.stackSize == stack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,stackInSlot);
  }
  return stack;
}"
59973,"public IEnderDestination getOutput(boolean onlyLoaded){
  if (output == null || output.isNotValid()) {
    output=null;
    if (!DimensionManager.isDimensionRegistered(dimension)) {
      return null;
    }
    WorldServer world=DimensionManager.getWorld(dimension);
    if (world == null && !onlyLoaded) {
      DimensionManager.initDimension(dimension);
      world=DimensionManager.getWorld(dimension);
    }
 else {
      return null;
    }
    if (!onlyLoaded || world.blockExists(x,y,z)) {
      TileEntity te=world.getTileEntity(x,y,z);
      if (te instanceof IEnderDestination) {
        output=(IEnderDestination)te;
      }
 else {
        isInvalid=true;
      }
    }
  }
  return output;
}","public IEnderDestination getOutput(boolean onlyLoaded){
  if (output == null || output.isNotValid()) {
    output=null;
    if (!DimensionManager.isDimensionRegistered(dimension)) {
      return null;
    }
    WorldServer world=DimensionManager.getWorld(dimension);
    if (world == null && !onlyLoaded) {
      DimensionManager.initDimension(dimension);
      world=DimensionManager.getWorld(dimension);
    }
 else {
      return null;
    }
    if (world.blockExists(x,y,z)) {
      TileEntity te=world.getTileEntity(x,y,z);
      if (te instanceof IEnderDestination) {
        output=(IEnderDestination)te;
      }
 else {
        isInvalid=true;
      }
    }
  }
  return output;
}"
59974,"protected void rehashIfNecessary(){
  Entry[] old=hashTable, newTable;
  if (size > old.length * 2 && old.length < Ints.MAX_POWER_OF_TWO) {
synchronized (hashTable) {
      int newTableSize=old.length * 2, newMask=newTableSize - 1;
      newTable=hashTable=new Entry[newTableSize];
      mask=newMask;
      for (int bucket=old.length; bucket-- > 0; ) {
        Entry entry=old[bucket];
        while (entry != null) {
          Entry nextEntry=entry.nextInBucket;
          int keyBucket=entry.hash & newMask;
          entry.nextInBucket=newTable[keyBucket];
          newTable[keyBucket]=entry;
          entry=nextEntry;
        }
      }
    }
  }
}","protected void rehashIfNecessary(){
  Entry[] old=hashTable, newTable;
  if (size > old.length * 2 && old.length < Ints.MAX_POWER_OF_TWO) {
synchronized (hashTable) {
      int newTableSize=old.length * 2, newMask=newTableSize - 1;
      newTable=new Entry[newTableSize];
      mask=newMask;
      for (int bucket=old.length; bucket-- > 0; ) {
        Entry entry=old[bucket];
        while (entry != null) {
          Entry nextEntry=entry.nextInBucket;
          int keyBucket=entry.hash & newMask;
          entry.nextInBucket=newTable[keyBucket];
          newTable[keyBucket]=entry;
          entry=nextEntry;
        }
      }
      hashTable=newTable;
    }
  }
}"
59975,"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  int expectedModCount=modCount;
  s.defaultWriteObject();
  s.writeInt(size);
  Entry n=head;
  for (int i=0; i < size; i++) {
    s.writeObject(n);
    n=n.next;
  }
  if (modCount != expectedModCount) {
    throw new ConcurrentModificationException();
  }
}","private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  int expectedModCount=modCount;
  s.defaultWriteObject();
  s.writeInt(size);
  Entry n=head;
  for (int i=0; i < size; i++) {
    s.writeObject(n.key);
    n=n.next;
  }
  if (modCount != expectedModCount) {
    throw new ConcurrentModificationException();
  }
}"
59976,"public static NBTTagCompound setItemStackTagName(NBTTagCompound tag,String name){
  if (name == ""String_Node_Str"") {
    return null;
  }
  if (tag == null) {
    tag=new NBTTagCompound();
  }
  if (!tag.hasKey(""String_Node_Str"")) {
    tag.setTag(""String_Node_Str"",new NBTTagCompound());
  }
  tag.getCompoundTag(""String_Node_Str"").setString(""String_Node_Str"",name);
  return tag;
}","public static NBTTagCompound setItemStackTagName(NBTTagCompound tag,String name){
  if (Strings.isNullOrEmpty(name)) {
    return null;
  }
  if (tag == null) {
    tag=new NBTTagCompound();
  }
  if (!tag.hasKey(""String_Node_Str"")) {
    tag.setTag(""String_Node_Str"",new NBTTagCompound());
  }
  tag.getCompoundTag(""String_Node_Str"").setString(""String_Node_Str"",name);
  return tag;
}"
59977,"private static void alterDelegate(Object obj,Object repl){
  if (obj instanceof Item) {
    RegistryDelegate<Item> delegate=((Item)obj).delegate;
    ReflectionHelper.setPrivateValue(DelegateClass,delegate,repl,""String_Node_Str"");
  }
}","private static void alterDelegate(Object obj,Object repl){
  if (obj instanceof Item) {
    RegistryDelegate<Item> delegate=((Item)obj).delegate;
    ReflectionHelper.setPrivateValue(DelegateClass,delegate,repl,""String_Node_Str"");
    ReflectionHelper.setPrivateValue(DelegateClass,((Item)repl).delegate,delegate.name(),""String_Node_Str"");
  }
}"
59978,"public int findFreeFrequency(String channel){
  BitSet set=usedTeleports.get(channel);
  if (set == null) {
    return -1;
  }
  return set.nextClearBit(0);
}","public int findFreeFrequency(String channel){
  BitSet set=usedTeleports.get(channel);
  if (set == null) {
    return 0;
  }
  return set.nextClearBit(0);
}"
59979,"public IEnderDestination getDestination(IEnderDestination theAttuned){
  TIntObjectHashMap<EnderDestination> map=outputTeleport.get(theAttuned.getChannelString());
  if (map == null) {
    return null;
  }
  EnderDestination dest=map.get(theAttuned.getDestination());
  return dest == null ? null : dest.getOutput();
}","@Override public int getDestination(){
  return -1;
}"
59980,"public void removeDestination(IEnderDestination theAttuned){
  String channel=theAttuned.getChannelString();
  TIntObjectHashMap<EnderDestination> map=outputTeleport.get(channel);
  if (map == null) {
    return;
  }
  EnderDestination dest=map.get(theAttuned.getFrequency());
  if (dest == null) {
    return;
  }
  if (dest.dimension == theAttuned.dimension()) {
    if (dest.x == theAttuned.x() && dest.y == theAttuned.x() && dest.z == theAttuned.x()) {
      int freq=theAttuned.getFrequency();
      map.remove(freq);
      linkConf.getCategory(channel).remove(String.valueOf(freq));
    }
  }
}","public void removeDestination(IEnderDestination theAttuned){
  String channel=theAttuned.getChannelString();
  TIntObjectHashMap<EnderDestination> map=outputTeleport.get(channel);
  if (map == null) {
    return;
  }
  EnderDestination dest=map.get(theAttuned.getFrequency());
  if (dest == null) {
    return;
  }
  if (dest.dimension == theAttuned.dimension()) {
    if (dest.x == theAttuned.x() && dest.y == theAttuned.y() && dest.z == theAttuned.z()) {
      int freq=theAttuned.getFrequency();
      map.remove(freq);
      linkConf.getCategory(channel).remove(String.valueOf(freq));
    }
  }
}"
59981,"public static UUID getID(EntityPlayer player){
  if (MinecraftServer.getServer() != null) {
    return player.getGameProfile().getId();
  }
  return getClientId(player);
}","public static UUID getID(EntityPlayer player){
  if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isServerRunning()) {
    return player.getGameProfile().getId();
  }
  return getClientId(player);
}"
59982,"public int getLastScrollPosition(){
  int position=_elements.size() - 1;
  int heightUsed=_elements.get(position).getHeight();
  while (position > 0 && heightUsed < sizeY) {
    position--;
    heightUsed+=_elements.get(position).getHeight();
  }
  return position + 1;
}","public int getLastScrollPosition(){
  int position=_elements.size() - 1;
  if (position < 0)   return 0;
  int heightUsed=_elements.get(position).getHeight();
  while (position > 0 && heightUsed < sizeY) {
    position--;
    heightUsed+=_elements.get(position).getHeight();
  }
  return position + 1;
}"
59983,"public static void writeVarInt(int in,ByteBuf out){
  while ((in & ~0x7F) != 0) {
    out.writeByte(in & 127 | 128);
    in>>>=7;
  }
}","public static void writeVarInt(int in,ByteBuf out){
  if (in == 0) {
    out.writeByte(0);
  }
  while (in != 0) {
    out.writeByte(in & 127 | ((in & ~0x7F) != 0 ? 128 : 0));
    in>>>=7;
  }
}"
59984,"public void remove(IListBoxElement element){
  _elements.remove(element);
}","public void remove(IListBoxElement element){
  int e=_elements.indexOf(element);
  if (_elements.remove(element)) {
    if (e < _firstIndexDisplayed) {
      --_firstIndexDisplayed;
    }
    if (e < _selectedIndex) {
      --_selectedIndex;
    }
  }
}"
59985,"public IListBoxElement getSelectedElement(){
  if (_selectedIndex == -1 || _selectedIndex == _elements.size()) {
    return null;
  }
  return _elements.get(_selectedIndex);
}","public IListBoxElement getSelectedElement(){
  if (_selectedIndex == -1 || _selectedIndex >= _elements.size()) {
    return null;
  }
  return _elements.get(_selectedIndex);
}"
59986,"public void removeAt(int index){
  _elements.remove(index);
}","public void removeAt(int index){
  _firstIndexDisplayed=scrollHoriz=0;
  _selectedIndex=-1;
  _elements.remove(index);
}"
59987,"public static ItemStack simulateAddToOccupiedInventorySlot(IInventory inventory,int slot,ItemStack stack,ItemStack existingStack){
  int stackLimit=Math.min(inventory.getInventoryStackLimit(),stack.getMaxStackSize());
  if (stack.stackSize + existingStack.stackSize > stackLimit) {
    stack.stackSize-=stackLimit - existingStack.stackSize;
    return stack;
  }
  return stackLimit >= stack.stackSize ? null : stack.splitStack(stack.stackSize - stackLimit);
}","public static ItemStack simulateAddToOccupiedInventorySlot(IInventory inventory,int slot,ItemStack stack,ItemStack existingStack){
  int stackLimit=Math.min(inventory.getInventoryStackLimit(),stack.getMaxStackSize());
  if (stack.stackSize + existingStack.stackSize > stackLimit && stackLimit > existingStack.stackSize) {
    stack.stackSize-=stackLimit - existingStack.stackSize;
    return stack;
  }
  return stackLimit >= stack.stackSize ? null : stack.splitStack(stack.stackSize - stackLimit);
}"
59988,"public static ItemStack addToOccupiedInventorySlot(IInventory inventory,int slot,ItemStack stack,ItemStack existingStack){
  int stackLimit=Math.min(inventory.getInventoryStackLimit(),stack.getMaxStackSize());
  if (stack.stackSize + existingStack.stackSize > stackLimit) {
    int stackDiff=stackLimit - existingStack.stackSize;
    existingStack.stackSize=stackLimit;
    stack.stackSize-=stackDiff;
    inventory.setInventorySlotContents(slot,existingStack);
    return stack;
  }
  existingStack.stackSize+=Math.min(stack.stackSize,stackLimit);
  inventory.setInventorySlotContents(slot,existingStack);
  return stackLimit >= stack.stackSize ? null : stack.splitStack(stack.stackSize - stackLimit);
}","public static ItemStack addToOccupiedInventorySlot(IInventory inventory,int slot,ItemStack stack,ItemStack existingStack){
  int stackLimit=Math.min(inventory.getInventoryStackLimit(),stack.getMaxStackSize());
  if (stack.stackSize + existingStack.stackSize > stackLimit && stackLimit > existingStack.stackSize) {
    int stackDiff=stackLimit - existingStack.stackSize;
    existingStack.stackSize=stackLimit;
    stack.stackSize-=stackDiff;
    inventory.setInventorySlotContents(slot,existingStack);
    return stack;
  }
  existingStack.stackSize+=Math.min(stack.stackSize,stackLimit);
  inventory.setInventorySlotContents(slot,existingStack);
  return stackLimit >= stack.stackSize ? null : stack.splitStack(stack.stackSize - stackLimit);
}"
59989,boolean canPlayerAccess(String name);,boolean canPlayerAccess(EntityPlayer player);
59990,"public static boolean itemsEqualWithMetadata(ItemStack stackA,ItemStack stackB,boolean checkNBT){
  if (stackA == stackB) {
    return true;
  }
  return itemsEqualWithoutMetadataNoCheck(stackA,stackB) && (!checkNBT || doNBTsMatch(stackA.stackTagCompound,stackB.stackTagCompound));
}","public static boolean itemsEqualWithMetadata(ItemStack stackA,ItemStack stackB,boolean checkNBT){
  return itemsEqualWithMetadata(stackA,stackB) && (!checkNBT || doNBTsMatch(stackA.stackTagCompound,stackB.stackTagCompound));
}"
59991,"public static boolean itemsIdentical(ItemStack stackA,ItemStack stackB){
  if (stackA == stackB) {
    return true;
  }
  return itemsEqualWithoutMetadataNoCheck(stackA,stackB) && (stackA.getItemDamage() == stackB.getItemDamage()) && doNBTsMatch(stackA.stackTagCompound,stackB.stackTagCompound);
}","public static boolean itemsIdentical(ItemStack stackA,ItemStack stackB){
  return itemsEqualWithoutMetadata(stackA,stackB) && (stackA.getItemDamage() == stackB.getItemDamage()) && doNBTsMatch(stackA.stackTagCompound,stackB.stackTagCompound);
}"
59992,"public static boolean areItemsEqual(Item itemA,Item itemB){
  if (itemA == itemB) {
    return true;
  }
  if (itemA == null | itemB == null) {
    return false;
  }
  return itemA.equals(itemB);
}","public static boolean areItemsEqual(Item itemA,Item itemB){
  if (itemA == null | itemB == null) {
    return false;
  }
  return itemA == itemB || itemA.equals(itemB);
}"
59993,"public static boolean itemsEqualForCrafting(ItemStack stackA,ItemStack stackB){
  if (stackA == stackB) {
    return true;
  }
  return itemsEqualWithoutMetadataNoCheck(stackA,stackB) && (!stackA.getHasSubtypes() || ((stackA.getItemDamage() == OreDictionary.WILDCARD_VALUE || stackB.getItemDamage() == OreDictionary.WILDCARD_VALUE) || stackB.getItemDamage() == stackA.getItemDamage()));
}","public static boolean itemsEqualForCrafting(ItemStack stackA,ItemStack stackB){
  return itemsEqualWithoutMetadata(stackA,stackB) && (!stackA.getHasSubtypes() || ((stackA.getItemDamage() == OreDictionary.WILDCARD_VALUE || stackB.getItemDamage() == OreDictionary.WILDCARD_VALUE) || stackB.getItemDamage() == stackA.getItemDamage()));
}"
59994,"public static boolean doNBTsMatch(NBTTagCompound nbtA,NBTTagCompound nbtB){
  if (nbtA == nbtB) {
    return true;
  }
  if (nbtA != null & nbtB != null) {
    return nbtA.equals(nbtB);
  }
  return false;
}","public static boolean doNBTsMatch(NBTTagCompound nbtA,NBTTagCompound nbtB){
  if (nbtA != null & nbtB != null) {
    return nbtA.equals(nbtB);
  }
  return false;
}"
59995,"public static boolean itemsEqualWithoutMetadata(ItemStack stackA,ItemStack stackB,boolean checkNBT){
  if (stackA == stackB) {
    return true;
  }
  return itemsEqualWithoutMetadataNoCheck(stackA,stackB) && (!checkNBT || doNBTsMatch(stackA.stackTagCompound,stackB.stackTagCompound));
}","public static boolean itemsEqualWithoutMetadata(ItemStack stackA,ItemStack stackB,boolean checkNBT){
  return itemsEqualWithoutMetadata(stackA,stackB) && (!checkNBT || doNBTsMatch(stackA.stackTagCompound,stackB.stackTagCompound));
}"
59996,"public void onSlotChanged(){
  player.inventory.mainInventory[containerIndex]=containerWrapper.getContainerStack();
}","public void onSlotChanged(){
  ItemStack item=player.inventory.mainInventory[containerIndex];
  if (valid && (item == null || item.getItem() != containerWrapper.getContainerStack().getItem())) {
    player.inventory.mainInventory[containerIndex]=containerWrapper.getContainerStack();
  }
}"
59997,"public ContainerInventoryItem(ItemStack stack,InventoryPlayer inventory){
  containerWrapper=new InventoryContainerItemWrapper(this,stack);
  player=inventory.player;
  containerIndex=inventory.currentItem;
}","public ContainerInventoryItem(ItemStack stack,InventoryPlayer inventory){
  player=inventory.player;
  containerIndex=inventory.currentItem;
  containerWrapper=new InventoryContainerItemWrapper(this,stack);
}"
59998,"@Override public boolean canInteractWith(EntityPlayer player){
  return true;
}","@Override public boolean canInteractWith(EntityPlayer player){
  boolean e=containerWrapper.getDirty();
  if (!valid) {
    if (e) {
      player.inventory.setItemStack(null);
    }
    return false;
  }
  return true;
}"
59999,"@Override public void markDirty(){
  container.onSlotChanged();
}","@Override public void markDirty(){
  dirty=true;
  container.onSlotChanged();
}"
60000,"public SliderVertical(GuiBase containerScreen,int x,int y,int width,int height,int maxValue,int minValue){
  super(containerScreen,x,y,width,height,maxValue,minValue);
  int dist=maxValue - minValue;
  setSliderSize(width,dist <= 0 ? height : Math.max(height / dist,9));
}","public SliderVertical(GuiBase containerScreen,int x,int y,int width,int height,int maxValue,int minValue){
  super(containerScreen,x,y,width,height,maxValue,minValue);
  int dist=maxValue - minValue;
  setSliderSize(width,dist <= 0 ? height : Math.max(height / ++dist,9));
}"
