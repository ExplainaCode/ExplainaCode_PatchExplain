record_number,buggy_code,fixed_code
83001,"/** 
 * Gets the width of the browser window's client area excluding the vertical scroll bar.
 * @return the window's client width
 */
public native int windowGetClientWidth();","/** 
 * Gets the width of the browser window's client area excluding the vertical scroll bar.
 * @return the window's client width
 */
public abstract int windowGetClientWidth();"
83002,"public void testPartialParsing(){
  DateTimeFormat fmt=DateTimeFormat.getFormat(""String_Node_Str"");
  Date dateOnly=fmt.parse(""String_Node_Str"");
  assertEquals(dateOnly.getHours(),0);
  assertEquals(dateOnly.getMinutes(),0);
  assertEquals(dateOnly.getSeconds(),0);
  fmt=DateTimeFormat.getFormat(""String_Node_Str"");
  dateOnly=fmt.parse(""String_Node_Str"");
  assertEquals(dateOnly.getHours(),16);
  assertEquals(dateOnly.getMinutes(),0);
  assertEquals(dateOnly.getSeconds(),0);
}","public void testPartialParsing(){
  DateTimeFormat fmt=DateTimeFormat.getFormat(""String_Node_Str"");
  Date dateActual=new Date(87,10,22);
  Date dateOnly=fmt.parse(""String_Node_Str"");
  assertEquals(dateOnly.getHours(),0);
  assertEquals(dateOnly.getMinutes(),0);
  assertEquals(dateOnly.getSeconds(),0);
  assertEquals(dateOnly.getTime(),dateActual.getTime());
  fmt=DateTimeFormat.getFormat(""String_Node_Str"");
  dateOnly=fmt.parse(""String_Node_Str"");
  assertEquals(dateOnly.getHours(),16);
  assertEquals(dateOnly.getMinutes(),0);
  assertEquals(dateOnly.getSeconds(),0);
}"
83003,"public void characters(char[] ch,int start,int length) throws SAXException {
  int lineNumber=locator.getLineNumber();
  Schema schemaLevel=getTopSchemaLevel();
  Class slc=schemaLevel.getClass();
  HandlerClassInfo classInfo=HandlerClassInfo.getClassInfo(slc);
  assert(classInfo != null);
  HandlerMethod method=classInfo.getTextMethod();
  if (method == null) {
    return;
  }
  try {
    final String text=String.valueOf(ch,start,length);
    method.invokeText(lineNumber,text,schemaLevel);
  }
 catch (  UnableToCompleteException e) {
    throw new SAXException(e);
  }
}","public void characters(char[] ch,int start,int length) throws SAXException {
  int lineNumber=locator.getLineNumber();
  Schema schemaLevel=getTopSchemaLevel();
  if (schemaLevel == null) {
    for (int i=0; i < length; i++) {
      if (!Character.isWhitespace(ch[i + start])) {
        throw new SAXException(""String_Node_Str"" + String.valueOf(ch,start,length));
      }
    }
    return;
  }
  Class slc=schemaLevel.getClass();
  HandlerClassInfo classInfo=HandlerClassInfo.getClassInfo(slc);
  assert(classInfo != null);
  HandlerMethod method=classInfo.getTextMethod();
  if (method == null) {
    return;
  }
  try {
    final String text=String.valueOf(ch,start,length);
    method.invokeText(lineNumber,text,schemaLevel);
  }
 catch (  UnableToCompleteException e) {
    throw new SAXException(e);
  }
}"
83004,"/** 
 * This method is supposed to return the simple class name for this compilation unit. Examples of simple class names would be ""String"", or ""ArrayList"". JDT allows this method to return null in the cases where this compilation unit is not a package-info class.
 */
public char[] getMainTypeName(){
  String mainTypeName=cup.getLocation();
  int ext=mainTypeName.lastIndexOf(""String_Node_Str"");
  if (ext == -1) {
    return null;
  }
  mainTypeName=mainTypeName.substring(0,ext);
  int nameStart=mainTypeName.lastIndexOf(File.separatorChar);
  if (nameStart == -1) {
    nameStart=mainTypeName.lastIndexOf('/');
  }
  mainTypeName=mainTypeName.substring(nameStart + 1);
  return mainTypeName.toCharArray();
}","/** 
 * This method is supposed to return the simple class name for this compilation unit. Examples of simple class names would be ""String"", or ""ArrayList"". JDT allows this method to return null in the cases where this compilation unit is not a package-info class.
 */
public char[] getMainTypeName(){
  String typeName=cup.getMainTypeName();
  if (typeName != null) {
    return typeName.toCharArray();
  }
  return null;
}"
83005,"public String toString(){
  return location;
}","@Override public String toString(){
  return location;
}"
83006,"public URLCompilationUnitProvider(URL url,String packageName){
  assert(url != null);
  assert(packageName != null);
  this.url=url;
  this.file=trySimplify(url);
  if (file == null) {
    this.location=url.toExternalForm();
  }
 else {
    this.location=this.file.getAbsolutePath();
  }
  this.packageName=packageName;
}","public URLCompilationUnitProvider(URL url,String packageName){
  assert(url != null);
  assert(packageName != null);
  this.url=url;
  this.file=trySimplify(url);
  String simpleTypeName;
  if (file == null) {
    this.location=url.toExternalForm();
    simpleTypeName=new File(url.getPath()).getName();
  }
 else {
    this.location=this.file.getAbsolutePath();
    simpleTypeName=this.file.getName();
  }
  int i=simpleTypeName.lastIndexOf(""String_Node_Str"");
  if (i != -1) {
    simpleTypeName=simpleTypeName.substring(0,i);
  }
  mainTypeName=simpleTypeName;
  this.packageName=packageName;
}"
83007,"private <T extends JsVisitable<T>>void popList(List<T> collection,int count){
  List<T> list=new ArrayList<T>();
  while (count > 0) {
    T item=pop();
    if (item != null) {
      list.add(item);
    }
    --count;
  }
  Collections.reverse(list);
  collection.addAll(list);
}","private <T extends JsVisitable<T>>void popList(List<T> collection,int count){
  List<T> list=new ArrayList<T>();
  while (count > 0) {
    T item=this.<T>pop();
    if (item != null) {
      list.add(item);
    }
    --count;
  }
  Collections.reverse(list);
  collection.addAll(list);
}"
83008,"private JsStatement mapForStatement(Node forNode) throws JsParserException {
  Node fromInit=forNode.getFirstChild();
  Node fromTest=fromInit.getNext();
  Node fromIncr=fromTest.getNext();
  Node fromBody=fromIncr.getNext();
  if (fromBody == null) {
    Node fromIter=forNode.getFirstChild();
    Node fromObjExpr=fromIter.getNext();
    fromBody=fromObjExpr.getNext();
    JsForIn toForIn;
    if (fromIter.getType() == TokenStream.VAR) {
      Node fromIterVarName=fromIter.getFirstChild();
      String fromName=fromIterVarName.getString();
      JsName toName=getScope().declareName(fromName);
      toForIn=new JsForIn(toName);
      Node fromIterInit=fromIterVarName.getFirstChild();
      if (fromIterInit != null) {
        toForIn.setIterExpr(mapOptionalExpression(fromIterInit));
      }
    }
 else {
      toForIn=new JsForIn();
      toForIn.setIterExpr(mapExpression(fromIter));
    }
    toForIn.setObjExpr(mapExpression(fromObjExpr));
    JsStatement bodyStmt=mapStatement(fromBody);
    if (bodyStmt != null) {
      toForIn.setBody(bodyStmt);
    }
 else {
      toForIn.setBody(program.getEmptyStmt());
    }
    return toForIn;
  }
 else {
    JsFor toFor=new JsFor();
    JsNode<?> initThingy=map(fromInit);
    if (initThingy != null) {
      if (initThingy instanceof JsVars) {
        toFor.setInitVars((JsVars)initThingy);
      }
 else {
        assert(initThingy instanceof JsExpression);
        toFor.setInitExpr((JsExpression)initThingy);
      }
    }
    toFor.setCondition(mapOptionalExpression(fromTest));
    toFor.setIncrExpr(mapOptionalExpression(fromIncr));
    JsStatement bodyStmt=mapStatement(fromBody);
    if (bodyStmt != null) {
      toFor.setBody(bodyStmt);
    }
 else {
      toFor.setBody(program.getEmptyStmt());
    }
    return toFor;
  }
}","private JsStatement mapForStatement(Node forNode) throws JsParserException {
  Node fromInit=forNode.getFirstChild();
  Node fromTest=fromInit.getNext();
  Node fromIncr=fromTest.getNext();
  Node fromBody=fromIncr.getNext();
  if (fromBody == null) {
    Node fromIter=forNode.getFirstChild();
    Node fromObjExpr=fromIter.getNext();
    fromBody=fromObjExpr.getNext();
    JsForIn toForIn;
    if (fromIter.getType() == TokenStream.VAR) {
      Node fromIterVarName=fromIter.getFirstChild();
      String fromName=fromIterVarName.getString();
      JsName toName=getScope().declareName(fromName);
      toForIn=new JsForIn(toName);
      Node fromIterInit=fromIterVarName.getFirstChild();
      if (fromIterInit != null) {
        toForIn.setIterExpr(mapOptionalExpression(fromIterInit));
      }
    }
 else {
      toForIn=new JsForIn();
      toForIn.setIterExpr(mapExpression(fromIter));
    }
    toForIn.setObjExpr(mapExpression(fromObjExpr));
    JsStatement bodyStmt=mapStatement(fromBody);
    if (bodyStmt != null) {
      toForIn.setBody(bodyStmt);
    }
 else {
      toForIn.setBody(program.getEmptyStmt());
    }
    return toForIn;
  }
 else {
    JsFor toFor=new JsFor();
    JsNode initThingy=map(fromInit);
    if (initThingy != null) {
      if (initThingy instanceof JsVars) {
        toFor.setInitVars((JsVars)initThingy);
      }
 else {
        assert(initThingy instanceof JsExpression);
        toFor.setInitExpr((JsExpression)initThingy);
      }
    }
    toFor.setCondition(mapOptionalExpression(fromTest));
    toFor.setIncrExpr(mapOptionalExpression(fromIncr));
    JsStatement bodyStmt=mapStatement(fromBody);
    if (bodyStmt != null) {
      toFor.setBody(bodyStmt);
    }
 else {
      toFor.setBody(program.getEmptyStmt());
    }
    return toFor;
  }
}"
83009,"private JsExpression mapExpression(Node exprNode) throws JsParserException {
  JsNode<?> unknown=map(exprNode);
  if (unknown instanceof JsExpression) {
    return (JsExpression)unknown;
  }
 else {
    throw createParserException(""String_Node_Str"",exprNode);
  }
}","private JsExpression mapExpression(Node exprNode) throws JsParserException {
  JsNode unknown=map(exprNode);
  if (unknown instanceof JsExpression) {
    return (JsExpression)unknown;
  }
 else {
    throw createParserException(""String_Node_Str"",exprNode);
  }
}"
83010,"private JsStatement mapStatement(Node nodeStmt) throws JsParserException {
  JsNode<?> unknown=map(nodeStmt);
  if (unknown != null) {
    if (unknown instanceof JsStatement) {
      return (JsStatement)unknown;
    }
 else     if (unknown instanceof JsExpression) {
      return ((JsExpression)unknown).makeStmt();
    }
 else {
      throw createParserException(""String_Node_Str"",nodeStmt);
    }
  }
 else {
    return program.getEmptyStmt();
  }
}","private JsStatement mapStatement(Node nodeStmt) throws JsParserException {
  JsNode unknown=map(nodeStmt);
  if (unknown != null) {
    if (unknown instanceof JsStatement) {
      return (JsStatement)unknown;
    }
 else     if (unknown instanceof JsExpression) {
      return ((JsExpression)unknown).makeStmt();
    }
 else {
      throw createParserException(""String_Node_Str"",nodeStmt);
    }
  }
 else {
    return program.getEmptyStmt();
  }
}"
83011,"private JsExpression mapOptionalExpression(Node exprNode) throws JsParserException {
  JsNode<?> unknown=map(exprNode);
  if (unknown != null) {
    if (unknown instanceof JsExpression) {
      return (JsExpression)unknown;
    }
 else {
      throw createParserException(""String_Node_Str"",exprNode);
    }
  }
  return null;
}","private JsExpression mapOptionalExpression(Node exprNode) throws JsParserException {
  JsNode unknown=map(exprNode);
  if (unknown != null) {
    if (unknown instanceof JsExpression) {
      return (JsExpression)unknown;
    }
 else {
      throw createParserException(""String_Node_Str"",exprNode);
    }
  }
  return null;
}"
83012,"/** 
 * Produces a   {@link JsNameRef}.
 */
private JsNameRef mapAsPropertyNameRef(Node nameRefNode) throws JsParserException {
  JsNode<?> unknown=map(nameRefNode);
  if (unknown instanceof JsStringLiteral) {
    JsStringLiteral lit=(JsStringLiteral)unknown;
    String litName=lit.getValue();
    return new JsNameRef(litName);
  }
 else {
    throw createParserException(""String_Node_Str"",nameRefNode);
  }
}","/** 
 * Produces a   {@link JsNameRef}.
 */
private JsNameRef mapAsPropertyNameRef(Node nameRefNode) throws JsParserException {
  JsNode unknown=map(nameRefNode);
  if (unknown instanceof JsStringLiteral) {
    JsStringLiteral lit=(JsStringLiteral)unknown;
    String litName=lit.getValue();
    return new JsNameRef(litName);
  }
 else {
    throw createParserException(""String_Node_Str"",nameRefNode);
  }
}"
83013,"public final <T extends JsVisitable>T accept(T node){
  return doAccept(node);
}","public final <T extends JsVisitable>T accept(T node){
  return (T)doAccept(node);
}"
83014,"/** 
 * Returns an   {@link RPCRequest} that is built by decoding the contents of anencoded RPC request and optionally validating that type can handle the request. If the type parameter is not <code>null</code>, the implementation checks that the type is assignable to the {@link RemoteService} interface requested in the encoded request string.<p> If the serializationPolicyProvider parameter is not <code>null</code>, it is asked for a  {@link SerializationPolicy} to use to restrict the set oftypes that can be decoded from the request. If this parameter is <code>null</code>, then only subtypes of {@link com.google.gwt.user.client.rpc.IsSerializable IsSerializable} ortypes which have custom field serializers can be decoded. </p> <p> Invoking this method with <code>null</code> for the type parameter, <code>decodeRequest(encodedRequest, null)</code>, is equivalent to calling <code>decodeRequest(encodedRequest)</code>. </p>
 * @param encodedRequest a string that encodes the {@link RemoteService}interface, the service method, and the arguments to pass to the service method
 * @param type if not <code>null</code>, the implementation checks that thetype is assignable to the  {@link RemoteService} interface encodedin the encoded request string.
 * @param serializationPolicyProvider if not <code>null</code>, theimplementation asks this provider for a {@link SerializationPolicy} which will be used to restrict the setof types that can be decoded from this request
 * @return an {@link RPCRequest} instance
 * @throws NullPointerException if the encodedRequest is <code>null</code>
 * @throws IllegalArgumentException if the encodedRequest is an empty string
 * @throws IncompatibleRemoteServiceException if any of the followingconditions apply: <ul> <li>if the types in the encoded request cannot be deserialized</li> <li>if the  {@link ClassLoader} acquired from<code>Thread.currentThread().getContextClassLoader()</code> cannot load the service interface or any of the types specified in the encodedRequest</li> <li>the requested interface is not assignable to {@link RemoteService}</li> <li>the service method requested in the encodedRequest is not a member of the requested service interface</li> <li>the type parameter is not <code>null</code> and is not assignable to the requested   {@link RemoteService} interface</ul>
 */
public static RPCRequest decodeRequest(String encodedRequest,Class<? extends RemoteServiceServlet> type,SerializationPolicyProvider serializationPolicyProvider){
  if (encodedRequest == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (encodedRequest.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  try {
    ServerSerializationStreamReader streamReader=new ServerSerializationStreamReader(classLoader,serializationPolicyProvider);
    streamReader.prepareToRead(encodedRequest);
    String serviceIntfName=streamReader.readString();
    if (type != null) {
      if (!implementsInterface(type,serviceIntfName)) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str""+ printTypeName(type)+ ""String_Node_Str"");
      }
    }
    SerializationPolicy serializationPolicy=streamReader.getSerializationPolicy();
    Class<?> serviceIntf;
    try {
      serviceIntf=getClassFromSerializedName(serviceIntfName,classLoader);
      if (!RemoteService.class.isAssignableFrom(serviceIntf)) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + printTypeName(serviceIntf) + ""String_Node_Str"");
      }
    }
 catch (    ClassNotFoundException e) {
      throw new IncompatibleRemoteServiceException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str"",e);
    }
    String serviceMethodName=streamReader.readString();
    int paramCount=streamReader.readInt();
    Class<?>[] parameterTypes=new Class[paramCount];
    for (int i=0; i < parameterTypes.length; i++) {
      String paramClassName=streamReader.readString();
      try {
        parameterTypes[i]=getClassFromSerializedName(paramClassName,classLoader);
      }
 catch (      ClassNotFoundException e) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + i + ""String_Node_Str""+ paramClassName+ ""String_Node_Str"",e);
      }
    }
    Method method=findInterfaceMethod(serviceIntf,serviceMethodName,parameterTypes,true);
    if (method == null) {
      throw new IncompatibleRemoteServiceException(formatMethodNotFoundErrorMessage(serviceIntf,serviceMethodName,parameterTypes));
    }
    Object[] parameterValues=new Object[parameterTypes.length];
    for (int i=0; i < parameterValues.length; i++) {
      parameterValues[i]=streamReader.deserializeValue(parameterTypes[i]);
    }
    return new RPCRequest(method,parameterValues,serializationPolicy);
  }
 catch (  SerializationException ex) {
    throw new IncompatibleRemoteServiceException(ex.getMessage(),ex);
  }
}","/** 
 * Returns an   {@link RPCRequest} that is built by decoding the contents of anencoded RPC request and optionally validating that type can handle the request. If the type parameter is not <code>null</code>, the implementation checks that the type is assignable to the {@link RemoteService} interface requested in the encoded request string.<p> If the serializationPolicyProvider parameter is not <code>null</code>, it is asked for a  {@link SerializationPolicy} to use to restrict the set oftypes that can be decoded from the request. If this parameter is <code>null</code>, then only subtypes of {@link com.google.gwt.user.client.rpc.IsSerializable IsSerializable} ortypes which have custom field serializers can be decoded. </p> <p> Invoking this method with <code>null</code> for the type parameter, <code>decodeRequest(encodedRequest, null)</code>, is equivalent to calling <code>decodeRequest(encodedRequest)</code>. </p>
 * @param encodedRequest a string that encodes the {@link RemoteService}interface, the service method, and the arguments to pass to the service method
 * @param type if not <code>null</code>, the implementation checks that thetype is assignable to the  {@link RemoteService} interface encodedin the encoded request string.
 * @param serializationPolicyProvider if not <code>null</code>, theimplementation asks this provider for a {@link SerializationPolicy} which will be used to restrict the setof types that can be decoded from this request
 * @return an {@link RPCRequest} instance
 * @throws NullPointerException if the encodedRequest is <code>null</code>
 * @throws IllegalArgumentException if the encodedRequest is an empty string
 * @throws IncompatibleRemoteServiceException if any of the followingconditions apply: <ul> <li>if the types in the encoded request cannot be deserialized</li> <li>if the  {@link ClassLoader} acquired from<code>Thread.currentThread().getContextClassLoader()</code> cannot load the service interface or any of the types specified in the encodedRequest</li> <li>the requested interface is not assignable to {@link RemoteService}</li> <li>the service method requested in the encodedRequest is not a member of the requested service interface</li> <li>the type parameter is not <code>null</code> and is not assignable to the requested   {@link RemoteService} interface</ul>
 */
public static RPCRequest decodeRequest(String encodedRequest,Class type,SerializationPolicyProvider serializationPolicyProvider){
  if (encodedRequest == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (encodedRequest.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  try {
    ServerSerializationStreamReader streamReader=new ServerSerializationStreamReader(classLoader,serializationPolicyProvider);
    streamReader.prepareToRead(encodedRequest);
    String serviceIntfName=streamReader.readString();
    if (type != null) {
      if (!implementsInterface(type,serviceIntfName)) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str""+ printTypeName(type)+ ""String_Node_Str"");
      }
    }
    SerializationPolicy serializationPolicy=streamReader.getSerializationPolicy();
    Class<?> serviceIntf;
    try {
      serviceIntf=getClassFromSerializedName(serviceIntfName,classLoader);
      if (!RemoteService.class.isAssignableFrom(serviceIntf)) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + printTypeName(serviceIntf) + ""String_Node_Str"");
      }
    }
 catch (    ClassNotFoundException e) {
      throw new IncompatibleRemoteServiceException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str"",e);
    }
    String serviceMethodName=streamReader.readString();
    int paramCount=streamReader.readInt();
    Class<?>[] parameterTypes=new Class[paramCount];
    for (int i=0; i < parameterTypes.length; i++) {
      String paramClassName=streamReader.readString();
      try {
        parameterTypes[i]=getClassFromSerializedName(paramClassName,classLoader);
      }
 catch (      ClassNotFoundException e) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + i + ""String_Node_Str""+ paramClassName+ ""String_Node_Str"",e);
      }
    }
    Method method=findInterfaceMethod(serviceIntf,serviceMethodName,parameterTypes,true);
    if (method == null) {
      throw new IncompatibleRemoteServiceException(formatMethodNotFoundErrorMessage(serviceIntf,serviceMethodName,parameterTypes));
    }
    Object[] parameterValues=new Object[parameterTypes.length];
    for (int i=0; i < parameterValues.length; i++) {
      parameterValues[i]=streamReader.deserializeValue(parameterTypes[i]);
    }
    return new RPCRequest(method,parameterValues,serializationPolicy);
  }
 catch (  SerializationException ex) {
    throw new IncompatibleRemoteServiceException(ex.getMessage(),ex);
  }
}"
83015,"public static int deepHashCode(Object[] a){
  if (a == null) {
    return 0;
  }
  int hashCode=1;
  for (int i=0, n=a.length; i < n; ++i) {
    Object obj=a[i];
    int hash;
    if (obj instanceof Object[]) {
      hash=deepHashCode((Object[])a);
    }
 else     if (obj instanceof boolean[]) {
      hash=hashCode((boolean[])obj);
    }
 else     if (obj instanceof byte[]) {
      hash=hashCode((byte[])obj);
    }
 else     if (obj instanceof char[]) {
      hash=hashCode((char[])obj);
    }
 else     if (obj instanceof short[]) {
      hash=hashCode((short[])obj);
    }
 else     if (obj instanceof int[]) {
      hash=hashCode((int[])obj);
    }
 else     if (obj instanceof long[]) {
      hash=hashCode((long[])obj);
    }
 else     if (obj instanceof float[]) {
      hash=hashCode((float[])obj);
    }
 else     if (obj instanceof double[]) {
      hash=hashCode((double[])obj);
    }
 else {
      hash=obj.hashCode();
    }
    hashCode=(31 * hashCode + hash) | 0;
  }
  return hashCode;
}","public static int deepHashCode(Object[] a){
  if (a == null) {
    return 0;
  }
  int hashCode=1;
  for (int i=0, n=a.length; i < n; ++i) {
    Object obj=a[i];
    int hash;
    if (obj instanceof Object[]) {
      hash=deepHashCode((Object[])obj);
    }
 else     if (obj instanceof boolean[]) {
      hash=hashCode((boolean[])obj);
    }
 else     if (obj instanceof byte[]) {
      hash=hashCode((byte[])obj);
    }
 else     if (obj instanceof char[]) {
      hash=hashCode((char[])obj);
    }
 else     if (obj instanceof short[]) {
      hash=hashCode((short[])obj);
    }
 else     if (obj instanceof int[]) {
      hash=hashCode((int[])obj);
    }
 else     if (obj instanceof long[]) {
      hash=hashCode((long[])obj);
    }
 else     if (obj instanceof float[]) {
      hash=hashCode((float[])obj);
    }
 else     if (obj instanceof double[]) {
      hash=hashCode((double[])obj);
    }
 else {
      hash=obj.hashCode();
    }
    hashCode=(31 * hashCode + hash) | 0;
  }
  return hashCode;
}"
83016,"private void doGetModule(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,RequestParts parts) throws IOException {
  if (""String_Node_Str"".equalsIgnoreCase(parts.moduleName)) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"");
    return;
  }
  String msg=""String_Node_Str"" + parts.moduleName + ""String_Node_Str"";
  logger=logger.branch(TreeLogger.TRACE,msg,null);
  try {
    getModuleDef(logger,parts.moduleName);
  }
 catch (  UnableToCompleteException e) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + parts.moduleName + ""String_Node_Str"");
    return;
  }
  response.setContentType(""String_Node_Str"");
  PrintWriter writer=response.getWriter();
  writer.println(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  writer.print(parts.moduleName);
  writer.println(""String_Node_Str"");
  Map<String,String[]> params=request.getParameterMap();
  for (  Map.Entry<String,String[]> entry : params.entrySet()) {
    String[] values=entry.getValue();
    if (values.length > 0) {
      writer.print(""String_Node_Str"");
      writer.print(entry.getKey());
      writer.print(""String_Node_Str"");
      writer.print(values[values.length - 1]);
      writer.println(""String_Node_Str"");
    }
  }
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"" + ""String_Node_Str"");
  writer.println(""String_Node_Str"");
}","private void doGetModule(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,RequestParts parts) throws IOException {
  if (""String_Node_Str"".equalsIgnoreCase(parts.moduleName)) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"");
    return;
  }
  String msg=""String_Node_Str"" + parts.moduleName + ""String_Node_Str"";
  logger=logger.branch(TreeLogger.TRACE,msg,null);
  try {
    getModuleDef(logger,parts.moduleName);
  }
 catch (  UnableToCompleteException e) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + Util.escapeXml(parts.moduleName) + ""String_Node_Str"");
    return;
  }
  response.setContentType(""String_Node_Str"");
  PrintWriter writer=response.getWriter();
  writer.println(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  writer.print(parts.moduleName);
  writer.println(""String_Node_Str"");
  Map<String,String[]> params=request.getParameterMap();
  for (  Map.Entry<String,String[]> entry : params.entrySet()) {
    String[] values=entry.getValue();
    if (values.length > 0) {
      writer.print(""String_Node_Str"");
      writer.print(entry.getKey());
      writer.print(""String_Node_Str"");
      writer.print(values[values.length - 1]);
      writer.println(""String_Node_Str"");
    }
  }
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"" + ""String_Node_Str"");
  writer.println(""String_Node_Str"");
}"
83017,"/** 
 * Escapes '&', '<', '>', '""', and '\'' to their XML entity equivalents.
 */
private static String escapeXml(String unescaped){
  String escaped=unescaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  escaped=escaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  escaped=escaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  escaped=escaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  escaped=escaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return escaped;
}","/** 
 * Escapes '&', '<', '>', '""', and '\'' to their XML entity equivalents.
 */
public static String escapeXml(String unescaped){
  String escaped=unescaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  escaped=escaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  escaped=escaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  escaped=escaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  escaped=escaped.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return escaped;
}"
83018,"private GenerateJavaScriptAST(JProgram program,JsProgram jsProgram,boolean obfuscate,boolean prettyNames){
  this.program=program;
  typeOracle=program.typeOracle;
  this.jsProgram=jsProgram;
  topScope=jsProgram.getScope();
  objectScope=jsProgram.getObjectScope();
  interfaceScope=new JsScope(objectScope,""String_Node_Str"");
  this.obfuscate=obfuscate;
  this.prettyNames=prettyNames;
  specialObfuscatedTypes.add(program.getIndexedType(""String_Node_Str""));
  specialObfuscatedTypes.add(program.getIndexedType(""String_Node_Str""));
  specialObfuscatedTypes.add(program.getTypeJavaLangObject());
  specialObfuscatedTypes.add(program.getTypeJavaLangString());
  specialObfuscatedTypes.add(program.getIndexedType(""String_Node_Str""));
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
}","private GenerateJavaScriptAST(JProgram program,JsProgram jsProgram,boolean obfuscate,boolean prettyNames){
  this.program=program;
  typeOracle=program.typeOracle;
  this.jsProgram=jsProgram;
  topScope=jsProgram.getScope();
  objectScope=jsProgram.getObjectScope();
  interfaceScope=new JsScope(objectScope,""String_Node_Str"");
  this.obfuscate=obfuscate;
  this.prettyNames=prettyNames;
  specialObfuscatedTypes.add(program.getIndexedType(""String_Node_Str""));
  specialObfuscatedTypes.add(program.getIndexedType(""String_Node_Str""));
  specialObfuscatedTypes.add(program.getTypeJavaLangObject());
  specialObfuscatedTypes.add(program.getTypeJavaLangString());
  specialObfuscatedTypes.add(program.getIndexedType(""String_Node_Str""));
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
}"
83019,"public char[] getMainTypeName(){
  String mainTypeName=cup.getLocation();
  int nameStart=mainTypeName.lastIndexOf(File.separatorChar);
  if (nameStart != -1) {
    mainTypeName=mainTypeName.substring(nameStart + 1);
  }
  int ext=mainTypeName.lastIndexOf(""String_Node_Str"");
  if (ext != -1) {
    return mainTypeName.substring(0,ext).toCharArray();
  }
  return null;
}","/** 
 * This method is supposed to return the simple class name for this compilation unit. Examples of simple class names would be ""String"", or ""ArrayList"". JDT allows this method to return null in the cases where this compilation unit is not a package-info class.
 */
public char[] getMainTypeName(){
  String mainTypeName=cup.getLocation();
  int ext=mainTypeName.lastIndexOf(""String_Node_Str"");
  if (ext == -1) {
    return null;
  }
  mainTypeName=mainTypeName.substring(0,ext);
  int nameStart=mainTypeName.lastIndexOf(File.separatorChar);
  if (nameStart == -1) {
    nameStart=mainTypeName.lastIndexOf('/');
  }
  mainTypeName=mainTypeName.substring(nameStart + 1);
  return mainTypeName.toCharArray();
}"
83020,"/** 
 * For a given method(and method binding), recursively try to find all methods that it overrides/implements.
 */
private void tryFindUpRefsRecursive(JMethod method,MethodBinding binding,ReferenceBinding searchThisType){
  if (binding.declaringClass != searchThisType) {
    MethodBinding result=searchThisType.getExactMethod(binding.selector,binding.parameters,null);
    if (result != null) {
      if (areParametersIdentical(binding,result)) {
        JMethod upRef=(JMethod)typeMap.get(result);
        if (!method.overrides.contains(upRef)) {
          method.overrides.add(upRef);
        }
      }
    }
  }
  if (searchThisType.superclass() != null) {
    tryFindUpRefsRecursive(method,binding,searchThisType.superclass());
  }
  if (searchThisType.superInterfaces() != null) {
    for (int i=0; i < searchThisType.superInterfaces().length; i++) {
      ReferenceBinding intf=searchThisType.superInterfaces()[i];
      tryFindUpRefsRecursive(method,binding,intf);
    }
  }
}","/** 
 * For a given method(and method binding), recursively try to find all methods that it overrides/implements.
 */
private void tryFindUpRefsRecursive(JMethod method,MethodBinding binding,ReferenceBinding searchThisType){
  if (binding.declaringClass != searchThisType) {
    for (    MethodBinding tryMethod : searchThisType.getMethods(binding.selector)) {
      if (binding.areParameterErasuresEqual(tryMethod)) {
        JMethod upRef=(JMethod)typeMap.get(tryMethod);
        if (!method.overrides.contains(upRef)) {
          method.overrides.add(upRef);
          break;
        }
      }
    }
  }
  if (searchThisType.superclass() != null) {
    tryFindUpRefsRecursive(method,binding,searchThisType.superclass());
  }
  if (searchThisType.superInterfaces() != null) {
    for (int i=0; i < searchThisType.superInterfaces().length; i++) {
      ReferenceBinding intf=searchThisType.superInterfaces()[i];
      tryFindUpRefsRecursive(method,binding,intf);
    }
  }
}"
83021,"/** 
 * Called when an asynchronous call completes successfully. It is always safe to downcast the parameter (of type <code>Object</code>) to the return type of the original method for which this is a callback. Note that if the return type of the synchronous service interface method is a primitive then the parameter will be the boxed version of the primitive (for example, an <code>int</code> return type becomes an   {@link Integer}.
 */
void onSuccess(Object result);","/** 
 * Called when an asynchronous call completes successfully. It is always safe to downcast the parameter (of type <code>Object</code>) to the return type of the original method for which this is a callback. Note that if the return type of the synchronous service interface method is a primitive then the parameter will be the boxed version of the primitive (for example, an <code>int</code> return type becomes an   {@link Integer}.
 */
void onSuccess(T result);"
83022,"public Iterator<T> iterator(){
  return listIterator();
}","public Iterator<T> iterator(){
  final Iterator<? extends T> it=set.iterator();
  return new Iterator<T>(){
    public boolean hasNext(){
      return it.hasNext();
    }
    public T next(){
      return it.next();
    }
    public void remove(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
  }
;
}"
83023,"public static <T>Set<T> unmodifiableSet(Set<? extends T> set){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public static <T>Set<T> unmodifiableSet(final Set<? extends T> set){
  return new Set<T>(){
    public boolean add(    T o){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public boolean addAll(    Collection<? extends T> c){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public void clear(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public boolean contains(    Object o){
      return set.contains(o);
    }
    public boolean containsAll(    Collection<?> c){
      return set.containsAll(c);
    }
    public boolean isEmpty(){
      return set.isEmpty();
    }
    public Iterator<T> iterator(){
      final Iterator<? extends T> it=set.iterator();
      return new Iterator<T>(){
        public boolean hasNext(){
          return it.hasNext();
        }
        public T next(){
          return it.next();
        }
        public void remove(){
          throw new UnsupportedOperationException(""String_Node_Str"");
        }
      }
;
    }
    public boolean remove(    Object o){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public boolean removeAll(    Collection<?> c){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public boolean retainAll(    Collection<?> c){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public int size(){
      return set.size();
    }
    public Object[] toArray(){
      return set.toArray();
    }
    public <OT>OT[] toArray(    OT[] a){
      return set.toArray(a);
    }
  }
;
}"
83024,"public T get(int index){
  return list.get(index);
}","public V get(Object key){
  return map.get(key);
}"
83025,"public <OT>OT[] toArray(OT[] array){
  return list.toArray(array);
}","public <OT>OT[] toArray(OT[] a){
  return set.toArray(a);
}"
83026,"public boolean containsAll(Collection<?> c){
  return list.containsAll(c);
}","public boolean containsAll(Collection<?> c){
  return set.containsAll(c);
}"
83027,"public boolean isEmpty(){
  return list.isEmpty();
}","public boolean isEmpty(){
  return set.isEmpty();
}"
83028,"public static <K,V>Map<K,V> unmodifiableMap(Map<? extends K,? extends V> map){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public static <K,V>Map<K,V> unmodifiableMap(final Map<? extends K,? extends V> map){
  return new Map<K,V>(){
    public void clear(){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public boolean containsKey(    Object key){
      return map.containsKey(key);
    }
    public boolean containsValue(    Object value){
      return map.containsValue(value);
    }
    public Set<Map.Entry<K,V>> entrySet(){
      Set<? extends Map.Entry<? extends K,? extends V>> entrySet=map.entrySet();
      return (Set<Map.Entry<K,V>>)entrySet;
    }
    public V get(    Object key){
      return map.get(key);
    }
    public boolean isEmpty(){
      return map.isEmpty();
    }
    public Set<K> keySet(){
      return (Set<K>)map.keySet();
    }
    public V put(    K key,    V value){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public void putAll(    Map<? extends K,? extends V> t){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public V remove(    Object key){
      throw new UnsupportedOperationException(""String_Node_Str"");
    }
    public int size(){
      return map.size();
    }
    public Collection<V> values(){
      return (Collection<V>)map.values();
    }
  }
;
}"
83029,"public boolean contains(Object o){
  return list.contains(o);
}","public boolean contains(Object o){
  return set.contains(o);
}"
83030,"public int size(){
  return list.size();
}","public int size(){
  return set.size();
}"
83031,"public boolean addAll(int index,Collection<? extends T> c){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public boolean addAll(Collection<? extends T> c){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
83032,"public boolean remove(Widget w){
  Element td=DOM.getParent(w.getElement());
  Element tr=DOM.getParent(td);
  boolean removed=super.remove(w);
  if (removed) {
    DOM.removeChild(getBody(),tr);
  }
  return removed;
}","public boolean remove(Widget w){
  Element td=DOM.getParent(w.getElement());
  boolean removed=super.remove(w);
  if (removed) {
    DOM.removeChild(getBody(),DOM.getParent(td));
  }
  return removed;
}"
83033,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new AbsolutePanel());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new AbsolutePanel());
}"
83034,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new DisclosurePanel());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new DisclosurePanel());
}"
83035,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new DockPanel(),new Adder());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new DockPanel(),new Adder());
}"
83036,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new FlowPanel());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new FlowPanel());
}"
83037,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new FocusPanel());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new FocusPanel());
}"
83038,"public void testAttachDetachOrder(HasWidgets container,WidgetAdder adder){
  HasWidgetsTester.testAttachDetachOrder(new FormPanel());
}","public void testAttachDetachOrder(HasWidgets container,WidgetAdder adder){
  HasWidgetsTester.testAll(new FormPanel());
}"
83039,"public void testAttachDetachOrder(){
  HTMLPanel p=new HTMLPanel(""String_Node_Str"");
  HasWidgetsTester.testAttachDetachOrder(p,new Adder());
}","public void testAttachDetachOrder(){
  HTMLPanel p=new HTMLPanel(""String_Node_Str"");
  HasWidgetsTester.testAll(p,new Adder());
}"
83040,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(getTable(1,1),new Adder());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(getTable(1,1),new Adder());
}"
83041,"/** 
 * Tests attach and detach order, assuming that the container's  {@link HasWidgets#add(Widget)} method does not throw{@link UnsupportedOperationException}.
 * @param test
 * @param container
 * @see #testAttachDetachOrder(TestCase,HasWidgets,com.google.gwt.user.client.ui.HasWidgetsTester.WidgetAdder)
 */
static void testAttachDetachOrder(HasWidgets container){
  testAttachDetachOrder(container,new DefaultWidgetAdder());
}","/** 
 * Ensures that children are attached and detached in the proper order. This must result in the child's onLoad() method being called just *after* its element is attached to the DOM, and its onUnload method being called just *before* its element is detached from the DOM.
 */
static void testAttachDetachOrder(HasWidgets container,WidgetAdder adder){
  Assert.assertTrue(container instanceof Widget);
  RootPanel.get().add((Widget)container);
  TestWidget widget=new TestWidget();
  adder.addChild(container,widget);
  container.remove(widget);
  Assert.assertFalse(widget.isAttached());
  Assert.assertFalse(DOM.isOrHasChild(RootPanel.getBodyElement(),widget.getElement()));
}"
83042,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new HorizontalPanel());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new HorizontalPanel());
}"
83043,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new ScrollPanel());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new ScrollPanel());
}"
83044,"public void testVerticalAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new VerticalSplitPanel());
}","public void testVerticalAttachDetachOrder(){
  HasWidgetsTester.testAll(new VerticalSplitPanel());
}"
83045,"public void testHorizontalAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new HorizontalSplitPanel());
}","public void testHorizontalAttachDetachOrder(){
  HasWidgetsTester.testAll(new HorizontalSplitPanel());
}"
83046,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new StackPanel(),new Adder());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new StackPanel(),new Adder());
}"
83047,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new TabPanel(),new Adder());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new TabPanel(),new Adder());
}"
83048,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new Tree(),new Adder());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new Tree(),new Adder());
}"
83049,"public void testAttachDetachOrder(){
  HasWidgetsTester.testAttachDetachOrder(new VerticalPanel());
}","public void testAttachDetachOrder(){
  HasWidgetsTester.testAll(new VerticalPanel());
}"
83050,"private HttpServlet tryGetOrLoadServlet(TreeLogger logger,String className){
synchronized (loadedServletsByClassName) {
    HttpServlet servlet=(HttpServlet)loadedServletsByClassName.get(className);
    if (servlet != null) {
      return servlet;
    }
    Throwable caught=null;
    try {
      Class servletClass=Class.forName(className);
      Object newInstance=servletClass.newInstance();
      if (!(newInstance instanceof HttpServlet)) {
        logger.log(TreeLogger.ERROR,""String_Node_Str"" + className + ""String_Node_Str"",null);
        return null;
      }
      servlet=(HttpServlet)newInstance;
      servlet.init(getServletConfig());
      loadedServletsByClassName.put(className,servlet);
      return servlet;
    }
 catch (    ClassNotFoundException e) {
      caught=e;
    }
catch (    InstantiationException e) {
      caught=e;
    }
catch (    IllegalAccessException e) {
      caught=e;
    }
catch (    ServletException e) {
      caught=e;
    }
    String msg=""String_Node_Str"" + className + ""String_Node_Str"";
    logger.log(TreeLogger.ERROR,msg,caught);
    return null;
  }
}","private HttpServlet tryGetOrLoadServlet(TreeLogger logger,ModuleDef moduleDef,String className){
synchronized (loadedServletsByModuleAndClassName) {
    String moduleAndClassName=moduleDef.getName() + ""String_Node_Str"" + className;
    HttpServlet servlet=(HttpServlet)loadedServletsByModuleAndClassName.get(moduleAndClassName);
    if (servlet != null) {
      return servlet;
    }
    Throwable caught=null;
    try {
      Class servletClass=Class.forName(className);
      Object newInstance=servletClass.newInstance();
      if (!(newInstance instanceof HttpServlet)) {
        logger.log(TreeLogger.ERROR,""String_Node_Str"" + className + ""String_Node_Str"",null);
        return null;
      }
      servlet=(HttpServlet)newInstance;
      ServletContext context=new HostedModeServletContextProxy(getServletContext(),moduleDef,getOutputDir());
      ServletConfig config=new HostedModeServletConfigProxy(getServletConfig(),context);
      servlet.init(config);
      loadedServletsByModuleAndClassName.put(moduleAndClassName,servlet);
      return servlet;
    }
 catch (    ClassNotFoundException e) {
      caught=e;
    }
catch (    InstantiationException e) {
      caught=e;
    }
catch (    IllegalAccessException e) {
      caught=e;
    }
catch (    ServletException e) {
      caught=e;
    }
    String msg=""String_Node_Str"" + className + ""String_Node_Str"";
    logger.log(TreeLogger.ERROR,msg,caught);
    return null;
  }
}"
83051,"protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  TreeLogger logger=getLogger();
  int id=allocateRequestId();
  if (logger.isLoggable(TreeLogger.TRACE)) {
    StringBuffer url=request.getRequestURL();
    logger=logger.branch(TreeLogger.TRACE,""String_Node_Str"" + id + ""String_Node_Str""+ url,null);
  }
  String servletClassName=null;
  try {
    RequestParts parts=new RequestParts(request);
    ModuleDef moduleDef=(ModuleDef)loadedModulesByName.get(parts.moduleName);
    if (moduleDef != null) {
      String servletPath=""String_Node_Str"" + parts.partialPath;
      servletClassName=moduleDef.findServletForPath(servletPath);
    }
 else {
    }
  }
 catch (  UnableToCompleteException e) {
  }
  if (servletClassName == null) {
    String path=request.getPathInfo();
    ModuleDef moduleDef=(ModuleDef)modulesByServletPath.get(path);
    if (moduleDef != null) {
      servletClassName=moduleDef.findServletForPath(path);
      if (servletClassName != null) {
        TreeLogger branch=logger.branch(TreeLogger.WARN,""String_Node_Str"",null);
        branch.log(TreeLogger.WARN,""String_Node_Str"" + path,null);
        branch.log(TreeLogger.WARN,""String_Node_Str"" + moduleDef.getName() + path,null);
        branch.log(TreeLogger.WARN,""String_Node_Str"",null);
      }
    }
 else {
    }
  }
  if (servletClassName != null) {
    HttpServlet delegatee=tryGetOrLoadServlet(logger,servletClassName);
    if (delegatee == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
      sendErrorResponse(response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + servletClassName + ""String_Node_Str"");
      return;
    }
    delegatee.service(request,response);
  }
 else {
    super.service(request,response);
  }
}","protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  TreeLogger logger=getLogger();
  int id=allocateRequestId();
  if (logger.isLoggable(TreeLogger.TRACE)) {
    StringBuffer url=request.getRequestURL();
    logger=logger.branch(TreeLogger.TRACE,""String_Node_Str"" + id + ""String_Node_Str""+ url,null);
  }
  String servletClassName=null;
  ModuleDef moduleDef=null;
  try {
    RequestParts parts=new RequestParts(request);
    moduleDef=(ModuleDef)loadedModulesByName.get(parts.moduleName);
    if (moduleDef != null) {
      String servletPath=""String_Node_Str"" + parts.partialPath;
      servletClassName=moduleDef.findServletForPath(servletPath);
    }
 else {
    }
  }
 catch (  UnableToCompleteException e) {
  }
  if (servletClassName == null) {
    String path=request.getPathInfo();
    moduleDef=(ModuleDef)modulesByServletPath.get(path);
    if (moduleDef != null) {
      servletClassName=moduleDef.findServletForPath(path);
      if (servletClassName != null) {
        TreeLogger branch=logger.branch(TreeLogger.WARN,""String_Node_Str"",null);
        branch.log(TreeLogger.WARN,""String_Node_Str"" + path,null);
        branch.log(TreeLogger.WARN,""String_Node_Str"" + moduleDef.getName() + path,null);
        branch.log(TreeLogger.WARN,""String_Node_Str"",null);
      }
    }
 else {
    }
  }
  if (servletClassName != null) {
    HttpServlet delegatee=tryGetOrLoadServlet(logger,moduleDef,servletClassName);
    if (delegatee == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
      sendErrorResponse(response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,""String_Node_Str"" + servletClassName + ""String_Node_Str"");
      return;
    }
    delegatee.service(request,response);
  }
 else {
    super.service(request,response);
  }
}"
83052,"protected String getTextImpl(){
  return getText(elem);
}",protected native String getTextImpl();
83053,"protected void setTextImpl(String text){
  setText(elem,text);
}",protected native void setTextImpl(String text);
83054,"public void setFontSize(FontSize fontSize){
  int number=fontSize.getNumber();
  if ((number >= 0) && (number <= 7)) {
    execCommand(""String_Node_Str"",sizeNumberCSSValues[number]);
    return;
  }
}","public void setFontSize(FontSize fontSize){
  int number=fontSize.getNumber();
  if ((number >= 0) && (number <= 7)) {
    execCommand(""String_Node_Str"",sizeNumberCSSValues[number]);
  }
}"
83055,"public String getTypeHash() throws UnableToCompleteException {
  if (lazyHash == null) {
    char[] source=cup.getSource();
    int length=declEnd - declStart + 1;
    String s=new String(source,declStart,length);
    try {
      lazyHash=computeStrongName(s.getBytes(""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException e) {
      throw new UnableToCompleteException();
    }
  }
  return lazyHash;
}","public String getTypeHash() throws UnableToCompleteException {
  if (lazyHash == null) {
    char[] source=cup.getSource();
    int length=declEnd - declStart + 1;
    String s=new String(source,declStart,length);
    try {
      lazyHash=Util.computeStrongName(s.getBytes(Util.DEFAULT_ENCODING));
    }
 catch (    UnsupportedEncodingException e) {
      throw new UnableToCompleteException();
    }
  }
  return lazyHash;
}"
83056,"/** 
 * Computes the MD5 hash for the specified byte array.
 * @return a big fat string encoding of the MD5 for the content, suitablyformatted for use as a file name
 */
public static String computeStrongName(byte[] content){
  MessageDigest md5;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  for (int i=0; i < content.length; i++) {
    md5.update(content[i]);
  }
  byte[] hash=md5.digest();
  char[] name=new char[2 * hash.length];
  int j=0;
  for (int i=0; i < hash.length; i++) {
    name[j++]=HEX_CHARS[(hash[i] & 0xF0) >> 4];
    name[j++]=HEX_CHARS[hash[i] & 0x0F];
  }
  return new String(name);
}","/** 
 * Computes the MD5 hash for the specified byte array.
 * @return a big fat string encoding of the MD5 for the content, suitablyformatted for use as a file name
 */
public static String computeStrongName(byte[] content){
  MessageDigest md5;
  try {
    md5=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  md5.update(content);
  return toHexString(md5.digest());
}"
83057,"/** 
 * This method invokes an inaccessable method in another class.
 * @param targetClass the class owning the method
 * @param methodName the name of the method
 * @param argumentTypes the types of the parameters to the method call
 * @param target the receiver of the method call
 * @param arguments the parameters to the method call
 */
public static void invokeInaccessableMethod(Class targetClass,String methodName,Class[] argumentTypes,TypeOracle target,Object[] arguments){
  String failedReflectErrMsg=""String_Node_Str"" + targetClass.getName() + ""String_Node_Str""+ methodName+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    Method m=targetClass.getDeclaredMethod(methodName,argumentTypes);
    m.setAccessible(true);
    m.invoke(target,arguments);
  }
 catch (  NoSuchMethodException e) {
    throw new RuntimeException(failedReflectErrMsg,e);
  }
catch (  IllegalArgumentException e) {
    throw new RuntimeException(failedReflectErrMsg,e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(failedReflectErrMsg,e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(failedReflectErrMsg,e);
  }
}","/** 
 * This method invokes an inaccessible method in another class.
 * @param targetClass the class owning the method
 * @param methodName the name of the method
 * @param argumentTypes the types of the parameters to the method call
 * @param target the receiver of the method call
 * @param arguments the parameters to the method call
 */
public static void invokeInaccessableMethod(Class targetClass,String methodName,Class[] argumentTypes,TypeOracle target,Object[] arguments){
  String failedReflectErrMsg=""String_Node_Str"" + targetClass.getName() + ""String_Node_Str""+ methodName+ ""String_Node_Str""+ ""String_Node_Str"";
  try {
    Method m=targetClass.getDeclaredMethod(methodName,argumentTypes);
    m.setAccessible(true);
    m.invoke(target,arguments);
  }
 catch (  NoSuchMethodException e) {
    throw new RuntimeException(failedReflectErrMsg,e);
  }
catch (  IllegalArgumentException e) {
    throw new RuntimeException(failedReflectErrMsg,e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(failedReflectErrMsg,e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(failedReflectErrMsg,e);
  }
}"
83058,"private String writeSerializationPolicyFile(TreeLogger logger,GeneratorContext ctx,SerializableTypeOracle sto) throws UnableToCompleteException {
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    OutputStreamWriter osw=new OutputStreamWriter(baos,SerializationPolicyLoader.SERIALIZATION_POLICY_FILE_ENCODING);
    PrintWriter pw=new PrintWriter(osw);
    JType[] serializableTypes=sto.getSerializableTypes();
    for (int i=0; i < serializableTypes.length; ++i) {
      JType serializableType=serializableTypes[i];
      String binaryTypeName=sto.getSerializedTypeName(serializableType);
      boolean maybeInstantiated=sto.maybeInstantiated(serializableType);
      pw.println(binaryTypeName + ""String_Node_Str"" + Boolean.toString(maybeInstantiated));
    }
    pw.close();
    byte[] serializationPolicyFileContents=baos.toByteArray();
    MessageDigest md5=MessageDigest.getInstance(""String_Node_Str"");
    md5.update(serializationPolicyFileContents);
    String serializationPolicyName=Util.toHexString(md5.digest());
    String serializationPolicyFileName=SerializationPolicyLoader.getSerializationPolicyFileName(serializationPolicyName);
    OutputStream os=ctx.tryCreateResource(logger,serializationPolicyFileName);
    if (os != null) {
      os.write(serializationPolicyFileContents);
      ctx.commitResource(logger,os);
    }
 else {
      logger.log(TreeLogger.TRACE,""String_Node_Str"" + serviceIntf.getQualifiedSourceName() + ""String_Node_Str"",null);
    }
    return serializationPolicyName;
  }
 catch (  NoSuchAlgorithmException e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
    throw new UnableToCompleteException();
  }
catch (  UnsupportedEncodingException e) {
    logger.log(TreeLogger.ERROR,SerializationPolicyLoader.SERIALIZATION_POLICY_FILE_ENCODING + ""String_Node_Str"",e);
    throw new UnableToCompleteException();
  }
catch (  IOException e) {
    logger.log(TreeLogger.ERROR,null,e);
    throw new UnableToCompleteException();
  }
}","private String writeSerializationPolicyFile(TreeLogger logger,GeneratorContext ctx,SerializableTypeOracle sto) throws UnableToCompleteException {
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    OutputStreamWriter osw=new OutputStreamWriter(baos,SerializationPolicyLoader.SERIALIZATION_POLICY_FILE_ENCODING);
    PrintWriter pw=new PrintWriter(osw);
    JType[] serializableTypes=sto.getSerializableTypes();
    for (int i=0; i < serializableTypes.length; ++i) {
      JType serializableType=serializableTypes[i];
      String binaryTypeName=sto.getSerializedTypeName(serializableType);
      boolean maybeInstantiated=sto.maybeInstantiated(serializableType);
      pw.println(binaryTypeName + ""String_Node_Str"" + Boolean.toString(maybeInstantiated));
    }
    pw.close();
    byte[] serializationPolicyFileContents=baos.toByteArray();
    String serializationPolicyName=Util.computeStrongName(serializationPolicyFileContents);
    String serializationPolicyFileName=SerializationPolicyLoader.getSerializationPolicyFileName(serializationPolicyName);
    OutputStream os=ctx.tryCreateResource(logger,serializationPolicyFileName);
    if (os != null) {
      os.write(serializationPolicyFileContents);
      ctx.commitResource(logger,os);
    }
 else {
      logger.log(TreeLogger.TRACE,""String_Node_Str"" + serviceIntf.getQualifiedSourceName() + ""String_Node_Str"",null);
    }
    return serializationPolicyName;
  }
 catch (  UnsupportedEncodingException e) {
    logger.log(TreeLogger.ERROR,SerializationPolicyLoader.SERIALIZATION_POLICY_FILE_ENCODING + ""String_Node_Str"",e);
    throw new UnableToCompleteException();
  }
catch (  IOException e) {
    logger.log(TreeLogger.ERROR,null,e);
    throw new UnableToCompleteException();
  }
}"
83059,"private ImageRect addImage(TreeLogger logger,String imageName) throws UnableToCompleteException {
  logger=logger.branch(TreeLogger.TRACE,""String_Node_Str"" + imageName + ""String_Node_Str"",null);
  BufferedImage image=null;
  try {
    URL imageUrl=getClass().getClassLoader().getResource(imageName);
    if (imageUrl == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    InputStream is=imageUrl.openStream();
    BufferedInputStream bis=new BufferedInputStream(is);
    byte imgByte;
    while ((imgByte=(byte)bis.read()) != -1) {
      md5.update(imgByte);
    }
    is.close();
    image=ImageIO.read(imageUrl);
    if (image == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
    throw new UnableToCompleteException();
  }
  ImageRect imageRect=new ImageRect(image);
  orderedImageRects.add(imageRect);
  return imageRect;
}","private ImageRect addImage(TreeLogger logger,String imageName) throws UnableToCompleteException {
  logger=logger.branch(TreeLogger.TRACE,""String_Node_Str"" + imageName + ""String_Node_Str"",null);
  BufferedImage image=null;
  try {
    URL imageUrl=getClass().getClassLoader().getResource(imageName);
    if (imageUrl == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    byte[] imgBytes=Util.readURLAsBytes(imageUrl);
    md5.update(imgBytes);
    image=ImageIO.read(new ByteArrayInputStream(imgBytes));
    if (image == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
    throw new UnableToCompleteException();
  }
  ImageRect imageRect=new ImageRect(image);
  orderedImageRects.add(imageRect);
  return imageRect;
}"
83060,"public String writeBundledImage(TreeLogger logger,GeneratorContext context) throws UnableToCompleteException {
  int nextLeft=0;
  int maxHeight=0;
  for (Iterator iter=orderedImageRects.iterator(); iter.hasNext(); ) {
    ImageRect imageRect=(ImageRect)iter.next();
    imageRect.left=nextLeft;
    nextLeft+=imageRect.width;
    if (imageRect.height > maxHeight) {
      maxHeight=imageRect.height;
    }
  }
  BufferedImage bundledImage=new BufferedImage(nextLeft,maxHeight,BufferedImage.TYPE_INT_ARGB_PRE);
  Graphics2D g2d=bundledImage.createGraphics();
  for (Iterator iter=orderedImageRects.iterator(); iter.hasNext(); ) {
    ImageRect imageRect=(ImageRect)iter.next();
    g2d.drawImage(imageRect.image,imageRect.left,0,null);
  }
  g2d.dispose();
  byte[] hash=md5.digest();
  char[] strongName=new char[2 * hash.length];
  int j=0;
  for (int i=0; i < hash.length; i++) {
    strongName[j++]=Util.HEX_CHARS[(hash[i] & 0xF0) >> 4];
    strongName[j++]=Util.HEX_CHARS[hash[i] & 0x0F];
  }
  String bundleFileType=""String_Node_Str"";
  String bundleFileName=new String(strongName) + ""String_Node_Str"" + bundleFileType;
  OutputStream outStream=context.tryCreateResource(logger,bundleFileName);
  if (outStream != null) {
    try {
      if (!ImageIO.write(bundledImage,bundleFileType,outStream)) {
        logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
        throw new UnableToCompleteException();
      }
      context.commitResource(logger,outStream);
    }
 catch (    IOException e) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
      throw new UnableToCompleteException();
    }
  }
 else {
    logger.log(TreeLogger.TRACE,""String_Node_Str"",null);
  }
  return bundleFileName;
}","public String writeBundledImage(TreeLogger logger,GeneratorContext context) throws UnableToCompleteException {
  int nextLeft=0;
  int maxHeight=0;
  for (Iterator iter=orderedImageRects.iterator(); iter.hasNext(); ) {
    ImageRect imageRect=(ImageRect)iter.next();
    imageRect.left=nextLeft;
    nextLeft+=imageRect.width;
    if (imageRect.height > maxHeight) {
      maxHeight=imageRect.height;
    }
  }
  BufferedImage bundledImage=new BufferedImage(nextLeft,maxHeight,BufferedImage.TYPE_INT_ARGB_PRE);
  Graphics2D g2d=bundledImage.createGraphics();
  for (Iterator iter=orderedImageRects.iterator(); iter.hasNext(); ) {
    ImageRect imageRect=(ImageRect)iter.next();
    g2d.drawImage(imageRect.image,imageRect.left,0,null);
  }
  g2d.dispose();
  String strongName=Util.toHexString(md5.digest());
  String bundleFileType=""String_Node_Str"";
  String bundleFileName=strongName + ""String_Node_Str"" + bundleFileType;
  OutputStream outStream=context.tryCreateResource(logger,bundleFileName);
  if (outStream != null) {
    try {
      if (!ImageIO.write(bundledImage,bundleFileType,outStream)) {
        logger.log(TreeLogger.ERROR,""String_Node_Str"",null);
        throw new UnableToCompleteException();
      }
      context.commitResource(logger,outStream);
    }
 catch (    IOException e) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
      throw new UnableToCompleteException();
    }
  }
 else {
    logger.log(TreeLogger.TRACE,""String_Node_Str"",null);
  }
  return bundleFileName;
}"
83061,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AbsolutePanelTest.class);
  suite.addTestSuite(CustomButtonTest.class);
  suite.addTestSuite(DisclosurePanelTest.class);
  suite.addTestSuite(DockPanelTest.class);
  suite.addTestSuite(DOMTest.class);
  suite.addTestSuite(FastStringMapTest.class);
  suite.addTestSuite(FlexTableTest.class);
  suite.addTestSuite(FlowPanelTest.class);
  suite.addTestSuite(FocusPanelTest.class);
  suite.addTestSuite(FormPanelTest.class);
  suite.addTestSuite(GridTest.class);
  suite.addTestSuite(HiddenTest.class);
  suite.addTestSuite(HistoryTest.class);
  suite.addTestSuite(HorizontalPanelTest.class);
  suite.addTestSuite(HTMLPanelTest.class);
  suite.addTestSuite(ImageTest.class);
  suite.addTestSuite(LinearPanelTest.class);
  suite.addTestSuite(ListBoxTest.class);
  suite.addTestSuite(NamedFrameTest.class);
  suite.addTestSuite(PanelTest.class);
  suite.addTestSuite(PopupTest.class);
  suite.addTestSuite(PrefixTreeTest.class);
  suite.addTestSuite(ScrollPanelTest.class);
  suite.addTestSuite(SplitPanelTest.class);
  suite.addTestSuite(StackPanelTest.class);
  suite.addTestSuite(TabBarTest.class);
  suite.addTestSuite(TabPanelTest.class);
  suite.addTestSuite(TextAreaTest.class);
  suite.addTestSuite(TreeTest.class);
  suite.addTestSuite(UIObjectTest.class);
  suite.addTestSuite(VerticalPanelTest.class);
  suite.addTestSuite(WidgetCollectionTest.class);
  suite.addTestSuite(WidgetIteratorsTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AbsolutePanelTest.class);
  suite.addTestSuite(CheckBoxTest.class);
  suite.addTestSuite(CustomButtonTest.class);
  suite.addTestSuite(DisclosurePanelTest.class);
  suite.addTestSuite(DockPanelTest.class);
  suite.addTestSuite(DOMTest.class);
  suite.addTestSuite(FastStringMapTest.class);
  suite.addTestSuite(FlexTableTest.class);
  suite.addTestSuite(FlowPanelTest.class);
  suite.addTestSuite(FocusPanelTest.class);
  suite.addTestSuite(FormPanelTest.class);
  suite.addTestSuite(GridTest.class);
  suite.addTestSuite(HiddenTest.class);
  suite.addTestSuite(HistoryTest.class);
  suite.addTestSuite(HorizontalPanelTest.class);
  suite.addTestSuite(HTMLPanelTest.class);
  suite.addTestSuite(ImageTest.class);
  suite.addTestSuite(LinearPanelTest.class);
  suite.addTestSuite(ListBoxTest.class);
  suite.addTestSuite(NamedFrameTest.class);
  suite.addTestSuite(PanelTest.class);
  suite.addTestSuite(PopupTest.class);
  suite.addTestSuite(PrefixTreeTest.class);
  suite.addTestSuite(RadioButtonTest.class);
  suite.addTestSuite(ScrollPanelTest.class);
  suite.addTestSuite(SplitPanelTest.class);
  suite.addTestSuite(StackPanelTest.class);
  suite.addTestSuite(TabBarTest.class);
  suite.addTestSuite(TabPanelTest.class);
  suite.addTestSuite(TextAreaTest.class);
  suite.addTestSuite(TreeTest.class);
  suite.addTestSuite(UIObjectTest.class);
  suite.addTestSuite(VerticalPanelTest.class);
  suite.addTestSuite(WidgetCollectionTest.class);
  suite.addTestSuite(WidgetIteratorsTest.class);
  return suite;
}"
83062,"/** 
 * Sends an HTTP request based on the current builder configuration. If no request headers have been set, the header ""Content-Type"" will be used with a value of ""text/plain; charset=utf-8"".
 * @param requestData the data to send as part of the request
 * @param callback the response handler to be notified when the request failsor completes
 * @return a {@link Request} object that can be used to track the request
 */
public Request sendRequest(String requestData,RequestCallback callback) throws RequestException {
  JavaScriptObject xmlHttpRequest=httpRequest.createXmlHTTPRequest();
  String openError=XMLHTTPRequest.open(xmlHttpRequest,httpMethod,url,true,user,password);
  if (openError != null) {
    throw new RequestPermissionException(url);
  }
  setHeaders(xmlHttpRequest);
  Request request=new Request(xmlHttpRequest,timeoutMillis,callback);
  String sendError=XMLHTTPRequest.send(xmlHttpRequest,request,requestData,callback);
  if (sendError != null) {
    throw new RequestException(sendError);
  }
  return request;
}","/** 
 * Sends an HTTP request based on the current builder configuration. If no request headers have been set, the header ""Content-Type"" will be used with a value of ""text/plain; charset=utf-8"".
 * @param requestData the data to send as part of the request
 * @param callback the response handler to be notified when the request failsor completes
 * @return a {@link Request} object that can be used to track the request
 */
public Request sendRequest(String requestData,RequestCallback callback) throws RequestException {
  if (user == null && password != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  JavaScriptObject xmlHttpRequest=httpRequest.createXmlHTTPRequest();
  String openError;
  if (password != null) {
    openError=XMLHTTPRequest.open(xmlHttpRequest,httpMethod,url,true,user,password);
  }
 else   if (user != null) {
    openError=XMLHTTPRequest.open(xmlHttpRequest,httpMethod,url,true,user);
  }
 else {
    openError=XMLHTTPRequest.open(xmlHttpRequest,httpMethod,url,true);
  }
  if (openError != null) {
    RequestPermissionException requestPermissionException=new RequestPermissionException(url);
    requestPermissionException.initCause(new RequestException(openError));
    throw requestPermissionException;
  }
  setHeaders(xmlHttpRequest);
  Request request=new Request(xmlHttpRequest,timeoutMillis,callback);
  String sendError=XMLHTTPRequest.send(xmlHttpRequest,request,requestData,callback);
  if (sendError != null) {
    throw new RequestException(sendError);
  }
  return request;
}"
83063,"/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#RequestBuilder(java.lang.String,java.lang.String)}. 
 */
public void testRequestBuilderStringString_HTTPMethodRestrictionOverride(){
  RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,""String_Node_Str"");
  try {
class MyRequestBuilder extends RequestBuilder {
      MyRequestBuilder(      String httpMethod,      String url){
        super(httpMethod,url);
      }
    }
    ;
    builder=new MyRequestBuilder(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
    fail(ex.getMessage());
  }
}","/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#RequestBuilder(java.lang.String,java.lang.String)}. 
 */
public void testRequestBuilderStringString_HTTPMethodRestrictionOverride(){
  new RequestBuilder(RequestBuilder.GET,""String_Node_Str"");
class MyRequestBuilder extends RequestBuilder {
    MyRequestBuilder(    String httpMethod,    String url){
      super(httpMethod,url);
    }
  }
  ;
  new MyRequestBuilder(""String_Node_Str"",""String_Node_Str"");
}"
83064,"/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#setHeader(java.lang.String,java.lang.String)}. <p> Test Cases: <ul> <li>name == null <li>name == """" <li>value == null <li>value == """" </ul>
 */
public void testSetRequestHeader(){
  RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
  try {
    builder.setHeader(null,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    builder.setHeader(""String_Node_Str"",""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  try {
    builder.setHeader(""String_Node_Str"",null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    builder.setHeader(""String_Node_Str"",""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  delayTestFinish(TEST_FINISH_DELAY);
  try {
    builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
    builder.setHeader(""String_Node_Str"",""String_Node_Str"");
    builder.setHeader(""String_Node_Str"",""String_Node_Str"");
    builder.sendRequest(null,new RequestCallback(){
      public void onError(      Request request,      Throwable exception){
        fail(""String_Node_Str"");
      }
      public void onResponseReceived(      Request request,      Response response){
        assertEquals(200,response.getStatusCode());
        finishTest();
      }
    }
);
  }
 catch (  RequestException e) {
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#setHeader(java.lang.String,java.lang.String)}. <p> Test Cases: <ul> <li>name == null <li>name == """" <li>value == null <li>value == """" </ul>
 */
public void testSetRequestHeader() throws RequestException {
  RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
  try {
    builder.setHeader(null,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    builder.setHeader(""String_Node_Str"",""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  try {
    builder.setHeader(""String_Node_Str"",null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    builder.setHeader(""String_Node_Str"",""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  delayTestFinish(TEST_FINISH_DELAY);
  builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
  builder.setHeader(""String_Node_Str"",""String_Node_Str"");
  builder.setHeader(""String_Node_Str"",""String_Node_Str"");
  builder.sendRequest(null,new RequestCallback(){
    public void onError(    Request request,    Throwable exception){
      fail(""String_Node_Str"");
    }
    public void onResponseReceived(    Request request,    Response response){
      assertEquals(200,response.getStatusCode());
      finishTest();
    }
  }
);
}"
83065,"/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#sendRequest(java.lang.String,com.google.gwt.http.client.RequestCallback)}.
 */
public void testSendRequest_POST(){
  delayTestFinish(TEST_FINISH_DELAY);
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.POST,getTestBaseURL() + ""String_Node_Str"");
    builder.sendRequest(""String_Node_Str"",new RequestCallback(){
      public void onError(      Request request,      Throwable exception){
        fail(""String_Node_Str"");
      }
      public void onResponseReceived(      Request request,      Response response){
        assertEquals(200,response.getStatusCode());
        finishTest();
      }
    }
);
  }
 catch (  RequestException e) {
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#sendRequest(java.lang.String,com.google.gwt.http.client.RequestCallback)}.
 */
public void testSendRequest_POST() throws RequestException {
  delayTestFinish(TEST_FINISH_DELAY);
  RequestBuilder builder=new RequestBuilder(RequestBuilder.POST,getTestBaseURL() + ""String_Node_Str"");
  builder.sendRequest(""String_Node_Str"",new RequestCallback(){
    public void onError(    Request request,    Throwable exception){
      fail(""String_Node_Str"");
    }
    public void onResponseReceived(    Request request,    Response response){
      assertEquals(200,response.getStatusCode());
      finishTest();
    }
  }
);
}"
83066,"/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#setTimeoutMillis(int)}. <p> Test Cases: <ul> <li>Timeout greater than the server's response time <li>Timeout is less than the server's response time </ul>
 */
public void testSetTimeout_timeout(){
  delayTestFinish(TEST_FINISH_DELAY);
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
    builder.setTimeoutMillis(2000);
    builder.sendRequest(null,new RequestCallback(){
      public void onError(      Request request,      Throwable exception){
        finishTest();
      }
      public void onResponseReceived(      Request request,      Response response){
        assertEquals(200,response.getStatusCode());
        fail(""String_Node_Str"");
      }
    }
);
  }
 catch (  RequestException e) {
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#setTimeoutMillis(int)}. <p> Test Cases: <ul> <li>Timeout greater than the server's response time <li>Timeout is less than the server's response time </ul>
 */
public void testSetTimeout_timeout() throws RequestException {
  delayTestFinish(TEST_FINISH_DELAY);
  RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
  builder.setTimeoutMillis(2000);
  builder.sendRequest(null,new RequestCallback(){
    public void onError(    Request request,    Throwable exception){
      finishTest();
    }
    public void onResponseReceived(    Request request,    Response response){
      assertEquals(200,response.getStatusCode());
      fail(""String_Node_Str"");
    }
  }
);
}"
83067,"/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#RequestBuilder(java.lang.String,java.lang.String)}. <p> NOTE: When running this test against Internet Explorer, the security settings of IE affect this test. The assumption is that the ""Access Data Sources Across Domains"" setting is set to ""Disabled"". This is the standard setting for the ""Internet"" zone, which models the case of a user's browser sending a request to a foreign website. However, if you are running the unit tests against a machine running the GWT app which falls into your ""Trusted Sites"" or ""Local Network"" content zone, this setting's value is different. You will have to change the setting to ""Disabled"" in these zones for this test to pass. <p> Test Cases: <ul> <li>httpMethod == null <li>httpMethod == """" <li>url == null <li>url == """" <li>url == ""www.freebsd.org"" - violates same source </ul>
 */
public void testRequestBuilderStringString(){
  try {
    RequestBuilder builder=new RequestBuilder((RequestBuilder.Method)null,null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,""String_Node_Str"");
    builder.sendRequest(null,new RequestCallback(){
      public void onError(      Request request,      Throwable exception){
        fail(""String_Node_Str"");
      }
      public void onResponseReceived(      Request request,      Response response){
        fail();
      }
    }
);
  }
 catch (  IllegalArgumentException ex) {
  }
catch (  RequestPermissionException ex) {
  }
catch (  RequestException e) {
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#RequestBuilder(java.lang.String,java.lang.String)}. <p> NOTE: When running this test against Internet Explorer, the security settings of IE affect this test. The assumption is that the ""Access Data Sources Across Domains"" setting is set to ""Disabled"". This is the standard setting for the ""Internet"" zone, which models the case of a user's browser sending a request to a foreign website. However, if you are running the unit tests against a machine running the GWT app which falls into your ""Trusted Sites"" or ""Local Network"" content zone, this setting's value is different. You will have to change the setting to ""Disabled"" in these zones for this test to pass. <p> Test Cases: <ul> <li>httpMethod == null <li>httpMethod == """" <li>url == null <li>url == """" <li>url == ""www.freebsd.org"" - violates same source </ul>
 */
public void testRequestBuilderStringString() throws RequestException {
  try {
    new RequestBuilder((RequestBuilder.Method)null,null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    new RequestBuilder(RequestBuilder.GET,null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    new RequestBuilder(RequestBuilder.GET,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,""String_Node_Str"");
    builder.sendRequest(null,new RequestCallback(){
      public void onError(      Request request,      Throwable exception){
        fail(""String_Node_Str"");
      }
      public void onResponseReceived(      Request request,      Response response){
        fail();
      }
    }
);
  }
 catch (  IllegalArgumentException ex) {
  }
catch (  RequestPermissionException ex) {
  }
}"
83068,"/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#sendRequest(java.lang.String,com.google.gwt.http.client.RequestCallback)}.
 */
public void testSendRequest_GET(){
  delayTestFinish(TEST_FINISH_DELAY);
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
    builder.sendRequest(null,new RequestCallback(){
      public void onError(      Request request,      Throwable exception){
        fail();
      }
      public void onResponseReceived(      Request request,      Response response){
        assertEquals(200,response.getStatusCode());
        finishTest();
      }
    }
);
  }
 catch (  RequestException e) {
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#sendRequest(java.lang.String,com.google.gwt.http.client.RequestCallback)}.
 */
public void testSendRequest_GET() throws RequestException {
  delayTestFinish(TEST_FINISH_DELAY);
  RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
  builder.sendRequest(null,new RequestCallback(){
    public void onError(    Request request,    Throwable exception){
      fail();
    }
    public void onResponseReceived(    Request request,    Response response){
      assertEquals(200,response.getStatusCode());
      finishTest();
    }
  }
);
}"
83069,"/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#setTimeoutMillis(int)}. <p> Test Cases: <ul> <li>Timeout greater than the server's response time <li>Timeout is less than the server's response time </ul>
 */
public void testSetTimeout_noTimeout(){
  delayTestFinish(TEST_FINISH_DELAY);
  try {
    RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
    builder.setTimeoutMillis(10000);
    builder.sendRequest(null,new RequestCallback(){
      public void onError(      Request request,      Throwable exception){
        fail(""String_Node_Str"");
      }
      public void onResponseReceived(      Request request,      Response response){
        assertEquals(200,response.getStatusCode());
        finishTest();
      }
    }
);
  }
 catch (  RequestException e) {
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link com.google.gwt.http.client.RequestBuilder#setTimeoutMillis(int)}. <p> Test Cases: <ul> <li>Timeout greater than the server's response time <li>Timeout is less than the server's response time </ul>
 */
public void testSetTimeout_noTimeout() throws RequestException {
  delayTestFinish(TEST_FINISH_DELAY);
  RequestBuilder builder=new RequestBuilder(RequestBuilder.GET,getTestBaseURL() + ""String_Node_Str"");
  builder.setTimeoutMillis(10000);
  builder.sendRequest(null,new RequestCallback(){
    public void onError(    Request request,    Throwable exception){
      fail(""String_Node_Str"");
    }
    public void onResponseReceived(    Request request,    Response response){
      assertEquals(200,response.getStatusCode());
      finishTest();
    }
  }
);
}"
83070,"/** 
 * Creates an empty vertical split panel.
 */
public VerticalSplitPanel(){
  super(DOM.createDiv(),DOM.createDiv(),DOM.createDiv(),DOM.createDiv());
  final Element thisElem=getElement();
  final Element splitElem=getSplitElement();
  final Element topElem=getElement(TOP);
  final Element bottomElem=getElement(BOTTOM);
  probeElem=lockStyles(DOM.createDiv());
  DOM.appendChild(thisElem,topElem);
  DOM.appendChild(thisElem,splitElem);
  DOM.appendChild(thisElem,bottomElem);
  DOM.appendChild(thisElem,probeElem);
  addElementClipping(thisElem);
  addElementScrolling(topElem);
  addElementScrolling(bottomElem);
  preventElementPadding(thisElem);
  preventElementPadding(topElem);
  preventElementPadding(bottomElem);
  setElementClassname(topElem,""String_Node_Str"");
  setElementClassname(splitElem,""String_Node_Str"");
  setElementClassname(bottomElem,""String_Node_Str"");
  setStyleName(""String_Node_Str"");
  DeferredCommand.addCommand(new Command(){
    public void execute(){
      updateBottomHeight();
    }
  }
);
}","/** 
 * Creates an empty vertical split panel.
 */
public VerticalSplitPanel(){
  super(DOM.createDiv(),DOM.createDiv(),DOM.createDiv(),DOM.createDiv());
  final Element thisElem=getElement();
  final Element splitElem=getSplitElement();
  final Element topElem=getElement(TOP);
  final Element bottomElem=getElement(BOTTOM);
  probeElem=lockStyles(DOM.createDiv());
  DOM.appendChild(thisElem,topElem);
  DOM.appendChild(thisElem,splitElem);
  DOM.appendChild(thisElem,bottomElem);
  DOM.appendChild(thisElem,probeElem);
  addElementClipping(thisElem);
  addElementScrolling(topElem);
  addElementScrolling(bottomElem);
  preventElementPadding(thisElem);
  preventElementPadding(topElem);
  preventElementPadding(bottomElem);
  setElementClassname(topElem,""String_Node_Str"");
  setElementClassname(splitElem,""String_Node_Str"");
  setElementClassname(bottomElem,""String_Node_Str"");
  setStyleName(""String_Node_Str"");
  DeferredCommand.addCommand(new Command(){
    public void execute(){
      updateBottomHeight();
    }
  }
);
  setSplitPosition(""String_Node_Str"");
}"
83071,"private static void setHeight(Element elem,int px){
  DOM.setStyleAttribute(elem,""String_Node_Str"",Math.max(0,px) + ""String_Node_Str"");
}","public void setHeight(String height){
  super.setHeight(height);
  updateBottomHeight();
}"
83072,private static native void _destroyJsRootedValue(int jsRootedValue);,"/** 
 * Destroy a JsRootedValue.
 * @param jsRootedValue pointer to underlying JsRootedValue as an integer.
 */
private static native void _destroyJsRootedValue(int jsRootedValue);"
83073,"/** 
 * Create a JsValue object with the JavaScript value jsval. Only used internally.
 * @param scriptObject reference to containing window object in JavaScript
 * @param jsval a JavaScript jsval as a 32-bit int
 */
protected JsValueMoz(int scriptObject,int jsval){
  jsRootedValue=_createJsRootedValue(scriptObject,jsval);
  if (debugFlag) {
    debugInfo.createInstance(jsRootedValue);
  }
}","/** 
 * Copy constructor.
 * @param other JsValueMoz instance to copy
 */
public JsValueMoz(JsValueMoz other){
  jsRootedValue=_copyJsRootedValue(other.jsRootedValue);
  if (debugFlag) {
    debugInfo.createInstance(jsRootedValue);
  }
}"
83074,"public void doCleanup(){
  JsValueMoz.destroyJsRootedValue(jsRootedValue);
}","public void doCleanup(){
  _destroyJsRootedValue(jsRootedValue);
}"
83075,"private static native int _createJsRootedValue(int scriptObject,int jsval);","/** 
 * Create a JsRootedValue and return a pointer to it as a Java int.
 * @param jsval JavaScript jsval for initial value
 * @return pointer to JsRootedValue object as an integer
 */
private static native int _createJsRootedValue(int jsval);"
83076,"/** 
 * Call this to raise an exception in JavaScript before returning control. Currently, the JavaScript exception throw is always null.
 * @param jscontext A JSContext pointer as a Java int
 */
public static void raiseJavaScriptException(int jscontext){
  if (!_raiseJavaScriptException(jscontext)) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Call this to raise an exception in JavaScript before returning control. Currently, the JavaScript exception throw is always null.
 */
public static void raiseJavaScriptException(){
  if (!_raiseJavaScriptException()) {
    throw new RuntimeException(""String_Node_Str"");
  }
}"
83077,private static native boolean _raiseJavaScriptException(int jscontext);,private static native boolean _raiseJavaScriptException();
83078,"/** 
 * Invoke a Java method from JavaScript. This is called solely from native code.
 * @param jscontext JSContext* passed as an integer
 * @param jsthis JavaScript reference to Java object
 * @param jsargs array of JavaScript values for parameters
 * @param returnValue JavaScript value to return result in
 * @throws RuntimeException if improper arguments are suppliedTODO(jat): lift most of this interface to platform-independent code (only exceptions still need to be made platform-independent)
 */
public void invoke(int jscontext,int jsthisInt,int[] jsargsInt,int returnValueInt){
  JsValue jsthis=new JsValueMoz(jsthisInt);
  JsValue jsargs[]=new JsValue[jsargsInt.length];
  for (int i=0; i < jsargsInt.length; ++i) {
    jsargs[i]=new JsValueMoz(jsargsInt[i]);
  }
  JsValue returnValue=new JsValueMoz(returnValueInt);
  Class[] paramTypes=method.getParameterTypes();
  int argc=paramTypes.length;
  Object args[]=new Object[argc];
  if (jsargs.length < argc) {
    throw new RuntimeException(""String_Node_Str"" + method);
  }
  Object jthis=null;
  if ((method.getModifiers() & Modifier.STATIC) == 0) {
    jthis=JsValueGlue.get(jsthis,method.getDeclaringClass(),""String_Node_Str"");
  }
  for (int i=0; i < argc; ++i) {
    args[i]=JsValueGlue.get(jsargs[i],paramTypes[i],""String_Node_Str"");
  }
  try {
    Object result;
    try {
      result=method.invoke(jthis,args);
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
    JsValueGlue.set(returnValue,classLoader,method.getReturnType(),result);
  }
 catch (  InvocationTargetException e) {
    Throwable t=e.getTargetException();
    ModuleSpaceMoz.setThrownJavaException(t);
    LowLevelMoz.raiseJavaScriptException(jscontext);
  }
catch (  IllegalArgumentException e) {
    System.err.println(""String_Node_Str"" + method.toString() + ""String_Node_Str"");
    for (int i=0; i < argc; ++i) {
      System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ paramTypes[i].toString()+ ""String_Node_Str""+ jsargs[i].getTypeString()+ ""String_Node_Str""+ args[i].toString());
    }
    throw e;
  }
}","/** 
 * Invoke a Java method from JavaScript. This is called solely from native code.
 * @param jsthis JavaScript reference to Java object
 * @param jsargs array of JavaScript values for parameters
 * @param returnValue JavaScript value to return result in
 * @throws RuntimeException if improper arguments are suppliedTODO(jat): lift most of this interface to platform-independent code (only exceptions still need to be made platform-independent)
 */
public void invoke(int jsthisInt,int[] jsargsInt,int returnValueInt){
  JsValue jsthis=new JsValueMoz(jsthisInt);
  JsValue jsargs[]=new JsValue[jsargsInt.length];
  for (int i=0; i < jsargsInt.length; ++i) {
    jsargs[i]=new JsValueMoz(jsargsInt[i]);
  }
  JsValue returnValue=new JsValueMoz(returnValueInt);
  Class[] paramTypes=method.getParameterTypes();
  int argc=paramTypes.length;
  Object args[]=new Object[argc];
  if (jsargs.length < argc) {
    throw new RuntimeException(""String_Node_Str"" + method);
  }
  Object jthis=null;
  if ((method.getModifiers() & Modifier.STATIC) == 0) {
    jthis=JsValueGlue.get(jsthis,method.getDeclaringClass(),""String_Node_Str"");
  }
  for (int i=0; i < argc; ++i) {
    args[i]=JsValueGlue.get(jsargs[i],paramTypes[i],""String_Node_Str"");
  }
  try {
    Object result;
    try {
      result=method.invoke(jthis,args);
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
      throw new RuntimeException(e);
    }
    JsValueGlue.set(returnValue,classLoader,method.getReturnType(),result);
  }
 catch (  InvocationTargetException e) {
    Throwable t=e.getTargetException();
    ModuleSpaceMoz.setThrownJavaException(t);
    LowLevelMoz.raiseJavaScriptException();
  }
catch (  IllegalArgumentException e) {
    System.err.println(""String_Node_Str"" + method.toString() + ""String_Node_Str"");
    for (int i=0; i < argc; ++i) {
      System.err.println(""String_Node_Str"" + i + ""String_Node_Str""+ paramTypes[i].toString()+ ""String_Node_Str""+ jsargs[i].getTypeString()+ ""String_Node_Str""+ args[i].toString());
    }
    throw e;
  }
}"
83079,"/** 
 * Invokes a native JavaScript function.
 * @param name the name of the function to invoke
 * @param jthis the function's 'this' context
 * @param types the type of each argument
 * @param args the arguments to be passed
 * @return the return value as a Object.
 */
protected JsValue doInvoke(String name,Object jthis,Class[] types,Object[] args){
  JsValueMoz jsthis=JsValueMoz.createUndefinedValue(window);
  CompilingClassLoader isolatedClassLoader=getIsolatedClassLoader();
  jsthis.setWrappedJavaObject(isolatedClassLoader,jthis);
  int argc=args.length;
  JsValueMoz argv[]=new JsValueMoz[argc];
  int[] jsArgsInt=new int[argc];
  for (int i=0; i < argc; ++i) {
    argv[i]=JsValueMoz.createUndefinedValue(window);
    JsValueGlue.set(argv[i],isolatedClassLoader,types[i],args[i]);
    jsArgsInt[i]=argv[i].getJsRootedValue();
  }
  JsValueMoz returnVal=JsValueMoz.createUndefinedValue(window);
  LowLevelMoz.invoke(window,name,jsthis.getJsRootedValue(),jsArgsInt,returnVal.getJsRootedValue());
  return returnVal;
}","/** 
 * Invokes a native JavaScript function.
 * @param name the name of the function to invoke
 * @param jthis the function's 'this' context
 * @param types the type of each argument
 * @param args the arguments to be passed
 * @return the return value as a Object.
 */
protected JsValue doInvoke(String name,Object jthis,Class[] types,Object[] args){
  JsValueMoz jsthis=new JsValueMoz();
  CompilingClassLoader isolatedClassLoader=getIsolatedClassLoader();
  jsthis.setWrappedJavaObject(isolatedClassLoader,jthis);
  int argc=args.length;
  JsValueMoz argv[]=new JsValueMoz[argc];
  int[] jsArgsInt=new int[argc];
  for (int i=0; i < argc; ++i) {
    argv[i]=new JsValueMoz();
    JsValueGlue.set(argv[i],isolatedClassLoader,types[i],args[i]);
    jsArgsInt[i]=argv[i].getJsRootedValue();
  }
  JsValueMoz returnVal=new JsValueMoz();
  LowLevelMoz.invoke(window,name,jsthis.getJsRootedValue(),jsArgsInt,returnVal.getJsRootedValue());
  return returnVal;
}"
83080,"/** 
 * Determines whether the specified cell exists.
 * @param row the cell's row
 * @param column the cell's column
 * @return <code>true</code> if the specified cell exists
 */
public boolean isCellPresent(int row,int column){
  if ((row >= getRowCount()) && (row < 0)) {
    return false;
  }
  if ((column < 0) || (column >= getCellCount(row))) {
    return false;
  }
 else {
    return true;
  }
}","/** 
 * Determines whether the specified cell exists.
 * @param row the cell's row
 * @param column the cell's column
 * @return <code>true</code> if the specified cell exists
 */
public boolean isCellPresent(int row,int column){
  if ((row >= getRowCount()) || (row < 0)) {
    return false;
  }
  if ((column < 0) || (column >= getCellCount(row))) {
    return false;
  }
 else {
    return true;
  }
}"
83081,"/** 
 * Creates a set of potential candidates that match the given query.
 * @param limit number of candidates to return
 * @param query query string
 * @return possible candidates
 */
private HashSet createCandidatesFromWord(String query){
  HashSet candidateSet=new HashSet();
  List words=tree.getSuggestions(query,Integer.MAX_VALUE);
  if (words != null) {
    for (int i=0; i < words.size(); i++) {
      Collection belongsTo=(Collection)toCandidates.get(words.get(i));
      if (belongsTo != null) {
        candidateSet.addAll(belongsTo);
      }
    }
  }
  return candidateSet;
}","/** 
 * Creates a set of potential candidates that match the given query.
 * @param query query string
 * @return possible candidates
 */
private HashSet createCandidatesFromWord(String query){
  HashSet candidateSet=new HashSet();
  List words=tree.getSuggestions(query,Integer.MAX_VALUE);
  if (words != null) {
    for (int i=0; i < words.size(); i++) {
      Collection belongsTo=(Collection)toCandidates.get(words.get(i));
      if (belongsTo != null) {
        candidateSet.addAll(belongsTo);
      }
    }
  }
  return candidateSet;
}"
83082,"/** 
 * Can only be called by the UI thread.
 */
private void uiStyleChildAndAncestors(TreeLogger.Type type,TreeItem child){
  Display display=child.getDisplay();
  Color color;
  Image image=null;
  if (type == TreeLogger.ERROR) {
    color=display.getSystemColor(SWT.COLOR_RED);
    image=imageError;
  }
 else   if (type == TreeLogger.WARN) {
    color=display.getSystemColor(SWT.COLOR_DARK_YELLOW);
    image=imageWarning;
  }
 else   if (type == TreeLogger.INFO) {
    color=display.getSystemColor(SWT.COLOR_BLACK);
    image=imageInfo;
  }
 else   if (type == TreeLogger.TRACE) {
    color=display.getSystemColor(SWT.COLOR_DARK_GRAY);
    image=imageTrace;
  }
 else   if (type == TreeLogger.DEBUG) {
    color=display.getSystemColor(SWT.COLOR_DARK_CYAN);
    image=imageDebug;
  }
 else {
    color=display.getSystemColor(SWT.COLOR_DARK_GREEN);
    image=imageSpam;
  }
  if (image != null) {
    child.setImage(image);
  }
  child.setForeground(color);
  if (type.needsAttention()) {
    boolean propagateColor=true;
    TreeItem parent=child.getParentItem();
    while (parent != null) {
      LogEvent parentEvent=(LogEvent)parent.getData();
      if (propagateColor) {
        if (parentEvent.type.isLowerPriorityThan(type)) {
          parent.setForeground(color);
        }
 else {
          propagateColor=false;
        }
      }
      parent.setExpanded(true);
      parent=parent.getParentItem();
    }
  }
}","/** 
 * Can only be called by the UI thread.
 */
private void uiStyleChildAndAncestors(TreeLogger.Type type,TreeItem child){
  Display display=child.getDisplay();
  Color color;
  Image image=null;
  if (type == TreeLogger.ERROR) {
    color=display.getSystemColor(SWT.COLOR_RED);
    image=imageError;
  }
 else   if (type == TreeLogger.WARN) {
    color=display.getSystemColor(SWT.COLOR_DARK_YELLOW);
    image=imageWarning;
  }
 else   if (type == TreeLogger.INFO) {
    color=display.getSystemColor(SWT.COLOR_BLACK);
    image=imageInfo;
  }
 else   if (type == TreeLogger.TRACE) {
    color=display.getSystemColor(SWT.COLOR_DARK_GRAY);
    image=imageTrace;
  }
 else   if (type == TreeLogger.DEBUG) {
    color=display.getSystemColor(SWT.COLOR_DARK_CYAN);
    image=imageDebug;
  }
 else {
    color=display.getSystemColor(SWT.COLOR_DARK_GREEN);
    image=imageSpam;
  }
  if (image != null) {
    child.setImage(image);
  }
  child.setForeground(color);
  if (type.needsAttention()) {
    Stack parents=new Stack();
    boolean propagateColor=true;
    TreeItem parent=child.getParentItem();
    while (parent != null) {
      parents.push(parent);
      LogEvent parentEvent=(LogEvent)parent.getData();
      if (propagateColor) {
        if (parentEvent.type.isLowerPriorityThan(type)) {
          parent.setForeground(color);
        }
 else {
          propagateColor=false;
        }
      }
      parent=parent.getParentItem();
    }
    while (!parents.isEmpty()) {
      parent=(TreeItem)parents.pop();
      parent.setExpanded(true);
    }
  }
}"
83083,"private static void dispatchEventImpl(Event evt,Element elem,EventListener listener){
  if (elem == sCaptureElem) {
    if (eventGetType(evt) == Event.ONLOSECAPTURE) {
      sCaptureElem=null;
    }
  }
  listener.onBrowserEvent(evt);
}","private static void dispatchEventImpl(Event evt,Element elem,EventListener listener){
  if (elem == sCaptureElem) {
    if (eventGetType(evt) == Event.ONLOSECAPTURE) {
      sCaptureElem=null;
    }
  }
  Event prevCurrentEvent=currentEvent;
  currentEvent=evt;
  try {
    listener.onBrowserEvent(evt);
  }
  finally {
    currentEvent=prevCurrentEvent;
  }
}"
83084,"private void setContentDisplay(){
  String primaryStyleName=getStyleName();
  if (isOpen) {
    removeStyleName(primaryStyleName + STYLENAME_SUFFIX_CLOSED);
    addStyleName(primaryStyleName + STYLENAME_SUFFIX_OPEN);
  }
 else {
    removeStyleName(primaryStyleName + STYLENAME_SUFFIX_OPEN);
    addStyleName(primaryStyleName + STYLENAME_SUFFIX_CLOSED);
  }
  if (content != null) {
    content.setVisible(isOpen);
  }
}","private void setContentDisplay(){
  if (isOpen) {
    removeStyleDependentName(STYLENAME_SUFFIX_CLOSED);
    addStyleDependentName(STYLENAME_SUFFIX_OPEN);
  }
 else {
    removeStyleDependentName(STYLENAME_SUFFIX_OPEN);
    addStyleDependentName(STYLENAME_SUFFIX_CLOSED);
  }
  if (content != null) {
    content.setVisible(isOpen);
  }
}"
83085,"/** 
 * Gets a style from a specified row.
 * @param row the row to which the style while be added
 * @see UIObject#getStyleName()
 * @throws IndexOutOfBoundsException
 * @return the style name
 */
public String getStyleName(int row){
  return DOM.getElementProperty(getElement(row),""String_Node_Str"");
}","/** 
 * Gets the style of the specified row.
 * @param row the row to be queried
 * @return the style name
 * @see UIObject#getStyleName()
 * @throws IndexOutOfBoundsException
 */
public String getStyleName(int row){
  return UIObject.getStyleName(getElement(row));
}"
83086,"/** 
 * Sets the style name associated with the specified row.
 * @param row the row whose style name is to be set
 * @param styleName the new style name
 * @see UIObject#setStyleName(String)
 * @throws IndexOutOfBoundsException
 */
public void setStyleName(int row,String styleName){
  UIObject.resetStyleName(ensureElement(row),styleName);
}","/** 
 * Sets the style name associated with the specified row.
 * @param row the row whose style name is to be set
 * @param styleName the new style name
 * @see UIObject#setStyleName(String)
 * @throws IndexOutOfBoundsException
 */
public void setStyleName(int row,String styleName){
  UIObject.setStyleName(ensureElement(row),styleName);
}"
83087,"/** 
 * Removes a style from the specified row.
 * @param row the row to which the style while be removed
 * @param styleName the style name to be removed
 * @see UIObject#removeStyleName(String)
 * @throws IndexOutOfBoundsException
 */
public void removeStyleName(int row,String styleName){
  UIObject.setStyleName(ensureElement(row),styleName,false);
}","/** 
 * Removes a style from the specified row.
 * @param row the row from which the style will be removed
 * @param styleName the style name to be removed
 * @see UIObject#removeStyleName(String)
 * @throws IndexOutOfBoundsException
 */
public void removeStyleName(int row,String styleName){
  UIObject.setStyleName(ensureElement(row),styleName,false);
}"
83088,"/** 
 * Adds a style to the specified row.
 * @param row the row to which the style while be added
 * @param styleName the style name to be added
 * @see UIObject#addStyleName(String)
 * @throws IndexOutOfBoundsException
 */
public void addStyleName(int row,String styleName){
  UIObject.setStyleName(ensureElement(row),styleName,true);
}","/** 
 * Adds a style to the specified row.
 * @param row the row to which the style will be added
 * @param styleName the style name to be added
 * @see UIObject#addStyleName(String)
 * @throws IndexOutOfBoundsException
 */
public void addStyleName(int row,String styleName){
  UIObject.setStyleName(ensureElement(row),styleName,true);
}"
83089,"/** 
 * Turns read-only mode on or off.
 * @param readOnly if <code>true</code>, the widget becomes read-only; if<code>false</code> the widget becomes editable
 */
public void setReadOnly(boolean readOnly){
  DOM.setElementPropertyBoolean(getElement(),""String_Node_Str"",readOnly);
  String readOnlyStyle=getStyleName() + ""String_Node_Str"";
  if (readOnly) {
    addStyleName(readOnlyStyle);
  }
 else {
    removeStyleName(readOnlyStyle);
  }
}","/** 
 * Turns read-only mode on or off.
 * @param readOnly if <code>true</code>, the widget becomes read-only; if<code>false</code> the widget becomes editable
 */
public void setReadOnly(boolean readOnly){
  DOM.setElementPropertyBoolean(getElement(),""String_Node_Str"",readOnly);
  String readOnlyStyle=""String_Node_Str"";
  if (readOnly) {
    addStyleDependentName(readOnlyStyle);
  }
 else {
    removeStyleDependentName(readOnlyStyle);
  }
}"
83090,"/** 
 * Creates finished JavaScript source code from the specified Java compilation units.
 */
public String compile(TreeLogger logger,RebindOracle rebindOracle) throws UnableToCompleteException {
  try {
    JProgram jprogram=new JProgram(logger,rebindOracle);
    TypeMap typeMap=new TypeMap(jprogram);
    JsProgram jsProgram=new JsProgram();
    TypeDeclaration[] allTypeDeclarations=BuildTypeMap.exec(typeMap,goldenCuds,jsProgram);
    checkForErrors(logger,true);
    jprogram.typeOracle.computeBeforeAST();
    GenerateJavaAST.exec(allTypeDeclarations,typeMap,jprogram);
    checkForErrors(logger,true);
    boolean isDebugEnabled=false;
    if (!isDebugEnabled) {
      AssertionRemover.exec(jprogram);
    }
    jprogram.typeOracle.computeAfterAST();
    ReplaceRebinds.exec(jprogram);
    findEntryPoints(logger,rebindOracle,declEntryPoints,jprogram);
    boolean didChange;
    do {
      didChange=false;
      didChange=Pruner.exec(jprogram,true) || didChange;
      didChange=MethodAndClassFinalizer.exec(jprogram) || didChange;
      didChange=MakeCallsStatic.exec(jprogram) || didChange;
      didChange=TypeTightener.exec(jprogram) || didChange;
      didChange=MethodCallTightener.exec(jprogram) || didChange;
      didChange=DeadCodeElimination.exec(jprogram) || didChange;
      didChange=MethodInliner.exec(jprogram) || didChange;
      if (didChange) {
        jprogram.typeOracle.recomputeClinits();
      }
    }
 while (didChange);
    if (isDebugEnabled) {
    }
    CatchBlockNormalizer.exec(jprogram);
    CompoundAssignmentNormalizer.exec(jprogram);
    JavaScriptObjectCaster.exec(jprogram);
    CastNormalizer.exec(jprogram);
    ArrayNormalizer.exec(jprogram);
    Pruner.exec(jprogram,false);
    GenerateJavaScriptAST.exec(jprogram,jsProgram);
    JsNormalizer.exec(jsProgram);
    JsSymbolResolver.exec(jsProgram);
    if (obfuscate) {
      JsObfuscateNamer.exec(jsProgram);
    }
 else     if (prettyNames) {
      JsPrettyNamer.exec(jsProgram);
    }
 else {
      JsVerboseNamer.exec(jsProgram);
    }
    DefaultTextOutput out=new DefaultTextOutput(obfuscate);
    JsSourceGenerationVisitor v=new JsSourceGenerationVisitor(out);
    v.accept(jsProgram);
    return out.toString();
  }
 catch (  UnableToCompleteException e) {
    throw e;
  }
catch (  InternalCompilerException e) {
    TreeLogger topBranch=logger.branch(TreeLogger.ERROR,""String_Node_Str"",e);
    List nodeTrace=e.getNodeTrace();
    for (Iterator it=nodeTrace.iterator(); it.hasNext(); ) {
      NodeInfo nodeInfo=(NodeInfo)it.next();
      SourceInfo info=nodeInfo.getSourceInfo();
      String msg;
      if (info != null) {
        String fileName=info.getFileName();
        fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
        fileName=fileName.substring(fileName.lastIndexOf('\\') + 1);
        msg=""String_Node_Str"" + fileName + ""String_Node_Str""+ info.getStartLine()+ ""String_Node_Str"";
      }
 else {
        msg=""String_Node_Str"";
      }
      String description=nodeInfo.getDescription();
      if (description != null) {
        msg+=description;
      }
 else {
        msg+=""String_Node_Str"";
      }
      TreeLogger nodeBranch=topBranch.branch(TreeLogger.ERROR,msg,null);
      String className=nodeInfo.getClassName();
      if (className != null) {
        nodeBranch.log(TreeLogger.INFO,className,null);
      }
    }
    throw new UnableToCompleteException();
  }
catch (  Throwable e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
    throw new UnableToCompleteException();
  }
}","/** 
 * Creates finished JavaScript source code from the specified Java compilation units.
 */
public String compile(TreeLogger logger,RebindOracle rebindOracle) throws UnableToCompleteException {
  try {
    JProgram jprogram=new JProgram(logger,rebindOracle);
    TypeMap typeMap=new TypeMap(jprogram);
    JsProgram jsProgram=new JsProgram();
    TypeDeclaration[] allTypeDeclarations=BuildTypeMap.exec(typeMap,goldenCuds,jsProgram);
    checkForErrors(logger,true);
    jprogram.typeOracle.computeBeforeAST();
    GenerateJavaAST.exec(allTypeDeclarations,typeMap,jprogram);
    checkForErrors(logger,true);
    boolean isDebugEnabled=false;
    if (!isDebugEnabled) {
      AssertionRemover.exec(jprogram);
    }
    jprogram.typeOracle.computeAfterAST();
    ReplaceRebinds.exec(jprogram);
    findEntryPoints(logger,rebindOracle,declEntryPoints,jprogram);
    boolean didChange;
    do {
      didChange=false;
      didChange=Pruner.exec(jprogram,true) || didChange;
      didChange=MethodAndClassFinalizer.exec(jprogram) || didChange;
      didChange=MakeCallsStatic.exec(jprogram) || didChange;
      didChange=TypeTightener.exec(jprogram) || didChange;
      didChange=MethodCallTightener.exec(jprogram) || didChange;
      didChange=DeadCodeElimination.exec(jprogram) || didChange;
      didChange=MethodInliner.exec(jprogram) || didChange;
      if (didChange) {
        jprogram.typeOracle.recomputeClinits();
      }
    }
 while (didChange);
    if (isDebugEnabled) {
    }
    CatchBlockNormalizer.exec(jprogram);
    CompoundAssignmentNormalizer.exec(jprogram);
    JavaScriptObjectCaster.exec(jprogram);
    CastNormalizer.exec(jprogram);
    ArrayNormalizer.exec(jprogram);
    Pruner.exec(jprogram,false);
    GenerateJavaScriptAST.exec(jprogram,jsProgram,obfuscate,prettyNames);
    JsNormalizer.exec(jsProgram);
    JsSymbolResolver.exec(jsProgram);
    if (obfuscate) {
      JsObfuscateNamer.exec(jsProgram);
    }
 else     if (prettyNames) {
      JsPrettyNamer.exec(jsProgram);
    }
 else {
      JsVerboseNamer.exec(jsProgram);
    }
    DefaultTextOutput out=new DefaultTextOutput(obfuscate);
    JsSourceGenerationVisitor v=new JsSourceGenerationVisitor(out);
    v.accept(jsProgram);
    return out.toString();
  }
 catch (  UnableToCompleteException e) {
    throw e;
  }
catch (  InternalCompilerException e) {
    TreeLogger topBranch=logger.branch(TreeLogger.ERROR,""String_Node_Str"",e);
    List nodeTrace=e.getNodeTrace();
    for (Iterator it=nodeTrace.iterator(); it.hasNext(); ) {
      NodeInfo nodeInfo=(NodeInfo)it.next();
      SourceInfo info=nodeInfo.getSourceInfo();
      String msg;
      if (info != null) {
        String fileName=info.getFileName();
        fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
        fileName=fileName.substring(fileName.lastIndexOf('\\') + 1);
        msg=""String_Node_Str"" + fileName + ""String_Node_Str""+ info.getStartLine()+ ""String_Node_Str"";
      }
 else {
        msg=""String_Node_Str"";
      }
      String description=nodeInfo.getDescription();
      if (description != null) {
        msg+=description;
      }
 else {
        msg+=""String_Node_Str"";
      }
      TreeLogger nodeBranch=topBranch.branch(TreeLogger.ERROR,msg,null);
      String className=nodeInfo.getClassName();
      if (className != null) {
        nodeBranch.log(TreeLogger.INFO,className,null);
      }
    }
    throw new UnableToCompleteException();
  }
catch (  Throwable e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
    throw new UnableToCompleteException();
  }
}"
83091,"public void computeTypeIds(){
  classes.add(null);
  jsonObjects.add(new JsonObject(program));
  for (Iterator it=program.getDeclaredTypes().iterator(); it.hasNext(); ) {
    JReferenceType type=(JReferenceType)it.next();
    if (type instanceof JClassType) {
      computeSourceClass((JClassType)type);
    }
  }
  for (Iterator it=program.getAllArrayTypes().iterator(); it.hasNext(); ) {
    JArrayType type=(JArrayType)it.next();
    computeSourceClass(type);
  }
  program.initTypeInfo(classes,jsonObjects);
  program.recordQueryIds(queryIds);
}","public void computeTypeIds(){
  classes.add(null);
  jsonObjects.add(new JsonObject(program));
  computeSourceClass(program.getTypeJavaLangString());
  assert(classes.size() == 2);
  for (Iterator it=program.getDeclaredTypes().iterator(); it.hasNext(); ) {
    JReferenceType type=(JReferenceType)it.next();
    if (type instanceof JClassType) {
      computeSourceClass((JClassType)type);
    }
  }
  for (Iterator it=program.getAllArrayTypes().iterator(); it.hasNext(); ) {
    JArrayType type=(JArrayType)it.next();
    computeSourceClass(type);
  }
  program.initTypeInfo(classes,jsonObjects);
  program.recordQueryIds(queryIds);
}"
83092,"private GenerateJavaScriptAST(JProgram program,JsProgram jsProgram){
  this.program=program;
  typeOracle=program.typeOracle;
  this.jsProgram=jsProgram;
  topScope=jsProgram.getScope();
  objectScope=jsProgram.getObjectScope();
  interfaceScope=new JsScope(objectScope,""String_Node_Str"");
}","private GenerateJavaScriptAST(JProgram program,JsProgram jsProgram,boolean obfuscate,boolean prettyNames){
  this.program=program;
  typeOracle=program.typeOracle;
  this.jsProgram=jsProgram;
  topScope=jsProgram.getScope();
  objectScope=jsProgram.getObjectScope();
  interfaceScope=new JsScope(objectScope,""String_Node_Str"");
  this.obfuscate=obfuscate;
  this.prettyNames=prettyNames;
  if (obfuscate) {
    specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
    specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
    specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
    specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
    specialObfuscatedIdents.put(""String_Node_Str"",""String_Node_Str"");
  }
}"
83093,"private void generateTypeTable(JsVars vars){
  JField typeIdArray=program.getSpecialField(""String_Node_Str"");
  JsName jsName=getName(typeIdArray);
  JsArrayLiteral arrayLit=new JsArrayLiteral();
  for (int i=0; i < program.getJsonTypeTable().size(); ++i) {
    JsonObject jsonObject=(JsonObject)program.getJsonTypeTable().get(i);
    accept(jsonObject);
    arrayLit.getExpressions().add((JsExpression)pop());
  }
  JsVar var=new JsVar(jsName);
  var.setInitExpr(arrayLit);
  vars.add(var);
}","private void generateTypeTable(JsVars vars){
  JField typeIdArray=program.getSpecialField(""String_Node_Str"");
  JsName typeIdArrayName=getName(typeIdArray);
  if (typeIdArrayName == null) {
    return;
  }
  JsArrayLiteral arrayLit=new JsArrayLiteral();
  for (int i=0; i < program.getJsonTypeTable().size(); ++i) {
    JsonObject jsonObject=(JsonObject)program.getJsonTypeTable().get(i);
    accept(jsonObject);
    arrayLit.getExpressions().add((JsExpression)pop());
  }
  JsVar var=new JsVar(typeIdArrayName);
  var.setInitExpr(arrayLit);
  vars.add(var);
}"
83094,"private void generateTypeName(JClassType x,JsStatements globalStmts){
  JField typeIdField=program.getSpecialField(""String_Node_Str"");
  JsNameRef lhs=getName(typeIdField).makeRef();
  lhs.setQualifier(globalTemp.makeRef());
  String className=getClassName(x.getName());
  String packageName=getPackageName(x.getName());
  JsExpression rhs;
  if (packageName.length() > 0) {
    JsName name=(JsName)packageNames.get(packageName);
    rhs=new JsBinaryOperation(JsBinaryOperator.ADD,name.makeRef(),jsProgram.getStringLiteral(className));
  }
 else {
    rhs=jsProgram.getStringLiteral(x.getName());
  }
  JsExpression asg=createAssignment(lhs,rhs);
  globalStmts.add(new JsExprStmt(asg));
}","private void generateTypeName(JClassType x,JsStatements globalStmts){
  JField typeNameField=program.getSpecialField(""String_Node_Str"");
  JsName typeNameName=getName(typeNameField);
  if (typeNameName == null) {
    return;
  }
  JsNameRef lhs=typeNameName.makeRef();
  lhs.setQualifier(globalTemp.makeRef());
  String className=getClassName(x.getName());
  String packageName=getPackageName(x.getName());
  JsExpression rhs;
  if (packageName.length() > 0) {
    JsNameRef packageRef=((JsName)packageNames.get(packageName)).makeRef();
    rhs=new JsBinaryOperation(JsBinaryOperator.ADD,packageRef,jsProgram.getStringLiteral(className));
  }
 else {
    rhs=jsProgram.getStringLiteral(x.getName());
  }
  JsExpression asg=createAssignment(lhs,rhs);
  globalStmts.add(new JsExprStmt(asg));
}"
83095,"private void generateTypeId(JClassType x,JsStatements globalStmts){
  int typeId=program.getTypeId(x);
  if (typeId >= 0) {
    JField typeIdField=program.getSpecialField(""String_Node_Str"");
    JsNameRef fieldRef=getName(typeIdField).makeRef();
    fieldRef.setQualifier(globalTemp.makeRef());
    JsIntegralLiteral typeIdLit=jsProgram.getIntegralLiteral(BigInteger.valueOf(typeId));
    JsExpression asg=createAssignment(fieldRef,typeIdLit);
    globalStmts.add(new JsExprStmt(asg));
  }
}","private void generateTypeId(JClassType x,JsStatements globalStmts){
  int typeId=program.getTypeId(x);
  if (typeId >= 0) {
    JField typeIdField=program.getSpecialField(""String_Node_Str"");
    JsName typeIdName=getName(typeIdField);
    if (typeIdName == null) {
      return;
    }
    JsNameRef fieldRef=typeIdName.makeRef();
    fieldRef.setQualifier(globalTemp.makeRef());
    JsIntegralLiteral typeIdLit=jsProgram.getIntegralLiteral(BigInteger.valueOf(typeId));
    JsExpression asg=createAssignment(fieldRef,typeIdLit);
    globalStmts.add(new JsExprStmt(asg));
  }
}"
83096,"public static void exec(JProgram program,JsProgram jsProgram){
  GenerateJavaScriptAST generateJavaScriptAST=new GenerateJavaScriptAST(program,jsProgram);
  generateJavaScriptAST.execImpl();
}","public static void exec(JProgram program,JsProgram jsProgram,boolean obfuscate,boolean prettyNames){
  GenerateJavaScriptAST generateJavaScriptAST=new GenerateJavaScriptAST(program,jsProgram,obfuscate,prettyNames);
  generateJavaScriptAST.execImpl();
}"
83097,"/** 
 * Sets the vertical alignment of the given widget within its cell.
 * @param w the widget whose vertical alignment is to be set
 * @param align the widget's vertical alignment, as defined in{@link HasVerticalAlignment}.
 */
public void setCellVerticalAlignment(Widget w,VerticalAlignmentConstant align){
  Element td=getWidgetTd(w);
  if (td != null) {
    DOM.setStyleAttribute(td,""String_Node_Str"",align.getVerticalAlignString());
  }
}","protected void setCellVerticalAlignment(Element td,VerticalAlignmentConstant align){
  DOM.setStyleAttribute(td,""String_Node_Str"",align.getVerticalAlignString());
}"
83098,"/** 
 * Sets the horizontal alignment of the given widget within its cell.
 * @param w the widget whose horizontal alignment is to be set
 * @param align the widget's horizontal alignment, as defined in{@link HasHorizontalAlignment}.
 */
public void setCellHorizontalAlignment(Widget w,HorizontalAlignmentConstant align){
  Element td=getWidgetTd(w);
  if (td != null) {
    DOM.setElementProperty(td,""String_Node_Str"",align.getTextAlignString());
  }
}","protected void setCellHorizontalAlignment(Element td,HorizontalAlignmentConstant align){
  DOM.setElementProperty(td,""String_Node_Str"",align.getTextAlignString());
}"
83099,"/** 
 * Adds a new child widget to the panel.
 * @param w the child widget to be added
 * @param container the element within which the child will be contained
 * @return the index at which the widget was added
 */
protected int add(Widget w,Element container){
  return insert(w,container,getChildren().size());
}","/** 
 * Adds a new child widget to the panel.
 * @param w the child widget to be added
 * @param container the element within which the child will be contained
 */
protected void add(Widget w,Element container){
  insert(w,container,getChildren().size());
}"
83100,"/** 
 * Inserts a new child widget into the panel.
 * @param w the child widget to be added
 * @param container the element within which the child will be contained
 * @param beforeIndex the index before which the widget will be added
 * @return the index at which the widget was added
 */
protected int insert(Widget w,Element container,int beforeIndex){
  if ((beforeIndex < 0) || (beforeIndex > getWidgetCount())) {
    throw new IndexOutOfBoundsException();
  }
  int idx=getWidgetIndex(w);
  if (idx == -1) {
    w.removeFromParent();
  }
 else {
    remove(w);
    if (idx < beforeIndex) {
      beforeIndex--;
    }
  }
  adopt(w,container);
  getChildren().insert(w,beforeIndex);
  return beforeIndex;
}","/** 
 * Inserts a new child widget into the panel.
 * @param w the child widget to be added
 * @param container the element within which the child will be contained
 * @param beforeIndex the index before which the widget will be added
 */
protected void insert(Widget w,Element container,int beforeIndex){
  beforeIndex=adjustIndex(w,beforeIndex);
  adopt(w,container);
  getChildren().insert(w,beforeIndex);
}"
83101,"/** 
 * Shows the widget at the specified index. This causes the currently- visible widget to be hidden.
 * @param index the index of the widget to be shown
 */
public void showWidget(int index){
  checkIndex(index);
  if (visibleWidget != null) {
    visibleWidget.setVisible(false);
  }
  visibleWidget=getWidget(index);
  visibleWidget.setVisible(true);
}","/** 
 * Shows the widget at the specified index. This causes the currently- visible widget to be hidden.
 * @param index the index of the widget to be shown
 */
public void showWidget(int index){
  checkIndexBoundsForAccess(index);
  if (visibleWidget != null) {
    visibleWidget.setVisible(false);
  }
  visibleWidget=getWidget(index);
  visibleWidget.setVisible(true);
}"
83102,"/** 
 * Inserts a widget before the specified index. If the Widget is already attached to the HorizontalPanel, it will be moved to the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  Element td=DOM.createTD();
  beforeIndex=super.insert(w,td,beforeIndex);
  DOM.insertChild(tableRow,td,beforeIndex);
  setCellHorizontalAlignment(w,horzAlign);
  setCellVerticalAlignment(w,vertAlign);
}","/** 
 * Inserts a widget before the specified index. If the Widget is already attached to the HorizontalPanel, it will be moved to the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  checkIndexBoundsForInsertion(beforeIndex);
  Element td=DOM.createTD();
  setCellHorizontalAlignment(td,horzAlign);
  setCellVerticalAlignment(td,vertAlign);
  DOM.insertChild(tableRow,td,beforeIndex);
  super.insert(w,td,beforeIndex);
}"
83103,"public boolean remove(Widget w){
  if (w.getParent() != this) {
    return false;
  }
  Element td=DOM.getParent(w.getElement());
  DOM.removeChild(tableRow,td);
  super.remove(w);
  return true;
}","public boolean remove(Widget w){
  if (w.getParent() != this) {
    return false;
  }
  Element td=DOM.getParent(w.getElement());
  super.remove(w);
  DOM.removeChild(tableRow,td);
  return true;
}"
83104,"/** 
 * This method must be called whenever a Widget is removed. It ensures that the Widget's parent is cleared.
 * @param w the widget to be disowned
 */
protected void disown(Widget w){
  if (w.getParent() != this) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Element elem=w.getElement();
  w.setParent(null);
  DOM.removeChild(DOM.getParent(elem),elem);
}","/** 
 * This method must be called whenever a Widget is removed. It ensures that the Widget's parent is cleared. It also detaches the Widget's DOM element from its container, ensuring that this process occurs in the right order.
 * @param w the widget to be disowned
 */
protected void disown(Widget w){
  if (w.getParent() != this) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Element elem=w.getElement();
  w.setParent(null);
  DOM.removeChild(DOM.getParent(elem),elem);
}"
83105,"/** 
 * Inserts a widget before the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  Element trh=DOM.createTR();
  Element tdh=DOM.createTD();
  DOM.appendChild(trh,tdh);
  Element trb=DOM.createTR();
  Element tdb=DOM.createTD();
  DOM.appendChild(trb,tdb);
  beforeIndex=super.insert(w,tdb,beforeIndex);
  int effectiveIndex=beforeIndex * 2;
  DOM.insertChild(body,trb,effectiveIndex);
  DOM.insertChild(body,trh,effectiveIndex);
  setStyleName(tdh,""String_Node_Str"",true);
  DOM.setElementPropertyInt(tdh,""String_Node_Str"",hashCode());
  DOM.setElementProperty(tdh,""String_Node_Str"",""String_Node_Str"");
  DOM.setElementProperty(tdb,""String_Node_Str"",""String_Node_Str"");
  DOM.setElementProperty(tdb,""String_Node_Str"",""String_Node_Str"");
  updateIndicesFrom(beforeIndex);
  if (visibleStack == -1) {
    showStack(0);
  }
 else {
    setStackVisible(beforeIndex,false);
    if (visibleStack >= beforeIndex) {
      ++visibleStack;
    }
  }
}","/** 
 * Inserts a widget before the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  Element trh=DOM.createTR();
  Element tdh=DOM.createTD();
  DOM.appendChild(trh,tdh);
  Element trb=DOM.createTR();
  Element tdb=DOM.createTD();
  DOM.appendChild(trb,tdb);
  beforeIndex=adjustIndex(w,beforeIndex);
  int effectiveIndex=beforeIndex * 2;
  DOM.insertChild(body,trb,effectiveIndex);
  DOM.insertChild(body,trh,effectiveIndex);
  setStyleName(tdh,""String_Node_Str"",true);
  DOM.setElementPropertyInt(tdh,""String_Node_Str"",hashCode());
  DOM.setElementProperty(tdh,""String_Node_Str"",""String_Node_Str"");
  DOM.setElementProperty(tdb,""String_Node_Str"",""String_Node_Str"");
  DOM.setElementProperty(tdb,""String_Node_Str"",""String_Node_Str"");
  super.insert(w,tdb,beforeIndex);
  updateIndicesFrom(beforeIndex);
  if (visibleStack == -1) {
    showStack(0);
  }
 else {
    setStackVisible(beforeIndex,false);
    if (visibleStack >= beforeIndex) {
      ++visibleStack;
    }
  }
}"
83106,"private boolean remove(Widget child,int index){
  if (child.getParent() != this) {
    return false;
  }
  if (visibleStack == index) {
    visibleStack=-1;
  }
 else   if (visibleStack > index) {
    --visibleStack;
  }
  int rowIndex=2 * index;
  Element tr=DOM.getChild(body,rowIndex);
  DOM.removeChild(body,tr);
  tr=DOM.getChild(body,rowIndex);
  DOM.removeChild(body,tr);
  super.remove(child);
  updateIndicesFrom(rowIndex);
  return true;
}","private boolean remove(Widget child,int index){
  if (child.getParent() != this) {
    return false;
  }
  super.remove(child);
  if (visibleStack == index) {
    visibleStack=-1;
  }
 else   if (visibleStack > index) {
    --visibleStack;
  }
  int rowIndex=2 * index;
  Element tr=DOM.getChild(body,rowIndex);
  DOM.removeChild(body,tr);
  tr=DOM.getChild(body,rowIndex);
  DOM.removeChild(body,tr);
  updateIndicesFrom(rowIndex);
  return true;
}"
83107,"public void onBrowserEvent(Event event){
switch (DOM.eventGetType(event)) {
case Event.ONMOUSEDOWN:
{
      Element target=DOM.eventGetTarget(event);
      if (DOM.isOrHasChild(splitElem,target)) {
        startResizingFrom(DOM.eventGetClientX(event) - getAbsoluteLeft(),DOM.eventGetClientY(event) - getAbsoluteTop());
        DOM.eventPreventDefault(event);
      }
      break;
    }
case Event.ONMOUSEUP:
{
    stopResizing();
    break;
  }
case Event.ONMOUSEMOVE:
{
  if (isResizing()) {
    onSplitterResize(DOM.eventGetClientX(event) - getAbsoluteLeft(),DOM.eventGetClientY(event) - getAbsoluteTop());
    DOM.eventPreventDefault(event);
  }
  break;
}
}
}","public void onBrowserEvent(Event event){
}"
83108,"public native void setImgSrc(Element img,String src);","/** 
 * Works around an IE problem where multiple images trying to load at the same time will generate a request per image. We fix this by only allowing the first image of a given URL to set its source immediately, but simultaneous requests for the same URL don't actually get their source set until the original load is complete.
 */
public void setImgSrc(Element img,String src){
  ImageSrcIE6.setImgSrc(img,src);
}"
83109,public native String getImgSrc(Element img);,"public String getImgSrc(Element img){
  return ImageSrcIE6.getImgSrc(img);
}"
83110,"/** 
 * Instantiates a class via deferred binding. <p> The argument to   {@link #create(Class)}&#160;<i>must</i> be a class literal because the web mode compiler must be able to statically determine the requested type at compile-time. This can be tricky because using a  {@link Class} variable may appear to work correctly in hosted mode.</p>
 * @param classLiteral a class literal specifying the base class to beinstantiated
 * @return the new instance, which must be typecast to the requested class.
 */
public static Object create(Class classLiteral){
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * Instantiates a class via deferred binding. <p> The argument to   {@link #create(Class)}&#160;<i>must</i> be a class literal because the web mode compiler must be able to statically determine the requested type at compile-time. This can be tricky because using a  {@link Class} variable may appear to work correctly in hosted mode.</p>
 * @param classLiteral a class literal specifying the base class to beinstantiated
 * @return the new instance, which must be typecast to the requested class.
 */
public static Object create(Class classLiteral){
  throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}"
83111,"/** 
 * Tests the ability of the Window to get the client size correctly with and without visible scroll bars.
 */
public void testGetClientSize(){
  Window.enableScrolling(false);
  int oldClientHeight=Window.getClientHeight();
  int oldClientWidth=Window.getClientWidth();
  assertTrue(oldClientHeight > 0);
  assertTrue(oldClientWidth > 0);
  Window.enableScrolling(true);
  Label largeDOM=new Label();
  largeDOM.setPixelSize(oldClientWidth + 100,oldClientHeight + 100);
  RootPanel.get().add(largeDOM);
  int newClientHeight=Window.getClientHeight();
  int newClientWidth=Window.getClientWidth();
  assertTrue(newClientHeight < oldClientHeight);
  assertTrue(newClientWidth < oldClientWidth);
  largeDOM.setPixelSize(oldClientWidth + 500,oldClientHeight + 500);
  int finalClientHeight=Window.getClientHeight();
  int finalClientWidth=Window.getClientWidth();
  assertEquals(newClientHeight,finalClientHeight);
  assertEquals(newClientWidth,finalClientWidth);
}","/** 
 * Tests the ability of the Window to get the client size correctly with and without visible scroll bars.
 */
public void testGetClientSize(){
  Window.enableScrolling(false);
  final int oldClientHeight=Window.getClientHeight();
  final int oldClientWidth=Window.getClientWidth();
  assertTrue(oldClientHeight > 0);
  assertTrue(oldClientWidth > 0);
  Window.enableScrolling(true);
  final Label largeDOM=new Label();
  largeDOM.setPixelSize(oldClientWidth + 100,oldClientHeight + 100);
  RootPanel.get().add(largeDOM);
  DeferredCommand.addCommand(new Command(){
    public void execute(){
      int newClientHeight=Window.getClientHeight();
      int newClientWidth=Window.getClientWidth();
      assertTrue(newClientHeight < oldClientHeight);
      assertTrue(newClientWidth < oldClientWidth);
      finishTest();
    }
  }
);
  delayTestFinish(200);
}"
83112,"/** 
 * Wraps a JSO-typed argument if the target array element type might generate an array store check.
 */
private JExpression checkAndReplaceJsoArrayStore(JExpression arg,JType targetType){
  if (!(targetType instanceof JReferenceType)) {
    return arg;
  }
  if (((JReferenceType)targetType).isFinal()) {
    return arg;
  }
  if (!program.isJavaScriptObject(arg.getType())) {
    return arg;
  }
  JCastOperation cast=new JCastOperation(program,arg.getSourceInfo(),targetType,arg);
  return cast;
}","/** 
 * Wraps a JSO-typed argument. TODO: We could eliminate casts cases where the array instance was never cast to a weaker type.
 */
private JExpression checkAndReplaceJsoArrayStore(JExpression arg,JType targetType){
  if (!(targetType instanceof JReferenceType)) {
    return arg;
  }
  if (!program.isJavaScriptObject(arg.getType())) {
    return arg;
  }
  JCastOperation cast=new JCastOperation(program,arg.getSourceInfo(),targetType,arg);
  return cast;
}"
83113,"public void testJso(){
  Foo foo=getFoo();
  assertEquals(""String_Node_Str"",foo.toString());
  JavaScriptObject jso=foo;
  assertEquals(""String_Node_Str"",jso.toString());
  Object y=noOptimizeFalse() ? new Object() : foo;
  assertEquals(""String_Node_Str"",y.toString());
  jso=getJso();
  assertEquals(""String_Node_Str"",jso.toString());
  try {
    JavaScriptObject[] typeTightenedFooArray=new Foo[3];
    typeTightenedFooArray[0]=getJso();
    fail();
  }
 catch (  ArrayStoreException e) {
  }
  try {
    JavaScriptObject[] fooArray=noOptimizeFalse() ? new JavaScriptObject[3] : new Foo[3];
    fooArray[0]=getJso();
    fail();
  }
 catch (  ArrayStoreException e) {
  }
  JavaScriptObject[] jsoArray=noOptimizeFalse() ? new Foo[3] : new JavaScriptObject[3];
  jsoArray[0]=getJso();
}","public void testJso(){
  Foo foo=getFoo();
  assertEquals(""String_Node_Str"",foo.toString());
  JavaScriptObject jso=foo;
  assertEquals(""String_Node_Str"",jso.toString());
  Object y=noOptimizeFalse() ? new Object() : foo;
  assertEquals(""String_Node_Str"",y.toString());
  jso=getJso();
  assertEquals(""String_Node_Str"",jso.toString());
}"
83114,"/** 
 * Gets the modified style name.
 * @return the modified style name
 */
private String getCSSStyleName(){
  return getBaseStyleName() + ""String_Node_Str"" + curFace.getName();
}","/** 
 * Gets the modified style name.
 * @return the modified style name
 */
private String getCSSStyleName(){
  return getStyleName() + ""String_Node_Str"" + curFace.getName();
}"
83115,"public int invoke(int execState,int jsthis,int[] jsargs){
  int jsFalse=LowLevelSaf.convertBoolean(false);
  LowLevelSaf.pushExecState(execState);
  try {
    if (!LowLevelSaf.isWrappedDispatch(jsthis)) {
      return jsFalse;
    }
    Object thisObj=LowLevelSaf.unwrapDispatch(jsthis);
    if (!(thisObj instanceof ExternalObject)) {
      return jsFalse;
    }
    if (jsargs.length < 2) {
      return jsFalse;
    }
    if (!LowLevelSaf.isObject(jsargs[0])) {
      return jsFalse;
    }
    if (!LowLevelSaf.isString(jsargs[1])) {
      return jsFalse;
    }
    String moduleName=LowLevelSaf.coerceToString(execState,jsargs[1]);
    boolean result=((ExternalObject)thisObj).gwtOnLoad(jsargs[0],moduleName);
    return LowLevelSaf.convertBoolean(result);
  }
 catch (  Throwable e) {
    return jsFalse;
  }
 finally {
    LowLevelSaf.popExecState(execState);
  }
}","public int invoke(int execState,int jsthis,int[] jsargs){
  int jsFalse=LowLevelSaf.convertBoolean(false);
  LowLevelSaf.pushExecState(execState);
  try {
    if (!LowLevelSaf.isWrappedDispatch(jsthis)) {
      return jsFalse;
    }
    Object thisObj=LowLevelSaf.unwrapDispatch(jsthis);
    if (!(thisObj instanceof ExternalObject)) {
      return jsFalse;
    }
    if (jsargs.length < 2) {
      return jsFalse;
    }
    if (!LowLevelSaf.isObject(jsargs[0])) {
      return jsFalse;
    }
    if (!LowLevelSaf.isNull(jsargs[1]) && !LowLevelSaf.isString(jsargs[1])) {
      return jsFalse;
    }
    String moduleName=LowLevelSaf.coerceToString(execState,jsargs[1]);
    boolean result=((ExternalObject)thisObj).gwtOnLoad(jsargs[0],moduleName);
    return LowLevelSaf.convertBoolean(result);
  }
 catch (  Throwable e) {
    return jsFalse;
  }
 finally {
    LowLevelSaf.popExecState(execState);
  }
}"
83116,"/** 
 * Returns an   {@link RPCRequest} that is built by decoding the contents of anencoded RPC request and optionally validating that type can handle the request. If the type parameter is not <code>null</code>, the implementation checks that the type is assignable to the {@link RemoteService} interface requested in the encoded request string.<p> Invoking this method with <code>null</code> for the type parameter, <code>decodeRequest(encodedRequest, null)</code>, is equivalent to calling <code>decodeRequest(encodedRequest)</code>. </p>
 * @param encodedRequest a string that encodes the {@link RemoteService}interface, the service method, and the arguments to pass to the service method
 * @param type if not <code>null</code>, the implementation checks that thetype is assignable to the  {@link RemoteService} interface encodedin the encoded request string.
 * @return an {@link RPCRequest} instance
 * @throws NullPointerException if the encodedRequest is <code>null</code>
 * @throws IllegalArgumentException if the encodedRequest is an empty string
 * @throws IncompatibleRemoteServiceException if any of the followingconditions apply: <ul> <li>if the types in the encoded request cannot be deserialized</li> <li><code>RPC.class.getClassLoader()</code> cannot load the service interface requested in the encodedRequest</li> <li>the requested interface is not assignable to {@link RemoteService}</li> <li>the service method requested in the encodedRequest is not a member of the requested service interface</li> <li>the type parameter is not <code>null</code> and is not assignable to the requested   {@link RemoteService} interface</ul>
 */
public static RPCRequest decodeRequest(String encodedRequest,Class type){
  if (encodedRequest == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (encodedRequest.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    ServerSerializationStreamReader streamReader=new ServerSerializationStreamReader(serializableTypeOracle);
    streamReader.prepareToRead(encodedRequest);
    String serviceIntfName=streamReader.readString();
    if (type != null) {
      if (!implementsInterface(type,serviceIntfName)) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str""+ printTypeName(type)+ ""String_Node_Str"");
      }
    }
    Class serviceIntf;
    try {
      serviceIntf=getClassFromSerializedName(serviceIntfName);
      if (!RemoteService.class.isAssignableFrom(serviceIntf)) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + printTypeName(serviceIntf) + ""String_Node_Str"");
      }
    }
 catch (    ClassNotFoundException e) {
      throw new IncompatibleRemoteServiceException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str"",e);
    }
    String serviceMethodName=streamReader.readString();
    int paramCount=streamReader.readInt();
    Class[] parameterTypes=new Class[paramCount];
    for (int i=0; i < parameterTypes.length; i++) {
      String paramClassName=streamReader.readString();
      try {
        parameterTypes[i]=getClassFromSerializedName(paramClassName);
      }
 catch (      ClassNotFoundException e) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + i + ""String_Node_Str""+ paramClassName+ ""String_Node_Str"",e);
      }
    }
    Method method=findInterfaceMethod(serviceIntf,serviceMethodName,parameterTypes,true);
    if (method == null) {
      throw new IncompatibleRemoteServiceException(formatMethodNotFoundErrorMessage(serviceIntf,serviceMethodName,parameterTypes));
    }
    Object[] parameterValues=new Object[parameterTypes.length];
    for (int i=0; i < parameterValues.length; i++) {
      parameterValues[i]=streamReader.deserializeValue(parameterTypes[i]);
    }
    return new RPCRequest(method,parameterValues);
  }
 catch (  SerializationException ex) {
    throw new IncompatibleRemoteServiceException(ex.getMessage(),ex);
  }
}","/** 
 * Returns an   {@link RPCRequest} that is built by decoding the contents of anencoded RPC request and optionally validating that type can handle the request. If the type parameter is not <code>null</code>, the implementation checks that the type is assignable to the {@link RemoteService} interface requested in the encoded request string.<p> Invoking this method with <code>null</code> for the type parameter, <code>decodeRequest(encodedRequest, null)</code>, is equivalent to calling <code>decodeRequest(encodedRequest)</code>. </p>
 * @param encodedRequest a string that encodes the {@link RemoteService}interface, the service method, and the arguments to pass to the service method
 * @param type if not <code>null</code>, the implementation checks that thetype is assignable to the  {@link RemoteService} interface encodedin the encoded request string.
 * @return an {@link RPCRequest} instance
 * @throws NullPointerException if the encodedRequest is <code>null</code>
 * @throws IllegalArgumentException if the encodedRequest is an empty string
 * @throws IncompatibleRemoteServiceException if any of the followingconditions apply: <ul> <li>if the types in the encoded request cannot be deserialized</li> <li>if the  {@link ClassLoader} acquired from<code>Thread.currentThread().getContextClassLoader()</code> cannot load the service interface or any of the types specified in the encodedRequest</li> <li>the requested interface is not assignable to {@link RemoteService}</li> <li>the service method requested in the encodedRequest is not a member of the requested service interface</li> <li>the type parameter is not <code>null</code> and is not assignable to the requested   {@link RemoteService} interface</ul>
 */
public static RPCRequest decodeRequest(String encodedRequest,Class type){
  if (encodedRequest == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (encodedRequest.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  try {
    ServerSerializationStreamReader streamReader=new ServerSerializationStreamReader(serializableTypeOracle,classLoader);
    streamReader.prepareToRead(encodedRequest);
    String serviceIntfName=streamReader.readString();
    if (type != null) {
      if (!implementsInterface(type,serviceIntfName)) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str""+ printTypeName(type)+ ""String_Node_Str"");
      }
    }
    Class serviceIntf;
    try {
      serviceIntf=getClassFromSerializedName(serviceIntfName,classLoader);
      if (!RemoteService.class.isAssignableFrom(serviceIntf)) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + printTypeName(serviceIntf) + ""String_Node_Str"");
      }
    }
 catch (    ClassNotFoundException e) {
      throw new IncompatibleRemoteServiceException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str"",e);
    }
    String serviceMethodName=streamReader.readString();
    int paramCount=streamReader.readInt();
    Class[] parameterTypes=new Class[paramCount];
    for (int i=0; i < parameterTypes.length; i++) {
      String paramClassName=streamReader.readString();
      try {
        parameterTypes[i]=getClassFromSerializedName(paramClassName,classLoader);
      }
 catch (      ClassNotFoundException e) {
        throw new IncompatibleRemoteServiceException(""String_Node_Str"" + i + ""String_Node_Str""+ paramClassName+ ""String_Node_Str"",e);
      }
    }
    Method method=findInterfaceMethod(serviceIntf,serviceMethodName,parameterTypes,true);
    if (method == null) {
      throw new IncompatibleRemoteServiceException(formatMethodNotFoundErrorMessage(serviceIntf,serviceMethodName,parameterTypes));
    }
    Object[] parameterValues=new Object[parameterTypes.length];
    for (int i=0; i < parameterValues.length; i++) {
      parameterValues[i]=streamReader.deserializeValue(parameterTypes[i]);
    }
    return new RPCRequest(method,parameterValues);
  }
 catch (  SerializationException ex) {
    throw new IncompatibleRemoteServiceException(ex.getMessage(),ex);
  }
}"
83117,"/** 
 * Returns the   {@link Class} instance for the named class or primitive type.
 * @param serializedName the serialized name of a class or primitive type
 * @return Class instance for the given type name
 * @throws ClassNotFoundException if the named type was not found
 */
private static Class getClassFromSerializedName(String serializedName) throws ClassNotFoundException {
  Object value=TYPE_NAMES.get(serializedName);
  if (value != null) {
    return (Class)value;
  }
  return Class.forName(serializedName,false,RPC.class.getClassLoader());
}","/** 
 * Returns the   {@link Class} instance for the named class or primitive type.
 * @param serializedName the serialized name of a class or primitive type
 * @param classLoader the classLoader used to load {@link Class}es
 * @return Class instance for the given type name
 * @throws ClassNotFoundException if the named type was not found
 */
private static Class getClassFromSerializedName(String serializedName,ClassLoader classLoader) throws ClassNotFoundException {
  Object value=TYPE_NAMES.get(serializedName);
  if (value != null) {
    return (Class)value;
  }
  return Class.forName(serializedName,false,classLoader);
}"
83118,"public ServerSerializationStreamReader(ServerSerializableTypeOracle serializableTypeOracle){
  this.serializableTypeOracle=serializableTypeOracle;
}","public ServerSerializationStreamReader(ServerSerializableTypeOracle serializableTypeOracle,ClassLoader classLoader){
  this.classLoader=classLoader;
  this.serializableTypeOracle=serializableTypeOracle;
}"
83119,"protected Object deserialize(String typeSignature) throws SerializationException {
  Object instance=null;
  SerializedInstanceReference serializedInstRef=serializableTypeOracle.decodeSerializedInstanceReference(typeSignature);
  try {
    Class instanceClass=Class.forName(serializedInstRef.getName(),false,this.getClass().getClassLoader());
    if (!serializableTypeOracle.isSerializable(instanceClass)) {
      throw new SerializationException(""String_Node_Str"" + instanceClass.getName() + ""String_Node_Str"");
    }
    validateTypeVersions(instanceClass,serializedInstRef);
    Class customSerializer=serializableTypeOracle.hasCustomFieldSerializer(instanceClass);
    instance=instantiate(customSerializer,instanceClass);
    rememberDecodedObject(instance);
    deserializeImpl(customSerializer,instanceClass,instance);
    return instance;
  }
 catch (  ClassNotFoundException e) {
    throw new SerializationException(e);
  }
catch (  InstantiationException e) {
    throw new SerializationException(e);
  }
catch (  IllegalAccessException e) {
    throw new SerializationException(e);
  }
catch (  IllegalArgumentException e) {
    throw new SerializationException(e);
  }
catch (  InvocationTargetException e) {
    throw new SerializationException(e);
  }
catch (  NoSuchMethodException e) {
    throw new SerializationException(e);
  }
}","protected Object deserialize(String typeSignature) throws SerializationException {
  Object instance=null;
  SerializedInstanceReference serializedInstRef=serializableTypeOracle.decodeSerializedInstanceReference(typeSignature);
  try {
    Class instanceClass=Class.forName(serializedInstRef.getName(),false,classLoader);
    if (!serializableTypeOracle.isSerializable(instanceClass)) {
      throw new SerializationException(""String_Node_Str"" + instanceClass.getName() + ""String_Node_Str"");
    }
    validateTypeVersions(instanceClass,serializedInstRef);
    Class customSerializer=serializableTypeOracle.hasCustomFieldSerializer(instanceClass);
    instance=instantiate(customSerializer,instanceClass);
    rememberDecodedObject(instance);
    deserializeImpl(customSerializer,instanceClass,instance);
    return instance;
  }
 catch (  ClassNotFoundException e) {
    throw new SerializationException(e);
  }
catch (  InstantiationException e) {
    throw new SerializationException(e);
  }
catch (  IllegalAccessException e) {
    throw new SerializationException(e);
  }
catch (  IllegalArgumentException e) {
    throw new SerializationException(e);
  }
catch (  InvocationTargetException e) {
    throw new SerializationException(e);
  }
catch (  NoSuchMethodException e) {
    throw new SerializationException(e);
  }
}"
83120,"/** 
 * A helper for widgets that source mouse events.
 * @param sender the widget sending the event
 * @param event the {@link Event} received by the widget
 */
public void fireMouseEvent(Widget sender,Event event){
  final Element senderElem=sender.getElement();
  int x=DOM.eventGetClientX(event) - DOM.getAbsoluteLeft(sender.getElement()) + DOM.getElementPropertyInt(senderElem,""String_Node_Str"") + Window.getScrollLeft();
  int y=DOM.eventGetClientY(event) - DOM.getAbsoluteTop(sender.getElement()) + DOM.getElementPropertyInt(senderElem,""String_Node_Str"") + Window.getScrollTop();
switch (DOM.eventGetType(event)) {
case Event.ONMOUSEDOWN:
    fireMouseDown(sender,x,y);
  break;
case Event.ONMOUSEUP:
fireMouseUp(sender,x,y);
break;
case Event.ONMOUSEMOVE:
fireMouseMove(sender,x,y);
break;
case Event.ONMOUSEOVER:
Element from=DOM.eventGetFromElement(event);
if (!DOM.isOrHasChild(sender.getElement(),from)) {
fireMouseEnter(sender);
}
break;
case Event.ONMOUSEOUT:
Element to=DOM.eventGetToElement(event);
if (!DOM.isOrHasChild(sender.getElement(),to)) {
fireMouseLeave(sender);
}
break;
}
}","/** 
 * A helper for widgets that source mouse events.
 * @param sender the widget sending the event
 * @param event the {@link Event} received by the widget
 */
public void fireMouseEvent(Widget sender,Event event){
  final Element senderElem=sender.getElement();
  int x=DOM.eventGetClientX(event) - DOM.getAbsoluteLeft(senderElem) + DOM.getElementPropertyInt(senderElem,""String_Node_Str"") + Window.getScrollLeft();
  int y=DOM.eventGetClientY(event) - DOM.getAbsoluteTop(senderElem) + DOM.getElementPropertyInt(senderElem,""String_Node_Str"") + Window.getScrollTop();
switch (DOM.eventGetType(event)) {
case Event.ONMOUSEDOWN:
    fireMouseDown(sender,x,y);
  break;
case Event.ONMOUSEUP:
fireMouseUp(sender,x,y);
break;
case Event.ONMOUSEMOVE:
fireMouseMove(sender,x,y);
break;
case Event.ONMOUSEOVER:
Element from=DOM.eventGetFromElement(event);
if (!DOM.isOrHasChild(senderElem,from)) {
fireMouseEnter(sender);
}
break;
case Event.ONMOUSEOUT:
Element to=DOM.eventGetToElement(event);
if (!DOM.isOrHasChild(senderElem,to)) {
fireMouseLeave(sender);
}
break;
}
}"
83121,"/** 
 * Tests whether or not this JSONObject contains the specified key. We use Object.hasOwnProperty here to verify that a given key is specified on this object rather than a superclass (such as standard properties defined on Object).
 * @param key the key to search for
 * @return <code>true</code> if the JSONObject contains the specified key
 */
public native boolean containsKey(String key);","/** 
 * Tests whether or not this JSONObject contains the specified key. We use Object.hasOwnProperty here to verify that a given key is specified on this object rather than a superclass (such as standard properties defined on Object).
 * @param key the key to search for
 * @return <code>true</code> if the JSONObject contains the specified key
 */
public boolean containsKey(String key){
  return get(key) != null;
}"
83122,"/** 
 * Gets the JSONValue associated with the specified key. We use Object.hasOwnProperty here to verify that a given key is specified on this object rather than a superclass (such as standard properties defined on Object).
 * @param key the key to search for
 * @return if found, the value associated with the specified key, or<code>null</code> otherwise
 */
public native JSONValue get(String key);","/** 
 * Gets the JSONValue associated with the specified key. We use Object.hasOwnProperty here to verify that a given key is specified on this object rather than a superclass (such as standard properties defined on Object).
 * @param key the key to search for
 * @return if found, the value associated with the specified key, or<code>null</code> otherwise
 */
public JSONValue get(String key){
  if (key == null) {
    return null;
  }
  JSONValue result=getFront(frontStore,key);
  if (result == null) {
    JavaScriptObject jso=removeBack(backStore,key);
    if (jso != UNDEFINED) {
      result=JSONParser.buildValue(jso);
      putFront(frontStore,key,result);
    }
  }
  return result;
}"
83123,"private native void addAllKeysFromJavascriptObject(Set s,JavaScriptObject javaScriptObject);","private static native void addAllKeysFromJavascriptObject(Set s,JavaScriptObject javaScriptObject);"
83124,"/** 
 * Maps the specified key to the specified value in this JSONObject. If the specified key already has an associated value, it is overwritten.
 * @param key the key to associate with the specified value
 * @param jsonValue the value to assoociate with this key
 * @return if one existed, the previous value associated with the key, or<code>null</code> otherwise
 */
public native JSONValue put(String key,JSONValue jsonValue);","/** 
 * Maps the specified key to the specified value in this JSONObject. If the specified key already has an associated value, it is overwritten.
 * @param key the key to associate with the specified value
 * @param jsonValue the value to associate with this key
 * @return if one existed, the previous value associated with the key, or<code>null</code> otherwise
 * @throws NullPointerException if key is <code>null</code>
 */
public JSONValue put(String key,JSONValue jsonValue){
  if (key == null) {
    throw new NullPointerException();
  }
  JSONValue previous=get(key);
  putFront(frontStore,key,jsonValue);
  return previous;
}"
83125,"public void testSimpleNested(){
  JSONObject j1=new JSONObject();
  j1.put(""String_Node_Str"",new JSONString(""String_Node_Str""));
  JSONObject j2=new JSONObject();
  j2.put(""String_Node_Str"",new JSONString(""String_Node_Str""));
  JSONObject j2_2=new JSONObject();
  j2_2.put(""String_Node_Str"",new JSONString(""String_Node_Str""));
  j2.put(""String_Node_Str"",j2_2);
  JSONObject j3=new JSONObject();
  j3.put(""String_Node_Str"",j1);
  j3.put(""String_Node_Str"",j2);
  assertEquals(""String_Node_Str"",j3.toString());
}","public void testSimpleNested(){
  JSONObject j1=new JSONObject();
  j1.put(""String_Node_Str"",new JSONString(""String_Node_Str""));
  JSONObject j2=new JSONObject();
  j2.put(""String_Node_Str"",new JSONString(""String_Node_Str""));
  JSONObject j22=new JSONObject();
  j22.put(""String_Node_Str"",new JSONString(""String_Node_Str""));
  j2.put(""String_Node_Str"",j22);
  JSONObject j3=new JSONObject();
  j3.put(""String_Node_Str"",j1);
  j3.put(""String_Node_Str"",j2);
  assertEquals(""String_Node_Str"",j3.toString());
}"
83126,"void onElementInitialized(){
  setHTMLImpl(DOM.getInnerHTML(beforeInitPlaceholder));
  beforeInitPlaceholder=null;
}","void onElementInitialized(){
  if (beforeInitPlaceholder != null) {
    setHTMLImpl(DOM.getInnerHTML(beforeInitPlaceholder));
    beforeInitPlaceholder=null;
  }
}"
83127,"public boolean hasClinit(JReferenceType type){
  if (hasDirectClinit(type)) {
    return true;
  }
  if (type != null && type.extnds != null) {
    return hasClinit(type.extnds);
  }
  return false;
}","public boolean hasClinit(JReferenceType type){
  return hasClinitSet.contains(type);
}"
83128,"/** 
 * We emulate static initializers and intance initializers as methods. As in other cases, this gives us: simpler AST, easier to optimize, more like output JavaScript.
 */
public void processType(TypeDeclaration x){
  currentClass=(JReferenceType)typeMap.get(x.binding);
  try {
    currentClassScope=x.scope;
    currentSeparatorPositions=x.compilationResult.lineSeparatorPositions;
    currentFileName=String.valueOf(x.compilationResult.fileName);
    if (x.fields != null) {
      for (int i=0, n=x.fields.length; i < n; ++i) {
        FieldDeclaration fieldDeclaration=x.fields[i];
        if (fieldDeclaration.isStatic()) {
          currentMethod=(JMethod)currentClass.methods.get(0);
          currentMethodScope=x.staticInitializerScope;
        }
 else {
          currentMethod=(JMethod)currentClass.methods.get(1);
          currentMethodScope=x.initializerScope;
        }
        if (fieldDeclaration instanceof Initializer) {
          assert(currentClass instanceof JClassType);
          processInitializer((Initializer)fieldDeclaration);
        }
 else {
          processField(fieldDeclaration);
        }
      }
    }
    currentMethodScope=null;
    currentMethod=null;
    if (x.methods != null) {
      for (int i=0, n=x.methods.length; i < n; ++i) {
        if (x.methods[i].isConstructor()) {
          assert(currentClass instanceof JClassType);
          processConstructor((ConstructorDeclaration)x.methods[i]);
        }
 else         if (x.methods[i].isClinit()) {
        }
 else {
          processMethod(x.methods[i]);
        }
      }
    }
    currentClassScope=null;
    currentClass=null;
    currentSeparatorPositions=null;
    currentFileName=null;
  }
 catch (  Throwable e) {
    throw translateException(currentClass,e);
  }
}","/** 
 * We emulate static initializers and intance initializers as methods. As in other cases, this gives us: simpler AST, easier to optimize, more like output JavaScript.
 */
public void processType(TypeDeclaration x){
  currentClass=(JReferenceType)typeMap.get(x.binding);
  try {
    currentClassScope=x.scope;
    currentSeparatorPositions=x.compilationResult.lineSeparatorPositions;
    currentFileName=String.valueOf(x.compilationResult.fileName);
    if (currentClass.extnds != null) {
      JMethod myClinit=(JMethod)currentClass.methods.get(0);
      JMethod superClinit=(JMethod)currentClass.extnds.methods.get(0);
      JMethodCall superClinitCall=new JMethodCall(program,myClinit.getSourceInfo(),null,superClinit);
      myClinit.body.statements.add(0,superClinitCall.makeStatement());
    }
    if (x.fields != null) {
      for (int i=0, n=x.fields.length; i < n; ++i) {
        FieldDeclaration fieldDeclaration=x.fields[i];
        if (fieldDeclaration.isStatic()) {
          currentMethod=(JMethod)currentClass.methods.get(0);
          currentMethodScope=x.staticInitializerScope;
        }
 else {
          currentMethod=(JMethod)currentClass.methods.get(1);
          currentMethodScope=x.initializerScope;
        }
        if (fieldDeclaration instanceof Initializer) {
          assert(currentClass instanceof JClassType);
          processInitializer((Initializer)fieldDeclaration);
        }
 else {
          processField(fieldDeclaration);
        }
      }
    }
    currentMethodScope=null;
    currentMethod=null;
    if (x.methods != null) {
      for (int i=0, n=x.methods.length; i < n; ++i) {
        if (x.methods[i].isConstructor()) {
          assert(currentClass instanceof JClassType);
          processConstructor((ConstructorDeclaration)x.methods[i]);
        }
 else         if (x.methods[i].isClinit()) {
        }
 else {
          processMethod(x.methods[i]);
        }
      }
    }
    currentClassScope=null;
    currentClass=null;
    currentSeparatorPositions=null;
    currentFileName=null;
  }
 catch (  Throwable e) {
    throw translateException(currentClass,e);
  }
}"
83129,"private void handleClinit(JsFunction clinitFunc,JReferenceType chainTo){
  JsStatements statements=clinitFunc.getBody().getStatements();
  JsExpression asg=createAssignment(clinitFunc.getName().makeRef(),nullMethodName.makeRef());
  statements.add(0,asg.makeStmt());
  if (chainTo != null) {
    JMethod chainToMeth=(JMethod)chainTo.methods.get(0);
    JsInvocation jsInvocation=new JsInvocation();
    JsNameRef qualifier=getName(chainToMeth).makeRef();
    jsInvocation.setQualifier(qualifier);
    statements.add(1,jsInvocation.makeStmt());
  }
}","private void handleClinit(JsFunction clinitFunc){
  JsStatements statements=clinitFunc.getBody().getStatements();
  JsExpression asg=createAssignment(clinitFunc.getName().makeRef(),nullMethodName.makeRef());
  statements.add(0,asg.makeStmt());
}"
83130,"private JsInvocation maybeCreateClinitCall(JMethod x){
  if (!x.isStatic()) {
    return null;
  }
  JReferenceType enclosingType=x.getEnclosingType();
  if (!typeOracle.hasClinit(enclosingType)) {
    return null;
  }
  if (program.isStaticImpl(x)) {
    return null;
  }
  if (x == enclosingType.methods.get(0)) {
    return null;
  }
  while (!typeOracle.hasDirectClinit(enclosingType)) {
    enclosingType=enclosingType.extnds;
  }
  JMethod clinitMethod=(JMethod)enclosingType.methods.get(0);
  JsInvocation jsInvocation=new JsInvocation();
  jsInvocation.setQualifier(getName(clinitMethod).makeRef());
  return jsInvocation;
}","private JsInvocation maybeCreateClinitCall(JMethod x){
  if (!x.isStatic()) {
    return null;
  }
  JReferenceType enclosingType=x.getEnclosingType();
  if (!typeOracle.hasClinit(enclosingType)) {
    return null;
  }
  if (program.isStaticImpl(x)) {
    return null;
  }
  if (x == enclosingType.methods.get(0)) {
    return null;
  }
  JMethod clinitMethod=(JMethod)enclosingType.methods.get(0);
  JsInvocation jsInvocation=new JsInvocation();
  jsInvocation.setQualifier(getName(clinitMethod).makeRef());
  return jsInvocation;
}"
83131,"public void testClinitSideEffectInlining(){
  sideEffectChecker=0;
  SideEffectCauser.causeClinitSideEffect();
  assertEquals(1,sideEffectChecker);
  SideEffectCauser2.causeClinitSideEffect();
  assertEquals(2,sideEffectChecker);
  SideEffectCauser3.causeClinitSideEffect();
  assertEquals(3,sideEffectChecker);
  String foo=SideEffectCauser4.causeClinitSideEffectOnRead;
  assertEquals(4,sideEffectChecker);
  jsniReadSideEffectCauser5();
  assertEquals(5,sideEffectChecker);
  foo=SideEffectCauser6.causeClinitSideEffectOnRead;
  assertEquals(6,sideEffectChecker);
  String checkRescued=NonSideEffectCauser.NOT_A_COMPILE_TIME_CONSTANT;
  assertEquals(null,checkRescued);
}","public void testClinitSideEffectInlining(){
  sideEffectChecker=0;
  SideEffectCauser.causeClinitSideEffect();
  assertEquals(1,sideEffectChecker);
  SideEffectCauser2.causeClinitSideEffect();
  assertEquals(2,sideEffectChecker);
  SideEffectCauser3.causeClinitSideEffect();
  assertEquals(3,sideEffectChecker);
  String foo=SideEffectCauser4.causeClinitSideEffectOnRead;
  assertEquals(4,sideEffectChecker);
  jsniReadSideEffectCauser5();
  assertEquals(5,sideEffectChecker);
  foo=SideEffectCauser6.causeClinitSideEffectOnRead;
  assertEquals(6,sideEffectChecker);
  new SideEffectCauser7();
  assertEquals(7,sideEffectChecker);
  String checkRescued=NonSideEffectCauser.NOT_A_COMPILE_TIME_CONSTANT;
  assertEquals(null,checkRescued);
}"
83132,"public String getHTML(String url,int left,int top,int width,int height){
  String clipperStyle=""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str"";
  String imgStyle=""String_Node_Str"" + url + ""String_Node_Str""+ -left+ ""String_Node_Str""+ -top+ ""String_Node_Str"";
  String clippedImgHtml=""String_Node_Str"" + clipperStyle + ""String_Node_Str""+ imgStyle+ ""String_Node_Str""+ (left + width)+ ""String_Node_Str""+ (top + height)+ ""String_Node_Str"";
  return clippedImgHtml;
}","public String getHTML(String url,int left,int top,int width,int height){
  String clipperStyle=""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str"";
  String imgStyle=""String_Node_Str"" + url + ""String_Node_Str""+ -left+ ""String_Node_Str""+ -top+ ""String_Node_Str"";
  String clippedImgHtml=""String_Node_Str"" + clipperStyle + ""String_Node_Str""+ moduleBaseUrlProtocol+ ""String_Node_Str""+ imgStyle+ ""String_Node_Str""+ (left + width)+ ""String_Node_Str""+ (top + height)+ ""String_Node_Str"";
  return clippedImgHtml;
}"
83133,"public void testArrayStore(){
  Object[][] oaa;
  oaa=new Object[4][4];
  oaa[0][0]=""String_Node_Str"";
  assertEquals(oaa[0][0],""String_Node_Str"");
  oaa=new Object[4][];
  oaa[0]=new Object[4];
  oaa[0][0]=""String_Node_Str"";
  assertEquals(oaa[0][0],""String_Node_Str"");
  Apple[] apple=noOptimizeTrue() ? new Granny[3] : new Apple[3];
  Apple g=noOptimizeTrue() ? (Apple)new Granny() : (Apple)new Fuji();
  Apple a=apple[0]=g;
  assertEquals(g,a);
}","public void testArrayStore(){
  Object[][] oaa;
  oaa=new Object[4][4];
  oaa[0][0]=""String_Node_Str"";
  assertEquals(oaa[0][0],""String_Node_Str"");
  oaa=new Object[4][];
  oaa[0]=new Object[4];
  oaa[0][0]=""String_Node_Str"";
  assertEquals(oaa[0][0],""String_Node_Str"");
  Apple[] apple=noOptimizeTrue() ? new Granny[3] : new Apple[3];
  Apple g=noOptimizeTrue() ? (Apple)new Granny() : (Apple)new Fuji();
  Apple a=apple[0]=g;
  assertEquals(g,a);
  byte[] bytes=new byte[10];
  bytes[0]=(byte)'1';
  assertEquals(49,bytes[0]);
}"
83134,"public Panels(Sink.Images images){
  HTML contents=new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ScrollPanel scroller=new ScrollPanel(contents);
  scroller.setStyleName(""String_Node_Str"");
  DockPanel dock=new DockPanel();
  dock.setHorizontalAlignment(DockPanel.ALIGN_CENTER);
  HTML north0=new HTML(""String_Node_Str"",true);
  HTML east=new HTML(""String_Node_Str"",true);
  HTML south=new HTML(""String_Node_Str"");
  HTML west=new HTML(""String_Node_Str"",true);
  HTML north1=new HTML(""String_Node_Str"",true);
  dock.add(north0,DockPanel.NORTH);
  dock.add(east,DockPanel.EAST);
  dock.add(south,DockPanel.SOUTH);
  dock.add(west,DockPanel.WEST);
  dock.add(north1,DockPanel.NORTH);
  dock.add(scroller,DockPanel.CENTER);
  DisclosurePanel disc=new DisclosurePanel(""String_Node_Str"");
  disc.setContent(new HTML(""String_Node_Str"" + ""String_Node_Str""));
  FlowPanel flow=new FlowPanel();
  for (int i=0; i < 8; ++i) {
    flow.add(new CheckBox(""String_Node_Str"" + i));
  }
  HorizontalPanel horz=new HorizontalPanel();
  horz.setVerticalAlignment(VerticalPanel.ALIGN_MIDDLE);
  horz.add(new Button(""String_Node_Str""));
  horz.add(new HTML(""String_Node_Str"",true));
  horz.add(new Button(""String_Node_Str""));
  VerticalPanel vert=new VerticalPanel();
  vert.setHorizontalAlignment(VerticalPanel.ALIGN_CENTER);
  vert.add(new Button(""String_Node_Str""));
  vert.add(new Button(""String_Node_Str""));
  vert.add(new Button(""String_Node_Str""));
  VerticalPanel vp=new VerticalPanel();
  vp.setHorizontalAlignment(VerticalPanel.ALIGN_CENTER);
  vp.setSpacing(8);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(disc);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(flow);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(horz);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(vert);
  Grid grid=new Grid(4,4);
  for (int r=0; r < 4; ++r) {
    for (int c=0; c < 4; ++c) {
      grid.setWidget(r,c,images.gwtLogo().createImage());
    }
  }
  TabPanel tabs=new TabPanel();
  tabs.add(vp,""String_Node_Str"");
  tabs.add(dock,""String_Node_Str"");
  tabs.add(grid,""String_Node_Str"");
  tabs.setWidth(""String_Node_Str"");
  tabs.selectTab(0);
  HorizontalSplitPanel hSplit=new HorizontalSplitPanel();
  hSplit.setLeftWidget(tabs);
  hSplit.setRightWidget(new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  initWidget(hSplit);
  hSplit.setWidth(""String_Node_Str"");
}","public Panels(Sink.Images images){
  HTML contents=new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ScrollPanel scroller=new ScrollPanel(contents);
  scroller.setStyleName(""String_Node_Str"");
  DockPanel dock=new DockPanel();
  dock.setHorizontalAlignment(DockPanel.ALIGN_CENTER);
  HTML north0=new HTML(""String_Node_Str"",true);
  HTML east=new HTML(""String_Node_Str"",true);
  HTML south=new HTML(""String_Node_Str"");
  HTML west=new HTML(""String_Node_Str"",true);
  HTML north1=new HTML(""String_Node_Str"",true);
  dock.add(north0,DockPanel.NORTH);
  dock.add(east,DockPanel.EAST);
  dock.add(south,DockPanel.SOUTH);
  dock.add(west,DockPanel.WEST);
  dock.add(north1,DockPanel.NORTH);
  dock.add(scroller,DockPanel.CENTER);
  DisclosurePanel disc=new DisclosurePanel(""String_Node_Str"");
  disc.setContent(new HTML(""String_Node_Str"" + ""String_Node_Str""));
  FlowPanel flow=new FlowPanel();
  for (int i=0; i < 8; ++i) {
    flow.add(new CheckBox(""String_Node_Str"" + i));
  }
  HorizontalPanel horz=new HorizontalPanel();
  horz.setVerticalAlignment(VerticalPanel.ALIGN_MIDDLE);
  horz.add(new Button(""String_Node_Str""));
  horz.add(new HTML(""String_Node_Str"",true));
  horz.add(new Button(""String_Node_Str""));
  VerticalPanel vert=new VerticalPanel();
  vert.setHorizontalAlignment(VerticalPanel.ALIGN_CENTER);
  vert.add(new Button(""String_Node_Str""));
  vert.add(new Button(""String_Node_Str""));
  vert.add(new Button(""String_Node_Str""));
  VerticalPanel vp=new VerticalPanel();
  vp.setHorizontalAlignment(VerticalPanel.ALIGN_CENTER);
  vp.setSpacing(8);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(disc);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(flow);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(horz);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(vert);
  Grid grid=new Grid(4,4);
  for (int r=0; r < 4; ++r) {
    for (int c=0; c < 4; ++c) {
      grid.setWidget(r,c,images.gwtLogo().createImage());
    }
  }
  TabPanel tabs=new TabPanel();
  tabs.add(vp,""String_Node_Str"");
  tabs.add(dock,""String_Node_Str"");
  tabs.add(grid,""String_Node_Str"");
  tabs.setWidth(""String_Node_Str"");
  tabs.selectTab(0);
  HorizontalSplitPanel hSplit=new HorizontalSplitPanel();
  hSplit.setLeftWidget(tabs);
  hSplit.setRightWidget(new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  initWidget(hSplit);
  hSplit.setSize(""String_Node_Str"",""String_Node_Str"");
}"
83135,"public Lists(Sink.Images images){
  combo.setVisibleItemCount(1);
  combo.addChangeListener(this);
  list.setVisibleItemCount(10);
  list.setMultipleSelect(true);
  for (int i=0; i < stringLists.length; ++i) {
    combo.addItem(""String_Node_Str"" + i);
  }
  combo.setSelectedIndex(0);
  fillList(0);
  list.addChangeListener(this);
  for (int i=0; i < words.length; ++i) {
    oracle.add(words[i]);
  }
  VerticalPanel suggestPanel=new VerticalPanel();
  suggestPanel.add(new Label(""String_Node_Str""));
  suggestPanel.add(suggestBox);
  HorizontalPanel horz=new HorizontalPanel();
  horz.setVerticalAlignment(HorizontalPanel.ALIGN_TOP);
  horz.setSpacing(8);
  horz.add(combo);
  horz.add(list);
  horz.add(suggestPanel);
  horz.add(tree);
  VerticalPanel panel=new VerticalPanel();
  panel.setHorizontalAlignment(VerticalPanel.ALIGN_LEFT);
  panel.add(horz);
  initWidget(panel);
  tree=new Tree(images);
  for (int i=0; i < fProto.length; ++i) {
    createItem(fProto[i]);
    tree.addItem(fProto[i].item);
  }
  tree.addTreeListener(this);
  tree.setWidth(""String_Node_Str"");
}","public Lists(Sink.Images images){
  combo.setVisibleItemCount(1);
  combo.addChangeListener(this);
  list.setVisibleItemCount(10);
  list.setMultipleSelect(true);
  for (int i=0; i < stringLists.length; ++i) {
    combo.addItem(""String_Node_Str"" + i);
  }
  combo.setSelectedIndex(0);
  fillList(0);
  list.addChangeListener(this);
  for (int i=0; i < words.length; ++i) {
    oracle.add(words[i]);
  }
  VerticalPanel suggestPanel=new VerticalPanel();
  suggestPanel.add(new Label(""String_Node_Str""));
  suggestPanel.add(suggestBox);
  HorizontalPanel horz=new HorizontalPanel();
  horz.setVerticalAlignment(HorizontalPanel.ALIGN_TOP);
  horz.setSpacing(8);
  horz.add(combo);
  horz.add(list);
  horz.add(suggestPanel);
  VerticalPanel panel=new VerticalPanel();
  panel.setHorizontalAlignment(VerticalPanel.ALIGN_LEFT);
  panel.add(horz);
  initWidget(panel);
  tree=new Tree(images);
  for (int i=0; i < fProto.length; ++i) {
    createItem(fProto[i]);
    tree.addItem(fProto[i].item);
  }
  tree.addTreeListener(this);
  tree.setWidth(""String_Node_Str"");
  horz.add(tree);
}"
83136,private native boolean isMac();,private static native boolean isMac();
83137,"public Element createElement(){
  final Element outerElem=DOM.createDiv();
  if (isMac()) {
    DOM.setInnerHTML(outerElem,""String_Node_Str"");
    DeferredCommand.addCommand(new Command(){
      public void execute(){
        DOM.setStyleAttribute(outerElem,""String_Node_Str"",""String_Node_Str"");
      }
    }
);
    containerElement=DOM.getFirstChild(outerElem);
  }
 else {
    containerElement=outerElem;
  }
  return outerElem;
}","public Element createElement(){
  final Element outerElem=DOM.createDiv();
  if (isMac) {
    DOM.setInnerHTML(outerElem,""String_Node_Str"");
    DeferredCommand.addCommand(new Command(){
      public void execute(){
        DOM.setStyleAttribute(outerElem,""String_Node_Str"",""String_Node_Str"");
      }
    }
);
  }
  return outerElem;
}"
83138,"public Element getContainerElement(Element popup){
  return containerElement;
}","public Element getContainerElement(Element outerElem){
  return isMac ? DOM.getFirstChild(outerElem) : outerElem;
}"
83139,"/** 
 * Gets the top position of the specified widget within the panel.
 * @param w the widget whose position is to be retrieved
 * @return the widget's top position
 */
public int getWidgetTop(Widget w){
  checkWidgetParent(w);
  return DOM.getElementPropertyInt(w.getElement(),""String_Node_Str"");
}","/** 
 * Gets the position of the top outer border edge of the widget relative to the top outer border edge of the panel.
 * @param w the widget whose position is to be retrieved
 * @return the widget's top position
 */
public int getWidgetTop(Widget w){
  checkWidgetParent(w);
  return DOM.getAbsoluteTop(w.getElement()) - DOM.getAbsoluteTop(getElement());
}"
83140,"/** 
 * Gets the left position of the specified widget within the panel.
 * @param w the widget whose position is to be retrieved
 * @return the widget's left position
 */
public int getWidgetLeft(Widget w){
  checkWidgetParent(w);
  return DOM.getElementPropertyInt(w.getElement(),""String_Node_Str"");
}","/** 
 * Gets the position of the left outer border edge of the widget relative to the left outer border edge of the panel.
 * @param w the widget whose position is to be retrieved
 * @return the widget's left position
 */
public int getWidgetLeft(Widget w){
  checkWidgetParent(w);
  return DOM.getAbsoluteLeft(w.getElement()) - DOM.getAbsoluteLeft(getElement());
}"
83141,native void initEvents();,private static native void initEvents(Element elem);
83142,"/** 
 * Adds all sinks to the list. Note that this does not create actual instances of all sinks yet (they are created on-demand). This can make a significant difference in startup time.
 */
protected void loadSinks(){
  list.addSink(Info.init());
  list.addSink(Widgets.init());
  list.addSink(Panels.init());
  list.addSink(Lists.init());
  list.addSink(Text.init());
  list.addSink(Popups.init());
}","/** 
 * Adds all sinks to the list. Note that this does not create actual instances of all sinks yet (they are created on-demand). This can make a significant difference in startup time.
 */
protected void loadSinks(){
  list.addSink(Info.init());
  list.addSink(Widgets.init(images));
  list.addSink(Panels.init(images));
  list.addSink(Lists.init(images));
  list.addSink(Text.init());
  list.addSink(Popups.init());
}"
83143,"public static SinkInfo init(){
  return new SinkInfo(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""){
    public Sink createInstance(){
      return new Lists();
    }
  }
;
}","public static SinkInfo init(final Sink.Images images){
  return new SinkInfo(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""){
    public Sink createInstance(){
      return new Lists(images);
    }
  }
;
}"
83144,"public Sink createInstance(){
  return new Lists();
}","public Sink createInstance(){
  return new Lists(images);
}"
83145,"public Lists(){
  combo.setVisibleItemCount(1);
  combo.addChangeListener(this);
  list.setVisibleItemCount(10);
  list.setMultipleSelect(true);
  for (int i=0; i < stringLists.length; ++i) {
    combo.addItem(""String_Node_Str"" + i);
  }
  combo.setSelectedIndex(0);
  fillList(0);
  list.addChangeListener(this);
  for (int i=0; i < words.length; ++i) {
    oracle.add(words[i]);
  }
  VerticalPanel suggestPanel=new VerticalPanel();
  suggestPanel.add(new Label(""String_Node_Str""));
  suggestPanel.add(suggestBox);
  HorizontalPanel horz=new HorizontalPanel();
  horz.setVerticalAlignment(HorizontalPanel.ALIGN_TOP);
  horz.setSpacing(8);
  horz.add(combo);
  horz.add(list);
  horz.add(suggestPanel);
  horz.add(tree);
  VerticalPanel panel=new VerticalPanel();
  panel.setHorizontalAlignment(VerticalPanel.ALIGN_LEFT);
  panel.add(horz);
  initWidget(panel);
  for (int i=0; i < fProto.length; ++i) {
    createItem(fProto[i]);
    tree.addItem(fProto[i].item);
  }
  tree.addTreeListener(this);
  tree.setWidth(""String_Node_Str"");
}","public Lists(Sink.Images images){
  combo.setVisibleItemCount(1);
  combo.addChangeListener(this);
  list.setVisibleItemCount(10);
  list.setMultipleSelect(true);
  for (int i=0; i < stringLists.length; ++i) {
    combo.addItem(""String_Node_Str"" + i);
  }
  combo.setSelectedIndex(0);
  fillList(0);
  list.addChangeListener(this);
  for (int i=0; i < words.length; ++i) {
    oracle.add(words[i]);
  }
  VerticalPanel suggestPanel=new VerticalPanel();
  suggestPanel.add(new Label(""String_Node_Str""));
  suggestPanel.add(suggestBox);
  HorizontalPanel horz=new HorizontalPanel();
  horz.setVerticalAlignment(HorizontalPanel.ALIGN_TOP);
  horz.setSpacing(8);
  horz.add(combo);
  horz.add(list);
  horz.add(suggestPanel);
  horz.add(tree);
  VerticalPanel panel=new VerticalPanel();
  panel.setHorizontalAlignment(VerticalPanel.ALIGN_LEFT);
  panel.add(horz);
  initWidget(panel);
  tree=new Tree(images);
  for (int i=0; i < fProto.length; ++i) {
    createItem(fProto[i]);
    tree.addItem(fProto[i].item);
  }
  tree.addTreeListener(this);
  tree.setWidth(""String_Node_Str"");
}"
83146,"public static SinkInfo init(){
  return new SinkInfo(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""){
    public Sink createInstance(){
      return new Panels();
    }
    public String getColor(){
      return ""String_Node_Str"";
    }
  }
;
}","public static SinkInfo init(final Sink.Images images){
  return new SinkInfo(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""){
    public Sink createInstance(){
      return new Panels(images);
    }
    public String getColor(){
      return ""String_Node_Str"";
    }
  }
;
}"
83147,"public Panels(){
  HTML contents=new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ScrollPanel scroller=new ScrollPanel(contents);
  scroller.setStyleName(""String_Node_Str"");
  DockPanel dock=new DockPanel();
  dock.setHorizontalAlignment(DockPanel.ALIGN_CENTER);
  HTML north0=new HTML(""String_Node_Str"",true);
  HTML east=new HTML(""String_Node_Str"",true);
  HTML south=new HTML(""String_Node_Str"");
  HTML west=new HTML(""String_Node_Str"",true);
  HTML north1=new HTML(""String_Node_Str"",true);
  dock.add(north0,DockPanel.NORTH);
  dock.add(east,DockPanel.EAST);
  dock.add(south,DockPanel.SOUTH);
  dock.add(west,DockPanel.WEST);
  dock.add(north1,DockPanel.NORTH);
  dock.add(scroller,DockPanel.CENTER);
  DisclosurePanel disc=new DisclosurePanel(""String_Node_Str"");
  disc.setContent(new HTML(""String_Node_Str"" + ""String_Node_Str""));
  FlowPanel flow=new FlowPanel();
  for (int i=0; i < 8; ++i) {
    flow.add(new CheckBox(""String_Node_Str"" + i));
  }
  HorizontalPanel horz=new HorizontalPanel();
  horz.setVerticalAlignment(VerticalPanel.ALIGN_MIDDLE);
  horz.add(new Button(""String_Node_Str""));
  horz.add(new HTML(""String_Node_Str"",true));
  horz.add(new Button(""String_Node_Str""));
  VerticalPanel vert=new VerticalPanel();
  vert.setHorizontalAlignment(VerticalPanel.ALIGN_CENTER);
  vert.add(new Button(""String_Node_Str""));
  vert.add(new Button(""String_Node_Str""));
  vert.add(new Button(""String_Node_Str""));
  VerticalPanel vp=new VerticalPanel();
  vp.setHorizontalAlignment(VerticalPanel.ALIGN_CENTER);
  vp.setSpacing(8);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(disc);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(flow);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(horz);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(vert);
  Grid grid=new Grid(4,4);
  for (int r=0; r < 4; ++r) {
    for (int c=0; c < 4; ++c) {
      grid.setWidget(r,c,new Image(""String_Node_Str""));
    }
  }
  TabPanel tabs=new TabPanel();
  tabs.add(vp,""String_Node_Str"");
  tabs.add(dock,""String_Node_Str"");
  tabs.add(grid,""String_Node_Str"");
  tabs.setWidth(""String_Node_Str"");
  tabs.selectTab(0);
  HorizontalSplitPanel hSplit=new HorizontalSplitPanel();
  hSplit.setLeftWidget(tabs);
  hSplit.setRightWidget(new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  initWidget(hSplit);
  hSplit.setWidth(""String_Node_Str"");
}","public Panels(Sink.Images images){
  HTML contents=new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ScrollPanel scroller=new ScrollPanel(contents);
  scroller.setStyleName(""String_Node_Str"");
  DockPanel dock=new DockPanel();
  dock.setHorizontalAlignment(DockPanel.ALIGN_CENTER);
  HTML north0=new HTML(""String_Node_Str"",true);
  HTML east=new HTML(""String_Node_Str"",true);
  HTML south=new HTML(""String_Node_Str"");
  HTML west=new HTML(""String_Node_Str"",true);
  HTML north1=new HTML(""String_Node_Str"",true);
  dock.add(north0,DockPanel.NORTH);
  dock.add(east,DockPanel.EAST);
  dock.add(south,DockPanel.SOUTH);
  dock.add(west,DockPanel.WEST);
  dock.add(north1,DockPanel.NORTH);
  dock.add(scroller,DockPanel.CENTER);
  DisclosurePanel disc=new DisclosurePanel(""String_Node_Str"");
  disc.setContent(new HTML(""String_Node_Str"" + ""String_Node_Str""));
  FlowPanel flow=new FlowPanel();
  for (int i=0; i < 8; ++i) {
    flow.add(new CheckBox(""String_Node_Str"" + i));
  }
  HorizontalPanel horz=new HorizontalPanel();
  horz.setVerticalAlignment(VerticalPanel.ALIGN_MIDDLE);
  horz.add(new Button(""String_Node_Str""));
  horz.add(new HTML(""String_Node_Str"",true));
  horz.add(new Button(""String_Node_Str""));
  VerticalPanel vert=new VerticalPanel();
  vert.setHorizontalAlignment(VerticalPanel.ALIGN_CENTER);
  vert.add(new Button(""String_Node_Str""));
  vert.add(new Button(""String_Node_Str""));
  vert.add(new Button(""String_Node_Str""));
  VerticalPanel vp=new VerticalPanel();
  vp.setHorizontalAlignment(VerticalPanel.ALIGN_CENTER);
  vp.setSpacing(8);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(disc);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(flow);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(horz);
  vp.add(makeLabel(""String_Node_Str""));
  vp.add(vert);
  Grid grid=new Grid(4,4);
  for (int r=0; r < 4; ++r) {
    for (int c=0; c < 4; ++c) {
      grid.setWidget(r,c,images.gwtLogo().createImage());
    }
  }
  TabPanel tabs=new TabPanel();
  tabs.add(vp,""String_Node_Str"");
  tabs.add(dock,""String_Node_Str"");
  tabs.add(grid,""String_Node_Str"");
  tabs.setWidth(""String_Node_Str"");
  tabs.selectTab(0);
  HorizontalSplitPanel hSplit=new HorizontalSplitPanel();
  hSplit.setLeftWidget(tabs);
  hSplit.setRightWidget(new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  initWidget(hSplit);
  hSplit.setWidth(""String_Node_Str"");
}"
83148,"public Sink createInstance(){
  return new Panels();
}","public Sink createInstance(){
  return new Panels(images);
}"
83149,"public SinkList(){
  initWidget(list);
  list.add(new Image(""String_Node_Str""));
  setStyleName(""String_Node_Str"");
}","public SinkList(Sink.Images images){
  initWidget(list);
  list.add(images.gwtLogo().createImage());
  setStyleName(""String_Node_Str"");
}"
83150,"public static SinkInfo init(){
  return new SinkInfo(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""){
    public Sink createInstance(){
      return new Widgets();
    }
    public String getColor(){
      return ""String_Node_Str"";
    }
  }
;
}","public static SinkInfo init(final Sink.Images images){
  return new SinkInfo(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""){
    public Sink createInstance(){
      return new Widgets(images);
    }
    public String getColor(){
      return ""String_Node_Str"";
    }
  }
;
}"
83151,"public Sink createInstance(){
  return new Widgets();
}","public Sink createInstance(){
  return new Widgets(images);
}"
83152,"public Widgets(){
  HorizontalPanel hp;
  panel.add(createMenu());
  panel.add(hp=new HorizontalPanel());
  hp.setSpacing(8);
  hp.add(normalButton);
  hp.add(disabledButton);
  panel.add(hp=new HorizontalPanel());
  hp.setSpacing(8);
  hp.add(normalCheck);
  hp.add(disabledCheck);
  panel.add(hp=new HorizontalPanel());
  hp.setSpacing(8);
  hp.add(radio0);
  hp.add(radio1);
  hp.add(radio2);
  hp.add(radio3);
  panel.add(hp=new HorizontalPanel());
  hp.setSpacing(8);
  hp.add(pushButton);
  hp.add(toggleButton);
  disabledButton.setEnabled(false);
  disabledCheck.setEnabled(false);
  radio2.setEnabled(false);
  panel.setSpacing(8);
  initWidget(panel);
}","public Widgets(Sink.Images images){
  pushButton=new PushButton(images.gwtLogo().createImage());
  toggleButton=new ToggleButton(images.gwtLogo().createImage());
  HorizontalPanel hp;
  panel.add(createMenu());
  panel.add(hp=new HorizontalPanel());
  hp.setSpacing(8);
  hp.add(normalButton);
  hp.add(disabledButton);
  panel.add(hp=new HorizontalPanel());
  hp.setSpacing(8);
  hp.add(normalCheck);
  hp.add(disabledCheck);
  panel.add(hp=new HorizontalPanel());
  hp.setSpacing(8);
  hp.add(radio0);
  hp.add(radio1);
  hp.add(radio2);
  hp.add(radio3);
  panel.add(hp=new HorizontalPanel());
  hp.setSpacing(8);
  hp.add(pushButton);
  hp.add(toggleButton);
  disabledButton.setEnabled(false);
  disabledCheck.setEnabled(false);
  radio2.setEnabled(false);
  panel.setSpacing(8);
  initWidget(panel);
}"
83153,"static boolean parseMetaDataTags(char[] unitSource,HasMetaData hasMetaData,Javadoc javadoc){
  int start=javadoc.sourceStart;
  int end=javadoc.sourceEnd;
  char[] comment=CharOperation.subarray(unitSource,start,end + 1);
  BufferedReader reader=new BufferedReader(new CharArrayReader(comment));
  String activeTag=null;
  final List tagValues=new ArrayList();
  try {
    String line=reader.readLine();
    boolean firstLine=true;
    while (line != null) {
      if (firstLine) {
        firstLine=false;
        int commentStart=line.indexOf(""String_Node_Str"");
        if (commentStart == -1) {
          return false;
        }
        line=line.substring(commentStart + 3);
      }
      String[] tokens=PATTERN_WHITESPACE.split(line);
      boolean canIgnoreStar=true;
      for (int i=0; i < tokens.length; i++) {
        String token=tokens[i];
        if (token.endsWith(""String_Node_Str"")) {
          token=token.substring(0,token.length() - 2);
        }
        if (canIgnoreStar && token.startsWith(""String_Node_Str"")) {
          token=token.substring(1);
          canIgnoreStar=false;
        }
        if (token.length() > 0) {
          canIgnoreStar=false;
          if (token.startsWith(""String_Node_Str"")) {
            if (activeTag != null) {
              finishTag(hasMetaData,activeTag,tagValues);
            }
            activeTag=token.substring(1);
          }
 else           if (activeTag != null) {
            tagValues.add(token);
          }
 else {
          }
        }
      }
      line=reader.readLine();
    }
  }
 catch (  IOException e) {
    return false;
  }
  finishTag(hasMetaData,activeTag,tagValues);
  return true;
}","static boolean parseMetaDataTags(char[] unitSource,HasMetaData hasMetaData,Javadoc javadoc){
  int start=javadoc.sourceStart;
  int end=javadoc.sourceEnd;
  char[] comment=CharOperation.subarray(unitSource,start,end + 1);
  if (comment == null) {
    comment=new char[0];
  }
  BufferedReader reader=new BufferedReader(new CharArrayReader(comment));
  String activeTag=null;
  final List tagValues=new ArrayList();
  try {
    String line=reader.readLine();
    boolean firstLine=true;
    while (line != null) {
      if (firstLine) {
        firstLine=false;
        int commentStart=line.indexOf(""String_Node_Str"");
        if (commentStart == -1) {
          return false;
        }
        line=line.substring(commentStart + 3);
      }
      String[] tokens=PATTERN_WHITESPACE.split(line);
      boolean canIgnoreStar=true;
      for (int i=0; i < tokens.length; i++) {
        String token=tokens[i];
        if (token.endsWith(""String_Node_Str"")) {
          token=token.substring(0,token.length() - 2);
        }
        if (canIgnoreStar && token.startsWith(""String_Node_Str"")) {
          token=token.substring(1);
          canIgnoreStar=false;
        }
        if (token.length() > 0) {
          canIgnoreStar=false;
          if (token.startsWith(""String_Node_Str"")) {
            if (activeTag != null) {
              finishTag(hasMetaData,activeTag,tagValues);
            }
            activeTag=token.substring(1);
          }
 else           if (activeTag != null) {
            tagValues.add(token);
          }
 else {
          }
        }
      }
      line=reader.readLine();
    }
  }
 catch (  IOException e) {
    return false;
  }
  finishTag(hasMetaData,activeTag,tagValues);
  return true;
}"
83154,"public void validateRemoteServiceAsync(TreeLogger logger,JClassType remoteService) throws UnableToCompleteException {
  logger=logger.branch(TreeLogger.DEBUG,""String_Node_Str"" + remoteService.getQualifiedSourceName() + ""String_Node_Str""+ remoteService.getQualifiedSourceName()+ ""String_Node_Str"",null);
  JClassType remoteServiceAsync=typeOracle.findType(remoteService.getQualifiedSourceName() + ""String_Node_Str"");
  boolean failed=false;
  if (remoteServiceAsync == null) {
    logger.branch(TreeLogger.ERROR,""String_Node_Str"" + remoteService.getQualifiedSourceName(),null);
    failed=true;
  }
 else {
    JMethod[] syncMethods=remoteService.getOverridableMethods();
    JMethod[] asyncMethods=remoteServiceAsync.getOverridableMethods();
    if (syncMethods.length != asyncMethods.length) {
      logger.branch(TreeLogger.ERROR,""String_Node_Str"" + remoteService.getQualifiedSourceName() + ""String_Node_Str""+ (asyncMethods.length > syncMethods.length ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",null);
      failed=true;
    }
 else {
      for (int i=0; i < syncMethods.length; ++i) {
        JMethod method=syncMethods[i];
        JMethod asyncMethod=remoteServiceAsync.findMethod(method.getName(),getAsyncParamTypes(method));
        if (asyncMethod == null) {
          logger.branch(TreeLogger.ERROR,""String_Node_Str"" + method.getReadableDeclaration() + ""String_Node_Str"",null);
          failed=true;
        }
 else         if (asyncMethod.getReturnType() != JPrimitiveType.VOID) {
          logger.branch(TreeLogger.ERROR,""String_Node_Str"" + method.getReadableDeclaration() + ""String_Node_Str"",null);
          failed=true;
        }
      }
    }
  }
  if (failed) {
    logValidAsyncInterfaceDeclaration(logger,remoteService);
    throw new UnableToCompleteException();
  }
}","/** 
 * Checks that for there is an asynchronous  {@link com.google.gwt.user.client.rpc.RemoteService RemoteService}interface and that it has an asynchronous version of every synchronous method.
 * @throws UnableToCompleteException if the asynchronous{@link com.google.gwt.user.client.rpc.RemoteService RemoteService}was not found, or if it does not have an asynchronous method version of every synchronous one
 */
public void validateRemoteServiceAsync(TreeLogger logger,JClassType remoteService) throws UnableToCompleteException {
  TreeLogger branch=logger.branch(TreeLogger.DEBUG,""String_Node_Str"" + remoteService.getQualifiedSourceName() + ""String_Node_Str""+ remoteService.getQualifiedSourceName()+ ""String_Node_Str"",null);
  boolean failed=false;
  JClassType serviceAsync=typeOracle.findType(remoteService.getQualifiedSourceName() + ""String_Node_Str"");
  if (serviceAsync == null) {
    failed=true;
    branch.branch(TreeLogger.ERROR,""String_Node_Str"" + remoteService.getQualifiedSourceName(),null);
  }
 else {
    JMethod[] asyncMethods=serviceAsync.getOverridableMethods();
    JMethod[] syncMethods=remoteService.getOverridableMethods();
    if (asyncMethods.length != syncMethods.length) {
      branch.branch(TreeLogger.ERROR,""String_Node_Str"" + remoteService.getQualifiedSourceName() + ""String_Node_Str""+ (asyncMethods.length > syncMethods.length ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"",null);
      failed=true;
    }
 else {
      Map asyncMethodMap=initializeAsyncMethodMap(asyncMethods);
      for (int i=0; i < syncMethods.length; ++i) {
        JMethod syncMethod=syncMethods[i];
        String asyncSig=computeAsyncMethodSignature(syncMethod);
        JMethod asyncMethod=(JMethod)asyncMethodMap.get(asyncSig);
        if (asyncMethod == null) {
          branch.branch(TreeLogger.ERROR,""String_Node_Str"" + syncMethod.getReadableDeclaration() + ""String_Node_Str"",null);
          failed=true;
        }
 else         if (asyncMethod.getReturnType() != JPrimitiveType.VOID) {
          branch.branch(TreeLogger.ERROR,""String_Node_Str"" + syncMethod.getReadableDeclaration() + ""String_Node_Str"",null);
          failed=true;
        }
      }
    }
  }
  if (failed) {
    logValidAsyncInterfaceDeclaration(branch,remoteService);
    throw new UnableToCompleteException();
  }
}"
83155,"private void logValidAsyncInterfaceDeclaration(TreeLogger logger,JClassType remoteService){
  logger=logger.branch(TreeLogger.INFO,""String_Node_Str"" + remoteService.getQualifiedSourceName() + ""String_Node_Str"",null);
  logger.log(TreeLogger.ERROR,synthesizeAsynchronousInterfaceDefinition(remoteService),null);
}","private void logValidAsyncInterfaceDeclaration(TreeLogger logger,JClassType remoteService){
  TreeLogger branch=logger.branch(TreeLogger.INFO,""String_Node_Str"" + remoteService.getQualifiedSourceName() + ""String_Node_Str"",null);
  branch.log(TreeLogger.ERROR,synthesizeAsynchronousInterfaceDefinition(remoteService),null);
}"
83156,"private static String synthesizeAsynchronousInterfaceDefinition(JClassType serviceIntf){
  StringBuffer sb=new StringBuffer();
  JPackage pkg=serviceIntf.getPackage();
  if (pkg != null) {
    sb.append(""String_Node_Str"");
    sb.append(pkg.getName());
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(serviceIntf.getSimpleSourceName());
  sb.append(""String_Node_Str"");
  JMethod[] methods=serviceIntf.getMethods();
  for (int index=0; index < methods.length; ++index) {
    JMethod method=methods[index];
    assert(method != null);
    sb.append(""String_Node_Str"");
    sb.append(method.getName());
    sb.append(""String_Node_Str"");
    JParameter[] params=method.getParameters();
    for (int paramIndex=0; paramIndex < params.length; ++paramIndex) {
      JParameter param=params[paramIndex];
      if (paramIndex > 0) {
        sb.append(""String_Node_Str"");
      }
      sb.append(param.toString());
    }
    if (params.length > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(AsyncCallback.class.getName());
    sb.append(""String_Node_Str"");
    sb.append(Integer.toString(params.length + 1));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","private static String synthesizeAsynchronousInterfaceDefinition(JClassType serviceIntf){
  StringBuffer sb=new StringBuffer();
  JPackage pkg=serviceIntf.getPackage();
  if (pkg != null) {
    sb.append(""String_Node_Str"");
    sb.append(pkg.getName());
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(serviceIntf.getSimpleSourceName());
  sb.append(""String_Node_Str"");
  JMethod[] methods=serviceIntf.getOverridableMethods();
  for (int index=0; index < methods.length; ++index) {
    JMethod method=methods[index];
    assert(method != null);
    sb.append(""String_Node_Str"");
    sb.append(method.getName());
    sb.append(""String_Node_Str"");
    JParameter[] params=method.getParameters();
    for (int paramIndex=0; paramIndex < params.length; ++paramIndex) {
      JParameter param=params[paramIndex];
      if (paramIndex > 0) {
        sb.append(""String_Node_Str"");
      }
      sb.append(param.toString());
    }
    if (params.length > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(AsyncCallback.class.getName());
    sb.append(""String_Node_Str"");
    sb.append(Integer.toString(params.length + 1));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
83157,"private InheritanceTestServiceAsync getServiceAsync(){
  if (inheritanceTestService == null) {
    inheritanceTestService=(InheritanceTestServiceAsync)GWT.create(InheritanceTestService.class);
    ((ServiceDefTarget)inheritanceTestService).setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  }
  return inheritanceTestService;
}","private InheritanceTestServiceAsync getServiceAsync(){
  if (inheritanceTestService == null) {
    inheritanceTestService=(InheritanceTestServiceAsync)GWT.create(InheritanceTestServiceSubtype.class);
    ((ServiceDefTarget)inheritanceTestService).setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  }
  return inheritanceTestService;
}"
83158,"public void execute(){
  updateDivWidth(panel);
}","public void execute(){
  int percentage=parseInt(lastSplitPosition);
  impl.setSplitPosition(HorizontalSplitPanel.this,(getOffsetWidth() * (percentage / 100.0)) + ""String_Node_Str"");
}"
83159,"public final void setSplitPosition(String pos){
  impl.setSplitPosition(this,pos);
}","public final void setSplitPosition(String pos){
  lastSplitPosition=pos.trim();
  if (!lastSplitPosition.endsWith(""String_Node_Str"")) {
    impl.setSplitPosition(this,pos);
  }
 else   if (isAttached()) {
    DeferredCommand.addCommand(new Command(){
      public void execute(){
        int percentage=parseInt(lastSplitPosition);
        impl.setSplitPosition(HorizontalSplitPanel.this,(getOffsetWidth() * (percentage / 100.0)) + ""String_Node_Str"");
      }
    }
);
  }
}"
83160,"public AboutDialog(){
  setText(""String_Node_Str"");
  DockPanel outer=new DockPanel();
  outer.setSpacing(4);
  outer.add(new Image(LOGO_IMAGE),DockPanel.WEST);
  HorizontalPanel buttonPanel=new HorizontalPanel();
  buttonPanel.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);
  buttonPanel.add(new Button(""String_Node_Str"",new ClickListener(){
    public void onClick(    Widget sender){
      hide();
    }
  }
));
  outer.add(buttonPanel,DockPanel.SOUTH);
  HTML text=new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  text.setStyleName(""String_Node_Str"");
  outer.add(text,DockPanel.CENTER);
  outer.setSpacing(8);
  setWidget(outer);
}","public AboutDialog(){
  setText(""String_Node_Str"");
  VerticalPanel outer=new VerticalPanel();
  HTML text=new HTML(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  text.setStyleName(""String_Node_Str"");
  outer.add(text);
  outer.add(new Button(""String_Node_Str"",new ClickListener(){
    public void onClick(    Widget sender){
      hide();
    }
  }
));
  setWidget(outer);
}"
83161,"public void onClick(Widget sender){
  ContactPopup popup=new ContactPopup(contact);
  int left=link.getAbsoluteLeft() + 32;
  int top=link.getAbsoluteTop() + 8;
  popup.setPopupPosition(left,top);
  popup.show();
}","public void onClick(Widget sender){
  ContactPopup popup=new ContactPopup(contact);
  int left=link.getAbsoluteLeft() + 14;
  int top=link.getAbsoluteTop() + 14;
  popup.setPopupPosition(left,top);
  popup.show();
}"
83162,"public Contacts(){
  for (int i=0; i < contacts.length; ++i) {
    addContact(contacts[i]);
  }
  initWidget(panel);
  setStyleName(""String_Node_Str"");
}","public Contacts(Images images){
  SimplePanel outer=new SimplePanel();
  outer.setWidget(panel);
  this.images=images;
  for (int i=0; i < contacts.length; ++i) {
    addContact(contacts[i]);
  }
  initWidget(outer);
  setStyleName(""String_Node_Str"");
}"
83163,"private void addContact(final Contact contact){
  final HTML link=new HTML(""String_Node_Str"" + contact.name + ""String_Node_Str"");
  panel.add(link);
  link.addClickListener(new ClickListener(){
    public void onClick(    Widget sender){
      ContactPopup popup=new ContactPopup(contact);
      int left=link.getAbsoluteLeft() + 32;
      int top=link.getAbsoluteTop() + 8;
      popup.setPopupPosition(left,top);
      popup.show();
    }
  }
);
}","private void addContact(final Contact contact){
  final HTML link=new HTML(""String_Node_Str"" + contact.name + ""String_Node_Str"");
  panel.add(link);
  link.addClickListener(new ClickListener(){
    public void onClick(    Widget sender){
      ContactPopup popup=new ContactPopup(contact);
      int left=link.getAbsoluteLeft() + 14;
      int top=link.getAbsoluteTop() + 14;
      popup.setPopupPosition(left,top);
      popup.show();
    }
  }
);
}"
83164,"public ContactPopup(Contact contact){
  super(true);
  VerticalPanel inner=new VerticalPanel();
  Label nameLabel=new Label(contact.name);
  Label emailLabel=new Label(contact.email);
  inner.add(nameLabel);
  inner.add(emailLabel);
  HorizontalPanel hp=new HorizontalPanel();
  hp.setSpacing(4);
  hp.add(new Image(contact.photo));
  hp.add(inner);
  add(hp);
  setStyleName(""String_Node_Str"");
  nameLabel.setStyleName(""String_Node_Str"");
  emailLabel.setStyleName(""String_Node_Str"");
}","public ContactPopup(Contact contact){
  super(true);
  VerticalPanel inner=new VerticalPanel();
  Label nameLabel=new Label(contact.name);
  Label emailLabel=new Label(contact.email);
  inner.add(nameLabel);
  inner.add(emailLabel);
  HorizontalPanel hp=new HorizontalPanel();
  hp.setSpacing(4);
  hp.add(images.defaultPhoto().createImage());
  hp.add(inner);
  add(hp);
  setStyleName(""String_Node_Str"");
  nameLabel.setStyleName(""String_Node_Str"");
  emailLabel.setStyleName(""String_Node_Str"");
}"
83165,"/** 
 * This method constructs the application user interface by instantiating controls and hooking up event listeners.
 */
public void onModuleLoad(){
  singleton=this;
  topPanel.setWidth(""String_Node_Str"");
  mailList=new MailList();
  mailList.setWidth(""String_Node_Str"");
  rightPanel.add(mailList);
  rightPanel.add(mailDetail);
  mailList.setWidth(""String_Node_Str"");
  mailDetail.setWidth(""String_Node_Str"");
  DockPanel outer=new DockPanel();
  outer.add(topPanel,DockPanel.NORTH);
  outer.add(shortcuts,DockPanel.WEST);
  outer.add(rightPanel,DockPanel.CENTER);
  outer.setWidth(""String_Node_Str"");
  outer.setSpacing(4);
  outer.setCellWidth(rightPanel,""String_Node_Str"");
  Window.addWindowResizeListener(this);
  Window.enableScrolling(false);
  Window.setMargin(""String_Node_Str"");
  RootPanel.get().add(outer);
  DeferredCommand.add(new Command(){
    public void execute(){
      onWindowResized(Window.getClientWidth(),Window.getClientHeight());
    }
  }
);
}","/** 
 * This method constructs the application user interface by instantiating controls and hooking up event listeners.
 */
public void onModuleLoad(){
  singleton=this;
  topPanel.setWidth(""String_Node_Str"");
  mailList=new MailList();
  mailList.setWidth(""String_Node_Str"");
  rightPanel.add(mailList);
  rightPanel.add(mailDetail);
  mailList.setWidth(""String_Node_Str"");
  mailDetail.setWidth(""String_Node_Str"");
  DockPanel outer=new DockPanel();
  outer.add(topPanel,DockPanel.NORTH);
  outer.add(shortcuts,DockPanel.WEST);
  outer.add(rightPanel,DockPanel.CENTER);
  outer.setWidth(""String_Node_Str"");
  outer.setSpacing(4);
  outer.setCellWidth(rightPanel,""String_Node_Str"");
  Window.addWindowResizeListener(this);
  Window.enableScrolling(false);
  Window.setMargin(""String_Node_Str"");
  RootPanel.get().add(outer);
  DeferredCommand.addCommand(new Command(){
    public void execute(){
      onWindowResized(Window.getClientWidth(),Window.getClientHeight());
    }
  }
);
  onWindowResized(Window.getClientWidth(),Window.getClientHeight());
}"
83166,"public MailList(){
  table.setCellSpacing(0);
  table.setCellPadding(2);
  table.setWidth(""String_Node_Str"");
  table.addTableListener(this);
  newerButton.addClickListener(this);
  olderButton.addClickListener(this);
  HorizontalPanel innerNavBar=new HorizontalPanel();
  innerNavBar.setStyleName(""String_Node_Str"");
  innerNavBar.setSpacing(8);
  innerNavBar.add(newerButton);
  innerNavBar.add(countLabel);
  innerNavBar.add(olderButton);
  navBar.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);
  navBar.add(innerNavBar);
  navBar.setWidth(""String_Node_Str"");
  initWidget(table);
  setStyleName(""String_Node_Str"");
  initTable();
  update();
}","public MailList(){
  table.setCellSpacing(0);
  table.setCellPadding(0);
  table.setWidth(""String_Node_Str"");
  table.addTableListener(this);
  newerButton.addClickListener(this);
  olderButton.addClickListener(this);
  HorizontalPanel innerNavBar=new HorizontalPanel();
  navBar.setStyleName(""String_Node_Str"");
  innerNavBar.add(newerButton);
  innerNavBar.add(countLabel);
  innerNavBar.add(olderButton);
  navBar.setHorizontalAlignment(HorizontalPanel.ALIGN_RIGHT);
  navBar.add(innerNavBar);
  navBar.setWidth(""String_Node_Str"");
  initWidget(table);
  setStyleName(""String_Node_Str"");
  initTable();
  update();
}"
83167,"/** 
 * Returns a list of summaries of all the Benchmark reports.
 * @return a non-null list of ReportSummary
 */
public List getReportSummaries();","/** 
 * Returns a list of summaries of all the Benchmark reports.
 * @return a non-null list of ReportSummary
 * @gwt.typeArgs <com.google.gwt.junit.viewer.client.ReportSummary>
 */
public List getReportSummaries();"
83168,"public JType getType(){
  JType type=instance.getType();
  if (type == program.getTypeNull()) {
    return type;
  }
  JArrayType arrayType=(JArrayType)type;
  return arrayType.getElementType();
}","public JType getType(){
  JType type=instance.getType();
  JNullType typeNull=program.getTypeNull();
  if (type == typeNull) {
    return typeNull;
  }
  JArrayType arrayType=(JArrayType)type;
  JType elementType=arrayType.getElementType();
  if (elementType instanceof JReferenceType && !program.typeOracle.isInstantiatedType((JReferenceType)elementType)) {
    return typeNull;
  }
  return elementType;
}"
83169,"public boolean hasSideEffects(){
  return true;
}","public boolean hasSideEffects(){
  for (int i=0, c=exprs.size(); i < c; ++i) {
    if (((JExpression)exprs.get(i)).hasSideEffects()) {
      return true;
    }
  }
  return false;
}"
83170,"public boolean hasSideEffects(){
  return true;
}","public boolean hasSideEffects(){
  for (int i=0, c=propInits.size(); i < c; ++i) {
    JsonPropInit propInit=((JsonPropInit)propInits.get(i));
    if (propInit.labelExpr.hasSideEffects() || propInit.valueExpr.hasSideEffects()) {
      return true;
    }
  }
  return false;
}"
83171,"/** 
 * Check a statically false cast, which can succeed if the argument is null.
 */
static Object throwClassCastExceptionUnlessNull(Object o) throws ClassCastException {
  if (o != null) {
    throw new ClassCastException();
  }
  return null;
}","/** 
 * Check a statically false cast, which can succeed if the argument is null. Called by compiler-generated code based on static type information.
 */
static Object throwClassCastExceptionUnlessNull(Object o) throws ClassCastException {
  if (o != null) {
    throw new ClassCastException();
  }
  return o;
}"
83172,"/** 
 * An example of how you could integrate GWTs RPC functionality without using the   {@link com.google.gwt.user.server.rpc.RemoteServiceServlet}. Note that it also shows how mapping between and RPC interface and some other POJO could be performed.
 */
public void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws ServletException, IOException {
  String payload=readPayloadAsUtf8(httpRequest);
  try {
    RPCRequest rpcRequest=RPC.decodeRequest(payload);
    Object targetInstance=getInstanceToHandleRequest(httpRequest,rpcRequest);
    Method targetMethod=maybeMapRequestedMethod(targetInstance,rpcRequest.getMethod());
    Object[] targetParameters=maybeMapParameters(rpcRequest.getParameters());
    try {
      Object result=targetMethod.invoke(targetInstance,targetParameters);
      result=maybeMapResult(rpcRequest.getMethod(),result);
      String encodedResult=RPC.encodeResponseForSuccess(rpcRequest.getMethod(),result);
      sendResponseForSuccess(httpResponse,encodedResult);
    }
 catch (    IllegalArgumentException e) {
      SecurityException securityException=new SecurityException(""String_Node_Str"" + targetMethod);
      securityException.initCause(e);
      throw securityException;
    }
catch (    IllegalAccessException e) {
      SecurityException securityException=new SecurityException(""String_Node_Str"" + targetMethod + (targetInstance != null ? ""String_Node_Str"" + targetInstance : ""String_Node_Str""));
      securityException.initCause(e);
      throw securityException;
    }
catch (    InvocationTargetException e) {
      Throwable cause=e.getCause();
      Throwable mappedThrowable=maybeMapThrowable(cause,rpcRequest.getMethod());
      String failurePayload=RPC.encodeResponseForFailure(rpcRequest.getMethod(),mappedThrowable);
      sendResponseForFailure(httpResponse,failurePayload);
    }
  }
 catch (  Throwable e) {
    sendResponseForGenericFailure(httpResponse);
  }
}","/** 
 * An example of how you could integrate GWTs RPC functionality without using the   {@link com.google.gwt.user.server.rpc.RemoteServiceServlet}. Note that it also shows how mapping between and RPC interface and some other POJO could be performed.
 */
public void doPost(HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws ServletException, IOException {
  String payload=readPayloadAsUtf8(httpRequest);
  try {
    try {
      RPCRequest rpcRequest=RPC.decodeRequest(payload);
      Object targetInstance=getInstanceToHandleRequest(httpRequest,rpcRequest);
      Method targetMethod=maybeMapRequestedMethod(targetInstance,rpcRequest.getMethod());
      Object[] targetParameters=maybeMapParameters(rpcRequest.getParameters());
      try {
        Object result=targetMethod.invoke(targetInstance,targetParameters);
        result=maybeMapResult(rpcRequest.getMethod(),result);
        String encodedResult=RPC.encodeResponseForSuccess(rpcRequest.getMethod(),result);
        sendResponseForSuccess(httpResponse,encodedResult);
      }
 catch (      IllegalArgumentException e) {
        SecurityException securityException=new SecurityException(""String_Node_Str"" + targetMethod);
        securityException.initCause(e);
        throw securityException;
      }
catch (      IllegalAccessException e) {
        SecurityException securityException=new SecurityException(""String_Node_Str"" + targetMethod + (targetInstance != null ? ""String_Node_Str"" + targetInstance : ""String_Node_Str""));
        securityException.initCause(e);
        throw securityException;
      }
catch (      InvocationTargetException e) {
        Throwable cause=e.getCause();
        Throwable mappedThrowable=maybeMapThrowable(cause,rpcRequest.getMethod());
        String failurePayload=RPC.encodeResponseForFailure(rpcRequest.getMethod(),mappedThrowable);
        sendResponseForFailure(httpResponse,failurePayload);
      }
    }
 catch (    IncompatibleRemoteServiceException e) {
      sendResponseForFailure(httpResponse,RPC.encodeResponseForFailure(null,e));
    }
  }
 catch (  Throwable e) {
    sendResponseForGenericFailure(httpResponse);
  }
}"
83173,"/** 
 * Process the RPC request encoded into the payload string and return a string that encodes either the method return or an exception thrown by it.
 */
public String processCall(String payload) throws SerializationException {
  RPCRequest rpcRequest=RPC.decodeRequest(payload,this.getClass());
  return RPC.invokeAndEncodeResponse(this,rpcRequest.getMethod(),rpcRequest.getParameters());
}","/** 
 * Process the RPC request encoded into the payload string and return a string that encodes either the method return or an exception thrown by it.
 */
public String processCall(String payload) throws SerializationException {
  try {
    RPCRequest rpcRequest=RPC.decodeRequest(payload,this.getClass());
    return RPC.invokeAndEncodeResponse(this,rpcRequest.getMethod(),rpcRequest.getParameters());
  }
 catch (  IncompatibleRemoteServiceException ex) {
    return RPC.encodeResponseForFailure(null,ex);
  }
}"
83174,"/** 
 * Called when an asynchronous call fails to complete normally.
 */
void onFailure(Throwable caught);","/** 
 * Called when an asynchronous call fails to complete normally.  {@link IncompatibleRemoteServiceException}s,   {@link InvocationException}s, or checked exceptions thrown by the service method are examples of the type of failures that can be passed to this method. <p> If <code>caught</code> is an instance of an  {@link IncompatibleRemoteServiceException} the application should try toget into a state where a browser refresh can be safely done. </p>
 * @param caught failure encountered while executing a remote procedure call
 */
void onFailure(Throwable caught);"
83175,"private void generateAsynchronousProxyMethod(SourceWriter w,JMethod method){
  JType returnType=method.getReturnType();
  JParameter[] params=method.getParameters();
  NameFactory nameFactory=new NameFactory();
  for (int i=0; i < params.length; ++i) {
    nameFactory.addName(params[i].getName());
  }
  w.println();
  w.print(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
  int i;
  for (i=0; i < params.length; i++) {
    JParameter param=params[i];
    w.print((i > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + getJavaTypeName(param.getType()) + ""String_Node_Str""+ param.getName());
  }
  w.println((i > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + AsyncCallback.class.getName() + ""String_Node_Str"");
  w.indent();
  w.println(""String_Node_Str"" + SERIALIZATION_STREAM_READER_INSTANTIATION);
  w.println(""String_Node_Str"" + SERIALIZATION_STREAM_WRITER_INSTANTIATION);
  w.println(""String_Node_Str"");
  w.indent();
{
    w.print(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
    for (i=0; i < params.length; i++) {
      w.print(""String_Node_Str"" + params[i].getName());
    }
    w.println(""String_Node_Str"");
  }
  w.outdent();
  String exceptionName=nameFactory.createName(""String_Node_Str"");
  w.println(""String_Node_Str"" + SerializationException.class.getName() + ""String_Node_Str""+ exceptionName+ ""String_Node_Str"");
  w.indentln(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str""+ exceptionName+ ""String_Node_Str"");
  w.indentln(""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.println(ResponseTextHandler.class.getName() + ""String_Node_Str"" + ResponseTextHandler.class.getName()+ ""String_Node_Str"");
  w.indent();
{
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
    }
    w.outdent();
    w.println(""String_Node_Str"");
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
    }
    w.outdent();
    w.println(""String_Node_Str"");
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"");
          w.print(""String_Node_Str"");
          JPrimitiveType primitive=returnType.isPrimitive();
          if (primitive == JPrimitiveType.VOID) {
            w.print(""String_Node_Str"");
          }
 else {
            if (primitive != null) {
              w.print(""String_Node_Str"");
              w.print(getObjectWrapperName(primitive));
              w.print(""String_Node_Str"");
              generateDecodeCall(w,returnType);
              w.print(""String_Node_Str"");
            }
 else {
              generateDecodeCall(w,returnType);
            }
          }
          w.println(""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"");
          w.println(""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
    }
    w.outdent();
    w.println(""String_Node_Str"");
  }
  w.outdent();
  w.println(""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.indentln(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str"");
  w.outdent();
  w.println(""String_Node_Str"");
}","private void generateAsynchronousProxyMethod(SourceWriter w,JMethod method){
  JType returnType=method.getReturnType();
  JParameter[] params=method.getParameters();
  NameFactory nameFactory=new NameFactory();
  for (int i=0; i < params.length; ++i) {
    nameFactory.addName(params[i].getName());
  }
  w.println();
  w.print(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
  int i;
  for (i=0; i < params.length; i++) {
    JParameter param=params[i];
    w.print((i > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + getJavaTypeName(param.getType()) + ""String_Node_Str""+ param.getName());
  }
  w.println((i > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + AsyncCallback.class.getName() + ""String_Node_Str"");
  w.indent();
  w.println(""String_Node_Str"" + SERIALIZATION_STREAM_READER_INSTANTIATION);
  w.println(""String_Node_Str"" + SERIALIZATION_STREAM_WRITER_INSTANTIATION);
  w.println(""String_Node_Str"");
  w.indent();
{
    w.print(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
    for (i=0; i < params.length; i++) {
      w.print(""String_Node_Str"" + params[i].getName());
    }
    w.println(""String_Node_Str"");
  }
  w.outdent();
  String exceptionName=nameFactory.createName(""String_Node_Str"");
  w.println(""String_Node_Str"" + SerializationException.class.getName() + ""String_Node_Str""+ exceptionName+ ""String_Node_Str"");
  w.indentln(""String_Node_Str"" + exceptionName + ""String_Node_Str"");
  w.indentln(""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.println(ResponseTextHandler.class.getName() + ""String_Node_Str"" + ResponseTextHandler.class.getName()+ ""String_Node_Str"");
  w.indent();
{
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
    }
    w.outdent();
    w.println(""String_Node_Str"");
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
    }
    w.outdent();
    w.println(""String_Node_Str"");
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"");
          w.print(""String_Node_Str"");
          JPrimitiveType primitive=returnType.isPrimitive();
          if (primitive == JPrimitiveType.VOID) {
            w.print(""String_Node_Str"");
          }
 else {
            if (primitive != null) {
              w.print(""String_Node_Str"");
              w.print(getObjectWrapperName(primitive));
              w.print(""String_Node_Str"");
              generateDecodeCall(w,returnType);
              w.print(""String_Node_Str"");
            }
 else {
              generateDecodeCall(w,returnType);
            }
          }
          w.println(""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"");
          w.println(""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"" + SerializationException.class.getName() + ""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"" + IncompatibleRemoteServiceException.class.getName() + ""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
    }
    w.outdent();
    w.println(""String_Node_Str"");
  }
  w.outdent();
  w.println(""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.indentln(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str"");
  w.outdent();
  w.println(""String_Node_Str"");
}"
83176,"/** 
 * Constructs a builder.
 * @param rootLogger
 * @param typeOracle
 * @throws UnableToCompleteException if we fail to find one of our specialtypes
 */
public SerializableTypeOracleBuilder(TreeLogger rootLogger,TypeOracle typeOracle) throws UnableToCompleteException {
  this.rootLogger=rootLogger;
  this.typeOracle=typeOracle;
  try {
    collectionClass=typeOracle.getType(Collection.class.getName());
    isSerializableClass=typeOracle.getType(IsSerializable.class.getName());
    mapClass=typeOracle.getType(Map.class.getName());
    serializableClass=typeOracle.getType(Serializable.class.getName());
    stringClass=typeOracle.getType(String.class.getName());
    streamReaderClass=typeOracle.getType(SerializationStreamReader.class.getName());
    streamWriterClass=typeOracle.getType(SerializationStreamWriter.class.getName());
    MetaTypeInfo mti=getMetaTypeInfo(stringClass);
    mti.setSerializable(true);
    remoteServiceAsyncValidator=new RemoteServiceAsyncValidator(typeOracle);
  }
 catch (  NotFoundException e) {
    rootLogger.log(TreeLogger.ERROR,null,e);
    throw new UnableToCompleteException();
  }
}","/** 
 * Constructs a builder.
 * @param rootLogger
 * @param typeOracle
 * @throws UnableToCompleteException if we fail to find one of our specialtypes
 */
public SerializableTypeOracleBuilder(TreeLogger rootLogger,TypeOracle typeOracle) throws UnableToCompleteException {
  this.rootLogger=rootLogger;
  this.typeOracle=typeOracle;
  try {
    collectionClass=typeOracle.getType(Collection.class.getName());
    isSerializableClass=typeOracle.getType(IsSerializable.class.getName());
    mapClass=typeOracle.getType(Map.class.getName());
    serializableClass=typeOracle.getType(Serializable.class.getName());
    stringClass=typeOracle.getType(String.class.getName());
    streamReaderClass=typeOracle.getType(SerializationStreamReader.class.getName());
    streamWriterClass=typeOracle.getType(SerializationStreamWriter.class.getName());
    MetaTypeInfo stringMti=getMetaTypeInfo(stringClass);
    stringMti.setSerializable(true);
    MetaTypeInfo incompatibleRemoteServiceExceptionMti=getMetaTypeInfo(typeOracle.getType(IncompatibleRemoteServiceException.class.getName()));
    incompatibleRemoteServiceExceptionMti.setSerializable(true);
    remoteServiceAsyncValidator=new RemoteServiceAsyncValidator(typeOracle);
  }
 catch (  NotFoundException e) {
    rootLogger.log(TreeLogger.ERROR,null,e);
    throw new UnableToCompleteException();
  }
}"
83177,"/** 
 * Causes the browser to pre-fetch the image at a given URL.
 * @param url the URL of the image to be prefetched
 */
public static void prefetch(String url){
  Element img=DOM.createImg();
  DOM.setElementProperty(img,""String_Node_Str"",url);
  prefetchImages.put(url,img);
}","/** 
 * Causes the browser to pre-fetch the image at a given URL.
 * @param url the URL of the image to be prefetched
 */
public static void prefetch(String url){
  Element img=DOM.createImg();
  DOM.setImgSrc(img,url);
  prefetchImages.put(url,img);
}"
83178,"/** 
 * Tests   {@link DOM#toString(Element)} against likely failure points.
 */
public void testToString(){
  Button b=new Button(""String_Node_Str"");
  assertTrue(b.toString().indexOf(""String_Node_Str"") != -1);
  assertTrue(b.toString().toLowerCase().indexOf(""String_Node_Str"") != -1);
  Element image=DOM.createImg();
  String imageUrl=""String_Node_Str"";
  DOM.setElementProperty(image,""String_Node_Str"",imageUrl);
  String imageToString=DOM.toString(image).trim().toLowerCase();
  assertTrue(imageToString.startsWith(""String_Node_Str""));
  assertTrue(imageToString.indexOf(imageUrl) != -1);
  Element input=DOM.createInputText();
  DOM.setElementProperty(input,""String_Node_Str"",""String_Node_Str"");
  final String inputToString=DOM.toString(input).trim().toLowerCase();
  assertTrue(inputToString.startsWith(""String_Node_Str""));
  Element select=DOM.createSelect();
  for (int i=0; i < 10; i++) {
    final Element option=DOM.createElement(""String_Node_Str"");
    DOM.appendChild(select,option);
    DOM.setInnerText(option,""String_Node_Str"" + i);
  }
  String selectToString=DOM.toString(select).trim().toLowerCase();
  assertTrue(selectToString.startsWith(""String_Node_Str""));
  for (int i=0; i < 10; i++) {
    assertTrue(selectToString.indexOf(""String_Node_Str"" + i) != -1);
  }
  Element meta=DOM.createElement(""String_Node_Str"");
  DOM.setElementProperty(meta,""String_Node_Str"",""String_Node_Str"");
  String metaToString=DOM.toString(meta).trim().toLowerCase();
  assertTrue(metaToString.startsWith(""String_Node_Str""));
}","/** 
 * Tests   {@link DOM#toString(Element)} against likely failure points.
 */
public void testToString(){
  Button b=new Button(""String_Node_Str"");
  assertTrue(b.toString().indexOf(""String_Node_Str"") != -1);
  assertTrue(b.toString().toLowerCase().indexOf(""String_Node_Str"") != -1);
  Element image=DOM.createImg();
  String imageUrl=""String_Node_Str"";
  DOM.setImgSrc(image,imageUrl);
  String imageToString=DOM.toString(image).trim().toLowerCase();
  assertTrue(imageToString.startsWith(""String_Node_Str""));
  assertTrue(imageToString.indexOf(imageUrl) != -1);
  Element input=DOM.createInputText();
  DOM.setElementProperty(input,""String_Node_Str"",""String_Node_Str"");
  final String inputToString=DOM.toString(input).trim().toLowerCase();
  assertTrue(inputToString.startsWith(""String_Node_Str""));
  Element select=DOM.createSelect();
  for (int i=0; i < 10; i++) {
    final Element option=DOM.createElement(""String_Node_Str"");
    DOM.appendChild(select,option);
    DOM.setInnerText(option,""String_Node_Str"" + i);
  }
  String selectToString=DOM.toString(select).trim().toLowerCase();
  assertTrue(selectToString.startsWith(""String_Node_Str""));
  for (int i=0; i < 10; i++) {
    assertTrue(selectToString.indexOf(""String_Node_Str"" + i) != -1);
  }
  Element meta=DOM.createElement(""String_Node_Str"");
  DOM.setElementProperty(meta,""String_Node_Str"",""String_Node_Str"");
  String metaToString=DOM.toString(meta).trim().toLowerCase();
  assertTrue(metaToString.startsWith(""String_Node_Str""));
}"
83179,"/** 
 * Invoke a native JavaScript function that returns an integer value.
 */
public static int invokeNativeInt(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeInt(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns an integer value.
 */
public static int invokeNativeInt(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeInt(name,jthis,types,args);
}"
83180,"/** 
 * Invoke a native JavaScript function that returns a byte value.
 */
public static byte invokeNativeByte(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeByte(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns a byte value.
 */
public static byte invokeNativeByte(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeByte(name,jthis,types,args);
}"
83181,"/** 
 * Invoke a native JavaScript function that returns a handle value.
 */
public static Object invokeNativeHandle(String name,Object jthis,Class returnType,Class[] types,Object[] args){
  return sHost.invokeNativeHandle(name,jthis,returnType,types,args);
}","/** 
 * Invoke a native JavaScript function that returns a handle value.
 */
public static Object invokeNativeHandle(String name,Object jthis,Class returnType,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeHandle(name,jthis,returnType,types,args);
}"
83182,"/** 
 * Invoke a native JavaScript function that returns a float value.
 */
public static float invokeNativeFloat(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeFloat(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns a float value.
 */
public static float invokeNativeFloat(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeFloat(name,jthis,types,args);
}"
83183,"/** 
 * Invoke a native JavaScript function that returns a short value.
 */
public static short invokeNativeShort(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeShort(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns a short value.
 */
public static short invokeNativeShort(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeShort(name,jthis,types,args);
}"
83184,"/** 
 * Invoke a native JavaScript function that returns a string value.
 */
public static String invokeNativeString(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeString(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns a string value.
 */
public static String invokeNativeString(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeString(name,jthis,types,args);
}"
83185,"/** 
 * Invoke a native JavaScript function that returns an object value.
 */
public static Object invokeNativeObject(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeObject(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns an object value.
 */
public static Object invokeNativeObject(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeObject(name,jthis,types,args);
}"
83186,"/** 
 * Invoke a native JavaScript function that returns a character value.
 */
public static char invokeNativeChar(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeChar(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns a character value.
 */
public static char invokeNativeChar(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeChar(name,jthis,types,args);
}"
83187,"/** 
 * Invoke a native JavaScript function that returns a double value.
 */
public static double invokeNativeDouble(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeDouble(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns a double value.
 */
public static double invokeNativeDouble(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeDouble(name,jthis,types,args);
}"
83188,"/** 
 * Invoke a native JavaScript function that returns no value.
 */
public static void invokeNativeVoid(String name,Object jthis,Class[] types,Object[] args){
  sHost.invokeNativeVoid(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns no value.
 */
public static void invokeNativeVoid(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  sHost.invokeNativeVoid(name,jthis,types,args);
}"
83189,"/** 
 * Invoke a native JavaScript function that returns a boolean value.
 */
public static boolean invokeNativeBoolean(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeBoolean(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns a boolean value.
 */
public static boolean invokeNativeBoolean(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeBoolean(name,jthis,types,args);
}"
83190,"/** 
 * Invoke a native JavaScript function that returns a long value.
 */
public static long invokeNativeLong(String name,Object jthis,Class[] types,Object[] args){
  return sHost.invokeNativeLong(name,jthis,types,args);
}","/** 
 * Invoke a native JavaScript function that returns a long value.
 */
public static long invokeNativeLong(String name,Object jthis,Class[] types,Object[] args) throws Throwable {
  return sHost.invokeNativeLong(name,jthis,types,args);
}"
83191,"/** 
 * Create a legal Java method call that will result in a JSNI invocation.
 * @param method
 * @param expectedHeaderLines
 * @param expectedBodyLines
 * @return a String of the Java code to call a JSNI method, usingJavaScriptHost.invokeNative
 */
private String genNonNativeVersionOfJsniMethod(JMethod method,int expectedHeaderLines,int expectedBodyLines){
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < expectedHeaderLines; ++i) {
    sb.append('\n');
  }
  String methodDecl=method.getReadableDeclaration(false,true,false,false,false);
  sb.append(methodDecl + ""String_Node_Str"");
  JType returnType=method.getReturnType();
  boolean isJavaScriptObject=isJavaScriptObject(returnType);
  JPrimitiveType primType;
  if (isJavaScriptObject) {
    String returnTypeName=returnType.getQualifiedSourceName();
    sb.append(""String_Node_Str"" + returnTypeName + ""String_Node_Str""+ Jsni.JAVASCRIPTHOST_NAME+ ""String_Node_Str"");
  }
 else   if (null != (primType=returnType.isPrimitive())) {
    char[] primTypeSuffix=primType.getSimpleSourceName().toCharArray();
    primTypeSuffix[0]=Character.toUpperCase(primTypeSuffix[0]);
    String invokeMethodName=""String_Node_Str"" + String.valueOf(primTypeSuffix);
    if (primType != JPrimitiveType.VOID) {
      sb.append(""String_Node_Str"");
    }
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(""String_Node_Str"");
    sb.append(invokeMethodName);
  }
 else   if (returnType == coreTypes.javaLangString) {
    sb.append(""String_Node_Str"");
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(""String_Node_Str"");
  }
 else {
    String returnTypeName=returnType.getQualifiedSourceName();
    sb.append(""String_Node_Str"");
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  String jsniSig=Jsni.getJsniSignature(method);
  sb.append(jsniSig);
  if (method.isStatic()) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (isJavaScriptObject) {
    String returnTypeName=returnType.getQualifiedSourceName();
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
  }
  sb.append(Jsni.buildTypeList(method));
  sb.append(',');
  sb.append(Jsni.buildArgList(method));
  sb.append(""String_Node_Str"");
  for (int i=0; i < expectedBodyLines; ++i) {
    sb.append('\n');
  }
  return sb.toString();
}","/** 
 * Create a legal Java method call that will result in a JSNI invocation.
 * @param method
 * @param expectedHeaderLines
 * @param expectedBodyLines
 * @return a String of the Java code to call a JSNI method, usingJavaScriptHost.invokeNative
 */
private String genNonNativeVersionOfJsniMethod(JMethod method,int expectedHeaderLines,int expectedBodyLines){
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < expectedHeaderLines; ++i) {
    sb.append('\n');
  }
  String methodDecl=method.getReadableDeclaration(false,true,false,false,false);
  sb.append(methodDecl + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  JType returnType=method.getReturnType();
  boolean isJavaScriptObject=isJavaScriptObject(returnType);
  JPrimitiveType primType;
  if (isJavaScriptObject) {
    String returnTypeName=returnType.getQualifiedSourceName();
    sb.append(""String_Node_Str"" + returnTypeName + ""String_Node_Str""+ Jsni.JAVASCRIPTHOST_NAME+ ""String_Node_Str"");
  }
 else   if (null != (primType=returnType.isPrimitive())) {
    char[] primTypeSuffix=primType.getSimpleSourceName().toCharArray();
    primTypeSuffix[0]=Character.toUpperCase(primTypeSuffix[0]);
    String invokeMethodName=""String_Node_Str"" + String.valueOf(primTypeSuffix);
    if (primType != JPrimitiveType.VOID) {
      sb.append(""String_Node_Str"");
    }
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(""String_Node_Str"");
    sb.append(invokeMethodName);
  }
 else   if (returnType == coreTypes.javaLangString) {
    sb.append(""String_Node_Str"");
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(""String_Node_Str"");
  }
 else {
    String returnTypeName=returnType.getQualifiedSourceName();
    sb.append(""String_Node_Str"");
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
    sb.append(Jsni.JAVASCRIPTHOST_NAME);
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  String jsniSig=Jsni.getJsniSignature(method);
  sb.append(jsniSig);
  if (method.isStatic()) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  if (isJavaScriptObject) {
    String returnTypeName=returnType.getQualifiedSourceName();
    sb.append(returnTypeName);
    sb.append(""String_Node_Str"");
  }
  sb.append(Jsni.buildTypeList(method));
  sb.append(',');
  sb.append(Jsni.buildArgList(method));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  JType[] throwTypes=method.getThrows();
  for (int i=0; i < throwTypes.length; ++i) {
    String typeName=throwTypes[i].getQualifiedSourceName();
    sb.append(""String_Node_Str"" + typeName + ""String_Node_Str""+ typeName+ ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (int i=0; i < expectedBodyLines; ++i) {
    sb.append('\n');
  }
  return sb.toString();
}"
83192,"/** 
 * Gets the keyboard modifiers associated with a DOMEvent.
 * @param event the event.
 * @return the modifiers as defined in {@link KeyboardListener}.
 */
public static int getKeyboardModifiers(Event event){
  return (DOM.eventGetShiftKey(event) ? KeyboardListener.MODIFIER_SHIFT : 0) | (DOM.eventGetCtrlKey(event) ? KeyboardListener.MODIFIER_CTRL : 0) | (DOM.eventGetAltKey(event) ? KeyboardListener.MODIFIER_ALT : 0);
}","/** 
 * Gets the keyboard modifiers associated with a DOMEvent.
 * @param event the event.
 * @return the modifiers as defined in {@link KeyboardListener}.
 */
public static int getKeyboardModifiers(Event event){
  return (DOM.eventGetShiftKey(event) ? KeyboardListener.MODIFIER_SHIFT : 0) | (DOM.eventGetMetaKey(event) ? KeyboardListener.MODIFIER_META : 0) | (DOM.eventGetCtrlKey(event) ? KeyboardListener.MODIFIER_CTRL : 0)| (DOM.eventGetAltKey(event) ? KeyboardListener.MODIFIER_ALT : 0);
}"
83193,"/** 
 * Determines if the class can be constructed using a simple <code>new</code> operation. Specifically, the class must <ul> <li>be a class rather than an interface, </li> <li>have either no constructors or a parameterless <code>public</code> constructor, and</li> <li>be a top-level class or a static nested class.</li> </ul>
 * @return <code>true</code> if the type is default instantiable, or<code>false</code> otherwise
 */
public boolean isDefaultInstantiable(){
  if (isInterface() != null) {
    return false;
  }
  if (constructors.isEmpty()) {
    return true;
  }
  JConstructor ctor=findConstructor(TypeOracle.NO_JTYPES);
  if (ctor != null) {
    return true;
  }
  return false;
}","/** 
 * Determines if the class can be constructed using a simple <code>new</code> operation. Specifically, the class must <ul> <li>be a class rather than an interface, </li> <li>have either no constructors or a parameterless constructor, and</li> <li>be a top-level class or a static nested class.</li> </ul>
 * @return <code>true</code> if the type is default instantiable, or<code>false</code> otherwise
 */
public boolean isDefaultInstantiable(){
  if (isInterface() != null) {
    return false;
  }
  if (constructors.isEmpty()) {
    return true;
  }
  JConstructor ctor=findConstructor(TypeOracle.NO_JTYPES);
  if (ctor != null) {
    return true;
  }
  return false;
}"
83194,"/** 
 * Adds a new child widget to the panel.
 * @param w the child widget to be added
 * @param container the element within which the child will be contained
 */
protected void add(Widget w,Element container){
  insert(w,container,children.size());
}","/** 
 * Adds a new child widget to the panel.
 * @param w the child widget to be added
 * @param container the element within which the child will be contained
 * @return the index at which the widget was added
 */
protected int add(Widget w,Element container){
  return insert(w,container,getChildren().size());
}"
83195,"public Iterator iterator(){
  return children.iterator();
}","public Iterator iterator(){
  return getChildren().iterator();
}"
83196,"/** 
 * Inserts a new child widget into the panel.
 * @param w the child widget to be added
 * @param container the element within which the child will be contained
 * @param beforeIndex the index before which the widget will be added
 */
protected void insert(Widget w,Element container,int beforeIndex){
  if (w.getParent() == this) {
    return;
  }
  adopt(w,container);
  children.insert(w,beforeIndex);
}","/** 
 * Inserts a new child widget into the panel.
 * @param w the child widget to be added
 * @param container the element within which the child will be contained
 * @param beforeIndex the index before which the widget will be added
 * @return the index at which the widget was added
 */
protected int insert(Widget w,Element container,int beforeIndex){
  if ((beforeIndex < 0) || (beforeIndex > getWidgetCount())) {
    throw new IndexOutOfBoundsException();
  }
  int idx=getWidgetIndex(w);
  if (idx == -1) {
    w.removeFromParent();
  }
 else {
    remove(w);
    if (idx < beforeIndex) {
      beforeIndex--;
    }
  }
  adopt(w,container);
  getChildren().insert(w,beforeIndex);
  return beforeIndex;
}"
83197,"public boolean remove(Widget w){
  if (!children.contains(w)) {
    return false;
  }
  disown(w);
  children.remove(w);
  return true;
}","public boolean remove(Widget w){
  if (!getChildren().contains(w)) {
    return false;
  }
  disown(w);
  getChildren().remove(w);
  return true;
}"
83198,"/** 
 * Inserts a widget before the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  if ((beforeIndex < 0) || (beforeIndex > getWidgetCount())) {
    throw new IndexOutOfBoundsException();
  }
  super.insert(w,getElement(),beforeIndex);
  Element child=w.getElement();
  DOM.setStyleAttribute(child,""String_Node_Str"",""String_Node_Str"");
  DOM.setStyleAttribute(child,""String_Node_Str"",""String_Node_Str"");
  w.setVisible(false);
}","/** 
 * Inserts a widget before the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  super.insert(w,getElement(),beforeIndex);
  Element child=w.getElement();
  DOM.setStyleAttribute(child,""String_Node_Str"",""String_Node_Str"");
  DOM.setStyleAttribute(child,""String_Node_Str"",""String_Node_Str"");
  w.setVisible(false);
}"
83199,"/** 
 * Inserts a widget before the specified index. If the Widget is already attached to the HorizontalPanel, it will be moved to the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  int idx=getWidgetIndex(w);
  if (idx == -1) {
    w.removeFromParent();
  }
 else {
    remove(w);
    if (idx < beforeIndex) {
      beforeIndex--;
    }
  }
  Element td=DOM.createTD();
  DOM.insertChild(tableRow,td,beforeIndex);
  super.insert(w,td,beforeIndex);
  setCellHorizontalAlignment(w,horzAlign);
  setCellVerticalAlignment(w,vertAlign);
}","/** 
 * Inserts a widget before the specified index. If the Widget is already attached to the HorizontalPanel, it will be moved to the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  Element td=DOM.createTD();
  beforeIndex=super.insert(w,td,beforeIndex);
  DOM.insertChild(tableRow,td,beforeIndex);
  setCellHorizontalAlignment(w,horzAlign);
  setCellVerticalAlignment(w,vertAlign);
}"
83200,"private boolean remove(Widget child,int index){
  if (child.getParent() != this) {
    return false;
  }
  if (visibleStack == index) {
    visibleStack=-1;
  }
 else   if (visibleStack > index) {
    --visibleStack;
  }
  int rowIndex=2 * index;
  Element tr=DOM.getChild(body,rowIndex);
  DOM.removeChild(body,tr);
  tr=DOM.getChild(body,rowIndex);
  DOM.removeChild(body,tr);
  super.remove(child);
  int rows=getWidgetCount() * 2;
  for (int i=rowIndex; i < rows; i=i + 2) {
    Element childTR=DOM.getChild(body,i);
    Element td=DOM.getFirstChild(childTR);
    DOM.setElementPropertyInt(td,""String_Node_Str"",index);
    ++index;
  }
  return true;
}","private boolean remove(Widget child,int index){
  if (child.getParent() != this) {
    return false;
  }
  if (visibleStack == index) {
    visibleStack=-1;
  }
 else   if (visibleStack > index) {
    --visibleStack;
  }
  int rowIndex=2 * index;
  Element tr=DOM.getChild(body,rowIndex);
  DOM.removeChild(body,tr);
  tr=DOM.getChild(body,rowIndex);
  DOM.removeChild(body,tr);
  super.remove(child);
  updateIndicesFrom(rowIndex);
  return true;
}"
83201,"/** 
 * Enqueues an   {@link IncrementalCommand} to be fired after all current eventshave been handled. Note that the  {@link IncrementalCommand} should not perform any blockingoperations.
 * @param cmd the command to be fired. If cmd is null, a ""pause"" will beinserted into the queue. Any events added after the pause will wait for an additional cycle through the system event loop before executing. Pauses are cumulative.
 */
public static void addCommand(IncrementalCommand cmd){
  commandExecutor.submit(cmd);
}","/** 
 * Enqueues an   {@link IncrementalCommand} to be fired after all current eventshave been handled. Note that the  {@link IncrementalCommand} should not perform any blockingoperations.
 * @param cmd the command to be fired
 * @throws NullPointerException if cmd is <code>null</code>
 */
public static void addCommand(IncrementalCommand cmd){
  if (cmd == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  commandExecutor.submit(cmd);
}"
83202,"private void doGetPublicFile(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,String partialPath,String moduleName) throws IOException {
  String msg=""String_Node_Str"" + partialPath + ""String_Node_Str""+ moduleName+ ""String_Node_Str"";
  logger=logger.branch(TreeLogger.TRACE,msg,null);
  if (autoGenerateResources(request,response,logger,partialPath,moduleName)) {
    return;
  }
  URL foundResource;
  try {
    ModuleDef moduleDef=getModuleDef(logger,moduleName);
    foundResource=moduleDef.findPublicFile(partialPath);
    if (foundResource == null) {
      File moduleDir=new File(getOutputDir(),moduleName);
      File requestedFile=new File(moduleDir,partialPath);
      if (requestedFile.exists()) {
        try {
          foundResource=requestedFile.toURL();
        }
 catch (        MalformedURLException e) {
        }
      }
      if (foundResource == null) {
        msg=""String_Node_Str"" + partialPath;
        logger.log(TreeLogger.WARN,msg,null);
        throw new UnableToCompleteException();
      }
    }
  }
 catch (  UnableToCompleteException e) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + partialPath + ""String_Node_Str""+ moduleName+ ""String_Node_Str"");
    return;
  }
  String path=foundResource.toExternalForm();
  String mimeType=null;
  try {
    mimeType=getServletContext().getMimeType(path);
  }
 catch (  UnsupportedOperationException e) {
  }
  if (mimeType == null) {
    mimeType=guessMimeType(path);
    msg=""String_Node_Str"" + mimeType + ""String_Node_Str"";
    logger.log(TreeLogger.TRACE,msg,null);
  }
  maybeIssueXhtmlWarning(logger,mimeType,partialPath);
  boolean infinitelyCacheable=isInfinitelyCacheable(path);
  InputStream is=null;
  try {
    URLConnection conn=foundResource.openConnection();
    long lastModified=conn.getLastModified();
    if (isNotModified(request,lastModified)) {
      response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
      if (infinitelyCacheable) {
        response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_MAXAGE_FOREVER);
      }
      return;
    }
    response.setStatus(HttpServletResponse.SC_OK);
    long now=new Date().getTime();
    response.setHeader(HttpHeaders.DATE,HttpHeaders.toInternetDateFormat(now));
    response.setContentType(mimeType);
    String lastModifiedStr=HttpHeaders.toInternetDateFormat(lastModified);
    response.setHeader(HttpHeaders.LAST_MODIFIED,lastModifiedStr);
    String maxAgeStr;
    if (infinitelyCacheable) {
      maxAgeStr=HttpHeaders.CACHE_CONTROL_MAXAGE_FOREVER;
    }
 else {
      maxAgeStr=HttpHeaders.CACHE_CONTROL_MAXAGE_EXPIRED;
    }
    response.setHeader(HttpHeaders.CACHE_CONTROL,maxAgeStr);
    int contentLength=conn.getContentLength();
    if (contentLength >= 0) {
      response.setHeader(HttpHeaders.CONTENT_LENGTH,Integer.toString(contentLength));
    }
    is=foundResource.openStream();
    streamOut(is,response.getOutputStream(),1024 * 8);
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException swallowed) {
      }
    }
  }
}","/** 
 * Fetch a file and return it as the HTTP response, setting the cache-related headers according to the name of the file (see  {@link #getCacheTime(String)}). This function honors If-Modified-Since to minimize the impact of limiting caching of files for development.
 * @param request the HTTP request
 * @param response the HTTP response
 * @param logger a TreeLogger to use for debug output
 * @param partialPath the path within the module
 * @param moduleName the name of the module
 * @throws IOException
 */
private void doGetPublicFile(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,String partialPath,String moduleName) throws IOException {
  String msg=""String_Node_Str"" + partialPath + ""String_Node_Str""+ moduleName+ ""String_Node_Str"";
  logger=logger.branch(TreeLogger.TRACE,msg,null);
  if (autoGenerateResources(request,response,logger,partialPath,moduleName)) {
    return;
  }
  URL foundResource;
  try {
    ModuleDef moduleDef=getModuleDef(logger,moduleName);
    foundResource=moduleDef.findPublicFile(partialPath);
    if (foundResource == null) {
      File moduleDir=new File(getOutputDir(),moduleName);
      File requestedFile=new File(moduleDir,partialPath);
      if (requestedFile.exists()) {
        try {
          foundResource=requestedFile.toURL();
        }
 catch (        MalformedURLException e) {
        }
      }
      if (foundResource == null) {
        msg=""String_Node_Str"" + partialPath;
        logger.log(TreeLogger.WARN,msg,null);
        throw new UnableToCompleteException();
      }
    }
  }
 catch (  UnableToCompleteException e) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + partialPath + ""String_Node_Str""+ moduleName+ ""String_Node_Str"");
    return;
  }
  String path=foundResource.toExternalForm();
  String mimeType=null;
  try {
    mimeType=getServletContext().getMimeType(path);
  }
 catch (  UnsupportedOperationException e) {
  }
  if (mimeType == null) {
    mimeType=guessMimeType(path);
    msg=""String_Node_Str"" + mimeType + ""String_Node_Str"";
    logger.log(TreeLogger.TRACE,msg,null);
  }
  maybeIssueXhtmlWarning(logger,mimeType,partialPath);
  long cacheSeconds=getCacheTime(path);
  InputStream is=null;
  try {
    URLConnection conn=foundResource.openConnection();
    long lastModified=conn.getLastModified();
    if (isNotModified(request,lastModified)) {
      response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
      setResponseCacheHeaders(response,cacheSeconds);
      return;
    }
    response.setStatus(HttpServletResponse.SC_OK);
    long now=new Date().getTime();
    response.setHeader(HttpHeaders.DATE,HttpHeaders.toInternetDateFormat(now));
    response.setContentType(mimeType);
    String lastModifiedStr=HttpHeaders.toInternetDateFormat(lastModified);
    response.setHeader(HttpHeaders.LAST_MODIFIED,lastModifiedStr);
    setResponseCacheHeaders(response,cacheSeconds);
    int contentLength=conn.getContentLength();
    if (contentLength >= 0) {
      response.setHeader(HttpHeaders.CONTENT_LENGTH,Integer.toString(contentLength));
    }
    is=foundResource.openStream();
    streamOut(is,response.getOutputStream(),1024 * 8);
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException swallowed) {
      }
    }
  }
}"
83203,"/** 
 * Handle auto-generated resources.
 * @return <code>true</code> if a resource was generated
 */
private boolean autoGenerateResources(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,String partialPath,String moduleName) throws IOException {
  boolean nocacheHtml=partialPath.equals(moduleName + ""String_Node_Str"");
  boolean nocacheScript=!nocacheHtml && partialPath.equals(moduleName + ""String_Node_Str"");
  if (nocacheHtml || nocacheScript) {
    if (request.getParameter(""String_Node_Str"") == null) {
      try {
        String js=genSelectionScript(logger,moduleName,nocacheScript);
        response.setStatus(HttpServletResponse.SC_OK);
        response.setContentType(""String_Node_Str"");
        response.getWriter().println(js);
        return true;
      }
 catch (      UnableToCompleteException e) {
      }
    }
  }
  return false;
}","/** 
 * Handle auto-generated resources.
 * @return <code>true</code> if a resource was generated
 */
private boolean autoGenerateResources(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,String partialPath,String moduleName) throws IOException {
  boolean nocacheHtml=partialPath.equals(moduleName + ""String_Node_Str"");
  boolean nocacheScript=!nocacheHtml && partialPath.equals(moduleName + ""String_Node_Str"");
  if (nocacheHtml || nocacheScript) {
    if (request.getParameter(""String_Node_Str"") == null) {
      try {
        String js=genSelectionScript(logger,moduleName,nocacheScript);
        setResponseCacheHeaders(response,0);
        response.setStatus(HttpServletResponse.SC_OK);
        response.setContentType(""String_Node_Str"");
        response.getWriter().println(js);
        return true;
      }
 catch (      UnableToCompleteException e) {
      }
    }
  }
  return false;
}"
83204,"private String getHtmlPrefix(){
  DefaultTextOutput out=new DefaultTextOutput(obfuscate);
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"" + moduleName + ""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.print(module.getName());
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newline();
  return out.toString();
}","private String getHtmlPrefix(){
  DefaultTextOutput out=new DefaultTextOutput(obfuscate);
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.print(module.getName());
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newline();
  return out.toString();
}"
83205,"private String getJsPrefix(){
  DefaultTextOutput out=new DefaultTextOutput(obfuscate);
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"" + moduleName + ""String_Node_Str"");
  out.newlineOpt();
  return out.toString();
}","private String getJsPrefix(){
  DefaultTextOutput out=new DefaultTextOutput(obfuscate);
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  out.print(""String_Node_Str"");
  out.newlineOpt();
  return out.toString();
}"
83206,"private void generateGwtOnLoad(List entryFuncs,JsStatements globalStmts){
  JsFunction gwtOnLoad=new JsFunction(topScope);
  globalStmts.add(gwtOnLoad.makeStmt());
  JsName gwtOnLoadName=topScope.declareName(""String_Node_Str"");
  gwtOnLoadName.setObfuscatable(false);
  gwtOnLoad.setName(gwtOnLoadName);
  JsBlock body=new JsBlock();
  gwtOnLoad.setBody(body);
  JsScope fnScope=gwtOnLoad.getScope();
  JsParameters params=gwtOnLoad.getParameters();
  JsName errFn=fnScope.declareName(""String_Node_Str"");
  JsName modName=fnScope.declareName(""String_Node_Str"");
  params.add(new JsParameter(errFn));
  params.add(new JsParameter(modName));
  JsIf jsIf=new JsIf();
  body.getStatements().add(jsIf);
  jsIf.setIfExpr(errFn.makeRef());
  JsTry jsTry=new JsTry();
  jsIf.setThenStmt(jsTry);
  JsBlock callBlock=new JsBlock();
  jsIf.setElseStmt(callBlock);
  jsTry.setTryBlock(callBlock);
  for (int i=0; i < entryFuncs.size(); ++i) {
    JsFunction func=(JsFunction)entryFuncs.get(i);
    if (func != null) {
      JsInvocation call=new JsInvocation();
      call.setQualifier(func.getName().makeRef());
      callBlock.getStatements().add(call.makeStmt());
    }
  }
  JsCatch jsCatch=new JsCatch(fnScope,""String_Node_Str"");
  jsTry.getCatches().add(jsCatch);
  JsBlock catchBlock=new JsBlock();
  jsCatch.setBody(catchBlock);
  JsInvocation errCall=new JsInvocation();
  catchBlock.getStatements().add(errCall.makeStmt());
  errCall.setQualifier(errFn.makeRef());
  errCall.getArguments().add(modName.makeRef());
}","private void generateGwtOnLoad(List entryFuncs,JsStatements globalStmts){
  JsFunction gwtOnLoad=new JsFunction(topScope);
  globalStmts.add(gwtOnLoad.makeStmt());
  JsName gwtOnLoadName=topScope.declareName(""String_Node_Str"");
  gwtOnLoadName.setObfuscatable(false);
  gwtOnLoad.setName(gwtOnLoadName);
  JsBlock body=new JsBlock();
  gwtOnLoad.setBody(body);
  JsScope fnScope=gwtOnLoad.getScope();
  JsParameters params=gwtOnLoad.getParameters();
  JsName errFn=fnScope.declareName(""String_Node_Str"");
  JsName modName=fnScope.declareName(""String_Node_Str"");
  JsName modBase=fnScope.declareName(""String_Node_Str"");
  params.add(new JsParameter(errFn));
  params.add(new JsParameter(modName));
  params.add(new JsParameter(modBase));
  JsExpression asg=createAssignment(topScope.findExistingUnobfuscatableName(""String_Node_Str"").makeRef(),modName.makeRef());
  body.getStatements().add(asg.makeStmt());
  asg=createAssignment(topScope.findExistingUnobfuscatableName(""String_Node_Str"").makeRef(),modBase.makeRef());
  body.getStatements().add(asg.makeStmt());
  JsIf jsIf=new JsIf();
  body.getStatements().add(jsIf);
  jsIf.setIfExpr(errFn.makeRef());
  JsTry jsTry=new JsTry();
  jsIf.setThenStmt(jsTry);
  JsBlock callBlock=new JsBlock();
  jsIf.setElseStmt(callBlock);
  jsTry.setTryBlock(callBlock);
  for (int i=0; i < entryFuncs.size(); ++i) {
    JsFunction func=(JsFunction)entryFuncs.get(i);
    if (func != null) {
      JsInvocation call=new JsInvocation();
      call.setQualifier(func.getName().makeRef());
      callBlock.getStatements().add(call.makeStmt());
    }
  }
  JsCatch jsCatch=new JsCatch(fnScope,""String_Node_Str"");
  jsTry.getCatches().add(jsCatch);
  JsBlock catchBlock=new JsBlock();
  jsCatch.setBody(catchBlock);
  JsInvocation errCall=new JsInvocation();
  catchBlock.getStatements().add(errCall.makeStmt());
  errCall.setQualifier(errFn.makeRef());
  errCall.getArguments().add(modName.makeRef());
}"
83207,"private void ctorAddKnownGlobalSymbols(){
  String[] commonBuiltins=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < commonBuiltins.length; i++) {
    String ident=commonBuiltins[i];
    this.doCreateName(ident,ident);
  }
}","private void ctorAddKnownGlobalSymbols(){
  String[] commonBuiltins=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < commonBuiltins.length; i++) {
    String ident=commonBuiltins[i];
    this.doCreateName(ident,ident);
  }
}"
83208,"protected CompilationUnitProvider doFilterCompilationUnit(TreeLogger logger,String typeName,CompilationUnitProvider existing) throws UnableToCompleteException {
  if (typeName.equals(""String_Node_Str"")) {
    return cuMeta;
  }
  CompilationUnitProvider jsnified=injector.inject(logger,existing);
  return jsnified;
}","protected CompilationUnitProvider doFilterCompilationUnit(TreeLogger logger,String typeName,CompilationUnitProvider existing) throws UnableToCompleteException {
  if (typeName.equals(""String_Node_Str"")) {
    try {
      String source=Utility.getFileFromClassPath(""String_Node_Str"");
      return new StaticCompilationUnitProvider(""String_Node_Str"",""String_Node_Str"",source.toCharArray());
    }
 catch (    IOException e) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
      throw new UnableToCompleteException();
    }
  }
  CompilationUnitProvider jsnified=injector.inject(logger,existing);
  return jsnified;
}"
83209,"public HostedModeSourceOracle(TypeOracle typeOracle,String moduleName){
  super(typeOracle);
  this.moduleName=moduleName;
  this.injector=new JsniInjector(typeOracle);
}","public HostedModeSourceOracle(TypeOracle typeOracle){
  super(typeOracle);
  this.injector=new JsniInjector(typeOracle);
}"
83210,"public void onModuleReady(ModuleSpace readySpace) throws UnableToCompleteException {
  this.space=readySpace;
  SourceOracle srcOracle=new HostedModeSourceOracle(typeOracle,module.getName());
  ByteCodeCompiler compiler=getOrCreateByteCodeCompiler(srcOracle);
  ModuleSpacePropertyOracle propOracle=new ModuleSpacePropertyOracle(module.getProperties(),readySpace);
  Rules rules=module.getRules();
  rebindOracle=new StandardRebindOracle(typeOracle,propOracle,rules,genDir,outDir,module.getCacheManager());
  classLoader=new CompilingClassLoader(logger,compiler,typeOracle);
}","public void onModuleReady(ModuleSpace readySpace) throws UnableToCompleteException {
  this.space=readySpace;
  SourceOracle srcOracle=new HostedModeSourceOracle(typeOracle);
  ByteCodeCompiler compiler=getOrCreateByteCodeCompiler(srcOracle);
  ModuleSpacePropertyOracle propOracle=new ModuleSpacePropertyOracle(module.getProperties(),readySpace);
  Rules rules=module.getRules();
  rebindOracle=new StandardRebindOracle(typeOracle,propOracle,rules,genDir,outDir,module.getCacheManager());
  classLoader=new CompilingClassLoader(logger,compiler,typeOracle);
}"
83211,"/** 
 * Adds a widget to the specified edge of the dock.
 * @param widget the widget to be added
 * @param direction the widget's direction in the dock
 */
public void add(Widget widget,DockLayoutConstant direction){
  if (direction == CENTER) {
    if (center != null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    center=widget;
  }
  LayoutData layout=new LayoutData(direction);
  widget.setLayoutData(layout);
  setCellHorizontalAlignment(widget,horzAlign);
  setCellVerticalAlignment(widget,vertAlign);
  children.add(widget);
  realizeTable(widget);
}","/** 
 * Adds a widget to the specified edge of the dock. If the widget is already a child of this panel, this method behaves as though   {@link #remove(Widget)}had already been called.
 * @param widget the widget to be added
 * @param direction the widget's direction in the dock
 * @throws IllegalArgumentException when adding to the {@link #CENTER} andthere is already a different widget there
 */
public void add(Widget widget,DockLayoutConstant direction){
  if (widget.getParent() == this) {
    remove(widget);
  }
  if (direction == CENTER) {
    if (center != null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    center=widget;
  }
  LayoutData layout=new LayoutData(direction);
  widget.setLayoutData(layout);
  setCellHorizontalAlignment(widget,horzAlign);
  setCellVerticalAlignment(widget,vertAlign);
  children.add(widget);
  realizeTable(widget);
}"
83212,"public void testAddRemove(){
  final DockPanel dock=new DockPanel();
  OnLoadTestLabel l0=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l1=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l2=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l3=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l4=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l5=new OnLoadTestLabel(""String_Node_Str"");
  dock.add(l0,DockPanel.NORTH);
  dock.add(l1,DockPanel.NORTH);
  dock.add(l2,DockPanel.WEST);
  RootPanel.get().add(dock);
  dock.add(l3,DockPanel.EAST);
  dock.add(l5,DockPanel.CENTER);
  dock.add(l4,DockPanel.SOUTH);
  try {
    dock.add(new Label(""String_Node_Str""),DockPanel.CENTER);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
  Element table=dock.getElement();
  Element tbody=DOM.getFirstChild(table);
  assertEquals(DOM.getChildCount(tbody),4);
  Element tr0=DOM.getChild(tbody,0);
  Element tr1=DOM.getChild(tbody,1);
  Element tr2=DOM.getChild(tbody,2);
  Element tr3=DOM.getChild(tbody,3);
  assertEquals(DOM.getChildCount(tr0),1);
  assertEquals(DOM.getChildCount(tr1),1);
  assertEquals(DOM.getChildCount(tr2),3);
  assertEquals(DOM.getChildCount(tr3),1);
  assertTrue(l0.attachedWhenLoaded);
  assertTrue(l1.attachedWhenLoaded);
  assertTrue(l2.attachedWhenLoaded);
  assertTrue(l3.attachedWhenLoaded);
  assertTrue(l4.attachedWhenLoaded);
  assertTrue(l5.attachedWhenLoaded);
}","public void testAddRemove(){
  final DockPanel dock=new DockPanel();
  OnLoadTestLabel l0=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l1=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l2=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l3=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l4=new OnLoadTestLabel(""String_Node_Str"");
  OnLoadTestLabel l5=new OnLoadTestLabel(""String_Node_Str"");
  dock.add(l0,DockPanel.NORTH);
  dock.add(l1,DockPanel.NORTH);
  dock.add(l2,DockPanel.WEST);
  RootPanel.get().add(dock);
  dock.add(l3,DockPanel.EAST);
  dock.add(l5,DockPanel.CENTER);
  dock.add(l4,DockPanel.SOUTH);
  try {
    dock.add(new Label(""String_Node_Str""),DockPanel.CENTER);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
  Element table=dock.getElement();
  Element tbody=DOM.getFirstChild(table);
  assertEquals(DOM.getChildCount(tbody),4);
  Element tr0=DOM.getChild(tbody,0);
  Element tr1=DOM.getChild(tbody,1);
  Element tr2=DOM.getChild(tbody,2);
  Element tr3=DOM.getChild(tbody,3);
  assertEquals(DOM.getChildCount(tr0),1);
  assertEquals(DOM.getChildCount(tr1),1);
  assertEquals(DOM.getChildCount(tr2),3);
  assertEquals(DOM.getChildCount(tr3),1);
  assertTrue(l0.attachedWhenLoaded);
  assertTrue(l1.attachedWhenLoaded);
  assertTrue(l2.attachedWhenLoaded);
  assertTrue(l3.attachedWhenLoaded);
  assertTrue(l4.attachedWhenLoaded);
  assertTrue(l5.attachedWhenLoaded);
  dock.add(l4,DockPanel.NORTH);
  assertTrue(((DockPanel.LayoutData)l4.getLayoutData()).direction == DockPanel.NORTH);
}"
83213,"public void setText(String text){
  DOM.setElementProperty(getElement(),""String_Node_Str"",text);
}","public void setText(String text){
  DOM.setElementProperty(getElement(),""String_Node_Str"",text != null ? text : ""String_Node_Str"");
}"
83214,"public void disabledTestSelection(){
  TextArea area=new TextArea();
  assertEquals(""String_Node_Str"",area.getSelectedText());
  area.selectAll();
  assertEquals(0,area.getSelectionLength());
  try {
    area.setSelectionRange(0,1);
    fail(""String_Node_Str"");
  }
 catch (  IndexOutOfBoundsException e) {
  }
  RootPanel.get().add(area);
  area.setText(""String_Node_Str"");
  area.selectAll();
  assertEquals(1,area.getSelectionLength());
  area.setText(""String_Node_Str"");
  assertEquals(0,area.getSelectionLength());
  area.setText(""String_Node_Str"");
  area.setSelectionRange(2,2);
  assertEquals(2,area.getCursorPos());
  area.setSelectionRange(0,0);
}","/** 
 * Tests various text selection methods in text area.
 */
public void disabledTestSelection(){
  TextArea area=new TextArea();
  assertEquals(""String_Node_Str"",area.getSelectedText());
  area.selectAll();
  assertEquals(0,area.getSelectionLength());
  try {
    area.setSelectionRange(0,1);
    fail(""String_Node_Str"");
  }
 catch (  IndexOutOfBoundsException e) {
  }
  RootPanel.get().add(area);
  area.setText(""String_Node_Str"");
  area.selectAll();
  assertEquals(1,area.getSelectionLength());
  area.setText(""String_Node_Str"");
  assertEquals(0,area.getSelectionLength());
  area.setText(""String_Node_Str"");
  area.setSelectionRange(2,2);
  assertEquals(2,area.getCursorPos());
  area.setSelectionRange(0,0);
}"
83215,"public void testMovingCursor(){
  TextArea area=new TextArea();
  RootPanel.get().add(area);
  area.setText(""String_Node_Str"");
  for (int i=0; i < 4; i++) {
    area.setCursorPos(i);
    assertEquals(i,area.getCursorPos());
  }
}","/** 
 * Tests that   {@link TextArea#setCursorPos(int)} updates the cursor positioncorrectly.
 */
public void testMovingCursor(){
  TextArea area=new TextArea();
  RootPanel.get().add(area);
  area.setText(""String_Node_Str"");
  for (int i=0; i < 4; i++) {
    area.setCursorPos(i);
    assertEquals(i,area.getCursorPos());
  }
}"
83216,"/** 
 * This removes all state changed since the last time the typeOracle was run. Since the typeOracle information is not cached on disk, this is not needed the first time.
 * @param typeOracle
 */
void invalidateOnRefresh(TypeOracle typeOracle){
  if (!isTypeOracleBuilderFirstTime()) {
    addVolatileFiles(changedFiles);
    addDependentsToChangedFiles();
    for (Iterator iter=changedFiles.iterator(); iter.hasNext(); ) {
      String location=(String)iter.next();
      CompilationUnitProvider cup=(CompilationUnitProvider)getCupsByLocation().get(location);
      unitsByCup.remove(location);
      Util.invokeInaccessableMethod(TypeOracle.class,""String_Node_Str"",new Class[]{CompilationUnitProvider.class},typeOracle,new Object[]{cup});
    }
    astCompiler.invalidateChangedFiles(changedFiles,invalidatedTypes);
  }
 else {
    becomeTypeOracleNotFirstTime();
  }
}","/** 
 * This removes all state changed since the last time the typeOracle was run. Since the typeOracle information is not cached on disk, this is not needed the first time.
 * @param typeOracle
 */
void invalidateOnRefresh(TypeOracle typeOracle){
  if (!isTypeOracleBuilderFirstTime()) {
    changedFiles.addAll(generatedCupLocations);
    addDependentsToChangedFiles();
    for (Iterator iter=changedFiles.iterator(); iter.hasNext(); ) {
      String location=(String)iter.next();
      CompilationUnitProvider cup=(CompilationUnitProvider)getCupsByLocation().get(location);
      unitsByCup.remove(location);
      Util.invokeInaccessableMethod(TypeOracle.class,""String_Node_Str"",new Class[]{CompilationUnitProvider.class},typeOracle,new Object[]{cup});
    }
    astCompiler.invalidateChangedFiles(changedFiles,invalidatedTypes);
  }
 else {
    becomeTypeOracleNotFirstTime();
  }
}"
83217,"/** 
 * Ensures that all compilation units generated via generators are removed from the system so that they will be generated again, and thereby take into account input that may have changed since the last reload.
 */
public void invalidateVolatileFiles(){
  for (Iterator iter=addedCups.iterator(); iter.hasNext(); ) {
    CompilationUnitProvider cup=(CompilationUnitProvider)iter.next();
    if (isVolatileFile(cup.getLocation())) {
      iter.remove();
    }
  }
}","/** 
 * Ensures that all compilation units generated via generators are removed from the system so that they will be generated again, and thereby take into account input that may have changed since the last reload.
 */
public void invalidateVolatileFiles(){
  for (Iterator iter=addedCups.iterator(); iter.hasNext(); ) {
    CompilationUnitProvider cup=(CompilationUnitProvider)iter.next();
    if (isGeneratedCup(cup)) {
      iter.remove();
    }
  }
}"
83218,"/** 
 * Call this whenever generators are known to not be running to clear out uncommitted compilation units and to force committed compilation units to be parsed and added to the type oracle.
 * @return types generated during this object's lifetime
 */
public final JClassType[] finish(TreeLogger logger) throws UnableToCompleteException {
  abortUncommittedResources(logger);
  List genTypeNames=new ArrayList();
  try {
    TreeLogger branch;
    if (!committedGeneratedCups.isEmpty()) {
      String msg=""String_Node_Str"";
      branch=logger.branch(TreeLogger.DEBUG,msg,null);
      TreeLogger subBranch=null;
      if (branch.isLoggable(TreeLogger.DEBUG)) {
        subBranch=branch.branch(TreeLogger.DEBUG,""String_Node_Str"",null);
      }
      assert(cacheManager.getTypeOracle() == typeOracle);
      TypeOracleBuilder builder=new TypeOracleBuilder(cacheManager);
      for (Iterator iter=committedGeneratedCups.iterator(); iter.hasNext(); ) {
        GeneratedCompilationUnitProvider gcup=(GeneratedCompilationUnitProvider)iter.next();
        String typeName=gcup.getTypeName();
        String genTypeName=gcup.getPackageName() + ""String_Node_Str"" + typeName;
        genTypeNames.add(genTypeName);
        CompilationUnitProvider cup=writeSource(logger,gcup,typeName);
        builder.addCompilationUnit(cup);
        if (subBranch != null) {
          subBranch.log(TreeLogger.DEBUG,cup.getLocation(),null);
        }
      }
      cacheManager.markVolatileFiles(committedGeneratedCups);
      builder.build(branch);
    }
    JClassType[] genTypes=new JClassType[genTypeNames.size()];
    int next=0;
    for (Iterator iter=genTypeNames.iterator(); iter.hasNext(); ) {
      String genTypeName=(String)iter.next();
      try {
        genTypes[next++]=typeOracle.getType(genTypeName);
      }
 catch (      NotFoundException e) {
        String msg=""String_Node_Str"" + genTypeName;
        logger.log(TreeLogger.ERROR,msg,null);
        throw new UnableToCompleteException();
      }
    }
    return genTypes;
  }
  finally {
    if (!uncommittedGeneratedCupsByPrintWriter.isEmpty()) {
      String msg=""String_Node_Str"";
      logger=logger.branch(TreeLogger.WARN,msg,null);
      for (Iterator iter=uncommittedGeneratedCupsByPrintWriter.values().iterator(); iter.hasNext(); ) {
        StaticCompilationUnitProvider cup=(StaticCompilationUnitProvider)iter.next();
        String typeName=cup.getPackageName() + ""String_Node_Str"" + cup.getTypeName();
        logger.log(TreeLogger.WARN,typeName,null);
      }
    }
    uncommittedGeneratedCupsByPrintWriter.clear();
    committedGeneratedCups.clear();
    generatedTypeNames.clear();
  }
}","/** 
 * Call this whenever generators are known to not be running to clear out uncommitted compilation units and to force committed compilation units to be parsed and added to the type oracle.
 * @return types generated during this object's lifetime
 */
public final JClassType[] finish(TreeLogger logger) throws UnableToCompleteException {
  abortUncommittedResources(logger);
  List genTypeNames=new ArrayList();
  try {
    TreeLogger branch;
    if (!committedGeneratedCups.isEmpty()) {
      String msg=""String_Node_Str"";
      branch=logger.branch(TreeLogger.DEBUG,msg,null);
      TreeLogger subBranch=null;
      if (branch.isLoggable(TreeLogger.DEBUG)) {
        subBranch=branch.branch(TreeLogger.DEBUG,""String_Node_Str"",null);
      }
      assert(cacheManager.getTypeOracle() == typeOracle);
      TypeOracleBuilder builder=new TypeOracleBuilder(cacheManager);
      for (Iterator iter=committedGeneratedCups.iterator(); iter.hasNext(); ) {
        GeneratedCompilationUnitProvider gcup=(GeneratedCompilationUnitProvider)iter.next();
        String typeName=gcup.getTypeName();
        String genTypeName=gcup.getPackageName() + ""String_Node_Str"" + typeName;
        genTypeNames.add(genTypeName);
        CompilationUnitProvider cup=writeSource(logger,gcup,typeName);
        builder.addCompilationUnit(cup);
        cacheManager.addGeneratedCup(cup);
        if (subBranch != null) {
          subBranch.log(TreeLogger.DEBUG,cup.getLocation(),null);
        }
      }
      builder.build(branch);
    }
    JClassType[] genTypes=new JClassType[genTypeNames.size()];
    int next=0;
    for (Iterator iter=genTypeNames.iterator(); iter.hasNext(); ) {
      String genTypeName=(String)iter.next();
      try {
        genTypes[next++]=typeOracle.getType(genTypeName);
      }
 catch (      NotFoundException e) {
        String msg=""String_Node_Str"" + genTypeName;
        logger.log(TreeLogger.ERROR,msg,null);
        throw new UnableToCompleteException();
      }
    }
    return genTypes;
  }
  finally {
    if (!uncommittedGeneratedCupsByPrintWriter.isEmpty()) {
      String msg=""String_Node_Str"";
      logger=logger.branch(TreeLogger.WARN,msg,null);
      for (Iterator iter=uncommittedGeneratedCupsByPrintWriter.values().iterator(); iter.hasNext(); ) {
        StaticCompilationUnitProvider cup=(StaticCompilationUnitProvider)iter.next();
        String typeName=cup.getPackageName() + ""String_Node_Str"" + cup.getTypeName();
        logger.log(TreeLogger.WARN,typeName,null);
      }
    }
    uncommittedGeneratedCupsByPrintWriter.clear();
    committedGeneratedCups.clear();
    generatedTypeNames.clear();
  }
}"
83219,"/** 
 * Constructs an empty tree.
 */
public Tree(){
  setElement(DOM.createDiv());
  DOM.setStyleAttribute(getElement(),""String_Node_Str"",""String_Node_Str"");
  focusable=FocusPanel.impl.createFocusable();
  DOM.setStyleAttribute(focusable,""String_Node_Str"",""String_Node_Str"");
  DOM.setStyleAttribute(focusable,""String_Node_Str"",""String_Node_Str"");
  DOM.setIntStyleAttribute(focusable,""String_Node_Str"",-1);
  DOM.appendChild(getElement(),focusable);
  sinkEvents(Event.MOUSEEVENTS | Event.ONCLICK | Event.KEYEVENTS);
  DOM.sinkEvents(focusable,Event.FOCUSEVENTS);
  root=new TreeItem(){
    public void addItem(    TreeItem item){
      if ((item.getParentItem() != null) || (item.getTree() != null)) {
        item.remove();
      }
      item.setTree(this.getTree());
      item.setParentItem(null);
      getChildren().add(item);
      DOM.setIntStyleAttribute(item.getElement(),""String_Node_Str"",0);
    }
    public void removeItem(    TreeItem item){
      if (!getChildren().contains(item)) {
        return;
      }
      item.setTree(null);
      item.setParentItem(null);
      getChildren().remove(item);
    }
  }
;
  root.setTree(this);
  setStyleName(""String_Node_Str"");
}","/** 
 * Constructs a tree that uses the specified image bundle for images.
 * @param images a bundle that provides tree specific images
 */
public Tree(TreeImages images){
  this.images=images;
  setElement(DOM.createDiv());
  DOM.setStyleAttribute(getElement(),""String_Node_Str"",""String_Node_Str"");
  focusable=FocusPanel.impl.createFocusable();
  DOM.setStyleAttribute(focusable,""String_Node_Str"",""String_Node_Str"");
  DOM.setStyleAttribute(focusable,""String_Node_Str"",""String_Node_Str"");
  DOM.setIntStyleAttribute(focusable,""String_Node_Str"",-1);
  DOM.appendChild(getElement(),focusable);
  sinkEvents(Event.MOUSEEVENTS | Event.ONCLICK | Event.KEYEVENTS);
  DOM.sinkEvents(focusable,Event.FOCUSEVENTS);
  root=new TreeItem(){
    public void addItem(    TreeItem item){
      if ((item.getParentItem() != null) || (item.getTree() != null)) {
        item.remove();
      }
      item.setTree(this.getTree());
      item.setParentItem(null);
      getChildren().add(item);
      DOM.setIntStyleAttribute(item.getElement(),""String_Node_Str"",0);
    }
    public void removeItem(    TreeItem item){
      if (!getChildren().contains(item)) {
        return;
      }
      item.setTree(null);
      item.setParentItem(null);
      getChildren().remove(item);
    }
  }
;
  root.setTree(this);
  setStyleName(""String_Node_Str"");
}"
83220,"/** 
 * Gets this tree's default image package.
 * @return the tree's image package
 * @see #setImageBase
 */
public String getImageBase(){
  return imageBase;
}","/** 
 * Gets this tree's default image package.
 * @return the tree's image package
 * @see #setImageBase
 * @deprecated Use {@link #Tree(TreeImages)} as it provides a more efficentand manageable way to supply a set of images to be used within a tree.
 */
public String getImageBase(){
  return (images instanceof ImagesFromImageBase) ? ((ImagesFromImageBase)images).getBaseUrl() : GWT.getModuleBaseURL();
}"
83221,"private boolean elementClicked(TreeItem root,Element hElem){
  Vector chain=new Vector();
  collectElementChain(chain,getElement(),hElem);
  TreeItem item=findItemByChain(chain,0,root);
  if (item != null) {
    if (DOM.compare(item.getImageElement(),hElem)) {
      item.setState(!item.getState(),true);
      return true;
    }
 else     if (DOM.isOrHasChild(item.getElement(),hElem)) {
      onSelection(item,true,!shouldTreeDelegateFocusToElement(hElem));
      return true;
    }
  }
  return false;
}","private boolean elementClicked(TreeItem root,Element hElem){
  Vector chain=new Vector();
  collectElementChain(chain,getElement(),hElem);
  TreeItem item=findItemByChain(chain,0,root);
  if (item != null) {
    if (DOM.isOrHasChild(item.getImageElement(),hElem)) {
      item.setState(!item.getState(),true);
      return true;
    }
 else     if (DOM.isOrHasChild(item.getElement(),hElem)) {
      onSelection(item,true,!shouldTreeDelegateFocusToElement(hElem));
      return true;
    }
  }
  return false;
}"
83222,"/** 
 * Sets the base URL under which this tree will find its default images. These images must be named ""tree_white.gif"", ""tree_open.gif"", and ""tree_closed.gif"".
 */
public void setImageBase(String baseUrl){
  imageBase=baseUrl;
  root.updateStateRecursive();
}","/** 
 * Sets the base URL under which this tree will find its default images. These images must be named ""tree_white.gif"", ""tree_open.gif"", and ""tree_closed.gif"".
 * @param baseUrl
 * @deprecated Use {@link #Tree(TreeImages)} as it provides a more efficentand manageable way to supply a set of images to be used within a tree.
 */
public void setImageBase(String baseUrl){
  images=new ImagesFromImageBase(baseUrl);
  root.updateStateRecursive();
}"
83223,"/** 
 * Indicates if keyboard navigation is enabled for the Tree and for a given TreeItem.  Subclasses of Tree can override this function to selectively enable or disable keyboard navigation.
 * @param currentItem the currently selected TreeItem
 * @return <code>true</code> if the Tree will response to arrow keys bychanging the currently selected item
 */
protected boolean isKeyboardNavigationEnabled(TreeItem currentItem){
  return true;
}","/** 
 * Indicates if keyboard navigation is enabled for the Tree and for a given TreeItem. Subclasses of Tree can override this function to selectively enable or disable keyboard navigation.
 * @param currentItem the currently selected TreeItem
 * @return <code>true</code> if the Tree will response to arrow keys bychanging the currently selected item
 */
protected boolean isKeyboardNavigationEnabled(TreeItem currentItem){
  return true;
}"
83224,"void updateState(){
  if (children.size() == 0) {
    UIObject.setVisible(childSpanElem,false);
    DOM.setElementProperty(imgElem,""String_Node_Str"",imgSrc(""String_Node_Str""));
    return;
  }
  if (open) {
    UIObject.setVisible(childSpanElem,true);
    DOM.setElementProperty(imgElem,""String_Node_Str"",imgSrc(""String_Node_Str""));
  }
 else {
    UIObject.setVisible(childSpanElem,false);
    DOM.setElementProperty(imgElem,""String_Node_Str"",imgSrc(""String_Node_Str""));
  }
}","void updateState(){
  if (tree == null) {
    return;
  }
  TreeImages images=tree.getImages();
  if (children.size() == 0) {
    UIObject.setVisible(childSpanElem,false);
    images.treeLeaf().applyTo(statusImage);
    return;
  }
  if (open) {
    UIObject.setVisible(childSpanElem,true);
    images.treeOpen().applyTo(statusImage);
  }
 else {
    UIObject.setVisible(childSpanElem,false);
    images.treeClosed().applyTo(statusImage);
  }
}"
83225,"Element getImageElement(){
  return imgElem;
}","Element getImageElement(){
  return statusImage.getElement();
}"
83226,"Vector getChildren(){
  return children;
}","ArrayList getChildren(){
  return children;
}"
83227,"/** 
 * Gets the tree that contains this item.
 * @return the containing tree
 */
public Tree getTree(){
  return tree;
}","/** 
 * Gets the tree that contains this item.
 * @return the containing tree
 */
public final Tree getTree(){
  return tree;
}"
83228,"/** 
 * Sets whether this item's children are displayed.
 * @param open whether the item is open
 * @param fireEvents <code>true</code> to allow open/close events to befired
 */
public void setState(boolean open,boolean fireEvents){
  if (open && children.size() == 0) {
    return;
  }
  this.open=open;
  updateState();
  if (fireEvents) {
    tree.fireStateChanged(this);
  }
}","/** 
 * Sets whether this item's children are displayed.
 * @param open whether the item is open
 * @param fireEvents <code>true</code> to allow open/close events to befired
 */
public void setState(boolean open,boolean fireEvents){
  if (open && children.size() == 0) {
    return;
  }
  this.open=open;
  updateState();
  if (fireEvents && tree != null) {
    tree.fireStateChanged(this);
  }
}"
83229,"private void ensureContentPanel(){
  if (contentPanel == null) {
    DOM.setInnerHTML(contentElem,""String_Node_Str"");
    contentPanel=new ContentPanel(contentElem);
    if (getTree() != null) {
      tree.adopt(contentPanel);
    }
  }
}","private void ensureContentPanel(){
  if (contentPanel == null) {
    DOM.setInnerHTML(contentElem,""String_Node_Str"");
    contentPanel=new ContentPanel(contentElem);
    if (tree != null) {
      tree.adopt(contentPanel);
    }
  }
}"
83230,"ClippedState(Image image,String url,int left,int top,int width,int height){
  this.left=left;
  this.top=top;
  this.width=width;
  this.height=height;
  this.url=url;
  image.setElement(impl.createStructure(url,left,top,width,height));
  image.sinkEvents(Event.ONCLICK | Event.MOUSEEVENTS);
  fireSyntheticLoadEvent(image);
}","ClippedState(Image image,String url,int left,int top,int width,int height){
  this.left=left;
  this.top=top;
  this.width=width;
  this.height=height;
  this.url=url;
  image.setElement(impl.createStructure(url,left,top,width,height));
  image.sinkEvents(Event.ONCLICK | Event.MOUSEEVENTS | Event.ONMOUSEWHEEL);
  fireSyntheticLoadEvent(image);
}"
83231,"private String generateImpl(TreeLogger logger,GeneratorContext context,JClassType userType,JMethod[] imageMethods) throws UnableToCompleteException {
  String pkgName=userType.getPackage().getName();
  String subName=computeSubclassName(userType);
  ClassSourceFileComposerFactory f=new ClassSourceFileComposerFactory(pkgName,subName);
  f.addImport(ABSTRACTIMAGEPROTOTYPE_QNAME);
  f.addImport(CLIPPEDIMAGEPROTOTYPE_QNAME);
  f.addImplementedInterface(userType.getQualifiedSourceName());
  PrintWriter pw=context.tryCreate(logger,pkgName,subName);
  if (pw != null) {
    SourceWriter sw=f.createSourceWriter(context,pw);
    ImageBundleBuilder bulder=new ImageBundleBuilder();
    for (int i=0; i < imageMethods.length; i++) {
      JMethod method=imageMethods[i];
      String imageUrl=getImageUrlFromMetaDataOrMethodName(logger,method);
      assert(imageUrl != null);
      bulder.assimilate(logger,imageUrl);
    }
    String bundledImageUrl=bulder.writeBundledImage(logger,context);
    sw.print(""String_Node_Str"");
    sw.print(escape(bundledImageUrl));
    sw.println(""String_Node_Str"");
    for (int i=0; i < imageMethods.length; i++) {
      JMethod method=imageMethods[i];
      generateImageMethod(logger,bulder,sw,method);
    }
    sw.commit(logger);
  }
  return f.getCreatedClassName();
}","private String generateImpl(TreeLogger logger,GeneratorContext context,JClassType userType,JMethod[] imageMethods) throws UnableToCompleteException {
  String pkgName=userType.getPackage().getName();
  String subName=computeSubclassName(userType);
  ClassSourceFileComposerFactory f=new ClassSourceFileComposerFactory(pkgName,subName);
  f.addImport(ABSTRACTIMAGEPROTOTYPE_QNAME);
  f.addImport(CLIPPEDIMAGEPROTOTYPE_QNAME);
  f.addImport(GWT_QNAME);
  f.addImplementedInterface(userType.getQualifiedSourceName());
  PrintWriter pw=context.tryCreate(logger,pkgName,subName);
  if (pw != null) {
    SourceWriter sw=f.createSourceWriter(context,pw);
    ImageBundleBuilder bulder=new ImageBundleBuilder();
    for (int i=0; i < imageMethods.length; i++) {
      JMethod method=imageMethods[i];
      String imageUrl=getImageUrlFromMetaDataOrMethodName(logger,method);
      assert(imageUrl != null);
      bulder.assimilate(logger,imageUrl);
    }
    String bundledImageUrl=bulder.writeBundledImage(logger,context);
    sw.print(""String_Node_Str"");
    sw.print(escape(bundledImageUrl));
    sw.println(""String_Node_Str"");
    for (int i=0; i < imageMethods.length; i++) {
      JMethod method=imageMethods[i];
      generateImageMethod(logger,bulder,sw,method);
    }
    sw.commit(logger);
  }
  return f.getCreatedClassName();
}"
83232,"private void doGetModule(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,RequestParts parts) throws IOException {
  if (""String_Node_Str"".equalsIgnoreCase(parts.moduleName)) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"");
    return;
  }
  String msg=""String_Node_Str"" + parts.moduleName + ""String_Node_Str"";
  logger=logger.branch(TreeLogger.TRACE,msg,null);
  try {
    getModuleDef(logger,parts.moduleName);
  }
 catch (  UnableToCompleteException e) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + parts.moduleName + ""String_Node_Str"");
    return;
  }
  response.setContentType(""String_Node_Str"");
  PrintWriter writer=response.getWriter();
  writer.println(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  writer.print(parts.moduleName);
  writer.println(""String_Node_Str"");
  Map params=request.getParameterMap();
  for (Iterator iter=params.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)iter.next();
    String[] values=(String[])entry.getValue();
    if (values.length > 0) {
      writer.print(""String_Node_Str"");
      writer.print(entry.getKey());
      writer.print(""String_Node_Str"");
      writer.print(values[values.length - 1]);
      writer.println(""String_Node_Str"");
    }
  }
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"");
}","private void doGetModule(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,RequestParts parts) throws IOException {
  if (""String_Node_Str"".equalsIgnoreCase(parts.moduleName)) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"");
    return;
  }
  String msg=""String_Node_Str"" + parts.moduleName + ""String_Node_Str"";
  logger=logger.branch(TreeLogger.TRACE,msg,null);
  try {
    getModuleDef(logger,parts.moduleName);
  }
 catch (  UnableToCompleteException e) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + parts.moduleName + ""String_Node_Str"");
    return;
  }
  response.setContentType(""String_Node_Str"");
  PrintWriter writer=response.getWriter();
  writer.println(""String_Node_Str"");
  writer.print(""String_Node_Str"");
  writer.print(parts.moduleName);
  writer.println(""String_Node_Str"");
  Map params=request.getParameterMap();
  for (Iterator iter=params.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)iter.next();
    String[] values=(String[])entry.getValue();
    if (values.length > 0) {
      writer.print(""String_Node_Str"");
      writer.print(entry.getKey());
      writer.print(""String_Node_Str"");
      writer.print(values[values.length - 1]);
      writer.println(""String_Node_Str"");
    }
  }
  writer.println(""String_Node_Str"");
  writer.println(""String_Node_Str"" + ""String_Node_Str"");
  writer.println(""String_Node_Str"");
}"
83233,"public static void sort(Object[] x,Comparator s){
  nativeSort(x,x.length,s != null ? s : natural);
}","public static void sort(Object[] x,Comparator s){
  nativeSort(x,x.length,s != null ? s : Comparators.natural());
}"
83234,"/** 
 * Test Arrays.binarySearch(Object[], Object, Comparator). Verify the following cases: empty array odd numbers of elements even numbers of elements not found value larger than all elements not found value smaller than all elements
 */
public void testBinarySearchObjectComparator(){
  Comparator inverseSort=new Comparator(){
    public int compare(    Object o1,    Object o2){
      return ((Comparable)o2).compareTo(o1);
    }
  }
;
  Object[] a1={};
  int ret=Arrays.binarySearch(a1,""String_Node_Str"",inverseSort);
  assertEquals(-1,ret);
  Object[] a2={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ret=Arrays.binarySearch(a2,""String_Node_Str"",inverseSort);
  assertEquals(-3,ret);
  ret=Arrays.binarySearch(a2,""String_Node_Str"",inverseSort);
  assertEquals(2,ret);
  Object[] a3={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ret=Arrays.binarySearch(a3,""String_Node_Str"",inverseSort);
  assertEquals(-5,ret);
  ret=Arrays.binarySearch(a3,""String_Node_Str"",inverseSort);
  assertEquals(-1,ret);
  ret=Arrays.binarySearch(a3,""String_Node_Str"",inverseSort);
  assertEquals(0,ret);
}","/** 
 * Test Arrays.binarySearch(Object[], Object, Comparator). Verify the following cases: empty array odd numbers of elements even numbers of elements not found value larger than all elements not found value smaller than all elements null Comparator uses natural ordering
 */
public void testBinarySearchObjectComparator(){
  Comparator inverseSort=new Comparator(){
    public int compare(    Object o1,    Object o2){
      return ((Comparable)o2).compareTo(o1);
    }
  }
;
  Object[] a1={};
  int ret=Arrays.binarySearch(a1,""String_Node_Str"",inverseSort);
  assertEquals(-1,ret);
  Object[] a2={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ret=Arrays.binarySearch(a2,""String_Node_Str"",inverseSort);
  assertEquals(-3,ret);
  ret=Arrays.binarySearch(a2,""String_Node_Str"",inverseSort);
  assertEquals(2,ret);
  Object[] a3={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ret=Arrays.binarySearch(a3,""String_Node_Str"",inverseSort);
  assertEquals(-5,ret);
  ret=Arrays.binarySearch(a3,""String_Node_Str"",inverseSort);
  assertEquals(-1,ret);
  ret=Arrays.binarySearch(a3,""String_Node_Str"",inverseSort);
  assertEquals(0,ret);
  Object[] a4={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ret=Arrays.binarySearch(a4,""String_Node_Str"",null);
  assertEquals(3,ret);
}"
83235,"private void fireOnResponseReceivedImpl(RequestCallback callback){
  if (xmlHttpRequest == null) {
    return;
  }
  cancelTimer();
  final JavaScriptObject xmlHttp=xmlHttpRequest;
  xmlHttpRequest=null;
  if (XMLHTTPRequest.hasStatusCodeUndefinedBug(xmlHttp)) {
    Throwable exception=new RuntimeException(""String_Node_Str"");
    callback.onError(this,exception);
  }
 else {
    Response response=createResponse(xmlHttp);
    callback.onResponseReceived(this,response);
  }
}","private void fireOnResponseReceivedImpl(RequestCallback callback){
  if (xmlHttpRequest == null) {
    return;
  }
  cancelTimer();
  final JavaScriptObject xmlHttp=xmlHttpRequest;
  xmlHttpRequest=null;
  String errorMsg=XMLHTTPRequest.getBrowserSpecificFailure(xmlHttp);
  if (errorMsg != null) {
    Throwable exception=new RuntimeException(errorMsg);
    callback.onError(this,exception);
  }
 else {
    Response response=createResponse(xmlHttp);
    callback.onResponseReceived(this,response);
  }
}"
83236,"/** 
 * Adds a child widget to the panel.
 * @param w the widget to be added
 */
public void add(Widget w){
  insert(w,getWidgetCount());
}","/** 
 * Adds a child widget to the panel. If the Widget is already attached to the HorizontalPanel, it will be moved to the end of the panel.
 * @param w the widget to be added
 */
public void add(Widget w){
  insert(w,getWidgetCount());
}"
83237,"/** 
 * Inserts a widget before the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  w.removeFromParent();
  Element td=DOM.createTD();
  DOM.insertChild(tableRow,td,beforeIndex);
  super.insert(w,td,beforeIndex);
  setCellHorizontalAlignment(w,horzAlign);
  setCellVerticalAlignment(w,vertAlign);
}","/** 
 * Inserts a widget before the specified index. If the Widget is already attached to the HorizontalPanel, it will be moved to the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  int idx=getWidgetIndex(w);
  if (idx == -1) {
    w.removeFromParent();
  }
 else {
    remove(w);
    if (idx < beforeIndex) {
      beforeIndex--;
    }
  }
  Element td=DOM.createTD();
  DOM.insertChild(tableRow,td,beforeIndex);
  super.insert(w,td,beforeIndex);
  setCellHorizontalAlignment(w,horzAlign);
  setCellVerticalAlignment(w,vertAlign);
}"
83238,"/** 
 * Adds a child widget to the panel.
 * @param w the widget to be added
 */
public void add(Widget w){
  insert(w,getWidgetCount());
}","/** 
 * Adds a child widget to the panel. If the Widget is already attached to the VerticalPanel, it will be moved to the end of the panel.
 * @param w the widget to be added
 */
public void add(Widget w){
  insert(w,getWidgetCount());
}"
83239,"/** 
 * Inserts a widget before the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  w.removeFromParent();
  Element tr=DOM.createTR();
  Element td=DOM.createTD();
  DOM.insertChild(getBody(),tr,beforeIndex);
  DOM.appendChild(tr,td);
  super.insert(w,td,beforeIndex);
  setCellHorizontalAlignment(w,horzAlign);
  setCellVerticalAlignment(w,vertAlign);
}","/** 
 * Inserts a widget before the specified index. If the Widget is already attached to the VerticalPanel, it will be moved to the specified index.
 * @param w the widget to be inserted
 * @param beforeIndex the index before which it will be inserted
 * @throws IndexOutOfBoundsException if <code>beforeIndex</code> is out ofrange
 */
public void insert(Widget w,int beforeIndex){
  int idx=getWidgetIndex(w);
  if (idx == -1) {
    w.removeFromParent();
  }
 else {
    remove(w);
    if (idx < beforeIndex) {
      beforeIndex--;
    }
  }
  Element tr=DOM.createTR();
  Element td=DOM.createTD();
  DOM.insertChild(getBody(),tr,beforeIndex);
  DOM.appendChild(tr,td);
  super.insert(w,td,beforeIndex);
  setCellHorizontalAlignment(w,horzAlign);
  setCellVerticalAlignment(w,vertAlign);
}"
83240,"public boolean onEventPreview(Event event){
  Element target=DOM.eventGetTarget(event);
  boolean eventTargetsPopup=DOM.isOrHasChild(getElement(),target);
  int type=DOM.eventGetType(event);
switch (type) {
case Event.ONKEYDOWN:
{
      return onKeyDownPreview((char)DOM.eventGetKeyCode(event),KeyboardListenerCollection.getKeyboardModifiers(event));
    }
case Event.ONKEYUP:
{
    return onKeyUpPreview((char)DOM.eventGetKeyCode(event),KeyboardListenerCollection.getKeyboardModifiers(event));
  }
case Event.ONKEYPRESS:
{
  return onKeyPressPreview((char)DOM.eventGetKeyCode(event),KeyboardListenerCollection.getKeyboardModifiers(event));
}
case Event.ONMOUSEDOWN:
case Event.ONMOUSEUP:
case Event.ONMOUSEMOVE:
case Event.ONCLICK:
case Event.ONDBLCLICK:
{
if (DOM.getCaptureElement() != null) {
  return true;
}
if (!eventTargetsPopup && autoHide && (type == Event.ONCLICK)) {
  hide(true);
  return true;
}
break;
}
case Event.ONFOCUS:
{
if (modal && !eventTargetsPopup && (target != null)) {
blur(target);
return false;
}
}
}
return !modal || (modal && eventTargetsPopup);
}","public boolean onEventPreview(Event event){
  Element target=DOM.eventGetTarget(event);
  boolean eventTargetsPopup=DOM.isOrHasChild(getElement(),target);
  int type=DOM.eventGetType(event);
switch (type) {
case Event.ONKEYDOWN:
{
      return onKeyDownPreview((char)DOM.eventGetKeyCode(event),KeyboardListenerCollection.getKeyboardModifiers(event));
    }
case Event.ONKEYUP:
{
    return onKeyUpPreview((char)DOM.eventGetKeyCode(event),KeyboardListenerCollection.getKeyboardModifiers(event));
  }
case Event.ONKEYPRESS:
{
  return onKeyPressPreview((char)DOM.eventGetKeyCode(event),KeyboardListenerCollection.getKeyboardModifiers(event));
}
case Event.ONMOUSEDOWN:
case Event.ONMOUSEUP:
case Event.ONMOUSEMOVE:
case Event.ONCLICK:
case Event.ONDBLCLICK:
{
if (DOM.getCaptureElement() != null) {
  return true;
}
if (!eventTargetsPopup && autoHide && (type == Event.ONMOUSEDOWN)) {
  hide(true);
  return true;
}
break;
}
case Event.ONFOCUS:
{
if (modal && !eventTargetsPopup && (target != null)) {
blur(target);
return false;
}
}
}
return !modal || (modal && eventTargetsPopup);
}"
83241,"/** 
 * Return an object containing the value JavaScript object as a specified type.
 * @param value the JavaScript value
 * @param type expected type of the returned object
 * @param msgPrefix a prefix for error/warning messages
 * @return the object reference
 * @throws HostedModeException if the JavaScript object is not assignable tothe supplied type.
 */
public static Object get(JsValue value,Class type,String msgPrefix){
  double doubleVal;
  if (value.isNull()) {
    return null;
  }
  if (value.isUndefined()) {
    throw new HostedModeException(msgPrefix + ""String_Node_Str"" + type.getName());
  }
  if (value.isWrappedJavaObject()) {
    Object origObject=value.getWrappedJavaObject();
    if (!type.isAssignableFrom(origObject.getClass())) {
      throw new HostedModeException(msgPrefix + ""String_Node_Str"" + origObject.getClass().getName()+ ""String_Node_Str""+ type.getName());
    }
    return origObject;
  }
  if (getJavaScriptObjectSuperclass(type) != null) {
    if (!value.isJavaScriptObject()) {
      throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str""+ type.getName());
    }
    return createJavaScriptObject(value,type);
  }
switch (TypeInfo.classifyType(type)) {
case TypeInfo.TYPE_WRAP_BOOLEAN:
case TypeInfo.TYPE_PRIM_BOOLEAN:
    if (!value.isBoolean()) {
      throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
    }
  return Boolean.valueOf(value.getBoolean());
case TypeInfo.TYPE_WRAP_BYTE:
case TypeInfo.TYPE_PRIM_BYTE:
return new Byte((byte)getIntRange(value,Byte.MIN_VALUE,Byte.MAX_VALUE,""String_Node_Str"",msgPrefix));
case TypeInfo.TYPE_WRAP_CHAR:
case TypeInfo.TYPE_PRIM_CHAR:
return new Character((char)getIntRange(value,Character.MIN_VALUE,Character.MAX_VALUE,""String_Node_Str"",msgPrefix));
case TypeInfo.TYPE_WRAP_DOUBLE:
case TypeInfo.TYPE_PRIM_DOUBLE:
if (!value.isNumber()) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
}
return new Double(value.getNumber());
case TypeInfo.TYPE_WRAP_FLOAT:
case TypeInfo.TYPE_PRIM_FLOAT:
if (!value.isNumber()) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
}
doubleVal=value.getNumber();
if ((float)(doubleVal - Float.MIN_VALUE) == 0.0f) {
doubleVal=Float.MIN_VALUE;
}
float floatVal=(float)doubleVal;
if (Float.isInfinite(floatVal) && !Double.isInfinite(doubleVal)) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + doubleVal+ ""String_Node_Str"");
}
return new Float(floatVal);
case TypeInfo.TYPE_WRAP_INT:
case TypeInfo.TYPE_PRIM_INT:
return new Integer(getIntRange(value,Integer.MIN_VALUE,Integer.MAX_VALUE,""String_Node_Str"",msgPrefix));
case TypeInfo.TYPE_WRAP_LONG:
case TypeInfo.TYPE_PRIM_LONG:
if (!value.isNumber()) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
}
doubleVal=value.getNumber();
if (doubleVal < Long.MIN_VALUE || doubleVal > Long.MAX_VALUE) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + doubleVal+ ""String_Node_Str"");
}
long longVal=(long)doubleVal;
if (doubleVal != longVal) {
ModuleSpace.getLogger().log(TreeLogger.WARN,msgPrefix + ""String_Node_Str"",null);
}
return new Long(longVal);
case TypeInfo.TYPE_WRAP_SHORT:
case TypeInfo.TYPE_PRIM_SHORT:
return new Short((short)getIntRange(value,Short.MIN_VALUE,Short.MAX_VALUE,""String_Node_Str"",msgPrefix));
case TypeInfo.TYPE_WRAP_STRING:
if (!value.isString()) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
}
return value.getString();
case TypeInfo.TYPE_USER:
if (value.isString()) {
return value.getString();
}
break;
}
throw new IllegalArgumentException(msgPrefix + ""String_Node_Str"" + TypeInfo.getSourceRepresentation(type,""String_Node_Str"")+ ""String_Node_Str""+ value.getTypeString());
}","/** 
 * Return an object containing the value JavaScript object as a specified type.
 * @param value the JavaScript value
 * @param type expected type of the returned object
 * @param msgPrefix a prefix for error/warning messages
 * @return the object reference
 * @throws HostedModeException if the JavaScript object is not assignable tothe supplied type.
 */
public static Object get(JsValue value,Class type,String msgPrefix){
  double doubleVal;
  if (value.isNull()) {
    return null;
  }
  if (value.isUndefined()) {
    throw new HostedModeException(msgPrefix + ""String_Node_Str"" + type.getName());
  }
  if (value.isWrappedJavaObject()) {
    Object origObject=value.getWrappedJavaObject();
    if (!type.isAssignableFrom(origObject.getClass())) {
      throw new HostedModeException(msgPrefix + ""String_Node_Str"" + origObject.getClass().getName()+ ""String_Node_Str""+ type.getName());
    }
    return origObject;
  }
  if (getJavaScriptObjectSuperclass(type) != null) {
    if (!value.isJavaScriptObject()) {
      throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str""+ type.getName());
    }
    return createJavaScriptObject(value,type);
  }
switch (TypeInfo.classifyType(type)) {
case TypeInfo.TYPE_WRAP_BOOLEAN:
case TypeInfo.TYPE_PRIM_BOOLEAN:
    if (!value.isBoolean()) {
      throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
    }
  return Boolean.valueOf(value.getBoolean());
case TypeInfo.TYPE_WRAP_BYTE:
case TypeInfo.TYPE_PRIM_BYTE:
return new Byte((byte)getIntRange(value,Byte.MIN_VALUE,Byte.MAX_VALUE,""String_Node_Str"",msgPrefix));
case TypeInfo.TYPE_WRAP_CHAR:
case TypeInfo.TYPE_PRIM_CHAR:
return new Character((char)getIntRange(value,Character.MIN_VALUE,Character.MAX_VALUE,""String_Node_Str"",msgPrefix));
case TypeInfo.TYPE_WRAP_DOUBLE:
case TypeInfo.TYPE_PRIM_DOUBLE:
if (!value.isNumber()) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
}
return new Double(value.getNumber());
case TypeInfo.TYPE_WRAP_FLOAT:
case TypeInfo.TYPE_PRIM_FLOAT:
if (!value.isNumber()) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
}
doubleVal=value.getNumber();
if ((float)(doubleVal - Float.MIN_VALUE) == 0.0f) {
doubleVal=Float.MIN_VALUE;
}
float floatVal=(float)doubleVal;
if (Float.isInfinite(floatVal) && !Double.isInfinite(doubleVal)) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + doubleVal+ ""String_Node_Str"");
}
return new Float(floatVal);
case TypeInfo.TYPE_WRAP_INT:
case TypeInfo.TYPE_PRIM_INT:
return new Integer(getIntRange(value,Integer.MIN_VALUE,Integer.MAX_VALUE,""String_Node_Str"",msgPrefix));
case TypeInfo.TYPE_WRAP_LONG:
case TypeInfo.TYPE_PRIM_LONG:
if (!value.isNumber()) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
}
doubleVal=value.getNumber();
if (doubleVal < Long.MIN_VALUE || doubleVal > Long.MAX_VALUE) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + doubleVal+ ""String_Node_Str"");
}
long longVal=(long)doubleVal;
if (doubleVal != longVal) {
ModuleSpace.getLogger().log(TreeLogger.WARN,msgPrefix + ""String_Node_Str"",null);
}
return new Long(longVal);
case TypeInfo.TYPE_WRAP_SHORT:
case TypeInfo.TYPE_PRIM_SHORT:
return new Short((short)getIntRange(value,Short.MIN_VALUE,Short.MAX_VALUE,""String_Node_Str"",msgPrefix));
case TypeInfo.TYPE_WRAP_STRING:
if (!value.isString()) {
throw new HostedModeException(msgPrefix + ""String_Node_Str"" + value.getTypeString()+ ""String_Node_Str"");
}
return value.getString();
case TypeInfo.TYPE_USER:
if (value.isString()) {
return value.getString();
}
break;
}
throw new IllegalArgumentException(msgPrefix + ""String_Node_Str"" + TypeInfo.getSourceRepresentation(type)+ ""String_Node_Str""+ value.getTypeString());
}"
83242,"public static String getSourceRepresentation(Class type,String optArrayDim){
  if (type.equals(Integer.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Long.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Short.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Byte.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Character.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Boolean.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Float.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Double.TYPE)) {
    return ""String_Node_Str"";
  }
  if (type.isArray()) {
    Class componentType=type.getComponentType();
    return getSourceRepresentation(componentType,optArrayDim) + ""String_Node_Str"";
  }
  return type.getName().replace('$','.');
}","public static String getSourceRepresentation(Class type){
  if (type.equals(Integer.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Long.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Short.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Byte.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Character.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Boolean.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Float.TYPE)) {
    return ""String_Node_Str"";
  }
 else   if (type.equals(Double.TYPE)) {
    return ""String_Node_Str"";
  }
  if (type.isArray()) {
    Class componentType=type.getComponentType();
    return getSourceRepresentation(componentType) + ""String_Node_Str"";
  }
  return type.getName().replace('$','.');
}"
83243,"private static String formatMethodNotFoundErrorMessage(Class serviceIntf,String serviceMethodName,Class[] parameterTypes){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(serviceMethodName);
  sb.append(""String_Node_Str"");
  for (int i=0; i < parameterTypes.length; ++i) {
    if (i > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(TypeInfo.getSourceRepresentation(parameterTypes[i],""String_Node_Str""));
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(TypeInfo.getSourceRepresentation(serviceIntf,""String_Node_Str""));
  sb.append(""String_Node_Str"");
  return sb.toString();
}","private static String formatMethodNotFoundErrorMessage(Class serviceIntf,String serviceMethodName,Class[] parameterTypes){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(serviceMethodName);
  sb.append(""String_Node_Str"");
  for (int i=0; i < parameterTypes.length; ++i) {
    if (i > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(printTypeName(parameterTypes[i]));
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(printTypeName(serviceIntf));
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
83244,"/** 
 * Returns an   {@link RPCRequest} that is built by decoding the contents of anencoded RPC request and optionally validating that type can handle the request. If the type parameter is not <code>null</code>, the implementation checks that the type is assignable to the {@link RemoteService} interface requested in the encoded request string.<p> Invoking this method with <code>null</code> for the type parameter, <code>decodeRequest(encodedRequest, null)</code>, is equivalent to calling <code>decodeRequest(encodedRequest)</code>. </p>
 * @param encodedRequest a string that encodes the {@link RemoteService}interface, the service method, and the arguments to pass to the service method
 * @param type if not <code>null</code>, the implementation checks that thetype is assignable to the  {@link RemoteService} interface encodedin the encoded request string.
 * @return an {@link RPCRequest} instance
 * @throws NullPointerException if the encodedRequest is <code>null</code>
 * @throws IllegalArgumentException if the encodedRequest is an empty string
 * @throws SerializationException if the types in the encoded request cannotbe deserialized
 * @throws SecurityException if any of the following conditions apply:<ul> <li><code>RPC.class.getClassLoader()</code> cannot load the service interface requested in the encodedRequest</li> <li>the requested interface is not assignable to {@link RemoteService}</li> <li>the service method requested in the encodedRequest is not a member of the requested service interface</li> <li>the type parameter is not <code>null</code> and is not assignable to the requested   {@link RemoteService} interface</ul>
 */
public static RPCRequest decodeRequest(String encodedRequest,Class type) throws SerializationException {
  if (encodedRequest == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (encodedRequest.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ServerSerializationStreamReader streamReader=new ServerSerializationStreamReader(serializableTypeOracle);
  streamReader.prepareToRead(encodedRequest);
  String serviceIntfName=streamReader.readString();
  if (type != null) {
    if (!implementsInterface(type,serviceIntfName)) {
      throw new SecurityException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str""+ TypeInfo.getSourceRepresentation(type,""String_Node_Str"")+ ""String_Node_Str"");
    }
  }
  Class serviceIntf;
  try {
    serviceIntf=getClassFromSerializedName(serviceIntfName);
    if (!RemoteService.class.isAssignableFrom(serviceIntf)) {
      throw new SecurityException(""String_Node_Str"" + TypeInfo.getSourceRepresentation(serviceIntf,""String_Node_Str"") + ""String_Node_Str"");
    }
  }
 catch (  ClassNotFoundException e) {
    SecurityException securityException=new SecurityException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str"");
    securityException.initCause(e);
    throw securityException;
  }
  String serviceMethodName=streamReader.readString();
  int paramCount=streamReader.readInt();
  Class[] parameterTypes=new Class[paramCount];
  for (int i=0; i < parameterTypes.length; i++) {
    String paramClassName=streamReader.readString();
    try {
      parameterTypes[i]=getClassFromSerializedName(paramClassName);
    }
 catch (    ClassNotFoundException e) {
      throw new SerializationException(""String_Node_Str"" + i + ""String_Node_Str""+ paramClassName+ ""String_Node_Str"",e);
    }
  }
  Method method=findInterfaceMethod(serviceIntf,serviceMethodName,parameterTypes,true);
  if (method == null) {
    throw new SecurityException(formatMethodNotFoundErrorMessage(serviceIntf,serviceMethodName,parameterTypes));
  }
  Object[] parameterValues=new Object[parameterTypes.length];
  for (int i=0; i < parameterValues.length; i++) {
    parameterValues[i]=streamReader.deserializeValue(parameterTypes[i]);
  }
  return new RPCRequest(method,parameterValues);
}","/** 
 * Returns an   {@link RPCRequest} that is built by decoding the contents of anencoded RPC request and optionally validating that type can handle the request. If the type parameter is not <code>null</code>, the implementation checks that the type is assignable to the {@link RemoteService} interface requested in the encoded request string.<p> Invoking this method with <code>null</code> for the type parameter, <code>decodeRequest(encodedRequest, null)</code>, is equivalent to calling <code>decodeRequest(encodedRequest)</code>. </p>
 * @param encodedRequest a string that encodes the {@link RemoteService}interface, the service method, and the arguments to pass to the service method
 * @param type if not <code>null</code>, the implementation checks that thetype is assignable to the  {@link RemoteService} interface encodedin the encoded request string.
 * @return an {@link RPCRequest} instance
 * @throws NullPointerException if the encodedRequest is <code>null</code>
 * @throws IllegalArgumentException if the encodedRequest is an empty string
 * @throws SerializationException if the types in the encoded request cannotbe deserialized
 * @throws SecurityException if any of the following conditions apply:<ul> <li><code>RPC.class.getClassLoader()</code> cannot load the service interface requested in the encodedRequest</li> <li>the requested interface is not assignable to {@link RemoteService}</li> <li>the service method requested in the encodedRequest is not a member of the requested service interface</li> <li>the type parameter is not <code>null</code> and is not assignable to the requested   {@link RemoteService} interface</ul>
 */
public static RPCRequest decodeRequest(String encodedRequest,Class type) throws SerializationException {
  if (encodedRequest == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (encodedRequest.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ServerSerializationStreamReader streamReader=new ServerSerializationStreamReader(serializableTypeOracle);
  streamReader.prepareToRead(encodedRequest);
  String serviceIntfName=streamReader.readString();
  if (type != null) {
    if (!implementsInterface(type,serviceIntfName)) {
      throw new SecurityException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str""+ printTypeName(type)+ ""String_Node_Str"");
    }
  }
  Class serviceIntf;
  try {
    serviceIntf=getClassFromSerializedName(serviceIntfName);
    if (!RemoteService.class.isAssignableFrom(serviceIntf)) {
      throw new SecurityException(""String_Node_Str"" + printTypeName(serviceIntf) + ""String_Node_Str"");
    }
  }
 catch (  ClassNotFoundException e) {
    SecurityException securityException=new SecurityException(""String_Node_Str"" + serviceIntfName + ""String_Node_Str"");
    securityException.initCause(e);
    throw securityException;
  }
  String serviceMethodName=streamReader.readString();
  int paramCount=streamReader.readInt();
  Class[] parameterTypes=new Class[paramCount];
  for (int i=0; i < parameterTypes.length; i++) {
    String paramClassName=streamReader.readString();
    try {
      parameterTypes[i]=getClassFromSerializedName(paramClassName);
    }
 catch (    ClassNotFoundException e) {
      throw new SerializationException(""String_Node_Str"" + i + ""String_Node_Str""+ paramClassName+ ""String_Node_Str"",e);
    }
  }
  Method method=findInterfaceMethod(serviceIntf,serviceMethodName,parameterTypes,true);
  if (method == null) {
    throw new SecurityException(formatMethodNotFoundErrorMessage(serviceIntf,serviceMethodName,parameterTypes));
  }
  Object[] parameterValues=new Object[parameterTypes.length];
  for (int i=0; i < parameterValues.length; i++) {
    parameterValues[i]=streamReader.deserializeValue(parameterTypes[i]);
  }
  return new RPCRequest(method,parameterValues);
}"
83245,"/** 
 * Returns a string that encodes the object. It is an error to try to encode an object that is not assignable to the service method's return type.
 * @param serviceMethod the method whose result we are encoding
 * @param object the instance that we wish to encode
 * @return a string that encodes the object, if the object is compatible withthe service method's declared return type
 * @throws IllegalArgumentException if the result is not assignable to theservice method's return type
 * @throws NullPointerException if the service method is <code>null</code>
 * @throws SerializationException if the result cannot be serialized
 */
public static String encodeResponseForSuccess(Method serviceMethod,Object object) throws SerializationException {
  if (serviceMethod == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class methodReturnType=serviceMethod.getReturnType();
  if (methodReturnType != void.class && object != null) {
    Class actualReturnType;
    if (methodReturnType.isPrimitive()) {
      actualReturnType=getPrimitiveClassFromWrapper(object.getClass());
    }
 else {
      actualReturnType=object.getClass();
    }
    if (actualReturnType == null || !methodReturnType.isAssignableFrom(actualReturnType)) {
      throw new IllegalArgumentException(""String_Node_Str"" + TypeInfo.getSourceRepresentation(object.getClass(),""String_Node_Str"") + ""String_Node_Str""+ getSourceRepresentation(serviceMethod)+ ""String_Node_Str"");
    }
  }
  return encodeResponse(methodReturnType,object,false);
}","/** 
 * Returns a string that encodes the object. It is an error to try to encode an object that is not assignable to the service method's return type.
 * @param serviceMethod the method whose result we are encoding
 * @param object the instance that we wish to encode
 * @return a string that encodes the object, if the object is compatible withthe service method's declared return type
 * @throws IllegalArgumentException if the result is not assignable to theservice method's return type
 * @throws NullPointerException if the service method is <code>null</code>
 * @throws SerializationException if the result cannot be serialized
 */
public static String encodeResponseForSuccess(Method serviceMethod,Object object) throws SerializationException {
  if (serviceMethod == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class methodReturnType=serviceMethod.getReturnType();
  if (methodReturnType != void.class && object != null) {
    Class actualReturnType;
    if (methodReturnType.isPrimitive()) {
      actualReturnType=getPrimitiveClassFromWrapper(object.getClass());
    }
 else {
      actualReturnType=object.getClass();
    }
    if (actualReturnType == null || !methodReturnType.isAssignableFrom(actualReturnType)) {
      throw new IllegalArgumentException(""String_Node_Str"" + printTypeName(object.getClass()) + ""String_Node_Str""+ getSourceRepresentation(serviceMethod)+ ""String_Node_Str"");
    }
  }
  return encodeResponse(methodReturnType,object,false);
}"
83246,"private static String formatIllegalAccessErrorMessage(Object target,Method serviceMethod){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(getSourceRepresentation(serviceMethod));
  sb.append(""String_Node_Str"");
  if (target != null) {
    sb.append(""String_Node_Str"");
    sb.append(TypeInfo.getSourceRepresentation(target.getClass(),""String_Node_Str""));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}","private static String formatIllegalAccessErrorMessage(Object target,Method serviceMethod){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(getSourceRepresentation(serviceMethod));
  sb.append(""String_Node_Str"");
  if (target != null) {
    sb.append(""String_Node_Str"");
    sb.append(printTypeName(target.getClass()));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
83247,"private static String formatIllegalArgumentErrorMessage(Object target,Method serviceMethod,Object[] args){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(getSourceRepresentation(serviceMethod));
  sb.append(""String_Node_Str"");
  if (target != null) {
    sb.append(""String_Node_Str"");
    sb.append(TypeInfo.getSourceRepresentation(target.getClass(),""String_Node_Str""));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  if (args != null && args.length > 0) {
    sb.append(Arrays.asList(args));
  }
  return sb.toString();
}","private static String formatIllegalArgumentErrorMessage(Object target,Method serviceMethod,Object[] args){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  sb.append(getSourceRepresentation(serviceMethod));
  sb.append(""String_Node_Str"");
  if (target != null) {
    sb.append(""String_Node_Str"");
    sb.append(printTypeName(target.getClass()));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  if (args != null && args.length > 0) {
    sb.append(Arrays.asList(args));
  }
  return sb.toString();
}"
83248,"private void hide(boolean autoClosed){
  if (!showing) {
    return;
  }
  showing=false;
  DOM.removeEventPreview(this);
  RootPanel.get().remove(this);
  impl.onHide(getElement());
  if (popupListeners != null) {
    popupListeners.firePopupClosed(this,autoClosed);
  }
}","private void hide(boolean autoClosed){
  if (!showing) {
    return;
  }
  showing=false;
  RootPanel.get().remove(this);
  impl.onHide(getElement());
  if (popupListeners != null) {
    popupListeners.firePopupClosed(this,autoClosed);
  }
}"
83249,"/** 
 * Creates an HTML SELECT element.
 * @return the newly-created element
 */
public static Element createSelect(){
  return impl.createElement(""String_Node_Str"");
}","/** 
 * Creates an HTML SELECT element.
 * @return the newly-created element
 */
public static Element createSelect(boolean multiple){
  return impl.createSelectElement(multiple);
}"
83250,"/** 
 * Gets the value associated with the item at a given index. 
 * @param index the index of the item to be retrieved
 * @return the item's associated value
 * @throws IndexOutOfBoundsException if the index is out of range
 */
public String getValue(int index){
  checkIndex(index);
  Element option=DOM.getChild(getElement(),index);
  return DOM.getElementProperty(option,""String_Node_Str"");
}","/** 
 * Gets the value associated with the item at a given index.
 * @param index the index of the item to be retrieved
 * @return the item's associated value
 * @throws IndexOutOfBoundsException if the index is out of range
 */
public String getValue(int index){
  checkIndex(index);
  Element option=DOM.getChild(getElement(),index);
  return DOM.getElementProperty(option,""String_Node_Str"");
}"
83251,"/** 
 * Sets whether this list allows multiple selections.
 * @param multiple <code>true</code> to allow multiple selections
 */
public void setMultipleSelect(boolean multiple){
  DOM.setElementPropertyBoolean(getElement(),""String_Node_Str"",multiple);
}","/** 
 * Sets whether this list allows multiple selections. <em>NOTE: The preferred way of enabling multiple selections in a list box is by using the  {@link #ListBox(boolean)} constructor. Using this method can spuriouslyfail on Internet Explorer 6.0.</em>
 * @param multiple <code>true</code> to allow multiple selections
 */
public void setMultipleSelect(boolean multiple){
  DOM.setElementPropertyBoolean(getElement(),""String_Node_Str"",multiple);
}"
83252,"/** 
 * Creates an empty list box.
 */
public ListBox(){
  super(DOM.createSelect());
  sinkEvents(Event.ONCHANGE);
  setStyleName(""String_Node_Str"");
}","/** 
 * Creates an empty list box. The preferred way to enable multiple selections is to use this constructor rather than   {@link #setMultipleSelect(boolean)}.
 * @param isMultipleSelect specifies if multiple selection is enabled
 */
public ListBox(boolean isMultipleSelect){
  super(DOM.createSelect(isMultipleSelect));
  sinkEvents(Event.ONCHANGE);
  setStyleName(""String_Node_Str"");
}"
83253,"public void testSelection(){
  ListBox box=new ListBox();
  box.addItem(""String_Node_Str"");
  box.setSelectedIndex(-1);
  assertEquals(-1,box.getSelectedIndex());
  box.setSelectedIndex(0);
  assertEquals(""String_Node_Str"",box.getItemText(box.getSelectedIndex()));
}","public void testSelection(){
{
    ListBox box=new ListBox();
    box.addItem(""String_Node_Str"");
    box.setSelectedIndex(-1);
    assertEquals(-1,box.getSelectedIndex());
    box.setSelectedIndex(0);
    assertEquals(""String_Node_Str"",box.getItemText(box.getSelectedIndex()));
  }
{
    ListBox box=new ListBox(true);
    box.setMultipleSelect(true);
    box.addItem(""String_Node_Str"");
    box.addItem(""String_Node_Str"");
    box.addItem(""String_Node_Str"");
    for (int j=0; j < box.getItemCount(); j++) {
      box.setItemSelected(j,true);
    }
    for (int j=0; j < box.getItemCount(); j++) {
      assertTrue(box.isItemSelected(j));
    }
  }
}"
83254,"/** 
 * Adds a widget to the tab panel.
 * @param w the widget to be added
 * @param tabWidget the widget to be shown in the tab
 */
public void add(Widget w,Widget tabWidget){
  insert(w,tabWidget,getWidgetCount());
}","/** 
 * Adds a widget to the tab panel.  If the Widget is already attached to the TabPanel, it will be moved to the right-most index.
 * @param w the widget to be added
 * @param tabWidget the widget to be shown in the tab
 */
public void add(Widget w,Widget tabWidget){
  insert(w,tabWidget,getWidgetCount());
}"
83255,"public int getWidgetIndex(Widget widget){
  return children.indexOf(widget);
}","public int getWidgetIndex(Widget widget){
  return deck.getWidgetIndex(widget);
}"
83256,"public Widget getWidget(int index){
  return children.get(index);
}","public Widget getWidget(int index){
  return deck.getWidget(index);
}"
83257,"/** 
 * Inserts a widget into the tab panel.
 * @param widget the widget to be inserted
 * @param tabText the text to be shown on its tab
 * @param beforeIndex the index before which it will be inserted
 */
public void insert(Widget widget,String tabText,int beforeIndex){
  insert(widget,tabText,false,beforeIndex);
}","/** 
 * Inserts a widget into the tab panel.  If the Widget is already attached to the TabPanel, it will be moved to the requested index.
 * @param widget the widget to be inserted
 * @param tabText the text to be shown on its tab
 * @param beforeIndex the index before which it will be inserted
 */
public void insert(Widget widget,String tabText,int beforeIndex){
  insert(widget,tabText,false,beforeIndex);
}"
83258,"/** 
 * Removes the given widget, and its associated tab.
 * @param widget the widget to be removed
 */
public boolean remove(Widget widget){
  int index=getWidgetIndex(widget);
  if (index == -1) {
    return false;
  }
  children.remove(widget);
  tabBar.removeTab(index);
  deck.remove(widget);
  return true;
}","/** 
 * Removes the given widget, and its associated tab.
 * @param widget the widget to be removed
 */
public boolean remove(Widget widget){
  return deck.remove(widget);
}"
83259,"public int getWidgetCount(){
  return children.size();
}","public int getWidgetCount(){
  return deck.getWidgetCount();
}"
83260,"/** 
 * Gets the deck panel within this tab panel.
 * @return the deck panel
 */
public DeckPanel getDeckPanel(){
  return deck;
}","/** 
 * Gets the deck panel within this tab panel.  Adding or removing Widgets from the DeckPanel is not supported and will throw UnsupportedOperationExceptions.
 * @return the deck panel
 */
public DeckPanel getDeckPanel(){
  return deck;
}"
83261,"public Iterator iterator(){
  return children.iterator();
}","public Iterator iterator(){
  return deck.iterator();
}"
83262,"/** 
 * Gets the tab bar within this tab panel.
 * @return the tab bar
 */
public TabBar getTabBar(){
  return tabBar;
}","/** 
 * Gets the tab bar within this tab panel.  Adding or removing tabs from from the TabBar is not supported and will throw UnsupportedOperationExceptions.
 * @return the tab bar
 */
public TabBar getTabBar(){
  return tabBar;
}"
83263,"/** 
 * A helper for widgets that source mouse events.
 * @param sender the widget sending the event
 * @param event the {@link Event} received by the widget
 */
public void fireMouseEvent(Widget sender,Event event){
  int x=DOM.eventGetClientX(event) - DOM.getAbsoluteLeft(sender.getElement());
  int y=DOM.eventGetClientY(event) - DOM.getAbsoluteTop(sender.getElement());
switch (DOM.eventGetType(event)) {
case Event.ONMOUSEDOWN:
    fireMouseDown(sender,x,y);
  break;
case Event.ONMOUSEUP:
fireMouseUp(sender,x,y);
break;
case Event.ONMOUSEMOVE:
fireMouseMove(sender,x,y);
break;
case Event.ONMOUSEOVER:
Element from=DOM.eventGetFromElement(event);
if (!DOM.isOrHasChild(sender.getElement(),from)) {
fireMouseEnter(sender);
}
break;
case Event.ONMOUSEOUT:
Element to=DOM.eventGetToElement(event);
if (!DOM.isOrHasChild(sender.getElement(),to)) {
fireMouseLeave(sender);
}
break;
}
}","/** 
 * A helper for widgets that source mouse events.
 * @param sender the widget sending the event
 * @param event the {@link Event} received by the widget
 */
public void fireMouseEvent(Widget sender,Event event){
  final Element senderElem=sender.getElement();
  int x=DOM.eventGetClientX(event) - DOM.getAbsoluteLeft(sender.getElement()) + DOM.getElementPropertyInt(senderElem,""String_Node_Str"") + Window.getScrollLeft();
  int y=DOM.eventGetClientY(event) - DOM.getAbsoluteTop(sender.getElement()) + DOM.getElementPropertyInt(senderElem,""String_Node_Str"") + Window.getScrollTop();
switch (DOM.eventGetType(event)) {
case Event.ONMOUSEDOWN:
    fireMouseDown(sender,x,y);
  break;
case Event.ONMOUSEUP:
fireMouseUp(sender,x,y);
break;
case Event.ONMOUSEMOVE:
fireMouseMove(sender,x,y);
break;
case Event.ONMOUSEOVER:
Element from=DOM.eventGetFromElement(event);
if (!DOM.isOrHasChild(sender.getElement(),from)) {
fireMouseEnter(sender);
}
break;
case Event.ONMOUSEOUT:
Element to=DOM.eventGetToElement(event);
if (!DOM.isOrHasChild(sender.getElement(),to)) {
fireMouseLeave(sender);
}
break;
}
}"
83264,"/** 
 * A helper for widgets that source mouse events.
 * @param sender the widget sending the event
 * @param event the {@link Event} received by the widget
 */
public void fireMouseWheelEvent(Widget sender,Event event){
  if (DOM.eventGetType(event) == Event.ONMOUSEWHEEL) {
    int x=DOM.eventGetClientX(event) - DOM.getAbsoluteLeft(sender.getElement());
    int y=DOM.eventGetClientY(event) - DOM.getAbsoluteTop(sender.getElement());
    MouseWheelVelocity velocity=new MouseWheelVelocity(event);
    fireMouseWheel(sender,x,y,velocity);
  }
}","/** 
 * A helper for widgets that source mouse events.
 * @param sender the widget sending the event
 * @param event the {@link Event} received by the widget
 */
public void fireMouseWheelEvent(Widget sender,Event event){
  if (DOM.eventGetType(event) == Event.ONMOUSEWHEEL) {
    final Element senderElem=sender.getElement();
    int x=DOM.eventGetClientX(event) - DOM.getAbsoluteLeft(sender.getElement()) + DOM.getElementPropertyInt(senderElem,""String_Node_Str"") + Window.getScrollLeft();
    int y=DOM.eventGetClientY(event) - DOM.getAbsoluteTop(sender.getElement()) + DOM.getElementPropertyInt(senderElem,""String_Node_Str"") + Window.getScrollTop();
    MouseWheelVelocity velocity=new MouseWheelVelocity(event);
    fireMouseWheel(sender,x,y,velocity);
  }
}"
83265,"public String getParameterizedQualifiedSourceName(){
  StringBuffer sb=new StringBuffer();
  sb.append(parameterized.getQualifiedSourceName());
  sb.append('<');
  boolean needComma=false;
  for (Iterator iter=typeArgs.iterator(); iter.hasNext(); ) {
    JType typeArg=(JType)iter.next();
    if (needComma) {
      sb.append(""String_Node_Str"");
    }
 else {
      needComma=true;
    }
    sb.append(typeArg.getQualifiedSourceName());
  }
  sb.append('>');
  return sb.toString();
}","public String getParameterizedQualifiedSourceName(){
  StringBuffer sb=new StringBuffer();
  sb.append(parameterized.getQualifiedSourceName());
  sb.append('<');
  boolean needComma=false;
  for (Iterator iter=typeArgs.iterator(); iter.hasNext(); ) {
    JType typeArg=(JType)iter.next();
    if (needComma) {
      sb.append(""String_Node_Str"");
    }
 else {
      needComma=true;
    }
    sb.append(typeArg.getParameterizedQualifiedSourceName());
  }
  sb.append('>');
  return sb.toString();
}"
83266,"private JType parseImpl(String type) throws NotFoundException, ParseException, BadTypeArgsException {
  if (type.endsWith(""String_Node_Str"")) {
    String remainder=type.substring(0,type.length() - 2);
    JType componentType=parseImpl(remainder);
    return getArrayType(componentType);
  }
  if (type.endsWith(""String_Node_Str"")) {
    int bracket=type.indexOf('<');
    if (bracket == -1) {
      throw new ParseException(""String_Node_Str"");
    }
    String rawTypeName=type.substring(0,bracket);
    JType rawType=parseImpl(rawTypeName);
    if (rawType.isParameterized() != null) {
      throw new BadTypeArgsException(""String_Node_Str"");
    }
 else     if (rawType.isClassOrInterface() == null) {
      throw new BadTypeArgsException(""String_Node_Str"" + rawType.getQualifiedSourceName() + ""String_Node_Str"");
    }
    String typeArgGuts=type.substring(bracket + 1,type.length() - 1);
    String[] typeArgNames=typeArgGuts.split(""String_Node_Str"");
    JType[] typeArgs=new JType[typeArgNames.length];
    for (int i=0; i < typeArgNames.length; i++) {
      typeArgs[i]=parseImpl(typeArgNames[i]);
      if (typeArgs[i].isPrimitive() != null) {
        throw new BadTypeArgsException(""String_Node_Str"" + typeArgs[i].getQualifiedSourceName() + ""String_Node_Str"");
      }
    }
    return getParameterizedType(rawType.isClassOrInterface(),typeArgs);
  }
  JType result=JPrimitiveType.valueOf(type);
  if (result != null) {
    return result;
  }
  result=findType(type);
  if (result != null) {
    return result;
  }
  throw new NotFoundException(type);
}","private JType parseImpl(String type) throws NotFoundException, ParseException, BadTypeArgsException {
  if (type.endsWith(""String_Node_Str"")) {
    String remainder=type.substring(0,type.length() - 2);
    JType componentType=parseImpl(remainder);
    return getArrayType(componentType);
  }
  if (type.endsWith(""String_Node_Str"")) {
    int bracket=type.indexOf('<');
    if (bracket == -1) {
      throw new ParseException(""String_Node_Str"");
    }
    String rawTypeName=type.substring(0,bracket);
    JType rawType=parseImpl(rawTypeName);
    if (rawType.isParameterized() != null) {
      throw new BadTypeArgsException(""String_Node_Str"");
    }
 else     if (rawType.isClassOrInterface() == null) {
      throw new BadTypeArgsException(""String_Node_Str"" + rawType.getQualifiedSourceName() + ""String_Node_Str"");
    }
    String typeArgContents=type.substring(bracket + 1,type.length() - 1);
    JType[] typeArgs=parseTypeArgContents(typeArgContents);
    return getParameterizedType(rawType.isClassOrInterface(),typeArgs);
  }
  JType result=JPrimitiveType.valueOf(type);
  if (result != null) {
    return result;
  }
  result=findType(type);
  if (result != null) {
    return result;
  }
  throw new NotFoundException(type);
}"
83267,"/** 
 * Gets the parameterized type object that represents the combination of a specified raw type and a set of type arguments. The returned type always has a stable identity so as to guarantee that all calls to this method with the same arguments return the same object.
 * @param rawType the raw type of the array, which must be a class orinterface type and cannot be a primitive, array, or another parameterized type
 * @param typeArgs the type arguments bound to the specified raw type
 * @return a type object representing this particular binding of typearguments to the specified raw type
 */
public JType getParameterizedType(JClassType rawType,JType[] typeArgs){
  JParameterizedType parameterized=new JParameterizedType(rawType);
  for (int i=0; i < typeArgs.length; i++) {
    parameterized.addTypeArg(typeArgs[i]);
  }
  String sig=parameterized.getQualifiedSourceName();
  JParameterizedType existing=(JParameterizedType)parameterizedTypes.get(sig);
  if (existing == null) {
    parameterizedTypes.put(sig,parameterized);
    existing=parameterized;
  }
  return existing;
}","/** 
 * Gets the parameterized type object that represents the combination of a specified raw type and a set of type arguments. The returned type always has a stable identity so as to guarantee that all calls to this method with the same arguments return the same object.
 * @param rawType the raw type of the array, which must be a class orinterface type and cannot be a primitive, array, or another parameterized type
 * @param typeArgs the type arguments bound to the specified raw type
 * @return a type object representing this particular binding of typearguments to the specified raw type
 */
public JType getParameterizedType(JClassType rawType,JType[] typeArgs){
  JParameterizedType parameterized=new JParameterizedType(rawType);
  for (int i=0; i < typeArgs.length; i++) {
    parameterized.addTypeArg(typeArgs[i]);
  }
  String sig=parameterized.getParameterizedQualifiedSourceName();
  JParameterizedType existing=(JParameterizedType)parameterizedTypes.get(sig);
  if (existing == null) {
    parameterizedTypes.put(sig,parameterized);
    existing=parameterized;
  }
  return existing;
}"
83268,"/** 
 * Adapted from  {@link com.google.javascript.jscomp.rhino.ScriptRuntime#escapeString(String)}. The difference is that we quote with either &quot; or &apos; depending on which one is used less inside the string.
 */
private void printStringLiteral(String value){
  char[] chars=value.toCharArray();
  final int n=chars.length;
  int quoteCount=0;
  int aposCount=0;
  for (int i=0; i < n; ++i) {
switch (chars[i]) {
case '""':
      ++quoteCount;
    break;
case '\'':
  ++aposCount;
break;
}
}
char quoteChar=(quoteCount < aposCount) ? '""' : '\'';
p.print(quoteChar);
for (int i=0; i < n; ++i) {
char c=chars[i];
if (' ' <= c && c <= '~' && c != quoteChar && c != '\\') {
p.print(c);
continue;
}
int escape=-1;
switch (c) {
case 0:
escape='0';
break;
case '\b':
escape='b';
break;
case '\f':
escape='f';
break;
case '\n':
escape='n';
break;
case '\r':
escape='r';
break;
case '\t':
escape='t';
break;
case '""':
escape='""';
break;
case '\'':
escape='\'';
break;
case '\\':
escape='\\';
break;
}
if (escape >= 0) {
p.print('\\');
p.print((char)escape);
}
 else {
int hexSize;
if (c < 256) {
p.print(""String_Node_Str"");
hexSize=2;
}
 else {
p.print(""String_Node_Str"");
hexSize=4;
}
for (int shift=(hexSize - 1) * 4; shift >= 0; shift-=4) {
int digit=0xf & (c >> shift);
p.print(HEX_DIGITS[digit]);
}
}
}
p.print(quoteChar);
}","/** 
 * Adapted from  {@link com.google.gwt.dev.js.rhino.ScriptRuntime#escapeString(String)}. The difference is that we quote with either &quot; or &apos; depending on which one is used less inside the string.
 */
private void printStringLiteral(String value){
  char[] chars=value.toCharArray();
  final int n=chars.length;
  int quoteCount=0;
  int aposCount=0;
  for (int i=0; i < n; ++i) {
switch (chars[i]) {
case '""':
      ++quoteCount;
    break;
case '\'':
  ++aposCount;
break;
}
}
StringBuffer result=new StringBuffer(value.length() + 16);
char quoteChar=(quoteCount < aposCount) ? '""' : '\'';
p.print(quoteChar);
for (int i=0; i < n; ++i) {
char c=chars[i];
if (' ' <= c && c <= '~' && c != quoteChar && c != '\\') {
result.append(c);
continue;
}
int escape=-1;
switch (c) {
case 0:
escape='0';
break;
case '\b':
escape='b';
break;
case '\f':
escape='f';
break;
case '\n':
escape='n';
break;
case '\r':
escape='r';
break;
case '\t':
escape='t';
break;
case '""':
escape='""';
break;
case '\'':
escape='\'';
break;
case '\\':
escape='\\';
break;
}
if (escape >= 0) {
result.append('\\');
result.append((char)escape);
}
 else {
int hexSize;
if (c < 256) {
result.append(""String_Node_Str"");
hexSize=2;
}
 else {
result.append(""String_Node_Str"");
hexSize=4;
}
for (int shift=(hexSize - 1) * 4; shift >= 0; shift-=4) {
int digit=0xf & (c >> shift);
result.append(HEX_DIGITS[digit]);
}
}
}
result.append(quoteChar);
escapeClosingTags(result);
p.print(result.toString());
}"
83269,"/** 
 * This method is called when a widget is attached to the browser's document. It must not be overridden, except by   {@link Panel}. To receive notification when a widget is attached to the document, override the  {@link #onLoad} method.
 * @throws IllegalStateException if this widget is already attached
 */
protected void onAttach(){
  if (attached) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  attached=true;
  DOM.setEventListener(getElement(),this);
  onLoad();
}","/** 
 * This method is called when a widget is attached to the browser's document. To receive notification after a Widget has been added from the document, override the   {@link #onLoad} method.<p> Subclasses that override this method must call <code>super.onAttach()</code> to ensure that the Widget has been attached to the underlying Element. </p>
 * @throws IllegalStateException if this widget is already attached
 */
protected void onAttach(){
  if (attached) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  attached=true;
  DOM.setEventListener(getElement(),this);
  onLoad();
}"
83270,"/** 
 * This method is called when the widget becomes attached to the browser's document.
 */
protected void onLoad(){
}","/** 
 * This method is called immediately after a widget becomes attached to the browser's document.
 */
protected void onLoad(){
}"
83271,"/** 
 * Sets this widget's parent. This method should only be called by  {@link Panel} and {@link Composite}.
 * @param parent the widget's new parent
 */
void setParent(Widget parent){
  Widget oldParent=this.parent;
  this.parent=parent;
  if (parent == null) {
    if (oldParent != null && oldParent.isAttached()) {
      onDetach();
    }
  }
 else   if (parent.isAttached()) {
    onAttach();
  }
}","/** 
 * Sets this widget's parent. This method should only be called by  {@link Panel} and {@link Composite}.
 * @param parent the widget's new parent
 */
void setParent(Widget parent){
}"
83272,"/** 
 * This method is called when a widget is detached from the browser's document. It must not be overridden, except by   {@link Panel}.
 * @throws IllegalStateException if this widget is already detached
 */
protected void onDetach(){
  if (!attached) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  attached=false;
  DOM.setEventListener(getElement(),null);
}","/** 
 * This method is called when a widget is detached from the browser's document. To receive notification before a Widget is removed from the document, override the   {@link #onUnload} method.<p> Subclasses that override this method must call <code>super.onDetach()</code> to ensure that the Widget has been detached from the underlying Element.  Failure to do so will result in application memeroy leaks due to circular references between DOM Elements and JavaScript objects. </p>
 * @throws IllegalStateException if this widget is already detached
 */
protected void onDetach(){
  if (!attached) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    onUnload();
  }
  finally {
    attached=false;
    DOM.setEventListener(getElement(),null);
  }
}"
83273,"public void onBrowserEvent(Event event){
  if (DOM.eventGetType(event) == Event.ONCLICK) {
    Element target=DOM.eventGetTarget(event);
    if (isDividerOwn(target)) {
      int index=getDividerIndex(target);
      if (index != -1) {
        showStack(index);
      }
    }
  }
}","public void onBrowserEvent(Event event){
  if (DOM.eventGetType(event) == Event.ONCLICK) {
    Element target=DOM.eventGetTarget(event);
    int index=findDividerIndex(target);
    if (index != -1) {
      showStack(index);
    }
  }
}"
83274,"/** 
 * Adds a widget to the panel at the specified position.
 * @param w the widget to be added
 * @param left the widget's left position
 * @param top the widget's top position
 */
public void add(Widget w,int left,int top){
  add(w);
  setWidgetPosition(w,left,top);
}","/** 
 * Adds a widget to the panel at the specified position. Setting a position of <code>(-1, -1)</code> will cause the child widget to be positioned statically.
 * @param w the widget to be added
 * @param left the widget's left position
 * @param top the widget's top position
 */
public void add(Widget w,int left,int top){
  w.removeFromParent();
  setWidgetPositionImpl(w,left,top);
  add(w);
}"
83275,"/** 
 * Sets the position of the specified child widget. Setting a position of <code>(-1, -1)</code> will cause the child widget to be positioned statically.
 * @param w the child widget to be positioned
 * @param left the widget's left position
 * @param top the widget's top position
 */
public void setWidgetPosition(Widget w,int left,int top){
  checkWidgetParent(w);
  Element h=w.getElement();
  if ((left == -1) && (top == -1)) {
    changeToStaticPositioning(h);
  }
 else {
    DOM.setStyleAttribute(h,""String_Node_Str"",""String_Node_Str"");
    DOM.setStyleAttribute(h,""String_Node_Str"",left + ""String_Node_Str"");
    DOM.setStyleAttribute(h,""String_Node_Str"",top + ""String_Node_Str"");
  }
}","/** 
 * Sets the position of the specified child widget. Setting a position of <code>(-1, -1)</code> will cause the child widget to be positioned statically.
 * @param w the child widget to be positioned
 * @param left the widget's left position
 * @param top the widget's top position
 */
public void setWidgetPosition(Widget w,int left,int top){
  checkWidgetParent(w);
  setWidgetPositionImpl(w,left,top);
}"
83276,"public static void insertListItem(Element select,String item,String value,int index){
  impl.insertListItem(select,item,value,index);
}","/** 
 * Creates an <code>&lt;option&gt;</code> element and inserts it as a child of the specified <code>&lt;select&gt;</code> element.
 * @param select the <code>&lt;select&gt;</code> element
 * @param item the text of the new item; cannot be <code>null</code>
 * @param value the <code>value</code> attribute for the new<code>&lt;option&gt;</code>; cannot be <code>null</code>
 * @param index the index at which to insert the child
 */
public static void insertListItem(Element select,String item,String value,int index){
  impl.insertListItem(select,item,value,index);
}"
83277,"public void insertListItem(Element select,String item,String value,int index){
  Element option=DOM.createElement(""String_Node_Str"");
  DOM.setInnerText(option,item);
  if (value != null) {
    DOM.setElementProperty(option,""String_Node_Str"",value);
  }
  if (index == -1) {
    DOM.appendChild(select,option);
  }
 else {
    DOM.insertChild(select,option,index);
  }
}","/** 
 * @see DOM#insertListItem(Element,String,String,int)
 */
public void insertListItem(Element select,String item,String value,int index){
  Element option=DOM.createElement(""String_Node_Str"");
  DOM.setInnerText(option,item);
  DOM.setElementProperty(option,""String_Node_Str"",value);
  if (index == -1) {
    DOM.appendChild(select,option);
  }
 else {
    DOM.insertChild(select,option,index);
  }
}"
83278,"/** 
 * Adds an item to the list box.
 * @param item the text of the item to be added
 * @param value the item's value, to be submitted if it is part of a{@link FormPanel}.
 */
public void addItem(String item,String value){
  insertItem(item,value,INSERT_AT_END);
}","/** 
 * Adds an item to the list box, specifying an initial value for the item.
 * @param item the text of the item to be added
 * @param value the item's value, to be submitted if it is part of a{@link FormPanel}; cannot be <code>null</code>
 */
public void addItem(String item,String value){
  insertItem(item,value,INSERT_AT_END);
}"
83279,"/** 
 * Gets the value associated with the item at a given index.
 * @param index the index of the item to be retrieved
 * @return the item's associated value
 * @throws IndexOutOfBoundsException if the index is out of range
 */
public String getValue(int index){
  checkIndex(index);
  Element option=DOM.getChild(getElement(),index);
  return DOM.getElementProperty(option,""String_Node_Str"");
}","/** 
 * Gets the value associated with the item at a given index. 
 * @param index the index of the item to be retrieved
 * @return the item's associated value
 * @throws IndexOutOfBoundsException if the index is out of range
 */
public String getValue(int index){
  checkIndex(index);
  Element option=DOM.getChild(getElement(),index);
  return DOM.getElementProperty(option,""String_Node_Str"");
}"
83280,"/** 
 * Sets the value associated with the item at a given index. This value can be used for any purpose, but is also what is passed to the server when the ListBox is submitted as part of a   {@link FormPanel}.
 * @param index the index of the item to be set
 * @param value the item's new value
 * @throws IndexOutOfBoundsException if the index is out of range
 */
public void setValue(int index,String value){
  checkIndex(index);
  Element option=DOM.getChild(getElement(),index);
  DOM.setElementProperty(option,""String_Node_Str"",value);
}","/** 
 * Sets the value associated with the item at a given index. This value can be used for any purpose, but is also what is passed to the server when the list box is submitted as part of a   {@link FormPanel}.
 * @param index the index of the item to be set
 * @param value the item's new value; cannot be <code>null</code>
 * @throws IndexOutOfBoundsException if the index is out of range
 */
public void setValue(int index,String value){
  checkIndex(index);
  Element option=DOM.getChild(getElement(),index);
  DOM.setElementProperty(option,""String_Node_Str"",value);
}"
83281,"/** 
 * Inserts an item into the list box.
 * @param item the text of the item to be inserted
 * @param value the item's value, to be submitted if it is part of a{@link FormPanel}.
 * @param index the index at which to insert it
 */
public void insertItem(String item,String value,int index){
  DOM.insertListItem(getElement(),item,value,index);
}","/** 
 * Inserts an item into the list box, specifying an initial value for the item.
 * @param item the text of the item to be inserted
 * @param value the item's value, to be submitted if it is part of a{@link FormPanel}.
 * @param index the index at which to insert it
 */
public void insertItem(String item,String value,int index){
  DOM.insertListItem(getElement(),item,value,index);
}"
83282,"public void testLocalRefs(){
  final String foo=cannotOptimize() ? ""String_Node_Str"" : ""String_Node_Str"";
  final String bar=cannotOptimize() ? ""String_Node_Str"" : ""String_Node_Str"";
  String result=new Object(){
    private String a=foo;
{
      a=foo;
    }
    public String toString(){
      return new Object(){
        private static final String constantString=""String_Node_Str"";
        private String ai=foo;
{
          ai=foo;
        }
        public String toString(){
          bar.valueOf(false);
          assertEquals(""String_Node_Str"",constantString);
          return foo + a + ai;
        }
      }
.toString() + a;
    }
  }
.toString();
  assertEquals(result,""String_Node_Str"");
}","public void testLocalRefs(){
  final String foo=noOptimizeTrue() ? ""String_Node_Str"" : ""String_Node_Str"";
  final String bar=noOptimizeTrue() ? ""String_Node_Str"" : ""String_Node_Str"";
  String result=new Object(){
    private String a=foo;
{
      a=foo;
    }
    public String toString(){
      return new Object(){
        private static final String constantString=""String_Node_Str"";
        private String ai=foo;
{
          ai=foo;
        }
        public String toString(){
          bar.valueOf(false);
          assertEquals(""String_Node_Str"",constantString);
          return foo + a + ai;
        }
      }
.toString() + a;
    }
  }
.toString();
  assertEquals(result,""String_Node_Str"");
}"
83283,"public void testJavaScriptReservedWords(){
  boolean delete=cannotOptimize();
  for (int in=0; in < 10; ++in) {
    assertTrue(in < 10);
    assertTrue(delete);
  }
}","public void testJavaScriptReservedWords(){
  boolean delete=noOptimizeTrue();
  for (int in=0; in < 10; ++in) {
    assertTrue(in < 10);
    assertTrue(delete);
  }
}"
83284,"public void testArrayStore(){
  Object[][] oaa;
  oaa=new Object[4][4];
  oaa[0][0]=""String_Node_Str"";
  assertEquals(oaa[0][0],""String_Node_Str"");
  oaa=new Object[4][];
  oaa[0]=new Object[4];
  oaa[0][0]=""String_Node_Str"";
  assertEquals(oaa[0][0],""String_Node_Str"");
  Apple[] apple=cannotOptimize() ? new Granny[3] : new Apple[3];
  Apple g=cannotOptimize() ? (Apple)new Granny() : (Apple)new Fuji();
  Apple a=apple[0]=g;
  assertEquals(g,a);
}","public void testArrayStore(){
  Object[][] oaa;
  oaa=new Object[4][4];
  oaa[0][0]=""String_Node_Str"";
  assertEquals(oaa[0][0],""String_Node_Str"");
  oaa=new Object[4][];
  oaa[0]=new Object[4];
  oaa[0][0]=""String_Node_Str"";
  assertEquals(oaa[0][0],""String_Node_Str"");
  Apple[] apple=noOptimizeTrue() ? new Granny[3] : new Apple[3];
  Apple g=noOptimizeTrue() ? (Apple)new Granny() : (Apple)new Fuji();
  Apple a=apple[0]=g;
  assertEquals(g,a);
}"
83285,"/** 
 * Immediately logs or ignores the specified messages, based on the specified message type and this logger's settings. If the message is loggable, then parent branches may be lazily created before the log can take place.
 */
public final synchronized void log(TreeLogger.Type type,String msg,Throwable caught){
  if (msg == null) {
    msg=""String_Node_Str"";
  }
  int childIndex=allocateNextChildIndex();
  if (isLoggable(type)) {
    commitMyBranchEntryInMyParentLogger();
    doLog(childIndex,type,msg,caught);
  }
}","/** 
 * Immediately logs or ignores the specified messages, based on the specified message type and this logger's settings. If the message is loggable, then parent branches may be lazily created before the log can take place.
 */
public final synchronized void log(TreeLogger.Type type,String msg,Throwable caught){
  if (msg == null) {
    msg=""String_Node_Str"";
  }
  if (causedByOutOfMemory(caught)) {
    branch(TreeLogger.ERROR,msg,caught);
    return;
  }
  int childIndex=allocateNextChildIndex();
  if (isLoggable(type)) {
    commitMyBranchEntryInMyParentLogger();
    doLog(childIndex,type,msg,caught);
  }
}"
83286,"/** 
 * Implements branching behavior that supports lazy logging for low-priority branched loggers.
 */
public final synchronized TreeLogger branch(TreeLogger.Type type,String msg,Throwable caught){
  if (msg == null) {
    msg=""String_Node_Str"";
  }
  int childIndex=allocateNextChildIndex();
  AbstractTreeLogger childLogger=doBranch();
  childLogger.logLevel=logLevel;
  childLogger.indexWithinMyParent=childIndex;
  childLogger.parent=this;
  childLogger.uncommitted=new UncommittedBranchData(type,msg,caught);
  if (isLoggable(type)) {
    childLogger.commitMyBranchEntryInMyParentLogger();
  }
  return childLogger;
}","/** 
 * Implements branching behavior that supports lazy logging for low-priority branched loggers.
 */
public final synchronized TreeLogger branch(TreeLogger.Type type,String msg,Throwable caught){
  if (msg == null) {
    msg=""String_Node_Str"";
  }
  int childIndex=allocateNextChildIndex();
  AbstractTreeLogger childLogger=doBranch();
  childLogger.logLevel=logLevel;
  childLogger.indexWithinMyParent=childIndex;
  childLogger.parent=this;
  childLogger.uncommitted=new UncommittedBranchData(type,msg,caught);
  if (causedByOutOfMemory(caught)) {
    type=TreeLogger.ERROR;
    childLogger.log(type,OUT_OF_MEMORY_MSG,null);
  }
  if (isLoggable(type)) {
    childLogger.commitMyBranchEntryInMyParentLogger();
  }
  return childLogger;
}"
83287,"public static Byte decode(String s) throws NumberFormatException {
  long x=__parseLongInfer(s);
  if (__isLongNaN(x)) {
    throw new NumberFormatException(s);
  }
 else {
    return new Byte((byte)x);
  }
}","public static Byte decode(String s) throws NumberFormatException {
  return new Byte((byte)__decodeAndValidateLong(s,MIN_VALUE,MAX_VALUE));
}"
83288,"public static byte parseByte(String s,int radix) throws NumberFormatException {
  long x=__parseLongRadix(s,radix);
  if (__isLongNaN(x)) {
    throw new NumberFormatException(s);
  }
 else {
    return (byte)x;
  }
}","public static byte parseByte(String s,int radix) throws NumberFormatException {
  return (byte)__parseAndValidateLong(s,radix,MIN_VALUE,MAX_VALUE);
}"
83289,"public static double parseDouble(String s) throws NumberFormatException {
  double x=__parseDouble(s);
  if (isNaN(x)) {
    throw new NumberFormatException(s);
  }
 else {
    return x;
  }
}","public static double parseDouble(String s) throws NumberFormatException {
  return __parseAndValidateDouble(s);
}"
83290,"public static float parseFloat(String s) throws NumberFormatException {
  float x=__parseFloat(s);
  if (isNaN(x)) {
    throw new NumberFormatException(s);
  }
 else {
    return x;
  }
}","public static float parseFloat(String s) throws NumberFormatException {
  return (float)__parseAndValidateDouble(s);
}"
83291,"public static Integer decode(String s) throws NumberFormatException {
  long x=__parseLongInfer(s);
  if (__isLongNaN(x)) {
    throw new NumberFormatException(s);
  }
 else {
    return new Integer((int)x);
  }
}","public static Integer decode(String s) throws NumberFormatException {
  return new Integer((int)__decodeAndValidateLong(s,MIN_VALUE,MAX_VALUE));
}"
83292,"public static int parseInt(String s,int radix) throws NumberFormatException {
  long x=__parseLongRadix(s,radix);
  if (__isLongNaN(x)) {
    throw new NumberFormatException(s);
  }
 else {
    return (int)x;
  }
}","public static int parseInt(String s,int radix) throws NumberFormatException {
  return (int)__parseAndValidateLong(s,radix,MIN_VALUE,MAX_VALUE);
}"
83293,"public static Long decode(String s) throws NumberFormatException {
  long x=__parseLongInfer(s);
  if (__isLongNaN(x)) {
    throw new NumberFormatException(s);
  }
 else {
    return new Long(x);
  }
}","public static Long decode(String s) throws NumberFormatException {
  return new Long(__decodeAndValidateLong(s,MIN_VALUE,MAX_VALUE));
}"
83294,"public static long parseLong(String s,int radix) throws NumberFormatException {
  long x=__parseLongRadix(s,radix);
  if (__isLongNaN(x)) {
    throw new NumberFormatException(s);
  }
 else {
    return x;
  }
}","public static long parseLong(String s,int radix) throws NumberFormatException {
  return __parseAndValidateLong(s,radix,MIN_VALUE,MAX_VALUE);
}"
83295,"/** 
 * @skip
 */
protected static native double __parseDouble(String str);","/** 
 * @skip
 * @return The floating-point representation of <code>str</code> or<code>Number.NaN</code> if the string does not match {@link floatRegex}.
 */
private static native double __parseDouble(String str);"
83296,"/** 
 * @skip
 */
protected static native boolean __isLongNaN(long x);","/** 
 * @skip
 */
private static native boolean __isLongNaN(long x);"
83297,"public CompilingClassLoader(TreeLogger logger,ByteCodeCompiler compiler) throws UnableToCompleteException {
  super(null);
  this.logger=logger;
  this.compiler=compiler;
  for (int i=0; i < CacheManager.BOOTSTRAP_CLASSES.length; i++) {
    Class clazz=CacheManager.BOOTSTRAP_CLASSES[i];
    String className=clazz.getName();
    try {
      String path=clazz.getName().replace('.','/').concat(""String_Node_Str"");
      ClassLoader cl=Thread.currentThread().getContextClassLoader();
      URL url=cl.getResource(path);
      if (url != null) {
        byte classBytes[]=getClassBytesFromStream(url.openStream());
        String loc=url.toExternalForm();
        compiler.putClassBytes(logger,className,classBytes,loc);
      }
 else {
        logger.log(TreeLogger.ERROR,""String_Node_Str"" + className + ""String_Node_Str"",null);
        throw new UnableToCompleteException();
      }
    }
 catch (    IOException e) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + className,e);
      throw new UnableToCompleteException();
    }
  }
  compiler.removeStaleByteCode(logger);
}","public CompilingClassLoader(TreeLogger logger,ByteCodeCompiler compiler,TypeOracle typeOracle) throws UnableToCompleteException {
  super(null);
  this.logger=logger;
  this.compiler=compiler;
  this.typeOracle=typeOracle;
  for (int i=0; i < CacheManager.BOOTSTRAP_CLASSES.length; i++) {
    Class clazz=CacheManager.BOOTSTRAP_CLASSES[i];
    String className=clazz.getName();
    try {
      String path=clazz.getName().replace('.','/').concat(""String_Node_Str"");
      ClassLoader cl=Thread.currentThread().getContextClassLoader();
      URL url=cl.getResource(path);
      if (url != null) {
        byte classBytes[]=getClassBytesFromStream(url.openStream());
        String loc=url.toExternalForm();
        compiler.putClassBytes(logger,className,classBytes,loc);
      }
 else {
        logger.log(TreeLogger.ERROR,""String_Node_Str"" + className + ""String_Node_Str"",null);
        throw new UnableToCompleteException();
      }
    }
 catch (    IOException e) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + className,e);
      throw new UnableToCompleteException();
    }
  }
  compiler.removeStaleByteCode(logger);
}"
83298,"/** 
 * Returns the   {@link java.lang.Class} object for a class that matches thesource or binary name given.
 * @param className binary or source name
 * @return {@link java.lang.Class} instance, if found, or null
 */
private Class getClassFromBinaryOrSourceName(String className){
  int fromIndex=className.length();
  while (fromIndex > 0) {
    String enclosingClassName=className.substring(0,fromIndex);
    Class cls=getClassFromBinaryName(enclosingClassName);
    if (cls != null) {
      if (fromIndex < className.length()) {
        String binaryClassName=enclosingClassName + className.substring(fromIndex).replace('.','$');
        return getClassFromBinaryName(binaryClassName);
      }
 else {
        return cls;
      }
    }
 else {
      fromIndex=enclosingClassName.lastIndexOf('.',fromIndex);
    }
  }
  return null;
}","/** 
 * Returns the   {@link java.lang.Class} object for a class that matches thesource or binary name given.
 * @param className binary or source name
 * @return {@link java.lang.Class} instance, if found, or null
 */
private Class getClassFromBinaryOrSourceName(String className){
  JClassType type=typeOracle.findType(className.replace('$','.'));
  if (type != null) {
    String jniSig=type.getJNISignature();
    jniSig=jniSig.substring(1,jniSig.length() - 1);
    className=jniSig.replace('/','.');
  }
  return getClassFromBinaryName(className);
}"
83299,"public void onModuleReady(ModuleSpace readySpace) throws UnableToCompleteException {
  this.space=readySpace;
  SourceOracle srcOracle=new HostedModeSourceOracle(typeOracle,module.getName());
  ByteCodeCompiler compiler=getOrCreateByteCodeCompiler(srcOracle);
  ModuleSpacePropertyOracle propOracle=new ModuleSpacePropertyOracle(module.getProperties(),readySpace);
  Rules rules=module.getRules();
  rebindOracle=new StandardRebindOracle(typeOracle,propOracle,rules,genDir,outDir,module.getCacheManager());
  classLoader=new CompilingClassLoader(logger,compiler);
}","public void onModuleReady(ModuleSpace readySpace) throws UnableToCompleteException {
  this.space=readySpace;
  SourceOracle srcOracle=new HostedModeSourceOracle(typeOracle,module.getName());
  ByteCodeCompiler compiler=getOrCreateByteCodeCompiler(srcOracle);
  ModuleSpacePropertyOracle propOracle=new ModuleSpacePropertyOracle(module.getProperties(),readySpace);
  Rules rules=module.getRules();
  rebindOracle=new StandardRebindOracle(typeOracle,propOracle,rules,genDir,outDir,module.getCacheManager());
  classLoader=new CompilingClassLoader(logger,compiler,typeOracle);
}"
83300,"/** 
 * Gets a boolean attribute on the given element.
 * @param elem the element whose attribute is to be set
 * @param attr the name of the attribute to be set
 * @return the attribute's value as a boolean
 * @deprecated Use the more appropriately named {@link #getElementPropertyBoolean(Element,String)} instead.
 */
public static boolean getBooleanAttribute(Element elem,String attr){
  return getElementPropertyBoolean(elem,attr);
}","/** 
 * Gets a boolean attribute on the given element.
 * @param elem the element whose attribute is to be set
 * @param attr the name of the attribute to be set
 * @return the attribute's value as a boolean
 * @deprecated Use the more appropriately named{@link #getElementPropertyBoolean(Element,String)} instead.
 */
public static boolean getBooleanAttribute(Element elem,String attr){
  return getElementPropertyBoolean(elem,attr);
}"
83301,"/** 
 * Sets a boolean attribute on the given element.
 * @param elem the element whose attribute is to be set
 * @param attr the name of the attribute to be set
 * @param value the attribute's new boolean value
 * @deprecated Use the more appropriately named {@link #setElementPropertyBoolean(Element,String,boolean)} instead.
 */
public static void setBooleanAttribute(Element elem,String attr,boolean value){
  setElementPropertyBoolean(elem,attr,value);
}","/** 
 * Sets a boolean attribute on the given element.
 * @param elem the element whose attribute is to be set
 * @param attr the name of the attribute to be set
 * @param value the attribute's new boolean value
 * @deprecated Use the more appropriately named{@link #setElementPropertyBoolean(Element,String,boolean)} instead.
 */
public static void setBooleanAttribute(Element elem,String attr,boolean value){
  setElementPropertyBoolean(elem,attr,value);
}"
83302,"/** 
 * Sets an integer attribute on the given element.
 * @param elem the element whose attribute is to be set
 * @param attr the name of the attribute to be set
 * @param value the attribute's new integer value
 * @deprecated Use the more appropriately named {@link #setElementPropertyInt(Element,String,int)} instead.
 */
public static void setIntAttribute(Element elem,String attr,int value){
  setElementPropertyInt(elem,attr,value);
}","/** 
 * Sets an integer attribute on the given element.
 * @param elem the element whose attribute is to be set
 * @param attr the name of the attribute to be set
 * @param value the attribute's new integer value
 * @deprecated Use the more appropriately named{@link #setElementPropertyInt(Element,String,int)} instead.
 */
public static void setIntAttribute(Element elem,String attr,int value){
  setElementPropertyInt(elem,attr,value);
}"
83303,"/** 
 * Removes the named attribute from the given element.
 * @param elem the element whose attribute is to be removed
 * @param attr the name of the element to remove
 * @return true if the element was removed, false if the element did not exist
 */
public static void removeElementAttribute(Element elem,String attr){
  impl.removeElementAttribute(elem,attr);
}","/** 
 * Removes the named attribute from the given element.
 * @param elem the element whose attribute is to be removed
 * @param attr the name of the element to remove
 */
public static void removeElementAttribute(Element elem,String attr){
  impl.removeElementAttribute(elem,attr);
}"
83304,"/** 
 * Gets an integer attribute on a given element.
 * @param elem the element whose attribute is to be retrieved
 * @param attr the name of the attribute to be retrieved
 * @return the attribute's value as an integer
 * @deprecated Use the more appropriately named {@link #getElementPropertyInt(Element,String)} instead.
 */
public static int getIntAttribute(Element elem,String attr){
  return getElementPropertyInt(elem,attr);
}","/** 
 * Gets an integer attribute on a given element.
 * @param elem the element whose attribute is to be retrieved
 * @param attr the name of the attribute to be retrieved
 * @return the attribute's value as an integer
 * @deprecated Use the more appropriately named{@link #getElementPropertyInt(Element,String)} instead.
 */
public static int getIntAttribute(Element elem,String attr){
  return getElementPropertyInt(elem,attr);
}"
83305,"/** 
 * Sets an attribute on the given element.
 * @param elem the element whose attribute is to be set
 * @param attr the name of the attribute to be set
 * @param value the new attribute value
 * @deprecated Use the more appropriately named {@link #setElementProperty(Element,String,String)} instead.
 */
public static void setAttribute(Element elem,String attr,String value){
  setElementProperty(elem,attr,value);
}","/** 
 * Sets an attribute on the given element.
 * @param elem the element whose attribute is to be set
 * @param attr the name of the attribute to be set
 * @param value the new attribute value
 * @deprecated Use the more appropriately named{@link #setElementProperty(Element,String,String)} instead.
 */
public static void setAttribute(Element elem,String attr,String value){
  setElementProperty(elem,attr,value);
}"
83306,"/** 
 * Gets any named attribute from an element, as a string.
 * @param elem the element whose attribute is to be retrieved
 * @param attr the name of the attribute
 * @return the attribute's value
 * @deprecated Use the more appropriately named {@link #getElementProperty(Element,String)} instead.
 */
public static String getAttribute(Element elem,String attr){
  return getElementProperty(elem,attr);
}","/** 
 * Gets any named attribute from an element, as a string.
 * @param elem the element whose attribute is to be retrieved
 * @param attr the name of the attribute
 * @return the attribute's value
 * @deprecated Use the more appropriately named{@link #getElementProperty(Element,String)} instead.
 */
public static String getAttribute(Element elem,String attr){
  return getElementProperty(elem,attr);
}"
83307,"private static void hookWindowClosing(){
  Window.addWindowCloseListener(new WindowCloseListener(){
    public void onWindowClosed(){
      for (Iterator it=rootPanels.values().iterator(); it.hasNext(); ) {
        RootPanel gwt=(RootPanel)it.next();
        gwt.onDetach();
      }
    }
    public String onWindowClosing(){
      return null;
    }
  }
);
}","private static void hookWindowClosing(){
  Window.addWindowCloseListener(new WindowCloseListener(){
    public void onWindowClosed(){
      for (Iterator it=rootPanels.values().iterator(); it.hasNext(); ) {
        RootPanel gwt=(RootPanel)it.next();
        if (gwt.isAttached()) {
          gwt.onDetach();
        }
      }
    }
    public String onWindowClosing(){
      return null;
    }
  }
);
}"
83308,"public void onWindowClosed(){
  for (Iterator it=rootPanels.values().iterator(); it.hasNext(); ) {
    RootPanel gwt=(RootPanel)it.next();
    gwt.onDetach();
  }
}","public void onWindowClosed(){
  for (Iterator it=rootPanels.values().iterator(); it.hasNext(); ) {
    RootPanel gwt=(RootPanel)it.next();
    if (gwt.isAttached()) {
      gwt.onDetach();
    }
  }
}"
83309,"public void onBrowserEvent(Event event){
  if (DOM.eventGetType(event) == Event.ONCLICK) {
    int index=getDividerIndex(DOM.eventGetTarget(event));
    if (index != -1) {
      showStack(index);
    }
  }
}","public void onBrowserEvent(Event event){
  if (DOM.eventGetType(event) == Event.ONCLICK) {
    Element target=DOM.eventGetTarget(event);
    if (isDividerOwn(target)) {
      int index=getDividerIndex(target);
      if (index != -1) {
        showStack(index);
      }
    }
  }
}"
83310,"public boolean hasSideEffects(){
  if (field.isStatic() && (!field.isFinal() || field.constInitializer == null)) {
    JReferenceType fieldEncloser=field.getEnclosingType();
    if (enclosingType != fieldEncloser && program.typeOracle.hasClinit(fieldEncloser)) {
      return true;
    }
  }
  JExpression expr=instance;
  if (expr == null) {
    return false;
  }
  return expr.hasSideEffects();
}","public boolean hasSideEffects(){
  if (field.isStatic() && (!field.isFinal() || field.constInitializer == null)) {
    if (program.typeOracle.checkClinit(enclosingType,field.getEnclosingType())) {
      return true;
    }
  }
  JExpression expr=instance;
  if (expr == null) {
    return false;
  }
  return expr.hasSideEffects();
}"
83311,"public boolean hasClinit(JReferenceType type){
  return hasClinitSet.contains(type);
}","public boolean hasClinit(JReferenceType type){
  if (hasDirectClinit(type)) {
    return true;
  }
  if (type != null && type.extnds != null) {
    return hasClinit(type.extnds);
  }
  return false;
}"
83312,"public boolean canTriviallyCast(JReferenceType type,JReferenceType qType){
  JClassType jlo=program.getTypeJavaLangObject();
  if (type == qType || qType == jlo) {
    return true;
  }
  if (type instanceof JArrayType) {
    JArrayType aType=(JArrayType)type;
    if (qType instanceof JArrayType) {
      JArrayType qaType=(JArrayType)qType;
      JType leafType=aType.getLeafType();
      JType qLeafType=qaType.getLeafType();
      int dims=aType.getDims();
      int qDims=qaType.getDims();
      if (dims > qDims && (qLeafType == jlo || qLeafType instanceof JNullType)) {
        return true;
      }
      if (dims == qDims) {
        if (leafType instanceof JReferenceType && qLeafType instanceof JReferenceType) {
          return canTriviallyCast((JReferenceType)leafType,(JReferenceType)qLeafType);
        }
      }
    }
  }
 else   if (type instanceof JClassType) {
    JClassType cType=(JClassType)type;
    if (qType instanceof JClassType) {
      return getOrCreate(superClassMap,cType).contains(qType);
    }
 else     if (qType instanceof JInterfaceType) {
      return getOrCreate(implementsMap,cType).contains(qType);
    }
  }
 else   if (type instanceof JInterfaceType) {
    JInterfaceType iType=(JInterfaceType)type;
    if (qType instanceof JInterfaceType) {
      return getOrCreate(superInterfaceMap,iType).contains(qType);
    }
  }
 else   if (type instanceof JNullType) {
    return true;
  }
  return false;
}","public boolean canTriviallyCast(JReferenceType type,JReferenceType qType){
  JClassType jlo=program.getTypeJavaLangObject();
  if (type == qType || qType == jlo) {
    return true;
  }
  if (type instanceof JArrayType) {
    JArrayType aType=(JArrayType)type;
    if (qType instanceof JArrayType) {
      JArrayType qaType=(JArrayType)qType;
      JType leafType=aType.getLeafType();
      JType qLeafType=qaType.getLeafType();
      int dims=aType.getDims();
      int qDims=qaType.getDims();
      if (dims > qDims && (qLeafType == jlo || qLeafType instanceof JNullType)) {
        return true;
      }
      if (dims == qDims) {
        if (leafType instanceof JReferenceType && qLeafType instanceof JReferenceType) {
          return canTriviallyCast((JReferenceType)leafType,(JReferenceType)qLeafType);
        }
      }
    }
  }
 else   if (type instanceof JClassType) {
    JClassType cType=(JClassType)type;
    if (qType instanceof JClassType) {
      return isSuperClass(cType,(JClassType)qType);
    }
 else     if (qType instanceof JInterfaceType) {
      return implementsInterface(cType,(JInterfaceType)qType);
    }
  }
 else   if (type instanceof JInterfaceType) {
    JInterfaceType iType=(JInterfaceType)type;
    if (qType instanceof JInterfaceType) {
      return extendsInterface(iType,(JInterfaceType)qType);
    }
  }
 else   if (type instanceof JNullType) {
    return true;
  }
  return false;
}"
83313,"public boolean canTheoreticallyCast(JReferenceType type,JReferenceType qType){
  JClassType jlo=program.getTypeJavaLangObject();
  if (type == qType || type == jlo) {
    return true;
  }
  if (canTriviallyCast(type,qType)) {
    return true;
  }
  if (type instanceof JArrayType) {
    JArrayType aType=(JArrayType)type;
    if (qType instanceof JArrayType) {
      JArrayType qaType=(JArrayType)qType;
      JType leafType=aType.getLeafType();
      JType qLeafType=qaType.getLeafType();
      int dims=aType.getDims();
      int qDims=qaType.getDims();
      if (dims < qDims && leafType != program.getTypeJavaLangObject() && !(leafType instanceof JNullType)) {
        return false;
      }
      if (dims == qDims) {
        if (leafType instanceof JReferenceType && qLeafType instanceof JReferenceType) {
          return canTheoreticallyCast((JReferenceType)leafType,(JReferenceType)qLeafType);
        }
      }
    }
  }
 else   if (type instanceof JClassType) {
    JClassType cType=(JClassType)type;
    if (qType instanceof JClassType) {
      return getOrCreate(subClassMap,cType).contains(qType);
    }
 else     if (qType instanceof JInterfaceType) {
      return getOrCreate(couldImplementMap,cType).contains(qType);
    }
  }
 else   if (type instanceof JInterfaceType) {
    JInterfaceType iType=(JInterfaceType)type;
    if (qType instanceof JClassType) {
      return getOrCreate(couldBeImplementedMap,iType).contains(qType);
    }
  }
 else   if (type instanceof JNullType) {
  }
  return true;
}","public boolean canTheoreticallyCast(JReferenceType type,JReferenceType qType){
  JClassType jlo=program.getTypeJavaLangObject();
  if (type == qType || type == jlo) {
    return true;
  }
  if (canTriviallyCast(type,qType)) {
    return true;
  }
  if (type instanceof JArrayType) {
    JArrayType aType=(JArrayType)type;
    if (qType instanceof JArrayType) {
      JArrayType qaType=(JArrayType)qType;
      JType leafType=aType.getLeafType();
      JType qLeafType=qaType.getLeafType();
      int dims=aType.getDims();
      int qDims=qaType.getDims();
      if (dims < qDims && leafType != program.getTypeJavaLangObject() && !(leafType instanceof JNullType)) {
        return false;
      }
      if (dims == qDims) {
        if (leafType instanceof JReferenceType && qLeafType instanceof JReferenceType) {
          return canTheoreticallyCast((JReferenceType)leafType,(JReferenceType)qLeafType);
        }
      }
    }
  }
 else   if (type instanceof JClassType) {
    JClassType cType=(JClassType)type;
    if (qType instanceof JClassType) {
      return isSubClass(cType,(JClassType)qType);
    }
 else     if (qType instanceof JInterfaceType) {
      return getOrCreate(couldImplementMap,cType).contains(qType);
    }
  }
 else   if (type instanceof JInterfaceType) {
    JInterfaceType iType=(JInterfaceType)type;
    if (qType instanceof JClassType) {
      return getOrCreate(couldBeImplementedMap,iType).contains(qType);
    }
  }
 else   if (type instanceof JNullType) {
  }
  return true;
}"
83314,"private void handleClinit(JsFunction clinitFunc){
  JsExpression asg=createAssignment(clinitFunc.getName().makeRef(),nullMethodName.makeRef());
  clinitFunc.getBody().getStatements().add(0,asg.makeStmt());
}","private void handleClinit(JsFunction clinitFunc,JReferenceType chainTo){
  JsStatements statements=clinitFunc.getBody().getStatements();
  JsExpression asg=createAssignment(clinitFunc.getName().makeRef(),nullMethodName.makeRef());
  statements.add(0,asg.makeStmt());
  if (chainTo != null) {
    JMethod chainToMeth=(JMethod)chainTo.methods.get(0);
    JsInvocation jsInvocation=new JsInvocation();
    JsNameRef qualifier=getName(chainToMeth).makeRef();
    jsInvocation.setQualifier(qualifier);
    statements.add(1,jsInvocation.makeStmt());
  }
}"
83315,"private JsInvocation maybeCreateClinitCall(JMethod x){
  if (!x.isStatic()) {
    return null;
  }
  JReferenceType enclosingType=x.getEnclosingType();
  if (!typeOracle.hasClinit(enclosingType)) {
    return null;
  }
  if (x == enclosingType.methods.get(0)) {
    return null;
  }
  if (program.isStaticImpl(x)) {
    return null;
  }
  JMethod clinitMethod=(JMethod)enclosingType.methods.get(0);
  JsInvocation jsInvocation=new JsInvocation();
  jsInvocation.setQualifier(getName(clinitMethod).makeRef());
  return jsInvocation;
}","private JsInvocation maybeCreateClinitCall(JMethod x){
  if (!x.isStatic()) {
    return null;
  }
  JReferenceType enclosingType=x.getEnclosingType();
  if (!typeOracle.hasClinit(enclosingType)) {
    return null;
  }
  if (program.isStaticImpl(x)) {
    return null;
  }
  if (x == enclosingType.methods.get(0)) {
    return null;
  }
  while (!typeOracle.hasDirectClinit(enclosingType)) {
    enclosingType=enclosingType.extnds;
  }
  JMethod clinitMethod=(JMethod)enclosingType.methods.get(0);
  JsInvocation jsInvocation=new JsInvocation();
  jsInvocation.setQualifier(getName(clinitMethod).makeRef());
  return jsInvocation;
}"
83316,"/** 
 * Returns <code>true</code> if inlining the target expression would eliminate a necessary clinit.
 */
private boolean checkClinitViolation(JMethodCall x,JExpression resultExpression){
  JReferenceType targetEnclosingType=x.getTarget().getEnclosingType();
  if (!program.typeOracle.hasClinit(targetEnclosingType)) {
    return false;
  }
  if (program.isStaticImpl(x.getTarget())) {
    return false;
  }
  if (currentMethod.getEnclosingType() == targetEnclosingType) {
    return false;
  }
  if (!(resultExpression instanceof JFieldRef)) {
    return true;
  }
  JFieldRef fieldRefResult=(JFieldRef)resultExpression;
  JField fieldResult=fieldRefResult.getField();
  if (!fieldResult.isStatic()) {
    return true;
  }
  if (fieldResult.getEnclosingType() != targetEnclosingType) {
    return true;
  }
  return false;
}","/** 
 * Returns <code>true</code> if inlining the target expression would eliminate a necessary clinit.
 */
private boolean checkClinitViolation(JMethodCall x,JExpression resultExpression){
  JReferenceType targetEnclosingType=x.getTarget().getEnclosingType();
  if (!program.typeOracle.checkClinit(currentMethod.getEnclosingType(),targetEnclosingType)) {
    return false;
  }
  if (program.isStaticImpl(x.getTarget())) {
    return false;
  }
  if (!(resultExpression instanceof JFieldRef)) {
    return true;
  }
  JFieldRef fieldRefResult=(JFieldRef)resultExpression;
  JField fieldResult=fieldRefResult.getField();
  if (!fieldResult.isStatic()) {
    return true;
  }
  if (fieldResult.getEnclosingType() != targetEnclosingType) {
    return true;
  }
  return false;
}"
83317,"public void testClinitSideEffectInlining(){
  sideEffectChecker=0;
  SideEffectCauser.causeClinitSideEffect();
  assertEquals(1,sideEffectChecker);
  SideEffectCauser2.causeClinitSideEffect();
  assertEquals(2,sideEffectChecker);
  SideEffectCauser3.causeClinitSideEffect();
  assertEquals(3,sideEffectChecker);
  String foo=SideEffectCauser4.causeClinitSideEffectOnRead;
  assertEquals(4,sideEffectChecker);
  String bar=jsniReadSideEffectCauser5();
  assertEquals(5,sideEffectChecker);
  String checkRescued=NonSideEffectCauser.NOT_A_COMPILE_TIME_CONSTANT;
  assertEquals(null,checkRescued);
}","public void testClinitSideEffectInlining(){
  sideEffectChecker=0;
  SideEffectCauser.causeClinitSideEffect();
  assertEquals(1,sideEffectChecker);
  SideEffectCauser2.causeClinitSideEffect();
  assertEquals(2,sideEffectChecker);
  SideEffectCauser3.causeClinitSideEffect();
  assertEquals(3,sideEffectChecker);
  String foo=SideEffectCauser4.causeClinitSideEffectOnRead;
  assertEquals(4,sideEffectChecker);
  jsniReadSideEffectCauser5();
  assertEquals(5,sideEffectChecker);
  foo=SideEffectCauser6.causeClinitSideEffectOnRead;
  assertEquals(6,sideEffectChecker);
  String checkRescued=NonSideEffectCauser.NOT_A_COMPILE_TIME_CONSTANT;
  assertEquals(null,checkRescued);
}"
83318,"private JExpression checkAndReplaceJso(JExpression arg,JType targetType){
  JType argType=arg.getType();
  if (argType == targetType) {
    return arg;
  }
  if (!(targetType instanceof JReferenceType)) {
    return arg;
  }
  if (!program.isJavaScriptObject(argType)) {
    return arg;
  }
  JCastOperation cast=new JCastOperation(program,arg.getSourceInfo(),targetType,arg);
  return cast;
}","/** 
 * Wraps a JSO-typed argument if the target type is a different type.
 */
private JExpression checkAndReplaceJso(JExpression arg,JType targetType){
  JType argType=arg.getType();
  if (argType == targetType) {
    return arg;
  }
  if (!(targetType instanceof JReferenceType)) {
    return arg;
  }
  if (!program.isJavaScriptObject(argType)) {
    return arg;
  }
  JCastOperation cast=new JCastOperation(program,arg.getSourceInfo(),argType,arg);
  return cast;
}"
83319,"public void testJso(){
  Foo foo=getFoo();
  assertEquals(""String_Node_Str"",foo.toString());
  JavaScriptObject jso=foo;
  assertEquals(""String_Node_Str"",jso.toString());
  Object y=noOptimizeFalse() ? new Object() : foo;
  assertEquals(""String_Node_Str"",y.toString());
  jso=getJso();
  assertEquals(""String_Node_Str"",jso.toString());
}","public void testJso(){
  Foo foo=getFoo();
  assertEquals(""String_Node_Str"",foo.toString());
  JavaScriptObject jso=foo;
  assertEquals(""String_Node_Str"",jso.toString());
  Object y=noOptimizeFalse() ? new Object() : foo;
  assertEquals(""String_Node_Str"",y.toString());
  jso=getJso();
  assertEquals(""String_Node_Str"",jso.toString());
  try {
    JavaScriptObject[] typeTightenedFooArray=new Foo[3];
    typeTightenedFooArray[0]=getJso();
    fail();
  }
 catch (  ArrayStoreException e) {
  }
  try {
    JavaScriptObject[] fooArray=noOptimizeFalse() ? new JavaScriptObject[3] : new Foo[3];
    fooArray[0]=getJso();
    fail();
  }
 catch (  ArrayStoreException e) {
  }
  JavaScriptObject[] jsoArray=noOptimizeFalse() ? new Foo[3] : new JavaScriptObject[3];
  jsoArray[0]=getJso();
}"
83320,"/** 
 * Gets the cookie associated with the given name.
 * @param name the name of the cookie to be retrieved
 * @return the cookie's value
 */
public static String getCookie(String name){
  Map cookiesMap=ensureCookies();
  return (String)cookiesMap.get(name);
}","/** 
 * Gets the cookie associated with the given name.
 * @param name the name of the cookie to be retrieved
 * @return the cookie's value, or <code>null</code> if the cookie doesn't exist
 */
public static String getCookie(String name){
  Map cookiesMap=ensureCookies();
  return (String)cookiesMap.get(name);
}"
83321,"public void onBrowserEvent(Event event){
  int eventType=DOM.eventGetType(event);
switch (eventType) {
case Event.ONCLICK:
{
      Element e=DOM.eventGetTarget(event);
      if (shouldTreeDelegateFocusToElement(e)) {
      }
 else {
        setFocus(true);
      }
      break;
    }
case Event.ONMOUSEDOWN:
{
    if (mouseListeners != null) {
      mouseListeners.fireMouseEvent(this,event);
    }
    elementClicked(root,DOM.eventGetTarget(event));
    break;
  }
case Event.ONMOUSEUP:
{
  if (mouseListeners != null) {
    mouseListeners.fireMouseEvent(this,event);
  }
  break;
}
case Event.ONMOUSEMOVE:
{
if (mouseListeners != null) {
  mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONMOUSEOVER:
{
if (mouseListeners != null) {
mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONMOUSEOUT:
{
if (mouseListeners != null) {
mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONFOCUS:
if (focusListeners != null) {
focusListeners.fireFocusEvent(this,event);
}
break;
case Event.ONBLUR:
{
if (focusListeners != null) {
focusListeners.fireFocusEvent(this,event);
}
break;
}
case Event.ONKEYDOWN:
if (curSelection == null) {
if (root.getChildCount() > 0) {
onSelection(root.getChild(0),true,true);
}
super.onBrowserEvent(event);
return;
}
if (lastEventType == Event.ONKEYDOWN) {
return;
}
switch (DOM.eventGetKeyCode(event)) {
case KeyboardListener.KEY_UP:
{
moveSelectionUp(curSelection);
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_DOWN:
{
moveSelectionDown(curSelection,true);
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_LEFT:
{
if (curSelection.getState()) {
curSelection.setState(false);
}
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_RIGHT:
{
if (!curSelection.getState()) {
curSelection.setState(true);
}
DOM.eventPreventDefault(event);
break;
}
}
case Event.ONKEYUP:
if (eventType == Event.ONKEYUP) {
if (DOM.eventGetKeyCode(event) == KeyboardListener.KEY_TAB) {
Vector chain=new Vector();
collectElementChain(chain,getElement(),DOM.eventGetTarget(event));
TreeItem item=findItemByChain(chain,0,root);
if (item != getSelectedItem()) {
setSelectedItem(item,true);
}
}
}
case Event.ONKEYPRESS:
{
if (keyboardListeners != null) {
keyboardListeners.fireKeyboardEvent(this,event);
}
break;
}
}
super.onBrowserEvent(event);
lastEventType=eventType;
}","public void onBrowserEvent(Event event){
  int eventType=DOM.eventGetType(event);
switch (eventType) {
case Event.ONCLICK:
{
      Element e=DOM.eventGetTarget(event);
      if (shouldTreeDelegateFocusToElement(e)) {
      }
 else {
        setFocus(true);
      }
      break;
    }
case Event.ONMOUSEDOWN:
{
    if (mouseListeners != null) {
      mouseListeners.fireMouseEvent(this,event);
    }
    elementClicked(root,DOM.eventGetTarget(event));
    break;
  }
case Event.ONMOUSEUP:
{
  if (mouseListeners != null) {
    mouseListeners.fireMouseEvent(this,event);
  }
  break;
}
case Event.ONMOUSEMOVE:
{
if (mouseListeners != null) {
  mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONMOUSEOVER:
{
if (mouseListeners != null) {
mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONMOUSEOUT:
{
if (mouseListeners != null) {
mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONFOCUS:
if (focusListeners != null) {
focusListeners.fireFocusEvent(this,event);
}
break;
case Event.ONBLUR:
{
if (focusListeners != null) {
focusListeners.fireFocusEvent(this,event);
}
break;
}
case Event.ONKEYDOWN:
if (curSelection == null) {
if (root.getChildCount() > 0) {
onSelection(root.getChild(0),true,true);
}
super.onBrowserEvent(event);
return;
}
if (lastEventType == Event.ONKEYDOWN) {
return;
}
switch (DOM.eventGetKeyCode(event)) {
case KeyboardListener.KEY_UP:
{
moveSelectionUp(curSelection);
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_DOWN:
{
moveSelectionDown(curSelection,true);
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_LEFT:
{
if (curSelection.getState()) {
curSelection.setState(false);
}
 else {
TreeItem parent=curSelection.getParentItem();
if (parent != null) {
parent.setState(false);
setSelectedItem(parent);
}
}
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_RIGHT:
{
if (!curSelection.getState()) {
curSelection.setState(true);
if (curSelection.getChildCount() > 0) {
setSelectedItem(curSelection.getChild(0));
}
}
DOM.eventPreventDefault(event);
break;
}
}
case Event.ONKEYUP:
if (eventType == Event.ONKEYUP) {
if (DOM.eventGetKeyCode(event) == KeyboardListener.KEY_TAB) {
Vector chain=new Vector();
collectElementChain(chain,getElement(),DOM.eventGetTarget(event));
TreeItem item=findItemByChain(chain,0,root);
if (item != getSelectedItem()) {
setSelectedItem(item,true);
}
}
}
case Event.ONKEYPRESS:
{
if (keyboardListeners != null) {
keyboardListeners.fireKeyboardEvent(this,event);
}
break;
}
}
super.onBrowserEvent(event);
lastEventType=eventType;
}"
83322,"protected void writeGetSerializationSignatureMethod(){
  if (!shouldEnforceTypeVersioning()) {
    srcWriter.println(""String_Node_Str"");
    srcWriter.indentln(""String_Node_Str"");
    srcWriter.println(""String_Node_Str"");
  }
 else {
    String serializerTypeName=serializationOracle.getTypeSerializerQualifiedName(getServiceInterface());
    srcWriter.println(""String_Node_Str"" + '{');
    srcWriter.indent();
    srcWriter.println(""String_Node_Str"" + serializerTypeName + ""String_Node_Str"");
    srcWriter.println(""String_Node_Str"");
    srcWriter.indentln(""String_Node_Str"" + serializerTypeName + ""String_Node_Str"");
    srcWriter.println(""String_Node_Str"");
    srcWriter.println(""String_Node_Str"");
    srcWriter.outdent();
    srcWriter.println(""String_Node_Str"");
  }
  srcWriter.println();
}","protected void writeGetSerializationSignatureMethod(){
  if (!shouldEnforceTypeVersioning()) {
    srcWriter.println(""String_Node_Str"");
    srcWriter.indentln(""String_Node_Str"");
    srcWriter.println(""String_Node_Str"");
  }
 else {
    String serializerTypeName=serializationOracle.getTypeSerializerQualifiedName(getServiceInterface());
    srcWriter.println(""String_Node_Str"" + '{');
    srcWriter.indent();
    srcWriter.println(""String_Node_Str"" + serializerTypeName + ""String_Node_Str"");
    srcWriter.println(""String_Node_Str"");
    srcWriter.outdent();
    srcWriter.println(""String_Node_Str"");
  }
  srcWriter.println();
}"
83323,"/** 
 * Convenience methods to get an attribute on a cell.
 * @param row cell's row
 * @param column cell's column
 * @param attr attribute to get
 * @return the attribute's value
 * @throws IndexOutOfBoundsException
 */
protected String getAttr(int row,int column,String attr){
  Element elem=getElement(row,column);
  return DOM.getElementProperty(elem,attr);
}","/** 
 * Convenience methods to get an attribute on a cell.
 * @param row cell's row
 * @param column cell's column
 * @param attr attribute to get
 * @return the attribute's value
 * @throws IndexOutOfBoundsException
 */
protected String getAttr(int row,int column,String attr){
  Element elem=getElement(row,column);
  return DOM.getElementAttribute(elem,attr);
}"
83324,"/** 
 * Convenience methods to set an attribute on a row.
 * @param row cell's row
 * @param attrName attribute to set
 * @param value value to set
 * @throws IndexOutOfBoundsException
 */
protected void setAttr(int row,String attrName,String value){
  Element elem=ensureElement(row);
  DOM.setElementProperty(elem,attrName,value);
}","/** 
 * Convenience methods to set an attribute on a row.
 * @param row cell's row
 * @param attrName attribute to set
 * @param value value to set
 * @throws IndexOutOfBoundsException
 */
protected void setAttr(int row,String attrName,String value){
  Element elem=ensureElement(row);
  DOM.setElementAttribute(elem,attrName,value);
}"
83325,"/** 
 * This method is called when a widget is attached to the browser's document. It must not be overridden, except by   {@link Panel}. To receive notification when a widget is attached to the document, override the  {@link #onLoad} method.
 */
protected void onAttach(){
  if (attached) {
    return;
  }
  attached=true;
  DOM.setEventListener(getElement(),this);
  onLoad();
}","/** 
 * This method is called when a widget is attached to the browser's document. It must not be overridden, except by   {@link Panel}. To receive notification when a widget is attached to the document, override the  {@link #onLoad} method.
 * @throws IllegalStateException if this widget is already attached
 */
protected void onAttach(){
  if (attached) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  attached=true;
  DOM.setEventListener(getElement(),this);
  onLoad();
}"
83326,"/** 
 * Sets this widget's parent. This method should only be called by  {@link Panel} and {@link Composite}.
 * @param parent the widget's new parent
 */
void setParent(Widget parent){
  this.parent=parent;
  if (parent == null) {
    onDetach();
  }
 else   if (parent.isAttached()) {
    onAttach();
  }
}","/** 
 * Sets this widget's parent. This method should only be called by  {@link Panel} and {@link Composite}.
 * @param parent the widget's new parent
 */
void setParent(Widget parent){
  Widget oldParent=this.parent;
  this.parent=parent;
  if (parent == null) {
    if (oldParent != null && oldParent.isAttached()) {
      onDetach();
    }
  }
 else   if (parent.isAttached()) {
    onAttach();
  }
}"
83327,"/** 
 * This method is called when a widget is detached from the browser's document. It must not be overridden, except by   {@link Panel}.
 */
protected void onDetach(){
  if (!attached) {
    return;
  }
  attached=false;
  DOM.setEventListener(getElement(),null);
}","/** 
 * This method is called when a widget is detached from the browser's document. It must not be overridden, except by   {@link Panel}.
 * @throws IllegalStateException if this widget is already detached
 */
protected void onDetach(){
  if (!attached) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  attached=false;
  DOM.setEventListener(getElement(),null);
}"
83328,"/** 
 * Fired when the user depresses a physical key.
 * @param sender the widget that was focused when the event occurred.
 * @param keyCode the physical key that was depressed. Constants for thisvalue are defined in this interface with the KEYCODE prefix.
 * @param modifiers the modifier keys pressed at when the event occurred. Thisvalue is a combination of the bits defined by {@link KeyboardListener#MODIFIER_SHIFT},  {@link KeyboardListener#MODIFIER_CTRL}, and  {@link KeyboardListener#MODIFIER_ALT}.
 */
void onKeyDown(Widget sender,char keyCode,int modifiers);","/** 
 * Fired when the user depresses a physical key.
 * @param sender the widget that was focused when the event occurred.
 * @param keyCode the physical key that was depressed. Constants for thisvalue are defined in this interface with the KEY prefix.
 * @param modifiers the modifier keys pressed at when the event occurred. Thisvalue is a combination of the bits defined by {@link KeyboardListener#MODIFIER_SHIFT},  {@link KeyboardListener#MODIFIER_CTRL}, and  {@link KeyboardListener#MODIFIER_ALT}.
 */
void onKeyDown(Widget sender,char keyCode,int modifiers);"
83329,"/** 
 * Fired when the user releases a physical key.
 * @param sender the widget that was focused when the event occurred.
 * @param keyCode the physical key that was released. Constants for this valueare defined in this interface with the KEYCODE prefix.
 * @param modifiers the modifier keys pressed at when the event occurred. Thisvalue is a combination of the bits defined by {@link KeyboardListener#MODIFIER_SHIFT},  {@link KeyboardListener#MODIFIER_CTRL}, and  {@link KeyboardListener#MODIFIER_ALT}.
 */
void onKeyUp(Widget sender,char keyCode,int modifiers);","/** 
 * Fired when the user releases a physical key.
 * @param sender the widget that was focused when the event occurred.
 * @param keyCode the physical key that was released. Constants for this valueare defined in this interface with the KEY prefix.
 * @param modifiers the modifier keys pressed at when the event occurred. Thisvalue is a combination of the bits defined by {@link KeyboardListener#MODIFIER_SHIFT},  {@link KeyboardListener#MODIFIER_CTRL}, and  {@link KeyboardListener#MODIFIER_ALT}.
 */
void onKeyUp(Widget sender,char keyCode,int modifiers);"
83330,"/** 
 * Fired when a keyboard action generates a character. This occurs after onKeyDown and onKeyUp are fired for the physical key that was pressed.
 * @param sender the widget that was focused when the event occurred.
 * @param keyCode the Unicode character that was generated by the keyboardaction.
 * @param modifiers the modifier keys pressed at when the event occurred. Thisvalue is a combination of the bits defined by {@link KeyboardListener#MODIFIER_SHIFT},  {@link KeyboardListener#MODIFIER_CTRL}, and  {@link KeyboardListener#MODIFIER_ALT}.
 */
void onKeyPress(Widget sender,char keyCode,int modifiers);","/** 
 * Fired when a keyboard action generates a character. This occurs after onKeyDown and onKeyUp are fired for the physical key that was pressed. <p> It should be noted that many browsers do not generate keypress events for non-printing keyCode values, such as   {@link KeyboardListener#KEY_ENTER}or arrow keys.  These keyCodes can be reliably captured either with  {@link KeyboardListener#onKeyDown(Widget,char,int)} or{@link KeyboardListener#onKeyUp(Widget,char,int)}. </p>
 * @param sender the widget that was focused when the event occurred.
 * @param keyCode the Unicode character that was generated by the keyboardaction.
 * @param modifiers the modifier keys pressed at when the event occurred. Thisvalue is a combination of the bits defined by {@link KeyboardListener#MODIFIER_SHIFT},  {@link KeyboardListener#MODIFIER_CTRL}, and  {@link KeyboardListener#MODIFIER_ALT}.
 */
void onKeyPress(Widget sender,char keyCode,int modifiers);"
83331,"protected GWTShell(boolean forceServer,boolean noURLs){
  registerHandler(new ArgHandlerPort());
  if (!forceServer) {
    registerHandler(new ArgHandlerNoServerFlag());
  }
  registerHandler(new ArgHandlerWhitelist());
  registerHandler(new ArgHandlerBlacklist());
  registerHandler(new ArgHandlerLogLevel(){
    public String[] getDefaultArgs(){
      return new String[]{getTag(),doGetDefaultLogLevel()};
    }
    public void setLogLevel(    Type level){
      logLevel=level;
    }
  }
);
  registerHandler(new ArgHandlerGenDir(){
    public void setDir(    File dir){
      genDir=dir;
    }
  }
);
  if (!noURLs) {
    registerHandler(new ArgHandlerStartupURLs());
  }
  registerHandler(new ArgHandlerOutDir(){
    public void setDir(    File dir){
      outDir=dir;
    }
  }
);
  registerHandler(new ArgHandlerScriptStyle(){
    public void setStyleDetailed(){
      obfuscate=false;
      prettyNames=false;
    }
    public void setStyleObfuscated(){
      obfuscate=true;
    }
    public void setStylePretty(){
      obfuscate=false;
      prettyNames=true;
    }
  }
);
}","protected GWTShell(boolean forceServer,boolean noURLs){
  registerHandler(getArgHandlerPort());
  if (!forceServer) {
    registerHandler(new ArgHandlerNoServerFlag());
  }
  registerHandler(new ArgHandlerWhitelist());
  registerHandler(new ArgHandlerBlacklist());
  registerHandler(new ArgHandlerLogLevel(){
    public String[] getDefaultArgs(){
      return new String[]{getTag(),doGetDefaultLogLevel()};
    }
    public void setLogLevel(    Type level){
      logLevel=level;
    }
  }
);
  registerHandler(new ArgHandlerGenDir(){
    public void setDir(    File dir){
      genDir=dir;
    }
  }
);
  if (!noURLs) {
    registerHandler(new ArgHandlerStartupURLs());
  }
  registerHandler(new ArgHandlerOutDir(){
    public void setDir(    File dir){
      outDir=dir;
    }
  }
);
  registerHandler(new ArgHandlerScriptStyle(){
    public void setStyleDetailed(){
      obfuscate=false;
      prettyNames=false;
    }
    public void setStyleObfuscated(){
      obfuscate=true;
    }
    public void setStylePretty(){
      obfuscate=false;
      prettyNames=true;
    }
  }
);
}"
83332,"protected boolean startUp(){
  if (started) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  started=true;
  loadRequiredNativeLibs();
  openAppWindow();
  initializeLogger();
  if (runTomcat) {
    final int serverPort=getPort();
    String whyFailed=EmbeddedTomcatServer.start(getTopLogger(),serverPort,outDir);
    if (whyFailed != null) {
      System.err.println(whyFailed);
      return false;
    }
  }
  return true;
}","protected boolean startUp(){
  if (started) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  started=true;
  loadRequiredNativeLibs();
  openAppWindow();
  initializeLogger();
  if (runTomcat) {
    final int serverPort=getPort();
    String whyFailed=EmbeddedTomcatServer.start(getTopLogger(),serverPort,outDir);
    if (whyFailed != null) {
      System.err.println(whyFailed);
      return false;
    }
    port=EmbeddedTomcatServer.getPort();
  }
  return true;
}"
83333,"private EmbeddedTomcatServer(final TreeLogger topLogger,int listeningPort,final File outDir){
  if (topLogger == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final TreeLogger logger=topLogger.branch(TreeLogger.INFO,""String_Node_Str"" + listeningPort,null);
  startupBranchLogger=logger;
  sTomcat=this;
  port=listeningPort;
  File topWorkDir=new File(System.getProperty(""String_Node_Str""));
  String catBase=System.getProperty(""String_Node_Str"");
  if (catBase == null) {
    catBase=generateDefaultCatalinaBase(logger,topWorkDir);
    System.setProperty(""String_Node_Str"",catBase);
  }
  logger.log(TreeLogger.DEBUG,""String_Node_Str"" + catBase,null);
  String adapterClassName=CommonsLoggerAdapter.class.getName();
  System.setProperty(""String_Node_Str"",adapterClassName);
  Logger catalinaLogger=new CatalinaLoggerAdapter(topLogger);
  catEmbedded=new Embedded();
  catEmbedded.setDebug(0);
  catEmbedded.setLogger(catalinaLogger);
  catEngine=catEmbedded.createEngine();
  catEngine.setName(""String_Node_Str"");
  catEngine.setDefaultHost(""String_Node_Str"");
  String appBase=catBase + ""String_Node_Str"";
  catHost=(StandardHost)catEmbedded.createHost(""String_Node_Str"",appBase);
  HostConfig hostConfig=new HostConfig();
  catHost.addLifecycleListener(hostConfig);
  catHost.addContainerListener(new ContainerListener(){
    public void containerEvent(    ContainerEvent event){
      if (StandardHost.PRE_INSTALL_EVENT.equals(event.getType())) {
        StandardContext webapp=(StandardContext)event.getData();
        publishShellLoggerAttribute(logger,topLogger,webapp);
        publishShellOutDirAttribute(logger,outDir,webapp);
      }
    }
  }
);
  catEngine.addChild(catHost);
  catEngine.setDefaultHost(catHost.getName());
  catEmbedded.addEngine(catEngine);
  InetAddress nullAddr=null;
  Connector connector=catEmbedded.createConnector(nullAddr,port,false);
  catEmbedded.addConnector(connector);
}","private EmbeddedTomcatServer(final TreeLogger topLogger,int listeningPort,final File outDir) throws LifecycleException {
  if (topLogger == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final TreeLogger logger=topLogger.branch(TreeLogger.INFO,""String_Node_Str"" + listeningPort,null);
  startupBranchLogger=logger;
  sTomcat=this;
  File topWorkDir=new File(System.getProperty(""String_Node_Str""));
  String catBase=System.getProperty(""String_Node_Str"");
  if (catBase == null) {
    catBase=generateDefaultCatalinaBase(logger,topWorkDir);
    System.setProperty(""String_Node_Str"",catBase);
  }
  logger.log(TreeLogger.DEBUG,""String_Node_Str"" + catBase,null);
  String adapterClassName=CommonsLoggerAdapter.class.getName();
  System.setProperty(""String_Node_Str"",adapterClassName);
  Logger catalinaLogger=new CatalinaLoggerAdapter(topLogger);
  catEmbedded=new Embedded();
  catEmbedded.setDebug(0);
  catEmbedded.setLogger(catalinaLogger);
  catEngine=catEmbedded.createEngine();
  catEngine.setName(""String_Node_Str"");
  catEngine.setDefaultHost(""String_Node_Str"");
  String appBase=catBase + ""String_Node_Str"";
  catHost=(StandardHost)catEmbedded.createHost(""String_Node_Str"",appBase);
  HostConfig hostConfig=new HostConfig();
  catHost.addLifecycleListener(hostConfig);
  catHost.addContainerListener(new ContainerListener(){
    public void containerEvent(    ContainerEvent event){
      if (StandardHost.PRE_INSTALL_EVENT.equals(event.getType())) {
        StandardContext webapp=(StandardContext)event.getData();
        publishShellLoggerAttribute(logger,topLogger,webapp);
        publishShellOutDirAttribute(logger,outDir,webapp);
      }
    }
  }
);
  catEngine.addChild(catHost);
  catEngine.setDefaultHost(catHost.getName());
  catEmbedded.addEngine(catEngine);
  InetAddress nullAddr=null;
  Connector connector=catEmbedded.createConnector(nullAddr,listeningPort,false);
  catEmbedded.addConnector(connector);
  catEmbedded.start();
  port=computeLocalPort(connector);
  if (port != listeningPort) {
    logger.log(TreeLogger.INFO,""String_Node_Str"" + port,null);
  }
}"
83334,"public static synchronized String start(TreeLogger topLogger,int port,File outDir){
  if (sTomcat != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    new EmbeddedTomcatServer(topLogger,port,outDir);
    sTomcat.catEmbedded.start();
    return null;
  }
 catch (  LifecycleException e) {
    String msg=e.getMessage();
    if (msg != null && msg.indexOf(""String_Node_Str"") != -1) {
      msg=""String_Node_Str"" + port + ""String_Node_Str"";
    }
 else {
      msg=""String_Node_Str"";
    }
    return msg;
  }
}","public static synchronized String start(TreeLogger topLogger,int port,File outDir){
  if (sTomcat != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    new EmbeddedTomcatServer(topLogger,port,outDir);
    return null;
  }
 catch (  LifecycleException e) {
    String msg=e.getMessage();
    if (msg != null && msg.indexOf(""String_Node_Str"") != -1) {
      msg=""String_Node_Str"" + port + ""String_Node_Str"";
    }
 else {
      msg=""String_Node_Str"";
    }
    return msg;
  }
}"
83335,"public boolean visit(JsProgram x,JsContext ctx){
  return true;
}","public boolean visit(JsBlock x,JsContext ctx){
  printJsBlockOptionalTruncate(x,false);
  return false;
}"
83336,"public void setText(String text){
  DOM.setInnerHTML(anchorElem,text);
}","public void setText(String text){
  DOM.setInnerText(anchorElem,text);
}"
83337,"/** 
 * Get the value associated with the given Dictionary key.
 * @param key to lookup
 * @return the value
 * @throws MissingResourceException if the value is not found
 */
public native String get(String key);","/** 
 * Get the value associated with the given Dictionary key. We have to call Object.hasOwnProperty to verify that the value is defined on this object, rather than a superclass, since normal Object properties are also visible on this object.
 * @param key to lookup
 * @return the value
 * @throws MissingResourceException if the value is not found
 */
public native String get(String key);"
83338,"/** 
 * Tests whether or not this JSONObject contains the specified key.
 * @param key the key to search for
 * @return <code>true</code> if the JSONObject contains the specified key
 */
public native boolean containsKey(String key);","/** 
 * Tests whether or not this JSONObject contains the specified key. We use Object.hasOwnProperty here to verify that a given key is specified on this object rather than a superclass (such as standard properties defined on Object).
 * @param key the key to search for
 * @return <code>true</code> if the JSONObject contains the specified key
 */
public native boolean containsKey(String key);"
83339,"/** 
 * Gets the JSONValue associated with the specified key.
 * @param key the key to search for
 * @return if found, the value associated with the specified key, or<code>null</code> otherwise
 */
public native JSONValue get(String key);","/** 
 * Gets the JSONValue associated with the specified key. We use Object.hasOwnProperty here to verify that a given key is specified on this object rather than a superclass (such as standard properties defined on Object).
 * @param key the key to search for
 * @return if found, the value associated with the specified key, or<code>null</code> otherwise
 */
public native JSONValue get(String key);"
83340,"/** 
 * Inline a call to a method that contains only a return statement.
 */
private boolean tryInlineExpression(JMethodCall x,Context ctx,JExpression targetExpr){
  List params=x.getTarget().params;
  ArrayList args=x.getArgs();
  JExpression resultExpression;
  int magicArg[]=new int[1];
  resultExpression=canInlineExpression(x.getSourceInfo(),targetExpr,params,args,magicArg);
  if (resultExpression == null) {
    return false;
  }
  int iMagicArg=magicArg[0];
  JMultiExpression multi=new JMultiExpression(program,x.getSourceInfo());
  JExpression instance=x.getInstance();
  if (instance != null && instance.hasSideEffects()) {
    multi.exprs.add(x.getInstance());
  }
  for (int i=0; i < params.size(); ++i) {
    if (((JExpression)args.get(i)).hasSideEffects()) {
      if (i < iMagicArg) {
        multi.exprs.add(args.get(i));
      }
 else       if (i == iMagicArg) {
      }
 else {
        assert(i > iMagicArg);
        return true;
      }
    }
  }
  multi.exprs.add(resultExpression);
  ctx.replaceMe(multi);
  return true;
}","/** 
 * Inline a call to a method that contains only a return statement.
 */
private boolean tryInlineExpression(JMethodCall x,Context ctx,JExpression targetExpr){
  List params=x.getTarget().params;
  ArrayList args=x.getArgs();
  JExpression resultExpression;
  int magicArg[]=new int[1];
  resultExpression=canInlineExpression(x.getSourceInfo(),targetExpr,params,args,magicArg);
  if (resultExpression == null) {
    return false;
  }
  if (checkClinitViolation(x,resultExpression)) {
    return true;
  }
  int iMagicArg=magicArg[0];
  JMultiExpression multi=new JMultiExpression(program,x.getSourceInfo());
  JExpression instance=x.getInstance();
  if (instance != null && instance.hasSideEffects()) {
    multi.exprs.add(x.getInstance());
  }
  for (int i=0; i < params.size(); ++i) {
    if (((JExpression)args.get(i)).hasSideEffects()) {
      if (i < iMagicArg) {
        multi.exprs.add(args.get(i));
      }
 else       if (i == iMagicArg) {
      }
 else {
        assert(i > iMagicArg);
        return true;
      }
    }
  }
  multi.exprs.add(resultExpression);
  ctx.replaceMe(multi);
  return true;
}"
83341,"public void testClinitSideEffectInlining(){
  sideEffectChecker=0;
  SideEffectCauser.causeClinitSideEffect();
  assertEquals(1,sideEffectChecker);
  SideEffectCauser2.causeClinitSideEffect();
  if (GWT.isScript()) {
    ++sideEffectChecker;
  }
  assertEquals(2,sideEffectChecker);
  String checkRescued=NonSideEffectCauser.NOT_A_COMPILE_TIME_CONSTANT;
  assertEquals(null,checkRescued);
}","public void testClinitSideEffectInlining(){
  sideEffectChecker=0;
  SideEffectCauser.causeClinitSideEffect();
  assertEquals(1,sideEffectChecker);
  SideEffectCauser2.causeClinitSideEffect();
  assertEquals(2,sideEffectChecker);
  SideEffectCauser3.causeClinitSideEffect();
  assertEquals(3,sideEffectChecker);
  String checkRescued=NonSideEffectCauser.NOT_A_COMPILE_TIME_CONSTANT;
  assertEquals(null,checkRescued);
}"
83342,"public static Object causeClinitSideEffect(){
  return null;
}","public static void causeClinitSideEffect(){
}"
83343,"/** 
 * Returns true if the method is considered to be a valid JUnit test method. The criteria are that the method's name begin with ""test"", have public access, and not be static. You must choose to include or exclude methods which have arguments.
 */
static boolean isJUnitTestMethod(JMethod method,boolean acceptArgs){
  if (!method.getName().startsWith(""String_Node_Str"")) {
    return false;
  }
  if (!method.isPublic() || method.isStatic()) {
    return false;
  }
  return acceptArgs || method.getParameters().length == 0 && !acceptArgs;
}","/** 
 * Returns true if the method is considered to be a valid JUnit test method. The criteria are that the method's name begin with ""test"" and have public access. The method may be static. You must choose to include or exclude methods which have arguments.
 */
static boolean isJUnitTestMethod(JMethod method,boolean acceptArgs){
  if (!method.getName().startsWith(""String_Node_Str"")) {
    return false;
  }
  if (!method.isPublic()) {
    return false;
  }
  return acceptArgs || method.getParameters().length == 0 && !acceptArgs;
}"
83344,"/** 
 * Static initialization: generate one call to 'JavaScriptHost.createNative()' for each native method, to define the JavaScript code that will be invoked later.
 */
private char[] genInitializerBlock(String file,char[] source,JMethod[] methods){
  String escapedFile=Jsni.escapeQuotesAndSlashes(file);
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  for (int i=0; i < methods.length; ++i) {
    JMethod method=methods[i];
    JsBlock jsniBody=(JsBlock)parsedJsByMethod.get(method);
    if (jsniBody == null) {
      continue;
    }
    JParameter[] params=method.getParameters();
    String paramNamesArray=getParamNamesArrayExpr(params);
    final String jsTry=""String_Node_Str"";
    final String jsCatch=""String_Node_Str"" + ""String_Node_Str"" + Jsni.JAVASCRIPTHOST_NAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    String js=jsTry + Jsni.generateEscapedJavaScript(jsniBody) + jsCatch;
    String jsniSig=Jsni.getJsniSignature(method);
    int bodyStart=method.getBodyStart();
    int line=Jsni.countNewlines(source,0,bodyStart) + 1;
    sb.append(""String_Node_Str"" + Jsni.JAVASCRIPTHOST_NAME + ""String_Node_Str""+ escapedFile+ ""String_Node_Str""+ line+ ""String_Node_Str""+ ""String_Node_Str""+ jsniSig+ ""String_Node_Str""+ paramNamesArray+ ""String_Node_Str""+ js+ ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString().toCharArray();
}","/** 
 * Static initialization: generate one call to 'JavaScriptHost.createNative()' for each native method, to define the JavaScript code that will be invoked later.
 */
private char[] genInitializerBlock(String file,char[] source,JMethod[] methods){
  String escapedFile=Jsni.escapeQuotesAndSlashes(file);
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"");
  for (int i=0; i < methods.length; ++i) {
    JMethod method=methods[i];
    JsBlock jsniBody=(JsBlock)parsedJsByMethod.get(method);
    if (jsniBody == null) {
      continue;
    }
    JParameter[] params=method.getParameters();
    String paramNamesArray=getParamNamesArrayExpr(params);
    final String jsTry=""String_Node_Str"";
    final String jsCatch=""String_Node_Str"" + ""String_Node_Str"" + Jsni.JAVASCRIPTHOST_NAME + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    String js=jsTry + Jsni.generateEscapedJavaScriptForHostedMode(jsniBody) + jsCatch;
    String jsniSig=Jsni.getJsniSignature(method);
    int bodyStart=method.getBodyStart();
    int line=Jsni.countNewlines(source,0,bodyStart) + 1;
    sb.append(""String_Node_Str"" + Jsni.JAVASCRIPTHOST_NAME + ""String_Node_Str""+ escapedFile+ ""String_Node_Str""+ line+ ""String_Node_Str""+ ""String_Node_Str""+ jsniSig+ ""String_Node_Str""+ paramNamesArray+ ""String_Node_Str""+ js+ ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb.toString().toCharArray();
}"
83345,public abstract String toString(Element elem);,public native String toString(Element elem);
83346,"public void testIsOrHasChild(){
  Element div=DOM.createDiv();
  Element childDiv=DOM.createDiv();
  assertFalse(DOM.isOrHasChild(div,childDiv));
  DOM.appendChild(div,childDiv);
  assertTrue(DOM.isOrHasChild(div,childDiv));
  assertFalse(DOM.isOrHasChild(childDiv,div));
}","/** 
 * Tests that   {@link DOM#isOrHasChild(Element,Element)} works consistentlyacross browsers.
 */
public void testIsOrHasChild(){
  Element div=DOM.createDiv();
  Element childDiv=DOM.createDiv();
  assertFalse(DOM.isOrHasChild(div,childDiv));
  DOM.appendChild(div,childDiv);
  assertTrue(DOM.isOrHasChild(div,childDiv));
  assertFalse(DOM.isOrHasChild(childDiv,div));
}"
83347,"public void testGetParent(){
  Element element=RootPanel.get().getElement();
  int i=0;
  while (i < 10 && element != null) {
    element=DOM.getParent(element);
    i++;
  }
  if (i == 10) {
    fail(""String_Node_Str"");
  }
}","/** 
 * Tests the ability to do a parent-ward walk in the DOM.
 */
public void testGetParent(){
  Element element=RootPanel.get().getElement();
  int i=0;
  while (i < 10 && element != null) {
    element=DOM.getParent(element);
    i++;
  }
  if (i == 10) {
    fail(""String_Node_Str"");
  }
}"
83348,"public void testToString(){
  Button b=new Button(""String_Node_Str"");
  assertTrue(b.toString().indexOf(""String_Node_Str"") != -1);
  assertTrue(b.toString().toLowerCase().indexOf(""String_Node_Str"") != -1);
}","/** 
 * Tests   {@link DOM#toString(Element)} against likely failure points.
 */
public void testToString(){
  Button b=new Button(""String_Node_Str"");
  assertTrue(b.toString().indexOf(""String_Node_Str"") != -1);
  assertTrue(b.toString().toLowerCase().indexOf(""String_Node_Str"") != -1);
  Element image=DOM.createImg();
  String imageUrl=""String_Node_Str"";
  DOM.setElementProperty(image,""String_Node_Str"",imageUrl);
  String imageToString=DOM.toString(image).trim().toLowerCase();
  assertTrue(imageToString.startsWith(""String_Node_Str""));
  assertTrue(imageToString.indexOf(imageUrl) != -1);
  Element input=DOM.createInputText();
  DOM.setElementProperty(input,""String_Node_Str"",""String_Node_Str"");
  final String inputToString=DOM.toString(input).trim().toLowerCase();
  assertTrue(inputToString.startsWith(""String_Node_Str""));
  Element select=DOM.createSelect();
  for (int i=0; i < 10; i++) {
    final Element option=DOM.createElement(""String_Node_Str"");
    DOM.appendChild(select,option);
    DOM.setInnerText(option,""String_Node_Str"" + i);
  }
  String selectToString=DOM.toString(select).trim().toLowerCase();
  assertTrue(selectToString.startsWith(""String_Node_Str""));
  for (int i=0; i < 10; i++) {
    assertTrue(selectToString.indexOf(""String_Node_Str"" + i) != -1);
  }
  Element meta=DOM.createElement(""String_Node_Str"");
  DOM.setElementProperty(meta,""String_Node_Str"",""String_Node_Str"");
  String metaToString=DOM.toString(meta).trim().toLowerCase();
  assertTrue(metaToString.startsWith(""String_Node_Str""));
}"
83349,"public void testSetInnerText(){
  Element tableElem=DOM.createTable();
  Element trElem=DOM.createTR();
  Element tdElem=DOM.createTD();
  DOM.setInnerText(tdElem,""String_Node_Str"");
  Element emElem=DOM.createElement(""String_Node_Str"");
  DOM.setInnerText(emElem,""String_Node_Str"");
  DOM.appendChild(tdElem,emElem);
  DOM.appendChild(trElem,tdElem);
  DOM.appendChild(tableElem,trElem);
  DOM.appendChild(RootPanel.getBodyElement(),tableElem);
  DOM.setInnerText(tdElem,null);
  assertTrue(getDenormalizedChildCount(tdElem) == 0);
}","/** 
 * Tests that   {@link DOM#setInnerText(Element,String)} works consistentlyacross browsers.
 */
public void testSetInnerText(){
  Element tableElem=DOM.createTable();
  Element trElem=DOM.createTR();
  Element tdElem=DOM.createTD();
  DOM.setInnerText(tdElem,""String_Node_Str"");
  Element emElem=DOM.createElement(""String_Node_Str"");
  DOM.setInnerText(emElem,""String_Node_Str"");
  DOM.appendChild(tdElem,emElem);
  DOM.appendChild(trElem,tdElem);
  DOM.appendChild(tableElem,trElem);
  DOM.appendChild(RootPanel.getBodyElement(),tableElem);
  DOM.setInnerText(tdElem,null);
  assertTrue(getDenormalizedChildCount(tdElem) == 0);
}"
83350,"/** 
 * Creates finished JavaScript source code from the specified Java compilation units.
 */
public String compile(TreeLogger logger,RebindOracle rebindOracle) throws UnableToCompleteException {
  try {
    JProgram jprogram=new JProgram(logger,rebindOracle);
    TypeMap typeMap=new TypeMap(jprogram);
    JsProgram jsProgram=new JsProgram();
    TypeDeclaration[] allTypeDeclarations=BuildTypeMap.exec(typeMap,goldenCuds,jsProgram);
    checkForErrors(logger,true);
    jprogram.typeOracle.computeBeforeAST();
    GenerateJavaAST.exec(allTypeDeclarations,typeMap,jprogram);
    checkForErrors(logger,true);
    boolean isDebugEnabled=false;
    if (!isDebugEnabled) {
      AssertionRemover.exec(jprogram);
    }
    jprogram.typeOracle.computeAfterAST();
    ReplaceRebinds.exec(jprogram);
    findEntryPoints(logger,rebindOracle,declEntryPoints,jprogram);
    boolean didChange;
    do {
      didChange=false;
      didChange=Pruner.exec(jprogram,true) || didChange;
      didChange=MethodAndClassFinalizer.exec(jprogram) || didChange;
      didChange=MakeCallsStatic.exec(jprogram) || didChange;
      didChange=TypeTightener.exec(jprogram) || didChange;
      didChange=MethodCallTightener.exec(jprogram) || didChange;
      didChange=DeadCodeElimination.exec(jprogram) || didChange;
      didChange=MethodInliner.exec(jprogram) || didChange;
      if (didChange) {
        jprogram.typeOracle.recomputeClinits();
      }
    }
 while (didChange);
    if (isDebugEnabled) {
    }
    CatchBlockNormalizer.exec(jprogram);
    CompoundAssignmentNormalizer.exec(jprogram);
    JavaScriptObjectCaster.exec(jprogram);
    CastNormalizer.exec(jprogram);
    ArrayNormalizer.exec(jprogram);
    Pruner.exec(jprogram,false);
    GenerateJavaScriptAST.exec(jprogram,jsProgram);
    JsSymbolResolver.exec(jsProgram);
    if (obfuscate) {
      JsObfuscateNamer.exec(jsProgram);
    }
 else     if (prettyNames) {
      JsPrettyNamer.exec(jsProgram);
    }
 else {
      JsVerboseNamer.exec(jsProgram);
    }
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    TextOutputOnPrintWriter out=new TextOutputOnPrintWriter(pw,obfuscate);
    JsSourceGenerationVisitor v=new JsSourceGenerationVisitor(out);
    v.accept(jsProgram);
    return sw.toString();
  }
 catch (  UnableToCompleteException e) {
    throw e;
  }
catch (  InternalCompilerException e) {
    TreeLogger topBranch=logger.branch(TreeLogger.ERROR,""String_Node_Str"",e);
    List nodeTrace=e.getNodeTrace();
    for (Iterator it=nodeTrace.iterator(); it.hasNext(); ) {
      NodeInfo nodeInfo=(NodeInfo)it.next();
      SourceInfo info=nodeInfo.getSourceInfo();
      String msg;
      if (info != null) {
        String fileName=info.getFileName();
        fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
        fileName=fileName.substring(fileName.lastIndexOf('\\') + 1);
        msg=""String_Node_Str"" + fileName + ""String_Node_Str""+ info.getStartLine()+ ""String_Node_Str"";
      }
 else {
        msg=""String_Node_Str"";
      }
      String description=nodeInfo.getDescription();
      if (description != null) {
        msg+=description;
      }
 else {
        msg+=""String_Node_Str"";
      }
      TreeLogger nodeBranch=topBranch.branch(TreeLogger.ERROR,msg,null);
      String className=nodeInfo.getClassName();
      if (className != null) {
        nodeBranch.log(TreeLogger.INFO,className,null);
      }
    }
    throw new UnableToCompleteException();
  }
catch (  Throwable e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
    throw new UnableToCompleteException();
  }
}","/** 
 * Creates finished JavaScript source code from the specified Java compilation units.
 */
public String compile(TreeLogger logger,RebindOracle rebindOracle) throws UnableToCompleteException {
  try {
    JProgram jprogram=new JProgram(logger,rebindOracle);
    TypeMap typeMap=new TypeMap(jprogram);
    JsProgram jsProgram=new JsProgram();
    TypeDeclaration[] allTypeDeclarations=BuildTypeMap.exec(typeMap,goldenCuds,jsProgram);
    checkForErrors(logger,true);
    jprogram.typeOracle.computeBeforeAST();
    GenerateJavaAST.exec(allTypeDeclarations,typeMap,jprogram);
    checkForErrors(logger,true);
    boolean isDebugEnabled=false;
    if (!isDebugEnabled) {
      AssertionRemover.exec(jprogram);
    }
    jprogram.typeOracle.computeAfterAST();
    ReplaceRebinds.exec(jprogram);
    findEntryPoints(logger,rebindOracle,declEntryPoints,jprogram);
    boolean didChange;
    do {
      didChange=false;
      didChange=Pruner.exec(jprogram,true) || didChange;
      didChange=MethodAndClassFinalizer.exec(jprogram) || didChange;
      didChange=MakeCallsStatic.exec(jprogram) || didChange;
      didChange=TypeTightener.exec(jprogram) || didChange;
      didChange=MethodCallTightener.exec(jprogram) || didChange;
      didChange=DeadCodeElimination.exec(jprogram) || didChange;
      didChange=MethodInliner.exec(jprogram) || didChange;
      if (didChange) {
        jprogram.typeOracle.recomputeClinits();
      }
    }
 while (didChange);
    if (isDebugEnabled) {
    }
    CatchBlockNormalizer.exec(jprogram);
    CompoundAssignmentNormalizer.exec(jprogram);
    JavaScriptObjectCaster.exec(jprogram);
    CastNormalizer.exec(jprogram);
    ArrayNormalizer.exec(jprogram);
    Pruner.exec(jprogram,false);
    GenerateJavaScriptAST.exec(jprogram,jsProgram);
    JsNormalizer.exec(jsProgram);
    JsSymbolResolver.exec(jsProgram);
    if (obfuscate) {
      JsObfuscateNamer.exec(jsProgram);
    }
 else     if (prettyNames) {
      JsPrettyNamer.exec(jsProgram);
    }
 else {
      JsVerboseNamer.exec(jsProgram);
    }
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    TextOutputOnPrintWriter out=new TextOutputOnPrintWriter(pw,obfuscate);
    JsSourceGenerationVisitor v=new JsSourceGenerationVisitor(out);
    v.accept(jsProgram);
    return sw.toString();
  }
 catch (  UnableToCompleteException e) {
    throw e;
  }
catch (  InternalCompilerException e) {
    TreeLogger topBranch=logger.branch(TreeLogger.ERROR,""String_Node_Str"",e);
    List nodeTrace=e.getNodeTrace();
    for (Iterator it=nodeTrace.iterator(); it.hasNext(); ) {
      NodeInfo nodeInfo=(NodeInfo)it.next();
      SourceInfo info=nodeInfo.getSourceInfo();
      String msg;
      if (info != null) {
        String fileName=info.getFileName();
        fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
        fileName=fileName.substring(fileName.lastIndexOf('\\') + 1);
        msg=""String_Node_Str"" + fileName + ""String_Node_Str""+ info.getStartLine()+ ""String_Node_Str"";
      }
 else {
        msg=""String_Node_Str"";
      }
      String description=nodeInfo.getDescription();
      if (description != null) {
        msg+=description;
      }
 else {
        msg+=""String_Node_Str"";
      }
      TreeLogger nodeBranch=topBranch.branch(TreeLogger.ERROR,msg,null);
      String className=nodeInfo.getClassName();
      if (className != null) {
        nodeBranch.log(TreeLogger.INFO,className,null);
      }
    }
    throw new UnableToCompleteException();
  }
catch (  Throwable e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
    throw new UnableToCompleteException();
  }
}"
83351,"private void doGetPublicFile(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,String partialPath,String moduleName) throws IOException {
  String msg=""String_Node_Str"" + partialPath + ""String_Node_Str""+ moduleName+ ""String_Node_Str"";
  logger=logger.branch(TreeLogger.TRACE,msg,null);
  if (autoGenerateResources(request,response,logger,partialPath,moduleName)) {
    return;
  }
  URL foundResource;
  try {
    ModuleDef moduleDef=getModuleDef(logger,moduleName);
    foundResource=moduleDef.findPublicFile(partialPath);
    if (foundResource == null) {
      File moduleDir=new File(getOutputDir(),moduleName);
      File requestedFile=new File(moduleDir,partialPath);
      if (requestedFile.exists()) {
        try {
          foundResource=requestedFile.toURL();
        }
 catch (        MalformedURLException e) {
        }
      }
      if (foundResource == null) {
        msg=""String_Node_Str"" + partialPath;
        logger.log(TreeLogger.WARN,msg,null);
        throw new UnableToCompleteException();
      }
    }
  }
 catch (  UnableToCompleteException e) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + partialPath + ""String_Node_Str""+ moduleName+ ""String_Node_Str"");
    return;
  }
  String path=foundResource.toExternalForm();
  String mimeType=null;
  try {
    mimeType=getServletContext().getMimeType(path);
  }
 catch (  UnsupportedOperationException e) {
  }
  if (mimeType == null) {
    mimeType=guessMimeType(path);
    msg=""String_Node_Str"" + mimeType + ""String_Node_Str"";
    logger.log(TreeLogger.TRACE,msg,null);
  }
  boolean infinitelyCacheable=isInfinitelyCacheable(path);
  InputStream is=null;
  try {
    URLConnection conn=foundResource.openConnection();
    long lastModified=conn.getLastModified();
    if (isNotModified(request,lastModified)) {
      response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
      if (infinitelyCacheable) {
        response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_MAXAGE_FOREVER);
      }
      return;
    }
    response.setStatus(HttpServletResponse.SC_OK);
    long now=new Date().getTime();
    response.setHeader(HttpHeaders.DATE,HttpHeaders.toInternetDateFormat(now));
    response.setContentType(mimeType);
    String lastModifiedStr=HttpHeaders.toInternetDateFormat(lastModified);
    response.setHeader(HttpHeaders.LAST_MODIFIED,lastModifiedStr);
    String maxAgeStr;
    if (infinitelyCacheable) {
      maxAgeStr=HttpHeaders.CACHE_CONTROL_MAXAGE_FOREVER;
    }
 else {
      maxAgeStr=HttpHeaders.CACHE_CONTROL_MAXAGE_EXPIRED;
    }
    response.setHeader(HttpHeaders.CACHE_CONTROL,maxAgeStr);
    int contentLength=conn.getContentLength();
    if (contentLength >= 0) {
      response.setHeader(HttpHeaders.CONTENT_LENGTH,Integer.toString(contentLength));
    }
    is=foundResource.openStream();
    streamOut(is,response.getOutputStream(),1024 * 8);
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException swallowed) {
      }
    }
  }
}","private void doGetPublicFile(HttpServletRequest request,HttpServletResponse response,TreeLogger logger,String partialPath,String moduleName) throws IOException {
  String msg=""String_Node_Str"" + partialPath + ""String_Node_Str""+ moduleName+ ""String_Node_Str"";
  logger=logger.branch(TreeLogger.TRACE,msg,null);
  if (autoGenerateResources(request,response,logger,partialPath,moduleName)) {
    return;
  }
  URL foundResource;
  try {
    ModuleDef moduleDef=getModuleDef(logger,moduleName);
    foundResource=moduleDef.findPublicFile(partialPath);
    if (foundResource == null) {
      File moduleDir=new File(getOutputDir(),moduleName);
      File requestedFile=new File(moduleDir,partialPath);
      if (requestedFile.exists()) {
        try {
          foundResource=requestedFile.toURL();
        }
 catch (        MalformedURLException e) {
        }
      }
      if (foundResource == null) {
        msg=""String_Node_Str"" + partialPath;
        logger.log(TreeLogger.WARN,msg,null);
        throw new UnableToCompleteException();
      }
    }
  }
 catch (  UnableToCompleteException e) {
    sendErrorResponse(response,HttpServletResponse.SC_NOT_FOUND,""String_Node_Str"" + partialPath + ""String_Node_Str""+ moduleName+ ""String_Node_Str"");
    return;
  }
  String path=foundResource.toExternalForm();
  String mimeType=null;
  try {
    mimeType=getServletContext().getMimeType(path);
  }
 catch (  UnsupportedOperationException e) {
  }
  if (mimeType == null) {
    mimeType=guessMimeType(path);
    msg=""String_Node_Str"" + mimeType + ""String_Node_Str"";
    logger.log(TreeLogger.TRACE,msg,null);
  }
  maybeIssueXhtmlWarning(logger,mimeType,partialPath);
  boolean infinitelyCacheable=isInfinitelyCacheable(path);
  InputStream is=null;
  try {
    URLConnection conn=foundResource.openConnection();
    long lastModified=conn.getLastModified();
    if (isNotModified(request,lastModified)) {
      response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
      if (infinitelyCacheable) {
        response.setHeader(HttpHeaders.CACHE_CONTROL,HttpHeaders.CACHE_CONTROL_MAXAGE_FOREVER);
      }
      return;
    }
    response.setStatus(HttpServletResponse.SC_OK);
    long now=new Date().getTime();
    response.setHeader(HttpHeaders.DATE,HttpHeaders.toInternetDateFormat(now));
    response.setContentType(mimeType);
    String lastModifiedStr=HttpHeaders.toInternetDateFormat(lastModified);
    response.setHeader(HttpHeaders.LAST_MODIFIED,lastModifiedStr);
    String maxAgeStr;
    if (infinitelyCacheable) {
      maxAgeStr=HttpHeaders.CACHE_CONTROL_MAXAGE_FOREVER;
    }
 else {
      maxAgeStr=HttpHeaders.CACHE_CONTROL_MAXAGE_EXPIRED;
    }
    response.setHeader(HttpHeaders.CACHE_CONTROL,maxAgeStr);
    int contentLength=conn.getContentLength();
    if (contentLength >= 0) {
      response.setHeader(HttpHeaders.CONTENT_LENGTH,Integer.toString(contentLength));
    }
    is=foundResource.openStream();
    streamOut(is,response.getOutputStream(),1024 * 8);
  }
  finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException swallowed) {
      }
    }
  }
}"
83352,"/** 
 * Validates a string not null and not empty. This method ignores leading and trailing whitespace.
 * @param name the name of the value, used in error messages
 * @param value the string value that needs to be validated
 * @throws IllegalArgumentException if the string is empty, or all whitespace
 * @throws NullPointerException if the string is null
 */
public static void throwIfEmptyOrNull(String name,String value){
  assert(name != null);
  assert(name.trim().length() != 0);
  if (null == value) {
    throw new NullPointerException(name + ""String_Node_Str"");
  }
  if (0 == value.trim().length()) {
    throw new IllegalArgumentException(name + ""String_Node_Str"");
  }
}","/** 
 * Throws if <code>value</code> is <code>null</code> or empty. This method ignores leading and trailing whitespace.
 * @param name the name of the value, used in error messages
 * @param value the string value that needs to be validated
 * @throws IllegalArgumentException if the string is empty, or all whitespace
 * @throws NullPointerException if the string is <code>null</code>
 */
public static void throwIfEmptyOrNull(String name,String value){
  assert(name != null);
  assert(name.trim().length() != 0);
  throwIfNull(name,value);
  if (0 == value.trim().length()) {
    throw new IllegalArgumentException(name + ""String_Node_Str"");
  }
}"
83353,"/** 
 * Returns a string where all characters that are not valid for a complete URL have been escaped. The escaping of a character is done by converting it into its UTF-8 encoding and then encoding each of the resulting bytes as a %xx hexadecimal escape sequence. <p> The following character sets are <em>not</em> escaped by this method: <ul> <li>ASCII digits or letters</li> <li>ASCII punctuation characters: <pre> - _ . ! ~ * ' ( ) </pre> </li> <li>URL component delimiter characters: <pre> ; / ? : &amp; = + $ , # </pre> </li> </ul> </p>
 * @param decodedURL a string containing URL characters that may requireencoding
 * @return a string with all invalid URL characters escaped
 */
public static String encode(String decodedURL){
  StringValidator.throwIfEmptyOrNull(""String_Node_Str"",decodedURL);
  return encodeImpl(decodedURL);
}","/** 
 * Returns a string where all characters that are not valid for a complete URL have been escaped. The escaping of a character is done by converting it into its UTF-8 encoding and then encoding each of the resulting bytes as a %xx hexadecimal escape sequence. <p> The following character sets are <em>not</em> escaped by this method: <ul> <li>ASCII digits or letters</li> <li>ASCII punctuation characters: <pre> - _ . ! ~ * ' ( ) </pre> </li> <li>URL component delimiter characters: <pre> ; / ? : &amp; = + $ , # </pre> </li> </ul> </p>
 * @param decodedURL a string containing URL characters that may requireencoding
 * @return a string with all invalid URL characters escaped
 * @throws NullPointerException if decodedURL is <code>null</code>
 */
public static String encode(String decodedURL){
  StringValidator.throwIfNull(""String_Node_Str"",decodedURL);
  return encodeImpl(decodedURL);
}"
83354,"/** 
 * Returns a string where all URL component escape sequences have been converted back to their original character representations.
 * @param encodedURLComponent string containing encoded URL componentsequences
 * @return string with no encoded URL component encoded sequences
 */
public static String decodeComponent(String encodedURLComponent){
  StringValidator.throwIfEmptyOrNull(""String_Node_Str"",encodedURLComponent);
  return decodeComponentImpl(encodedURLComponent);
}","/** 
 * Returns a string where all URL component escape sequences have been converted back to their original character representations.
 * @param encodedURLComponent string containing encoded URL componentsequences
 * @return string with no encoded URL component encoded sequences
 * @throws NullPointerException if encodedURLComponent is <code>null</code>
 */
public static String decodeComponent(String encodedURLComponent){
  StringValidator.throwIfNull(""String_Node_Str"",encodedURLComponent);
  return decodeComponentImpl(encodedURLComponent);
}"
83355,"/** 
 * Returns a string where all characters that are not valid for a URL component have been escaped. The escaping of a character is done by converting it into its UTF-8 encoding and then encoding each of the resulting bytes as a %xx hexadecimal escape sequence. <p> The following character sets are <em>not</em> escaped by this method: <ul> <li>ASCII digits or letters</li> <li>ASCII punctuation characters: <pre>- _ . ! ~ * ' ( )</pre></li> </ul> </p> <p> Notice that this method <em>does</em> encode the URL component delimiter characters:<blockquote> <pre> ; / ? : &amp; = + $ , # </pre> </blockquote> </p>
 * @param decodedURLComponent a string containing invalid URL characters
 * @return a string with all invalid URL characters escaped
 */
public static String encodeComponent(String decodedURLComponent){
  StringValidator.throwIfEmptyOrNull(""String_Node_Str"",decodedURLComponent);
  return encodeComponentImpl(decodedURLComponent);
}","/** 
 * Returns a string where all characters that are not valid for a URL component have been escaped. The escaping of a character is done by converting it into its UTF-8 encoding and then encoding each of the resulting bytes as a %xx hexadecimal escape sequence. <p> The following character sets are <em>not</em> escaped by this method: <ul> <li>ASCII digits or letters</li> <li>ASCII punctuation characters: <pre>- _ . ! ~ * ' ( )</pre></li> </ul> </p> <p> Notice that this method <em>does</em> encode the URL component delimiter characters:<blockquote> <pre> ; / ? : &amp; = + $ , # </pre> </blockquote> </p>
 * @param decodedURLComponent a string containing invalid URL characters
 * @return a string with all invalid URL characters escaped
 * @throws NullPointerException if decodedURLComponent is <code>null</code>
 */
public static String encodeComponent(String decodedURLComponent){
  StringValidator.throwIfNull(""String_Node_Str"",decodedURLComponent);
  return encodeComponentImpl(decodedURLComponent);
}"
83356,"/** 
 * Returns a string where all URL escape sequences have been converted back to their original character representations.
 * @param encodedURL string containing encoded URL encoded sequences
 * @return string with no encoded URL encoded sequences
 */
public static String decode(String encodedURL){
  StringValidator.throwIfEmptyOrNull(""String_Node_Str"",encodedURL);
  return decodeImpl(encodedURL);
}","/** 
 * Returns a string where all URL escape sequences have been converted back to their original character representations.
 * @param encodedURL string containing encoded URL encoded sequences
 * @return string with no encoded URL encoded sequences
 * @throws NullPointerException if encodedURL is <code>null</code>
 */
public static String decode(String encodedURL){
  StringValidator.throwIfNull(""String_Node_Str"",encodedURL);
  return decodeImpl(encodedURL);
}"
83357,"/** 
 * Test method for  {@link com.google.gwt.http.client.URL#encode(java.lang.String)}.
 */
public void testEncode(){
  try {
    URL.encode(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    URL.encode(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  String actualURL=URL.encode(DECODED_URL);
  assertEquals(ENCODED_URL,actualURL);
}","/** 
 * Test method for  {@link com.google.gwt.http.client.URL#encode(java.lang.String)}.
 */
public void testEncode(){
  try {
    URL.encode(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  assertEquals(""String_Node_Str"",URL.encode(""String_Node_Str""));
  assertEquals(""String_Node_Str"",URL.encode(""String_Node_Str""));
  String actualURL=URL.encode(DECODED_URL);
  assertEquals(ENCODED_URL,actualURL);
}"
83358,"/** 
 * Test method for  {@link com.google.gwt.http.client.URL#decode(java.lang.String)}.
 */
public void testDecode(){
  try {
    URL.decode(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    URL.decode(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  String actualURL=URL.decode(ENCODED_URL);
  assertEquals(DECODED_URL,actualURL);
}","/** 
 * Test method for  {@link com.google.gwt.http.client.URL#decode(java.lang.String)}.
 */
public void testDecode(){
  try {
    URL.decode(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  assertEquals(""String_Node_Str"",URL.decode(""String_Node_Str""));
  assertEquals(""String_Node_Str"",URL.decode(""String_Node_Str""));
  String actualURL=URL.decode(ENCODED_URL);
  assertEquals(DECODED_URL,actualURL);
}"
83359,"/** 
 * Test method for  {@link com.google.gwt.http.client.URL#decodeComponent(java.lang.String)}.
 */
public void testDecodeComponent(){
  try {
    URL.decodeComponent(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    URL.decodeComponent(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  String actualURLComponent=URL.decodeComponent(ENCODED_URL_COMPONENT);
  assertEquals(DECODED_URL_COMPONENT,actualURLComponent);
}","/** 
 * Test method for  {@link com.google.gwt.http.client.URL#decodeComponent(java.lang.String)}.
 */
public void testDecodeComponent(){
  try {
    URL.decodeComponent(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  assertEquals(""String_Node_Str"",URL.decodeComponent(""String_Node_Str""));
  assertEquals(""String_Node_Str"",URL.decodeComponent(""String_Node_Str""));
  String actualURLComponent=URL.decodeComponent(ENCODED_URL_COMPONENT);
  assertEquals(DECODED_URL_COMPONENT,actualURLComponent);
}"
83360,"/** 
 * Test method for  {@link com.google.gwt.http.client.URL#encodeComponent(java.lang.String)}.
 */
public void testEncodeComponent(){
  try {
    URL.encodeComponent(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  try {
    URL.encodeComponent(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
  }
  String actualURLComponent=URL.encodeComponent(DECODED_URL_COMPONENT);
  assertEquals(ENCODED_URL_COMPONENT,actualURLComponent);
}","/** 
 * Test method for  {@link com.google.gwt.http.client.URL#encodeComponent(java.lang.String)}.
 */
public void testEncodeComponent(){
  try {
    URL.encodeComponent(null);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException ex) {
  }
  assertEquals(""String_Node_Str"",URL.encodeComponent(""String_Node_Str""));
  assertEquals(""String_Node_Str"",URL.encodeComponent(""String_Node_Str""));
  String actualURLComponent=URL.encodeComponent(DECODED_URL_COMPONENT);
  assertEquals(ENCODED_URL_COMPONENT,actualURLComponent);
}"
83361,"/** 
 * Emits all the script required to set up the module and, in web mode, select a compilation.
 * @param pw
 */
private void genScript(PrintWriter mainPw,String template){
  StringBuffer buf=new StringBuffer(template);
  replaceAll(buf,""String_Node_Str"",moduleFunction);
  replaceAll(buf,""String_Node_Str"",moduleName);
  if (orderedProps != null) {
    int startPos=buf.indexOf(""String_Node_Str"");
    int endPos=buf.indexOf(""String_Node_Str"");
    buf.delete(startPos,endPos);
  }
  int startPos=buf.indexOf(""String_Node_Str"");
  for (Iterator iter=styles.iterator(); iter.hasNext(); ) {
    String style=(String)iter.next();
    String text=cssInjector(style);
    buf.insert(startPos,text);
    startPos+=text.length();
  }
  for (Iterator iter=scripts.iterator(); iter.hasNext(); ) {
    Script script=(Script)iter.next();
    String text=scriptInjector(script.getSrc());
    buf.insert(startPos,text);
    startPos+=text.length();
  }
{
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    genPropProviders(pw);
    pw.close();
    String stuff=sw.toString();
    startPos=buf.indexOf(""String_Node_Str"");
    buf.insert(startPos,stuff);
  }
{
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    if (orderedProps != null) {
      if (orderedProps.length > 0) {
        pw.println();
        genAnswers(pw);
        pw.println();
        pw.print(""String_Node_Str"");
        genPropValues(pw);
      }
 else {
        assert(orderedProps.length == 0);
        Set entrySet=propertyValuesSetByStrongName.entrySet();
        assert(entrySet.size() == 1);
        Map.Entry entry=(Entry)entrySet.iterator().next();
        String strongName=(String)entry.getKey();
        pw.print(""String_Node_Str"" + literal(strongName));
      }
      pw.println(""String_Node_Str"");
    }
    pw.close();
    String stuff=sw.toString();
    startPos=buf.indexOf(""String_Node_Str"");
    buf.insert(startPos,stuff);
  }
  mainPw.print(buf.toString());
}","/** 
 * Emits all the script required to set up the module and, in web mode, select a compilation.
 * @param pw
 */
private void genScript(PrintWriter mainPw,String template){
  StringBuffer buf=new StringBuffer(template);
  replaceAll(buf,""String_Node_Str"",moduleFunction);
  replaceAll(buf,""String_Node_Str"",moduleName);
  if (orderedProps != null) {
    int startPos=buf.indexOf(""String_Node_Str"");
    int endPos=buf.indexOf(""String_Node_Str"");
    buf.delete(startPos,endPos);
  }
  int startPos=buf.indexOf(""String_Node_Str"");
  for (Iterator iter=styles.iterator(); iter.hasNext(); ) {
    String style=(String)iter.next();
    String text=cssInjector(style);
    buf.insert(startPos,text);
    startPos+=text.length();
  }
  for (Iterator iter=scripts.iterator(); iter.hasNext(); ) {
    Script script=(Script)iter.next();
    String text=scriptInjector(script.getSrc());
    buf.insert(startPos,text);
    startPos+=text.length();
  }
{
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    genPropProviders(pw);
    pw.close();
    String stuff=sw.toString();
    startPos=buf.indexOf(""String_Node_Str"");
    buf.insert(startPos,stuff);
  }
{
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    if (orderedProps != null) {
      if (propertyValuesSetByStrongName.size() > 1) {
        pw.println();
        genAnswers(pw);
        pw.println();
        pw.print(""String_Node_Str"");
        genPropValues(pw);
      }
 else {
        Set entrySet=propertyValuesSetByStrongName.entrySet();
        assert(entrySet.size() == 1);
        Map.Entry entry=(Entry)entrySet.iterator().next();
        String strongName=(String)entry.getKey();
        pw.print(""String_Node_Str"" + literal(strongName));
      }
      pw.println(""String_Node_Str"");
    }
    pw.close();
    String stuff=sw.toString();
    startPos=buf.indexOf(""String_Node_Str"");
    buf.insert(startPos,stuff);
  }
  mainPw.print(buf.toString());
}"
83362,"JMethodCall processSuperConstructorCall(ExplicitConstructorCall x){
  SourceInfo info=makeSourceInfo(x);
  JMethod ctor=(JMethod)typeMap.get(x.binding);
  JExpression trueQualifier=createThisRef(info,currentClass);
  JMethodCall call=new JMethodCall(program,info,trueQualifier,ctor);
  ReferenceBinding superClass=x.binding.declaringClass;
  if (superClass instanceof NestedTypeBinding && !superClass.isStatic()) {
    NestedTypeBinding myBinding=(NestedTypeBinding)currentClassScope.referenceType().binding;
    NestedTypeBinding superBinding=(NestedTypeBinding)superClass;
    if (superBinding.enclosingInstances != null) {
      JExpression qualifier=dispProcessExpression(x.qualification);
      for (int j=0; j < superBinding.enclosingInstances.length; ++j) {
        SyntheticArgumentBinding arg=superBinding.enclosingInstances[j];
        JClassType classType=(JClassType)typeMap.get(arg.type);
        if (qualifier == null) {
          List workList=new ArrayList();
          Iterator paramIt=currentMethod.params.iterator();
          for (int i=0; i < myBinding.enclosingInstances.length; ++i) {
            workList.add(createVariableRef(info,(JParameter)paramIt.next()));
          }
          call.getArgs().add(createThisRef(classType,workList));
        }
 else {
          call.getArgs().add(createThisRef(classType,qualifier));
        }
      }
    }
    if (superBinding.outerLocalVariables != null) {
      for (int j=0; j < superBinding.outerLocalVariables.length; ++j) {
        SyntheticArgumentBinding arg=superBinding.outerLocalVariables[j];
        JType varType=(JType)typeMap.get(arg.type);
        String varName=String.valueOf(arg.name);
        JParameter param=null;
        for (int i=0; i < currentMethod.params.size(); ++i) {
          JParameter paramIt=(JParameter)currentMethod.params.get(i);
          if (varType == paramIt.getType() && varName.equals(paramIt.getName())) {
            param=paramIt;
          }
        }
        if (param == null) {
          throw new InternalCompilerException(""String_Node_Str"");
        }
        call.getArgs().add(createVariableRef(info,param));
      }
    }
  }
  if (x.arguments != null) {
    for (int i=0, n=x.arguments.length; i < n; ++i) {
      call.getArgs().add(dispProcessExpression(x.arguments[i]));
    }
  }
  return call;
}","JMethodCall processSuperConstructorCall(ExplicitConstructorCall x){
  SourceInfo info=makeSourceInfo(x);
  JMethod ctor=(JMethod)typeMap.get(x.binding);
  JExpression trueQualifier=createThisRef(info,currentClass);
  JMethodCall call=new JMethodCall(program,info,trueQualifier,ctor);
  if (x.arguments != null) {
    for (int i=0, n=x.arguments.length; i < n; ++i) {
      call.getArgs().add(dispProcessExpression(x.arguments[i]));
    }
  }
  ReferenceBinding superClass=x.binding.declaringClass;
  if (superClass instanceof NestedTypeBinding && !superClass.isStatic()) {
    NestedTypeBinding myBinding=(NestedTypeBinding)currentClassScope.referenceType().binding;
    NestedTypeBinding superBinding=(NestedTypeBinding)superClass;
    if (superBinding.enclosingInstances != null) {
      JExpression qualifier=dispProcessExpression(x.qualification);
      for (int j=0; j < superBinding.enclosingInstances.length; ++j) {
        SyntheticArgumentBinding arg=superBinding.enclosingInstances[j];
        JClassType classType=(JClassType)typeMap.get(arg.type);
        if (qualifier == null) {
          List workList=new ArrayList();
          Iterator paramIt=getSyntheticsIterator(currentMethod);
          for (int i=0; i < myBinding.enclosingInstances.length; ++i) {
            workList.add(createVariableRef(info,(JParameter)paramIt.next()));
          }
          call.getArgs().add(createThisRef(classType,workList));
        }
 else {
          call.getArgs().add(createThisRef(classType,qualifier));
        }
      }
    }
    if (superBinding.outerLocalVariables != null) {
      for (int j=0; j < superBinding.outerLocalVariables.length; ++j) {
        SyntheticArgumentBinding arg=superBinding.outerLocalVariables[j];
        JType varType=(JType)typeMap.get(arg.type);
        String varName=String.valueOf(arg.name);
        JParameter param=null;
        for (int i=0; i < currentMethod.params.size(); ++i) {
          JParameter paramIt=(JParameter)currentMethod.params.get(i);
          if (varType == paramIt.getType() && varName.equals(paramIt.getName())) {
            param=paramIt;
          }
        }
        if (param == null) {
          throw new InternalCompilerException(""String_Node_Str"");
        }
        call.getArgs().add(createVariableRef(info,param));
      }
    }
  }
  return call;
}"
83363,"JMethodCall processThisConstructorCall(ExplicitConstructorCall x){
  SourceInfo info=makeSourceInfo(x);
  JMethod ctor=(JMethod)typeMap.get(x.binding);
  JExpression trueQualifier=createThisRef(info,currentClass);
  JMethodCall call=new JMethodCall(program,info,trueQualifier,ctor);
  ReferenceBinding declaringClass=x.binding.declaringClass;
  if (declaringClass instanceof NestedTypeBinding) {
    Iterator paramIt=currentMethod.params.iterator();
    NestedTypeBinding nestedBinding=(NestedTypeBinding)declaringClass;
    if (nestedBinding.enclosingInstances != null) {
      for (int i=0; i < nestedBinding.enclosingInstances.length; ++i) {
        call.getArgs().add(createVariableRef(info,(JParameter)paramIt.next()));
      }
    }
    if (nestedBinding.outerLocalVariables != null) {
      for (int i=0; i < nestedBinding.outerLocalVariables.length; ++i) {
        call.getArgs().add(createVariableRef(info,(JParameter)paramIt.next()));
      }
    }
  }
  assert(x.qualification == null);
  if (x.arguments != null) {
    for (int i=0, n=x.arguments.length; i < n; ++i) {
      call.getArgs().add(dispProcessExpression(x.arguments[i]));
    }
  }
  return call;
}","JMethodCall processThisConstructorCall(ExplicitConstructorCall x){
  SourceInfo info=makeSourceInfo(x);
  JMethod ctor=(JMethod)typeMap.get(x.binding);
  JExpression trueQualifier=createThisRef(info,currentClass);
  JMethodCall call=new JMethodCall(program,info,trueQualifier,ctor);
  assert(x.qualification == null);
  if (x.arguments != null) {
    for (int i=0, n=x.arguments.length; i < n; ++i) {
      call.getArgs().add(dispProcessExpression(x.arguments[i]));
    }
  }
  ReferenceBinding declaringClass=x.binding.declaringClass;
  if (declaringClass instanceof NestedTypeBinding) {
    Iterator paramIt=getSyntheticsIterator(currentMethod);
    NestedTypeBinding nestedBinding=(NestedTypeBinding)declaringClass;
    if (nestedBinding.enclosingInstances != null) {
      for (int i=0; i < nestedBinding.enclosingInstances.length; ++i) {
        call.getArgs().add(createVariableRef(info,(JParameter)paramIt.next()));
      }
    }
    if (nestedBinding.outerLocalVariables != null) {
      for (int i=0; i < nestedBinding.outerLocalVariables.length; ++i) {
        call.getArgs().add(createVariableRef(info,(JParameter)paramIt.next()));
      }
    }
  }
  return call;
}"
83364,"/** 
 * Weird: we used to have JConstructor (and JConstructorCall) in our AST, but we got rid of them completely and instead model them as instance methods whose qualifier is a naked no-argument new operation. There are several reasons we do it this way: 1) When spitting our AST back to Java code (for verification purposes), we found it was impossible to correctly emulate nested classes as non-nested classes using traditional constructor syntax. It boiled down to the fact that you really HAVE to assign your synthetic arguments to your synthetic fields BEFORE calling your superclass constructor (because it might call you back polymorphically). And trying to do that in straight Java is a semantic error, a super call must be the first statement of your constructor. 2) It's a lot more like how we'll be generating JavaScript eventually. 3) It's a lot easier to optimize; the same optimizations work on our synthetic fields as work on any user fields. In fact, once we're past AST generation, we throw away all information about what's synthetic. The order of emulation is: - assign all synthetic fields from synthetic args - call our super constructor emulation method - call our instance initializer emulation method - run user code - return this
 */
void processConstructor(ConstructorDeclaration x){
  JMethod ctor=(JMethod)typeMap.get(x.binding);
  try {
    SourceInfo info=ctor.body.getSourceInfo();
    currentMethod=ctor;
    currentMethodScope=x.scope;
    JMethodCall call=null;
    ExplicitConstructorCall ctorCall=x.constructorCall;
    if (ctorCall != null) {
      call=(JMethodCall)dispatch(""String_Node_Str"",ctorCall);
    }
    boolean hasExplicitThis=(ctorCall != null) && !ctorCall.isSuperAccess();
    JClassType enclosingType=(JClassType)ctor.getEnclosingType();
    JMethod clinitMethod=(JMethod)enclosingType.methods.get(0);
    JMethodCall clinitCall=new JMethodCall(program,info,null,clinitMethod);
    ctor.body.statements.add(new JExpressionStatement(program,info,clinitCall));
    if (!hasExplicitThis) {
      ReferenceBinding declaringClass=x.binding.declaringClass;
      if (declaringClass instanceof NestedTypeBinding) {
        Iterator paramIt=ctor.params.iterator();
        NestedTypeBinding nestedBinding=(NestedTypeBinding)declaringClass;
        if (nestedBinding.enclosingInstances != null) {
          for (int i=0; i < nestedBinding.enclosingInstances.length; ++i) {
            SyntheticArgumentBinding arg=nestedBinding.enclosingInstances[i];
            JParameter param=(JParameter)paramIt.next();
            if (arg.matchingField != null) {
              JField field=(JField)typeMap.get(arg);
              ctor.body.statements.add(program.createAssignmentStmt(info,createVariableRef(info,field),createVariableRef(info,param)));
            }
          }
        }
        if (nestedBinding.outerLocalVariables != null) {
          for (int i=0; i < nestedBinding.outerLocalVariables.length; ++i) {
            SyntheticArgumentBinding arg=nestedBinding.outerLocalVariables[i];
            JParameter param=(JParameter)paramIt.next();
            JField field=(JField)typeMap.get(arg);
            ctor.body.statements.add(program.createAssignmentStmt(info,createVariableRef(info,field),createVariableRef(info,param)));
          }
        }
      }
    }
    if (call != null) {
      ctor.body.statements.add(new JExpressionStatement(program,makeSourceInfo(ctorCall),call));
    }
    JExpression thisRef=createThisRef(info,enclosingType);
    if (!hasExplicitThis) {
      JMethod initMethod=(JMethod)enclosingType.methods.get(1);
      JMethodCall initCall=new JMethodCall(program,info,thisRef,initMethod);
      ctor.body.statements.add(new JExpressionStatement(program,info,initCall));
    }
    if (x.statements != null) {
      for (int i=0, n=x.statements.length; i < n; ++i) {
        Statement origStmt=x.statements[i];
        JStatement jstmt=dispProcessStatement(origStmt);
        if (jstmt != null) {
          ctor.body.statements.add(jstmt);
        }
      }
    }
    currentMethodScope=null;
    currentMethod=null;
    ctor.body.statements.add(new JReturnStatement(program,null,thisRef));
  }
 catch (  Throwable e) {
    throw translateException(ctor,e);
  }
}","/** 
 * Weird: we used to have JConstructor (and JConstructorCall) in our AST, but we got rid of them completely and instead model them as instance methods whose qualifier is a naked no-argument new operation. There are several reasons we do it this way: 1) When spitting our AST back to Java code (for verification purposes), we found it was impossible to correctly emulate nested classes as non-nested classes using traditional constructor syntax. It boiled down to the fact that you really HAVE to assign your synthetic arguments to your synthetic fields BEFORE calling your superclass constructor (because it might call you back polymorphically). And trying to do that in straight Java is a semantic error, a super call must be the first statement of your constructor. 2) It's a lot more like how we'll be generating JavaScript eventually. 3) It's a lot easier to optimize; the same optimizations work on our synthetic fields as work on any user fields. In fact, once we're past AST generation, we throw away all information about what's synthetic. The order of emulation is: - assign all synthetic fields from synthetic args - call our super constructor emulation method - call our instance initializer emulation method - run user code - return this
 */
void processConstructor(ConstructorDeclaration x){
  JMethod ctor=(JMethod)typeMap.get(x.binding);
  try {
    SourceInfo info=ctor.body.getSourceInfo();
    currentMethod=ctor;
    currentMethodScope=x.scope;
    JMethodCall call=null;
    ExplicitConstructorCall ctorCall=x.constructorCall;
    if (ctorCall != null) {
      call=(JMethodCall)dispatch(""String_Node_Str"",ctorCall);
    }
    boolean hasExplicitThis=(ctorCall != null) && !ctorCall.isSuperAccess();
    JClassType enclosingType=(JClassType)ctor.getEnclosingType();
    JMethod clinitMethod=(JMethod)enclosingType.methods.get(0);
    JMethodCall clinitCall=new JMethodCall(program,info,null,clinitMethod);
    ctor.body.statements.add(new JExpressionStatement(program,info,clinitCall));
    if (!hasExplicitThis) {
      ReferenceBinding declaringClass=x.binding.declaringClass;
      if (declaringClass instanceof NestedTypeBinding) {
        Iterator paramIt=getSyntheticsIterator(ctor);
        NestedTypeBinding nestedBinding=(NestedTypeBinding)declaringClass;
        if (nestedBinding.enclosingInstances != null) {
          for (int i=0; i < nestedBinding.enclosingInstances.length; ++i) {
            SyntheticArgumentBinding arg=nestedBinding.enclosingInstances[i];
            JParameter param=(JParameter)paramIt.next();
            if (arg.matchingField != null) {
              JField field=(JField)typeMap.get(arg);
              ctor.body.statements.add(program.createAssignmentStmt(info,createVariableRef(info,field),createVariableRef(info,param)));
            }
          }
        }
        if (nestedBinding.outerLocalVariables != null) {
          for (int i=0; i < nestedBinding.outerLocalVariables.length; ++i) {
            SyntheticArgumentBinding arg=nestedBinding.outerLocalVariables[i];
            JParameter param=(JParameter)paramIt.next();
            JField field=(JField)typeMap.get(arg);
            ctor.body.statements.add(program.createAssignmentStmt(info,createVariableRef(info,field),createVariableRef(info,param)));
          }
        }
      }
    }
    if (call != null) {
      ctor.body.statements.add(new JExpressionStatement(program,makeSourceInfo(ctorCall),call));
    }
    JExpression thisRef=createThisRef(info,enclosingType);
    if (!hasExplicitThis) {
      JMethod initMethod=(JMethod)enclosingType.methods.get(1);
      JMethodCall initCall=new JMethodCall(program,info,thisRef,initMethod);
      ctor.body.statements.add(new JExpressionStatement(program,info,initCall));
    }
    if (x.statements != null) {
      for (int i=0, n=x.statements.length; i < n; ++i) {
        Statement origStmt=x.statements[i];
        JStatement jstmt=dispProcessStatement(origStmt);
        if (jstmt != null) {
          ctor.body.statements.add(jstmt);
        }
      }
    }
    currentMethodScope=null;
    currentMethod=null;
    ctor.body.statements.add(new JReturnStatement(program,null,thisRef));
  }
 catch (  Throwable e) {
    throw translateException(ctor,e);
  }
}"
83365,"/** 
 * Retrieves the JUnitShell. This should only be invoked during TestRunner execution of JUnit tests.
 */
private static JUnitShell getUnitTestShell(){
  if (unitTestShell == null) {
    JUnitShell shell=new JUnitShell();
    String[] args=shell.synthesizeArgs();
    if (!shell.processArgs(args)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    shell.messageQueue=new JUnitMessageQueue(shell.numClients);
    if (!shell.startUp()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    shell.report=new BenchmarkReport(shell.getTopLogger());
    unitTestShell=shell;
    Runtime.getRuntime().addShutdownHook(new Thread(shell.new Shutdown()));
  }
  return unitTestShell;
}","/** 
 * Retrieves the JUnitShell. This should only be invoked during TestRunner execution of JUnit tests.
 */
private static JUnitShell getUnitTestShell(){
  if (unitTestShell == null) {
    BootStrapPlatform.go();
    JUnitShell shell=new JUnitShell();
    String[] args=shell.synthesizeArgs();
    if (!shell.processArgs(args)) {
      throw new RuntimeException(""String_Node_Str"");
    }
    shell.messageQueue=new JUnitMessageQueue(shell.numClients);
    if (!shell.startUp()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    shell.report=new BenchmarkReport(shell.getTopLogger());
    unitTestShell=shell;
    Runtime.getRuntime().addShutdownHook(new Thread(shell.new Shutdown()));
  }
  return unitTestShell;
}"
83366,"/** 
 * Constructs a JavaScript program object.
 */
public JsProgram(){
  rootScope=new JsRootScope(this);
  globalBlock=new JsGlobalBlock();
  topScope=new JsScope(rootScope,""String_Node_Str"");
  objectScope=new JsScope(rootScope,""String_Node_Str"");
  JsName debugger=rootScope.findExistingName(""String_Node_Str"");
  debuggerStmt=new JsExprStmt(debugger.makeRef());
}","/** 
 * Constructs a JavaScript program object.
 */
public JsProgram(){
  rootScope=new JsRootScope(this);
  globalBlock=new JsGlobalBlock();
  topScope=new JsScope(rootScope,""String_Node_Str"");
  objectScope=new JsScope(rootScope,""String_Node_Str"");
}"
83367,"/** 
 * Attempts to find an unobfuscatable name object for the specified ident, searching in this scope, and if not found, in the parent scopes.
 * @return <code>null</code> if the identifier has no associated name
 */
public final JsName findExistingUnobfuscatableName(String ident){
  JsName name=findExistingNameNoRecurse(ident);
  if (name != null && name.isObfuscatable()) {
    name=null;
  }
  if (name == null && parent != null) {
    return parent.findExistingUnobfuscatableName(ident);
  }
  return name;
}","/** 
 * Attempts to find an unobfuscatable name object for the specified ident, searching in this scope, and if not found, in the parent scopes.
 * @return <code>null</code> if the identifier has no associated name
 */
public final JsName findExistingUnobfuscatableName(String ident){
  ident=maybeMangleKeyword(ident);
  JsName name=findExistingNameNoRecurse(ident);
  if (name != null && name.isObfuscatable()) {
    name=null;
  }
  if (name == null && parent != null) {
    return parent.findExistingUnobfuscatableName(ident);
  }
  return name;
}"
83368,"/** 
 * Attempts to find the name object for the specified ident, searching in this scope, and if not found, in the parent scopes.
 * @return <code>null</code> if the identifier has no associated name
 */
public final JsName findExistingName(String ident){
  JsName name=findExistingNameNoRecurse(ident);
  if (name == null && parent != null) {
    return parent.findExistingName(ident);
  }
  return name;
}","/** 
 * Attempts to find the name object for the specified ident, searching in this scope, and if not found, in the parent scopes.
 * @return <code>null</code> if the identifier has no associated name
 */
public final JsName findExistingName(String ident){
  ident=maybeMangleKeyword(ident);
  JsName name=findExistingNameNoRecurse(ident);
  if (name == null && parent != null) {
    return parent.findExistingName(ident);
  }
  return name;
}"
83369,"/** 
 * Gets a name object associated with the specified ident in this scope, creating it if necessary.
 * @param ident An identifier that is unique within this scope.
 * @param shortIdent A ""pretty"" name that does not have to be unique.
 * @throws IllegalArgumentException if ident already exists in this scope butthe requested short name does not match the existing short name.
 */
public JsName declareName(String ident,String shortIdent){
  JsName name=findExistingNameNoRecurse(ident);
  if (name != null) {
    if (!name.getShortIdent().equals(shortIdent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + shortIdent + ""String_Node_Str""+ name.getShortIdent()+ ""String_Node_Str""+ ident);
    }
    return name;
  }
  if (JsKeywords.isKeyword(ident)) {
    throw new IllegalArgumentException(""String_Node_Str"" + ident + ""String_Node_Str"");
  }
  return doCreateName(ident,shortIdent);
}","/** 
 * Gets a name object associated with the specified ident in this scope, creating it if necessary.
 * @param ident An identifier that is unique within this scope.
 * @param shortIdent A ""pretty"" name that does not have to be unique.
 * @throws IllegalArgumentException if ident already exists in this scope butthe requested short name does not match the existing short name.
 */
public JsName declareName(String ident,String shortIdent){
  ident=maybeMangleKeyword(ident);
  shortIdent=maybeMangleKeyword(shortIdent);
  JsName name=findExistingNameNoRecurse(ident);
  if (name != null) {
    if (!name.getShortIdent().equals(shortIdent)) {
      throw new IllegalArgumentException(""String_Node_Str"" + shortIdent + ""String_Node_Str""+ name.getShortIdent()+ ""String_Node_Str""+ ident);
    }
    return name;
  }
  return doCreateName(ident,shortIdent);
}"
83370,"protected void doAccept(JsCollection collection){
  for (Iterator it=collection.iterator(); it.hasNext(); ) {
    doTraverse((JsNode)it.next(),UNMODIFIABLE_CONTEXT);
  }
}","protected JsNode doAccept(JsNode node){
  doTraverse(node,UNMODIFIABLE_CONTEXT);
  return node;
}"
83371,"public final void accept(JsCollection collection){
  doAccept(collection);
}","public final JsStatement accept(JsStatement node){
  return (JsStatement)doAccept(node);
}"
83372,"/** 
 * Returns an iterator containing all the widgets in this table.
 * @return the iterator
 */
public Iterator iterator(){
  return widgetMap.values().iterator();
}","/** 
 * Returns an iterator containing all the widgets in this table.
 * @return the iterator
 */
public Iterator iterator(){
  return widgetMap.widgetIterator();
}"
83373,"/** 
 * Sets the widget within the specified cell. <p> Inherited implementations may either throw IndexOutOfBounds exception if the cell does not exist, or allocate a new cell to store the content. </p> <p> FlexTable will automatically allocate the cell at the correct location and then set the widget. Grid will set the widget if and only if the cell is within the Grid's bounding box. </p>
 * @param widget The widget to be added
 * @param row the cell's row
 * @param column the cell's column
 * @throws IndexOutOfBoundsException
 */
public void setWidget(int row,int column,Widget widget){
  prepareCell(row,column);
  if (widget != null) {
    widget.removeFromParent();
    Element td=cleanCell(row,column,true);
    String hash=Integer.toString(widget.hashCode());
    Element e=widget.getElement();
    DOM.setElementProperty(e,HASH_ATTR,hash);
    widgetMap.put(hash,widget);
    adopt(widget,td);
  }
}","/** 
 * Sets the widget within the specified cell. <p> Inherited implementations may either throw IndexOutOfBounds exception if the cell does not exist, or allocate a new cell to store the content. </p> <p> FlexTable will automatically allocate the cell at the correct location and then set the widget. Grid will set the widget if and only if the cell is within the Grid's bounding box. </p>
 * @param widget The widget to be added
 * @param row the cell's row
 * @param column the cell's column
 * @throws IndexOutOfBoundsException
 */
public void setWidget(int row,int column,Widget widget){
  prepareCell(row,column);
  if (widget != null) {
    widget.removeFromParent();
    Element td=cleanCell(row,column,true);
    widgetMap.putWidget(widget);
    adopt(widget,td);
  }
}"
83374,"/** 
 * Gets the Widget associated with the element.
 * @param widgetElement widget's element
 * @return the widget
 */
private Widget getWidget(Element widgetElement){
  Object key=computeKeyForElement(widgetElement);
  if (key != null) {
    Widget widget=(Widget)widgetMap.get(key);
    assert(widget != null);
    return widget;
  }
 else {
    return null;
  }
}","/** 
 * Gets the widget in the specified cell.
 * @param row the cell's row
 * @param column the cell's column
 * @return the widget in the specified cell, or <code>null</code> if none ispresent
 * @throws IndexOutOfBoundsException
 */
public Widget getWidget(int row,int column){
  checkCellBounds(row,column);
  return widgetMap.getWidget(row,column);
}"
83375,"/** 
 * Remove the specified widget from the table.
 * @param widget widget to remove
 * @return was the widget removed from the table.
 */
public boolean remove(Widget widget){
  if (widget.getParent() != this) {
    return false;
  }
  removeWidget(widget);
  return true;
}","/** 
 * Remove the specified widget from the table.
 * @param widget widget to remove
 * @return was the widget removed from the table.
 */
public boolean remove(Widget widget){
  if (widget.getParent() != this) {
    return false;
  }
  widgetMap.removeWidgetByElement(widget.getElement());
  disown(widget);
  return true;
}"
83376,"/** 
 * Does actual clearing, used by clearCell and cleanCell. All HTMLTable methods should use internalClearCell rather than clearCell, as clearCell may be overridden in subclasses to format an empty cell.
 * @param td element to clear
 * @param clearInnerHTML should the cell's inner html be cleared?
 * @return returns whether a widget was cleared
 */
protected boolean internalClearCell(Element td,boolean clearInnerHTML){
  Element maybeChild=DOM.getFirstChild(td);
  Widget widget=null;
  if (maybeChild != null) {
    widget=getWidget(maybeChild);
  }
  if (widget != null) {
    removeWidget(widget);
    return true;
  }
 else {
    if (clearInnerHTML) {
      DOM.setInnerHTML(td,""String_Node_Str"");
    }
    return false;
  }
}","/** 
 * Does actual clearing, used by clearCell and cleanCell. All HTMLTable methods should use internalClearCell rather than clearCell, as clearCell may be overridden in subclasses to format an empty cell.
 * @param td element to clear
 * @param clearInnerHTML should the cell's inner html be cleared?
 * @return returns whether a widget was cleared
 */
protected boolean internalClearCell(Element td,boolean clearInnerHTML){
  Element maybeChild=DOM.getFirstChild(td);
  Widget widget=null;
  if (maybeChild != null) {
    widget=widgetMap.getWidget(maybeChild);
  }
  if (widget != null) {
    remove(widget);
    return true;
  }
 else {
    if (clearInnerHTML) {
      DOM.setInnerHTML(td,""String_Node_Str"");
    }
    return false;
  }
}"
83377,"public ColumnFormatter getColumnFormatter(){
  return columnFormatter;
}","/** 
 * Gets the column formatter.
 * @return the column formatter
 */
public ColumnFormatter getColumnFormatter(){
  return columnFormatter;
}"
83378,"/** 
 * Removes all widgets from this table, but does not remove other HTML or text contents of cells.
 */
public void clear(){
  for (int row=0; row < getRowCount(); ++row) {
    for (int col=0; col < getCellCount(row); ++col) {
      Widget child=getWidget(row,col);
      if (child != null) {
        removeWidget(child);
      }
    }
  }
  assert(widgetMap.size() == 0);
}","/** 
 * Removes all widgets from this table, but does not remove other HTML or text contents of cells.
 */
public void clear(){
  for (int row=0; row < getRowCount(); ++row) {
    for (int col=0; col < getCellCount(row); ++col) {
      Widget child=widgetMap.getWidget(row,col);
      if (child != null) {
        remove(child);
      }
    }
  }
}"
83379,"/** 
 * Determine whether one element is equal to, or the child of, another.
 * @param parent the potential parent element
 * @param child the potential child element
 * @return <code>true</code> if the relationship holds
 */
public static boolean isOrHasChild(Element parent,Element child){
  return impl.isOrHasChild(parent,child);
}","/** 
 * Determine whether one element is equal to, or the child of, another.
 * @param parent the potential parent element
 * @param child the potential child element
 * @return <code>true</code> if the relationship holds
 * @see #compare(Element,Element)
 */
public static boolean isOrHasChild(Element parent,Element child){
  return impl.isOrHasChild(parent,child);
}"
83380,"/** 
 * Compares two elements for equality (note that reference equality is not sufficient to determine equality among elements on most browsers).
 * @param elem1 the first element to be compared
 * @param elem2 the second element to be compared
 * @return <code>true</code> if they are in fact the same element
 */
public static boolean compare(Element elem1,Element elem2){
  return impl.compare(elem1,elem2);
}","/** 
 * Compares two elements for equality (note that reference equality is not sufficient to determine equality among elements on most browsers).
 * @param elem1 the first element to be compared
 * @param elem2 the second element to be compared
 * @return <code>true</code> if they are in fact the same element
 * @see #isOrHasChild(Element,Element)
 */
public static boolean compare(Element elem1,Element elem2){
  return impl.compare(elem1,elem2);
}"
83381,"/** 
 * This method is called when a widget is detached from the browser's document. Overridden because of IE bug that throws away checked state.
 */
protected void onDetach(){
  setChecked(isChecked());
  super.onDetach();
}","/** 
 * This method is called when a widget is detached from the browser's document. Overridden because of IE bug that throws away checked state and in order to clear the event listener off of the <code>inputElem</code>.
 */
protected void onDetach(){
  DOM.setEventListener(inputElem,null);
  setChecked(isChecked());
  super.onDetach();
}"
83382,"protected CheckBox(Element elem){
  super(DOM.createSpan());
  inputElem=elem;
  labelElem=DOM.createLabel();
  DOM.sinkEvents(inputElem,Event.FOCUSEVENTS | Event.ONCLICK | DOM.getEventsSunk(inputElem));
  DOM.appendChild(getElement(),inputElem);
  DOM.appendChild(getElement(),labelElem);
  String uid=""String_Node_Str"" + (++uniqueId);
  DOM.setElementProperty(inputElem,""String_Node_Str"",uid);
  DOM.setElementProperty(labelElem,""String_Node_Str"",uid);
}","protected CheckBox(Element elem){
  super(DOM.createSpan());
  inputElem=elem;
  labelElem=DOM.createLabel();
  DOM.sinkEvents(inputElem,DOM.getEventsSunk(this.getElement()));
  DOM.sinkEvents(this.getElement(),0);
  DOM.appendChild(getElement(),inputElem);
  DOM.appendChild(getElement(),labelElem);
  String uid=""String_Node_Str"" + (++uniqueId);
  DOM.setElementProperty(inputElem,""String_Node_Str"",uid);
  DOM.setElementProperty(labelElem,""String_Node_Str"",uid);
}"
83383,"public void process(CompilationUnitDeclaration cud,int index){
{
    this.parser.getMethodBodies(cud);
    if (cud.scope != null) {
      cud.scope.faultInTypes();
    }
    if (cud.scope != null) {
      cud.scope.verifyMethods(lookupEnvironment.methodVerifier());
    }
    cud.resolve();
    cud.analyseCode();
    if (doGenerateBytes) {
      cud.generateCode();
    }
    if (options.produceReferenceInfo && cud.scope != null) {
      cud.scope.storeDependencyInfo();
    }
    cud.compilationResult.totalUnitsKnown=totalUnits;
  }
  ICompilationUnit cu=cud.compilationResult.compilationUnit;
  String loc=String.valueOf(cu.getFileName());
  TreeLogger logger=threadLogger.branch(TreeLogger.SPAM,""String_Node_Str"" + loc,null);
  String[] typeNames;
  try {
    typeNames=doFindAdditionalTypesUsingJsni(logger,cud);
  }
 catch (  UnableToCompleteException e) {
    problemReporter.abortDueToInternalError(""String_Node_Str"",cud);
    return;
  }
  for (int i=0; i < typeNames.length; i++) {
    String typeName=typeNames[i];
    final String msg=""String_Node_Str"" + typeName + ""String_Node_Str"";
    logger.log(TreeLogger.SPAM,msg,null);
    char[][] chars=CharOperation.splitOn('.',typeName.toCharArray());
    lookupEnvironment.getType(chars);
  }
  try {
    typeNames=doFindAdditionalTypesUsingRebinds(logger,cud);
  }
 catch (  UnableToCompleteException e) {
    problemReporter.abortDueToInternalError(""String_Node_Str"",cud);
    return;
  }
  for (int i=0; i < typeNames.length; i++) {
    String typeName=typeNames[i];
    final String msg=""String_Node_Str"" + typeName + ""String_Node_Str"";
    logger.log(TreeLogger.SPAM,msg,null);
    ReferenceBinding type=resolvePossiblyNestedType(typeName);
    if (type == null) {
      problemReporter.abortDueToInternalError(""String_Node_Str"" + typeName + ""String_Node_Str"");
      return;
    }
    if (!type.isClass()) {
      problemReporter.abortDueToInternalError(""String_Node_Str"" + typeName + ""String_Node_Str"");
      return;
    }
    if (type.isAbstract()) {
      problemReporter.abortDueToInternalError(""String_Node_Str"" + typeName + ""String_Node_Str"");
      return;
    }
    if (type.isNestedType() && !type.isStatic()) {
      problemReporter.abortDueToInternalError(""String_Node_Str"" + typeName + ""String_Node_Str"");
      return;
    }
    if (type.isLocalType()) {
      problemReporter.abortDueToInternalError(""String_Node_Str"" + typeName + ""String_Node_Str"");
      return;
    }
    MethodBinding noArgCtor=type.getExactMethod(""String_Node_Str"".toCharArray(),TypeBinding.NoParameters,cud.scope);
    if (noArgCtor == null) {
      problemReporter.abortDueToInternalError(""String_Node_Str"" + typeName + ""String_Node_Str"");
      return;
    }
  }
  if (cuds != null) {
    cuds.add(cud);
  }
}","public void process(CompilationUnitDeclaration cud,int index){
{
    this.parser.getMethodBodies(cud);
    if (cud.scope != null) {
      cud.scope.faultInTypes();
    }
    if (cud.scope != null) {
      cud.scope.verifyMethods(lookupEnvironment.methodVerifier());
    }
    cud.resolve();
    cud.analyseCode();
    if (doGenerateBytes) {
      cud.generateCode();
    }
    if (options.produceReferenceInfo && cud.scope != null) {
      cud.scope.storeDependencyInfo();
    }
    cud.compilationResult.totalUnitsKnown=totalUnits;
  }
  ICompilationUnit cu=cud.compilationResult.compilationUnit;
  String loc=String.valueOf(cu.getFileName());
  TreeLogger logger=threadLogger.branch(TreeLogger.SPAM,""String_Node_Str"" + loc,null);
  String[] typeNames=doFindAdditionalTypesUsingJsni(logger,cud);
  for (int i=0; i < typeNames.length; i++) {
    String typeName=typeNames[i];
    final String msg=""String_Node_Str"" + typeName + ""String_Node_Str"";
    logger.log(TreeLogger.SPAM,msg,null);
    char[][] chars=CharOperation.splitOn('.',typeName.toCharArray());
    lookupEnvironment.getType(chars);
  }
  typeNames=doFindAdditionalTypesUsingRebinds(logger,cud);
  for (int i=0; i < typeNames.length; i++) {
    String typeName=typeNames[i];
    final String msg=""String_Node_Str"" + typeName + ""String_Node_Str"";
    logger.log(TreeLogger.SPAM,msg,null);
    ReferenceBinding type=resolvePossiblyNestedType(typeName);
  }
  if (cuds != null) {
    cuds.add(cud);
  }
}"
83384,"protected String[] doFindAdditionalTypesUsingRebinds(TreeLogger logger,CompilationUnitDeclaration cud) throws UnableToCompleteException {
  return Empty.STRINGS;
}","protected String[] doFindAdditionalTypesUsingRebinds(TreeLogger logger,CompilationUnitDeclaration cud){
  return Empty.STRINGS;
}"
83385,"protected String[] doFindAdditionalTypesUsingJsni(TreeLogger logger,CompilationUnitDeclaration cud) throws UnableToCompleteException {
  return Empty.STRINGS;
}","protected String[] doFindAdditionalTypesUsingJsni(TreeLogger logger,CompilationUnitDeclaration cud){
  return Empty.STRINGS;
}"
83386,"private ReferenceBinding resolvePossiblyNestedType(String typeName){
  ReferenceBinding type=null;
  int p=typeName.indexOf('$');
  if (p > 0) {
    String cupName=typeName.substring(0,p);
    char[][] chars=CharOperation.splitOn('.',cupName.toCharArray());
    if (lookupEnvironment.getType(chars) != null) {
      chars=CharOperation.splitOn('.',typeName.toCharArray());
      type=lookupEnvironment.getCachedType(chars);
      if (type == null) {
        return null;
      }
    }
  }
 else {
    char[][] chars=CharOperation.splitOn('.',typeName.toCharArray());
    type=lookupEnvironment.getType(chars);
  }
  if (type != null) {
    return type;
  }
  p=typeName.lastIndexOf('.');
  if (p >= 0) {
    typeName=typeName.substring(0,p) + ""String_Node_Str"" + typeName.substring(p + 1);
    return resolvePossiblyNestedType(typeName);
  }
  return null;
}","protected ReferenceBinding resolvePossiblyNestedType(String typeName){
  return compiler.resolvePossiblyNestedType(typeName);
}"
83387,"public void endVisit(MessageSend messageSend,BlockScope scope){
  final ProblemReporter problemReporter=scope.problemReporter();
  if (messageSend.binding == null) {
    return;
  }
  String methodName=String.valueOf(messageSend.selector);
  if (!methodName.equals(REBIND_MAGIC_METHOD)) {
    return;
  }
  char[][] targetClass=messageSend.binding.declaringClass.compoundName;
  String targetClassName=CharOperation.toString(targetClass);
  if (!targetClassName.equals(REBIND_MAGIC_CLASS)) {
    return;
  }
  Expression[] args=messageSend.arguments;
  if (args.length != 1) {
    problemReporter.abortDueToInternalError(""String_Node_Str"",messageSend);
    return;
  }
  Expression arg=args[0];
  if (!(arg instanceof ClassLiteralAccess)) {
    problemReporter.abortDueToInternalError(""String_Node_Str"",messageSend);
    return;
  }
  ClassLiteralAccess cla=(ClassLiteralAccess)arg;
  String typeName=String.valueOf(cla.targetType.readableName());
  results.add(typeName);
}","public void endVisit(MessageSend messageSend,BlockScope scope){
  final ProblemReporter problemReporter=scope.problemReporter();
  if (messageSend.binding == null) {
    return;
  }
  String methodName=String.valueOf(messageSend.selector);
  if (!methodName.equals(REBIND_MAGIC_METHOD)) {
    return;
  }
  char[][] targetClass=messageSend.binding.declaringClass.compoundName;
  String targetClassName=CharOperation.toString(targetClass);
  if (!targetClassName.equals(REBIND_MAGIC_CLASS)) {
    return;
  }
  DeferredBindingSite site=new DeferredBindingSite(messageSend,scope);
  Expression[] args=messageSend.arguments;
  if (args.length != 1) {
    reportRebindProblem(site,""String_Node_Str"");
    return;
  }
  Expression arg=args[0];
  if (!(arg instanceof ClassLiteralAccess)) {
    reportRebindProblem(site,""String_Node_Str"");
    return;
  }
  ClassLiteralAccess cla=(ClassLiteralAccess)arg;
  String typeName=String.valueOf(cla.targetType.readableName());
  if (!results.containsKey(typeName)) {
    results.put(typeName,site);
  }
}"
83388,"public FindDeferredBindingSitesVisitor(Set results){
  this.results=results;
}","public FindDeferredBindingSitesVisitor(Map requestedTypes){
  this.results=requestedTypes;
}"
83389,"/** 
 * Pull in types implicitly referenced through rebind answers.
 */
protected String[] doFindAdditionalTypesUsingRebinds(TreeLogger logger,CompilationUnitDeclaration cud) throws UnableToCompleteException {
  Set dependentTypeNames=new HashSet();
  Set requestedTypes=new HashSet();
  FindDeferredBindingSitesVisitor v=new FindDeferredBindingSitesVisitor(requestedTypes);
  cud.traverse(v,cud.scope);
  for (Iterator iter=requestedTypes.iterator(); iter.hasNext(); ) {
    String reqType=(String)iter.next();
    String[] resultTypes=rebindPermOracle.getAllPossibleRebindAnswers(getLogger(),reqType);
    Util.addAll(dependentTypeNames,resultTypes);
  }
  return (String[])dependentTypeNames.toArray(Empty.STRINGS);
}","/** 
 * Pull in types implicitly referenced through rebind answers.
 */
protected String[] doFindAdditionalTypesUsingRebinds(TreeLogger logger,CompilationUnitDeclaration cud){
  Set dependentTypeNames=new HashSet();
  Map requestedTypes=new HashMap();
  FindDeferredBindingSitesVisitor v=new FindDeferredBindingSitesVisitor(requestedTypes);
  cud.traverse(v,cud.scope);
  for (Iterator iter=requestedTypes.keySet().iterator(); iter.hasNext(); ) {
    String reqType=(String)iter.next();
    DeferredBindingSite site=(DeferredBindingSite)requestedTypes.get(reqType);
    try {
      String[] resultTypes=rebindPermOracle.getAllPossibleRebindAnswers(getLogger(),reqType);
      for (int i=0; i < resultTypes.length; ++i) {
        String typeName=resultTypes[i];
        ReferenceBinding type=resolvePossiblyNestedType(typeName);
        if (type == null) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,""String_Node_Str"" + typeName + ""String_Node_Str"");
          continue;
        }
        if (!type.isClass()) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,""String_Node_Str"" + typeName + ""String_Node_Str"");
          continue;
        }
        if (type.isAbstract()) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,""String_Node_Str"" + typeName + ""String_Node_Str"");
          continue;
        }
        if (type.isNestedType() && !type.isStatic()) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,""String_Node_Str"" + typeName + ""String_Node_Str"");
          continue;
        }
        if (type.isLocalType()) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,""String_Node_Str"" + typeName + ""String_Node_Str"");
          continue;
        }
        MethodBinding noArgCtor=type.getExactMethod(""String_Node_Str"".toCharArray(),TypeBinding.NoParameters,cud.scope);
        if (noArgCtor == null) {
          FindDeferredBindingSitesVisitor.reportRebindProblem(site,""String_Node_Str"" + typeName + ""String_Node_Str"");
          continue;
        }
        dependentTypeNames.add(typeName);
      }
      Util.addAll(dependentTypeNames,resultTypes);
    }
 catch (    UnableToCompleteException e) {
      FindDeferredBindingSitesVisitor.reportRebindProblem(site,""String_Node_Str"" + reqType + ""String_Node_Str"");
    }
  }
  return (String[])dependentTypeNames.toArray(Empty.STRINGS);
}"
83390,"/** 
 * Pull in types referenced only via JSNI.
 */
protected String[] doFindAdditionalTypesUsingJsni(TreeLogger logger,CompilationUnitDeclaration cud) throws UnableToCompleteException {
  Set dependentTypeNames=new HashSet();
  FindJsniRefVisitor v=new FindJsniRefVisitor(dependentTypeNames);
  cud.traverse(v,cud.scope);
  return (String[])dependentTypeNames.toArray(Empty.STRINGS);
}","/** 
 * Pull in types referenced only via JSNI.
 */
protected String[] doFindAdditionalTypesUsingJsni(TreeLogger logger,CompilationUnitDeclaration cud){
  Set dependentTypeNames=new HashSet();
  FindJsniRefVisitor v=new FindJsniRefVisitor(dependentTypeNames);
  cud.traverse(v,cud.scope);
  return (String[])dependentTypeNames.toArray(Empty.STRINGS);
}"
83391,"/** 
 * Displays a request for information in a modal dialog box, along with the standard 'OK' and 'Cancel' buttons.
 * @param msg the message to be displayed
 * @param initialValue the initial value in the dialog's text field
 * @return the value entered by the user if 'OK' was pressed, or<code>null</code> if 'Cancel' was pressed
 */
public static native String prompt(String msg,String defaultValue);","/** 
 * Displays a request for information in a modal dialog box, along with the standard 'OK' and 'Cancel' buttons.
 * @param msg the message to be displayed
 * @param initialValue the initial value in the dialog's text field
 * @return the value entered by the user if 'OK' was pressed, or<code>null</code> if 'Cancel' was pressed
 */
public static native String prompt(String msg,String initialValue);"
83392,"public static void sort(Object[] x,Comparator s){
  nativeSort(x,x.length,s);
}","public static void sort(Object[] x,Comparator s){
  nativeSort(x,x.length,s != null ? s : natural);
}"
83393,static native JavaScriptObject loadCookies();,static native void loadCookies(HashMap m);
83394,"private static native void setCookie(String name,String value,long expires,String domain,String path,boolean secure);","/** 
 * Sets a cookie.
 * @param name the cookie's name
 * @param value the cookie's value
 * @param expires when the cookie expires
 * @param domain the domain to be associated with this cookie
 * @param path the path to be associated with this cookie
 * @param secure <code>true</code> to make this a secure cookie
 */
public static void setCookie(String name,String value,Date expires,String domain,String path,boolean secure){
  setCookieImpl(name,value,expires.toGMTString(),domain,path,secure);
}"
83395,"/** 
 * Gets the cookie associated with the given key.
 * @param key the key of the cookie to be retrieved
 * @return the cookie's value.
 */
public static native String getCookie(String key);","/** 
 * Gets the cookie associated with the given name.
 * @param name the name of the cookie to be retrieved
 * @return the cookie's value
 */
public static String getCookie(String name){
  Map cookiesMap=ensureCookies();
  return (String)cookiesMap.get(name);
}"
83396,"JStatement processStatement(WhileStatement x){
  Constant cst=x.condition.optimizedBooleanConstant();
  if (cst != Constant.NotAConstant) {
    if (!cst.booleanValue()) {
      return null;
    }
  }
  SourceInfo info=makeSourceInfo(x);
  JExpression loopTest=dispProcessExpression(x.condition);
  JStatement loopBody=dispProcessStatement(x.action);
  JWhileStatement stmt=new JWhileStatement(program,info,loopTest,loopBody);
  return stmt;
}","JStatement processStatement(WhileStatement x){
  boolean removeBody=isOptimizedFalse(x.condition);
  SourceInfo info=makeSourceInfo(x);
  JExpression loopTest=dispProcessExpression(x.condition);
  JStatement loopBody=removeBody ? null : dispProcessStatement(x.action);
  JWhileStatement stmt=new JWhileStatement(program,info,loopTest,loopBody);
  return stmt;
}"
83397,"public void testDeadCode(){
  while (returnFalse()) {
    break;
  }
  do {
    break;
  }
 while (false);
  do {
    break;
  }
 while (returnFalse());
  for (; returnFalse(); ) {
  }
  boolean check=false;
  for (check=true; returnFalse(); fail()) {
    fail();
  }
  assertTrue(check);
  if (returnFalse()) {
    fail();
  }
 else {
  }
  if (!returnFalse()) {
  }
 else {
    fail();
  }
}","public void testDeadCode(){
  while (returnFalse()) {
    break;
  }
  do {
    break;
  }
 while (false);
  do {
    break;
  }
 while (returnFalse());
  for (; returnFalse(); ) {
  }
  boolean check=false;
  for (check=true; returnFalse(); fail()) {
    fail();
  }
  assertTrue(check);
  if (returnFalse()) {
    fail();
  }
 else {
  }
  if (!returnFalse()) {
  }
 else {
    fail();
  }
  boolean b=false;
  if ((b=true) ? true : true) {
  }
  assertTrue(b);
  boolean c=true;
  int val=0;
  for (val=1; c=false; ++val) {
  }
  assertFalse(c);
  boolean d=true;
  while (d=false) {
  }
  assertFalse(d);
  boolean e=true;
  if (true | (e=false)) {
  }
  assertFalse(e);
}"
83398,"private void onSelection(TreeItem item,boolean fireEvents){
  if (item == root) {
    return;
  }
  if (curSelection != null) {
    curSelection.setSelected(false);
  }
  curSelection=item;
  if (curSelection != null) {
    moveFocus(curSelection);
    curSelection.setSelected(true);
    if (fireEvents && (listeners != null)) {
      listeners.fireItemSelected(curSelection);
    }
  }
}","private void onSelection(TreeItem item,boolean fireEvents,boolean moveFocus){
  if (item == root) {
    return;
  }
  if (curSelection != null) {
    curSelection.setSelected(false);
  }
  curSelection=item;
  if (moveFocus && curSelection != null) {
    moveFocus(curSelection);
    curSelection.setSelected(true);
    if (fireEvents && (listeners != null)) {
      listeners.fireItemSelected(curSelection);
    }
  }
}"
83399,"public void onBrowserEvent(Event event){
  int eventType=DOM.eventGetType(event);
switch (eventType) {
case Event.ONCLICK:
{
      Element e=DOM.eventGetTarget(event);
      if (shouldTreeDelegateFocusToElement(e)) {
      }
 else {
        setFocus(true);
      }
      break;
    }
case Event.ONMOUSEDOWN:
{
    if (mouseListeners != null) {
      mouseListeners.fireMouseEvent(this,event);
    }
    elementClicked(root,DOM.eventGetTarget(event));
    break;
  }
case Event.ONMOUSEUP:
{
  if (mouseListeners != null) {
    mouseListeners.fireMouseEvent(this,event);
  }
  break;
}
case Event.ONMOUSEMOVE:
{
if (mouseListeners != null) {
  mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONMOUSEOVER:
{
if (mouseListeners != null) {
mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONMOUSEOUT:
{
if (mouseListeners != null) {
mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONFOCUS:
if (focusListeners != null) {
focusListeners.fireFocusEvent(this,event);
}
break;
case Event.ONBLUR:
{
if (focusListeners != null) {
focusListeners.fireFocusEvent(this,event);
}
break;
}
case Event.ONKEYDOWN:
if (curSelection == null) {
if (root.getChildCount() > 0) {
onSelection(root.getChild(0),true);
}
super.onBrowserEvent(event);
return;
}
if (lastEventType == Event.ONKEYDOWN) {
return;
}
switch (DOM.eventGetKeyCode(event)) {
case KeyboardListener.KEY_UP:
{
moveSelectionUp(curSelection);
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_DOWN:
{
moveSelectionDown(curSelection,true);
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_LEFT:
{
if (curSelection.getState()) {
curSelection.setState(false);
}
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_RIGHT:
{
if (!curSelection.getState()) {
curSelection.setState(true);
}
DOM.eventPreventDefault(event);
break;
}
}
case Event.ONKEYUP:
if (eventType == Event.ONKEYUP) {
if (DOM.eventGetKeyCode(event) == KeyboardListener.KEY_TAB) {
Vector chain=new Vector();
collectElementChain(chain,getElement(),DOM.eventGetTarget(event));
TreeItem item=findItemByChain(chain,0,root);
if (item != getSelectedItem()) {
setSelectedItem(item,true);
}
}
}
case Event.ONKEYPRESS:
{
if (keyboardListeners != null) {
keyboardListeners.fireKeyboardEvent(this,event);
}
break;
}
}
super.onBrowserEvent(event);
lastEventType=eventType;
}","public void onBrowserEvent(Event event){
  int eventType=DOM.eventGetType(event);
switch (eventType) {
case Event.ONCLICK:
{
      Element e=DOM.eventGetTarget(event);
      if (shouldTreeDelegateFocusToElement(e)) {
      }
 else {
        setFocus(true);
      }
      break;
    }
case Event.ONMOUSEDOWN:
{
    if (mouseListeners != null) {
      mouseListeners.fireMouseEvent(this,event);
    }
    elementClicked(root,DOM.eventGetTarget(event));
    break;
  }
case Event.ONMOUSEUP:
{
  if (mouseListeners != null) {
    mouseListeners.fireMouseEvent(this,event);
  }
  break;
}
case Event.ONMOUSEMOVE:
{
if (mouseListeners != null) {
  mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONMOUSEOVER:
{
if (mouseListeners != null) {
mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONMOUSEOUT:
{
if (mouseListeners != null) {
mouseListeners.fireMouseEvent(this,event);
}
break;
}
case Event.ONFOCUS:
if (focusListeners != null) {
focusListeners.fireFocusEvent(this,event);
}
break;
case Event.ONBLUR:
{
if (focusListeners != null) {
focusListeners.fireFocusEvent(this,event);
}
break;
}
case Event.ONKEYDOWN:
if (curSelection == null) {
if (root.getChildCount() > 0) {
onSelection(root.getChild(0),true,true);
}
super.onBrowserEvent(event);
return;
}
if (lastEventType == Event.ONKEYDOWN) {
return;
}
switch (DOM.eventGetKeyCode(event)) {
case KeyboardListener.KEY_UP:
{
moveSelectionUp(curSelection);
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_DOWN:
{
moveSelectionDown(curSelection,true);
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_LEFT:
{
if (curSelection.getState()) {
curSelection.setState(false);
}
DOM.eventPreventDefault(event);
break;
}
case KeyboardListener.KEY_RIGHT:
{
if (!curSelection.getState()) {
curSelection.setState(true);
}
DOM.eventPreventDefault(event);
break;
}
}
case Event.ONKEYUP:
if (eventType == Event.ONKEYUP) {
if (DOM.eventGetKeyCode(event) == KeyboardListener.KEY_TAB) {
Vector chain=new Vector();
collectElementChain(chain,getElement(),DOM.eventGetTarget(event));
TreeItem item=findItemByChain(chain,0,root);
if (item != getSelectedItem()) {
setSelectedItem(item,true);
}
}
}
case Event.ONKEYPRESS:
{
if (keyboardListeners != null) {
keyboardListeners.fireKeyboardEvent(this,event);
}
break;
}
}
super.onBrowserEvent(event);
lastEventType=eventType;
}"
83400,"private boolean elementClicked(TreeItem root,Element hElem){
  Vector chain=new Vector();
  collectElementChain(chain,getElement(),hElem);
  TreeItem item=findItemByChain(chain,0,root);
  if (item != null) {
    if (DOM.compare(item.getImageElement(),hElem)) {
      item.setState(!item.getState(),true);
      return true;
    }
 else     if (DOM.isOrHasChild(item.getElement(),hElem)) {
      onSelection(item,true);
      return true;
    }
  }
  return false;
}","private boolean elementClicked(TreeItem root,Element hElem){
  Vector chain=new Vector();
  collectElementChain(chain,getElement(),hElem);
  TreeItem item=findItemByChain(chain,0,root);
  if (item != null) {
    if (DOM.compare(item.getImageElement(),hElem)) {
      item.setState(!item.getState(),true);
      return true;
    }
 else     if (DOM.isOrHasChild(item.getElement(),hElem)) {
      onSelection(item,true,!shouldTreeDelegateFocusToElement(hElem));
      return true;
    }
  }
  return false;
}"
83401,"/** 
 * Moves the selected item up one.
 */
private void moveSelectionUp(TreeItem sel){
  TreeItem parent=sel.getParentItem();
  if (parent == null) {
    parent=root;
  }
  int idx=parent.getChildIndex(sel);
  if (idx > 0) {
    TreeItem sibling=parent.getChild(idx - 1);
    onSelection(findDeepestOpenChild(sibling),true);
  }
 else {
    onSelection(parent,true);
  }
}","/** 
 * Moves the selected item up one.
 */
private void moveSelectionUp(TreeItem sel){
  TreeItem parent=sel.getParentItem();
  if (parent == null) {
    parent=root;
  }
  int idx=parent.getChildIndex(sel);
  if (idx > 0) {
    TreeItem sibling=parent.getChild(idx - 1);
    onSelection(findDeepestOpenChild(sibling),true,true);
  }
 else {
    onSelection(parent,true,true);
  }
}"
83402,"/** 
 * Selects a specified item.
 * @param item the item to be selected, or <code>null</code> to deselect allitems
 * @param fireEvents <code>true</code> to allow selection events to be fired
 */
public void setSelectedItem(TreeItem item,boolean fireEvents){
  if (item == null) {
    if (curSelection == null) {
      return;
    }
    curSelection.setSelected(false);
    curSelection=null;
    return;
  }
  onSelection(item,fireEvents);
}","/** 
 * Selects a specified item.
 * @param item the item to be selected, or <code>null</code> to deselect allitems
 * @param fireEvents <code>true</code> to allow selection events to be fired
 */
public void setSelectedItem(TreeItem item,boolean fireEvents){
  if (item == null) {
    if (curSelection == null) {
      return;
    }
    curSelection.setSelected(false);
    curSelection=null;
    return;
  }
  onSelection(item,fireEvents,true);
}"
83403,"/** 
 * Moves to the next item, going into children as if dig is enabled.
 */
private void moveSelectionDown(TreeItem sel,boolean dig){
  if (sel == root) {
    return;
  }
  TreeItem parent=sel.getParentItem();
  if (parent == null) {
    parent=root;
  }
  int idx=parent.getChildIndex(sel);
  if (!dig || !sel.getState()) {
    if (idx < parent.getChildCount() - 1) {
      onSelection(parent.getChild(idx + 1),true);
    }
 else {
      moveSelectionDown(parent,false);
    }
  }
 else   if (sel.getChildCount() > 0) {
    onSelection(sel.getChild(0),true);
  }
}","/** 
 * Moves to the next item, going into children as if dig is enabled.
 */
private void moveSelectionDown(TreeItem sel,boolean dig){
  if (sel == root) {
    return;
  }
  TreeItem parent=sel.getParentItem();
  if (parent == null) {
    parent=root;
  }
  int idx=parent.getChildIndex(sel);
  if (!dig || !sel.getState()) {
    if (idx < parent.getChildCount() - 1) {
      onSelection(parent.getChild(idx + 1),true,true);
    }
 else {
      moveSelectionDown(parent,false);
    }
  }
 else   if (sel.getChildCount() > 0) {
    onSelection(sel.getChild(0),true,true);
  }
}"
83404,"public static int digit(char c,int radix){
  if (radix < MIN_RADIX || radix > MAX_RADIX) {
    return -1;
  }
  if (c >= '0' && c <= '9') {
    return c - '0';
  }
 else   if (c >= 'a' && c < ('a' + radix - 10)) {
    return c - 'a' + 10;
  }
 else   if (c >= 'A' && c < ('A' + radix - 10)) {
    return c - 'A' + 10;
  }
  return -1;
}","public static int digit(char c,int radix){
  if (radix < MIN_RADIX || radix > MAX_RADIX) {
    return -1;
  }
  if (c >= '0' && c < '0' + Math.min(radix,10)) {
    return c - '0';
  }
  if (c >= 'a' && c < (radix + 'a' - 10)) {
    return c - 'a' + 10;
  }
  if (c >= 'A' && c < (radix + 'A' - 10)) {
    return c - 'A' + 10;
  }
  return -1;
}"
83405,public abstract char change(char c);,"public char change(char c){
  return Character.toUpperCase(c);
}"
83406,"/** 
 * Sets module name so that javascript compiler can operate 
 */
public String getModuleName(){
  return ""String_Node_Str"";
}","public String getModuleName(){
  return ""String_Node_Str"";
}"
83407,"public static void testToFromDigit(){
  for (int i=0; i < 16; i++) {
    assertEquals(i,Character.digit(Character.forDigit(i,16),16));
  }
  assertEquals(1,Character.digit('1',10));
  assertEquals('9',Character.forDigit(9,10));
  assertEquals(-1,Character.digit('A',10));
}","public void testToFromDigit(){
  for (int i=0; i < 16; i++) {
    assertEquals(i,Character.digit(Character.forDigit(i,16),16));
  }
  assertEquals(1,Character.digit('1',10));
  assertEquals('9',Character.forDigit(9,10));
  assertEquals(-1,Character.digit('7',6));
  assertEquals(-1,Character.digit('8',8));
  assertEquals(-1,Character.digit('A',10));
}"
83408,"private void generateAsynchronousProxyMethod(SourceWriter w,JMethod method){
  JType returnType=method.getReturnType();
  JParameter[] params=method.getParameters();
  w.println();
  w.print(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
  int i;
  for (i=0; i < params.length; i++) {
    JParameter param=params[i];
    w.print((i > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + getJavaTypeName(param.getType()) + ""String_Node_Str""+ param.getName());
  }
  w.println((i > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + AsyncCallback.class.getName() + ""String_Node_Str"");
  w.indent();
  w.println(""String_Node_Str"" + SERIALIZATION_STREAM_READER_INSTANTIATION);
  w.println(""String_Node_Str"" + SERIALIZATION_STREAM_WRITER_INSTANTIATION);
  w.println(""String_Node_Str"");
  w.indent();
{
    w.print(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
    for (i=0; i < params.length; i++) {
      w.print(""String_Node_Str"" + params[i].getName());
    }
    w.println(""String_Node_Str"");
  }
  w.outdent();
  w.println(""String_Node_Str"" + SerializationException.class.getName() + ""String_Node_Str"");
  w.indentln(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str"");
  w.indentln(""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.println(ResponseTextHandler.class.getName() + ""String_Node_Str"" + ResponseTextHandler.class.getName()+ ""String_Node_Str"");
  w.indent();
{
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
    }
    w.outdent();
    w.println(""String_Node_Str"");
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
    }
    w.outdent();
    w.println(""String_Node_Str"");
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"");
          w.print(""String_Node_Str"");
          JPrimitiveType primitive=returnType.isPrimitive();
          if (primitive == JPrimitiveType.VOID) {
            w.print(""String_Node_Str"");
          }
 else {
            if (primitive != null) {
              w.print(""String_Node_Str"");
              w.print(getObjectWrapperName(primitive));
              w.print(""String_Node_Str"");
              generateDecodeCall(w,returnType);
              w.print(""String_Node_Str"");
            }
 else {
              generateDecodeCall(w,returnType);
            }
          }
          w.println(""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"");
          w.println(""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
    }
    w.outdent();
    w.println(""String_Node_Str"");
  }
  w.outdent();
  w.println(""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.indentln(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str"");
  w.outdent();
  w.println(""String_Node_Str"");
}","private void generateAsynchronousProxyMethod(SourceWriter w,JMethod method){
  JType returnType=method.getReturnType();
  JParameter[] params=method.getParameters();
  NameFactory nameFactory=new NameFactory();
  for (int i=0; i < params.length; ++i) {
    nameFactory.addName(params[i].getName());
  }
  w.println();
  w.print(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
  int i;
  for (i=0; i < params.length; i++) {
    JParameter param=params[i];
    w.print((i > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + getJavaTypeName(param.getType()) + ""String_Node_Str""+ param.getName());
  }
  w.println((i > 0 ? ""String_Node_Str"" : ""String_Node_Str"") + AsyncCallback.class.getName() + ""String_Node_Str"");
  w.indent();
  w.println(""String_Node_Str"" + SERIALIZATION_STREAM_READER_INSTANTIATION);
  w.println(""String_Node_Str"" + SERIALIZATION_STREAM_WRITER_INSTANTIATION);
  w.println(""String_Node_Str"");
  w.indent();
{
    w.print(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
    for (i=0; i < params.length; i++) {
      w.print(""String_Node_Str"" + params[i].getName());
    }
    w.println(""String_Node_Str"");
  }
  w.outdent();
  String exceptionName=nameFactory.createName(""String_Node_Str"");
  w.println(""String_Node_Str"" + SerializationException.class.getName() + ""String_Node_Str""+ exceptionName+ ""String_Node_Str"");
  w.indentln(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str""+ exceptionName+ ""String_Node_Str"");
  w.indentln(""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.println(ResponseTextHandler.class.getName() + ""String_Node_Str"" + ResponseTextHandler.class.getName()+ ""String_Node_Str"");
  w.indent();
{
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
    }
    w.outdent();
    w.println(""String_Node_Str"");
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
    }
    w.outdent();
    w.println(""String_Node_Str"");
    w.println(""String_Node_Str"");
    w.indent();
{
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"");
          w.print(""String_Node_Str"");
          JPrimitiveType primitive=returnType.isPrimitive();
          if (primitive == JPrimitiveType.VOID) {
            w.print(""String_Node_Str"");
          }
 else {
            if (primitive != null) {
              w.print(""String_Node_Str"");
              w.print(getObjectWrapperName(primitive));
              w.print(""String_Node_Str"");
              generateDecodeCall(w,returnType);
              w.print(""String_Node_Str"");
            }
 else {
              generateDecodeCall(w,returnType);
            }
          }
          w.println(""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"");
          w.println(""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
        w.indent();
{
          w.println(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str"");
        }
        w.outdent();
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
      w.println(""String_Node_Str"");
      w.indent();
{
        w.println(""String_Node_Str"");
      }
      w.outdent();
    }
    w.outdent();
    w.println(""String_Node_Str"");
  }
  w.outdent();
  w.println(""String_Node_Str"");
  w.println(""String_Node_Str"");
  w.indentln(""String_Node_Str"" + InvocationException.class.getName() + ""String_Node_Str"");
  w.outdent();
  w.println(""String_Node_Str"");
}"
83409,"public static int digit(char c,int radix){
  if (radix < MIN_RADIX || radix > MAX_RADIX) {
    return -1;
  }
  if (c >= '0' && c <= '9') {
    return c - '0';
  }
 else   if (c >= 'a' && c < ('a' + radix)) {
    return c - 'a';
  }
 else   if (c >= 'A' && c < ('A' + radix)) {
    return c - 'A';
  }
  return -1;
}","public static int digit(char c,int radix){
  if (radix < MIN_RADIX || radix > MAX_RADIX) {
    return -1;
  }
  if (c >= '0' && c <= '9') {
    return c - '0';
  }
 else   if (c >= 'a' && c < ('a' + radix - 10)) {
    return c - 'a' + 10;
  }
 else   if (c >= 'A' && c < ('A' + radix - 10)) {
    return c - 'A' + 10;
  }
  return -1;
}"
83410,"public static void testToFromDigit(){
  for (int i=0; i < 16; i++) {
    assertEquals(i,Character.digit(Character.forDigit(i,16),16));
  }
  assertEquals(1,Character.digit('1',10));
  assertEquals('9',Character.forDigit(9,10));
}","public static void testToFromDigit(){
  for (int i=0; i < 16; i++) {
    assertEquals(i,Character.digit(Character.forDigit(i,16),16));
  }
  assertEquals(1,Character.digit('1',10));
  assertEquals('9',Character.forDigit(9,10));
  assertEquals(-1,Character.digit('A',10));
}"
83411,"/** 
 * This method tests <code>append</code>.
 */
public void testAppend(){
  StringBuffer x=new StringBuffer();
  x.append(C.FLOAT_VALUE);
  assertTrue(x.toString().startsWith(C.FLOAT_STRING));
  x=new StringBuffer();
  x.append(C.INT_VALUE);
  assertEquals(C.INT_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.LONG_VALUE);
  assertTrue(x.toString().startsWith(C.LONG_STRING));
  x=new StringBuffer();
  x.append(C.DOUBLE_VALUE);
  assertTrue(x.toString().startsWith(C.DOUBLE_STRING));
  x=new StringBuffer();
  x.append(C.CHAR_VALUE);
  assertEquals(C.CHAR_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.CHAR_ARRAY_VALUE);
  assertEquals(C.CHAR_ARRAY_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.CHAR_ARRAY_VALUE,1,4);
  assertEquals(C.CHAR_ARRAY_STRING.substring(1,5),x.toString());
  x=new StringBuffer();
  x.append(C.FALSE_VALUE);
  assertEquals(C.FALSE_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.TRUE_VALUE);
  assertEquals(C.TRUE_STRING,x.toString());
}","/** 
 * This method tests <code>append</code>.
 */
public void testAppend(){
  StringBuffer x=new StringBuffer();
  x.append(C.FLOAT_VALUE);
  assertTrue(x.toString().startsWith(C.FLOAT_STRING));
  x=new StringBuffer();
  x.append(C.INT_VALUE);
  assertEquals(C.INT_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.LONG_VALUE);
  assertTrue(x.toString().startsWith(C.LONG_STRING));
  x=new StringBuffer();
  x.append(C.DOUBLE_VALUE);
  assertTrue(x.toString().startsWith(C.DOUBLE_STRING));
  x=new StringBuffer();
  x.append(C.CHAR_VALUE);
  assertEquals(C.CHAR_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.CHAR_ARRAY_VALUE);
  assertEquals(C.CHAR_ARRAY_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.CHAR_ARRAY_VALUE,1,4);
  assertEquals(C.CHAR_ARRAY_STRING.substring(1,5),x.toString());
  x=new StringBuffer();
  x.append(C.FALSE_VALUE);
  assertEquals(C.FALSE_STRING,x.toString());
  x=new StringBuffer();
  x.append(C.TRUE_VALUE);
  assertEquals(C.TRUE_STRING,x.toString());
  x=new StringBuffer();
  x.append((String)null);
  assertEquals(""String_Node_Str"",x.toString());
}"
83412,"/** 
 * Tests correctness under repeated insertion and append.
 */
public void testRepeatedAppendsAndInserts(){
  StringBuffer x=new StringBuffer();
  final int SIZE=1000;
  for (int i=0; i < SIZE; i++) {
    x.append(""String_Node_Str"" + i % 10);
  }
  assertTrue(""String_Node_Str"",x.toString().endsWith(""String_Node_Str""));
  assertTrue(""String_Node_Str"",x.toString().startsWith(""String_Node_Str""));
  assertEquals(x.length(),SIZE);
  x=new StringBuffer();
  for (int i=0; i < SIZE * 4; i++) {
    x.append(""String_Node_Str"" + i % 10);
  }
  assertTrue(""String_Node_Str"",x.toString().endsWith(""String_Node_Str""));
  assertTrue(""String_Node_Str"",x.toString().startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",x.length(),SIZE * 4);
  x=new StringBuffer();
  for (int i=0; i < SIZE; i++) {
    x.insert(0,""String_Node_Str"" + i % 10);
  }
  assertTrue(""String_Node_Str"",x.toString().endsWith(""String_Node_Str""));
  assertTrue(""String_Node_Str"",x.toString().startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",x.length(),SIZE);
  x=new StringBuffer();
  for (int i=0; i < SIZE * 4; i++) {
    x.insert(0,""String_Node_Str"" + i % 10);
  }
  assertTrue(""String_Node_Str"",x.toString().endsWith(""String_Node_Str""));
  assertTrue(""String_Node_Str"",x.toString().startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",x.length(),SIZE * 4);
}","/** 
 * Tests correctness under repeated insertion and append.
 */
public void testRepeatedAppendsAndInserts(){
  StringBuffer x=new StringBuffer();
  final int size=1000;
  for (int i=0; i < size; i++) {
    x.append(""String_Node_Str"" + i % 10);
  }
  assertTrue(""String_Node_Str"",x.toString().endsWith(""String_Node_Str""));
  assertTrue(""String_Node_Str"",x.toString().startsWith(""String_Node_Str""));
  assertEquals(x.length(),size);
  x=new StringBuffer();
  for (int i=0; i < size * 4; i++) {
    x.append(""String_Node_Str"" + i % 10);
  }
  assertTrue(""String_Node_Str"",x.toString().endsWith(""String_Node_Str""));
  assertTrue(""String_Node_Str"",x.toString().startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",x.length(),size * 4);
  x=new StringBuffer();
  for (int i=0; i < size; i++) {
    x.insert(0,""String_Node_Str"" + i % 10);
  }
  assertTrue(""String_Node_Str"",x.toString().endsWith(""String_Node_Str""));
  assertTrue(""String_Node_Str"",x.toString().startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",x.length(),size);
  x=new StringBuffer();
  for (int i=0; i < size * 4; i++) {
    x.insert(0,""String_Node_Str"" + i % 10);
  }
  assertTrue(""String_Node_Str"",x.toString().endsWith(""String_Node_Str""));
  assertTrue(""String_Node_Str"",x.toString().startsWith(""String_Node_Str""));
  assertEquals(""String_Node_Str"",x.length(),size * 4);
}"
83413,"/** 
 * tests toCharArray 
 */
public void testGetChars(){
  StringBuffer x=new StringBuffer(""String_Node_Str"");
  char[] a1=""String_Node_Str"".toCharArray();
  char[] desired=""String_Node_Str"".toCharArray();
  x.getChars(3,6,a1,3);
  for (int i=0; i < a1.length; i++) {
    assertEquals(a1[i],desired[i]);
  }
}","/** 
 * Tests toCharArray.
 */
public void testGetChars(){
  StringBuffer x=new StringBuffer(""String_Node_Str"");
  char[] a1=""String_Node_Str"".toCharArray();
  char[] desired=""String_Node_Str"".toCharArray();
  x.getChars(3,6,a1,3);
  for (int i=0; i < a1.length; i++) {
    assertEquals(a1[i],desired[i]);
  }
}"
83414,"public ArrayList(Collection c){
  initArray();
  addAll(c);
}","/** 
 * There is no speed advantage to pre-allocating array sizes in JavaScript, so the <code>intialCapacity</code> parameter is ignored. This constructor is only present for compatibility with JDK 1.4's API.
 */
public ArrayList(int initialCapacity){
  this();
}"
83415,"public Vector(Collection c){
  arrayList=new ArrayList();
  addAll(c);
}","/** 
 * There is no speed advantage to pre-allocating array sizes in JavaScript, so the <code>intialCapacity</code> parameter is ignored. This constructor is only present for compatibility with JDK 1.4's API.
 */
public Vector(int initialCapacity){
  arrayList=new ArrayList(initialCapacity);
}"
83416,"private void lazyInitTargetMembers(){
  if (memberById == null) {
    memberById=new ArrayList();
    try {
      memberById.add(cls.getMethod(""String_Node_Str"",null));
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      if (cls.isInterface()) {
        try {
          memberById.add(Object.class.getMethod(""String_Node_Str"",null));
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
      }
 else {
        e.printStackTrace();
      }
    }
    memberIdByName=new HashMap();
    lazyInitTargetMembersUsingReflectionHelper(cls);
  }
}","private void lazyInitTargetMembers(){
  if (memberById == null) {
    memberById=new ArrayList();
    memberById.add(null);
    memberIdByName=new HashMap();
    lazyInitTargetMembersUsingReflectionHelper(cls);
  }
}"
83417,"/** 
 * @param dispId the unique number of a method or field
 * @return the member
 */
protected Member getMember(int dispId){
  if (dispId == 0) {
    try {
      return Object.class.getDeclaredMethod(""String_Node_Str"",null);
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
  }
  DispatchClassInfo clsInfo=classLoader.getClassInfoByDispId(dispId);
  return clsInfo.getMember(dispId);
}","/** 
 * @param dispId the unique number of a method or field
 * @return the member
 */
protected Member getMember(int dispId){
  DispatchClassInfo clsInfo=classLoader.getClassInfoByDispId(dispId);
  return clsInfo.getMember(dispId);
}"
83418,"/** 
 * Retrieve a field and store in the passed JsValue. This function is called exclusively from native code.
 * @param name name of the field to retrieve
 * @param jsValue a reference to the JsValue object to receive the value of the field
 */
public void getField(String name,int jsRootedValue){
  JsValueMoz jsValue=new JsValueMoz(jsRootedValue);
  int dispId=classLoader.getDispId(name);
  if (dispId < 0) {
    jsValue.setUndefined();
    return;
  }
  if (javaDispatch.isField(dispId)) {
    Field field=javaDispatch.getField(dispId);
    JsValueGlue.set(jsValue,classLoader,field.getType(),javaDispatch.getFieldValue(dispId));
    return;
  }
 else {
    Method method=javaDispatch.getMethod(dispId);
    DispatchMethod dispMethod;
    dispMethod=(DispatchMethod)classLoader.getMethodDispatch(method);
    if (dispMethod == null) {
      dispMethod=new MethodDispatch(classLoader,method);
      classLoader.putMethodDispatch(method,dispMethod);
    }
    jsValue.setWrappedFunction(method.toString(),dispMethod);
    return;
  }
}","/** 
 * Retrieve a field and store in the passed JsValue. This function is called exclusively from native code.
 * @param name name of the field to retrieve
 * @param jsValue a reference to the JsValue object to receive the value of the field
 */
public void getField(String name,int jsRootedValue){
  JsValueMoz jsValue=new JsValueMoz(jsRootedValue);
  int dispId=classLoader.getDispId(name);
  if (dispId < 0) {
    jsValue.setUndefined();
    return;
  }
  if (javaDispatch.isField(dispId)) {
    Field field=javaDispatch.getField(dispId);
    JsValueGlue.set(jsValue,classLoader,field.getType(),javaDispatch.getFieldValue(dispId));
    return;
  }
 else {
    Method method=javaDispatch.getMethod(dispId);
    DispatchMethod dispMethod;
    dispMethod=(DispatchMethod)classLoader.getMethodDispatch(method);
    if (dispMethod == null) {
      dispMethod=new MethodDispatch(classLoader,method);
      classLoader.putMethodDispatch(method,dispMethod);
    }
    jsValue.setWrappedFunction(method.toString(),dispMethod);
  }
}"
83419,"/** 
 * This constructor initializes a dispatcher, around a particular instance.
 * @param cl this class's classLoader
 * @param aScriptObject the execution iframe's window
 * @param target the object being wrapped as an IDispatch
 */
WebKitDispatchAdapter(CompilingClassLoader cl,Object target){
  javaDispatch=new JavaDispatchImpl(cl,target);
  this.classLoader=cl;
}","/** 
 * This constructor initializes a dispatcher, around a particular instance.
 * @param cl this class's classLoader
 * @param target the object being wrapped as an IDispatch
 */
WebKitDispatchAdapter(CompilingClassLoader cl,Object target){
  javaDispatch=new JavaDispatchImpl(cl,target);
  this.classLoader=cl;
}"
83420,"/** 
 * Creates an empty menu bar.
 * @param vertical <code>true</code> to orient the menu bar vertically
 */
public MenuBar(boolean vertical){
  super();
  Element table=DOM.createTable();
  body=DOM.createTBody();
  DOM.appendChild(table,body);
  if (!vertical) {
    Element tr=DOM.createTR();
    DOM.appendChild(body,tr);
  }
  this.vertical=vertical;
  Element outer=DOM.createDiv();
  DOM.appendChild(outer,table);
  setElement(outer);
  setStyleName(""String_Node_Str"");
}","/** 
 * Creates an empty menu bar.
 * @param vertical <code>true</code> to orient the menu bar vertically
 */
public MenuBar(boolean vertical){
  super();
  Element table=DOM.createTable();
  body=DOM.createTBody();
  DOM.appendChild(table,body);
  if (!vertical) {
    Element tr=DOM.createTR();
    DOM.appendChild(body,tr);
  }
  this.vertical=vertical;
  Element outer=DOM.createDiv();
  DOM.appendChild(outer,table);
  setElement(outer);
  sinkEvents(Event.ONCLICK | Event.ONMOUSEOVER | Event.ONMOUSEOUT);
  setStyleName(""String_Node_Str"");
}"
83421,"private MenuItem(String text,boolean asHTML){
  setElement(DOM.createTD());
  sinkEvents(Event.ONCLICK | Event.ONMOUSEOVER | Event.ONMOUSEOUT);
  setSelectionStyle(false);
  if (asHTML) {
    setHTML(text);
  }
 else {
    setText(text);
  }
  setStyleName(""String_Node_Str"");
}","private MenuItem(String text,boolean asHTML){
  setElement(DOM.createTD());
  setSelectionStyle(false);
  if (asHTML) {
    setHTML(text);
  }
 else {
    setText(text);
  }
  setStyleName(""String_Node_Str"");
}"
83422,"/** 
 * Attempts to get a <code>PrintWriter</code> so that the caller can generate the source code for the named type. If the named types already exists, <code>null</code> is returned to indicate that no work needs to be done.
 * @param logger a logger; normally the logger passed into{@link Generator#generate(TreeLogger,GeneratorContext,String)}or a branch thereof
 * @param packageName the name of the package to which the create type belongs
 * @param simpleName the unqualified source name of the type being generated
 * @return null if the package and class already exists, otherwise a<code>PrintWriter</code> is returned.
 */
PrintWriter tryCreate(TreeLogger logger,String packageName,String simpleName);","/** 
 * Attempts to get a <code>PrintWriter</code> so that the caller can generate the source code for the named type. If the named types already exists, <code>null</code> is returned to indicate that no work needs to be done. The file is not committed until  {@link #commit(TreeLogger,PrintWriter)} is called.
 * @param logger a logger; normally the logger passed into{@link Generator#generate(TreeLogger,GeneratorContext,String)}or a branch thereof
 * @param packageName the name of the package to which the create type belongs
 * @param simpleName the unqualified source name of the type being generated
 * @return <code>null</code> if the package and class already exists,otherwise a <code>PrintWriter</code> is returned.
 */
PrintWriter tryCreate(TreeLogger logger,String packageName,String simpleName);"
83423,"public CompilationRebindOracle(){
  super(typeOracle,propOracle,rules,genDir,cacheManager);
}","public CompilationRebindOracle(){
  super(typeOracle,propOracle,rules,genDir,outDir,cacheManager);
}"
83424,"public ModuleSpaceHost createModuleSpaceHost(BrowserWidget widget,final String moduleName) throws UnableToCompleteException {
  TreeLogger logger=getLogger();
  Shell widgetShell=widget.getShell();
  try {
    Cursor waitCursor=display.getSystemCursor(SWT.CURSOR_WAIT);
    widgetShell.setCursor(waitCursor);
    ModuleDef moduleDef=loadModule(moduleName,logger);
    assert(moduleDef != null);
    TypeOracle typeOracle=moduleDef.getTypeOracle(logger);
    ShellModuleSpaceHost host=doCreateShellModuleSpaceHost(logger,typeOracle,moduleDef,genDir);
    return host;
  }
  finally {
    Cursor normalCursor=display.getSystemCursor(SWT.CURSOR_ARROW);
    widgetShell.setCursor(normalCursor);
  }
}","public ModuleSpaceHost createModuleSpaceHost(BrowserWidget widget,final String moduleName) throws UnableToCompleteException {
  TreeLogger logger=getLogger();
  Shell widgetShell=widget.getShell();
  try {
    Cursor waitCursor=display.getSystemCursor(SWT.CURSOR_WAIT);
    widgetShell.setCursor(waitCursor);
    ModuleDef moduleDef=loadModule(moduleName,logger);
    assert(moduleDef != null);
    TypeOracle typeOracle=moduleDef.getTypeOracle(logger);
    ShellModuleSpaceHost host=doCreateShellModuleSpaceHost(logger,typeOracle,moduleDef,genDir,outDir);
    return host;
  }
  finally {
    Cursor normalCursor=display.getSystemCursor(SWT.CURSOR_ARROW);
    widgetShell.setCursor(normalCursor);
  }
}"
83425,"/** 
 * Creates an instance of ShellModuleSpaceHost (or a derived class) using the specified constituent parts. This method is made to be overridden for subclasses that need to change the behavior of ShellModuleSpaceHost.
 * @param logger TreeLogger to use
 * @param typeOracle
 * @param moduleDef
 * @param genDir
 * @return ShellModuleSpaceHost instance
 */
protected ShellModuleSpaceHost doCreateShellModuleSpaceHost(TreeLogger logger,TypeOracle typeOracle,ModuleDef moduleDef,File genDir){
  return new ShellModuleSpaceHost(logger,typeOracle,moduleDef,genDir);
}","/** 
 * Creates an instance of ShellModuleSpaceHost (or a derived class) using the specified constituent parts. This method is made to be overridden for subclasses that need to change the behavior of ShellModuleSpaceHost.
 * @param logger TreeLogger to use
 * @param typeOracle
 * @param moduleDef
 * @param genDir
 * @return ShellModuleSpaceHost instance
 */
protected ShellModuleSpaceHost doCreateShellModuleSpaceHost(TreeLogger logger,TypeOracle typeOracle,ModuleDef moduleDef,File genDir,File outDir){
  return new ShellModuleSpaceHost(logger,typeOracle,moduleDef,genDir,outDir);
}"
83426,"public void onModuleReady(ModuleSpace readySpace) throws UnableToCompleteException {
  this.space=readySpace;
  SourceOracle srcOracle=new HostedModeSourceOracle(typeOracle,module.getName());
  ByteCodeCompiler compiler=getOrCreateByteCodeCompiler(srcOracle);
  ModuleSpacePropertyOracle propOracle=new ModuleSpacePropertyOracle(module.getProperties(),readySpace);
  Rules rules=module.getRules();
  rebindOracle=new StandardRebindOracle(typeOracle,propOracle,rules,genDir,module.getCacheManager());
  classLoader=new CompilingClassLoader(logger,compiler);
}","public void onModuleReady(ModuleSpace readySpace) throws UnableToCompleteException {
  this.space=readySpace;
  SourceOracle srcOracle=new HostedModeSourceOracle(typeOracle,module.getName());
  ByteCodeCompiler compiler=getOrCreateByteCodeCompiler(srcOracle);
  ModuleSpacePropertyOracle propOracle=new ModuleSpacePropertyOracle(module.getProperties(),readySpace);
  Rules rules=module.getRules();
  rebindOracle=new StandardRebindOracle(typeOracle,propOracle,rules,genDir,outDir,module.getCacheManager());
  classLoader=new CompilingClassLoader(logger,compiler);
}"
83427,"/** 
 * @param module the module associated with the hosted module space
 */
public ShellModuleSpaceHost(TreeLogger logger,TypeOracle typeOracle,ModuleDef module,File genDir){
  this.logger=logger;
  this.typeOracle=typeOracle;
  this.module=module;
  this.genDir=genDir;
}","/** 
 * @param module the module associated with the hosted module space
 */
public ShellModuleSpaceHost(TreeLogger logger,TypeOracle typeOracle,ModuleDef module,File genDir,File outDir){
  this.logger=logger;
  this.typeOracle=typeOracle;
  this.module=module;
  this.genDir=genDir;
  this.outDir=new File(outDir,module.getName());
}"
83428,"/** 
 * Creates an HTML THEAD element.
 * @return the newly-created element
 */
public static Element createTH(){
  return impl.createElement(""String_Node_Str"");
}","/** 
 * Creates an HTML TH element.
 * @return the newly-created element
 */
public static Element createTH(){
  return impl.createElement(""String_Node_Str"");
}"
83429,"/** 
 * Creates an HTML BODY element.
 * @return the newly-created element
 */
public static Element createTBody(){
  return impl.createElement(""String_Node_Str"");
}","/** 
 * Creates an HTML TBODY element.
 * @return the newly-created element
 */
public static Element createTBody(){
  return impl.createElement(""String_Node_Str"");
}"
83430,"/** 
 * By default we will open the application window.
 * @return
 */
protected boolean isHeadless(){
  return headlessMode;
}","/** 
 * By default we will open the application window.
 * @return true if we are running in headless mode
 */
protected boolean isHeadless(){
  return headlessMode;
}"
83431,"/** 
 * @param moduleName
 * @param logger
 * @return
 * @throws UnableToCompleteException
 */
private ModuleDef loadModule(final String moduleName,TreeLogger logger) throws UnableToCompleteException {
}","/** 
 * Load a module.
 * @param moduleName name of the module to load
 * @param logger TreeLogger to use
 * @return the loaded module
 * @throws UnableToCompleteException
 */
private ModuleDef loadModule(final String moduleName,TreeLogger logger) throws UnableToCompleteException {
}"
83432,"/** 
 * Creates an instance of ShellModuleSpaceHost (or a derived class) using the specified constituent parts. This method is made to be overridden for subclasses that need to change the behavior of ShellModuleSpaceHost.
 * @param logger
 * @param typeOracle
 * @param moduleDef
 * @param genDir
 * @return
 */
protected ShellModuleSpaceHost doCreateShellModuleSpaceHost(TreeLogger logger,TypeOracle typeOracle,ModuleDef moduleDef,File genDir){
  return new ShellModuleSpaceHost(logger,typeOracle,moduleDef,genDir);
}","/** 
 * Creates an instance of ShellModuleSpaceHost (or a derived class) using the specified constituent parts. This method is made to be overridden for subclasses that need to change the behavior of ShellModuleSpaceHost.
 * @param logger TreeLogger to use
 * @param typeOracle
 * @param moduleDef
 * @param genDir
 * @return ShellModuleSpaceHost instance
 */
protected ShellModuleSpaceHost doCreateShellModuleSpaceHost(TreeLogger logger,TypeOracle typeOracle,ModuleDef moduleDef,File genDir){
  return new ShellModuleSpaceHost(logger,typeOracle,moduleDef,genDir);
}"
83433,"/** 
 * Disposes all the attached module spaces from the prior page (not the one that just loaded). Called when this widget is disposed but, more interestingly, whenever the browser's page changes.
 */
protected void onPageUnload(){
  for (Iterator iter=moduleSpacesByName.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)iter.next();
    String moduleName=(String)entry.getKey();
    ModuleSpace space=(ModuleSpace)entry.getValue();
    space.dispose();
    logger.log(TreeLogger.SPAM,""String_Node_Str"" + moduleName,null);
  }
  moduleSpacesByName.clear();
  if (!toolbar.openWebModeButton.isDisposed()) {
    toolbar.openWebModeButton.setEnabled(false);
  }
}","/** 
 * Disposes all the attached module spaces from the prior page (not the one that just loaded). Called when this widget is disposed but, more interestingly, whenever the browser's page changes.
 */
protected void onPageUnload(){
  for (Iterator iter=moduleSpacesByName.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Map.Entry)iter.next();
    String moduleName=(String)entry.getKey();
    ModuleSpace space=(ModuleSpace)entry.getValue();
    unloadModule(space,moduleName);
  }
  moduleSpacesByName.clear();
  if (!toolbar.openWebModeButton.isDisposed()) {
    toolbar.openWebModeButton.setEnabled(false);
  }
}"
83434,"void processNativeMethod(AbstractMethodDeclaration x,JsniMethod nativeMethod){
  JsFunction func=nativeMethod.getFunc();
  if (func == null) {
    return;
  }
  final List nameRefs=new ArrayList();
  func.traverse(new JsAbstractVisitorWithAllVisits(){
    public void endVisit(    JsNameRef x){
      String ident=x.getIdent();
      if (ident.charAt(0) == '@') {
        nameRefs.add(x);
      }
    }
  }
);
  for (int i=0; i < nameRefs.size(); ++i) {
    JsNameRef nameRef=(JsNameRef)nameRefs.get(i);
    JSourceInfo info=translateInfo(nameRef.getInfo());
    String ident=nameRef.getIdent();
    HasEnclosingType node=(HasEnclosingType)program.jsniMap.get(ident);
    if (node == null) {
      node=parseJsniRef(info,x,ident);
      if (node == null) {
        continue;
      }
      program.jsniMap.put(ident,node);
    }
    assert(node != null);
    CanBeStatic canBeStatic=(CanBeStatic)node;
    HasName hasName=(HasName)node;
    boolean isField=node instanceof JField;
    assert(isField || node instanceof JMethod);
    if (canBeStatic.isStatic() && nameRef.getQualifier() != null) {
      reportJsniError(info,x,""String_Node_Str"" + (isField ? ""String_Node_Str"" : ""String_Node_Str"") + hasName.getName());
    }
 else     if (!canBeStatic.isStatic() && nameRef.getQualifier() == null) {
      reportJsniError(info,x,""String_Node_Str"" + (isField ? ""String_Node_Str"" : ""String_Node_Str"") + hasName.getName());
    }
    if (isField) {
      JField field=(JField)node;
      JsniFieldRef fieldRef=new JsniFieldRef(program,info,field,currentClass);
      nativeMethod.jsniFieldRefs.add(fieldRef);
    }
 else {
      JMethod method=(JMethod)node;
      JsniMethodRef methodRef=new JsniMethodRef(program,info,method);
      nativeMethod.jsniMethodRefs.add(methodRef);
    }
  }
}","void processNativeMethod(AbstractMethodDeclaration x,JsniMethod nativeMethod){
  JsFunction func=nativeMethod.getFunc();
  if (func == null) {
    return;
  }
  final List nameRefs=new ArrayList();
  func.traverse(new JsAbstractVisitorWithAllVisits(){
    public void endVisit(    JsNameRef x){
      String ident=x.getIdent();
      if (ident.charAt(0) == '@') {
        nameRefs.add(x);
      }
    }
  }
);
  for (int i=0; i < nameRefs.size(); ++i) {
    JsNameRef nameRef=(JsNameRef)nameRefs.get(i);
    JSourceInfo info=nativeMethod.getSourceInfo();
    String ident=nameRef.getIdent();
    HasEnclosingType node=(HasEnclosingType)program.jsniMap.get(ident);
    if (node == null) {
      node=parseJsniRef(info,x,ident);
      if (node == null) {
        continue;
      }
      program.jsniMap.put(ident,node);
    }
    assert(node != null);
    CanBeStatic canBeStatic=(CanBeStatic)node;
    HasName hasName=(HasName)node;
    boolean isField=node instanceof JField;
    assert(isField || node instanceof JMethod);
    if (canBeStatic.isStatic() && nameRef.getQualifier() != null) {
      reportJsniError(info,x,""String_Node_Str"" + (isField ? ""String_Node_Str"" : ""String_Node_Str"") + hasName.getName());
    }
 else     if (!canBeStatic.isStatic() && nameRef.getQualifier() == null) {
      reportJsniError(info,x,""String_Node_Str"" + (isField ? ""String_Node_Str"" : ""String_Node_Str"") + hasName.getName());
    }
    if (isField) {
      JField field=(JField)node;
      JsniFieldRef fieldRef=new JsniFieldRef(program,info,field,currentClass);
      nativeMethod.jsniFieldRefs.add(fieldRef);
    }
 else {
      JMethod method=(JMethod)node;
      JsniMethodRef methodRef=new JsniMethodRef(program,info,method);
      nativeMethod.jsniMethodRefs.add(methodRef);
    }
  }
}"
83435,"/** 
 * Constructs a log type with an optional parent.
 */
private Type(boolean needsAttention,String name,Type parent){
  if (instances == null) {
    instances=new HashMap();
  }
  Object existing=instances.put(name.toUpperCase(),this);
  assert(existing == null);
  this.needsAttention=needsAttention;
  this.label=name;
  this.parent=parent;
}","/** 
 * Constructs a log type with an optional parent.
 */
private Type(boolean needsAttention,String name,int priority){
  if (labelMap == null) {
    labelMap=new HashMap();
  }
  if (typeList == null) {
    typeList=new Type[TYPES_COUNT];
  }
  Object existing=labelMap.put(name.toUpperCase(),this);
  assert(existing == null);
  assert(typeList[priority] == null);
  typeList[priority]=this;
  this.needsAttention=needsAttention;
  this.label=name;
  this.priority=priority;
}"
83436,"/** 
 * Gets all the possible severity types as an array.
 * @return an array of severity types
 */
public static Type[] instances(){
  return (Type[])instances.values().toArray(NO_TYPES);
}","/** 
 * Gets all the possible severity types as an array.
 * @return an array of severity types
 */
public static Type[] instances(){
  return (Type[])typeList.clone();
}"
83437,"/** 
 * Looks up a severity type by label.
 * @param label the label of the desired severity
 * @return the severity type labelled <code>label</code>, or<code>null</code> if no such type exists
 */
public static Type valueOf(String label){
  return (Type)instances.get(label.toUpperCase());
}","/** 
 * Looks up a severity type by label.
 * @param label the label of the desired severity
 * @return the severity type labelled <code>label</code>, or<code>null</code> if no such type exists
 */
public static Type valueOf(String label){
  return (Type)labelMap.get(label.toUpperCase());
}"
83438,"public final synchronized boolean isLoggable(TreeLogger.Type type){
  TreeLogger.Type maxLevel=logLevel;
  while (maxLevel != null && maxLevel != type) {
    maxLevel=maxLevel.getParent();
  }
  return maxLevel == type;
}","public final synchronized boolean isLoggable(TreeLogger.Type type){
  return !type.isLowerPriorityThan(logLevel);
}"
83439,"/** 
 * Can only be called by the UI thread.
 */
private void uiStyleChildAndAncestors(TreeLogger.Type type,TreeItem child){
  Display display=child.getDisplay();
  Color color;
  Image image=null;
  if (type == TreeLogger.ERROR) {
    color=display.getSystemColor(SWT.COLOR_RED);
    image=imageError;
  }
 else   if (type == TreeLogger.WARN) {
    color=display.getSystemColor(SWT.COLOR_DARK_YELLOW);
    image=imageWarning;
  }
 else   if (type == TreeLogger.INFO) {
    color=display.getSystemColor(SWT.COLOR_BLACK);
    image=imageInfo;
  }
 else   if (type == TreeLogger.TRACE) {
    color=display.getSystemColor(SWT.COLOR_DARK_GRAY);
    image=imageTrace;
  }
 else   if (type == TreeLogger.DEBUG) {
    color=display.getSystemColor(SWT.COLOR_DARK_CYAN);
    image=imageDebug;
  }
 else {
    color=display.getSystemColor(SWT.COLOR_DARK_GREEN);
    image=imageSpam;
  }
  if (image != null) {
    child.setImage(image);
  }
  child.setForeground(color);
  if (type.needsAttention()) {
    TreeItem parent=child.getParentItem();
    while (parent != null) {
      parent.setExpanded(true);
      parent.setForeground(color);
      parent=parent.getParentItem();
    }
  }
}","/** 
 * Can only be called by the UI thread.
 */
private void uiStyleChildAndAncestors(TreeLogger.Type type,TreeItem child){
  Display display=child.getDisplay();
  Color color;
  Image image=null;
  if (type == TreeLogger.ERROR) {
    color=display.getSystemColor(SWT.COLOR_RED);
    image=imageError;
  }
 else   if (type == TreeLogger.WARN) {
    color=display.getSystemColor(SWT.COLOR_DARK_YELLOW);
    image=imageWarning;
  }
 else   if (type == TreeLogger.INFO) {
    color=display.getSystemColor(SWT.COLOR_BLACK);
    image=imageInfo;
  }
 else   if (type == TreeLogger.TRACE) {
    color=display.getSystemColor(SWT.COLOR_DARK_GRAY);
    image=imageTrace;
  }
 else   if (type == TreeLogger.DEBUG) {
    color=display.getSystemColor(SWT.COLOR_DARK_CYAN);
    image=imageDebug;
  }
 else {
    color=display.getSystemColor(SWT.COLOR_DARK_GREEN);
    image=imageSpam;
  }
  if (image != null) {
    child.setImage(image);
  }
  child.setForeground(color);
  if (type.needsAttention()) {
    boolean propagateColor=true;
    TreeItem parent=child.getParentItem();
    while (parent != null) {
      LogEvent parentEvent=(LogEvent)parent.getData();
      if (propagateColor) {
        if (parentEvent.type.isLowerPriorityThan(type)) {
          parent.setForeground(color);
        }
 else {
          propagateColor=false;
        }
      }
      parent.setExpanded(true);
      parent=parent.getParentItem();
    }
  }
}"
83440,"private String getHtmlSuffix(){
  StringBuffer sb=new StringBuffer();
  String moduleFunction=module.getName().replace('.','_');
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + moduleFunction + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String s=sb.toString();
  return s;
}","private String getHtmlSuffix(){
  StringBuffer sb=new StringBuffer();
  String moduleFunction=module.getName().replace('.','_');
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + moduleFunction + ""String_Node_Str""+ moduleFunction+ ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String s=sb.toString();
  return s;
}"
83441,"private static String scriptInjector(String scriptUrl){
  return ""String_Node_Str"" + scriptUrl + ""String_Node_Str""+ ""String_Node_Str""+ scriptUrl+ ""String_Node_Str""+ ""String_Node_Str""+ scriptUrl+ ""String_Node_Str""+ ""String_Node_Str"";
}","private static String scriptInjector(String scriptUrl){
  if (isRelativeURL(scriptUrl)) {
    return ""String_Node_Str"" + scriptUrl + ""String_Node_Str""+ ""String_Node_Str""+ scriptUrl+ ""String_Node_Str""+ ""String_Node_Str""+ scriptUrl+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + scriptUrl + ""String_Node_Str""+ ""String_Node_Str""+ scriptUrl+ ""String_Node_Str""+ ""String_Node_Str""+ scriptUrl+ ""String_Node_Str""+ ""String_Node_Str"";
  }
}"
83442,"private void genAnswers(PrintWriter pw){
  for (Iterator iter=propertyValuesSetByStrongName.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Entry)iter.next();
    String strongName=(String)entry.getKey();
    Set propValuesSet=(Set)entry.getValue();
    for (Iterator iterator=propValuesSet.iterator(); iterator.hasNext(); ) {
      String[] propValues=(String[])iterator.next();
      pw.print(""String_Node_Str"");
      for (int i=0; i < orderedProps.length; i++) {
        if (i > 0) {
          pw.print(""String_Node_Str"");
        }
        pw.print(literal(propValues[i]));
      }
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(literal(strongName));
      pw.println(""String_Node_Str"");
    }
  }
}","private void genAnswers(PrintWriter pw){
  for (Iterator iter=propertyValuesSetByStrongName.entrySet().iterator(); iter.hasNext(); ) {
    Map.Entry entry=(Entry)iter.next();
    String strongName=(String)entry.getKey();
    Set propValuesSet=(Set)entry.getValue();
    for (Iterator iterator=propValuesSet.iterator(); iterator.hasNext(); ) {
      String[] propValues=(String[])iterator.next();
      pw.print(""String_Node_Str"");
      boolean firstPrint=true;
      for (int i=0; i < orderedProps.length; i++) {
        Property prop=orderedProps[i];
        String activeValue=prop.getActiveValue();
        if (activeValue == null) {
          if (!firstPrint) {
            pw.print(""String_Node_Str"");
          }
          firstPrint=false;
          pw.print(literal(propValues[i]));
        }
 else {
        }
      }
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(literal(strongName));
      pw.println(""String_Node_Str"");
    }
  }
}"
83443,"private static String cssInjector(String cssUrl){
  return ""String_Node_Str"" + cssUrl + ""String_Node_Str""+ ""String_Node_Str""+ cssUrl+ ""String_Node_Str""+ ""String_Node_Str""+ cssUrl+ ""String_Node_Str""+ ""String_Node_Str"";
}","private static String cssInjector(String cssUrl){
  if (isRelativeURL(cssUrl)) {
    return ""String_Node_Str"" + cssUrl + ""String_Node_Str""+ ""String_Node_Str""+ cssUrl+ ""String_Node_Str""+ ""String_Node_Str""+ cssUrl+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + cssUrl + ""String_Node_Str""+ ""String_Node_Str""+ cssUrl+ ""String_Node_Str""+ ""String_Node_Str""+ cssUrl+ ""String_Node_Str""+ ""String_Node_Str"";
  }
}"
83444,"/** 
 * Emits all the script required to set up the module and, in web mode, select a compilation.
 * @param pw
 */
private void genScript(PrintWriter mainPw,String template){
  StringBuffer buf=new StringBuffer(template);
  replaceAll(buf,""String_Node_Str"",moduleFunction);
  replaceAll(buf,""String_Node_Str"",moduleName);
  if (orderedProps != null) {
    int startPos=buf.indexOf(""String_Node_Str"");
    int endPos=buf.indexOf(""String_Node_Str"");
    buf.delete(startPos,endPos);
  }
  int startPos=buf.indexOf(""String_Node_Str"");
  for (Iterator iter=styles.iterator(); iter.hasNext(); ) {
    String style=(String)iter.next();
    String text=cssInjector(style);
    buf.insert(startPos,text);
    startPos+=text.length();
  }
  for (Iterator iter=scripts.iterator(); iter.hasNext(); ) {
    Script script=(Script)iter.next();
    String text=scriptInjector(script.getSrc());
    buf.insert(startPos,text);
    startPos+=text.length();
  }
{
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    genPropProviders(pw);
    pw.close();
    String stuff=sw.toString();
    startPos=buf.indexOf(""String_Node_Str"");
    buf.insert(startPos,stuff);
  }
{
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    if (orderedProps != null) {
      if (orderedProps.length > 0) {
        pw.println();
        genPropValues(pw);
        pw.println();
        genAnswers(pw);
        pw.println();
        pw.print(""String_Node_Str"");
        for (int i=0; i < orderedProps.length; i++) {
          pw.print(""String_Node_Str"" + i + ""String_Node_Str"");
        }
      }
 else {
        assert(orderedProps.length == 0);
        Set entrySet=propertyValuesSetByStrongName.entrySet();
        assert(entrySet.size() == 1);
        Map.Entry entry=(Entry)entrySet.iterator().next();
        String strongName=(String)entry.getKey();
        pw.print(""String_Node_Str"" + literal(strongName));
      }
      pw.println(""String_Node_Str"");
    }
    pw.close();
    String stuff=sw.toString();
    startPos=buf.indexOf(""String_Node_Str"");
    buf.insert(startPos,stuff);
  }
  mainPw.print(buf.toString());
}","/** 
 * Emits all the script required to set up the module and, in web mode, select a compilation.
 * @param pw
 */
private void genScript(PrintWriter mainPw,String template){
  StringBuffer buf=new StringBuffer(template);
  replaceAll(buf,""String_Node_Str"",moduleFunction);
  replaceAll(buf,""String_Node_Str"",moduleName);
  if (orderedProps != null) {
    int startPos=buf.indexOf(""String_Node_Str"");
    int endPos=buf.indexOf(""String_Node_Str"");
    buf.delete(startPos,endPos);
  }
  int startPos=buf.indexOf(""String_Node_Str"");
  for (Iterator iter=styles.iterator(); iter.hasNext(); ) {
    String style=(String)iter.next();
    String text=cssInjector(style);
    buf.insert(startPos,text);
    startPos+=text.length();
  }
  for (Iterator iter=scripts.iterator(); iter.hasNext(); ) {
    Script script=(Script)iter.next();
    String text=scriptInjector(script.getSrc());
    buf.insert(startPos,text);
    startPos+=text.length();
  }
{
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    genPropProviders(pw);
    pw.close();
    String stuff=sw.toString();
    startPos=buf.indexOf(""String_Node_Str"");
    buf.insert(startPos,stuff);
  }
{
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw,true);
    if (orderedProps != null) {
      if (orderedProps.length > 0) {
        pw.println();
        genAnswers(pw);
        pw.println();
        pw.print(""String_Node_Str"");
        genPropValues(pw);
      }
 else {
        assert(orderedProps.length == 0);
        Set entrySet=propertyValuesSetByStrongName.entrySet();
        assert(entrySet.size() == 1);
        Map.Entry entry=(Entry)entrySet.iterator().next();
        String strongName=(String)entry.getKey();
        pw.print(""String_Node_Str"" + literal(strongName));
      }
      pw.println(""String_Node_Str"");
    }
    pw.close();
    String stuff=sw.toString();
    startPos=buf.indexOf(""String_Node_Str"");
    buf.insert(startPos,stuff);
  }
  mainPw.print(buf.toString());
}"
83445,"/** 
 * Determines whether or not the URL is relative.
 * @param src the test url
 * @return <code>true</code> if the URL is relative, <code>false</code> ifnot
 */
private boolean isRelativeURL(String src){
  if (src.startsWith(""String_Node_Str"")) {
    return false;
  }
  try {
    URL testUrl=new URL(src);
    return false;
  }
 catch (  MalformedURLException e) {
  }
  return true;
}","/** 
 * Determines whether or not the URL is relative.
 * @param src the test url
 * @return <code>true</code> if the URL is relative, <code>false</code> ifnot
 */
private static boolean isRelativeURL(String src){
  if (src.startsWith(""String_Node_Str"")) {
    return false;
  }
  try {
    URL testUrl=new URL(src);
    return false;
  }
 catch (  MalformedURLException e) {
  }
  return true;
}"
83446,"private String literal(String lit){
  return ""String_Node_Str"" + lit + ""String_Node_Str"";
}","private static String literal(String lit){
  return ""String_Node_Str"" + lit + ""String_Node_Str"";
}"
83447,"private JNode internalGet(Binding binding){
  JNode cached=(JNode)crossRefMap.get(binding);
  if (cached != null) {
    return cached;
  }
 else   if (binding instanceof BaseTypeBinding) {
    BaseTypeBinding baseTypeBinding=(BaseTypeBinding)binding;
switch (baseTypeBinding.id) {
case BaseTypeBinding.T_void:
      return program.getTypeVoid();
case BaseTypeBinding.T_boolean:
    return program.getTypePrimitiveBoolean();
case BaseTypeBinding.T_char:
  return program.getTypePrimitiveChar();
case BaseTypeBinding.T_byte:
return program.getTypePrimitiveByte();
case BaseTypeBinding.T_short:
return program.getTypePrimitiveShort();
case BaseTypeBinding.T_int:
return program.getTypePrimitiveInt();
case BaseTypeBinding.T_long:
return program.getTypePrimitiveLong();
case BaseTypeBinding.T_float:
return program.getTypePrimitiveFloat();
case BaseTypeBinding.T_double:
return program.getTypePrimitiveDouble();
}
}
 else if (binding instanceof ArrayBinding) {
ArrayBinding arrayBinding=(ArrayBinding)binding;
JType leafType=(JType)get(arrayBinding.leafComponentType);
JArrayType arrayType=program.getTypeArray(leafType,arrayBinding.dimensions);
return arrayType;
}
return null;
}","private JNode internalGet(Binding binding){
  JNode cached=(JNode)crossRefMap.get(binding);
  if (cached != null) {
    return cached;
  }
 else   if (binding instanceof BaseTypeBinding) {
    BaseTypeBinding baseTypeBinding=(BaseTypeBinding)binding;
switch (baseTypeBinding.id) {
case BaseTypeBinding.T_undefined:
      return null;
case BaseTypeBinding.T_JavaLangObject:
    return program.getTypeJavaLangObject();
case BaseTypeBinding.T_char:
  return program.getTypePrimitiveChar();
case BaseTypeBinding.T_byte:
return program.getTypePrimitiveByte();
case BaseTypeBinding.T_short:
return program.getTypePrimitiveShort();
case BaseTypeBinding.T_boolean:
return program.getTypePrimitiveBoolean();
case BaseTypeBinding.T_void:
return program.getTypeVoid();
case BaseTypeBinding.T_long:
return program.getTypePrimitiveLong();
case BaseTypeBinding.T_double:
return program.getTypePrimitiveDouble();
case BaseTypeBinding.T_float:
return program.getTypePrimitiveFloat();
case BaseTypeBinding.T_int:
return program.getTypePrimitiveInt();
case BaseTypeBinding.T_JavaLangString:
return program.getTypeJavaLangString();
case BaseTypeBinding.T_null:
return program.getTypeNull();
default :
return null;
}
}
 else if (binding instanceof ArrayBinding) {
ArrayBinding arrayBinding=(ArrayBinding)binding;
JType leafType=(JType)get(arrayBinding.leafComponentType);
JArrayType arrayType=program.getTypeArray(leafType,arrayBinding.dimensions);
return arrayType;
}
 else {
return null;
}
}"
83448,"private static void computeInstallationPath(){
  try {
    String override=System.getProperty(""String_Node_Str"");
    if (override == null) {
      String partialPath=Utility.class.getName().replace('.','/').concat(""String_Node_Str"");
      URL url=Utility.class.getClassLoader().getResource(partialPath);
      if (url != null && url.getProtocol() == ""String_Node_Str"") {
        String path=url.toString();
        String jarPath=path.substring(path.indexOf(""String_Node_Str""),path.lastIndexOf('!'));
        File devJarFile=new File(URI.create(jarPath));
        if (!devJarFile.isFile()) {
          throw new IOException(""String_Node_Str"" + devJarFile.getCanonicalPath() + ""String_Node_Str"");
        }
        sDevJarName=devJarFile.getName();
        String dirPath=jarPath.substring(0,jarPath.lastIndexOf('/') + 1);
        File installDirFile=new File(URI.create(dirPath));
        if (!installDirFile.isDirectory()) {
          throw new IOException(""String_Node_Str"" + installDirFile.getCanonicalPath() + ""String_Node_Str"");
        }
        sInstallPath=installDirFile.getCanonicalPath().replace(File.separatorChar,'/');
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
 else {
      override=override.replace('\\','/');
      int pos=override.lastIndexOf('/');
      if (pos < 0) {
        sInstallPath=""String_Node_Str"";
        sDevJarName=override;
      }
 else {
        sInstallPath=override.substring(0,pos);
        sDevJarName=override.substring(pos + 1);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","private static void computeInstallationPath(){
  try {
    String override=System.getProperty(""String_Node_Str"");
    if (override == null) {
      String partialPath=Utility.class.getName().replace('.','/').concat(""String_Node_Str"");
      URL url=Utility.class.getClassLoader().getResource(partialPath);
      if (url != null && ""String_Node_Str"".equals(url.getProtocol())) {
        String path=url.toString();
        String jarPath=path.substring(path.indexOf(""String_Node_Str""),path.lastIndexOf('!'));
        File devJarFile=new File(URI.create(jarPath));
        if (!devJarFile.isFile()) {
          throw new IOException(""String_Node_Str"" + devJarFile.getCanonicalPath() + ""String_Node_Str"");
        }
        sDevJarName=devJarFile.getName();
        String dirPath=jarPath.substring(0,jarPath.lastIndexOf('/') + 1);
        File installDirFile=new File(URI.create(dirPath));
        if (!installDirFile.isDirectory()) {
          throw new IOException(""String_Node_Str"" + installDirFile.getCanonicalPath() + ""String_Node_Str"");
        }
        sInstallPath=installDirFile.getCanonicalPath().replace(File.separatorChar,'/');
      }
 else {
        throw new IOException(""String_Node_Str"");
      }
    }
 else {
      override=override.replace('\\','/');
      int pos=override.lastIndexOf('/');
      if (pos < 0) {
        sInstallPath=""String_Node_Str"";
        sDevJarName=override;
      }
 else {
        sInstallPath=override.substring(0,pos);
        sDevJarName=override.substring(pos + 1);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
83449,"private boolean tryInlineSimpleMethodCall(JMethodCall x,Mutator m,JMethod method,JReturnStatement returnStmt){
  List params=method.params;
  HolderList args=x.args;
  ChangeList changes=new ChangeList(""String_Node_Str"" + method + ""String_Node_Str"");
  Mutator resultExpression;
  int magicArg[]=new int[1];
  JExpression targetReturnExpr=returnStmt.getExpression();
  resultExpression=canInlineResultExpression(targetReturnExpr,params,args,magicArg,changes);
  if (resultExpression == null) {
    return false;
  }
  int iMagicArg=magicArg[0];
  JMultiExpression multi=new JMultiExpression(program);
  JExpression instance=x.getInstance();
  if (instance != null && instance.hasSideEffects()) {
    changes.addExpression(x.instance,multi.exprs);
  }
  for (int i=0; i < params.size(); ++i) {
    if (args.getExpr(i).hasSideEffects()) {
      if (i < iMagicArg) {
        changes.addExpression(args.getMutator(i),multi.exprs);
      }
 else       if (i == iMagicArg) {
      }
 else {
        assert(i > iMagicArg);
        return false;
      }
    }
  }
  changes.addExpression(resultExpression,multi.exprs);
  changes.replaceExpression(m,multi);
  changeList.add(changes);
  return true;
}","private boolean tryInlineSimpleMethodCall(JMethodCall x,Mutator m,JMethod method,JReturnStatement returnStmt){
  List params=method.params;
  HolderList args=x.args;
  ChangeList changes=new ChangeList(""String_Node_Str"" + method + ""String_Node_Str"");
  Mutator resultExpression;
  int magicArg[]=new int[1];
  JExpression targetReturnExpr=returnStmt.getExpression();
  resultExpression=canInlineResultExpression(targetReturnExpr,params,args,magicArg,changes);
  if (resultExpression == null) {
    return false;
  }
  int iMagicArg=magicArg[0];
  JMultiExpression multi=new JMultiExpression(program);
  JExpression instance=x.getInstance();
  if (instance != null && instance.hasSideEffects()) {
    changes.addExpression(x.instance,multi.exprs);
  }
  for (int i=0; i < params.size(); ++i) {
    if (args.getExpr(i).hasSideEffects()) {
      if (i < iMagicArg) {
        changes.addExpression(args.getMutator(i),multi.exprs);
      }
 else       if (i == iMagicArg) {
      }
 else {
        assert(i > iMagicArg);
        return true;
      }
    }
  }
  changes.addExpression(resultExpression,multi.exprs);
  changes.replaceExpression(m,multi);
  changeList.add(changes);
  return true;
}"
83450,"/** 
 * Tighten based on assignment, and for parameters, callArgs as well.
 */
private void tighten(JVariable x){
  if (!(x.getType() instanceof JReferenceType)) {
    return;
  }
  JReferenceType refType=(JReferenceType)x.getType();
  if (refType == typeNull) {
    return;
  }
  if (!program.typeOracle.isInstantiatedType(refType)) {
    changeList.changeType(x,typeNull);
    return;
  }
  List typeList=new ArrayList();
  typeList.add(typeNull);
  Set myAssignments=(Set)assignments.get(x);
  if (myAssignments != null) {
    for (Iterator iter=myAssignments.iterator(); iter.hasNext(); ) {
      JExpression expr=(JExpression)iter.next();
      JType type=expr.getType();
      if (!(type instanceof JReferenceType)) {
        return;
      }
      typeList.add(type);
    }
  }
  if (x instanceof JParameter) {
    Set myParams=(Set)paramUpRefs.get(x);
    if (myParams != null) {
      for (Iterator iter=myParams.iterator(); iter.hasNext(); ) {
        JParameter param=(JParameter)iter.next();
        typeList.add(param.getType());
      }
    }
  }
  JReferenceType resultType=program.generalizeTypes(typeList);
  resultType=program.strongerType(refType,resultType);
  if (refType != resultType) {
    changeList.changeType(x,resultType);
  }
}","/** 
 * Tighten based on assignment, and for parameters, callArgs as well.
 */
private void tighten(JVariable x){
  if (!(x.getType() instanceof JReferenceType)) {
    return;
  }
  JReferenceType refType=(JReferenceType)x.getType();
  if (refType == typeNull) {
    return;
  }
  if (!program.typeOracle.isInstantiatedType(refType)) {
    changeList.changeType(x,typeNull);
    return;
  }
  List typeList=new ArrayList();
  if (!(x instanceof JParameter)) {
    typeList.add(typeNull);
  }
  Set myAssignments=(Set)assignments.get(x);
  if (myAssignments != null) {
    for (Iterator iter=myAssignments.iterator(); iter.hasNext(); ) {
      JExpression expr=(JExpression)iter.next();
      JType type=expr.getType();
      if (!(type instanceof JReferenceType)) {
        return;
      }
      typeList.add(type);
    }
  }
  if (x instanceof JParameter) {
    Set myParams=(Set)paramUpRefs.get(x);
    if (myParams != null) {
      for (Iterator iter=myParams.iterator(); iter.hasNext(); ) {
        JParameter param=(JParameter)iter.next();
        typeList.add(param.getType());
      }
    }
  }
  if (typeList.isEmpty()) {
    return;
  }
  JReferenceType resultType=program.generalizeTypes(typeList);
  resultType=program.strongerType(refType,resultType);
  if (refType != resultType) {
    changeList.changeType(x,resultType);
  }
}"
83451,"public Throwable initCause(Throwable cause){
  if (cause != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (cause == this) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  cause=cause;
  return this;
}","public Throwable initCause(Throwable cause){
  if (this.cause != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (cause == this) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.cause=cause;
  return this;
}"
83452,"private static void findEntryPoints(TreeLogger logger,String[] mainClassNames,JProgram program) throws UnableToCompleteException {
  JMethod bootStrapMethod=program.createMethod(""String_Node_Str"".toCharArray(),null,program.getTypeVoid(),false,true,true,false,false);
  bootStrapMethod.freezeParamTypes();
  for (int i=0; i < mainClassNames.length; ++i) {
    String mainClassName=mainClassNames[i];
    JReferenceType referenceType=program.getFromTypeMap(mainClassName);
    if (referenceType == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    if (!(referenceType instanceof JClassType)) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    JClassType mainClass=(JClassType)referenceType;
    JMethod mainMethod=null;
    outer:     for (JClassType it=mainClass; it != null; it=it.extnds) {
      for (int j=0; j < it.methods.size(); ++j) {
        JMethod method=(JMethod)it.methods.get(j);
        if (method.getName().equals(""String_Node_Str"")) {
          mainMethod=method;
          break outer;
        }
      }
    }
    if (mainMethod == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName,null);
      throw new UnableToCompleteException();
    }
    if (mainMethod.params.size() > 0) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    if (mainMethod.isAbstract()) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    JExpression qualifier=null;
    if (!mainMethod.isStatic()) {
      JMethod noArgCtor=null;
      for (int j=0; j < mainClass.methods.size(); ++j) {
        JMethod ctor=(JMethod)mainClass.methods.get(j);
        if (ctor.getName().equals(mainClass.getShortName())) {
          if (ctor.params.size() == 0) {
            noArgCtor=ctor;
          }
        }
      }
      if (noArgCtor == null) {
        logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
        throw new UnableToCompleteException();
      }
      JNewInstance newInstance=new JNewInstance(program,mainClass);
      qualifier=new JMethodCall(program,newInstance,noArgCtor);
    }
    JMethodCall onModuleLoadCall=new JMethodCall(program,qualifier,mainMethod);
    onModuleLoadCall.setCanBePolymorphic(true);
    bootStrapMethod.body.statements.add(new JExpressionStatement(program,onModuleLoadCall));
  }
  program.addEntryMethod(bootStrapMethod);
}","private static void findEntryPoints(TreeLogger logger,String[] mainClassNames,JProgram program) throws UnableToCompleteException {
  JMethod bootStrapMethod=program.createMethod(""String_Node_Str"".toCharArray(),null,program.getTypeVoid(),false,true,true,false,false);
  bootStrapMethod.freezeParamTypes();
  for (int i=0; i < mainClassNames.length; ++i) {
    String mainClassName=mainClassNames[i];
    JReferenceType referenceType=program.getFromTypeMap(mainClassName);
    if (referenceType == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    if (!(referenceType instanceof JClassType)) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    JClassType mainClass=(JClassType)referenceType;
    JMethod mainMethod=null;
    outer:     for (JClassType it=mainClass; it != null; it=it.extnds) {
      for (int j=0; j < it.methods.size(); ++j) {
        JMethod method=(JMethod)it.methods.get(j);
        if (method.getName().equals(""String_Node_Str"")) {
          mainMethod=method;
          break outer;
        }
      }
    }
    if (mainMethod == null) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName,null);
      throw new UnableToCompleteException();
    }
    if (mainMethod.params.size() > 0) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    if (mainMethod.isAbstract()) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
      throw new UnableToCompleteException();
    }
    JExpression qualifier=null;
    if (!mainMethod.isStatic()) {
      JMethod noArgCtor=null;
      for (int j=0; j < mainClass.methods.size(); ++j) {
        JMethod ctor=(JMethod)mainClass.methods.get(j);
        if (ctor.getName().equals(mainClass.getShortName())) {
          if (ctor.params.size() == 0) {
            noArgCtor=ctor;
          }
        }
      }
      if (noArgCtor == null) {
        logger.log(TreeLogger.ERROR,""String_Node_Str"" + mainClassName + ""String_Node_Str"",null);
        throw new UnableToCompleteException();
      }
      JNewInstance newInstance=new JNewInstance(program,mainClass);
      qualifier=new JMethodCall(program,newInstance,noArgCtor);
    }
    JMethodCall onModuleLoadCall=new JMethodCall(program,qualifier,mainMethod);
    bootStrapMethod.body.statements.add(new JExpressionStatement(program,onModuleLoadCall));
  }
  program.addEntryMethod(bootStrapMethod);
}"
83453,"/** 
 * Create a method call whose type is overriden to the specified type, ignoring the return type of the target method. This constructor is used during normalizing transformations to preserve type semantics when calling externally-defined compiler implementation methods. For example, Cast.dynamicCast() returns Object but that method is used to implement the cast operation. Using a stronger type on the call expression allows us to preserve type information during the latter phases of compilation.
 */
public JMethodCall(JProgram program,JExpression instance,JMethod method,JType overrideReturnType){
  super(program);
  this.instance.set(instance);
  this.method=method;
  this.canBePolymorphic=false;
  assert(overrideReturnType != null);
  this.overrideReturnType=overrideReturnType;
}","/** 
 * Create a method call whose type is overriden to the specified type, ignoring the return type of the target method. This constructor is used during normalizing transformations to preserve type semantics when calling externally-defined compiler implementation methods. For example, Cast.dynamicCast() returns Object but that method is used to implement the cast operation. Using a stronger type on the call expression allows us to preserve type information during the latter phases of compilation.
 */
public JMethodCall(JProgram program,JExpression instance,JMethod method,JType overrideReturnType){
  super(program);
  this.instance.set(instance);
  this.method=method;
  assert(overrideReturnType != null);
  this.overrideReturnType=overrideReturnType;
}"
83454,"public boolean canBePolymorphic(){
  return canBePolymorphic && !method.isFinal() && !method.isStatic();
}","public boolean canBePolymorphic(){
  return !staticDispatchOnly && !method.isFinal() && !method.isStatic();
}"
83455,"public JsniMethodRef(JProgram program,JMethod method){
  super(program,null,method);
  setCanBePolymorphic(true);
}","public JsniMethodRef(JProgram program,JMethod method){
  super(program,null,method);
}"
83456,"public void endVisit(JMethodCall x,Mutator m){
  JMethod method=x.getTarget();
  JExpression instance=x.getInstance();
  if (!x.canBePolymorphic()) {
    return;
  }
  JType instanceType=instance.getType();
  JReferenceType enclosingType=method.getEnclosingType();
  if (instanceType == enclosingType || instanceType instanceof JInterfaceType) {
    return;
  }
  if (instanceType instanceof JArrayType) {
    return;
  }
  if (instanceType instanceof JNullType) {
    return;
  }
  assert(instanceType instanceof JClassType);
  JMethod foundMethod=null;
  JClassType type;
  outer:   for (type=(JClassType)instanceType; type != null && type != enclosingType; type=type.extnds) {
    for (int i=0; i < type.methods.size(); ++i) {
      JMethod methodIt=(JMethod)type.methods.get(i);
      if (JProgram.methodsDoMatch(method,methodIt)) {
        foundMethod=methodIt;
        break outer;
      }
    }
  }
  if (foundMethod == null) {
    return;
  }
  ChangeList changes=new ChangeList(""String_Node_Str"" + x + ""String_Node_Str""+ enclosingType+ ""String_Node_Str""+ foundMethod.getEnclosingType()+ ""String_Node_Str"");
  JMethodCall call=new JMethodCall(program,null,foundMethod);
  call.setCanBePolymorphic(true);
  changes.replaceExpression(m,call);
  changes.replaceExpression(call.instance,x.instance);
  for (int i=0; i < x.args.size(); ++i) {
    Mutator arg=x.args.getMutator(i);
    changes.addExpression(arg,call.args);
  }
  changeList.add(changes);
  return;
}","public void endVisit(JMethodCall x,Mutator m){
  JMethod method=x.getTarget();
  JExpression instance=x.getInstance();
  if (!x.canBePolymorphic()) {
    return;
  }
  JType instanceType=instance.getType();
  JReferenceType enclosingType=method.getEnclosingType();
  if (instanceType == enclosingType || instanceType instanceof JInterfaceType) {
    return;
  }
  if (instanceType instanceof JArrayType) {
    return;
  }
  if (instanceType instanceof JNullType) {
    return;
  }
  assert(instanceType instanceof JClassType);
  JMethod foundMethod=null;
  JClassType type;
  outer:   for (type=(JClassType)instanceType; type != null && type != enclosingType; type=type.extnds) {
    for (int i=0; i < type.methods.size(); ++i) {
      JMethod methodIt=(JMethod)type.methods.get(i);
      if (JProgram.methodsDoMatch(method,methodIt)) {
        foundMethod=methodIt;
        break outer;
      }
    }
  }
  if (foundMethod == null) {
    return;
  }
  ChangeList changes=new ChangeList(""String_Node_Str"" + x + ""String_Node_Str""+ enclosingType+ ""String_Node_Str""+ foundMethod.getEnclosingType()+ ""String_Node_Str"");
  JMethodCall call=new JMethodCall(program,null,foundMethod);
  changes.replaceExpression(m,call);
  changes.replaceExpression(call.instance,x.instance);
  for (int i=0; i < x.args.size(); ++i) {
    Mutator arg=x.args.getMutator(i);
    changes.addExpression(arg,call.args);
  }
  changeList.add(changes);
  return;
}"
83457,"@Override public <T extends Event>void dispatchEvent(T event,Object... objects){
  Class<? extends Event> type=event.getClass();
  PriorityQueue<Entry<IEventListener>> listenerEntryQueue=new PriorityQueue<Entry<IEventListener>>(16,new Comparator<Entry<IEventListener>>(){
    public int compare(    Entry<IEventListener> o1,    Entry<IEventListener> o2){
      return o2.priority - o1.priority;
    }
  }
);
  for (  Object object : objects) {
    Class<?> clz=object.getClass();
    Map<Object,List<Entry<IEventListener>>> objectListenerContainers=objectListenerContainersMap.get(type);
    if (objectListenerContainers == null)     return;
    List<Entry<IEventListener>> classListeners=objectListenerContainers.get(clz);
    List<Entry<IEventListener>> listeners=objectListenerContainers.get(object);
    if (listeners != null)     for (int i=0; i < listeners.size(); i++) {
      Entry<IEventListener> entry=listeners.get(i);
      if (entry.getValue() == null) {
        listeners.remove(i);
        i--;
      }
 else       listenerEntryQueue.add(entry);
    }
    if (classListeners != null)     for (int i=0; i < classListeners.size(); i++) {
      Entry<IEventListener> entry=classListeners.get(i);
      if (entry.getValue() == null) {
        listeners.remove(i);
        i--;
      }
 else       listenerEntryQueue.add(entry);
    }
  }
  while (event.interrupted) {
    Entry<IEventListener> entry=listenerEntryQueue.poll();
    IEventListener listener=entry.getValue();
    if (listener == null)     continue;
    listener.handleEvent(event);
  }
}","@Override public <T extends Event>void dispatchEvent(T event,Object... objects){
  Class<? extends Event> type=event.getClass();
  PriorityQueue<Entry<IEventListener>> listenerEntryQueue=new PriorityQueue<Entry<IEventListener>>(16,new Comparator<Entry<IEventListener>>(){
    public int compare(    Entry<IEventListener> o1,    Entry<IEventListener> o2){
      return o2.priority - o1.priority;
    }
  }
);
  for (  Object object : objects) {
    Class<?> clz=object.getClass();
    Map<Object,List<Entry<IEventListener>>> objectListenerContainers=objectListenerContainersMap.get(type);
    if (objectListenerContainers == null)     return;
    List<Entry<IEventListener>> classListeners=objectListenerContainers.get(clz);
    List<Entry<IEventListener>> listeners=objectListenerContainers.get(object);
    if (listeners != null)     for (int i=0; i < listeners.size(); i++) {
      Entry<IEventListener> entry=listeners.get(i);
      if (entry.getValue() == null) {
        listeners.remove(i);
        i--;
      }
 else       listenerEntryQueue.add(entry);
    }
    if (classListeners != null)     for (int i=0; i < classListeners.size(); i++) {
      Entry<IEventListener> entry=classListeners.get(i);
      if (entry.getValue() == null) {
        listeners.remove(i);
        i--;
      }
 else       listenerEntryQueue.add(entry);
    }
  }
  while (listenerEntryQueue.isEmpty() == false && event.isInterrupted() == false) {
    Entry<IEventListener> entry=listenerEntryQueue.poll();
    IEventListener listener=entry.getValue();
    if (listener == null)     continue;
    listener.handleEvent(event);
  }
}"
83458,"@Override public <T extends Event>void addListener(Class<T> type,Object object,IEventListener listener,short customPriority){
  Map<Object,List<Entry<IEventListener>>> objectListeners=objectListenerContainersMap.get(type);
  if (objectListeners == null) {
    objectListeners=new HashMap<Object,List<Entry<IEventListener>>>();
    objectListenerContainersMap.put(type,objectListeners);
  }
  List<Entry<IEventListener>> listeners=objectListeners.get(object);
  if (listeners == null) {
    listeners=new Vector<Entry<IEventListener>>();
    objectListeners.put(type,listeners);
  }
  for (int i=0; i < listeners.size(); i++) {
    if (listeners.get(i).getValue() == listener) {
      listeners.remove(i);
      break;
    }
  }
  Entry<IEventListener> entry=new Entry<IEventListener>(customPriority,listener);
  listeners.add(entry);
}","@Override public <T extends Event>void addListener(Class<T> type,Object object,IEventListener listener,short customPriority){
  Map<Object,List<Entry<IEventListener>>> objectListeners=objectListenerContainersMap.get(type);
  if (objectListeners == null) {
    objectListeners=new HashMap<Object,List<Entry<IEventListener>>>();
    objectListenerContainersMap.put(type,objectListeners);
  }
  List<Entry<IEventListener>> listeners=objectListeners.get(object);
  if (listeners == null) {
    listeners=new Vector<Entry<IEventListener>>();
    objectListeners.put(object,listeners);
  }
  for (int i=0; i < listeners.size(); i++) {
    if (listeners.get(i).getValue() == listener) {
      listeners.remove(i);
      break;
    }
  }
  Entry<IEventListener> entry=new Entry<IEventListener>(customPriority,listener);
  listeners.add(entry);
}"
83459,"Shoebill(){
  globalEventDispatcher=new EventManager();
  sampCallbackManager=new SampCallbackManager();
  managedObjectPool=new SampObjectPool();
  pluginManager=new PluginManager(this,new File(""String_Node_Str""),new File(""String_Node_Str""));
  sampEventLogger=new SampEventLogger(managedObjectPool);
  sampEventDispatcher=new SampEventDispatcher(managedObjectPool,globalEventDispatcher);
  initialize();
}","Shoebill(){
  instance=this;
  globalEventDispatcher=new EventManager();
  sampCallbackManager=new SampCallbackManager();
  managedObjectPool=new SampObjectPool();
  pluginManager=new PluginManager(this,new File(""String_Node_Str""),new File(""String_Node_Str""));
  sampEventLogger=new SampEventLogger(managedObjectPool);
  sampEventDispatcher=new SampEventDispatcher(managedObjectPool,globalEventDispatcher);
  initialize();
}"
83460,"protected Player(int id){
  this.id=id;
  SampNativeFunction.getPlayerPos(id,location);
  SampNativeFunction.getPlayerFacingAngle(id);
  location.interiorId=SampNativeFunction.getPlayerInterior(id);
  location.worldId=SampNativeFunction.getPlayerVirtualWorld(id);
  SampNativeFunction.getPlayerVelocity(id,velocity);
  SampNativeFunction.getPlayerKeys(id,keyState);
  playerAttach=new PlayerAttach(id);
  skill=new PlayerWeaponSkill(id);
  SampObjectPool pool=(SampObjectPool)Shoebill.getInstance().getManagedObjectPool();
  if (pool.getPlayer(id) != null)   throw new UnsupportedOperationException();
  pool.setPlayer(id,this);
}","public Player(int id){
  this.id=id;
  SampNativeFunction.getPlayerPos(id,location);
  SampNativeFunction.getPlayerFacingAngle(id);
  location.interiorId=SampNativeFunction.getPlayerInterior(id);
  location.worldId=SampNativeFunction.getPlayerVirtualWorld(id);
  SampNativeFunction.getPlayerVelocity(id,velocity);
  SampNativeFunction.getPlayerKeys(id,keyState);
  playerAttach=new PlayerAttach(id);
  skill=new PlayerWeaponSkill(id);
  SampObjectPool pool=(SampObjectPool)Shoebill.getInstance().getManagedObjectPool();
  if (pool.getPlayer(id) != null)   throw new UnsupportedOperationException();
  pool.setPlayer(id,this);
}"
83461,"@Override public <T extends Event>void dispatchEvent(T event,Object... objects){
  Class<? extends Event> type=event.getClass();
  PriorityQueue<Entry<IEventListener>> listenerEntryQueue=new PriorityQueue<Entry<IEventListener>>(16,new Comparator<Entry<IEventListener>>(){
    public int compare(    Entry<IEventListener> o1,    Entry<IEventListener> o2){
      return o2.priority - o1.priority;
    }
  }
);
  for (  Object object : objects) {
    Class<?> clz=object.getClass();
    Map<Object,List<Entry<IEventListener>>> objectListenerContainers=objectListenerContainersMap.get(type);
    if (objectListenerContainers == null)     return;
    List<Entry<IEventListener>> classListeners=objectListenerContainers.get(clz);
    List<Entry<IEventListener>> listeners=objectListenerContainers.get(object);
    if (listeners != null)     for (int i=0; i < listeners.size(); i++) {
      Entry<IEventListener> entry=listeners.get(i);
      if (entry.getValue() == null) {
        listeners.remove(i);
        i--;
      }
 else       listenerEntryQueue.add(entry);
    }
    if (classListeners != null)     for (int i=0; i < classListeners.size(); i++) {
      Entry<IEventListener> entry=classListeners.get(i);
      if (entry.getValue() == null) {
        listeners.remove(i);
        i--;
      }
 else       listenerEntryQueue.add(entry);
    }
  }
  while (event.interrupted) {
    Entry<IEventListener> entry=listenerEntryQueue.poll();
    IEventListener listener=entry.getValue();
    if (listener == null)     continue;
    listener.handleEvent(event);
  }
}","@Override public <T extends Event>void dispatchEvent(T event,Object... objects){
  Class<? extends Event> type=event.getClass();
  PriorityQueue<Entry<IEventListener>> listenerEntryQueue=new PriorityQueue<Entry<IEventListener>>(16,new Comparator<Entry<IEventListener>>(){
    public int compare(    Entry<IEventListener> o1,    Entry<IEventListener> o2){
      return o2.priority - o1.priority;
    }
  }
);
  for (  Object object : objects) {
    Class<?> clz=object.getClass();
    Map<Object,List<Entry<IEventListener>>> objectListenerContainers=objectListenerContainersMap.get(type);
    if (objectListenerContainers == null)     return;
    List<Entry<IEventListener>> classListeners=objectListenerContainers.get(clz);
    List<Entry<IEventListener>> listeners=objectListenerContainers.get(object);
    if (listeners != null)     for (int i=0; i < listeners.size(); i++) {
      Entry<IEventListener> entry=listeners.get(i);
      if (entry.getValue() == null) {
        listeners.remove(i);
        i--;
      }
 else       listenerEntryQueue.add(entry);
    }
    if (classListeners != null)     for (int i=0; i < classListeners.size(); i++) {
      Entry<IEventListener> entry=classListeners.get(i);
      if (entry.getValue() == null) {
        listeners.remove(i);
        i--;
      }
 else       listenerEntryQueue.add(entry);
    }
  }
  while (listenerEntryQueue.isEmpty() == false && event.isInterrupted() == false) {
    Entry<IEventListener> entry=listenerEntryQueue.poll();
    IEventListener listener=entry.getValue();
    if (listener == null)     continue;
    listener.handleEvent(event);
  }
}"
83462,"@Override public <T extends Event>void addListener(Class<T> type,Object object,IEventListener listener,short customPriority){
  Map<Object,List<Entry<IEventListener>>> objectListeners=objectListenerContainersMap.get(type);
  if (objectListeners == null) {
    objectListeners=new HashMap<Object,List<Entry<IEventListener>>>();
    objectListenerContainersMap.put(type,objectListeners);
  }
  List<Entry<IEventListener>> listeners=objectListeners.get(object);
  if (listeners == null) {
    listeners=new Vector<Entry<IEventListener>>();
    objectListeners.put(type,listeners);
  }
  for (int i=0; i < listeners.size(); i++) {
    if (listeners.get(i).getValue() == listener) {
      listeners.remove(i);
      break;
    }
  }
  Entry<IEventListener> entry=new Entry<IEventListener>(customPriority,listener);
  listeners.add(entry);
}","@Override public <T extends Event>void addListener(Class<T> type,Object object,IEventListener listener,short customPriority){
  Map<Object,List<Entry<IEventListener>>> objectListeners=objectListenerContainersMap.get(type);
  if (objectListeners == null) {
    objectListeners=new HashMap<Object,List<Entry<IEventListener>>>();
    objectListenerContainersMap.put(type,objectListeners);
  }
  List<Entry<IEventListener>> listeners=objectListeners.get(object);
  if (listeners == null) {
    listeners=new Vector<Entry<IEventListener>>();
    objectListeners.put(object,listeners);
  }
  for (int i=0; i < listeners.size(); i++) {
    if (listeners.get(i).getValue() == listener) {
      listeners.remove(i);
      break;
    }
  }
  Entry<IEventListener> entry=new Entry<IEventListener>(customPriority,listener);
  listeners.add(entry);
}"
83463,"private void init(float x,float y,float z,int interior,int world,float angle){
  id=NativeFunction.createVehicle(model,x,y,z,angle,color1,color2,respawnDelay);
  NativeFunction.linkVehicleToInterior(id,interior);
  NativeFunction.setVehicleVirtualWorld(id,world);
  param=new VehicleParam(id);
  component=new VehicleComponent(id);
  damage=new VehicleDamage(id);
}","private void init(float x,float y,float z,int interior,int world,float angle){
  id=NativeFunction.createVehicle(model,x,y,z,angle,color1,color2,respawnDelay);
  NativeFunction.linkVehicleToInterior(id,interior);
  NativeFunction.setVehicleVirtualWorld(id,world);
  param=new VehicleParam(id);
  component=new VehicleComponent(id);
  damage=new VehicleDamage(id);
  GameModeBase.instance.vehiclePool[id]=this;
}"
83464,"@Override public void whitespace(int n){
  while (n > 8) {
    appendText(WS8);
    n-=8;
  }
  if (n > 0)   appendText(WHITESPACES.get(n));
}","@Override public void whitespace(int n){
  while (n >= 8) {
    appendText(WS8);
    n-=8;
  }
  if (n > 0)   appendText(WHITESPACES.get(n));
}"
83465,"/** 
 * Invoked by   {@link AstGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final AstGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
switch (e.getKind()) {
case ENUM_CONSTANT:
case FIELD:
          gen.add(new FieldDecl(cu,srcPos,vt));
        break;
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
case PARAMETER:
      gen.add(new LocalVarDecl(cu,srcPos,vt,e));
    break;
}
Token token;
if (e.getKind() != ElementKind.ENUM_CONSTANT) {
  token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
}
 else {
  token=gen.findTokenAfter(vt,false,vt.getName().toString());
}
if (token != null) gen.add(new DeclName(lineMap,token));
}
return super.visitVariable(vt,_);
}
/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
if (e != null) {
if (e.getKind() == ElementKind.CONSTRUCTOR && e.getEnclosingElement().getSimpleName().length() == 0) return _;
Tree prev=mt.getReturnType();
String name;
if (e.getKind() == ElementKind.CONSTRUCTOR) name=e.getEnclosingElement().getSimpleName().toString();
 else name=mt.getName().toString();
Token token;
if (prev != null) token=gen.findTokenAfter(prev,true,name);
 else token=gen.findTokenAfter(mt,false,name);
if (token != null) gen.add(new DeclName(lineMap,token));
ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
gen.add(new MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
}
return super.visitMethod(mt,_);
}
/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
TypeElement e=(TypeElement)TreeUtil.getElement(ct);
if (e != null) {
Token token=null;
if (ct.getModifiers() != null) token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
if (token == null) token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
if (token != null) gen.add(new DeclName(lineMap,token));
List<ParsedType> descendants=getParsedType(e).descendants;
gen.add(new ClassDecl(cu,srcPos,ct,e,descendants));
if (e.getNestingKind() == NestingKind.ANONYMOUS) {
  scan(ct.getMembers());
  return _;
}
}
return super.visitClass(ct,_);
}
/** 
 * All the symbols found in the source code.
 */
public Void visitIdentifier(IdentifierTree id,Void _){
if (!ReservedWords.LIST.contains(id.getName().toString())) {
Element e=TreeUtil.getElement(id);
if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    gen.add(new TypeRef(cu,srcPos,id,(TypeElement)e));
  break;
case FIELD:
case ENUM_CONSTANT:
gen.add(new FieldRef(cu,srcPos,id,(VariableElement)e));
break;
case PARAMETER:
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
gen.add(new LocalVarRef(cu,srcPos,id,(VariableElement)e));
break;
}
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
gen.add(new FieldRef(sp,ep,(VariableElement)e));
break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
Element e=TreeUtil.getElement(nt);
if (e instanceof ExecutableElement) {
ExecutableElement ee=(ExecutableElement)e;
TypeElement ownerType=(TypeElement)ee.getEnclosingElement();
if (ownerType.getSimpleName().length() == 0) {
scan(nt.getIdentifier());
}
 else {
gen.add(new MethodRef(sp,ep,ee));
}
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
Element e=TreeUtil.getElement(mi);
if (e instanceof ExecutableElement) {
ExecutableElement ee=(ExecutableElement)e;
Name methodName=ee.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new MethodRef(ep - methodName.length(),ep,ee));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}","/** 
 * Invoked by   {@link AstGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final AstGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
switch (e.getKind()) {
case ENUM_CONSTANT:
case FIELD:
          gen.add(new FieldDecl(cu,srcPos,vt));
        break;
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
case PARAMETER:
      gen.add(new LocalVarDecl(cu,srcPos,vt,e));
    break;
}
Token token;
if (e.getKind() != ElementKind.ENUM_CONSTANT) {
  token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
}
 else {
  token=gen.findTokenAfter(vt,false,vt.getName().toString());
}
if (token != null) gen.add(new DeclName(lineMap,token));
}
return super.visitVariable(vt,_);
}
/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
if (e != null) {
if (((MethodSymbol)e).isSynthetic()) return _;
Tree prev=mt.getReturnType();
String name;
if (e.getKind() == ElementKind.CONSTRUCTOR) name=e.getEnclosingElement().getSimpleName().toString();
 else name=mt.getName().toString();
Token token;
if (prev != null) token=gen.findTokenAfter(prev,true,name);
 else token=gen.findTokenAfter(mt,false,name);
if (token != null) gen.add(new DeclName(lineMap,token));
ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
gen.add(new MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
}
return super.visitMethod(mt,_);
}
/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
TypeElement e=(TypeElement)TreeUtil.getElement(ct);
if (e != null) {
Token token=null;
if (ct.getModifiers() != null) token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
if (token == null) token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
if (token != null) gen.add(new DeclName(lineMap,token));
List<ParsedType> descendants=getParsedType(e).descendants;
gen.add(new ClassDecl(cu,srcPos,ct,e,descendants));
if (e.getNestingKind() == NestingKind.ANONYMOUS) {
  scan(ct.getMembers());
  return _;
}
}
return super.visitClass(ct,_);
}
/** 
 * All the symbols found in the source code.
 */
public Void visitIdentifier(IdentifierTree id,Void _){
if (!ReservedWords.LIST.contains(id.getName().toString())) {
Element e=TreeUtil.getElement(id);
if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    gen.add(new TypeRef(cu,srcPos,id,(TypeElement)e));
  break;
case FIELD:
case ENUM_CONSTANT:
gen.add(new FieldRef(cu,srcPos,id,(VariableElement)e));
break;
case PARAMETER:
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
gen.add(new LocalVarRef(cu,srcPos,id,(VariableElement)e));
break;
}
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
gen.add(new FieldRef(sp,ep,(VariableElement)e));
break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
Element e=TreeUtil.getElement(nt);
if (e instanceof ExecutableElement) {
ExecutableElement ee=(ExecutableElement)e;
TypeElement ownerType=(TypeElement)ee.getEnclosingElement();
if (ownerType.getSimpleName().length() == 0) {
scan(nt.getIdentifier());
}
 else {
gen.add(new MethodRef(sp,ep,ee));
}
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
Element e=TreeUtil.getElement(mi);
if (e instanceof ExecutableElement) {
ExecutableElement ee=(ExecutableElement)e;
Name methodName=ee.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new MethodRef(ep - methodName.length(),ep,ee));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}"
83466,"/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
  ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
  if (e != null) {
    if (e.getKind() == ElementKind.CONSTRUCTOR && e.getEnclosingElement().getSimpleName().length() == 0)     return _;
    Tree prev=mt.getReturnType();
    String name;
    if (e.getKind() == ElementKind.CONSTRUCTOR)     name=e.getEnclosingElement().getSimpleName().toString();
 else     name=mt.getName().toString();
    Token token;
    if (prev != null)     token=gen.findTokenAfter(prev,true,name);
 else     token=gen.findTokenAfter(mt,false,name);
    if (token != null)     gen.add(new DeclName(lineMap,token));
    ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
    gen.add(new MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
  }
  return super.visitMethod(mt,_);
}","/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
  ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
  if (e != null) {
    if (((MethodSymbol)e).isSynthetic())     return _;
    Tree prev=mt.getReturnType();
    String name;
    if (e.getKind() == ElementKind.CONSTRUCTOR)     name=e.getEnclosingElement().getSimpleName().toString();
 else     name=mt.getName().toString();
    Token token;
    if (prev != null)     token=gen.findTokenAfter(prev,true,name);
 else     token=gen.findTokenAfter(mt,false,name);
    if (token != null)     gen.add(new DeclName(lineMap,token));
    ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
    gen.add(new MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
  }
  return super.visitMethod(mt,_);
}"
83467,"/** 
 * Creates a configured   {@link JavacTask}.
 */
protected JavacTask configure(DiagnosticListener<? super JavaFileObject> errorListener) throws IOException {
  JavaCompiler javac=JavacTool.create();
  StandardJavaFileManager fileManager=new TabExpandingFileManager(javac.getStandardFileManager(errorListener,locale,encoding),encoding,tabWidth);
  fileManager.setLocation(StandardLocation.CLASS_PATH,classpath);
  List<String> options=Collections.emptyList();
  Iterable<? extends JavaFileObject> files=fileManager.getJavaFileObjectsFromFiles(sourceFiles);
  CompilationTask task=javac.getTask(null,fileManager,errorListener,options,null,files);
  return (JavacTask)task;
}","/** 
 * Creates a configured   {@link JavacTask}.
 */
protected JavacTask configure(DiagnosticListener<? super JavaFileObject> errorListener) throws IOException {
  JavaCompiler javac=JavacTool.create();
  StandardJavaFileManager fileManager=new TabExpandingFileManager(javac.getStandardFileManager(errorListener,locale,encoding),encoding,tabWidth);
  fileManager.setLocation(StandardLocation.CLASS_PATH,classpath);
  List<String> options=Arrays.asList(""String_Node_Str"");
  Iterable<? extends JavaFileObject> files=fileManager.getJavaFileObjectsFromFiles(sourceFiles);
  CompilationTask task=javac.getTask(null,fileManager,errorListener,options,null,files);
  return (JavacTask)task;
}"
83468,"public StringBuilder visitType(TypeElement t,Void _){
  ClassTree ct=trees.getTree(t);
  if (ct == null)   return null;
switch (t.getNestingKind()) {
case ANONYMOUS:
    String binaryName=elements.getBinaryName(t).toString();
  int idx=binaryName.lastIndexOf('$');
String name=""String_Node_Str"" + binaryName.substring(idx);
return combine(getEnclosingTypeOrPackage(t).accept(this,null)).append(name);
case TOP_LEVEL:
CompilationUnitTree owner=pss.getTreePathByClass().get(ct).getCompilationUnit();
String primaryTypeName=TreeUtil.getPrimaryTypeName(owner);
String simpleName=ct.getSimpleName().toString();
StringBuilder buf=new StringBuilder();
if (!primaryTypeName.equals(simpleName)) {
buf.append(""String_Node_Str"").append(simpleName);
}
return buf;
case MEMBER:
case LOCAL:
return recurse(t).append('~').append(t.getSimpleName());
default :
throw new IllegalStateException(t.getNestingKind().toString());
}
}","public StringBuilder visitType(TypeElement t,Void _){
  ClassTree ct=trees.getTree(t);
  if (ct == null)   return new StringBuilder();
switch (t.getNestingKind()) {
case ANONYMOUS:
    String binaryName=elements.getBinaryName(t).toString();
  int idx=binaryName.lastIndexOf('$');
String name=""String_Node_Str"" + binaryName.substring(idx);
return combine(getEnclosingTypeOrPackage(t).accept(this,null)).append(name);
case TOP_LEVEL:
CompilationUnitTree owner=pss.getTreePathByClass().get(ct).getCompilationUnit();
String primaryTypeName=TreeUtil.getPrimaryTypeName(owner);
String simpleName=ct.getSimpleName().toString();
StringBuilder buf=new StringBuilder();
if (!primaryTypeName.equals(simpleName)) {
buf.append(""String_Node_Str"").append(simpleName);
}
return buf;
case MEMBER:
case LOCAL:
return recurse(t).append('~').append(t.getSimpleName());
default :
throw new IllegalStateException(t.getNestingKind().toString());
}
}"
83469,"public void doDynamic(StaplerRequest req,StaplerResponse rsp) throws IOException {
  String path=req.getRestOfPath();
  Generator g=generators.get(path);
  if (g == null) {
    rsp.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (req.checkIfModified(timestamp,rsp,expiration))   return;
  g.doDynamic(req,rsp);
}","public void doDynamic(StaplerRequest req,StaplerResponse rsp) throws IOException {
  String path=req.getRestOfPath();
  if (path.length() > 0)   path=path.substring(1);
  Generator g=generators.get(path);
  if (g == null) {
    rsp.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (req.checkIfModified(timestamp,rsp,expiration))   return;
  g.doDynamic(req,rsp);
}"
83470,"public Sorcerer(final ParsedSourceSet pss,long timestamp,long expiration) throws IOException {
  this.fsg=new FrameSetGenerator(pss);
  this.timestamp=timestamp;
  this.expiration=expiration;
  for (  final CompilationUnitTree cu : pss.getCompilationUnits()) {
    generators.put(new AstGenerator(pss,cu).getRelativePath(),new JavaScriptGenerator(){
      void doDynamic(      StaplerRequest request,      StaplerResponse rsp) throws IOException {
        new AstGenerator(pss,cu).write(rsp.getWriter());
      }
    }
);
  }
  generators.put(""String_Node_Str"",new HtmlGenerator(){
    void doDynamic(    StaplerRequest request,    StaplerResponse rsp) throws IOException {
      fsg.generateIndex(open(rsp));
    }
  }
);
  generators.put(""String_Node_Str"",new JavaScriptGenerator(){
    void doDynamic(    StaplerRequest request,    StaplerResponse rsp) throws IOException {
      fsg.generatePackageListJs(open(rsp));
    }
  }
);
  generators.put(""String_Node_Str"",new Generator(){
    String getContentType(    String restOfPath){
      return ""String_Node_Str"";
    }
    void doDynamic(    StaplerRequest request,    StaplerResponse rsp) throws IOException {
      fsg.generatePackageList(open(rsp));
    }
  }
);
  for (  final PackageElement p : pss.getPackageElement()) {
    String path;
    if (p.isUnnamed())     path=""String_Node_Str"";
 else     path=p.getQualifiedName().toString().replace('.','/') + '/';
    path+=""String_Node_Str"";
    generators.put(path,new JavaScriptGenerator(){
      void doDynamic(      StaplerRequest request,      StaplerResponse rsp) throws IOException {
        fsg.generateClassListJs(p,open(rsp));
      }
    }
);
  }
  for (  final String r : FrameSetGenerator.RESOURCES) {
    generators.put(r,new Generator(){
      void doDynamic(      StaplerRequest request,      StaplerResponse rsp) throws IOException {
        IOUtil.copy(r,rsp.getOutputStream());
      }
    }
);
  }
}","public Sorcerer(final ParsedSourceSet pss,long timestamp,long expiration) throws IOException {
  this.fsg=new FrameSetGenerator(pss);
  this.timestamp=timestamp;
  this.expiration=expiration;
  for (  final CompilationUnitTree cu : pss.getCompilationUnits()) {
    generators.put(new AstGenerator(pss,cu).getRelativePath(),new JavaScriptGenerator(){
      void doDynamic(      StaplerRequest request,      StaplerResponse rsp) throws IOException {
        new AstGenerator(pss,cu).write(rsp.getWriter());
      }
    }
);
  }
  generators.put(""String_Node_Str"",new HtmlGenerator(){
    void doDynamic(    StaplerRequest request,    StaplerResponse rsp) throws IOException {
      fsg.generateIndex(open(rsp));
    }
  }
);
  generators.put(""String_Node_Str"",new JavaScriptGenerator(){
    void doDynamic(    StaplerRequest request,    StaplerResponse rsp) throws IOException {
      fsg.generatePackageListJs(open(rsp));
    }
  }
);
  generators.put(""String_Node_Str"",new JavaScriptGenerator(){
    void doDynamic(    StaplerRequest request,    StaplerResponse rsp) throws IOException {
      fsg.generateProjectUsageJs(open(rsp));
    }
  }
);
  generators.put(""String_Node_Str"",new Generator(){
    String getContentType(    String restOfPath){
      return ""String_Node_Str"";
    }
    void doDynamic(    StaplerRequest request,    StaplerResponse rsp) throws IOException {
      fsg.generatePackageList(open(rsp));
    }
  }
);
  for (  final PackageElement p : pss.getPackageElement()) {
    String path;
    if (p.isUnnamed())     path=""String_Node_Str"";
 else     path=p.getQualifiedName().toString().replace('.','/') + '/';
    path+=""String_Node_Str"";
    generators.put(path,new JavaScriptGenerator(){
      void doDynamic(      StaplerRequest request,      StaplerResponse rsp) throws IOException {
        fsg.generateClassListJs(p,open(rsp));
      }
    }
);
  }
  for (  final String r : FrameSetGenerator.RESOURCES) {
    generators.put(r,new Generator(){
      void doDynamic(      StaplerRequest request,      StaplerResponse rsp) throws IOException {
        IOUtil.copy(r,rsp.getOutputStream());
      }
    }
);
  }
}"
83471,"/** 
 * Gets the actual   {@link Tree} nodes that refer to {@link Element}s (methods, fields, constructors, constants, and the type itself, but excluding nested types) inside this type. <p> This involves a non-trivial computation, but it does use index so it's faster than scanning the whole source tree.
 */
public Map<Element,Set<TreePath>> findReferers(){
  return RefererFinder.find(this);
}","/** 
 * Gets the actual   {@link Tree} nodes that refer to {@link Element}s (methods, fields, constructors, constants, and the type itself, but excluding nested types) inside this type. <p> This involves a non-trivial computation, but it does use index so it's faster than scanning the whole source tree.
 */
public Map<Element,Set<TreePath>> findReferers(SourcePositions pos){
  return RefererFinder.find(this,pos);
}"
83472,"private void add(Element e){
  Set<TreePath> trees=result.get(e);
  if (trees == null)   result.put(e,trees=new HashSet<TreePath>());
  trees.add(getCurrentPath());
}","private void add(Element e){
  TreePath p=getCurrentPath();
  long pos=this.pos.getStartPosition(p.getCompilationUnit(),p.getLeaf());
  if (pos == -1)   return;
  Set<TreePath> trees=result.get(e);
  if (trees == null)   result.put(e,trees=new HashSet<TreePath>());
  trees.add(p);
}"
83473,"/** 
 * @return keys are the fields and methods defined on the given type. values are all the tree nodes where it's actually referenced.
 */
static Map<Element,Set<TreePath>> find(ParsedType t){
  RefererFinder finder=new RefererFinder(t.element);
  for (  CompilationUnitTree cu : t.getReferers())   finder.scan(cu,null);
  return finder.result;
}","/** 
 * @return keys are the fields and methods defined on the given type. values are all the tree nodes where it's actually referenced.
 */
static Map<Element,Set<TreePath>> find(ParsedType t,SourcePositions pos){
  RefererFinder finder=new RefererFinder(t.element,pos);
  for (  CompilationUnitTree cu : t.getReferers())   finder.scan(cu,null);
  return finder.result;
}"
83474,"private RefererFinder(TypeElement type){
  this.type=type;
}","private RefererFinder(TypeElement type,SourcePositions pos){
  this.type=type;
  this.pos=pos;
}"
83475,"/** 
 * Invoked by   {@link AstGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final AstGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
switch (e.getKind()) {
case ENUM_CONSTANT:
case FIELD:
          gen.add(new FieldDecl(cu,srcPos,vt));
        break;
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
case PARAMETER:
      gen.add(new LocalVarDecl(cu,srcPos,vt,e));
    break;
}
Token token;
if (e.getKind() != ElementKind.ENUM_CONSTANT) {
  token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
}
 else {
  token=gen.findTokenAfter(vt,false,vt.getName().toString());
}
if (token != null) gen.add(new DeclName(lineMap,token));
}
return super.visitVariable(vt,_);
}
/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
if (e != null) {
if (e.getKind() == ElementKind.CONSTRUCTOR && e.getEnclosingElement().getSimpleName().length() == 0) return _;
Tree prev=mt.getReturnType();
String name=mt.getName().toString();
Token token;
if (prev != null) token=gen.findTokenAfter(prev,true,name);
 else token=gen.findTokenAfter(mt,false,name);
if (token != null) gen.add(new DeclName(lineMap,token));
ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
gen.add(new MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
}
return super.visitMethod(mt,_);
}
/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
TypeElement e=(TypeElement)TreeUtil.getElement(ct);
if (e != null) {
Token token=null;
if (ct.getModifiers() != null) token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
if (token == null) token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
if (token != null) gen.add(new DeclName(lineMap,token));
List<ParsedType> descendants=getParsedType(e).descendants;
gen.add(new ClassDecl(cu,srcPos,ct,e,descendants));
if (e.getNestingKind() == NestingKind.ANONYMOUS) {
  scan(ct.getMembers());
  return _;
}
}
return super.visitClass(ct,_);
}
/** 
 * All the symbols found in the source code.
 */
public Void visitIdentifier(IdentifierTree id,Void _){
if (!ReservedWords.LIST.contains(id.getName().toString())) {
Element e=TreeUtil.getElement(id);
if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    gen.add(new TypeRef(cu,srcPos,id,(TypeElement)e));
  break;
case FIELD:
case ENUM_CONSTANT:
gen.add(new FieldRef(cu,srcPos,id,(VariableElement)e));
break;
case PARAMETER:
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
gen.add(new LocalVarRef(cu,srcPos,id,(VariableElement)e));
break;
}
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
gen.add(new FieldRef(sp,ep,(VariableElement)e));
break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
Element e=TreeUtil.getElement(nt);
if (e instanceof ExecutableElement) {
ExecutableElement ee=(ExecutableElement)e;
TypeElement ownerType=(TypeElement)ee.getEnclosingElement();
if (ownerType.getSimpleName().length() == 0) {
scan(nt.getIdentifier());
}
 else {
gen.add(new MethodRef(sp,ep,ee));
}
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
Element e=TreeUtil.getElement(mi);
if (e instanceof ExecutableElement) {
ExecutableElement ee=(ExecutableElement)e;
Name methodName=ee.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new MethodRef(ep - methodName.length(),ep,ee));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}","/** 
 * Invoked by   {@link AstGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final AstGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
switch (e.getKind()) {
case ENUM_CONSTANT:
case FIELD:
          gen.add(new FieldDecl(cu,srcPos,vt));
        break;
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
case PARAMETER:
      gen.add(new LocalVarDecl(cu,srcPos,vt,e));
    break;
}
Token token;
if (e.getKind() != ElementKind.ENUM_CONSTANT) {
  token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
}
 else {
  token=gen.findTokenAfter(vt,false,vt.getName().toString());
}
if (token != null) gen.add(new DeclName(lineMap,token));
}
return super.visitVariable(vt,_);
}
/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
if (e != null) {
if (e.getKind() == ElementKind.CONSTRUCTOR && e.getEnclosingElement().getSimpleName().length() == 0) return _;
Tree prev=mt.getReturnType();
String name;
if (e.getKind() == ElementKind.CONSTRUCTOR) name=e.getEnclosingElement().getSimpleName().toString();
 else name=mt.getName().toString();
Token token;
if (prev != null) token=gen.findTokenAfter(prev,true,name);
 else token=gen.findTokenAfter(mt,false,name);
if (token != null) gen.add(new DeclName(lineMap,token));
ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
gen.add(new MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
}
return super.visitMethod(mt,_);
}
/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
TypeElement e=(TypeElement)TreeUtil.getElement(ct);
if (e != null) {
Token token=null;
if (ct.getModifiers() != null) token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
if (token == null) token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
if (token != null) gen.add(new DeclName(lineMap,token));
List<ParsedType> descendants=getParsedType(e).descendants;
gen.add(new ClassDecl(cu,srcPos,ct,e,descendants));
if (e.getNestingKind() == NestingKind.ANONYMOUS) {
  scan(ct.getMembers());
  return _;
}
}
return super.visitClass(ct,_);
}
/** 
 * All the symbols found in the source code.
 */
public Void visitIdentifier(IdentifierTree id,Void _){
if (!ReservedWords.LIST.contains(id.getName().toString())) {
Element e=TreeUtil.getElement(id);
if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    gen.add(new TypeRef(cu,srcPos,id,(TypeElement)e));
  break;
case FIELD:
case ENUM_CONSTANT:
gen.add(new FieldRef(cu,srcPos,id,(VariableElement)e));
break;
case PARAMETER:
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
gen.add(new LocalVarRef(cu,srcPos,id,(VariableElement)e));
break;
}
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
gen.add(new FieldRef(sp,ep,(VariableElement)e));
break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
Element e=TreeUtil.getElement(nt);
if (e instanceof ExecutableElement) {
ExecutableElement ee=(ExecutableElement)e;
TypeElement ownerType=(TypeElement)ee.getEnclosingElement();
if (ownerType.getSimpleName().length() == 0) {
scan(nt.getIdentifier());
}
 else {
gen.add(new MethodRef(sp,ep,ee));
}
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
Element e=TreeUtil.getElement(mi);
if (e instanceof ExecutableElement) {
ExecutableElement ee=(ExecutableElement)e;
Name methodName=ee.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new MethodRef(ep - methodName.length(),ep,ee));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}"
83476,"/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
  ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
  if (e != null) {
    if (e.getKind() == ElementKind.CONSTRUCTOR && e.getEnclosingElement().getSimpleName().length() == 0)     return _;
    Tree prev=mt.getReturnType();
    String name=mt.getName().toString();
    Token token;
    if (prev != null)     token=gen.findTokenAfter(prev,true,name);
 else     token=gen.findTokenAfter(mt,false,name);
    if (token != null)     gen.add(new DeclName(lineMap,token));
    ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
    gen.add(new MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
  }
  return super.visitMethod(mt,_);
}","/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
  ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
  if (e != null) {
    if (e.getKind() == ElementKind.CONSTRUCTOR && e.getEnclosingElement().getSimpleName().length() == 0)     return _;
    Tree prev=mt.getReturnType();
    String name;
    if (e.getKind() == ElementKind.CONSTRUCTOR)     name=e.getEnclosingElement().getSimpleName().toString();
 else     name=mt.getName().toString();
    Token token;
    if (prev != null)     token=gen.findTokenAfter(prev,true,name);
 else     token=gen.findTokenAfter(mt,false,name);
    if (token != null)     gen.add(new DeclName(lineMap,token));
    ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
    gen.add(new MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
  }
  return super.visitMethod(mt,_);
}"
83477,"public long getStartPosition(CompilationUnitTree file,Tree tree){
  long pos=this.pos.getStartPosition(file,tree);
  if (pos == -1 && tree instanceof JCVariableDecl) {
    return ((JCVariableDecl)tree).pos;
  }
  return pos;
}","public long getStartPosition(CompilationUnitTree file,Tree tree){
  long pos=this.pos.getStartPosition(file,tree);
  if (pos == -1 && tree instanceof JCVariableDecl) {
    return ((JCVariableDecl)tree).pos;
  }
  if (pos == -1 && tree instanceof JCMethodDecl) {
    JCMethodDecl mt=(JCMethodDecl)tree;
    if (mt.restype == null)     return mt.pos;
  }
  return pos;
}"
83478,"/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Tag.Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
switch (e.getKind()) {
case ENUM_CONSTANT:
case FIELD:
          gen.add(new Tag.FieldDecl(cu,srcPos,vt,e));
        break;
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
case PARAMETER:
      gen.add(new Tag.LocalVarDecl(cu,srcPos,vt,e));
    break;
}
Token token;
if (e.getKind() != ElementKind.ENUM_CONSTANT) {
  token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
}
 else {
  token=gen.findTokenAfter(vt,false,vt.getName().toString());
}
gen.add(new Tag.DeclName(lineMap,token));
}
return super.visitVariable(vt,_);
}
/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
if (e != null) {
Tree prev=mt.getReturnType();
String name=mt.getName().toString();
Token token;
if (prev != null) token=gen.findTokenAfter(prev,true,name);
 else token=gen.findTokenAfter(mt,false,name);
if (token != null) gen.add(new Tag.DeclName(lineMap,token));
ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
gen.add(new Tag.MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
}
return super.visitMethod(mt,_);
}
/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
TypeElement e=(TypeElement)TreeUtil.getElement(ct);
if (e != null) {
Token token;
if (ct.getModifiers() != null) token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
 else token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
if (token != null) gen.add(new DeclName(lineMap,token));
List<ParsedType> descendants=getParsedType(e).descendants;
gen.add(new Tag.ClassDecl(cu,srcPos,ct,e,descendants));
if (e.getNestingKind() == NestingKind.ANONYMOUS) {
  scan(ct.getMembers());
  return _;
}
}
return super.visitClass(ct,_);
}
/** 
 * All the symbols found in the source code.
 */
public Void visitIdentifier(IdentifierTree id,Void _){
if (!ReservedWords.LIST.contains(id.getName().toString())) {
Element e=TreeUtil.getElement(id);
if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    gen.add(new Tag.TypeRef(cu,srcPos,id,(TypeElement)e));
  break;
case FIELD:
case ENUM_CONSTANT:
gen.add(new Tag.FieldRef(cu,srcPos,id,(VariableElement)e));
break;
}
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
gen.add(new Tag.FieldRef(sp,ep,(VariableElement)e));
break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new Tag.TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
Element e=TreeUtil.getElement(nt);
if (e != null) {
gen.add(new Tag.MethodRef(sp,ep,(ExecutableElement)e));
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mi);
if (e != null) {
Name methodName=e.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new Tag.MethodRef(ep - methodName.length(),ep,e));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}","/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Tag.Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
switch (e.getKind()) {
case ENUM_CONSTANT:
case FIELD:
          gen.add(new Tag.FieldDecl(cu,srcPos,vt,e));
        break;
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
case PARAMETER:
      gen.add(new Tag.LocalVarDecl(cu,srcPos,vt,e));
    break;
}
Token token;
if (e.getKind() != ElementKind.ENUM_CONSTANT) {
  token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
}
 else {
  token=gen.findTokenAfter(vt,false,vt.getName().toString());
}
gen.add(new Tag.DeclName(lineMap,token));
}
return super.visitVariable(vt,_);
}
/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
if (e != null) {
Tree prev=mt.getReturnType();
String name=mt.getName().toString();
Token token;
if (prev != null) token=gen.findTokenAfter(prev,true,name);
 else token=gen.findTokenAfter(mt,false,name);
if (token != null) gen.add(new Tag.DeclName(lineMap,token));
ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
gen.add(new Tag.MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
}
return super.visitMethod(mt,_);
}
/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
TypeElement e=(TypeElement)TreeUtil.getElement(ct);
if (e != null) {
Token token;
if (ct.getModifiers() != null) token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
 else token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
if (token != null) gen.add(new DeclName(lineMap,token));
List<ParsedType> descendants=getParsedType(e).descendants;
gen.add(new Tag.ClassDecl(cu,srcPos,ct,e,descendants));
if (e.getNestingKind() == NestingKind.ANONYMOUS) {
  scan(ct.getMembers());
  return _;
}
}
return super.visitClass(ct,_);
}
/** 
 * All the symbols found in the source code.
 */
public Void visitIdentifier(IdentifierTree id,Void _){
if (!ReservedWords.LIST.contains(id.getName().toString())) {
Element e=TreeUtil.getElement(id);
if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    gen.add(new Tag.TypeRef(cu,srcPos,id,(TypeElement)e));
  break;
case FIELD:
case ENUM_CONSTANT:
gen.add(new Tag.FieldRef(cu,srcPos,id,(VariableElement)e));
break;
case PARAMETER:
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
gen.add(new Tag.LocalVarRef(cu,srcPos,id,(VariableElement)e));
break;
}
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
gen.add(new Tag.FieldRef(sp,ep,(VariableElement)e));
break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new Tag.TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
Element e=TreeUtil.getElement(nt);
if (e != null) {
gen.add(new Tag.MethodRef(sp,ep,(ExecutableElement)e));
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mi);
if (e != null) {
Name methodName=e.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new Tag.MethodRef(ep - methodName.length(),ep,e));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}"
83479,"/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Tag.Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
switch (e.getKind()) {
case ENUM_CONSTANT:
case FIELD:
          gen.add(new Tag.FieldDecl(cu,srcPos,vt,e));
        break;
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
case PARAMETER:
      gen.add(new Tag.LocalVarDecl(cu,srcPos,vt,e));
    break;
}
Token token;
if (e.getKind() != ElementKind.ENUM_CONSTANT) {
  token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
}
 else {
  token=gen.findTokenAfter(vt,false,vt.getName().toString());
}
gen.add(new Tag.DeclName(lineMap,token));
}
return super.visitVariable(vt,_);
}
/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
if (e != null) {
Tree prev=mt.getReturnType();
String name=mt.getName().toString();
Token token;
if (prev != null) token=gen.findTokenAfter(prev,true,name);
 else token=gen.findTokenAfter(mt,false,name);
if (token != null) gen.add(new Tag.DeclName(lineMap,token));
ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
gen.add(new Tag.MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
}
return super.visitMethod(mt,_);
}
/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
TypeElement e=(TypeElement)TreeUtil.getElement(ct);
if (e != null) {
Token token;
if (ct.getModifiers() != null) token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
 else token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
if (token != null) gen.add(new DeclName(lineMap,token));
List<ParsedType> descendants=getParsedType(e).descendants;
gen.add(new Tag.ClassDecl(cu,srcPos,ct,e,descendants));
if (e.getNestingKind() == NestingKind.ANONYMOUS) {
  scan(ct.getMembers());
  return _;
}
}
return super.visitClass(ct,_);
}
/** 
 * All the symbols found in the source code.
 */
public Void visitIdentifier(IdentifierTree id,Void _){
if (!ReservedWords.LIST.contains(id.getName().toString())) {
Element e=TreeUtil.getElement(id);
if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    gen.add(new Tag.TypeRef(cu,srcPos,id,(TypeElement)e));
  break;
case FIELD:
case ENUM_CONSTANT:
gen.add(new Tag.FieldRef(cu,srcPos,id,(VariableElement)e));
break;
case PARAMETER:
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
gen.add(new Tag.LocalVarRef(cu,srcPos,id,(VariableElement)e));
break;
}
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
gen.add(new Tag.FieldRef(sp,ep,(VariableElement)e));
break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new Tag.TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(nt);
if (e != null) {
TypeElement ownerType=(TypeElement)e.getEnclosingElement();
if (ownerType.getSimpleName().length() == 0) {
scan(nt.getIdentifier());
}
 else {
gen.add(new Tag.MethodRef(sp,ep,e));
}
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mi);
if (e != null) {
Name methodName=e.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new Tag.MethodRef(ep - methodName.length(),ep,e));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}","/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Tag.Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
switch (e.getKind()) {
case ENUM_CONSTANT:
case FIELD:
          gen.add(new Tag.FieldDecl(cu,srcPos,vt,e));
        break;
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
case PARAMETER:
      gen.add(new Tag.LocalVarDecl(cu,srcPos,vt,e));
    break;
}
Token token;
if (e.getKind() != ElementKind.ENUM_CONSTANT) {
  token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
}
 else {
  token=gen.findTokenAfter(vt,false,vt.getName().toString());
}
gen.add(new Tag.DeclName(lineMap,token));
}
return super.visitVariable(vt,_);
}
/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
if (e != null) {
if (e.getKind() == ElementKind.CONSTRUCTOR && e.getEnclosingElement().getSimpleName().length() == 0) return _;
Tree prev=mt.getReturnType();
String name=mt.getName().toString();
Token token;
if (prev != null) token=gen.findTokenAfter(prev,true,name);
 else token=gen.findTokenAfter(mt,false,name);
if (token != null) gen.add(new Tag.DeclName(lineMap,token));
ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
gen.add(new Tag.MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
}
return super.visitMethod(mt,_);
}
/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
TypeElement e=(TypeElement)TreeUtil.getElement(ct);
if (e != null) {
Token token;
if (ct.getModifiers() != null) token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
 else token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
if (token != null) gen.add(new DeclName(lineMap,token));
List<ParsedType> descendants=getParsedType(e).descendants;
gen.add(new Tag.ClassDecl(cu,srcPos,ct,e,descendants));
if (e.getNestingKind() == NestingKind.ANONYMOUS) {
  scan(ct.getMembers());
  return _;
}
}
return super.visitClass(ct,_);
}
/** 
 * All the symbols found in the source code.
 */
public Void visitIdentifier(IdentifierTree id,Void _){
if (!ReservedWords.LIST.contains(id.getName().toString())) {
Element e=TreeUtil.getElement(id);
if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    gen.add(new Tag.TypeRef(cu,srcPos,id,(TypeElement)e));
  break;
case FIELD:
case ENUM_CONSTANT:
gen.add(new Tag.FieldRef(cu,srcPos,id,(VariableElement)e));
break;
case PARAMETER:
case EXCEPTION_PARAMETER:
case LOCAL_VARIABLE:
gen.add(new Tag.LocalVarRef(cu,srcPos,id,(VariableElement)e));
break;
}
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
gen.add(new Tag.FieldRef(sp,ep,(VariableElement)e));
break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new Tag.TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(nt);
if (e != null) {
TypeElement ownerType=(TypeElement)e.getEnclosingElement();
if (ownerType.getSimpleName().length() == 0) {
scan(nt.getIdentifier());
}
 else {
gen.add(new Tag.MethodRef(sp,ep,e));
}
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mi);
if (e != null) {
Name methodName=e.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new Tag.MethodRef(ep - methodName.length(),ep,e));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}"
83480,"/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
  ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
  if (e != null) {
    Tree prev=mt.getReturnType();
    String name=mt.getName().toString();
    Token token;
    if (prev != null)     token=gen.findTokenAfter(prev,true,name);
 else     token=gen.findTokenAfter(mt,false,name);
    if (token != null)     gen.add(new Tag.DeclName(lineMap,token));
    ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
    gen.add(new Tag.MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
  }
  return super.visitMethod(mt,_);
}","/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
  ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
  if (e != null) {
    if (e.getKind() == ElementKind.CONSTRUCTOR && e.getEnclosingElement().getSimpleName().length() == 0)     return _;
    Tree prev=mt.getReturnType();
    String name=mt.getName().toString();
    Token token;
    if (prev != null)     token=gen.findTokenAfter(prev,true,name);
 else     token=gen.findTokenAfter(mt,false,name);
    if (token != null)     gen.add(new Tag.DeclName(lineMap,token));
    ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
    gen.add(new Tag.MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
  }
  return super.visitMethod(mt,_);
}"
83481,"public void write(JsonWriter w){
  w.startObject();
  w.property(""String_Node_Str"",name);
  w.property(""String_Node_Str"",baseUrl);
  w.propertyUnquoted(""String_Node_Str"",getLinker());
  w.property(""String_Node_Str"",packageNames);
  w.endObject();
}","public void write(JsonWriter w){
  w.property(""String_Node_Str"",name);
  w.property(""String_Node_Str"",baseUrl);
  w.propertyUnquoted(""String_Node_Str"",getLinker());
  w.property(""String_Node_Str"",packageNames);
}"
83482,"public void generateClassListJs(PackageElement p,PrintWriter w) throws IOException {
  try {
    w.printf(""String_Node_Str"",p.getQualifiedName());
    JsonWriter jw=new JsonWriter(w);
    jw.startArray();
    for (    TypeElement t : pss.getClassElements(p)) {
      jw.startObject();
      jw.property(""String_Node_Str"",t.getSimpleName());
      jw.property(""String_Node_Str"",getKindString(t.getKind()));
      jw.property(""String_Node_Str"",t.getQualifiedName().toString().replace('.','/') + ""String_Node_Str"");
      jw.property(""String_Node_Str"",getAccessLevel(t));
      jw.endObject();
    }
    jw.endArray();
    w.println(""String_Node_Str"");
  }
  finally {
    w.close();
  }
}","public void generateClassListJs(PackageElement p,PrintWriter w) throws IOException {
  try {
    w.printf(""String_Node_Str"",p.getQualifiedName());
    JsonWriter jw=new JsonWriter(w);
    jw.startArray();
    for (    TypeElement t : pss.getClassElements(p)) {
      if (pss.getTrees().getTree(t) == null)       continue;
      jw.startObject();
      jw.property(""String_Node_Str"",t.getSimpleName());
      jw.property(""String_Node_Str"",getKindString(t.getKind()));
      jw.property(""String_Node_Str"",t.getQualifiedName().toString().replace('.','/') + ""String_Node_Str"");
      jw.property(""String_Node_Str"",getAccessLevel(t));
      jw.endObject();
    }
    jw.endArray();
    w.println(""String_Node_Str"");
  }
  finally {
    w.close();
  }
}"
83483,"/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Tag.Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
        gen.add(new Tag.VarDecl(cu,srcPos,vt,e));
        Token token;
        if (e.getKind() != ElementKind.ENUM_CONSTANT) {
          token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
        }
 else {
          token=gen.findTokenAfter(vt,false,vt.getName().toString());
        }
        gen.add(new Tag.DeclName(lineMap,token));
      }
      return super.visitVariable(vt,_);
    }
    /** 
 * Method declaration.
 */
    public Void visitMethod(    MethodTree mt,    Void _){
      ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
      if (e != null) {
        Tree prev=mt.getReturnType();
        String name=mt.getName().toString();
        Token token;
        if (prev != null)         token=gen.findTokenAfter(prev,true,name);
 else         token=gen.findTokenAfter(mt,false,name);
        if (token != null)         gen.add(new Tag.DeclName(lineMap,token));
        ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
        gen.add(new Tag.MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
      }
      return super.visitMethod(mt,_);
    }
    /** 
 * Class declaration.
 */
    public Void visitClass(    ClassTree ct,    Void _){
      TypeElement e=(TypeElement)TreeUtil.getElement(ct);
      if (e != null) {
        Token token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
        if (token != null)         gen.add(new DeclName(lineMap,token));
        List<ParsedType> descendants=getParsedType(e).descendants;
        gen.add(new Tag.ClassDecl(cu,srcPos,ct,e,descendants));
        if (e.getNestingKind() == NestingKind.ANONYMOUS) {
          scan(ct.getMembers());
          return _;
        }
      }
      return super.visitClass(ct,_);
    }
    /** 
 * All the symbols found in the source code.
 */
    public Void visitIdentifier(    IdentifierTree id,    Void _){
      if (!ReservedWords.LIST.contains(id.getName().toString())) {
        Element e=TreeUtil.getElement(id);
        if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
            gen.add(new Tag.TypeRef(cu,srcPos,id,(TypeElement)e));
          break;
case FIELD:
case ENUM_CONSTANT:
        gen.add(new Tag.FieldRef(cu,srcPos,id,(VariableElement)e));
      break;
  }
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
    gen.add(new Tag.FieldRef(sp,ep,(VariableElement)e));
  break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new Tag.TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
Element e=TreeUtil.getElement(nt);
if (e != null) {
gen.add(new Tag.MethodRef(sp,ep,(ExecutableElement)e));
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mi);
if (e != null) {
Name methodName=e.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new Tag.MethodRef(ep - methodName.length(),ep,e));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}","/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  JavaLexer lexer=new JavaLexer(new CharSequenceReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    Stack<Long> openBraces=new Stack<Long>();
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new Tag.ReservedWord(lineMap,token));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new Tag.Comment(lineMap,token));
      if (type == JavaTokenTypes.LCURLY || type == JavaTokenTypes.LPAREN) {
        openBraces.push(getPosition(lineMap,token));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RCURLY) {
        long sp=openBraces.pop();
        gen.add(new Tag.CurlyBracket(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
      if (type == JavaTokenTypes.RPAREN) {
        long sp=openBraces.pop();
        gen.add(new Tag.Parenthesis(sp,getPosition(lineMap,token) + 1));
        gen.add(new Tag.Killer(lineMap,token));
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  final Name CLASS=elements.getName(""String_Node_Str"");
  new TreeScanner<Void,Void>(){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new Tag.Literal(cu,srcPos,lit));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      VariableElement e=(VariableElement)TreeUtil.getElement(vt);
      if (e != null) {
        gen.add(new Tag.VarDecl(cu,srcPos,vt,e));
        Token token;
        if (e.getKind() != ElementKind.ENUM_CONSTANT) {
          token=gen.findTokenAfter(vt.getType(),true,vt.getName().toString());
        }
 else {
          token=gen.findTokenAfter(vt,false,vt.getName().toString());
        }
        gen.add(new Tag.DeclName(lineMap,token));
      }
      return super.visitVariable(vt,_);
    }
    /** 
 * Method declaration.
 */
    public Void visitMethod(    MethodTree mt,    Void _){
      ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
      if (e != null) {
        Tree prev=mt.getReturnType();
        String name=mt.getName().toString();
        Token token;
        if (prev != null)         token=gen.findTokenAfter(prev,true,name);
 else         token=gen.findTokenAfter(mt,false,name);
        if (token != null)         gen.add(new Tag.DeclName(lineMap,token));
        ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
        gen.add(new Tag.MethodDecl(cu,srcPos,mt,e,pt.findOverriddenMethods(elements,e),pt.findOverridingMethods(elements,e)));
      }
      return super.visitMethod(mt,_);
    }
    /** 
 * Class declaration.
 */
    public Void visitClass(    ClassTree ct,    Void _){
      TypeElement e=(TypeElement)TreeUtil.getElement(ct);
      if (e != null) {
        Token token;
        if (ct.getModifiers() != null)         token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
 else         token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
        if (token != null)         gen.add(new DeclName(lineMap,token));
        List<ParsedType> descendants=getParsedType(e).descendants;
        gen.add(new Tag.ClassDecl(cu,srcPos,ct,e,descendants));
        if (e.getNestingKind() == NestingKind.ANONYMOUS) {
          scan(ct.getMembers());
          return _;
        }
      }
      return super.visitClass(ct,_);
    }
    /** 
 * All the symbols found in the source code.
 */
    public Void visitIdentifier(    IdentifierTree id,    Void _){
      if (!ReservedWords.LIST.contains(id.getName().toString())) {
        Element e=TreeUtil.getElement(id);
        if (e != null) {
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
            gen.add(new Tag.TypeRef(cu,srcPos,id,(TypeElement)e));
          break;
case FIELD:
case ENUM_CONSTANT:
        gen.add(new Tag.FieldRef(cu,srcPos,id,(VariableElement)e));
      break;
  }
}
}
return super.visitIdentifier(id,_);
}
/** 
 * ""exp.token""
 */
public Void visitMemberSelect(MemberSelectTree mst,Void _){
if (!mst.getIdentifier().equals(CLASS)) {
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
Element e=TreeUtil.getElement(mst);
if (e != null) {
switch (e.getKind()) {
case FIELD:
case ENUM_CONSTANT:
    gen.add(new Tag.FieldRef(sp,ep,(VariableElement)e));
  break;
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
gen.add(new Tag.TypeRef(sp,ep,(TypeElement)e));
break;
}
}
}
return super.visitMemberSelect(mst,_);
}
/** 
 * Constructor invocation.
 */
public Void visitNewClass(NewClassTree nt,Void _){
long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
Element e=TreeUtil.getElement(nt);
if (e != null) {
gen.add(new Tag.MethodRef(sp,ep,(ExecutableElement)e));
}
scan(nt.getEnclosingExpression());
scan(nt.getArguments());
scan(nt.getTypeArguments());
scan(nt.getClassBody());
return _;
}
/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
ExpressionTree ms=mi.getMethodSelect();
ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mi);
if (e != null) {
Name methodName=e.getSimpleName();
long ep=srcPos.getEndPosition(cu,ms);
if (ep >= 0) {
gen.add(new Tag.MethodRef(ep - methodName.length(),ep,e));
}
}
return super.visitMethodInvocation(mi,_);
}
private void scan(List<? extends Tree> list){
for (Tree t : list) scan(t);
}
private void scan(Tree t){
scan(t,null);
}
}
.scan(cu,null);
ExpressionTree packageName=cu.getPackageName();
if (packageName != null) {
new TreeScanner<String,Void>(){
/** 
 * For ""a"" of ""a.b.c""
 */
public String visitIdentifier(IdentifierTree id,Void _){
String name=id.getName().toString();
PackageElement pe=elements.getPackageElement(name);
return name;
}
public String visitMemberSelect(MemberSelectTree mst,Void _){
String baseName=scan(mst.getExpression(),_);
String name=mst.getIdentifier().toString();
if (baseName.length() > 0) name=baseName + '.' + name;
PackageElement pe=elements.getPackageElement(name);
long ep=srcPos.getEndPosition(cu,mst);
long sp=ep - mst.getIdentifier().length();
return name;
}
}
.scan(packageName,null);
}
}"
83484,"/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
  TypeElement e=(TypeElement)TreeUtil.getElement(ct);
  if (e != null) {
    Token token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
    if (token != null)     gen.add(new DeclName(lineMap,token));
    List<ParsedType> descendants=getParsedType(e).descendants;
    gen.add(new Tag.ClassDecl(cu,srcPos,ct,e,descendants));
    if (e.getNestingKind() == NestingKind.ANONYMOUS) {
      scan(ct.getMembers());
      return _;
    }
  }
  return super.visitClass(ct,_);
}","/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
  TypeElement e=(TypeElement)TreeUtil.getElement(ct);
  if (e != null) {
    Token token;
    if (ct.getModifiers() != null)     token=gen.findTokenAfter(ct.getModifiers(),true,ct.getSimpleName().toString());
 else     token=gen.findTokenAfter(ct,false,ct.getSimpleName().toString());
    if (token != null)     gen.add(new DeclName(lineMap,token));
    List<ParsedType> descendants=getParsedType(e).descendants;
    gen.add(new Tag.ClassDecl(cu,srcPos,ct,e,descendants));
    if (e.getNestingKind() == NestingKind.ANONYMOUS) {
      scan(ct.getMembers());
      return _;
    }
  }
  return super.visitClass(ct,_);
}"
83485,"/** 
 * Generates all the HTML files into the given directory.
 * @param css If specified, path to CSS will computed by using this resolver
 */
public void generateAll(File outDir,ResourceResolver css) throws IOException {
  if (css == null) {
    css=new AbstractResourceResolver(){
      public String href(      CompilationUnitTree compUnit){
        return getRelativePathToTop(compUnit) + ""String_Node_Str"";
      }
    }
;
  }
  pss.setLinkResolverFactories(linkResolverFactory);
  for (  CompilationUnitTree cu : pss.getCompilationUnits()) {
    ExpressionTree packageName=cu.getPackageName();
    String pkg=packageName == null ? ""String_Node_Str"" : packageName.toString().replace('.','/') + '/';
    String name=TreeUtil.getPrimaryTypeName(cu);
    File out=new File(outDir,pkg + name + ""String_Node_Str"");
    File parent=out.getParentFile();
    if (parent != null)     parent.mkdirs();
    FrameHtmlGenerator gen=new FrameHtmlGenerator(pss,cu);
    gen.setCss(css.href(cu));
    gen.write(out);
    File js=new File(outDir,pkg + name + ""String_Node_Str"");
    generateClassOutlineJs(cu,new PrintWriter(js));
  }
  generateIndex(new PrintWriter(open(outDir,""String_Node_Str"")));
  generatePackageListJs(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  generatePackageList(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  for (  PackageElement p : pss.getPackageElement()) {
    File dir=new File(outDir,getPackagePath(p));
    dir.mkdirs();
    generateClassListJs(p,new PrintWriter(openDefault(dir,""String_Node_Str"")));
  }
  System.out.println(""String_Node_Str"");
{
    generateProjectUsageJs(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
    ClassUsageJsWriter cujw=new ClassUsageJsWriter(pss);
    for (    ParsedType pt : pss.getParsedTypes()) {
      if (pt.getReferers().length == 0)       continue;
      if (pt.isLocal())       continue;
      File out=new File(outDir,pt.element.getQualifiedName().toString().replace('.','/') + ""String_Node_Str"");
      out.getParentFile().mkdirs();
      cujw.write(pt,new PrintWriter(out));
    }
  }
  System.out.println(""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  new File(outDir,""String_Node_Str"").mkdir();
  copyResource(outDir,""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  for (  String res : RESOURCES) {
    File o=new File(outDir,res);
    o.getParentFile().mkdirs();
    InputStream in=getClass().getResourceAsStream(res);
    if (in == null)     throw new Error(""String_Node_Str"" + res + ""String_Node_Str"");
    IOUtil.copy(in,o);
  }
}","/** 
 * Generates all the HTML files into the given directory.
 * @param css If specified, path to CSS will computed by using this resolver
 */
public void generateAll(File outDir,ResourceResolver css) throws IOException {
  if (css == null) {
    css=new AbstractResourceResolver(){
      public String href(      CompilationUnitTree compUnit){
        return getRelativePathToTop(compUnit) + ""String_Node_Str"";
      }
    }
;
  }
  pss.setLinkResolverFactories(linkResolverFactory);
  for (  CompilationUnitTree cu : pss.getCompilationUnits()) {
    ExpressionTree packageName=cu.getPackageName();
    String pkg=packageName == null ? ""String_Node_Str"" : packageName.toString().replace('.','/') + '/';
    String name=TreeUtil.getPrimaryTypeName(cu);
    File out=new File(outDir,pkg + name + ""String_Node_Str"");
    File parent=out.getParentFile();
    if (parent != null)     parent.mkdirs();
    FrameHtmlGenerator gen=new FrameHtmlGenerator(pss,cu);
    gen.setCss(css.href(cu));
    gen.write(out);
    File js=new File(outDir,pkg + name + ""String_Node_Str"");
    generateClassOutlineJs(cu,new PrintWriter(js));
  }
  generateIndex(new PrintWriter(open(outDir,""String_Node_Str"")));
  generatePackageListJs(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  generatePackageList(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  for (  PackageElement p : pss.getPackageElement()) {
    File dir=new File(outDir,getPackagePath(p));
    dir.mkdirs();
    generateClassListJs(p,new PrintWriter(openDefault(dir,""String_Node_Str"")));
  }
  System.out.println(""String_Node_Str"");
{
    generateProjectUsageJs(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
    ClassUsageJsWriter cujw=new ClassUsageJsWriter(pss);
    for (    ParsedType pt : pss.getParsedTypes()) {
      if (pt.getReferers().length == 0)       continue;
      if (pt.isLocal())       continue;
      if (pt.isInvalid())       continue;
      File out=new File(outDir,pt.element.getQualifiedName().toString().replace('.','/') + ""String_Node_Str"");
      out.getParentFile().mkdirs();
      cujw.write(pt,new PrintWriter(out));
    }
  }
  System.out.println(""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  new File(outDir,""String_Node_Str"").mkdir();
  copyResource(outDir,""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  copyResource(outDir,""String_Node_Str"");
  for (  String res : RESOURCES) {
    File o=new File(outDir,res);
    o.getParentFile().mkdirs();
    InputStream in=getClass().getResourceAsStream(res);
    if (in == null)     throw new Error(""String_Node_Str"" + res + ""String_Node_Str"");
    IOUtil.copy(in,o);
  }
}"
83486,"protected void writeItem(ExecutableElement e){
  beginArray();
  sep();
  ref((TypeElement)e.getEnclosingElement());
  sep();
  string(e.getSimpleName());
  beginArray();
  for (  VariableElement v : e.getParameters()) {
    sep();
    TypeMirror vt=pss.getTypes().erasure(v.asType());
    TypeElement ve=(TypeElement)pss.getTypes().asElement(vt);
    if (ve != null)     ref(ve);
 else     string(vt.toString());
  }
  endArray();
  writeModifiers(e);
  endArray();
}","protected void writeItem(ExecutableElement e){
  beginArray();
  sep();
  ref((TypeElement)e.getEnclosingElement());
  sep();
  if (e.getKind() == ElementKind.CONSTRUCTOR)   string(e.getEnclosingElement().getSimpleName());
 else   string(e.getSimpleName());
  beginArray();
  for (  VariableElement v : e.getParameters()) {
    sep();
    TypeMirror vt=pss.getTypes().erasure(v.asType());
    TypeElement ve=(TypeElement)pss.getTypes().asElement(vt);
    if (ve != null)     ref(ve);
 else     string(vt.toString());
  }
  endArray();
  writeModifiers(e);
  endArray();
}"
83487,"/** 
 * Adds the given   {@link TreePath} to the {@link NodePkgInfo} tree rooted at this object.
 */
protected Node add(TreePath t){
  NodePkgInfo leafPkg=super.add(TreeUtil.getPackageName(t.getCompilationUnit()));
  NodeMapOwner leaf=addNode(leafPkg,t);
  return (Node)leaf;
}","/** 
 * Adds the given   {@link TreePath} to the {@link NodePkgInfo} tree rooted at this object.
 */
protected ParentNode add(TreePath t){
  NodePkgInfo leafPkg=super.add(TreeUtil.getPackageName(t.getCompilationUnit()));
  return addNode(leafPkg,t);
}"
83488,"/** 
 * Adds the given   {@link TreePath} to the {@link Node} treerooted at ""root"" node, by using the part of the path that falls within the same compilation unit. then return the  {@link Node} wherethe  {@link TreePath} is ultimately stored.
 */
NodeMapOwner addNode(NodeMapOwner root,TreePath t){
  NodeMapOwner p;
  if (t.getParentPath() != null)   p=addNode(root,t.getParentPath());
 else   p=root;
  if (TreeUtil.OUTLINE_WORTHY_TREE.contains(t.getLeaf().getKind())) {
    Element e=TreeUtil.getElement(t.getLeaf());
    if (e != null)     return p.getChildren().getOrCreate(e,t);
  }
  return p;
}","/** 
 * Adds the given   {@link TreePath} to the {@link Node} treerooted at ""root"" node, by using the part of the path that falls within the same compilation unit. then return the  {@link Node} wherethe  {@link TreePath} is ultimately stored.
 */
ParentNode addNode(ParentNode root,TreePath t){
  ParentNode p;
  if (t.getParentPath() != null)   p=addNode(root,t.getParentPath());
 else   p=root;
  if (TreeUtil.OUTLINE_WORTHY_TREE.contains(t.getLeaf().getKind())) {
    Element e=TreeUtil.getElement(t.getLeaf());
    if (e != null)     return p.getChildren().getOrCreate(e,t);
  }
  return p;
}"
83489,"public static boolean isType(Element e){
  if (e == null)   return false;
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    return !e.asType().getKind().isPrimitive();
}
return false;
}","public static boolean isType(Element e){
  if (e == null)   return false;
switch (e.getKind()) {
case ANNOTATION_TYPE:
case CLASS:
case ENUM:
case INTERFACE:
    TypeKind kind=e.asType().getKind();
  return !kind.isPrimitive() && kind != TypeKind.VOID;
}
return false;
}"
83490,"public String href(Element e){
  StringBuilder buf=visit(e);
  if (buf == null)   return null;
  return buf.toString();
}","public String href(Element e){
  StringBuilder buf=visit(e);
  if (buf == null)   return null;
  if (buf.length() == 0)   return ""String_Node_Str"";
  return buf.toString();
}"
83491,"public StringBuilder visitType(TypeElement t,Void _){
  ClassTree ct=trees.getTree(t);
  if (ct == null)   return null;
switch (t.getNestingKind()) {
case ANONYMOUS:
    String binaryName=elements.getBinaryName(t).toString();
  int idx=binaryName.lastIndexOf('$');
String name=""String_Node_Str"" + binaryName.substring(idx);
return combine(getEnclosingTypeOrPackage(t).accept(this,null)).append(name);
case TOP_LEVEL:
CompilationUnitTree owner=pss.getTreePathByClass().get(ct).getCompilationUnit();
String primaryTypeName=TreeUtil.getPrimaryTypeName(owner);
String simpleName=ct.getSimpleName().toString();
StringBuilder buf;
if (!owner.equals(compUnit)) {
buf=combine(recurse(t)).append(primaryTypeName).append(""String_Node_Str"");
}
 else {
buf=new StringBuilder();
}
if (!primaryTypeName.equals(simpleName)) {
return buf.append(""String_Node_Str"").append(simpleName);
}
 else {
return buf.append(""String_Node_Str"");
}
case MEMBER:
case LOCAL:
return recurse(t).append('~').append(t.getSimpleName());
default :
throw new IllegalStateException(t.getNestingKind().toString());
}
}","public StringBuilder visitType(TypeElement t,Void _){
  ClassTree ct=trees.getTree(t);
  if (ct == null)   return null;
switch (t.getNestingKind()) {
case ANONYMOUS:
    String binaryName=elements.getBinaryName(t).toString();
  int idx=binaryName.lastIndexOf('$');
String name=""String_Node_Str"" + binaryName.substring(idx);
return combine(getEnclosingTypeOrPackage(t).accept(this,null)).append(name);
case TOP_LEVEL:
CompilationUnitTree owner=pss.getTreePathByClass().get(ct).getCompilationUnit();
String primaryTypeName=TreeUtil.getPrimaryTypeName(owner);
String simpleName=ct.getSimpleName().toString();
StringBuilder buf;
if (!owner.equals(compUnit)) {
buf=combine(recurse(t)).append(primaryTypeName).append(""String_Node_Str"");
}
 else {
buf=new StringBuilder();
}
if (!primaryTypeName.equals(simpleName)) {
buf.append(""String_Node_Str"").append(simpleName);
}
return buf;
case MEMBER:
case LOCAL:
return recurse(t).append('~').append(t.getSimpleName());
default :
throw new IllegalStateException(t.getNestingKind().toString());
}
}"
83492,"public void writeBody(PrintWriter out) throws IOException {
  out.println(""String_Node_Str"");
  super.writeBody(out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + relativeLinkToTop + ""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void writeBody(PrintWriter out) throws IOException {
  out.print(""String_Node_Str"");
  super.writeBody(out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + relativeLinkToTop + ""String_Node_Str"");
  out.println(""String_Node_Str"");
}"
83493,"/** 
 * Finds the first identifier token after the given tree. <p> This is used to identify the position of few nodes that are not available from javac.
 * @param t The first token after the end position of this tree node will be returned.
 * @param id If non-null, find the first token that has this identifier.
 * @return nullif no such node is found or a syntax error is detected.
 */
protected final Token findTokenAfter(Tree t,String id){
  long pos=pss.getSourcePositions().getEndPosition(compUnit,t);
  if (pos < 0)   return null;
  JavaLexer lexer=new JavaLexer(new StringReader(sourceFile.substring((int)pos)));
  lexer.setTabSize(pss.getTabWidth());
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT) {
        if (id != null && !token.getText().equals(id))         continue;
        LineMap lm=compUnit.getLineMap();
        token.setLine(token.getLine() + (int)lm.getLineNumber(pos) - 1);
        token.setColumn(token.getColumn() + (int)lm.getColumnNumber(pos) - 1);
        return token;
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  return null;
}","/** 
 * Finds the first identifier token after the given tree. <p> This is used to identify the position of few nodes that are not available from javac.
 * @param t The first token after the end position of this tree node will be returned.
 * @param findAfterToken true if the search should begin from the end of the given token. false to start from the start of the given token.
 * @param id If non-null, find the first token that has this identifier.
 * @return nullif no such node is found or a syntax error is detected.
 */
protected final Token findTokenAfter(Tree t,boolean findAfterToken,String id){
  long pos;
  if (findAfterToken)   pos=pss.getSourcePositions().getEndPosition(compUnit,t);
 else   pos=pss.getSourcePositions().getStartPosition(compUnit,t);
  if (pos < 0)   return null;
  JavaLexer lexer=new JavaLexer(new StringReader(sourceFile.substring((int)pos)));
  lexer.setTabSize(pss.getTabWidth());
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT) {
        if (id != null && !token.getText().equals(id))         continue;
        LineMap lm=compUnit.getLineMap();
        token.setLine(token.getLine() + (int)lm.getLineNumber(pos) - 1);
        token.setColumn(token.getColumn() + (int)lm.getColumnNumber(pos) - 1);
        return token;
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  return null;
}"
83494,"protected final void addDecl(Token t,Element e){
  long sp=lineMap.getPosition(t.getLine(),t.getColumn());
  long ep=sp + t.getText().length();
  String id=buildId(e);
  gen.add(new TagMarker(sp,ep,'#' + id,getCssClass(e,""String_Node_Str""),id,buildUsage(e)));
}","protected final void addDecl(Token t,Element e){
  if (t == null)   return;
  long sp=lineMap.getPosition(t.getLine(),t.getColumn());
  long ep=sp + t.getText().length();
  String id=buildId(e);
  gen.add(new TagMarker(sp,ep,'#' + id,getCssClass(e,""String_Node_Str""),id,buildUsage(e)));
}"
83495,"/** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
public Void visitVariable(VariableTree vt,Void _){
  Element e=TreeUtil.getElement(vt);
  if (e != null) {
    if (e.getKind() != ElementKind.ENUM_CONSTANT) {
      Token t=gen.findTokenAfter(vt.getType(),vt.getName().toString());
      if (t != null) {
        addDecl(t,e);
      }
    }
 else {
      addDecl(vt,e);
    }
  }
  return super.visitVariable(vt,_);
}","/** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
public Void visitVariable(VariableTree vt,Void _){
  Element e=TreeUtil.getElement(vt);
  if (e != null) {
    if (e.getKind() != ElementKind.ENUM_CONSTANT) {
      addDecl(gen.findTokenAfter(vt.getType(),true,vt.getName().toString()),e);
    }
 else {
      addDecl(vt,e);
    }
  }
  return super.visitVariable(vt,_);
}"
83496,"/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  final LinkResolver linkResolver=linkResolverFactory.create(cu,this);
  JavaLexer lexer=new JavaLexer(new StringReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new LexicalMarker(lineMap,token,""String_Node_Str""));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new CommentMarker(lineMap,token));
    }
  }
 catch (  TokenStreamException e) {
  }
  new MarkerBuilder<Void,Void>(cu,gen,linkResolver,srcPos,elements,types){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      gen.add(new LexicalMarker(cu,srcPos,pt,""String_Node_Str""));
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new LexicalMarker(cu,srcPos,lit,""String_Node_Str""));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      Element e=TreeUtil.getElement(vt);
      if (e != null) {
        if (e.getKind() != ElementKind.ENUM_CONSTANT) {
          Token t=gen.findTokenAfter(vt.getType(),vt.getName().toString());
          if (t != null) {
            addDecl(t,e);
          }
        }
 else {
          addDecl(vt,e);
        }
      }
      return super.visitVariable(vt,_);
    }
    private void addBookmark(    Tree t,    Bookmark bookmark){
      gen.add(lineMap.getLineNumber(srcPos.getStartPosition(cu,t)),bookmark);
    }
    /** 
 * Method declaration.
 */
    public Void visitMethod(    MethodTree mt,    Void _){
      ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
      if (e != null) {
        addDecl(mt,e);
        ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
        Set<Match> r=pt.findOverriddenMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverriddenMethodsBookmark(r,linkResolver));
        }
        r=pt.findOverridingMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverridingMethodsBookmark(r,linkResolver));
        }
      }
      return super.visitMethod(mt,_);
    }
    /** 
 * Class declaration.
 */
    public Void visitClass(    ClassTree ct,    Void _){
      TypeElement e=(TypeElement)TreeUtil.getElement(ct);
      if (e != null) {
        addDecl(ct,e);
        List<ParsedType> descendants=getParsedType(e).descendants;
        if (!descendants.isEmpty()) {
          addBookmark(ct,new SubClassBookmark(descendants,linkResolver));
        }
        if (e.getNestingKind() == NestingKind.ANONYMOUS) {
          scan(ct.getMembers());
          return _;
        }
      }
      return super.visitClass(ct,_);
    }
    /** 
 * All the symbols found in the source code.
 */
    public Void visitIdentifier(    IdentifierTree id,    Void _){
      if (!ReservedWords.LIST.contains(id.getName().toString())) {
        Element e=TreeUtil.getElement(id);
        if (e != null) {
          addRef(id,e);
        }
      }
      return super.visitIdentifier(id,_);
    }
    /** 
 * ""exp.token""
 */
    public Void visitMemberSelect(    MemberSelectTree mst,    Void _){
      long ep=srcPos.getEndPosition(cu,mst);
      long sp=ep - mst.getIdentifier().length();
      Element e=TreeUtil.getElement(mst);
      if (e != null)       addRef(sp,ep,e);
      return super.visitMemberSelect(mst,_);
    }
    public Void visitNewClass(    NewClassTree nt,    Void _){
      long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
      long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
      Element e=TreeUtil.getElement(nt);
      if (e != null)       addRef(sp,ep,e);
      scan(nt.getEnclosingExpression());
      scan(nt.getArguments());
      scan(nt.getTypeArguments());
      scan(nt.getClassBody());
      return _;
    }
    /** 
 * Method invocation of the form ""exp.method()""
 */
    public Void visitMethodInvocation(    MethodInvocationTree mi,    Void _){
      ExpressionTree ms=mi.getMethodSelect();
      Element e=TreeUtil.getElement(mi);
      if (e != null) {
        Name methodName=e.getSimpleName();
        long ep=srcPos.getEndPosition(cu,ms);
        if (ep >= 0)         addRef(ep - methodName.length(),ep,e);
      }
      return super.visitMethodInvocation(mi,_);
    }
    private void scan(    List<? extends Tree> list){
      for (      Tree t : list)       scan(t);
    }
    private void scan(    Tree t){
      scan(t,null);
    }
  }
.scan(cu,null);
  ExpressionTree packageName=cu.getPackageName();
  if (packageName != null) {
    new MarkerBuilder<String,Void>(cu,gen,linkResolver,srcPos,elements,types){
      /** 
 * For ""a"" of ""a.b.c""
 */
      public String visitIdentifier(      IdentifierTree id,      Void _){
        String name=id.getName().toString();
        PackageElement pe=elements.getPackageElement(name);
        addRef(id,pe);
        return name;
      }
      public String visitMemberSelect(      MemberSelectTree mst,      Void _){
        String baseName=scan(mst.getExpression(),_);
        String name=mst.getIdentifier().toString();
        if (baseName.length() > 0)         name=baseName + '.' + name;
        PackageElement pe=elements.getPackageElement(name);
        long ep=srcPos.getEndPosition(cu,mst);
        long sp=ep - mst.getIdentifier().length();
        addRef(sp,ep,pe);
        return name;
      }
    }
.scan(packageName,null);
  }
}","/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  final LinkResolver linkResolver=linkResolverFactory.create(cu,this);
  JavaLexer lexer=new JavaLexer(new StringReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new LexicalMarker(lineMap,token,""String_Node_Str""));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new CommentMarker(lineMap,token));
    }
  }
 catch (  TokenStreamException e) {
  }
  new MarkerBuilder<Void,Void>(cu,gen,linkResolver,srcPos,elements,types){
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      gen.add(new LexicalMarker(cu,srcPos,pt,""String_Node_Str""));
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new LexicalMarker(cu,srcPos,lit,""String_Node_Str""));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      Element e=TreeUtil.getElement(vt);
      if (e != null) {
        if (e.getKind() != ElementKind.ENUM_CONSTANT) {
          addDecl(gen.findTokenAfter(vt.getType(),true,vt.getName().toString()),e);
        }
 else {
          addDecl(vt,e);
        }
      }
      return super.visitVariable(vt,_);
    }
    private void addBookmark(    Tree t,    Bookmark bookmark){
      gen.add(lineMap.getLineNumber(srcPos.getStartPosition(cu,t)),bookmark);
    }
    /** 
 * Method declaration.
 */
    public Void visitMethod(    MethodTree mt,    Void _){
      ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
      if (e != null) {
        Tree prev=mt.getReturnType();
        if (prev != null)         addDecl(gen.findTokenAfter(prev,true,mt.getName().toString()),e);
 else         addDecl(gen.findTokenAfter(mt,false,mt.getName().toString()),e);
        ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
        Set<Match> r=pt.findOverriddenMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverriddenMethodsBookmark(r,linkResolver));
        }
        r=pt.findOverridingMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverridingMethodsBookmark(r,linkResolver));
        }
      }
      return super.visitMethod(mt,_);
    }
    /** 
 * Class declaration.
 */
    public Void visitClass(    ClassTree ct,    Void _){
      TypeElement e=(TypeElement)TreeUtil.getElement(ct);
      if (e != null) {
        addDecl(gen.findTokenAfter(ct,false,ct.getSimpleName().toString()),e);
        List<ParsedType> descendants=getParsedType(e).descendants;
        if (!descendants.isEmpty()) {
          addBookmark(ct,new SubClassBookmark(descendants,linkResolver));
        }
        if (e.getNestingKind() == NestingKind.ANONYMOUS) {
          scan(ct.getMembers());
          return _;
        }
      }
      return super.visitClass(ct,_);
    }
    /** 
 * All the symbols found in the source code.
 */
    public Void visitIdentifier(    IdentifierTree id,    Void _){
      if (!ReservedWords.LIST.contains(id.getName().toString())) {
        Element e=TreeUtil.getElement(id);
        if (e != null) {
          addRef(id,e);
        }
      }
      return super.visitIdentifier(id,_);
    }
    /** 
 * ""exp.token""
 */
    public Void visitMemberSelect(    MemberSelectTree mst,    Void _){
      long ep=srcPos.getEndPosition(cu,mst);
      long sp=ep - mst.getIdentifier().length();
      Element e=TreeUtil.getElement(mst);
      if (e != null)       addRef(sp,ep,e);
      return super.visitMemberSelect(mst,_);
    }
    public Void visitNewClass(    NewClassTree nt,    Void _){
      long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
      long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
      Element e=TreeUtil.getElement(nt);
      if (e != null)       addRef(sp,ep,e);
      scan(nt.getEnclosingExpression());
      scan(nt.getArguments());
      scan(nt.getTypeArguments());
      scan(nt.getClassBody());
      return _;
    }
    /** 
 * Method invocation of the form ""exp.method()""
 */
    public Void visitMethodInvocation(    MethodInvocationTree mi,    Void _){
      ExpressionTree ms=mi.getMethodSelect();
      Element e=TreeUtil.getElement(mi);
      if (e != null) {
        Name methodName=e.getSimpleName();
        long ep=srcPos.getEndPosition(cu,ms);
        if (ep >= 0)         addRef(ep - methodName.length(),ep,e);
      }
      return super.visitMethodInvocation(mi,_);
    }
    private void scan(    List<? extends Tree> list){
      for (      Tree t : list)       scan(t);
    }
    private void scan(    Tree t){
      scan(t,null);
    }
  }
.scan(cu,null);
  ExpressionTree packageName=cu.getPackageName();
  if (packageName != null) {
    new MarkerBuilder<String,Void>(cu,gen,linkResolver,srcPos,elements,types){
      /** 
 * For ""a"" of ""a.b.c""
 */
      public String visitIdentifier(      IdentifierTree id,      Void _){
        String name=id.getName().toString();
        PackageElement pe=elements.getPackageElement(name);
        addRef(id,pe);
        return name;
      }
      public String visitMemberSelect(      MemberSelectTree mst,      Void _){
        String baseName=scan(mst.getExpression(),_);
        String name=mst.getIdentifier().toString();
        if (baseName.length() > 0)         name=baseName + '.' + name;
        PackageElement pe=elements.getPackageElement(name);
        long ep=srcPos.getEndPosition(cu,mst);
        long sp=ep - mst.getIdentifier().length();
        addRef(sp,ep,pe);
        return name;
      }
    }
.scan(packageName,null);
  }
}"
83497,"/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
  ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
  if (e != null) {
    addDecl(mt,e);
    ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
    Set<Match> r=pt.findOverriddenMethods(elements,e);
    if (!r.isEmpty()) {
      addBookmark(mt,new OverriddenMethodsBookmark(r,linkResolver));
    }
    r=pt.findOverridingMethods(elements,e);
    if (!r.isEmpty()) {
      addBookmark(mt,new OverridingMethodsBookmark(r,linkResolver));
    }
  }
  return super.visitMethod(mt,_);
}","/** 
 * Method declaration.
 */
public Void visitMethod(MethodTree mt,Void _){
  ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
  if (e != null) {
    Tree prev=mt.getReturnType();
    if (prev != null)     addDecl(gen.findTokenAfter(prev,true,mt.getName().toString()),e);
 else     addDecl(gen.findTokenAfter(mt,false,mt.getName().toString()),e);
    ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
    Set<Match> r=pt.findOverriddenMethods(elements,e);
    if (!r.isEmpty()) {
      addBookmark(mt,new OverriddenMethodsBookmark(r,linkResolver));
    }
    r=pt.findOverridingMethods(elements,e);
    if (!r.isEmpty()) {
      addBookmark(mt,new OverridingMethodsBookmark(r,linkResolver));
    }
  }
  return super.visitMethod(mt,_);
}"
83498,"/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
  TypeElement e=(TypeElement)TreeUtil.getElement(ct);
  if (e != null) {
    addDecl(ct,e);
    List<ParsedType> descendants=getParsedType(e).descendants;
    if (!descendants.isEmpty()) {
      addBookmark(ct,new SubClassBookmark(descendants,linkResolver));
    }
    if (e.getNestingKind() == NestingKind.ANONYMOUS) {
      scan(ct.getMembers());
      return _;
    }
  }
  return super.visitClass(ct,_);
}","/** 
 * Class declaration.
 */
public Void visitClass(ClassTree ct,Void _){
  TypeElement e=(TypeElement)TreeUtil.getElement(ct);
  if (e != null) {
    addDecl(gen.findTokenAfter(ct,false,ct.getSimpleName().toString()),e);
    List<ParsedType> descendants=getParsedType(e).descendants;
    if (!descendants.isEmpty()) {
      addBookmark(ct,new SubClassBookmark(descendants,linkResolver));
    }
    if (e.getNestingKind() == NestingKind.ANONYMOUS) {
      scan(ct.getMembers());
      return _;
    }
  }
  return super.visitClass(ct,_);
}"
83499,"public StringBuilder visitPackage(PackageElement p,Void _){
  if (!pss.getPackageElement().contains(p))   return null;
  String[] to=p.getQualifiedName().toString().split(""String_Node_Str"");
  int i;
  for (i=0; i < Math.min(to.length,pkg.length); i++)   if (!pkg[i].equals(to[i]))   break;
  StringBuilder buf=new StringBuilder();
  for (int j=i; j < pkg.length; j++) {
    buf.append(""String_Node_Str"");
  }
  for (int j=i; j < to.length; j++) {
    buf.append(to[j]).append('/');
  }
  if (buf.length() == 0)   buf.append(""String_Node_Str"");
  return buf;
}","public StringBuilder visitPackage(PackageElement p,Void _){
  if (!pss.getPackageElement().contains(p))   return null;
  String[] to;
  if (p.isUnnamed())   to=new String[0];
 else   to=p.getQualifiedName().toString().split(""String_Node_Str"");
  int i;
  for (i=0; i < Math.min(to.length,pkg.length); i++)   if (!pkg[i].equals(to[i]))   break;
  StringBuilder buf=new StringBuilder();
  for (int j=i; j < pkg.length; j++) {
    buf.append(""String_Node_Str"");
  }
  for (int j=i; j < to.length; j++) {
    buf.append(to[j]).append('/');
  }
  if (buf.length() == 0)   buf.append(""String_Node_Str"");
  return buf;
}"
83500,"/** 
 * Computes the full method name with the FQCN as parameter names.
 */
public static StringBuilder buildMethodName(StringBuilder buf,Types types,ExecutableElement e){
  buf.append(e.getSimpleName()).append('(');
  boolean first=true;
  List<? extends VariableElement> parameters=safeGetParameters(e);
  for (  VariableElement v : parameters) {
    buf.append(types.erasure(v.asType()));
    if (first)     first=false;
 else     buf.append(',');
  }
  return buf.append(')');
}","/** 
 * Computes the full method name with the FQCN as parameter names.
 */
public static StringBuilder buildMethodName(StringBuilder buf,Types types,ExecutableElement e){
  buf.append(e.getSimpleName()).append('(');
  boolean first=true;
  List<? extends VariableElement> parameters=safeGetParameters(e);
  for (  VariableElement v : parameters) {
    if (first)     first=false;
 else     buf.append(',');
    buf.append(types.erasure(v.asType()));
  }
  return buf.append(')');
}"
83501,"/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
  ExpressionTree ms=mi.getMethodSelect();
  Element e=TreeUtil.getElement(mi);
  if (e != null) {
    Name methodName=e.getSimpleName();
    long ep=srcPos.getEndPosition(cu,ms);
    gen.add(new LinkMarker(ep - methodName.length(),ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
  }
  return super.visitMethodInvocation(mi,_);
}","/** 
 * Method invocation of the form ""exp.method()""
 */
public Void visitMethodInvocation(MethodInvocationTree mi,Void _){
  ExpressionTree ms=mi.getMethodSelect();
  Element e=TreeUtil.getElement(mi);
  if (e != null) {
    Name methodName=e.getSimpleName();
    long ep=srcPos.getEndPosition(cu,ms);
    if (ep >= 0) {
      gen.add(new LinkMarker(ep - methodName.length(),ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
    }
  }
  return super.visitMethodInvocation(mi,_);
}"
83502,"/** 
 * Gets all the packages of the analyzed source files. <p> This does not include those packages that are just referenced. 
 * @return can be empty but never null.
 */
public Collection<PackageElement> getPackageElement(){
  return Collections.unmodifiableCollection(packages);
}","/** 
 * Gets all the packages of the analyzed source files. <p> This does not include those packages that are just referenced.
 * @return can be empty but never null.
 */
public Collection<PackageElement> getPackageElement(){
  return Collections.unmodifiableCollection(packages);
}"
83503,"/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  final LinkResolver linkResolver=linkResolverFactory.create(cu,this);
  JavaLexer lexer=new JavaLexer(new StringReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new SpanMarker(lineMap,token,""String_Node_Str""));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new CommentMarker(lineMap,token));
    }
  }
 catch (  TokenStreamException e) {
  }
  new TreeScanner<Void,Void>(){
    private String buildId(    Element e){
      String buf=linkResolver.href(e);
      if (buf.length() == 0)       return null;
      if (buf.charAt(0) != '#')       throw new IllegalStateException(""String_Node_Str"" + e + ""String_Node_Str""+ buf);
      return buf.substring(1);
    }
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      gen.add(new SpanMarker(cu,srcPos,pt,""String_Node_Str""));
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new SpanMarker(cu,srcPos,lit,""String_Node_Str""));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      Element e=TreeUtil.getElement(vt);
      if (e != null) {
        if (e.getKind() != ElementKind.ENUM_CONSTANT) {
          Token t=gen.findTokenAfter(vt.getType());
          if (t != null) {
            gen.add(new SpanMarker(lineMap,t,getCssClass(e,""String_Node_Str""),buildId(e)));
          }
        }
 else {
          gen.add(new SpanMarker(cu,srcPos,vt,getCssClass(e,""String_Node_Str""),buildId(e)));
        }
      }
      return super.visitVariable(vt,_);
    }
    private void addBookmark(    Tree t,    Bookmark bookmark){
      gen.add(lineMap.getLineNumber(srcPos.getStartPosition(cu,t)),bookmark);
    }
    /** 
 * Method declaration.
 */
    public Void visitMethod(    MethodTree mt,    Void _){
      ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
      if (e != null) {
        gen.add(new SpanMarker(cu,srcPos,mt,getCssClass(e,""String_Node_Str""),buildId(e)));
        ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
        Set<Match> r=pt.findOverriddenMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverriddenMethodsBookmark(r,linkResolver));
        }
        r=pt.findOverridingMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverridingMethodsBookmark(r,linkResolver));
        }
      }
      return super.visitMethod(mt,_);
    }
    /** 
 * Class declaration.
 */
    public Void visitClass(    ClassTree ct,    Void _){
      TypeElement e=(TypeElement)TreeUtil.getElement(ct);
      if (e != null) {
        gen.add(new SpanMarker(cu,srcPos,ct,getCssClass(e,""String_Node_Str""),buildId(e)));
        List<ParsedType> descendants=getParsedType(e).descendants;
        if (!descendants.isEmpty()) {
          addBookmark(ct,new SubClassBookmark(descendants,linkResolver));
        }
        if (e.getNestingKind() == NestingKind.ANONYMOUS) {
          scan(ct.getMembers());
          return _;
        }
      }
      return super.visitClass(ct,_);
    }
    /** 
 * All the symbols found in the source code.
 */
    public Void visitIdentifier(    IdentifierTree id,    Void _){
      if (!ReservedWords.LIST.contains(id.getName().toString())) {
        Element e=TreeUtil.getElement(id);
        if (e != null) {
          gen.add(new LinkMarker(cu,srcPos,id,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
        }
      }
      return super.visitIdentifier(id,_);
    }
    /** 
 * ""exp.token""
 */
    public Void visitMemberSelect(    MemberSelectTree mst,    Void _){
      long ep=srcPos.getEndPosition(cu,mst);
      long sp=ep - mst.getIdentifier().length();
      Element e=TreeUtil.getElement(mst);
      if (e != null) {
        gen.add(new LinkMarker(sp,ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
      }
      return super.visitMemberSelect(mst,_);
    }
    public Void visitNewClass(    NewClassTree nt,    Void _){
      long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
      long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
      Element e=TreeUtil.getElement(nt);
      if (e != null) {
        gen.add(new LinkMarker(sp,ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
      }
      scan(nt.getEnclosingExpression());
      scan(nt.getArguments());
      scan(nt.getTypeArguments());
      scan(nt.getClassBody());
      return _;
    }
    /** 
 * Method invocation of the form ""exp.method()""
 */
    public Void visitMethodInvocation(    MethodInvocationTree mi,    Void _){
      ExpressionTree ms=mi.getMethodSelect();
      Element e=TreeUtil.getElement(mi);
      if (e != null) {
        Name methodName=e.getSimpleName();
        long ep=srcPos.getEndPosition(cu,ms);
        gen.add(new LinkMarker(ep - methodName.length(),ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
      }
      return super.visitMethodInvocation(mi,_);
    }
    private void scan(    List<? extends Tree> list){
      for (      Tree t : list)       scan(t);
    }
    private void scan(    Tree t){
      scan(t,null);
    }
  }
.scan(cu,null);
  ExpressionTree packageName=cu.getPackageName();
  if (packageName != null) {
    new TreePathScanner<String,Void>(){
      /** 
 * For ""a"" of ""a.b.c""
 */
      public String visitIdentifier(      IdentifierTree id,      Void _){
        String name=id.getName().toString();
        PackageElement pe=elements.getPackageElement(name);
        gen.add(new LinkMarker(cu,srcPos,id,linkResolver.href(pe),getCssClass(pe,""String_Node_Str"")));
        return name;
      }
      public String visitMemberSelect(      MemberSelectTree mst,      Void _){
        String baseName=scan(mst.getExpression(),_);
        String name=mst.getIdentifier().toString();
        if (baseName.length() > 0)         name=baseName + '.' + name;
        PackageElement pe=elements.getPackageElement(name);
        long ep=srcPos.getEndPosition(cu,mst);
        long sp=ep - mst.getIdentifier().length();
        gen.add(new LinkMarker(sp,ep,linkResolver.href(pe),getCssClass(pe,""String_Node_Str"")));
        return name;
      }
    }
.scan(new TreePath(new TreePath(cu),packageName),null);
  }
}","/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  final LinkResolver linkResolver=linkResolverFactory.create(cu,this);
  JavaLexer lexer=new JavaLexer(new StringReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new SpanMarker(lineMap,token,""String_Node_Str""));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new CommentMarker(lineMap,token));
    }
  }
 catch (  TokenStreamException e) {
  }
  new TreeScanner<Void,Void>(){
    private String buildId(    Element e){
      String buf=linkResolver.href(e);
      if (buf.length() == 0)       return null;
      if (buf.charAt(0) != '#')       throw new IllegalStateException(""String_Node_Str"" + e + ""String_Node_Str""+ buf);
      return buf.substring(1);
    }
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      gen.add(new SpanMarker(cu,srcPos,pt,""String_Node_Str""));
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new SpanMarker(cu,srcPos,lit,""String_Node_Str""));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      Element e=TreeUtil.getElement(vt);
      if (e != null) {
        if (e.getKind() != ElementKind.ENUM_CONSTANT) {
          Token t=gen.findTokenAfter(vt.getType());
          if (t != null) {
            gen.add(new SpanMarker(lineMap,t,getCssClass(e,""String_Node_Str""),buildId(e)));
          }
        }
 else {
          gen.add(new SpanMarker(cu,srcPos,vt,getCssClass(e,""String_Node_Str""),buildId(e)));
        }
      }
      return super.visitVariable(vt,_);
    }
    private void addBookmark(    Tree t,    Bookmark bookmark){
      gen.add(lineMap.getLineNumber(srcPos.getStartPosition(cu,t)),bookmark);
    }
    /** 
 * Method declaration.
 */
    public Void visitMethod(    MethodTree mt,    Void _){
      ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
      if (e != null) {
        gen.add(new SpanMarker(cu,srcPos,mt,getCssClass(e,""String_Node_Str""),buildId(e)));
        ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
        Set<Match> r=pt.findOverriddenMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverriddenMethodsBookmark(r,linkResolver));
        }
        r=pt.findOverridingMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverridingMethodsBookmark(r,linkResolver));
        }
      }
      return super.visitMethod(mt,_);
    }
    /** 
 * Class declaration.
 */
    public Void visitClass(    ClassTree ct,    Void _){
      TypeElement e=(TypeElement)TreeUtil.getElement(ct);
      if (e != null) {
        gen.add(new SpanMarker(cu,srcPos,ct,getCssClass(e,""String_Node_Str""),buildId(e)));
        List<ParsedType> descendants=getParsedType(e).descendants;
        if (!descendants.isEmpty()) {
          addBookmark(ct,new SubClassBookmark(descendants,linkResolver));
        }
        if (e.getNestingKind() == NestingKind.ANONYMOUS) {
          scan(ct.getMembers());
          return _;
        }
      }
      return super.visitClass(ct,_);
    }
    /** 
 * All the symbols found in the source code.
 */
    public Void visitIdentifier(    IdentifierTree id,    Void _){
      if (!ReservedWords.LIST.contains(id.getName().toString())) {
        Element e=TreeUtil.getElement(id);
        if (e != null) {
          gen.add(new LinkMarker(cu,srcPos,id,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
        }
      }
      return super.visitIdentifier(id,_);
    }
    /** 
 * ""exp.token""
 */
    public Void visitMemberSelect(    MemberSelectTree mst,    Void _){
      long ep=srcPos.getEndPosition(cu,mst);
      long sp=ep - mst.getIdentifier().length();
      Element e=TreeUtil.getElement(mst);
      if (e != null) {
        gen.add(new LinkMarker(sp,ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
      }
      return super.visitMemberSelect(mst,_);
    }
    public Void visitNewClass(    NewClassTree nt,    Void _){
      long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
      long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
      Element e=TreeUtil.getElement(nt);
      if (e != null) {
        gen.add(new LinkMarker(sp,ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
      }
      scan(nt.getEnclosingExpression());
      scan(nt.getArguments());
      scan(nt.getTypeArguments());
      scan(nt.getClassBody());
      return _;
    }
    /** 
 * Method invocation of the form ""exp.method()""
 */
    public Void visitMethodInvocation(    MethodInvocationTree mi,    Void _){
      ExpressionTree ms=mi.getMethodSelect();
      Element e=TreeUtil.getElement(mi);
      if (e != null) {
        Name methodName=e.getSimpleName();
        long ep=srcPos.getEndPosition(cu,ms);
        if (ep >= 0) {
          gen.add(new LinkMarker(ep - methodName.length(),ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
        }
      }
      return super.visitMethodInvocation(mi,_);
    }
    private void scan(    List<? extends Tree> list){
      for (      Tree t : list)       scan(t);
    }
    private void scan(    Tree t){
      scan(t,null);
    }
  }
.scan(cu,null);
  ExpressionTree packageName=cu.getPackageName();
  if (packageName != null) {
    new TreePathScanner<String,Void>(){
      /** 
 * For ""a"" of ""a.b.c""
 */
      public String visitIdentifier(      IdentifierTree id,      Void _){
        String name=id.getName().toString();
        PackageElement pe=elements.getPackageElement(name);
        gen.add(new LinkMarker(cu,srcPos,id,linkResolver.href(pe),getCssClass(pe,""String_Node_Str"")));
        return name;
      }
      public String visitMemberSelect(      MemberSelectTree mst,      Void _){
        String baseName=scan(mst.getExpression(),_);
        String name=mst.getIdentifier().toString();
        if (baseName.length() > 0)         name=baseName + '.' + name;
        PackageElement pe=elements.getPackageElement(name);
        long ep=srcPos.getEndPosition(cu,mst);
        long sp=ep - mst.getIdentifier().length();
        gen.add(new LinkMarker(sp,ep,linkResolver.href(pe),getCssClass(pe,""String_Node_Str"")));
        return name;
      }
    }
.scan(new TreePath(new TreePath(cu),packageName),null);
  }
}"
83504,"public OutlineNameVisitor(ParsedSourceSet pss){
  this.javadocErasure=new JavadocErasureVisitor(pss.getTypes());
}","private OutlineNameVisitor(){
}"
83505,"public String visitExecutable(ExecutableElement e,Void _){
  StringBuilder buf=new StringBuilder();
  if (e.getKind() == ElementKind.CONSTRUCTOR)   buf.append(e.getEnclosingElement().getSimpleName());
 else   buf.append(e.getSimpleName());
  buf.append('(');
  boolean first=true;
  for (  VariableElement p : e.getParameters()) {
    if (first)     first=false;
 else     buf.append(',');
    buf.append(p.asType().accept(ShortNameVisitor.INSTANCE,null));
  }
  buf.append(')');
  if (e.getKind() != ElementKind.CONSTRUCTOR) {
    buf.append(':');
    buf.append(e.getReturnType().accept(javadocErasure,null));
  }
  return buf.toString();
}","public String visitExecutable(ExecutableElement e,Void _){
  StringBuilder buf=new StringBuilder();
  if (e.getKind() == ElementKind.CONSTRUCTOR)   buf.append(e.getEnclosingElement().getSimpleName());
 else   buf.append(e.getSimpleName());
  buf.append('(');
  boolean first=true;
  for (  VariableElement p : e.getParameters()) {
    if (first)     first=false;
 else     buf.append(',');
    buf.append(p.asType().accept(ShortNameVisitor.INSTANCE,null));
  }
  buf.append(')');
  if (e.getKind() != ElementKind.CONSTRUCTOR) {
    buf.append(':');
    buf.append(e.getReturnType().accept(ShortNameVisitor.INSTANCE,null));
  }
  return buf.toString();
}"
83506,"public void generateClassOutlineJs(final CompilationUnitTree cu,PrintWriter w) throws IOException {
  try {
    w.printf(""String_Node_Str"");
    final JsonWriter jw=new JsonWriter(w);
    jw.startObject();
    jw.property(""String_Node_Str"",TreeUtil.getPackageName(cu));
    jw.key(""String_Node_Str"").startArray();
    new TreePathScanner<Void,Void>(){
      private final SourcePositions sourcePositions=pss.getSourcePositions();
      public Void visitClass(      ClassTree ct,      Void _){
        boolean r=pre(ct);
        super.visitClass(ct,_);
        if (r)         post();
        return _;
      }
      public Void visitMethod(      MethodTree mt,      Void _){
        boolean r=pre(mt);
        super.visitMethod(mt,_);
        if (r)         post();
        return _;
      }
      public Void visitVariable(      VariableTree vt,      Void _){
        boolean r=pre(vt);
        super.visitVariable(vt,_);
        if (r)         post();
        return _;
      }
      boolean pre(      Tree t){
        Element e=pss.getTrees().getElement(getCurrentPath());
        if (e == null)         return false;
        long endPos=sourcePositions.getEndPosition(cu,t);
        if (endPos < 0)         return false;
        if (TreeUtil.OUTLINE_WORTHY.contains(e.getKind())) {
          jw.startObject();
          writeOutlineNodeProperties(jw,e,cu,t);
          jw.key(""String_Node_Str"").startArray();
          return true;
        }
        return false;
      }
      private Void post(){
        jw.endArray().endObject();
        return null;
      }
    }
.scan(cu,null);
    jw.endArray().endObject();
    w.println(""String_Node_Str"");
  }
  finally {
    w.close();
  }
}","public void generateClassOutlineJs(final CompilationUnitTree cu,PrintWriter w) throws IOException {
  try {
    w.printf(""String_Node_Str"");
    final JsonWriter jw=new JsonWriter(w);
    jw.startObject();
    jw.property(""String_Node_Str"",TreeUtil.getPackageName(cu));
    jw.key(""String_Node_Str"").startArray();
    new TreePathScanner<Void,Void>(){
      private final SourcePositions sourcePositions=pss.getSourcePositions();
      public Void visitClass(      ClassTree ct,      Void _){
        boolean r=pre(ct);
        super.visitClass(ct,_);
        if (r)         post();
        return _;
      }
      public Void visitMethod(      MethodTree mt,      Void _){
        boolean r=pre(mt);
        super.visitMethod(mt,_);
        if (r)         post();
        return _;
      }
      public Void visitVariable(      VariableTree vt,      Void _){
        boolean r=pre(vt);
        super.visitVariable(vt,_);
        if (r)         post();
        return _;
      }
      boolean pre(      Tree t){
        Element e=pss.getTrees().getElement(getCurrentPath());
        if (e == null)         return false;
        long endPos=sourcePositions.getEndPosition(cu,t);
        if (endPos < 0)         return false;
        if (TreeUtil.OUTLINE_WORTHY_ELEMENT.contains(e.getKind())) {
          jw.startObject();
          writeOutlineNodeProperties(jw,e,cu,t);
          jw.key(""String_Node_Str"").startArray();
          return true;
        }
        return false;
      }
      private Void post(){
        jw.endArray().endObject();
        return null;
      }
    }
.scan(cu,null);
    jw.endArray().endObject();
    w.println(""String_Node_Str"");
  }
  finally {
    w.close();
  }
}"
83507,"/** 
 * Adds the given   {@link TreePath} to the {@link Node} treerooted at ""this"" node, then return the  {@link Node} wherethe  {@link TreePath} is ultimately stored.
 */
protected Node add(TreePath t){
  Node p;
  if (t.getParentPath() != null)   p=add(t.getParentPath());
 else   p=this;
  Element e=TreeUtil.getElement(t.getLeaf());
  if (e != null) {
    if (TreeUtil.OUTLINE_WORTHY.contains(e.getKind())) {
      Node n=p.children.get(e);
      if (n == null)       p.children.put(e,n=createNode(e,t));
      return n;
    }
  }
  return p;
}","/** 
 * Adds the given   {@link TreePath} to the {@link Node} treerooted at ""this"" node, then return the  {@link Node} wherethe  {@link TreePath} is ultimately stored.
 */
protected Node add(TreePath t){
  Node p;
  if (t.getParentPath() != null)   p=add(t.getParentPath());
 else   p=this;
  if (TreeUtil.OUTLINE_WORTHY_TREE.contains(t.getLeaf().getKind())) {
    Element e=TreeUtil.getElement(t.getLeaf());
    if (e != null) {
      Node n=p.children.get(e);
      if (n == null)       p.children.put(e,n=createNode(e,t));
      return n;
    }
  }
  return p;
}"
83508,"boolean pre(Tree t){
  Element e=pss.getTrees().getElement(getCurrentPath());
  if (e == null)   return false;
  long endPos=sourcePositions.getEndPosition(cu,t);
  if (endPos < 0)   return false;
  if (TreeUtil.OUTLINE_WORTHY.contains(e.getKind())) {
    jw.startObject();
    writeOutlineNodeProperties(jw,e,cu,t);
    jw.key(""String_Node_Str"").startArray();
    return true;
  }
  return false;
}","boolean pre(Tree t){
  Element e=pss.getTrees().getElement(getCurrentPath());
  if (e == null)   return false;
  long endPos=sourcePositions.getEndPosition(cu,t);
  if (endPos < 0)   return false;
  if (TreeUtil.OUTLINE_WORTHY_ELEMENT.contains(e.getKind())) {
    jw.startObject();
    writeOutlineNodeProperties(jw,e,cu,t);
    jw.key(""String_Node_Str"").startArray();
    return true;
  }
  return false;
}"
83509,"public FrameSetGenerator(ParsedSourceSet pss){
  this.pss=pss;
  this.nameVisitor=new OutlineNameVisitor(pss);
  this.linkResolverFactory=pss.getLinkResolverFactory();
  this.unnamed=pss.getElements().getPackageElement(""String_Node_Str"");
}","public FrameSetGenerator(ParsedSourceSet pss){
  this.pss=pss;
  this.linkResolverFactory=pss.getLinkResolverFactory();
  this.unnamed=pss.getElements().getPackageElement(""String_Node_Str"");
}"
83510,"/** 
 * Writes out <tt>project-usage.js</tt> that lists all classes for which we have usage index.
 */
public void generateProjectUsageJs(PrintWriter w) throws IOException {
  Map<PackageElement,Set<ParsedType>> pkgs=new TreeMap<PackageElement,Set<ParsedType>>(ParsedSourceSet.PACKAGENAME_COMPARATOR);
  for (  ParsedType pt : pss.getParsedTypes()) {
    if (pt.getReferers().length == 0)     continue;
    PackageElement pkg=pss.getElements().getPackageOf(pt.element);
    Set<ParsedType> types=pkgs.get(pkg);
    if (types == null)     pkgs.put(pkg,types=new HashSet<ParsedType>());
    if (!pt.isLocal())     types.add(pt);
  }
  w.println(""String_Node_Str"");
  JsonWriter js=new JsonWriter(w);
  js.startArray();
  for (  Entry<PackageElement,Set<ParsedType>> pkg : pkgs.entrySet()) {
    js.startObject();
    js.property(""String_Node_Str"",pkg.getKey().getQualifiedName());
    js.key(""String_Node_Str"");
    js.startArray();
    String[] names=new String[pkg.getValue().size()];
    int idx=0;
    for (    ParsedType pt : pkg.getValue()) {
      names[idx++]=pt.getPackageLocalName();
    }
    Arrays.sort(names);
    for (    String n : names) {
      js.string(n);
    }
    js.endArray();
    js.endObject();
  }
  js.endArray();
  w.println(""String_Node_Str"");
  w.close();
}","/** 
 * Writes out <tt>project-usage.js</tt> that lists all classes for which we have usage index.
 */
public void generateProjectUsageJs(PrintWriter w) throws IOException {
  Map<PackageElement,Set<ParsedType>> pkgs=new TreeMap<PackageElement,Set<ParsedType>>(ParsedSourceSet.PACKAGENAME_COMPARATOR);
  for (  ParsedType pt : pss.getParsedTypes()) {
    if (pt.getReferers().length == 0)     continue;
    PackageElement pkg=pss.getElements().getPackageOf(pt.element);
    Set<ParsedType> types=pkgs.get(pkg);
    if (types == null)     pkgs.put(pkg,types=new HashSet<ParsedType>());
    if (!pt.isLocal())     types.add(pt);
  }
  w.println(""String_Node_Str"");
  JsonWriter js=new JsonWriter(w);
  js.startArray();
  for (  Entry<PackageElement,Set<ParsedType>> pkg : pkgs.entrySet()) {
    js.startObject();
    js.property(""String_Node_Str"",pkg.getKey().getQualifiedName());
    js.key(""String_Node_Str"");
    js.startArray();
    String[] names=new String[pkg.getValue().size()];
    int idx=0;
    for (    ParsedType pt : pkg.getValue()) {
      names[idx++]=pt.getPackageLocalName();
    }
    Arrays.sort(names);
    for (    String n : names) {
      js.object(n);
    }
    js.endArray();
    js.endObject();
  }
  js.endArray();
  w.println(""String_Node_Str"");
  w.close();
}"
83511,"public void generatePackageListJs(PrintWriter w) throws IOException {
class DefinedPkgInfo extends PkgInfo<DefinedPkgInfo> {
    public DefinedPkgInfo(    String name){
      super(name);
    }
    protected DefinedPkgInfo create(    String name){
      return new DefinedPkgInfo(name);
    }
    /** 
 * False if this class doesn't have any classes in it (excluding descendants.)
 */
    boolean hasClasses;
    public void write(    JsonWriter js){
      super.write(js);
      if (hasClasses)       js.property(""String_Node_Str"",true);
    }
  }
  DefinedPkgInfo root=new DefinedPkgInfo(""String_Node_Str"");
  for (  PackageElement pe : pss.getPackageElement()) {
    root.add(pe.getQualifiedName().toString()).hasClasses=true;
  }
  try {
    w.println(""String_Node_Str"");
    root.write(new JsonWriter(w));
    w.println(""String_Node_Str"");
  }
  finally {
    w.close();
  }
}","public void generatePackageListJs(PrintWriter w) throws IOException {
class DefinedPkgInfo extends PkgInfo<DefinedPkgInfo> {
    public DefinedPkgInfo(    String name){
      super(name);
    }
    protected DefinedPkgInfo create(    String name){
      return new DefinedPkgInfo(name);
    }
    /** 
 * False if this class doesn't have any classes in it (excluding descendants.)
 */
    boolean hasClasses;
    public void write(    JsonWriter js){
      super.write(js);
      if (hasClasses)       js.property(""String_Node_Str"",true);
    }
  }
  DefinedPkgInfo root=new DefinedPkgInfo(""String_Node_Str"");
  for (  PackageElement pe : pss.getPackageElement()) {
    root.add(pe.getQualifiedName().toString()).hasClasses=true;
  }
  try {
    w.println(""String_Node_Str"");
    new JsonWriter(w).object(root);
    w.println(""String_Node_Str"");
  }
  finally {
    w.close();
  }
}"
83512,"/** 
 * Writes a JSON object that represents this node.
 */
protected void write(JsonWriter w){
  w.startObject();
  if (element != null) {
    if (path == null)     writeOutlineNodeProperties(w,element);
 else     writeOutlineNodeProperties(w,element,path.getCompilationUnit(),path.getLeaf());
  }
  if (!children.isEmpty()) {
    w.key(""String_Node_Str"");
    w.startArray();
    for (    Node child : children.values()) {
      child.write(w);
    }
    w.endArray();
  }
  if (!leaves.isEmpty()) {
    w.key(""String_Node_Str"");
    w.startArray();
    for (    TreePath p : leaves) {
      w.startObject();
      w.property(""String_Node_Str"",p.getLeaf().toString());
      w.endObject();
    }
  }
  w.endArray();
  w.endObject();
}","/** 
 * Writes a JSON object that represents this node.
 */
protected void write(JsonWriter w){
  w.startObject();
  if (element != null) {
    if (path == null)     writeOutlineNodeProperties(w,element);
 else     writeOutlineNodeProperties(w,element,path.getCompilationUnit(),path.getLeaf());
  }
  if (!children.isEmpty()) {
    w.key(""String_Node_Str"");
    w.startArray();
    for (    Node child : children.values()) {
      child.write(w);
    }
    w.endArray();
  }
  if (!leaves.isEmpty()) {
    w.key(""String_Node_Str"");
    w.startArray();
    for (    TreePath p : leaves) {
      w.startObject();
      w.property(""String_Node_Str"",p.getLeaf().toString());
      w.endObject();
    }
    w.endArray();
  }
  w.endObject();
}"
83513,"/** 
 * Adds the given   {@link TreePath} to the {@link Node} treerooted at ""this"" node, then return the  {@link Node} wherethe  {@link TreePath} is ultimately stored.
 */
protected Node add(TreePath t){
  Node p;
  if (t.getParentPath() != null)   p=add(t.getParentPath());
 else   p=this;
  Element e=TreeUtil.getElement(t.getLeaf());
  if (e != null) {
    if (TreeUtil.OUTLINE_WORTHY.contains(e.getKind())) {
      Node n=children.get(e);
      if (n == null)       children.put(e,n=createNode(e,t));
      return n;
    }
  }
  return p;
}","/** 
 * Adds the given   {@link TreePath} to the {@link Node} treerooted at ""this"" node, then return the  {@link Node} wherethe  {@link TreePath} is ultimately stored.
 */
protected Node add(TreePath t){
  Node p;
  if (t.getParentPath() != null)   p=add(t.getParentPath());
 else   p=this;
  Element e=TreeUtil.getElement(t.getLeaf());
  if (e != null) {
    if (TreeUtil.OUTLINE_WORTHY.contains(e.getKind())) {
      Node n=p.children.get(e);
      if (n == null)       p.children.put(e,n=createNode(e,t));
      return n;
    }
  }
  return p;
}"
83514,"private void sep(){
  if (first)   first=false;
 else   w.print(',');
  nl(0);
}","private void sep(){
  if (first)   first=false;
 else {
    w.print(',');
    nl(0);
  }
}"
83515,"/** 
 * Finds the first identifier token after the given tree. <p> This is used to identify the position of few nodes that are not available from javac.
 * @return nullif no such node is found or a syntax error is detected.
 */
protected final Token findTokenAfter(Tree t){
  long pos=pss.getSourcePositions().getEndPosition(compUnit,t);
  if (pos < 0)   return null;
  JavaLexer lexer=new JavaLexer(new StringReader(sourceFile.substring((int)pos)));
  lexer.setTabSize(pss.getTabWidth());
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT) {
        LineMap lm=compUnit.getLineMap();
        token.setLine(token.getLine() + (int)lm.getLineNumber(pos) - 1);
        token.setColumn(token.getColumn() + (int)lm.getColumnNumber(pos) - 1);
        return token;
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  return null;
}","/** 
 * Finds the first identifier token after the given tree. <p> This is used to identify the position of few nodes that are not available from javac.
 * @param t The first token after the end position of this tree node will be returned.
 * @param id If non-null, find the first token that has this identifier.
 * @return nullif no such node is found or a syntax error is detected.
 */
protected final Token findTokenAfter(Tree t,String id){
  long pos=pss.getSourcePositions().getEndPosition(compUnit,t);
  if (pos < 0)   return null;
  JavaLexer lexer=new JavaLexer(new StringReader(sourceFile.substring((int)pos)));
  lexer.setTabSize(pss.getTabWidth());
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT) {
        if (id != null && !token.getText().equals(id))         continue;
        LineMap lm=compUnit.getLineMap();
        token.setLine(token.getLine() + (int)lm.getLineNumber(pos) - 1);
        token.setColumn(token.getColumn() + (int)lm.getColumnNumber(pos) - 1);
        return token;
      }
    }
  }
 catch (  TokenStreamException e) {
  }
  return null;
}"
83516,"/** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
public Void visitVariable(VariableTree vt,Void _){
  Element e=TreeUtil.getElement(vt);
  if (e != null) {
    if (e.getKind() != ElementKind.ENUM_CONSTANT) {
      Token t=gen.findTokenAfter(vt.getType());
      if (t != null) {
        gen.add(new SpanMarker(lineMap,t,getCssClass(e,""String_Node_Str""),buildId(e)));
      }
    }
 else {
      gen.add(new SpanMarker(cu,srcPos,vt,getCssClass(e,""String_Node_Str""),buildId(e)));
    }
  }
  return super.visitVariable(vt,_);
}","/** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
public Void visitVariable(VariableTree vt,Void _){
  Element e=TreeUtil.getElement(vt);
  if (e != null) {
    if (e.getKind() != ElementKind.ENUM_CONSTANT) {
      Token t=gen.findTokenAfter(vt.getType(),vt.getName().toString());
      if (t != null) {
        gen.add(new SpanMarker(lineMap,t,getCssClass(e,""String_Node_Str""),buildId(e)));
      }
    }
 else {
      gen.add(new SpanMarker(cu,srcPos,vt,getCssClass(e,""String_Node_Str""),buildId(e)));
    }
  }
  return super.visitVariable(vt,_);
}"
83517,"/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  final LinkResolver linkResolver=linkResolverFactory.create(cu,this);
  JavaLexer lexer=new JavaLexer(new StringReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new SpanMarker(lineMap,token,""String_Node_Str""));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new CommentMarker(lineMap,token));
    }
  }
 catch (  TokenStreamException e) {
  }
  new TreeScanner<Void,Void>(){
    private String buildId(    Element e){
      String buf=linkResolver.href(e);
      if (buf.length() == 0)       return null;
      if (buf.charAt(0) != '#')       throw new IllegalStateException(""String_Node_Str"" + e + ""String_Node_Str""+ buf);
      return buf.substring(1);
    }
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      gen.add(new SpanMarker(cu,srcPos,pt,""String_Node_Str""));
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new SpanMarker(cu,srcPos,lit,""String_Node_Str""));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      Element e=TreeUtil.getElement(vt);
      if (e != null) {
        if (e.getKind() != ElementKind.ENUM_CONSTANT) {
          Token t=gen.findTokenAfter(vt.getType());
          if (t != null) {
            gen.add(new SpanMarker(lineMap,t,getCssClass(e,""String_Node_Str""),buildId(e)));
          }
        }
 else {
          gen.add(new SpanMarker(cu,srcPos,vt,getCssClass(e,""String_Node_Str""),buildId(e)));
        }
      }
      return super.visitVariable(vt,_);
    }
    private void addBookmark(    Tree t,    Bookmark bookmark){
      gen.add(lineMap.getLineNumber(srcPos.getStartPosition(cu,t)),bookmark);
    }
    /** 
 * Method declaration.
 */
    public Void visitMethod(    MethodTree mt,    Void _){
      ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
      if (e != null) {
        gen.add(new SpanMarker(cu,srcPos,mt,getCssClass(e,""String_Node_Str""),buildId(e)));
        ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
        Set<Match> r=pt.findOverriddenMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverriddenMethodsBookmark(r,linkResolver));
        }
        r=pt.findOverridingMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverridingMethodsBookmark(r,linkResolver));
        }
      }
      return super.visitMethod(mt,_);
    }
    /** 
 * Class declaration.
 */
    public Void visitClass(    ClassTree ct,    Void _){
      TypeElement e=(TypeElement)TreeUtil.getElement(ct);
      if (e != null) {
        gen.add(new SpanMarker(cu,srcPos,ct,getCssClass(e,""String_Node_Str""),buildId(e)));
        List<ParsedType> descendants=getParsedType(e).descendants;
        if (!descendants.isEmpty()) {
          addBookmark(ct,new SubClassBookmark(descendants,linkResolver));
        }
        if (e.getNestingKind() == NestingKind.ANONYMOUS) {
          scan(ct.getMembers());
          return _;
        }
      }
      return super.visitClass(ct,_);
    }
    /** 
 * All the symbols found in the source code.
 */
    public Void visitIdentifier(    IdentifierTree id,    Void _){
      if (!ReservedWords.LIST.contains(id.getName().toString())) {
        Element e=TreeUtil.getElement(id);
        if (e != null) {
          gen.add(new LinkMarker(cu,srcPos,id,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
        }
      }
      return super.visitIdentifier(id,_);
    }
    /** 
 * ""exp.token""
 */
    public Void visitMemberSelect(    MemberSelectTree mst,    Void _){
      long ep=srcPos.getEndPosition(cu,mst);
      long sp=ep - mst.getIdentifier().length();
      Element e=TreeUtil.getElement(mst);
      if (e != null) {
        gen.add(new LinkMarker(sp,ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
      }
      return super.visitMemberSelect(mst,_);
    }
    public Void visitNewClass(    NewClassTree nt,    Void _){
      long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
      long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
      Element e=TreeUtil.getElement(nt);
      if (e != null) {
        gen.add(new LinkMarker(sp,ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
      }
      scan(nt.getEnclosingExpression());
      scan(nt.getArguments());
      scan(nt.getTypeArguments());
      scan(nt.getClassBody());
      return _;
    }
    /** 
 * Method invocation of the form ""exp.method()""
 */
    public Void visitMethodInvocation(    MethodInvocationTree mi,    Void _){
      ExpressionTree ms=mi.getMethodSelect();
      Element e=TreeUtil.getElement(mi);
      if (e != null) {
        Name methodName=e.getSimpleName();
        long ep=srcPos.getEndPosition(cu,ms);
        if (ep >= 0) {
          gen.add(new LinkMarker(ep - methodName.length(),ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
        }
      }
      return super.visitMethodInvocation(mi,_);
    }
    private void scan(    List<? extends Tree> list){
      for (      Tree t : list)       scan(t);
    }
    private void scan(    Tree t){
      scan(t,null);
    }
  }
.scan(cu,null);
  ExpressionTree packageName=cu.getPackageName();
  if (packageName != null) {
    new TreePathScanner<String,Void>(){
      /** 
 * For ""a"" of ""a.b.c""
 */
      public String visitIdentifier(      IdentifierTree id,      Void _){
        String name=id.getName().toString();
        PackageElement pe=elements.getPackageElement(name);
        gen.add(new LinkMarker(cu,srcPos,id,linkResolver.href(pe),getCssClass(pe,""String_Node_Str"")));
        return name;
      }
      public String visitMemberSelect(      MemberSelectTree mst,      Void _){
        String baseName=scan(mst.getExpression(),_);
        String name=mst.getIdentifier().toString();
        if (baseName.length() > 0)         name=baseName + '.' + name;
        PackageElement pe=elements.getPackageElement(name);
        long ep=srcPos.getEndPosition(cu,mst);
        long sp=ep - mst.getIdentifier().length();
        gen.add(new LinkMarker(sp,ep,linkResolver.href(pe),getCssClass(pe,""String_Node_Str"")));
        return name;
      }
    }
.scan(new TreePath(new TreePath(cu),packageName),null);
  }
}","/** 
 * Invoked by   {@link HtmlGenerator}'s constructor to complete the initialization. <p> This is where the actual annotation of the source code happens.
 */
protected void configure(final CompilationUnitTree cu,final HtmlGenerator gen) throws IOException {
  final LineMap lineMap=cu.getLineMap();
  final LinkResolver linkResolver=linkResolverFactory.create(cu,this);
  JavaLexer lexer=new JavaLexer(new StringReader(gen.sourceFile));
  lexer.setTabSize(tabWidth);
  try {
    while (true) {
      Token token=lexer.nextToken();
      int type=token.getType();
      if (type == JavaTokenTypes.EOF)       break;
      if (type == JavaTokenTypes.IDENT && ReservedWords.LIST.contains(token.getText()))       gen.add(new SpanMarker(lineMap,token,""String_Node_Str""));
      if (type == JavaTokenTypes.ML_COMMENT || type == JavaTokenTypes.SL_COMMENT)       gen.add(new CommentMarker(lineMap,token));
    }
  }
 catch (  TokenStreamException e) {
  }
  new TreeScanner<Void,Void>(){
    private String buildId(    Element e){
      String buf=linkResolver.href(e);
      if (buf.length() == 0)       return null;
      if (buf.charAt(0) != '#')       throw new IllegalStateException(""String_Node_Str"" + e + ""String_Node_Str""+ buf);
      return buf.substring(1);
    }
    /** 
 * primitive types like int, long, void, etc.
 */
    public Void visitPrimitiveType(    PrimitiveTypeTree pt,    Void _){
      gen.add(new SpanMarker(cu,srcPos,pt,""String_Node_Str""));
      return super.visitPrimitiveType(pt,_);
    }
    /** 
 * literal string, int, etc. Null.
 */
    public Void visitLiteral(    LiteralTree lit,    Void _){
      gen.add(new SpanMarker(cu,srcPos,lit,""String_Node_Str""));
      return super.visitLiteral(lit,_);
    }
    /** 
 * Definition of a variable, such as parameter, field, and local variables.
 */
    public Void visitVariable(    VariableTree vt,    Void _){
      Element e=TreeUtil.getElement(vt);
      if (e != null) {
        if (e.getKind() != ElementKind.ENUM_CONSTANT) {
          Token t=gen.findTokenAfter(vt.getType(),vt.getName().toString());
          if (t != null) {
            gen.add(new SpanMarker(lineMap,t,getCssClass(e,""String_Node_Str""),buildId(e)));
          }
        }
 else {
          gen.add(new SpanMarker(cu,srcPos,vt,getCssClass(e,""String_Node_Str""),buildId(e)));
        }
      }
      return super.visitVariable(vt,_);
    }
    private void addBookmark(    Tree t,    Bookmark bookmark){
      gen.add(lineMap.getLineNumber(srcPos.getStartPosition(cu,t)),bookmark);
    }
    /** 
 * Method declaration.
 */
    public Void visitMethod(    MethodTree mt,    Void _){
      ExecutableElement e=(ExecutableElement)TreeUtil.getElement(mt);
      if (e != null) {
        gen.add(new SpanMarker(cu,srcPos,mt,getCssClass(e,""String_Node_Str""),buildId(e)));
        ParsedType pt=getParsedType((TypeElement)e.getEnclosingElement());
        Set<Match> r=pt.findOverriddenMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverriddenMethodsBookmark(r,linkResolver));
        }
        r=pt.findOverridingMethods(elements,e);
        if (!r.isEmpty()) {
          addBookmark(mt,new OverridingMethodsBookmark(r,linkResolver));
        }
      }
      return super.visitMethod(mt,_);
    }
    /** 
 * Class declaration.
 */
    public Void visitClass(    ClassTree ct,    Void _){
      TypeElement e=(TypeElement)TreeUtil.getElement(ct);
      if (e != null) {
        gen.add(new SpanMarker(cu,srcPos,ct,getCssClass(e,""String_Node_Str""),buildId(e)));
        List<ParsedType> descendants=getParsedType(e).descendants;
        if (!descendants.isEmpty()) {
          addBookmark(ct,new SubClassBookmark(descendants,linkResolver));
        }
        if (e.getNestingKind() == NestingKind.ANONYMOUS) {
          scan(ct.getMembers());
          return _;
        }
      }
      return super.visitClass(ct,_);
    }
    /** 
 * All the symbols found in the source code.
 */
    public Void visitIdentifier(    IdentifierTree id,    Void _){
      if (!ReservedWords.LIST.contains(id.getName().toString())) {
        Element e=TreeUtil.getElement(id);
        if (e != null) {
          gen.add(new LinkMarker(cu,srcPos,id,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
        }
      }
      return super.visitIdentifier(id,_);
    }
    /** 
 * ""exp.token""
 */
    public Void visitMemberSelect(    MemberSelectTree mst,    Void _){
      long ep=srcPos.getEndPosition(cu,mst);
      long sp=ep - mst.getIdentifier().length();
      Element e=TreeUtil.getElement(mst);
      if (e != null) {
        gen.add(new LinkMarker(sp,ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
      }
      return super.visitMemberSelect(mst,_);
    }
    public Void visitNewClass(    NewClassTree nt,    Void _){
      long ep=srcPos.getEndPosition(cu,nt.getIdentifier());
      long sp=srcPos.getStartPosition(cu,nt.getIdentifier());
      Element e=TreeUtil.getElement(nt);
      if (e != null) {
        gen.add(new LinkMarker(sp,ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
      }
      scan(nt.getEnclosingExpression());
      scan(nt.getArguments());
      scan(nt.getTypeArguments());
      scan(nt.getClassBody());
      return _;
    }
    /** 
 * Method invocation of the form ""exp.method()""
 */
    public Void visitMethodInvocation(    MethodInvocationTree mi,    Void _){
      ExpressionTree ms=mi.getMethodSelect();
      Element e=TreeUtil.getElement(mi);
      if (e != null) {
        Name methodName=e.getSimpleName();
        long ep=srcPos.getEndPosition(cu,ms);
        if (ep >= 0) {
          gen.add(new LinkMarker(ep - methodName.length(),ep,linkResolver.href(e),getCssClass(e,""String_Node_Str"")));
        }
      }
      return super.visitMethodInvocation(mi,_);
    }
    private void scan(    List<? extends Tree> list){
      for (      Tree t : list)       scan(t);
    }
    private void scan(    Tree t){
      scan(t,null);
    }
  }
.scan(cu,null);
  ExpressionTree packageName=cu.getPackageName();
  if (packageName != null) {
    new TreePathScanner<String,Void>(){
      /** 
 * For ""a"" of ""a.b.c""
 */
      public String visitIdentifier(      IdentifierTree id,      Void _){
        String name=id.getName().toString();
        PackageElement pe=elements.getPackageElement(name);
        gen.add(new LinkMarker(cu,srcPos,id,linkResolver.href(pe),getCssClass(pe,""String_Node_Str"")));
        return name;
      }
      public String visitMemberSelect(      MemberSelectTree mst,      Void _){
        String baseName=scan(mst.getExpression(),_);
        String name=mst.getIdentifier().toString();
        if (baseName.length() > 0)         name=baseName + '.' + name;
        PackageElement pe=elements.getPackageElement(name);
        long ep=srcPos.getEndPosition(cu,mst);
        long sp=ep - mst.getIdentifier().length();
        gen.add(new LinkMarker(sp,ep,linkResolver.href(pe),getCssClass(pe,""String_Node_Str"")));
        return name;
      }
    }
.scan(new TreePath(new TreePath(cu),packageName),null);
  }
}"
83518,"public InternalLinkResolver(PackageElement pkg,ParsedSourceSet pss){
  this.pss=pss;
  this.trees=pss.getTrees();
  this.elements=pss.getElements();
  this.types=pss.getTypes();
  this.primary=null;
  this.pkg=pkg.getQualifiedName().toString().split(""String_Node_Str"");
}","public InternalLinkResolver(PackageElement pkg,ParsedSourceSet pss){
  this.pss=pss;
  this.compUnit=null;
  this.trees=pss.getTrees();
  this.elements=pss.getElements();
  this.types=pss.getTypes();
  this.pkg=pkg.getQualifiedName().toString().split(""String_Node_Str"");
}"
83519,"public StringBuilder visitType(TypeElement t,Void _){
  if (t == primary)   return new StringBuilder();
  if (trees.getTree(t) == null)   return null;
switch (t.getNestingKind()) {
case ANONYMOUS:
    String binaryName=elements.getBinaryName(t).toString();
  int idx=binaryName.lastIndexOf('$');
String name='~' + binaryName.substring(idx);
return combine(getEnclosingTypeOrPackage(t).accept(this,null)).append(name);
case TOP_LEVEL:
return recurse(t).append(t.getSimpleName()).append(""String_Node_Str"");
case MEMBER:
case LOCAL:
return recurse(t).append('~').append(t.getSimpleName());
default :
throw new IllegalStateException(t.getNestingKind().toString());
}
}","public StringBuilder visitType(TypeElement t,Void _){
  ClassTree ct=trees.getTree(t);
  if (ct == null)   return null;
switch (t.getNestingKind()) {
case ANONYMOUS:
    String binaryName=elements.getBinaryName(t).toString();
  int idx=binaryName.lastIndexOf('$');
String name=""String_Node_Str"" + binaryName.substring(idx);
return combine(getEnclosingTypeOrPackage(t).accept(this,null)).append(name);
case TOP_LEVEL:
CompilationUnitTree owner=pss.getTreePathByClass().get(ct).getCompilationUnit();
String primaryTypeName=TreeUtil.getPrimaryTypeName(owner);
String simpleName=ct.getSimpleName().toString();
StringBuilder buf;
if (!owner.equals(compUnit)) {
buf=combine(recurse(t)).append(t.getSimpleName()).append(""String_Node_Str"");
}
 else {
buf=new StringBuilder();
}
if (!primaryTypeName.equals(simpleName)) {
return buf.append(""String_Node_Str"").append(simpleName);
}
return buf;
case MEMBER:
case LOCAL:
return recurse(t).append('~').append(t.getSimpleName());
default :
throw new IllegalStateException(t.getNestingKind().toString());
}
}"
83520,"/** 
 * Gets all the classes in the given package.
 */
public Collection<TypeElement> getClassElements(PackageElement pkg){
  Set<TypeElement> r=new TreeSet<TypeElement>(TYPE_COMPARATOR);
  for (  TypeElement e : classElements) {
    Element p=e.getEnclosingElement();
    if (p.equals(pkg))     r.add(e);
  }
  return r;
}","/** 
 * Gets all the classes in the given package.
 */
public Collection<TypeElement> getClassElements(PackageElement pkg){
  Set<TypeElement> r=new TreeSet<TypeElement>(TYPE_COMPARATOR);
  for (  TypeElement e : parsedTypes.keySet()) {
    Element p=e.getEnclosingElement();
    if (p.equals(pkg))     r.add(e);
  }
  return r;
}"
83521,"/** 
 * Runs <tt>javac</tt> and analyzes the result. <p> Any error found during the analysis will be reported to  {@link DiagnosticListener} installed on {@link JavacTask}.
 */
public ParsedSourceSet(JavacTask javac) throws IOException {
  trees=Trees.instance(javac);
  elements=javac.getElements();
  types=javac.getTypes();
  srcPos=new SourcePositionsWrapper(trees.getSourcePositions());
  Iterable<? extends CompilationUnitTree> parsed=javac.parse();
  javac.analyze();
  TreePathScanner<?,?> classScanner=new TreePathScanner<Void,Void>(){
    public Void visitClass(    ClassTree ct,    Void _){
      TreePath path=getCurrentPath();
      TypeElement e=(TypeElement)trees.getElement(path);
      if (e != null) {
        classes.put(e.getQualifiedName().toString(),path);
        classElements.add(e);
        getParsedType(e);
      }
      return super.visitClass(ct,_);
    }
  }
;
  for (  CompilationUnitTree u : parsed) {
    compilationUnits.add(u);
    classScanner.scan(u,null);
  }
  for (  TypeElement e : classElements) {
    Element p=e.getEnclosingElement();
    if (p.getKind() == ElementKind.PACKAGE) {
      PackageElement pe=(PackageElement)p;
      packages.add(pe);
    }
  }
  for (  Map.Entry<TypeElement,Set<CompilationUnitTree>> e : ClassReferenceBuilder.build(compilationUnits).entrySet())   getParsedType(e.getKey()).referers=e.getValue().toArray(new CompilationUnitTree[e.getValue().size()]);
}","/** 
 * Runs <tt>javac</tt> and analyzes the result. <p> Any error found during the analysis will be reported to  {@link DiagnosticListener} installed on {@link JavacTask}.
 */
public ParsedSourceSet(JavacTask javac) throws IOException {
  trees=Trees.instance(javac);
  elements=javac.getElements();
  types=javac.getTypes();
  srcPos=new SourcePositionsWrapper(trees.getSourcePositions());
  Iterable<? extends CompilationUnitTree> parsed=javac.parse();
  javac.analyze();
  TreePathScanner<?,?> classScanner=new TreePathScanner<Void,Void>(){
    public Void visitClass(    ClassTree ct,    Void _){
      TreePath path=getCurrentPath();
      treePathByClass.put(ct,path);
      TypeElement e=(TypeElement)trees.getElement(path);
      if (e != null) {
        classes.put(e.getQualifiedName().toString(),path);
        getParsedType(e);
      }
      return super.visitClass(ct,_);
    }
  }
;
  for (  CompilationUnitTree u : parsed) {
    compilationUnits.add(u);
    classScanner.scan(u,null);
  }
  for (  TypeElement e : parsedTypes.keySet()) {
    Element p=e.getEnclosingElement();
    if (p.getKind() == ElementKind.PACKAGE) {
      PackageElement pe=(PackageElement)p;
      packages.add(pe);
    }
  }
  for (  Map.Entry<TypeElement,Set<CompilationUnitTree>> e : ClassReferenceBuilder.build(compilationUnits).entrySet())   getParsedType(e.getKey()).referers=e.getValue().toArray(new CompilationUnitTree[e.getValue().size()]);
}"
83522,"/** 
 * Generates all the HTML files into the given directory.
 * @param css If specified, path to CSS will computed by using this resolver
 */
public void generateAll(File outDir,ResourceResolver css) throws IOException {
  if (css == null) {
    css=new AbstractResourceResolver(){
      public String href(      CompilationUnitTree compUnit){
        return getRelativePathToTop(compUnit) + ""String_Node_Str"";
      }
    }
;
  }
  pss.setLinkResolverFactories(linkResolverFactory);
  for (  CompilationUnitTree cu : pss.getCompilationUnits()) {
    ExpressionTree packageName=cu.getPackageName();
    String pkg=packageName == null ? ""String_Node_Str"" : packageName.toString().replace('.','/') + '/';
    String name=cu.getSourceFile().getName();
    int idx=name.lastIndexOf('/');
    if (idx >= 0)     name=name.substring(idx + 1);
    idx=name.lastIndexOf('\\');
    if (idx >= 0)     name=name.substring(idx + 1);
    if (name.endsWith(""String_Node_Str""))     name=name.substring(0,name.length() - 5);
    System.out.println(pkg + name);
    File out=new File(outDir,pkg + name + ""String_Node_Str"");
    out.getParentFile().mkdirs();
    FrameHtmlGenerator gen=new FrameHtmlGenerator(pss,cu);
    gen.setCss(css.href(cu));
    gen.write(out);
    File js=new File(outDir,pkg + name + ""String_Node_Str"");
    generateClassOutlineJs(cu,new PrintWriter(js));
  }
  generateIndex(new PrintWriter(open(outDir,""String_Node_Str"")));
  generatePackageListJs(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  generatePackageList(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  for (  PackageElement p : pss.getPackageElement()) {
    File dir=new File(outDir,getPackagePath(p));
    dir.mkdirs();
    generateClassListJs(p,new PrintWriter(openDefault(dir,""String_Node_Str"")));
  }
  generateProjectUsageJs(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  IOUtil.copy(""String_Node_Str"",new File(outDir,""String_Node_Str""));
  IOUtil.copy(""String_Node_Str"",new File(outDir,""String_Node_Str""));
  IOUtil.copy(""String_Node_Str"",new File(outDir,""String_Node_Str""));
  for (  String res : RESOURCES) {
    File o=new File(outDir,res);
    o.getParentFile().mkdirs();
    InputStream in=getClass().getResourceAsStream(res);
    if (in == null)     throw new Error(""String_Node_Str"" + res + ""String_Node_Str"");
    IOUtil.copy(in,o);
  }
}","/** 
 * Generates all the HTML files into the given directory.
 * @param css If specified, path to CSS will computed by using this resolver
 */
public void generateAll(File outDir,ResourceResolver css) throws IOException {
  if (css == null) {
    css=new AbstractResourceResolver(){
      public String href(      CompilationUnitTree compUnit){
        return getRelativePathToTop(compUnit) + ""String_Node_Str"";
      }
    }
;
  }
  pss.setLinkResolverFactories(linkResolverFactory);
  for (  CompilationUnitTree cu : pss.getCompilationUnits()) {
    ExpressionTree packageName=cu.getPackageName();
    String pkg=packageName == null ? ""String_Node_Str"" : packageName.toString().replace('.','/') + '/';
    String name=TreeUtil.getPrimaryTypeName(cu);
    System.out.println(pkg + name);
    File out=new File(outDir,pkg + name + ""String_Node_Str"");
    out.getParentFile().mkdirs();
    FrameHtmlGenerator gen=new FrameHtmlGenerator(pss,cu);
    gen.setCss(css.href(cu));
    gen.write(out);
    File js=new File(outDir,pkg + name + ""String_Node_Str"");
    generateClassOutlineJs(cu,new PrintWriter(js));
  }
  generateIndex(new PrintWriter(open(outDir,""String_Node_Str"")));
  generatePackageListJs(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  generatePackageList(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  for (  PackageElement p : pss.getPackageElement()) {
    File dir=new File(outDir,getPackagePath(p));
    dir.mkdirs();
    generateClassListJs(p,new PrintWriter(openDefault(dir,""String_Node_Str"")));
  }
  generateProjectUsageJs(new PrintWriter(openDefault(outDir,""String_Node_Str"")));
  IOUtil.copy(""String_Node_Str"",new File(outDir,""String_Node_Str""));
  IOUtil.copy(""String_Node_Str"",new File(outDir,""String_Node_Str""));
  IOUtil.copy(""String_Node_Str"",new File(outDir,""String_Node_Str""));
  for (  String res : RESOURCES) {
    File o=new File(outDir,res);
    o.getParentFile().mkdirs();
    InputStream in=getClass().getResourceAsStream(res);
    if (in == null)     throw new Error(""String_Node_Str"" + res + ""String_Node_Str"");
    IOUtil.copy(in,o);
  }
}"
83523,"public StringBuilder visitType(TypeElement t,Void _){
  ClassTree ct=trees.getTree(t);
  if (ct == null)   return null;
switch (t.getNestingKind()) {
case ANONYMOUS:
    String binaryName=elements.getBinaryName(t).toString();
  int idx=binaryName.lastIndexOf('$');
String name=""String_Node_Str"" + binaryName.substring(idx);
return combine(getEnclosingTypeOrPackage(t).accept(this,null)).append(name);
case TOP_LEVEL:
CompilationUnitTree owner=pss.getTreePathByClass().get(ct).getCompilationUnit();
String primaryTypeName=TreeUtil.getPrimaryTypeName(owner);
String simpleName=ct.getSimpleName().toString();
StringBuilder buf;
if (!owner.equals(compUnit)) {
buf=combine(recurse(t)).append(t.getSimpleName()).append(""String_Node_Str"");
}
 else {
buf=new StringBuilder();
}
if (!primaryTypeName.equals(simpleName)) {
return buf.append(""String_Node_Str"").append(simpleName);
}
return buf;
case MEMBER:
case LOCAL:
return recurse(t).append('~').append(t.getSimpleName());
default :
throw new IllegalStateException(t.getNestingKind().toString());
}
}","public StringBuilder visitType(TypeElement t,Void _){
  ClassTree ct=trees.getTree(t);
  if (ct == null)   return null;
switch (t.getNestingKind()) {
case ANONYMOUS:
    String binaryName=elements.getBinaryName(t).toString();
  int idx=binaryName.lastIndexOf('$');
String name=""String_Node_Str"" + binaryName.substring(idx);
return combine(getEnclosingTypeOrPackage(t).accept(this,null)).append(name);
case TOP_LEVEL:
CompilationUnitTree owner=pss.getTreePathByClass().get(ct).getCompilationUnit();
String primaryTypeName=TreeUtil.getPrimaryTypeName(owner);
String simpleName=ct.getSimpleName().toString();
StringBuilder buf;
if (!owner.equals(compUnit)) {
buf=combine(recurse(t)).append(primaryTypeName).append(""String_Node_Str"");
}
 else {
buf=new StringBuilder();
}
if (!primaryTypeName.equals(simpleName)) {
return buf.append(""String_Node_Str"").append(simpleName);
}
return buf;
case MEMBER:
case LOCAL:
return recurse(t).append('~').append(t.getSimpleName());
default :
throw new IllegalStateException(t.getNestingKind().toString());
}
}"
83524,"/** 
 * Gets all the packages of the analyzed source files.
 * @return can be empty but never null.
 */
public Collection<PackageElement> getPackageElement(){
  return Collections.unmodifiableCollection(packages);
}","/** 
 * Gets all the packages of the analyzed source files. <p> This does not include those packages that are just referenced. 
 * @return can be empty but never null.
 */
public Collection<PackageElement> getPackageElement(){
  return Collections.unmodifiableCollection(packages);
}"
83525,"/** 
 * Runs <tt>javac</tt> and analyzes the result. <p> Any error found during the analysis will be reported to  {@link DiagnosticListener} installed on {@link JavacTask}.
 */
public ParsedSourceSet(JavacTask javac) throws IOException {
  trees=Trees.instance(javac);
  elements=javac.getElements();
  types=javac.getTypes();
  srcPos=new SourcePositionsWrapper(trees.getSourcePositions());
  Iterable<? extends CompilationUnitTree> parsed=javac.parse();
  javac.analyze();
  TreePathScanner<?,?> classScanner=new TreePathScanner<Void,Void>(){
    public Void visitClass(    ClassTree ct,    Void _){
      TreePath path=getCurrentPath();
      treePathByClass.put(ct,path);
      TypeElement e=(TypeElement)trees.getElement(path);
      if (e != null) {
        classes.put(e.getQualifiedName().toString(),path);
        getParsedType(e);
      }
      return super.visitClass(ct,_);
    }
  }
;
  for (  CompilationUnitTree u : parsed) {
    compilationUnits.add(u);
    classScanner.scan(u,null);
  }
  for (  TypeElement e : parsedTypes.keySet()) {
    Element p=e.getEnclosingElement();
    if (p.getKind() == ElementKind.PACKAGE) {
      PackageElement pe=(PackageElement)p;
      packages.add(pe);
    }
  }
  for (  Map.Entry<TypeElement,Set<CompilationUnitTree>> e : ClassReferenceBuilder.build(compilationUnits).entrySet())   getParsedType(e.getKey()).referers=e.getValue().toArray(new CompilationUnitTree[e.getValue().size()]);
}","/** 
 * Runs <tt>javac</tt> and analyzes the result. <p> Any error found during the analysis will be reported to  {@link DiagnosticListener} installed on {@link JavacTask}.
 */
public ParsedSourceSet(JavacTask javac) throws IOException {
  trees=Trees.instance(javac);
  elements=javac.getElements();
  types=javac.getTypes();
  srcPos=new SourcePositionsWrapper(trees.getSourcePositions());
  Iterable<? extends CompilationUnitTree> parsed=javac.parse();
  javac.analyze();
  TreePathScanner<?,?> classScanner=new TreePathScanner<Void,Void>(){
    public Void visitClass(    ClassTree ct,    Void _){
      TreePath path=getCurrentPath();
      treePathByClass.put(ct,path);
      TypeElement e=(TypeElement)trees.getElement(path);
      if (e != null) {
        classes.put(e.getQualifiedName().toString(),path);
        getParsedType(e);
        Element p=e.getEnclosingElement();
        if (p.getKind() == ElementKind.PACKAGE)         packages.add((PackageElement)p);
      }
      return super.visitClass(ct,_);
    }
  }
;
  for (  CompilationUnitTree u : parsed) {
    compilationUnits.add(u);
    classScanner.scan(u,null);
  }
  for (  Map.Entry<TypeElement,Set<CompilationUnitTree>> e : ClassReferenceBuilder.build(compilationUnits).entrySet())   getParsedType(e.getKey()).referers=e.getValue().toArray(new CompilationUnitTree[e.getValue().size()]);
}"
83526,"public void clear(){
  toDraw=false;
  StylesFactory.clearCache();
  style=StylesFactory.getCurrentStyle();
}","public void clear(){
  toDraw=false;
  StylesFactory.clearCache();
  setStyle(StylesFactory.getCurrentStyle());
}"
83527,"public void setStyle(Style style){
  toDraw=false;
  this.style=style;
}","public void setStyle(Style style){
  toDraw=false;
  style.setColor(color);
  this.style=style;
}"
83528,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  upgrade();
  surface=new Surface(this);
  LayoutParams params=new LayoutParams(android.view.ViewGroup.LayoutParams.FILL_PARENT,android.view.ViewGroup.LayoutParams.FILL_PARENT);
  setContentView(surface,params);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  surface=new Surface(this);
  LayoutParams params=new LayoutParams(android.view.ViewGroup.LayoutParams.FILL_PARENT,android.view.ViewGroup.LayoutParams.FILL_PARENT);
  setContentView(surface,params);
}"
83529,"protected Void doInBackground(Void... urls){
  surface.getThread().pauseDrawing();
  String path=""String_Node_Str"";
  String filename=""String_Node_Str"";
  String extension=""String_Node_Str"";
  if (!new File(path).exists()) {
    new File(path).mkdirs();
  }
  int suffix=1;
  while (new File(path + filename + suffix+ extension).exists()) {
    suffix++;
  }
  final String fileName=path + filename + suffix+ extension;
  try {
    surface.saveBitmap(fileName);
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  return null;
}","protected Void doInBackground(Void... urls){
  surface.getThread().pauseDrawing();
  String sdPath=Environment.getExternalStorageDirectory().getAbsolutePath();
  String path=sdPath + ""String_Node_Str"";
  String filename=""String_Node_Str"";
  String extension=""String_Node_Str"";
  if (!new File(path).exists()) {
    new File(path).mkdirs();
  }
  int suffix=1;
  while (new File(path + filename + suffix+ extension).exists()) {
    suffix++;
  }
  final String fileName=path + filename + suffix+ extension;
  try {
    surface.saveBitmap(fileName);
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(e);
  }
  Uri uri=Uri.fromFile(new File(fileName));
  sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));
  return null;
}"
83530,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_SAVE,0,""String_Node_Str"").setIcon(R.drawable.save);
  menu.add(0,MENU_SEND,0,""String_Node_Str"").setIcon(R.drawable.send);
  menu.add(0,MENU_CLEAR,0,""String_Node_Str"").setIcon(R.drawable.clear);
  SubMenu subMenu=menu.addSubMenu(""String_Node_Str"").setIcon(R.drawable.brushes);
  subMenu.add(GROUP_BRUSHES,StylesFactory.SKETCHY,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SIMPLE,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SHADED,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.CHROME,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.FUR,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.LONGFUR,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.WEB,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SQUARES,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.RIBBON,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.CIRCLES,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.GRID,0,""String_Node_Str"");
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_SAVE,0,""String_Node_Str"").setIcon(R.drawable.save);
  menu.add(0,MENU_SEND,0,""String_Node_Str"").setIcon(R.drawable.send);
  menu.add(0,MENU_CLEAR,0,""String_Node_Str"").setIcon(R.drawable.clear);
  menu.add(0,MENU_COLOR,0,""String_Node_Str"");
  SubMenu subMenu=menu.addSubMenu(""String_Node_Str"").setIcon(R.drawable.brushes);
  subMenu.add(GROUP_BRUSHES,StylesFactory.SKETCHY,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SIMPLE,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SHADED,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.CHROME,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.FUR,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.LONGFUR,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.WEB,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.SQUARES,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.RIBBON,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.CIRCLES,0,""String_Node_Str"");
  subMenu.add(GROUP_BRUSHES,StylesFactory.GRID,0,""String_Node_Str"");
  return true;
}"
83531,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getGroupId() == GROUP_BRUSHES) {
    surface.setStyle(StylesFactory.getStyle(item.getItemId()));
    return true;
  }
switch (item.getItemId()) {
case MENU_CLEAR:
    surface.clearBitmap();
  return true;
case MENU_SAVE:
saveToSD();
return true;
case MENU_SEND:
sendImage();
return true;
default :
return false;
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getGroupId() == GROUP_BRUSHES) {
    surface.setStyle(StylesFactory.getStyle(item.getItemId()));
    return true;
  }
switch (item.getItemId()) {
case MENU_CLEAR:
    surface.clearBitmap();
  return true;
case MENU_SAVE:
saveToSD();
return true;
case MENU_SEND:
sendImage();
return true;
case MENU_COLOR:
new ColorPickerDialog(this,new OnColorChangedListener(){
@Override public void colorChanged(int color){
surface.setPaintColor(color);
}
}
,surface.getPaintColor()).show();
return true;
default :
return false;
}
}"
83532,"private void saveToSD(){
  String externalStorageState=Environment.getExternalStorageState();
  if (!externalStorageState.equals(Environment.MEDIA_MOUNTED)) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  final ProgressDialog dialog=ProgressDialog.show(this,""String_Node_Str"",""String_Node_Str"",true);
  new AsyncTask<Void,Void,Void>(){
    protected Void doInBackground(    Void... urls){
      surface.getThread().pauseDrawing();
      String path=""String_Node_Str"";
      String filename=""String_Node_Str"";
      String extension=""String_Node_Str"";
      if (!new File(path).exists()) {
        new File(path).mkdirs();
      }
      int suffix=1;
      while (new File(path + filename + suffix+ extension).exists()) {
        suffix++;
      }
      final String fileName=path + filename + suffix+ extension;
      try {
        surface.saveBitmap(fileName);
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
      }
      return null;
    }
    protected void onPostExecute(    Void result){
      surface.getThread().resumeDrawing();
      dialog.hide();
    }
  }
.execute();
}","private void saveToSD(){
  String externalStorageState=Environment.getExternalStorageState();
  if (!externalStorageState.equals(Environment.MEDIA_MOUNTED)) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  final ProgressDialog dialog=ProgressDialog.show(this,""String_Node_Str"",""String_Node_Str"",true);
  new AsyncTask<Void,Void,Void>(){
    protected Void doInBackground(    Void... urls){
      surface.getThread().pauseDrawing();
      String sdPath=Environment.getExternalStorageDirectory().getAbsolutePath();
      String path=sdPath + ""String_Node_Str"";
      String filename=""String_Node_Str"";
      String extension=""String_Node_Str"";
      if (!new File(path).exists()) {
        new File(path).mkdirs();
      }
      int suffix=1;
      while (new File(path + filename + suffix+ extension).exists()) {
        suffix++;
      }
      final String fileName=path + filename + suffix+ extension;
      try {
        surface.saveBitmap(fileName);
      }
 catch (      FileNotFoundException e) {
        throw new RuntimeException(e);
      }
      Uri uri=Uri.fromFile(new File(fileName));
      sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri));
      return null;
    }
    protected void onPostExecute(    Void result){
      surface.getThread().resumeDrawing();
      dialog.hide();
    }
  }
.execute();
}"
83533,"public ExpressionRejectedByFilterResult(ExpressionRejectedByFilterException details){
  this.details=details;
  if (details == null) {
    filter=null;
  }
 else {
    filter=details.getFilter();
  }
}","/** 
 * Result with the given details.
 * @param details (optional) Details of where and why
 */
public ExpressionRejectedByFilterResult(ExpressionRejectedByFilterException details){
  this.details=details;
  if (details == null) {
    filter=null;
  }
 else {
    filter=details.getFilter();
  }
}"
83534,"public String toString(){
  return ""String_Node_Str"" + details + ""String_Node_Str""+ super.getExpressionDescriptor()+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + details + ""String_Node_Str""+ super.getExpressionDescriptor()+ ""String_Node_Str"";
}"
83535,"public FailedValidationResult(InvalidExpressionException failure){
  this.failure=failure;
}","/** 
 * Result for the given failure.
 * @param failure (required) details of what was wrong
 */
public FailedValidationResult(InvalidExpressionException failure){
  this.failure=failure;
}"
83536,"public JsfExpressionDescriptor(int lineNumber,String jspFile){
  this.tagLineNumber=lineNumber;
  this.jspFile=jspFile;
  this.expression=""String_Node_Str"";
}","/** 
 * Descriptor with tag location information and no EL expression (it's assumed that it isn't needed because it's already communicated in another way).
 * @param lineNumber (required) the line where the tag containing the EL expression in question starts
 * @param jspFile (required) the page source file where the tag is
 */
public JsfExpressionDescriptor(int lineNumber,String jspFile){
  this.tagLineNumber=lineNumber;
  this.jspFile=jspFile;
  this.expression=""String_Node_Str"";
}"
83537,"public void add(ValidationResult singleResult){
  addSingleResult(singleResult);
}","/** 
 * Add a single result to this collection.
 * @param singleResult (required)
 */
public void add(ValidationResult singleResult){
  addSingleResult(singleResult);
}"
83538,"public ResultsIterable<ExpressionRejectedByFilterResult> excluded(){
  return new ResultsIterable<ExpressionRejectedByFilterResult>(exclusions);
}","/** 
 * {@inheritDoc} 
 */
public ResultsIterable<ExpressionRejectedByFilterResult> excluded(){
  return new ResultsIterable<ExpressionRejectedByFilterResult>(exclusions);
}"
83539,"public Iterator<ValidationResult> iterator(){
  return results.iterator();
}","/** 
 * {@inheritDoc} 
 */
public Iterator<ValidationResult> iterator(){
  return results.iterator();
}"
83540,"public ResultsIterable<FailedValidationResult> failures(){
  return new ResultsIterable<FailedValidationResult>(failures);
}","/** 
 * {@inheritDoc} 
 */
public ResultsIterable<FailedValidationResult> failures(){
  return new ResultsIterable<FailedValidationResult>(failures);
}"
83541,"public void addAll(Collection<ValidationResult> allResults){
  for (  ValidationResult singleResult : allResults) {
    this.add(singleResult);
  }
}","/** 
 * Add all the results in the collection to this one.
 * @param allResults (required)
 */
public void addAll(Collection<ValidationResult> allResults){
  for (  ValidationResult singleResult : allResults) {
    this.add(singleResult);
  }
}"
83542,"protected void postAddSingleResult(ValidationResult singleResult){
}","/** 
 * Subclass hook - called after a single result has been added to this.
 * @param singleResult (required)
 */
protected void postAddSingleResult(ValidationResult singleResult){
}"
83543,"public ResultsIterable<SuccessfulValidationResult> goodResults(){
  return new ResultsIterable<SuccessfulValidationResult>(goodResults);
}","/** 
 * {@inheritDoc} 
 */
public ResultsIterable<SuccessfulValidationResult> goodResults(){
  return new ResultsIterable<SuccessfulValidationResult>(goodResults);
}"
83544,"public Iterator<T> iterator(){
  return results.iterator();
}","/** 
 * {@inheritDoc} 
 */
public Iterator<T> iterator(){
  return results.iterator();
}"
83545,"public int size(){
  return results.size();
}","/** 
 * Number of results in this iterable.
 * @return >= 0
 */
public int size(){
  return results.size();
}"
83546,"public SuccessfulValidationResult(Object expressionResult){
  this.expressionResult=expressionResult;
}","/** 
 * Result for EL expression whose evaluation produced the given value. In the context of the ""fake"" validating resolver this is usually a ""fake value"" of the expression's output type.
 * @param expressionResult (optional) result of evaluating the EL
 * @see net.jakubholy.jeeutils.jsfelcheck.validator.FakeValueFactory
 */
public SuccessfulValidationResult(Object expressionResult){
  this.expressionResult=expressionResult;
}"
83547,"/** 
 * The value produced by the resolved expression.
 */
public Object getExpressionResult(){
  return expressionResult;
}","/** 
 * @return the value produced by the resolved expression.
 */
public Object getExpressionResult(){
  return expressionResult;
}"
83548,abstract public boolean hasErrors();,"/** 
 * Were there errors or other problems when validating the expression?
 * @return true if the validation wasn't successful
 */
public abstract boolean hasErrors();"
83549,"public void add(String key,String value,String addedBy) throws IOException, ConfigurationException {
  DictionaryItem item=new DictionaryItem(value,addedBy,new Date().getTime());
  dictionary.addProperty(key,new JSONObject(item).toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  dictionary.save();
}","public void add(String key,String value,String addedBy) throws IOException, ConfigurationException {
  DictionaryItem item=new DictionaryItem(value,addedBy,new Date().getTime());
  dictionary.addProperty(key.trim().toLowerCase(),new JSONObject(item).toString().replaceAll(""String_Node_Str"",""String_Node_Str""));
  dictionary.save();
}"
83550,"@SuppressWarnings(""String_Node_Str"") public int getSize(){
  return new ArrayList<Object>((Collection<Object>)dictionary.getKeys()).size();
}","public int getSize(){
  Iterator<?> iterator=dictionary.getKeys();
  int i=0;
  while (iterator.hasNext()) {
    iterator.next();
    i++;
  }
  return i;
}"
83551,"public DictionaryItem get(String key){
  String jsonText=dictionary.getString(key);
  if (jsonText == null)   return null;
  try {
    JSONObject j=new JSONObject(jsonText.replaceAll(""String_Node_Str"",""String_Node_Str""));
    return new DictionaryItem(j.getString(""String_Node_Str""),j.getString(""String_Node_Str""),j.getLong(""String_Node_Str""));
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return null;
}","public DictionaryItem get(String key){
  key=key.trim().toLowerCase();
  String jsonText=dictionary.getString(key);
  if (jsonText == null)   return null;
  try {
    JSONObject j=new JSONObject(jsonText.replaceAll(""String_Node_Str"",""String_Node_Str""));
    return new DictionaryItem(j.getString(""String_Node_Str""),j.getString(""String_Node_Str""),j.getLong(""String_Node_Str""));
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return null;
}"
83552,"public boolean has(String key){
  return dictionary.containsKey(key);
}","public boolean has(String key){
  return dictionary.containsKey(key.toLowerCase());
}"
83553,"public void remove(String key) throws IOException, ConfigurationException {
  dictionary.clearProperty(key);
  dictionary.save();
}","public void remove(String key) throws IOException, ConfigurationException {
  dictionary.clearProperty(key.toLowerCase());
  dictionary.save();
}"
83554,"private void add(String key,String value,String addedBy,Adapter adapter){
  try {
    Bot.dictionary.add(key,value,addedBy);
    adapter.send(key + ""String_Node_Str"" + value);
  }
 catch (  IOException e) {
    adapter.send(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  ConfigurationException e) {
    adapter.send(""String_Node_Str"");
    e.printStackTrace();
  }
}","private void add(String key,String value,String addedBy,Adapter adapter){
  try {
    Bot.dictionary.add(key,value,addedBy);
    adapter.send(key.toLowerCase() + ""String_Node_Str"" + value);
  }
 catch (  IOException e) {
    adapter.send(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  ConfigurationException e) {
    adapter.send(""String_Node_Str"");
    e.printStackTrace();
  }
}"
83555,"@Override public void process(String sender,String args,Adapter adapter){
  String[] argsArr=args.trim().split(""String_Node_Str"",2);
  if (argsArr.length < 2) {
    adapter.send(getHelpText());
    return;
  }
  if (Bot.dictionary.has(argsArr[0])) {
    adapter.send(""String_Node_Str"" + argsArr[0] + ""String_Node_Str"");
    return;
  }
  if (args.indexOf(REPLY_TAG) > 0) {
    int replyTagEndIndex=args.indexOf(REPLY_TAG) + REPLY_TAG.length();
    add(argsArr[0],args.substring(replyTagEndIndex).trim(),sender,adapter);
    return;
  }
  add(argsArr[0],args,sender,adapter);
}","@Override public void process(String sender,String args,Adapter adapter){
  String[] argsArr=args.trim().split(""String_Node_Str"",2);
  if (argsArr.length < 2) {
    adapter.send(getHelpText());
    return;
  }
  if (Bot.dictionary.has(argsArr[0])) {
    adapter.send(""String_Node_Str"" + argsArr[0] + ""String_Node_Str"");
    return;
  }
  if (args.indexOf(REPLY_TAG) > 0) {
    int replyTagEndIndex=args.indexOf(REPLY_TAG) + REPLY_TAG.length();
    add(argsArr[0],args.substring(replyTagEndIndex).trim(),sender,adapter);
    return;
  }
  add(argsArr[0].replace(':',' ').trim(),args,sender,adapter);
}"
83556,"@Override public void process(String sender,String args,Adapter adapter){
  String target=args.split(""String_Node_Str"",2)[0];
  if (target.isEmpty())   return;
  if (adapter.getAuthLevel(target).compareTo(Authorization.ADMIN) >= 0)   adapter.send(sender + ""String_Node_Str"");
 else   if (sender.equals(target)) {
    adapter.send(target + ""String_Node_Str"");
    adapter.revokeVoice(target);
  }
 else   if (adapter.isSuperior(target,sender,false))   adapter.send(""String_Node_Str"" + sender + ""String_Node_Str"");
 else   adapter.revokeVoice(target);
  System.out.println(""String_Node_Str"" + sender + ""String_Node_Str""+ target);
  adapter.revokeVoice(target);
}","@Override public void process(String sender,String args,Adapter adapter){
  String target=args.split(""String_Node_Str"",2)[0];
  if (target.isEmpty())   return;
  System.out.println(""String_Node_Str"" + sender + ""String_Node_Str""+ target);
  if (adapter.getAuthLevel(target).compareTo(Authorization.ADMIN) >= 0) {
    adapter.send(sender + ""String_Node_Str"");
    return;
  }
  if (sender.equals(target)) {
    adapter.send(target + ""String_Node_Str"");
    adapter.revokeVoice(target);
    return;
  }
  if (adapter.isSuperior(target,sender,false)) {
    adapter.send(""String_Node_Str"" + sender + ""String_Node_Str"");
    return;
  }
  adapter.revokeVoice(target);
}"
83557,"@Override public void process(String sender,String args,Adapter adapter){
  String[] argsArr=args.trim().split(""String_Node_Str"",2);
  if (argsArr[0].isEmpty()) {
    adapter.send(getHelpText());
    return;
  }
  if (Bot.dictionary.has(argsArr[0])) {
    adapter.send(Bot.dictionary.get(argsArr[0]).getValue());
    return;
  }
  if (args.startsWith(SIZE)) {
    int size=Bot.dictionary.getSize();
    if (size == -1)     adapter.send(sender + ""String_Node_Str"");
 else     adapter.send(sender + ""String_Node_Str"" + Bot.dictionary.getSize()+ ""String_Node_Str"");
    return;
  }
  if (argsArr.length < 2) {
    adapter.send(""String_Node_Str"" + argsArr[0]);
    return;
  }
  if (args.startsWith(INFO)) {
    DictionaryItem item=Bot.dictionary.get(argsArr[1]);
    if (item == null)     adapter.send(""String_Node_Str"" + argsArr[1] + ""String_Node_Str"");
 else     adapter.send(""String_Node_Str"" + argsArr[1] + ""String_Node_Str""+ item.getAddedBy()+ ""String_Node_Str""+ new Date(item.getDate()));
    return;
  }
  if (args.startsWith(FORGET)) {
    if (Bot.dictionary.has(argsArr[1])) {
      try {
        Bot.dictionary.remove(argsArr[1]);
        adapter.send(""String_Node_Str"");
      }
 catch (      IOException e) {
        adapter.send(""String_Node_Str"");
      }
catch (      ConfigurationException e) {
        adapter.send(""String_Node_Str"");
        e.printStackTrace();
      }
    }
 else     adapter.send(""String_Node_Str"" + argsArr[1]);
    return;
  }
  if (args.indexOf(REPLY_TAG) > 0) {
    int replyTagEndIndex=args.indexOf(REPLY_TAG) + REPLY_TAG.length();
    add(argsArr[0],args.substring(replyTagEndIndex).trim(),sender,adapter);
    return;
  }
  add(argsArr[0],args,sender,adapter);
}","@Override public void process(String sender,String args,Adapter adapter){
  String[] argsArr=args.trim().split(""String_Node_Str"",2);
  if (argsArr[0].isEmpty()) {
    adapter.send(getHelpText());
    return;
  }
  if (args.startsWith(SIZE)) {
    int size=Bot.dictionary.getSize();
    if (size == -1)     adapter.send(sender + ""String_Node_Str"");
 else     adapter.send(sender + ""String_Node_Str"" + Bot.dictionary.getSize()+ ""String_Node_Str"");
    return;
  }
  if (args.startsWith(INFO)) {
    DictionaryItem item=Bot.dictionary.get(argsArr[1]);
    if (item == null)     adapter.send(""String_Node_Str"" + argsArr[1] + ""String_Node_Str"");
 else     adapter.send(""String_Node_Str"" + argsArr[1] + ""String_Node_Str""+ item.getAddedBy()+ ""String_Node_Str""+ new Date(item.getDate()));
    return;
  }
  if (args.startsWith(FORGET)) {
    if (Bot.dictionary.has(argsArr[1])) {
      try {
        Bot.dictionary.remove(argsArr[1]);
        adapter.send(""String_Node_Str"");
      }
 catch (      IOException e) {
        adapter.send(""String_Node_Str"");
      }
catch (      ConfigurationException e) {
        adapter.send(""String_Node_Str"");
        e.printStackTrace();
      }
    }
 else     adapter.send(""String_Node_Str"" + argsArr[1]);
    return;
  }
  if (Bot.dictionary.has(argsArr[0])) {
    adapter.send(Bot.dictionary.get(argsArr[0]).getValue());
    return;
  }
  adapter.send(""String_Node_Str"" + argsArr[0]);
  return;
}"
83558,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reportissue_layout);
  myactivity=this;
  prefs=PreferenceManager.getDefaultSharedPreferences(myactivity);
  mainview=(ViewFlipper)findViewById(R.id.viewFlipper1);
  viewback=(Button)findViewById(R.id.button1);
  viewback.setEnabled(false);
  viewnext=(Button)findViewById(R.id.button2);
  final Button close=(Button)findViewById(R.id.button6);
  close.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent myintent=new Intent(Intent.ACTION_VIEW);
      myintent.setClassName(myactivity,settings.class.getName());
      startActivity(myintent);
      myactivity.finish();
    }
  }
);
  viewback.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      changestep(false);
    }
  }
);
  viewnext.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      changestep(true);
    }
  }
);
  LinearLayout rootview=(LinearLayout)findViewById(R.id.linearLayout_innserll2);
  TextView textView;
  HttpParams httpParameters=new BasicHttpParams();
  HttpConnectionParams.setConnectionTimeout(httpParameters,10000);
  HttpConnectionParams.setSoTimeout(httpParameters,10000);
  HttpClient httpClient=new DefaultHttpClient(httpParameters);
  HttpContext localContext=new BasicHttpContext();
  HttpGet httpGet=new HttpGet(""String_Node_Str"");
  HttpResponse response=null;
  try {
    response=httpClient.execute(httpGet,localContext);
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  if (response == null) {
  }
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  String line=null;
  String fullresponse=""String_Node_Str"";
  ArrayList<Integer> titlestart=new ArrayList<Integer>();
  ArrayList<Integer> titleend=new ArrayList<Integer>();
  ArrayList<Integer> statusstart=new ArrayList<Integer>();
  ArrayList<Integer> statusend=new ArrayList<Integer>();
  ArrayList<Integer> idstart=new ArrayList<Integer>();
  ArrayList<Integer> idend=new ArrayList<Integer>();
  int tempindexof;
  try {
    while ((line=reader.readLine()) != null) {
      fullresponse+=line;
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        titlestart.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        titleend.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        statusstart.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        statusend.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        idstart.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        idend.add(tempindexof);
      }
    }
    for (int titlecount=0; titlecount < titlestart.size() - 1; titlecount++) {
      String titletemp=fullresponse.substring(titlestart.get(titlecount) + ""String_Node_Str"".length(),titleend.get(titlecount));
      if (!titletemp.equals(""String_Node_Str""))       title.add(titletemp);
    }
    for (int idcount=0; idcount < idstart.size() - 1; idcount++) {
      id.add(fullresponse.substring(idstart.get(idcount) + ""String_Node_Str"".length(),idend.get(idcount)));
    }
    textView=new TextView(this);
    textView.setText(""String_Node_Str"");
    textView.setOnClickListener(myactivity);
    textView.setId(0);
    rootview.addView(textView);
    for (int statuscount=0; statuscount < statusstart.size() - 1; statuscount++) {
      status.add(fullresponse.substring(statusstart.get(statuscount) + ""String_Node_Str"".length(),statusend.get(statuscount)));
      textView=new TextView(this);
      textView.setText(""String_Node_Str"" + title.get(statuscount) + ""String_Node_Str""+ status.get(statuscount)+ ""String_Node_Str"");
      textView.setOnClickListener(myactivity);
      textView.setId(statuscount + 1);
      rootview.addView(textView);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  final Button getlocat=(Button)findViewById(R.id.button3);
  final Button getlocatnow=(Button)findViewById(R.id.button4);
  final Button getlocatnever=(Button)findViewById(R.id.button5);
  getlocat.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      waitinglogs=true;
      String tickerText=""String_Node_Str"";
      mNotificationManager=(NotificationManager)myactivity.getSystemService(Context.NOTIFICATION_SERVICE);
      Notification mNotification=new Notification(android.R.drawable.stat_sys_warning,tickerText,System.currentTimeMillis());
      Intent intent;
      intent=new Intent(myactivity,ReportIssue.class);
      PendingIntent mContentIntent=PendingIntent.getActivity(myactivity,0,intent,0);
      RemoteViews contentView=new RemoteViews(myactivity.getPackageName(),R.layout.notification_custom_layout);
      contentView.setImageViewResource(R.id.notification_layout_image,R.drawable.icon);
      contentView.setTextViewText(R.id.notification_layout_text1,""String_Node_Str"");
      contentView.setTextViewText(R.id.notification_layout_text2,""String_Node_Str"");
      mNotification.contentView=contentView;
      mNotification.contentIntent=mContentIntent;
      mNotificationManager.notify(6,mNotification);
      Intent i=new Intent();
      i.setAction(Intent.ACTION_MAIN);
      i.addCategory(Intent.CATEGORY_HOME);
      myactivity.startActivity(i);
    }
  }
);
  getlocatnow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getlog();
    }
  }
);
  getlocatnever.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      gotlogcat=true;
      LiquidSettings.runRootCommand(""String_Node_Str"");
      LiquidSettings.runRootCommand(""String_Node_Str"");
      LiquidSettings.runRootCommand(""String_Node_Str"");
      Toast.makeText(myactivity,""String_Node_Str"",4000).show();
    }
  }
);
  accountuser=(EditText)findViewById(R.id.accountuser);
  accountpassword=(EditText)findViewById(R.id.accountpassword);
  issuesummary=(EditText)findViewById(R.id.issuesummary);
  issuedescription=(EditText)findViewById(R.id.issuedescription);
  accountuser.setText(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  accountpassword.setText(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  issuesummary.setText(""String_Node_Str"");
  String issuedescripttext=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + parsebuildprop.parseString(""String_Node_Str"") + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + this.getString(R.string.app_vname) + ""String_Node_Str"";
  try {
    Process process=Runtime.getRuntime().exec(""String_Node_Str"");
    DataOutputStream os=new DataOutputStream(process.getOutputStream());
    DataInputStream osRes=new DataInputStream(process.getInputStream());
    os.writeBytes(""String_Node_Str"");
    issuedescripttext+=""String_Node_Str"" + osRes.readLine() + ""String_Node_Str"";
    os.flush();
    os.writeBytes(""String_Node_Str"");
    os.flush();
    process.waitFor();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescription.setText(issuedescripttext);
  issuecategory=(Spinner)findViewById(R.id.spinner1);
  issuepriority=(Spinner)findViewById(R.id.spinner2);
  final Button sendissue=(Button)findViewById(R.id.button7);
  sendissue.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      sendissue();
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.reportissue_layout);
  myactivity=this;
  prefs=PreferenceManager.getDefaultSharedPreferences(myactivity);
  mainview=(ViewFlipper)findViewById(R.id.viewFlipper1);
  viewback=(Button)findViewById(R.id.button1);
  viewback.setEnabled(false);
  viewnext=(Button)findViewById(R.id.button2);
  final Button close=(Button)findViewById(R.id.button6);
  close.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent myintent=new Intent(Intent.ACTION_VIEW);
      myintent.setClassName(myactivity,settings.class.getName());
      startActivity(myintent);
      myactivity.finish();
    }
  }
);
  viewback.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      changestep(false);
    }
  }
);
  viewnext.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      changestep(true);
    }
  }
);
  LinearLayout rootview=(LinearLayout)findViewById(R.id.linearLayout_innserll2);
  TextView textView;
  HttpParams httpParameters=new BasicHttpParams();
  HttpConnectionParams.setConnectionTimeout(httpParameters,10000);
  HttpConnectionParams.setSoTimeout(httpParameters,10000);
  HttpClient httpClient=new DefaultHttpClient(httpParameters);
  HttpContext localContext=new BasicHttpContext();
  HttpGet httpGet=new HttpGet(""String_Node_Str"");
  HttpResponse response=null;
  try {
    response=httpClient.execute(httpGet,localContext);
  }
 catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  if (response == null) {
  }
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  String line=null;
  String fullresponse=""String_Node_Str"";
  ArrayList<Integer> titlestart=new ArrayList<Integer>();
  ArrayList<Integer> titleend=new ArrayList<Integer>();
  ArrayList<Integer> statusstart=new ArrayList<Integer>();
  ArrayList<Integer> statusend=new ArrayList<Integer>();
  ArrayList<Integer> idstart=new ArrayList<Integer>();
  ArrayList<Integer> idend=new ArrayList<Integer>();
  int tempindexof;
  try {
    while ((line=reader.readLine()) != null) {
      fullresponse+=line;
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        titlestart.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        titleend.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        statusstart.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        statusend.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        idstart.add(tempindexof);
      }
    }
    tempindexof=fullresponse.indexOf(""String_Node_Str"");
    if (tempindexof != -1) {
      tempindexof=0;
      while (tempindexof >= 0) {
        tempindexof=fullresponse.indexOf(""String_Node_Str"",tempindexof + 1);
        idend.add(tempindexof);
      }
    }
    for (int titlecount=0; titlecount < titlestart.size() - 1; titlecount++) {
      String titletemp=fullresponse.substring(titlestart.get(titlecount) + ""String_Node_Str"".length(),titleend.get(titlecount));
      if (!titletemp.equals(""String_Node_Str""))       title.add(titletemp);
    }
    for (int idcount=0; idcount < idstart.size() - 1; idcount++) {
      id.add(fullresponse.substring(idstart.get(idcount) + ""String_Node_Str"".length(),idend.get(idcount)));
    }
    textView=new TextView(this);
    textView.setText(""String_Node_Str"");
    textView.setOnClickListener(myactivity);
    textView.setId(0);
    rootview.addView(textView);
    for (int statuscount=0; statuscount < statusstart.size() - 1; statuscount++) {
      status.add(fullresponse.substring(statusstart.get(statuscount) + ""String_Node_Str"".length(),statusend.get(statuscount)));
      textView=new TextView(this);
      textView.setText(""String_Node_Str"" + title.get(statuscount) + ""String_Node_Str""+ status.get(statuscount)+ ""String_Node_Str"");
      textView.setOnClickListener(myactivity);
      textView.setId(statuscount + 1);
      rootview.addView(textView);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  final Button getlocat=(Button)findViewById(R.id.button3);
  final Button getlocatnow=(Button)findViewById(R.id.button4);
  final Button getlocatnever=(Button)findViewById(R.id.button5);
  getlocat.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      waitinglogs=true;
      String tickerText=""String_Node_Str"";
      mNotificationManager=(NotificationManager)myactivity.getSystemService(Context.NOTIFICATION_SERVICE);
      Notification mNotification=new Notification(android.R.drawable.stat_sys_warning,tickerText,System.currentTimeMillis());
      Intent intent;
      intent=new Intent(myactivity,ReportIssue.class);
      PendingIntent mContentIntent=PendingIntent.getActivity(myactivity,0,intent,0);
      RemoteViews contentView=new RemoteViews(myactivity.getPackageName(),R.layout.notification_custom_layout);
      contentView.setImageViewResource(R.id.notification_layout_image,R.drawable.icon);
      contentView.setTextViewText(R.id.notification_layout_text1,""String_Node_Str"");
      contentView.setTextViewText(R.id.notification_layout_text2,""String_Node_Str"");
      mNotification.contentView=contentView;
      mNotification.contentIntent=mContentIntent;
      mNotification.flags=Notification.FLAG_ONGOING_EVENT;
      mNotificationManager.notify(6,mNotification);
      Intent i=new Intent();
      i.setAction(Intent.ACTION_MAIN);
      i.addCategory(Intent.CATEGORY_HOME);
      myactivity.startActivity(i);
    }
  }
);
  getlocatnow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getlog();
    }
  }
);
  getlocatnever.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      gotlogcat=true;
      LiquidSettings.runRootCommand(""String_Node_Str"");
      LiquidSettings.runRootCommand(""String_Node_Str"");
      LiquidSettings.runRootCommand(""String_Node_Str"");
      Toast.makeText(myactivity,""String_Node_Str"",4000).show();
    }
  }
);
  accountuser=(EditText)findViewById(R.id.accountuser);
  accountpassword=(EditText)findViewById(R.id.accountpassword);
  issuesummary=(EditText)findViewById(R.id.issuesummary);
  issuedescription=(EditText)findViewById(R.id.issuedescription);
  accountuser.setText(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  accountpassword.setText(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  issuesummary.setText(""String_Node_Str"");
  String issuedescripttext=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + parsebuildprop.parseString(""String_Node_Str"") + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + this.getString(R.string.app_vname) + ""String_Node_Str"";
  try {
    Process process=Runtime.getRuntime().exec(""String_Node_Str"");
    DataOutputStream os=new DataOutputStream(process.getOutputStream());
    DataInputStream osRes=new DataInputStream(process.getInputStream());
    os.writeBytes(""String_Node_Str"");
    issuedescripttext+=""String_Node_Str"" + osRes.readLine() + ""String_Node_Str"";
    os.flush();
    os.writeBytes(""String_Node_Str"");
    os.flush();
    process.waitFor();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"" + ""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescripttext+=""String_Node_Str"";
  issuedescription.setText(issuedescripttext);
  issuecategory=(Spinner)findViewById(R.id.spinner1);
  issuepriority=(Spinner)findViewById(R.id.spinner2);
  final Button sendissue=(Button)findViewById(R.id.button7);
  sendissue.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      sendissue();
    }
  }
);
}"
83559,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!LSystem.checkInitFolder()) {
    Toast.makeText(this,""String_Node_Str"",4000).show();
    this.finish();
  }
  ROOT=LiquidSettings.isRoot();
  prefs=PreferenceManager.getDefaultSharedPreferences(myactivity);
  new StartSystem().startsystem(myactivity);
  addPreferencesFromResource(R.menu.menu);
  final Context context=getApplicationContext();
  final CheckBoxPreference hf=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final EditTextPreference sdcache=(EditTextPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference powerled=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference noprox=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference updateonstart=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final Preference menu_info=findPreference(""String_Node_Str"");
  final Preference diskspace=findPreference(""String_Node_Str"");
  final Preference hotreboot=findPreference(""String_Node_Str"");
  final Preference forceupdate=findPreference(""String_Node_Str"");
  final Preference donateclick=findPreference(""String_Node_Str"");
  final Preference reportissue=findPreference(""String_Node_Str"");
  final ListPreference networkmode=(ListPreference)findPreference(""String_Node_Str"");
  final Preference resetall=findPreference(""String_Node_Str"");
  editNoise=(EditTextPreference)findPreference(""String_Node_Str"");
  editSensitivity=(EditTextPreference)findPreference(""String_Node_Str"");
  editSoftsens=(EditTextPreference)findPreference(""String_Node_Str"");
  if (!LSystem.hapticAvailable())   hf.setEnabled(false);
 else   hf.setChecked(LSystem.vibrStatus());
  if (!SdCache.isCachePathAvailable())   sdcache.setEnabled(false);
  if ((SDCacheSize=SdCache.getSdCacheSize()) >= 128) {
    sdcache.setText(Integer.toString(SDCacheSize));
  }
  noiseValue=editNoise.getText();
  sensitivityValue=editSensitivity.getText();
  softsensValue=editSoftsens.getText();
  updateValues();
  editNoise.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      noiseValue=newValue.toString();
      int noiseValueInt=Integer.parseInt(noiseValue);
      if (noiseValueInt < 20)       noiseValue=""String_Node_Str"";
 else       if (noiseValueInt > 75)       noiseValue=""String_Node_Str"";
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  editSensitivity.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      sensitivityValue=newValue.toString();
      int sensitivityValueInt=Integer.parseInt(sensitivityValue);
      if (sensitivityValueInt < (20))       sensitivityValue=(""String_Node_Str"");
 else       if (sensitivityValueInt > (75))       sensitivityValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  editSoftsens.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      softsensValue=newValue.toString();
      int softsensValueInt=Integer.parseInt(softsensValue);
      if (softsensValueInt < (15))       softsensValue=(""String_Node_Str"");
 else       if (softsensValueInt > (30))       softsensValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  powerled.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (powerled.isChecked()) {
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
 else {
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
        if (BatteryLED.setdisable(powerled.isChecked())) {
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
    }
  }
);
  hf.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + ((hf.isChecked()) ? Strings.getvibr() : Strings.getnovibr()) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"" + ((hf.isChecked() == true) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          Toast.makeText(context,""String_Node_Str"" + Boolean.toString(hf.isChecked()),4000).show();
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          hf.setChecked(false);
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        hf.setChecked(false);
      }
      return true;
    }
  }
);
  sdcache.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      String newValueString=newValue.toString();
      int newValueInt=Integer.parseInt(newValueString);
      if (newValueInt < 128)       newValueInt=128;
 else       if (newValueInt > 4096)       newValueInt=4096;
      if (ROOT) {
        if (SdCache.setSDCache(newValueInt)) {
          Toast.makeText(context,""String_Node_Str"" + newValueInt,4000).show();
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else       Toast.makeText(context,""String_Node_Str"",4000).show();
      return false;
    }
  }
);
  networkmode.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      NetworkMode.switchnetworkmode(myactivity);
      return true;
    }
  }
);
  noprox.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (noprox.isChecked()) {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(""String_Node_Str"");
      builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
      }
);
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  diskspace.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      final AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(DiskSpace.getdiskspace());
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  hotreboot.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ProgressDialog.show(myactivity,""String_Node_Str"",""String_Node_Str"",true);
      LiquidSettings.runRootCommand(""String_Node_Str"");
      return true;
    }
  }
);
  donateclick.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ConnectivityManager connManager=(ConnectivityManager)myactivity.getSystemService(Context.CONNECTIVITY_SERVICE);
      android.net.NetworkInfo netInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
      android.net.NetworkInfo wifiInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
      if (netInfo.getState() == android.net.NetworkInfo.State.CONNECTED || wifiInfo.getState() == android.net.NetworkInfo.State.CONNECTED) {
        Intent myintent=new Intent(Intent.ACTION_VIEW);
        myintent.setClassName(context,Webview.class.getName());
        startActivity(myintent);
      }
 else {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  forceupdate.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      new OTA_updates().checkupdates(myactivity,myactivity);
      return true;
    }
  }
);
  updateonstart.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (!updateonstart.isChecked()) {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
        AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
        builder.setTitle(""String_Node_Str"");
        builder.setCancelable(true);
        builder.setMessage(""String_Node_Str"");
        builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            Editor editor=prefs.edit();
            editor.putBoolean(""String_Node_Str"",true);
            updateonstart.setChecked(true);
            editor.commit();
          }
        }
);
        builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
          }
        }
);
        builder.create().show();
      }
      return true;
    }
  }
);
  reportissue.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ProgressDialog.show(myactivity,""String_Node_Str"",""String_Node_Str"",true);
      Intent myintent=new Intent(Intent.ACTION_VIEW);
      myintent.setClassName(myactivity,ReportIssue.class.getName());
      startActivity(myintent);
      return true;
    }
  }
);
  menu_info.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      showhelp();
      return true;
    }
  }
);
  resetall.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      Editor editor=prefs.edit();
      editor.putBoolean(""String_Node_Str"",true);
      editor.commit();
      new StartSystem().startsystem(myactivity);
      return true;
    }
  }
);
  if (prefs.getBoolean(""String_Node_Str"",true)) {
    new OTA_updates().checkupdates(myactivity,myactivity);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!LSystem.checkInitFolder()) {
    Toast.makeText(this,""String_Node_Str"",4000).show();
    this.finish();
  }
  ROOT=LiquidSettings.isRoot();
  prefs=PreferenceManager.getDefaultSharedPreferences(myactivity);
  new StartSystem().startsystem(myactivity);
  addPreferencesFromResource(R.menu.menu);
  final Context context=getApplicationContext();
  final CheckBoxPreference hf=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final EditTextPreference sdcache=(EditTextPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference powerled=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference noprox=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference updateonstart=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final Preference menu_info=findPreference(""String_Node_Str"");
  final Preference diskspace=findPreference(""String_Node_Str"");
  final Preference hotreboot=findPreference(""String_Node_Str"");
  final Preference forceupdate=findPreference(""String_Node_Str"");
  final Preference donateclick=findPreference(""String_Node_Str"");
  final Preference reportissue=findPreference(""String_Node_Str"");
  final ListPreference networkmode=(ListPreference)findPreference(""String_Node_Str"");
  final Preference resetall=findPreference(""String_Node_Str"");
  editNoise=(EditTextPreference)findPreference(""String_Node_Str"");
  editSensitivity=(EditTextPreference)findPreference(""String_Node_Str"");
  editSoftsens=(EditTextPreference)findPreference(""String_Node_Str"");
  if (!LSystem.hapticAvailable())   hf.setEnabled(false);
 else   hf.setChecked(LSystem.vibrStatus());
  if (!SdCache.isCachePathAvailable())   sdcache.setEnabled(false);
  if ((SDCacheSize=SdCache.getSdCacheSize()) >= 128) {
    sdcache.setText(Integer.toString(SDCacheSize));
  }
  noiseValue=editNoise.getText();
  sensitivityValue=editSensitivity.getText();
  softsensValue=editSoftsens.getText();
  updateValues();
  editNoise.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      noiseValue=newValue.toString();
      int noiseValueInt=Integer.parseInt(noiseValue);
      if (noiseValueInt < 20)       noiseValue=""String_Node_Str"";
 else       if (noiseValueInt > 75)       noiseValue=""String_Node_Str"";
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  editSensitivity.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      sensitivityValue=newValue.toString();
      int sensitivityValueInt=Integer.parseInt(sensitivityValue);
      if (sensitivityValueInt < (20))       sensitivityValue=(""String_Node_Str"");
 else       if (sensitivityValueInt > (75))       sensitivityValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  editSoftsens.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      softsensValue=newValue.toString();
      int softsensValueInt=Integer.parseInt(softsensValue);
      if (softsensValueInt < (15))       softsensValue=(""String_Node_Str"");
 else       if (softsensValueInt > (30))       softsensValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  powerled.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (powerled.isChecked()) {
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
 else {
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
        if (BatteryLED.setdisable(powerled.isChecked())) {
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
    }
  }
);
  hf.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + ((hf.isChecked()) ? Strings.getvibr() : Strings.getnovibr()) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"" + ((hf.isChecked() == true) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          Toast.makeText(context,""String_Node_Str"" + Boolean.toString(hf.isChecked()),4000).show();
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          hf.setChecked(false);
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        hf.setChecked(false);
      }
      return true;
    }
  }
);
  sdcache.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      String newValueString=newValue.toString();
      int newValueInt=Integer.parseInt(newValueString);
      if (newValueInt < 128)       newValueInt=128;
 else       if (newValueInt > 4096)       newValueInt=4096;
      if (ROOT) {
        if (SdCache.setSDCache(newValueInt)) {
          Toast.makeText(context,""String_Node_Str"" + newValueInt,4000).show();
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else       Toast.makeText(context,""String_Node_Str"",4000).show();
      return false;
    }
  }
);
  networkmode.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      NetworkMode.switchnetworkmode(myactivity);
      return true;
    }
  }
);
  noprox.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (noprox.isChecked()) {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(""String_Node_Str"");
      builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
      }
);
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  diskspace.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      final AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(DiskSpace.getdiskspace());
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  hotreboot.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ProgressDialog.show(myactivity,""String_Node_Str"",""String_Node_Str"",true);
      LiquidSettings.runRootCommand(""String_Node_Str"");
      return true;
    }
  }
);
  donateclick.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ConnectivityManager connManager=(ConnectivityManager)myactivity.getSystemService(Context.CONNECTIVITY_SERVICE);
      android.net.NetworkInfo netInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
      android.net.NetworkInfo wifiInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
      if (netInfo.getState() == android.net.NetworkInfo.State.CONNECTED || wifiInfo.getState() == android.net.NetworkInfo.State.CONNECTED) {
        Intent myintent=new Intent(Intent.ACTION_VIEW);
        myintent.setClassName(context,Webview.class.getName());
        startActivity(myintent);
      }
 else {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  forceupdate.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      new OTA_updates().checkupdates(myactivity,myactivity);
      return true;
    }
  }
);
  updateonstart.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (!updateonstart.isChecked()) {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
        AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
        builder.setTitle(""String_Node_Str"");
        builder.setCancelable(true);
        builder.setMessage(""String_Node_Str"");
        builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            Editor editor=prefs.edit();
            editor.putBoolean(""String_Node_Str"",true);
            updateonstart.setChecked(true);
            editor.commit();
          }
        }
);
        builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
          }
        }
);
        builder.create().show();
      }
      return true;
    }
  }
);
  reportissue.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ConnectivityManager connManager=(ConnectivityManager)myactivity.getSystemService(Context.CONNECTIVITY_SERVICE);
      android.net.NetworkInfo netInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
      android.net.NetworkInfo wifiInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
      if (netInfo.getState() == android.net.NetworkInfo.State.CONNECTED || wifiInfo.getState() == android.net.NetworkInfo.State.CONNECTED) {
        ProgressDialog.show(myactivity,""String_Node_Str"",""String_Node_Str"",true);
        Intent myintent=new Intent(Intent.ACTION_VIEW);
        myintent.setClassName(myactivity,ReportIssue.class.getName());
        startActivity(myintent);
      }
 else {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  menu_info.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      showhelp();
      return true;
    }
  }
);
  resetall.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      Editor editor=prefs.edit();
      editor.putBoolean(""String_Node_Str"",true);
      editor.commit();
      new StartSystem().startsystem(myactivity);
      return true;
    }
  }
);
  if (prefs.getBoolean(""String_Node_Str"",true)) {
    new OTA_updates().checkupdates(myactivity,myactivity);
  }
}"
83560,"@SuppressWarnings(""String_Node_Str"") public void onCreate(){
  super.onCreate();
  powermanager=(PowerManager)this.getSystemService(Context.POWER_SERVICE);
  wifimanager=(WifiManager)getSystemService(Context.WIFI_SERVICE);
  wakelockcall=this.powermanager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wakelockota=this.powermanager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wifilockota=wifimanager.createWifiLock(""String_Node_Str"");
  LiquidSettings.runRootCommand(""String_Node_Str"");
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  filter.addAction(""String_Node_Str"");
  this.registerReceiver(mIntentReceiver,filter,null,mHandler);
}","@SuppressWarnings(""String_Node_Str"") public void onCreate(){
  super.onCreate();
  myactivity=this;
  mNotificationManager=(NotificationManager)myactivity.getSystemService(Context.NOTIFICATION_SERVICE);
  powermanager=(PowerManager)this.getSystemService(Context.POWER_SERVICE);
  wifimanager=(WifiManager)getSystemService(Context.WIFI_SERVICE);
  wakelockcall=this.powermanager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wakelockota=this.powermanager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,""String_Node_Str"");
  wifilockota=wifimanager.createWifiLock(""String_Node_Str"");
  LiquidSettings.runRootCommand(""String_Node_Str"");
  prefs=PreferenceManager.getDefaultSharedPreferences(this);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_SCREEN_ON);
  filter.addAction(""String_Node_Str"");
  this.registerReceiver(mIntentReceiver,filter,null,mHandler);
}"
83561,"public static void startcall(){
  call=true;
  try {
    wakelockcall.acquire();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void startcall(){
  call=true;
  try {
    wakelockcall.acquire();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  String tickerText=""String_Node_Str"";
  Notification mNotification=new Notification(android.R.drawable.stat_sys_warning,tickerText,System.currentTimeMillis());
  Intent intent;
  intent=new Intent();
  PendingIntent mContentIntent=PendingIntent.getActivity(myactivity,0,intent,0);
  RemoteViews contentView=new RemoteViews(myactivity.getPackageName(),R.layout.notification_custom_layout);
  contentView.setImageViewResource(R.id.notification_layout_image,R.drawable.icon);
  contentView.setTextViewText(R.id.notification_layout_text1,""String_Node_Str"");
  contentView.setTextViewText(R.id.notification_layout_text2,""String_Node_Str"");
  mNotification.contentView=contentView;
  mNotification.contentIntent=mContentIntent;
  mNotification.flags=Notification.FLAG_ONGOING_EVENT;
  mNotificationManager.notify(7,mNotification);
}"
83562,"public static void stopcall(){
  call=false;
  try {
    wakelockcall.release();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void stopcall(){
  call=false;
  try {
    wakelockcall.release();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    mNotificationManager.cancel(7);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
83563,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!LSystem.checkInitFolder()) {
    Toast.makeText(this,""String_Node_Str"",4000).show();
    this.finish();
  }
  ROOT=LiquidSettings.isRoot();
  prefs=PreferenceManager.getDefaultSharedPreferences(myactivity);
  new StartSystem().startsystem(myactivity);
  addPreferencesFromResource(R.xml.menu);
  final Context context=getApplicationContext();
  final CheckBoxPreference hf=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final EditTextPreference sdcache=(EditTextPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference powerled=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference noprox=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference nobottom=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference updateonstart=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference usemetalcamera=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final Preference menu_info=findPreference(""String_Node_Str"");
  final Preference mountsystem=findPreference(""String_Node_Str"");
  final Preference diskspace=findPreference(""String_Node_Str"");
  final Preference hotreboot=findPreference(""String_Node_Str"");
  final Preference forceupdate=findPreference(""String_Node_Str"");
  final Preference donateclick=findPreference(""String_Node_Str"");
  final Preference v6scripttweaker=findPreference(""String_Node_Str"");
  final Preference sdmanscripttweaker=findPreference(""String_Node_Str"");
  final Preference sdmanscript=findPreference(""String_Node_Str"");
  final Preference reportissue=findPreference(""String_Node_Str"");
  final ListPreference networkmode=(ListPreference)findPreference(""String_Node_Str"");
  final Preference resetall=findPreference(""String_Node_Str"");
  editNoise=(EditTextPreference)findPreference(""String_Node_Str"");
  editSensitivity=(EditTextPreference)findPreference(""String_Node_Str"");
  editSoftsens=(EditTextPreference)findPreference(""String_Node_Str"");
  editHftime=(EditTextPreference)findPreference(""String_Node_Str"");
  if (!LSystem.hapticAvailable())   hf.setEnabled(false);
 else   hf.setChecked(LSystem.vibrStatus());
  if (!SdCache.isCachePathAvailable())   sdcache.setEnabled(false);
  if ((SDCacheSize=SdCache.getSdCacheSize()) >= 128) {
    sdcache.setText(Integer.toString(SDCacheSize));
  }
  noiseValue=editNoise.getText();
  sensitivityValue=editSensitivity.getText();
  softsensValue=editSoftsens.getText();
  hftimeValue=editHftime.getText();
  updateValues();
  java.io.File file=new java.io.File(""String_Node_Str"");
  if (!file.exists()) {
    usemetalcamera.setChecked(false);
  }
 else {
    usemetalcamera.setChecked(true);
  }
  editNoise.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      noiseValue=newValue.toString();
      int noiseValueInt=Integer.parseInt(noiseValue);
      if (noiseValueInt < 20)       noiseValue=""String_Node_Str"";
 else       if (noiseValueInt > 75)       noiseValue=""String_Node_Str"";
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue,hftimeValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  editSensitivity.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      sensitivityValue=newValue.toString();
      int sensitivityValueInt=Integer.parseInt(sensitivityValue);
      if (sensitivityValueInt < (20))       sensitivityValue=(""String_Node_Str"");
 else       if (sensitivityValueInt > (75))       sensitivityValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue,hftimeValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  editSoftsens.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      softsensValue=newValue.toString();
      int softsensValueInt=Integer.parseInt(softsensValue);
      if (softsensValueInt < (15))       softsensValue=(""String_Node_Str"");
 else       if (softsensValueInt > (30))       softsensValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue,hftimeValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  powerled.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (powerled.isChecked()) {
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
 else {
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
        if (BatteryLED.setdisable(powerled.isChecked())) {
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
    }
  }
);
  nobottom.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (nobottom.isChecked()) {
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
 else {
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
        if (BatteryLED.setdisable(nobottom.isChecked())) {
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
    }
  }
);
  hf.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + ((hf.isChecked()) ? Strings.getvibr() : Strings.getnovibr()) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"" + ((hf.isChecked() == true) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          Toast.makeText(context,""String_Node_Str"" + Boolean.toString(hf.isChecked()),4000).show();
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          hf.setChecked(false);
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        hf.setChecked(false);
      }
      return true;
    }
  }
);
  editHftime.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      hftimeValue=newValue.toString();
      int hftimeValueInt=Integer.parseInt(hftimeValue);
      if (hftimeValueInt < (10))       hftimeValue=(""String_Node_Str"");
 else       if (hftimeValueInt > (2000))       hftimeValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue,hftimeValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  sdcache.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      String newValueString=newValue.toString();
      int newValueInt=Integer.parseInt(newValueString);
      if (newValueInt < 128)       newValueInt=128;
 else       if (newValueInt > 4096)       newValueInt=4096;
      if (ROOT) {
        if (SdCache.setSDCache(newValueInt)) {
          Toast.makeText(context,""String_Node_Str"" + newValueInt,4000).show();
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else       Toast.makeText(context,""String_Node_Str"",4000).show();
      return false;
    }
  }
);
  networkmode.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      NetworkMode.switchnetworkmode(myactivity);
      return true;
    }
  }
);
  noprox.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (noprox.isChecked()) {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(""String_Node_Str"");
      builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
      }
);
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  v6scripttweaker.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      try {
        Intent intent=new Intent(Intent.ACTION_MAIN);
        intent.setComponent(new ComponentName(""String_Node_Str"",""String_Node_Str""));
        intent.putExtra(""String_Node_Str"",""String_Node_Str"");
        startActivity(intent);
      }
 catch (      Exception e) {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  sdmanscripttweaker.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      try {
        Intent intent=new Intent(Intent.ACTION_MAIN);
        intent.setComponent(new ComponentName(""String_Node_Str"",""String_Node_Str""));
        intent.putExtra(""String_Node_Str"",""String_Node_Str"");
        startActivity(intent);
      }
 catch (      Exception e) {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  sdmanscript.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      Intent myintent=new Intent(Intent.ACTION_VIEW);
      myintent.setClassName(myactivity,SDMAN.class.getName());
      startActivity(myintent);
      return true;
    }
  }
);
  usemetalcamera.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      LSystem.RemountRW();
      if (usemetalcamera.isChecked()) {
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
 else {
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
      }
      LSystem.RemountROnly();
      return true;
    }
  }
);
  mountsystem.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      final AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(""String_Node_Str"");
      builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          LSystem.RemountRW();
          Toast.makeText(myactivity,""String_Node_Str"",4000).show();
        }
      }
);
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          LSystem.RemountROnly();
          Toast.makeText(myactivity,""String_Node_Str"",4000).show();
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  diskspace.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      final AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(DiskSpace.getdiskspace());
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  hotreboot.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ProgressDialog.show(myactivity,""String_Node_Str"",""String_Node_Str"",true);
      LiquidSettings.runRootCommand(""String_Node_Str"");
      return true;
    }
  }
);
  donateclick.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ConnectivityManager connManager=(ConnectivityManager)myactivity.getSystemService(Context.CONNECTIVITY_SERVICE);
      android.net.NetworkInfo netInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
      android.net.NetworkInfo wifiInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
      if (netInfo.getState() == android.net.NetworkInfo.State.CONNECTED || wifiInfo.getState() == android.net.NetworkInfo.State.CONNECTED) {
        Intent myintent=new Intent(Intent.ACTION_VIEW);
        myintent.setClassName(context,Webview.class.getName());
        startActivity(myintent);
      }
 else {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  forceupdate.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      new OTA_updates().checkupdates(myactivity,myactivity);
      return true;
    }
  }
);
  updateonstart.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (!updateonstart.isChecked()) {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
        AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
        builder.setTitle(""String_Node_Str"");
        builder.setCancelable(true);
        builder.setMessage(""String_Node_Str"");
        builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            Editor editor=prefs.edit();
            editor.putBoolean(""String_Node_Str"",true);
            updateonstart.setChecked(true);
            editor.commit();
          }
        }
);
        builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
          }
        }
);
        builder.create().show();
      }
      return true;
    }
  }
);
  reportissue.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ConnectivityManager connManager=(ConnectivityManager)myactivity.getSystemService(Context.CONNECTIVITY_SERVICE);
      android.net.NetworkInfo netInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
      android.net.NetworkInfo wifiInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
      if (netInfo.getState() == android.net.NetworkInfo.State.CONNECTED || wifiInfo.getState() == android.net.NetworkInfo.State.CONNECTED) {
        ProgressDialog.show(myactivity,""String_Node_Str"",""String_Node_Str"",true);
        Intent myintent=new Intent(Intent.ACTION_VIEW);
        myintent.setClassName(myactivity,ReportIssue.class.getName());
        startActivity(myintent);
      }
 else {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  menu_info.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      showhelp();
      return true;
    }
  }
);
  resetall.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      Editor editor=prefs.edit();
      editor.putBoolean(""String_Node_Str"",true);
      editor.commit();
      new StartSystem().startsystem(myactivity);
      return true;
    }
  }
);
  if (prefs.getBoolean(""String_Node_Str"",true)) {
    new OTA_updates().checkupdates(myactivity,myactivity);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!LSystem.checkInitFolder()) {
    Toast.makeText(this,""String_Node_Str"",4000).show();
    this.finish();
  }
  ROOT=LiquidSettings.isRoot();
  prefs=PreferenceManager.getDefaultSharedPreferences(myactivity);
  new StartSystem().startsystem(myactivity);
  addPreferencesFromResource(R.xml.menu);
  final Context context=getApplicationContext();
  final CheckBoxPreference hf=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final EditTextPreference sdcache=(EditTextPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference powerled=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference noprox=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference nobottom=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference updateonstart=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final CheckBoxPreference usemetalcamera=(CheckBoxPreference)findPreference(""String_Node_Str"");
  final Preference menu_info=findPreference(""String_Node_Str"");
  final Preference mountsystem=findPreference(""String_Node_Str"");
  final Preference diskspace=findPreference(""String_Node_Str"");
  final Preference hotreboot=findPreference(""String_Node_Str"");
  final Preference forceupdate=findPreference(""String_Node_Str"");
  final Preference donateclick=findPreference(""String_Node_Str"");
  final Preference v6scripttweaker=findPreference(""String_Node_Str"");
  final Preference sdmanscripttweaker=findPreference(""String_Node_Str"");
  final Preference sdmanscript=findPreference(""String_Node_Str"");
  final Preference reportissue=findPreference(""String_Node_Str"");
  final ListPreference networkmode=(ListPreference)findPreference(""String_Node_Str"");
  final Preference resetall=findPreference(""String_Node_Str"");
  editNoise=(EditTextPreference)findPreference(""String_Node_Str"");
  editSensitivity=(EditTextPreference)findPreference(""String_Node_Str"");
  editSoftsens=(EditTextPreference)findPreference(""String_Node_Str"");
  editHftime=(EditTextPreference)findPreference(""String_Node_Str"");
  if (!LSystem.hapticAvailable())   hf.setEnabled(false);
 else   hf.setChecked(LSystem.vibrStatus());
  if (!SdCache.isCachePathAvailable())   sdcache.setEnabled(false);
  if ((SDCacheSize=SdCache.getSdCacheSize()) >= 128) {
    sdcache.setText(Integer.toString(SDCacheSize));
  }
  noiseValue=editNoise.getText();
  sensitivityValue=editSensitivity.getText();
  softsensValue=editSoftsens.getText();
  hftimeValue=editHftime.getText();
  updateValues();
  java.io.File file=new java.io.File(""String_Node_Str"");
  if (!file.exists()) {
    usemetalcamera.setChecked(false);
  }
 else {
    usemetalcamera.setChecked(true);
  }
  editNoise.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      noiseValue=newValue.toString();
      int noiseValueInt=Integer.parseInt(noiseValue);
      if (noiseValueInt < 20)       noiseValue=""String_Node_Str"";
 else       if (noiseValueInt > 75)       noiseValue=""String_Node_Str"";
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue,hftimeValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  editSensitivity.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      sensitivityValue=newValue.toString();
      int sensitivityValueInt=Integer.parseInt(sensitivityValue);
      if (sensitivityValueInt < (20))       sensitivityValue=(""String_Node_Str"");
 else       if (sensitivityValueInt > (75))       sensitivityValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue,hftimeValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  editSoftsens.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      softsensValue=newValue.toString();
      int softsensValueInt=Integer.parseInt(softsensValue);
      if (softsensValueInt < (15))       softsensValue=(""String_Node_Str"");
 else       if (softsensValueInt > (30))       softsensValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue,hftimeValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  powerled.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (powerled.isChecked()) {
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
 else {
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
        if (BatteryLED.setdisable(powerled.isChecked())) {
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
    }
  }
);
  nobottom.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (nobottom.isChecked()) {
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
 else {
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
        if (BottomLED.setdisable(nobottom.isChecked())) {
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
    }
  }
);
  hf.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (ROOT) {
        if (LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + ((hf.isChecked()) ? Strings.getvibr() : Strings.getnovibr()) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"" + ((hf.isChecked() == true) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          Toast.makeText(context,""String_Node_Str"" + Boolean.toString(hf.isChecked()),4000).show();
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          hf.setChecked(false);
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        hf.setChecked(false);
      }
      return true;
    }
  }
);
  editHftime.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      hftimeValue=newValue.toString();
      int hftimeValueInt=Integer.parseInt(hftimeValue);
      if (hftimeValueInt < (10))       hftimeValue=(""String_Node_Str"");
 else       if (hftimeValueInt > (2000))       hftimeValue=(""String_Node_Str"");
      if (ROOT) {
        if (ROOT && LSystem.RemountRW()) {
          LiquidSettings.runRootCommand(""String_Node_Str"" + Strings.getSens(sensitivityValue,noiseValue,softsensValue,hftimeValue) + ""String_Node_Str"");
          LiquidSettings.runRootCommand(""String_Node_Str"");
          LSystem.RemountROnly();
          if (LiquidSettings.runRootCommand(""String_Node_Str""))           Toast.makeText(context,""String_Node_Str"",4000).show();
 else           Toast.makeText(context,""String_Node_Str"",4000).show();
        }
        updateValues();
      }
 else {
        Toast.makeText(context,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  sdcache.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (!Strings.onlyNumber(newValue.toString())) {
        Toast.makeText(context,""String_Node_Str"",4000).show();
        return false;
      }
      String newValueString=newValue.toString();
      int newValueInt=Integer.parseInt(newValueString);
      if (newValueInt < 128)       newValueInt=128;
 else       if (newValueInt > 4096)       newValueInt=4096;
      if (ROOT) {
        if (SdCache.setSDCache(newValueInt)) {
          Toast.makeText(context,""String_Node_Str"" + newValueInt,4000).show();
          return true;
        }
 else {
          Toast.makeText(context,""String_Node_Str"",4000).show();
          return false;
        }
      }
 else       Toast.makeText(context,""String_Node_Str"",4000).show();
      return false;
    }
  }
);
  networkmode.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      Editor editor=prefs.edit();
      editor.putString(""String_Node_Str"",newValue.toString());
      editor.commit();
      NetworkMode.switchnetworkmode(myactivity);
      return true;
    }
  }
);
  noprox.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (noprox.isChecked()) {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(""String_Node_Str"");
      builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          LiquidSettings.runRootCommand(""String_Node_Str"");
        }
      }
);
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  v6scripttweaker.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      try {
        Intent intent=new Intent(Intent.ACTION_MAIN);
        intent.setComponent(new ComponentName(""String_Node_Str"",""String_Node_Str""));
        intent.putExtra(""String_Node_Str"",""String_Node_Str"");
        startActivity(intent);
      }
 catch (      Exception e) {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  sdmanscripttweaker.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      try {
        Intent intent=new Intent(Intent.ACTION_MAIN);
        intent.setComponent(new ComponentName(""String_Node_Str"",""String_Node_Str""));
        intent.putExtra(""String_Node_Str"",""String_Node_Str"");
        startActivity(intent);
      }
 catch (      Exception e) {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  sdmanscript.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      Intent myintent=new Intent(Intent.ACTION_VIEW);
      myintent.setClassName(myactivity,SDMAN.class.getName());
      startActivity(myintent);
      return true;
    }
  }
);
  usemetalcamera.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      LSystem.RemountRW();
      if (usemetalcamera.isChecked()) {
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
 else {
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
        LiquidSettings.runRootCommand(""String_Node_Str"");
      }
      LSystem.RemountROnly();
      return true;
    }
  }
);
  mountsystem.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      final AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(""String_Node_Str"");
      builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          LSystem.RemountRW();
          Toast.makeText(myactivity,""String_Node_Str"",4000).show();
        }
      }
);
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          LSystem.RemountROnly();
          Toast.makeText(myactivity,""String_Node_Str"",4000).show();
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  diskspace.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      final AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
      builder.setTitle(""String_Node_Str"");
      builder.setCancelable(true);
      builder.setMessage(DiskSpace.getdiskspace());
      builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
        }
      }
);
      builder.create().show();
      return true;
    }
  }
);
  hotreboot.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ProgressDialog.show(myactivity,""String_Node_Str"",""String_Node_Str"",true);
      LiquidSettings.runRootCommand(""String_Node_Str"");
      return true;
    }
  }
);
  donateclick.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ConnectivityManager connManager=(ConnectivityManager)myactivity.getSystemService(Context.CONNECTIVITY_SERVICE);
      android.net.NetworkInfo netInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
      android.net.NetworkInfo wifiInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
      if (netInfo.getState() == android.net.NetworkInfo.State.CONNECTED || wifiInfo.getState() == android.net.NetworkInfo.State.CONNECTED) {
        Intent myintent=new Intent(Intent.ACTION_VIEW);
        myintent.setClassName(context,Webview.class.getName());
        startActivity(myintent);
      }
 else {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  forceupdate.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      new OTA_updates().checkupdates(myactivity,myactivity);
      return true;
    }
  }
);
  updateonstart.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      if (!updateonstart.isChecked()) {
        parsebuildprop.editString(""String_Node_Str"",""String_Node_Str"");
        AlertDialog.Builder builder=new AlertDialog.Builder(myactivity);
        builder.setTitle(""String_Node_Str"");
        builder.setCancelable(true);
        builder.setMessage(""String_Node_Str"");
        builder.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            Editor editor=prefs.edit();
            editor.putBoolean(""String_Node_Str"",true);
            updateonstart.setChecked(true);
            editor.commit();
          }
        }
);
        builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
          }
        }
);
        builder.create().show();
      }
      return true;
    }
  }
);
  reportissue.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      ConnectivityManager connManager=(ConnectivityManager)myactivity.getSystemService(Context.CONNECTIVITY_SERVICE);
      android.net.NetworkInfo netInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
      android.net.NetworkInfo wifiInfo=connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
      if (netInfo.getState() == android.net.NetworkInfo.State.CONNECTED || wifiInfo.getState() == android.net.NetworkInfo.State.CONNECTED) {
        ProgressDialog.show(myactivity,""String_Node_Str"",""String_Node_Str"",true);
        Intent myintent=new Intent(Intent.ACTION_VIEW);
        myintent.setClassName(myactivity,ReportIssue.class.getName());
        startActivity(myintent);
      }
 else {
        Toast.makeText(myactivity,""String_Node_Str"",4000).show();
      }
      return true;
    }
  }
);
  menu_info.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      showhelp();
      return true;
    }
  }
);
  resetall.setOnPreferenceClickListener(new OnPreferenceClickListener(){
    public boolean onPreferenceClick(    Preference preference){
      LSystem.RemountRW();
      LiquidSettings.runRootCommand(""String_Node_Str"");
      LiquidSettings.runRootCommand(""String_Node_Str"");
      LiquidSettings.runRootCommand(""String_Node_Str"");
      LiquidSettings.runRootCommand(""String_Node_Str"");
      LiquidSettings.runRootCommand(""String_Node_Str"");
      LSystem.RemountROnly();
      Editor editor=prefs.edit();
      editor.putBoolean(""String_Node_Str"",true);
      editor.commit();
      new StartSystem().startsystem(myactivity);
      return true;
    }
  }
);
  if (prefs.getBoolean(""String_Node_Str"",true)) {
    new OTA_updates().checkupdates(myactivity,myactivity);
  }
}"
83564,"public boolean onPreferenceClick(Preference preference){
  Editor editor=prefs.edit();
  editor.putBoolean(""String_Node_Str"",true);
  editor.commit();
  new StartSystem().startsystem(myactivity);
  return true;
}","public boolean onPreferenceClick(Preference preference){
  LSystem.RemountRW();
  LiquidSettings.runRootCommand(""String_Node_Str"");
  LiquidSettings.runRootCommand(""String_Node_Str"");
  LiquidSettings.runRootCommand(""String_Node_Str"");
  LiquidSettings.runRootCommand(""String_Node_Str"");
  LiquidSettings.runRootCommand(""String_Node_Str"");
  LSystem.RemountROnly();
  Editor editor=prefs.edit();
  editor.putBoolean(""String_Node_Str"",true);
  editor.commit();
  new StartSystem().startsystem(myactivity);
  return true;
}"
83565,"@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  NetworkMode.switchnetworkmode(myactivity);
  return true;
}","@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  Editor editor=prefs.edit();
  editor.putString(""String_Node_Str"",newValue.toString());
  editor.commit();
  NetworkMode.switchnetworkmode(myactivity);
  return true;
}"
83566,"/** 
 * Rotate a block's data value -90 degrees (north<-east<-south<-west<-north);
 * @param type
 * @param data
 * @return
 */
public static int rotate90Reverse(int type,int data){
switch (type) {
case 50:
case 75:
case 76:
switch (data) {
case 3:
      return 1;
case 4:
    return 2;
case 2:
  return 3;
case 1:
return 4;
}
break;
case 66:
switch (data) {
case 7:
return 6;
case 8:
return 7;
case 9:
return 8;
case 6:
return 9;
}
case 27:
case 28:
int power=data & ~0x7;
switch (data & 0x7) {
case 1:
return 0 | power;
case 0:
return 1 | power;
case 5:
return 2 | power;
case 4:
return 3 | power;
case 2:
return 4 | power;
case 3:
return 5 | power;
}
break;
case 53:
case 67:
case 108:
case 109:
case 114:
switch (data) {
case 2:
return 0;
case 3:
return 1;
case 1:
return 2;
case 0:
return 3;
}
break;
case 69:
case 77:
int thrown=data & 0x8;
int withoutThrown=data & ~0x8;
switch (withoutThrown) {
case 3:
return 1 | thrown;
case 4:
return 2 | thrown;
case 2:
return 3 | thrown;
case 1:
return 4 | thrown;
}
break;
case 64:
case 71:
int topHalf=data & 0x8;
int swung=data & 0x4;
int withoutFlags=data & ~(0x8 | 0x4);
switch (withoutFlags) {
case 1:
return 0 | topHalf | swung;
case 2:
return 1 | topHalf | swung;
case 3:
return 2 | topHalf | swung;
case 0:
return 3 | topHalf | swung;
}
break;
case 63:
return (data + 12) % 16;
case 65:
case 68:
case 54:
case 61:
case 62:
case 23:
switch (data) {
case 5:
return 2;
case 4:
return 3;
case 2:
return 4;
case 3:
return 5;
}
break;
case 86:
case 91:
switch (data) {
case 1:
return 0;
case 2:
return 1;
case 3:
return 2;
case 0:
return 3;
}
break;
case 93:
case 94:
int dir=data & 0x03;
int delay=data - dir;
switch (dir) {
case 1:
return 0 | delay;
case 2:
return 1 | delay;
case 3:
return 2 | delay;
case 0:
return 3 | delay;
}
break;
case 96:
int withoutOrientation=data & ~0x3;
int orientation=data & 0x3;
switch (orientation) {
case 3:
return 0 | withoutOrientation;
case 2:
return 1 | withoutOrientation;
case 0:
return 2 | withoutOrientation;
case 1:
return 3 | withoutOrientation;
}
case 29:
case 33:
case 34:
final int rest=data & ~0x7;
switch (data & 0x7) {
case 5:
return 2 | rest;
case 4:
return 3 | rest;
case 2:
return 4 | rest;
case 3:
return 5 | rest;
}
break;
case 99:
case 100:
if (data >= 10) {
return data;
}
return (data * 7) % 10;
case 106:
return ((data >> 1) | (data << 3)) & 0xf;
case 107:
return ((data + 3) & 0x3) | (data & ~0x3);
}
return data;
}","/** 
 * Rotate a block's data value -90 degrees (north<-east<-south<-west<-north);
 * @param type
 * @param data
 * @return
 */
public static int rotate90Reverse(int type,int data){
  int dir;
switch (type) {
case 50:
case 75:
case 76:
switch (data) {
case 3:
      return 1;
case 4:
    return 2;
case 2:
  return 3;
case 1:
return 4;
}
break;
case 66:
switch (data) {
case 7:
return 6;
case 8:
return 7;
case 9:
return 8;
case 6:
return 9;
}
case 27:
case 28:
int power=data & ~0x7;
switch (data & 0x7) {
case 1:
return power;
case 0:
return 1 | power;
case 5:
return 2 | power;
case 4:
return 3 | power;
case 2:
return 4 | power;
case 3:
return 5 | power;
}
break;
case 53:
case 67:
case 108:
case 109:
case 114:
int top=data & 0x4;
dir=data & 0x3;
switch (dir) {
case 2:
return top;
case 3:
return 1 | top;
case 1:
return 2 | top;
case 0:
return 3 | top;
}
break;
case 69:
case 77:
int thrown=data & 0x8;
int withoutThrown=data & ~0x8;
switch (withoutThrown) {
case 3:
return 1 | thrown;
case 4:
return 2 | thrown;
case 2:
return 3 | thrown;
case 1:
return 4 | thrown;
}
break;
case 64:
case 71:
int topHalf=data & 0x8;
int swung=data & 0x4;
int withoutFlags=data & ~(0x8 | 0x4);
switch (withoutFlags) {
case 1:
return topHalf | swung;
case 2:
return 1 | topHalf | swung;
case 3:
return 2 | topHalf | swung;
case 0:
return 3 | topHalf | swung;
}
break;
case 63:
return (data + 12) % 16;
case 65:
case 68:
case 54:
case 61:
case 62:
case 23:
switch (data) {
case 5:
return 2;
case 4:
return 3;
case 2:
return 4;
case 3:
return 5;
}
break;
case 86:
case 91:
switch (data) {
case 1:
return 0;
case 2:
return 1;
case 3:
return 2;
case 0:
return 3;
}
break;
case 93:
case 94:
dir=data & 0x03;
int delay=data - dir;
switch (dir) {
case 1:
return delay;
case 2:
return 1 | delay;
case 3:
return 2 | delay;
case 0:
return 3 | delay;
}
break;
case 96:
int withoutOrientation=data & ~0x3;
int orientation=data & 0x3;
switch (orientation) {
case 3:
return withoutOrientation;
case 2:
return 1 | withoutOrientation;
case 0:
return 2 | withoutOrientation;
case 1:
return 3 | withoutOrientation;
}
case 29:
case 33:
case 34:
final int rest=data & ~0x7;
switch (data & 0x7) {
case 5:
return 2 | rest;
case 4:
return 3 | rest;
case 2:
return 4 | rest;
case 3:
return 5 | rest;
}
break;
case 99:
case 100:
if (data >= 10) {
return data;
}
return (data * 7) % 10;
case 106:
return ((data >> 1) | (data << 3)) & 0xf;
case 107:
return ((data + 3) & 0x3) | (data & ~0x3);
}
return data;
}"
83567,"public LRBlockData(int id,byte data,Direction dir,boolean saving){
  this.id=id;
  this.data=data;
  this.dir=dir;
  if (saving) {
    return;
  }
 else {
    setPlaceDirection();
  }
}","public LRBlockData(int id,byte data,Direction dir,boolean saving){
  this.id=id;
  this.data=data;
  this.dir=dir;
  if (!saving) {
    setPlaceDirection();
  }
}"
83568,"/** 
 * Rotate a block's data value 90 degrees (north->east->south->west->north);
 * @param type
 * @param data
 * @return
 */
public static int rotate90(int type,int data){
switch (type) {
case 50:
case 75:
case 76:
switch (data) {
case 1:
      return 3;
case 2:
    return 4;
case 3:
  return 2;
case 4:
return 1;
}
break;
case 66:
switch (data) {
case 6:
return 7;
case 7:
return 8;
case 8:
return 9;
case 9:
return 6;
}
case 27:
case 28:
switch (data & 0x7) {
case 0:
return 1 | (data & ~0x7);
case 1:
return 0 | (data & ~0x7);
case 2:
return 5 | (data & ~0x7);
case 3:
return 4 | (data & ~0x7);
case 4:
return 2 | (data & ~0x7);
case 5:
return 3 | (data & ~0x7);
}
break;
case 53:
case 67:
case 108:
case 109:
case 114:
switch (data) {
case 0:
return 2;
case 1:
return 3;
case 2:
return 1;
case 3:
return 0;
}
break;
case 69:
case 77:
int thrown=data & 0x8;
int withoutThrown=data & ~0x8;
switch (withoutThrown) {
case 1:
return 3 | thrown;
case 2:
return 4 | thrown;
case 3:
return 2 | thrown;
case 4:
return 1 | thrown;
}
break;
case 64:
case 71:
int topHalf=data & 0x8;
int swung=data & 0x4;
int withoutFlags=data & ~(0x8 | 0x4);
switch (withoutFlags) {
case 0:
return 1 | topHalf | swung;
case 1:
return 2 | topHalf | swung;
case 2:
return 3 | topHalf | swung;
case 3:
return 0 | topHalf | swung;
}
break;
case 63:
return (data + 4) % 16;
case 65:
case 68:
case 54:
case 61:
case 62:
case 23:
switch (data) {
case 2:
return 5;
case 3:
return 4;
case 4:
return 2;
case 5:
return 3;
}
break;
case 86:
case 91:
switch (data) {
case 0:
return 1;
case 1:
return 2;
case 2:
return 3;
case 3:
return 0;
}
break;
case 93:
case 94:
int dir=data & 0x03;
int delay=data - dir;
switch (dir) {
case 0:
return 1 | delay;
case 1:
return 2 | delay;
case 2:
return 3 | delay;
case 3:
return 0 | delay;
}
break;
case 96:
int withoutOrientation=data & ~0x3;
int orientation=data & 0x3;
switch (orientation) {
case 0:
return 3 | withoutOrientation;
case 1:
return 2 | withoutOrientation;
case 2:
return 0 | withoutOrientation;
case 3:
return 1 | withoutOrientation;
}
break;
case 33:
case 29:
case 34:
final int rest=data & ~0x7;
switch (data & 0x7) {
case 2:
return 5 | rest;
case 3:
return 4 | rest;
case 4:
return 2 | rest;
case 5:
return 3 | rest;
}
break;
case 99:
case 100:
if (data >= 10) {
return data;
}
return (data * 3) % 10;
case 106:
return ((data << 1) | (data >> 3)) & 0xf;
case 107:
return ((data + 1) & 0x3) | (data & ~0x3);
}
return data;
}","/** 
 * Rotate a block's data value 90 degrees (north->east->south->west->north);
 * @param type
 * @param data
 * @return
 */
public static int rotate90(int type,int data){
  int dir;
switch (type) {
case 50:
case 75:
case 76:
switch (data) {
case 1:
      return 3;
case 2:
    return 4;
case 3:
  return 2;
case 4:
return 1;
}
break;
case 66:
switch (data) {
case 6:
return 7;
case 7:
return 8;
case 8:
return 9;
case 9:
return 6;
}
case 27:
case 28:
switch (data & 0x7) {
case 0:
return 1 | (data & ~0x7);
case 1:
return (data & ~0x7);
case 2:
return 5 | (data & ~0x7);
case 3:
return 4 | (data & ~0x7);
case 4:
return 2 | (data & ~0x7);
case 5:
return 3 | (data & ~0x7);
}
break;
case 53:
case 67:
case 108:
case 109:
case 114:
int top=data & 0x4;
dir=data & 0x3;
switch (dir) {
case 0:
return 2 | top;
case 1:
return 3 | top;
case 2:
return 1 | top;
case 3:
return top;
}
break;
case 69:
case 77:
int thrown=data & 0x8;
int withoutThrown=data & ~0x8;
switch (withoutThrown) {
case 1:
return 3 | thrown;
case 2:
return 4 | thrown;
case 3:
return 2 | thrown;
case 4:
return 1 | thrown;
}
break;
case 64:
case 71:
int topHalf=data & 0x8;
int swung=data & 0x4;
int withoutFlags=data & ~(0x8 | 0x4);
switch (withoutFlags) {
case 0:
return 1 | topHalf | swung;
case 1:
return 2 | topHalf | swung;
case 2:
return 3 | topHalf | swung;
case 3:
return topHalf | swung;
}
break;
case 63:
return (data + 4) % 16;
case 65:
case 68:
case 54:
case 61:
case 62:
case 23:
switch (data) {
case 2:
return 5;
case 3:
return 4;
case 4:
return 2;
case 5:
return 3;
}
break;
case 86:
case 91:
switch (data) {
case 0:
return 1;
case 1:
return 2;
case 2:
return 3;
case 3:
return 0;
}
break;
case 93:
case 94:
dir=data & 0x03;
int delay=data - dir;
switch (dir) {
case 0:
return 1 | delay;
case 1:
return 2 | delay;
case 2:
return 3 | delay;
case 3:
return delay;
}
break;
case 96:
int withoutOrientation=data & ~0x3;
int orientation=data & 0x3;
switch (orientation) {
case 0:
return 3 | withoutOrientation;
case 1:
return 2 | withoutOrientation;
case 2:
return withoutOrientation;
case 3:
return 1 | withoutOrientation;
}
break;
case 33:
case 29:
case 34:
final int rest=data & ~0x7;
switch (data & 0x7) {
case 2:
return 5 | rest;
case 3:
return 4 | rest;
case 4:
return 2 | rest;
case 5:
return 3 | rest;
}
break;
case 99:
case 100:
if (data >= 10) {
return data;
}
return (data * 3) % 10;
case 106:
return ((data << 1) | (data >> 3)) & 0xf;
case 107:
return ((data + 1) & 0x3) | (data & ~0x3);
}
return data;
}"
83569,"/** 
 * method called by bukkit when the plugin is enabled.
 */
@Override public void onEnable(){
  try {
    roadsDirectory=new File(getDataFolder(),""String_Node_Str"");
    pillarsDirectory=new File(getDataFolder(),""String_Node_Str"");
    if (!roadsDirectory.exists() || !pillarsDirectory.exists()) {
      FileManager.copyDefaultRessources(getDataFolder(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    loadRoads();
    loadPillars();
    undoSave=new File(getDataFolder(),""String_Node_Str"");
    playerListener.unSerializeRoadsUndos(undoSave);
    this.getConfig().options().copyDefaults(true);
    if (!getConfig().contains(""String_Node_Str"")) {
      this.saveDefaultConfig();
      this.reloadConfig();
      this.getConfig().set(""String_Node_Str"",""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
    }
 else     if (!getConfig().getString(""String_Node_Str"").equalsIgnoreCase(getDescription().getVersion())) {
      this.saveDefaultConfig();
      this.reloadConfig();
      this.getConfig().set(""String_Node_Str"",""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
    }
    this.saveConfig();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"");
    return;
  }
  if (!eventRegistered) {
    PluginManager pm=getServer().getPluginManager();
    pm.registerEvents(this.playerListener,this);
    eventRegistered=true;
    log.log(Level.INFO,""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
  }
}","/** 
 * method called by bukkit when the plugin is enabled.
 */
@Override public void onEnable(){
  try {
    roadsDirectory=new File(getDataFolder(),""String_Node_Str"");
    pillarsDirectory=new File(getDataFolder(),""String_Node_Str"");
    if (!roadsDirectory.exists() || !pillarsDirectory.exists()) {
      FileManager.copyDefaultRessources(getDataFolder(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    loadRoads();
    loadPillars();
    undoSave=new File(getDataFolder(),""String_Node_Str"");
    playerListener.unSerializeRoadsUndos(undoSave);
    if (!getConfig().contains(""String_Node_Str"")) {
      this.saveDefaultConfig();
      this.getConfig().set(""String_Node_Str"",""String_Node_Str"" + getDescription().getVersion());
    }
 else     if (!getConfig().getString(""String_Node_Str"").equalsIgnoreCase(getDescription().getVersion())) {
      this.saveDefaultConfig();
      this.getConfig().set(""String_Node_Str"",""String_Node_Str"" + getDescription().getVersion());
    }
    this.getConfig().options().copyDefaults(true);
    this.saveConfig();
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"");
    return;
  }
  if (!eventRegistered) {
    PluginManager pm=getServer().getPluginManager();
    pm.registerEvents(this.playerListener,this);
    eventRegistered=true;
    log.log(Level.INFO,""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
  }
}"
83570,"/** 
 * method called by bukkit when the plugin is enabled.
 */
@Override public void onEnable(){
  try {
    roadsDirectory=new File(getDataFolder(),""String_Node_Str"");
    pillarsDirectory=new File(getDataFolder(),""String_Node_Str"");
    if (!roadsDirectory.exists() || !pillarsDirectory.exists()) {
      FileManager.copyDefaultRessources(getDataFolder(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    loadRoads();
    loadPillars();
    undoSave=new File(getDataFolder(),""String_Node_Str"");
    playerListener.unSerializeRoadsUndos(undoSave);
    File configFile=new File(getDataFolder(),""String_Node_Str"");
    if (!configFile.exists()) {
      FileManager.copyDefaultRessource(getDataFolder(),""String_Node_Str"",""String_Node_Str"");
    }
    config=YamlConfiguration.loadConfiguration(configFile);
    messages=new Messages(this,config);
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"");
    return;
  }
  if (!eventRegistered) {
    PluginManager pm=getServer().getPluginManager();
    pm.registerEvents(this.playerListener,this);
    eventRegistered=true;
    log.log(Level.INFO,""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
  }
}","/** 
 * method called by bukkit when the plugin is enabled.
 */
@Override public void onEnable(){
  try {
    roadsDirectory=new File(getDataFolder(),""String_Node_Str"");
    pillarsDirectory=new File(getDataFolder(),""String_Node_Str"");
    if (!roadsDirectory.exists() || !pillarsDirectory.exists()) {
      FileManager.copyDefaultRessources(getDataFolder(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    loadRoads();
    loadPillars();
    undoSave=new File(getDataFolder(),""String_Node_Str"");
    playerListener.unSerializeRoadsUndos(undoSave);
    getConfig().options().copyDefaults(true);
    config=getConfig();
    messages=new Messages(this,config);
  }
 catch (  IOException ex) {
    log.log(Level.SEVERE,""String_Node_Str"");
    return;
  }
  if (!eventRegistered) {
    PluginManager pm=getServer().getPluginManager();
    pm.registerEvents(this.playerListener,this);
    eventRegistered=true;
    log.log(Level.INFO,""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"");
  }
}"
83571,"private void putBlock(int x,int y,int z,int id,byte data,Direction dir){
  if (id == -1) {
    return;
  }
  Block b=world.getBlockAt(x,y,z);
  if (b.getTypeId() == id && b.getData() == data) {
    return;
  }
  undo.putBlock(b);
  if (dir != Direction.NORTH) {
    if ((id == 50 || id == 75 || id == 76) && data != (byte)5) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)4;
        }
 else         if (data == (byte)4) {
          data=(byte)3;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)1) {
          data=(byte)4;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
 else         if (data == (byte)4) {
          data=(byte)2;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)4;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
 else         if (data == (byte)4) {
          data=(byte)1;
        }
      }
    }
    if ((id == 53 || id == 67 || id == 108 || id == 109)) {
      byte vrtdir=(byte)(data & 0x04);
      data=(byte)(data & 0x03);
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
      data=(byte)(data | vrtdir);
    }
    if ((id == 23 || id == 54 || id == 61 || id == 62 || id == 65 || id == 68)) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
 else         if (data == (byte)4) {
          data=(byte)5;
        }
 else         if (data == (byte)5) {
          data=(byte)4;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)2) {
          data=(byte)5;
        }
 else         if (data == (byte)3) {
          data=(byte)4;
        }
 else         if (data == (byte)4) {
          data=(byte)2;
        }
 else         if (data == (byte)5) {
          data=(byte)3;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)2) {
          data=(byte)4;
        }
 else         if (data == (byte)3) {
          data=(byte)5;
        }
 else         if (data == (byte)4) {
          data=(byte)3;
        }
 else         if (data == (byte)5) {
          data=(byte)2;
        }
      }
    }
    if (id == 77) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)4;
        }
 else         if (data == (byte)4) {
          data=(byte)3;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)4;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
 else         if (data == (byte)4) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)1) {
          data=(byte)4;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
 else         if (data == (byte)4) {
          data=(byte)2;
        }
      }
    }
    if ((id == 86 || id == 91)) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)0;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)0;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
    }
    if ((id == 93 || id == 94)) {
      byte tick=(byte)(0x03 & data);
      data=(byte)(0x0C & data);
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)0;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)0;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
      data=(byte)(data | tick);
    }
    if (id == 96) {
      byte open=(byte)(data & 0x04);
      data=(byte)(data & 0x03);
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)0;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)0;
        }
      }
      data=(byte)(data | open);
    }
    if ((id == 29 || id == 33)) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)2) {
          data=(byte)2;
        }
 else         if (data == (byte)3) {
          data=(byte)3;
        }
 else         if (data == (byte)4) {
          data=(byte)5;
        }
 else         if (data == (byte)5) {
          data=(byte)4;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)2) {
          data=(byte)5;
        }
 else         if (data == (byte)3) {
          data=(byte)4;
        }
 else         if (data == (byte)4) {
          data=(byte)2;
        }
 else         if (data == (byte)5) {
          data=(byte)3;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)2) {
          data=(byte)4;
        }
 else         if (data == (byte)3) {
          data=(byte)5;
        }
 else         if (data == (byte)4) {
          data=(byte)3;
        }
 else         if (data == (byte)5) {
          data=(byte)2;
        }
      }
    }
    if (id == 107) {
      byte open=(byte)(data & 0x04);
      data=(byte)(data & 0x03);
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)0;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)0;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
      data=(byte)(data | open);
    }
  }
  b.setTypeIdAndData(id,data,false);
}","private void putBlock(int x,int y,int z,int id,byte data,Direction dir){
  if (id == -1) {
    return;
  }
  Block b=world.getBlockAt(x,y,z);
  if (b.getTypeId() == id && b.getData() == data) {
    return;
  }
  undo.putBlock(b);
  if (dir != Direction.NORTH) {
    if ((id == 50 || id == 75 || id == 76) && data != (byte)5) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)4;
        }
 else         if (data == (byte)4) {
          data=(byte)3;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)1) {
          data=(byte)4;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
 else         if (data == (byte)4) {
          data=(byte)2;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)4;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
 else         if (data == (byte)4) {
          data=(byte)1;
        }
      }
    }
    if ((id == 53 || id == 67 || id == 108 || id == 109 || id == 114)) {
      byte vrtdir=(byte)(data & 0x04);
      data=(byte)(data & 0x03);
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)0;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)0;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
      data=(byte)(data | vrtdir);
    }
    if ((id == 23 || id == 54 || id == 61 || id == 62 || id == 65 || id == 68)) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
 else         if (data == (byte)4) {
          data=(byte)5;
        }
 else         if (data == (byte)5) {
          data=(byte)4;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)2) {
          data=(byte)5;
        }
 else         if (data == (byte)3) {
          data=(byte)4;
        }
 else         if (data == (byte)4) {
          data=(byte)2;
        }
 else         if (data == (byte)5) {
          data=(byte)3;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)2) {
          data=(byte)4;
        }
 else         if (data == (byte)3) {
          data=(byte)5;
        }
 else         if (data == (byte)4) {
          data=(byte)3;
        }
 else         if (data == (byte)5) {
          data=(byte)2;
        }
      }
    }
    if (id == 77) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)4;
        }
 else         if (data == (byte)4) {
          data=(byte)3;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)4;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
 else         if (data == (byte)4) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)1) {
          data=(byte)4;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
 else         if (data == (byte)4) {
          data=(byte)2;
        }
      }
    }
    if ((id == 86 || id == 91)) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)0;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)0;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
    }
    if ((id == 93 || id == 94)) {
      byte tick=(byte)(0x03 & data);
      data=(byte)(0x0C & data);
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)0;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)0;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
      data=(byte)(data | tick);
    }
    if (id == 96) {
      byte open=(byte)(data & 0x04);
      data=(byte)(data & 0x03);
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)0;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)0;
        }
      }
      data=(byte)(data | open);
    }
    if ((id == 29 || id == 33)) {
      if (dir == Direction.SOUTH) {
        if (data == (byte)2) {
          data=(byte)2;
        }
 else         if (data == (byte)3) {
          data=(byte)3;
        }
 else         if (data == (byte)4) {
          data=(byte)5;
        }
 else         if (data == (byte)5) {
          data=(byte)4;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)2) {
          data=(byte)5;
        }
 else         if (data == (byte)3) {
          data=(byte)4;
        }
 else         if (data == (byte)4) {
          data=(byte)2;
        }
 else         if (data == (byte)5) {
          data=(byte)3;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)2) {
          data=(byte)4;
        }
 else         if (data == (byte)3) {
          data=(byte)5;
        }
 else         if (data == (byte)4) {
          data=(byte)3;
        }
 else         if (data == (byte)5) {
          data=(byte)2;
        }
      }
    }
    if (id == 107) {
      byte open=(byte)(data & 0x04);
      data=(byte)(data & 0x03);
      if (dir == Direction.SOUTH) {
        if (data == (byte)0) {
          data=(byte)2;
        }
 else         if (data == (byte)1) {
          data=(byte)3;
        }
 else         if (data == (byte)2) {
          data=(byte)0;
        }
 else         if (data == (byte)3) {
          data=(byte)1;
        }
      }
 else       if (dir == Direction.EAST) {
        if (data == (byte)0) {
          data=(byte)1;
        }
 else         if (data == (byte)1) {
          data=(byte)2;
        }
 else         if (data == (byte)2) {
          data=(byte)3;
        }
 else         if (data == (byte)3) {
          data=(byte)0;
        }
      }
 else       if (dir == Direction.WEST) {
        if (data == (byte)0) {
          data=(byte)3;
        }
 else         if (data == (byte)1) {
          data=(byte)0;
        }
 else         if (data == (byte)2) {
          data=(byte)1;
        }
 else         if (data == (byte)3) {
          data=(byte)2;
        }
      }
      data=(byte)(data | open);
    }
  }
  b.setTypeIdAndData(id,data,false);
}"
83572,"/** 
 * Loads all the settings for the program. If the version information doesn't match up or the config is the wrong lenght, the default values are written.
 */
public void loadSettings(){
  String version;
  FileHandler FH=new FileHandler();
  if (!FH.pathExists(""String_Node_Str"")) {
    writeDefaultConfig();
    settings=new String[config.length];
    settings=config;
  }
 else {
    String[] dat=FH.read(""String_Node_Str"");
    if (dat.length == config.length) {
      version=dat[0];
      if (!version.equals(""String_Node_Str"" + GiantTrees.getVersion())) {
        GiantTrees.logInfo(""String_Node_Str"");
        writeDefaultConfig();
        settings=new String[config.length];
        settings=config;
      }
 else {
        settings=new String[dat.length];
        settings=dat;
      }
    }
 else {
      GiantTrees.logSevere(""String_Node_Str"");
      writeDefaultConfig();
      settings=new String[config.length];
      settings=config;
    }
  }
}","/** 
 * Loads all the settings for the program. If the version information doesn't match up or the config is the wrong lenght, the default values are written.
 */
public void loadSettings(){
  String version;
  FileHandler FH=new FileHandler();
  if (!FH.pathExists(""String_Node_Str"")) {
    writeDefaultConfig();
    settings=new String[config.length];
    settings=config;
  }
 else {
    String[] dat=FH.read(""String_Node_Str"");
    if (dat.length == config.length) {
      version=dat[0];
      if (!version.equals(""String_Node_Str"" + GiantTrees.getSettingsVersion())) {
        GiantTrees.logInfo(""String_Node_Str"");
        writeDefaultConfig();
        settings=new String[config.length];
        settings=config;
      }
 else {
        settings=new String[dat.length];
        settings=dat;
      }
    }
 else {
      GiantTrees.logSevere(""String_Node_Str"");
      writeDefaultConfig();
      settings=new String[config.length];
      settings=config;
    }
  }
}"
83573,"/** 
 * Finds the surface of the world, returns null if it can't be built on or gets to the bottom
 * @param world world
 * @param x x location of chunk
 * @param z z location of chunk
 * @return location of surface
 */
private Location getSurface(World world,int x,int z){
  x=(int)(Math.random() * 16 + x);
  z=(int)(Math.random() * 16 + z);
  Location loc=new Location(world,x,0,z);
  int id=0;
  for (int y=127; y > 0; y--) {
    loc=new Location(world,x,y,z);
    id=loc.getBlock().getTypeId();
    if (id != 0) {
      if (id == 8 || id == 19 || id == 10 || id == 11 || id == 51 || id == 7) {
        loc=null;
        break;
      }
 else       if (id != 17 && id != 18 && id != 81 && id != 83 && id != 37 && id != 38 && id != 39 && id != 40 && id != 86 && id != 31 && id != 32) {
        break;
      }
    }
    if (y == 1) {
      loc=null;
      break;
    }
  }
  return loc;
}","/** 
 * Finds the surface of the world, returns null if it can't be built on or gets to the bottom
 * @param world world
 * @param x x location of chunk
 * @param z z location of chunk
 * @return location of surface
 */
private Location getSurface(World world,int x,int z){
  x=(int)(Math.random() * 16 + x);
  z=(int)(Math.random() * 16 + z);
  Location loc=new Location(world,x,0,z);
  int id=0;
  for (int y=world.getMaxHeight() - 1; y > 0; y--) {
    loc=new Location(world,x,y,z);
    id=loc.getBlock().getTypeId();
    if (id != 0) {
      if (id == 8 || id == 19 || id == 10 || id == 11 || id == 51 || id == 7) {
        loc=null;
        break;
      }
 else       if (id != 17 && id != 18 && id != 81 && id != 83 && id != 37 && id != 38 && id != 39 && id != 40 && id != 86 && id != 31 && id != 32) {
        break;
      }
    }
    if (y == 1) {
      loc=null;
      break;
    }
  }
  return loc;
}"
83574,"/** 
 * Changes one block in-game
 */
public void run(){
  if (spot < blockList.size()) {
    Block block;
    Material material;
    block=blockList.get(spot);
    material=typeList.get(spot);
    block.setType(material);
    if (material.getId() == meta.getLogType().getId() && meta.hasLogMeta()) {
      block.setData(meta.getLogMeta());
    }
    if (material.getId() == meta.getLeafType().getId() && meta.hasLeafMeta()) {
      block.setData(meta.getLeafMeta());
    }
    spot++;
    if (spot == blockList.size()) {
      done=true;
    }
  }
}","/** 
 * Changes one block in-game
 */
public void run(){
  if (spot < blockList.size()) {
    block=blockList.get(spot);
    material=typeList.get(spot);
    block.setType(material);
    if (material.getId() == meta.getLogType().getId() && meta.hasLogMeta()) {
      block.setData(meta.getLogMeta());
    }
    if (material.getId() == meta.getLeafType().getId() && meta.hasLeafMeta()) {
      block.setData(meta.getLeafMeta());
    }
    spot++;
    if (spot == blockList.size()) {
      done=true;
    }
  }
}"
83575,"private void updateRunning(float deltaTime){
  if (Gdx.app.getType() == Application.ApplicationType.Android) {
    if (Gdx.input.getX() < 480 / 2) {
      world.paddleP1.position.y=Gdx.input.getY() / 10;
    }
    if (Gdx.input.getX() > 480 / 2) {
      world.paddleP2.position.y=Gdx.input.getY() / 10;
    }
  }
 else {
    float accel1=0;
    float accel2=0;
    if (Gdx.input.isKeyPressed(Keys.DPAD_UP))     accel2=20;
    if (Gdx.input.isKeyPressed(Keys.DPAD_DOWN))     accel2=-20;
    if (Gdx.input.isKeyPressed(Keys.W))     accel1=20;
    if (Gdx.input.isKeyPressed(Keys.S))     accel1=-20;
    world.update(deltaTime,accel1,accel2);
  }
  if (world.scoreP1 != player1Score || world.scoreP2 != player2Score) {
    player1Score=world.scoreP1;
    player2Score=world.scoreP2;
    player1ScoreString=""String_Node_Str"" + player1Score;
    player2ScoreString=""String_Node_Str"" + player2Score;
  }
  fpslogger.log();
}","private void updateRunning(float deltaTime){
  if (Gdx.app.getType() == Application.ApplicationType.Android) {
    if (Gdx.input.getX() < 480 / 2) {
      world.paddleP1.position.y=32 - (Gdx.input.getY() / 10);
    }
    if (Gdx.input.getX() > 480 / 2) {
      world.paddleP2.position.y=32 - (Gdx.input.getY() / 10);
    }
    world.update(deltaTime,0,0);
  }
 else {
    float accel1=0;
    float accel2=0;
    if (Gdx.input.isKeyPressed(Keys.DPAD_UP))     accel2=20;
    if (Gdx.input.isKeyPressed(Keys.DPAD_DOWN))     accel2=-20;
    if (Gdx.input.isKeyPressed(Keys.W))     accel1=20;
    if (Gdx.input.isKeyPressed(Keys.S))     accel1=-20;
    world.update(deltaTime,accel1,accel2);
  }
  if (world.scoreP1 != player1Score || world.scoreP2 != player2Score) {
    player1Score=world.scoreP1;
    player2Score=world.scoreP2;
    player1ScoreString=""String_Node_Str"" + player1Score;
    player2ScoreString=""String_Node_Str"" + player2Score;
  }
  fpslogger.log();
}"
83576,"public void presentRunning(){
  Assets.font.draw(batcher,player1ScoreString,16,300);
  Assets.font.draw(batcher,player2ScoreString,450,300);
}","public void presentRunning(){
  Assets.font.draw(batcher,player1ScoreString,36,300);
  Assets.font.draw(batcher,player2ScoreString,420,300);
}"
83577,"public void checkGameOver(){
}","public void checkGameOver(){
  if (scoreP1 > 15 || scoreP2 > 15) {
    state=WORLD_STATE_GAME_END;
  }
}"
83578,"public void updateBall(float deltaTime){
  if (ball.position.y >= WORLD_HEIGHT)   ball.velocity.y=ball.velocity.y * -1;
  if (ball.position.y <= 0)   ball.velocity.y=ball.velocity.y * -1;
  if (ball.position.x >= WORLD_WIDTH) {
    scoreP1++;
    ball.score();
  }
  if (ball.position.x <= 0) {
    scoreP2++;
    ball.score();
  }
  ball.update(deltaTime);
}","public void updateBall(float deltaTime){
  ball.update(deltaTime);
  if (ball.position.y >= WORLD_HEIGHT && ball.velocity.y > 0)   ball.velocity.y=ball.velocity.y * -1;
  if (ball.position.y <= 0 && ball.velocity.y < 0)   ball.velocity.y=ball.velocity.y * -1;
  if (ball.position.x >= WORLD_WIDTH) {
    scoreP1++;
    ball.score();
  }
  if (ball.position.x <= 0) {
    scoreP2++;
    ball.score();
  }
}"
83579,"public void checkCollisions(){
  if (OverlapTester.overlapRectangles(paddleP1.bounds,ball.bounds)) {
    ball.velocity.x=ball.velocity.x * -1;
  }
  if (OverlapTester.overlapRectangles(paddleP2.bounds,ball.bounds)) {
    ball.velocity.x=ball.velocity.x * -1;
  }
}","public void checkCollisions(){
  if (OverlapTester.overlapRectangles(paddleP1.bounds,ball.bounds) && ball.velocity.x < 0) {
    ball.velocity.x=ball.velocity.x * -1;
  }
  if (OverlapTester.overlapRectangles(paddleP2.bounds,ball.bounds) && ball.velocity.x > 0) {
    ball.velocity.x=ball.velocity.x * -1;
  }
}"
83580,"@SuppressWarnings(""String_Node_Str"") public void cancel(){
  try {
    _serverSocket.close();
  }
 catch (  IOException e) {
    Logger.Log(""String_Node_Str"" + e.getMessage());
  }
  try {
    _socket.close();
  }
 catch (  IOException e) {
    Logger.Log(""String_Node_Str"" + e.getMessage());
  }
}","@SuppressWarnings(""String_Node_Str"") public void cancel(){
  try {
    if (_serverSocket != null) {
      _serverSocket.close();
    }
  }
 catch (  IOException e) {
    Logger.Log(""String_Node_Str"" + e.getMessage());
  }
  try {
    if (_socket != null) {
      _socket.close();
    }
  }
 catch (  IOException e) {
    Logger.Log(""String_Node_Str"" + e.getMessage());
  }
}"
83581,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.comm_select);
  Button bluetooth=(Button)findViewById(R.id.bluetooth);
  bluetooth.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getGameEngine().setCommunicationType(CommunicationType.BLUETOOTH);
      startActivity(new Intent(CommunicationSelectView.this,GameSelectView.class));
    }
  }
);
  Button internet=(Button)findViewById(R.id.internet);
  internet.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getGameEngine().setCommunicationType(CommunicationType.INTERNET);
      startActivity(new Intent(CommunicationSelectView.this,GameSelectView.class));
    }
  }
);
  Button settings=(Button)findViewById(R.id.settings);
  settings.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder alert=new AlertDialog.Builder(CommunicationSelectView.this);
      alert.setTitle(""String_Node_Str"");
      alert.setMessage(""String_Node_Str"");
      final EditText input=new EditText(CommunicationSelectView.this);
      alert.setView(input);
      alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          String value=input.getText().toString();
          SharedPreferences prefs=ApplicationController.getContext().getSharedPreferences(""String_Node_Str"",0);
          SharedPreferences.Editor editor=prefs.edit();
          editor.putString(""String_Node_Str"",value);
          editor.commit();
        }
      }
);
      alert.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      alert.show();
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.comm_select);
  GameEngine.getInstance().hardReset();
  Button bluetooth=(Button)findViewById(R.id.bluetooth);
  bluetooth.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getGameEngine().setCommunicationType(CommunicationType.BLUETOOTH);
      startActivity(new Intent(CommunicationSelectView.this,GameSelectView.class));
    }
  }
);
  Button internet=(Button)findViewById(R.id.internet);
  internet.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      getGameEngine().setCommunicationType(CommunicationType.INTERNET);
      startActivity(new Intent(CommunicationSelectView.this,GameSelectView.class));
    }
  }
);
  Button settings=(Button)findViewById(R.id.settings);
  settings.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AlertDialog.Builder alert=new AlertDialog.Builder(CommunicationSelectView.this);
      alert.setTitle(""String_Node_Str"");
      alert.setMessage(""String_Node_Str"");
      final EditText input=new EditText(CommunicationSelectView.this);
      alert.setView(input);
      alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          String value=input.getText().toString();
          SharedPreferences prefs=ApplicationController.getContext().getSharedPreferences(""String_Node_Str"",0);
          SharedPreferences.Editor editor=prefs.edit();
          editor.putString(""String_Node_Str"",value);
          editor.commit();
        }
      }
);
      alert.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      alert.show();
    }
  }
);
}"
83582,"@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener){
  listener.getLogger().println(""String_Node_Str"");
  PrintStream logger=listener.getLogger();
  FilePath metricFile=new FilePath(build.getWorkspace(),outputFilePath);
  try {
    if (!metricFile.exists()) {
      listener.getLogger().println(String.format(""String_Node_Str"",outputFilePath));
      build.setResult(Result.FAILURE);
      return false;
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  InterruptedException ie) {
    ie.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  Throwable t) {
    t.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
  PmccabeFileParser parser=new PmccabeFileParser(metricFile);
  try {
    PmccabeReport report=parser.parse();
    build.addAction(new PmccabeAction(build,report));
  }
 catch (  IOException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
  listener.getLogger().println(""String_Node_Str"");
  return true;
}","@Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener){
  listener.getLogger().println(""String_Node_Str"");
  FilePath workspace=build.getWorkspace();
  PrintStream logger=listener.getLogger();
  FilePath metricFile=new FilePath(build.getWorkspace(),outputFilePath);
  try {
    if (!metricFile.exists()) {
      listener.getLogger().println(String.format(""String_Node_Str"",outputFilePath));
      build.setResult(Result.FAILURE);
      return false;
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  InterruptedException ie) {
    ie.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  Throwable t) {
    t.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
  PmccabeFileParser parser=new PmccabeFileParser(metricFile);
  try {
    PmccabeReport report=workspace.act(parser);
    build.addAction(new PmccabeAction(build,report));
  }
 catch (  IOException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
catch (  InterruptedException ioe) {
    ioe.printStackTrace(logger);
    build.setResult(Result.FAILURE);
    return false;
  }
  listener.getLogger().println(""String_Node_Str"");
  return true;
}"
83583,"@Override public void onWorldSave(WorldSaveEvent event){
  plugin.savePlaytime();
  plugin.saveRent();
}","@Override public void onWorldSave(WorldSaveEvent event){
  plugin.savePlaytime();
}"
83584,"public void RentAbility(Player player,String abilityname){
  DebugPrint(""String_Node_Str"" + abilityname);
  for (  Ability ab : Abilities.keySet()) {
    DebugPrint(""String_Node_Str"" + abilityname + ""String_Node_Str""+ ab.name);
    if (ab.name.equalsIgnoreCase(abilityname)) {
      DebugPrint(abilityname + ""String_Node_Str"" + ab.rentCost);
      if (ab.rentCost >= 0) {
        if (ab.rentCost == 0) {
          DebugPrint(abilityname + ""String_Node_Str"");
          if (Method.getAccount(player.getName()).hasEnough(ab.rentAmount)) {
            DebugPrint(""String_Node_Str"");
switch (AddPlayerNode(player,ab)) {
case 0:
              Method.getAccount(player.getName()).subtract(ab.rentAmount);
            RentedAbilities.add(new PurchasedAbility(player.getName(),ab));
          Map<String,String> replace=new HashMap<String,String>();
        replace.putAll(ProcessMsgVars(player));
      replace.putAll(ProcessMsgVars(ab));
    String msg=ProcessMsg(ab.rentGainedMsg,replace);
  if (ab.broadcast)   getServer().broadcastMessage(msg);
 else   player.sendMessage(msg);
break;
case 1:
player.sendMessage(""String_Node_Str"" + ab.name);
break;
case 2:
player.sendMessage(""String_Node_Str"" + ab.name + ""String_Node_Str"");
break;
}
}
 else {
player.sendMessage(""String_Node_Str"" + Method.format(ab.rentAmount));
}
}
 else {
DebugPrint(abilityname + ""String_Node_Str"" + ab.rentCost+ ""String_Node_Str"");
ItemStack item=new ItemStack(ab.rentCost,(int)ab.rentAmount);
if (CheckItems(player,item)) {
DebugPrint(""String_Node_Str"");
switch (AddPlayerNode(player,ab)) {
case 0:
ConsumeItems(player,item);
Map<String,String> replace=new HashMap<String,String>();
replace.putAll(ProcessMsgVars(player));
replace.putAll(ProcessMsgVars(ab));
String msg=ProcessMsg(ab.rentGainedMsg,replace);
if (ab.broadcast) getServer().broadcastMessage(msg);
 else player.sendMessage(msg);
break;
case 1:
player.sendMessage(""String_Node_Str"" + ab.name);
break;
case 2:
player.sendMessage(""String_Node_Str"" + ab.name + ""String_Node_Str"");
break;
}
}
 else {
player.sendMessage(""String_Node_Str"" + ab.rentAmount + ""String_Node_Str""+ Material.getMaterial(ab.rentCost));
}
}
}
}
}
}","public void RentAbility(Player player,String abilityname){
  DebugPrint(""String_Node_Str"" + abilityname);
  for (  Ability ab : Abilities.keySet()) {
    DebugPrint(""String_Node_Str"" + abilityname + ""String_Node_Str""+ ab.name);
    if (ab.name.equalsIgnoreCase(abilityname)) {
      DebugPrint(abilityname + ""String_Node_Str"" + ab.rentCost);
      if (ab.rentCost >= 0) {
        if (ab.rentCost == 0) {
          DebugPrint(abilityname + ""String_Node_Str"");
          if (Method.getAccount(player.getName()).hasEnough(ab.rentAmount)) {
            DebugPrint(""String_Node_Str"");
switch (AddPlayerNode(player,ab)) {
case 0:
              Method.getAccount(player.getName()).subtract(ab.rentAmount);
            RentedAbilities.add(new PurchasedAbility(player.getName(),ab));
          Map<String,String> replace=new HashMap<String,String>();
        replace.putAll(ProcessMsgVars(player));
      replace.putAll(ProcessMsgVars(ab));
    String msg=ProcessMsg(ab.rentGainedMsg,replace);
  if (ab.broadcast)   getServer().broadcastMessage(msg);
 else   player.sendMessage(msg);
break;
case 1:
player.sendMessage(""String_Node_Str"" + ab.name);
break;
case 2:
player.sendMessage(""String_Node_Str"" + ab.name + ""String_Node_Str"");
break;
}
}
 else {
player.sendMessage(""String_Node_Str"" + Method.format(ab.rentAmount));
}
}
 else {
DebugPrint(abilityname + ""String_Node_Str"" + ab.rentCost+ ""String_Node_Str"");
ItemStack item=new ItemStack(ab.rentCost,(int)ab.rentAmount);
if (CheckItems(player,item)) {
DebugPrint(""String_Node_Str"");
switch (AddPlayerNode(player,ab)) {
case 0:
ConsumeItems(player,item);
Map<String,String> replace=new HashMap<String,String>();
replace.putAll(ProcessMsgVars(player));
replace.putAll(ProcessMsgVars(ab));
String msg=ProcessMsg(ab.rentGainedMsg,replace);
if (ab.broadcast) getServer().broadcastMessage(msg);
 else player.sendMessage(msg);
break;
case 1:
player.sendMessage(""String_Node_Str"" + ab.name);
break;
case 2:
player.sendMessage(""String_Node_Str"" + ab.name + ""String_Node_Str"");
break;
}
}
 else {
player.sendMessage(""String_Node_Str"" + ab.rentAmount + ""String_Node_Str""+ Material.getMaterial(ab.rentCost));
}
}
}
}
}
saveRent();
}"
83585,"public void onDisable(){
  savePlaytime();
  saveRent();
  permissionHandler=null;
  Ranks.clear();
  Abilities.clear();
  StartTime.clear();
  PlayTime.clear();
  RentedAbilities.clear();
  RentedRanks.clear();
  getServer().getScheduler().cancelTasks(this);
  log.info(""String_Node_Str"");
}","public void onDisable(){
  getServer().getScheduler().cancelTasks(this);
  savePlaytime();
  saveRent();
  permissionHandler=null;
  Ranks.clear();
  Abilities.clear();
  StartTime.clear();
  PlayTime.clear();
  RentedAbilities.clear();
  RentedRanks.clear();
  log.info(""String_Node_Str"");
}"
83586,"public void RentRank(Player player,String rankname){
  DebugPrint(""String_Node_Str"" + rankname);
  for (  Rank r : Ranks.keySet()) {
    DebugPrint(""String_Node_Str"" + rankname + ""String_Node_Str""+ r.name);
    if (r.name.equalsIgnoreCase(rankname)) {
      DebugPrint(rankname + ""String_Node_Str"" + r.rentCost);
      if (r.rentCost >= 0) {
        if (r.rentCost == 0) {
          DebugPrint(rankname + ""String_Node_Str"");
          if (Method.getAccount(player.getName()).hasEnough(r.rentAmount)) {
            DebugPrint(""String_Node_Str"");
switch (PromotePlayer(player,r)) {
case 0:
              Method.getAccount(player.getName()).subtract(r.rentAmount);
            RentedRanks.add(new PurchasedRank(player.getName(),r));
          Map<String,String> replace=new HashMap<String,String>();
        replace.putAll(ProcessMsgVars(player));
      replace.putAll(ProcessMsgVars(r));
    String msg=ProcessMsg(r.rentGainedMsg,replace);
  if (r.broadcast)   getServer().broadcastMessage(msg);
 else   player.sendMessage(msg);
break;
case 1:
player.sendMessage(""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str""+ r.name);
break;
case 2:
player.sendMessage(""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str""+ r.name+ ""String_Node_Str"");
break;
}
}
 else {
player.sendMessage(""String_Node_Str"" + Method.format(r.rentAmount));
}
}
 else {
DebugPrint(rankname + ""String_Node_Str"" + r.rentCost+ ""String_Node_Str"");
ItemStack item=new ItemStack(r.rentCost,(int)r.rentAmount);
if (CheckItems(player,item)) {
DebugPrint(""String_Node_Str"");
switch (PromotePlayer(player,r)) {
case 0:
ConsumeItems(player,item);
Map<String,String> replace=new HashMap<String,String>();
replace.putAll(ProcessMsgVars(player));
replace.putAll(ProcessMsgVars(r));
String msg=ProcessMsg(r.rentGainedMsg,replace);
if (r.broadcast) getServer().broadcastMessage(msg);
 else player.sendMessage(msg);
break;
case 1:
player.sendMessage(""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str""+ r.name);
break;
case 2:
player.sendMessage(""String_Node_Str"" + r.GetGroup() + ""String_Node_Str""+ r.name+ ""String_Node_Str"");
break;
}
}
 else {
player.sendMessage(""String_Node_Str"" + r.rentAmount + ""String_Node_Str""+ Material.getMaterial(r.rentCost));
}
}
}
}
}
}","public void RentRank(Player player,String rankname){
  DebugPrint(""String_Node_Str"" + rankname);
  for (  Rank r : Ranks.keySet()) {
    DebugPrint(""String_Node_Str"" + rankname + ""String_Node_Str""+ r.name);
    if (r.name.equalsIgnoreCase(rankname)) {
      DebugPrint(rankname + ""String_Node_Str"" + r.rentCost);
      if (r.rentCost >= 0) {
        if (r.rentCost == 0) {
          DebugPrint(rankname + ""String_Node_Str"");
          if (Method.getAccount(player.getName()).hasEnough(r.rentAmount)) {
            DebugPrint(""String_Node_Str"");
switch (PromotePlayer(player,r)) {
case 0:
              Method.getAccount(player.getName()).subtract(r.rentAmount);
            RentedRanks.add(new PurchasedRank(player.getName(),r));
          Map<String,String> replace=new HashMap<String,String>();
        replace.putAll(ProcessMsgVars(player));
      replace.putAll(ProcessMsgVars(r));
    String msg=ProcessMsg(r.rentGainedMsg,replace);
  if (r.broadcast)   getServer().broadcastMessage(msg);
 else   player.sendMessage(msg);
break;
case 1:
player.sendMessage(""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str""+ r.name);
break;
case 2:
player.sendMessage(""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str""+ r.name+ ""String_Node_Str"");
break;
}
}
 else {
player.sendMessage(""String_Node_Str"" + Method.format(r.rentAmount));
}
}
 else {
DebugPrint(rankname + ""String_Node_Str"" + r.rentCost+ ""String_Node_Str"");
ItemStack item=new ItemStack(r.rentCost,(int)r.rentAmount);
if (CheckItems(player,item)) {
DebugPrint(""String_Node_Str"");
switch (PromotePlayer(player,r)) {
case 0:
ConsumeItems(player,item);
Map<String,String> replace=new HashMap<String,String>();
replace.putAll(ProcessMsgVars(player));
replace.putAll(ProcessMsgVars(r));
String msg=ProcessMsg(r.rentGainedMsg,replace);
if (r.broadcast) getServer().broadcastMessage(msg);
 else player.sendMessage(msg);
break;
case 1:
player.sendMessage(""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str""+ r.name);
break;
case 2:
player.sendMessage(""String_Node_Str"" + r.GetGroup() + ""String_Node_Str""+ r.name+ ""String_Node_Str"");
break;
}
}
 else {
player.sendMessage(""String_Node_Str"" + r.rentAmount + ""String_Node_Str""+ Material.getMaterial(r.rentCost));
}
}
}
}
}
saveRent();
}"
83587,"@Override public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String[] args){
  try {
    Player player=null;
    if (sender instanceof Player) {
      player=(Player)sender;
      if (!perms.HasPermission(player,""String_Node_Str"" + cmd.getName())) {
        if (sender instanceof Player)         sender.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String playername=""String_Node_Str"";
      if (sender instanceof Player)       playername=player.getDisplayName();
      if (args.length > 0)       playername=args[0];
      for (      String p : PlayTime.keySet()) {
        if (p.equalsIgnoreCase(playername)) {
          if (sender instanceof Player)           player.sendMessage(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
 else           log.info(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
          return true;
        }
      }
      for (      String p : StartTime.keySet()) {
        if (p.equalsIgnoreCase(playername)) {
          sender.sendMessage(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
          return true;
        }
      }
      File path=new File(mainDirectory + File.separator + ""String_Node_Str""+ File.separator+ playername);
      if (path.exists()) {
        loadPlaytime(playername);
        sender.sendMessage(playername + ""String_Node_Str"" + Mills2Time(GetPlaytime(playername)));
      }
      sender.sendMessage(playername + ""String_Node_Str"");
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + CheckRanks(getServer().getOnlinePlayers()) + ""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String rankname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + rankname);
      BuyRank(player,rankname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String rankname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + rankname);
      RentRank(player,rankname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String sCmd=""String_Node_Str"";
      int iPage=-1;
      if (args.length > 0)       if (!isParsableToInt(args[0]))       sCmd=args[0];
 else       iPage=Integer.parseInt(args[0]);
      if ((args.length > 1) && (isParsableToInt(args[1])))       iPage=Integer.parseInt(args[1]);
      int perPage=5;
      int curItem=-1;
      int startItem=((iPage - 1) * perPage);
      sender.sendMessage(""String_Node_Str"");
      for (      Rank r : Ranks.keySet()) {
        if (hideUnavaible)         if (!perms.inGroup(player,r.GetOldGroup().getWorld(),r.GetOldGroup().getName()) && !r.GetOldGroup().getName().equals(""String_Node_Str"")) {
          DebugPrint(""String_Node_Str"" + r.name + ""String_Node_Str""+ player.getName());
          continue;
        }
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.time <= 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.cost < 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.rentCost < 0)         continue;
        curItem+=1;
        if (iPage >= 0) {
          if (curItem <= startItem)           continue;
          if (curItem > iPage * perPage)           continue;
        }
        String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
        if (r.time > 0)         msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
        if (r.cost > 0)         msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
        if (r.cost == 0)         msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
        if (r.rentCost > 0)         msg+=""String_Node_Str"" + r.rentAmount + ""String_Node_Str""+ Material.getMaterial(r.rentCost)+ ""String_Node_Str"";
        if (r.rentCost == 0)         msg+=""String_Node_Str"" + Method.format(r.rentAmount) + ""String_Node_Str"";
        if (r.GetOldGroup() != null)         msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
        sender.sendMessage(msg);
        if (r.desc != ""String_Node_Str"")         sender.sendMessage(""String_Node_Str"" + r.desc);
      }
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String abilityname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + abilityname);
      BuyAbility(player,abilityname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String abilityname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + abilityname);
      RentAbility(player,abilityname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String sCmd=""String_Node_Str"";
      int iPage=-1;
      if (args.length > 0)       if (!isParsableToInt(args[0]))       sCmd=args[0];
 else       iPage=Integer.parseInt(args[0]);
      if ((args.length > 1) && (isParsableToInt(args[1])))       iPage=Integer.parseInt(args[1]);
      int perPage=5;
      int curItem=-1;
      int startItem=((iPage - 1) * perPage);
      String catFilter=""String_Node_Str"";
      HashSet<String> cats=new HashSet<String>();
      for (      Ability ab : Abilities.keySet()) {
        for (        String cat : ab.Categories) {
          cats.add(cat);
          if (sCmd.equalsIgnoreCase(cat))           catFilter=cat;
        }
      }
      if (sCmd.equalsIgnoreCase(""String_Node_Str"")) {
        HashSet<String> catlist=new HashSet<String>();
        for (        String cat : cats) {
          catlist.add(""String_Node_Str"" + cat + ""String_Node_Str"");
        }
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"" + catlist.toString());
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
      sender.sendMessage(""String_Node_Str"");
      for (      Ability ab : Abilities.keySet()) {
        if (hideUnavaible)         if (!perms.HasPermission(player,ab.permission,player.getWorld().getName())) {
          DebugPrint(""String_Node_Str"" + ab.name + ""String_Node_Str""+ player.getName());
          continue;
        }
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.time <= 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.cost < 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.rentCost < 0)         continue;
        if (catFilter != ""String_Node_Str"")         if (!ab.Categories.contains(catFilter))         continue;
        curItem+=1;
        if (iPage >= 0) {
          if (curItem <= startItem)           continue;
          if (curItem > iPage * perPage)           continue;
        }
        String msg=""String_Node_Str"" + ab.name + ""String_Node_Str"";
        if (ab.time > 0)         msg+=""String_Node_Str"" + Mills2Time(ab.time) + ""String_Node_Str"";
        if (ab.cost > 0)         msg+=""String_Node_Str"" + ab.amount + ""String_Node_Str""+ Material.getMaterial(ab.cost)+ ""String_Node_Str"";
        if (ab.cost == 0)         msg+=""String_Node_Str"" + Method.format(ab.amount) + ""String_Node_Str"";
        if (ab.rentCost > 0)         msg+=""String_Node_Str"" + ab.rentAmount + ""String_Node_Str""+ Material.getMaterial(ab.rentCost)+ ""String_Node_Str"";
        if (ab.rentCost == 0)         msg+=""String_Node_Str"" + Method.format(ab.rentAmount) + ""String_Node_Str"";
        sender.sendMessage(msg);
        if (ab.desc != ""String_Node_Str"")         sender.sendMessage(""String_Node_Str"" + ab.desc);
        msg=""String_Node_Str"";
        HashSet<String> catlist=new HashSet<String>();
        for (        String cat : ab.Categories) {
          catlist.add(""String_Node_Str"" + cat + ""String_Node_Str"");
        }
        sender.sendMessage(""String_Node_Str"" + catlist.toString());
      }
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 1) {
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"" + this.getDescription().getVersion());
        sender.sendMessage(""String_Node_Str"" + this.debug);
        sender.sendMessage(""String_Node_Str"" + this.permissions);
        sender.sendMessage(""String_Node_Str"" + this.hideUnavaible);
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        Ranks.clear();
        Ranks=new HashMap<Rank,Long>();
        loadConfig();
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        String sCmd=""String_Node_Str"";
        if (args.length > 1)         sCmd=args[1];
        sender.sendMessage(""String_Node_Str"");
        for (        Rank r : Ranks.keySet()) {
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.time <= 0)           continue;
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.cost < 0)           continue;
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.rentCost < 0)           continue;
          String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
          if (r.time > 0)           msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
          if (r.cost > 0)           msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
          if (r.cost == 0)           msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
          msg+=""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str"";
          if (r.GetOldGroup() != null)           msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
          sender.sendMessage(msg);
        }
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length < 2) {
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
        sender.sendMessage(""String_Node_Str"");
        for (        Rank r : Ranks.keySet()) {
          if (r.name.equalsIgnoreCase(args[1])) {
            String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
            if (r.time > 0)             msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
            if (r.cost > 0)             msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
            if (r.cost == 0)             msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
            msg+=""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str"";
            if (r.GetOldGroup() != null)             msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
            sender.sendMessage(msg);
          }
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length < 3) {
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (args[2].equalsIgnoreCase(""String_Node_Str""))           debug=true;
 else           debug=false;
          sender.sendMessage(""String_Node_Str"");
          saveConfig();
        }
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        for (        Ability ab : Abilities.keySet()) {
          if (ab.name.equalsIgnoreCase(args[1])) {
            for (            String node : ab.Nodes) {
              sender.sendMessage(""String_Node_Str"" + node);
            }
          }
        }
        return true;
      }
    }
  }
 catch (  Exception e) {
    Map<String,String> ErrorInfo=new LinkedHashMap<String,String>();
    ErrorInfo.put(""String_Node_Str"",""String_Node_Str"");
    ErrorInfo.put(""String_Node_Str"",cmd.getName());
    ErrorInfo.put(""String_Node_Str"",commandLabel);
    ;
    ErrorInfo.put(""String_Node_Str"",Integer.toString(args.length));
    ErrorInfo.put(""String_Node_Str"",arrayToString(args,""String_Node_Str""));
    ErrorInfo.put(""String_Node_Str"",StracktraceToString(e));
    ErrorLog(ErrorInfo);
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String[] args){
  try {
    Player player=null;
    if (sender instanceof Player) {
      player=(Player)sender;
      if (!perms.HasPermission(player,""String_Node_Str"" + cmd.getName())) {
        if (sender instanceof Player)         sender.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String playername=""String_Node_Str"";
      if (sender instanceof Player)       playername=player.getDisplayName();
      if (args.length > 0)       playername=args[0];
      for (      String p : PlayTime.keySet()) {
        if (p.equalsIgnoreCase(playername)) {
          if (sender instanceof Player)           player.sendMessage(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
 else           log.info(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
          return true;
        }
      }
      for (      String p : StartTime.keySet()) {
        if (p.equalsIgnoreCase(playername)) {
          sender.sendMessage(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
          return true;
        }
      }
      File path=new File(mainDirectory + File.separator + ""String_Node_Str""+ File.separator+ playername);
      if (path.exists()) {
        loadPlaytime(playername);
        sender.sendMessage(playername + ""String_Node_Str"" + Mills2Time(GetPlaytime(playername)));
      }
      sender.sendMessage(playername + ""String_Node_Str"");
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + CheckRanks(getServer().getOnlinePlayers()) + ""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String rankname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + rankname);
      BuyRank(player,rankname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String rankname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + rankname);
      RentRank(player,rankname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String sCmd=""String_Node_Str"";
      int iPage=-1;
      if (args.length > 0)       if (!isParsableToInt(args[0]))       sCmd=args[0];
 else       iPage=Integer.parseInt(args[0]);
      if ((args.length > 1) && (isParsableToInt(args[1])))       iPage=Integer.parseInt(args[1]);
      int perPage=5;
      int curItem=-1;
      int startItem=((iPage - 1) * perPage);
      sender.sendMessage(""String_Node_Str"");
      for (      Rank r : Ranks.keySet()) {
        if (hideUnavaible)         if (!perms.inGroup(player,r.GetOldGroup().getWorld(),r.GetOldGroup().getName()) && !r.GetOldGroup().getName().equals(""String_Node_Str"")) {
          DebugPrint(""String_Node_Str"" + r.name + ""String_Node_Str""+ player.getName());
          continue;
        }
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.time <= 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.cost < 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.rentCost < 0)         continue;
        curItem+=1;
        if (iPage >= 0) {
          if (curItem <= startItem)           continue;
          if (curItem > iPage * perPage)           continue;
        }
        String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
        if (r.time > 0)         msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
        if (r.cost > 0)         msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
        if (r.cost == 0)         msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
        if (r.rentCost > 0)         msg+=""String_Node_Str"" + r.rentAmount + ""String_Node_Str""+ Material.getMaterial(r.rentCost)+ ""String_Node_Str"";
        if (r.rentCost == 0)         msg+=""String_Node_Str"" + Method.format(r.rentAmount) + ""String_Node_Str"";
        if (r.GetOldGroup() != null)         msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
        sender.sendMessage(msg);
        if (r.desc != ""String_Node_Str"")         sender.sendMessage(""String_Node_Str"" + r.desc);
      }
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String abilityname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + abilityname);
      BuyAbility(player,abilityname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String abilityname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + abilityname);
      RentAbility(player,abilityname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String sCmd=""String_Node_Str"";
      int iPage=-1;
      if (args.length > 0)       if (!isParsableToInt(args[0]))       sCmd=args[0];
 else       iPage=Integer.parseInt(args[0]);
      if ((args.length > 1) && (isParsableToInt(args[1])))       iPage=Integer.parseInt(args[1]);
      int perPage=5;
      int curItem=-1;
      int startItem=((iPage - 1) * perPage);
      String catFilter=""String_Node_Str"";
      HashSet<String> cats=new HashSet<String>();
      for (      Ability ab : Abilities.keySet()) {
        for (        String cat : ab.Categories) {
          cats.add(cat);
          if (sCmd.equalsIgnoreCase(cat))           catFilter=cat;
        }
      }
      if (sCmd.equalsIgnoreCase(""String_Node_Str"")) {
        HashSet<String> catlist=new HashSet<String>();
        for (        String cat : cats) {
          catlist.add(""String_Node_Str"" + cat + ""String_Node_Str"");
        }
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"" + catlist.toString());
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
      sender.sendMessage(""String_Node_Str"");
      for (      Ability ab : Abilities.keySet()) {
        if (hideUnavaible)         if (!perms.HasPermission(player,ab.permission,player.getWorld().getName())) {
          DebugPrint(""String_Node_Str"" + ab.name + ""String_Node_Str""+ player.getName());
          continue;
        }
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.time <= 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.cost < 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.rentCost < 0)         continue;
        if (catFilter != ""String_Node_Str"")         if (!ab.Categories.contains(catFilter))         continue;
        curItem+=1;
        if (iPage >= 0) {
          if (curItem <= startItem)           continue;
          if (curItem > iPage * perPage)           continue;
        }
        String msg=""String_Node_Str"" + ab.name + ""String_Node_Str"";
        if (ab.time > 0)         msg+=""String_Node_Str"" + Mills2Time(ab.time) + ""String_Node_Str"";
        if (ab.cost > 0)         msg+=""String_Node_Str"" + ab.amount + ""String_Node_Str""+ Material.getMaterial(ab.cost)+ ""String_Node_Str"";
        if (ab.cost == 0)         msg+=""String_Node_Str"" + Method.format(ab.amount) + ""String_Node_Str"";
        if (ab.rentCost > 0)         msg+=""String_Node_Str"" + ab.rentAmount + ""String_Node_Str""+ Material.getMaterial(ab.rentCost)+ ""String_Node_Str"";
        if (ab.rentCost == 0)         msg+=""String_Node_Str"" + Method.format(ab.rentAmount) + ""String_Node_Str"";
        sender.sendMessage(msg);
        if (ab.desc != ""String_Node_Str"")         sender.sendMessage(""String_Node_Str"" + ab.desc);
        msg=""String_Node_Str"";
        HashSet<String> catlist=new HashSet<String>();
        for (        String cat : ab.Categories) {
          catlist.add(""String_Node_Str"" + cat + ""String_Node_Str"");
        }
        sender.sendMessage(""String_Node_Str"" + catlist.toString());
      }
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 1) {
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"" + this.getDescription().getVersion());
        sender.sendMessage(""String_Node_Str"" + this.debug);
        sender.sendMessage(""String_Node_Str"" + this.permissions);
        sender.sendMessage(""String_Node_Str"" + this.hideUnavaible);
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        Ranks.clear();
        Ranks=new HashMap<Rank,Long>();
        loadConfig();
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        String sCmd=""String_Node_Str"";
        if (args.length > 1)         sCmd=args[1];
        sender.sendMessage(""String_Node_Str"");
        for (        Rank r : Ranks.keySet()) {
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.time <= 0)           continue;
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.cost < 0)           continue;
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.rentCost < 0)           continue;
          String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
          if (r.time > 0)           msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
          if (r.cost > 0)           msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
          if (r.cost == 0)           msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
          msg+=""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str"";
          if (r.GetOldGroup() != null)           msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
          sender.sendMessage(msg);
        }
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length < 2) {
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
        sender.sendMessage(""String_Node_Str"");
        for (        Rank r : Ranks.keySet()) {
          if (r.name.equalsIgnoreCase(args[1])) {
            String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
            if (r.time > 0)             msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
            if (r.cost > 0)             msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
            if (r.cost == 0)             msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
            msg+=""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str"";
            if (r.GetOldGroup() != null)             msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
            sender.sendMessage(msg);
          }
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length < 3) {
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (args[2].equalsIgnoreCase(""String_Node_Str""))           debug=true;
 else           debug=false;
          sender.sendMessage(""String_Node_Str"");
          saveConfig();
        }
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (args[2].equalsIgnoreCase(""String_Node_Str"")) {
            sender.sendMessage(""String_Node_Str"");
            for (            PurchasedAbility ra : RentedAbilities) {
              sender.sendMessage(""String_Node_Str"" + ra.playername + ""String_Node_Str""+ ra.ability.name+ ""String_Node_Str""+ Mills2Time(ra.durationTicks * 50));
            }
          }
        }
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        for (        Ability ab : Abilities.keySet()) {
          if (ab.name.equalsIgnoreCase(args[1])) {
            for (            String node : ab.Nodes) {
              sender.sendMessage(""String_Node_Str"" + node);
            }
          }
        }
        return true;
      }
    }
  }
 catch (  Exception e) {
    Map<String,String> ErrorInfo=new LinkedHashMap<String,String>();
    ErrorInfo.put(""String_Node_Str"",""String_Node_Str"");
    ErrorInfo.put(""String_Node_Str"",cmd.getName());
    ErrorInfo.put(""String_Node_Str"",commandLabel);
    ;
    ErrorInfo.put(""String_Node_Str"",Integer.toString(args.length));
    ErrorInfo.put(""String_Node_Str"",arrayToString(args,""String_Node_Str""));
    ErrorInfo.put(""String_Node_Str"",StracktraceToString(e));
    ErrorLog(ErrorInfo);
  }
  return false;
}"
83588,"@SuppressWarnings(""String_Node_Str"") public void loadRent(){
  File path=new File(mainDirectory + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (path.exists()) {
    try {
      ObjectInputStream obj=new ObjectInputStream(new FileInputStream(path.getPath()));
      RentedRanks=(List<PurchasedRank>)obj.readObject();
    }
 catch (    FileNotFoundException e) {
      ThrowSimpleError(e);
    }
catch (    IOException e) {
      ThrowSimpleError(e);
    }
catch (    ClassNotFoundException e) {
      ThrowSimpleError(e);
    }
  }
  path=new File(mainDirectory + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (path.exists()) {
    try {
      ObjectInputStream obj=new ObjectInputStream(new FileInputStream(path.getPath()));
      RentedAbilities=(List<PurchasedAbility>)obj.readObject();
    }
 catch (    FileNotFoundException e) {
      ThrowSimpleError(e);
    }
catch (    IOException e) {
      ThrowSimpleError(e);
    }
catch (    ClassNotFoundException e) {
      ThrowSimpleError(e);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void loadRent(){
  File path=new File(mainDirectory + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (path.exists()) {
    try {
      ObjectInputStream obj=new ObjectInputStream(new FileInputStream(path.getPath()));
      RentedRanks=(List<PurchasedRank>)obj.readObject();
    }
 catch (    FileNotFoundException e) {
      ThrowSimpleError(e);
    }
catch (    IOException e) {
      ThrowSimpleError(e);
    }
catch (    ClassNotFoundException e) {
      ThrowSimpleError(e);
    }
  }
  path=new File(mainDirectory + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (path.exists()) {
    DebugPrint(""String_Node_Str"");
    try {
      ObjectInputStream obj=new ObjectInputStream(new FileInputStream(path.getPath()));
      RentedAbilities=(List<PurchasedAbility>)obj.readObject();
    }
 catch (    FileNotFoundException e) {
      ThrowSimpleError(e);
    }
catch (    IOException e) {
      ThrowSimpleError(e);
    }
catch (    ClassNotFoundException e) {
      ThrowSimpleError(e);
    }
  }
}"
83589,"@Override public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String[] args){
  try {
    Player player=null;
    if (sender instanceof Player) {
      player=(Player)sender;
      if (!perms.HasPermission(player,""String_Node_Str"" + cmd.getName())) {
        if (sender instanceof Player)         sender.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String playername=""String_Node_Str"";
      if (sender instanceof Player)       playername=player.getDisplayName();
      if (args.length > 0)       playername=args[0];
      for (      String p : PlayTime.keySet()) {
        if (p.equalsIgnoreCase(playername)) {
          if (sender instanceof Player)           player.sendMessage(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
 else           log.info(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
          return true;
        }
      }
      for (      String p : StartTime.keySet()) {
        if (p.equalsIgnoreCase(playername)) {
          sender.sendMessage(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
          return true;
        }
      }
      File path=new File(mainDirectory + File.separator + ""String_Node_Str""+ File.separator+ playername);
      if (path.exists()) {
        loadPlaytime(playername);
        sender.sendMessage(playername + ""String_Node_Str"" + Mills2Time(GetPlaytime(playername)));
      }
      sender.sendMessage(playername + ""String_Node_Str"");
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + CheckRanks(getServer().getOnlinePlayers()) + ""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String rankname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + rankname);
      BuyRank(player,rankname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String rankname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + rankname);
      RentRank(player,rankname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String sCmd=""String_Node_Str"";
      int iPage=-1;
      if (args.length > 0)       if (!isParsableToInt(args[0]))       sCmd=args[0];
 else       iPage=Integer.parseInt(args[0]);
      if ((args.length > 1) && (isParsableToInt(args[1])))       iPage=Integer.parseInt(args[1]);
      int perPage=5;
      int curItem=-1;
      int startItem=((iPage - 1) * perPage);
      sender.sendMessage(""String_Node_Str"");
      for (      Rank r : Ranks.keySet()) {
        if (hideUnavaible)         if (!perms.inGroup(player,r.GetOldGroup().getWorld(),r.GetOldGroup().getName()) && !r.GetOldGroup().getName().equals(""String_Node_Str"")) {
          DebugPrint(""String_Node_Str"" + r.name + ""String_Node_Str""+ player.getName());
          continue;
        }
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.time <= 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.cost < 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.rentCost < 0)         continue;
        curItem+=1;
        if (iPage >= 0) {
          if (curItem <= startItem)           continue;
          if (curItem > iPage * perPage)           continue;
        }
        String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
        if (r.time > 0)         msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
        if (r.cost > 0)         msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
        if (r.cost == 0)         msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
        if (r.rentCost > 0)         msg+=""String_Node_Str"" + r.rentAmount + ""String_Node_Str""+ Material.getMaterial(r.rentCost)+ ""String_Node_Str"";
        if (r.rentCost == 0)         msg+=""String_Node_Str"" + Method.format(r.rentAmount) + ""String_Node_Str"";
        if (r.GetOldGroup() != null)         msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
        sender.sendMessage(msg);
        if (r.desc != ""String_Node_Str"")         sender.sendMessage(""String_Node_Str"" + r.desc);
      }
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String abilityname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + abilityname);
      BuyAbility(player,abilityname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String abilityname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + abilityname);
      RentAbility(player,abilityname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String sCmd=""String_Node_Str"";
      int iPage=-1;
      if (args.length > 0)       if (!isParsableToInt(args[0]))       sCmd=args[0];
 else       iPage=Integer.parseInt(args[0]);
      if ((args.length > 1) && (isParsableToInt(args[1])))       iPage=Integer.parseInt(args[1]);
      int perPage=5;
      int curItem=-1;
      int startItem=((iPage - 1) * perPage);
      String catFilter=""String_Node_Str"";
      HashSet<String> cats=new HashSet<String>();
      for (      Ability ab : Abilities.keySet()) {
        for (        String cat : ab.Categories) {
          cats.add(cat);
          if (sCmd.equalsIgnoreCase(cat))           catFilter=cat;
        }
      }
      if (sCmd.equalsIgnoreCase(""String_Node_Str"")) {
        HashSet<String> catlist=new HashSet<String>();
        for (        String cat : cats) {
          catlist.add(""String_Node_Str"" + cat + ""String_Node_Str"");
        }
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"" + catlist.toString());
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
      sender.sendMessage(""String_Node_Str"");
      for (      Ability ab : Abilities.keySet()) {
        if (hideUnavaible)         if (!perms.HasPermission(player,ab.permission,player.getWorld().getName())) {
          DebugPrint(""String_Node_Str"" + ab.name + ""String_Node_Str""+ player.getName());
          continue;
        }
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.time <= 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.cost < 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.rentCost < 0)         continue;
        if (catFilter != ""String_Node_Str"")         if (!ab.Categories.contains(catFilter))         continue;
        curItem+=1;
        if (iPage >= 0) {
          if (curItem <= startItem)           continue;
          if (curItem > iPage * perPage)           continue;
        }
        String msg=""String_Node_Str"" + ab.name + ""String_Node_Str"";
        if (ab.time > 0)         msg+=""String_Node_Str"" + Mills2Time(ab.time) + ""String_Node_Str"";
        if (ab.cost > 0)         msg+=""String_Node_Str"" + ab.amount + ""String_Node_Str""+ Material.getMaterial(ab.cost)+ ""String_Node_Str"";
        if (ab.cost == 0)         msg+=""String_Node_Str"" + Method.format(ab.amount) + ""String_Node_Str"";
        if (ab.rentCost > 0)         msg+=""String_Node_Str"" + ab.rentAmount + ""String_Node_Str""+ Material.getMaterial(ab.rentCost)+ ""String_Node_Str"";
        if (ab.rentCost == 0)         msg+=""String_Node_Str"" + Method.format(ab.rentAmount) + ""String_Node_Str"";
        sender.sendMessage(msg);
        if (ab.desc != ""String_Node_Str"")         sender.sendMessage(""String_Node_Str"" + ab.desc);
        msg=""String_Node_Str"";
        HashSet<String> catlist=new HashSet<String>();
        for (        String cat : cats) {
          catlist.add(""String_Node_Str"" + cat + ""String_Node_Str"");
        }
        sender.sendMessage(""String_Node_Str"" + catlist.toString());
      }
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 1) {
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"" + this.getDescription().getVersion());
        sender.sendMessage(""String_Node_Str"" + this.debug);
        sender.sendMessage(""String_Node_Str"" + this.permissions);
        sender.sendMessage(""String_Node_Str"" + this.hideUnavaible);
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        Ranks.clear();
        Ranks=new HashMap<Rank,Long>();
        loadConfig();
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        String sCmd=""String_Node_Str"";
        if (args.length > 1)         sCmd=args[1];
        sender.sendMessage(""String_Node_Str"");
        for (        Rank r : Ranks.keySet()) {
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.time <= 0)           continue;
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.cost < 0)           continue;
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.rentCost < 0)           continue;
          String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
          if (r.time > 0)           msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
          if (r.cost > 0)           msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
          if (r.cost == 0)           msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
          msg+=""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str"";
          if (r.GetOldGroup() != null)           msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
          sender.sendMessage(msg);
        }
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length < 2) {
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
        sender.sendMessage(""String_Node_Str"");
        for (        Rank r : Ranks.keySet()) {
          if (r.name.equalsIgnoreCase(args[1])) {
            String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
            if (r.time > 0)             msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
            if (r.cost > 0)             msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
            if (r.cost == 0)             msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
            msg+=""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str"";
            if (r.GetOldGroup() != null)             msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
            sender.sendMessage(msg);
          }
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length < 3) {
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (args[2].equalsIgnoreCase(""String_Node_Str""))           debug=true;
 else           debug=false;
          sender.sendMessage(""String_Node_Str"");
          saveConfig();
        }
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        Class<Rank> rClass=Rank.class;
        Field[] methods=rClass.getFields();
        for (        Field f : methods) {
          for (          Rank r : Ranks.keySet()) {
            try {
              DebugPrint(r.name + ""String_Node_Str"" + f.getName()+ ""String_Node_Str""+ f.get(r));
            }
 catch (            IllegalArgumentException e) {
              ThrowSimpleError(e);
            }
catch (            IllegalAccessException e) {
              ThrowSimpleError(e);
            }
          }
        }
        return true;
      }
    }
  }
 catch (  Exception e) {
    Map<String,String> ErrorInfo=new LinkedHashMap<String,String>();
    ErrorInfo.put(""String_Node_Str"",""String_Node_Str"");
    ErrorInfo.put(""String_Node_Str"",cmd.getName());
    ErrorInfo.put(""String_Node_Str"",commandLabel);
    ;
    ErrorInfo.put(""String_Node_Str"",Integer.toString(args.length));
    ErrorInfo.put(""String_Node_Str"",arrayToString(args,""String_Node_Str""));
    ErrorInfo.put(""String_Node_Str"",StracktraceToString(e));
    ErrorLog(ErrorInfo);
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command cmd,String commandLabel,String[] args){
  try {
    Player player=null;
    if (sender instanceof Player) {
      player=(Player)sender;
      if (!perms.HasPermission(player,""String_Node_Str"" + cmd.getName())) {
        if (sender instanceof Player)         sender.sendMessage(""String_Node_Str"");
        return true;
      }
    }
    if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String playername=""String_Node_Str"";
      if (sender instanceof Player)       playername=player.getDisplayName();
      if (args.length > 0)       playername=args[0];
      for (      String p : PlayTime.keySet()) {
        if (p.equalsIgnoreCase(playername)) {
          if (sender instanceof Player)           player.sendMessage(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
 else           log.info(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
          return true;
        }
      }
      for (      String p : StartTime.keySet()) {
        if (p.equalsIgnoreCase(playername)) {
          sender.sendMessage(p + ""String_Node_Str"" + Mills2Time(GetPlaytime(p)));
          return true;
        }
      }
      File path=new File(mainDirectory + File.separator + ""String_Node_Str""+ File.separator+ playername);
      if (path.exists()) {
        loadPlaytime(playername);
        sender.sendMessage(playername + ""String_Node_Str"" + Mills2Time(GetPlaytime(playername)));
      }
      sender.sendMessage(playername + ""String_Node_Str"");
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + CheckRanks(getServer().getOnlinePlayers()) + ""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String rankname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + rankname);
      BuyRank(player,rankname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String rankname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + rankname);
      RentRank(player,rankname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String sCmd=""String_Node_Str"";
      int iPage=-1;
      if (args.length > 0)       if (!isParsableToInt(args[0]))       sCmd=args[0];
 else       iPage=Integer.parseInt(args[0]);
      if ((args.length > 1) && (isParsableToInt(args[1])))       iPage=Integer.parseInt(args[1]);
      int perPage=5;
      int curItem=-1;
      int startItem=((iPage - 1) * perPage);
      sender.sendMessage(""String_Node_Str"");
      for (      Rank r : Ranks.keySet()) {
        if (hideUnavaible)         if (!perms.inGroup(player,r.GetOldGroup().getWorld(),r.GetOldGroup().getName()) && !r.GetOldGroup().getName().equals(""String_Node_Str"")) {
          DebugPrint(""String_Node_Str"" + r.name + ""String_Node_Str""+ player.getName());
          continue;
        }
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.time <= 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.cost < 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (r.rentCost < 0)         continue;
        curItem+=1;
        if (iPage >= 0) {
          if (curItem <= startItem)           continue;
          if (curItem > iPage * perPage)           continue;
        }
        String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
        if (r.time > 0)         msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
        if (r.cost > 0)         msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
        if (r.cost == 0)         msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
        if (r.rentCost > 0)         msg+=""String_Node_Str"" + r.rentAmount + ""String_Node_Str""+ Material.getMaterial(r.rentCost)+ ""String_Node_Str"";
        if (r.rentCost == 0)         msg+=""String_Node_Str"" + Method.format(r.rentAmount) + ""String_Node_Str"";
        if (r.GetOldGroup() != null)         msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
        sender.sendMessage(msg);
        if (r.desc != ""String_Node_Str"")         sender.sendMessage(""String_Node_Str"" + r.desc);
      }
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String abilityname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + abilityname);
      BuyAbility(player,abilityname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (!(sender instanceof Player)) {
        log.info(""String_Node_Str"");
        return false;
      }
      if (args.length < 1)       return false;
      String abilityname=args[0];
      DebugPrint(player.getName() + ""String_Node_Str"" + abilityname);
      RentAbility(player,abilityname);
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String sCmd=""String_Node_Str"";
      int iPage=-1;
      if (args.length > 0)       if (!isParsableToInt(args[0]))       sCmd=args[0];
 else       iPage=Integer.parseInt(args[0]);
      if ((args.length > 1) && (isParsableToInt(args[1])))       iPage=Integer.parseInt(args[1]);
      int perPage=5;
      int curItem=-1;
      int startItem=((iPage - 1) * perPage);
      String catFilter=""String_Node_Str"";
      HashSet<String> cats=new HashSet<String>();
      for (      Ability ab : Abilities.keySet()) {
        for (        String cat : ab.Categories) {
          cats.add(cat);
          if (sCmd.equalsIgnoreCase(cat))           catFilter=cat;
        }
      }
      if (sCmd.equalsIgnoreCase(""String_Node_Str"")) {
        HashSet<String> catlist=new HashSet<String>();
        for (        String cat : cats) {
          catlist.add(""String_Node_Str"" + cat + ""String_Node_Str"");
        }
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"" + catlist.toString());
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
      sender.sendMessage(""String_Node_Str"");
      for (      Ability ab : Abilities.keySet()) {
        if (hideUnavaible)         if (!perms.HasPermission(player,ab.permission,player.getWorld().getName())) {
          DebugPrint(""String_Node_Str"" + ab.name + ""String_Node_Str""+ player.getName());
          continue;
        }
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.time <= 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.cost < 0)         continue;
        if (sCmd.equalsIgnoreCase(""String_Node_Str""))         if (ab.rentCost < 0)         continue;
        if (catFilter != ""String_Node_Str"")         if (!ab.Categories.contains(catFilter))         continue;
        curItem+=1;
        if (iPage >= 0) {
          if (curItem <= startItem)           continue;
          if (curItem > iPage * perPage)           continue;
        }
        String msg=""String_Node_Str"" + ab.name + ""String_Node_Str"";
        if (ab.time > 0)         msg+=""String_Node_Str"" + Mills2Time(ab.time) + ""String_Node_Str"";
        if (ab.cost > 0)         msg+=""String_Node_Str"" + ab.amount + ""String_Node_Str""+ Material.getMaterial(ab.cost)+ ""String_Node_Str"";
        if (ab.cost == 0)         msg+=""String_Node_Str"" + Method.format(ab.amount) + ""String_Node_Str"";
        if (ab.rentCost > 0)         msg+=""String_Node_Str"" + ab.rentAmount + ""String_Node_Str""+ Material.getMaterial(ab.rentCost)+ ""String_Node_Str"";
        if (ab.rentCost == 0)         msg+=""String_Node_Str"" + Method.format(ab.rentAmount) + ""String_Node_Str"";
        sender.sendMessage(msg);
        if (ab.desc != ""String_Node_Str"")         sender.sendMessage(""String_Node_Str"" + ab.desc);
        msg=""String_Node_Str"";
        HashSet<String> catlist=new HashSet<String>();
        for (        String cat : ab.Categories) {
          catlist.add(""String_Node_Str"" + cat + ""String_Node_Str"");
        }
        sender.sendMessage(""String_Node_Str"" + catlist.toString());
      }
      sender.sendMessage(""String_Node_Str"");
      return true;
    }
 else     if (cmd.getName().equalsIgnoreCase(""String_Node_Str"")) {
      if (args.length < 1) {
        sender.sendMessage(""String_Node_Str"");
        sender.sendMessage(""String_Node_Str"" + this.getDescription().getVersion());
        sender.sendMessage(""String_Node_Str"" + this.debug);
        sender.sendMessage(""String_Node_Str"" + this.permissions);
        sender.sendMessage(""String_Node_Str"" + this.hideUnavaible);
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        Ranks.clear();
        Ranks=new HashMap<Rank,Long>();
        loadConfig();
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        String sCmd=""String_Node_Str"";
        if (args.length > 1)         sCmd=args[1];
        sender.sendMessage(""String_Node_Str"");
        for (        Rank r : Ranks.keySet()) {
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.time <= 0)           continue;
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.cost < 0)           continue;
          if (sCmd.equalsIgnoreCase(""String_Node_Str""))           if (r.rentCost < 0)           continue;
          String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
          if (r.time > 0)           msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
          if (r.cost > 0)           msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
          if (r.cost == 0)           msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
          msg+=""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str"";
          if (r.GetOldGroup() != null)           msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
          sender.sendMessage(msg);
        }
        sender.sendMessage(""String_Node_Str"");
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length < 2) {
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
        sender.sendMessage(""String_Node_Str"");
        for (        Rank r : Ranks.keySet()) {
          if (r.name.equalsIgnoreCase(args[1])) {
            String msg=""String_Node_Str"" + r.name + ""String_Node_Str"";
            if (r.time > 0)             msg+=""String_Node_Str"" + Mills2Time(r.time) + ""String_Node_Str"";
            if (r.cost > 0)             msg+=""String_Node_Str"" + r.amount + ""String_Node_Str""+ Material.getMaterial(r.cost)+ ""String_Node_Str"";
            if (r.cost == 0)             msg+=""String_Node_Str"" + Method.format(r.amount) + ""String_Node_Str"";
            msg+=""String_Node_Str"" + r.GetGroup().getName() + ""String_Node_Str"";
            if (r.GetOldGroup() != null)             msg+=""String_Node_Str"" + r.GetOldGroup().getName() + ""String_Node_Str"";
            sender.sendMessage(msg);
          }
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        if (args.length < 3) {
          sender.sendMessage(""String_Node_Str"");
          return true;
        }
        if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
          if (args[2].equalsIgnoreCase(""String_Node_Str""))           debug=true;
 else           debug=false;
          sender.sendMessage(""String_Node_Str"");
          saveConfig();
        }
        return true;
      }
 else       if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        Class<Rank> rClass=Rank.class;
        Field[] methods=rClass.getFields();
        for (        Field f : methods) {
          for (          Rank r : Ranks.keySet()) {
            try {
              DebugPrint(r.name + ""String_Node_Str"" + f.getName()+ ""String_Node_Str""+ f.get(r));
            }
 catch (            IllegalArgumentException e) {
              ThrowSimpleError(e);
            }
catch (            IllegalAccessException e) {
              ThrowSimpleError(e);
            }
          }
        }
        return true;
      }
    }
  }
 catch (  Exception e) {
    Map<String,String> ErrorInfo=new LinkedHashMap<String,String>();
    ErrorInfo.put(""String_Node_Str"",""String_Node_Str"");
    ErrorInfo.put(""String_Node_Str"",cmd.getName());
    ErrorInfo.put(""String_Node_Str"",commandLabel);
    ;
    ErrorInfo.put(""String_Node_Str"",Integer.toString(args.length));
    ErrorInfo.put(""String_Node_Str"",arrayToString(args,""String_Node_Str""));
    ErrorInfo.put(""String_Node_Str"",StracktraceToString(e));
    ErrorLog(ErrorInfo);
  }
  return false;
}"
83590,"public void onBlockFromTo(BlockFromToEvent event){
  Block sourceBlock=event.getBlock();
  Block targetBlock=event.getToBlock();
  if (plugin.two == true) {
    if (event.getBlock().getData() != 0x0) {
      return;
    }
    if ((sourceBlock.getType() == Material.LAVA || sourceBlock.getType() == Material.STATIONARY_LAVA)) {
      if (targetBlock.getType() == Material.LAVA || targetBlock.getType() == Material.STATIONARY_LAVA) {
        if (targetBlock.getData() != 0x0 && targetBlock.getData() != 0x8) {
          if (checkSpreadValidityTwo(targetBlock)) {
            event.getToBlock().setType(Material.LAVA);
          }
        }
      }
 else       if (targetBlock.getType() == Material.AIR) {
        if (checkSpreadValidityTwo(event.getToBlock())) {
          event.getToBlock().setType(Material.LAVA);
          event.getToBlock().setData((byte)0x0);
        }
      }
    }
  }
  if (plugin.three == true) {
    if (event.getBlock().getData() != 0x0) {
      return;
    }
    if ((sourceBlock.getType() == Material.LAVA || sourceBlock.getType() == Material.STATIONARY_LAVA)) {
      if (targetBlock.getType() == Material.LAVA || targetBlock.getType() == Material.STATIONARY_LAVA) {
        if (targetBlock.getData() != 0x0 && targetBlock.getData() != 0x8) {
          if (checkSpreadValidityThree(targetBlock)) {
            event.getToBlock().setType(Material.LAVA);
          }
        }
      }
 else       if (targetBlock.getType() == Material.AIR) {
        if (checkSpreadValidityThree(event.getToBlock())) {
          event.getToBlock().setType(Material.LAVA);
          event.getToBlock().setData((byte)0x0);
        }
      }
    }
  }
  if (plugin.other == true) {
    if (event.getBlock().getData() != 0x0) {
      return;
    }
    if ((sourceBlock.getType() == Material.LAVA || sourceBlock.getType() == Material.STATIONARY_LAVA)) {
      if (targetBlock.getType() == Material.LAVA || targetBlock.getType() == Material.STATIONARY_LAVA) {
        if (targetBlock.getData() != 0x0 && targetBlock.getData() != 0x8) {
          if (checkSpreadValidityOther(targetBlock)) {
            event.getToBlock().setType(Material.LAVA);
          }
        }
      }
 else       if (targetBlock.getType() == Material.AIR) {
        if (checkSpreadValidityOther(event.getToBlock())) {
          event.getToBlock().setType(Material.LAVA);
          event.getToBlock().setData((byte)0x0);
        }
      }
    }
  }
}","public void onBlockFromTo(BlockFromToEvent event){
  Player player=event.getPlayer();
  if (player.hasPermission(""String_Node_Str"")) {
    Block sourceBlock=event.getBlock();
    Block targetBlock=event.getToBlock();
    if (plugin.two == true) {
      if (event.getBlock().getData() != 0x0) {
        return;
      }
      if ((sourceBlock.getType() == Material.LAVA || sourceBlock.getType() == Material.STATIONARY_LAVA)) {
        if (targetBlock.getType() == Material.LAVA || targetBlock.getType() == Material.STATIONARY_LAVA) {
          if (targetBlock.getData() != 0x0 && targetBlock.getData() != 0x8) {
            if (checkSpreadValidityTwo(targetBlock)) {
              event.getToBlock().setType(Material.LAVA);
            }
          }
        }
 else         if (targetBlock.getType() == Material.AIR) {
          if (checkSpreadValidityTwo(event.getToBlock())) {
            event.getToBlock().setType(Material.LAVA);
            event.getToBlock().setData((byte)0x0);
          }
        }
      }
    }
    if (plugin.three == true) {
      if (event.getBlock().getData() != 0x0) {
        return;
      }
      if ((sourceBlock.getType() == Material.LAVA || sourceBlock.getType() == Material.STATIONARY_LAVA)) {
        if (targetBlock.getType() == Material.LAVA || targetBlock.getType() == Material.STATIONARY_LAVA) {
          if (targetBlock.getData() != 0x0 && targetBlock.getData() != 0x8) {
            if (checkSpreadValidityThree(targetBlock)) {
              event.getToBlock().setType(Material.LAVA);
            }
          }
        }
 else         if (targetBlock.getType() == Material.AIR) {
          if (checkSpreadValidityThree(event.getToBlock())) {
            event.getToBlock().setType(Material.LAVA);
            event.getToBlock().setData((byte)0x0);
          }
        }
      }
    }
    if (plugin.other == true) {
      if (event.getBlock().getData() != 0x0) {
        return;
      }
      if ((sourceBlock.getType() == Material.LAVA || sourceBlock.getType() == Material.STATIONARY_LAVA)) {
        if (targetBlock.getType() == Material.LAVA || targetBlock.getType() == Material.STATIONARY_LAVA) {
          if (targetBlock.getData() != 0x0 && targetBlock.getData() != 0x8) {
            if (checkSpreadValidityOther(targetBlock)) {
              event.getToBlock().setType(Material.LAVA);
            }
          }
        }
 else         if (targetBlock.getType() == Material.AIR) {
          if (checkSpreadValidityOther(event.getToBlock())) {
            event.getToBlock().setType(Material.LAVA);
            event.getToBlock().setData((byte)0x0);
          }
        }
      }
    }
  }
 else {
    player.sendMessage(""String_Node_Str"");
  }
}"
83591,"private boolean checkSpreadValidity(Block block){
  int n=0;
  if ((block.getRelative(BlockFace.EAST).getType() == Material.LAVA || block.getRelative(BlockFace.EAST).getType() == Material.STATIONARY_LAVA) && block.getRelative(BlockFace.EAST).getData() == 0x0) {
    n++;
  }
  if ((block.getRelative(BlockFace.WEST).getType() == Material.LAVA || block.getRelative(BlockFace.WEST).getType() == Material.STATIONARY_LAVA) && block.getRelative(BlockFace.WEST).getData() == 0x0) {
    n++;
  }
  if ((block.getRelative(BlockFace.NORTH).getType() == Material.LAVA || block.getRelative(BlockFace.NORTH).getType() == Material.STATIONARY_LAVA) && block.getRelative(BlockFace.NORTH).getData() == 0x0) {
    n++;
  }
  if ((block.getRelative(BlockFace.SOUTH).getType() == Material.LAVA || block.getRelative(BlockFace.SOUTH).getType() == Material.STATIONARY_LAVA) && block.getRelative(BlockFace.SOUTH).getData() == 0x0) {
    n++;
  }
  if (n >= 2) {
    return true;
  }
 else {
    return false;
  }
}","private boolean checkSpreadValidity(Block block){
  int n=0;
  if ((block.getRelative(BlockFace.EAST).getType() == Material.LAVA || block.getRelative(BlockFace.EAST).getType() == Material.STATIONARY_LAVA) && block.getRelative(BlockFace.EAST).getData() == 0x0) {
    n++;
  }
  if ((block.getRelative(BlockFace.WEST).getType() == Material.LAVA || block.getRelative(BlockFace.WEST).getType() == Material.STATIONARY_LAVA) && block.getRelative(BlockFace.WEST).getData() == 0x0) {
    n++;
  }
  if ((block.getRelative(BlockFace.NORTH).getType() == Material.LAVA || block.getRelative(BlockFace.NORTH).getType() == Material.STATIONARY_LAVA) && block.getRelative(BlockFace.NORTH).getData() == 0x0) {
    n++;
  }
  if ((block.getRelative(BlockFace.SOUTH).getType() == Material.LAVA || block.getRelative(BlockFace.SOUTH).getType() == Material.STATIONARY_LAVA) && block.getRelative(BlockFace.SOUTH).getData() == 0x0) {
    n++;
  }
  if (block.getRelative(BlockFace.DOWN).getType() == Material.AIR)   return false;
  if (n >= 2) {
    return true;
  }
 else {
    return false;
  }
}"
83592,"private void doCommandAnalyse() throws IOException {
  if (featureDir == null)   throw new RuntimeException(""String_Node_Str"");
  if (maxentModelFilePath == null)   throw new RuntimeException(""String_Node_Str"");
  if (outfilePath == null)   throw new RuntimeException(""String_Node_Str"");
  CSVEventListReader reader=this.getReader(TrainingSetType.ALL_TEST,false);
  GenericEvents events=reader.getEvents();
  try {
    LOG.info(""String_Node_Str"");
    ZipInputStream zis=new ZipInputStream(new FileInputStream(maxentModelFilePath));
    ZipEntry ze;
    while ((ze=zis.getNextEntry()) != null) {
      if (ze.getName().endsWith(""String_Node_Str""))       break;
    }
    MaxentModel model=new MaxentModelReader(zis).getModel();
    zis.close();
    MaxentAnalyser analyser=new MaxentAnalyser();
    analyser.setMaxentModel(model);
    if (preferredOutcome != null) {
      analyser.setPreferredOutcome(preferredOutcome);
      analyser.setBias(bias);
    }
    String outDirPath=outfilePath.substring(0,outfilePath.lastIndexOf('/'));
    File outDir=new File(outDirPath);
    outDir.mkdirs();
    File outcomeFile=new File(outfilePath);
    if (outfilePath.endsWith(""String_Node_Str"")) {
      MaxentOutcomeXmlWriter xmlWriter=new MaxentOutcomeXmlWriter(outcomeFile);
      xmlWriter.setMinProbToConsider(minProbToConsider);
      xmlWriter.setUnknownOutcomeName(unknownOutcomeName);
      analyser.addObserver(xmlWriter);
    }
 else {
      MaxentOutcomeCsvWriter csvWriter=new MaxentOutcomeCsvWriter(model,outcomeFile);
      csvWriter.setMinProbToConsider(minProbToConsider);
      csvWriter.setUnknownOutcomeName(unknownOutcomeName);
      analyser.addObserver(csvWriter);
    }
    MaxentBestFeatureObserver bestFeatureObserver=null;
    if (!crossValidation && featureCount > 0 && resultFilePath != null) {
      bestFeatureObserver=new MaxentBestFeatureObserver(model,featureCount,reader.getFeatureToFileMap());
      analyser.addObserver(bestFeatureObserver);
    }
    MaxentFScoreCalculator maxentFScoreCalculator=null;
    if (resultFilePath != null) {
      maxentFScoreCalculator=new MaxentFScoreCalculator();
      maxentFScoreCalculator.setMinProbToConsider(minProbToConsider);
      maxentFScoreCalculator.setUnknownOutcomeName(unknownOutcomeName);
      analyser.addObserver(maxentFScoreCalculator);
    }
    analyser.analyse(events);
    if (maxentFScoreCalculator != null) {
      FScoreCalculator<String> fscoreCalculator=maxentFScoreCalculator.getFscoreCalculator();
      LOG.info(""String_Node_Str"" + fscoreCalculator.getTotalFScore());
      File fscoreFile=new File(outfilePath + ""String_Node_Str"");
      fscoreCalculator.writeScoresToCSVFile(fscoreFile);
    }
    if (bestFeatureObserver != null) {
      File weightPerFileFile=new File(outfilePath + ""String_Node_Str"");
      weightPerFileFile.delete();
      weightPerFileFile.createNewFile();
      Writer weightPerFileWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(weightPerFileFile,false),""String_Node_Str""));
      try {
        bestFeatureObserver.writeFileTotalsToFile(weightPerFileWriter);
      }
  finally {
        weightPerFileWriter.flush();
        weightPerFileWriter.close();
      }
      LOG.debug(""String_Node_Str"" + reader.getFeatures().size());
    }
  }
 catch (  IOException ioe) {
    LogUtils.logError(LOG,ioe);
    throw new RuntimeException(ioe);
  }
  if (generateEventFile) {
    File eventFile=new File(outfilePath + ""String_Node_Str"");
    this.generateEventFile(eventFile,events);
  }
  LOG.info(""String_Node_Str"");
}","private void doCommandAnalyse() throws IOException {
  if (featureDir == null)   throw new RuntimeException(""String_Node_Str"");
  if (maxentModelFilePath == null)   throw new RuntimeException(""String_Node_Str"");
  if (outfilePath == null)   throw new RuntimeException(""String_Node_Str"");
  CSVEventListReader reader=this.getReader(TrainingSetType.ALL_TEST,false);
  GenericEvents events=reader.getEvents();
  try {
    LOG.info(""String_Node_Str"");
    ZipInputStream zis=new ZipInputStream(new FileInputStream(maxentModelFilePath));
    ZipEntry ze;
    while ((ze=zis.getNextEntry()) != null) {
      if (ze.getName().endsWith(""String_Node_Str""))       break;
    }
    MaxentModel model=new MaxentModelReader(zis).getModel();
    zis.close();
    MaxentAnalyser analyser=new MaxentAnalyser();
    analyser.setMaxentModel(model);
    if (preferredOutcome != null) {
      analyser.setPreferredOutcome(preferredOutcome);
      analyser.setBias(bias);
    }
    if (outfilePath.lastIndexOf('/') >= 0) {
      String outDirPath=outfilePath.substring(0,outfilePath.lastIndexOf('/'));
      File outDir=new File(outDirPath);
      outDir.mkdirs();
    }
    File outcomeFile=new File(outfilePath);
    if (outfilePath.endsWith(""String_Node_Str"")) {
      MaxentOutcomeXmlWriter xmlWriter=new MaxentOutcomeXmlWriter(outcomeFile);
      xmlWriter.setMinProbToConsider(minProbToConsider);
      xmlWriter.setUnknownOutcomeName(unknownOutcomeName);
      analyser.addObserver(xmlWriter);
    }
 else {
      MaxentOutcomeCsvWriter csvWriter=new MaxentOutcomeCsvWriter(model,outcomeFile);
      csvWriter.setMinProbToConsider(minProbToConsider);
      csvWriter.setUnknownOutcomeName(unknownOutcomeName);
      analyser.addObserver(csvWriter);
    }
    MaxentBestFeatureObserver bestFeatureObserver=null;
    if (!crossValidation && featureCount > 0 && resultFilePath != null) {
      bestFeatureObserver=new MaxentBestFeatureObserver(model,featureCount,reader.getFeatureToFileMap());
      analyser.addObserver(bestFeatureObserver);
    }
    MaxentFScoreCalculator maxentFScoreCalculator=null;
    if (resultFilePath != null) {
      maxentFScoreCalculator=new MaxentFScoreCalculator();
      maxentFScoreCalculator.setMinProbToConsider(minProbToConsider);
      maxentFScoreCalculator.setUnknownOutcomeName(unknownOutcomeName);
      analyser.addObserver(maxentFScoreCalculator);
    }
    analyser.analyse(events);
    if (maxentFScoreCalculator != null) {
      FScoreCalculator<String> fscoreCalculator=maxentFScoreCalculator.getFscoreCalculator();
      LOG.info(""String_Node_Str"" + fscoreCalculator.getTotalFScore());
      File fscoreFile=new File(outfilePath + ""String_Node_Str"");
      fscoreCalculator.writeScoresToCSVFile(fscoreFile);
    }
    if (bestFeatureObserver != null) {
      File weightPerFileFile=new File(outfilePath + ""String_Node_Str"");
      weightPerFileFile.delete();
      weightPerFileFile.createNewFile();
      Writer weightPerFileWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(weightPerFileFile,false),""String_Node_Str""));
      try {
        bestFeatureObserver.writeFileTotalsToFile(weightPerFileWriter);
      }
  finally {
        weightPerFileWriter.flush();
        weightPerFileWriter.close();
      }
      LOG.debug(""String_Node_Str"" + reader.getFeatures().size());
    }
  }
 catch (  IOException ioe) {
    LogUtils.logError(LOG,ioe);
    throw new RuntimeException(ioe);
  }
  if (generateEventFile) {
    File eventFile=new File(outfilePath + ""String_Node_Str"");
    this.generateEventFile(eventFile,events);
  }
  LOG.info(""String_Node_Str"");
}"
83593,"/** 
 * This method prepares the environment for loading rdf and handling failures
 * @param _tripleFile the name a file containing the triples to be loaded into the Blueprints managed graph.
 * @param _subRefNodeName the reference node for this collection.
 * @param _context the object of the triple.
 * @see net.justtrade.rest.handlers.graph.ManagementIndexHelper#getCollectionRefVertex(String,IndexableGraph,boolean)
 */
public void injectRDF(String _tripleFile,String _subRefNodeName,RexsterResourceContext _context){
  final String sMETHOD=""String_Node_Str"";
  String tripleFile=_tripleFile.trim();
  if (tripleFile.startsWith(FILE_SEPARATOR))   tripleFile=tripleFile.substring(1);
  TransactionalGraph tranGraph=(TransactionalGraph)_context.getRexsterApplicationGraph().getGraph();
  try {
    logger.info(sMETHOD + ""String_Node_Str"" + _tripleFile+ ""String_Node_Str"");
    writeToGraphStore(_subRefNodeName,_tripleFile,tranGraph);
    logger.info(sMETHOD + ""String_Node_Str"" + _tripleFile+ ""String_Node_Str"");
  }
 catch (  MalformedURLException mfuex) {
    logger.error(sMETHOD + ""String_Node_Str"" + mfuex.getLocalizedMessage()+ ""String_Node_Str""+ mfuex.getStackTrace());
  }
catch (  Exception ex) {
    logger.error(sMETHOD + ""String_Node_Str"" + ex.getLocalizedMessage()+ ""String_Node_Str"");
  }
  RDF_Analyzer.analyzeModelData();
}","/** 
 * This method prepares the environment for loading rdf and handling failures
 * @param _tripleFile the name a file containing the triples to be loaded into the Blueprints managed graph.
 * @param _subRefNodeName the reference node for this collection.
 * @param _context the object of the triple.
 * @see net.justtrade.rest.handlers.graph.ManagementIndexHelper#getCollectionRefVertex(String,IndexableGraph,boolean)
 */
public void injectRDF(String _tripleFile,String _subRefNodeName,RexsterResourceContext _context){
  final String sMETHOD=""String_Node_Str"";
  String tripleFile=_tripleFile.trim();
  if (tripleFile.startsWith(FILE_SEPARATOR))   tripleFile=tripleFile.substring(1);
  TransactionalGraph tranGraph=(TransactionalGraph)_context.getRexsterApplicationGraph().getGraph();
  try {
    logger.info(sMETHOD + ""String_Node_Str"" + tripleFile+ ""String_Node_Str"");
    writeToGraphStore(_subRefNodeName,tripleFile,tranGraph);
    logger.info(sMETHOD + ""String_Node_Str"" + tripleFile+ ""String_Node_Str"");
  }
 catch (  MalformedURLException mfuex) {
    logger.error(sMETHOD + ""String_Node_Str"" + mfuex.getLocalizedMessage()+ ""String_Node_Str""+ mfuex.getStackTrace());
  }
catch (  Exception ex) {
    logger.error(sMETHOD + ""String_Node_Str"" + ex.getLocalizedMessage()+ ""String_Node_Str"");
  }
  RDF_Analyzer.analyzeModelData();
}"
83594,"@Override public void onDrawFrame(GL10 gl){
  long dt=FramerateCounter.tick();
  if (Constants.sBenchmarkMode) {
    dt=Pax.UPDATE_INTERVAL_MS;
  }
  mGame.update(dt);
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  if (!mGame.isPaused()) {
    mStarField.update(dt);
  }
  drawStars(gl,mStarField,mStarPainter,mGameWidth,mGameHeight);
  if (Constants.sShowParticles) {
    drawParticles(gl,Emitter.SMOKE);
  }
  for (  Player player : mGame.mPlayers) {
    for (    Entity entity : player.mEntities[Entity.FIGHTER]) {
      Fighter fighter=(Fighter)entity;
      mHighlight.drawTrail(gl,fighter.mTrailVertices,fighter.mVertexColors);
    }
  }
  if (Constants.sShowCollisionBoxes) {
    for (int i=0; i < 2; i++) {
      QuadtreePainter.draw(gl,mGame.mPlayers[i].mEntities[Ship.FIGHTER].mBodies,mLineVertices,i == 0,mRotation);
    }
  }
  if (Constants.sShowShips) {
    mPrimitivePainter.setStrokeColor(1,1,1,0.5f);
    mPrimitivePainter.setFillColor(1,1,1,0);
    final float minShieldWidth=mPixelSize * 2;
    float[][] c=Painter.TEAM_COLORS;
    for (    int entityType : ENTITY_LAYERS) {
      for (int i=0; i < Game.NUM_PLAYERS; i++) {
        Player player=mGame.mPlayers[i];
        Painter[] painters=mPlayerEntityPainters.get(player);
        for (        Entity entity : player.mEntities[entityType]) {
          if (painters[entityType] != null) {
            painters[entityType].draw(gl,entity);
          }
 else {
            float[] shieldColors={1,1,1};
            float shieldWidth=entity.diameter * 0.15f * ((float)entity.health) / entity.originalHealth;
            if (shieldWidth < minShieldWidth) {
              float shieldStrength=shieldWidth / minShieldWidth;
              shieldWidth=minShieldWidth;
              for (int j=0; j < 3; j++) {
                shieldColors[j]=c[i][j] * (1 - shieldStrength) + shieldStrength;
              }
            }
            mCircle.draw(gl,entity,shieldColors[0],shieldColors[1],shieldColors[2]);
            mCircle.draw(gl,entity,entity.diameter - shieldWidth,c[i][0],c[i][1],c[i][2]);
          }
        }
      }
    }
  }
  if (Constants.sShowParticles) {
    drawParticles(gl,Emitter.SPARK);
    drawParticles(gl,Emitter.LASER_HIT);
    drawParticles(gl,Emitter.MISSILE_HIT);
    drawParticles(gl,Emitter.BOMB_HIT);
    drawParticles(gl,Emitter.SHIP_EXPLOSION);
    drawParticles(gl,Emitter.UPGRADE_EFFECT);
  }
  if (mGame.getState() == Game.State.IN_PROGRESS) {
    drawButtons(gl);
  }
  if (Constants.sShowFPS) {
    float x=(mGameWidth / 2) - 100;
    float y=(mGameHeight / 2) - 100;
    float dy=-(DIGIT_HEIGHT + LINE_SPACING);
    drawNumber(gl,x,y,FramerateCounter.getFPS(),1f,1);
    drawNumber(gl,x,y + dy,FramerateCounter.getRecentJitter(),0.5f);
    drawNumber(gl,x,y + dy * 2,FramerateCounter.getMaxJitter(),0.5f);
    for (int i=0; i < 2; i++) {
      if (mGame.mPlayers[i].isAI()) {
        float a=1;
        float r=(i == 0) ? 0 : 1;
        float g=.5f;
        float b=(i == 0) ? 1 : 0;
        AIWeights weights=mGame.mPlayers[i].getAIWeights();
        int n=weights.w.length;
        x=(DIGIT_WIDTH + LETTER_SPACING) * 7.5f - mGameWidth / 2;
        y=LINE_SPACING / 2 - dy * n * i;
        for (int j=0; j < n; j++) {
          drawNumber(gl,x,y,weights.w[j],a,r,g,b);
          y+=dy;
        }
        float[] buildScores=mGame.mPlayers[i].getAIBuildScores();
        n=buildScores.length;
        x*=-1;
        y=LINE_SPACING / 2 - dy * n * i;
        for (int j=0; j < n; j++) {
          drawNumber(gl,x,y,buildScores[j],a,r,g,b);
          y+=dy;
        }
      }
    }
  }
}","@Override public void onDrawFrame(GL10 gl){
  long dt=FramerateCounter.tick();
  if (Constants.sBenchmarkMode) {
    dt=Pax.UPDATE_INTERVAL_MS;
  }
  mGame.update(dt);
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  if (!mGame.isPaused()) {
    mStarField.update(dt);
  }
  drawStars(gl,mStarField,mStarPainter,mGameWidth,mGameHeight);
  if (Constants.sShowParticles) {
    drawParticles(gl,Emitter.SMOKE);
  }
  for (  Player player : mGame.mPlayers) {
    for (    Entity entity : player.mEntities[Entity.FIGHTER]) {
      Fighter fighter=(Fighter)entity;
      mHighlight.drawTrail(gl,fighter.mTrailVertices,fighter.mVertexColors);
    }
  }
  if (Constants.sShowCollisionBoxes) {
    for (int i=0; i < 2; i++) {
      QuadtreePainter.draw(gl,mGame.mPlayers[i].mEntities[Ship.FIGHTER].mBodies,mLineVertices,i == 0,mRotation);
    }
  }
  if (Constants.sShowShips) {
    mPrimitivePainter.setStrokeColor(1,1,1,0.5f);
    mPrimitivePainter.setFillColor(1,1,1,0);
    final float minShieldWidth=mPixelSize * 2;
    float[][] c=Painter.TEAM_COLORS;
    for (    int entityType : ENTITY_LAYERS) {
      for (int i=0; i < Game.NUM_PLAYERS; i++) {
        Player player=mGame.mPlayers[i];
        Painter[] painters=mPlayerEntityPainters.get(player);
        for (        Entity entity : player.mEntities[entityType]) {
          if (painters[entityType] != null) {
            painters[entityType].draw(gl,entity);
          }
 else {
            float[] shieldColors={1,1,1};
            float shieldWidth=entity.diameter * 0.15f * ((float)entity.health) / entity.originalHealth;
            if (shieldWidth < minShieldWidth) {
              float shieldStrength=shieldWidth / minShieldWidth;
              shieldWidth=minShieldWidth;
              for (int j=0; j < 3; j++) {
                shieldColors[j]=c[i][j] * (1 - shieldStrength) + shieldStrength;
              }
            }
            mCircle.draw(gl,entity,shieldColors[0],shieldColors[1],shieldColors[2]);
            mCircle.draw(gl,entity,entity.diameter - shieldWidth,c[i][0],c[i][1],c[i][2]);
          }
        }
      }
    }
  }
  if (Constants.sShowParticles) {
    drawParticles(gl,Emitter.SPARK);
    drawParticles(gl,Emitter.LASER_HIT);
    drawParticles(gl,Emitter.MISSILE_HIT);
    drawParticles(gl,Emitter.BOMB_HIT);
    drawParticles(gl,Emitter.SHIP_EXPLOSION);
    drawParticles(gl,Emitter.UPGRADE_EFFECT);
  }
  if (mGame.getState() == Game.State.IN_PROGRESS) {
    drawButtons(gl);
  }
  if (Constants.sShowFPS) {
    float ex=DIGIT_SPACING * 2 - mGameWidth / 2;
    float x=-(ex + DIGIT_WIDTH);
    float y=(mGameHeight / 2) - 100;
    float dy=-(DIGIT_HEIGHT + LINE_SPACING);
    drawNumber(gl,x,y,FramerateCounter.getFPS(),0.6f,1);
    drawNumber(gl,x,y + dy,FramerateCounter.getRecentJitter(),0.4f);
    drawNumber(gl,x,y + dy * 2,FramerateCounter.getMaxJitter(),0.4f);
    for (int i=0; i < 2; i++) {
      if (mGame.mPlayers[i].isAI()) {
        float a=1;
        float r=(Painter.TEAM_COLORS[i][0] + 1) / 2;
        float g=(Painter.TEAM_COLORS[i][1] + 1) / 2;
        float b=(Painter.TEAM_COLORS[i][2] + 1) / 2;
        AIWeights weights=mGame.mPlayers[i].getAIWeights();
        int n=weights.w.length;
        x=ex + DIGIT_WIDTH * 7 + DIGIT_SPACING * 6;
        y=LINE_SPACING / 2 - dy * n * i;
        for (int j=0; j < n; j++) {
          drawNumber(gl,x,y,weights.w[j],a,r,g,b);
          y+=dy;
        }
        float[] buildScores=mGame.mPlayers[i].getAIBuildScores();
        n=buildScores.length;
        x=-(ex + DIGIT_WIDTH);
        y=LINE_SPACING / 2 - dy * n * i;
        for (int j=0; j < n; j++) {
          drawNumber(gl,x,y,buildScores[j],a,r,g,b);
          y+=dy;
        }
      }
    }
  }
}"
83595,"private void drawNumber(GL10 gl,float x,float y,float number,float alpha,float r,float g,float b,int precision){
  String str=(number == (long)number) ? String.format(""String_Node_Str"",(long)number) : String.format((precision >= 0 ? ""String_Node_Str"" + precision + ""String_Node_Str"" : ""String_Node_Str""),number);
  if (number == 0) {
    alpha*=0.5;
  }
  for (int i=str.length() - 1; i >= 0; i--) {
    char c=str.charAt(i);
    Painter p=mPeriodPainter;
    if (c >= '0' && c <= '9') {
      p=mDigitPainters[c - '0'];
    }
 else     if (c == '-') {
      p=mMinusPainter;
    }
    p.draw(gl,x,y,DIGIT_WIDTH,DIGIT_HEIGHT,0,alpha,r,g,b);
    x-=DIGIT_WIDTH + LETTER_SPACING;
    number/=10;
  }
}","private void drawNumber(GL10 gl,float x,float y,float number,float alpha,float r,float g,float b,int precision){
  String str=(number == (long)number) ? String.format(""String_Node_Str"",(long)number) : String.format((precision >= 0 ? ""String_Node_Str"" + precision + ""String_Node_Str"" : ""String_Node_Str""),number);
  if (number == 0) {
    alpha*=0.5;
  }
  for (int i=str.length() - 1; i >= 0; i--) {
    char c=str.charAt(i);
    Painter p=mPeriodPainter;
    if (c >= '0' && c <= '9') {
      p=mDigitPainters[c - '0'];
    }
 else     if (c == '-') {
      p=mMinusPainter;
    }
    p.draw(gl,x,y,DIGIT_WIDTH,DIGIT_HEIGHT,0,alpha,r,g,b);
    x-=DIGIT_WIDTH + DIGIT_SPACING;
    number/=10;
  }
}"
83596,"private Point2 collide(float centerX,float centerY,float radius,float radiusSquared){
  Point2 closest=null;
  float q=(mDimension == X) ? centerX : centerY;
  if (q + radius < mMinVal || q - radius > mMaxVal) {
    return closest;
  }
  if (isLeaf) {
    for (int i=mMinIndex; i < mMaxIndex; i++) {
      Point2 point=mPoints[i];
      float dx=point.x - centerX;
      float dy=point.y - centerY;
      boolean inSquare=(-radius <= dx && dx <= radius) && (-radius <= dy && dy <= radius);
      if (inSquare) {
        float distanceSquared=(dx * dx) + (dy * dy);
        if (distanceSquared < radiusSquared) {
          radiusSquared=distanceSquared;
          closest=point;
        }
      }
    }
  }
 else {
    closest=low.collide(centerX,centerY,radius,radiusSquared);
    if (closest != null) {
      radiusSquared=closest.distanceToSquared(centerX,centerY);
      radius=(float)Math.sqrt(radiusSquared);
    }
    Point2 rightClosest=high.collide(centerX,centerY,radius,radiusSquared);
    if (rightClosest != null) {
      closest=rightClosest;
    }
  }
  return closest;
}","private Point2 collide(float centerX,float centerY,float radius,float radiusSquared){
  Point2 closest=null;
  float q=(mDimension == X) ? centerX : centerY;
  float minVal=(mDimension == X) ? mMinX : mMinY;
  float maxVal=(mDimension == X) ? mMaxX : mMaxY;
  if (q + radius < minVal || q - radius > maxVal) {
    return closest;
  }
  if (isLeaf) {
    for (int i=mMinIndex; i < mMaxIndex; i++) {
      Point2 point=mPoints[i];
      float dx=point.x - centerX;
      float dy=point.y - centerY;
      boolean inSquare=(-radius <= dx && dx <= radius) && (-radius <= dy && dy <= radius);
      if (inSquare) {
        float distanceSquared=(dx * dx) + (dy * dy);
        if (distanceSquared < radiusSquared) {
          radiusSquared=distanceSquared;
          closest=point;
        }
      }
    }
  }
 else {
    closest=low.collide(centerX,centerY,radius,radiusSquared);
    if (closest != null) {
      radiusSquared=closest.distanceToSquared(centerX,centerY);
      radius=(float)Math.sqrt(radiusSquared);
    }
    Point2 rightClosest=high.collide(centerX,centerY,radius,radiusSquared);
    if (rightClosest != null) {
      closest=rightClosest;
    }
  }
  return closest;
}"
83597,"private void resetMinMaxValues(){
  boolean first=true;
  for (int i=mMinIndex; i < mMaxIndex; i++) {
    float q=(mDimension == X) ? mPoints[i].x : mPoints[i].y;
    if (first) {
      mMinVal=q;
      mMaxVal=q;
      first=false;
    }
 else     if (q < mMinVal) {
      mMinVal=q;
    }
 else     if (q > mMaxVal) {
      mMaxVal=q;
    }
  }
}","private void resetMinMaxValues(){
  boolean first=true;
  for (int i=mMinIndex; i < mMaxIndex; i++) {
    float q=(mDimension == X) ? mPoints[i].x : mPoints[i].y;
    if (first) {
      mMinX=mMaxX=mPoints[i].x;
      mMinY=mMaxY=mPoints[i].y;
      first=false;
    }
 else {
      mMinX=Math.min(mMinX,mPoints[i].x);
      mMaxX=Math.max(mMaxX,mPoints[i].x);
      mMinY=Math.min(mMinY,mPoints[i].y);
      mMaxY=Math.max(mMaxY,mPoints[i].y);
    }
  }
}"
83598,"public boolean remove(Point2 point){
  assert(mIsValid);
  boolean removed=false;
  if (isLeaf) {
    for (int i=mMinIndex; i < mMaxIndex && !removed; i++) {
      if (mPoints[i].equals(point)) {
        mMaxIndex--;
        mPoints[i]=mPoints[mMaxIndex];
        mPoints[mMaxIndex]=null;
        removed=true;
      }
    }
  }
 else {
    float q=(low.mDimension == X) ? point.x : point.y;
    if (q >= low.mMinVal && q <= low.mMaxVal) {
      removed=low.remove(point);
    }
 else     if (q >= high.mMinVal && q <= high.mMaxVal) {
      removed=high.remove(point);
    }
  }
  return removed;
}","public boolean remove(Point2 point){
  assert(mIsValid);
  boolean removed=false;
  if (isLeaf) {
    for (int i=mMinIndex; i < mMaxIndex && !removed; i++) {
      if (mPoints[i].equals(point)) {
        mMaxIndex--;
        mPoints[i]=mPoints[mMaxIndex];
        mPoints[mMaxIndex]=null;
        removed=true;
      }
    }
  }
 else {
    float q=(low.mDimension == X) ? point.x : point.y;
    float lowMinVal=(low.mDimension == X) ? low.mMinX : low.mMinY;
    float lowMaxVal=(low.mDimension == X) ? low.mMaxX : low.mMaxY;
    float highMinVal=(low.mDimension == X) ? high.mMinX : high.mMinY;
    float highMaxVal=(low.mDimension == X) ? high.mMaxX : high.mMaxY;
    if (q >= lowMinVal && q <= lowMaxVal) {
      removed=low.remove(point);
    }
 else     if (q >= highMinVal && q <= highMaxVal) {
      removed=high.remove(point);
    }
  }
  return removed;
}"
83599,"private void print(int depth){
  PLog.v(""String_Node_Str"",String.format(""String_Node_Str"",spaces.substring(0,depth * 2),(isLeaf ? ""String_Node_Str"" : ""String_Node_Str""),(mDimension == X ? ""String_Node_Str"" : ""String_Node_Str""),mMinVal,mMaxVal,mMinIndex,mMaxIndex - 1));
  if (isLeaf) {
    for (int i=mMinIndex; i < mMaxIndex; i++) {
      PLog.v(""String_Node_Str"",String.format(""String_Node_Str"",spaces.substring(0,depth * 2),i,mPoints[i].x,mPoints[i].y,mPoints[i].id));
    }
  }
 else {
    depth++;
    low.print(depth);
    high.print(depth);
  }
}","private void print(int depth){
  PLog.v(""String_Node_Str"",String.format(""String_Node_Str"",spaces.substring(0,depth * 2),(isLeaf ? ""String_Node_Str"" : ""String_Node_Str""),(mDimension == X ? ""String_Node_Str"" : ""String_Node_Str""),(mDimension == X ? mMinX : mMinY),(mDimension == X ? mMaxX : mMaxY),mMinIndex,mMaxIndex - 1));
  if (isLeaf) {
    for (int i=mMinIndex; i < mMaxIndex; i++) {
      PLog.v(""String_Node_Str"",String.format(""String_Node_Str"",spaces.substring(0,depth * 2),i,mPoints[i].x,mPoints[i].y,mPoints[i].id));
    }
  }
 else {
    depth++;
    low.print(depth);
    high.print(depth);
  }
}"
83600,"public float getMaxVal(){
  return mMaxVal;
}","public float getMaxVal(){
  return mDimension == X ? mMaxX : mMaxY;
}"
83601,"public float getMinVal(){
  return mMinVal;
}","public float getMinVal(){
  return mDimension == X ? mMinX : mMinY;
}"
83602,"private Quadtree reset(Point2[] points,int minIndex,int maxIndex){
  mPoints=points;
  mMinIndex=minIndex;
  mMaxIndex=maxIndex;
  isLeaf=(mMaxIndex - mMinIndex) <= MAX_LEAF_SIZE;
  resetMinMaxValues();
  if (!isLeaf) {
    int pivotIndex=partition(!mDimension,mPoints,mMinIndex,mMaxIndex);
    if (pivotIndex <= mMinIndex || pivotIndex >= mMaxIndex) {
      isLeaf=true;
    }
 else {
      if (low == null) {
        low=Quadtree.create(!mDimension,mEntrySize,mPoints);
      }
      if (high == null) {
        high=Quadtree.create(!mDimension,mEntrySize,mPoints);
      }
      low.reset(mPoints,mMinIndex,pivotIndex);
      high.reset(mPoints,pivotIndex,mMaxIndex);
    }
  }
  if (isLeaf) {
    if (low != null) {
      low.recycle();
      low=null;
    }
    if (high != null) {
      high.recycle();
      high=null;
    }
  }
  mIsValid=true;
  return this;
}","private Quadtree reset(Point2[] points,int minIndex,int maxIndex){
  mPoints=points;
  mMinIndex=minIndex;
  mMaxIndex=maxIndex;
  isLeaf=(mMaxIndex - mMinIndex) <= MAX_LEAF_SIZE;
  mDepth=0;
  resetMinMaxValues();
  if (!isLeaf) {
    int pivotIndex=partition(!mDimension,mPoints,mMinIndex,mMaxIndex);
    if (pivotIndex <= mMinIndex || pivotIndex >= mMaxIndex) {
      isLeaf=true;
    }
 else {
      if (low == null) {
        low=Quadtree.create(!mDimension,mEntrySize,mPoints);
      }
      if (high == null) {
        high=Quadtree.create(!mDimension,mEntrySize,mPoints);
      }
      low.reset(mPoints,mMinIndex,pivotIndex);
      high.reset(mPoints,pivotIndex,mMaxIndex);
      mDepth=Math.max(low.mDepth,high.mDepth) + 1;
    }
  }
  if (isLeaf) {
    if (low != null) {
      low.recycle();
      low=null;
    }
    if (high != null) {
      high.recycle();
      high=null;
    }
  }
  mIsValid=true;
  return this;
}"
83603,"@Override public void onDrawFrame(GL10 gl){
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  gl.glViewport(0,0,(int)mScreenWidth,(int)mScreenHeight);
  float minDimension=mScreenWidth < mScreenHeight ? mScreenWidth : mScreenHeight;
  float maxDimension=mScreenWidth > mScreenHeight ? mScreenWidth : mScreenHeight;
  float rotationDegrees=-mRotation * 90;
  float buttonSize=maxDimension / 8;
  if (!Pax.sBlackBackground) {
    float halfWidth=mScreenWidth / 2;
    float halfHeight=mScreenHeight / 2;
    mBackgroundPainter.drawFillBounds(gl,-halfWidth,halfWidth,-halfHeight,halfHeight,rotationDegrees,1f);
  }
  float flip=1;
  float buttonXPos=flip * 0;
  float buttonYPos=flip * (mRotation % 2 == 0 ? mScreenHeight : mScreenWidth) / 3;
  float glowSize=(float)(buttonSize * 4);
  if (!mPlayerOneAI) {
    mSmokePainter.draw(gl,-buttonXPos,-buttonYPos,glowSize,glowSize,0,1f);
  }
  if (!mPlayerTwoAI) {
    mSmokePainter.draw(gl,buttonXPos,buttonYPos,glowSize,glowSize,0,1f);
  }
  mBlueButtonPainter.draw(gl,-buttonXPos,-buttonYPos,buttonSize,buttonSize,180,1f);
  mRedButtonPainter.draw(gl,buttonXPos,buttonYPos,buttonSize,buttonSize,0,1f);
  mTitlePainter.draw(gl,0,0,minDimension / 2,minDimension / 2,rotationDegrees,1f);
  drawCountdown(gl,maxDimension,flip,rotationDegrees);
}","@Override public void onDrawFrame(GL10 gl){
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  gl.glViewport(0,0,(int)mScreenWidth,(int)mScreenHeight);
  float minDimension=mScreenWidth < mScreenHeight ? mScreenWidth : mScreenHeight;
  float maxDimension=mScreenWidth > mScreenHeight ? mScreenWidth : mScreenHeight;
  float rotationDegrees=-mRotation * 90;
  float buttonSize=maxDimension / 8;
  if (!Pax.sBlackBackground) {
    float halfWidth=mScreenWidth / 2;
    float halfHeight=mScreenHeight / 2;
    mBackgroundPainter.drawFillBounds(gl,-halfWidth,halfWidth,-halfHeight,halfHeight,rotationDegrees,1f);
  }
  float buttonXPos=0;
  float buttonYPos=(mRotation % 2 == 0 ? mScreenHeight : mScreenWidth) / 3;
  float glowSize=(float)(buttonSize * 4);
  if (!mPlayerOneAI) {
    mSmokePainter.draw(gl,-buttonXPos,-buttonYPos,glowSize,glowSize,0,1f);
  }
  if (!mPlayerTwoAI) {
    mSmokePainter.draw(gl,buttonXPos,buttonYPos,glowSize,glowSize,0,1f);
  }
  mBlueButtonPainter.draw(gl,-buttonXPos,-buttonYPos,buttonSize,buttonSize,180,1f);
  mRedButtonPainter.draw(gl,buttonXPos,buttonYPos,buttonSize,buttonSize,0,1f);
  mTitlePainter.draw(gl,0,0,minDimension / 2,minDimension / 2,rotationDegrees,1f);
  drawCountdown(gl,maxDimension,rotationDegrees);
}"
83604,"private void drawCountdown(GL10 gl,float maxDimension,float flip,float rotationDegrees){
  if (mActivity.mTimerIsRunning) {
    long msLeft=mActivity.mGameStartTime - SystemClock.uptimeMillis();
    if (msLeft > 0) {
      float numberSize=maxDimension / 20;
      float numberXPos=flip * ((mRotation % 2 == 0) ? 0 : -maxDimension / 6);
      float numberYPos=flip * ((mRotation % 2 != 0) ? 0 : -maxDimension / 6);
      float alpha=((float)(msLeft % 1000)) / 1000;
      int secondsLeft=(int)Math.ceil(((float)msLeft) / 1000);
      mNumberPainters[secondsLeft].draw(gl,numberXPos,numberYPos,numberSize,numberSize,rotationDegrees,alpha);
    }
  }
}","private void drawCountdown(GL10 gl,float maxDimension,float rotationDegrees){
  if (mActivity.mTimerIsRunning) {
    long msLeft=mActivity.mGameStartTime - SystemClock.uptimeMillis();
    if (msLeft > 0) {
      float flip=(mRotation < 2) ? 1 : -1;
      float numberSize=maxDimension / 20;
      float numberXPos=flip * ((mRotation % 2 == 0) ? 0 : -maxDimension / 6);
      float numberYPos=flip * ((mRotation % 2 != 0) ? 0 : -maxDimension / 6);
      float alpha=((float)(msLeft % 1000)) / 1000;
      int secondsLeft=(int)Math.ceil(((float)msLeft) / 1000);
      mNumberPainters[secondsLeft].draw(gl,numberXPos,numberYPos,numberSize,numberSize,rotationDegrees,alpha);
    }
  }
}"
83605,"private void drawButtons(GL10 gl){
  for (int player=0; player < Game.NUM_PLAYERS; player++) {
    float buildIndicatorRotation=(player == 0) ? 0 : 180;
    Painter[] buildTargetPainters=(player == 0) ? mBuildTargetPaintersBlue : mBuildTargetPaintersRed;
    float flip=((player == 1) ^ (mRotation >= 2)) ? -1 : 1;
    float dx=mGameWidth / 4;
    float dy=0;
    float x=flip * (dx - mGameWidth) / 2;
    float y=flip * (mButtonSize - mGameHeight) / 2;
    if ((player == 1) ^ (mRotation >= 2)) {
      dx=-dx;
      dy=-dy;
    }
    for (int i=0; i < 4; i++) {
      float buildProgress=mGame.mPlayers[player].money / Player.BuildCosts[i];
      if (buildProgress > 1) {
        buildProgress=1;
      }
      float buttonMinY=y - flip * mButtonSize / 2;
      float buttonMaxY=y + flip * mButtonSize / 2;
      float buttonMinX=x - dx / 2;
      float buttonMaxX=x + dx / 2;
      float progressMaxX=buttonMinX + flip * mButtonSize / 3;
      float progressMaxY=buttonMinY + flip * mButtonSize * buildProgress;
      if (i == mGame.mPlayers[player].mBuildTarget.ordinal()) {
        mHighlight.drawFillBounds(gl,buttonMinX,buttonMaxX,buttonMinY,buttonMaxY,0,0.2f);
        mHighlight.drawFillBounds(gl,buttonMinX,progressMaxX,buttonMinY,progressMaxY,0,0.2f);
      }
      buildTargetPainters[i].draw(gl,x,y,mButtonSize,mButtonSize,buildIndicatorRotation,1f);
      x+=dx;
      y+=dy;
    }
  }
}","private void drawButtons(GL10 gl){
  for (int player=0; player < Game.NUM_PLAYERS; player++) {
    float buildIndicatorRotation=(player == 0) ? 0 : 180;
    Painter[] buildTargetPainters=(player == 0) ? mBuildTargetPaintersBlue : mBuildTargetPaintersRed;
    float flip=(player == 1) ? -1 : 1;
    float dx=mGameWidth / 4;
    float dy=0;
    float x=flip * (dx - mGameWidth) / 2;
    float y=flip * (mButtonSize - mGameHeight) / 2;
    dx*=flip;
    dy*=flip;
    for (int i=0; i < 4; i++) {
      float buildProgress=mGame.mPlayers[player].money / Player.BuildCosts[i];
      if (buildProgress > 1) {
        buildProgress=1;
      }
      float buttonMinY=y - flip * mButtonSize / 2;
      float buttonMaxY=y + flip * mButtonSize / 2;
      float buttonMinX=x - dx / 2;
      float buttonMaxX=x + dx / 2;
      float progressMaxX=buttonMinX + flip * mButtonSize / 3;
      float progressMaxY=buttonMinY + flip * mButtonSize * buildProgress;
      if (i == mGame.mPlayers[player].mBuildTarget.ordinal()) {
        mHighlight.drawFillBounds(gl,buttonMinX,buttonMaxX,buttonMinY,buttonMaxY,0,0.2f);
        mHighlight.drawFillBounds(gl,buttonMinX,progressMaxX,buttonMinY,progressMaxY,0,0.2f);
      }
      buildTargetPainters[i].draw(gl,x,y,mButtonSize,mButtonSize,buildIndicatorRotation,1f);
      x+=dx;
      y+=dy;
    }
  }
}"
83606,"@Override public void onDrawFrame(GL10 gl){
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  gl.glViewport(0,0,(int)mScreenWidth,(int)mScreenHeight);
  float minDimension=mScreenWidth < mScreenHeight ? mScreenWidth : mScreenHeight;
  float maxDimension=mScreenWidth > mScreenHeight ? mScreenWidth : mScreenHeight;
  float rotationDegrees=-mRotation * 90;
  float buttonSize=maxDimension / 8;
  if (!Pax.sBlackBackground) {
    float halfWidth=mScreenWidth / 2;
    float halfHeight=mScreenHeight / 2;
    mBackgroundPainter.drawFillBounds(gl,-halfWidth,halfWidth,-halfHeight,halfHeight,rotationDegrees,1f);
  }
  float flip=(mRotation >= 2) ? -1 : 1;
  float buttonXPos=flip * 0;
  float buttonYPos=flip * (mRotation % 2 == 0 ? mScreenHeight : mScreenWidth) / 3;
  float glowSize=(float)(buttonSize * 4);
  if (!mPlayerOneAI) {
    mSmokePainter.draw(gl,-buttonXPos,-buttonYPos,glowSize,glowSize,0,1f);
  }
  if (!mPlayerTwoAI) {
    mSmokePainter.draw(gl,buttonXPos,buttonYPos,glowSize,glowSize,0,1f);
  }
  mBlueButtonPainter.draw(gl,-buttonXPos,-buttonYPos,buttonSize,buttonSize,180,1f);
  mRedButtonPainter.draw(gl,buttonXPos,buttonYPos,buttonSize,buttonSize,0,1f);
  mTitlePainter.draw(gl,0,0,minDimension / 2,minDimension / 2,rotationDegrees,1f);
  drawCountdown(gl,maxDimension,flip,rotationDegrees);
}","@Override public void onDrawFrame(GL10 gl){
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  gl.glViewport(0,0,(int)mScreenWidth,(int)mScreenHeight);
  float minDimension=mScreenWidth < mScreenHeight ? mScreenWidth : mScreenHeight;
  float maxDimension=mScreenWidth > mScreenHeight ? mScreenWidth : mScreenHeight;
  float rotationDegrees=-mRotation * 90;
  float buttonSize=maxDimension / 8;
  if (!Pax.sBlackBackground) {
    float halfWidth=mScreenWidth / 2;
    float halfHeight=mScreenHeight / 2;
    mBackgroundPainter.drawFillBounds(gl,-halfWidth,halfWidth,-halfHeight,halfHeight,rotationDegrees,1f);
  }
  float flip=1;
  float buttonXPos=flip * 0;
  float buttonYPos=flip * (mRotation % 2 == 0 ? mScreenHeight : mScreenWidth) / 3;
  float glowSize=(float)(buttonSize * 4);
  if (!mPlayerOneAI) {
    mSmokePainter.draw(gl,-buttonXPos,-buttonYPos,glowSize,glowSize,0,1f);
  }
  if (!mPlayerTwoAI) {
    mSmokePainter.draw(gl,buttonXPos,buttonYPos,glowSize,glowSize,0,1f);
  }
  mBlueButtonPainter.draw(gl,-buttonXPos,-buttonYPos,buttonSize,buttonSize,180,1f);
  mRedButtonPainter.draw(gl,buttonXPos,buttonYPos,buttonSize,buttonSize,0,1f);
  mTitlePainter.draw(gl,0,0,minDimension / 2,minDimension / 2,rotationDegrees,1f);
  drawCountdown(gl,maxDimension,flip,rotationDegrees);
}"
83607,"@Override public boolean onTouchEvent(MotionEvent event){
  int action=event.getAction() & MotionEvent.ACTION_MASK;
  if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_POINTER_DOWN) {
    for (int i=0; i < event.getPointerCount(); i++) {
      int xSection=(int)(event.getX(i) * 3 / getWidth());
      int ySection=(int)(event.getY(i) * 3 / getHeight());
      int section=(mRotation % 2 == 0 ? ySection : xSection);
      if (section == 1) {
        openOptionsMenu();
      }
 else {
        if (section == 0) {
          mActivity.mPlayerTwoAI=false;
        }
 else {
          mActivity.mPlayerOneAI=false;
        }
        mActivity.startTimer();
        setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
      }
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  int action=event.getAction() & MotionEvent.ACTION_MASK;
  if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_POINTER_DOWN) {
    for (int i=0; i < event.getPointerCount(); i++) {
      int xSection=(int)(event.getX(i) * 3 / getWidth());
      int ySection=(int)(event.getY(i) * 3 / getHeight());
      int section=(mRotation % 2 == 0 ? ySection : xSection);
      if (mRotation >= 2) {
        section=2 - section;
      }
      if (section == 1) {
        openOptionsMenu();
      }
 else {
        if (section == 0) {
          mActivity.mPlayerTwoAI=false;
        }
 else {
          mActivity.mPlayerOneAI=false;
        }
        mActivity.startTimer();
        setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
      }
    }
  }
  return true;
}"
83608,"@Override public void onDrawFrame(GL10 gl){
  float minDimension=mScreenWidth < mScreenHeight ? mScreenWidth : mScreenHeight;
  float maxDimension=mScreenWidth > mScreenHeight ? mScreenWidth : mScreenHeight;
  float rotationDegrees=-mRotation * 90;
  float numberSize=maxDimension / 20;
  float buttonSize=maxDimension / 8;
  float halfWidth=mScreenWidth / 2;
  float halfHeight=mScreenHeight / 2;
  mBackgroundPainter.drawFillBounds(gl,-halfWidth,halfWidth,-halfHeight,halfHeight,rotationDegrees,1f);
  float buttonXPos=0;
  float buttonYPos=(mRotation % 2 == 0 ? mScreenHeight : mScreenWidth) / 3;
  if (mRotation >= 2) {
    buttonXPos=-buttonXPos;
    buttonYPos=-buttonYPos;
  }
  float glowSize=(float)(buttonSize * 4);
  if (!mPlayerOneAI) {
    mSmokePainter.draw(gl,-buttonXPos,-buttonYPos,glowSize,glowSize,0,1f);
  }
  if (!mPlayerTwoAI) {
    mSmokePainter.draw(gl,buttonXPos,buttonYPos,glowSize,glowSize,0,1f);
  }
  mBlueButtonPainter.draw(gl,-buttonXPos,-buttonYPos,buttonSize,buttonSize,180,1f);
  mRedButtonPainter.draw(gl,buttonXPos,buttonYPos,buttonSize,buttonSize,0,1f);
  mTitlePainter.draw(gl,0,0,minDimension / 2,minDimension / 2,rotationDegrees,1f);
  if (mActivity.mTimerIsRunning) {
    long msLeft=mActivity.mGameStartTime - SystemClock.uptimeMillis();
    if (msLeft > 0) {
      float numberXPos=(mRotation % 2 == 0) ? 0 : -maxDimension / 6;
      float numberYPos=(mRotation % 2 != 0) ? 0 : -maxDimension / 6;
      float alpha=((float)(msLeft % 1000)) / 1000;
      int secondsLeft=(int)Math.ceil(((float)msLeft) / 1000);
      mNumberPainters[secondsLeft].draw(gl,numberXPos,numberYPos,numberSize,numberSize,rotationDegrees,alpha);
    }
  }
}","@Override public void onDrawFrame(GL10 gl){
  float minDimension=mScreenWidth < mScreenHeight ? mScreenWidth : mScreenHeight;
  float maxDimension=mScreenWidth > mScreenHeight ? mScreenWidth : mScreenHeight;
  float rotationDegrees=-mRotation * 90;
  float numberSize=maxDimension / 20;
  float buttonSize=maxDimension / 8;
  float halfWidth=mScreenWidth / 2;
  float halfHeight=mScreenHeight / 2;
  mBackgroundPainter.drawFillBounds(gl,-halfWidth,halfWidth,-halfHeight,halfHeight,rotationDegrees,1f);
  float flip=(mRotation >= 2) ? -1 : 1;
  float buttonXPos=flip * 0;
  float buttonYPos=flip * (mRotation % 2 == 0 ? mScreenHeight : mScreenWidth) / 3;
  float glowSize=(float)(buttonSize * 4);
  if (!mPlayerOneAI) {
    mSmokePainter.draw(gl,-buttonXPos,-buttonYPos,glowSize,glowSize,0,1f);
  }
  if (!mPlayerTwoAI) {
    mSmokePainter.draw(gl,buttonXPos,buttonYPos,glowSize,glowSize,0,1f);
  }
  mBlueButtonPainter.draw(gl,-buttonXPos,-buttonYPos,buttonSize,buttonSize,180,1f);
  mRedButtonPainter.draw(gl,buttonXPos,buttonYPos,buttonSize,buttonSize,0,1f);
  mTitlePainter.draw(gl,0,0,minDimension / 2,minDimension / 2,rotationDegrees,1f);
  if (mActivity.mTimerIsRunning) {
    long msLeft=mActivity.mGameStartTime - SystemClock.uptimeMillis();
    if (msLeft > 0) {
      float numberXPos=flip * ((mRotation % 2 == 0) ? 0 : -maxDimension / 6);
      float numberYPos=flip * ((mRotation % 2 != 0) ? 0 : -maxDimension / 6);
      float alpha=((float)(msLeft % 1000)) / 1000;
      int secondsLeft=(int)Math.ceil(((float)msLeft) / 1000);
      mNumberPainters[secondsLeft].draw(gl,numberXPos,numberYPos,numberSize,numberSize,rotationDegrees,alpha);
    }
  }
}"
83609,"@Override public boolean onTouchEvent(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_POINTER_DOWN) {
    Log.i(""String_Node_Str"",String.format(""String_Node_Str"",event.getPointerCount()));
    if (mGame.getState() == Game.State.IN_PROGRESS) {
      for (int i=0; i < event.getPointerCount(); i++) {
        float x=event.getX(i);
        float y=event.getY(i);
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",x,y));
        int numBuildTargets=Player.BuildTarget.values().length - 1;
        int selection=0;
        int player=-1;
        int xGridPos=(int)(x * 4 / getWidth());
        int yGridPos=(int)(y * 4 / getHeight());
        if (mRotation % 2 == 0) {
          if (yGridPos == 0 || yGridPos == 3) {
            player=((mRotation == 0) ^ (yGridPos < 2)) ? 0 : 1;
            selection=(int)(x * numBuildTargets / getWidth());
          }
        }
 else {
          if (xGridPos == 0 || xGridPos == 3) {
            player=((mRotation == 1) ^ (xGridPos < 2)) ? 0 : 1;
            selection=(numBuildTargets - 1) - (int)(y * numBuildTargets / getHeight());
          }
        }
        if (player != -1) {
          Log.i(""String_Node_Str"",String.format(""String_Node_Str"",selection));
          if ((player == 1) ^ (mRotation >= 2)) {
            selection=(numBuildTargets - 1) - selection;
          }
          mGame.setBuildTarget(player,Player.BuildTarget.values()[selection]);
        }
      }
    }
 else {
      if (mGame.mEndedTime + WAIT_BETWEEN_GAMES_MS <= SystemClock.uptimeMillis()) {
        mGame.restart();
      }
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  int action=event.getAction() & MotionEvent.ACTION_MASK;
  if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_POINTER_DOWN) {
    Log.i(""String_Node_Str"",String.format(""String_Node_Str"",event.getPointerCount()));
    if (mGame.getState() == Game.State.IN_PROGRESS) {
      for (int i=0; i < event.getPointerCount(); i++) {
        float x=event.getX(i);
        float y=event.getY(i);
        int numBuildTargets=Player.BuildTarget.values().length - 1;
        int selection=0;
        int player=-1;
        int xGridPos=(int)(x * 4 / getWidth());
        int yGridPos=(int)(y * 4 / getHeight());
        if (mRotation % 2 == 0) {
          if (yGridPos == 0 || yGridPos == 3) {
            player=((mRotation == 0) ^ (yGridPos < 2)) ? 0 : 1;
            selection=(int)(x * numBuildTargets / getWidth());
          }
        }
 else {
          if (xGridPos == 0 || xGridPos == 3) {
            player=((mRotation == 1) ^ (xGridPos < 2)) ? 0 : 1;
            selection=(numBuildTargets - 1) - (int)(y * numBuildTargets / getHeight());
          }
        }
        if (player != -1) {
          Log.i(""String_Node_Str"",String.format(""String_Node_Str"",selection));
          if ((player == 1) ^ (mRotation >= 2)) {
            selection=(numBuildTargets - 1) - selection;
          }
          mGame.setBuildTarget(player,Player.BuildTarget.values()[selection]);
        }
      }
    }
 else {
      if (mGame.mEndedTime + WAIT_BETWEEN_GAMES_MS <= SystemClock.uptimeMillis()) {
        mGame.restart();
      }
    }
  }
  return true;
}"
83610,"@Override public void onSurfaceChanged(GL10 gl,int width,int height){
  gl.glViewport(0,0,width,height);
  Log.v(Pax.TAG,String.format(""String_Node_Str"",width,height));
  gl.glMatrixMode(GL10.GL_PROJECTION);
  gl.glLoadIdentity();
  mWidth=width;
  mHeight=height;
  float maxDimension=Math.max(width,height);
  mGameWidth=GAME_VIEW_SIZE * width / maxDimension;
  mGameHeight=GAME_VIEW_SIZE * height / maxDimension;
  float halfX=mGameWidth / 2;
  float halfY=mGameHeight / 2;
  GLU.gluOrtho2D(gl,-halfX,halfX,-halfY,halfY);
  gl.glMatrixMode(GL10.GL_MODELVIEW);
  gl.glLoadIdentity();
  mButtonSize=Math.max(mGameWidth,mGameHeight) / 15;
  Resources res=mContext.getResources();
  if (Pax.BACKGROUND_IMAGE) {
  }
  mBuildTargetPainters=new Painter[4];
  mBuildTargetPainters[0]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.fighter_outline),mButtonSize);
  mBuildTargetPainters[1]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.bomber_outline),mButtonSize);
  mBuildTargetPainters[2]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.frigate_outline),mButtonSize);
  mBuildTargetPainters[3]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.upgrade_outline),mButtonSize);
}","@Override public void onSurfaceChanged(GL10 gl,int width,int height){
  gl.glViewport(0,0,width,height);
  Log.v(Pax.TAG,String.format(""String_Node_Str"",width,height));
  gl.glMatrixMode(GL10.GL_PROJECTION);
  gl.glLoadIdentity();
  mWidth=width;
  mHeight=height;
  float maxDimension=Math.max(width,height);
  mGameWidth=GAME_VIEW_SIZE * width / maxDimension;
  mGameHeight=GAME_VIEW_SIZE * height / maxDimension;
  float halfX=mGameWidth / 2;
  float halfY=mGameHeight / 2;
  GLU.gluOrtho2D(gl,-halfX,halfX,-halfY,halfY);
  gl.glMatrixMode(GL10.GL_MODELVIEW);
  gl.glLoadIdentity();
  mButtonSize=Math.max(mGameWidth,mGameHeight) / 15;
  if (Pax.BACKGROUND_IMAGE) {
  }
  mBuildTargetPainters=new Painter[4];
  mBuildTargetPainters[0]=Painter.CreateMinSize(gl,mVBOSupport,loadBitmap(R.drawable.fighter_outline),mButtonSize);
  mBuildTargetPainters[1]=Painter.CreateMinSize(gl,mVBOSupport,loadBitmap(R.drawable.bomber_outline),mButtonSize);
  mBuildTargetPainters[2]=Painter.CreateMinSize(gl,mVBOSupport,loadBitmap(R.drawable.frigate_outline),mButtonSize);
  mBuildTargetPainters[3]=Painter.CreateMinSize(gl,mVBOSupport,loadBitmap(R.drawable.upgrade_outline),mButtonSize);
}"
83611,"@Override public void onSurfaceCreated(GL10 gl,EGLConfig config){
  gl.glEnable(GL10.GL_TEXTURE_2D);
  gl.glShadeModel(GL10.GL_SMOOTH);
  gl.glClearColor(0.0f,0.0f,0.0f,0.5f);
  gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT,GL10.GL_NICEST);
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  gl.glTexEnvx(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_MODULATE);
  gl.glEnable(GL10.GL_BLEND);
  gl.glBlendFunc(GL10.GL_ONE,GL10.GL_ONE_MINUS_SRC_ALPHA);
{
    Log.v(""String_Node_Str"",""String_Node_Str"" + gl.glGetString(GL10.GL_VERSION));
    Log.v(""String_Node_Str"",""String_Node_Str"");
    String extensions=gl.glGetString(GL10.GL_EXTENSIONS);
    for (    String extension : extensions.split(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + extension);
    }
    Log.v(""String_Node_Str"",""String_Node_Str"" + gl.glGetString(GL10.GL_RENDERER));
  }
  Resources resources=mContext.getResources();
  Map<Integer,Bitmap> bitmaps=new HashMap<Integer,Bitmap>();
  for (  int resourceID : RESOURCES_TO_LOAD) {
    InputStream is=resources.openRawResource(resourceID);
    Bitmap bitmap=BitmapFactory.decodeStream(is);
    bitmaps.put(resourceID,bitmap);
  }
  mPlayerEntityPainters=new HashMap<Player,Painter[]>();
  for (int player=0; player < Game.NUM_PLAYERS; player++) {
    Painter[] painters=new Painter[Entity.TYPES.length];
switch (player) {
case 0:
      painters[Entity.FIGHTER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Fighter.DIAMETER);
    painters[Entity.BOMBER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Bomber.DIAMETER);
  painters[Entity.FRIGATE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Frigate.DIAMETER);
painters[Entity.FACTORY]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Factory.DIAMETER);
painters[Entity.LASER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Laser.DIAMETER);
painters[Entity.BOMB]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Bomb.DIAMETER);
painters[Entity.MISSILE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Missile.DIAMETER);
break;
case 1:
default :
painters[Entity.FIGHTER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Fighter.DIAMETER);
painters[Entity.BOMBER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Bomber.DIAMETER);
painters[Entity.FRIGATE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Frigate.DIAMETER);
painters[Entity.FACTORY]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Factory.DIAMETER);
painters[Entity.LASER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Laser.DIAMETER);
painters[Entity.BOMB]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Bomb.DIAMETER);
painters[Entity.MISSILE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Missile.DIAMETER);
break;
}
mPlayerEntityPainters.put(mGame.mPlayers[player],painters);
}
mHighlight=Painter.Create(gl,mVBOSupport,bitmaps.get(R.drawable.white20));
for (Bitmap bitmap : bitmaps.values()) {
bitmap.recycle();
}
mBackgroundPainter=null;
}","@Override public void onSurfaceCreated(GL10 gl,EGLConfig config){
  gl.glEnable(GL10.GL_TEXTURE_2D);
  gl.glShadeModel(GL10.GL_SMOOTH);
  gl.glClearColor(0.0f,0.0f,0.0f,0.5f);
  gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT,GL10.GL_NICEST);
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  gl.glTexEnvx(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_MODULATE);
  gl.glEnable(GL10.GL_BLEND);
  gl.glBlendFunc(GL10.GL_ONE,GL10.GL_ONE_MINUS_SRC_ALPHA);
{
    Log.v(""String_Node_Str"",""String_Node_Str"" + gl.glGetString(GL10.GL_VERSION));
    Log.v(""String_Node_Str"",""String_Node_Str"");
    String extensions=gl.glGetString(GL10.GL_EXTENSIONS);
    for (    String extension : extensions.split(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + extension);
    }
    Log.v(""String_Node_Str"",""String_Node_Str"" + gl.glGetString(GL10.GL_RENDERER));
  }
  Map<Integer,Bitmap> bitmaps=new HashMap<Integer,Bitmap>();
  for (  int resourceID : RESOURCES_TO_LOAD) {
    bitmaps.put(resourceID,loadBitmap(resourceID));
  }
  mPlayerEntityPainters=new HashMap<Player,Painter[]>();
  for (int player=0; player < Game.NUM_PLAYERS; player++) {
    Painter[] painters=new Painter[Entity.TYPES.length];
switch (player) {
case 0:
      painters[Entity.FIGHTER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Fighter.DIAMETER);
    painters[Entity.BOMBER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Bomber.DIAMETER);
  painters[Entity.FRIGATE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Frigate.DIAMETER);
painters[Entity.FACTORY]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Factory.DIAMETER);
painters[Entity.LASER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Laser.DIAMETER);
painters[Entity.BOMB]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Bomb.DIAMETER);
painters[Entity.MISSILE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Missile.DIAMETER);
break;
case 1:
default :
painters[Entity.FIGHTER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Fighter.DIAMETER);
painters[Entity.BOMBER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Bomber.DIAMETER);
painters[Entity.FRIGATE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Frigate.DIAMETER);
painters[Entity.FACTORY]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Factory.DIAMETER);
painters[Entity.LASER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Laser.DIAMETER);
painters[Entity.BOMB]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Bomb.DIAMETER);
painters[Entity.MISSILE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Missile.DIAMETER);
break;
}
mPlayerEntityPainters.put(mGame.mPlayers[player],painters);
}
mHighlight=Painter.Create(gl,mVBOSupport,bitmaps.get(R.drawable.white20));
for (Bitmap bitmap : bitmaps.values()) {
bitmap.recycle();
}
mBackgroundPainter=null;
}"
83612,"@Override public void onDrawFrame(GL10 gl){
  mGame.update();
  if (mBackgroundPainter != null) {
    mBackgroundPainter.draw(gl,0,0,0f);
  }
 else {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
    gl.glClearColor(BG_RGB[0],BG_RGB[1],BG_RGB[2],1.0f);
  }
  for (  int entityType : ENTITY_LAYERS) {
    for (int i=0; i < Game.NUM_PLAYERS; i++) {
      Player player=mGame.mPlayers[i];
      Painter[] painters=mPlayerEntityPainters.get(player);
      for (      Entity entity : player.mEntities[entityType]) {
        painters[entityType].setCameraRotationDegrees(90 * mRotation);
        painters[entityType].draw(gl,entity);
      }
    }
  }
  for (int player=0; player < Game.NUM_PLAYERS; player++) {
    float dx=mGameWidth / 4;
    float dy=mGameHeight / 4;
    float x=(dx - mGameWidth) / 2;
    float y=(dy - mGameHeight) / 2;
    float buildIndicatorRotation=90 * mRotation;
    if (player == 1) {
      dx=-dx;
      dy=-dy;
      x=-x;
      y=-y;
      buildIndicatorRotation+=180;
    }
    for (int i=0; i < 4; i++) {
      float buildProgress=mGame.mPlayers[player].money / Player.BuildCosts[i];
      if (buildProgress > 1) {
        buildProgress=1;
      }
      float buttonMinX;
      float buttonMaxX;
      float buttonMinY;
      float buttonMaxY;
      float progressMaxX;
      float progressMaxY;
      float halfButtonSize=mButtonSize / 2;
      if (mRotation % 2 == 0) {
        dy=0;
        y=halfButtonSize - (mGameHeight / 2);
        if (player != 0) {
          y=-y;
        }
        buttonMinY=y - (player == 0 ? 1 : -1) * mButtonSize / 2;
        buttonMaxY=y + (player == 0 ? 1 : -1) * mButtonSize / 2;
        buttonMinX=x - dx / 2;
        buttonMaxX=x + dx / 2;
        progressMaxX=buttonMinX + (player == 0 ? 1 : -1) * mButtonSize / 3;
        progressMaxY=buttonMinY + (player == 0 ? 1 : -1) * mButtonSize * buildProgress;
      }
 else {
        dx=0;
        x=(mGameWidth / 2) - halfButtonSize;
        if (player != 0) {
          x=-x;
        }
        buttonMinY=y - dy / 2;
        buttonMaxY=y + dy / 2;
        buttonMinX=x + (player == 0 ? 1 : -1) * mButtonSize / 2;
        buttonMaxX=x - (player == 0 ? 1 : -1) * mButtonSize / 2;
        progressMaxX=buttonMinX - (player == 0 ? 1 : -1) * (mButtonSize * buildProgress);
        progressMaxY=buttonMinY + (player == 0 ? 1 : -1) * mButtonSize / 3;
      }
      if (i == mGame.mPlayers[player].mBuildTarget.ordinal()) {
        mHighlight.drawFillBounds(gl,buttonMinX,buttonMaxX,buttonMinY,buttonMaxY,0);
        mHighlight.drawFillBounds(gl,buttonMinX,progressMaxX,buttonMinY,progressMaxY,0);
      }
      mBuildTargetPainters[i].draw(gl,x,y,buildIndicatorRotation);
      x+=dx;
      y+=dy;
    }
  }
}","@Override public void onDrawFrame(GL10 gl){
  mGame.update();
  if (mBackgroundPainter != null) {
    mBackgroundPainter.draw(gl,0,0,0f);
  }
 else {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
    gl.glClearColor(BG_RGB[0],BG_RGB[1],BG_RGB[2],1.0f);
  }
  for (  int entityType : ENTITY_LAYERS) {
    for (int i=0; i < Game.NUM_PLAYERS; i++) {
      Player player=mGame.mPlayers[i];
      Painter[] painters=mPlayerEntityPainters.get(player);
      for (      Entity entity : player.mEntities[entityType]) {
        painters[entityType].setCameraRotationDegrees(90 * mRotation);
        painters[entityType].draw(gl,entity);
      }
    }
  }
  for (int player=0; player < Game.NUM_PLAYERS; player++) {
    float dx=mGameWidth / 4;
    float dy=mGameHeight / 4;
    float x=(dx - mGameWidth) / 2;
    float y=(dy - mGameHeight) / 2;
    float buildIndicatorRotation=90 * mRotation;
    if ((player == 1) ^ (mRotation >= 2)) {
      dx=-dx;
      dy=-dy;
      x=-x;
      y=-y;
    }
    if (player == 1) {
      buildIndicatorRotation+=180;
    }
    for (int i=0; i < 4; i++) {
      float buildProgress=mGame.mPlayers[player].money / Player.BuildCosts[i];
      if (buildProgress > 1) {
        buildProgress=1;
      }
      float buttonMinX;
      float buttonMaxX;
      float buttonMinY;
      float buttonMaxY;
      float progressMaxX;
      float progressMaxY;
      float flip=((player == 1) ^ (mRotation >= 2)) ? -1 : 1;
      float halfButtonSize=mButtonSize / 2;
      if (mRotation % 2 == 0) {
        dy=0;
        y=flip * (halfButtonSize - (mGameHeight / 2));
        buttonMinY=y - flip * mButtonSize / 2;
        buttonMaxY=y + flip * mButtonSize / 2;
        buttonMinX=x - dx / 2;
        buttonMaxX=x + dx / 2;
        progressMaxX=buttonMinX + flip * mButtonSize / 3;
        progressMaxY=buttonMinY + flip * mButtonSize * buildProgress;
      }
 else {
        dx=0;
        x=(mGameWidth / 2) - halfButtonSize;
        if (player != 0) {
          x=-x;
        }
        buttonMinY=y - dy / 2;
        buttonMaxY=y + dy / 2;
        buttonMinX=x + flip * mButtonSize / 2;
        buttonMaxX=x - flip * mButtonSize / 2;
        progressMaxX=buttonMinX - flip * (mButtonSize * buildProgress);
        progressMaxY=buttonMinY + flip * mButtonSize / 3;
      }
      if (i == mGame.mPlayers[player].mBuildTarget.ordinal()) {
        mHighlight.drawFillBounds(gl,buttonMinX,buttonMaxX,buttonMinY,buttonMaxY,0);
        mHighlight.drawFillBounds(gl,buttonMinX,progressMaxX,buttonMinY,progressMaxY,0);
      }
      mBuildTargetPainters[i].draw(gl,x,y,buildIndicatorRotation);
      x+=dx;
      y+=dy;
    }
  }
}"
83613,"@Override public boolean onTouchEvent(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_POINTER_DOWN) {
    Log.i(""String_Node_Str"",String.format(""String_Node_Str"",event.getPointerCount()));
    if (mGame.getState() == Game.State.IN_PROGRESS) {
      for (int i=0; i < event.getPointerCount(); i++) {
        float x=event.getX(i);
        float y=event.getY(i);
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",x,y));
        int numBuildTargets=Player.BuildTarget.values().length - 1;
        int selection;
        int player=-1;
        if (mRotation % 2 == 0) {
          if (y >= getHeight() * 0.67) {
            player=0;
          }
 else           if (y < getHeight() * 0.33) {
            player=1;
          }
          selection=(int)(x * numBuildTargets / getWidth());
        }
 else {
          if (x >= getWidth() * 0.67) {
            player=0;
          }
 else           if (x < getWidth() * 0.33) {
            player=1;
          }
          selection=(numBuildTargets - 1) - (int)(y * numBuildTargets / getHeight());
        }
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",selection));
        if (player == 1) {
          selection=(numBuildTargets - 1) - selection;
        }
        if (player != -1) {
          mGame.setBuildTarget(player,Player.BuildTarget.values()[selection]);
        }
      }
    }
 else {
      mGame.restart();
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_POINTER_DOWN) {
    Log.i(""String_Node_Str"",String.format(""String_Node_Str"",event.getPointerCount()));
    if (mGame.getState() == Game.State.IN_PROGRESS) {
      for (int i=0; i < event.getPointerCount(); i++) {
        float x=event.getX(i);
        float y=event.getY(i);
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",x,y));
        int numBuildTargets=Player.BuildTarget.values().length - 1;
        int selection;
        int player=-1;
        int xGridPos=(int)(x * 4 / getWidth());
        int yGridPos=(int)(y * 4 / getHeight());
        if (mRotation % 2 == 0) {
          player=((mRotation == 0) ^ (yGridPos < 2)) ? 0 : 1;
          selection=(int)(x * numBuildTargets / getWidth());
        }
 else {
          player=((mRotation == 1) ^ (xGridPos < 2)) ? 0 : 1;
          selection=(numBuildTargets - 1) - (int)(y * numBuildTargets / getHeight());
        }
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",selection));
        if ((player == 1) ^ (mRotation >= 2)) {
          selection=(numBuildTargets - 1) - selection;
        }
        if (player != -1) {
          mGame.setBuildTarget(player,Player.BuildTarget.values()[selection]);
        }
      }
    }
 else {
      mGame.restart();
    }
  }
  return true;
}"
83614,"@Override public void onDrawFrame(GL10 gl){
  mGame.update();
  if (mBackgroundPainter != null) {
    mBackgroundPainter.draw(gl,0,0,0f);
  }
 else {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
    gl.glClearColor(BG_RGB[0],BG_RGB[1],BG_RGB[2],1.0f);
  }
  for (  int entityType : ENTITY_LAYERS) {
    for (int i=0; i < Game.NUM_PLAYERS; i++) {
      Player player=mGame.mPlayers[i];
      Painter[] painters=mPlayerEntityPainters.get(player);
      for (      Entity entity : player.mEntities[entityType]) {
        painters[entityType].setCameraRotationDegrees(90 * mRotation);
        painters[entityType].draw(gl,entity);
      }
    }
  }
  float dx=mGameWidth / 4;
  float dy=mGameHeight / 4;
  float x=(dx - mGameWidth) / 2;
  float y=(dy - mGameHeight) / 2;
  if (mRotation % 2 == 0) {
    dy=0;
    y=(mButtonSize - mGameHeight) / 2;
  }
 else {
    dx=0;
    x=(mGameWidth - mButtonSize) / 2;
  }
  for (int i=0; i < 4; i++) {
    if (i == mGame.mPlayers[0].mBuildTarget.ordinal()) {
      mHighlight.draw(gl,x,y,90 * mRotation);
    }
    mBuildTargetPainters[i].draw(gl,x,y,90 * mRotation);
    x+=dx;
    y+=dy;
  }
}","@Override public void onDrawFrame(GL10 gl){
  mGame.update();
  if (mBackgroundPainter != null) {
    mBackgroundPainter.draw(gl,0,0,0f);
  }
 else {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
    gl.glClearColor(BG_RGB[0],BG_RGB[1],BG_RGB[2],1.0f);
  }
  for (  int entityType : ENTITY_LAYERS) {
    for (int i=0; i < Game.NUM_PLAYERS; i++) {
      Player player=mGame.mPlayers[i];
      Painter[] painters=mPlayerEntityPainters.get(player);
      for (      Entity entity : player.mEntities[entityType]) {
        painters[entityType].setCameraRotationDegrees(90 * mRotation);
        painters[entityType].draw(gl,entity);
      }
    }
  }
  float dx=mGameWidth / 4;
  float dy=mGameHeight / 4;
  float x=(dx - mGameWidth) / 2;
  float y=(dy - mGameHeight) / 2;
  for (int i=0; i < 4; i++) {
    float buildProgress=mGame.mPlayers[0].money / Player.BuildCosts[i];
    if (buildProgress > 1) {
      buildProgress=1;
    }
    float buttonMinX;
    float buttonMaxX;
    float buttonMinY;
    float buttonMaxY;
    float progressMaxX;
    float progressMaxY;
    float halfButtonSize=mButtonSize / 2;
    if (mRotation % 2 == 0) {
      dy=0;
      y=halfButtonSize - (mGameHeight / 2);
      buttonMinY=y - mButtonSize / 2;
      buttonMaxY=y + mButtonSize / 2;
      buttonMinX=x - dx / 2;
      buttonMaxX=x + dx / 2;
      progressMaxX=buttonMinX + mButtonSize / 3;
      progressMaxY=buttonMinY + mButtonSize * buildProgress;
    }
 else {
      dx=0;
      x=(mGameWidth / 2) - halfButtonSize;
      buttonMinY=y - dy / 2;
      buttonMaxY=y + dy / 2;
      buttonMinX=x + mButtonSize / 2;
      buttonMaxX=x - mButtonSize / 2;
      progressMaxX=buttonMinX - (mButtonSize * buildProgress);
      progressMaxY=buttonMinY + mButtonSize / 3;
    }
    if (i == mGame.mPlayers[0].mBuildTarget.ordinal()) {
      mHighlight.drawFillBounds(gl,buttonMinX,buttonMaxX,buttonMinY,buttonMaxY,0);
      mHighlight.drawFillBounds(gl,buttonMinX,progressMaxX,buttonMinY,progressMaxY,0);
    }
    mBuildTargetPainters[i].draw(gl,x,y,90 * mRotation);
    x+=dx;
    y+=dy;
  }
}"
83615,"@Override public void onSurfaceChanged(GL10 gl,int width,int height){
  gl.glViewport(0,0,width,height);
  Log.v(Pax.TAG,String.format(""String_Node_Str"",width,height));
  gl.glMatrixMode(GL10.GL_PROJECTION);
  gl.glLoadIdentity();
  mWidth=width;
  mHeight=height;
  float maxDimension=Math.max(width,height);
  mGameWidth=GAME_VIEW_SIZE * width / maxDimension;
  mGameHeight=GAME_VIEW_SIZE * height / maxDimension;
  float halfX=mGameWidth / 2;
  float halfY=mGameHeight / 2;
  GLU.gluOrtho2D(gl,-halfX,halfX,-halfY,halfY);
  gl.glMatrixMode(GL10.GL_MODELVIEW);
  gl.glLoadIdentity();
  float highlightWidth=Math.min(mGameWidth,mGameHeight) / 4;
  mButtonSize=Math.max(mGameWidth,mGameHeight) / 15;
  Resources res=mContext.getResources();
  if (Pax.BACKGROUND_IMAGE) {
    mBackgroundPainter=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.background),Math.max(mGameWidth,mGameHeight));
  }
  mHighlight=Painter.CreateSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.white20),highlightWidth,mButtonSize);
  mBuildTargetPainters=new Painter[4];
  mBuildTargetPainters[0]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.fighter_outline),mButtonSize);
  mBuildTargetPainters[1]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.bomber_outline),mButtonSize);
  mBuildTargetPainters[2]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.frigate_outline),mButtonSize);
  mBuildTargetPainters[3]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.upgrade_outline),mButtonSize);
}","@Override public void onSurfaceChanged(GL10 gl,int width,int height){
  gl.glViewport(0,0,width,height);
  Log.v(Pax.TAG,String.format(""String_Node_Str"",width,height));
  gl.glMatrixMode(GL10.GL_PROJECTION);
  gl.glLoadIdentity();
  mWidth=width;
  mHeight=height;
  float maxDimension=Math.max(width,height);
  mGameWidth=GAME_VIEW_SIZE * width / maxDimension;
  mGameHeight=GAME_VIEW_SIZE * height / maxDimension;
  float halfX=mGameWidth / 2;
  float halfY=mGameHeight / 2;
  GLU.gluOrtho2D(gl,-halfX,halfX,-halfY,halfY);
  gl.glMatrixMode(GL10.GL_MODELVIEW);
  gl.glLoadIdentity();
  float highlightWidth=Math.min(mGameWidth,mGameHeight) / 4;
  mButtonSize=Math.max(mGameWidth,mGameHeight) / 15;
  Resources res=mContext.getResources();
  if (Pax.BACKGROUND_IMAGE) {
    mBackgroundPainter=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.background),Math.max(mGameWidth,mGameHeight));
  }
  mBuildTargetPainters=new Painter[4];
  mBuildTargetPainters[0]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.fighter_outline),mButtonSize);
  mBuildTargetPainters[1]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.bomber_outline),mButtonSize);
  mBuildTargetPainters[2]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.frigate_outline),mButtonSize);
  mBuildTargetPainters[3]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.upgrade_outline),mButtonSize);
}"
83616,"@Override public void onSurfaceCreated(GL10 gl,EGLConfig config){
  gl.glEnable(GL10.GL_TEXTURE_2D);
  gl.glShadeModel(GL10.GL_SMOOTH);
  gl.glClearColor(0.0f,0.0f,0.0f,0.5f);
  gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT,GL10.GL_NICEST);
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  gl.glTexEnvx(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_MODULATE);
  gl.glEnable(GL10.GL_BLEND);
  gl.glBlendFunc(GL10.GL_ONE,GL10.GL_ONE_MINUS_SRC_ALPHA);
{
    Log.v(""String_Node_Str"",""String_Node_Str"" + gl.glGetString(GL10.GL_VERSION));
    Log.v(""String_Node_Str"",""String_Node_Str"");
    String extensions=gl.glGetString(GL10.GL_EXTENSIONS);
    for (    String extension : extensions.split(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + extension);
    }
    Log.v(""String_Node_Str"",""String_Node_Str"" + gl.glGetString(GL10.GL_RENDERER));
  }
  Resources resources=mContext.getResources();
  Map<Integer,Bitmap> bitmaps=new HashMap<Integer,Bitmap>();
  for (  int resourceID : RESOURCES_TO_LOAD) {
    bitmaps.put(resourceID,BitmapFactory.decodeResource(resources,resourceID));
  }
  mPlayerEntityPainters=new HashMap<Player,Painter[]>();
  for (int player=0; player < Game.NUM_PLAYERS; player++) {
    Painter[] painters=new Painter[Entity.TYPES.length];
switch (player) {
case 0:
      painters[Entity.FIGHTER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Fighter.DIAMETER);
    painters[Entity.BOMBER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Bomber.DIAMETER);
  painters[Entity.FRIGATE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Frigate.DIAMETER);
painters[Entity.FACTORY]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Factory.DIAMETER);
break;
case 1:
default :
painters[Entity.FIGHTER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Fighter.DIAMETER);
painters[Entity.BOMBER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Bomber.DIAMETER);
painters[Entity.FRIGATE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Frigate.DIAMETER);
painters[Entity.FACTORY]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Factory.DIAMETER);
break;
}
painters[Entity.LASER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.laser),Laser.DIAMETER);
painters[Entity.BOMB]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.bomb),Bomb.DIAMETER);
painters[Entity.MISSILE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.missile),Missile.DIAMETER);
mPlayerEntityPainters.put(mGame.mPlayers[player],painters);
}
for (Bitmap bitmap : bitmaps.values()) {
bitmap.recycle();
}
mBackgroundPainter=null;
}","@Override public void onSurfaceCreated(GL10 gl,EGLConfig config){
  gl.glEnable(GL10.GL_TEXTURE_2D);
  gl.glShadeModel(GL10.GL_SMOOTH);
  gl.glClearColor(0.0f,0.0f,0.0f,0.5f);
  gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT,GL10.GL_NICEST);
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  gl.glTexEnvx(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_MODULATE);
  gl.glEnable(GL10.GL_BLEND);
  gl.glBlendFunc(GL10.GL_ONE,GL10.GL_ONE_MINUS_SRC_ALPHA);
{
    Log.v(""String_Node_Str"",""String_Node_Str"" + gl.glGetString(GL10.GL_VERSION));
    Log.v(""String_Node_Str"",""String_Node_Str"");
    String extensions=gl.glGetString(GL10.GL_EXTENSIONS);
    for (    String extension : extensions.split(""String_Node_Str"")) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + extension);
    }
    Log.v(""String_Node_Str"",""String_Node_Str"" + gl.glGetString(GL10.GL_RENDERER));
  }
  Resources resources=mContext.getResources();
  Map<Integer,Bitmap> bitmaps=new HashMap<Integer,Bitmap>();
  for (  int resourceID : RESOURCES_TO_LOAD) {
    bitmaps.put(resourceID,BitmapFactory.decodeResource(resources,resourceID));
  }
  mPlayerEntityPainters=new HashMap<Player,Painter[]>();
  for (int player=0; player < Game.NUM_PLAYERS; player++) {
    Painter[] painters=new Painter[Entity.TYPES.length];
switch (player) {
case 0:
      painters[Entity.FIGHTER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Fighter.DIAMETER);
    painters[Entity.BOMBER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Bomber.DIAMETER);
  painters[Entity.FRIGATE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Frigate.DIAMETER);
painters[Entity.FACTORY]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohblue),Factory.DIAMETER);
break;
case 1:
default :
painters[Entity.FIGHTER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Fighter.DIAMETER);
painters[Entity.BOMBER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Bomber.DIAMETER);
painters[Entity.FRIGATE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Frigate.DIAMETER);
painters[Entity.FACTORY]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.ohred),Factory.DIAMETER);
break;
}
painters[Entity.LASER]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.laser),Laser.DIAMETER);
painters[Entity.BOMB]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.bomb),Bomb.DIAMETER);
painters[Entity.MISSILE]=Painter.CreateMinSize(gl,mVBOSupport,bitmaps.get(R.drawable.missile),Missile.DIAMETER);
mPlayerEntityPainters.put(mGame.mPlayers[player],painters);
}
mHighlight=Painter.Create(gl,mVBOSupport,bitmaps.get(R.drawable.white20));
for (Bitmap bitmap : bitmaps.values()) {
bitmap.recycle();
}
mBackgroundPainter=null;
}"
83617,"@Override public boolean onTouchEvent(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_POINTER_DOWN) {
    Log.i(""String_Node_Str"",String.format(""String_Node_Str"",event.getPointerCount()));
    if (mGame.getState() == Game.State.IN_PROGRESS) {
      for (int i=0; i < event.getPointerCount(); i++) {
        float x=event.getX(i);
        float y=event.getY(i);
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",x,y));
        int numBuildTargets=Player.BuildTarget.values().length - 1;
        int selection;
        if (mRotation % 2 == 0) {
          selection=(int)(x * numBuildTargets / getWidth());
        }
 else {
          selection=(numBuildTargets - 1) - (int)(y * numBuildTargets / getHeight());
        }
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",selection));
        Player.BuildTarget buildTarget=Player.BuildTarget.NONE;
        if (selection < numBuildTargets) {
          buildTarget=Player.BuildTarget.values()[selection];
        }
        mGame.setBuildTarget(0,buildTarget);
      }
    }
 else {
      mGame.restart();
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_POINTER_DOWN) {
    Log.i(""String_Node_Str"",String.format(""String_Node_Str"",event.getPointerCount()));
    if (mGame.getState() == Game.State.IN_PROGRESS) {
      for (int i=0; i < event.getPointerCount(); i++) {
        float x=event.getX(i);
        float y=event.getY(i);
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",x,y));
        int numBuildTargets=Player.BuildTarget.values().length - 1;
        int selection=numBuildTargets;
        if (mRotation % 2 == 0) {
          if (y >= getHeight() * 0.67) {
            selection=(int)(x * numBuildTargets / getWidth());
          }
        }
 else {
          if (x >= getWidth() * 0.67) {
            selection=(numBuildTargets - 1) - (int)(y * numBuildTargets / getHeight());
          }
        }
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",selection));
        if (selection < numBuildTargets) {
          mGame.setBuildTarget(0,Player.BuildTarget.values()[selection]);
        }
      }
    }
 else {
      mGame.restart();
    }
  }
  return true;
}"
83618,"@Override public void onDrawFrame(GL10 gl){
  mGame.update();
  if (mBackgroundPainter != null) {
    mBackgroundPainter.draw(gl,0,0,0f);
  }
 else {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
    gl.glClearColor(BG_RGB[0],BG_RGB[1],BG_RGB[2],1.0f);
  }
  for (  int entityType : ENTITY_LAYERS) {
    for (int i=0; i < Game.NUM_PLAYERS; i++) {
      Player player=mGame.mPlayers[i];
      Painter[] painters=mPlayerEntityPainters.get(player);
      for (      Entity entity : player.mEntities[entityType]) {
        painters[entityType].draw(gl,entity);
      }
    }
  }
}","@Override public void onDrawFrame(GL10 gl){
  mGame.update();
  if (mBackgroundPainter != null) {
    mBackgroundPainter.draw(gl,0,0,0f);
  }
 else {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
    gl.glClearColor(BG_RGB[0],BG_RGB[1],BG_RGB[2],1.0f);
  }
  for (  int entityType : ENTITY_LAYERS) {
    for (int i=0; i < Game.NUM_PLAYERS; i++) {
      Player player=mGame.mPlayers[i];
      Painter[] painters=mPlayerEntityPainters.get(player);
      for (      Entity entity : player.mEntities[entityType]) {
        painters[entityType].setCameraRotationDegrees(90 * mRotation);
        painters[entityType].draw(gl,entity);
      }
    }
  }
  float dx=mGameWidth / 4;
  float dy=mGameHeight / 4;
  float x=(dx - mGameWidth) / 2;
  float y=(dy - mGameHeight) / 2;
  if (mRotation % 2 == 0) {
    dy=0;
    y=(mButtonSize - mGameHeight) / 2;
  }
 else {
    dx=0;
    x=(mGameWidth - mButtonSize) / 2;
  }
  for (int i=0; i < 4; i++) {
    if (i == mGame.mPlayers[0].mBuildTarget.ordinal()) {
      mHighlight.draw(gl,x,y,90 * mRotation);
    }
    mBuildTargetPainters[i].draw(gl,x,y,90 * mRotation);
    x+=dx;
    y+=dy;
  }
}"
83619,"@Override public void onSurfaceChanged(GL10 gl,int width,int height){
  gl.glViewport(0,0,width,height);
  Log.v(Pax.TAG,String.format(""String_Node_Str"",width,height));
  if (Pax.BACKGROUND_IMAGE) {
    mBackgroundPainter=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(mContext.getResources(),R.drawable.background),Math.max(width,height));
  }
  gl.glMatrixMode(GL10.GL_PROJECTION);
  gl.glLoadIdentity();
  mWidth=width;
  mHeight=height;
  float halfScale=Math.max(width,height) / (GAME_VIEW_SIZE * 2);
  float halfX=width * halfScale;
  float halfY=height * halfScale;
  GLU.gluOrtho2D(gl,-halfX,halfX,-halfY,halfY);
  gl.glMatrixMode(GL10.GL_MODELVIEW);
  gl.glLoadIdentity();
}","@Override public void onSurfaceChanged(GL10 gl,int width,int height){
  gl.glViewport(0,0,width,height);
  Log.v(Pax.TAG,String.format(""String_Node_Str"",width,height));
  gl.glMatrixMode(GL10.GL_PROJECTION);
  gl.glLoadIdentity();
  mWidth=width;
  mHeight=height;
  float maxDimension=Math.max(width,height);
  mGameWidth=GAME_VIEW_SIZE * width / maxDimension;
  mGameHeight=GAME_VIEW_SIZE * height / maxDimension;
  float halfX=mGameWidth / 2;
  float halfY=mGameHeight / 2;
  GLU.gluOrtho2D(gl,-halfX,halfX,-halfY,halfY);
  gl.glMatrixMode(GL10.GL_MODELVIEW);
  gl.glLoadIdentity();
  float highlightWidth=Math.min(mGameWidth,mGameHeight) / 4;
  mButtonSize=Math.max(mGameWidth,mGameHeight) / 15;
  Resources res=mContext.getResources();
  if (Pax.BACKGROUND_IMAGE) {
    mBackgroundPainter=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.background),Math.max(mGameWidth,mGameHeight));
  }
  mHighlight=Painter.CreateSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.white20),highlightWidth,mButtonSize);
  mBuildTargetPainters=new Painter[4];
  mBuildTargetPainters[0]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.fighter_outline),mButtonSize);
  mBuildTargetPainters[1]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.bomber_outline),mButtonSize);
  mBuildTargetPainters[2]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.frigate_outline),mButtonSize);
  mBuildTargetPainters[3]=Painter.CreateMinSize(gl,mVBOSupport,BitmapFactory.decodeResource(res,R.drawable.upgrade_outline),mButtonSize);
}"
83620,"@Override public boolean onTouchEvent(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_POINTER_DOWN) {
    Log.i(""String_Node_Str"",String.format(""String_Node_Str"",event.getPointerCount()));
    if (mGame.getState() == Game.State.IN_PROGRESS) {
      for (int i=0; i < event.getPointerCount(); i++) {
        float x=event.getX(i);
        float y=event.getY(i);
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",x,y));
        int numBuildTargets=Player.BuildTarget.values().length - 1;
        int selection=(int)(x * numBuildTargets / getWidth());
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",selection));
        Player.BuildTarget buildTarget=Player.BuildTarget.NONE;
        if (selection < numBuildTargets) {
          buildTarget=Player.BuildTarget.values()[selection];
        }
        mGame.setBuildTarget(0,buildTarget);
      }
    }
 else {
      mGame.restart();
    }
  }
  return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_POINTER_DOWN) {
    Log.i(""String_Node_Str"",String.format(""String_Node_Str"",event.getPointerCount()));
    if (mGame.getState() == Game.State.IN_PROGRESS) {
      for (int i=0; i < event.getPointerCount(); i++) {
        float x=event.getX(i);
        float y=event.getY(i);
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",x,y));
        int numBuildTargets=Player.BuildTarget.values().length - 1;
        int selection;
        if (mRotation % 2 == 0) {
          selection=(int)(x * numBuildTargets / getWidth());
        }
 else {
          selection=(numBuildTargets - 1) - (int)(y * numBuildTargets / getHeight());
        }
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",selection));
        Player.BuildTarget buildTarget=Player.BuildTarget.NONE;
        if (selection < numBuildTargets) {
          buildTarget=Player.BuildTarget.values()[selection];
        }
        mGame.setBuildTarget(0,buildTarget);
      }
    }
 else {
      mGame.restart();
    }
  }
  return true;
}"
83621,"public GameView(Activity activity,Game game){
  super(activity);
  mGame=game;
  mContext=activity;
  mRenderer=new GameRenderer(activity,mGame);
  setEGLConfigChooser(false);
  setRenderer(mRenderer);
}","public GameView(Activity activity,Game game){
  super(activity);
  mGame=game;
  mContext=activity;
  mRenderer=new GameRenderer(activity,mGame);
  setEGLConfigChooser(false);
  setRenderer(mRenderer);
  updateRotation();
}"
83622,"public void draw(GL10 gl,float moveX,float moveY,float rotateDegrees){
  gl.glLoadIdentity();
  gl.glFrontFace(GL10.GL_CW);
  gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureID);
  if (mVBOSupport) {
    gl.glEnableClientState(GL10.GL_TEXTURE_2D);
    gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
    gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
    GL11 gl11=(GL11)gl;
    gl11.glBindBuffer(GL11.GL_ARRAY_BUFFER,mVertexBufferObjectID);
    gl11.glVertexPointer(2,GL10.GL_FLOAT,0,0);
    gl11.glBindBuffer(GL11.GL_ARRAY_BUFFER,mTextureBufferObjectID);
    gl11.glTexCoordPointer(2,GL10.GL_FLOAT,0,0);
    gl11.glBindBuffer(GL11.GL_ELEMENT_ARRAY_BUFFER,mElementBufferObjectID);
  }
 else {
    gl.glVertexPointer(2,GL10.GL_FLOAT,0,vertexBuffer);
    gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,textureBuffer);
  }
  gl.glTranslatef(moveX,moveY,0f);
  gl.glRotatef(rotateDegrees,0f,0f,1f);
  gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,vertices.length / 2);
}","public void draw(GL10 gl,float moveX,float moveY,float rotateDegrees){
  gl.glLoadIdentity();
  gl.glRotatef(mCameraRotationDegrees,0f,0f,1f);
  gl.glFrontFace(GL10.GL_CW);
  gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureID);
  if (mVBOSupport) {
    gl.glEnableClientState(GL10.GL_TEXTURE_2D);
    gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
    gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
    GL11 gl11=(GL11)gl;
    gl11.glBindBuffer(GL11.GL_ARRAY_BUFFER,mVertexBufferObjectID);
    gl11.glVertexPointer(2,GL10.GL_FLOAT,0,0);
    gl11.glBindBuffer(GL11.GL_ARRAY_BUFFER,mTextureBufferObjectID);
    gl11.glTexCoordPointer(2,GL10.GL_FLOAT,0,0);
    gl11.glBindBuffer(GL11.GL_ELEMENT_ARRAY_BUFFER,mElementBufferObjectID);
  }
 else {
    gl.glVertexPointer(2,GL10.GL_FLOAT,0,vertexBuffer);
    gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,textureBuffer);
  }
  gl.glTranslatef(moveX,moveY,0f);
  gl.glRotatef(rotateDegrees,0f,0f,1f);
  gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,vertices.length / 2);
}"
83623,"private int addShip(int type){
  int id=Entity.NO_ENTITY;
  Ship ship=null;
switch (type) {
case Entity.FIGHTER:
    ship=new Fighter();
  break;
case Entity.BOMBER:
ship=new Bomber();
break;
case Entity.FRIGATE:
ship=new Frigate();
break;
case Entity.FACTORY:
ship=new Factory();
break;
}
if (ship != null) {
id=mEntities[type].add(ship);
if (type != Entity.FACTORY) {
Ship factory=(Ship)mEntities[Entity.FACTORY].get(0);
float spawnX, spawnY;
spawnX=factory.body.center.x + (float)(55 * Math.cos(factory.heading));
spawnY=factory.body.center.y + (float)(55 * Math.sin(factory.heading));
ship.body.center.set(spawnX,spawnY);
ship.heading=factory.heading;
}
 else {
float offset=(float)Math.PI / 40;
float orbitRadius=320 / 3;
float spacing=(float)(2 * Math.PI / totalPlayers);
float theta=spacing * (float)(playerNo);
float factoryX=(float)(orbitRadius * Math.cos(theta));
float factoryY=(float)(orbitRadius * Math.sin(theta));
ship.body.center.set(factoryX,factoryY);
ship.heading=theta - (float)Math.PI / 2 - offset;
}
}
return id;
}","private int addShip(int type){
  int id=Entity.NO_ENTITY;
  Ship ship=null;
switch (type) {
case Entity.FIGHTER:
    ship=new Fighter();
  break;
case Entity.BOMBER:
ship=new Bomber();
break;
case Entity.FRIGATE:
ship=new Frigate();
break;
case Entity.FACTORY:
ship=new Factory();
break;
}
if (ship != null) {
id=mEntities[type].add(ship);
if (type != Entity.FACTORY) {
Ship factory=(Ship)mEntities[Entity.FACTORY].get(0);
float spawnX, spawnY;
spawnX=factory.body.center.x + (float)(55 * Math.cos(factory.heading));
spawnY=factory.body.center.y + (float)(55 * Math.sin(factory.heading));
ship.body.center.set(spawnX,spawnY);
ship.heading=factory.heading;
}
 else {
float offset=(float)Math.PI / 40;
float orbitRadius=GameRenderer.GAME_VIEW_SIZE / 4;
float spacing=(float)(2 * Math.PI / totalPlayers);
float theta=spacing * (float)(playerNo) - (float)(Math.PI / 2);
float factoryX=(float)(orbitRadius * Math.cos(theta));
float factoryY=(float)(orbitRadius * Math.sin(theta));
ship.body.center.set(factoryX,factoryY);
ship.heading=theta - (float)Math.PI / 2 - offset;
}
}
return id;
}"
83624,"public void updateOrientation(int orientation){
  if (orientation != mOrientation) {
    mOrientation=orientation;
    mAngleFudge=(mOrientation == Configuration.ORIENTATION_LANDSCAPE) ? (float)(-Math.PI / 2) : 0.0f;
    int temp=mWidth;
    mWidth=mHeight;
    mHeight=temp;
  }
}","public void updateOrientation(){
  Display display=((WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
  mRotation=display.getRotation();
switch (mRotation) {
case Surface.ROTATION_0:
    mAngleFudge=0;
  break;
case Surface.ROTATION_90:
mAngleFudge=(float)-Math.PI * 0.5f;
break;
case Surface.ROTATION_180:
mAngleFudge=(float)-Math.PI;
break;
case Surface.ROTATION_270:
mAngleFudge=(float)-Math.PI * 1.5f;
break;
}
mWidth=display.getWidth();
mHeight=display.getHeight();
}"
83625,"@Override protected void onDraw(Canvas canvas){
  mGame.update();
  Matrix matrix=new Matrix();
{
    float scaleX=(float)mWidth / mBackgroundBitmap.getWidth();
    float scaleY=(float)mHeight / mBackgroundBitmap.getHeight();
    float scale=Math.max(scaleX,scaleY);
    matrix.postScale(scale,scale);
    matrix.postTranslate((scaleX - scale) * (mBackgroundBitmap.getWidth() / 2),(scaleY - scale) * (mBackgroundBitmap.getHeight() / 2));
    canvas.drawBitmap(mBackgroundBitmap,matrix,mBitmapPaint);
  }
  for (  int entityType : ENTITY_LAYERS) {
    float radius=Entity.Radii[entityType];
    radius*=2;
    float minXDrawable=0 - radius;
    float maxXDrawable=mWidth + radius;
    float minYDrawable=0 - radius;
    float maxYDrawable=mHeight + radius;
    for (int i=0; i < Game.NUM_PLAYERS; i++) {
      Player player=mGame.mPlayers[i];
      Bitmap[] entityBitmaps=mPlayerEntityBitmaps.get(player);
      for (      Entity entity : player.mEntities[entityType]) {
        if (entity.body.center.x > minXDrawable && entity.body.center.x < maxXDrawable && entity.body.center.y > minYDrawable && entity.body.center.y < maxYDrawable) {
          Bitmap bitmap=entityBitmaps[entity.type];
          float posX;
          float posY;
          if (mOrientation == Configuration.ORIENTATION_PORTRAIT) {
            posX=entity.body.center.x;
            posY=entity.body.center.y;
          }
 else {
            posY=320 - entity.body.center.x;
            posX=entity.body.center.y;
          }
          if (bitmap != null) {
            matrix.reset();
            float scaleX=entity.diameter / bitmap.getWidth();
            float scaleY=entity.diameter / bitmap.getHeight();
            float scale=Math.max(scaleX,scaleY);
            matrix.postScale(scale,scale);
            matrix.postTranslate(posX - (scale / scaleX) * entity.radius,posY - (scale / scaleY) * entity.radius);
            matrix.postRotate((float)Math.toDegrees(entity.heading + mAngleFudge),posX,posY);
            canvas.drawBitmap(bitmap,matrix,mBitmapPaint);
          }
          canvas.drawCircle(posX,posY,entity.radius,mBoundsPaints[i]);
        }
      }
    }
  }
}","@Override protected void onDraw(Canvas canvas){
  mGame.update();
  if (mWidth == 0) {
    updateOrientation();
  }
  Matrix matrix=new Matrix();
{
    float scaleX=(float)mWidth / mBackgroundBitmap.getWidth();
    float scaleY=(float)mHeight / mBackgroundBitmap.getHeight();
    float scale=Math.max(scaleX,scaleY);
    matrix.postScale(scale,scale);
    matrix.postTranslate((scaleX - scale) * (mBackgroundBitmap.getWidth() / 2),(scaleY - scale) * (mBackgroundBitmap.getHeight() / 2));
    canvas.drawBitmap(mBackgroundBitmap,matrix,mBitmapPaint);
  }
  for (  int entityType : ENTITY_LAYERS) {
    float radius=Entity.Radii[entityType];
    radius*=2;
    float minXDrawable=0 - radius;
    float maxXDrawable=mWidth + radius;
    float minYDrawable=0 - radius;
    float maxYDrawable=mHeight + radius;
    for (int i=0; i < Game.NUM_PLAYERS; i++) {
      Player player=mGame.mPlayers[i];
      Bitmap[] entityBitmaps=mPlayerEntityBitmaps.get(player);
      for (      Entity entity : player.mEntities[entityType]) {
        float posX;
        float posY;
switch (mRotation) {
case Surface.ROTATION_0:
          posX=entity.body.center.x;
        posY=entity.body.center.y;
      break;
case Surface.ROTATION_90:
    posX=entity.body.center.y;
  posY=mHeight - entity.body.center.x;
break;
case Surface.ROTATION_180:
posX=mWidth - entity.body.center.x;
posY=mHeight - entity.body.center.y;
break;
case Surface.ROTATION_270:
default :
posX=mWidth - entity.body.center.y;
posY=entity.body.center.x;
break;
}
if (posX > minXDrawable && posX < maxXDrawable && posY > minYDrawable && posY < maxYDrawable) {
Bitmap bitmap=entityBitmaps[entity.type];
if (bitmap != null) {
matrix.reset();
float scaleX=entity.diameter / bitmap.getWidth();
float scaleY=entity.diameter / bitmap.getHeight();
float scale=Math.max(scaleX,scaleY);
matrix.postScale(scale,scale);
matrix.postTranslate(posX - (scale / scaleX) * entity.radius,posY - (scale / scaleY) * entity.radius);
matrix.postRotate((float)Math.toDegrees(entity.heading + mAngleFudge),posX,posY);
canvas.drawBitmap(bitmap,matrix,mBitmapPaint);
}
canvas.drawCircle(posX,posY,entity.radius,mBoundsPaints[i]);
}
}
}
}
}"
83626,"public GameView(Context context,Game game){
  super(context);
  mGame=game;
  mOrientation=Configuration.ORIENTATION_PORTRAIT;
  mHeight=480;
  mWidth=320;
  mPlayerEntityBitmaps=new HashMap<Player,Bitmap[]>();
  Resources res=getResources();
  for (int i=0; i < Game.NUM_PLAYERS; i++) {
    Bitmap[] playerBitmaps=new Bitmap[Entity.TYPES.length];
switch (i) {
case 0:
      playerBitmaps[Entity.FIGHTER]=BitmapFactory.decodeResource(res,R.drawable.fighter_p1);
    playerBitmaps[Entity.BOMBER]=BitmapFactory.decodeResource(res,R.drawable.bomber_p1);
  playerBitmaps[Entity.FRIGATE]=BitmapFactory.decodeResource(res,R.drawable.frigate_p1);
playerBitmaps[Entity.FACTORY]=BitmapFactory.decodeResource(res,R.drawable.factory_p1);
break;
case 1:
playerBitmaps[Entity.FIGHTER]=BitmapFactory.decodeResource(res,R.drawable.fighter_p2);
playerBitmaps[Entity.BOMBER]=BitmapFactory.decodeResource(res,R.drawable.bomber_p2);
playerBitmaps[Entity.FRIGATE]=BitmapFactory.decodeResource(res,R.drawable.frigate_p2);
playerBitmaps[Entity.FACTORY]=BitmapFactory.decodeResource(res,R.drawable.factory_p2);
break;
}
playerBitmaps[Entity.LASER]=BitmapFactory.decodeResource(res,R.drawable.laser);
playerBitmaps[Entity.BOMB]=BitmapFactory.decodeResource(res,R.drawable.bomb);
playerBitmaps[Entity.MISSILE]=BitmapFactory.decodeResource(res,R.drawable.missile);
mPlayerEntityBitmaps.put(game.mPlayers[i],playerBitmaps);
}
mBackgroundBitmap=BitmapFactory.decodeResource(res,R.drawable.background);
mBoundsPaints=new Paint[2];
mBoundsPaints[0]=new Paint();
mBoundsPaints[1]=new Paint();
mBoundsPaints[0].setARGB(192,0,64,255);
mBoundsPaints[1].setARGB(192,192,0,0);
for (Paint paint : mBoundsPaints) {
paint.setStyle(Paint.Style.STROKE);
paint.setStrokeWidth(2);
}
mLaserPaint=new Paint();
mLaserPaint.setARGB(255,255,255,255);
mLaserPaint.setStyle(Paint.Style.FILL_AND_STROKE);
mBitmapPaint=new Paint(Paint.FILTER_BITMAP_FLAG);
}","public GameView(Context context,Game game){
  super(context);
  mGame=game;
  mContext=context;
  mHeight=0;
  mWidth=0;
  mPlayerEntityBitmaps=new HashMap<Player,Bitmap[]>();
  Resources res=getResources();
  for (int i=0; i < Game.NUM_PLAYERS; i++) {
    Bitmap[] playerBitmaps=new Bitmap[Entity.TYPES.length];
switch (i) {
case 0:
      playerBitmaps[Entity.FIGHTER]=BitmapFactory.decodeResource(res,R.drawable.fighter_p1);
    playerBitmaps[Entity.BOMBER]=BitmapFactory.decodeResource(res,R.drawable.bomber_p1);
  playerBitmaps[Entity.FRIGATE]=BitmapFactory.decodeResource(res,R.drawable.frigate_p1);
playerBitmaps[Entity.FACTORY]=BitmapFactory.decodeResource(res,R.drawable.factory_p1);
break;
case 1:
playerBitmaps[Entity.FIGHTER]=BitmapFactory.decodeResource(res,R.drawable.fighter_p2);
playerBitmaps[Entity.BOMBER]=BitmapFactory.decodeResource(res,R.drawable.bomber_p2);
playerBitmaps[Entity.FRIGATE]=BitmapFactory.decodeResource(res,R.drawable.frigate_p2);
playerBitmaps[Entity.FACTORY]=BitmapFactory.decodeResource(res,R.drawable.factory_p2);
break;
}
playerBitmaps[Entity.LASER]=BitmapFactory.decodeResource(res,R.drawable.laser);
playerBitmaps[Entity.BOMB]=BitmapFactory.decodeResource(res,R.drawable.bomb);
playerBitmaps[Entity.MISSILE]=BitmapFactory.decodeResource(res,R.drawable.missile);
mPlayerEntityBitmaps.put(game.mPlayers[i],playerBitmaps);
}
mBackgroundBitmap=BitmapFactory.decodeResource(res,R.drawable.background);
mBoundsPaints=new Paint[2];
mBoundsPaints[0]=new Paint();
mBoundsPaints[1]=new Paint();
mBoundsPaints[0].setARGB(192,0,64,255);
mBoundsPaints[1].setARGB(192,192,0,0);
for (Paint paint : mBoundsPaints) {
paint.setStyle(Paint.Style.STROKE);
paint.setStrokeWidth(2);
}
mLaserPaint=new Paint();
mLaserPaint.setARGB(255,255,255,255);
mLaserPaint.setStyle(Paint.Style.FILL_AND_STROKE);
mBitmapPaint=new Paint(Paint.FILTER_BITMAP_FLAG);
}"
83627,"@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  mView.updateOrientation(newConfig.orientation);
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  mView.updateOrientation();
}"
83628,"private int addShip(int type){
  int id=Entity.NO_ENTITY;
  Ship ship=null;
switch (type) {
case Entity.FIGHTER:
    ship=new Fighter();
  break;
case Entity.BOMBER:
ship=new Bomber();
break;
case Entity.FRIGATE:
ship=new Frigate();
break;
case Entity.FACTORY:
ship=new Factory();
break;
}
if (ship != null) {
id=mEntities[type].add(ship);
if (type != Entity.FACTORY) {
Ship factory=(Ship)mEntities[Entity.FACTORY].get(0);
float spawnX, spawnY;
spawnX=factory.body.center.x + (float)(55 * Math.cos(factory.heading));
spawnY=factory.body.center.y + (float)(55 * Math.sin(factory.heading));
ship.body.center.set(spawnX,spawnY);
ship.heading=factory.heading;
}
 else {
float factoryX=0, factoryY=0;
float offset=(float)Math.PI / 40;
Display display=((WindowManager)Pax.thisContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
PointF screenSize=new PointF(display.getWidth(),display.getHeight());
float orbitRadius=screenSize.x * 1 / 3;
float spacing=(float)(2 * Math.PI / totalPlayers);
float theta=spacing * (float)(-.5 + playerNo);
factoryX=screenSize.x / 2 + (float)(orbitRadius * Math.cos(theta));
factoryY=screenSize.y / 2 + (float)(orbitRadius * Math.sin(theta));
ship.body.center.set(factoryX,factoryY);
ship.heading=theta - (float)Math.PI / 2 - offset;
}
}
return id;
}","private int addShip(int type){
  int id=Entity.NO_ENTITY;
  Ship ship=null;
switch (type) {
case Entity.FIGHTER:
    ship=new Fighter();
  break;
case Entity.BOMBER:
ship=new Bomber();
break;
case Entity.FRIGATE:
ship=new Frigate();
break;
case Entity.FACTORY:
ship=new Factory();
break;
}
if (ship != null) {
id=mEntities[type].add(ship);
if (type != Entity.FACTORY) {
Ship factory=(Ship)mEntities[Entity.FACTORY].get(0);
float spawnX, spawnY;
spawnX=factory.body.center.x + (float)(55 * Math.cos(factory.heading));
spawnY=factory.body.center.y + (float)(55 * Math.sin(factory.heading));
ship.body.center.set(spawnX,spawnY);
ship.heading=factory.heading;
}
 else {
float factoryX=0, factoryY=0;
float offset=(float)Math.PI / 40;
Display display=((WindowManager)Pax.thisContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
float screenX=Math.min(display.getWidth(),display.getHeight());
float screenY=Math.max(display.getWidth(),display.getHeight());
float orbitRadius=screenX / 3;
float spacing=(float)(2 * Math.PI / totalPlayers);
float theta=spacing * (float)(-.5 + playerNo);
factoryX=screenX / 2 + (float)(orbitRadius * Math.cos(theta));
factoryY=screenY / 2 + (float)(orbitRadius * Math.sin(theta));
ship.body.center.set(factoryX,factoryY);
ship.heading=theta - (float)Math.PI / 2 - offset;
}
}
return id;
}"
83629,"public void attack(Player victim){
  for (  Entity.Type victimShipType : Ship.TYPES) {
    Point2 p=victim.mBodies.get(victimShipType).collide(body.center,body.radius);
    if (p != null) {
      assert(p.id != Entity.NO_ENTITY);
      Ship victimShip=(Ship)victim.mEntities.get(victimShipType).get(id);
      int damage=health;
      damage*=100;
      health-=damage;
      victimShip.health-=damage;
      if (victimShip.health <= 0) {
        victim.mBodies.get(victimShipType).remove(victimShip.body.center);
      }
      break;
    }
  }
}","public void attack(Player victim){
  for (  Entity.Type victimShipType : Ship.TYPES) {
    Point2 p=victim.mBodies.get(victimShipType).collide(body.center,body.radius);
    if (p != null) {
      assert(p.id != Entity.NO_ENTITY);
      Ship victimShip=(Ship)victim.mEntities.get(victimShipType).get(p.id);
      int damage=health;
      damage*=100;
      health-=damage;
      victimShip.health-=damage;
      if (victimShip.health <= 0) {
        victim.mBodies.get(victimShipType).remove(victimShip.body.center);
      }
      break;
    }
  }
}"
83630,"private static int partition(boolean dimension,Point2[] points,int minIndex,int maxIndex,float pivotValue){
  int hole=minIndex;
  for (int i=minIndex; i < maxIndex; i++) {
    float q=(dimension == X) ? points[i].x : points[i].y;
    if (q < pivotValue) {
      Point2 temp=points[hole];
      points[hole]=points[i];
      points[i]=temp;
      hole++;
    }
  }
  return hole;
}","private static int partition(boolean dimension,Point2[] points,int minIndex,int maxIndex){
  float min=0;
  float max=0;
  boolean first=true;
  for (int i=minIndex; i < maxIndex; i++) {
    float q=(dimension == X) ? points[i].x : points[i].y;
    if (first) {
      min=q;
      max=q;
      first=false;
    }
 else     if (q < min) {
      min=q;
    }
 else     if (q > max) {
      max=q;
    }
  }
  float pivotValue=(min + max) / 2;
  int hole=minIndex;
  for (int i=minIndex; i < maxIndex; i++) {
    float q=(dimension == X) ? points[i].x : points[i].y;
    if (q < pivotValue) {
      Point2 temp=points[hole];
      points[hole]=points[i];
      points[i]=temp;
      hole++;
    }
  }
  return hole;
}"
83631,"public void reset(int minIndex,int maxIndex){
  mMinIndex=minIndex;
  mMaxIndex=maxIndex;
  isLeaf=(mMaxIndex - mMinIndex) <= MAX_SIZE;
  boolean first=true;
  for (int i=mMinIndex; i < mMaxIndex; i++) {
    float q=(mDimension == X) ? mPoints[i].x : mPoints[i].y;
    if (first) {
      mMinVal=q;
      mMaxVal=q;
      first=false;
    }
 else     if (q < mMinVal) {
      mMinVal=q;
    }
 else     if (q > mMaxVal) {
      mMaxVal=q;
    }
  }
  if (!isLeaf) {
    float pivotValue=(mMinVal + mMaxVal) / 2;
    int pivotIndex=partition(mDimension,mPoints,mMinIndex,mMaxIndex,pivotValue);
    if (low == null) {
      low=new Quadtree(!mDimension,mEntrySize,mPoints);
    }
    if (high == null) {
      high=new Quadtree(!mDimension,mEntrySize,mPoints);
    }
    low.reset(mMinIndex,pivotIndex);
    high.reset(pivotIndex,mMaxIndex);
  }
 else {
    low=null;
    high=null;
  }
}","public void reset(int minIndex,int maxIndex){
  mMinIndex=minIndex;
  mMaxIndex=maxIndex;
  isLeaf=(mMaxIndex - mMinIndex) <= MAX_SIZE;
  boolean first=true;
  for (int i=mMinIndex; i < mMaxIndex; i++) {
    float q=(mDimension == X) ? mPoints[i].x : mPoints[i].y;
    if (first) {
      mMinVal=q;
      mMaxVal=q;
      first=false;
    }
 else     if (q < mMinVal) {
      mMinVal=q;
    }
 else     if (q > mMaxVal) {
      mMaxVal=q;
    }
  }
  if (!isLeaf) {
    int pivotIndex=partition(!mDimension,mPoints,mMinIndex,mMaxIndex);
    if (low == null) {
      low=new Quadtree(!mDimension,mEntrySize,mPoints);
    }
    if (high == null) {
      high=new Quadtree(!mDimension,mEntrySize,mPoints);
    }
    low.reset(mMinIndex,pivotIndex);
    high.reset(pivotIndex,mMaxIndex);
  }
 else {
    low=null;
    high=null;
  }
  mIsValid=true;
}"
83632,"public boolean remove(Point2 point){
  boolean removed=false;
  if (isLeaf) {
    for (int i=mMinIndex; i < mMaxIndex && !removed; i++) {
      if (mPoints[i].equals(point)) {
        mMaxIndex--;
        mPoints[i]=mPoints[mMaxIndex];
        mPoints[mMaxIndex]=null;
        removed=true;
      }
    }
  }
 else {
    float q=(low.mDimension == X) ? point.x : point.y;
    if (q >= low.mMinVal && q <= low.mMaxVal) {
      removed=low.remove(point);
    }
 else     if (q >= high.mMinVal && q <= high.mMaxVal) {
      removed=high.remove(point);
    }
  }
  return removed;
}","public boolean remove(Point2 point){
  assert(mIsValid);
  boolean removed=false;
  Log.v(""String_Node_Str"",String.format(""String_Node_Str"",point.x,point.y,point.id));
  if (isLeaf) {
    Log.v(""String_Node_Str"",String.format(""String_Node_Str"",mDimension ? 0 : 1,mMinVal,mMaxVal,mMaxIndex - mMinIndex));
    for (int i=mMinIndex; i < mMaxIndex && !removed; i++) {
      if (mPoints[i].equals(point)) {
        mMaxIndex--;
        mPoints[i]=mPoints[mMaxIndex];
        mPoints[mMaxIndex]=null;
        removed=true;
      }
 else       if (mPoints[i].x == point.x && mPoints[i].y == point.y) {
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",point.x,point.y,point.id,mPoints[i].id));
      }
 else       if (mPoints[i].id == point.id) {
        Log.i(""String_Node_Str"",String.format(""String_Node_Str"",point.x,point.y,mPoints[i].x,mPoints[i].y,point.id));
      }
    }
  }
 else {
    Log.v(""String_Node_Str"",String.format(""String_Node_Str"",mMaxIndex - mMinIndex));
    float q=(low.mDimension == X) ? point.x : point.y;
    if (q >= low.mMinVal && q <= low.mMaxVal) {
      removed=low.remove(point);
    }
 else     if (q >= high.mMinVal && q <= high.mMaxVal) {
      removed=high.remove(point);
    }
  }
  return removed;
}"
83633,"public void play(int my_id) throws IOException, ClassNotFoundException {
  Socket sock=new Socket(""String_Node_Str"",Player.getSocketNumber(thePlayer));
  ObjectOutputStream out=new ObjectOutputStream(sock.getOutputStream());
  ObjectInputStream in=new ObjectInputStream(sock.getInputStream());
  BufferedReader sysin=new BufferedReader(new InputStreamReader(System.in));
  Weights weights=new Weights(""String_Node_Str"");
  player_id=my_id;
  Rules gameRules=(Rules)in.readObject();
  System.out.printf(""String_Node_Str"",gameRules.numRows,gameRules.numCols,gameRules.numConnect);
  internal_board=new int[gameRules.numRows][gameRules.numCols];
  for (int r=0; r < gameRules.numRows; r++)   for (int c=0; c < gameRules.numCols; c++)   internal_board[r][c]=0;
  System.out.println(""String_Node_Str"");
  GameMessage mess=(GameMessage)in.readObject();
  double Qsa=-1;
  boolean beginning=true;
  int move=0;
  int selected_column=0;
  while (mess.win == Player.EMPTY) {
    if (mess.move != -1) {
      int r=0;
      for (r=0; r < gameRules.numRows; r++) {
        if (internal_board[r][mess.move] != 0) {
          internal_board[r - 1][mess.move]=player_id % 2 + 1;
          break;
        }
      }
      if (r == gameRules.numRows)       internal_board[r - 1][mess.move]=player_id % 2 + 1;
    }
 else {
      mess.move=(int)((float)gameRules.numCols * Math.random());
      out.writeObject(mess);
      mess=(GameMessage)in.readObject();
      internal_board[gameRules.numRows - 1][mess.move]=player_id;
      continue;
    }
    if (beginning == false) {
      System.out.println(""String_Node_Str"" + Qsa + ""String_Node_Str""+ player_id);
      sarsa(0,weights,Qsa,internal_board,gameRules,player_id);
    }
    FeatureExplorer[] ff=new FeatureExplorer[gameRules.numCols];
    boolean[] ff_use=new boolean[gameRules.numCols];
    int numFeatures=FeatureExplorer.getNumFeatures();
    double[][] features=new double[gameRules.numCols][numFeatures];
    double[] wx=new double[gameRules.numCols];
    double[] sig=new double[gameRules.numCols];
    double[] w=weights.getWeights();
    double max=0;
    int action=0;
    double temp;
    for (int x=0; x < gameRules.numCols; x++) {
      ff[x]=new FeatureExplorer();
      ff_use[x]=ff[x].initialize(internal_board,gameRules.numRows,gameRules.numCols,x,player_id);
      if (ff_use[x])       features[x]=ff[x].getFeatures();
      for (int y=0; y < numFeatures; y++) {
        if (ff_use[x]) {
          wx[x]+=((double)features[x][y]) * w[y];
        }
 else         wx[x]=0;
      }
      if (ff_use[x])       sig[x]=sigmoid(wx[x]);
 else       sig[x]=0;
      if (x == 0) {
        max=sig[0];
        action=0;
      }
 else       if (sig[x] > max) {
        action=x;
        max=sig[x];
      }
    }
    Qsa=max;
    double epsilon=0.1;
    if (Math.random() < epsilon)     selected_column=action;
 else     selected_column=(int)(Math.random() * gameRules.numCols);
    int r=0;
    for (r=0; r < gameRules.numRows; r++) {
      if (internal_board[r][selected_column] != 0) {
        internal_board[r - 1][selected_column]=player_id;
        break;
      }
    }
    if (r == gameRules.numRows)     internal_board[r - 1][selected_column]=player_id;
    mess.move=selected_column;
    out.writeObject(mess);
    mess=(GameMessage)in.readObject();
    beginning=false;
  }
  System.out.println(""String_Node_Str"" + Qsa + ""String_Node_Str""+ player_id);
  if ((mess.win).equals(thePlayer))   sarsa(1,weights,Qsa,internal_board,gameRules,player_id);
 else   sarsa(0,weights,Qsa,internal_board,gameRules,player_id);
  weights.saveWeights();
  sock.close();
}","public void play(int my_id) throws IOException, ClassNotFoundException {
  Socket sock=new Socket(""String_Node_Str"",Player.getSocketNumber(thePlayer));
  ObjectOutputStream out=new ObjectOutputStream(sock.getOutputStream());
  ObjectInputStream in=new ObjectInputStream(sock.getInputStream());
  BufferedReader sysin=new BufferedReader(new InputStreamReader(System.in));
  Weights weights=new Weights(""String_Node_Str"");
  player_id=my_id;
  Rules gameRules=(Rules)in.readObject();
  System.out.printf(""String_Node_Str"",gameRules.numRows,gameRules.numCols,gameRules.numConnect);
  internal_board=new int[gameRules.numRows][gameRules.numCols];
  for (int r=0; r < gameRules.numRows; r++)   for (int c=0; c < gameRules.numCols; c++)   internal_board[r][c]=0;
  System.out.println(""String_Node_Str"");
  GameMessage mess=(GameMessage)in.readObject();
  double Qsa=-1;
  boolean beginning=true;
  int move=0;
  int selected_column=0;
  while (mess.win == Player.EMPTY) {
    if (mess.move != -1) {
      int r=0;
      for (r=0; r < gameRules.numRows; r++) {
        if (internal_board[r][mess.move] != 0) {
          internal_board[r - 1][mess.move]=player_id % 2 + 1;
          break;
        }
      }
      if (r == gameRules.numRows)       internal_board[r - 1][mess.move]=player_id % 2 + 1;
    }
 else {
      mess.move=(int)((float)gameRules.numCols * Math.random());
      out.writeObject(mess);
      mess=(GameMessage)in.readObject();
      internal_board[gameRules.numRows - 1][mess.move]=player_id;
      continue;
    }
    if (beginning == false) {
      System.out.println(""String_Node_Str"" + Qsa + ""String_Node_Str""+ player_id);
      sarsa(0,weights,Qsa,internal_board,gameRules,player_id);
    }
    FeatureExplorer[] ff=new FeatureExplorer[gameRules.numCols];
    boolean[] ff_use=new boolean[gameRules.numCols];
    int numFeatures=FeatureExplorer.getNumFeatures();
    double[][] features=new double[gameRules.numCols][numFeatures];
    double[] wx=new double[gameRules.numCols];
    double[] sig=new double[gameRules.numCols];
    double[] w=weights.getWeights();
    double max=0;
    int action=0;
    double temp;
    for (int x=0; x < gameRules.numCols; x++) {
      ff[x]=new FeatureExplorer();
      ff_use[x]=ff[x].initialize(internal_board,gameRules.numRows,gameRules.numCols,x,player_id);
      if (ff_use[x])       features[x]=ff[x].getFeatures();
      for (int y=0; y < numFeatures; y++) {
        if (ff_use[x]) {
          wx[x]+=((double)features[x][y]) * w[y];
        }
 else         wx[x]=0;
      }
      if (ff_use[x])       sig[x]=sigmoid(wx[x]);
 else       sig[x]=0;
      System.out.printf(""String_Node_Str"",x,wx[x],x,sig[x]);
      if (x == 0) {
        max=sig[0];
        action=0;
      }
 else       if (sig[x] > max) {
        action=x;
        max=sig[x];
      }
    }
    Qsa=max;
    double epsilon=0.1;
    if (Math.random() < epsilon)     selected_column=action;
 else     selected_column=(int)(Math.random() * gameRules.numCols);
    int r=0;
    for (r=0; r < gameRules.numRows; r++) {
      if (internal_board[r][selected_column] != 0) {
        internal_board[r - 1][selected_column]=player_id;
        break;
      }
    }
    if (r == gameRules.numRows)     internal_board[r - 1][selected_column]=player_id;
    mess.move=selected_column;
    out.writeObject(mess);
    mess=(GameMessage)in.readObject();
    beginning=false;
  }
  System.out.println(""String_Node_Str"" + Qsa + ""String_Node_Str""+ player_id);
  if ((mess.win).equals(thePlayer))   sarsa(1,weights,Qsa,internal_board,gameRules,player_id);
 else   sarsa(0,weights,Qsa,internal_board,gameRules,player_id);
  weights.saveWeights();
  sock.close();
}"
83634,"private void sarsa(int reward,Weights weights,double Qsa,int[][] internal_board,Rules gameRules,int player_id){
  double eta=0.9;
  double gamma=0.9;
  FeatureExplorer f=new FeatureExplorer();
  double[] features=new double[FeatureExplorer.getNumFeatures()];
  double[] w=weights.getWeights();
  double wx=0;
  double sig=0;
  double xx=0;
  double Qsa_new=0;
  f.initialize(internal_board,gameRules.numRows,gameRules.numCols,-1,player_id);
  features=f.getFeatures();
  for (int x=0; x < f.getNumFeatures(); x++) {
    wx+=w[x] * features[x];
  }
  sig=sigmoid(wx);
  Qsa_new=Qsa + eta * ((reward + gamma * sig) - Qsa);
  for (int x=0; x < features.length; x++) {
    xx+=features[x] * features[x];
  }
  for (int x=0; x < features.length; x++) {
    w[x]=w[x] - eta * (Qsa - gamma * Qsa_new) * ((Qsa * (1 - Qsa) * features[x]));
  }
  weights.setWeights(w);
}","private void sarsa(int reward,Weights weights,double Qsa,int[][] internal_board,Rules gameRules,int player_id){
  double eta=0.9;
  double gamma=0.9;
  FeatureExplorer f=new FeatureExplorer();
  double[] features=new double[FeatureExplorer.getNumFeatures()];
  double[] w=weights.getWeights();
  double wx=0;
  double sig=0;
  double xx=0;
  double Qsa_new=0;
  f.initialize(internal_board,gameRules.numRows,gameRules.numCols,-1,player_id);
  features=f.getFeatures();
  for (int x=0; x < f.getNumFeatures(); x++) {
    wx+=w[x] * features[x];
  }
  sig=sigmoid(wx);
  Qsa_new=Qsa + eta * ((reward + gamma * sig) - Qsa);
  for (int x=0; x < features.length; x++) {
    xx+=features[x] * features[x];
  }
  for (int x=0; x < features.length; x++) {
    w[x]=w[x] + eta * ((Qsa_new - Qsa) * Qsa * (1 - Qsa)* features[x]);
  }
  weights.setWeights(w);
}"
83635,"/** 
 * Read Location and owner information from the given ConfigurationSection. Does basic validation on the World named in the section. Uses the static keys defined in this class for information retrieval from the section. On completion, this Warp will be populated with the information retrieved from the section, if that information is valid.
 * @param section The ConfigurationSection from which to read information.
 */
private void parseConfiguration(ConfigurationSection section){
  String worldName=section.getString(WORLD_KEY);
  if (worldName == null) {
    OpenWarp.LOG.severe(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.name);
  }
  double x=section.getDouble(X_KEY,0.0);
  double y=section.getDouble(Y_KEY,0.0);
  double z=section.getDouble(Z_KEY,0.0);
  float pitch=(float)section.getDouble(PITCH_KEY,0.0);
  float yaw=(float)section.getDouble(YAW_KEY,0.0);
  World world=null;
  if (worldName != null) {
    world=this.plugin.getServer().getWorld(worldName);
    if (world == null) {
      OpenWarp.LOG.severe(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + worldName+ ""String_Node_Str"");
    }
  }
  this.location=new Location(world,x,y,z,yaw,pitch);
  this.owner=section.getString(OWNER_KEY,""String_Node_Str"");
  this.invitees=section.getStringList(INVITEES_KEY);
}","/** 
 * Read Location and owner information from the given value Map. Does basic validation on the World named in the map. Uses the static keys defined in this class for information retrieval from the map. On completion, this Warp will be populated with the information retrieved from the map, if that information is valid.
 * @param values The Map of values from which to read information.
 */
private void parseConfiguration(Map<String,Object> values){
  String worldName=(String)values.get(WORLD_KEY);
  if (worldName == null) {
    OpenWarp.LOG.severe(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.name);
  }
  double x=values.containsKey(X_KEY) ? (Double)values.get(X_KEY) : 0.0;
  double y=values.containsKey(Y_KEY) ? (Double)values.get(Y_KEY) : 0.0;
  double z=values.containsKey(Z_KEY) ? (Double)values.get(Z_KEY) : 0.0;
  float pitch=values.containsKey(PITCH_KEY) ? (float)((double)(Double)values.get(PITCH_KEY)) : 0.0f;
  float yaw=values.containsKey(YAW_KEY) ? (float)((double)(Double)values.get(YAW_KEY)) : 0.0f;
  World world=null;
  if (worldName != null) {
    world=this.plugin.getServer().getWorld(worldName);
    if (world == null) {
      OpenWarp.LOG.severe(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + worldName+ ""String_Node_Str"");
    }
  }
  this.location=new Location(world,x,y,z,yaw,pitch);
  this.owner=values.containsKey(OWNER_KEY) ? (String)values.get(OWNER_KEY) : ""String_Node_Str"";
  this.invitees=values.containsKey(INVITEES_KEY) ? (List<String>)values.get(INVITEES_KEY) : new ArrayList<String>();
}"
83636,"/** 
 * Load warp information from the given Configuration into the given Map. Mutates the `target` argument.
 * @param config The Configuration from which to read warps
 * @param target The Map into which to place Warp instances
 */
public void loadWarps(Configuration config,Map<String,Warp> target){
  ConfigurationSection warpSection=config.getConfigurationSection(WARPS_LIST_KEY);
  Set<String> keys=warpSection.getKeys(false);
  if (keys != null) {
    for (    String key : keys) {
      ConfigurationSection section=config.getConfigurationSection(WARPS_LIST_KEY + ""String_Node_Str"" + key);
      Warp warp=new Warp(this.plugin,key,section);
      target.put(warp.getName(),warp);
    }
  }
}","/** 
 * Load warp information from the given Configuration into the given Map. Mutates the `target` argument.
 * @param config The Configuration from which to read warps
 * @param target The Map into which to place Warp instances
 */
public void loadWarps(Configuration config,Map<String,Warp> target){
  ConfigurationSection warpSection=config.getConfigurationSection(WARPS_LIST_KEY);
  if (warpSection != null) {
    Set<String> keys=warpSection.getKeys(false);
    if (keys != null) {
      for (      String key : keys) {
        ConfigurationSection section=config.getConfigurationSection(WARPS_LIST_KEY + ""String_Node_Str"" + key);
        Warp warp=new Warp(this.plugin,key,section);
        target.put(warp.getName(),warp);
      }
    }
  }
}"
83637,"/** 
 * Load this player configuration from disk.
 */
public void load(){
  this.configFolder=new File(this.plugin.getDataFolder(),this.playerName);
  this.configFolder.mkdirs();
  this.generalConfig=YamlConfiguration.loadConfiguration(new File(this.configFolder,GENERAL_CONFIG_FILENAME));
  this.warpConfig=YamlConfiguration.loadConfiguration(new File(this.configFolder,WARP_CONFIG_FILENAME));
  this.quotaConfig=YamlConfiguration.loadConfiguration(new File(this.configFolder,QUOTA_CONFIG_FILENAME));
  if (this.plugin.getPrivateWarps().get(this.playerName) == null) {
    this.plugin.getPrivateWarps().put(this.playerName,new HashMap<String,Warp>());
  }
  this.plugin.getConfigurationManager().loadWarps(this.warpConfig,this.plugin.getPrivateWarps().get(this.playerName));
  ConfigurationSection homeSection=this.generalConfig.getConfigurationSection(OWConfigurationManager.HOME_KEY);
  if (homeSection != null) {
    this.plugin.setDefaultHome(this.playerName,new Warp(this.plugin,TEMP_HOME_NAME,homeSection).getLocation());
  }
  ConfigurationSection multiworldHomesSection=this.generalConfig.getConfigurationSection(OWConfigurationManager.MULTIWORLD_HOMES_KEY);
  if (multiworldHomesSection != null) {
    for (    String worldName : multiworldHomesSection.getKeys(false)) {
      this.plugin.setHome(this.playerName,worldName,new Warp(this.plugin,TEMP_HOME_NAME,multiworldHomesSection.getConfigurationSection(worldName)).getLocation());
    }
  }
  ConfigurationSection backSection=this.generalConfig.getConfigurationSection(OWConfigurationManager.BACK_KEY);
  if (backSection != null) {
    this.plugin.getLocationTracker().setPreviousLocation(this.playerName,new Warp(this.plugin,TEMP_BACK_NAME,backSection).getLocation());
  }
  List<?> warpStackSections=this.generalConfig.getList(OWConfigurationManager.STACK_KEY);
  if (warpStackSections != null) {
    Stack<Location> warpStack=new Stack<Location>();
    for (    Object section : warpStackSections) {
      System.out.println(""String_Node_Str"" + section.getClass());
      warpStack.push(new Warp(this.plugin,TEMP_STACK_NAME,(ConfigurationSection)section).getLocation());
    }
    this.plugin.getLocationTracker().setLocationStack(this.playerName,warpStack);
  }
  this.plugin.getQuotaManager().getPlayerMaxPublicWarps().put(this.playerName,this.quotaConfig.getInt(OWConfigurationManager.QUOTAS_KEY + ""String_Node_Str"" + OWConfigurationManager.QUOTA_PUBLIC_KEY,OWQuotaManager.QUOTA_UNDEFINED));
  this.plugin.getQuotaManager().getPlayerMaxPrivateWarps().put(this.playerName,this.quotaConfig.getInt(OWConfigurationManager.QUOTAS_KEY + ""String_Node_Str"" + OWConfigurationManager.QUOTA_PRIVATE_KEY,OWQuotaManager.QUOTA_UNDEFINED));
}","/** 
 * Load this player configuration from disk.
 */
public void load(){
  this.configFolder=new File(this.plugin.getDataFolder(),this.playerName);
  this.configFolder.mkdirs();
  this.generalConfig=YamlConfiguration.loadConfiguration(new File(this.configFolder,GENERAL_CONFIG_FILENAME));
  this.warpConfig=YamlConfiguration.loadConfiguration(new File(this.configFolder,WARP_CONFIG_FILENAME));
  this.quotaConfig=YamlConfiguration.loadConfiguration(new File(this.configFolder,QUOTA_CONFIG_FILENAME));
  if (this.plugin.getPrivateWarps().get(this.playerName) == null) {
    this.plugin.getPrivateWarps().put(this.playerName,new HashMap<String,Warp>());
  }
  this.plugin.getConfigurationManager().loadWarps(this.warpConfig,this.plugin.getPrivateWarps().get(this.playerName));
  ConfigurationSection homeSection=this.generalConfig.getConfigurationSection(OWConfigurationManager.HOME_KEY);
  if (homeSection != null) {
    this.plugin.setDefaultHome(this.playerName,new Warp(this.plugin,TEMP_HOME_NAME,homeSection).getLocation());
  }
  ConfigurationSection multiworldHomesSection=this.generalConfig.getConfigurationSection(OWConfigurationManager.MULTIWORLD_HOMES_KEY);
  if (multiworldHomesSection != null) {
    for (    String worldName : multiworldHomesSection.getKeys(false)) {
      this.plugin.setHome(this.playerName,worldName,new Warp(this.plugin,TEMP_HOME_NAME,multiworldHomesSection.getConfigurationSection(worldName)).getLocation());
    }
  }
  ConfigurationSection backSection=this.generalConfig.getConfigurationSection(OWConfigurationManager.BACK_KEY);
  if (backSection != null) {
    this.plugin.getLocationTracker().setPreviousLocation(this.playerName,new Warp(this.plugin,TEMP_BACK_NAME,backSection).getLocation());
  }
  List<?> warpStackSections=this.generalConfig.getList(OWConfigurationManager.STACK_KEY);
  if (warpStackSections != null) {
    Stack<Location> warpStack=new Stack<Location>();
    for (    Object o : warpStackSections) {
      warpStack.push(new Warp(this.plugin,TEMP_STACK_NAME,(Map)o).getLocation());
    }
    this.plugin.getLocationTracker().setLocationStack(this.playerName,warpStack);
  }
  this.plugin.getQuotaManager().getPlayerMaxPublicWarps().put(this.playerName,this.quotaConfig.getInt(OWConfigurationManager.QUOTAS_KEY + ""String_Node_Str"" + OWConfigurationManager.QUOTA_PUBLIC_KEY,OWQuotaManager.QUOTA_UNDEFINED));
  this.plugin.getQuotaManager().getPlayerMaxPrivateWarps().put(this.playerName,this.quotaConfig.getInt(OWConfigurationManager.QUOTAS_KEY + ""String_Node_Str"" + OWConfigurationManager.QUOTA_PRIVATE_KEY,OWQuotaManager.QUOTA_UNDEFINED));
}"
83638,"/** 
 * Load this player configuration from disk.
 */
public void load(){
  this.configFolder=new File(this.plugin.getDataFolder(),this.playerName);
  this.configFolder.mkdirs();
  this.generalConfig=new Configuration(new File(this.configFolder,GENERAL_CONFIG_FILENAME));
  this.warpConfig=new Configuration(new File(this.configFolder,WARP_CONFIG_FILENAME));
  this.quotaConfig=new Configuration(new File(this.configFolder,QUOTA_CONFIG_FILENAME));
  this.generalConfig.load();
  this.warpConfig.load();
  this.quotaConfig.load();
  if (this.plugin.getPrivateWarps().get(this.playerName) == null) {
    this.plugin.getPrivateWarps().put(this.playerName,new HashMap<String,Warp>());
  }
  this.plugin.loadWarps(this.warpConfig,this.plugin.getPrivateWarps().get(this.playerName));
  ConfigurationNode homeNode=this.generalConfig.getNode(OpenWarp.HOME_KEY);
  if (homeNode != null) {
    this.plugin.setDefaultHome(this.playerName,new Warp(this.plugin,TEMP_HOME_NAME,homeNode).getLocation());
  }
  ConfigurationNode multiworldHomesNode=this.generalConfig.getNode(OpenWarp.MULTIWORLD_HOMES_KEY);
  if (multiworldHomesNode != null) {
    Map<String,Object> multiworldHomesMap=multiworldHomesNode.getAll();
    System.out.println(""String_Node_Str"" + multiworldHomesMap.size() + ""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  ConfigurationNode backNode=this.generalConfig.getNode(OpenWarp.BACK_KEY);
  if (backNode != null) {
    this.plugin.getLocationTracker().setPreviousLocation(this.playerName,new Warp(this.plugin,TEMP_BACK_NAME,backNode).getLocation());
  }
  ConfigurationNode stackNode=this.generalConfig.getNode(OpenWarp.STACK_KEY);
  if (stackNode != null) {
    List<Object> stackConfig=stackNode.getList(""String_Node_Str"");
    for (    Object o : stackConfig) {
    }
  }
  this.plugin.getQuotaManager().loadPrivateQuotas(this.playerName,this.quotaConfig);
}","/** 
 * Load this player configuration from disk.
 */
public void load(){
  this.configFolder=new File(this.plugin.getDataFolder(),this.playerName);
  this.configFolder.mkdirs();
  this.generalConfig=new Configuration(new File(this.configFolder,GENERAL_CONFIG_FILENAME));
  this.warpConfig=new Configuration(new File(this.configFolder,WARP_CONFIG_FILENAME));
  this.quotaConfig=new Configuration(new File(this.configFolder,QUOTA_CONFIG_FILENAME));
  this.generalConfig.load();
  this.warpConfig.load();
  this.quotaConfig.load();
  if (this.plugin.getPrivateWarps().get(this.playerName) == null) {
    this.plugin.getPrivateWarps().put(this.playerName,new HashMap<String,Warp>());
  }
  this.plugin.loadWarps(this.warpConfig,this.plugin.getPrivateWarps().get(this.playerName));
  ConfigurationNode homeNode=this.generalConfig.getNode(OpenWarp.HOME_KEY);
  if (homeNode != null) {
    this.plugin.setDefaultHome(this.playerName,new Warp(this.plugin,TEMP_HOME_NAME,homeNode).getLocation());
  }
  Map<String,ConfigurationNode> multiworldHomesMap=this.generalConfig.getNodes(OpenWarp.MULTIWORLD_HOMES_KEY);
  if (multiworldHomesMap != null) {
    for (    String worldName : multiworldHomesMap.keySet()) {
      this.plugin.setHome(this.playerName,worldName,new Warp(this.plugin,TEMP_HOME_NAME,multiworldHomesMap.get(worldName)).getLocation());
    }
  }
  ConfigurationNode backNode=this.generalConfig.getNode(OpenWarp.BACK_KEY);
  if (backNode != null) {
    this.plugin.getLocationTracker().setPreviousLocation(this.playerName,new Warp(this.plugin,TEMP_BACK_NAME,backNode).getLocation());
  }
  ConfigurationNode stackNode=this.generalConfig.getNode(OpenWarp.STACK_KEY);
  if (stackNode != null) {
    List<Object> stackConfig=stackNode.getList(""String_Node_Str"");
    for (    Object o : stackConfig) {
    }
  }
  this.plugin.getQuotaManager().loadPrivateQuotas(this.playerName,this.quotaConfig);
}"
83639,"/** 
 * Save this player configuration to disk.
 * @return true if this player configuration was saved successfullyor skipped; false on error.
 */
public boolean save(){
  Map<String,Warp> playerWarps=this.plugin.getPrivateWarps(this.playerName);
  Map<String,Object> configWarps=new HashMap<String,Object>();
  for (  Entry<String,Warp> entry : playerWarps.entrySet()) {
    configWarps.put(entry.getKey(),entry.getValue().getConfigurationMap());
  }
  this.warpConfig.setProperty(OpenWarp.WARPS_LIST_KEY,configWarps);
  if (this.plugin.getDefaultHome(this.playerName) != null) {
    Map<String,Object> homeWarpConfig=new Warp(this.plugin,TEMP_HOME_NAME,this.plugin.getDefaultHome(this.playerName),this.playerName).getConfigurationMap();
    if (homeWarpConfig != null) {
      this.generalConfig.setProperty(OpenWarp.HOME_KEY,homeWarpConfig);
    }
 else {
      OpenWarp.LOG.warning(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.playerName+ ""String_Node_Str"");
      OpenWarp.LOG.warning(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.playerName);
      return true;
    }
  }
  Map<String,Location> worldHomes=this.plugin.getWorldHomes(this.playerName);
  if (worldHomes != null) {
    for (    String worldName : worldHomes.keySet()) {
      Location worldHome=worldHomes.get(worldName);
      String yamlKey=OpenWarp.MULTIWORLD_HOMES_KEY + ""String_Node_Str"" + worldName;
      Map<String,Object> worldHomeWarpConfig=new Warp(this.plugin,TEMP_HOME_NAME,worldHome,this.playerName).getConfigurationMap();
      if (worldHomeWarpConfig != null) {
        this.generalConfig.setProperty(yamlKey,worldHomeWarpConfig);
      }
 else {
        OpenWarp.LOG.warning(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.playerName+ ""String_Node_Str"");
        OpenWarp.LOG.warning(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.playerName);
        return true;
      }
    }
  }
  if (this.plugin.getLocationTracker().getPreviousLocation(this.playerName) != null) {
    Map<String,Object> backWarpConfig=new Warp(this.plugin,TEMP_BACK_NAME,this.plugin.getLocationTracker().getPreviousLocation(this.playerName),this.playerName).getConfigurationMap();
    if (backWarpConfig != null) {
      this.generalConfig.setProperty(OpenWarp.BACK_KEY,backWarpConfig);
    }
  }
  if (this.plugin.getLocationTracker().getLocationStack(this.playerName) != null) {
    Stack<Location> locationStack=this.plugin.getLocationTracker().getLocationStack(this.playerName);
    List<Map<String,Object>> locationStackConfig=new ArrayList<Map<String,Object>>();
    for (    Location location : locationStack) {
      locationStackConfig.add(new Warp(this.plugin,TEMP_STACK_NAME,location,this.playerName).getConfigurationMap());
    }
    if (locationStackConfig.size() > 0) {
      this.generalConfig.setProperty(OpenWarp.STACK_KEY,locationStackConfig);
    }
 else {
      this.generalConfig.setProperty(OpenWarp.STACK_KEY,null);
    }
  }
  this.quotaConfig.setProperty(OpenWarp.QUOTAS_KEY,this.plugin.getQuotaManager().getPlayerQuotaMap(this.playerName));
  return this.generalConfig.save() && this.warpConfig.save() && this.quotaConfig.save();
}","/** 
 * Save this player configuration to disk.
 * @return true if this player configuration was saved successfullyor skipped; false on error.
 */
public boolean save(){
  Map<String,Warp> playerWarps=this.plugin.getPrivateWarps(this.playerName);
  Map<String,Object> configWarps=new HashMap<String,Object>();
  for (  Entry<String,Warp> entry : playerWarps.entrySet()) {
    configWarps.put(entry.getKey(),entry.getValue().getConfigurationMap());
  }
  this.warpConfig.setProperty(OpenWarp.WARPS_LIST_KEY,configWarps);
  if (this.plugin.getDefaultHome(this.playerName) != null) {
    Map<String,Object> homeWarpConfig=new Warp(this.plugin,TEMP_HOME_NAME,this.plugin.getDefaultHome(this.playerName),this.playerName).getConfigurationMap();
    if (homeWarpConfig != null) {
      this.generalConfig.setProperty(OpenWarp.HOME_KEY,homeWarpConfig);
    }
 else {
      OpenWarp.LOG.warning(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.playerName+ ""String_Node_Str"");
      OpenWarp.LOG.warning(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.playerName);
      return true;
    }
  }
  Map<String,Location> worldHomes=this.plugin.getWorldHomes(this.playerName);
  if (worldHomes != null) {
    for (    String worldName : worldHomes.keySet()) {
      if (worldName != null) {
        Location worldHome=worldHomes.get(worldName);
        String yamlKey=OpenWarp.MULTIWORLD_HOMES_KEY + ""String_Node_Str"" + worldName;
        Map<String,Object> worldHomeWarpConfig=new Warp(this.plugin,TEMP_HOME_NAME,worldHome,this.playerName).getConfigurationMap();
        if (worldHomeWarpConfig != null) {
          this.generalConfig.setProperty(yamlKey,worldHomeWarpConfig);
        }
 else {
          OpenWarp.LOG.warning(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.playerName+ ""String_Node_Str"");
          OpenWarp.LOG.warning(OpenWarp.LOG_PREFIX + ""String_Node_Str"" + this.playerName);
          return true;
        }
      }
    }
  }
  if (this.plugin.getLocationTracker().getPreviousLocation(this.playerName) != null) {
    Map<String,Object> backWarpConfig=new Warp(this.plugin,TEMP_BACK_NAME,this.plugin.getLocationTracker().getPreviousLocation(this.playerName),this.playerName).getConfigurationMap();
    if (backWarpConfig != null) {
      this.generalConfig.setProperty(OpenWarp.BACK_KEY,backWarpConfig);
    }
  }
  if (this.plugin.getLocationTracker().getLocationStack(this.playerName) != null) {
    Stack<Location> locationStack=this.plugin.getLocationTracker().getLocationStack(this.playerName);
    List<Map<String,Object>> locationStackConfig=new ArrayList<Map<String,Object>>();
    for (    Location location : locationStack) {
      locationStackConfig.add(new Warp(this.plugin,TEMP_STACK_NAME,location,this.playerName).getConfigurationMap());
    }
    if (locationStackConfig.size() > 0) {
      this.generalConfig.setProperty(OpenWarp.STACK_KEY,locationStackConfig);
    }
 else {
      this.generalConfig.setProperty(OpenWarp.STACK_KEY,null);
    }
  }
  this.quotaConfig.setProperty(OpenWarp.QUOTAS_KEY,this.plugin.getQuotaManager().getPlayerQuotaMap(this.playerName));
  return this.generalConfig.save() && this.warpConfig.save() && this.quotaConfig.save();
}"
83640,"@Override public void runCommand(CommandSender sender,List<String> args){
  if (!this.checkPlayerSender(sender))   return;
  Player player=(Player)sender;
  String warpName=args.get(0);
  Warp target=this.getPlugin().getWarp(sender,warpName);
  if (target == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
    return;
  }
  if (target.getOwner().equalsIgnoreCase(player.getName())) {
    String permString=""String_Node_Str"";
    if (target.isPublic()) {
      permString=""String_Node_Str"" + warpName;
    }
 else {
      permString=""String_Node_Str"" + target.getOwner() + ""String_Node_Str""+ warpName;
    }
    if (!this.getPlugin().getPermissionsHandler().hasPermission(sender,permString,!target.isPublic())) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
      return;
    }
  }
 else {
    if (!target.isInvited(player)) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
      OpenWarp.DEBUG_LOG.warning(""String_Node_Str"");
      OpenWarp.DEBUG_LOG.warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ target.getName()+ ""String_Node_Str""+ target.getOwner());
      return;
    }
  }
  if (target.getLocation().getWorld() == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  if (!player.teleport(target.getLocation())) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
  }
}","@Override public void runCommand(CommandSender sender,List<String> args){
  if (!this.checkPlayerSender(sender))   return;
  Player player=(Player)sender;
  String warpName=args.get(0);
  Warp target=this.getPlugin().getWarp(sender,warpName);
  if (target == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
    return;
  }
  if (target.getOwner().equalsIgnoreCase(player.getName()) || target.isPublic()) {
    String permString=""String_Node_Str"";
    if (target.isPublic()) {
      permString=""String_Node_Str"" + warpName;
    }
 else {
      permString=""String_Node_Str"" + target.getOwner() + ""String_Node_Str""+ warpName;
    }
    if (!this.getPlugin().getPermissionsHandler().hasPermission(sender,permString,!target.isPublic())) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
      return;
    }
  }
 else {
    if (!target.isInvited(player)) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
      OpenWarp.DEBUG_LOG.warning(""String_Node_Str"");
      OpenWarp.DEBUG_LOG.warning(""String_Node_Str"" + player.getName() + ""String_Node_Str""+ target.getName()+ ""String_Node_Str""+ target.getOwner());
      return;
    }
  }
  if (target.getLocation().getWorld() == null) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  if (!player.teleport(target.getLocation())) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
  }
}"
83641,"@Override public void onEnable(){
  this.getDataFolder().mkdirs();
  this.getServer().getPluginManager().addPermission(new Permission(""String_Node_Str"",PermissionDefault.OP));
  Permission wildcardPerm=this.getServer().getPluginManager().getPermission(""String_Node_Str"");
  if (wildcardPerm != null) {
    wildcardPerm.getChildren().put(""String_Node_Str"",true);
    wildcardPerm.recalculatePermissibles();
  }
  this.locationTracker=new OWLocationTracker(this);
  this.configuration=new Configuration(new File(this.getDataFolder(),MASTER_CONFIG_FILENAME));
  this.configuration.load();
  this.publicWarpsConfig=new Configuration(new File(this.getDataFolder(),PUBLIC_WARP_CONFIG_FILENAME));
  this.publicWarpsConfig.load();
  this.loadWarps(this.publicWarpsConfig,this.publicWarps);
  this.quotaManager=new OWQuotaManager(this);
  this.permissionsHandler=new OWPermissionsHandler(this);
  List<String> playerNames=this.configuration.getStringList(PLAYER_NAMES_LIST_KEY,new ArrayList<String>());
  for (  String playerName : playerNames) {
    this.registerPlayerName(playerName);
  }
  this.quotaManager.loadGlobalQuotas(this.configuration);
  this.loadCommands();
  this.loadWarpPermissions();
  this.loadHomePermissions();
  this.loadListeners();
  LOG.info(LOG_PREFIX + ""String_Node_Str"" + this.getDescription().getVersion());
}","@Override public void onEnable(){
  this.getDataFolder().mkdirs();
  this.getServer().getPluginManager().addPermission(new Permission(""String_Node_Str"",PermissionDefault.OP));
  Permission wildcardPerm=this.getServer().getPluginManager().getPermission(""String_Node_Str"");
  if (wildcardPerm != null) {
    wildcardPerm.getChildren().put(""String_Node_Str"",true);
    wildcardPerm.recalculatePermissibles();
  }
  this.locationTracker=new OWLocationTracker(this);
  this.configuration=new Configuration(new File(this.getDataFolder(),MASTER_CONFIG_FILENAME));
  this.configuration.load();
  this.publicWarpsConfig=new Configuration(new File(this.getDataFolder(),PUBLIC_WARP_CONFIG_FILENAME));
  this.publicWarpsConfig.load();
  this.loadWarps(this.publicWarpsConfig,this.publicWarps);
  this.quotaManager=new OWQuotaManager(this);
  this.permissionsHandler=new OWPermissionsHandler(this);
  this.quotaManager.loadGlobalQuotas(this.configuration);
  List<String> playerNames=this.configuration.getStringList(PLAYER_NAMES_LIST_KEY,new ArrayList<String>());
  for (  String playerName : playerNames) {
    this.registerPlayerName(playerName);
  }
  this.loadCommands();
  this.loadWarpPermissions();
  this.loadHomePermissions();
  this.loadListeners();
  LOG.info(LOG_PREFIX + ""String_Node_Str"" + this.getDescription().getVersion());
}"
83642,"public void setPreviousLocation(Player player,Location location){
  System.out.println(""String_Node_Str"" + location);
  this.previousLocations.put(player,location);
}","public void setPreviousLocation(Player player,Location location){
  this.previousLocations.put(player,location);
}"
83643,"private void loadListeners(){
  OWPlayerListener playerListener=new OWPlayerListener(this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Low,this);
  OWEntityListener entityListener=new OWEntityListener(this);
  this.getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
}","private void loadListeners(){
  OWPlayerListener playerListener=new OWPlayerListener(this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Low,this);
  this.getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,playerListener,Priority.Normal,this);
  OWEntityListener entityListener=new OWEntityListener(this);
  this.getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
}"
83644,"@Override public void runCommand(CommandSender sender,List<String> args){
  if (!this.checkPlayerSender(sender))   return;
  Player player=(Player)sender;
  Location loc=this.getPlugin().getLocationTracker().getPreviousLocation(player);
  if (loc == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (!player.teleport(loc)) {
    System.out.println(""String_Node_Str"" + loc);
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","@Override public void runCommand(CommandSender sender,List<String> args){
  if (!this.checkPlayerSender(sender))   return;
  Player player=(Player)sender;
  Location loc=this.getPlugin().getLocationTracker().getPreviousLocation(player);
  if (loc == null) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (!player.teleport(loc)) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}"
83645,"@Override public void runCommand(CommandSender sender,List<String> args){
  if (!this.checkPlayerSender(sender))   return;
  Player player=(Player)sender;
  if (args.size() == 0) {
    this.getPlugin().getLocationTracker().getLocationStack(player).push(player.getLocation());
  }
 else {
    String warpName=args.get(0);
    Warp target=this.getPlugin().getWarp(player,warpName);
    if (target == null) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
      return;
    }
    String permString=""String_Node_Str"";
    if (target.isPublic()) {
      permString=""String_Node_Str"" + warpName;
    }
 else {
      permString=""String_Node_Str"" + target.getOwner() + ""String_Node_Str""+ warpName;
    }
    System.out.println(""String_Node_Str"" + permString);
    if (!this.getPlugin().getPermissionsHandler().hasPermission(sender,permString,!target.isPublic())) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
      return;
    }
    this.getPlugin().getLocationTracker().getLocationStack(player).push(target.getLocation());
    if (!player.teleport(target.getLocation())) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName+ ""String_Node_Str"");
    }
  }
}","@Override public void runCommand(CommandSender sender,List<String> args){
  if (!this.checkPlayerSender(sender))   return;
  Player player=(Player)sender;
  if (args.size() == 0) {
    this.getPlugin().getLocationTracker().getLocationStack(player).push(player.getLocation());
  }
 else {
    String warpName=args.get(0);
    Warp target=this.getPlugin().getWarp(player,warpName);
    if (target == null) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
      return;
    }
    String permString=""String_Node_Str"";
    if (target.isPublic()) {
      permString=""String_Node_Str"" + warpName;
    }
 else {
      permString=""String_Node_Str"" + target.getOwner() + ""String_Node_Str""+ warpName;
    }
    if (!this.getPlugin().getPermissionsHandler().hasPermission(sender,permString,!target.isPublic())) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName);
      return;
    }
    this.getPlugin().getLocationTracker().getLocationStack(player).push(target.getLocation());
    if (!player.teleport(target.getLocation())) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + warpName+ ""String_Node_Str"");
    }
  }
}"
83646,"@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Player) {
    Player player=(Player)(event.getEntity());
    System.out.println(""String_Node_Str"" + player.getLocation());
    this.plugin.getLocationTracker().setPreviousLocation(player,player.getLocation());
  }
}","@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Player) {
    Player player=(Player)(event.getEntity());
    this.plugin.getLocationTracker().setPreviousLocation(player,player.getLocation());
  }
}"
83647,"@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  System.out.println(""String_Node_Str"" + event.getFrom());
  this.plugin.getLocationTracker().setPreviousLocation(event.getPlayer(),event.getFrom());
}","@Override public void onPlayerTeleport(PlayerTeleportEvent event){
  this.plugin.getLocationTracker().setPreviousLocation(event.getPlayer(),event.getFrom());
}"
83648,"@Override public boolean execute(CommandSender sender,List<String> args) throws OWPermissionException {
  if (!this.checkPlayerSender(sender))   return true;
  Player player=(Player)sender;
  Location playerLoc=player.getLocation();
  String warpType;
  if (args.size() >= 2) {
    warpType=args.get(1);
  }
 else {
    warpType=""String_Node_Str"";
  }
  if (!warpType.equals(""String_Node_Str"") && !warpType.equals(""String_Node_Str"")) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return true;
  }
  this.verifyAnyPermission(sender,""String_Node_Str"",""String_Node_Str"" + warpType);
  OWQuotaManager quotaManager=this.plugin.getQuotaManager();
  if (warpType.equals(""String_Node_Str"")) {
    if (quotaManager.getPublicWarpCount(player) >= quotaManager.getPublicWarpQuota(player)) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
 else   if (warpType.equals(""String_Node_Str"")) {
    if (quotaManager.getPrivateWarpCount(player) >= quotaManager.getPrivateWarpQuota(player)) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
  Warp warp=new Warp(this.plugin,args.get(0),playerLoc,player.getName());
  if (warpType.equals(""String_Node_Str"")) {
    this.plugin.getPublicWarps().put(warp.getName(),warp);
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ warp.getName()+ ""String_Node_Str"");
  }
 else   if (warpType.equals(""String_Node_Str"")) {
    this.plugin.getPrivateWarps().get(player.getName()).put(warp.getName(),warp);
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ warp.getName()+ ""String_Node_Str"");
  }
  return true;
}","@Override public boolean execute(CommandSender sender,List<String> args) throws OWPermissionException {
  if (!this.checkPlayerSender(sender))   return true;
  Player player=(Player)sender;
  Location playerLoc=player.getLocation();
  String warpType;
  if (args.size() >= 2) {
    warpType=args.get(1);
  }
 else {
    warpType=""String_Node_Str"";
  }
  if (!warpType.equals(""String_Node_Str"") && !warpType.equals(""String_Node_Str"")) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return true;
  }
  this.verifyAnyPermission(sender,""String_Node_Str"",""String_Node_Str"" + warpType);
  OWQuotaManager quotaManager=this.plugin.getQuotaManager();
  int quota=Integer.MAX_VALUE;
  if (warpType.equals(""String_Node_Str"")) {
    if (quotaManager.getPublicWarpCount(player) >= 0) {
      quota=quotaManager.getPublicWarpQuota(player);
    }
    if (quotaManager.getPublicWarpCount(player) >= quota) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
 else   if (warpType.equals(""String_Node_Str"")) {
    if (quotaManager.getPublicWarpCount(player) >= 0) {
      quota=quotaManager.getPrivateWarpQuota(player);
    }
    if (quotaManager.getPrivateWarpCount(player) >= quota) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
  Warp warp=new Warp(this.plugin,args.get(0),playerLoc,player.getName());
  if (warpType.equals(""String_Node_Str"")) {
    this.plugin.getPublicWarps().put(warp.getName(),warp);
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ warp.getName()+ ""String_Node_Str"");
  }
 else   if (warpType.equals(""String_Node_Str"")) {
    this.plugin.getPrivateWarps().get(player.getName()).put(warp.getName(),warp);
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ warp.getName()+ ""String_Node_Str"");
  }
  return true;
}"
83649,"@Override public boolean execute(CommandSender sender,List<String> args) throws OWPermissionException {
  if (!this.checkPlayerSender(sender))   return true;
  Player player=(Player)sender;
  Location playerLoc=player.getLocation();
  String warpType;
  if (args.size() >= 2) {
    warpType=args.get(1);
  }
 else {
    warpType=""String_Node_Str"";
  }
  if (!warpType.equals(""String_Node_Str"") && !warpType.equals(""String_Node_Str"")) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return true;
  }
  this.verifyAnyPermission(sender,""String_Node_Str"",""String_Node_Str"" + warpType);
  OWQuotaManager quotaManager=this.plugin.getQuotaManager();
  int quota=Integer.MAX_VALUE;
  if (warpType.equals(""String_Node_Str"")) {
    if (quotaManager.getPublicWarpCount(player) >= 0) {
      quota=quotaManager.getPublicWarpQuota(player);
    }
    if (quotaManager.getPublicWarpCount(player) >= quota) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
 else   if (warpType.equals(""String_Node_Str"")) {
    if (quotaManager.getPublicWarpCount(player) >= 0) {
      quota=quotaManager.getPrivateWarpQuota(player);
    }
    if (quotaManager.getPrivateWarpCount(player) >= quota) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return true;
    }
  }
  Warp warp=new Warp(this.plugin,args.get(0),playerLoc,player.getName());
  if (warpType.equals(""String_Node_Str"")) {
    this.plugin.getPublicWarps().put(warp.getName(),warp);
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ warp.getName()+ ""String_Node_Str"");
  }
 else   if (warpType.equals(""String_Node_Str"")) {
    this.plugin.getPrivateWarps().get(player.getName()).put(warp.getName(),warp);
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ warp.getName()+ ""String_Node_Str"");
  }
  return true;
}","@Override public boolean execute(CommandSender sender,List<String> args) throws OWPermissionException {
  if (!this.checkPlayerSender(sender))   return true;
  Player player=(Player)sender;
  Location playerLoc=player.getLocation();
  String warpType;
  if (args.size() >= 2) {
    warpType=args.get(1);
  }
 else {
    warpType=""String_Node_Str"";
  }
  if (!warpType.equals(""String_Node_Str"") && !warpType.equals(""String_Node_Str"")) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return true;
  }
  this.verifyAnyPermission(sender,""String_Node_Str"",""String_Node_Str"" + warpType);
  OWQuotaManager quotaManager=this.plugin.getQuotaManager();
  int quota=Integer.MAX_VALUE;
  if (warpType.equals(""String_Node_Str"")) {
    if (quotaManager.getPublicWarpQuota(player) >= 0) {
      quota=quotaManager.getPublicWarpQuota(player);
    }
    if (quotaManager.getPublicWarpCount(player) >= quota) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + quota+ ""String_Node_Str"");
      return true;
    }
  }
 else   if (warpType.equals(""String_Node_Str"")) {
    if (quotaManager.getPrivateWarpQuota(player) >= 0) {
      quota=quotaManager.getPrivateWarpQuota(player);
    }
    if (quotaManager.getPrivateWarpCount(player) >= quota) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + quota+ ""String_Node_Str"");
      return true;
    }
  }
  Warp warp=new Warp(this.plugin,args.get(0),playerLoc,player.getName());
  if (warpType.equals(""String_Node_Str"")) {
    this.plugin.getPublicWarps().put(warp.getName(),warp);
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ warp.getName()+ ""String_Node_Str"");
  }
 else   if (warpType.equals(""String_Node_Str"")) {
    this.plugin.getPrivateWarps().get(player.getName()).put(warp.getName(),warp);
    player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ ""String_Node_Str""+ warp.getName()+ ""String_Node_Str"");
  }
  return true;
}"
83650,"private void loadCommands(){
  this.commandTrie=new Trie<String,Map<Range<Integer>,OWCommand>>();
  this.registerCommand(new OWWarpCommand(this),1,1,""String_Node_Str"");
  this.registerCommand(new OWWarpListCommand(this),0,0,""String_Node_Str"");
  this.registerCommand(new OWWarpListCommand(this),""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWWarpDetailCommand(this),""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWWarpSetCommand(this),""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWWarpSetCommand(this),""String_Node_Str"");
  this.registerCommand(new OWQuotaShowCommand(this),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWQuotaUsageCommand(this),0,0,""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWQuotaUsageCommand(this),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWTopCommand(this),""String_Node_Str"");
  this.registerCommand(new OWJumpCommand(this),""String_Node_Str"");
  this.registerCommand(new OWJumpCommand(this),""String_Node_Str"");
  this.registerCommand(new OWBackCommand(this),""String_Node_Str"");
}","private void loadCommands(){
  this.commandTrie=new Trie<String,Map<Range<Integer>,OWCommand>>();
  this.registerCommand(new OWWarpCommand(this),1,1,""String_Node_Str"");
  this.registerCommand(new OWWarpListCommand(this),0,0,""String_Node_Str"");
  this.registerCommand(new OWWarpListCommand(this),""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWWarpDetailCommand(this),""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWWarpSetCommand(this),""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWWarpSetCommand(this),""String_Node_Str"");
  this.registerCommand(new OWQuotaShowCommand(this),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWQuotaUsageCommand(this),0,0,""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWQuotaUsageCommand(this),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWQuotaSetCommand(this),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  this.registerCommand(new OWTopCommand(this),""String_Node_Str"");
  this.registerCommand(new OWJumpCommand(this),""String_Node_Str"");
  this.registerCommand(new OWJumpCommand(this),""String_Node_Str"");
  this.registerCommand(new OWBackCommand(this),""String_Node_Str"");
}"
83651,"/** 
 * Recursively add nodes to the command trie to insert the given OWCommand at the given key path. Overwrites any commands already in the trie at the given key path.
 * @param command The command to add to the trie
 * @param minimumArgs The smallest number of arguments the command can takewhen reached from the given key path
 * @param minimumArgs The largest number of arguments the command can takewhen reached from the given key path 
 * @param keys The key path to use for the new command
 */
private void registerCommand(OWCommand command,int minimumArgs,int maximumArgs,List<String> keys){
  if (keys.size() == 0) {
    return;
  }
  Map<Range<Integer>,OWCommand> commandMap=null;
  try {
    commandMap=this.commandTrie.get(keys);
  }
 catch (  IndexOutOfBoundsException e) {
    this.commandTrie.put(keys,new HashMap<Range<Integer>,OWCommand>());
    commandMap=this.commandTrie.get(keys);
  }
  commandMap.put(new Range<Integer>(minimumArgs,maximumArgs),command);
}","/** 
 * Recursively add nodes to the command trie to insert the given OWCommand at the given key path. Overwrites any commands already in the trie at the given key path.
 * @param command The command to add to the trie
 * @param minimumArgs The smallest number of arguments the command can takewhen reached from the given key path
 * @param minimumArgs The largest number of arguments the command can takewhen reached from the given key path 
 * @param keys The key path to use for the new command
 */
private void registerCommand(OWCommand command,int minimumArgs,int maximumArgs,List<String> keys){
  if (keys.size() == 0) {
    return;
  }
  Map<Range<Integer>,OWCommand> commandMap=null;
  try {
    commandMap=this.commandTrie.get(keys);
    if (commandMap == null) {
      this.commandTrie.put(keys,new HashMap<Range<Integer>,OWCommand>());
      commandMap=this.commandTrie.get(keys);
    }
  }
 catch (  IndexOutOfBoundsException e) {
    this.commandTrie.put(keys,new HashMap<Range<Integer>,OWCommand>());
    commandMap=this.commandTrie.get(keys);
  }
  commandMap.put(new Range<Integer>(minimumArgs,maximumArgs),command);
}"
83652,"public static List<String> trimListLeft(List<String> value,List<String> trim){
  List<String> result=new ArrayList<String>();
  boolean trimming=true;
  for (int i=0; i < value.size(); i++) {
    if (trimming && value.get(i).equals(trim.get(i))) {
      continue;
    }
 else {
      trimming=false;
      result.add(value.get(i));
    }
  }
  return result;
}","public static List<String> trimListLeft(List<String> value,List<String> trim){
  List<String> result=new ArrayList<String>();
  boolean trimming=true;
  for (int i=0; i < value.size(); i++) {
    if (i == trim.size()) {
      trimming=false;
    }
    if (trimming && value.get(i).equals(trim.get(i))) {
      continue;
    }
 else {
      trimming=false;
      result.add(value.get(i));
    }
  }
  return result;
}"
83653,"private void updateParticipantListing(){
  Participant[] sortedParticipants=participants.values().toArray(new Participant[participants.size()]);
  Arrays.sort(sortedParticipants);
  participantListing=new HTMLNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  participantListing.addChild(""String_Node_Str"",username + ""String_Node_Str"");
  for (  String name : sentInvites.values()) {
    participantListing.addChild(""String_Node_Str"",name + ""String_Node_Str"");
  }
  for (  Participant participant : sortedParticipants) {
    String routing;
    if (participant.directlyConnected) {
      routing=l10n(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},new String[]{participant.peerNode.getName(),participant.peerNode.getIdentityString()});
    }
 else {
      routing=l10n(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{participants.get(participant.peerNode.getPubKeyHash()).name,participant.peerNode.getName(),participant.peerNode.getIdentityString()});
    }
    Color nameColor=participant.nameColor;
    String color=""String_Node_Str"" + nameColor.getRed() + ','+ nameColor.getGreen()+ ','+ nameColor.getBlue()+ ')';
    participantListing.addChild(""String_Node_Str"",""String_Node_Str"",routing).addChild(""String_Node_Str"",""String_Node_Str"",color);
  }
}","private void updateParticipantListing(){
  Participant[] sortedParticipants=participants.values().toArray(new Participant[participants.size()]);
  Arrays.sort(sortedParticipants);
  participantListing=new HTMLNode(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  participantListing.addChild(""String_Node_Str"",username + ""String_Node_Str"");
  for (  String name : sentInvites.values()) {
    participantListing.addChild(""String_Node_Str"",name + ""String_Node_Str"");
  }
  for (  Participant participant : sortedParticipants) {
    String routing;
    if (participant.directlyConnected) {
      routing=l10n(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},new String[]{participant.peerNode.getName(),participant.peerNode.getIdentityString()});
    }
 else {
      routing=l10n(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{participants.get(participant.peerNode.getPubKeyHash()).name,participant.peerNode.getName(),participant.peerNode.getIdentityString()});
    }
    Color nameColor=participant.nameColor;
    String color=""String_Node_Str"" + nameColor.getRed() + ','+ nameColor.getGreen()+ ','+ nameColor.getBlue()+ ')';
    participantListing.addChild(""String_Node_Str"",""String_Node_Str"",routing).addChild(""String_Node_Str"",""String_Node_Str"",color,participant.name);
  }
  participantListing.addChild(""String_Node_Str"",sortedParticipants.length + ""String_Node_Str"");
}"
83654,"private boolean receiveInvite(DarknetPeerNode darkPeer,boolean inviteParticipant){
  if (!sentInvites.containsKey(darkPeer.getPubKeyHash())) {
    return false;
  }
  if (inviteParticipant) {
    inviteParticipant(darkPeer,sentInvites.get(darkPeer.getPubKeyHash()));
  }
  sentInvites.remove(darkPeer.getPubKeyHash());
  return true;
}","private boolean receiveInvite(DarknetPeerNode darkPeer,boolean inviteParticipant){
  if (!sentInvites.containsKey(darkPeer.getPubKeyHash())) {
    return false;
  }
  if (inviteParticipant) {
    inviteParticipant(darkPeer,sentInvites.get(darkPeer.getPubKeyHash()));
  }
  sentInvites.remove(darkPeer.getPubKeyHash());
  updateParticipantListing();
  return true;
}"
83655,"/** 
 * Adds a directly connected participant that was invited locally. This node will route messages to and from them.
 * @param darknetParticipant The peer that was invited.
 * @param username The name of this user as referred to within this chat.
 * @return True if the participant was added, false if not.
 */
public boolean inviteParticipant(DarknetPeerNode darknetParticipant,String username){
  if (addParticipant(darknetParticipant.getPubKeyHash(),darknetParticipant.getName(),darknetParticipant,true)) {
    for (    byte[] pubKeyHash : participants.keySet()) {
      if (pubKeyHash != darknetParticipant.getPubKeyHashHash() && participants.get(pubKeyHash).directlyConnected) {
        sendJoin(participants.get(pubKeyHash).peerNode,darknetParticipant.getPubKeyHash(),username);
        sendJoin(darknetParticipant,pubKeyHash,participants.get(pubKeyHash).name);
      }
    }
    return true;
  }
  return false;
}","/** 
 * Adds a directly connected participant that was invited locally. This node will route messages to and from them.
 * @param darknetParticipant The peer that was invited.
 * @param username The name of this user as referred to within this chat.
 * @return True if the participant was added, false if not.
 */
public boolean inviteParticipant(DarknetPeerNode darknetParticipant,String username){
  if (addParticipant(darknetParticipant.getPubKeyHash(),darknetParticipant.getName(),darknetParticipant,true)) {
    for (    byte[] pubKeyHash : participants.keySet()) {
      if (!Arrays.equals(pubKeyHash,darknetParticipant.getPubKeyHash()) && participants.get(pubKeyHash).directlyConnected) {
        sendJoin(participants.get(pubKeyHash).peerNode,darknetParticipant.getPubKeyHash(),username);
        sendJoin(darknetParticipant,pubKeyHash,participants.get(pubKeyHash).name);
      }
    }
    return true;
  }
  return false;
}"
83656,"public void handleMessage(byte[] data,boolean fromDarknet,PeerNode source,int type){
  if (!fromDarknet) {
    freenet.support.Logger.error(this,""String_Node_Str"" + source);
    return;
  }
  DarknetPeerNode darkSource=(DarknetPeerNode)source;
  freenet.support.Logger.normal(this,""String_Node_Str"" + darkSource.getPeer() + ""String_Node_Str"");
  SimpleFieldSet fs=null;
  try {
    fs=new SimpleFieldSet(new String(data,""String_Node_Str""),false,true);
  }
 catch (  UnsupportedEncodingException e) {
    throw new Error(""String_Node_Str"" + e,e);
  }
catch (  IOException e) {
    freenet.support.Logger.error(this,""String_Node_Str"",e);
    return;
  }
  long globalIdentifier;
  try {
    globalIdentifier=fs.getLong(""String_Node_Str"");
  }
 catch (  FSParseException e) {
    System.out.println(""String_Node_Str"" + ((DarknetPeerNode)source).getName() + '.');
    return;
  }
  try {
    type=fs.getInt(""String_Node_Str"");
  }
 catch (  FSParseException e) {
    System.out.println(""String_Node_Str"" + globalIdentifier);
  }
  if (type == OFFER_INVITE) {
    try {
      String username=new String(Base64.decode(fs.get(""String_Node_Str"")));
      String roomName=new String(Base64.decode(fs.get(""String_Node_Str"")));
      receivedInvites.put(globalIdentifier,new chatInvite(username,roomName,darkSource));
    }
 catch (    IllegalBase64Exception e) {
      freenet.support.Logger.error(this,""String_Node_Str"",e);
    }
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    return;
  }
 else   if (type == RETRACT_INVITE) {
    if (receivedInvites.containsKey(globalIdentifier) && receivedInvites.get(globalIdentifier).darkPeer == darkSource) {
      receivedInvites.remove(darkSource.getPubKeyHash());
    }
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    return;
  }
  if (!chatRooms.containsKey(globalIdentifier)) {
    freenet.support.Logger.error(this,l10n.getBase().getString(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},new String[]{String.valueOf(globalIdentifier),String.valueOf(type)}));
    return;
  }
  if (type == ACCEPT_INVITE) {
    chatRooms.get(globalIdentifier).receiveInviteAccept(darkSource);
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    return;
  }
 else   if (type == REJECT_INVITE) {
    chatRooms.get(globalIdentifier).receiveInviteReject(darkSource);
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    return;
  }
  byte[] pubKeyHash;
  try {
    pubKeyHash=Base64.decode(fs.getString(""String_Node_Str""));
  }
 catch (  FSParseException e) {
    pubKeyHash=darkSource.getPubKeyHash();
  }
catch (  IllegalBase64Exception e) {
    System.out.println(""String_Node_Str"" + darkSource.getName() + '.');
    return;
  }
  if (type == MESSAGE) {
    try {
      chatRooms.get(globalIdentifier).receiveMessage(pubKeyHash,new Date(fs.getLong(""String_Node_Str"")),darkSource.getPubKeyHash(),new String(Base64.decode(fs.get(""String_Node_Str""))));
    }
 catch (    FSParseException e) {
      System.out.println(""String_Node_Str"" + darkSource.getName() + '.');
    }
catch (    IllegalBase64Exception e) {
      freenet.support.Logger.error(this,""String_Node_Str"",e);
    }
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
  }
 else   if (type == JOIN) {
    try {
      chatRooms.get(globalIdentifier).joinedParticipant(pubKeyHash,new String(Base64.decode(fs.get(""String_Node_Str""))),darkSource);
    }
 catch (    IllegalBase64Exception e) {
      freenet.support.Logger.error(this,""String_Node_Str"",e);
    }
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
  }
 else   if (type == LEAVE) {
    chatRooms.get(globalIdentifier).removeParticipant(pubKeyHash,darkSource.getPubKeyHash(),false);
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
  }
}","public void handleMessage(byte[] data,boolean fromDarknet,PeerNode source,int type){
  if (!fromDarknet) {
    freenet.support.Logger.error(this,""String_Node_Str"" + source);
    return;
  }
  DarknetPeerNode darkSource=(DarknetPeerNode)source;
  freenet.support.Logger.normal(this,""String_Node_Str"" + darkSource.getPeer() + ""String_Node_Str"");
  SimpleFieldSet fs=null;
  try {
    fs=new SimpleFieldSet(new String(data,""String_Node_Str""),false,true);
  }
 catch (  UnsupportedEncodingException e) {
    throw new Error(""String_Node_Str"" + e,e);
  }
catch (  IOException e) {
    freenet.support.Logger.error(this,""String_Node_Str"",e);
    return;
  }
  long globalIdentifier;
  try {
    globalIdentifier=fs.getLong(""String_Node_Str"");
  }
 catch (  FSParseException e) {
    System.out.println(""String_Node_Str"" + ((DarknetPeerNode)source).getName() + '.');
    return;
  }
  try {
    type=fs.getInt(""String_Node_Str"");
  }
 catch (  FSParseException e) {
    System.out.println(""String_Node_Str"" + globalIdentifier);
  }
  if (type == OFFER_INVITE) {
    try {
      String username=new String(Base64.decode(fs.get(""String_Node_Str"")));
      String roomName=new String(Base64.decode(fs.get(""String_Node_Str"")));
      receivedInvites.put(globalIdentifier,new chatInvite(username,roomName,darkSource));
    }
 catch (    IllegalBase64Exception e) {
      freenet.support.Logger.error(this,""String_Node_Str"",e);
    }
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    return;
  }
 else   if (type == RETRACT_INVITE) {
    if (receivedInvites.containsKey(globalIdentifier) && receivedInvites.get(globalIdentifier).darkPeer == darkSource) {
      receivedInvites.remove(darkSource.getPubKeyHash());
    }
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    return;
  }
  if (!chatRooms.containsKey(globalIdentifier)) {
    freenet.support.Logger.error(this,l10n.getBase().getString(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},new String[]{String.valueOf(globalIdentifier),String.valueOf(type)}));
    return;
  }
  if (type == ACCEPT_INVITE) {
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    chatRooms.get(globalIdentifier).receiveInviteAccept(darkSource);
    return;
  }
 else   if (type == REJECT_INVITE) {
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    chatRooms.get(globalIdentifier).receiveInviteReject(darkSource);
    return;
  }
  byte[] pubKeyHash;
  try {
    pubKeyHash=Base64.decode(fs.getString(""String_Node_Str""));
  }
 catch (  FSParseException e) {
    pubKeyHash=darkSource.getPubKeyHash();
  }
catch (  IllegalBase64Exception e) {
    System.out.println(""String_Node_Str"" + darkSource.getName() + '.');
    return;
  }
  if (type == MESSAGE) {
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    try {
      chatRooms.get(globalIdentifier).receiveMessage(pubKeyHash,new Date(fs.getLong(""String_Node_Str"")),darkSource.getPubKeyHash(),new String(Base64.decode(fs.get(""String_Node_Str""))));
    }
 catch (    FSParseException e) {
      System.out.println(""String_Node_Str"" + darkSource.getName() + '.');
    }
catch (    IllegalBase64Exception e) {
      freenet.support.Logger.error(this,""String_Node_Str"",e);
    }
  }
 else   if (type == JOIN) {
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    try {
      chatRooms.get(globalIdentifier).joinedParticipant(pubKeyHash,new String(Base64.decode(fs.get(""String_Node_Str""))),darkSource);
    }
 catch (    IllegalBase64Exception e) {
      freenet.support.Logger.error(this,""String_Node_Str"",e);
    }
  }
 else   if (type == LEAVE) {
    System.out.println(""String_Node_Str"" + globalIdentifier + ""String_Node_Str""+ darkSource.getName());
    chatRooms.get(globalIdentifier).removeParticipant(pubKeyHash,darkSource.getPubKeyHash(),false);
  }
}"
83657,"private boolean checkItemPlacement(ItemInfo occupied[][][],ItemInfo item){
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      if (occupied[item.screen][x][y] != null) {
        Log.e(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ item.screen+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ occupied[item.screen][x][y]);
        return false;
      }
    }
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      occupied[item.screen][x][y]=item;
    }
  }
  return true;
}","private boolean checkItemPlacement(ItemInfo occupied[][][],ItemInfo item){
  if (item.container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
    return true;
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      if (occupied[item.screen][x][y] != null) {
        Log.e(TAG,""String_Node_Str"" + item + ""String_Node_Str""+ item.screen+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ occupied[item.screen][x][y]);
        return false;
      }
    }
  }
  for (int x=item.cellX; x < (item.cellX + item.spanX); x++) {
    for (int y=item.cellY; y < (item.cellY + item.spanY); y++) {
      occupied[item.screen][x][y]=item;
    }
  }
  return true;
}"
83658,"@Override protected void setChildrenDrawingCacheEnabled(boolean enabled){
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View view=getChildAt(i);
    view.setDrawingCacheEnabled(enabled);
    view.buildDrawingCache(false);
  }
}","@Override protected void setChildrenDrawingCacheEnabled(boolean enabled){
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    final View view=getChildAt(i);
    view.setDrawingCacheEnabled(enabled);
    view.buildDrawingCache(true);
  }
}"
83659,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=ev.getX();
mActivePointerId=ev.getPointerId(0);
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final float x=filterX(ev.getX(pointerIndex));
final float deltaX=mLastMotionX - x;
mLastMotionX=x;
if (deltaX < 0) {
if (mScrollX > 0) {
  scrollBy(Math.round(Math.max(-mScrollX,deltaX)),0);
  updateWallpaperOffset();
}
}
 else if (deltaX > 0) {
final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
if (availableToScroll > 0) {
  scrollBy(Math.round(Math.min(availableToScroll,deltaX)),0);
  updateWallpaperOffset();
}
}
 else {
awakenScrollBars();
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int velocityX=(int)velocityTracker.getXVelocity(mActivePointerId);
final int screenWidth=getWidth();
final int whichScreen=(mScrollX + (screenWidth / 2)) / screenWidth;
final float scrolledPos=(float)mScrollX / screenWidth;
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
final int bound=scrolledPos < whichScreen ? mCurrentScreen - 1 : mCurrentScreen;
snapToScreen(Math.min(whichScreen,bound),velocityX,true);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
final int bound=scrolledPos > whichScreen ? mCurrentScreen + 1 : mCurrentScreen;
snapToScreen(Math.max(whichScreen,bound),velocityX,true);
}
 else {
snapToScreen(whichScreen,0,true);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
resetFilter();
}
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
resetFilter();
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=ev.getX();
mActivePointerId=ev.getPointerId(0);
if (mTouchState == TOUCH_STATE_SCROLLING) {
enableChildrenCache(mCurrentScreen - 1,mCurrentScreen + 1);
}
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int pointerIndex=ev.findPointerIndex(mActivePointerId);
final float x=filterX(ev.getX(pointerIndex));
final float deltaX=mLastMotionX - x;
mLastMotionX=x;
if (deltaX < 0) {
if (mScrollX > 0) {
scrollBy(Math.round(Math.max(-mScrollX,deltaX)),0);
updateWallpaperOffset();
}
}
 else if (deltaX > 0) {
final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
if (availableToScroll > 0) {
scrollBy(Math.round(Math.min(availableToScroll,deltaX)),0);
updateWallpaperOffset();
}
}
 else {
awakenScrollBars();
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
final int velocityX=(int)velocityTracker.getXVelocity(mActivePointerId);
final int screenWidth=getWidth();
final int whichScreen=(mScrollX + (screenWidth / 2)) / screenWidth;
final float scrolledPos=(float)mScrollX / screenWidth;
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
final int bound=scrolledPos < whichScreen ? mCurrentScreen - 1 : mCurrentScreen;
snapToScreen(Math.min(whichScreen,bound),velocityX,true);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
final int bound=scrolledPos > whichScreen ? mCurrentScreen + 1 : mCurrentScreen;
snapToScreen(Math.max(whichScreen,bound),velocityX,true);
}
 else {
snapToScreen(whichScreen,0,true);
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
resetFilter();
}
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
resetFilter();
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}"
83660,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final boolean workspaceLocked=mLauncher.isWorkspaceLocked();
  final boolean allAppsVisible=mLauncher.isAllAppsVisible();
  if (workspaceLocked || allAppsVisible) {
    return false;
  }
  final int action=ev.getAction();
  if ((action == MotionEvent.ACTION_MOVE) && (mTouchState != TOUCH_STATE_REST)) {
    return true;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
      final int pointerIndex=ev.findPointerIndex(mActivePointerId);
      final float x=ev.getX(pointerIndex);
      final float y=ev.getY(pointerIndex);
      final int xDiff=(int)Math.abs(x - mLastMotionX);
      final int yDiff=(int)Math.abs(y - mLastMotionY);
      final int touchSlop=mTouchSlop;
      boolean xPaged=xDiff > mPagingTouchSlop;
      boolean xMoved=xDiff > touchSlop;
      boolean yMoved=yDiff > touchSlop;
      if (xMoved || yMoved) {
        if (xPaged) {
          mTouchState=TOUCH_STATE_SCROLLING;
          mLastMotionX=x;
          enableChildrenCache(0,getChildCount());
        }
        if (mAllowLongPress) {
          mAllowLongPress=false;
          final View currentScreen=getChildAt(mCurrentScreen);
          currentScreen.cancelLongPress();
        }
      }
      break;
    }
case MotionEvent.ACTION_DOWN:
{
    final float x=ev.getX();
    final float y=ev.getY();
    mLastMotionX=x;
    mLastMotionY=y;
    mActivePointerId=ev.getPointerId(0);
    mAllowLongPress=true;
    mTouchState=mScroller.isFinished() ? TOUCH_STATE_REST : TOUCH_STATE_SCROLLING;
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTouchState != TOUCH_STATE_SCROLLING) {
  final CellLayout currentScreen=(CellLayout)getChildAt(mCurrentScreen);
  if (!currentScreen.lastDownOnOccupiedCell()) {
    getLocationOnScreen(mTempCell);
    final int pointerIndex=ev.findPointerIndex(mActivePointerId);
    mWallpaperManager.sendWallpaperCommand(getWindowToken(),""String_Node_Str"",mTempCell[0] + (int)ev.getX(pointerIndex),mTempCell[1] + (int)ev.getY(pointerIndex),0,null);
  }
}
clearChildrenCache();
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
mAllowLongPress=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return mTouchState != TOUCH_STATE_REST;
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final boolean workspaceLocked=mLauncher.isWorkspaceLocked();
  final boolean allAppsVisible=mLauncher.isAllAppsVisible();
  if (workspaceLocked || allAppsVisible) {
    return false;
  }
  final int action=ev.getAction();
  if ((action == MotionEvent.ACTION_MOVE) && (mTouchState != TOUCH_STATE_REST)) {
    return true;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
      final int pointerIndex=ev.findPointerIndex(mActivePointerId);
      final float x=ev.getX(pointerIndex);
      final float y=ev.getY(pointerIndex);
      final int xDiff=(int)Math.abs(x - mLastMotionX);
      final int yDiff=(int)Math.abs(y - mLastMotionY);
      final int touchSlop=mTouchSlop;
      boolean xPaged=xDiff > mPagingTouchSlop;
      boolean xMoved=xDiff > touchSlop;
      boolean yMoved=yDiff > touchSlop;
      if (xMoved || yMoved) {
        if (xPaged) {
          mTouchState=TOUCH_STATE_SCROLLING;
          mLastMotionX=x;
          enableChildrenCache(mCurrentScreen - 1,mCurrentScreen + 1);
        }
        if (mAllowLongPress) {
          mAllowLongPress=false;
          final View currentScreen=getChildAt(mCurrentScreen);
          currentScreen.cancelLongPress();
        }
      }
      break;
    }
case MotionEvent.ACTION_DOWN:
{
    final float x=ev.getX();
    final float y=ev.getY();
    mLastMotionX=x;
    mLastMotionY=y;
    mActivePointerId=ev.getPointerId(0);
    mAllowLongPress=true;
    mTouchState=mScroller.isFinished() ? TOUCH_STATE_REST : TOUCH_STATE_SCROLLING;
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTouchState != TOUCH_STATE_SCROLLING) {
  final CellLayout currentScreen=(CellLayout)getChildAt(mCurrentScreen);
  if (!currentScreen.lastDownOnOccupiedCell()) {
    getLocationOnScreen(mTempCell);
    final int pointerIndex=ev.findPointerIndex(mActivePointerId);
    mWallpaperManager.sendWallpaperCommand(getWindowToken(),""String_Node_Str"",mTempCell[0] + (int)ev.getX(pointerIndex),mTempCell[1] + (int)ev.getY(pointerIndex),0,null);
  }
}
clearChildrenCache();
mTouchState=TOUCH_STATE_REST;
mActivePointerId=INVALID_POINTER;
mAllowLongPress=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return mTouchState != TOUCH_STATE_REST;
}"
83661,"/** 
 * Initializes various states for this workspace.
 */
private void initWorkspace(){
  Context context=getContext();
  mScroller=new Scroller(context,new OvershootInterpolator());
  mCurrentScreen=mDefaultScreen;
  Launcher.setScreen(mCurrentScreen);
  LauncherApplication app=(LauncherApplication)context.getApplicationContext();
  mIconCache=app.getIconCache();
  final ViewConfiguration configuration=ViewConfiguration.get(getContext());
  mTouchSlop=configuration.getScaledTouchSlop();
  mPagingTouchSlop=configuration.getScaledPagingTouchSlop();
  mMaximumVelocity=configuration.getScaledMaximumFlingVelocity();
}","/** 
 * Initializes various states for this workspace.
 */
private void initWorkspace(){
  Context context=getContext();
  mScrollInterpolator=new WorkspaceOvershootInterpolator();
  mScroller=new Scroller(context,mScrollInterpolator);
  mCurrentScreen=mDefaultScreen;
  Launcher.setScreen(mCurrentScreen);
  LauncherApplication app=(LauncherApplication)context.getApplicationContext();
  mIconCache=app.getIconCache();
  final ViewConfiguration configuration=ViewConfiguration.get(getContext());
  mTouchSlop=configuration.getScaledTouchSlop();
  mPagingTouchSlop=configuration.getScaledPagingTouchSlop();
  mMaximumVelocity=configuration.getScaledMaximumFlingVelocity();
}"
83662,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta != 0 ? screenDelta * 300 : 300;
  awakenScrollBars(duration);
  if (!mScroller.isFinished())   mScroller.abortAnimation();
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta != 0 ? 200 + screenDelta * 100 : 300;
  awakenScrollBars(duration);
  if (!mScroller.isFinished())   mScroller.abortAnimation();
  mScrollInterpolator.setDistance(screenDelta);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}"
83663,"public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}","public void run(){
  mRollo.mScrollPos=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}"
83664,"private boolean checkClickOK(){
  return (Math.abs(mAllApps.mVelocity) < 0.4f) && (Math.abs(mAllApps.mPosX - Math.round(mAllApps.mPosX)) < 0.4f);
}","private boolean checkClickOK(){
  return (Math.abs(mAllApps.mVelocity) < 0.4f) && (Math.abs(mScrollPos - Math.round(mScrollPos)) < 0.4f);
}"
83665,"private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mPosX) * mColumnsPerPage,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}","private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mRollo.mScrollPos) * mColumnsPerPage,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}"
83666,"@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  final boolean isPortrait=getWidth() < getHeight();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocityTracker=VelocityTracker.obtain();
      mVelocityTracker.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1]) ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocityTracker.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocityTracker.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocityTracker.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  final boolean isPortrait=getWidth() < getHeight();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocityTracker=VelocityTracker.obtain();
      mVelocityTracker.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1]) ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocityTracker.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if ((isPortrait && y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) || (!isPortrait && x > mRollo.mTouchXBorders[mRollo.mTouchXBorders.length - 1])) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocityTracker.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocityTracker.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}"
83667,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mPosX);
    final int currentPageCol=currentSelection % mColumnsPerPage;
    final int currentPageRow=(currentSelection - (currentTopRow * mColumnsPerPage)) / mRowsPerPage;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % mColumnsPerPage;
        if (lastRowCount == 0) {
          lastRowCount=mColumnsPerPage;
        }
        newSelection=iconCount - lastRowCount + (mColumnsPerPage / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / mColumnsPerPage) - (mRowsPerPage - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
          mRollo.moveTo(newSelection / mColumnsPerPage);
        }
 else         if (currentPageRow != 0) {
          newSelection=currentTopRow * mRowsPerPage;
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / mColumnsPerPage + (iconCount % mColumnsPerPage == 0 ? 0 : 1);
  final int currentRow=currentSelection / mColumnsPerPage;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      if (currentSelection < 0) {
        newSelection=0;
      }
 else {
        newSelection=currentSelection + mColumnsPerPage;
      }
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= mRowsPerPage - 1) {
        mRollo.moveTo((newSelection / mColumnsPerPage) - mRowsPerPage + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (mLastSelection != SELECTION_HOME) {
if (currentPageCol > 0) {
  newSelection=currentSelection - 1;
}
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (mLastSelection != SELECTION_HOME) {
if ((currentPageCol < mColumnsPerPage - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (iconCount > 0) {
    final boolean isPortrait=getWidth() < getHeight();
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mRollo.mScrollPos);
    final int currentPageCol=currentSelection % mColumnsPerPage;
    final int currentPageRow=(currentSelection - (currentTopRow * mColumnsPerPage)) / mRowsPerPage;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        if (isPortrait) {
          mRollo.setHomeSelected(SELECTED_NONE);
          int lastRowCount=iconCount % mColumnsPerPage;
          if (lastRowCount == 0) {
            lastRowCount=mColumnsPerPage;
          }
          newSelection=iconCount - lastRowCount + (mColumnsPerPage / 2);
          if (newSelection >= iconCount) {
            newSelection=iconCount - 1;
          }
          int target=(newSelection / mColumnsPerPage) - (mRowsPerPage - 1);
          if (target < 0) {
            target=0;
          }
          if (currentTopRow != target) {
            mRollo.moveTo(target);
          }
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
          if (currentTopRow > newSelection / mColumnsPerPage) {
            mRollo.moveTo(newSelection / mColumnsPerPage);
          }
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - mColumnsPerPage;
          mRollo.moveTo(newSelection / mColumnsPerPage);
        }
 else         if (currentPageRow != 0) {
          newSelection=currentTopRow * mRowsPerPage;
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / mColumnsPerPage + (iconCount % mColumnsPerPage == 0 ? 0 : 1);
  final int currentRow=currentSelection / mColumnsPerPage;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      if (currentSelection < 0) {
        newSelection=0;
      }
 else {
        newSelection=currentSelection + mColumnsPerPage;
      }
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= mRowsPerPage - 1) {
        mRollo.moveTo((newSelection / mColumnsPerPage) - mRowsPerPage + 1);
      }
    }
 else     if (isPortrait) {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (mLastSelection != SELECTION_HOME) {
if (currentPageCol > 0) {
  newSelection=currentSelection - 1;
}
}
 else if (!isPortrait) {
newSelection=((int)(mRollo.mScrollPos) * mColumnsPerPage) + (mRowsPerPage / 2 * mColumnsPerPage) + mColumnsPerPage - 1;
mRollo.setHomeSelected(SELECTED_NONE);
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (mLastSelection != SELECTION_HOME) {
if (!isPortrait && (currentPageCol == mColumnsPerPage - 1 || currentSelection == iconCount - 1)) {
newSelection=-1;
mRollo.setHomeSelected(SELECTED_FOCUSED);
}
 else if ((currentPageCol < mColumnsPerPage - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}"
83668,"int chooseTappedIcon(int x,int y,float pos){
  y+=(pos - ((int)pos)) * (mTouchYBorders[1] - mTouchYBorders[0]);
  int col=-1;
  int row=-1;
  final int columnsCount=mAllApps.mColumnsPerPage;
  for (int i=0; i < columnsCount; i++) {
    if (x >= mTouchXBorders[i] && x < mTouchXBorders[i + 1]) {
      col=i;
      break;
    }
  }
  final int rowsCount=mAllApps.mRowsPerPage;
  for (int i=0; i < rowsCount; i++) {
    if (y >= mTouchYBorders[i] && y < mTouchYBorders[i + 1]) {
      row=i;
      break;
    }
  }
  if (row < 0 || col < 0) {
    return -1;
  }
  int index=(((int)pos) * columnsCount) + (row * columnsCount) + col;
  if (index >= mState.iconCount) {
    return -1;
  }
 else {
    return index;
  }
}","int chooseTappedIcon(int x,int y){
  float pos=mScrollPos;
  y+=(pos - ((int)pos)) * (mTouchYBorders[1] - mTouchYBorders[0]);
  int col=-1;
  int row=-1;
  final int columnsCount=mAllApps.mColumnsPerPage;
  for (int i=0; i < columnsCount; i++) {
    if (x >= mTouchXBorders[i] && x < mTouchXBorders[i + 1]) {
      col=i;
      break;
    }
  }
  final int rowsCount=mAllApps.mRowsPerPage;
  for (int i=0; i < rowsCount; i++) {
    if (y >= mTouchYBorders[i] && y < mTouchYBorders[i + 1]) {
      row=i;
      break;
    }
  }
  if (row < 0 || col < 0) {
    return -1;
  }
  int index=(((int)pos) * columnsCount) + (row * columnsCount) + col;
  if (index >= mState.iconCount) {
    return -1;
  }
 else {
    return index;
  }
}"
83669,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mSurrendered)   return;
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mPosX) * mColumnsPerPage;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (mColumnsPerPage * mRowsPerPage)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mSurrendered)   return;
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mRollo.mScrollPos) * mColumnsPerPage;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (mColumnsPerPage * mRowsPerPage)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}"
83670,"public void dumpState(){
  Log.d(TAG,""String_Node_Str"" + mRS);
  Log.d(TAG,""String_Node_Str"" + mRollo);
  ApplicationInfo.dumpApplicationInfoList(TAG,""String_Node_Str"",mAllAppsList);
  Log.d(TAG,""String_Node_Str"" + mArrowNavigation);
  Log.d(TAG,""String_Node_Str"" + mStartedScrolling);
  Log.d(TAG,""String_Node_Str"" + mLastSelection);
  Log.d(TAG,""String_Node_Str"" + mLastSelectedIcon);
  Log.d(TAG,""String_Node_Str"" + mVelocityTracker);
  Log.d(TAG,""String_Node_Str"" + mTouchTracking);
  Log.d(TAG,""String_Node_Str"" + mShouldGainFocus);
  Log.d(TAG,""String_Node_Str"" + mZoomDirty);
  Log.d(TAG,""String_Node_Str"" + mAnimateNextZoom);
  Log.d(TAG,""String_Node_Str"" + mZoom);
  Log.d(TAG,""String_Node_Str"" + mPosX);
  Log.d(TAG,""String_Node_Str"" + mVelocity);
  Log.d(TAG,""String_Node_Str"" + mMessageProc);
  if (mRollo != null) {
    mRollo.dumpState();
  }
  if (mRS != null) {
    mRS.contextDump(0);
  }
}","public void dumpState(){
  Log.d(TAG,""String_Node_Str"" + mRS);
  Log.d(TAG,""String_Node_Str"" + mRollo);
  ApplicationInfo.dumpApplicationInfoList(TAG,""String_Node_Str"",mAllAppsList);
  Log.d(TAG,""String_Node_Str"" + mArrowNavigation);
  Log.d(TAG,""String_Node_Str"" + mStartedScrolling);
  Log.d(TAG,""String_Node_Str"" + mLastSelection);
  Log.d(TAG,""String_Node_Str"" + mLastSelectedIcon);
  Log.d(TAG,""String_Node_Str"" + mVelocityTracker);
  Log.d(TAG,""String_Node_Str"" + mTouchTracking);
  Log.d(TAG,""String_Node_Str"" + mShouldGainFocus);
  Log.d(TAG,""String_Node_Str"" + mZoomDirty);
  Log.d(TAG,""String_Node_Str"" + mAnimateNextZoom);
  Log.d(TAG,""String_Node_Str"" + mZoom);
  Log.d(TAG,""String_Node_Str"" + mRollo.mScrollPos);
  Log.d(TAG,""String_Node_Str"" + mVelocity);
  Log.d(TAG,""String_Node_Str"" + mMessageProc);
  if (mRollo != null) {
    mRollo.dumpState();
  }
  if (mRS != null) {
    mRS.contextDump(0);
  }
}"
83671,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRS.mMessageCallback=null;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRS.mMessageCallback=null;
  mZoomDirty=true;
  mHaveSurface=false;
}"
83672,"void dirtyCheck(){
  if (mZoomDirty) {
    setZoom(mZoom,mAnimateNextZoom);
  }
}","void dirtyCheck(){
  if (mZoomDirty) {
    setZoom(mNextZoom,mAnimateNextZoom);
  }
}"
83673,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRollo == null) {
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
  }
  mRollo.dirtyCheck();
  mRollo.resize(w,h);
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  mHaveSurface=true;
  if (mRollo == null) {
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
  }
  mRollo.dirtyCheck();
  mRollo.resize(w,h);
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}"
83674,"/** 
 * Zoom to the specifed level.
 * @param zoom [0..1] 0 is hidden, 1 is open
 */
public void zoom(float zoom,boolean animate){
  cancelLongPress();
  if (mRollo == null) {
    mZoomDirty=true;
    mZoom=zoom;
    mAnimateNextZoom=animate;
    return;
  }
 else {
    mRollo.setZoom(zoom,animate);
  }
}","/** 
 * Zoom to the specifed level.
 * @param zoom [0..1] 0 is hidden, 1 is open
 */
public void zoom(float zoom,boolean animate){
  cancelLongPress();
  mNextZoom=zoom;
  mAnimateNextZoom=animate;
  if (mRollo == null || !mHaveSurface) {
    mZoomDirty=true;
    mZoom=zoom;
    return;
  }
 else {
    mRollo.setZoom(zoom,animate);
  }
}"
83675,"@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    closeAllApps(animate);
  }
}","@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    if (mPaused || ""String_Node_Str"".equals(reason)) {
      animate=false;
    }
    closeAllApps(animate);
  }
}"
83676,"@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
  unregisterReceiver(mCloseSystemDialogsReceiver);
}","@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
}"
83677,"@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
}","@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  unregisterReceiver(mCloseSystemDialogsReceiver);
}"
83678,"@Override protected void onResume(){
  super.onResume();
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
  if (mIsNewIntent) {
    mWorkspace.post(new Runnable(){
      public void run(){
        stopSearch();
      }
    }
);
  }
  mIsNewIntent=false;
}","@Override protected void onResume(){
  super.onResume();
  mPaused=false;
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
  if (mIsNewIntent) {
    mWorkspace.post(new Runnable(){
      public void run(){
        stopSearch();
      }
    }
);
  }
  mIsNewIntent=false;
}"
83679,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
}"
83680,"/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - Back from all apps - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}","/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - from center screen - from other screens - Back from all apps - from center screen - from other screens - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key  TODO: make this not go to workspace - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}"
83681,"@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    closeAllApps(animate);
  }
}","@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    if (mPaused || ""String_Node_Str"".equals(reason)) {
      animate=false;
    }
    closeAllApps(animate);
  }
}"
83682,"@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
  unregisterReceiver(mCloseSystemDialogsReceiver);
}","@Override protected void onPause(){
  super.onPause();
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  mDragController.cancelDrag();
}"
83683,"@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
}","@Override public void onDestroy(){
  super.onDestroy();
  try {
    mAppWidgetHost.stopListening();
  }
 catch (  NullPointerException ex) {
    Log.w(TAG,""String_Node_Str"",ex);
  }
  TextKeyListener.getInstance().release();
  mModel.stopLoader();
  unbindDesktopItems();
  AppInfoCache.unbindDrawables();
  getContentResolver().unregisterContentObserver(mWidgetObserver);
  dismissPreview(mPreviousView);
  dismissPreview(mNextView);
  unregisterReceiver(mCloseSystemDialogsReceiver);
}"
83684,"@Override protected void onResume(){
  super.onResume();
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
}","@Override protected void onResume(){
  super.onResume();
  mPaused=false;
  if (mRestoring) {
    mWorkspaceLoading=true;
    mModel.startLoader(this,true);
    mRestoring=false;
  }
}"
83685,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mDragController=new DragController(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  registerContentObservers();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
  IntentFilter filter=new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  registerReceiver(mCloseSystemDialogsReceiver,filter);
}"
83686,"/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - Back from all apps - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
  }
}","/** 
 * Things to test when changing this code. - Home from workspace - from center screen - from other screens - Home from all apps - from center screen - from other screens - Back from all apps - from center screen - from other screens - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - Go to a screen that's not the default, then all apps, and launch and app, and go back - with back -with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off - Launch an app and turn off the screen while in that app - Go back with home key - Go back with back key  TODO: make this not go to workspace - From all apps - From workspace
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
  }
}"
83687,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}"
83688,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}"
83689,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}"
83690,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}"
83691,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}"
83692,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}"
83693,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}"
83694,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}"
83695,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty && mAllAppsList != null) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}"
83696,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}"
83697,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}"
83698,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}"
83699,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}"
83700,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}"
83701,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}"
83702,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}"
83703,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}"
83704,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}"
83705,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}"
83706,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}"
83707,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}"
83708,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}"
83709,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}"
83710,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}"
83711,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}"
83712,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty && mAllAppsList != null) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}"
83713,"/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount - 1;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}","/** 
 * Handle the allocations for the removed app.  Make sure you call saveAppsList when done.
 */
private void removeApp(int index){
  final int count=mState.iconCount - index - 1;
  final int src=index + 1;
  System.arraycopy(mIcons,src,mIcons,index,count);
  System.arraycopy(mIconIds,src,mIconIds,index,count);
  System.arraycopy(mLabels,src,mLabels,index,count);
  System.arraycopy(mLabelIds,src,mLabelIds,index,count);
  mRollo.mState.iconCount--;
  final int last=mState.iconCount;
  mIcons[last]=null;
  mIconIds[last]=0;
  mLabels[last]=null;
  mLabelIds[last]=0;
}"
83714,"public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null && mRollo.mHasSurface) {
      mRollo.addApp(index,item);
      mRollo.mState.iconCount++;
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void addApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  if (mRollo != null) {
    mRollo.reallocAppsList(mRollo.mState.iconCount + N);
  }
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=Collections.binarySearch(mAllAppsList,item,LauncherModel.APP_NAME_COMPARATOR);
    if (index < 0) {
      index=-(index + 1);
    }
    mAllAppsList.add(index,item);
    if (mRollo != null) {
      mRollo.addApp(index,item);
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}"
83715,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  mState.iconCount=count;
  for (int i=0; i < mState.iconCount; i++) {
    createAppIconAllocations(i,list.get(i));
    uploadAppIcon(i,list.get(i));
  }
  saveAppsList();
}"
83716,"private void uploadAppIcon(int index,ApplicationInfo item){
  mIcons[index]=Allocation.createFromBitmap(mRS,item.iconBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mIcons[index],item.iconBitmap.getWidth(),item.iconBitmap.getHeight());
  mLabels[index]=Allocation.createFromBitmap(mRS,item.titleBitmap,Element.RGBA_8888(mRS),true);
  frameBitmapAllocMips(mLabels[index],item.titleBitmap.getWidth(),item.titleBitmap.getHeight());
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
  mIconIds[index]=mIcons[index].getID();
  mLabelIds[index]=mLabels[index].getID();
}","private void uploadAppIcon(int index,ApplicationInfo item){
  if (mIconIds[index] != mIcons[index].getID()) {
    throw new IllegalStateException(""String_Node_Str"" + index + ""String_Node_Str""+ mIcons[index].getID()+ ""String_Node_Str""+ mIconIds[index]+ ""String_Node_Str""+ item);
  }
  mIcons[index].uploadToTexture(0);
  mLabels[index].uploadToTexture(0);
}"
83717,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      for (int i=0; i < mState.iconCount; i++) {
        uploadAppIcon(i,mAllAppsList.get(i));
      }
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mZoom,mAnimateNextZoom);
    }
  }
}"
83718,"public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null && mRollo.mHasSurface) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null && mRollo.mHasSurface) {
    mRollo.saveAppsList();
  }
}","public void removeApps(ArrayList<ApplicationInfo> list){
  if (mAllAppsList == null) {
    return;
  }
  final int N=list.size();
  for (int i=0; i < N; i++) {
    final ApplicationInfo item=list.get(i);
    int index=findAppByComponent(mAllAppsList,item);
    if (index >= 0) {
      int ic=mRollo != null ? mRollo.mState.iconCount : 666;
      mAllAppsList.remove(index);
      if (mRollo != null) {
        mRollo.removeApp(index);
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"" + item + ""String_Node_Str"");
    }
  }
  if (mRollo != null) {
    mRollo.saveAppsList();
  }
}"
83719,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  createAppIconAllocations(index,item);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
  mRollo.mState.iconCount++;
}"
83720,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null && mRollo.mHasSurface) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (mRollo != null && mRollo.mHasSurface) {
      gainFocus();
    }
 else {
      mShouldGainFocus=true;
    }
  }
 else {
    if (mRollo != null) {
      if (mArrowNavigation) {
        mRollo.clearSelectedIcon();
        mRollo.setHomeSelected(SELECTED_NONE);
        mRollo.mState.save();
        mArrowNavigation=false;
      }
    }
 else {
      mShouldGainFocus=false;
    }
  }
}"
83721,"@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
}","@Override public void onReceive(Context context,Intent intent){
  closeSystemDialogs();
  String reason=intent.getStringExtra(""String_Node_Str"");
  if (!""String_Node_Str"".equals(reason)) {
    boolean animate=true;
    closeAllApps(animate);
  }
}"
83722,"void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}"
83723,"void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}","/** 
 * Things to test when changing this code: - Home from workspace - from center screen - from other screens - Home from all apps - Back from all apps - Launch app from workspace and quit - with back - with home - Launch app from all apps and quit - with back - with home - On workspace, long press power and go back - with back - with home - On all apps, long press power and go back - with back - with home - On workspace, power off - On all apps, power off
 */
void closeAllApps(boolean animated){
  if (mAllAppsGrid.isVisible()) {
    mAllAppsGrid.zoom(0.0f,animated);
    mAllAppsGrid.setFocusable(false);
    mWorkspace.getChildAt(mWorkspace.getCurrentScreen()).requestFocus();
    mWorkspace.startFading(true);
  }
}"
83724,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}"
83725,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}"
83726,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}"
83727,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}"
83728,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}"
83729,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}"
83730,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}"
83731,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}"
83732,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}"
83733,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}"
83734,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}"
83735,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}"
83736,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}"
83737,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}"
83738,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}"
83739,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}"
83740,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}"
83741,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}"
83742,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}"
83743,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}"
83744,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}"
83745,"/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
  boolean update=false;
  boolean remove=false;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
      update=true;
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
        remove=true;
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
        update=true;
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (update || modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (remove || removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}","/** 
 * Call from the handler for ACTION_PACKAGE_ADDED, ACTION_PACKAGE_REMOVED and ACTION_PACKAGE_CHANGED.
 */
public void onReceive(Context context,Intent intent){
  context=mApp;
  final String packageName=intent.getData().getSchemeSpecificPart();
  ArrayList<ApplicationInfo> added=null;
  ArrayList<ApplicationInfo> removed=null;
  ArrayList<ApplicationInfo> modified=null;
synchronized (mLock) {
    if (mBeforeFirstLoad) {
      return;
    }
    final String action=intent.getAction();
    final boolean replacing=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    if (packageName == null || packageName.length() == 0) {
      return;
    }
    if (Intent.ACTION_PACKAGE_CHANGED.equals(action)) {
      mAllAppsList.updatePackage(context,packageName);
    }
 else     if (Intent.ACTION_PACKAGE_REMOVED.equals(action)) {
      if (!replacing) {
        mAllAppsList.removePackage(packageName);
      }
    }
 else {
      if (!replacing) {
        mAllAppsList.addPackage(context,packageName);
      }
 else {
        mAllAppsList.updatePackage(context,packageName);
      }
    }
    if (mAllAppsList.added.size() > 0) {
      added=mAllAppsList.added;
      mAllAppsList.added=new ArrayList<ApplicationInfo>();
    }
    if (mAllAppsList.removed.size() > 0) {
      removed=mAllAppsList.removed;
      mAllAppsList.removed=new ArrayList<ApplicationInfo>();
      for (      ApplicationInfo info : removed) {
        AppInfoCache.remove(info.intent.getComponent());
      }
    }
    if (mAllAppsList.modified.size() > 0) {
      modified=mAllAppsList.modified;
      mAllAppsList.modified=new ArrayList<ApplicationInfo>();
    }
    final Callbacks callbacks=mCallbacks != null ? mCallbacks.get() : null;
    if (callbacks == null) {
      Log.w(TAG,""String_Node_Str"");
      return;
    }
    if (added != null) {
      final ArrayList<ApplicationInfo> addedFinal=added;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageAdded(addedFinal);
        }
      }
);
    }
    if (modified != null) {
      final ArrayList<ApplicationInfo> modifiedFinal=modified;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageUpdated(packageName,modifiedFinal);
        }
      }
);
    }
    if (removed != null) {
      final ArrayList<ApplicationInfo> removedFinal=removed;
      mHandler.post(new Runnable(){
        public void run(){
          callbacks.bindPackageRemoved(packageName,removedFinal);
        }
      }
);
    }
  }
}"
83746,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}"
83747,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}"
83748,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}"
83749,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}"
83750,"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (!event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}","@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
      return true;
case KeyEvent.KEYCODE_HOME:
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  if (SystemProperties.getInt(""String_Node_Str"",0) != 0) {
    dumpState();
    return true;
  }
break;
}
}
 else if (event.getAction() == KeyEvent.ACTION_UP) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_BACK:
if (event.isTracking() && !event.isCanceled()) {
mWorkspace.dispatchKeyEvent(event);
if (isAllAppsVisible()) {
  closeAllApps(true);
}
 else {
  closeFolder();
}
dismissPreview(mPreviousView);
dismissPreview(mNextView);
}
return true;
case KeyEvent.KEYCODE_HOME:
return true;
}
}
return super.dispatchKeyEvent(event);
}"
83751,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}"
83752,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}"
83753,"private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=mAllAppsList.added;
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}","private void bindAllApps(){
synchronized (mLock) {
    final ArrayList<ApplicationInfo> results=(ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
    mAllAppsList.added=new ArrayList<ApplicationInfo>();
    mHandler.post(new Runnable(){
      public void run(){
        final long t=SystemClock.uptimeMillis();
        final int count=results.size();
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindAllApplications(results);
        }
        if (DEBUG_LOADERS) {
          Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ (SystemClock.uptimeMillis() - t)+ ""String_Node_Str"");
        }
      }
    }
);
  }
}"
83754,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    boolean alreadyOnHome=((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
    boolean allAppsVisible=isAllAppsVisible();
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen(alreadyOnHome && !allAppsVisible);
    }
    closeAllApps(alreadyOnHome && allAppsVisible);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}"
83755,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}","void closeSystemDialogs(){
  closeAllApps(true);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}"
83756,"void moveToDefaultScreen(){
  snapToScreen(mDefaultScreen);
  getChildAt(mDefaultScreen).requestFocus();
}","void moveToDefaultScreen(boolean animate){
  snapToScreen(mDefaultScreen,animate);
  getChildAt(mDefaultScreen).requestFocus();
}"
83757,"void snapToScreen(int whichScreen){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,duration);
  invalidate();
}","void snapToScreen(int whichScreen,boolean animate){
  whichScreen=Math.max(0,Math.min(whichScreen,getChildCount() - 1));
  clearVacantCache();
  enableChildrenCache(mCurrentScreen,whichScreen);
  final int screenDelta=Math.abs(whichScreen - mCurrentScreen);
  mNextScreen=whichScreen;
  mPreviousIndicator.setLevel(mNextScreen);
  mNextIndicator.setLevel(mNextScreen);
  View focusedChild=getFocusedChild();
  if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
    focusedChild.clearFocus();
  }
  final int newX=whichScreen * getWidth();
  final int delta=newX - mScrollX;
  final int duration=screenDelta * 300;
  awakenScrollBars(duration);
  mScroller.startScroll(mScrollX,0,delta,0,animate ? duration : 1);
  invalidate();
}"
83758,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mWaitingForResult=false;
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (Intent.ACTION_MAIN.equals(intent.getAction())) {
    closeSystemDialogs();
    mIsNewIntent=true;
    if (!mWorkspace.isDefaultScreenShowing()) {
      mWorkspace.moveToDefaultScreen();
    }
    closeAllApps(false);
    final View v=getWindow().peekDecorView();
    if (v != null && v.getWindowToken() != null) {
      InputMethodManager imm=(InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(v.getWindowToken(),0);
    }
  }
}"
83759,"void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
}","void closeSystemDialogs(){
  closeAllApps(false);
  getWindow().closeAllPanels();
  try {
    dismissDialog(DIALOG_CREATE_SHORTCUT);
  }
 catch (  Exception e) {
  }
  try {
    dismissDialog(DIALOG_RENAME_FOLDER);
  }
 catch (  Exception e) {
  }
  mWaitingForResult=false;
}"
83760,"public boolean onLongClick(View v){
switch (v.getId()) {
case R.id.previous_screen:
    showPreviousPreview(v);
  return true;
case R.id.next_screen:
showNextPreview(v);
return true;
}
if (isWorkspaceLocked()) {
return false;
}
if (!(v instanceof CellLayout)) {
v=(View)v.getParent();
}
CellLayout.CellInfo cellInfo=(CellLayout.CellInfo)v.getTag();
if (cellInfo == null) {
return true;
}
if (mWorkspace.allowLongPress()) {
if (cellInfo.cell == null) {
if (cellInfo.valid) {
mWorkspace.setAllowLongPress(false);
showAddDialog(cellInfo);
}
}
 else {
if (!(cellInfo.cell instanceof Folder)) {
mWorkspace.startDrag(cellInfo);
}
}
}
return true;
}","public boolean onLongClick(View v){
switch (v.getId()) {
case R.id.previous_screen:
    if (!isAllAppsVisible()) {
      mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
      showPreviousPreview(v);
    }
  return true;
case R.id.next_screen:
if (!isAllAppsVisible()) {
  mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
  showNextPreview(v);
}
return true;
}
if (isWorkspaceLocked()) {
return false;
}
if (!(v instanceof CellLayout)) {
v=(View)v.getParent();
}
CellLayout.CellInfo cellInfo=(CellLayout.CellInfo)v.getTag();
if (cellInfo == null) {
return true;
}
if (mWorkspace.allowLongPress()) {
if (cellInfo.cell == null) {
if (cellInfo.valid) {
mWorkspace.setAllowLongPress(false);
showAddDialog(cellInfo);
}
}
 else {
if (!(cellInfo.cell instanceof Folder)) {
mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
mWorkspace.startDrag(cellInfo);
}
}
}
return true;
}"
83761,"/** 
 * Finds all the views we need and configure them properly.
 */
private void setupViews(){
  DragController dragController=mDragController;
  DragLayer dragLayer=(DragLayer)findViewById(R.id.drag_layer);
  dragLayer.setDragController(dragController);
  mAllAppsGrid=(AllAppsView)dragLayer.findViewById(R.id.all_apps_view);
  mAllAppsGrid.setLauncher(this);
  mAllAppsGrid.setDragController(dragController);
  mAllAppsGrid.setWillNotDraw(false);
  mAllAppsGrid.setFocusable(false);
  mWorkspace=(Workspace)dragLayer.findViewById(R.id.workspace);
  final Workspace workspace=mWorkspace;
  DeleteZone deleteZone=(DeleteZone)dragLayer.findViewById(R.id.delete_zone);
  mDeleteZone=deleteZone;
  mHandleView=(HandleView)findViewById(R.id.all_apps_button);
  mHandleView.setLauncher(this);
  mHandleView.setOnClickListener(this);
  mPreviousView=(ImageView)dragLayer.findViewById(R.id.previous_screen);
  mNextView=(ImageView)dragLayer.findViewById(R.id.next_screen);
  Drawable previous=mPreviousView.getDrawable();
  Drawable next=mNextView.getDrawable();
  mWorkspace.setIndicators(previous,next);
  mPreviousView.setOnLongClickListener(this);
  mNextView.setOnLongClickListener(this);
  workspace.setOnLongClickListener(this);
  workspace.setDragController(dragController);
  workspace.setLauncher(this);
  deleteZone.setLauncher(this);
  deleteZone.setDragController(dragController);
  deleteZone.setHandle(mHandleView);
  dragController.setDragScoller(workspace);
  dragController.setDragListener(deleteZone);
  dragController.setScrollView(dragLayer);
  dragController.addDropTarget(workspace);
  dragController.addDropTarget(deleteZone);
}","/** 
 * Finds all the views we need and configure them properly.
 */
private void setupViews(){
  DragController dragController=mDragController;
  DragLayer dragLayer=(DragLayer)findViewById(R.id.drag_layer);
  dragLayer.setDragController(dragController);
  mAllAppsGrid=(AllAppsView)dragLayer.findViewById(R.id.all_apps_view);
  mAllAppsGrid.setLauncher(this);
  mAllAppsGrid.setDragController(dragController);
  mAllAppsGrid.setWillNotDraw(false);
  mAllAppsGrid.setFocusable(false);
  mWorkspace=(Workspace)dragLayer.findViewById(R.id.workspace);
  final Workspace workspace=mWorkspace;
  DeleteZone deleteZone=(DeleteZone)dragLayer.findViewById(R.id.delete_zone);
  mDeleteZone=deleteZone;
  mHandleView=(HandleView)findViewById(R.id.all_apps_button);
  mHandleView.setLauncher(this);
  mHandleView.setOnClickListener(this);
  mPreviousView=(ImageView)dragLayer.findViewById(R.id.previous_screen);
  mNextView=(ImageView)dragLayer.findViewById(R.id.next_screen);
  Drawable previous=mPreviousView.getDrawable();
  Drawable next=mNextView.getDrawable();
  mWorkspace.setIndicators(previous,next);
  mPreviousView.setHapticFeedbackEnabled(false);
  mPreviousView.setOnLongClickListener(this);
  mNextView.setHapticFeedbackEnabled(false);
  mNextView.setOnLongClickListener(this);
  workspace.setOnLongClickListener(this);
  workspace.setDragController(dragController);
  workspace.setLauncher(this);
  deleteZone.setLauncher(this);
  deleteZone.setDragController(dragController);
  deleteZone.setHandle(mHandleView);
  dragController.setDragScoller(workspace);
  dragController.setDragListener(deleteZone);
  dragController.setScrollView(dragLayer);
  dragController.addDropTarget(workspace);
  dragController.addDropTarget(deleteZone);
}"
83762,"/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 */
void fitInScreen(View child,int screen,int spanX,int spanY){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  final CellLayout group=(CellLayout)getChildAt(screen);
  boolean vacant=group.getVacantCell(mTempCell,spanX,spanY);
  if (vacant) {
    group.addView(child,new CellLayout.LayoutParams(mTempCell[0],mTempCell[1],spanX,spanY));
    child.setOnLongClickListener(mLongClickListener);
    if (!(child instanceof Folder)) {
      child.setOnLongClickListener(mLongClickListener);
    }
    if (child instanceof DropTarget) {
      mDragController.addDropTarget((DropTarget)child);
    }
  }
}","/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 */
void fitInScreen(View child,int screen,int spanX,int spanY){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  final CellLayout group=(CellLayout)getChildAt(screen);
  boolean vacant=group.getVacantCell(mTempCell,spanX,spanY);
  if (vacant) {
    group.addView(child,new CellLayout.LayoutParams(mTempCell[0],mTempCell[1],spanX,spanY));
    child.setHapticFeedbackEnabled(false);
    child.setOnLongClickListener(mLongClickListener);
    if (child instanceof DropTarget) {
      mDragController.addDropTarget((DropTarget)child);
    }
  }
}"
83763,"/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param x The X position of the child in the screen's grid.
 * @param y The Y position of the child in the screen's grid.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 * @param insert When true, the child is inserted at the beginning of the children list.
 */
void addInScreen(View child,int screen,int x,int y,int spanX,int spanY,boolean insert){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  clearVacantCache();
  final CellLayout group=(CellLayout)getChildAt(screen);
  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)child.getLayoutParams();
  if (lp == null) {
    lp=new CellLayout.LayoutParams(x,y,spanX,spanY);
  }
 else {
    lp.cellX=x;
    lp.cellY=y;
    lp.cellHSpan=spanX;
    lp.cellVSpan=spanY;
  }
  group.addView(child,insert ? 0 : -1,lp);
  if (!(child instanceof Folder)) {
    child.setOnLongClickListener(mLongClickListener);
  }
  if (child instanceof DropTarget) {
    mDragController.addDropTarget((DropTarget)child);
  }
}","/** 
 * Adds the specified child in the specified screen. The position and dimension of the child are defined by x, y, spanX and spanY.
 * @param child The child to add in one of the workspace's screens.
 * @param screen The screen in which to add the child.
 * @param x The X position of the child in the screen's grid.
 * @param y The Y position of the child in the screen's grid.
 * @param spanX The number of cells spanned horizontally by the child.
 * @param spanY The number of cells spanned vertically by the child.
 * @param insert When true, the child is inserted at the beginning of the children list.
 */
void addInScreen(View child,int screen,int x,int y,int spanX,int spanY,boolean insert){
  if (screen < 0 || screen >= getChildCount()) {
    throw new IllegalStateException(""String_Node_Str"" + getChildCount());
  }
  clearVacantCache();
  final CellLayout group=(CellLayout)getChildAt(screen);
  CellLayout.LayoutParams lp=(CellLayout.LayoutParams)child.getLayoutParams();
  if (lp == null) {
    lp=new CellLayout.LayoutParams(x,y,spanX,spanY);
  }
 else {
    lp.cellX=x;
    lp.cellY=y;
    lp.cellHSpan=spanX;
    lp.cellVSpan=spanY;
  }
  group.addView(child,insert ? 0 : -1,lp);
  if (!(child instanceof Folder)) {
    child.setHapticFeedbackEnabled(false);
    child.setOnLongClickListener(mLongClickListener);
  }
  if (child instanceof DropTarget) {
    mDragController.addDropTarget((DropTarget)child);
  }
}"
83764,"private void onDropExternal(int x,int y,Object dragInfo,CellLayout cellLayout,boolean insertAtFirst){
  ItemInfo info=(ItemInfo)dragInfo;
  View view;
switch (info.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
    if (info.container == NO_ID) {
      info=new ApplicationInfo((ApplicationInfo)info);
    }
  view=mLauncher.createShortcut(R.layout.application,cellLayout,(ApplicationInfo)info);
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
view=FolderIcon.fromXml(R.layout.folder_icon,mLauncher,(ViewGroup)getChildAt(mCurrentScreen),((UserFolderInfo)info));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + info.itemType);
}
cellLayout.addView(view,insertAtFirst ? 0 : -1);
view.setOnLongClickListener(mLongClickListener);
if (view instanceof DropTarget) {
mDragController.addDropTarget((DropTarget)view);
}
mTargetCell=estimateDropCell(x,y,1,1,view,cellLayout,mTargetCell);
cellLayout.onDropChild(view,mTargetCell);
CellLayout.LayoutParams lp=(CellLayout.LayoutParams)view.getLayoutParams();
LauncherModel.addOrMoveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,mCurrentScreen,lp.cellX,lp.cellY);
}","private void onDropExternal(int x,int y,Object dragInfo,CellLayout cellLayout,boolean insertAtFirst){
  ItemInfo info=(ItemInfo)dragInfo;
  View view;
switch (info.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
    if (info.container == NO_ID) {
      info=new ApplicationInfo((ApplicationInfo)info);
    }
  view=mLauncher.createShortcut(R.layout.application,cellLayout,(ApplicationInfo)info);
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
view=FolderIcon.fromXml(R.layout.folder_icon,mLauncher,(ViewGroup)getChildAt(mCurrentScreen),((UserFolderInfo)info));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + info.itemType);
}
cellLayout.addView(view,insertAtFirst ? 0 : -1);
view.setHapticFeedbackEnabled(false);
view.setOnLongClickListener(mLongClickListener);
if (view instanceof DropTarget) {
mDragController.addDropTarget((DropTarget)view);
}
mTargetCell=estimateDropCell(x,y,1,1,view,cellLayout,mTargetCell);
cellLayout.onDropChild(view,mTargetCell);
CellLayout.LayoutParams lp=(CellLayout.LayoutParams)view.getLayoutParams();
LauncherModel.addOrMoveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,mCurrentScreen,lp.cellX,lp.cellY);
}"
83765,"/** 
 * Used to inflate the Workspace from XML.
 * @param context The application's context.
 * @param attrs The attribtues set containing the Workspace's customization values.
 * @param defStyle Unused.
 */
public Workspace(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  mWallpaperManager=WallpaperManager.getInstance(context);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Workspace,defStyle,0);
  mDefaultScreen=a.getInt(R.styleable.Workspace_defaultScreen,1);
  a.recycle();
  initWorkspace();
}","/** 
 * Used to inflate the Workspace from XML.
 * @param context The application's context.
 * @param attrs The attribtues set containing the Workspace's customization values.
 * @param defStyle Unused.
 */
public Workspace(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  mWallpaperManager=WallpaperManager.getInstance(context);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.Workspace,defStyle,0);
  mDefaultScreen=a.getInt(R.styleable.Workspace_defaultScreen,1);
  a.recycle();
  setHapticFeedbackEnabled(false);
  initWorkspace();
}"
83766,"public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.999f;
    }
  }
}","public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.999f;
    }
  }
}"
83767,"public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
}","public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}"
83768,"private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}","private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}"
83769,"private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mMessageProc=new AAMessage();
  mRS.mMessageCallback=mMessageProc;
  mRS.contextBindRootScript(mScript);
}","private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mRS.contextBindRootScript(mScript);
}"
83770,"@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}"
83771,"public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.001f;
    }
  }
}","public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.001f;
    }
  }
}"
83772,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mRollo.mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}"
83773,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
      mZoomDirty=false;
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
    }
  }
}"
83774,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}"
83775,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}"
83776,"public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.999f;
    }
  }
}","public boolean isOpaque(){
  if (mZoomDirty) {
    return mNextZoom > 0.999f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.999f;
    }
  }
}"
83777,"public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
}","public void run(){
  mPosX=((float)mData[0]) / (1 << 16);
  mVelocity=((float)mData[1]) / (1 << 16);
  mZoom=((float)mData[2]) / (1 << 16);
  mZoomDirty=false;
}"
83778,"private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}","private void gainFocus(){
  if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    mRollo.selectIcon(Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE,SELECTED_FOCUSED);
    mRollo.mState.save();
  }
}"
83779,"private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mMessageProc=new AAMessage();
  mRS.mMessageCallback=mMessageProc;
  mRS.contextBindRootScript(mScript);
}","private void initRs(){
  ScriptC.Builder sb=new ScriptC.Builder(mRS);
  sb.setScript(mRes,R.raw.rollo3);
  sb.setRoot(true);
  sb.addDefines(mDefines);
  sb.setType(mParams.mType,""String_Node_Str"",Defines.ALLOC_PARAMS);
  sb.setType(mState.mType,""String_Node_Str"",Defines.ALLOC_STATE);
  mInvokeMove=sb.addInvokable(""String_Node_Str"");
  mInvokeFling=sb.addInvokable(""String_Node_Str"");
  mInvokeMoveTo=sb.addInvokable(""String_Node_Str"");
  mInvokeResetWAR=sb.addInvokable(""String_Node_Str"");
  mInvokeSetZoom=sb.addInvokable(""String_Node_Str"");
  mScript=sb.create();
  mScript.setClearColor(0.0f,0.0f,0.0f,0.0f);
  mScript.bindAllocation(mParams.mAlloc,Defines.ALLOC_PARAMS);
  mScript.bindAllocation(mState.mAlloc,Defines.ALLOC_STATE);
  mScript.bindAllocation(mAllocIconIds,Defines.ALLOC_ICON_IDS);
  mScript.bindAllocation(mAllocLabelIds,Defines.ALLOC_LABEL_IDS);
  mRS.contextBindRootScript(mScript);
}"
83780,"@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  mArrowNavigation=false;
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
      mTouchTracking=TRACKING_HOME;
      mRollo.setHomeSelected(SELECTED_PRESSED);
      mRollo.mState.save();
      mCurrentIconIndex=-1;
    }
 else {
      mTouchTracking=TRACKING_FLING;
      mMotionDownRawX=(int)ev.getRawX();
      mMotionDownRawY=(int)ev.getRawY();
      mRollo.mState.newPositionX=ev.getRawY() / getHeight();
      mRollo.mState.newTouchDown=1;
      if (!mRollo.checkClickOK()) {
        mRollo.clearSelectedIcon();
      }
 else {
        mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mMessageProc.mPosX,SELECTED_PRESSED);
        if (mDownIconIndex < 0) {
          cancelLongPress();
        }
      }
      mRollo.mState.save();
      mRollo.move();
      mVelocity=VelocityTracker.obtain();
      mVelocity.addMovement(ev);
      mStartedScrolling=false;
    }
  break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
  mRollo.setHomeSelected(y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1] ? SELECTED_PRESSED : SELECTED_NONE);
  mRollo.mState.save();
}
 else if (mTouchTracking == TRACKING_FLING) {
  int rawX=(int)ev.getRawX();
  int rawY=(int)ev.getRawY();
  int slop;
  slop=Math.abs(rawY - mMotionDownRawY);
  if (!mStartedScrolling && slop < mSlop) {
    mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mMessageProc.mPosX);
    if (mDownIconIndex != mCurrentIconIndex) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
  }
 else {
    if (!mStartedScrolling) {
      cancelLongPress();
      mCurrentIconIndex=-1;
    }
    mRollo.mState.newPositionX=ev.getRawY() / getHeight();
    mRollo.mState.newTouchDown=1;
    mRollo.move();
    mStartedScrolling=true;
    mRollo.clearSelectedIcon();
    mVelocity.addMovement(ev);
    mRollo.mState.save();
  }
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
  reallyPlaySoundEffect(SoundEffectConstants.CLICK);
  mLauncher.closeAllApps(true);
}
mRollo.setHomeSelected(SELECTED_NONE);
mRollo.mState.save();
}
mCurrentIconIndex=-1;
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawY() / getHeight();
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocity=mVelocity.getYVelocity() / getHeight();
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}"
83781,"public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mRollo == null) {
      return false;
    }
 else {
      return mRollo.mMessageProc.mZoom > 0.001f;
    }
  }
}","public boolean isVisible(){
  if (mZoomDirty) {
    return mNextZoom > 0.001f;
  }
 else {
    if (mMessageProc == null) {
      return false;
    }
 else {
      return mMessageProc.mZoom > 0.001f;
    }
  }
}"
83782,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mRollo.mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  boolean handled=false;
  if (!isVisible()) {
    return false;
  }
  final int iconCount=mRollo.mState.iconCount;
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      if (mLastSelection == SELECTION_HOME) {
        reallyPlaySoundEffect(SoundEffectConstants.CLICK);
        mLauncher.closeAllApps(true);
      }
 else {
        int whichApp=mRollo.mState.selectedIconIndex;
        if (whichApp >= 0) {
          ApplicationInfo app=mAllAppsList.get(whichApp);
          mLauncher.startActivitySafely(app.intent);
          handled=true;
        }
      }
    }
  }
  if (mArrowNavigation && iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=Math.round(mMessageProc.mPosX);
    final int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    final int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (mLastSelection == SELECTION_HOME) {
        mRollo.setHomeSelected(SELECTED_NONE);
        int lastRowCount=iconCount % Defines.COLUMNS_PER_PAGE;
        if (lastRowCount == 0) {
          lastRowCount=Defines.COLUMNS_PER_PAGE;
        }
        newSelection=iconCount - lastRowCount + (Defines.COLUMNS_PER_PAGE / 2);
        if (newSelection >= iconCount) {
          newSelection=iconCount - 1;
        }
        int target=(newSelection / Defines.COLUMNS_PER_PAGE) - (Defines.ROWS_PER_PAGE - 1);
        if (target < 0) {
          target=0;
        }
        if (currentTopRow != target) {
          mRollo.moveTo(target);
        }
      }
 else {
        if (currentPageRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
        }
 else         if (currentTopRow > 0) {
          newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
          mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
        }
      }
    handled=true;
  break;
case KeyEvent.KEYCODE_DPAD_DOWN:
{
  final int rowCount=iconCount / Defines.COLUMNS_PER_PAGE + (iconCount % Defines.COLUMNS_PER_PAGE == 0 ? 0 : 1);
  final int currentRow=currentSelection / Defines.COLUMNS_PER_PAGE;
  if (mLastSelection != SELECTION_HOME) {
    if (currentRow < rowCount - 1) {
      mRollo.setHomeSelected(SELECTED_NONE);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
      if (newSelection >= iconCount) {
        newSelection=iconCount - 1;
      }
      if (currentPageRow >= Defines.ROWS_PER_PAGE - 1) {
        mRollo.moveTo((newSelection / Defines.COLUMNS_PER_PAGE) - Defines.ROWS_PER_PAGE + 1);
      }
    }
 else {
      newSelection=-1;
      mRollo.setHomeSelected(SELECTED_FOCUSED);
    }
  }
  handled=true;
  break;
}
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
handled=true;
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < iconCount - 1)) {
newSelection=currentSelection + 1;
}
handled=true;
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection,SELECTED_FOCUSED);
mRollo.mState.save();
}
}
return handled;
}"
83783,"void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
      mZoomDirty=false;
    }
  }
}","void dirtyCheck(){
  if (mHasSurface) {
    if (mAppsDirty) {
      uploadApps(mAllAppsList);
      saveAppsList();
      mAppsDirty=false;
    }
    if (mZoomDirty) {
      setZoom(mNextZoom,mNextAnimate);
    }
  }
}"
83784,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
    }
    if (mShouldGainFocus) {
      gainFocus();
      mShouldGainFocus=false;
    }
    mRollo.dirtyCheck();
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  mRS.mMessageCallback=mMessageProc=new AAMessage();
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
}"
83785,"@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}","@Override public void onWindowFocusChanged(boolean hasWindowFocus){
  super.onWindowFocusChanged(hasWindowFocus);
  if (mArrowNavigation) {
    if (!hasWindowFocus) {
      mLastSelectedIcon=mRollo.mState.selectedIconIndex;
      mRollo.setHomeSelected(SELECTED_NONE);
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
    }
 else     if (hasWindowFocus) {
      if (mRollo.mState.iconCount > 0) {
        if (mLastSelection == SELECTION_ICONS) {
          int selection=mLastSelectedIcon;
          final int firstIcon=Math.round(mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE;
          if (selection < 0 || selection < firstIcon || selection >= mRollo.mState.iconCount || selection >= firstIcon + (Defines.COLUMNS_PER_PAGE * Defines.ROWS_PER_PAGE)) {
            selection=firstIcon;
          }
          mRollo.selectIcon(selection,SELECTED_FOCUSED);
          mRollo.mState.save();
        }
 else         if (mLastSelection == SELECTION_HOME) {
          mRollo.setHomeSelected(SELECTED_FOCUSED);
          mRollo.mState.save();
        }
      }
    }
  }
}"
83786,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}"
83787,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}"
83788,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}"
83789,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
  mRS.mMessageCallback=null;
}"
83790,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}"
83791,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}"
83792,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}"
83793,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}"
83794,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}"
83795,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}"
83796,"/** 
 * Implementation of the method from LauncherModel.Callbacks.
 */
void bindFolders(HashMap<Long,FolderInfo> folders){
  mFolders.putAll(folders);
}","/** 
 * Implementation of the method from LauncherModel.Callbacks.
 */
public void bindFolders(HashMap<Long,FolderInfo> folders){
  mFolders.clear();
  mFolders.putAll(folders);
}"
83797,"/** 
 * Read everything out of our database.
 */
private void bindWorkspace(){
  final long t=SystemClock.uptimeMillis();
  Callbacks callbacks=mCallbacks.get();
  if (callbacks == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  int N;
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.startBinding();
      }
    }
  }
);
  N=mItems.size();
  for (int i=0; i < N; i+=ITEMS_CHUNK) {
    final int start=i;
    final int chunkSize=(i + ITEMS_CHUNK <= N) ? ITEMS_CHUNK : (N - i);
    mHandler.post(new Runnable(){
      public void run(){
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindItems(mItems,start,start + chunkSize);
        }
      }
    }
);
  }
  mHandler.postIdle(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"");
    }
  }
);
  final int currentScreen=callbacks.getCurrentWorkspaceScreen();
  N=mAppWidgets.size();
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen == currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen != currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.finishBindingItems();
      }
    }
  }
);
  mHandler.post(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
      if (Launcher.PROFILE_ROTATE) {
        android.os.Debug.stopMethodTracing();
      }
    }
  }
);
}","/** 
 * Read everything out of our database.
 */
private void bindWorkspace(){
  final long t=SystemClock.uptimeMillis();
  Callbacks callbacks=mCallbacks.get();
  if (callbacks == null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  int N;
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.startBinding();
      }
    }
  }
);
  N=mItems.size();
  for (int i=0; i < N; i+=ITEMS_CHUNK) {
    final int start=i;
    final int chunkSize=(i + ITEMS_CHUNK <= N) ? ITEMS_CHUNK : (N - i);
    mHandler.post(new Runnable(){
      public void run(){
        Callbacks callbacks=tryGetCallbacks();
        if (callbacks != null) {
          callbacks.bindItems(mItems,start,start + chunkSize);
        }
      }
    }
);
  }
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.bindFolders(mFolders);
      }
    }
  }
);
  mHandler.postIdle(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"");
    }
  }
);
  final int currentScreen=callbacks.getCurrentWorkspaceScreen();
  N=mAppWidgets.size();
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen == currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  for (int i=0; i < N; i++) {
    final LauncherAppWidgetInfo widget=mAppWidgets.get(i);
    if (widget.screen != currentScreen) {
      mHandler.post(new Runnable(){
        public void run(){
          Callbacks callbacks=tryGetCallbacks();
          if (callbacks != null) {
            callbacks.bindAppWidget(widget);
          }
        }
      }
);
    }
  }
  mHandler.post(new Runnable(){
    public void run(){
      Callbacks callbacks=tryGetCallbacks();
      if (callbacks != null) {
        callbacks.finishBindingItems();
      }
    }
  }
);
  mHandler.post(new Runnable(){
    public void run(){
      Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
      if (Launcher.PROFILE_ROTATE) {
        android.os.Debug.stopMethodTracing();
      }
    }
  }
);
}"
83798,"private void loadWorkspace(){
  long t=SystemClock.uptimeMillis();
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  mItems.clear();
  final Cursor c=contentResolver.query(LauncherSettings.Favorites.CONTENT_URI,null,null,null,null);
  try {
    final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
    final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
    final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
    final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
    final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
    final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
    final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
    final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
    final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
    final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
    final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
    final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
    final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
    final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
    final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
    final int uriIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.URI);
    final int displayModeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.DISPLAY_MODE);
    ApplicationInfo info;
    String intentDescription;
    Widget widgetInfo;
    LauncherAppWidgetInfo appWidgetInfo;
    int container;
    long id;
    Intent intent;
    while (!mStopped && c.moveToNext()) {
      try {
        int itemType=c.getInt(itemTypeIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
          intentDescription=c.getString(intentIndex);
        try {
          intent=Intent.parseUri(intentDescription,0);
        }
 catch (        URISyntaxException e) {
          continue;
        }
      if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
        info=getApplicationInfo(manager,intent,context);
      }
 else {
        info=getApplicationInfoShortcut(c,context,iconTypeIndex,iconPackageIndex,iconResourceIndex,iconIndex);
      }
    if (info == null) {
      info=new ApplicationInfo();
      info.icon=manager.getDefaultActivityIcon();
    }
  if (info != null) {
    info.title=c.getString(titleIndex);
    info.intent=intent;
    info.id=c.getLong(idIndex);
    container=c.getInt(containerIndex);
    info.container=container;
    info.screen=c.getInt(screenIndex);
    info.cellX=c.getInt(cellXIndex);
    info.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
      mItems.add(info);
    break;
default :
  UserFolderInfo folderInfo=findOrMakeUserFolder(folders,container);
folderInfo.add(info);
break;
}
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
id=c.getLong(idIndex);
UserFolderInfo folderInfo=findOrMakeUserFolder(folders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
container=c.getInt(containerIndex);
folderInfo.container=container;
folderInfo.screen=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(folderInfo);
break;
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER:
id=c.getLong(idIndex);
LiveFolderInfo liveFolderInfo=findOrMakeLiveFolder(folders,id);
intentDescription=c.getString(intentIndex);
intent=null;
if (intentDescription != null) {
try {
intent=Intent.parseUri(intentDescription,0);
}
 catch (URISyntaxException e) {
}
}
liveFolderInfo.title=c.getString(titleIndex);
liveFolderInfo.id=id;
container=c.getInt(containerIndex);
liveFolderInfo.container=container;
liveFolderInfo.screen=c.getInt(screenIndex);
liveFolderInfo.cellX=c.getInt(cellXIndex);
liveFolderInfo.cellY=c.getInt(cellYIndex);
liveFolderInfo.uri=Uri.parse(c.getString(uriIndex));
liveFolderInfo.baseIntent=intent;
liveFolderInfo.displayMode=c.getInt(displayModeIndex);
loadLiveFolderIcon(context,c,iconTypeIndex,iconPackageIndex,iconResourceIndex,liveFolderInfo);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(liveFolderInfo);
break;
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_WIDGET_SEARCH:
widgetInfo=Widget.makeSearch();
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
widgetInfo.id=c.getLong(idIndex);
widgetInfo.screen=c.getInt(screenIndex);
widgetInfo.container=container;
widgetInfo.cellX=c.getInt(cellXIndex);
widgetInfo.cellY=c.getInt(cellYIndex);
mItems.add(widgetInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
int appWidgetId=c.getInt(appWidgetIdIndex);
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId);
appWidgetInfo.id=c.getLong(idIndex);
appWidgetInfo.screen=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
appWidgetInfo.container=c.getInt(containerIndex);
mAppWidgets.add(appWidgetInfo);
break;
}
}
 catch (Exception e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
  finally {
c.close();
}
Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
}","private void loadWorkspace(){
  long t=SystemClock.uptimeMillis();
  final Context context=mContext;
  final ContentResolver contentResolver=context.getContentResolver();
  final PackageManager manager=context.getPackageManager();
  mItems.clear();
  final Cursor c=contentResolver.query(LauncherSettings.Favorites.CONTENT_URI,null,null,null,null);
  try {
    final int idIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);
    final int intentIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);
    final int titleIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);
    final int iconTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_TYPE);
    final int iconIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);
    final int iconPackageIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);
    final int iconResourceIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);
    final int containerIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);
    final int itemTypeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);
    final int appWidgetIdIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_ID);
    final int screenIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);
    final int cellXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);
    final int cellYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);
    final int spanXIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);
    final int spanYIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);
    final int uriIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.URI);
    final int displayModeIndex=c.getColumnIndexOrThrow(LauncherSettings.Favorites.DISPLAY_MODE);
    ApplicationInfo info;
    String intentDescription;
    Widget widgetInfo;
    LauncherAppWidgetInfo appWidgetInfo;
    int container;
    long id;
    Intent intent;
    while (!mStopped && c.moveToNext()) {
      try {
        int itemType=c.getInt(itemTypeIndex);
switch (itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
          intentDescription=c.getString(intentIndex);
        try {
          intent=Intent.parseUri(intentDescription,0);
        }
 catch (        URISyntaxException e) {
          continue;
        }
      if (itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) {
        info=getApplicationInfo(manager,intent,context);
      }
 else {
        info=getApplicationInfoShortcut(c,context,iconTypeIndex,iconPackageIndex,iconResourceIndex,iconIndex);
      }
    if (info == null) {
      info=new ApplicationInfo();
      info.icon=manager.getDefaultActivityIcon();
    }
  if (info != null) {
    info.title=c.getString(titleIndex);
    info.intent=intent;
    info.id=c.getLong(idIndex);
    container=c.getInt(containerIndex);
    info.container=container;
    info.screen=c.getInt(screenIndex);
    info.cellX=c.getInt(cellXIndex);
    info.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
      mItems.add(info);
    break;
default :
  UserFolderInfo folderInfo=findOrMakeUserFolder(mFolders,container);
folderInfo.add(info);
break;
}
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
id=c.getLong(idIndex);
UserFolderInfo folderInfo=findOrMakeUserFolder(mFolders,id);
folderInfo.title=c.getString(titleIndex);
folderInfo.id=id;
container=c.getInt(containerIndex);
folderInfo.container=container;
folderInfo.screen=c.getInt(screenIndex);
folderInfo.cellX=c.getInt(cellXIndex);
folderInfo.cellY=c.getInt(cellYIndex);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(folderInfo);
break;
}
mFolders.put(folderInfo.id,folderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER:
id=c.getLong(idIndex);
LiveFolderInfo liveFolderInfo=findOrMakeLiveFolder(mFolders,id);
intentDescription=c.getString(intentIndex);
intent=null;
if (intentDescription != null) {
try {
intent=Intent.parseUri(intentDescription,0);
}
 catch (URISyntaxException e) {
}
}
liveFolderInfo.title=c.getString(titleIndex);
liveFolderInfo.id=id;
container=c.getInt(containerIndex);
liveFolderInfo.container=container;
liveFolderInfo.screen=c.getInt(screenIndex);
liveFolderInfo.cellX=c.getInt(cellXIndex);
liveFolderInfo.cellY=c.getInt(cellYIndex);
liveFolderInfo.uri=Uri.parse(c.getString(uriIndex));
liveFolderInfo.baseIntent=intent;
liveFolderInfo.displayMode=c.getInt(displayModeIndex);
loadLiveFolderIcon(context,c,iconTypeIndex,iconPackageIndex,iconResourceIndex,liveFolderInfo);
switch (container) {
case LauncherSettings.Favorites.CONTAINER_DESKTOP:
mItems.add(liveFolderInfo);
break;
}
mFolders.put(liveFolderInfo.id,liveFolderInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_WIDGET_SEARCH:
widgetInfo=Widget.makeSearch();
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
widgetInfo.id=c.getLong(idIndex);
widgetInfo.screen=c.getInt(screenIndex);
widgetInfo.container=container;
widgetInfo.cellX=c.getInt(cellXIndex);
widgetInfo.cellY=c.getInt(cellYIndex);
mItems.add(widgetInfo);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
int appWidgetId=c.getInt(appWidgetIdIndex);
appWidgetInfo=new LauncherAppWidgetInfo(appWidgetId);
appWidgetInfo.id=c.getLong(idIndex);
appWidgetInfo.screen=c.getInt(screenIndex);
appWidgetInfo.cellX=c.getInt(cellXIndex);
appWidgetInfo.cellY=c.getInt(cellYIndex);
appWidgetInfo.spanX=c.getInt(spanXIndex);
appWidgetInfo.spanY=c.getInt(spanYIndex);
container=c.getInt(containerIndex);
if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP) {
Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
continue;
}
appWidgetInfo.container=c.getInt(containerIndex);
mAppWidgets.add(appWidgetInfo);
break;
}
}
 catch (Exception e) {
Log.w(TAG,""String_Node_Str"",e);
}
}
}
  finally {
c.close();
}
Log.d(TAG,""String_Node_Str"" + (SystemClock.uptimeMillis() - t) + ""String_Node_Str"");
}"
83799,"private void startWallpaper(){
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}","private void startWallpaper(){
  closeAllApps(true);
  final Intent pickWallpaper=new Intent(Intent.ACTION_SET_WALLPAPER);
  Intent chooser=Intent.createChooser(pickWallpaper,getText(R.string.chooser_wallpaper));
  WallpaperManager wm=(WallpaperManager)getSystemService(Context.WALLPAPER_SERVICE);
  WallpaperInfo wi=wm.getWallpaperInfo();
  if (wi != null && wi.getSettingsActivity() != null) {
    LabeledIntent li=new LabeledIntent(getPackageName(),R.string.configure_wallpaper,0);
    li.setClassName(wi.getPackageName(),wi.getSettingsActivity());
    chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,new Intent[]{li});
  }
  startActivityForResult(chooser,REQUEST_PICK_WALLPAPER);
}"
83800,"private void addItems(){
  showAddDialog(mMenuAddInfo);
}","private void addItems(){
  closeAllApps(true);
  showAddDialog(mMenuAddInfo);
}"
83801,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}"
83802,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}"
83803,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}"
83804,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}"
83805,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}"
83806,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}"
83807,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}"
83808,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}"
83809,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}"
83810,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}"
83811,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}"
83812,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}"
83813,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}"
83814,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}"
83815,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}"
83816,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=resolveSize(mBitmap.getWidth(),widthMeasureSpec);
  int heightSize=resolveSize(mBitmap.getHeight(),heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setMeasuredDimension(mBitmap.getWidth(),mBitmap.getHeight());
}"
83817,"@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
}","@Override public void surfaceDestroyed(SurfaceHolder holder){
  super.surfaceDestroyed(holder);
  mRollo.mHasSurface=false;
}"
83818,"private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  for (int i=0; i < count; i++) {
    uploadAppIcon(i,list.get(i));
  }
  mState.iconCount=count;
  saveAppsList();
}","private void setApps(ArrayList<ApplicationInfo> list){
  final int count=list != null ? list.size() : 0;
  int allocCount=count;
  if (allocCount < 1) {
    allocCount=1;
  }
  mIcons=new Allocation[count];
  mIconIds=new int[allocCount];
  mAllocIconIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  mLabels=new Allocation[count];
  mLabelIds=new int[allocCount];
  mAllocLabelIds=Allocation.createSized(mRS,Element.USER_I32(mRS),allocCount);
  Element ie8888=Element.RGBA_8888(mRS);
  Utilities.BubbleText bubble=new Utilities.BubbleText(getContext());
  mState.iconCount=count;
  uploadApps(list);
  saveAppsList();
}"
83819,"@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}","@Override public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  Log.d(TAG,""String_Node_Str"");
  long startTime=SystemClock.uptimeMillis();
  super.surfaceChanged(holder,format,w,h);
  if (mRS == null) {
    mRS=createRenderScript(true);
    mRollo=new RolloRS();
    mRollo.mHasSurface=true;
    mRollo.init(getResources(),w,h);
    if (mAllAppsList != null) {
      mRollo.setApps(mAllAppsList);
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    mRollo.mHasSurface=true;
    mRollo.dirtyCheck();
  }
  Resources res=getContext().getResources();
  int barHeight=(int)res.getDimension(R.dimen.button_bar_height);
  long endTime=SystemClock.uptimeMillis();
  Log.d(TAG,""String_Node_Str"" + (endTime - startTime) + ""String_Node_Str"");
}"
83820,"/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  uploadAppIcon(index,item);
}","/** 
 * Handle the allocations for the new app.  Make sure you call saveAppsList when done.
 */
private void addApp(int index,ApplicationInfo item){
  final int count=mState.iconCount - index;
  final int dest=index + 1;
  System.arraycopy(mIcons,index,mIcons,dest,count);
  System.arraycopy(mIconIds,index,mIconIds,dest,count);
  System.arraycopy(mLabels,index,mLabels,dest,count);
  System.arraycopy(mLabelIds,index,mLabelIds,dest,count);
  if (mHasSurface) {
    uploadAppIcon(index,item);
  }
 else {
    mAppsDirty=true;
  }
}"
83821,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}"
83822,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}"
83823,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}"
83824,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}"
83825,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}"
83826,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}"
83827,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}"
83828,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}"
83829,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}"
83830,"/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.filtered=true;
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}","/** 
 * Update the title and icon.  Don't keep a reference to the context!
 */
private static void updateTitleAndIcon(ResolveInfo info,ApplicationInfo application,Context context,Utilities.BubbleText bubble){
  final PackageManager packageManager=context.getPackageManager();
  application.title=info.loadLabel(packageManager);
  if (application.title == null) {
    application.title=info.activityInfo.name;
  }
  application.iconBitmap=Utilities.createAllAppsBitmap(info.activityInfo.loadIcon(packageManager),context);
  application.titleBitmap=bubble.createTextBitmap(application.title.toString());
}"
83831,"public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mInflater=LayoutInflater.from(context);
}","public ApplicationsAdapter(Context context,ArrayList<ApplicationInfo> apps){
  super(context,0,apps);
  mPackageManager=context.getPackageManager();
  mInflater=LayoutInflater.from(context);
}"
83832,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ApplicationInfo info=getItem(position);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.application_boxed,parent,false);
  }
  if (info.icon == null) {
    info.icon=AppInfoCache.getIconDrawable(mPackageManager,info);
  }
  if (!info.filtered) {
    info.icon=Utilities.createIconThumbnail(info.icon,getContext());
    info.filtered=true;
  }
  final TextView textView=(TextView)convertView;
  textView.setCompoundDrawablesWithIntrinsicBounds(null,info.icon,null,null);
  textView.setText(info.title);
  return convertView;
}"
83833,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}"
83834,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}"
83835,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}"
83836,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}"
83837,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}"
83838,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}"
83839,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isVisible()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mArrowNavigation) {
      int whichApp=mRollo.mState.selectedIconIndex;
      if (whichApp >= 0) {
        ApplicationInfo app=mAllAppsList.get(whichApp);
        mLauncher.startActivitySafely(app.intent);
      }
    }
  }
  if (mArrowNavigation && mRollo.mState.iconCount > 0) {
    mArrowNavigation=true;
    int currentSelection=mRollo.mState.selectedIconIndex;
    int currentTopRow=(int)mRollo.mMessageProc.mPosX;
    int currentPageCol=currentSelection % Defines.COLUMNS_PER_PAGE;
    int currentPageRow=(currentSelection - (currentTopRow * Defines.COLUMNS_PER_PAGE)) / Defines.ROWS_PER_PAGE;
    int newSelection=currentSelection;
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (currentPageRow > 0) {
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
 else       if (currentTopRow > 0) {
        mRollo.moveTo(currentTopRow - 1);
        newSelection=currentSelection - Defines.COLUMNS_PER_PAGE;
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (currentSelection < mRollo.mState.iconCount - Defines.COLUMNS_PER_PAGE) {
    if (currentPageRow < Defines.ROWS_PER_PAGE - 1) {
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
 else {
      mRollo.moveTo(currentTopRow + 1);
      newSelection=currentSelection + Defines.COLUMNS_PER_PAGE;
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (currentPageCol > 0) {
newSelection=currentSelection - 1;
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if ((currentPageCol < Defines.COLUMNS_PER_PAGE - 1) && (currentSelection < mRollo.mState.iconCount - 1)) {
newSelection=currentSelection + 1;
}
break;
}
if (newSelection != currentSelection) {
mRollo.selectIcon(newSelection);
mRollo.mState.save();
}
}
return true;
}"
83840,"@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}","@Override protected void onFocusChanged(boolean gainFocus,int direction,Rect previouslyFocusedRect){
  super.onFocusChanged(gainFocus,direction,previouslyFocusedRect);
  if (!isVisible()) {
    return;
  }
  if (gainFocus) {
    if (!mArrowNavigation && mRollo.mState.iconCount > 0) {
      mArrowNavigation=true;
      mRollo.selectIcon(Math.round(mRollo.mMessageProc.mPosX) * Defines.COLUMNS_PER_PAGE);
      mRollo.mState.save();
    }
  }
 else {
    if (mArrowNavigation) {
      mRollo.clearSelectedIcon();
      mRollo.mState.save();
      mArrowNavigation=false;
    }
  }
}"
83841,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}"
83842,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}"
83843,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}"
83844,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}"
83845,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}"
83846,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}"
83847,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}"
83848,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}"
83849,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}"
83850,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}"
83851,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}"
83852,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}"
83853,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}"
83854,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}"
83855,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}"
83856,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}"
83857,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}"
83858,"public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    mLauncher.startActivitySafely(app.intent);
  }
}","public void onClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    mLauncher.startActivitySafely(app.intent);
  }
}"
83859,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    mLastMotionX=x;
    mLastMotionY=y;
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int slopX;
if (mRotateMove) {
  slopX=Math.abs(y - mLastMotionY);
}
 else {
  slopX=Math.abs(x - mLastMotionX);
}
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
  mLastMotionX=x;
  mLastMotionY=y;
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
mLastMotionX=-10000;
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}"
83860,"void selectIcon(int index){
  int iconCount=mAllAppsList.size();
  if (index < 0 || index >= iconCount) {
    mState.selectedIconIndex=-1;
    return;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}","void selectIcon(int index){
  if (index < 0) {
    mState.selectedIconIndex=-1;
  }
 else {
    mState.selectedIconIndex=index;
    Bitmap selectionBitmap=mSelectionBitmap;
    Utilities.drawSelectedAllAppsBitmap(mSelectionCanvas,selectionBitmap.getWidth(),selectionBitmap.getHeight(),mAllAppsList.get(index).iconBitmap);
    mSelectedIcon=Allocation.createFromBitmap(mRS,selectionBitmap,Element.RGBA_8888(mRS),false);
    mSelectedIcon.uploadToTexture(0);
    mState.selectedIconTexture=mSelectedIcon.getID();
  }
}"
83861,"public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  int index=mRollo.mState.selectedIconIndex;
  if (mRollo.checkClickOK() && index >= 0 && index < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(index);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}","public boolean onLongClick(View v){
  if (mLocks != 0 || !isVisible()) {
    return true;
  }
  if (mRollo.checkClickOK() && mCurrentIconIndex == mDownIconIndex && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
    ApplicationInfo app=mAllAppsList.get(mCurrentIconIndex);
    int screenX=mMotionDownRawX - (mDefines.ICON_WIDTH_PX / 2);
    int screenY=mMotionDownRawY - mDefines.ICON_HEIGHT_PX;
    int left=(mDefines.ICON_TEXTURE_WIDTH_PX - mDefines.ICON_WIDTH_PX) / 2;
    int top=(mDefines.ICON_TEXTURE_HEIGHT_PX - mDefines.ICON_HEIGHT_PX) / 2;
    mDragController.startDrag(app.iconBitmap,screenX,screenY,left,top,mDefines.ICON_WIDTH_PX,mDefines.ICON_HEIGHT_PX,this,app,DragController.DRAG_ACTION_COPY);
    mLauncher.closeAllApps(true);
  }
  return true;
}"
83862,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}"
83863,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
break;
}
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (x < 60 && y > 700) {
    }
  if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
    mTouchTracking=TRACKING_HOME;
  }
 else {
    mTouchTracking=TRACKING_FLING;
    mMotionDownRawX=(int)ev.getRawX();
    mMotionDownRawY=(int)ev.getRawY();
    if (mRotateMove) {
      mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
    }
 else {
      mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
    }
    mRollo.mState.newTouchDown=1;
    if (!mRollo.checkClickOK()) {
      mRollo.clearSelectedIcon();
    }
 else {
      mDownIconIndex=mCurrentIconIndex=mRollo.selectIcon(x,y,mRollo.mMessageProc.mPosX);
      if (mDownIconIndex < 0) {
        cancelLongPress();
      }
    }
    mRollo.mState.save();
    mRollo.move();
    mVelocity=VelocityTracker.obtain();
    mVelocity.addMovement(ev);
    mStartedScrolling=false;
  }
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
if (mTouchTracking == TRACKING_HOME) {
}
 else if (mTouchTracking == TRACKING_FLING) {
int rawX=(int)ev.getRawX();
int rawY=(int)ev.getRawY();
int slop;
if (mRotateMove) {
  slop=Math.abs(rawY - mMotionDownRawY);
}
 else {
  slop=Math.abs(rawX - mMotionDownRawX);
}
if (!mStartedScrolling && slop < mSlop) {
  mCurrentIconIndex=mRollo.chooseTappedIcon(x,y,mRollo.mMessageProc.mPosX);
  if (mDownIconIndex != mCurrentIconIndex) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
}
 else {
  if (!mStartedScrolling) {
    cancelLongPress();
    mCurrentIconIndex=-1;
  }
  if (mRotateMove) {
    mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
  }
 else {
    mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
  }
  mRollo.mState.newTouchDown=1;
  mRollo.move();
  mStartedScrolling=true;
  mRollo.clearSelectedIcon();
  mVelocity.addMovement(ev);
  mRollo.mState.save();
}
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
if (mTouchTracking == TRACKING_HOME) {
if (action == MotionEvent.ACTION_UP) {
if (y > mRollo.mTouchYBorders[mRollo.mTouchYBorders.length - 1]) {
mLauncher.closeAllApps(true);
}
}
}
 else if (mTouchTracking == TRACKING_FLING) {
mRollo.mState.newTouchDown=0;
if (mRotateMove) {
mRollo.mState.newPositionX=ev.getRawY() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / mDefines.SCREEN_WIDTH_PX;
}
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
if (mRotateMove) {
mRollo.mState.flingVelocityX=mVelocity.getYVelocity() / mDefines.SCREEN_WIDTH_PX;
}
 else {
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / mDefines.SCREEN_WIDTH_PX;
}
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.fling();
if (mVelocity != null) {
mVelocity.recycle();
mVelocity=null;
}
}
mTouchTracking=TRACKING_NONE;
break;
}
return true;
}"
83864,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mModel=((LauncherApplication)getApplication()).setLauncher(this);
  mInflater=getLayoutInflater();
  mAppWidgetManager=AppWidgetManager.getInstance(this);
  mAppWidgetHost=new LauncherAppWidgetHost(this,APPWIDGET_HOST_ID);
  mAppWidgetHost.startListening();
  if (PROFILE_STARTUP) {
    android.os.Debug.startMethodTracing(""String_Node_Str"");
  }
  checkForLocaleChange();
  setWallpaperDimension();
  setContentView(R.layout.launcher);
  setupViews();
  lockAllApps();
  mSavedState=savedInstanceState;
  restoreState(mSavedState);
  if (PROFILE_STARTUP) {
    android.os.Debug.stopMethodTracing();
  }
  mModel.setAllAppsDirty();
  mModel.setWorkspaceDirty();
  if (!mRestoring) {
    mModel.startLoader(this,true);
  }
  mDefaultKeySsb=new SpannableStringBuilder();
  Selection.setSelection(mDefaultKeySsb,0);
}"
83865,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked() || mLauncher.isAllAppsVisible()) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}"
83866,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slop=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slop < mConfig.getScaledTouchSlop()) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mConfig.getScaledMaximumFlingVelocity());
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slopX=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}"
83867,"public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlop) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
if (Math.abs(deltaY) > mSlop) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}","public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlopX) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
 else if (Math.abs(deltaY) > mSlopY) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}"
83868,"public SwipeController(Context context){
  ViewConfiguration config=ViewConfiguration.get(context);
  mSlop=config.getScaledTouchSlop();
  DisplayMetrics display=context.getResources().getDisplayMetrics();
  mSwipeDistance=display.heightPixels / 2;
  setMode(MODE_WORKSPACE,false);
}","public SwipeController(Context context){
  ViewConfiguration config=ViewConfiguration.get(context);
  mSlopX=config.getScaledTouchSlop();
  mSlopY=3 * mSlopX / 2;
  DisplayMetrics display=context.getResources().getDisplayMetrics();
  mSwipeDistance=display.heightPixels / 2;
  setMode(MODE_WORKSPACE,false);
}"
83869,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slop=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slop < mConfig.getScaledTouchSlop()) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mConfig.getScaledMaximumFlingVelocity());
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isVisible()) {
    return true;
  }
  if (mLocks != 0) {
    return true;
  }
  super.onTouchEvent(ev);
  int x=(int)ev.getX();
  int deltaX;
switch (ev.getAction()) {
case MotionEvent.ACTION_DOWN:
    mMotionDownRawX=(int)ev.getRawX();
  mMotionDownRawY=(int)ev.getRawY();
mLastMotionX=x;
mRollo.mReadback.read();
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
if (!mRollo.checkClickOK()) {
mRollo.clearSelectedIcon();
}
 else {
mRollo.selectIcon(x,(int)ev.getY(),mRollo.mReadback.posX);
}
mRollo.mState.save();
mRollo.mInvokeMove.execute();
mVelocity=VelocityTracker.obtain();
mVelocity.addMovement(ev);
mStartedScrolling=false;
break;
case MotionEvent.ACTION_MOVE:
case MotionEvent.ACTION_OUTSIDE:
int slopX=Math.abs(x - mLastMotionX);
if (!mStartedScrolling && slopX < mSlopX) {
}
 else {
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
mRollo.mState.newTouchDown=1;
mRollo.mInvokeMove.execute();
mStartedScrolling=true;
mRollo.clearSelectedIcon();
deltaX=x - mLastMotionX;
mVelocity.addMovement(ev);
mRollo.mState.save();
mLastMotionX=x;
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
mRollo.mState.newTouchDown=0;
mRollo.mState.newPositionX=ev.getRawX() / Defines.SCREEN_WIDTH_PX;
if (!mZoomSwipeInProgress) {
mVelocity.computeCurrentVelocity(1000,mMaxFlingVelocity);
mRollo.mState.flingVelocityX=mVelocity.getXVelocity() / Defines.SCREEN_WIDTH_PX;
mRollo.clearSelectedIcon();
mRollo.mState.save();
mRollo.mInvokeFling.execute();
}
 else {
mRollo.mState.save();
mRollo.mInvokeMove.execute();
}
mLastMotionX=-10000;
mVelocity.recycle();
mVelocity=null;
break;
}
return true;
}"
83870,"public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlop) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
if (Math.abs(deltaY) > mSlop) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}","public boolean onTouchEvent(MotionEvent ev){
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int screenX=(int)ev.getRawX();
  final int screenY=(int)ev.getRawY();
  final int deltaX=screenX - mDownX;
  final int deltaY=screenY - mDownY;
  final int action=ev.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:
    mCanceled=false;
  mTracking=false;
mDownX=screenX;
mDownY=screenY;
mAllAppsView.setZoomSwipeInProgress(true,true);
break;
case MotionEvent.ACTION_MOVE:
if (!mCanceled && !mTracking) {
if (Math.abs(deltaX) > mSlopX) {
mCanceled=true;
mTracking=false;
mAllAppsView.setZoomSwipeInProgress(false,true);
}
 else if (Math.abs(deltaY) > mSlopY) {
mTracking=true;
}
}
if (mTracking && !mCanceled) {
track(screenY);
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mTracking && !mCanceled) {
fling(screenY);
mAllAppsView.setZoomSwipeInProgress(false,false);
}
mVelocityTracker.recycle();
mVelocityTracker=null;
break;
}
return mTracking || mCanceled;
}"
83871,"public SwipeController(Context context){
  ViewConfiguration config=ViewConfiguration.get(context);
  mSlop=config.getScaledTouchSlop();
  DisplayMetrics display=context.getResources().getDisplayMetrics();
  mSwipeDistance=display.heightPixels / 2;
  setMode(MODE_WORKSPACE,false);
}","public SwipeController(Context context){
  ViewConfiguration config=ViewConfiguration.get(context);
  mSlopX=config.getScaledTouchSlop();
  mSlopY=3 * mSlopX / 2;
  DisplayMetrics display=context.getResources().getDisplayMetrics();
  mSwipeDistance=display.heightPixels / 2;
  setMode(MODE_WORKSPACE,false);
}"
83872,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked() || mLauncher.isAllAppsVisible()) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (mLauncher.isWorkspaceLocked()) {
    return false;
  }
  if (mLauncher.isAllAppsVisible()) {
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
    snapToScreen(mCurrentScreen);
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  final float x=ev.getX();
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (!mScroller.isFinished()) {
      mScroller.abortAnimation();
    }
  mLastMotionX=x;
break;
case MotionEvent.ACTION_MOVE:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final int deltaX=(int)(mLastMotionX - x);
mLastMotionX=x;
if (deltaX < 0) {
  if (mScrollX > 0) {
    scrollBy(Math.max(-mScrollX,deltaX),0);
    updateWallpaperOffset();
  }
}
 else if (deltaX > 0) {
  final int availableToScroll=getChildAt(getChildCount() - 1).getRight() - mScrollX - getWidth();
  if (availableToScroll > 0) {
    scrollBy(Math.min(availableToScroll,deltaX),0);
    updateWallpaperOffset();
  }
}
}
break;
case MotionEvent.ACTION_UP:
if (mTouchState == TOUCH_STATE_SCROLLING) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int velocityX=(int)velocityTracker.getXVelocity();
if (velocityX > SNAP_VELOCITY && mCurrentScreen > 0) {
snapToScreen(mCurrentScreen - 1);
}
 else if (velocityX < -SNAP_VELOCITY && mCurrentScreen < getChildCount() - 1) {
snapToScreen(mCurrentScreen + 1);
}
 else {
snapToDestination();
}
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
mTouchState=TOUCH_STATE_REST;
break;
case MotionEvent.ACTION_CANCEL:
mTouchState=TOUCH_STATE_REST;
}
return true;
}"
83873,"public void onDrop(DragSource source,int x,int y,int xOffset,int yOffset,DragView dragView,Object dragInfo){
  final CellLayout cellLayout=getCurrentDropLayout();
  if (source != this) {
    onDropExternal(x - xOffset,y - yOffset,dragInfo,cellLayout);
  }
 else {
    if (mDragInfo != null) {
      final View cell=mDragInfo.cell;
      if (mCurrentScreen != mDragInfo.screen) {
        final CellLayout originalCellLayout=(CellLayout)getChildAt(mDragInfo.screen);
        originalCellLayout.removeView(cell);
        cellLayout.addView(cell);
      }
      mTargetCell=estimateDropCell(x - xOffset,y - yOffset,mDragInfo.spanX,mDragInfo.spanY,cell,cellLayout,mTargetCell);
      cellLayout.onDropChild(cell,mTargetCell);
      final ItemInfo info=(ItemInfo)cell.getTag();
      CellLayout.LayoutParams lp=(CellLayout.LayoutParams)cell.getLayoutParams();
      LauncherModel.moveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,mCurrentScreen,lp.cellX,lp.cellY);
    }
  }
}","public void onDrop(DragSource source,int x,int y,int xOffset,int yOffset,DragView dragView,Object dragInfo){
  final CellLayout cellLayout=getCurrentDropLayout();
  if (source != this) {
    onDropExternal(x - xOffset,y - yOffset,dragInfo,cellLayout);
  }
 else {
    if (mDragInfo != null) {
      final View cell=mDragInfo.cell;
      int index=mScroller.isFinished() ? mCurrentScreen : mNextScreen;
      if (index != mDragInfo.screen) {
        final CellLayout originalCellLayout=(CellLayout)getChildAt(mDragInfo.screen);
        originalCellLayout.removeView(cell);
        cellLayout.addView(cell);
      }
      mTargetCell=estimateDropCell(x - xOffset,y - yOffset,mDragInfo.spanX,mDragInfo.spanY,cell,cellLayout,mTargetCell);
      cellLayout.onDropChild(cell,mTargetCell);
      final ItemInfo info=(ItemInfo)cell.getTag();
      CellLayout.LayoutParams lp=(CellLayout.LayoutParams)cell.getLayoutParams();
      LauncherModel.moveItemInDatabase(mLauncher,info,LauncherSettings.Favorites.CONTAINER_DESKTOP,index,lp.cellX,lp.cellY);
    }
  }
}"
83874,"Dialog createDialog(){
  mWaitingForResult=true;
  mAdapter=new AddAdapter(Launcher.this);
  final AlertDialog.Builder builder=new AlertDialog.Builder(Launcher.this);
  builder.setTitle(getString(R.string.menu_item_add_item));
  builder.setAdapter(mAdapter,this);
  builder.setInverseBackgroundForced(true);
  AlertDialog dialog=builder.create();
  dialog.setOnCancelListener(this);
  dialog.setOnDismissListener(this);
  return dialog;
}","Dialog createDialog(){
  mWaitingForResult=true;
  mAdapter=new AddAdapter(Launcher.this);
  final AlertDialog.Builder builder=new AlertDialog.Builder(Launcher.this);
  builder.setTitle(getString(R.string.menu_item_add_item));
  builder.setAdapter(mAdapter,this);
  builder.setInverseBackgroundForced(true);
  AlertDialog dialog=builder.create();
  dialog.setOnCancelListener(this);
  dialog.setOnDismissListener(this);
  dialog.setOnShowListener(this);
  return dialog;
}"
83875,"@Override protected void onPrepareDialog(int id,Dialog dialog){
switch (id) {
case DIALOG_CREATE_SHORTCUT:
    mWorkspace.lock();
  break;
case DIALOG_RENAME_FOLDER:
mWorkspace.lock();
EditText input=(EditText)dialog.findViewById(R.id.folder_name);
final CharSequence text=mFolderInfo.title;
input.setText(text);
input.setSelection(0,text.length());
break;
}
}","@Override protected void onPrepareDialog(int id,Dialog dialog){
switch (id) {
case DIALOG_CREATE_SHORTCUT:
    break;
case DIALOG_RENAME_FOLDER:
  if (mFolderInfo != null) {
    EditText input=(EditText)dialog.findViewById(R.id.folder_name);
    final CharSequence text=mFolderInfo.title;
    input.setText(text);
    input.setSelection(0,text.length());
  }
break;
}
}"
83876,"/** 
 * Handle a request.
 * @param collector Instance of PerformanceCollector
 * @param responseQueue queue name to send response to
 * @param request The request as a post-json-parsed-hashmap.
 * @return An iterator for sending the response back.
 */
public void handle(PerformanceCollector collector,String responseQueue,HashMap<String,Object> request) throws ProcessTimeoutException {
  String tracer=(String)request.get(""String_Node_Str"");
  Object protoTrans=request.get(""String_Node_Str"");
  boolean useTransaction=false;
  if (protoTrans instanceof Boolean) {
    useTransaction=(Boolean)protoTrans;
  }
  if (protoTrans instanceof Integer) {
    if (((Integer)protoTrans) > 0) {
      useTransaction=true;
    }
  }
  if (protoTrans instanceof String) {
    if (((String)protoTrans).equalsIgnoreCase(""String_Node_Str"")) {
      useTransaction=true;
    }
  }
  Connection conn=null;
  try {
    DateTime dtProcessBy;
    try {
      dtProcessBy=DateTime.parse((String)request.get(""String_Node_Str""));
    }
 catch (    Exception e) {
      dtProcessBy=DateTime.now().withDurationAdded(this.durTTLProcessByDefault,1);
    }
    if (dtProcessBy.isBefore(DateTime.now()))     throw new ProcessTimeoutException(""String_Node_Str"");
    ArrayList<ArrayList<Object>> params=new ArrayList<ArrayList<Object>>();
    ArrayList<Object> rparams=(ArrayList<Object>)request.get(""String_Node_Str"");
    ArrayList<String> statements=new ArrayList<String>();
    String rname=(String)request.get(""String_Node_Str"");
    if (rname == null) {
      List<String> names=(List<String>)request.get(""String_Node_Str"");
      if (names == null) {
        throw new Exception(""String_Node_Str"");
      }
      statements.addAll(names);
    }
 else {
      statements.add(rname);
    }
    if (statements.size() < 1) {
      throw new Exception(""String_Node_Str"");
    }
    if (statements.size() > 1) {
      if (!(rparams.get(0) instanceof ArrayList)) {
        throw new Exception(""String_Node_Str"");
      }
      if (rparams.size() != statements.size()) {
        throw new Exception(""String_Node_Str"");
      }
    }
    for (int i=0; i < statements.size(); i++) {
      String s=statements.get(i);
      logger.debug(""String_Node_Str"",s);
      if (statementBook.getPhrase(s) == null) {
        throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
      }
      List<ParamType> reqParams=statementBook.getParams(s);
      if (reqParams != null) {
        if (rparams == null) {
          throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
        }
        Object sparam=rparams.get(i);
        if (statements.size() > 1) {
          ArrayList<Object> newlist=(ArrayList<Object>)sparam;
          if (newlist.size() != reqParams.size()) {
            throw new Exception(""String_Node_Str"" + reqParams.size() + ""String_Node_Str""+ newlist.size());
          }
          params.add(newlist);
        }
 else {
          params.add(rparams);
        }
      }
 else {
        params.add(new ArrayList<Object>());
      }
    }
    logger.debug(""String_Node_Str"",statements.size(),params.size());
    if (params.size() != statements.size()) {
      throw new Exception(""String_Node_Str"");
    }
    long connStart=System.currentTimeMillis();
    conn=this.ds.getConnection();
    collector.add(""String_Node_Str"",System.currentTimeMillis() - connStart,tracer);
    if (useTransaction) {
      conn.setAutoCommit(false);
    }
    for (int i=0; i < statements.size(); i++) {
      long start=System.currentTimeMillis();
      String s=statements.get(i);
      PreparedStatement ps=null;
      ResultSet rs=null;
      ArrayList<Object> sparams=params.get(i);
      String sql=statementBook.getPhrase(s);
      try {
        ps=bindAndExecuteQuery(conn,s,sql,sparams);
        rs=ps.getResultSet();
        if (rs != null) {
          collector.add(""String_Node_Str"",System.currentTimeMillis() - start,tracer);
          JSONResultSetWrapper wrapper=new JSONResultSetWrapper((String)request.get(""String_Node_Str""),rs);
          while (wrapper.hasNext()) {
            sendMessage(responseQueue,wrapper.next());
          }
        }
      }
  finally {
        if (ps != null) {
          try {
            ps.close();
          }
 catch (          SQLException e) {
            logger.error(""String_Node_Str"",e);
          }
        }
        if (rs != null) {
          try {
            rs.close();
          }
 catch (          SQLException e) {
            logger.error(""String_Node_Str"",e);
          }
        }
      }
    }
    if (dtProcessBy.isBefore(DateTime.now()))     throw new ProcessTimeoutException(""String_Node_Str"");
    if (useTransaction) {
      logger.debug(""String_Node_Str"");
      conn.commit();
    }
  }
 catch (  ProcessTimeoutException e) {
    logger.error(e.getMessage());
    throw new ProcessTimeoutException(e.getMessage());
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",e.getMessage());
    if (tracer != null) {
      obj.put(""String_Node_Str"",tracer);
    }
    sendMessage(responseQueue,obj.toString());
  }
 finally {
    if (conn != null) {
      try {
        conn.setAutoCommit(true);
      }
 catch (      SQLException e) {
        logger.error(""String_Node_Str"");
      }
      try {
        conn.close();
      }
 catch (      SQLException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * Handle a request.
 * @param collector Instance of PerformanceCollector
 * @param responseQueue queue name to send response to
 * @param request The request as a post-json-parsed-hashmap.
 * @return An iterator for sending the response back.
 */
public void handle(PerformanceCollector collector,String responseQueue,HashMap<String,Object> request) throws ProcessTimeoutException {
  String tracer=(String)request.get(""String_Node_Str"");
  Object protoTrans=request.get(""String_Node_Str"");
  boolean useTransaction=false;
  if (protoTrans instanceof Boolean) {
    useTransaction=(Boolean)protoTrans;
  }
  if (protoTrans instanceof Integer) {
    if (((Integer)protoTrans) > 0) {
      useTransaction=true;
    }
  }
  if (protoTrans instanceof String) {
    if (((String)protoTrans).equalsIgnoreCase(""String_Node_Str"")) {
      useTransaction=true;
    }
  }
  Connection conn=null;
  try {
    DateTime dtProcessBy;
    try {
      dtProcessBy=DateTime.parse((String)request.get(""String_Node_Str""));
    }
 catch (    Exception e) {
      dtProcessBy=DateTime.now().withDurationAdded(this.durTTLProcessByDefault,1);
    }
    if (dtProcessBy.isBefore(DateTime.now()))     throw new ProcessTimeoutException(""String_Node_Str"");
    ArrayList<ArrayList<Object>> params=new ArrayList<ArrayList<Object>>();
    ArrayList<Object> rparams=(ArrayList<Object>)request.get(""String_Node_Str"");
    ArrayList<String> statements=new ArrayList<String>();
    String rname=(String)request.get(""String_Node_Str"");
    if (rname == null) {
      List<String> names=(List<String>)request.get(""String_Node_Str"");
      if (names == null) {
        throw new Exception(""String_Node_Str"");
      }
      statements.addAll(names);
    }
 else {
      statements.add(rname);
    }
    if (statements.size() < 1) {
      throw new Exception(""String_Node_Str"");
    }
    if (statements.size() > 1) {
      if (!(rparams.get(0) instanceof ArrayList)) {
        throw new Exception(""String_Node_Str"");
      }
      if (rparams.size() != statements.size()) {
        throw new Exception(""String_Node_Str"");
      }
    }
    for (int i=0; i < statements.size(); i++) {
      String s=statements.get(i);
      logger.debug(""String_Node_Str"",s);
      if (statementBook.getPhrase(s) == null) {
        throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
      }
      List<ParamType> reqParams=statementBook.getParams(s);
      if (reqParams != null) {
        if (rparams == null || (rparams.size() < 1)) {
          throw new Exception(""String_Node_Str"" + s + ""String_Node_Str"");
        }
        Object sparam=rparams.get(i);
        if (statements.size() > 1) {
          ArrayList<Object> newlist=(ArrayList<Object>)sparam;
          if (newlist.size() != reqParams.size()) {
            throw new Exception(""String_Node_Str"" + reqParams.size() + ""String_Node_Str""+ newlist.size());
          }
          params.add(newlist);
        }
 else {
          if (rparams.size() != reqParams.size()) {
            throw new Exception(""String_Node_Str"" + reqParams.size() + ""String_Node_Str""+ rparams.size());
          }
          params.add(rparams);
        }
      }
 else {
        params.add(new ArrayList<Object>());
      }
    }
    logger.debug(""String_Node_Str"",statements.size(),params.size());
    if (params.size() != statements.size()) {
      throw new Exception(""String_Node_Str"");
    }
    long connStart=System.currentTimeMillis();
    conn=this.ds.getConnection();
    collector.add(""String_Node_Str"",System.currentTimeMillis() - connStart,tracer);
    if (useTransaction) {
      conn.setAutoCommit(false);
    }
    for (int i=0; i < statements.size(); i++) {
      long start=System.currentTimeMillis();
      String s=statements.get(i);
      PreparedStatement ps=null;
      ResultSet rs=null;
      ArrayList<Object> sparams=params.get(i);
      String sql=statementBook.getPhrase(s);
      try {
        ps=bindAndExecuteQuery(conn,s,sql,sparams);
        rs=ps.getResultSet();
        if (rs != null) {
          collector.add(""String_Node_Str"",System.currentTimeMillis() - start,tracer);
          JSONResultSetWrapper wrapper=new JSONResultSetWrapper((String)request.get(""String_Node_Str""),rs);
          while (wrapper.hasNext()) {
            sendMessage(responseQueue,wrapper.next());
          }
        }
      }
  finally {
        if (ps != null) {
          try {
            ps.close();
          }
 catch (          SQLException e) {
            logger.error(""String_Node_Str"",e);
          }
        }
        if (rs != null) {
          try {
            rs.close();
          }
 catch (          SQLException e) {
            logger.error(""String_Node_Str"",e);
          }
        }
      }
    }
    if (dtProcessBy.isBefore(DateTime.now()))     throw new ProcessTimeoutException(""String_Node_Str"");
    if (useTransaction) {
      logger.debug(""String_Node_Str"");
      conn.commit();
    }
  }
 catch (  ProcessTimeoutException e) {
    logger.error(e.getMessage());
    throw new ProcessTimeoutException(e.getMessage());
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",e.getMessage());
    if (tracer != null) {
      obj.put(""String_Node_Str"",tracer);
    }
    sendMessage(responseQueue,obj.toString());
  }
 finally {
    if (conn != null) {
      try {
        conn.setAutoCommit(true);
      }
 catch (      SQLException e) {
        logger.error(""String_Node_Str"");
      }
      try {
        conn.close();
      }
 catch (      SQLException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
}"
83877,"private void loop() throws Exception {
  while (!Thread.currentThread().isInterrupted() && !cancelled) {
    try {
      logger.debug(""String_Node_Str"");
      String val=this.kestrel.get(this.queueName + ""String_Node_Str"" + this.timeout+ ""String_Node_Str"",this.timeout);
      if (val != null) {
        try {
          process(val);
        }
 catch (        ProcessTimeoutException e) {
        }
        logger.debug(""String_Node_Str"");
        this.kestrel.get(this.queueName + ""String_Node_Str"");
      }
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    TimeoutException e) {
      logger.debug(""String_Node_Str"");
    }
  }
}","private void loop() throws Exception {
  while (!Thread.currentThread().isInterrupted() && !cancelled) {
    try {
      logger.debug(""String_Node_Str"");
      String val=this.kestrel.get(this.queueName + ""String_Node_Str"" + this.timeout+ ""String_Node_Str"",this.timeout);
      if (val != null) {
        try {
          process(val);
        }
 catch (        ProcessTimeoutException e) {
        }
        logger.debug(""String_Node_Str"");
        this.kestrel.get(this.queueName + ""String_Node_Str"");
      }
    }
 catch (    IOException e) {
      logger.error(""String_Node_Str"",e);
    }
catch (    TimeoutException e) {
      logger.debug(""String_Node_Str"");
    }
catch (    MemcachedException e) {
      logger.error(""String_Node_Str"",e);
      Thread.sleep(5000);
    }
catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
      Thread.sleep(30000);
    }
  }
}"
83878,"public static int getBlockCurrent(Block b){
  Material mBlock=b.getType();
  int iData=(int)b.getData();
  if (mBlock == Material.LEVER || mBlock == Material.POWERED_RAIL) {
    return (iData & 0x08) == 0x08 ? 15 : 0;
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE) {
    return (iData & 0x04) == 0x04 ? 15 : 0;
  }
  return b.getBlockPower();
}","public static int getBlockCurrent(Block b){
  Material mBlock=b.getType();
  int iData=(int)b.getData();
  if (mBlock == Material.LEVER || mBlock == Material.POWERED_RAIL) {
    return (iData & 0x08) == 0x08 ? 15 : 0;
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE) {
    return (iData & 0x04) == 0x04 ? 15 : 0;
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF || mBlock == Material.REDSTONE_LAMP_ON || mBlock == Material.REDSTONE_TORCH_OFF || mBlock == Material.REDSTONE_TORCH_ON) {
    return keepAlives.contains(b) ? 15 : 0;
  }
  return b.getBlockPower();
}"
83879,"@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(plugin.getMessage(""String_Node_Str""));
    return true;
  }
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + plugin.getMessage(""String_Node_Str"") + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
 else {
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
      }
 else {
        plugin.msg(player,plugin.getMessage(""String_Node_Str""));
      }
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || (dDelay > QuantumConnectors.MAX_DELAY_TIME && !player.hasPermission(""String_Node_Str""))) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replaceAll(""String_Node_Str"",new Integer(QuantumConnectors.MAX_DELAY_TIME).toString()));
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ dDelay+ ""String_Node_Str"";
      sDelayMsg=""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()));
    }
  }
 else {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
  }
  return true;
}","@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(plugin.getMessage(""String_Node_Str""));
    return true;
  }
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + plugin.getMessage(""String_Node_Str"") + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR || pc.getSenderLocation().getBlock().getType() == Material.SPRUCE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.BIRCH_DOOR || pc.getSenderLocation().getBlock().getType() == Material.JUNGLE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.ACACIA_DOOR || pc.getSenderLocation().getBlock().getType() == Material.DARK_OAK_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
 else {
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
      }
 else {
        plugin.msg(player,plugin.getMessage(""String_Node_Str""));
      }
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || (dDelay > QuantumConnectors.MAX_DELAY_TIME && !player.hasPermission(""String_Node_Str""))) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replaceAll(""String_Node_Str"",new Integer(QuantumConnectors.MAX_DELAY_TIME).toString()));
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ dDelay+ ""String_Node_Str"";
      sDelayMsg=""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()));
    }
  }
 else {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
  }
  return true;
}"
83880,"public static int getBlockCurrent(Block b){
  Material mBlock=b.getType();
  int iData=(int)b.getData();
  if (mBlock == Material.LEVER || mBlock == Material.POWERED_RAIL) {
    return (iData & 0x08) == 0x08 ? 15 : 0;
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE) {
    return (iData & 0x04) == 0x04 ? 15 : 0;
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF || mBlock == Material.REDSTONE_LAMP_ON || mBlock == Material.REDSTONE_TORCH_OFF || mBlock == Material.REDSTONE_TORCH_ON) {
    return keepAlives.contains(b) ? 15 : 0;
  }
  return b.getBlockPower();
}","public static int getBlockCurrent(Block b){
  Material mBlock=b.getType();
  int iData=(int)b.getData();
  if (mBlock == Material.LEVER || mBlock == Material.POWERED_RAIL) {
    return (iData & 0x08) == 0x08 ? 15 : 0;
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.SPRUCE_DOOR || mBlock == Material.BIRCH_DOOR || mBlock == Material.JUNGLE_DOOR || mBlock == Material.ACACIA_DOOR || mBlock == Material.DARK_OAK_DOOR || mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE || mBlock == Material.SPRUCE_FENCE_GATE || mBlock == Material.BIRCH_FENCE_GATE || mBlock == Material.JUNGLE_FENCE_GATE || mBlock == Material.ACACIA_FENCE_GATE || mBlock == Material.DARK_OAK_FENCE_GATE) {
    return (iData & 0x04) == 0x04 ? 15 : 0;
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF || mBlock == Material.REDSTONE_LAMP_ON || mBlock == Material.REDSTONE_TORCH_OFF || mBlock == Material.REDSTONE_TORCH_ON) {
    return keepAlives.contains(b) ? 15 : 0;
  }
  return b.getBlockPower();
}"
83881,"private static void setReceiver(Block block,boolean powerOn){
  Material mBlock=block.getType();
  int iData=(int)block.getData();
  if (mBlock == Material.LEVER) {
    if (!plugin.isApiOudated()) {
      if ((powerOn && (iData & 0x08) != 0x08) || (!powerOn && (iData & 0x08) == 0x08)) {
        CraftBlock cbBlock=(CraftBlock)block;
        BlockState cbState=cbBlock.getState();
        net.minecraft.server.v1_10_R1.WorldServer w=((CraftWorld)block.getWorld()).getHandle();
        Location l=block.getLocation();
        int blockX=l.getBlockX();
        int blockY=l.getBlockY();
        int blockZ=l.getBlockZ();
        BlockPosition bp=new BlockPosition(blockX,blockY,blockZ);
        int blockData=cbState.getRawData();
        int j1=blockData & 7;
        int k1=8 - (blockData & 8);
        net.minecraft.server.v1_10_R1.Block netBlock=w.getType(bp).getBlock();
        w.setTypeAndData(bp,netBlock.fromLegacyData(j1 + k1),3);
        w.applyPhysics(bp,netBlock);
        if (j1 == 1) {
          w.applyPhysics(new BlockPosition(blockX - 1,blockY,blockZ),netBlock);
        }
 else         if (j1 == 2) {
          w.applyPhysics(new BlockPosition(blockX + 1,blockY,blockZ),netBlock);
        }
 else         if (j1 == 3) {
          w.applyPhysics(new BlockPosition(blockX,blockY,blockZ - 1),netBlock);
        }
 else         if (j1 == 4) {
          w.applyPhysics(new BlockPosition(blockX,blockY,blockZ + 1),netBlock);
        }
 else         if (j1 != 5 && j1 != 6) {
          if (j1 == 0 || j1 == 7) {
            w.applyPhysics(new BlockPosition(blockX,blockY + 1,blockZ),netBlock);
          }
        }
 else {
          w.applyPhysics(new BlockPosition(blockX,blockY - 1,blockZ),netBlock);
        }
      }
    }
 else {
      BlockState state=block.getState();
      Lever lever=(Lever)state.getData();
      lever.setPowered(powerOn);
      state.setData(lever);
      state.update();
    }
  }
 else   if (mBlock == Material.POWERED_RAIL) {
    if (powerOn && (iData & 0x08) != 0x08) {
      iData|=0x08;
    }
 else     if (!powerOn && (iData & 0x08) == 0x08) {
      iData^=0x08;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR) {
    Block bOtherPiece=block.getRelative(((iData & 0x08) == 0x08) ? BlockFace.DOWN : BlockFace.UP);
    int iOtherPieceData=(int)bOtherPiece.getData();
    if (powerOn && (iData & 0x04) != 0x04) {
      iData|=0x04;
      iOtherPieceData|=0x04;
    }
 else     if (!powerOn && (iData & 0x04) == 0x04) {
      iData^=0x04;
      iOtherPieceData^=0x04;
    }
    block.setData((byte)iData);
    bOtherPiece.setData((byte)iOtherPieceData);
    block.getWorld().playEffect(block.getLocation(),Effect.DOOR_TOGGLE,0,10);
  }
 else   if (mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE) {
    if (powerOn && (iData & 0x04) != 0x04) {
      iData|=0x04;
    }
 else     if (!powerOn && (iData & 0x04) == 0x04) {
      iData^=0x04;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.PISTON_BASE || mBlock == Material.PISTON_STICKY_BASE) {
    if (powerOn && (iData & 0x08) != 0x08) {
      iData|=0x08;
    }
 else     if (!powerOn && (iData & 0x08) == 0x08) {
      iData^=0x08;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.REDSTONE_LAMP_ON) {
    if (!powerOn) {
      keepAlives.remove(block);
      block.setType(Material.REDSTONE_LAMP_OFF);
    }
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF) {
    if (powerOn) {
      keepAlives.add(block);
      net.minecraft.server.v1_10_R1.World w=((CraftWorld)block.getWorld()).getHandle();
      try {
        setStaticStatus(w,true);
        block.setType(Material.REDSTONE_LAMP_ON);
        setStaticStatus(w,false);
      }
 catch (      NoSuchFieldException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
    }
  }
}","private static void setReceiver(Block block,boolean powerOn){
  Material mBlock=block.getType();
  int iData=(int)block.getData();
  if (mBlock == Material.LEVER) {
    if (!plugin.isApiOudated()) {
      if ((powerOn && (iData & 0x08) != 0x08) || (!powerOn && (iData & 0x08) == 0x08)) {
        CraftBlock cbBlock=(CraftBlock)block;
        BlockState cbState=cbBlock.getState();
        net.minecraft.server.v1_10_R1.WorldServer w=((CraftWorld)block.getWorld()).getHandle();
        Location l=block.getLocation();
        int blockX=l.getBlockX();
        int blockY=l.getBlockY();
        int blockZ=l.getBlockZ();
        BlockPosition bp=new BlockPosition(blockX,blockY,blockZ);
        int blockData=cbState.getRawData();
        int j1=blockData & 7;
        int k1=8 - (blockData & 8);
        net.minecraft.server.v1_10_R1.Block netBlock=w.getType(bp).getBlock();
        w.setTypeAndData(bp,netBlock.fromLegacyData(j1 + k1),3);
        w.applyPhysics(bp,netBlock);
        if (j1 == 1) {
          w.applyPhysics(new BlockPosition(blockX - 1,blockY,blockZ),netBlock);
        }
 else         if (j1 == 2) {
          w.applyPhysics(new BlockPosition(blockX + 1,blockY,blockZ),netBlock);
        }
 else         if (j1 == 3) {
          w.applyPhysics(new BlockPosition(blockX,blockY,blockZ - 1),netBlock);
        }
 else         if (j1 == 4) {
          w.applyPhysics(new BlockPosition(blockX,blockY,blockZ + 1),netBlock);
        }
 else         if (j1 != 5 && j1 != 6) {
          if (j1 == 0 || j1 == 7) {
            w.applyPhysics(new BlockPosition(blockX,blockY + 1,blockZ),netBlock);
          }
        }
 else {
          w.applyPhysics(new BlockPosition(blockX,blockY - 1,blockZ),netBlock);
        }
      }
    }
 else {
      BlockState state=block.getState();
      Lever lever=(Lever)state.getData();
      lever.setPowered(powerOn);
      state.setData(lever);
      state.update();
    }
  }
 else   if (mBlock == Material.POWERED_RAIL) {
    if (powerOn && (iData & 0x08) != 0x08) {
      iData|=0x08;
    }
 else     if (!powerOn && (iData & 0x08) == 0x08) {
      iData^=0x08;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.IRON_DOOR_BLOCK || mBlock == Material.WOODEN_DOOR || mBlock == Material.SPRUCE_DOOR || mBlock == Material.BIRCH_DOOR || mBlock == Material.JUNGLE_DOOR || mBlock == Material.ACACIA_DOOR || mBlock == Material.DARK_OAK_DOOR) {
    Block bOtherPiece=block.getRelative(((iData & 0x08) == 0x08) ? BlockFace.DOWN : BlockFace.UP);
    int iOtherPieceData=(int)bOtherPiece.getData();
    if (powerOn && (iData & 0x04) != 0x04) {
      iData|=0x04;
      iOtherPieceData|=0x04;
    }
 else     if (!powerOn && (iData & 0x04) == 0x04) {
      iData^=0x04;
      iOtherPieceData^=0x04;
    }
    block.setData((byte)iData);
    bOtherPiece.setData((byte)iOtherPieceData);
    block.getWorld().playEffect(block.getLocation(),Effect.DOOR_TOGGLE,0,10);
  }
 else   if (mBlock == Material.TRAP_DOOR || mBlock == Material.FENCE_GATE || mBlock == Material.SPRUCE_FENCE_GATE || mBlock == Material.BIRCH_FENCE_GATE || mBlock == Material.JUNGLE_FENCE_GATE || mBlock == Material.ACACIA_FENCE_GATE || mBlock == Material.DARK_OAK_FENCE_GATE) {
    if (powerOn && (iData & 0x04) != 0x04) {
      iData|=0x04;
    }
 else     if (!powerOn && (iData & 0x04) == 0x04) {
      iData^=0x04;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.PISTON_BASE || mBlock == Material.PISTON_STICKY_BASE) {
    if (powerOn && (iData & 0x08) != 0x08) {
      iData|=0x08;
    }
 else     if (!powerOn && (iData & 0x08) == 0x08) {
      iData^=0x08;
    }
    block.setData((byte)iData);
  }
 else   if (mBlock == Material.REDSTONE_LAMP_ON) {
    if (!powerOn) {
      keepAlives.remove(block);
      block.setType(Material.REDSTONE_LAMP_OFF);
    }
  }
 else   if (mBlock == Material.REDSTONE_LAMP_OFF) {
    if (powerOn) {
      keepAlives.add(block);
      net.minecraft.server.v1_10_R1.World w=((CraftWorld)block.getWorld()).getHandle();
      try {
        setStaticStatus(w,true);
        block.setType(Material.REDSTONE_LAMP_ON);
        setStaticStatus(w,false);
      }
 catch (      NoSuchFieldException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
    }
  }
}"
83882,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getItem() != null && event.getItem().getType() == Material.REDSTONE && event.getClickedBlock() != null && CircuitManager.hasPendingCircuit(event.getPlayer())) {
    Player player=event.getPlayer();
    PendingCircuit pc=CircuitManager.getPendingCircuit(player);
    Block block=event.getClickedBlock();
    Location clickedLoc=block.getLocation();
    if (!pc.hasSenderLocation()) {
      if (CircuitManager.isValidSender(block)) {
        if (CircuitManager.circuitExists(clickedLoc)) {
          plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          pc.setSenderLocation(clickedLoc);
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
      }
    }
 else {
      if (pc.getSenderLocation().toString().equals(clickedLoc.toString())) {
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (CircuitManager.isValidReceiver(block)) {
        if (pc.getSenderLocation().getWorld().equals(clickedLoc.getWorld())) {
          if (QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT == 0 || pc.getCircuit().getReceiversCount() < QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT || player.hasPermission(""String_Node_Str"")) {
            pc.addReceiver(clickedLoc);
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          }
 else {
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str"");
            plugin.msg(player,""String_Node_Str"");
          }
        }
 else {
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidReceiversString());
        plugin.msg(player,""String_Node_Str"");
      }
    }
  }
 else   if (event.getClickedBlock() != null && CircuitManager.circuitExists(event.getClickedBlock().getLocation())) {
    Block block=event.getClickedBlock();
    if (block.getType() == Material.WOODEN_DOOR || block.getType() == Material.TRAP_DOOR || block.getType() == Material.FENCE_GATE) {
      int current=CircuitManager.getBlockCurrent(block);
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),current,current > 0 ? 0 : 15);
    }
 else     if (block.getType() == Material.BOOKSHELF) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),5,0);
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getItem() != null && event.getItem().getType() == Material.REDSTONE && event.getClickedBlock() != null && CircuitManager.hasPendingCircuit(event.getPlayer())) {
    Player player=event.getPlayer();
    PendingCircuit pc=CircuitManager.getPendingCircuit(player);
    Block block=event.getClickedBlock();
    Location clickedLoc=block.getLocation();
    if (!pc.hasSenderLocation()) {
      if (CircuitManager.isValidSender(block)) {
        if (CircuitManager.circuitExists(clickedLoc)) {
          plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          pc.setSenderLocation(clickedLoc);
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
      }
    }
 else {
      if (pc.getSenderLocation().toString().equals(clickedLoc.toString())) {
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (CircuitManager.isValidReceiver(block)) {
        if (pc.getSenderLocation().getWorld().equals(clickedLoc.getWorld())) {
          if (QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT == 0 || pc.getCircuit().getReceiversCount() < QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT || player.hasPermission(""String_Node_Str"")) {
            pc.addReceiver(clickedLoc);
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          }
 else {
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str"");
            plugin.msg(player,""String_Node_Str"");
          }
        }
 else {
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidReceiversString());
        plugin.msg(player,""String_Node_Str"");
      }
    }
  }
 else   if (event.getClickedBlock() != null && CircuitManager.circuitExists(event.getClickedBlock().getLocation())) {
    Block block=event.getClickedBlock();
    if (block.getType() == Material.WOODEN_DOOR || block.getType() == Material.SPRUCE_DOOR || block.getType() == Material.BIRCH_DOOR || block.getType() == Material.JUNGLE_DOOR || block.getType() == Material.ACACIA_DOOR || block.getType() == Material.DARK_OAK_DOOR || block.getType() == Material.TRAP_DOOR || block.getType() == Material.FENCE_GATE || block.getType() == Material.SPRUCE_FENCE_GATE || block.getType() == Material.BIRCH_FENCE_GATE || block.getType() == Material.JUNGLE_FENCE_GATE || block.getType() == Material.ACACIA_FENCE_GATE || block.getType() == Material.DARK_OAK_FENCE_GATE) {
      int current=CircuitManager.getBlockCurrent(block);
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),current,current > 0 ? 0 : 15);
    }
 else     if (block.getType() == Material.BOOKSHELF) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),5,0);
    }
  }
}"
83883,"@EventHandler(priority=EventPriority.LOW) public void onBlockRedstoneChange(BlockRedstoneEvent event){
}","@EventHandler(priority=EventPriority.LOW) public void onBlockRedstoneChange(BlockRedstoneEvent event){
  if (CircuitManager.circuitExists(event.getBlock().getLocation())) {
    CircuitManager.activateCircuit(event.getBlock().getLocation(),event.getNewCurrent());
  }
  if (CircuitManager.shouldLeaveReceiverOn(event.getBlock())) {
    event.setNewCurrent(15);
  }
}"
83884,"@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(plugin.getMessage(""String_Node_Str""));
    return true;
  }
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + plugin.getMessage(""String_Node_Str"") + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR || pc.getSenderLocation().getBlock().getType() == Material.SPRUCE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.BIRCH_DOOR || pc.getSenderLocation().getBlock().getType() == Material.JUNGLE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.ACACIA_DOOR || pc.getSenderLocation().getBlock().getType() == Material.DARK_OAK_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
 else {
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
      }
 else {
        plugin.msg(player,plugin.getMessage(""String_Node_Str""));
      }
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || (dDelay > QuantumConnectors.MAX_DELAY_TIME && !player.hasPermission(""String_Node_Str""))) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replaceAll(""String_Node_Str"",new Integer(QuantumConnectors.MAX_DELAY_TIME).toString()));
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ dDelay+ ""String_Node_Str"";
      sDelayMsg=""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()));
    }
  }
 else {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
  }
  return true;
}","@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(plugin.getMessage(""String_Node_Str""));
    return true;
  }
  if (args.length > 0) {
    if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
 else     if (args[0].equalsIgnoreCase(""String_Node_Str""))     args[0]=""String_Node_Str"";
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + plugin.getMessage(""String_Node_Str"") + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR || pc.getSenderLocation().getBlock().getType() == Material.SPRUCE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.BIRCH_DOOR || pc.getSenderLocation().getBlock().getType() == Material.JUNGLE_DOOR || pc.getSenderLocation().getBlock().getType() == Material.ACACIA_DOOR || pc.getSenderLocation().getBlock().getType() == Material.DARK_OAK_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
 else {
          plugin.msg(player,plugin.getMessage(""String_Node_Str""));
        }
      }
 else {
        plugin.msg(player,plugin.getMessage(""String_Node_Str""));
      }
    }
 else {
      plugin.msg(player,plugin.getMessage(""String_Node_Str""));
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || (dDelay > QuantumConnectors.MAX_DELAY_TIME && !player.hasPermission(""String_Node_Str""))) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replaceAll(""String_Node_Str"",new Integer(QuantumConnectors.MAX_DELAY_TIME).toString()));
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ dDelay+ ""String_Node_Str"";
      sDelayMsg=""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()).replace(""String_Node_Str"",new Double(dDelay).toString()));
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + plugin.getMessage(""String_Node_Str"").replace(""String_Node_Str"",args[0].toUpperCase()));
    }
  }
 else {
    plugin.msg(player,plugin.getMessage(""String_Node_Str""));
  }
  return true;
}"
83885,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getItem() != null && event.getItem().getType() == Material.REDSTONE && event.getClickedBlock() != null && CircuitManager.hasPendingCircuit(event.getPlayer())) {
    Player player=event.getPlayer();
    PendingCircuit pc=CircuitManager.getPendingCircuit(player);
    Block block=event.getClickedBlock();
    Location clickedLoc=block.getLocation();
    if (!pc.hasSenderLocation()) {
      if (CircuitManager.isValidSender(block)) {
        if (CircuitManager.circuitExists(clickedLoc)) {
          plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          pc.setSenderLocation(clickedLoc);
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
      }
    }
 else {
      if (pc.getSenderLocation().toString().equals(clickedLoc.toString())) {
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (CircuitManager.isValidReceiver(block)) {
        if (pc.getSenderLocation().getWorld().equals(clickedLoc.getWorld())) {
          if (QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT == 0 || pc.getCircuit().getReceiversCount() < QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT || player.hasPermission(""String_Node_Str"")) {
            pc.addReceiver(clickedLoc);
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          }
 else {
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str"");
            plugin.msg(player,""String_Node_Str"");
          }
        }
 else {
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidReceiversString());
        plugin.msg(player,""String_Node_Str"");
      }
    }
  }
 else   if (event.getClickedBlock() != null && CircuitManager.circuitExists(event.getClickedBlock().getLocation())) {
    Block block=event.getClickedBlock();
    if (block.getType() == Material.WOODEN_DOOR || block.getType() == Material.TRAP_DOOR || block.getType() == Material.FENCE_GATE || block.getType() == Material.BOOKSHELF) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),CircuitManager.getBlockCurrent(block));
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getItem() != null && event.getItem().getType() == Material.REDSTONE && event.getClickedBlock() != null && CircuitManager.hasPendingCircuit(event.getPlayer())) {
    Player player=event.getPlayer();
    PendingCircuit pc=CircuitManager.getPendingCircuit(player);
    Block block=event.getClickedBlock();
    Location clickedLoc=block.getLocation();
    if (!pc.hasSenderLocation()) {
      if (CircuitManager.isValidSender(block)) {
        if (CircuitManager.circuitExists(clickedLoc)) {
          plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          pc.setSenderLocation(clickedLoc);
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
      }
    }
 else {
      if (pc.getSenderLocation().toString().equals(clickedLoc.toString())) {
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"");
      }
 else       if (CircuitManager.isValidReceiver(block)) {
        if (pc.getSenderLocation().getWorld().equals(clickedLoc.getWorld())) {
          if (QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT == 0 || pc.getCircuit().getReceiversCount() < QuantumConnectors.MAX_RECEIVERS_PER_CIRCUIT || player.hasPermission(""String_Node_Str"")) {
            pc.addReceiver(clickedLoc);
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str"");
          }
 else {
            plugin.msg(player,""String_Node_Str"" + pc.getCircuit().getReceiversCount() + ""String_Node_Str"");
            plugin.msg(player,""String_Node_Str"");
          }
        }
 else {
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,ChatColor.RED + ""String_Node_Str"");
        plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidReceiversString());
        plugin.msg(player,""String_Node_Str"");
      }
    }
  }
 else   if (event.getClickedBlock() != null && CircuitManager.circuitExists(event.getClickedBlock().getLocation())) {
    Block block=event.getClickedBlock();
    if (block.getType() == Material.WOODEN_DOOR || block.getType() == Material.TRAP_DOOR || block.getType() == Material.FENCE_GATE) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),CircuitManager.getBlockCurrent(block));
    }
 else     if (block.getType() == Material.BOOKSHELF) {
      CircuitManager.activateCircuit(event.getClickedBlock().getLocation(),5);
    }
  }
}"
83886,"@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(""String_Node_Str"");
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,""String_Node_Str"");
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      int iDelay=0;
      if (args.length > 1) {
        try {
          iDelay=Integer.parseInt(args[1]);
        }
 catch (        NumberFormatException e) {
          iDelay=-1;
        }
        if (iDelay < 0 || iDelay > QuantumConnectors.MAX_DELAY_TIME) {
          iDelay=0;
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + QuantumConnectors.MAX_DELAY_TIME+ ""String_Node_Str"");
        }
      }
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelay);
        plugin.msg(player,""String_Node_Str"");
      }
 else {
        plugin.msg(player,""String_Node_Str"" + args[0] + ""String_Node_Str""+ (iDelay == 0 ? ""String_Node_Str"" : iDelay + ""String_Node_Str"")+ ""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    plugin.msg(player,""String_Node_Str"");
  }
  return true;
}","@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(""String_Node_Str"");
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,""String_Node_Str"");
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      int iDelay=0;
      if (args.length > 1) {
        try {
          iDelay=Integer.parseInt(args[1]);
        }
 catch (        NumberFormatException e) {
          iDelay=-1;
        }
        if (iDelay < 0 || iDelay > QuantumConnectors.MAX_DELAY_TIME) {
          iDelay=0;
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + QuantumConnectors.MAX_DELAY_TIME+ ""String_Node_Str"");
        }
      }
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelay);
        plugin.msg(player,""String_Node_Str"");
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelay);
        plugin.msg(player,""String_Node_Str"" + args[0] + ""String_Node_Str""+ (iDelay == 0 ? ""String_Node_Str"" : iDelay + ""String_Node_Str"")+ ""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    plugin.msg(player,""String_Node_Str"");
  }
  return true;
}"
83887,"@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(""String_Node_Str"");
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ CircuitManager.getValidSendersString());
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,""String_Node_Str"");
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || dDelay > QuantumConnectors.MAX_DELAY_TIME) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + QuantumConnectors.MAX_DELAY_TIME+ ""String_Node_Str"");
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ (dDelay == 0 ? ""String_Node_Str"" : dDelay + ""String_Node_Str"")+ ""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,args[0] + ""String_Node_Str"" + sDelayMsg);
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,""String_Node_Str"" + args[0] + sDelayMsg);
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    plugin.msg(player,""String_Node_Str"");
  }
  return true;
}","@Override public boolean onCommand(CommandSender cs,Command cmd,String alias,String[] args){
  if (!(cs instanceof Player)) {
    plugin.log(""String_Node_Str"");
  }
  Player player=(Player)cs;
  if (args.length == 0 || args[0].equalsIgnoreCase(""String_Node_Str"")) {
    plugin.msg(player,""String_Node_Str"");
    String s=""String_Node_Str"";
    for (    String sKey : CircuitManager.getValidCircuitTypes().keySet()) {
      s+=sKey + ""String_Node_Str"";
    }
    plugin.msg(player,ChatColor.YELLOW + ""String_Node_Str"" + ChatColor.WHITE+ s.substring(0,s.length() - 2));
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      CircuitManager.removePendingCircuit(player);
      plugin.msg(player,""String_Node_Str"");
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (CircuitManager.hasPendingCircuit(player)) {
      PendingCircuit pc=CircuitManager.getPendingCircuit(player);
      if (pc.hasSenderLocation()) {
        if (pc.hasReceiver()) {
          CircuitManager.addCircuit(pc);
          if (pc.getSenderLocation().getBlock().getType() == Material.WOODEN_DOOR) {
            Block bDoor=pc.getSenderLocation().getBlock();
            int iData=(int)bDoor.getData();
            Block bOtherPiece=bDoor.getRelative((iData & 0x08) == 0x08 ? BlockFace.DOWN : BlockFace.UP);
            CircuitManager.addCircuit(bOtherPiece.getLocation(),pc.getCircuit());
          }
          CircuitManager.removePendingCircuit(player);
          plugin.msg(player,""String_Node_Str"");
        }
 else {
          plugin.msg(player,""String_Node_Str"");
        }
      }
 else {
        plugin.msg(player,""String_Node_Str"");
      }
    }
 else {
      plugin.msg(player,""String_Node_Str"");
    }
  }
 else   if (CircuitManager.isValidCircuitType(args[0])) {
    if (player.hasPermission(""String_Node_Str"" + args[0])) {
      double dDelay=0;
      if (args.length > 1) {
        try {
          dDelay=Double.parseDouble(args[1]);
        }
 catch (        NumberFormatException e) {
          dDelay=-1;
        }
        if (dDelay < 0 || dDelay > QuantumConnectors.MAX_DELAY_TIME) {
          dDelay=0;
          plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + QuantumConnectors.MAX_DELAY_TIME+ ""String_Node_Str"");
        }
      }
      String sDelayMsg=""String_Node_Str"" + args[0] + ""String_Node_Str""+ (dDelay == 0 ? ""String_Node_Str"" : dDelay + ""String_Node_Str"")+ ""String_Node_Str"";
      int iDelayTicks=(int)Math.round(dDelay * 20);
      if (!CircuitManager.hasPendingCircuit(player)) {
        CircuitManager.addPendingCircuit(player,CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,args[0] + ""String_Node_Str"" + sDelayMsg);
      }
 else {
        CircuitManager.getPendingCircuit(player).setCircuitType(CircuitManager.getCircuitType(args[0]),iDelayTicks);
        plugin.msg(player,""String_Node_Str"" + args[0] + sDelayMsg);
      }
    }
 else {
      plugin.msg(player,ChatColor.RED + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    plugin.msg(player,""String_Node_Str"");
  }
  return true;
}"
83888,"public CircuitManager(final QuantumConnectors qc){
  this.plugin=qc;
}","public CircuitManager(final QuantumConnectors qc){
  this.plugin=qc;
  for (  World world : plugin.getServer().getWorlds()) {
    loadWorld(world);
  }
}"
83889,"/** 
 * ���� ���� ���´�.
 */
public void putBlock(int x,int y,Block block){
  if (0 <= x && x < WIDTH && 0 <= y && y < HEIGHT) {
    if (block.getItem().getInteract() != null) {
      interactable.add(new BlockEntry(x,y,block));
      inTime.add(new ArrayList<Float>(monsters.size()));
    }
    map[y][x]=block;
  }
}","/** 
 * ���� ���� ���´�.
 */
public void putBlock(int x,int y,Block block){
  if (0 <= x && x < WIDTH && 0 <= y && y < HEIGHT) {
    if (block.getItem().getInteract() != null) {
      interactable.add(new BlockEntry(x,y,block));
      ArrayList<Float> a=new ArrayList<Float>();
      for (int i=0; i < monsters.size(); ++i)       a.add(0f);
      inTime.add(a);
    }
    map[y][x]=block;
  }
}"
83890,"@Override public void update(float delta){
  super.update(delta);
  if (nticks++ % 30 == 0)   walkTo(player.position);
  kill();
}","@Override public void update(float delta){
  delta*=deltaMul;
  super.update(delta);
  if (nticks++ % 30 == 0)   walkTo(player.position);
  kill();
}"
83891,"@Override public void boundIn(Mob mob,int blockX,int blockY,float delta){
  mob.velocity.x=mob.WALK_SPEED * MULTIPLIER;
}","@Override public void boundIn(Mob mob,int blockX,int blockY,float delta){
  mob.setDeltaMul(MULTIPLIER);
}"
83892,"@Override public void boundOut(Mob mob,int blockX,int blockY,float delta){
  ;
}","@Override public void boundOut(Mob mob,int blockX,int blockY,float delta){
  mob.setDeltaMul(1f);
}"
83893,"public void update(float delta){
  Vector2 movevector=new Vector2(getPlayer().position.x - this.pseudoPos.x,getPlayer().position.y - this.pseudoPos.y).nor();
  this.pseudoPos.add(movevector.mul(speed * delta));
  this.position=pseudoPos.cpy();
  this.position.y+=Math.sin(totaltime * Math.PI * 2 / 1.3f) * wavingheight;
  totaltime+=delta;
  setDirection(movevector.x >= 0 ? RIGHT : LEFT);
  if (isAlive())   hit(damagePerSecondFactor * delta);
}","public void update(float delta){
  delta*=getDeltaMul();
  Vector2 movevector=new Vector2(getPlayer().position.x - this.pseudoPos.x,getPlayer().position.y - this.pseudoPos.y).nor();
  this.pseudoPos.add(movevector.mul(speed * delta));
  this.position=pseudoPos.cpy();
  this.position.y+=Math.sin(totaltime * Math.PI * 2 / 1.3f) * wavingheight;
  totaltime+=delta;
  setDirection(movevector.x >= 0 ? RIGHT : LEFT);
  if (isAlive())   hit(damagePerSecondFactor * delta);
}"
83894,"/** 
 * ���� ���� ���´�.
 */
public void putBlock(int x,int y,Block block){
  if (0 <= x && x < WIDTH && 0 <= y && y < HEIGHT) {
    if (block.getItem().getInteract() != null) {
      interactable.add(new BlockEntry(x,y,block));
      ArrayList<Float> a=new ArrayList<Float>();
      for (int i=0; i < monsters.size(); ++i)       a.add(0f);
      inTime.add(a);
    }
    map[y][x]=block;
  }
}","/** 
 * ���� ���� ���´�.
 */
public void putBlock(int x,int y,Block block){
  if (0 <= x && x < WIDTH && 0 <= y && y < HEIGHT) {
    if (block.getItem().getInteract() != null) {
      interactable.add(new BlockEntry(x,y,block));
      ArrayList<Float> a=new ArrayList<Float>(monsters.size());
      for (int i=monsters.size(); i > 0; --i)       a.add(0f);
      inTime.add(a);
    }
    map[y][x]=block;
  }
}"
83895,"/** 
 * �ð��� ���� ���¸� ������Ʈ�Ѵ�.
 * @param delta ������ �ð�
 */
public void update(float delta){
switch (state) {
case STATE_STAND:
    if (!hasStandingBlock())     changestate(STATE_FALL);
  break;
case STATE_WALK:
if (!hasStandingBlock()) changestate(STATE_FALL);
 else if (arrived()) stand();
 else if (!blockInPath(velocity.x * delta)) position.x+=velocity.x * delta;
 else {
  float fx=position.x + hitbox.width / 2 + ((velocity.x > 0) ? 1 : -1);
  if (world.getBlock(new Vector2(fx,position.y)) != null && world.getBlock(new Vector2(fx,position.y + 1)) == null && world.getBlock(new Vector2(fx,position.y + 2)) == null) {
    jump();
  }
 else   if (world.getBlock(new Vector2(position.x + 1,position.y + 1)) != null || world.getBlock(new Vector2(position.x - 1,position.y + 1)) != null)   climb();
 else   stand();
}
break;
case STATE_FALL:
velocity.y-=GRAVITY * delta;
position.y+=velocity.y * delta;
if (hasStandingBlock()) {
if (hasDest) {
stand();
walkTo(destPos);
}
 else stand();
}
break;
case STATE_JUMP:
velocity.y-=GRAVITY * delta;
position.y+=velocity.y * delta;
if (!blockInPath(velocity.x * delta)) position.x+=velocity.x * delta;
if (velocity.y < 0 && hasStandingBlock()) {
velocity.y=0;
position.y=(float)Math.ceil(position.y);
if (Math.abs(position.x - destPos.x) < 1f) stand();
 else walkTo(destPos);
}
break;
case STATE_CLIMB:
float fx=position.x + hitbox.width / 2 + ((velocity.x > 0) ? 1 : -1);
position.y+=velocity.y * delta;
if (!blockInPath(velocity.x * delta)) {
position.x+=velocity.x * delta;
velocity.y=0;
walkTo(destPos);
}
if (world.getBlock(new Vector2(position.x,position.y + 1)) != null) {
velocity.y=0;
stand();
}
 else if (world.getBlock(new Vector2(position.x,position.y + 2)) != null) {
velocity.y=0;
}
}
currentAni.update(delta);
}","/** 
 * �ð��� ���� ���¸� ������Ʈ�Ѵ�.
 * @param delta ������ �ð�
 */
public void update(float delta){
  float fx=position.x + ((velocity.x > 0) ? hitbox.width / 2 : -(hitbox.width / 2)) + ((velocity.x > 0) ? 1 : -1);
switch (state) {
case STATE_STAND:
    if (!hasStandingBlock())     changestate(STATE_FALL);
  break;
case STATE_WALK:
if (!hasStandingBlock()) changestate(STATE_FALL);
 else if (arrived()) stand();
 else if (!blockInPath(velocity.x * delta)) position.x+=velocity.x * delta;
 else {
  if (world.getBlock(new Vector2(fx,position.y)) != null && world.getBlock(new Vector2(fx,position.y + 1)) == null && world.getBlock(new Vector2(fx,position.y + 2)) == null) {
    jump();
  }
 else   if (world.getBlock(new Vector2(fx,position.y + 1)) != null)   climb();
 else   stand();
}
break;
case STATE_FALL:
velocity.y-=GRAVITY * delta;
position.y+=velocity.y * delta;
if (hasStandingBlock()) {
if (hasDest) {
stand();
walkTo(destPos);
}
 else stand();
}
break;
case STATE_JUMP:
velocity.y-=GRAVITY * delta;
position.y+=velocity.y * delta;
if (!blockInPath(velocity.x * delta)) position.x+=velocity.x * delta;
if (velocity.y < 0 && hasStandingBlock()) {
velocity.y=0;
position.y=(float)Math.ceil(position.y);
if (Math.abs(position.x - destPos.x) < 1f) stand();
 else walkTo(destPos);
}
break;
case STATE_CLIMB:
position.y+=velocity.y * delta;
if (!blockInPath(velocity.x * delta)) {
position.x+=velocity.x * delta;
}
if (world.getBlock(new Vector2(fx,position.y)) == null && world.getBlock(new Vector2(fx,position.y + 1)) == null) {
velocity.y=0;
walkTo(destPos);
}
}
currentAni.update(delta);
}"
83896,"/** 
 * ��������.
 */
public void climb(){
  changestate(STATE_CLIMB);
  velocity.y=CLIMB_SPEED;
}","/** 
 * ��������.
 */
public void climb(){
  changestate(STATE_CLIMB);
  position.y+=0.1;
  velocity.y=CLIMB_SPEED;
}"
83897,"/** 
 * �÷��̾ ���ϴ� ���⿡ ���� �ִ��� (�浹üũ)
 * @param xmovedist x�࿡�� ������ �Ÿ�
 * @return ������ true, ������ false
 */
private boolean blockInPath(float xmovedist){
  int blocky_bottom=(int)Math.floor(position.y);
  int blocky_top=(int)Math.floor(position.y + hitbox.height);
  int blockx1=(int)Math.floor(position.x + xmovedist + hitbox.width);
  int blockx2=(int)Math.floor(position.x + xmovedist);
  return world.getBlock(blockx1,blocky_bottom) != null || world.getBlock(blockx1,blocky_top) != null || world.getBlock(blockx2,blocky_bottom) != null || world.getBlock(blockx2,blocky_top) != null;
}","/** 
 * �÷��̾ ���ϴ� ���⿡ ���� �ִ��� (�浹üũ)
 * @param xmovedist x�࿡�� ������ �Ÿ�
 * @return ������ true, ������ false
 */
private boolean blockInPath(float xmovedist){
  int blocky_bottom=(int)Math.floor(position.y);
  int blocky_top=(int)Math.floor(position.y + hitbox.height);
  int blockx1=(int)Math.floor(position.x + xmovedist + hitbox.width);
  int blockx2=(int)Math.floor(position.x + xmovedist);
  return world.getBlock(blockx1,blocky_bottom) != null || world.getBlock(blockx1,blocky_top) != null || world.getBlock(blockx2,blocky_bottom) != null || world.getBlock(blockx2,blocky_top) != null || world.getBlock((int)(position.x + xmovedist + hitbox.width),(int)position.y + 1) != null || world.getBlock((int)position.x,(int)position.y + 1) != null;
}"
83898,"/** 
 * �ð��� ���� ���¸� ������Ʈ�Ѵ�.
 * @param delta ������ �ð�
 */
public void update(float delta){
  float fx=position.x + ((velocity.x > 0) ? hitbox.width / 2 : -(hitbox.width / 2)) + ((velocity.x > 0) ? 1 : -1);
switch (state) {
case STATE_STAND:
    if (!hasStandingBlock())     changestate(STATE_FALL);
  break;
case STATE_WALK:
if (!hasStandingBlock()) changestate(STATE_FALL);
 else if (arrived()) stand();
 else if (!blockInPath(velocity.x * delta)) position.x+=velocity.x * delta;
 else {
  if (world.getBlock(new Vector2(fx,position.y)) != null && world.getBlock(new Vector2(fx,position.y + 1)) == null && world.getBlock(new Vector2(fx,position.y + 2)) == null) {
    jump();
  }
 else   if (world.getBlock(new Vector2(fx,position.y + 1)) != null)   climb();
 else   stand();
}
break;
case STATE_FALL:
velocity.y-=GRAVITY * delta;
position.y+=velocity.y * delta;
if (hasStandingBlock()) {
if (hasDest) {
stand();
walkTo(destPos);
}
 else stand();
}
break;
case STATE_JUMP:
velocity.y-=GRAVITY * delta;
position.y+=velocity.y * delta;
if (!blockInPath(velocity.x * delta)) position.x+=velocity.x * delta;
if (velocity.y < 0 && hasStandingBlock()) {
velocity.y=0;
position.y=(float)Math.ceil(position.y);
if (Math.abs(position.x - destPos.x) < 1f) stand();
 else walkTo(destPos);
}
break;
case STATE_CLIMB:
position.y+=velocity.y * delta;
if (!blockInPath(velocity.x * delta)) {
position.x+=velocity.x * delta;
}
if (world.getBlock(new Vector2(fx,position.y)) == null && world.getBlock(new Vector2(fx,position.y + 1)) == null) {
velocity.y=0;
walkTo(destPos);
}
}
currentAni.update(delta);
}","/** 
 * �ð��� ���� ���¸� ������Ʈ�Ѵ�.
 * @param delta ������ �ð�
 */
public void update(float delta){
  float fx=position.x + ((velocity.x > 0) ? hitbox.width / 2 : -(hitbox.width / 2)) + ((velocity.x > 0) ? 1 : -1);
switch (state) {
case STATE_STAND:
    if (!hasStandingBlock())     changestate(STATE_FALL);
  break;
case STATE_WALK:
if (!hasStandingBlock()) changestate(STATE_FALL);
 else if (arrived()) stand();
 else if (!blockInPath(velocity.x * delta)) position.x+=velocity.x * delta;
 else {
  if (world.getBlock(new Vector2(fx,position.y)) != null && world.getBlock(new Vector2(fx,position.y + 1)) == null && world.getBlock(new Vector2(fx,position.y + 2)) == null) {
    jump();
  }
 else   if (world.getBlock(new Vector2(fx,position.y + 1)) != null)   climb();
 else   stand();
}
break;
case STATE_FALL:
velocity.y-=GRAVITY * delta;
position.y+=velocity.y * delta;
if (hasStandingBlock()) {
if (hasDest) {
stand();
walkTo(destPos);
}
 else stand();
}
break;
case STATE_JUMP:
velocity.y-=GRAVITY * delta;
position.y+=velocity.y * delta;
if (!blockInPath(velocity.x * delta)) position.x+=velocity.x * delta;
if (velocity.y < 0 && hasStandingBlock()) {
velocity.y=0;
position.y=(float)Math.ceil(position.y);
if (Math.abs(position.x - destPos.x) < 1f) stand();
 else walkTo(destPos);
}
break;
case STATE_CLIMB:
position.y+=velocity.y * delta;
if (!blockInPath(velocity.x * delta)) {
position.x+=velocity.x * delta;
}
if (world.getBlock(new Vector2(fx,position.y)) == null && world.getBlock(new Vector2(fx,position.y + 1)) == null) {
velocity.y=0;
walkTo(destPos);
}
if (world.getBlock(new Vector2(position.x + 0.1f,position.y + 2)) != null || world.getBlock(new Vector2(position.x + 0.1f,position.y + 1)) != null) {
velocity.y=0;
}
}
currentAni.update(delta);
}"
83899,"/** 
 * ��������.
 */
public void climb(){
  changestate(STATE_CLIMB);
  position.y+=0.1;
  velocity.y=CLIMB_SPEED;
}","/** 
 * ��������.
 */
public void climb(){
  changestate(STATE_CLIMB);
  velocity.y=CLIMB_SPEED;
}"
83900,"/** 
 * @deprecated Use {@link #forType(Class)} instead.
 */
public static <T>ArgumentProcessor<T> newInstance(Class<T> beanType){
  return forType(beanType);
}","/** 
 * @param beanType type of the bean.
 * @param < T > type of bean class.
 * @return instance of argument processor for given type of bean.
 * @deprecated Use {@link #forType(Class)} instead.
 */
public static <T>ArgumentProcessor<T> newInstance(Class<T> beanType){
  return forType(beanType);
}"
83901,"/** 
 * Verify if given arguments meet requirement defined for processor
 * @param arguments Array of command line arguments
 * @return
 */
public abstract ValidationResult validate(String[] arguments);","/** 
 * Verifies if given arguments meet requirement defined for processor.
 * @param arguments array of command line arguments.
 * @return a result object.
 */
public abstract ValidationResult validate(String[] arguments);"
83902,"/** 
 * @inheritDoc
 */
@Override public CommandLine parse(List<String> arguments,ParsingContext context){
  CommandLineBuilder builder=new CommandLineBuilder();
  boolean expectingOptionValue=false;
  String optionName=null;
  boolean shortOption=false;
  for (  String arg : arguments) {
    if (expectingOptionValue) {
      if (shortOption) {
        builder.withShortOption(optionName,arg);
      }
 else {
        builder.withLongOption(optionName,arg);
      }
      expectingOptionValue=false;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      optionName=arg.substring(2);
      Option opt=context.optionWithLongName(optionName);
      if (opt == null) {
        builder.withArgument(arg);
      }
 else       if (opt.isFlag()) {
        builder.withLongFlag(optionName);
      }
 else {
        expectingOptionValue=true;
        shortOption=false;
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      optionName=arg.substring(1);
      Option opt=context.optionWithShortName(optionName);
      if (opt == null) {
        builder.withArgument(arg);
      }
 else       if (opt.isFlag()) {
        builder.withShortFlag(optionName);
      }
 else {
        expectingOptionValue=true;
        shortOption=true;
      }
    }
 else {
      builder.withArgument(arg);
    }
  }
  return builder.toCommandLine();
}","@Override public CommandLine parse(List<String> arguments,ParsingContext context){
  CommandLineBuilder builder=new CommandLineBuilder();
  boolean expectingOptionValue=false;
  String optionName=null;
  boolean shortOption=false;
  for (  String arg : arguments) {
    if (expectingOptionValue) {
      if (shortOption) {
        builder.withShortOption(optionName,arg);
      }
 else {
        builder.withLongOption(optionName,arg);
      }
      expectingOptionValue=false;
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      optionName=arg.substring(2);
      Option opt=context.optionWithLongName(optionName);
      if (opt == null) {
        builder.withArgument(arg);
      }
 else       if (opt.isFlag()) {
        builder.withLongFlag(optionName);
      }
 else {
        expectingOptionValue=true;
        shortOption=false;
      }
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      optionName=arg.substring(1);
      Option opt=context.optionWithShortName(optionName);
      if (opt == null) {
        builder.withArgument(arg);
      }
 else       if (opt.isFlag()) {
        builder.withShortFlag(optionName);
      }
 else {
        expectingOptionValue=true;
        shortOption=true;
      }
    }
 else {
      builder.withArgument(arg);
    }
  }
  return builder.toCommandLine();
}"
83903,"@Inject SchedulerServiceImpl(@Assisted final int workerThreads,@Assisted final String threadNamePrefix){
  this.workerThreads=workerThreads;
  this.schedulerThreadNameFormat=threadNamePrefix + ""String_Node_Str"";
  this.workerThreadNameFormat=threadNamePrefix + ""String_Node_Str"";
}","@Inject public SchedulerServiceImpl(@Assisted final int workerThreads,@Assisted final String threadNamePrefix){
  this.workerThreads=workerThreads;
  this.schedulerThreadNameFormat=threadNamePrefix + ""String_Node_Str"";
  this.workerThreadNameFormat=threadNamePrefix + ""String_Node_Str"";
}"
83904,"@Override public void updateLastDOM(final DOMObserverListener listener,final Node updatedDOM){
  if (!listenerMap.containsKey(listener)) {
    throw new IllegalArgumentException(""String_Node_Str"" + listener + ""String_Node_Str"");
  }
  listenerMap.put(listener,updatedDOM);
}","@Override public void updateLastDOM(final DOMObserverListener listener,final Node updatedDOM){
  listenerMapLock.lock();
  try {
    if (!listenerMap.containsKey(listener)) {
      throw new IllegalArgumentException(""String_Node_Str"" + listener + ""String_Node_Str"");
    }
    listenerMap.put(listener,updatedDOM);
  }
  finally {
    listenerMapLock.unlock();
  }
}"
83905,"private void evaluateXPathExpressionAndNotify(final DOMObserverListener listener){
  String xPathExpression=listener.getXPathExpression();
  QName qName=listener.getQName();
  DOMTuple scopedChanges;
  try {
    scopedChanges=getScopedChangesInternal(xPathExpression,qName);
  }
 catch (  XPathExpressionException e) {
    notifyXPathEvaluationFailure(e);
    return;
  }
  notifyListener(listener,scopedChanges);
}","private void evaluateXPathExpressionAndNotify(final DOMObserverListener listener){
  String xPathExpression=listener.getXPathExpression();
  QName qName=listener.getQName();
  DOMTuple scopedChanges;
  try {
    scopedChanges=getScopedChangesInternal(xPathExpression,qName);
  }
 catch (  XPathExpressionException e) {
    notifyXPathEvaluationFailure(e);
    return;
  }
  if (scopedChanges != null) {
    notifyListener(listener,scopedChanges);
  }
}"
83906,"@Test public void testThatNoChangeIsDetectedWhenBotNotNullAndBothAreEqualScoped() throws Exception {
  Node node1=createDOM(CONFIG_1);
  Node node2=createDOM(CONFIG_1);
  when(nodeProviderMock.get()).thenReturn(node1).thenReturn(node2);
  domObserver.updateCurrentDOM();
  domObserver.updateCurrentDOM();
  DOMTuple lastScopedChanges=domObserver.getScopedChanges(X_PATH_EXPRESSION_APPLICATION_NODES,XPathConstants.NODESET);
  assertNull(lastScopedChanges);
}","@Test public void testThatNoChangeIsDetectedWhenBotNotNullAndBothAreEqualScoped() throws Exception {
  when(nodeProviderMock.get()).thenReturn(createDOM(CONFIG_1)).thenReturn(createDOM(CONFIG_1));
  domObserver.updateCurrentDOM();
  domObserver.updateCurrentDOM();
  DOMTuple scopedChanges=domObserver.getScopedChanges(XPATH_EXPRESSION_APPLICATION_NODES,XPathConstants.NODESET);
  assertNull(scopedChanges);
}"
83907,"@Test public void testThatChangeIsDetectedWhenBothNotNullAndChangeOccurredScoped() throws Exception {
  Node node1=createDOM(CONFIG_1);
  Node node2=createDOM(CONFIG_2);
  when(nodeProviderMock.get()).thenReturn(node1).thenReturn(node2);
  domObserver.updateCurrentDOM();
  domObserver.updateCurrentDOM();
  DOMTuple lastScopedChanges=domObserver.getScopedChanges(X_PATH_EXPRESSION_APPLICATION_NODES,XPathConstants.NODESET);
  assertNotNull(lastScopedChanges);
  assertNotNull(lastScopedChanges.getFirst());
  assertNotNull(lastScopedChanges.getSecond());
}","@Test public void testThatChangeIsDetectedWhenBothNotNullAndChangeOccurredScoped() throws Exception {
  Node node1=createDOM(CONFIG_1);
  Node node2=createDOM(CONFIG_2);
  when(nodeProviderMock.get()).thenReturn(node1).thenReturn(node2);
  domObserver.updateCurrentDOM();
  domObserver.updateCurrentDOM();
  DOMTuple lastScopedChanges=domObserver.getScopedChanges(XPATH_EXPRESSION_APPLICATION_NODES,XPathConstants.NODESET);
  assertNotNull(lastScopedChanges);
  assertNotNull(lastScopedChanges.getFirst());
  assertNotNull(lastScopedChanges.getSecond());
}"
83908,"/** 
 * Gets a named warp object from persistence
 * @param warpName the name of the warp to get
 * @param requestingPlayer the player who is requesting this warp
 * @param persistenceProvider the persistence provider implementation
 * @return a warp object
 */
public Warp getWarp(String warpName,Player requestingPlayer,IPersistenceProvider persistenceProvider){
  Warp retVal=null;
  if (warpName != null && requestingPlayer != null) {
    List<Warp> availableWarpsForUser=getAvailableWarpsForUser(requestingPlayer.getDisplayName(),requestingPlayer,persistenceProvider);
    if (warpName.contains(""String_Node_Str"")) {
      for (      Warp warp : availableWarpsForUser) {
        if (warp.getFullyQualifiedName().equalsIgnoreCase(warpName))         retVal=warp;
      }
    }
 else {
      List<Warp> matchingWarps=new ArrayList<Warp>();
      for (      Warp warp : availableWarpsForUser) {
        if (warp.getName().equalsIgnoreCase(warpName)) {
          matchingWarps.add(warp);
        }
      }
      if (matchingWarps.size() == 1) {
        retVal=matchingWarps.get(0);
      }
 else       if (matchingWarps.size() > 1) {
        for (        Warp warp : matchingWarps) {
          if (warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName()))           retVal=warp;
        }
      }
    }
  }
  return retVal;
}","/** 
 * Gets a named warp object from persistence
 * @param warpName the name of the warp to get
 * @param requestingPlayer the player who is requesting this warp
 * @param persistenceProvider the persistence provider implementation
 * @return a warp object
 */
public Warp getWarp(String warpName,Player requestingPlayer,IPersistenceProvider persistenceProvider){
  Warp retVal=null;
  if (warpName != null && requestingPlayer != null) {
    List<Warp> availableWarpsForUser=getAvailableWarpsForUser(requestingPlayer.getDisplayName(),requestingPlayer,persistenceProvider);
    if (warpName.contains(AppStrings.FQL_DELIMITER)) {
      for (      Warp warp : availableWarpsForUser) {
        if (warp.getFullyQualifiedName().equalsIgnoreCase(warpName))         retVal=warp;
      }
    }
{
      List<Warp> matchingWarps=new ArrayList<Warp>();
      for (      Warp warp : availableWarpsForUser) {
        if (warp.getName().equalsIgnoreCase(warpName)) {
          matchingWarps.add(warp);
        }
      }
      if (matchingWarps.size() == 1) {
        retVal=matchingWarps.get(0);
      }
 else       if (matchingWarps.size() > 1) {
        for (        Warp warp : matchingWarps) {
          if (warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName()))           retVal=warp;
        }
      }
    }
  }
  return retVal;
}"
83909,"/** 
 * Renames a warp in the system.
 * @param warpName the name of the warp to rename
 * @param newWarpName the new name of the warp
 * @param requestingPlayer the player requesting this action
 * @param persistenceProvider the persistence provider implementation
 * @return true if renamed, false if not
 * @throws InternalPermissionsException if a method required permissions that the requesting player does not have
 */
public boolean renameWarp(String warpName,String newWarpName,Player requestingPlayer,IPersistenceProvider persistenceProvider) throws InternalPermissionsException {
  boolean retVal=false;
  if (warpName != null && newWarpName != null && requestingPlayer != null) {
    Warp warp=getWarp(warpName,requestingPlayer,persistenceProvider);
    if (!warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName()))     newWarpName=newWarpName.substring(newWarpName.indexOf(""String_Node_Str"") + 1);
    boolean isOwner=warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName());
    boolean hasAdminRename=plugin.hasPermission(requestingPlayer,AppStrings.COMMAND_ADMIN_RENAME_PERMISSION,AppStrings.COMMAND_RENAME,false);
    if (isOwner || hasAdminRename) {
      warp.setName(newWarpName);
      persistenceProvider.update(warp);
      retVal=true;
    }
 else     throw new InternalPermissionsException(AppStrings.WARP_CANNOT_RENAME_OTHERS);
  }
  return retVal;
}","/** 
 * Renames a warp in the system.
 * @param warpName the name of the warp to rename
 * @param newWarpName the new name of the warp
 * @param requestingPlayer the player requesting this action
 * @param persistenceProvider the persistence provider implementation
 * @return true if renamed, false if not
 * @throws InternalPermissionsException if a method required permissions that the requesting player does not have
 */
public boolean renameWarp(String warpName,String newWarpName,Player requestingPlayer,IPersistenceProvider persistenceProvider) throws InternalPermissionsException {
  boolean retVal=false;
  if (warpName != null && newWarpName != null && requestingPlayer != null) {
    Warp warp=getWarp(warpName,requestingPlayer,persistenceProvider);
    if (!warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName()))     newWarpName=newWarpName.substring(newWarpName.indexOf(AppStrings.FQL_DELIMITER) + 1);
    boolean isOwner=warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName());
    boolean hasAdminRename=plugin.hasPermission(requestingPlayer,AppStrings.COMMAND_ADMIN_RENAME_PERMISSION,AppStrings.COMMAND_RENAME,false);
    if (isOwner || hasAdminRename) {
      warp.setName(newWarpName);
      persistenceProvider.update(warp);
      retVal=true;
    }
 else     throw new InternalPermissionsException(AppStrings.WARP_CANNOT_RENAME_OTHERS);
  }
  return retVal;
}"
83910,"@Test public void addWarp() throws Exception {
  Player mockPlayerOne=Mockito.mock(Player.class);
  when(mockPlayerOne.getDisplayName()).thenReturn(PLAYER_ONE_NAME);
  World mockWorld=Mockito.mock(World.class);
  when(mockWorld.getName()).thenReturn(""String_Node_Str"");
  Location mockLocationPrivate=Mockito.mock(Location.class);
  when(mockLocationPrivate.getWorld()).thenReturn(mockWorld);
  when(mockLocationPrivate.getX()).thenReturn(10.0);
  when(mockLocationPrivate.getY()).thenReturn(20.0);
  when(mockLocationPrivate.getZ()).thenReturn(30.0);
  when(mockLocationPrivate.getPitch()).thenReturn(1.5f);
  when(mockLocationPrivate.getYaw()).thenReturn(1.75f);
  Location mockLocationUnlisted=Mockito.mock(Location.class);
  when(mockLocationUnlisted.getWorld()).thenReturn(mockWorld);
  when(mockLocationUnlisted.getX()).thenReturn(20.0);
  when(mockLocationUnlisted.getY()).thenReturn(30.0);
  when(mockLocationUnlisted.getZ()).thenReturn(40.0);
  when(mockLocationUnlisted.getPitch()).thenReturn(1.5f);
  when(mockLocationUnlisted.getYaw()).thenReturn(1.75f);
  Location mockLocationListed=Mockito.mock(Location.class);
  when(mockLocationListed.getWorld()).thenReturn(mockWorld);
  when(mockLocationListed.getX()).thenReturn(30.0);
  when(mockLocationListed.getY()).thenReturn(40.0);
  when(mockLocationListed.getZ()).thenReturn(50.0);
  when(mockLocationListed.getPitch()).thenReturn(1.5f);
  when(mockLocationListed.getYaw()).thenReturn(1.75f);
  UnitTestPersistenceProvider testPersistenceProvider=new UnitTestPersistenceProvider();
  WarpManager warpManager=new WarpManager(mockNiftyWarpPlugin);
  Warp privateWarp=warpManager.addWarp(""String_Node_Str"",mockPlayerOne,WarpType.PRIVATE,mockLocationPrivate,testPersistenceProvider);
  Warp unlistedWarp=warpManager.addWarp(""String_Node_Str"",mockPlayerOne,WarpType.UNLISTED,mockLocationUnlisted,testPersistenceProvider);
  Warp listedWarp=warpManager.addWarp(""String_Node_Str"",mockPlayerOne,WarpType.LISTED,mockLocationListed,testPersistenceProvider);
  List<Warp> testList1=testPersistenceProvider.getWarpsByName(""String_Node_Str"");
  List<Warp> testList2=testPersistenceProvider.getWarpsByName(""String_Node_Str"");
  List<Warp> testList3=testPersistenceProvider.getWarpsByName(""String_Node_Str"");
  assertEquals(testList1.get(0),privateWarp);
  assertEquals(testList2.get(0),unlistedWarp);
  assertEquals(testList3.get(0),listedWarp);
}","@Test public void addWarp() throws Exception {
  Player mockPlayerOne=Mockito.mock(Player.class);
  when(mockPlayerOne.getDisplayName()).thenReturn(PLAYER_ONE_NAME);
  World mockWorld=Mockito.mock(World.class);
  when(mockWorld.getName()).thenReturn(WORLD_NAME);
  Location mockLocationPrivate=Mockito.mock(Location.class);
  when(mockLocationPrivate.getWorld()).thenReturn(mockWorld);
  when(mockLocationPrivate.getX()).thenReturn(10.0);
  when(mockLocationPrivate.getY()).thenReturn(20.0);
  when(mockLocationPrivate.getZ()).thenReturn(30.0);
  when(mockLocationPrivate.getPitch()).thenReturn(1.5f);
  when(mockLocationPrivate.getYaw()).thenReturn(1.75f);
  Location mockLocationUnlisted=Mockito.mock(Location.class);
  when(mockLocationUnlisted.getWorld()).thenReturn(mockWorld);
  when(mockLocationUnlisted.getX()).thenReturn(20.0);
  when(mockLocationUnlisted.getY()).thenReturn(30.0);
  when(mockLocationUnlisted.getZ()).thenReturn(40.0);
  when(mockLocationUnlisted.getPitch()).thenReturn(1.5f);
  when(mockLocationUnlisted.getYaw()).thenReturn(1.75f);
  Location mockLocationListed=Mockito.mock(Location.class);
  when(mockLocationListed.getWorld()).thenReturn(mockWorld);
  when(mockLocationListed.getX()).thenReturn(30.0);
  when(mockLocationListed.getY()).thenReturn(40.0);
  when(mockLocationListed.getZ()).thenReturn(50.0);
  when(mockLocationListed.getPitch()).thenReturn(1.5f);
  when(mockLocationListed.getYaw()).thenReturn(1.75f);
  UnitTestPersistenceProvider testPersistenceProvider=new UnitTestPersistenceProvider();
  WarpManager warpManager=new WarpManager(mockNiftyWarpPlugin);
  Warp privateWarp=warpManager.addWarp(""String_Node_Str"",mockPlayerOne,WarpType.PRIVATE,mockLocationPrivate,testPersistenceProvider);
  Warp unlistedWarp=warpManager.addWarp(""String_Node_Str"",mockPlayerOne,WarpType.UNLISTED,mockLocationUnlisted,testPersistenceProvider);
  Warp listedWarp=warpManager.addWarp(""String_Node_Str"",mockPlayerOne,WarpType.LISTED,mockLocationListed,testPersistenceProvider);
  List<Warp> testList1=testPersistenceProvider.getWarpsByName(""String_Node_Str"");
  List<Warp> testList2=testPersistenceProvider.getWarpsByName(""String_Node_Str"");
  List<Warp> testList3=testPersistenceProvider.getWarpsByName(""String_Node_Str"");
  assertEquals(testList1.get(0),privateWarp);
  assertEquals(testList2.get(0),unlistedWarp);
  assertEquals(testList3.get(0),listedWarp);
}"
83911,"@Test public void setWarpType() throws Exception {
  Player mockPlayerOne=Mockito.mock(Player.class);
  when(mockPlayerOne.getDisplayName()).thenReturn(PLAYER_ONE_NAME);
  List<Warp> warpList=new ArrayList<Warp>();
  warpList.add(new Warp(""String_Node_Str"",PLAYER_ONE_NAME,WarpType.LISTED,""String_Node_Str"",0,0,0,1f,2f));
  UnitTestPersistenceProvider testPersistenceProvider=new UnitTestPersistenceProvider();
  testPersistenceProvider.setWarpList(warpList);
  Warp warpToModify=warpList.get(0);
  String warpToModifyName=warpToModify.getName();
  WarpType newType=WarpType.PRIVATE;
  WarpManager warpManager=new WarpManager(mockNiftyWarpPlugin);
  warpManager.setWarpType(warpToModifyName,newType,mockPlayerOne,testPersistenceProvider);
  Warp warpAfterMod=testPersistenceProvider.getAllWarps().get(0);
  assertEquals(WarpType.PRIVATE,warpAfterMod.getWarpType());
}","@Test public void setWarpType() throws Exception {
  Player mockPlayerOne=Mockito.mock(Player.class);
  when(mockPlayerOne.getDisplayName()).thenReturn(PLAYER_ONE_NAME);
  List<Warp> warpList=new ArrayList<Warp>();
  warpList.add(new Warp(""String_Node_Str"",PLAYER_ONE_NAME,WarpType.LISTED,WORLD_NAME,0,0,0,1f,2f));
  UnitTestPersistenceProvider testPersistenceProvider=new UnitTestPersistenceProvider();
  testPersistenceProvider.setWarpList(warpList);
  Warp warpToModify=warpList.get(0);
  String warpToModifyName=warpToModify.getName();
  WarpType newType=WarpType.PRIVATE;
  WarpManager warpManager=new WarpManager(mockNiftyWarpPlugin);
  warpManager.setWarpType(warpToModifyName,newType,mockPlayerOne,testPersistenceProvider);
  Warp warpAfterMod=testPersistenceProvider.getAllWarps().get(0);
  assertEquals(WarpType.PRIVATE,warpAfterMod.getWarpType());
}"
83912,"/** 
 * Adds a warp to the list using the supplied parameters
 * @param warpName the name of the warp
 * @param owner the player creating this warp
 * @param warpType the warpType for this warp
 * @param location the {@link org.bukkit.Location} object that represents this warp
 * @param persistenceProvider the persistence provider implementation
 * @return the Warp that was created
 */
public Warp addWarp(String warpName,Player owner,WarpType warpType,Location location,IPersistenceProvider persistenceProvider){
  Warp retVal=new Warp();
  retVal.setName(warpName);
  retVal.setOwner(owner.getDisplayName());
  retVal.setWarpType(warpType);
  retVal.setLocation(location);
  persistenceProvider.save(retVal);
  return retVal;
}","/** 
 * Adds a warp to the list using the supplied parameters
 * @param warpName the name of the warp
 * @param owner the player creating this warp
 * @param warpType the warpType for this warp
 * @param location the {@link org.bukkit.Location} object that represents this warp
 * @param persistenceProvider the persistence provider implementation
 * @return the Warp that was created
 */
public Warp addWarp(String warpName,Player owner,WarpType warpType,Location location,IPersistenceProvider persistenceProvider){
  Warp retVal=getWarp(warpName,owner,persistenceProvider);
  if ((retVal != null) && (retVal.getOwner().equalsIgnoreCase(owner.getDisplayName())))   persistenceProvider.delete(retVal);
  retVal=new Warp();
  retVal.setName(warpName);
  retVal.setOwner(owner.getDisplayName());
  retVal.setWarpType(warpType);
  retVal.setLocation(location);
  persistenceProvider.save(retVal);
  return retVal;
}"
83913,"/** 
 * Called when a command is sent
 * @param sender  The sender (aka player)
 * @param command The command
 * @param label   The label
 * @param args    The arguments used
 * @return Whether the command succeeded or not
 */
public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean retVal=false;
  Player player=(Player)sender;
  if (this.plugin.hasPermission(player,AppStrings.COMMAND_LIST_PERMISSION,AppStrings.COMMAND_LIST)) {
    if (args.length == 0) {
      String addonMsgPrefix=AppStrings.getAddonMsgPrefix(plugin);
      List<Warp> warpsList=plugin.getWarpManager().getVisibleWarpsForUser(player.getDisplayName(),player);
      if (warpsList.size() > 0) {
        List<Warp> playerOwnedWarps=new ArrayList<Warp>();
        for (        Warp warp : warpsList) {
          if (warp.getOwner().equalsIgnoreCase(player.getDisplayName())) {
            playerOwnedWarps.add(warp);
          }
        }
        Collections.sort(playerOwnedWarps);
        Collections.sort(warpsList);
        String playerOwnedWarpsStr=""String_Node_Str"";
        String otherOwnedWarpStr=""String_Node_Str"";
        if (playerOwnedWarps.size() > 0) {
          int i=0;
          while (i < playerOwnedWarps.size()) {
            Warp warp=playerOwnedWarps.get(i);
            playerOwnedWarpsStr+=warp.getWarpType().getTypeColor() + warp.getName();
            i++;
            if (i != playerOwnedWarps.size())             playerOwnedWarpsStr+=""String_Node_Str"";
          }
        }
        Map<String,List<Warp>> nameToWarpListMapping=new HashMap<String,List<Warp>>();
        List<Warp> tmpWarpList=null;
        for (        Warp warp : warpsList) {
          if (nameToWarpListMapping.containsKey(warp.getName()))           tmpWarpList=nameToWarpListMapping.get(warp.getName());
 else           tmpWarpList=new ArrayList<Warp>();
          tmpWarpList.add(warp);
          nameToWarpListMapping.put(warp.getName(),tmpWarpList);
        }
        String warpName=null;
        Set<Map.Entry<String,List<Warp>>> nameToWarpListEntries=nameToWarpListMapping.entrySet();
        for (        Map.Entry<String,List<Warp>> next : nameToWarpListEntries) {
          List<Warp> warpsWithSameName=next.getValue();
          boolean useFullyQualifiedNames=(warpsWithSameName.size() > 1);
          for (          Warp warp : warpsWithSameName) {
            if (warp.getOwner().equalsIgnoreCase(player.getDisplayName()))             continue;
            warpName=useFullyQualifiedNames ? warp.getFullyQualifiedName() : warp.getName();
            otherOwnedWarpStr+=warp.getWarpType().getTypeColor() + warpName;
            otherOwnedWarpStr+=""String_Node_Str"";
          }
        }
        otherOwnedWarpStr=otherOwnedWarpStr.trim().substring(0,otherOwnedWarpStr.length() - 2);
        String warpTypesInfo=ChatColor.WHITE + ""String_Node_Str"" + WarpType.LISTED.getTypeColor()+ AppStrings.WARP_TYPE_LISTED+ ""String_Node_Str""+ WarpType.UNLISTED.getTypeColor()+ AppStrings.WARP_TYPE_UNLISTED+ ""String_Node_Str""+ WarpType.PRIVATE.getTypeColor()+ AppStrings.WARP_TYPE_PRIVATE+ ChatColor.WHITE+ ""String_Node_Str"";
        player.sendMessage(ChatColor.AQUA + addonMsgPrefix + warpTypesInfo);
        player.sendMessage(ChatColor.GREEN + AppStrings.WARPS_YOURS + playerOwnedWarpsStr);
        player.sendMessage(ChatColor.GREEN + AppStrings.WARPS_OTHERS + otherOwnedWarpStr);
      }
 else {
        player.sendMessage(ChatColor.AQUA + addonMsgPrefix + ChatColor.GREEN+ AppStrings.AVAILABLE_WARPS_PREFIX+ ChatColor.WHITE+ AppStrings.NO_AVAILABLE_WARPS);
      }
      retVal=true;
    }
  }
 else   retVal=true;
  return retVal;
}","/** 
 * Called when a command is sent
 * @param sender  The sender (aka player)
 * @param command The command
 * @param label   The label
 * @param args    The arguments used
 * @return Whether the command succeeded or not
 */
public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean retVal=false;
  Player player=(Player)sender;
  if (this.plugin.hasPermission(player,AppStrings.COMMAND_LIST_PERMISSION,AppStrings.COMMAND_LIST)) {
    if (args.length == 0) {
      String addonMsgPrefix=AppStrings.getAddonMsgPrefix(plugin);
      List<Warp> warpsList=plugin.getWarpManager().getVisibleWarpsForUser(player.getDisplayName(),player);
      if (warpsList.size() > 0) {
        List<Warp> playerOwnedWarps=new ArrayList<Warp>();
        for (        Warp warp : warpsList) {
          if (warp.getOwner().equalsIgnoreCase(player.getDisplayName())) {
            playerOwnedWarps.add(warp);
          }
        }
        Collections.sort(playerOwnedWarps);
        Collections.sort(warpsList);
        String playerOwnedWarpsStr=""String_Node_Str"";
        String otherOwnedWarpStr=""String_Node_Str"";
        if (playerOwnedWarps.size() > 0) {
          int i=0;
          while (i < playerOwnedWarps.size()) {
            Warp warp=playerOwnedWarps.get(i);
            playerOwnedWarpsStr+=warp.getWarpType().getTypeColor() + warp.getName();
            i++;
            if (i != playerOwnedWarps.size())             playerOwnedWarpsStr+=""String_Node_Str"";
          }
        }
        Map<String,List<Warp>> nameToWarpListMapping=new HashMap<String,List<Warp>>();
        List<Warp> tmpWarpList=null;
        for (        Warp warp : warpsList) {
          if (nameToWarpListMapping.containsKey(warp.getName()))           tmpWarpList=nameToWarpListMapping.get(warp.getName());
 else           tmpWarpList=new ArrayList<Warp>();
          tmpWarpList.add(warp);
          nameToWarpListMapping.put(warp.getName(),tmpWarpList);
        }
        String warpName=null;
        Set<Map.Entry<String,List<Warp>>> nameToWarpListEntries=nameToWarpListMapping.entrySet();
        for (        Map.Entry<String,List<Warp>> next : nameToWarpListEntries) {
          List<Warp> warpsWithSameName=next.getValue();
          boolean useFullyQualifiedNames=(warpsWithSameName.size() > 1);
          for (          Warp warp : warpsWithSameName) {
            if (warp.getOwner().equalsIgnoreCase(player.getDisplayName()))             continue;
            warpName=useFullyQualifiedNames ? warp.getFullyQualifiedName() : warp.getName();
            otherOwnedWarpStr+=warp.getWarpType().getTypeColor() + warpName;
            otherOwnedWarpStr+=""String_Node_Str"";
          }
        }
        if (otherOwnedWarpStr.endsWith(""String_Node_Str""))         otherOwnedWarpStr=otherOwnedWarpStr.trim().substring(0,otherOwnedWarpStr.length() - 2);
        String warpTypesInfo=ChatColor.WHITE + ""String_Node_Str"" + WarpType.LISTED.getTypeColor()+ AppStrings.WARP_TYPE_LISTED+ ""String_Node_Str""+ WarpType.UNLISTED.getTypeColor()+ AppStrings.WARP_TYPE_UNLISTED+ ""String_Node_Str""+ WarpType.PRIVATE.getTypeColor()+ AppStrings.WARP_TYPE_PRIVATE+ ChatColor.WHITE+ ""String_Node_Str"";
        player.sendMessage(ChatColor.AQUA + addonMsgPrefix + warpTypesInfo);
        player.sendMessage(ChatColor.GREEN + AppStrings.WARPS_YOURS + playerOwnedWarpsStr);
        player.sendMessage(ChatColor.GREEN + AppStrings.WARPS_OTHERS + otherOwnedWarpStr);
      }
 else {
        player.sendMessage(ChatColor.AQUA + addonMsgPrefix + ChatColor.GREEN+ AppStrings.AVAILABLE_WARPS_PREFIX+ ChatColor.WHITE+ AppStrings.NO_AVAILABLE_WARPS);
      }
      retVal=true;
    }
  }
 else   retVal=true;
  return retVal;
}"
83914,"public void onEnable(){
  setupDatabase();
  warpManager=new WarpManager(getDatabase());
  getCommand(AppStrings.COMMAND_ADD).setExecutor(new AddWarpCommand(this));
  getCommand(AppStrings.COMMAND_ADMIN).setExecutor(new AdminCommand(this));
  getCommand(AppStrings.COMMAND_LIST).setExecutor(new ListWarpsCommand(this));
  getCommand(AppStrings.COMMAND_DELETE).setExecutor(new DeleteWarpCommand(this));
  getCommand(AppStrings.COMMAND_RENAME).setExecutor(new RenameWarpCommand(this));
  getCommand(AppStrings.COMMAND_SET).setExecutor(new SetWarpTypeCommand(this));
  getCommand(AppStrings.COMMAND_WARP).setExecutor(new WarpCommand(this));
  this.setupPermissions();
  log.info(AppStrings.getEnabledMessage(this));
}","public void onEnable(){
  setupDatabase();
  warpManager=new WarpManager(this);
  getCommand(AppStrings.COMMAND_ADD).setExecutor(new AddWarpCommand(this));
  getCommand(AppStrings.COMMAND_LIST).setExecutor(new ListWarpsCommand(this));
  getCommand(AppStrings.COMMAND_DELETE).setExecutor(new DeleteWarpCommand(this));
  getCommand(AppStrings.COMMAND_RENAME).setExecutor(new RenameWarpCommand(this));
  getCommand(AppStrings.COMMAND_SET).setExecutor(new SetWarpTypeCommand(this));
  getCommand(AppStrings.COMMAND_WARP).setExecutor(new WarpCommand(this));
  this.setupPermissions();
  log.info(AppStrings.getEnabledMessage(this));
}"
83915,"/** 
 * Sets the warp type of an existing named warp
 * @param warpName the name of the warp we're going to modify
 * @param type the type to set that warp to
 * @param requestingPlayer the player requesting this action
 * @return true if type was set, false if not
 */
public boolean setWarpType(String warpName,WarpType type,Player requestingPlayer){
  boolean retVal=false;
  if (warpName != null && type != null && requestingPlayer != null) {
    Warp warp=getWarp(warpName,requestingPlayer);
    if (warp != null) {
      warp.setWarpType(type);
      database.update(warp);
      retVal=true;
    }
  }
  return retVal;
}","/** 
 * Sets the warp type of an existing named warp
 * @param warpName the name of the warp we're going to modify
 * @param type the type to set that warp to
 * @param requestingPlayer the player requesting this action
 * @return true if type was set, false if not
 * @throws InternalPermissionsException if a method required permissions that the requesting player does not have
 */
public boolean setWarpType(String warpName,WarpType type,Player requestingPlayer) throws InternalPermissionsException {
  boolean retVal=false;
  if (warpName != null && type != null && requestingPlayer != null) {
    Warp warp=getWarp(warpName,requestingPlayer);
    if (warp != null) {
      boolean isOwner=warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName());
      boolean hasAdminSetType=plugin.hasPermission(requestingPlayer,AppStrings.COMMAND_ADMIN_SET_PERMISSION,AppStrings.COMMAND_SET);
      if (isOwner || hasAdminSetType && !isOwner) {
        warp.setWarpType(type);
        plugin.getDatabase().update(warp);
        retVal=true;
      }
 else       throw new InternalPermissionsException(AppStrings.WARP_CANNOT_SET_OTHERS);
    }
  }
  return retVal;
}"
83916,"/** 
 * Adds a warp to the list using the supplied parameters
 * @param warpName the name of the warp
 * @param owner the player creating this warp
 * @param warpType the warpType for this warp
 * @param location the {@link org.bukkit.Location} object that represents this warp
 * @return the Warp that was created
 */
public Warp addWarp(String warpName,Player owner,WarpType warpType,Location location){
  Warp retVal=getWarp(warpName,owner);
  if (retVal == null)   retVal=new Warp();
  retVal.setName(warpName);
  retVal.setOwner(owner.getDisplayName());
  retVal.setWarpType(warpType);
  retVal.setLocation(location);
  database.save(retVal);
  return retVal;
}","/** 
 * Adds a warp to the list using the supplied parameters
 * @param warpName the name of the warp
 * @param owner the player creating this warp
 * @param warpType the warpType for this warp
 * @param location the {@link org.bukkit.Location} object that represents this warp
 * @return the Warp that was created
 */
public Warp addWarp(String warpName,Player owner,WarpType warpType,Location location){
  Warp retVal=getWarp(warpName,owner);
  if (retVal == null)   retVal=new Warp();
  retVal.setName(warpName);
  retVal.setOwner(owner.getDisplayName());
  retVal.setWarpType(warpType);
  retVal.setLocation(location);
  plugin.getDatabase().save(retVal);
  return retVal;
}"
83917,"/** 
 * Gets the list of warps for the user
 * @param playerName the name of the player whose warps should be listed
 * @param requestingPlayer the name of the player requesting this list
 * @return a list of warps that the player in the playerName parameter can use
 */
public List<Warp> getWarpsForUser(String playerName,Player requestingPlayer){
  List<Warp> retVal=new ArrayList<Warp>();
  List<Warp> warpsFromDB=database.find(Warp.class).findList();
  for (  Warp warp : warpsFromDB) {
    if (warp.getWarpType() == WarpType.PUBLIC_LISTED) {
      retVal.add(warp);
    }
 else {
      if (warp.getOwner().equals(playerName)) {
        retVal.add(warp);
      }
    }
  }
  return retVal;
}","/** 
 * Gets the list of warps for the user
 * @param playerName the name of the player whose warps should be listed
 * @param requestingPlayer the name of the player requesting this list
 * @return a list of warps that the player in the playerName parameter can use
 */
public List<Warp> getWarpsForUser(String playerName,Player requestingPlayer){
  List<Warp> retVal=new ArrayList<Warp>();
  List<Warp> warpsFromDB=plugin.getDatabase().find(Warp.class).findList();
  for (  Warp warp : warpsFromDB) {
    if (warp.getWarpType() == WarpType.PUBLIC_LISTED) {
      retVal.add(warp);
    }
 else {
      if (warp.getOwner().equals(playerName)) {
        retVal.add(warp);
      }
    }
  }
  return retVal;
}"
83918,"/** 
 * Gets a named warp object from persistence
 * @param warpName the name of the warp to get
 * @param requestingPlayer the player who is requesting this warp
 * @return a warp object
 */
public Warp getWarp(String warpName,Player requestingPlayer){
  Warp retVal=null;
  if (warpName != null && requestingPlayer != null) {
    String fullyQualifiedName;
    if (warpName.contains(""String_Node_Str"")) {
      retVal=database.find(Warp.class).where().ieq(""String_Node_Str"",warpName).findUnique();
      if (!retVal.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName()) && retVal.getWarpType() == WarpType.PRIVATE) {
        retVal=null;
      }
    }
 else {
      fullyQualifiedName=Warp.buildFullyQualifiedName(requestingPlayer.getDisplayName(),warpName);
      retVal=database.find(Warp.class).where().ieq(""String_Node_Str"",fullyQualifiedName).findUnique();
    }
  }
  return retVal;
}","/** 
 * Gets a named warp object from persistence
 * @param warpName the name of the warp to get
 * @param requestingPlayer the player who is requesting this warp
 * @return a warp object
 */
public Warp getWarp(String warpName,Player requestingPlayer){
  Warp retVal=null;
  if (warpName != null && requestingPlayer != null) {
    String fullyQualifiedName;
    if (warpName.contains(""String_Node_Str"")) {
      retVal=plugin.getDatabase().find(Warp.class).where().ieq(""String_Node_Str"",warpName).findUnique();
      if (!retVal.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName()) && retVal.getWarpType() == WarpType.PRIVATE) {
        retVal=null;
      }
    }
 else {
      fullyQualifiedName=Warp.buildFullyQualifiedName(requestingPlayer.getDisplayName(),warpName);
      retVal=plugin.getDatabase().find(Warp.class).where().ieq(""String_Node_Str"",fullyQualifiedName).findUnique();
    }
  }
  return retVal;
}"
83919,"/** 
 * Renames a warp in the system.
 * @param warpName the name of the warp to rename
 * @param newWarpName the new name of the warp
 * @param requestingPlayer the player requesting this action
 * @return true if renamed, false if not
 */
public boolean renameWarp(String warpName,String newWarpName,Player requestingPlayer){
  boolean retVal=false;
  if (warpName != null && newWarpName != null && requestingPlayer != null) {
    Warp warp=getWarp(warpName,requestingPlayer);
    if (!warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName()))     newWarpName=newWarpName.substring(newWarpName.indexOf(""String_Node_Str"") + 1);
    warp.setName(newWarpName);
    database.update(warp);
    retVal=true;
  }
  return retVal;
}","/** 
 * Renames a warp in the system.
 * @param warpName the name of the warp to rename
 * @param newWarpName the new name of the warp
 * @param requestingPlayer the player requesting this action
 * @return true if renamed, false if not
 * @throws InternalPermissionsException if a method required permissions that the requesting player does not have
 */
public boolean renameWarp(String warpName,String newWarpName,Player requestingPlayer) throws InternalPermissionsException {
  boolean retVal=false;
  if (warpName != null && newWarpName != null && requestingPlayer != null) {
    Warp warp=getWarp(warpName,requestingPlayer);
    if (!warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName()))     newWarpName=newWarpName.substring(newWarpName.indexOf(""String_Node_Str"") + 1);
    boolean isOwner=warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName());
    boolean hasAdminRename=plugin.hasPermission(requestingPlayer,AppStrings.COMMAND_ADMIN_RENAME_PERMISSION,AppStrings.COMMAND_RENAME);
    if (isOwner || hasAdminRename && !isOwner) {
      warp.setName(newWarpName);
      plugin.getDatabase().update(warp);
      retVal=true;
    }
 else     throw new InternalPermissionsException(AppStrings.WARP_CANNOT_RENAME_OTHERS);
  }
  return retVal;
}"
83920,"/** 
 * Deletes a warp from the list
 * @param warpName the name of the warp
 * @param requestingPlayer the player requesting this action
 * @return true if deleted, false if not
 */
public boolean deleteWarp(String warpName,Player requestingPlayer){
  boolean retVal=false;
  if (warpName != null && requestingPlayer != null) {
    Warp warp=getWarp(warpName,requestingPlayer);
    if (warp != null) {
      database.delete(warp);
      retVal=true;
    }
  }
  return retVal;
}","/** 
 * Deletes a warp from the list
 * @param warpName the name of the warp
 * @param requestingPlayer the player requesting this action
 * @return true if deleted, false if not
 * @throws InternalPermissionsException if a method required permissions that the requesting player does not have
 */
public boolean deleteWarp(String warpName,Player requestingPlayer) throws InternalPermissionsException {
  boolean retVal=false;
  if (warpName != null && requestingPlayer != null) {
    Warp warp=getWarp(warpName,requestingPlayer);
    if (warp != null) {
      boolean isOwner=warp.getOwner().equalsIgnoreCase(requestingPlayer.getDisplayName());
      boolean hasAdminDelete=plugin.hasPermission(requestingPlayer,AppStrings.COMMAND_ADMIN_DELETE_PERMISSION,AppStrings.COMMAND_DELETE);
      if (isOwner || hasAdminDelete && !isOwner) {
        plugin.getDatabase().delete(warp);
        retVal=true;
      }
 else       throw new InternalPermissionsException(AppStrings.WARP_CANNOT_REMOVE_OTHERS);
    }
  }
  return retVal;
}"
83921,"public WarpManager(EbeanServer database){
  this.database=database;
}","public WarpManager(NiftyWarp niftyWarp){
  this.plugin=niftyWarp;
}"
83922,"/** 
 * Called when a command is sent
 * @param sender  The sender (aka player)
 * @param command The command
 * @param label   The label
 * @param args    The arguments used
 * @return Whether the command succeeded or not
 */
public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean retVal=false;
  Player player=(Player)sender;
  if (this.plugin.hasPermission(player,AppStrings.COMMAND_ADD_PERMISSION,label)) {
    if (args.length > 0) {
      String warpName=args[0];
      WarpType warpType=WarpType.getDefaultWarpType();
      if (args.length == 2) {
        String warpTypeStr=args[1];
        WarpType warpParamType=WarpType.getTypeForString(warpTypeStr);
        if (warpParamType != null)         warpType=warpParamType;
      }
      Warp warp=plugin.getWarpManager().addWarp(warpName,player,warpType,player.getLocation());
      String addonMsgPrefix=AppStrings.getAddonMsgPrefix(plugin);
      player.sendMessage(ChatColor.AQUA + addonMsgPrefix + ChatColor.GREEN+ AppStrings.WARP_ADDED_PREFIX+ warp.getWarpType().getTypeColor()+ warpName);
      retVal=true;
    }
  }
 else   retVal=true;
  return retVal;
}","/** 
 * Called when a command is sent
 * @param sender  The sender (aka player)
 * @param command The command
 * @param label   The label
 * @param args    The arguments used
 * @return Whether the command succeeded or not
 */
public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean retVal=false;
  Player player=(Player)sender;
  if (this.plugin.hasPermission(player,AppStrings.COMMAND_ADD_PERMISSION,AppStrings.COMMAND_ADD)) {
    if (args.length > 0) {
      String warpName=args[0];
      WarpType warpType=WarpType.getDefaultWarpType();
      if (args.length == 2) {
        String warpTypeStr=args[1];
        WarpType warpParamType=WarpType.getTypeForString(warpTypeStr);
        if (warpParamType != null)         warpType=warpParamType;
      }
      Warp warp=plugin.getWarpManager().addWarp(warpName,player,warpType,player.getLocation());
      String addonMsgPrefix=AppStrings.getAddonMsgPrefix(plugin);
      player.sendMessage(ChatColor.AQUA + addonMsgPrefix + ChatColor.GREEN+ AppStrings.WARP_ADDED_PREFIX+ warp.getWarpType().getTypeColor()+ warpName);
      retVal=true;
    }
  }
 else   retVal=true;
  return retVal;
}"
83923,"/** 
 * Called when a command is sent
 * @param sender  The sender (aka player)
 * @param command The command
 * @param label   The label
 * @param args    The arguments used
 * @return Whether the command succeeded or not
 */
public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean retVal=false;
  Player player=(Player)sender;
  if (this.plugin.hasPermission(player,AppStrings.COMMAND_DELETE_PERMISSION,label)) {
    if (args.length == 1) {
      String warpName=args[0];
      String addonMsgPrefix=AppStrings.getAddonMsgPrefix(plugin);
      boolean removed=plugin.getWarpManager().deleteWarp(warpName,player);
      if (removed) {
        player.sendMessage(ChatColor.AQUA + addonMsgPrefix + ChatColor.GREEN+ AppStrings.WARP_REMOVED_PREFIX+ ChatColor.WHITE+ warpName);
      }
 else {
        player.sendMessage(ChatColor.AQUA + addonMsgPrefix + ChatColor.RED+ AppStrings.WARP_NOT_FOUND_PREFIX+ ChatColor.WHITE+ warpName);
      }
      retVal=true;
    }
  }
 else   retVal=true;
  return retVal;
}","/** 
 * Called when a command is sent
 * @param sender  The sender (aka player)
 * @param command The command
 * @param label   The label
 * @param args    The arguments used
 * @return Whether the command succeeded or not
 */
public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  boolean retVal=false;
  Player player=(Player)sender;
  if (this.plugin.hasPermission(player,AppStrings.COMMAND_DELETE_PERMISSION,AppStrings.COMMAND_DELETE)) {
    if (args.length == 1) {
      String warpName=args[0];
      String addonMsgPrefix=AppStrings.getAddonMsgPrefix(plugin);
      try {
        boolean removed=plugin.getWarpManager().deleteWarp(warpName,player);
        if (removed) {
          player.sendMessage(ChatColor.AQUA + addonMsgPrefix + ChatColor.GREEN+ AppStrings.WARP_REMOVED_PREFIX+ ChatColor.WHITE+ warpName);
        }
 else {
          player.sendMessage(ChatColor.AQUA + addonMsgPrefix + ChatColor.RED+ AppStrings.WARP_NOT_FOUND_PREFIX+ ChatColor.WHITE+ warpName);
        }
      }
 catch (      InternalPermissionsException e) {
        player.sendMessage(ChatColor.AQUA + addonMsgPrefix + ChatColor.RED+ e.getMessage());
      }
      retVal=true;
    }
  }
 else   retVal=true;
  return retVal;
}"
83924,"public List<Extension> extract() throws IOException, InterruptedException {
  File tempDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tempDir.delete();
  tempDir.mkdirs();
  StandardJavaFileManager fileManager=null;
  try {
    File srcdir=new File(tempDir,""String_Node_Str"");
    File libdir=new File(tempDir,""String_Node_Str"");
    FileUtils.unzip(hpi.resolveSources(),srcdir);
    File pom=hpi.resolvePOM();
    FileUtils.copyFile(pom,new File(srcdir,""String_Node_Str""));
    downloadDependencies(srcdir,libdir);
    JavaCompiler javac1=JavacTool.create();
    DiagnosticListener<? super JavaFileObject> errorListener=new DiagnosticListener<JavaFileObject>(){
      public void report(      Diagnostic<? extends JavaFileObject> diagnostic){
        System.out.println(diagnostic);
      }
    }
;
    fileManager=javac1.getStandardFileManager(errorListener,Locale.getDefault(),Charset.defaultCharset());
    fileManager.setLocation(StandardLocation.CLASS_PATH,generateClassPath(libdir));
    List<String> options=Arrays.asList(""String_Node_Str"");
    Iterable<? extends JavaFileObject> files=fileManager.getJavaFileObjectsFromFiles(generateSources(srcdir));
    JavaCompiler.CompilationTask task=javac1.getTask(null,fileManager,errorListener,options,null,files);
    final JavacTask javac=(JavacTask)task;
    final Trees trees=Trees.instance(javac);
    final Elements elements=javac.getElements();
    final Types types=javac.getTypes();
    Iterable<? extends CompilationUnitTree> parsed=javac.parse();
    javac.analyze();
    final List<Extension> r=new ArrayList<Extension>();
    TreePathScanner<?,?> classScanner=new TreePathScanner<Void,Void>(){
      final TypeElement extensionPoint=elements.getTypeElement(""String_Node_Str"");
      public Void visitClass(      ClassTree ct,      Void _){
        TreePath path=getCurrentPath();
        TypeElement e=(TypeElement)trees.getElement(path);
        if (e != null)         checkIfExtension(path,e,e);
        return super.visitClass(ct,_);
      }
      private void checkIfExtension(      TreePath pathToRoot,      TypeElement root,      TypeElement e){
        for (        TypeMirror i : e.getInterfaces()) {
          if (types.asElement(i).equals(extensionPoint))           r.add(new Extension(hpi,javac,trees,root,pathToRoot,e));
          checkIfExtension(pathToRoot,root,(TypeElement)types.asElement(i));
        }
        TypeMirror s=e.getSuperclass();
        if (!(s instanceof NoType))         checkIfExtension(pathToRoot,root,(TypeElement)types.asElement(s));
      }
    }
;
    for (    CompilationUnitTree u : parsed)     classScanner.scan(u,null);
    return r;
  }
  finally {
    FileUtils.deleteDirectory(tempDir);
    if (fileManager != null)     fileManager.close();
  }
}","public List<Extension> extract() throws IOException, InterruptedException {
  File tempDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tempDir.delete();
  tempDir.mkdirs();
  StandardJavaFileManager fileManager=null;
  try {
    File srcdir=new File(tempDir,""String_Node_Str"");
    File libdir=new File(tempDir,""String_Node_Str"");
    FileUtils.unzip(artifact.resolveSources(),srcdir);
    File pom=artifact.resolvePOM();
    FileUtils.copyFile(pom,new File(srcdir,""String_Node_Str""));
    downloadDependencies(srcdir,libdir);
    JavaCompiler javac1=JavacTool.create();
    DiagnosticListener<? super JavaFileObject> errorListener=new DiagnosticListener<JavaFileObject>(){
      public void report(      Diagnostic<? extends JavaFileObject> diagnostic){
        System.out.println(diagnostic);
      }
    }
;
    fileManager=javac1.getStandardFileManager(errorListener,Locale.getDefault(),Charset.defaultCharset());
    fileManager.setLocation(StandardLocation.CLASS_PATH,generateClassPath(libdir));
    List<String> options=Arrays.asList(""String_Node_Str"");
    Iterable<? extends JavaFileObject> files=fileManager.getJavaFileObjectsFromFiles(generateSources(srcdir));
    JavaCompiler.CompilationTask task=javac1.getTask(null,fileManager,errorListener,options,null,files);
    final JavacTask javac=(JavacTask)task;
    final Trees trees=Trees.instance(javac);
    final Elements elements=javac.getElements();
    final Types types=javac.getTypes();
    Iterable<? extends CompilationUnitTree> parsed=javac.parse();
    javac.analyze();
    final List<Extension> r=new ArrayList<Extension>();
    TreePathScanner<?,?> classScanner=new TreePathScanner<Void,Void>(){
      final TypeElement extensionPoint=elements.getTypeElement(""String_Node_Str"");
      public Void visitClass(      ClassTree ct,      Void _){
        TreePath path=getCurrentPath();
        TypeElement e=(TypeElement)trees.getElement(path);
        if (e != null)         checkIfExtension(path,e,e);
        return super.visitClass(ct,_);
      }
      private void checkIfExtension(      TreePath pathToRoot,      TypeElement root,      TypeElement e){
        for (        TypeMirror i : e.getInterfaces()) {
          if (types.asElement(i).equals(extensionPoint))           r.add(new Extension(artifact,javac,trees,root,pathToRoot,e));
          checkIfExtension(pathToRoot,root,(TypeElement)types.asElement(i));
        }
        TypeMirror s=e.getSuperclass();
        if (!(s instanceof NoType))         checkIfExtension(pathToRoot,root,(TypeElement)types.asElement(s));
      }
    }
;
    for (    CompilationUnitTree u : parsed)     classScanner.scan(u,null);
    return r;
  }
  finally {
    FileUtils.deleteDirectory(tempDir);
    if (fileManager != null)     fileManager.close();
  }
}"
83925,"public ExtensionPointsExtractor(MavenArtifact hpi){
  this.hpi=hpi;
}","public ExtensionPointsExtractor(MavenArtifact artifact){
  this.artifact=artifact;
}"
83926,"private void checkIfExtension(TreePath pathToRoot,TypeElement root,TypeElement e){
  for (  TypeMirror i : e.getInterfaces()) {
    if (types.asElement(i).equals(extensionPoint))     r.add(new Extension(hpi,javac,trees,root,pathToRoot,e));
    checkIfExtension(pathToRoot,root,(TypeElement)types.asElement(i));
  }
  TypeMirror s=e.getSuperclass();
  if (!(s instanceof NoType))   checkIfExtension(pathToRoot,root,(TypeElement)types.asElement(s));
}","private void checkIfExtension(TreePath pathToRoot,TypeElement root,TypeElement e){
  for (  TypeMirror i : e.getInterfaces()) {
    if (types.asElement(i).equals(extensionPoint))     r.add(new Extension(artifact,javac,trees,root,pathToRoot,e));
    checkIfExtension(pathToRoot,root,(TypeElement)types.asElement(i));
  }
  TypeMirror s=e.getSuperclass();
  if (!(s instanceof NoType))   checkIfExtension(pathToRoot,root,(TypeElement)types.asElement(s));
}"
83927,"public byte[] uncompress(ByteBuffer org,byte[] ref_data,Inflater inflater) throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int ref_data_offset=0;
  while (org.hasRemaining()) {
    int meth=org.get();
    int meth_major=meth >> 3;
switch (meth_major) {
case CHUNK_METHOD_DEFLATE:
{
        int rskip_spec=meth & 7;
        int comp_data_size=org.getChar();
        int rskip=spec_to_rskip(rskip_spec);
        ref_data_offset+=rskip;
        int dict_size=Math.min(WINDOW_SIZE,ref_data.length - ref_data_offset);
        Dictionary dict=new Dictionary(ref_data,ref_data_offset,dict_size);
        int before=baos.size();
        DZUtil.inflate(inflater,org,comp_data_size,baos,dict);
        int after=baos.size();
      }
    break;
case CHUNK_METHOD_PREFIX_COPY:
{
    if ((meth & 7) != 0)     throw new IOException(""String_Node_Str"" + meth);
    int comp_data_size=org.getChar();
    if (comp_data_size != 2)     throw new IOException(""String_Node_Str"" + comp_data_size);
    int copy_length=1 + org.getChar();
    baos.write(ref_data,ref_data_offset,copy_length);
    ref_data_offset+=copy_length;
  }
break;
case CHUNK_METHOD_OFFSET_COPY:
{
if ((meth & 7) != 0) throw new IOException(""String_Node_Str"" + meth);
int comp_data_size=org.getChar();
if (comp_data_size != 4) throw new IOException(""String_Node_Str"" + comp_data_size);
int offset=1 + org.getChar();
int copy_length=1 + org.getChar();
ref_data_offset+=offset;
baos.write(ref_data,ref_data_offset,copy_length);
ref_data_offset+=copy_length;
}
break;
default :
throw new IOException(""String_Node_Str"" + meth);
}
}
return baos.toByteArray();
}","public byte[] uncompress(ByteBuffer org,byte[] ref_data,Inflater inflater) throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int ref_data_offset=0;
  while (org.hasRemaining()) {
    int meth=org.get();
    int meth_major=meth >> 3;
switch (meth_major) {
case CHUNK_METHOD_DEFLATE:
{
        int rskip_spec=meth & 7;
        int comp_data_size=org.getChar();
        int rskip=spec_to_rskip(rskip_spec);
        ref_data_offset=Math.min(ref_data_offset + rskip,ref_data.length);
        int dict_size=Math.min(WINDOW_SIZE,ref_data.length - ref_data_offset);
        Dictionary dict=new Dictionary(ref_data,ref_data_offset,dict_size);
        int before=baos.size();
        DZUtil.inflate(inflater,org,comp_data_size,baos,dict);
        int after=baos.size();
      }
    break;
case CHUNK_METHOD_PREFIX_COPY:
{
    if ((meth & 7) != 0)     throw new IOException(""String_Node_Str"" + meth);
    int comp_data_size=org.getChar();
    if (comp_data_size != 2)     throw new IOException(""String_Node_Str"" + comp_data_size);
    int copy_length=1 + org.getChar();
    baos.write(ref_data,ref_data_offset,copy_length);
    ref_data_offset+=copy_length;
  }
break;
case CHUNK_METHOD_OFFSET_COPY:
{
if ((meth & 7) != 0) throw new IOException(""String_Node_Str"" + meth);
int comp_data_size=org.getChar();
if (comp_data_size != 4) throw new IOException(""String_Node_Str"" + comp_data_size);
int offset=1 + org.getChar();
int copy_length=1 + org.getChar();
ref_data_offset+=offset;
baos.write(ref_data,ref_data_offset,copy_length);
ref_data_offset+=copy_length;
}
break;
default :
throw new IOException(""String_Node_Str"" + meth);
}
}
return baos.toByteArray();
}"
83928,"/** 
 * Computes an AppendSpecification for adding a version. Has the side effect of placing the cursor at the end.
 */
public AppendSpecification add(Iterator<Version> versions_to_add) throws IOException {
  set_cursor_at_end();
  ExtByteArrayOutputStream baos=new ExtByteArrayOutputStream();
  if (current_pos == 0)   baos.writeBigEndianInteger(DELTAZIP_MAGIC_HEADER | VERSION_11,4);
  Version prev_version=getVersion();
  while (versions_to_add.hasNext()) {
    Version cur=versions_to_add.next();
    if (prev_version != null) {
      pack_delta(prev_version,DZUtil.allToByteArray(cur.getContents()),baos);
    }
    prev_version=cur;
  }
  pack_snapshot(prev_version,baos);
  return new AppendSpecification(current_pos,baos.toByteArray());
}","/** 
 * Computes an AppendSpecification for adding a version. Has the side effect of placing the cursor at the end.
 */
public AppendSpecification add(Iterator<Version> versions_to_add) throws IOException {
  set_cursor_at_end();
  ExtByteArrayOutputStream baos=new ExtByteArrayOutputStream();
  if (current_pos == 0)   baos.writeBigEndianInteger(DELTAZIP_MAGIC_HEADER | VERSION_11,4);
  if (!versions_to_add.hasNext()) {
    return new AppendSpecification(access.getSize(),baos.toByteArray());
  }
  Version prev_version=getVersion();
  while (versions_to_add.hasNext()) {
    Version cur=versions_to_add.next();
    if (prev_version != null) {
      pack_delta(prev_version,DZUtil.allToByteArray(cur.getContents()),baos);
    }
    prev_version=cur;
  }
  pack_snapshot(prev_version,baos);
  return new AppendSpecification(current_pos,baos.toByteArray());
}"
83929,"public void test_add_get_with(byte[] file0,Version rev1,Version rev2) throws IOException {
  ByteArrayAccess access0=new ByteArrayAccess(file0);
  DeltaZip dz0=new DeltaZip(access0);
  AppendSpecification app1=dz0.add(rev1);
  byte[] file1=access0.applyAppendSpec(app1);
  dump(""String_Node_Str"",file1);
  ByteArrayAccess access1=new ByteArrayAccess(file1);
  DeltaZip dz1=new DeltaZip(access1);
  AppendSpecification app2=dz1.add(rev2);
  byte[] file2=access1.applyAppendSpec(app2);
  dump(""String_Node_Str"",file2);
  ByteArrayAccess access2=new ByteArrayAccess(file2);
  DeltaZip dz2=new DeltaZip(access2);
  assertEquals(dz1.getVersion(),rev1);
  assertEquals(dz2.getVersion(),rev2);
  dz2.previous();
  assertEquals(dz2.getVersion(),rev1);
  dz2.resetCursor();
  assertEquals(dz2.getVersion(),rev2);
  dz2.resetCursor();
  assertEquals(dz2.getVersion(),rev2);
  DeltaZip dz2c=dz2.clone();
  assertEquals(dz2c.getVersion(),rev2);
  dz2c.previous();
  assertEquals(dz2c.getVersion(),rev1);
  assertEquals(dz2.getVersion(),rev2);
  dz2c.resetCursor();
  dz2.previous();
  assertEquals(dz2c.getVersion(),rev2);
  try {
    dz1.previous();
    throw new RuntimeException(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  try {
    dz2.previous();
    throw new RuntimeException(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}","private void test_add_get_with(byte[] file0,Version rev1,Version rev2) throws IOException {
  ByteArrayAccess access0=new ByteArrayAccess(file0);
  DeltaZip dz0=new DeltaZip(access0);
  AppendSpecification app1=dz0.add(rev1);
  byte[] file1=access0.applyAppendSpec(app1);
  dump(""String_Node_Str"",file1);
  ByteArrayAccess access1=new ByteArrayAccess(file1);
  DeltaZip dz1=new DeltaZip(access1);
  AppendSpecification app2=dz1.add(rev2);
  byte[] file2=access1.applyAppendSpec(app2);
  dump(""String_Node_Str"",file2);
  ByteArrayAccess access2=new ByteArrayAccess(file2);
  DeltaZip dz2=new DeltaZip(access2);
  assertEquals(dz1.getVersion(),rev1);
  assertEquals(dz2.getVersion(),rev2);
  dz2.previous();
  assertEquals(dz2.getVersion(),rev1);
  dz2.resetCursor();
  assertEquals(dz2.getVersion(),rev2);
  dz2.resetCursor();
  assertEquals(dz2.getVersion(),rev2);
  DeltaZip dz2c=dz2.clone();
  assertEquals(dz2c.getVersion(),rev2);
  dz2c.previous();
  assertEquals(dz2c.getVersion(),rev1);
  assertEquals(dz2.getVersion(),rev2);
  dz2c.resetCursor();
  dz2.previous();
  assertEquals(dz2c.getVersion(),rev2);
  try {
    dz1.previous();
    throw new RuntimeException(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  try {
    dz2.previous();
    throw new RuntimeException(""String_Node_Str"");
  }
 catch (  Exception e) {
  }
}"
83930,"public byte[] uncompress(ByteBuffer org,byte[] ref_data,Inflater inflater) throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int ref_data_offset=0;
  while (org.hasRemaining()) {
    System.err.println(""String_Node_Str"" + org.remaining());
    int meth=org.get();
    int meth_major=meth >> 3;
switch (meth_major) {
case CHUNK_METHOD_DEFLATE:
{
        int rskip_spec=meth & 7;
        int comp_data_size=org.getChar();
        int rskip=spec_to_rskip(rskip_spec);
        ref_data_offset+=rskip;
        int dict_size=Math.min(WINDOW_SIZE,ref_data.length - ref_data_offset);
        Dictionary dict=new Dictionary(ref_data,ref_data_offset,dict_size);
        int before=baos.size();
        inflate(inflater,org,comp_data_size,baos,dict);
        int after=baos.size();
        System.err.println(""String_Node_Str"" + comp_data_size + ""String_Node_Str""+ (after - before));
      }
    break;
case CHUNK_METHOD_PREFIX_COPY:
{
    if ((meth & 7) != 0)     throw new IOException(""String_Node_Str"" + meth);
    int comp_data_size=org.getChar();
    if (comp_data_size != 2)     throw new IOException(""String_Node_Str"" + comp_data_size);
    int copy_length=1 + org.getChar();
    baos.write(ref_data,ref_data_offset,copy_length);
    ref_data_offset+=copy_length;
  }
break;
case CHUNK_METHOD_OFFSET_COPY:
{
if ((meth & 7) != 0) throw new IOException(""String_Node_Str"" + meth);
int comp_data_size=org.getChar();
if (comp_data_size != 4) throw new IOException(""String_Node_Str"" + comp_data_size);
int offset=1 + org.getChar();
int copy_length=1 + org.getChar();
ref_data_offset+=offset;
baos.write(ref_data,ref_data_offset,copy_length);
ref_data_offset+=copy_length;
}
break;
default :
throw new IOException(""String_Node_Str"" + meth);
}
}
return baos.toByteArray();
}","public byte[] uncompress(ByteBuffer org,byte[] ref_data,Inflater inflater) throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int ref_data_offset=0;
  while (org.hasRemaining()) {
    int meth=org.get();
    int meth_major=meth >> 3;
switch (meth_major) {
case CHUNK_METHOD_DEFLATE:
{
        int rskip_spec=meth & 7;
        int comp_data_size=org.getChar();
        int rskip=spec_to_rskip(rskip_spec);
        ref_data_offset+=rskip;
        int dict_size=Math.min(WINDOW_SIZE,ref_data.length - ref_data_offset);
        Dictionary dict=new Dictionary(ref_data,ref_data_offset,dict_size);
        int before=baos.size();
        inflate(inflater,org,comp_data_size,baos,dict);
        int after=baos.size();
      }
    break;
case CHUNK_METHOD_PREFIX_COPY:
{
    if ((meth & 7) != 0)     throw new IOException(""String_Node_Str"" + meth);
    int comp_data_size=org.getChar();
    if (comp_data_size != 2)     throw new IOException(""String_Node_Str"" + comp_data_size);
    int copy_length=1 + org.getChar();
    baos.write(ref_data,ref_data_offset,copy_length);
    ref_data_offset+=copy_length;
  }
break;
case CHUNK_METHOD_OFFSET_COPY:
{
if ((meth & 7) != 0) throw new IOException(""String_Node_Str"" + meth);
int comp_data_size=org.getChar();
if (comp_data_size != 4) throw new IOException(""String_Node_Str"" + comp_data_size);
int offset=1 + org.getChar();
int copy_length=1 + org.getChar();
ref_data_offset+=offset;
baos.write(ref_data,ref_data_offset,copy_length);
ref_data_offset+=copy_length;
}
break;
default :
throw new IOException(""String_Node_Str"" + meth);
}
}
return baos.toByteArray();
}"
83931,"/** 
 * Computes an AppendSpecification for adding a version. Has the side effect of placing the cursor at the end.
 */
public AppendSpecification add(ByteBuffer new_version) throws IOException {
  int save_pos=new_version.position();
  set_cursor_at_end();
  ExtByteArrayOutputStream baos=new ExtByteArrayOutputStream();
  ByteBuffer last_version=get();
  if (last_version != null) {
    pack_compressed(last_version,toByteArray(new_version),baos);
  }
  pack_uncompressed(new_version,baos);
  new_version.position(save_pos);
  return new AppendSpecification(current_pos,baos.toByteArray());
}","/** 
 * Computes an AppendSpecification for adding a version. Has the side effect of placing the cursor at the end.
 */
public AppendSpecification add(ByteBuffer new_version) throws IOException {
  int save_pos=new_version.position();
  set_cursor_at_end();
  ExtByteArrayOutputStream baos=new ExtByteArrayOutputStream();
  ByteBuffer last_version=get();
  if (last_version != null) {
    pack_compressed(last_version,allToByteArray(new_version),baos);
  }
  pack_uncompressed(new_version,baos);
  new_version.position(save_pos);
  return new AppendSpecification(current_pos,baos.toByteArray());
}"
83932,"public byte[] uncompress(ByteBuffer org,byte[] ref_data,Inflater inflater){
  return DeltaZip.toByteArray(org);
}","public byte[] uncompress(ByteBuffer org,byte[] ref_data,Inflater inflater){
  return DeltaZip.remainingToByteArray(org);
}"
83933,"public static void varlen_encode(int value,OutputStream out) throws IOException {
  int shift=0;
  while ((value >>> shift) >= 0x80)   shift+=7;
  for (; shift >= 0; shift-=7) {
    byte b=(byte)(value >>> shift);
    if (shift > 0)     b|=0x80;
    out.write(b);
  }
}","public static void varlen_encode(int value,OutputStream out) throws IOException {
  int shift=0;
  while ((value >>> shift) >= 0x80)   shift+=7;
  for (; shift >= 0; shift-=7) {
    byte b=(byte)((value >>> shift) & 0x7F);
    if (shift > 0)     b|=0x80;
    out.write(b);
  }
}"
83934,"public static DeflateChunkOption create(ByteBuffer data,byte[] ref_data,int ref_data_offset,int rskip_spec,int dsize_spec,Deflater deflater){
  int remaining_data=data.remaining();
  int remaining_ref=ref_data.length - ref_data_offset;
  boolean all_is_visible=remaining_data <= WINDOW_SIZE && remaining_ref <= WINDOW_SIZE;
  if (all_is_visible && dsize_spec != -1)   return null;
  int uncomp_size=spec_to_dsize(dsize_spec,data.remaining());
  int rskip=Math.min(spec_to_rskip(rskip_spec),remaining_ref);
  ref_data_offset+=rskip;
  int dict_size=Math.min(WINDOW_SIZE,ref_data.length - ref_data_offset);
  Dictionary dict=new Dictionary(ref_data,ref_data_offset,dict_size);
  byte[] comp_data=DZUtil.deflate(deflater,data,uncomp_size,dict);
  return new DeflateChunkOption(rskip_spec,comp_data,uncomp_size);
}","public static DeflateChunkOption create(ByteBuffer data,byte[] ref_data,int ref_data_offset,int rskip_spec,int dsize_spec,Deflater deflater){
  int remaining_data=data.remaining();
  int remaining_ref=ref_data.length - ref_data_offset;
  boolean all_is_visible=remaining_data <= WINDOW_SIZE && remaining_ref <= WINDOW_SIZE;
  if (all_is_visible && dsize_spec != -1)   return null;
  int uncomp_size=spec_to_dsize(dsize_spec,data.remaining());
  if (uncomp_size > LIMIT_SO_DEFLATED_FITS_IN_64KB)   return null;
  int rskip=Math.min(spec_to_rskip(rskip_spec),remaining_ref);
  ref_data_offset+=rskip;
  int dict_size=Math.min(WINDOW_SIZE,ref_data.length - ref_data_offset);
  Dictionary dict=new Dictionary(ref_data,ref_data_offset,dict_size);
  byte[] comp_data=DZUtil.deflate(deflater,data,uncomp_size,dict);
  return new DeflateChunkOption(rskip_spec,comp_data,uncomp_size);
}"
83935,"public final void write(DataOutputStream dos) throws IOException {
  dos.write(chunkMethod());
  dos.writeChar(comp_size);
  writeCompData(dos);
}","public final void write(DataOutputStream dos) throws IOException {
  if (comp_size != (char)comp_size)   throw new RuntimeException(""String_Node_Str"");
  dos.write(chunkMethod());
  dos.writeChar(comp_size);
  writeCompData(dos);
}"
83936,"/** 
 * Tells whether there are older revisions. 
 */
public boolean hasPrevious(){
  return current_pos > 0;
}","/** 
 * Tells whether there are older revisions. 
 */
public boolean hasPrevious(){
  return current_pos > FILE_HEADER_LENGTH;
}"
83937,"public static int spec_to_dsize(int dsize_spec,int total_dsize){
  if (dsize_spec == -1)   return total_dsize;
 else   return (2 + dsize_spec) * (CHUNK_SIZE / 2);
}","public static int spec_to_dsize(int dsize_spec,int total_dsize){
  if (dsize_spec == -1)   return total_dsize;
 else   return Math.min((2 + dsize_spec) * (CHUNK_SIZE / 2),total_dsize);
}"
83938,"@Test public void somewhat_related_test() throws IOException {
  final Random rnd=new Random();
{
    ByteBuffer[] versions=new ByteBuffer[40];
    versions[0]=createRandomBinary(100000,rnd);
    for (int i=1; i < versions.length; i++) {
      byte[] tmp=DeltaZip.allToByteArray(versions[i - 1]);
      int nMutations=rnd.nextInt(20);
      for (int j=0; j < nMutations; j++)       tmp[rnd.nextInt(tmp.length)]=(byte)rnd.nextInt(256);
      versions[i]=ByteBuffer.wrap(tmp);
      int nRuns=rnd.nextInt(10);
      for (int j=0; j < nRuns; j++) {
        int start=0, end=tmp.length;
        int iters=rnd.nextInt(10);
        for (int k=0; k < iters; k++) {
          int mid=start + rnd.nextInt(end - start);
          if (rnd.nextBoolean())           start=mid;
 else           end=mid;
        }
        for (int k=start; k < end; k++)         tmp[k]=(byte)rnd.nextInt(256);
      }
      int nSwaps=rnd.nextInt(10);
      for (int j=0; j < nSwaps; j++) {
      }
      versions[i]=ByteBuffer.wrap(tmp);
    }
    series_test_with(versions);
  }
}","@Test public void somewhat_related_test() throws IOException {
  final Random rnd=new Random();
{
    ByteBuffer[] versions=new ByteBuffer[40];
    versions[0]=createRandomBinary(100000,rnd);
    for (int i=1; i < versions.length; i++) {
      byte[] tmp=DeltaZip.allToByteArray(versions[i - 1]);
      int nMutations=rnd.nextInt(20);
      for (int j=0; j < nMutations; j++)       tmp[rnd.nextInt(tmp.length)]=(byte)rnd.nextInt(256);
      versions[i]=ByteBuffer.wrap(tmp);
      int nRuns=rnd.nextInt(10);
      for (int j=0; j < nRuns; j++) {
        int start=0, end=tmp.length;
        int iters=rnd.nextInt(10);
        for (int k=0; k < iters && start < end; k++) {
          int mid=start + rnd.nextInt(end - start);
          if (rnd.nextBoolean())           start=mid;
 else           end=mid;
        }
        for (int k=start; k < end; k++)         tmp[k]=(byte)rnd.nextInt(256);
      }
      int nSwaps=rnd.nextInt(10);
      for (int j=0; j < nSwaps; j++) {
      }
      versions[i]=ByteBuffer.wrap(tmp);
    }
    series_test_with(versions);
  }
}"
83939,"public static Resource getResource(String path){
  if (path == null)   return null;
  logger.info(""String_Node_Str"" + path);
  return resourceTree.get(path);
}","public static Resource getResource(String path){
  if (path == null)   return null;
  logger.info(""String_Node_Str"" + path);
  return longestPrefixMatch(path);
}"
83940,"public void run(){
  logger.info(""String_Node_Str"");
  try {
    String path=ResourceUtils.cleanPath(request.getPath().getPath());
    logger.info(""String_Node_Str"" + path);
    Query query=request.getQuery();
    logger.info(""String_Node_Str"" + query.toString().length());
    Resource r=longestPrefixMatch(path);
    if (r == null) {
      Resource root=resourceTree.get(rootPath);
      root.handle(request,response);
    }
 else {
      logger.info(""String_Node_Str"" + r.getURI());
      r.handle(request,response);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    Resource.sendResponse(request,response,500,null,false,null);
  }
}","public void run(){
  logger.info(""String_Node_Str"");
  try {
    String path=ResourceUtils.cleanPath(request.getPath().getPath());
    logger.info(""String_Node_Str"" + path);
    Query query=request.getQuery();
    logger.info(""String_Node_Str"" + query.toString().length());
    Resource r=longestPrefixMatch(path);
    if (r == null) {
      logger.info(""String_Node_Str"");
      Resource root=resourceTree.get(rootPath);
      root.handle(request,response);
    }
 else {
      logger.info(""String_Node_Str"" + r.getURI());
      r.handle(request,response);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    Resource.sendResponse(request,response,500,null,false,null);
  }
}"
83941,"public void handle(Request request,Response response){
  logger.info(""String_Node_Str"");
  AsyncTask t=new AsyncTask(request,response);
  System.out.println(""String_Node_Str"");
  executor.execute(t);
}","public void handle(Request request,Response response){
  logger.info(""String_Node_Str"");
  AsyncTask t=new AsyncTask(request,response);
  System.out.println(""String_Node_Str"");
  executor.submit(t);
}"
83942,"private Resource longestPrefixMatch(String path){
  Resource matchRes=null;
  if (path != null) {
    StringTokenizer tokenizer=new StringTokenizer(path,""String_Node_Str"");
    Vector<String> tokens=new Vector<String>();
    Vector<String> paths=new Vector<String>();
    while (tokenizer.hasMoreTokens())     tokens.add(tokenizer.nextToken());
    StringBuffer s=new StringBuffer(""String_Node_Str"");
    paths.add(s.toString());
    for (int i=0; i < tokens.size(); i++) {
      if (i == 0)       paths.add(s.append(tokens.get(i)).toString());
 else       paths.add(s.append(""String_Node_Str"").append(tokens.get(i)).toString());
    }
    for (int j=paths.size() - 1; j >= 0; j--) {
      Resource thisResource=resourceTree.get(paths.get(j));
      if (thisResource != null) {
        matchRes=thisResource;
        break;
      }
    }
  }
  return matchRes;
}","private static Resource longestPrefixMatch(String path){
  Resource matchRes=null;
  if (path != null) {
    StringTokenizer tokenizer=new StringTokenizer(path,""String_Node_Str"");
    Vector<String> tokens=new Vector<String>();
    Vector<String> paths=new Vector<String>();
    while (tokenizer.hasMoreTokens())     tokens.add(tokenizer.nextToken());
    StringBuffer s=new StringBuffer(""String_Node_Str"");
    paths.add(s.toString());
    for (int i=0; i < tokens.size(); i++) {
      if (i == 0)       paths.add(s.append(tokens.get(i)).toString());
 else       paths.add(s.append(""String_Node_Str"").append(tokens.get(i)).toString());
    }
    for (int j=paths.size() - 1; j >= 0; j--) {
      Resource thisResource=resourceTree.get(paths.get(j));
      if (thisResource != null) {
        matchRes=thisResource;
        break;
      }
    }
  }
  return matchRes;
}"
83943,"public void get(Request m_request,Response m_response,String path,boolean internalCall,JSONObject internalResp){
  Query query=m_request.getQuery();
  if (query.containsKey(""String_Node_Str"")) {
    super.get(m_request,m_response,path,internalCall,internalResp);
    return;
  }
  String links_to=database.getSymlinkAlias(URI);
  links_to=cleanPath(links_to);
  logger.info(""String_Node_Str"" + links_to);
  if (links_to.startsWith(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + query.toString());
    String requestPath=path;
    String tail=query.toString();
    requestPath=cleanPath(requestPath);
    String translation=requestPath.replace(URI,links_to);
    logger.info(""String_Node_Str"" + requestPath + ""String_Node_Str""+ URI+ ""String_Node_Str""+ links_to);
    logger.info(""String_Node_Str"" + translation);
    Resource r=null;
    if (!database.isSymlink(links_to))     r=RESTServer.getResource(translation);
 else     r=RESTServer.getResource(links_to);
    if (r != null) {
      if (tail != null) {
        logger.fine(""String_Node_Str"" + translation + tail);
      }
 else {
        logger.fine(""String_Node_Str"" + translation);
      }
      r.get(m_request,m_response,path,internalCall,internalResp);
      return;
    }
  }
  sendResponse(m_request,m_response,404,null,internalCall,internalResp);
}","public void get(Request m_request,Response m_response,String path,boolean internalCall,JSONObject internalResp){
  Query query=m_request.getQuery();
  if (query.containsKey(""String_Node_Str"")) {
    super.get(m_request,m_response,path,internalCall,internalResp);
    return;
  }
  String links_to=database.getSymlinkAlias(URI);
  links_to=cleanPath(links_to);
  logger.info(""String_Node_Str"" + links_to);
  if (links_to.startsWith(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + query.toString());
    String requestPath=path;
    String tail=query.toString();
    requestPath=cleanPath(requestPath);
    logger.info(""String_Node_Str"" + requestPath + ""String_Node_Str""+ URI+ ""String_Node_Str""+ links_to);
    String translation=requestPath.replace(URI,links_to);
    logger.info(""String_Node_Str"" + translation);
    Resource r=RESTServer.getResource(translation);
    String cp1=null;
    String cp2=null;
    if (r != null) {
      cp1=cleanPath(r.getURI());
      cp2=cleanPath(translation);
    }
    if (r != null && r.TYPE != ResourceUtils.SYMLINK_RSRC && !cp1.equals(cp2)) {
      logger.info(cp2 + ""String_Node_Str"" + cp1+ ""String_Node_Str""+ links_to);
      sendResponse(m_request,m_response,404,null,internalCall,internalResp);
      return;
    }
 else     if (r != null) {
      logger.info(translation + ""String_Node_Str"" + r.getURI()+ ""String_Node_Str""+ links_to);
      r.get(m_request,m_response,translation,internalCall,internalResp);
      return;
    }
  }
  sendResponse(m_request,m_response,404,null,internalCall,internalResp);
}"
83944,"public static void main(String[] args){
  RESTServer restServer=null;
  IS4DataStore is4DataStore=new IS4DataStore();
  DBAbstractionLayer dbLayer=new DBAbstractionLayer();
  registrar=Registrar.registrarInstance();
  subscriptionManager=SubMngr.getSubMngrInstance();
  if (args.length == 2) {
    Integer port=new Integer(args[1]);
    thisHost=args[0];
    thisPort=port.intValue();
    IS4DataStore.logger.info(""String_Node_Str"");
    restServer=new RESTServer(args[0],port.intValue());
  }
 else {
    IS4DataStore.logger.info(""String_Node_Str"");
    restServer=new RESTServer();
  }
  restServer.start();
}","public static void main(String[] args){
  RESTServer restServer=null;
  IS4DataStore is4DataStore=new IS4DataStore();
  DBAbstractionLayer dbLayer=new DBAbstractionLayer();
  registrar=Registrar.registrarInstance();
  subscriptionManager=SubMngr.getSubMngrInstance();
  if (args.length == 2) {
    Integer port=new Integer(args[1]);
    thisHost=args[0];
    thisPort=port.intValue();
    IS4DataStore.logger.info(""String_Node_Str"");
    restServer=new RESTServer(args[0],port.intValue());
  }
 else {
    IS4DataStore.logger.info(""String_Node_Str"");
    restServer=new RESTServer();
  }
  restServer.executor=Executors.newCachedThreadPool();
  restServer.start();
}"
83945,"public void run(){
  ObjectInputStream incoming=null;
  ObjectOutputStream outgoing=null;
  try {
    boolean keepRunning=true;
    while (keepRunning) {
      logger.info(""String_Node_Str"");
      Socket s=server.accept();
      incoming=new ObjectInputStream(s.getInputStream());
      outgoing=new ObjectOutputStream(s.getOutputStream());
      RouterCommand cmd=(RouterCommand)incoming.readObject();
      RouterCommand cmdrep=null;
switch (cmd.type) {
case PUSH:
        if (cmd.sourcepath != null && cmd.data != null && cmd.units != null)         sendDataToParents(cmd.sourcepath,cmd.data,cmd.units);
      cmdrep=new RouterCommand(RouterCommand.CommandType.PUSH_ACK);
    outgoing.writeObject(cmdrep);
  outgoing.flush();
break;
case PULL:
logger.info(""String_Node_Str"");
String reply=null;
if (cmd.lowts > 0 && cmd.hights > 0 && cmd.sourcepath != null && cmd.units != null) reply=pullFromNode(cmd.sourcepath,cmd.aggType,cmd.units,cmd.lowts,cmd.hights);
 else reply=pullFromNode(cmd.sourcepath,cmd.aggType,cmd.units,cmd.data);
logger.info(""String_Node_Str"" + reply);
cmdrep=new RouterCommand(RouterCommand.CommandType.PULL_ACK);
cmdrep.data=reply;
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case ADD_NODE:
logger.info(""String_Node_Str"");
if (cmd.sourcepath != null) addNodeEvent(cmd.sourcepath);
cmdrep=new RouterCommand(RouterCommand.CommandType.ADD_NODE_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case REMOVE_NODE:
if (cmd.sourcepath != null) removeNodeEvent(cmd.sourcepath);
cmdrep=new RouterCommand(RouterCommand.CommandType.REMOVE_NODE_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case ADD_LINK:
logger.info(""String_Node_Str"");
if (cmd.sourcepath != null && cmd.destpath != null) createLink(cmd.sourcepath,cmd.destpath);
cmdrep=new RouterCommand(RouterCommand.CommandType.ADD_LINK_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case REMOVE_LINK:
if (cmd.sourcepath != null && cmd.destpath != null) removeLink(cmd.sourcepath,cmd.destpath);
cmdrep=new RouterCommand(RouterCommand.CommandType.REMOVE_LINK_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case CREATE_AGG_PNT:
if (cmd.sourcepath != null && cmd.units != null) {
setUnitAndTypeAtPath(cmd.sourcepath,cmd.units,ProcType.AGGREGATE,cmd.state);
cmdrep=new RouterCommand(RouterCommand.CommandType.CREATE_AGG_PNT_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
}
break;
case STOP_ROUTER:
keepRunning=false;
break;
}
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,""String_Node_Str"",e);
System.exit(1);
}
 finally {
try {
incoming.close();
}
 catch (Exception i) {
}
try {
outgoing.close();
}
 catch (Exception o) {
}
}
return;
}","public void run(){
  ObjectInputStream incoming=null;
  ObjectOutputStream outgoing=null;
  Socket s=null;
  try {
    boolean keepRunning=true;
    while (keepRunning) {
      logger.info(""String_Node_Str"");
      s=server.accept();
      incoming=new ObjectInputStream(s.getInputStream());
      outgoing=new ObjectOutputStream(s.getOutputStream());
      RouterCommand cmd=(RouterCommand)incoming.readObject();
      RouterCommand cmdrep=null;
switch (cmd.type) {
case PUSH:
        if (cmd.sourcepath != null && cmd.data != null && cmd.units != null)         sendDataToParents(cmd.sourcepath,cmd.data,cmd.units);
      cmdrep=new RouterCommand(RouterCommand.CommandType.PUSH_ACK);
    outgoing.writeObject(cmdrep);
  outgoing.flush();
break;
case PULL:
logger.info(""String_Node_Str"");
String reply=null;
if (cmd.lowts > 0 && cmd.hights > 0 && cmd.sourcepath != null && cmd.units != null) reply=pullFromNode(cmd.sourcepath,cmd.aggType,cmd.units,cmd.lowts,cmd.hights);
 else reply=pullFromNode(cmd.sourcepath,cmd.aggType,cmd.units,cmd.data);
logger.info(""String_Node_Str"" + reply);
cmdrep=new RouterCommand(RouterCommand.CommandType.PULL_ACK);
cmdrep.data=reply;
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case ADD_NODE:
logger.info(""String_Node_Str"");
if (cmd.sourcepath != null) addNodeEvent(cmd.sourcepath);
cmdrep=new RouterCommand(RouterCommand.CommandType.ADD_NODE_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case REMOVE_NODE:
if (cmd.sourcepath != null) removeNodeEvent(cmd.sourcepath);
cmdrep=new RouterCommand(RouterCommand.CommandType.REMOVE_NODE_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case ADD_LINK:
logger.info(""String_Node_Str"");
if (cmd.sourcepath != null && cmd.destpath != null) createLink(cmd.sourcepath,cmd.destpath);
cmdrep=new RouterCommand(RouterCommand.CommandType.ADD_LINK_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case REMOVE_LINK:
if (cmd.sourcepath != null && cmd.destpath != null) removeLink(cmd.sourcepath,cmd.destpath);
cmdrep=new RouterCommand(RouterCommand.CommandType.REMOVE_LINK_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case CREATE_AGG_PNT:
if (cmd.sourcepath != null && cmd.units != null) {
setUnitAndTypeAtPath(cmd.sourcepath,cmd.units,ProcType.AGGREGATE,cmd.state);
cmdrep=new RouterCommand(RouterCommand.CommandType.CREATE_AGG_PNT_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
}
break;
case STOP_ROUTER:
keepRunning=false;
break;
}
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,""String_Node_Str"",e);
System.exit(1);
}
 finally {
try {
incoming.close();
}
 catch (Exception i) {
logger.log(Level.WARNING,""String_Node_Str"",i);
}
try {
outgoing.close();
}
 catch (Exception o) {
logger.log(Level.WARNING,""String_Node_Str"",o);
}
try {
s.close();
}
 catch (Exception se) {
logger.log(Level.WARNING,""String_Node_Str"",se);
}
}
return;
}"
83946,"public void run(){
  try {
    logger.info(""String_Node_Str"");
    String path=ResourceUtils.cleanPath(request.getPath().getPath());
    logger.info(""String_Node_Str"" + path);
    Query query=request.getQuery();
    logger.info(""String_Node_Str"" + query.toString().length());
    Resource r=resourceTree.get(path);
    if (path.contains(""String_Node_Str"")) {
      Resource root=resourceTree.get(rootPath);
      root.handle(request,response);
    }
 else     if (r != null) {
      r.handle(request,response);
    }
 else {
      Resource.sendResponse(request,response,404,null,false,null);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    Resource.sendResponse(request,response,404,null,false,null);
  }
}","public void run(){
  logger.info(""String_Node_Str"");
  try {
    String path=ResourceUtils.cleanPath(request.getPath().getPath());
    logger.info(""String_Node_Str"" + path);
    Query query=request.getQuery();
    logger.info(""String_Node_Str"" + query.toString().length());
    Resource r=resourceTree.get(path);
    if (path.contains(""String_Node_Str"")) {
      Resource root=resourceTree.get(rootPath);
      root.handle(request,response);
    }
 else     if (r != null) {
      logger.info(""String_Node_Str"" + r.getURI());
      r.handle(request,response);
    }
 else {
      Resource.sendResponse(request,response,404,null,false,null);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    Resource.sendResponse(request,response,500,null,false,null);
  }
}"
83947,"public static void addResource(Resource resource){
  if (resource != null && !baseResources.contains(resource.getURI()) && !resource.getURI().equals(""String_Node_Str"")) {
    resourceTree.put(resource.getURI(),resource);
    logger.info(""String_Node_Str"" + resource.getURI().toString());
    String otherUrl=null;
    if (resource.getURI().endsWith(""String_Node_Str"") && !resource.getURI().equals(""String_Node_Str"")) {
      otherUrl=resource.getURI().substring(0,resource.getURI().length() - 1);
      resourceTree.put(otherUrl,resource);
      logger.info(""String_Node_Str"" + otherUrl);
    }
 else     if (!resource.getURI().endsWith(""String_Node_Str"")) {
      otherUrl=resource.getURI() + ""String_Node_Str"";
      resourceTree.put(otherUrl,resource);
      logger.info(""String_Node_Str"" + otherUrl);
    }
  }
}","public static void addResource(Resource resource){
  if (resource != null && !baseResources.containsKey(resource.getURI()) && !resource.getURI().equals(""String_Node_Str"")) {
    resourceTree.put(resource.getURI(),resource);
    logger.info(""String_Node_Str"" + resource.getURI().toString());
    String otherUrl=null;
    if (resource.getURI().endsWith(""String_Node_Str"") && !resource.getURI().equals(""String_Node_Str"")) {
      otherUrl=resource.getURI().substring(0,resource.getURI().length() - 1);
      resourceTree.put(otherUrl,resource);
      logger.info(""String_Node_Str"" + otherUrl);
    }
 else     if (!resource.getURI().endsWith(""String_Node_Str"")) {
      otherUrl=resource.getURI() + ""String_Node_Str"";
      resourceTree.put(otherUrl,resource);
      logger.info(""String_Node_Str"" + otherUrl);
    }
  }
}"
83948,"public void start(){
  try {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    logger.config(""String_Node_Str"" + bindAddress + ""String_Node_Str""+ port);
    DBAbstractionLayer dbAbstractionLayer=new DBAbstractionLayer();
    RootHandler handler=new RootHandler(rootPath);
    RESTServer.addResource(handler);
    baseResources.put(rootPath,""String_Node_Str"");
    InfoBusResource ibus=InfoBusResource.getInstance(rootPath + ""String_Node_Str"");
    RESTServer.addResource(ibus);
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    ResyncSmapStreams resyncResource=new ResyncSmapStreams(rootPath + ""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    RESTServer.addResource(resyncResource);
    String pubPath=rootPath + ""String_Node_Str"";
    PubHandler pubHandler=new PubHandler(pubPath);
    RESTServer.addResource(pubHandler);
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    SubHandler subHandler=new SubHandler(rootPath + ""String_Node_Str"");
    RESTServer.addResource(subHandler);
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    StreamInfoHandler streamInfoHandler=new StreamInfoHandler(rootPath + ""String_Node_Str"");
    RESTServer.addResource(streamInfoHandler);
    TimeResource timeResource=new TimeResource(rootPath + ""String_Node_Str"");
    RESTServer.addResource(timeResource);
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    SubInfoHandler subInfoHandler=new SubInfoHandler(rootPath + ""String_Node_Str"");
    RESTServer.addResource(subInfoHandler);
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    DemuxResource demuxResource=new DemuxResource();
    RESTServer.addResource(demuxResource);
    DemuxResource2 demuxResource2=new DemuxResource2();
    RESTServer.addResource(demuxResource2);
    ModelManagerResource mmr=new ModelManagerResource();
    baseResources.put(mmr.getURI(),""String_Node_Str"");
    RESTServer.addResource(mmr);
    ProcessManagerResource pmr=new ProcessManagerResource();
    baseResources.put(pmr.getURI(),""String_Node_Str"");
    RESTServer.addResource(pmr);
    Resource adminResource=new Resource(rootPath + ""String_Node_Str"");
    Resource tsResource=new Resource(adminResource.getURI() + ""String_Node_Str"");
    Resource propsResource=new Resource(adminResource.getURI() + ""String_Node_Str"");
    Resource dataAdminResource=new AdminDataReposIndexesResource();
    Resource propsAdminResource=new AdminPropsReposIndexesResource();
    Resource allNodesResource=new AllNodesResource(rootPath + ""String_Node_Str"");
    baseResources.put(adminResource.getURI(),""String_Node_Str"");
    baseResources.put(tsResource.getURI(),""String_Node_Str"");
    baseResources.put(propsResource.getURI(),""String_Node_Str"");
    baseResources.put(dataAdminResource.getURI(),""String_Node_Str"");
    baseResources.put(propsAdminResource.getURI(),""String_Node_Str"");
    baseResources.put(allNodesResource.getURI(),""String_Node_Str"");
    RESTServer.addResource(adminResource);
    RESTServer.addResource(tsResource);
    RESTServer.addResource(propsResource);
    RESTServer.addResource(dataAdminResource);
    RESTServer.addResource(propsAdminResource);
    RESTServer.addResource(allNodesResource);
    loadResources();
    pmr.loadPrevState();
    router=new Router();
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    metadataGraph=MetadataGraph.getInstance();
    Resource.setMetadataGraph(metadataGraph);
    Thread routerThread=new Thread(router);
    logger.info(""String_Node_Str"");
    routerThread.start();
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    metadataGraph.populateInternalGraph(tellRouter);
    logger.info(""String_Node_Str"");
    ShutdownProc shutdown=new ShutdownProc(this);
    Runtime.getRuntime().addShutdownHook(shutdown);
    logger.info(""String_Node_Str"" + port);
    connection=new SocketConnection((Container)this);
    SocketAddress address=new InetSocketAddress(bindAddress,port);
    connection.connect(address);
    logger.info(""String_Node_Str"" + bindAddress + ""String_Node_Str""+ port);
    System.setProperty(KEYSTORE_PROPERTY,""String_Node_Str"");
    System.setProperty(KEYSTORE_PASSWORD_PROPERTY,""String_Node_Str"");
    SocketAddress address2=new InetSocketAddress(bindAddress,port + 1);
    SSLContext sslContext=createSSLContext();
    connectionHttps=new SocketConnection((Container)this);
    connectionHttps.connect(address2,sslContext);
    logger.info(""String_Node_Str"" + bindAddress + ""String_Node_Str""+ (port + 1));
    System.out.println(""String_Node_Str"" + (port + 1));
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}","public void start(){
  try {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    logger.config(""String_Node_Str"" + bindAddress + ""String_Node_Str""+ port);
    DBAbstractionLayer dbAbstractionLayer=new DBAbstractionLayer();
    RootHandler roothandler=new RootHandler(rootPath);
    InfoBusResource ibus=InfoBusResource.getInstance(rootPath + ""String_Node_Str"");
    ResyncSmapStreams resyncResource=new ResyncSmapStreams(rootPath + ""String_Node_Str"");
    String pubPath=rootPath + ""String_Node_Str"";
    PubHandler pubHandler=new PubHandler(pubPath);
    SubHandler subHandler=new SubHandler(rootPath + ""String_Node_Str"");
    StreamInfoHandler streamInfoHandler=new StreamInfoHandler(rootPath + ""String_Node_Str"");
    TimeResource timeResource=new TimeResource(rootPath + ""String_Node_Str"");
    SubInfoHandler subInfoHandler=new SubInfoHandler(rootPath + ""String_Node_Str"");
    DemuxResource demuxResource=new DemuxResource();
    DemuxResource2 demuxResource2=new DemuxResource2();
    ModelManagerResource mmr=new ModelManagerResource();
    ProcessManagerResource pmr=new ProcessManagerResource();
    Resource adminResource=new Resource(rootPath + ""String_Node_Str"");
    Resource tsResource=new Resource(adminResource.getURI() + ""String_Node_Str"");
    Resource propsResource=new Resource(adminResource.getURI() + ""String_Node_Str"");
    Resource dataAdminResource=new AdminDataReposIndexesResource();
    Resource propsAdminResource=new AdminPropsReposIndexesResource();
    Resource allNodesResource=new AllNodesResource(rootPath + ""String_Node_Str"");
    RESTServer.addResource(mmr);
    RESTServer.addResource(pubHandler);
    RESTServer.addResource(resyncResource);
    RESTServer.addResource(streamInfoHandler);
    RESTServer.addResource(subHandler);
    RESTServer.addResource(timeResource);
    RESTServer.addResource(ibus);
    RESTServer.addResource(subInfoHandler);
    RESTServer.addResource(demuxResource);
    RESTServer.addResource(demuxResource2);
    RESTServer.addResource(pmr);
    RESTServer.addResource(adminResource);
    RESTServer.addResource(tsResource);
    RESTServer.addResource(propsResource);
    RESTServer.addResource(dataAdminResource);
    RESTServer.addResource(propsAdminResource);
    RESTServer.addResource(allNodesResource);
    RESTServer.addResource(roothandler);
    String timepath=timeResource.getURI();
    String timepath2=timeResource.getURI().substring(0,timeResource.getURI().length() - 1);
    baseResources.put(timeResource.getURI(),""String_Node_Str"");
    baseResources.put(timeResource.getURI().substring(0,timeResource.getURI().length() - 1),""String_Node_Str"");
    logger.info(""String_Node_Str"" + timeResource.getClass().getName() + ""String_Node_Str""+ timepath+ ""String_Node_Str""+ timepath2);
    baseResources.put(roothandler.getURI(),""String_Node_Str"");
    baseResources.put(roothandler.getURI().substring(0,roothandler.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(demuxResource.getURI(),""String_Node_Str"");
    baseResources.put(demuxResource.getURI().substring(0,demuxResource.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(demuxResource2.getURI(),""String_Node_Str"");
    baseResources.put(demuxResource2.getURI().substring(0,demuxResource2.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(subHandler.getURI(),""String_Node_Str"");
    baseResources.put(subHandler.getURI().substring(0,subHandler.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(resyncResource.getURI(),""String_Node_Str"");
    baseResources.put(resyncResource.getURI().substring(0,resyncResource.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(streamInfoHandler.getURI(),""String_Node_Str"");
    baseResources.put(streamInfoHandler.getURI().substring(0,streamInfoHandler.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(pubHandler.getURI(),""String_Node_Str"");
    baseResources.put(pubHandler.getURI().substring(0,pubHandler.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(subInfoHandler.getURI(),""String_Node_Str"");
    baseResources.put(subInfoHandler.getURI().substring(0,subInfoHandler.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(mmr.getURI(),""String_Node_Str"");
    baseResources.put(mmr.getURI().substring(0,mmr.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(pmr.getURI(),""String_Node_Str"");
    baseResources.put(pmr.getURI().substring(0,pmr.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(rootPath,""String_Node_Str"");
    baseResources.put(adminResource.getURI(),""String_Node_Str"");
    baseResources.put(adminResource.getURI().substring(0,adminResource.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(tsResource.getURI(),""String_Node_Str"");
    baseResources.put(tsResource.getURI().substring(0,tsResource.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(propsResource.getURI(),""String_Node_Str"");
    baseResources.put(propsResource.getURI().substring(0,propsResource.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(dataAdminResource.getURI(),""String_Node_Str"");
    baseResources.put(dataAdminResource.getURI().substring(0,dataAdminResource.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(propsAdminResource.getURI(),""String_Node_Str"");
    baseResources.put(propsAdminResource.getURI().substring(0,propsAdminResource.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(allNodesResource.getURI(),""String_Node_Str"");
    baseResources.put(allNodesResource.getURI().substring(0,allNodesResource.getURI().length() - 1),""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    baseResources.put(rootPath + ""String_Node_Str"",""String_Node_Str"");
    loadResources();
    pmr.loadPrevState();
    router=new Router();
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    metadataGraph=MetadataGraph.getInstance();
    Resource.setMetadataGraph(metadataGraph);
    Thread routerThread=new Thread(router);
    logger.info(""String_Node_Str"");
    routerThread.start();
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    metadataGraph.populateInternalGraph(tellRouter);
    logger.info(""String_Node_Str"");
    ShutdownProc shutdown=new ShutdownProc(this);
    Runtime.getRuntime().addShutdownHook(shutdown);
    logger.info(""String_Node_Str"" + port);
    connection=new SocketConnection((Container)this);
    SocketAddress address=new InetSocketAddress(bindAddress,port);
    connection.connect(address);
    logger.info(""String_Node_Str"" + bindAddress + ""String_Node_Str""+ port);
    System.setProperty(KEYSTORE_PROPERTY,""String_Node_Str"");
    System.setProperty(KEYSTORE_PASSWORD_PROPERTY,""String_Node_Str"");
    SocketAddress address2=new InetSocketAddress(bindAddress,port + 1);
    SSLContext sslContext=createSSLContext();
    connectionHttps=new SocketConnection((Container)this);
    connectionHttps.connect(address2,sslContext);
    logger.info(""String_Node_Str"" + bindAddress + ""String_Node_Str""+ (port + 1));
    System.out.println(""String_Node_Str"" + (port + 1));
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}"
83949,"public AsyncTask(Request req,Response resp){
  request=req;
  response=resp;
}","public AsyncTask(Request req,Response resp){
  request=req;
  response=resp;
  logger.info(""String_Node_Str"" + request.getPath().getPath());
}"
83950,"public void handle(Request request,Response response){
  logger.info(""String_Node_Str"");
  routeToResource(request,response);
}","public void handle(Request request,Response response){
  logger.info(""String_Node_Str"");
  AsyncTask t=new AsyncTask(request,response);
  System.out.println(""String_Node_Str"");
  executor.execute(t);
}"
83951,"public void query(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  JSONObject resp=new JSONObject();
  JSONArray errors=new JSONArray();
  resp.put(""String_Node_Str"",URI);
  try {
    JSONObject tsQueryObj2=new JSONObject();
    if (data != null && !data.equals(""String_Node_Str"")) {
      JSONObject dataJsonObj=(JSONObject)JSONSerializer.toJSON(data);
      JSONObject dataTsQuery=dataJsonObj.optJSONObject(""String_Node_Str"");
      tsQueryObj2.putAll(dataTsQuery);
    }
    Iterator keys=exchangeJSON.keys();
    Vector<String> attributes=new Vector<String>();
    Vector<String> values=new Vector<String>();
    while (keys.hasNext()) {
      String thisKey=(String)keys.next();
      logger.fine(""String_Node_Str"" + thisKey);
      if (thisKey.startsWith(""String_Node_Str"")) {
        String str=""String_Node_Str"";
        String queryKey=thisKey.substring(thisKey.indexOf(str) + str.length(),thisKey.length());
        String queryValue=exchangeJSON.optString(thisKey);
        logger.info(""String_Node_Str"" + queryValue);
        JSONObject conditions=Resource.genJSONClause(queryValue);
        logger.info(""String_Node_Str"" + conditions);
        if (conditions != null) {
          if (queryKey.equalsIgnoreCase(""String_Node_Str""))           tsQueryObj2.put(""String_Node_Str"",conditions);
        }
 else {
          if (isNumber(queryValue)) {
            long val=Long.parseLong(queryValue);
            if (queryKey.equalsIgnoreCase(""String_Node_Str""))             tsQueryObj2.put(""String_Node_Str"",val);
          }
 else {
            if (queryKey.equalsIgnoreCase(""String_Node_Str""))             tsQueryObj2.put(""String_Node_Str"",queryValue);
          }
        }
      }
 else       if (thisKey.startsWith(""String_Node_Str"")) {
        String queryValue=exchangeJSON.optString(thisKey);
        JSONObject conditions=Resource.genJSONClause(queryValue);
        if (conditions != null) {
          tsQueryObj2.putAll(conditions);
        }
 else {
          if (isNumber(queryValue)) {
            long val=Long.parseLong(queryValue);
            if (thisKey.equalsIgnoreCase(""String_Node_Str""))             tsQueryObj2.put(""String_Node_Str"",queryValue);
 else             tsQueryObj2.put(thisKey,val);
          }
 else {
            logger.warning(""String_Node_Str"");
          }
        }
      }
    }
    logger.fine(""String_Node_Str"" + tsQueryObj2.toString());
    if (!tsQueryObj2.toString().equals(""String_Node_Str"")) {
      JSONArray mqResp2=queryTimeseriesRepos2(tsQueryObj2);
      logger.fine(""String_Node_Str"" + mqResp2.toString());
      resp.put(""String_Node_Str"",mqResp2);
    }
 else {
      errors.add(""String_Node_Str"");
      logger.warning(errors.toString());
      resp.put(""String_Node_Str"",errors);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    if (e instanceof JSONException) {
      errors.add(""String_Node_Str"");
      resp.put(errors,errors);
      sendResponse(exchange,200,resp.toString(),internalCall,internalResp);
      return;
    }
  }
  JSONObject propsQueryResultsBuffer=new JSONObject();
  super.query(exchange,data,true,propsQueryResultsBuffer);
  resp.put(""String_Node_Str"",propsQueryResultsBuffer);
  sendResponse(exchange,200,resp.toString(),internalCall,internalResp);
  exchangeJSON.clear();
}","public void query(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  JSONObject resp=new JSONObject();
  JSONArray errors=new JSONArray();
  resp.put(""String_Node_Str"",URI);
  try {
    JSONObject tsQueryObj2=new JSONObject();
    if (data != null && !data.equals(""String_Node_Str"")) {
      JSONObject dataJsonObj=(JSONObject)JSONSerializer.toJSON(data);
      JSONObject dataTsQuery=dataJsonObj.optJSONObject(""String_Node_Str"");
      tsQueryObj2.putAll(dataTsQuery);
    }
    logger.fine(""String_Node_Str"" + exchangeJSON.toString());
    Iterator keys=exchangeJSON.keys();
    Vector<String> attributes=new Vector<String>();
    Vector<String> values=new Vector<String>();
    while (keys.hasNext()) {
      String thisKey=(String)keys.next();
      logger.fine(""String_Node_Str"" + thisKey);
      if (thisKey.startsWith(""String_Node_Str"")) {
        String str=""String_Node_Str"";
        String queryKey=thisKey.substring(thisKey.indexOf(str) + str.length(),thisKey.length());
        String queryValue=exchangeJSON.optString(thisKey);
        logger.info(""String_Node_Str"" + queryValue);
        JSONObject conditions=Resource.genJSONClause(queryValue);
        logger.info(""String_Node_Str"" + conditions);
        if (conditions != null) {
          if (queryKey.equalsIgnoreCase(""String_Node_Str""))           tsQueryObj2.put(""String_Node_Str"",conditions);
        }
 else {
          if (isNumber(queryValue)) {
            long val=Long.parseLong(queryValue);
            if (queryKey.equalsIgnoreCase(""String_Node_Str""))             tsQueryObj2.put(""String_Node_Str"",val);
          }
 else {
            if (queryKey.equalsIgnoreCase(""String_Node_Str""))             tsQueryObj2.put(""String_Node_Str"",queryValue);
          }
        }
      }
 else       if (thisKey.startsWith(""String_Node_Str"")) {
        String queryValue=exchangeJSON.optString(thisKey);
        JSONObject conditions=Resource.genJSONClause(queryValue);
        if (conditions != null) {
          tsQueryObj2.putAll(conditions);
        }
 else {
          if (isNumber(queryValue)) {
            long val=Long.parseLong(queryValue);
            if (thisKey.equalsIgnoreCase(""String_Node_Str""))             tsQueryObj2.put(""String_Node_Str"",queryValue);
 else             tsQueryObj2.put(thisKey,val);
          }
 else {
            logger.warning(""String_Node_Str"");
          }
        }
      }
    }
    logger.fine(""String_Node_Str"" + tsQueryObj2.toString());
    if (!tsQueryObj2.toString().equals(""String_Node_Str"")) {
      JSONArray mqResp2=queryTimeseriesRepos2(tsQueryObj2);
      logger.fine(""String_Node_Str"" + mqResp2.toString());
      resp.put(""String_Node_Str"",mqResp2);
    }
 else {
      errors.add(""String_Node_Str"");
      logger.warning(errors.toString());
      resp.put(""String_Node_Str"",errors);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    if (e instanceof JSONException) {
      errors.add(""String_Node_Str"");
      resp.put(errors,errors);
      sendResponse(exchange,200,resp.toString(),internalCall,internalResp);
      return;
    }
  }
  JSONObject propsQueryResultsBuffer=new JSONObject();
  super.query(exchange,data,true,propsQueryResultsBuffer);
  resp.put(""String_Node_Str"",propsQueryResultsBuffer);
  sendResponse(exchange,200,resp.toString(),internalCall,internalResp);
  exchangeJSON.clear();
}"
83952,"public void sendResponse(HttpExchange exchange,int errorCode,String response,boolean internalCall,JSONObject internalResp){
  OutputStream responseBody=null;
  GZIPOutputStream gzipos=null;
  try {
    if (internalCall) {
      copyResponse(response,internalResp);
      return;
    }
    logger.info(""String_Node_Str"" + response);
    JSONObject header=exchangeJSON.getJSONObject(""String_Node_Str"");
    boolean gzipResp=header.containsKey(""String_Node_Str"") && header.getJSONArray(""String_Node_Str"").getString(0).contains(""String_Node_Str"");
    Headers responseHeaders=exchange.getResponseHeaders();
    responseHeaders.set(""String_Node_Str"",""String_Node_Str"");
    responseHeaders.set(""String_Node_Str"",""String_Node_Str"");
    if (gzipResp)     responseHeaders.set(""String_Node_Str"",""String_Node_Str"");
    exchange.sendResponseHeaders(errorCode,0);
    responseBody=exchange.getResponseBody();
    if (response != null) {
      if (gzipResp) {
        gzipos=new GZIPOutputStream(responseBody);
        gzipos.write(response.getBytes());
        gzipos.close();
      }
 else {
        responseBody.write(response.getBytes());
        responseBody.close();
      }
    }
    sfsStats.docSent(response);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
 finally {
    if (!internalCall) {
      try {
        if (responseBody != null) {
          responseBody.close();
          logger.info(""String_Node_Str"");
        }
        if (exchange != null) {
          exchange.getResponseBody().close();
          logger.info(""String_Node_Str"" + exchange.getLocalAddress().getHostName() + ""String_Node_Str""+ exchange.getLocalAddress().getPort()+ ""String_Node_Str""+ exchange.getRemoteAddress());
          exchange.close();
        }
        exchange=null;
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
  }
}","public void sendResponse(HttpExchange exchange,int errorCode,String response,boolean internalCall,JSONObject internalResp){
  OutputStream responseBody=null;
  GZIPOutputStream gzipos=null;
  try {
    if (internalCall) {
      copyResponse(response,internalResp);
      return;
    }
    logger.info(""String_Node_Str"" + response);
    logger.info(exchangeJSON.toString());
    JSONObject header=exchangeJSON.getJSONObject(""String_Node_Str"");
    boolean gzipResp=header.containsKey(""String_Node_Str"") && header.getJSONArray(""String_Node_Str"").getString(0).contains(""String_Node_Str"");
    Headers responseHeaders=exchange.getResponseHeaders();
    responseHeaders.set(""String_Node_Str"",""String_Node_Str"");
    responseHeaders.set(""String_Node_Str"",""String_Node_Str"");
    if (gzipResp)     responseHeaders.set(""String_Node_Str"",""String_Node_Str"");
    exchange.sendResponseHeaders(errorCode,0);
    responseBody=exchange.getResponseBody();
    if (response != null) {
      if (gzipResp) {
        gzipos=new GZIPOutputStream(responseBody);
        gzipos.write(response.getBytes());
        gzipos.close();
      }
 else {
        responseBody.write(response.getBytes());
        responseBody.close();
      }
    }
    sfsStats.docSent(response);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
 finally {
    if (!internalCall) {
      try {
        if (responseBody != null) {
          responseBody.close();
          logger.info(""String_Node_Str"");
        }
        if (exchange != null) {
          exchange.getResponseBody().close();
          logger.info(""String_Node_Str"" + exchange.getLocalAddress().getHostName() + ""String_Node_Str""+ exchange.getLocalAddress().getPort()+ ""String_Node_Str""+ exchange.getRemoteAddress());
          exchange.close();
        }
        exchange=null;
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
    exchangeJSON.clear();
  }
}"
83953,"public void post(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  logger.info(""String_Node_Str"" + exchange.getRequestURI().toString());
  try {
    if (exchangeJSON.containsKey(""String_Node_Str"") && exchangeJSON.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") && exchange.getRequestURI().toString().contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      query(exchange,data,internalCall,internalResp);
    }
 else     if (exchangeJSON.containsKey(""String_Node_Str"") && exchangeJSON.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      query(exchange,data,internalCall,internalResp);
    }
 else     if (exchangeJSON.containsKey(""String_Node_Str"") && exchangeJSON.containsKey(""String_Node_Str"")) {
      String setAggStr=exchangeJSON.getString(""String_Node_Str"");
      String unitsStr=exchangeJSON.getString(""String_Node_Str"");
      boolean setAggBool=false;
      if (setAggStr.equalsIgnoreCase(""String_Node_Str""))       setAggBool=true;
      if (setAggBool && !unitsStr.equals(""String_Node_Str"")) {
        metadataGraph.setAggPoint(URI,unitsStr,true);
        logger.info(""String_Node_Str"" + URI + ""String_Node_Str""+ setAggStr+ ""String_Node_Str""+ unitsStr+ ""String_Node_Str"");
      }
      JSONObject currentProps=database.rrGetProperties(URI);
      boolean containsAggBufs=currentProps.containsKey(""String_Node_Str"");
      if (setAggBool && containsAggBufs) {
        JSONArray aggBufsArray=currentProps.getJSONArray(""String_Node_Str"");
        if (!aggBufsArray.contains(unitsStr)) {
          aggBufsArray.add(unitsStr);
          currentProps.put(""String_Node_Str"",aggBufsArray);
          database.rrPutProperties(URI,currentProps);
          updateProperties(currentProps);
        }
      }
 else       if (!setAggBool && containsAggBufs) {
        JSONArray aggBufsArray=currentProps.getJSONArray(""String_Node_Str"");
        if (aggBufsArray.contains(unitsStr)) {
          metadataGraph.setAggPoint(URI,unitsStr,false);
          aggBufsArray.remove(unitsStr);
          currentProps.put(""String_Node_Str"",aggBufsArray);
          database.rrPutProperties(URI,currentProps);
          updateProperties(currentProps);
        }
      }
 else       if (setAggBool && !containsAggBufs) {
        JSONArray aggBufsArray=new JSONArray();
        aggBufsArray.add(unitsStr);
        currentProps.put(""String_Node_Str"",aggBufsArray);
        database.rrPutProperties(URI,currentProps);
        updateProperties(currentProps);
      }
      sendResponse(exchange,200,null,internalCall,internalResp);
    }
 else {
      handlePropsReq(exchange,data,internalCall,internalResp);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}","public void post(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  try {
    logger.info(""String_Node_Str"" + exchangeJSON.getString(""String_Node_Str""));
    if (exchangeJSON.containsKey(""String_Node_Str"") && exchangeJSON.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") && exchangeJSON.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      query(exchange,data,internalCall,internalResp);
    }
 else     if (exchangeJSON.containsKey(""String_Node_Str"") && exchangeJSON.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      query(exchange,data,internalCall,internalResp);
    }
 else     if (exchangeJSON.containsKey(""String_Node_Str"") && exchangeJSON.containsKey(""String_Node_Str"")) {
      String setAggStr=exchangeJSON.getString(""String_Node_Str"");
      String unitsStr=exchangeJSON.getString(""String_Node_Str"");
      boolean setAggBool=false;
      if (setAggStr.equalsIgnoreCase(""String_Node_Str""))       setAggBool=true;
      if (setAggBool && !unitsStr.equals(""String_Node_Str"")) {
        metadataGraph.setAggPoint(URI,unitsStr,true);
        logger.info(""String_Node_Str"" + URI + ""String_Node_Str""+ setAggStr+ ""String_Node_Str""+ unitsStr+ ""String_Node_Str"");
      }
      JSONObject currentProps=database.rrGetProperties(URI);
      boolean containsAggBufs=currentProps.containsKey(""String_Node_Str"");
      if (setAggBool && containsAggBufs) {
        JSONArray aggBufsArray=currentProps.getJSONArray(""String_Node_Str"");
        if (!aggBufsArray.contains(unitsStr)) {
          aggBufsArray.add(unitsStr);
          currentProps.put(""String_Node_Str"",aggBufsArray);
          database.rrPutProperties(URI,currentProps);
          updateProperties(currentProps);
        }
      }
 else       if (!setAggBool && containsAggBufs) {
        JSONArray aggBufsArray=currentProps.getJSONArray(""String_Node_Str"");
        if (aggBufsArray.contains(unitsStr)) {
          metadataGraph.setAggPoint(URI,unitsStr,false);
          aggBufsArray.remove(unitsStr);
          currentProps.put(""String_Node_Str"",aggBufsArray);
          database.rrPutProperties(URI,currentProps);
          updateProperties(currentProps);
        }
      }
 else       if (setAggBool && !containsAggBufs) {
        JSONArray aggBufsArray=new JSONArray();
        aggBufsArray.add(unitsStr);
        currentProps.put(""String_Node_Str"",aggBufsArray);
        database.rrPutProperties(URI,currentProps);
        updateProperties(currentProps);
      }
      sendResponse(exchange,200,null,internalCall,internalResp);
    }
 else {
      handlePropsReq(exchange,data,internalCall,internalResp);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}"
83954,"public void get(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  try {
    if (exchangeJSON.containsKey(""String_Node_Str"") && ((String)exchangeJSON.getString(""String_Node_Str"")).equalsIgnoreCase(""String_Node_Str"") && exchange.getRequestURI().toString().contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      query(exchange,null,internalCall,internalResp);
    }
 else     if (exchangeJSON.containsKey(""String_Node_Str"") && exchangeJSON.containsKey(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      boolean queryQ=exchangeJSON.containsKey(""String_Node_Str"");
      String queryVal=exchangeJSON.optString(""String_Node_Str"");
      queryQ&=(queryVal != null && queryVal.equalsIgnoreCase(""String_Node_Str""));
      if (queryQ) {
        handleTSAggQuery(exchange,null,internalCall,internalResp);
      }
 else {
        String aggStr=exchangeJSON.getString(""String_Node_Str"");
        String units=exchangeJSON.getString(""String_Node_Str"");
        String queryRes=metadataGraph.queryAgg(URI,aggStr,units,null);
        if (queryRes != null) {
          JSONObject response=(JSONObject)JSONSerializer.toJSON(queryRes);
          sendResponse(exchange,200,response.toString(),internalCall,internalResp);
        }
 else {
          sendResponse(exchange,200,null,internalCall,internalResp);
        }
      }
    }
 else {
      logger.fine(""String_Node_Str"" + URI);
      JSONObject response=new JSONObject();
      JSONArray subResourceNames=((MySqlDriver)(DBAbstractionLayer.database)).rrGetChildren(URI);
      logger.fine(subResourceNames.toString());
      response.put(""String_Node_Str"",""String_Node_Str"");
      response.put(""String_Node_Str"",ResourceUtils.translateType(TYPE));
      response.put(""String_Node_Str"",database.rrGetProperties(URI));
      findSymlinks(subResourceNames);
      response.put(""String_Node_Str"",subResourceNames);
      sendResponse(exchange,200,response.toString(),internalCall,internalResp);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}","public void get(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  try {
    if (exchangeJSON.containsKey(""String_Node_Str"") && ((String)exchangeJSON.getString(""String_Node_Str"")).equalsIgnoreCase(""String_Node_Str"") && exchangeJSON.getString(""String_Node_Str"").contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      query(exchange,null,internalCall,internalResp);
    }
 else     if (exchangeJSON.containsKey(""String_Node_Str"") && exchangeJSON.containsKey(""String_Node_Str"")) {
      logger.info(""String_Node_Str"");
      boolean queryQ=exchangeJSON.containsKey(""String_Node_Str"");
      String queryVal=exchangeJSON.optString(""String_Node_Str"");
      queryQ&=(queryVal != null && queryVal.equalsIgnoreCase(""String_Node_Str""));
      if (queryQ) {
        handleTSAggQuery(exchange,null,internalCall,internalResp);
      }
 else {
        String aggStr=exchangeJSON.getString(""String_Node_Str"");
        String units=exchangeJSON.getString(""String_Node_Str"");
        String queryRes=metadataGraph.queryAgg(URI,aggStr,units,null);
        if (queryRes != null) {
          JSONObject response=(JSONObject)JSONSerializer.toJSON(queryRes);
          sendResponse(exchange,200,response.toString(),internalCall,internalResp);
        }
 else {
          sendResponse(exchange,200,null,internalCall,internalResp);
        }
      }
    }
 else {
      logger.fine(""String_Node_Str"" + URI);
      JSONObject response=new JSONObject();
      JSONArray subResourceNames=((MySqlDriver)(DBAbstractionLayer.database)).rrGetChildren(URI);
      logger.fine(subResourceNames.toString());
      response.put(""String_Node_Str"",""String_Node_Str"");
      response.put(""String_Node_Str"",ResourceUtils.translateType(TYPE));
      response.put(""String_Node_Str"",database.rrGetProperties(URI));
      findSymlinks(subResourceNames);
      response.put(""String_Node_Str"",subResourceNames);
      sendResponse(exchange,200,response.toString(),internalCall,internalResp);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}"
83955,"private void handleTSAggQuery(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  JSONObject resp=new JSONObject();
  JSONArray errors=new JSONArray();
  resp.put(""String_Node_Str"",URI);
  try {
    JSONObject tsQueryObj2=genTSQueryObject(exchange,data);
    if (!tsQueryObj2.toString().equals(""String_Node_Str"")) {
      String aggStr=exchangeJSON.getString(""String_Node_Str"");
      String units=exchangeJSON.getString(""String_Node_Str"");
      JSONArray mqResp2=queryAggTimeseries(aggStr,units,tsQueryObj2);
      logger.fine(""String_Node_Str"" + mqResp2.toString());
      resp.put(""String_Node_Str"",mqResp2);
    }
 else {
      errors.add(""String_Node_Str"");
      logger.warning(errors.toString());
      resp.put(""String_Node_Str"",errors);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    if (e instanceof JSONException) {
      errors.add(""String_Node_Str"");
      resp.put(errors,errors);
      sendResponse(exchange,200,resp.toString(),internalCall,internalResp);
      return;
    }
  }
  sendResponse(exchange,200,resp.toString(),internalCall,internalResp);
  exchangeJSON.clear();
}","private void handleTSAggQuery(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  JSONObject resp=new JSONObject();
  JSONArray errors=new JSONArray();
  resp.put(""String_Node_Str"",URI);
  try {
    JSONObject tsQueryObj2=genTSQueryObject(exchange,data);
    if (!tsQueryObj2.toString().equals(""String_Node_Str"")) {
      String aggStr=exchangeJSON.getString(""String_Node_Str"");
      String units=exchangeJSON.getString(""String_Node_Str"");
      JSONArray mqResp2=queryAggTimeseries(aggStr,units,tsQueryObj2);
      logger.fine(""String_Node_Str"" + mqResp2.toString());
      resp.put(""String_Node_Str"",mqResp2);
    }
 else {
      errors.add(""String_Node_Str"");
      logger.warning(errors.toString());
      resp.put(""String_Node_Str"",errors);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    if (e instanceof JSONException) {
      errors.add(""String_Node_Str"");
      resp.put(errors,errors);
      sendResponse(exchange,200,resp.toString(),internalCall,internalResp);
      return;
    }
  }
  sendResponse(exchange,200,resp.toString(),internalCall,internalResp);
}"
83956,"protected void setExchangeJSON(JSONObject params){
  exchangeJSON.putAll(params);
}","protected void setExchangeJSON(JSONObject params){
  logger.fine(""String_Node_Str"" + params.toString());
  exchangeJSON.putAll(params);
}"
83957,"public synchronized void handle(HttpExchange exchange){
  logger.info(""String_Node_Str"" + exchange.getLocalAddress().getHostName() + ""String_Node_Str""+ exchange.getLocalAddress().getPort()+ ""String_Node_Str""+ exchange.getRemoteAddress());
  try {
    String eUri=exchange.getRequestURI().toString();
    if (eUri.contains(""String_Node_Str""))     eUri=eUri.substring(0,eUri.indexOf(""String_Node_Str""));
    if (!eUri.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"" + ResourceUtils.translateType(TYPE));
      if (TYPE != ResourceUtils.SYMLINK_RSRC) {
        String URI2=null;
        if (this.URI.endsWith(""String_Node_Str""))         URI2=this.URI.substring(0,this.URI.length() - 1);
 else         URI2=this.URI + ""String_Node_Str"";
        logger.info(""String_Node_Str"" + this.URI + ""String_Node_Str""+ URI2+ ""String_Node_Str""+ exchange.getRequestURI());
        String myUri=null;
        if (eUri.contains(""String_Node_Str"")) {
          myUri=eUri.substring(0,eUri.indexOf(""String_Node_Str""));
        }
 else {
          myUri=eUri;
        }
        if ((!myUri.equalsIgnoreCase(this.URI) && !myUri.equalsIgnoreCase(URI2)) || !isActiveResource(this.URI)) {
          sendResponse(exchange,404,null,false,null);
          return;
        }
      }
      if (exchange.getHttpContext() != thisContext && exchange.getHttpContext().getFilters().size() == 0) {
        this.parseParams(exchange);
        thisContext=exchange.getHttpContext();
        thisContext.getFilters().add(this);
        logger.warning(""String_Node_Str"");
      }
      try {
        String requestMethod=exchange.getRequestMethod();
        if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
          sfsStats.incGet();
          this.get(exchange,false,null);
          return;
        }
 else         if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
          sfsStats.incPut();
          String obj=getPutPostData(exchange);
          this.put(exchange,obj,false,null);
          sfsStats.docReceived(obj);
          return;
        }
 else         if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
          sfsStats.incPost();
          String obj=getPutPostData(exchange);
          this.post(exchange,obj,false,null);
          sfsStats.docReceived(obj);
          return;
        }
 else         if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
          sfsStats.incDelete();
          this.delete(exchange,false,null);
          return;
        }
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
 else {
      if (exchange.getHttpContext() != thisContext && exchange.getHttpContext().getFilters().size() == 0) {
        this.parseParams(exchange);
        thisContext=exchange.getHttpContext();
        thisContext.getFilters().add(this);
      }
      handleRecursiveFSQuery(exchange,false,null);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
 finally {
    try {
      if (exchange != null) {
        exchange.getRequestBody().close();
        exchange.close();
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}","public synchronized void handle(HttpExchange exchange){
  logger.info(""String_Node_Str"" + exchange.getLocalAddress().getHostName() + ""String_Node_Str""+ exchange.getLocalAddress().getPort()+ ""String_Node_Str""+ exchange.getRemoteAddress());
  try {
    String eUri=exchangeJSON.getString(""String_Node_Str"");
    if (eUri.contains(""String_Node_Str""))     eUri=eUri.substring(0,eUri.indexOf(""String_Node_Str""));
    if (!eUri.contains(""String_Node_Str"")) {
      logger.info(""String_Node_Str"" + ResourceUtils.translateType(TYPE));
      if (TYPE != ResourceUtils.SYMLINK_RSRC) {
        String URI2=null;
        if (this.URI.endsWith(""String_Node_Str""))         URI2=this.URI.substring(0,this.URI.length() - 1);
 else         URI2=this.URI + ""String_Node_Str"";
        logger.info(""String_Node_Str"" + this.URI + ""String_Node_Str""+ URI2+ ""String_Node_Str""+ exchangeJSON.getString(""String_Node_Str""));
        String myUri=null;
        if (eUri.contains(""String_Node_Str"")) {
          myUri=eUri.substring(0,eUri.indexOf(""String_Node_Str""));
        }
 else {
          myUri=eUri;
        }
        if ((!myUri.equalsIgnoreCase(this.URI) && !myUri.equalsIgnoreCase(URI2)) || !isActiveResource(this.URI)) {
          sendResponse(exchange,404,null,false,null);
          return;
        }
      }
      if (exchange.getHttpContext() != thisContext && exchange.getHttpContext().getFilters().size() == 0) {
        this.parseParams(exchange);
        thisContext=exchange.getHttpContext();
        thisContext.getFilters().add(this);
        logger.warning(""String_Node_Str"");
      }
      try {
        String requestMethod=exchange.getRequestMethod();
        if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
          sfsStats.incGet();
          this.get(exchange,false,null);
          return;
        }
 else         if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
          sfsStats.incPut();
          String obj=getPutPostData(exchange);
          this.put(exchange,obj,false,null);
          sfsStats.docReceived(obj);
          return;
        }
 else         if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
          sfsStats.incPost();
          String obj=getPutPostData(exchange);
          this.post(exchange,obj,false,null);
          sfsStats.docReceived(obj);
          return;
        }
 else         if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
          logger.info(""String_Node_Str"");
          sfsStats.incDelete();
          this.delete(exchange,false,null);
          return;
        }
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
 else {
      if (exchange.getHttpContext() != thisContext && exchange.getHttpContext().getFilters().size() == 0) {
        this.parseParams(exchange);
        thisContext=exchange.getHttpContext();
        thisContext.getFilters().add(this);
      }
      logger.info(""String_Node_Str"" + exchangeJSON.toString());
      handleRecursiveFSQuery(exchange,false,null);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
 finally {
    try {
      if (exchange != null) {
        exchange.getRequestBody().close();
        exchange.close();
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}"
83958,"/** 
 * Resolves the uri.  If query has been posted, it is applied to each resource that the uri solves to.  The results are returns in the following format. { ""/is4/..."":{..} } The attribute is the uri, the value is the results of applying the query to that uri.
 */
protected void handleRecursiveFSQuery(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  String requestUri=null;
  if (internalCall && exchange.getAttribute(""String_Node_Str"") != null && !((String)exchange.getAttribute(""String_Node_Str"")).equals(""String_Node_Str"")) {
    requestUri=(String)exchange.getAttribute(""String_Node_Str"");
    exchange.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    requestUri=exchange.getRequestURI().toString();
  }
  exchange.setAttribute(""String_Node_Str"",""String_Node_Str"");
  logger.info(""String_Node_Str"" + requestUri + ""String_Node_Str""+ internalCall);
  JSONArray resolvedUris=new JSONArray();
  String uriOnly=requestUri;
  if (requestUri.contains(""String_Node_Str"")) {
    uriOnly=requestUri.substring(0,uriOnly.indexOf(""String_Node_Str""));
    logger.info(""String_Node_Str"" + uriOnly + ""String_Node_Str""+ (String)exchange.getAttribute(""String_Node_Str""));
    resolvedUris.addAll(database.resolveStarredUri(uriOnly,(String)exchange.getAttribute(""String_Node_Str"")));
  }
 else {
    resolvedUris.addAll(database.resolveStarredUri(uriOnly,null));
  }
  logger.info(""String_Node_Str"" + resolvedUris.toString());
  String requestMethod=exchange.getRequestMethod();
  String putPostData=null;
  if (requestMethod.equalsIgnoreCase(""String_Node_Str"") || requestMethod.equalsIgnoreCase(""String_Node_Str""))   putPostData=getPutPostData(exchange);
  JSONObject responses=new JSONObject();
  try {
    if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.get(exchange,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.put(exchange,putPostData,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.post(exchange,putPostData,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      if (resolvedUris.size() > 0)       depthFirstSort(resolvedUris);
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.delete(exchange,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  sendResponse(exchange,200,responses.toString(),internalCall,internalResp);
}","/** 
 * Resolves the uri.  If query has been posted, it is applied to each resource that the uri solves to.  The results are returns in the following format. { ""/is4/..."":{..} } The attribute is the uri, the value is the results of applying the query to that uri.
 */
protected void handleRecursiveFSQuery(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  String requestUri=exchangeJSON.getString(""String_Node_Str"");
  exchange.setAttribute(""String_Node_Str"",""String_Node_Str"");
  logger.info(""String_Node_Str"" + requestUri + ""String_Node_Str""+ internalCall);
  JSONArray resolvedUris=new JSONArray();
  String uriOnly=requestUri;
  if (requestUri.contains(""String_Node_Str"")) {
    uriOnly=requestUri.substring(0,uriOnly.indexOf(""String_Node_Str""));
    logger.info(""String_Node_Str"" + uriOnly + ""String_Node_Str""+ (String)exchange.getAttribute(""String_Node_Str""));
    resolvedUris.addAll(database.resolveStarredUri(uriOnly,(String)exchange.getAttribute(""String_Node_Str"")));
  }
 else {
    resolvedUris.addAll(database.resolveStarredUri(uriOnly,null));
  }
  logger.info(""String_Node_Str"" + resolvedUris.toString());
  String requestMethod=exchange.getRequestMethod();
  String putPostData=null;
  if (requestMethod.equalsIgnoreCase(""String_Node_Str"") || requestMethod.equalsIgnoreCase(""String_Node_Str""))   putPostData=getPutPostData(exchange);
  JSONObject responses=new JSONObject();
  try {
    if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.get(exchange,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.put(exchange,putPostData,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.post(exchange,putPostData,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      if (resolvedUris.size() > 0)       depthFirstSort(resolvedUris);
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.delete(exchange,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  sendResponse(exchange,200,responses.toString(),internalCall,internalResp);
}"
83959,"private void copyResponse(String response,JSONObject internalResp){
  try {
    if (internalResp != null) {
      if (response != null) {
        logger.fine(""String_Node_Str"");
        JSONObject respObj=(JSONObject)JSONSerializer.toJSON(response);
        Iterator keys=respObj.keys();
        while (keys.hasNext()) {
          String thisKey=(String)keys.next();
          internalResp.put(thisKey,respObj.get(thisKey));
        }
      }
 else {
        logger.fine(""String_Node_Str"");
      }
    }
 else {
      logger.fine(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}","private void copyResponse(String response,JSONObject internalResp){
  try {
    if (internalResp != null) {
      if (response != null) {
        logger.fine(""String_Node_Str"");
        JSONObject respObj=(JSONObject)JSONSerializer.toJSON(response);
        internalResp.accumulateAll((Map)respObj);
      }
 else {
        logger.fine(""String_Node_Str"");
      }
    }
 else {
      logger.fine(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}"
83960,"protected synchronized boolean parseParams(HttpExchange exchange){
  logger.info(""String_Node_Str"" + exchange.getRequestURI().toString());
  exchangeJSON.clear();
  exchangeJSON.put(""String_Node_Str"",exchange.getRequestHeaders());
  StringTokenizer tokenizer=new StringTokenizer(exchange.getRequestURI().toString(),""String_Node_Str"");
  if (tokenizer != null && tokenizer.hasMoreTokens()) {
    String thisResourcePath=tokenizer.nextToken();
    if (URI == null && !thisResourcePath.equals(URI) && !thisResourcePath.equals(URI + ""String_Node_Str""))     return false;
    if (tokenizer.countTokens() > 0) {
      StringTokenizer paramStrTokenizer=new StringTokenizer(tokenizer.nextToken(),""String_Node_Str"");
      if (paramStrTokenizer != null && paramStrTokenizer.hasMoreTokens()) {
        while (paramStrTokenizer.hasMoreTokens()) {
          StringTokenizer paramPairsTokenizer=new StringTokenizer(paramStrTokenizer.nextToken(),""String_Node_Str"");
          if (paramPairsTokenizer != null && paramPairsTokenizer.hasMoreTokens()) {
            String attr=paramPairsTokenizer.nextToken();
            String val=paramPairsTokenizer.nextToken();
            exchange.setAttribute(attr,val);
            exchangeJSON.put(attr,val);
            logger.info(""String_Node_Str"" + attr + ""String_Node_Str""+ val+ ""String_Node_Str"");
          }
        }
      }
    }
 else {
      logger.fine(""String_Node_Str"");
    }
  }
  logger.finer(""String_Node_Str"" + exchangeJSON.toString());
  return true;
}","protected synchronized boolean parseParams(HttpExchange exchange){
  logger.info(""String_Node_Str"" + exchange.getRequestURI().toString());
  exchangeJSON.clear();
  exchangeJSON.put(""String_Node_Str"",exchange.getRequestHeaders());
  exchangeJSON.put(""String_Node_Str"",exchange.getRequestURI().toString());
  StringTokenizer tokenizer=new StringTokenizer(exchange.getRequestURI().toString(),""String_Node_Str"");
  if (tokenizer != null && tokenizer.hasMoreTokens()) {
    String thisResourcePath=tokenizer.nextToken();
    if (URI == null && !thisResourcePath.equals(URI) && !thisResourcePath.equals(URI + ""String_Node_Str""))     return false;
    if (tokenizer.countTokens() > 0) {
      StringTokenizer paramStrTokenizer=new StringTokenizer(tokenizer.nextToken(),""String_Node_Str"");
      if (paramStrTokenizer != null && paramStrTokenizer.hasMoreTokens()) {
        while (paramStrTokenizer.hasMoreTokens()) {
          StringTokenizer paramPairsTokenizer=new StringTokenizer(paramStrTokenizer.nextToken(),""String_Node_Str"");
          if (paramPairsTokenizer != null && paramPairsTokenizer.hasMoreTokens()) {
            String attr=paramPairsTokenizer.nextToken();
            String val=paramPairsTokenizer.nextToken();
            exchange.setAttribute(attr,val);
            exchangeJSON.put(attr,val);
            logger.info(""String_Node_Str"" + attr + ""String_Node_Str""+ val+ ""String_Node_Str"");
          }
        }
      }
    }
 else {
      logger.fine(""String_Node_Str"");
    }
  }
  logger.finer(""String_Node_Str"" + exchangeJSON.toString());
  return true;
}"
83961,"public void delete(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  try {
    logger.info(""String_Node_Str"" + URI);
    String tailResources=null;
    if (uri_link != null) {
      tailResources=getTailResourceUri(exchange,true);
      if (tailResources.equals(""String_Node_Str"")) {
        database.removeSymlinkEntry(URI);
        database.removeRestResource(URI);
        RESTServer.removeResource(this);
        this.metadataGraph.removeNode(this.URI);
        sendResponse(exchange,202,null,internalCall,internalResp);
        return;
      }
      String linksToStr=uri_link;
      if (database.isSymlink(linksToStr)) {
        linksToStr=database.getSymlinkAlias(uri_link);
        while (linksToStr != null && database.isSymlink(linksToStr)) {
          linksToStr=database.getSymlinkAlias(linksToStr);
        }
      }
      if (linksToStr.startsWith(""String_Node_Str"")) {
        String thisUri=uri_link + tailResources;
        Resource resource=RESTServer.getResource(thisUri);
        if (resource != null) {
          resource.exchangeJSON.putAll(this.exchangeJSON);
          resource.delete(exchange,internalCall,internalResp);
        }
 else {
          sendResponse(exchange,404,null,internalCall,internalResp);
          return;
        }
      }
 else {
        String thisUrl=linksToStr + tailResources;
        StringBuffer serverRespBuffer=new StringBuffer();
        HttpURLConnection is4Conn=is4ServerDelete(thisUrl,serverRespBuffer);
        if (is4Conn != null) {
          String requestUri=exchange.getRequestURI().toString();
          if (requestUri.contains(""String_Node_Str""))           requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
          if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
            JSONObject fixedServerResp=new JSONObject();
            String localUri=URI + tailResources;
            fixedServerResp.put(localUri,serverRespBuffer.toString());
            sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
          }
 else {
            sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
          }
          is4Conn.disconnect();
        }
 else {
          sendResponse(exchange,504,null,internalCall,internalResp);
        }
      }
    }
 else     if (url_link != null) {
      tailResources=getTailResourceUri(exchange,false);
      if (tailResources.equals(""String_Node_Str"")) {
        database.removeSymlinkEntry(URI);
        database.removeRestResource(URI);
        RESTServer.removeResource(this);
        this.metadataGraph.removeNode(this.URI);
        sendResponse(exchange,202,null,internalCall,internalResp);
        return;
      }
      String thisUrl=url_link.toString() + tailResources;
      StringBuffer serverRespBuffer=new StringBuffer();
      HttpURLConnection is4Conn=is4ServerDelete(thisUrl,serverRespBuffer);
      if (is4Conn != null) {
        String requestUri=exchange.getRequestURI().toString();
        if (requestUri.contains(""String_Node_Str""))         requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
        if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
          JSONObject fixedServerResp=new JSONObject();
          String localUri=URI + tailResources;
          fixedServerResp.put(localUri,serverRespBuffer.toString());
          sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
        }
 else {
          sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
        }
        is4Conn.disconnect();
      }
 else {
        sendResponse(exchange,504,null,internalCall,internalResp);
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    sendResponse(exchange,504,null,internalCall,internalResp);
  }
}","public void delete(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  try {
    logger.info(""String_Node_Str"" + URI);
    String tailResources=null;
    if (uri_link != null) {
      tailResources=getTailResourceUri(exchange,true);
      if (tailResources.equals(""String_Node_Str"")) {
        database.removeSymlinkEntry(URI);
        database.removeRestResource(URI);
        RESTServer.removeResource(this);
        this.metadataGraph.removeNode(this.URI);
        sendResponse(exchange,202,null,internalCall,internalResp);
        return;
      }
      String linksToStr=uri_link;
      if (database.isSymlink(linksToStr)) {
        linksToStr=database.getSymlinkAlias(uri_link);
        while (linksToStr != null && database.isSymlink(linksToStr)) {
          linksToStr=database.getSymlinkAlias(linksToStr);
        }
      }
      if (linksToStr.startsWith(""String_Node_Str"")) {
        String thisUri=uri_link + tailResources;
        Resource resource=RESTServer.getResource(thisUri);
        if (resource != null) {
          resource.exchangeJSON.putAll(this.exchangeJSON);
          resource.delete(exchange,internalCall,internalResp);
        }
 else {
          sendResponse(exchange,404,null,internalCall,internalResp);
          return;
        }
      }
 else {
        String thisUrl=linksToStr + tailResources;
        StringBuffer serverRespBuffer=new StringBuffer();
        HttpURLConnection is4Conn=is4ServerDelete(thisUrl,serverRespBuffer);
        if (is4Conn != null) {
          String requestUri=exchangeJSON.getString(""String_Node_Str"");
          if (requestUri.contains(""String_Node_Str""))           requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
          if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
            JSONObject fixedServerResp=new JSONObject();
            String localUri=URI + tailResources;
            fixedServerResp.put(localUri,serverRespBuffer.toString());
            sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
          }
 else {
            sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
          }
          is4Conn.disconnect();
        }
 else {
          sendResponse(exchange,504,null,internalCall,internalResp);
        }
      }
    }
 else     if (url_link != null) {
      tailResources=getTailResourceUri(exchange,false);
      if (tailResources.equals(""String_Node_Str"")) {
        database.removeSymlinkEntry(URI);
        database.removeRestResource(URI);
        RESTServer.removeResource(this);
        this.metadataGraph.removeNode(this.URI);
        sendResponse(exchange,202,null,internalCall,internalResp);
        return;
      }
      String thisUrl=url_link.toString() + tailResources;
      StringBuffer serverRespBuffer=new StringBuffer();
      HttpURLConnection is4Conn=is4ServerDelete(thisUrl,serverRespBuffer);
      if (is4Conn != null) {
        String requestUri=exchangeJSON.getString(""String_Node_Str"");
        if (requestUri.contains(""String_Node_Str""))         requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
        if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
          JSONObject fixedServerResp=new JSONObject();
          String localUri=URI + tailResources;
          fixedServerResp.put(localUri,serverRespBuffer.toString());
          sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
        }
 else {
          sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
        }
        is4Conn.disconnect();
      }
 else {
        sendResponse(exchange,504,null,internalCall,internalResp);
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    sendResponse(exchange,504,null,internalCall,internalResp);
  }
}"
83962,"public void put(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  try {
    String tailResources=null;
    if (uri_link != null) {
      tailResources=getTailResourceUri(exchange,true);
      String thisUri=uri_link + tailResources;
      Resource resource=RESTServer.getResource(thisUri);
      resource.exchangeJSON.putAll(this.exchangeJSON);
      resource.put(exchange,data,internalCall,internalResp);
    }
 else     if (url_link != null) {
      tailResources=getTailResourceUri(exchange,false);
      String thisUrl=url_link.toString() + tailResources;
      StringBuffer serverRespBuffer=new StringBuffer();
      HttpURLConnection is4Conn=is4ServerPut(thisUrl,data,serverRespBuffer);
      if (is4Conn != null) {
        String requestUri=exchange.getRequestURI().toString();
        if (requestUri.contains(""String_Node_Str""))         requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
        if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
          JSONObject fixedServerResp=new JSONObject();
          String localUri=URI + tailResources;
          fixedServerResp.put(localUri,serverRespBuffer.toString());
          sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
        }
 else {
          sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
        }
        is4Conn.disconnect();
      }
 else {
        sendResponse(exchange,504,null,internalCall,internalResp);
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    sendResponse(exchange,504,null,internalCall,internalResp);
  }
}","public void put(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  try {
    String tailResources=null;
    if (uri_link != null) {
      tailResources=getTailResourceUri(exchange,true);
      String thisUri=uri_link + tailResources;
      Resource resource=RESTServer.getResource(thisUri);
      resource.exchangeJSON.putAll(this.exchangeJSON);
      resource.put(exchange,data,internalCall,internalResp);
    }
 else     if (url_link != null) {
      tailResources=getTailResourceUri(exchange,false);
      String thisUrl=url_link.toString() + tailResources;
      StringBuffer serverRespBuffer=new StringBuffer();
      HttpURLConnection is4Conn=is4ServerPut(thisUrl,data,serverRespBuffer);
      if (is4Conn != null) {
        String requestUri=exchangeJSON.getString(""String_Node_Str"");
        if (requestUri.contains(""String_Node_Str""))         requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
        if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
          JSONObject fixedServerResp=new JSONObject();
          String localUri=URI + tailResources;
          fixedServerResp.put(localUri,serverRespBuffer.toString());
          sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
        }
 else {
          sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
        }
        is4Conn.disconnect();
      }
 else {
        sendResponse(exchange,504,null,internalCall,internalResp);
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    sendResponse(exchange,504,null,internalCall,internalResp);
  }
}"
83963,"public void post(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  try {
    String tailResources=null;
    if (uri_link != null) {
      tailResources=getTailResourceUri(exchange,true);
      String thisUri=uri_link + tailResources;
      Resource resource=RESTServer.getResource(thisUri);
      resource.exchangeJSON.putAll(this.exchangeJSON);
      resource.post(exchange,data,internalCall,internalResp);
    }
 else     if (url_link != null) {
      tailResources=getTailResourceUri(exchange,false);
      String thisUrl=url_link.toString() + tailResources;
      StringBuffer serverRespBuffer=new StringBuffer();
      HttpURLConnection is4Conn=is4ServerPost(thisUrl,data,serverRespBuffer);
      if (is4Conn != null) {
        String requestUri=exchange.getRequestURI().toString();
        if (requestUri.contains(""String_Node_Str""))         requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
        if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
          JSONObject fixedServerResp=new JSONObject();
          String localUri=URI + tailResources;
          fixedServerResp.put(localUri,serverRespBuffer.toString());
          sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
        }
 else {
          sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
        }
        is4Conn.disconnect();
      }
 else {
        sendResponse(exchange,504,null,internalCall,internalResp);
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    sendResponse(exchange,504,null,internalCall,internalResp);
  }
}","public void post(HttpExchange exchange,String data,boolean internalCall,JSONObject internalResp){
  try {
    String tailResources=null;
    if (uri_link != null) {
      tailResources=getTailResourceUri(exchange,true);
      String thisUri=uri_link + tailResources;
      Resource resource=RESTServer.getResource(thisUri);
      resource.exchangeJSON.putAll(this.exchangeJSON);
      resource.post(exchange,data,internalCall,internalResp);
    }
 else     if (url_link != null) {
      tailResources=getTailResourceUri(exchange,false);
      String thisUrl=url_link.toString() + tailResources;
      StringBuffer serverRespBuffer=new StringBuffer();
      HttpURLConnection is4Conn=is4ServerPost(thisUrl,data,serverRespBuffer);
      if (is4Conn != null) {
        String requestUri=exchangeJSON.getString(""String_Node_Str"");
        if (requestUri.contains(""String_Node_Str""))         requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
        if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
          JSONObject fixedServerResp=new JSONObject();
          String localUri=URI + tailResources;
          fixedServerResp.put(localUri,serverRespBuffer.toString());
          sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
        }
 else {
          sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
        }
        is4Conn.disconnect();
      }
 else {
        sendResponse(exchange,504,null,internalCall,internalResp);
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    sendResponse(exchange,504,null,internalCall,internalResp);
  }
}"
83964,"private void handleUrlSymlinkRequest(HttpExchange exchange,boolean internalCall,JSONObject internalResp,String linksToUrl){
  try {
    String tailResources=getTailResourceUri(exchange,true);
    tailResources=getTailResourceUri(exchange,false);
    String thisUrl=linksToUrl + tailResources;
    logger.info(""String_Node_Str"" + thisUrl);
    StringBuffer serverRespBuffer=new StringBuffer();
    HttpURLConnection is4Conn=is4ServerGet(thisUrl,serverRespBuffer);
    if (is4Conn != null) {
      String requestUri=exchange.getRequestURI().toString();
      if (requestUri.contains(""String_Node_Str""))       requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
      if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
        JSONObject fixedServerResp=new JSONObject();
        String localUri=URI + tailResources;
        fixedServerResp.put(localUri,serverRespBuffer.toString());
        sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
      }
 else {
        sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
      }
      is4Conn.disconnect();
    }
 else {
      sendResponse(exchange,504,null,internalCall,internalResp);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    sendResponse(exchange,504,null,internalCall,internalResp);
  }
}","private void handleUrlSymlinkRequest(HttpExchange exchange,boolean internalCall,JSONObject internalResp,String linksToUrl){
  try {
    String tailResources=getTailResourceUri(exchange,true);
    tailResources=getTailResourceUri(exchange,false);
    String thisUrl=linksToUrl + tailResources;
    logger.info(""String_Node_Str"" + thisUrl);
    StringBuffer serverRespBuffer=new StringBuffer();
    HttpURLConnection is4Conn=is4ServerGet(thisUrl,serverRespBuffer);
    if (is4Conn != null) {
      String requestUri=exchangeJSON.getString(""String_Node_Str"");
      if (requestUri.contains(""String_Node_Str""))       requestUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
      if (requestUri.contains(""String_Node_Str"") && !requestUri.endsWith(""String_Node_Str"")) {
        JSONObject fixedServerResp=new JSONObject();
        String localUri=URI + tailResources;
        fixedServerResp.put(localUri,serverRespBuffer.toString());
        sendResponse(exchange,is4Conn.getResponseCode(),fixedServerResp.toString(),internalCall,internalResp);
      }
 else {
        sendResponse(exchange,is4Conn.getResponseCode(),serverRespBuffer.toString(),internalCall,internalResp);
      }
      is4Conn.disconnect();
    }
 else {
      sendResponse(exchange,504,null,internalCall,internalResp);
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    sendResponse(exchange,504,null,internalCall,internalResp);
  }
}"
83965,"public void get(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  String tailResources=null;
  if (uri_link != null && !database.isSymlink(uri_link)) {
    logger.info(uri_link + ""String_Node_Str"");
    handleUriSymlinkRequest(exchange,internalCall,internalResp,uri_link);
  }
 else   if (uri_link != null && database.isSymlink(uri_link)) {
    String linksToStr=database.getSymlinkAlias(uri_link);
    while (linksToStr != null && database.isSymlink(linksToStr)) {
      linksToStr=database.getSymlinkAlias(linksToStr);
    }
    if (linksToStr != null && linksToStr.startsWith(""String_Node_Str""))     handleUriSymlinkRequest(exchange,internalCall,internalResp,linksToStr);
 else     handleUrlSymlinkRequest(exchange,internalCall,internalResp,linksToStr);
  }
 else   if (url_link != null) {
    handleUrlSymlinkRequest(exchange,internalCall,internalResp,url_link.toString());
  }
}","public void get(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  String links_to=database.getSymlinkAlias(URI);
  links_to=cleanPath(links_to);
  logger.info(""String_Node_Str"" + links_to);
  if (links_to.startsWith(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + exchangeJSON.toString());
    String requestPath=exchangeJSON.getString(""String_Node_Str"");
    String tail=null;
    if (requestPath.contains(""String_Node_Str"")) {
      tail=requestPath.substring(requestPath.indexOf(""String_Node_Str""),requestPath.length());
      logger.info(""String_Node_Str"" + tail);
      requestPath=requestPath.replace(tail,""String_Node_Str"");
    }
    requestPath=cleanPath(requestPath);
    String translation=requestPath.replace(URI,links_to);
    logger.info(""String_Node_Str"" + requestPath + ""String_Node_Str""+ URI+ ""String_Node_Str""+ links_to);
    logger.info(""String_Node_Str"" + translation);
    Resource r=null;
    if (!database.isSymlink(links_to))     r=RESTServer.getResource(translation);
 else     r=RESTServer.getResource(links_to);
    if (r != null) {
      r.exchangeJSON.accumulateAll(this.exchangeJSON);
      if (tail != null) {
        logger.fine(""String_Node_Str"" + translation + tail);
        r.exchangeJSON.put(""String_Node_Str"",translation + tail);
      }
 else {
        logger.fine(""String_Node_Str"" + translation);
        r.exchangeJSON.put(""String_Node_Str"",translation);
      }
      this.exchangeJSON.clear();
      r.get(exchange,false,internalResp);
      return;
    }
  }
  sendResponse(exchange,404,null,internalCall,internalResp);
}"
83966,"/** 
 * Get the piece of the string that is ahead of this URI.  Remove parameters if symlink is to local resource,  leave the params if this symlink points to another is4 server (url_link is not null).
 */
private String getTailResourceUri(HttpExchange exchange,boolean removeParams){
  String requestUri=null;
  if (exchangeJSON.containsKey(""String_Node_Str"")) {
    requestUri=exchangeJSON.getString(""String_Node_Str"");
    logger.info(""String_Node_Str"" + requestUri);
    exchangeJSON.discard(""String_Node_Str"");
  }
 else {
    requestUri=exchange.getRequestURI().toString();
  }
  String myUri=URI;
  if (requestUri.contains(""String_Node_Str"") && requestUri.contains(""String_Node_Str"")) {
    String transReqUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
    if (transReqUri.endsWith(""String_Node_Str"")) {
      requestUri=requestUri.replace(transReqUri,URI + ""String_Node_Str"");
      logger.info(""String_Node_Str"" + transReqUri + ""String_Node_Str""+ URI+ ""String_Node_Str""+ requestUri);
    }
 else     if (transReqUri.contains(""String_Node_Str"") && !transReqUri.endsWith(""String_Node_Str"")) {
      String res=processMidStarReq(transReqUri);
      if (res != null)       requestUri=res;
      logger.fine(""String_Node_Str"" + requestUri);
    }
 else     if (transReqUri.contains(""String_Node_Str"") && transReqUri.endsWith(""String_Node_Str"") && transReqUri.indexOf(""String_Node_Str"") < transReqUri.lastIndexOf(""String_Node_Str"")) {
      String res=processMidStarReq(transReqUri);
      if (res != null)       requestUri=res;
      logger.fine(""String_Node_Str"" + requestUri);
    }
 else {
      requestUri=requestUri.replace(transReqUri,URI);
      logger.info(""String_Node_Str"" + transReqUri + ""String_Node_Str""+ URI+ ""String_Node_Str""+ requestUri);
    }
  }
 else   if (requestUri.contains(""String_Node_Str"") && !requestUri.contains(""String_Node_Str"")) {
    String transReqUri=requestUri;
    if (transReqUri.endsWith(""String_Node_Str"")) {
      requestUri=requestUri.replace(transReqUri,URI + ""String_Node_Str"");
      logger.info(""String_Node_Str"" + transReqUri + ""String_Node_Str""+ URI+ ""String_Node_Str""+ requestUri);
    }
 else     if (transReqUri.contains(""String_Node_Str"") && !transReqUri.endsWith(""String_Node_Str"")) {
      String res=processMidStarReq(transReqUri);
      if (res != null)       requestUri=res;
      logger.fine(""String_Node_Str"" + requestUri);
    }
 else     if (transReqUri.contains(""String_Node_Str"") && transReqUri.endsWith(""String_Node_Str"") && transReqUri.indexOf(""String_Node_Str"") < transReqUri.lastIndexOf(""String_Node_Str"")) {
      String res=processMidStarReq(transReqUri);
      if (res != null)       requestUri=res;
      logger.fine(""String_Node_Str"" + requestUri);
    }
 else {
      requestUri=requestUri.replace(transReqUri,URI);
      logger.info(""String_Node_Str"" + transReqUri + ""String_Node_Str""+ URI+ ""String_Node_Str""+ requestUri);
    }
  }
  String paramsStr=null;
  if (requestUri.contains(""String_Node_Str"")) {
    paramsStr=requestUri.substring(requestUri.indexOf(""String_Node_Str""),requestUri.length());
    requestUri=requestUri.replace(paramsStr,""String_Node_Str"");
  }
  if (requestUri.endsWith(""String_Node_Str""))   requestUri=requestUri.substring(0,requestUri.length() - 1);
  if (myUri.endsWith(""String_Node_Str""))   myUri=myUri.substring(0,myUri.length() - 1);
  String tailResources=requestUri.replace(myUri,""String_Node_Str"");
  logger.info(""String_Node_Str"" + myUri + ""String_Node_Str""+ requestUri+ ""String_Node_Str""+ tailResources);
  if (tailResources.startsWith(""String_Node_Str""))   tailResources=tailResources.substring(1,tailResources.length());
  if (!removeParams && paramsStr != null)   tailResources=tailResources.concat(paramsStr);
  return tailResources;
}","/** 
 * Get the piece of the string that is ahead of this URI.  Remove parameters if symlink is to local resource,  leave the params if this symlink points to another is4 server (url_link is not null).
 */
private String getTailResourceUri(HttpExchange exchange,boolean removeParams){
  String requestUri=null;
  if (exchangeJSON.containsKey(""String_Node_Str"")) {
    requestUri=exchangeJSON.getString(""String_Node_Str"");
    logger.info(""String_Node_Str"" + requestUri);
    exchangeJSON.discard(""String_Node_Str"");
  }
 else {
    requestUri=exchangeJSON.getString(""String_Node_Str"");
  }
  String myUri=URI;
  if (requestUri.contains(""String_Node_Str"") && requestUri.contains(""String_Node_Str"")) {
    String transReqUri=requestUri.substring(0,requestUri.indexOf(""String_Node_Str""));
    if (transReqUri.endsWith(""String_Node_Str"")) {
      requestUri=requestUri.replace(transReqUri,URI + ""String_Node_Str"");
      logger.info(""String_Node_Str"" + transReqUri + ""String_Node_Str""+ URI+ ""String_Node_Str""+ requestUri);
    }
 else     if (transReqUri.contains(""String_Node_Str"") && !transReqUri.endsWith(""String_Node_Str"")) {
      String res=processMidStarReq(transReqUri);
      if (res != null)       requestUri=res;
      logger.fine(""String_Node_Str"" + requestUri);
    }
 else     if (transReqUri.contains(""String_Node_Str"") && transReqUri.endsWith(""String_Node_Str"") && transReqUri.indexOf(""String_Node_Str"") < transReqUri.lastIndexOf(""String_Node_Str"")) {
      String res=processMidStarReq(transReqUri);
      if (res != null)       requestUri=res;
      logger.fine(""String_Node_Str"" + requestUri);
    }
 else {
      requestUri=requestUri.replace(transReqUri,URI);
      logger.info(""String_Node_Str"" + transReqUri + ""String_Node_Str""+ URI+ ""String_Node_Str""+ requestUri);
    }
  }
 else   if (requestUri.contains(""String_Node_Str"") && !requestUri.contains(""String_Node_Str"")) {
    String transReqUri=requestUri;
    if (transReqUri.endsWith(""String_Node_Str"")) {
      requestUri=requestUri.replace(transReqUri,URI + ""String_Node_Str"");
      logger.info(""String_Node_Str"" + transReqUri + ""String_Node_Str""+ URI+ ""String_Node_Str""+ requestUri);
    }
 else     if (transReqUri.contains(""String_Node_Str"") && !transReqUri.endsWith(""String_Node_Str"")) {
      String res=processMidStarReq(transReqUri);
      if (res != null)       requestUri=res;
      logger.fine(""String_Node_Str"" + requestUri);
    }
 else     if (transReqUri.contains(""String_Node_Str"") && transReqUri.endsWith(""String_Node_Str"") && transReqUri.indexOf(""String_Node_Str"") < transReqUri.lastIndexOf(""String_Node_Str"")) {
      String res=processMidStarReq(transReqUri);
      if (res != null)       requestUri=res;
      logger.fine(""String_Node_Str"" + requestUri);
    }
 else {
      requestUri=requestUri.replace(transReqUri,URI);
      logger.info(""String_Node_Str"" + transReqUri + ""String_Node_Str""+ URI+ ""String_Node_Str""+ requestUri);
    }
  }
  String paramsStr=null;
  if (requestUri.contains(""String_Node_Str"")) {
    paramsStr=requestUri.substring(requestUri.indexOf(""String_Node_Str""),requestUri.length());
    requestUri=requestUri.replace(paramsStr,""String_Node_Str"");
  }
  if (requestUri.endsWith(""String_Node_Str""))   requestUri=requestUri.substring(0,requestUri.length() - 1);
  if (myUri.endsWith(""String_Node_Str""))   myUri=myUri.substring(0,myUri.length() - 1);
  String tailResources=requestUri.replace(myUri,""String_Node_Str"");
  logger.info(""String_Node_Str"" + myUri + ""String_Node_Str""+ requestUri+ ""String_Node_Str""+ tailResources);
  if (tailResources.startsWith(""String_Node_Str""))   tailResources=tailResources.substring(1,tailResources.length());
  if (!removeParams && paramsStr != null)   tailResources=tailResources.concat(paramsStr);
  return tailResources;
}"
83967,"/** 
 * Resolves the uri.  If query has been posted, it is applied to each resource that the uri solves to.  The results are returns in the following format. { ""/is4/..."":{..} } The attribute is the uri, the value is the results of applying the query to that uri.
 */
protected void handleRecursiveFSQuery(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  String requestUri=exchangeJSON.getString(""String_Node_Str"");
  exchange.setAttribute(""String_Node_Str"",""String_Node_Str"");
  logger.info(""String_Node_Str"" + requestUri + ""String_Node_Str""+ internalCall);
  JSONArray resolvedUris=new JSONArray();
  String uriOnly=requestUri;
  if (requestUri.contains(""String_Node_Str"")) {
    uriOnly=requestUri.substring(0,uriOnly.indexOf(""String_Node_Str""));
    logger.info(""String_Node_Str"" + uriOnly + ""String_Node_Str""+ (String)exchange.getAttribute(""String_Node_Str""));
    resolvedUris.addAll(database.resolveStarredUri(uriOnly,(String)exchange.getAttribute(""String_Node_Str"")));
  }
 else {
    resolvedUris.addAll(database.resolveStarredUri(uriOnly,null));
  }
  logger.info(""String_Node_Str"" + resolvedUris.toString());
  String requestMethod=exchange.getRequestMethod();
  String putPostData=null;
  if (requestMethod.equalsIgnoreCase(""String_Node_Str"") || requestMethod.equalsIgnoreCase(""String_Node_Str""))   putPostData=getPutPostData(exchange);
  JSONObject responses=new JSONObject();
  try {
    if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.get(exchange,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.put(exchange,putPostData,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.post(exchange,putPostData,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      if (resolvedUris.size() > 0)       depthFirstSort(resolvedUris);
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.delete(exchange,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            processResponse(thisResource,respBuffer);
            responses.putAll(respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  sendResponse(exchange,200,responses.toString(),internalCall,internalResp);
}","/** 
 * Resolves the uri.  If query has been posted, it is applied to each resource that the uri solves to.  The results are returns in the following format. { ""/is4/..."":{..} } The attribute is the uri, the value is the results of applying the query to that uri.
 */
protected void handleRecursiveFSQuery(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  String requestUri=exchangeJSON.getString(""String_Node_Str"");
  exchange.setAttribute(""String_Node_Str"",""String_Node_Str"");
  logger.info(""String_Node_Str"" + requestUri + ""String_Node_Str""+ internalCall);
  JSONArray resolvedUris=new JSONArray();
  String uriOnly=requestUri;
  if (requestUri.contains(""String_Node_Str"")) {
    uriOnly=requestUri.substring(0,uriOnly.indexOf(""String_Node_Str""));
    logger.info(""String_Node_Str"" + uriOnly + ""String_Node_Str""+ (String)exchange.getAttribute(""String_Node_Str""));
    resolvedUris.addAll(database.resolveStarredUri(uriOnly,(String)exchange.getAttribute(""String_Node_Str"")));
  }
 else {
    resolvedUris.addAll(database.resolveStarredUri(uriOnly,null));
  }
  logger.info(""String_Node_Str"" + resolvedUris.toString());
  String requestMethod=exchange.getRequestMethod();
  String putPostData=null;
  if (requestMethod.equalsIgnoreCase(""String_Node_Str"") || requestMethod.equalsIgnoreCase(""String_Node_Str""))   putPostData=getPutPostData(exchange);
  JSONObject responses=new JSONObject();
  try {
    if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.get(exchange,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            respBuffer.put(""String_Node_Str"",database.getSymlinkAlias(thisResource.URI));
            responses.put(thisResource.URI,respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.put(exchange,putPostData,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            respBuffer.put(""String_Node_Str"",database.getSymlinkAlias(thisResource.URI));
            responses.put(thisResource.URI,respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.post(exchange,putPostData,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            respBuffer.put(""String_Node_Str"",database.getSymlinkAlias(thisResource.URI));
            responses.put(thisResource.URI,respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
 else     if (requestMethod.equalsIgnoreCase(""String_Node_Str"")) {
      if (resolvedUris.size() > 0)       depthFirstSort(resolvedUris);
      for (int i=0; i < resolvedUris.size(); i++) {
        Resource thisResource=RESTServer.getResource(resolvedUris.getString(i));
        if (thisResource != null) {
          JSONObject respBuffer=new JSONObject();
          this.exchangeJSON.put(""String_Node_Str"",resolvedUris.getString(i));
          thisResource.setExchangeJSON(this.exchangeJSON);
          thisResource.delete(exchange,true,respBuffer);
          if (thisResource.TYPE == ResourceUtils.SYMLINK_RSRC) {
            respBuffer.put(""String_Node_Str"",database.getSymlinkAlias(thisResource.URI));
            responses.put(thisResource.URI,respBuffer);
          }
 else {
            responses.put(thisResource.URI,respBuffer);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  sendResponse(exchange,200,responses.toString(),internalCall,internalResp);
}"
83968,"public void get(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  String links_to=database.getSymlinkAlias(URI);
  links_to=cleanPath(links_to);
  logger.info(""String_Node_Str"" + links_to);
  if (links_to.startsWith(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + exchangeJSON.toString());
    String requestPath=exchangeJSON.getString(""String_Node_Str"");
    String tail=null;
    if (requestPath.contains(""String_Node_Str"")) {
      tail=requestPath.substring(requestPath.indexOf(""String_Node_Str""),requestPath.length());
      logger.info(""String_Node_Str"" + tail);
      requestPath=requestPath.replace(tail,""String_Node_Str"");
    }
    requestPath=cleanPath(requestPath);
    String translation=requestPath.replace(URI,links_to);
    logger.info(""String_Node_Str"" + requestPath + ""String_Node_Str""+ URI+ ""String_Node_Str""+ links_to);
    logger.info(""String_Node_Str"" + translation);
    Resource r=null;
    if (!database.isSymlink(links_to))     r=RESTServer.getResource(translation);
 else     r=RESTServer.getResource(links_to);
    if (r != null) {
      r.exchangeJSON.accumulateAll(this.exchangeJSON);
      if (tail != null) {
        logger.fine(""String_Node_Str"" + translation + tail);
        r.exchangeJSON.put(""String_Node_Str"",translation + tail);
      }
 else {
        logger.fine(""String_Node_Str"" + translation);
        r.exchangeJSON.put(""String_Node_Str"",translation);
      }
      this.exchangeJSON.clear();
      r.get(exchange,false,internalResp);
      return;
    }
  }
  sendResponse(exchange,404,null,internalCall,internalResp);
}","public void get(HttpExchange exchange,boolean internalCall,JSONObject internalResp){
  String links_to=database.getSymlinkAlias(URI);
  links_to=cleanPath(links_to);
  logger.info(""String_Node_Str"" + links_to);
  if (links_to.startsWith(""String_Node_Str"")) {
    logger.info(""String_Node_Str"" + exchangeJSON.toString());
    String requestPath=exchangeJSON.getString(""String_Node_Str"");
    String tail=null;
    if (requestPath.contains(""String_Node_Str"")) {
      tail=requestPath.substring(requestPath.indexOf(""String_Node_Str""),requestPath.length());
      logger.info(""String_Node_Str"" + tail);
      requestPath=requestPath.replace(tail,""String_Node_Str"");
    }
    requestPath=cleanPath(requestPath);
    String translation=requestPath.replace(URI,links_to);
    logger.info(""String_Node_Str"" + requestPath + ""String_Node_Str""+ URI+ ""String_Node_Str""+ links_to);
    logger.info(""String_Node_Str"" + translation);
    Resource r=null;
    if (!database.isSymlink(links_to))     r=RESTServer.getResource(translation);
 else     r=RESTServer.getResource(links_to);
    if (r != null) {
      r.exchangeJSON.accumulateAll(this.exchangeJSON);
      if (tail != null) {
        logger.fine(""String_Node_Str"" + translation + tail);
        r.exchangeJSON.put(""String_Node_Str"",translation + tail);
      }
 else {
        logger.fine(""String_Node_Str"" + translation);
        r.exchangeJSON.put(""String_Node_Str"",translation);
      }
      this.exchangeJSON.clear();
      r.get(exchange,internalCall,internalResp);
      return;
    }
  }
  sendResponse(exchange,404,null,internalCall,internalResp);
}"
83969,"public void run(){
  try {
    ObjectInputStream incoming=null;
    ObjectOutputStream outgoing=null;
    ServerSocket server=new ServerSocket(9999,100,InetAddress.getByName(""String_Node_Str""));
    boolean keepRunning=true;
    while (keepRunning) {
      logger.info(""String_Node_Str"");
      Socket s=server.accept();
      incoming=new ObjectInputStream(s.getInputStream());
      outgoing=new ObjectOutputStream(s.getOutputStream());
      RouterCommand cmd=(RouterCommand)incoming.readObject();
      RouterCommand cmdrep=null;
switch (cmd.type) {
case PUSH:
        if (cmd.sourcepath != null && cmd.destpath != null && cmd.data != null && cmd.units != null)         sendData(cmd.sourcepath,cmd.destpath,cmd.data,cmd.units);
      cmdrep=new RouterCommand(RouterCommand.CommandType.PUSH_ACK);
    outgoing.writeObject(cmdrep);
  outgoing.flush();
break;
case PULL:
String reply=null;
if (cmd.lowts > 0 && cmd.hights > 0 && cmd.sourcepath != null && cmd.units != null) reply=pullFromNode(cmd.sourcepath,cmd.units,cmd.lowts,cmd.hights);
cmdrep=new RouterCommand(RouterCommand.CommandType.PULL_ACK);
cmdrep.data=reply;
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case ADD_NODE:
logger.info(""String_Node_Str"");
if (cmd.sourcepath != null) addNodeEvent(cmd.sourcepath);
cmdrep=new RouterCommand(RouterCommand.CommandType.ADD_NODE_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case REMOVE_NODE:
if (cmd.sourcepath != null) removeNodeEvent(cmd.sourcepath);
cmdrep=new RouterCommand(RouterCommand.CommandType.REMOVE_NODE_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case ADD_LINK:
if (cmd.sourcepath != null && cmd.destpath != null) createLink(cmd.sourcepath,cmd.destpath);
cmdrep=new RouterCommand(RouterCommand.CommandType.ADD_LINK_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case REMOVE_LINK:
if (cmd.sourcepath != null && cmd.destpath != null) removeLink(cmd.sourcepath,cmd.destpath);
cmdrep=new RouterCommand(RouterCommand.CommandType.REMOVE_LINK_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case CREATE_AGG_PNT:
if (cmd.sourcepath != null && cmd.units != null) {
setUnitAndTypeAtPath(cmd.sourcepath,cmd.units,ProcType.AGGREGATE,cmd.state);
cmdrep=new RouterCommand(RouterCommand.CommandType.CREATE_AGG_PNT_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
}
break;
case STOP_ROUTER:
keepRunning=false;
break;
}
incoming.close();
outgoing.close();
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,""String_Node_Str"",e);
System.exit(1);
}
return;
}","public void run(){
  try {
    ObjectInputStream incoming=null;
    ObjectOutputStream outgoing=null;
    ServerSocket server=new ServerSocket(9999,100,InetAddress.getByName(""String_Node_Str""));
    boolean keepRunning=true;
    while (keepRunning) {
      logger.info(""String_Node_Str"");
      Socket s=server.accept();
      incoming=new ObjectInputStream(s.getInputStream());
      outgoing=new ObjectOutputStream(s.getOutputStream());
      RouterCommand cmd=(RouterCommand)incoming.readObject();
      RouterCommand cmdrep=null;
switch (cmd.type) {
case PUSH:
        if (cmd.sourcepath != null && cmd.destpath != null && cmd.data != null && cmd.units != null)         sendData(cmd.sourcepath,cmd.destpath,cmd.data,cmd.units);
      cmdrep=new RouterCommand(RouterCommand.CommandType.PUSH_ACK);
    outgoing.writeObject(cmdrep);
  outgoing.flush();
break;
case PULL:
logger.info(""String_Node_Str"");
String reply=null;
if (cmd.lowts > 0 && cmd.hights > 0 && cmd.sourcepath != null && cmd.units != null) reply=pullFromNode(cmd.sourcepath,cmd.units,cmd.lowts,cmd.hights);
cmdrep=new RouterCommand(RouterCommand.CommandType.PULL_ACK);
cmdrep.data=reply;
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case ADD_NODE:
logger.info(""String_Node_Str"");
if (cmd.sourcepath != null) addNodeEvent(cmd.sourcepath);
cmdrep=new RouterCommand(RouterCommand.CommandType.ADD_NODE_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case REMOVE_NODE:
if (cmd.sourcepath != null) removeNodeEvent(cmd.sourcepath);
cmdrep=new RouterCommand(RouterCommand.CommandType.REMOVE_NODE_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case ADD_LINK:
logger.info(""String_Node_Str"");
if (cmd.sourcepath != null && cmd.destpath != null) createLink(cmd.sourcepath,cmd.destpath);
cmdrep=new RouterCommand(RouterCommand.CommandType.ADD_LINK_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case REMOVE_LINK:
if (cmd.sourcepath != null && cmd.destpath != null) removeLink(cmd.sourcepath,cmd.destpath);
cmdrep=new RouterCommand(RouterCommand.CommandType.REMOVE_LINK_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
break;
case CREATE_AGG_PNT:
if (cmd.sourcepath != null && cmd.units != null) {
setUnitAndTypeAtPath(cmd.sourcepath,cmd.units,ProcType.AGGREGATE,cmd.state);
cmdrep=new RouterCommand(RouterCommand.CommandType.CREATE_AGG_PNT_ACK);
outgoing.writeObject(cmdrep);
outgoing.flush();
}
break;
case STOP_ROUTER:
keepRunning=false;
break;
}
incoming.close();
outgoing.close();
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,""String_Node_Str"",e);
System.exit(1);
}
return;
}"
83970,"public void createLink(String parentPath,String childPath){
  parentPath=cleanPath(parentPath);
  childPath=cleanPath(childPath);
  Vertex parentVertex=nodeList.get(parentPath);
  Vertex childVertex=nodeList.get(childPath);
  if (parentVertex == null) {
    this.addNodeEvent(parentPath);
    parentVertex=nodeList.get(parentPath);
  }
  if (childVertex == null) {
    this.addNodeEvent(childPath);
    childVertex=nodeList.get(childPath);
  }
  Edge e=graph.aConnectingEdge(parentVertex,childVertex);
  if (e == Edge.NONE) {
    graph.insertDirectedEdge(parentVertex,childVertex,""String_Node_Str"");
    System.out.println(""String_Node_Str"" + parentPath + ""String_Node_Str""+ childPath);
  }
}","public void createLink(String parentPath,String childPath){
  parentPath=cleanPath(parentPath);
  childPath=cleanPath(childPath);
  Vertex parentVertex=nodeList.get(parentPath);
  Vertex childVertex=nodeList.get(childPath);
  if (parentVertex == null) {
    this.addNodeEvent(parentPath);
    parentVertex=nodeList.get(parentPath);
  }
  if (childVertex == null) {
    this.addNodeEvent(childPath);
    childVertex=nodeList.get(childPath);
  }
  Edge e=graph.aConnectingEdge(parentVertex,childVertex);
  if (e == Edge.NONE) {
    graph.insertDirectedEdge(parentVertex,childVertex,""String_Node_Str"");
    logger.info(""String_Node_Str"" + parentPath + ""String_Node_Str""+ childPath);
  }
}"
83971,"public synchronized boolean addNode(String resourcePath){
  logger.info(""String_Node_Str"" + resourcePath);
  if (resourcePath != null) {
    Resource resource=RESTServer.getResource(resourcePath);
    Vertex thisVertex=null;
    boolean symlink=false;
    if ((thisVertex=internalGraph.insertVertex(resourcePath)) != null) {
      thisVertex.set(""String_Node_Str"",resourcePath);
      String linksToStr=null;
      if (resource.getType() == ResourceUtils.DEFAULT_RSRC || resource.getType() == ResourceUtils.GENERIC_PUBLISHER_RSRC) {
        pubNodes.put(resource.getURI(),thisVertex);
      }
 else       if (resource.getType() == ResourceUtils.SYMLINK_RSRC) {
        symlinkNodes.put(resource.getURI(),thisVertex);
        linksToStr=((SymlinkResource)resource).getLinkString();
        Vertex linksToNode=null;
        if (linksToStr.startsWith(""String_Node_Str"")) {
          Vertex node=getVertex(linksToStr);
          if (node == null) {
            node=internalGraph.insertVertex(linksToStr);
            node.set(""String_Node_Str"",linksToStr);
          }
          externalNodes.put(linksToStr,node);
        }
 else {
          linksToNode=getVertex(linksToStr);
        }
        internalGraph.insertDirectedEdge(thisVertex,linksToNode,""String_Node_Str"");
        symlink=true;
        routerAddLink(resourcePath,linksToStr);
      }
 else {
        nonpubNodes.put(resource.getURI(),thisVertex);
        String parent=getParentPath(resource.getURI());
        Vertex parentVertex=getVertex(parent);
      }
      String parent=getParentPath(resource.getURI());
      Vertex parentVertex=getVertex(parent);
      if (symlink) {
        internalGraph.insertDirectedEdge(parentVertex,thisVertex,""String_Node_Str"");
        routerAddLink(parent,resourcePath);
        if (hasCycle()) {
          removeNode((String)thisVertex.get(""String_Node_Str""));
          Vertex linksToVertex=getVertex(linksToStr);
          removeNode((String)linksToVertex.get(""String_Node_Str""));
          routerRemoveNode((String)thisVertex.get(""String_Node_Str""));
          routerRemoveNode((String)linksToVertex.get(""String_Node_Str""));
          return false;
        }
 else {
          logger.fine(""String_Node_Str"");
        }
      }
 else {
        internalGraph.insertDirectedEdge(parentVertex,thisVertex,""String_Node_Str"");
        routerAddLink(parent,resourcePath);
      }
      return true;
    }
  }
  return false;
}","public synchronized boolean addNode(String resourcePath){
  logger.info(""String_Node_Str"" + resourcePath);
  if (resourcePath != null) {
    Resource resource=RESTServer.getResource(resourcePath);
    Vertex thisVertex=null;
    boolean symlink=false;
    if ((thisVertex=internalGraph.insertVertex(resourcePath)) != null) {
      routerAddNode(resourcePath);
      thisVertex.set(""String_Node_Str"",resourcePath);
      String linksToStr=null;
      if (resource.getType() == ResourceUtils.DEFAULT_RSRC || resource.getType() == ResourceUtils.GENERIC_PUBLISHER_RSRC) {
        pubNodes.put(resource.getURI(),thisVertex);
      }
 else       if (resource.getType() == ResourceUtils.SYMLINK_RSRC) {
        symlinkNodes.put(resource.getURI(),thisVertex);
        linksToStr=((SymlinkResource)resource).getLinkString();
        Vertex linksToNode=null;
        if (linksToStr.startsWith(""String_Node_Str"")) {
          Vertex node=getVertex(linksToStr);
          if (node == null) {
            node=internalGraph.insertVertex(linksToStr);
            node.set(""String_Node_Str"",linksToStr);
          }
          externalNodes.put(linksToStr,node);
        }
 else {
          linksToNode=getVertex(linksToStr);
        }
        internalGraph.insertDirectedEdge(thisVertex,linksToNode,""String_Node_Str"");
        symlink=true;
        routerAddLink(resourcePath,linksToStr);
      }
 else {
        nonpubNodes.put(resource.getURI(),thisVertex);
        String parent=getParentPath(resource.getURI());
        Vertex parentVertex=getVertex(parent);
      }
      String parent=getParentPath(resource.getURI());
      Vertex parentVertex=getVertex(parent);
      if (symlink) {
        internalGraph.insertDirectedEdge(parentVertex,thisVertex,""String_Node_Str"");
        routerAddLink(parent,resourcePath);
        if (hasCycle()) {
          removeNode((String)thisVertex.get(""String_Node_Str""));
          Vertex linksToVertex=getVertex(linksToStr);
          removeNode((String)linksToVertex.get(""String_Node_Str""));
          routerRemoveNode((String)thisVertex.get(""String_Node_Str""));
          routerRemoveNode((String)linksToVertex.get(""String_Node_Str""));
          return false;
        }
 else {
          logger.fine(""String_Node_Str"");
        }
      }
 else {
        internalGraph.insertDirectedEdge(parentVertex,thisVertex,""String_Node_Str"");
        routerAddLink(parent,resourcePath);
      }
      return true;
    }
  }
  return false;
}"
83972,"public String queryAgg(String path,String aggtype,String units,JSONObject queryJson){
  try {
    RouterCommand rcmd=new RouterCommand(RouterCommand.CommandType.PULL);
    rcmd.setSrcVertex(path);
    rcmd.setAggType(aggtype);
    rcmd.setUnits(units);
    routerOut.writeObject(rcmd);
    routerOut.flush();
    rcmd=(RouterCommand)routerIn.readObject();
    return rcmd.data;
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  return null;
}","public String queryAgg(String path,String aggtype,String units,JSONObject queryJson){
  try {
    setRouterCommInfo(""String_Node_Str"",9999);
    RouterCommand rcmd=new RouterCommand(RouterCommand.CommandType.PULL);
    rcmd.setSrcVertex(path);
    rcmd.setAggType(aggtype);
    rcmd.setUnits(units);
    routerOut.writeObject(rcmd);
    routerOut.flush();
    rcmd=(RouterCommand)routerIn.readObject();
    return rcmd.data;
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  return null;
}"
83973,"public byte getTypeCode(String type) throws ApplicationFault {
  if (this.types.containsKey(type))   return this.types.get(type);
  throw new ApplicationFault(""String_Node_Str"" + type + ""String_Node_Str"");
}","public Byte getTypeCode(String type) throws ApplicationFault {
  if (StringUtils.isEmpty(type))   return null;
  if (this.types.containsKey(type))   return this.types.get(type);
  throw new ApplicationFault(""String_Node_Str"" + type + ""String_Node_Str"");
}"
83974,"/** 
 * Set a new stopword list. This also refreshes the existing list.
 * @param words
 * @throws SystemFault
 */
public void setStopwords(List<String> words) throws SystemFault {
  StopwordRefresh.add(words);
  Set<String> newStopWords=new HashSet<String>();
  newStopWords.addAll(words);
  Set<String> stopWordsTemp=this.stopWords;
  this.stopWords=newStopWords;
  stopWordsTemp.clear();
  stopWordsTemp=null;
}","/** 
 * Set a new stopword list. This also refreshes the existing list.
 * @param words
 * @throws SystemFault
 */
public void setStopwords(List<String> words) throws SystemFault {
  StopwordRefresh.add(words);
  Set<String> newStopWords=new HashSet<String>();
  newStopWords.addAll(words);
  this.stopWords=newStopWords;
}"
83975,"public Object process() throws ApplicationFault, SystemFault {
  NV nv=new NV(IOConstants.NAME_VALUE_BYTES,IOConstants.NAME_VALUE_BYTES);
  RecordScalar scalar=new RecordScalar(STOP_WORD_LISTS_KEY,nv);
  HReader.getScalar(IOConstants.TABLE_CONFIG,scalar);
  if (null != scalar.kv.data) {
    String words=new String(scalar.kv.data.toBytes());
    List<String> wordLst=StringUtils.fastSplit(words,STOPWORD_SEPARATOR);
    Set<String> stopWordsTemp=StopwordManager.getInstance().stopWords;
    StopwordManager.getInstance().stopWords=buildStopwords(wordLst);
    stopWordsTemp.clear();
    stopWordsTemp=null;
  }
  return null;
}","public Object process() throws ApplicationFault, SystemFault {
  NV nv=new NV(IOConstants.NAME_VALUE_BYTES,IOConstants.NAME_VALUE_BYTES);
  RecordScalar scalar=new RecordScalar(STOP_WORD_LISTS_KEY,nv);
  HReader.getScalar(IOConstants.TABLE_CONFIG,scalar);
  if (null != scalar.kv.data) {
    String words=new String(scalar.kv.data.toBytes());
    List<String> wordLst=StringUtils.fastSplit(words,STOPWORD_SEPARATOR);
    Set<String> stopWordsTemp=StopwordManager.getInstance().stopWords;
    StopwordManager.getInstance().stopWords=buildStopwords(wordLst);
    if (null != stopWordsTemp)     stopWordsTemp.clear();
    stopWordsTemp=null;
  }
  return null;
}"
83976,"/** 
 * This subsets across all MUST queries. Last 2 must queries are already in sync from the processing.
 * @param planner
 * @param lastMustQuery
 */
private void intersectMustQs(QueryPlanner planner,QueryTerm lastMustQuery){
  if (null == lastMustQuery)   return;
  int stepsT=planner.sequences.size();
  boolean ignoreNext=false;
  for (int step=stepsT - 1; step > -1; step--) {
    List<QueryTerm> curStep=planner.sequences.get(step);
    if (curStep.size() != 1)     continue;
    QueryTerm curQuery=curStep.get(0);
    if (curQuery.isOptional)     continue;
    if (lastMustQuery == curQuery) {
      ignoreNext=true;
      continue;
    }
    if (ignoreNext) {
      ignoreNext=false;
      continue;
    }
    Map<Long,TermList> curBuckets=curQuery.foundIds;
    Map<Long,TermList> lastBuckets=lastMustQuery.foundIds;
    int curBucketsT=curBuckets.size();
    Iterator<Long> curBucketsItr=curBuckets.keySet().iterator();
    for (int i=0; i < curBucketsT; i++) {
      Long bucketId=curBucketsItr.next();
      boolean hasElements=lastBuckets.containsKey(bucketId);
      if (hasElements) {
        hasElements=curBuckets.get(bucketId).intersect(lastBuckets.get(bucketId));
        if (!hasElements) {
          curBucketsItr.remove();
          lastBuckets.remove(bucketId);
        }
      }
 else {
        curBucketsItr.remove();
      }
    }
  }
}","/** 
 * This subsets across all MUST queries. Last 2 must queries are already in sync from the processing.
 * @param planner
 * @param lastMustQuery
 */
private void intersectMustQs(QueryPlanner planner,QueryTerm lastMustQuery){
  if (null == lastMustQuery)   return;
  int stepsT=planner.sequences.size();
  for (int step=stepsT - 1; step > -1; step--) {
    List<QueryTerm> curStep=planner.sequences.get(step);
    if (curStep.size() != 1)     continue;
    QueryTerm curQuery=curStep.get(0);
    if (curQuery.isOptional)     continue;
    if (lastMustQuery == curQuery)     continue;
    Map<Long,TermList> curBuckets=curQuery.foundIds;
    Map<Long,TermList> lastBuckets=lastMustQuery.foundIds;
    int curBucketsT=curBuckets.size();
    Iterator<Long> curBucketsItr=curBuckets.keySet().iterator();
    for (int i=0; i < curBucketsT; i++) {
      Long bucketId=curBucketsItr.next();
      boolean hasElements=lastBuckets.containsKey(bucketId);
      if (hasElements) {
        hasElements=curBuckets.get(bucketId).intersect(lastBuckets.get(bucketId));
        if (!hasElements) {
          curBucketsItr.remove();
          lastBuckets.remove(bucketId);
        }
      }
 else {
        curBucketsItr.remove();
      }
    }
  }
}"
83977,"/** 
 * Remove the document at the specified position
 * @param bytes
 * @return
 */
public static byte[] delete(byte[] bytes,short docPos){
  if (null == bytes)   return null;
  int pos=0;
  int bytesT=bytes.length;
  if (0 == bytesT)   return null;
  Map<Integer,Integer> rowcol=new HashMap<Integer,Integer>();
  int row=0;
  int termsT=0;
  int col=-1;
  short dp;
  while (pos < bytesT) {
    row++;
    pos=pos + 4;
    termsT=(byte)bytes[pos++];
    if (-1 == termsT) {
      termsT=Storable.getInt(pos,bytes);
      pos=pos + 4;
    }
    pos=pos + (termsT * 3);
    if (TermList.termVectorStorageEnabled)     pos=pos + (termsT * 3);
    col=-2;
    for (int i=0; i < termsT; i++) {
      dp=Storable.getShort(pos,bytes);
      pos=pos + 2;
      if (dp == docPos) {
        col=(termsT == 1) ? -1 : i;
        break;
      }
    }
    if (-2 != col) {
      rowcol.put(row,col);
      pos=pos + (termsT - col - 1) * 2;
    }
  }
  pos=0;
  row=0;
  ByteBuffer bb=ByteBuffer.allocate(bytes.length);
  while (pos < bytesT) {
    row++;
    boolean cutRow=rowcol.containsKey(row);
    if (cutRow && rowcol.get(row) == -1) {
      pos=pos + 4;
      termsT=(byte)bytes[pos++];
      if (-1 == termsT)       termsT=Storable.getInt(pos,bytes);
      pos=pos + 4;
      if (TermList.termVectorStorageEnabled)       pos=pos + termsT * 8;
 else       pos=pos + termsT * 5;
      continue;
    }
    bb.put(bytes,pos,4);
    pos=pos + 4;
    termsT=(byte)bytes[pos++];
    if (-1 == termsT) {
      bb.put((byte)-1);
      termsT=Storable.getInt(pos,bytes);
      bb.put(bytes,pos,4);
      pos=pos + 4;
    }
 else {
      if (cutRow)       bb.put((byte)(termsT - 1));
 else       bb.put((byte)(termsT));
    }
    if (cutRow) {
      col=rowcol.get(row);
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (TermList.termVectorStorageEnabled) {
        if (col != 0)         bb.put(bytes,pos,col);
        bb.put(bytes,pos + col + 1,termsT - col - 1);
        pos=pos + termsT;
        if (col != 0)         bb.put(bytes,pos,(col) * 2);
        bb.put(bytes,pos + (col + 1) * 2,(termsT - col - 1) * 2);
        pos=pos + termsT * 2;
      }
      if (col != 0)       bb.put(bytes,pos,col * 2);
      bb.put(bytes,pos + (col + 1) * 2,(termsT - col - 1) * 2);
      pos=pos + termsT * 2;
    }
 else {
      if (TermList.termVectorStorageEnabled) {
        bb.put(bytes,pos,termsT * 8);
        pos=pos + termsT * 8;
      }
 else {
        bb.put(bytes,pos,termsT * 5);
        pos=pos + termsT * 5;
      }
    }
  }
  int len=bb.position();
  if (0 == len)   return null;
  byte[] deletedB=new byte[len];
  bb.position(0);
  bb.get(deletedB,0,len);
  bb.clear();
  return deletedB;
}","/** 
 * Remove the document at the specified position
 * @param bytes
 * @return
 */
public static byte[] delete(byte[] bytes,short docPos){
  if (null == bytes)   return null;
  int pos=0;
  int bytesT=bytes.length;
  if (0 == bytesT)   return null;
  Map<Integer,Integer> rowcol=new HashMap<Integer,Integer>();
  int row=0;
  int termsT=0;
  int col=-1;
  short dp;
  while (pos < bytesT) {
    row++;
    pos=pos + 4;
    termsT=(byte)bytes[pos++];
    if (-1 == termsT) {
      termsT=Storable.getInt(pos,bytes);
      pos=pos + 4;
    }
    pos=pos + (termsT * 3);
    if (TermList.termVectorStorageEnabled)     pos=pos + (termsT * 3);
    col=Integer.MIN_VALUE;
    for (int i=0; i < termsT; i++) {
      dp=Storable.getShort(pos,bytes);
      pos=pos + 2;
      if (dp == docPos) {
        pos=pos + (termsT - i - 1) * 2;
        col=(termsT == 1) ? -1 : i;
        break;
      }
    }
    if (Integer.MIN_VALUE != col)     rowcol.put(row,col);
  }
  pos=0;
  row=0;
  ByteBuffer bb=ByteBuffer.allocate(bytes.length);
  while (pos < bytesT) {
    row++;
    boolean cutRow=rowcol.containsKey(row);
    if (cutRow && rowcol.get(row) == -1) {
      pos=pos + 4;
      termsT=(byte)bytes[pos++];
      if (-1 == termsT) {
        termsT=Storable.getInt(pos,bytes);
        pos=pos + 4;
      }
      if (TermList.termVectorStorageEnabled)       pos=pos + termsT * 8;
 else       pos=pos + termsT * 5;
      continue;
    }
    bb.put(bytes,pos,4);
    pos=pos + 4;
    termsT=(byte)bytes[pos++];
    if (-1 == termsT) {
      bb.put((byte)-1);
      termsT=Storable.getInt(pos,bytes);
      bb.put(bytes,pos,4);
      pos=pos + 4;
    }
 else {
      if (cutRow)       bb.put((byte)(termsT - 1));
 else       bb.put((byte)(termsT));
    }
    if (cutRow) {
      col=rowcol.get(row);
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (col != 0)       bb.put(bytes,pos,col);
      bb.put(bytes,pos + col + 1,termsT - col - 1);
      pos=pos + termsT;
      if (TermList.termVectorStorageEnabled) {
        if (col != 0)         bb.put(bytes,pos,col);
        bb.put(bytes,pos + col + 1,termsT - col - 1);
        pos=pos + termsT;
        if (col != 0)         bb.put(bytes,pos,(col) * 2);
        bb.put(bytes,pos + (col + 1) * 2,(termsT - col - 1) * 2);
        pos=pos + termsT * 2;
      }
      if (col != 0)       bb.put(bytes,pos,col * 2);
      bb.put(bytes,pos + (col + 1) * 2,(termsT - col - 1) * 2);
      pos=pos + termsT * 2;
    }
 else {
      if (TermList.termVectorStorageEnabled) {
        bb.put(bytes,pos,termsT * 8);
        pos=pos + termsT * 8;
      }
 else {
        bb.put(bytes,pos,termsT * 5);
        pos=pos + termsT * 5;
      }
    }
  }
  int len=bb.position();
  if (0 == len)   return null;
  byte[] deletedB=new byte[len];
  bb.position(0);
  bb.get(deletedB,0,len);
  bb.clear();
  return deletedB;
}"
83978,"public void testIndexFieldInsert(String id,String title,String teaser) throws Exception {
  HDocument hdoc=new HDocument();
  hdoc.originalId=new Storable(id);
  hdoc.title=new Storable(title);
  hdoc.fields=new ArrayList<HField>();
  HField fld=new HField(""String_Node_Str"",FileReaderUtil.toString(""String_Node_Str""));
  hdoc.fields.add(fld);
  QueryResult res=IndexReader.getInstance().search(new QueryContext(id));
  IndexWriter.getInstance().insert(hdoc);
}","public void testIndexFieldInsert(String id,String title) throws Exception {
  HDocument hdoc=new HDocument();
  hdoc.originalId=new Storable(id);
  hdoc.title=new Storable(title);
  hdoc.fields=new ArrayList<HField>();
  HField fld=new HField(""String_Node_Str"",FileReaderUtil.toString(""String_Node_Str""));
  hdoc.fields.add(fld);
  IndexWriter.getInstance().insert(hdoc);
  QueryResult res=IndexReader.getInstance().search(new QueryContext(""String_Node_Str""));
  System.out.println(res.toString());
}"
83979,"public static void main(String[] args) throws Exception {
  IndexWriterTest t=new IndexWriterTest();
  Configuration conf=new Configuration();
  ServiceFactory.getInstance().init(conf,null);
  List<String> kwL=DictionaryManager.getInstance().getDictionary().getAll();
  for (  String kw : kwL) {
    System.out.println(kw.toString());
  }
  DictionaryManager.getInstance().deleteAll();
  t.testIndexMultiDoc(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  t.testIndexMultiDoc(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  t.testIndexMultiDoc(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public static void main(String[] args) throws Exception {
  IndexWriterTest t=new IndexWriterTest();
  Configuration conf=new Configuration();
  ServiceFactory.getInstance().init(conf,null);
  List<String> kwL=DictionaryManager.getInstance().getDictionary().getAll();
  for (  String kw : kwL) {
    System.out.println(kw.toString());
  }
  DictionaryManager.getInstance().deleteAll();
  t.testIndexFieldInsert(""String_Node_Str"",""String_Node_Str"");
}"
83980,"private Map<String,DocWeight> computeWeight(QueryContext ctx,QueryPlanner planner){
  Iterator<List<QueryTerm>> stepsItr=planner.sequences.iterator();
  int stepsT=planner.sequences.size();
  StringBuilder sb=new StringBuilder(100);
  long bucketId=-1;
  int termSize=-1;
  Iterator<Long> bucketItr=null;
  TermList tl=null;
  int bytePos=-1;
  float thisWt=-1;
  List<QueryTerm> qts=null;
  int qtSize=-1;
  Iterator<QueryTerm> qtItr=null;
  String mappedDocId=null;
  Map<String,DocWeight> docWeightMap=new Hashtable<String,DocWeight>(250);
  for (int stepsIndex=0; stepsIndex < stepsT; stepsIndex++) {
    qts=stepsItr.next();
    stepsItr.remove();
    if (null == qts)     continue;
    qtSize=qts.size();
    qtItr=qts.iterator();
    for (int qtIndex=0; qtIndex < qtSize; qtIndex++) {
      QueryTerm qt=qtItr.next();
      qtItr.remove();
      if (null == qt)       continue;
      Map<Long,TermList> founded=qt.foundIds;
      if (null == founded)       continue;
      bucketItr=founded.keySet().iterator();
      termSize=founded.size();
      for (int termIndex=0; termIndex < termSize; termIndex++) {
        bucketId=bucketItr.next();
        tl=founded.get(bucketId);
        if (null != tl) {
          bytePos=-1;
          for (          short docPos : tl.docPos) {
            bytePos++;
            if (-1 == docPos)             continue;
            sb.delete(0,100);
            sb.append(bucketId).append('_').append(docPos);
            mappedDocId=sb.toString();
            thisWt=(tl.termWeight[bytePos] * qt.preciousNess) + 1;
            if (docWeightMap.containsKey(mappedDocId)) {
              docWeightMap.get(mappedDocId).add(thisWt);
            }
 else {
              docWeightMap.put(mappedDocId,new DocWeight(mappedDocId,thisWt));
            }
          }
          tl.cleanup();
          bucketItr.remove();
        }
      }
    }
  }
  return docWeightMap;
}","private Map<String,DocWeight> computeWeight(QueryContext ctx,QueryPlanner planner){
  Iterator<List<QueryTerm>> stepsItr=planner.sequences.iterator();
  int stepsT=planner.sequences.size();
  StringBuilder sb=new StringBuilder(100);
  long bucketId=-1;
  int termSize=-1;
  Iterator<Long> bucketItr=null;
  TermList tl=null;
  int bytePos=-1;
  float thisWt=-1;
  List<QueryTerm> qts=null;
  int qtSize=-1;
  Iterator<QueryTerm> qtItr=null;
  String mappedDocId=null;
  Map<String,DocWeight> docWeightMap=new Hashtable<String,DocWeight>(250);
  for (int stepsIndex=0; stepsIndex < stepsT; stepsIndex++) {
    qts=stepsItr.next();
    stepsItr.remove();
    if (null == qts)     continue;
    qtSize=qts.size();
    qtItr=qts.iterator();
    for (int qtIndex=0; qtIndex < qtSize; qtIndex++) {
      QueryTerm qt=qtItr.next();
      qtItr.remove();
      if (null == qt)       continue;
      Map<Long,TermList> founded=qt.foundIds;
      if (null == founded)       continue;
      bucketItr=founded.keySet().iterator();
      termSize=founded.size();
      for (int termIndex=0; termIndex < termSize; termIndex++) {
        bucketId=bucketItr.next();
        tl=founded.get(bucketId);
        if (null == tl)         continue;
        bytePos=-1;
        for (        short docPos : tl.docPos) {
          bytePos++;
          if (-1 == docPos)           continue;
          sb.delete(0,100);
          sb.append(bucketId).append('_').append(docPos);
          mappedDocId=sb.toString();
          thisWt=(tl.termWeight[bytePos] * qt.preciousNess) + 1;
          if (docWeightMap.containsKey(mappedDocId)) {
            docWeightMap.get(mappedDocId).add(thisWt);
          }
 else {
            docWeightMap.put(mappedDocId,new DocWeight(mappedDocId,thisWt));
          }
        }
        tl.cleanup();
        bucketItr.remove();
      }
      founded.clear();
    }
  }
  planner.sequences.clear();
  return docWeightMap;
}"
83981,"public boolean visit(Object objQuery) throws ApplicationFault, SystemFault {
  HQuery query=(HQuery)objQuery;
  QueryContext ctx=query.ctx;
  QueryPlanner planner=query.planner;
  QueryResult result=query.result;
  Map<String,DocWeight> sortedStaticMap=computeWeight(ctx,planner);
  result.sortedStaticWeights=sortedStaticMap.values().toArray();
  DocWeight.sort(result.sortedStaticWeights);
  return true;
}","public boolean visit(Object objQuery) throws ApplicationFault, SystemFault {
  L.l.debug(""String_Node_Str"");
  HQuery query=(HQuery)objQuery;
  QueryContext ctx=query.ctx;
  QueryPlanner planner=query.planner;
  QueryResult result=query.result;
  Map<String,DocWeight> sortedStaticMap=computeWeight(ctx,planner);
  result.sortedStaticWeights=sortedStaticMap.values().toArray();
  DocWeight.sort(result.sortedStaticWeights);
  sortedStaticMap.clear();
  sortedStaticMap=null;
  return true;
}"
83982,"public static boolean compareBytes(char[] inputBytes,char[] compareBytes){
  int inputBytesT=inputBytes.length;
  int compareBytesT=compareBytes.length;
  if (compareBytesT != inputBytesT)   return false;
  if (compareBytes[0] != inputBytes[0])   return false;
  if (compareBytes[compareBytesT - 1] != inputBytes[compareBytesT - 1])   return false;
switch (compareBytesT) {
case 3:
    return compareBytes[1] == inputBytes[1];
case 4:
  return compareBytes[1] == inputBytes[1] && compareBytes[2] == inputBytes[2];
case 5:
return compareBytes[1] == inputBytes[1] && compareBytes[2] == inputBytes[2] && compareBytes[3] == inputBytes[3];
case 6:
return compareBytes[1] == inputBytes[1] && compareBytes[3] == inputBytes[3] && compareBytes[2] == inputBytes[2] && compareBytes[4] == inputBytes[4];
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
for (int i=0; i < compareBytesT - 1; i++) {
if (compareBytes[i] != inputBytes[i]) return false;
}
break;
case 31:
for (int a=1; a <= 6; a++) {
if (!(compareBytes[a] == inputBytes[a] && compareBytes[a + 6] == inputBytes[a + 6] && compareBytes[a + 12] == inputBytes[a + 12] && compareBytes[a + 18] == inputBytes[a + 18] && compareBytes[a + 24] == inputBytes[a + 24])) return false;
}
break;
default :
for (int i=0; i < compareBytesT - 1; i++) {
if (compareBytes[i] != inputBytes[i]) return false;
}
}
return true;
}","public static boolean compareBytes(char[] inputBytes,char[] compareBytes){
  int inputBytesT=inputBytes.length;
  int compareBytesT=compareBytes.length;
  if (compareBytesT != inputBytesT)   return false;
  if (compareBytes[0] != inputBytes[0])   return false;
  if (compareBytes[compareBytesT - 1] != inputBytes[compareBytesT - 1])   return false;
switch (compareBytesT) {
case 3:
    return compareBytes[1] == inputBytes[1];
case 4:
  return compareBytes[1] == inputBytes[1] && compareBytes[2] == inputBytes[2];
case 5:
return compareBytes[1] == inputBytes[1] && compareBytes[2] == inputBytes[2] && compareBytes[3] == inputBytes[3];
case 6:
return compareBytes[1] == inputBytes[1] && compareBytes[3] == inputBytes[3] && compareBytes[2] == inputBytes[2] && compareBytes[4] == inputBytes[4];
default :
compareBytesT--;
for (int i=0; i < compareBytesT; i++) {
if (compareBytes[i] != inputBytes[i]) return false;
}
}
return true;
}"
83983,"public static List<NVBytes> getCompleteRow(String tableName,byte[] pk) throws ApplicationFault {
  HBaseFacade facade=null;
  HTableWrapper table=null;
  Result r=null;
  try {
    facade=HBaseFacade.getInstance();
    table=facade.getTable(tableName);
    Get getter=new Get(pk);
    if (table.exists(getter)) {
      r=table.get(getter);
      List<NVBytes> nvs=new ArrayList<NVBytes>(r.list().size());
      for (      KeyValue kv : r.list()) {
        nvs.add(new NVBytes(kv.getFamily(),kv.getQualifier(),kv.getValue()));
      }
      return nvs;
    }
    return null;
  }
 catch (  Exception ex) {
    throw new ApplicationFault(""String_Node_Str"" + pk.toString(),ex);
  }
 finally {
    if (null != facade && null != table)     facade.putTable(table);
  }
}","public static List<NVBytes> getCompleteRow(String tableName,byte[] pk,Filter filter) throws ApplicationFault {
  HBaseFacade facade=null;
  HTableWrapper table=null;
  Result r=null;
  try {
    facade=HBaseFacade.getInstance();
    table=facade.getTable(tableName);
    Get getter=new Get(pk);
    if (null != filter)     getter.setFilter(filter);
    if (table.exists(getter)) {
      r=table.get(getter);
      List<NVBytes> nvs=new ArrayList<NVBytes>(r.list().size());
      for (      KeyValue kv : r.list()) {
        nvs.add(new NVBytes(kv.getFamily(),kv.getQualifier(),kv.getValue()));
      }
      return nvs;
    }
    return null;
  }
 catch (  Exception ex) {
    throw new ApplicationFault(""String_Node_Str"" + pk.toString(),ex);
  }
 finally {
    if (null != facade && null != table)     facade.putTable(table);
  }
}"
83984,"public boolean visit(Object objQuery) throws ApplicationFault, SystemFault {
  HQuery query=(HQuery)objQuery;
  QueryContext ctx=query.ctx;
  QueryResult res=query.result;
  if (null == res)   return true;
  if (null == res.sortedDynamicWeights)   return true;
  int foundT=res.sortedDynamicWeights.length;
  int maxFetching=(ctx.documentFetchLimit < foundT) ? ctx.documentFetchLimit : foundT;
  List<DocTeaserWeight> weightedTeasers=new ArrayList<DocTeaserWeight>(maxFetching);
  for (int i=0; i < maxFetching; i++) {
    DocMetaWeight metaWt=(DocMetaWeight)res.sortedDynamicWeights[i];
    byte[] idB=metaWt.id.getBytes();
    List<NVBytes> flds=HReader.getCompleteRow(IOConstants.TABLE_PREVIEW,idB);
    weightedTeasers.add(new DocTeaserWeight(idB,flds,metaWt.weight));
  }
  res.teasers=weightedTeasers.toArray();
  DocTeaserWeight.sort(res.teasers);
  return true;
}","public boolean visit(Object objQuery) throws ApplicationFault, SystemFault {
  HQuery query=(HQuery)objQuery;
  QueryContext ctx=query.ctx;
  QueryResult res=query.result;
  if (null == res)   return true;
  if (null == res.sortedDynamicWeights)   return true;
  int foundT=res.sortedDynamicWeights.length;
  int maxFetching=(ctx.documentFetchLimit < foundT) ? ctx.documentFetchLimit : foundT;
  List<DocTeaserWeight> weightedTeasers=new ArrayList<DocTeaserWeight>(maxFetching);
  int termsMT=(null == query.planner.mustTerms) ? 0 : query.planner.mustTerms.size();
  int termsOT=(null == query.planner.optionalTerms) ? 0 : query.planner.optionalTerms.size();
  byte[][] wordsB=new byte[termsMT + termsOT][];
  for (int i=0; i < termsMT; i++) {
    wordsB[i]=new Storable(query.planner.mustTerms.get(i).wordOrig).toBytes();
  }
  for (int i=0; i < termsOT; i++) {
    wordsB[i + termsMT]=new Storable(query.planner.optionalTerms.get(i).wordOrig).toBytes();
  }
  TeaserFilter tf=new TeaserFilter(wordsB);
  for (int i=0; i < maxFetching; i++) {
    DocMetaWeight metaWt=(DocMetaWeight)res.sortedDynamicWeights[i];
    byte[] idB=metaWt.id.getBytes();
    List<NVBytes> flds=HReader.getCompleteRow(IOConstants.TABLE_PREVIEW,idB,tf);
    weightedTeasers.add(new DocTeaserWeight(idB,flds,metaWt.weight));
  }
  res.teasers=weightedTeasers.toArray();
  DocTeaserWeight.sort(res.teasers);
  return true;
}"
83985,"public boolean isToday(){
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  formatter.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  if (formatter.format((new Date())).equals(formatter.format(this.birthday)))   return true;
  return false;
}","public boolean isToday(){
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  formatter.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  this.birthday.setDate(this.birthday.getDate() + 1);
  if (formatter.format((new Date())).equals(formatter.format(this.birthday))) {
    this.birthday.setDate(this.birthday.getDate() - 1);
    return true;
  }
  this.birthday.setDate(this.birthday.getDate() - 1);
  return false;
}"
83986,"@Override public void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  PersistenceManager pm=PMF.get().getPersistenceManager();
  long id=Long.parseLong(req.getParameter(""String_Node_Str""));
  String message=req.getParameter(""String_Node_Str"");
  FacebookClient fbClient=new DefaultFacebookClient(Config.ACCESS_TOKEN(req));
  User user=fbClient.fetchObject(Long.toString(id),User.class);
  Birthday bday=null;
  HttpSession session=req.getSession(true);
  try {
    bday=new Birthday(user.getBirthday(),user,message,(String)session.getAttribute(""String_Node_Str""),req);
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  try {
    pm.makePersistent(bday);
  }
  finally {
    pm.close();
  }
  resp.getWriter().println(""String_Node_Str"");
  resp.sendRedirect(""String_Node_Str"");
}","@Override public void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  PersistenceManager pm=PMF.get().getPersistenceManager();
  long id=Long.parseLong(req.getParameter(""String_Node_Str""));
  String message=req.getParameter(""String_Node_Str"");
  FacebookClient fbClient=new DefaultFacebookClient(Config.ACCESS_TOKEN(req));
  User user=fbClient.fetchObject(Long.toString(id),User.class);
  Birthday bday=null;
  HttpSession session=req.getSession(true);
  try {
    bday=new Birthday(user.getBirthday(),user,message,(String)session.getAttribute(""String_Node_Str""),req);
  }
 catch (  ParseException e) {
    resp.getWriter().println(""String_Node_Str"");
  }
  try {
    pm.makePersistent(bday);
  }
  finally {
    pm.close();
  }
  resp.getWriter().println(""String_Node_Str"");
  resp.sendRedirect(""String_Node_Str"");
}"
83987,"public void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  PersistenceManager pm=PMF.get().getPersistenceManager();
  List<Birthday> bdays=(List<Birthday>)pm.newQuery(Birthday.class).execute();
  List list=new ArrayList();
  for (  Birthday bday : bdays) {
    if (bday.isToday()) {
      FacebookClient fbClient=new DefaultFacebookClient(bday.getToken());
      FacebookType publishMessageResponse=fbClient.publish(bday.getUid() + ""String_Node_Str"",FacebookType.class,Parameter.with(""String_Node_Str"",bday.getMessage()));
      resp.getWriter().println(""String_Node_Str"" + publishMessageResponse.getId());
      list.add(""String_Node_Str"" + publishMessageResponse.getId() + ""String_Node_Str""+ ""String_Node_Str""+ bday.getUid()+ ""String_Node_Str""+ bday.getWisher()+ ""String_Node_Str""+ ""String_Node_Str""+ bday.getMessage());
    }
  }
  Properties props=new Properties();
  Session session=Session.getDefaultInstance(props,null);
  String msgBody=""String_Node_Str"";
  try {
    for (int i=0; i < list.size(); i++) {
      msgBody=msgBody + ""String_Node_Str"" + list.get(i);
    }
  }
 catch (  Exception e) {
  }
  try {
    Message msg=new MimeMessage(session);
    msg.setFrom(new InternetAddress(""String_Node_Str"",""String_Node_Str""));
    msg.addRecipient(Message.RecipientType.TO,new InternetAddress(""String_Node_Str"",""String_Node_Str""));
    msg.setSubject(""String_Node_Str"");
    msg.setText(msgBody);
    Transport.send(msg);
  }
 catch (  AddressException e) {
  }
catch (  MessagingException e) {
  }
}","public void doPost(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  PersistenceManager pm=PMF.get().getPersistenceManager();
  List<Birthday> bdays=(List<Birthday>)pm.newQuery(Birthday.class).execute();
  for (  Birthday bday : bdays) {
    if (bday.isToday()) {
      FacebookClient fbClient=new DefaultFacebookClient(bday.getToken());
      FacebookType publishMessageResponse=fbClient.publish(bday.getUid() + ""String_Node_Str"",FacebookType.class,Parameter.with(""String_Node_Str"",bday.getMessage()));
      resp.getWriter().println(""String_Node_Str"" + publishMessageResponse.getId());
    }
 else {
      resp.getWriter().println(bday.getDate() + ""String_Node_Str"");
    }
  }
}"
83988,"public int getAge(){
  if (birthday.getYear() == 70)   return 0;
  Calendar dateOfBirth=new GregorianCalendar(birthday.getYear(),birthday.getMonth(),birthday.getDay());
  Calendar then=new GregorianCalendar((new Date()).getYear(),birthday.getMonth(),birthday.getDay());
  int age=then.get(Calendar.YEAR) - dateOfBirth.get(Calendar.YEAR);
  dateOfBirth.add(Calendar.YEAR,age);
  if (then.before(dateOfBirth)) {
    age--;
  }
  return age;
}","public int getAge(){
  if (birthday.getYear() == 70)   return 0;
  Calendar dateOfBirth=new GregorianCalendar(birthday.getYear(),birthday.getMonth(),birthday.getDay());
  Calendar then=new GregorianCalendar((new Date()).getYear(),birthday.getMonth(),birthday.getDay());
  int age=then.get(Calendar.YEAR) - dateOfBirth.get(Calendar.YEAR);
  dateOfBirth.add(Calendar.YEAR,age);
  return age;
}"
83989,"public boolean isToday(){
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (formatter.format((new Date())).equals(formatter.format(this.birthday)))   return true;
  return false;
}","public boolean isToday(){
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  formatter.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  if (formatter.format((new Date())).equals(formatter.format(this.birthday)))   return true;
  return false;
}"
83990,"@Override protected void onBeforeRender(){
  super.onBeforeRender();
  if (isExpanded()) {
    container.add(AttributeAppenderFactory.newAttributeAppenderForClass(""String_Node_Str""));
  }
}","@Override protected void onBeforeRender(){
  super.onBeforeRender();
  addCssClasses();
}"
83991,"public final void togglePaneExpanded(final TogglePaneStateEvent stateEventParam){
  final TogglePaneState state=stateEventParam.getSource();
  Reqs.PRE_COND.Logic.requireTrue(isTogglePaneBelongingToThisAccordion(state),""String_Node_Str"");
  if (maximumOneTogglePaneExpanded) {
    Reqs.PRE_COND.Logic.requireTrue(expandedTogglePaneStates.size() <= 1,""String_Node_Str"");
    final List<TogglePaneState> expandedTogglePanesStatesCopy=new ArrayList<TogglePaneState>(expandedTogglePaneStates);
    for (    final TogglePaneState current : expandedTogglePanesStatesCopy) {
      current.toggleContent();
    }
  }
  expandedTogglePaneStates.add(stateEventParam.getSource());
  Reqs.POST_COND.Logic.requireTrue(expandedTogglePaneStates.size() == 1,""String_Node_Str"");
}","public final void togglePaneExpanded(final TogglePaneStateEvent stateEventParam){
  final TogglePaneState state=stateEventParam.getSource();
  Reqs.PRE_COND.Logic.requireTrue(isTogglePaneBelongingToThisAccordion(state),""String_Node_Str"");
  if (maximumOneTogglePaneExpanded) {
    Reqs.PRE_COND.Logic.requireTrue(expandedTogglePaneStates.size() <= 1,""String_Node_Str"");
    final List<TogglePaneState> expandedTogglePanesStatesCopy=new ArrayList<TogglePaneState>(expandedTogglePaneStates);
    for (    final TogglePaneState current : expandedTogglePanesStatesCopy) {
      current.toggleContent();
    }
    Reqs.POST_COND.Logic.requireTrue(expandedTogglePaneStates.size() == 1,""String_Node_Str"");
  }
  expandedTogglePaneStates.add(stateEventParam.getSource());
}"
83992,"private DynamicEntitiesResponse enumJpaEntities(final Context context,final String navProp){
  String alias=""String_Node_Str"";
  String from=context.jpaEntityType.getName() + ""String_Node_Str"" + alias;
  String where=null;
  Object edmObj=null;
  if (navProp != null) {
    where=String.format(""String_Node_Str"",alias,context.keyPropertyName,context.typeSafeEntityKey);
    String prop=null;
    int propCount=0;
    for (    String pn : navProp.split(""String_Node_Str"")) {
      String[] propSplit=pn.split(""String_Node_Str"");
      prop=propSplit[0];
      propCount++;
      if (edmObj instanceof EdmProperty) {
        throw new UnsupportedOperationException(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",alias));
      }
      edmObj=metadata.findEdmProperty(prop);
      if (edmObj instanceof EdmNavigationProperty) {
        EdmNavigationProperty propInfo=(EdmNavigationProperty)edmObj;
        context.jpaEntityType=findJPAEntityType(context.em,propInfo.toRole.type.name);
        context.ees=metadata.findEdmEntitySet(JPAEdmGenerator.getEntitySetName(context.jpaEntityType));
        prop=alias + ""String_Node_Str"" + prop;
        alias=""String_Node_Str"" + Integer.toString(propCount);
        from=String.format(""String_Node_Str"",from,prop,alias);
        if (propSplit.length > 1) {
          Object entityKey=OptionsQueryParser.parseIdObject(""String_Node_Str"" + propSplit[1]);
          context.keyPropertyName=JPAEdmGenerator.getId(context.jpaEntityType).getName();
          context.typeSafeEntityKey=typeSafeEntityKey(em,context.jpaEntityType,entityKey);
          where=String.format(""String_Node_Str"",alias,context.keyPropertyName,context.typeSafeEntityKey);
        }
      }
 else       if (edmObj instanceof EdmProperty) {
        EdmProperty propInfo=(EdmProperty)edmObj;
        alias=alias + ""String_Node_Str"" + propInfo.name;
        context.ees=null;
      }
      if (edmObj == null) {
        throw new EntityNotFoundException(String.format(""String_Node_Str"",pn));
      }
    }
  }
  String jpql=String.format(""String_Node_Str"",alias,from);
  JPQLGenerator jpqlGen=new JPQLGenerator(context.keyPropertyName,alias);
  if (context.query.filter != null) {
    String filterPredicate=jpqlGen.toJpql(context.query.filter);
    where=addWhereExpression(where,filterPredicate,""String_Node_Str"");
  }
  if (context.query.skipToken != null) {
    String skipPredicate=jpqlGen.toJpql(parseSkipToken(jpqlGen,context.query.orderBy,context.query.skipToken));
    where=addWhereExpression(where,skipPredicate,""String_Node_Str"");
  }
  if (where != null) {
    jpql=String.format(""String_Node_Str"",jpql,where);
  }
  if (context.query.orderBy != null) {
    String orders=""String_Node_Str"";
    for (    OrderByExpression orderBy : context.query.orderBy) {
      String field=jpqlGen.toJpql(orderBy.getExpression());
      if (orderBy.isAscending()) {
        orders=orders + field + ""String_Node_Str"";
      }
 else {
        orders=String.format(""String_Node_Str"",orders,field);
      }
    }
    jpql=jpql + ""String_Node_Str"" + orders.substring(0,orders.length() - 1);
  }
  Query tq=em.createQuery(jpql);
  Integer inlineCount=context.query.inlineCount == InlineCount.ALLPAGES ? tq.getResultList().size() : null;
  int queryMaxResult=maxResults;
  if (context.query.top != null) {
    if (context.query.top.equals(0)) {
      return DynamicEntitiesResponse.entities(null,inlineCount,null);
    }
    if (context.query.top < maxResults) {
      queryMaxResult=context.query.top;
    }
  }
  tq=tq.setMaxResults(queryMaxResult + 1);
  if (context.query.skip != null) {
    tq=tq.setFirstResult(context.query.skip);
  }
  @SuppressWarnings(""String_Node_Str"") List<Object> results=tq.getResultList();
  List<OEntity> entities=new LinkedList<OEntity>();
  if (edmObj instanceof EdmProperty) {
    EdmProperty propInfo=(EdmProperty)edmObj;
    if (results.size() != 1)     throw new RuntimeException(""String_Node_Str"" + results.size());
    Object value=results.get(0);
    OProperty<?> op=OProperties.simple(((EdmProperty)propInfo).name,((EdmProperty)propInfo).type,value);
    return DynamicEntitiesResponse.property(op);
  }
 else {
    entities=Enumerable.create(results).take(queryMaxResult).select(new Func1<Object,OEntity>(){
      public OEntity apply(      final Object input){
        return makeEntity(context,input);
      }
    }
).toList();
  }
  boolean useSkipToken=context.query.top != null ? context.query.top > maxResults && results.size() > queryMaxResult : results.size() > queryMaxResult;
  String skipToken=null;
  if (useSkipToken) {
    OEntity last=Enumerable.create(entities).last();
    skipToken=createSkipToken(context,last);
  }
  return DynamicEntitiesResponse.entities(entities,inlineCount,skipToken);
}","private DynamicEntitiesResponse enumJpaEntities(final Context context,final String navProp){
  String alias=""String_Node_Str"";
  String from=context.jpaEntityType.getName() + ""String_Node_Str"" + alias;
  String where=null;
  Object edmObj=null;
  if (navProp != null) {
    where=String.format(""String_Node_Str"",alias,context.keyPropertyName,context.typeSafeEntityKey);
    String prop=null;
    int propCount=0;
    for (    String pn : navProp.split(""String_Node_Str"")) {
      String[] propSplit=pn.split(""String_Node_Str"");
      prop=propSplit[0];
      propCount++;
      if (edmObj instanceof EdmProperty) {
        throw new UnsupportedOperationException(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",alias));
      }
      edmObj=metadata.findEdmProperty(prop);
      if (edmObj instanceof EdmNavigationProperty) {
        EdmNavigationProperty propInfo=(EdmNavigationProperty)edmObj;
        context.jpaEntityType=findJPAEntityType(context.em,propInfo.toRole.type.name);
        context.ees=metadata.findEdmEntitySet(JPAEdmGenerator.getEntitySetName(context.jpaEntityType));
        prop=alias + ""String_Node_Str"" + prop;
        alias=""String_Node_Str"" + Integer.toString(propCount);
        from=String.format(""String_Node_Str"",from,prop,alias);
        if (propSplit.length > 1) {
          Object entityKey=OptionsQueryParser.parseIdObject(""String_Node_Str"" + propSplit[1]);
          context.keyPropertyName=JPAEdmGenerator.getId(context.jpaEntityType).getName();
          context.typeSafeEntityKey=typeSafeEntityKey(em,context.jpaEntityType,entityKey);
          where=String.format(""String_Node_Str"",alias,context.keyPropertyName,context.typeSafeEntityKey);
        }
      }
 else       if (edmObj instanceof EdmProperty) {
        EdmProperty propInfo=(EdmProperty)edmObj;
        alias=alias + ""String_Node_Str"" + propInfo.name;
        context.ees=null;
      }
      if (edmObj == null) {
        throw new EntityNotFoundException(String.format(""String_Node_Str"",pn));
      }
    }
  }
  String jpql=String.format(""String_Node_Str"",alias,from);
  JPQLGenerator jpqlGen=new JPQLGenerator(context.keyPropertyName,alias);
  if (context.query.filter != null) {
    String filterPredicate=jpqlGen.toJpql(context.query.filter);
    where=addWhereExpression(where,filterPredicate,""String_Node_Str"");
  }
  if (context.query.skipToken != null) {
    String skipPredicate=jpqlGen.toJpql(parseSkipToken(jpqlGen,context.query.orderBy,context.query.skipToken));
    where=addWhereExpression(where,skipPredicate,""String_Node_Str"");
  }
  if (where != null) {
    jpql=String.format(""String_Node_Str"",jpql,where);
  }
  if (context.query.orderBy != null) {
    String orders=""String_Node_Str"";
    for (    OrderByExpression orderBy : context.query.orderBy) {
      String field=jpqlGen.toJpql(orderBy.getExpression());
      if (orderBy.isAscending()) {
        orders=orders + field + ""String_Node_Str"";
      }
 else {
        orders=String.format(""String_Node_Str"",orders,field);
      }
    }
    jpql=jpql + ""String_Node_Str"" + orders.substring(0,orders.length() - 1);
  }
  Query tq=context.em.createQuery(jpql);
  Integer inlineCount=context.query.inlineCount == InlineCount.ALLPAGES ? tq.getResultList().size() : null;
  int queryMaxResult=maxResults;
  if (context.query.top != null) {
    if (context.query.top.equals(0)) {
      return DynamicEntitiesResponse.entities(null,inlineCount,null);
    }
    if (context.query.top < maxResults) {
      queryMaxResult=context.query.top;
    }
  }
  tq=tq.setMaxResults(queryMaxResult + 1);
  if (context.query.skip != null) {
    tq=tq.setFirstResult(context.query.skip);
  }
  @SuppressWarnings(""String_Node_Str"") List<Object> results=tq.getResultList();
  List<OEntity> entities=new LinkedList<OEntity>();
  if (edmObj instanceof EdmProperty) {
    EdmProperty propInfo=(EdmProperty)edmObj;
    if (results.size() != 1)     throw new RuntimeException(""String_Node_Str"" + results.size());
    Object value=results.get(0);
    OProperty<?> op=OProperties.simple(((EdmProperty)propInfo).name,((EdmProperty)propInfo).type,value);
    return DynamicEntitiesResponse.property(op);
  }
 else {
    entities=Enumerable.create(results).take(queryMaxResult).select(new Func1<Object,OEntity>(){
      public OEntity apply(      final Object input){
        return makeEntity(context,input);
      }
    }
).toList();
  }
  boolean useSkipToken=context.query.top != null ? context.query.top > maxResults && results.size() > queryMaxResult : results.size() > queryMaxResult;
  String skipToken=null;
  if (useSkipToken) {
    OEntity last=Enumerable.create(entities).last();
    skipToken=createSkipToken(context,last);
  }
  return DynamicEntitiesResponse.entities(entities,inlineCount,skipToken);
}"
83993,"public static EdmDataServices parseMetadata(XMLEventReader2 reader){
  List<EdmSchema> schemas=new ArrayList<EdmSchema>();
  ODataVersion version=null;
  boolean foundDataServices=false;
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    boolean shouldReturn=false;
    if (isStartElement(event,EDMX_DATASERVICES)) {
      foundDataServices=true;
      String str=getAttributeValueIfExists(event.asStartElement(),new QName2(NS_METADATA,""String_Node_Str""));
      version=str != null ? ODataVersion.valueOf(str) : null;
    }
    if (isStartElement(event,EDM2006_SCHEMA,EDM2007_SCHEMA,EDM2008_SCHEMA,EDM2009_SCHEMA)) {
      schemas.add(parseEdmSchema(reader,event.asStartElement()));
      if (!foundDataServices)       shouldReturn=true;
    }
    if (isEndElement(event,EDMX_DATASERVICES))     shouldReturn=true;
    if (shouldReturn) {
      EdmDataServices rt=new EdmDataServices(version,schemas);
      resolve(rt);
      return rt;
    }
  }
  throw new UnsupportedOperationException();
}","public static EdmDataServices parseMetadata(XMLEventReader2 reader){
  List<EdmSchema> schemas=new ArrayList<EdmSchema>();
  ODataVersion version=null;
  boolean foundDataServices=false;
  while (reader.hasNext()) {
    XMLEvent2 event=reader.nextEvent();
    boolean shouldReturn=false;
    if (isStartElement(event,EDMX_DATASERVICES)) {
      foundDataServices=true;
      String str=getAttributeValueIfExists(event.asStartElement(),new QName2(NS_METADATA,""String_Node_Str""));
      version=str != null ? ODataVersion.parse(str) : null;
    }
    if (isStartElement(event,EDM2006_SCHEMA,EDM2007_SCHEMA,EDM2008_SCHEMA,EDM2009_SCHEMA)) {
      schemas.add(parseEdmSchema(reader,event.asStartElement()));
      if (!foundDataServices)       shouldReturn=true;
    }
    if (isEndElement(event,EDMX_DATASERVICES))     shouldReturn=true;
    if (shouldReturn) {
      EdmDataServices rt=new EdmDataServices(version,schemas);
      resolve(rt);
      return rt;
    }
  }
  throw new UnsupportedOperationException();
}"
83994,"/** 
 * adds the property. This property can be a navigation property too. In this case a link will be added. If it's the meta data the information will be added to the entry too.
 */
protected void addProperty(JsonEntry entry,EdmEntitySet ees,String name,JsonStreamReader jsr){
  if (METADATA_PROPERTY.equals(name)) {
    JsonEntryMetaData jemd=parseMetadata(jsr);
    entry.etag=jemd.etag;
    JsonEvent event=jsr.nextEvent();
    ensureStartProperty(event);
    name=event.asStartProperty().getName();
  }
  JsonEvent event=jsr.nextEvent();
  if (event.isEndProperty()) {
    EdmProperty ep=ees.type.getProperty(name);
    if (ep == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str""+ ees.name);
    }
    entry.properties.add(JsonTypeConverter.parse(name,ep.type,event.asEndProperty().getValue()));
  }
 else   if (event.isStartObject()) {
    JsonObjectPropertyValue val=getValue(event,ees,name,jsr);
    if (val.uri != null) {
      entry.links.add(OLinks.relatedEntity(name,name,val.uri));
    }
 else     if (val.entity != null) {
      entry.links.add(OLinks.relatedEntityInline(name,name,entry.getUri() + ""String_Node_Str"" + name,val.entity));
    }
 else {
      entry.links.add(OLinks.relatedEntitiesInline(name,name,entry.getUri() + ""String_Node_Str"" + name,val.entities));
    }
  }
 else   if (event.isStartArray()) {
    ensureNext(jsr);
    event=jsr.nextEvent();
    if (event.isValue()) {
      throw new IllegalArgumentException(""String_Node_Str"" + ees.name + ""String_Node_Str""+ name);
    }
 else     if (event.isStartObject()) {
      EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
      if (navProp == null) {
        System.out.println(""String_Node_Str"");
      }
      ees=metadata.getEdmEntitySet(navProp.toRole.type);
      List<OEntity> entities=new ArrayList<OEntity>();
      do {
        entities.add(parseEntry(ees,jsr).getEntity());
        event=jsr.nextEvent();
      }
 while (!event.isEndArray());
      entry.links.add(OLinks.relatedEntitiesInline(name,name,entry.getUri() + ""String_Node_Str"" + name,entities));
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    ensureEndProperty(jsr.nextEvent());
  }
}","/** 
 * adds the property. This property can be a navigation property too. In this case a link will be added. If it's the meta data the information will be added to the entry too.
 */
protected void addProperty(JsonEntry entry,EdmEntitySet ees,String name,JsonStreamReader jsr){
  if (METADATA_PROPERTY.equals(name)) {
    JsonEntryMetaData jemd=parseMetadata(jsr);
    entry.etag=jemd.etag;
    JsonEvent event=jsr.nextEvent();
    ensureStartProperty(event);
    name=event.asStartProperty().getName();
  }
  JsonEvent event=jsr.nextEvent();
  if (event.isEndProperty()) {
    EdmProperty ep=ees.type.getProperty(name);
    if (ep == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str""+ ees.name);
    }
    entry.properties.add(JsonTypeConverter.parse(name,ep.type,event.asEndProperty().getValue()));
  }
 else   if (event.isStartObject()) {
    JsonObjectPropertyValue val=getValue(event,ees,name,jsr);
    if (val.uri != null) {
      entry.links.add(OLinks.relatedEntity(name,name,val.uri));
    }
 else     if (val.entity != null) {
      entry.links.add(OLinks.relatedEntityInline(name,name,entry.getUri() + ""String_Node_Str"" + name,val.entity));
    }
 else {
      entry.links.add(OLinks.relatedEntitiesInline(name,name,entry.getUri() + ""String_Node_Str"" + name,val.entities));
    }
  }
 else   if (event.isStartArray()) {
    ensureNext(jsr);
    event=jsr.nextEvent();
    if (event.isValue()) {
      throw new IllegalArgumentException(""String_Node_Str"" + ees.name + ""String_Node_Str""+ name);
    }
 else     if (event.isStartObject()) {
      EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
      ees=metadata.getEdmEntitySet(navProp.toRole.type);
      List<OEntity> entities=new ArrayList<OEntity>();
      do {
        entities.add(parseEntry(ees,jsr).getEntity());
        event=jsr.nextEvent();
      }
 while (!event.isEndArray());
      entry.links.add(OLinks.relatedEntitiesInline(name,name,entry.getUri() + ""String_Node_Str"" + name,entities));
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    ensureEndProperty(jsr.nextEvent());
  }
}"
83995,"protected JsonObjectPropertyValue getValue(JsonEvent event,EdmEntitySet ees,String name,JsonStreamReader jsr){
  JsonObjectPropertyValue rt=new JsonObjectPropertyValue();
  ensureStartObject(event);
  event=jsr.nextEvent();
  ensureStartProperty(event);
  if (DEFERRED_PROPERTY.equals(event.asStartProperty().getName())) {
    ensureStartObject(jsr.nextEvent());
    ensureStartProperty(jsr.nextEvent(),URI_PROPERTY);
    String uri=jsr.nextEvent().asEndProperty().getValue();
    rt.uri=uri;
    ensureEndObject(jsr.nextEvent());
    ensureEndProperty(jsr.nextEvent());
    ensureEndObject(jsr.nextEvent());
  }
 else   if (RESULTS_PROPERTY.equals(event.asStartProperty().getName())) {
    if (version == ODataVersion.V1) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    ensureStartArray(jsr.nextEvent());
    Feed feed=parseFeed(metadata.getEdmEntitySet(navProp.toRole.type),jsr);
    rt.entities=Enumerable.create(feed.getEntries()).cast(JsonEntry.class).select(new Func1<JsonEntry,OEntity>(){
      @Override public OEntity apply(      JsonEntry input){
        return input.getEntity();
      }
    }
).toList();
    ensureEndProperty(jsr.nextEvent());
    ensureEndObject(jsr.nextEvent());
  }
 else   if (METADATA_PROPERTY.equals(event.asStartProperty().getName())) {
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    JsonEntryMetaData jemd=parseMetadata(jsr);
    JsonEntry refentry=parseEntry(jemd,metadata.getEdmEntitySet(navProp.toRole.type),jsr);
    if (isResponse) {
      rt.entity=refentry.getEntity();
    }
 else {
      boolean isInlined=!refentry.properties.isEmpty() || !refentry.links.isEmpty();
      if (isInlined) {
        rt.entity=refentry.getEntity();
      }
 else {
        rt.uri=jemd.uri;
      }
    }
  }
 else   if (event.isStartProperty()) {
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    ees=metadata.getEdmEntitySet(navProp.toRole.type);
    JsonEntry refentry=new JsonEntry();
    refentry.properties=new ArrayList<OProperty<?>>();
    refentry.links=new ArrayList<OLink>();
    do {
      addProperty(refentry,ees,event.asStartProperty().getName(),jsr);
      event=jsr.nextEvent();
    }
 while (!event.isEndObject());
    rt.entity=refentry.getEntity();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ensureEndProperty(jsr.nextEvent());
  return rt;
}","protected JsonObjectPropertyValue getValue(JsonEvent event,EdmEntitySet ees,String name,JsonStreamReader jsr){
  JsonObjectPropertyValue rt=new JsonObjectPropertyValue();
  ensureStartObject(event);
  event=jsr.nextEvent();
  ensureStartProperty(event);
  if (DEFERRED_PROPERTY.equals(event.asStartProperty().getName())) {
    ensureStartObject(jsr.nextEvent());
    ensureStartProperty(jsr.nextEvent(),URI_PROPERTY);
    String uri=jsr.nextEvent().asEndProperty().getValue();
    rt.uri=uri;
    ensureEndObject(jsr.nextEvent());
    ensureEndProperty(jsr.nextEvent());
    ensureEndObject(jsr.nextEvent());
  }
 else   if (RESULTS_PROPERTY.equals(event.asStartProperty().getName())) {
    if (version == ODataVersion.V1) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    ensureStartArray(jsr.nextEvent());
    Feed feed=parseFeed(metadata.getEdmEntitySet(navProp.toRole.type),jsr);
    rt.entities=Enumerable.create(feed.getEntries()).cast(JsonEntry.class).select(new Func1<JsonEntry,OEntity>(){
      @Override public OEntity apply(      JsonEntry input){
        return input.getEntity();
      }
    }
).toList();
    ensureEndProperty(jsr.nextEvent());
    ensureEndObject(jsr.nextEvent());
  }
 else   if (METADATA_PROPERTY.equals(event.asStartProperty().getName())) {
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    JsonEntryMetaData jemd=parseMetadata(jsr);
    JsonEntry refentry=parseEntry(jemd,metadata.getEdmEntitySet(navProp.toRole.type),jsr);
    if (isResponse) {
      rt.entity=refentry.getEntity();
    }
 else {
      boolean isInlined=!refentry.properties.isEmpty() || !refentry.links.isEmpty();
      if (isInlined) {
        rt.entity=refentry.getEntity();
      }
 else {
        rt.uri=jemd.uri;
      }
    }
  }
 else   if (event.isStartProperty()) {
    EdmNavigationProperty navProp=ees.type.getNavigationProperty(name);
    ees=metadata.getEdmEntitySet(navProp.toRole.type);
    JsonEntry refentry=new JsonEntry();
    refentry.properties=new ArrayList<OProperty<?>>();
    refentry.links=new ArrayList<OLink>();
    do {
      addProperty(refentry,ees,event.asStartProperty().getName(),jsr);
      event=jsr.nextEvent();
    }
 while (!event.isEndObject());
    rt.entity=toOEntity(ees,refentry.properties,refentry.links);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ensureEndProperty(jsr.nextEvent());
  return rt;
}"
83996,"public void insertEntityWithInlinedEntityJson(){
  insertEntityWithInlinedEntity(ODataConsumer.create(FormatType.JSON,endpointUri));
}","@Test public void insertEntityWithInlinedEntityJson(){
  insertEntityWithInlinedEntity(ODataConsumer.create(FormatType.JSON,endpointUri));
}"
83997,"private void applyOLinks(EntityManager em,EntityType<?> jpaEntityType,List<OLink> links,Object jpaEntity){
  try {
    for (    final OLink link : links) {
      String[] propNameSplit=link.getRelation().split(""String_Node_Str"");
      String propName=propNameSplit[propNameSplit.length - 1];
      if (link instanceof ORelatedEntitiesLinkInline) {
        CollectionAttribute<?,?> att=jpaEntityType.getCollection(propName);
        Member member=att.getJavaMember();
        EntityType<?> collJpaEntityType=(EntityType<?>)att.getElementType();
        OneToMany oneToMany=getAnnotation(member,OneToMany.class);
        Member backRef=null;
        if (oneToMany != null && oneToMany.mappedBy() != null && !oneToMany.mappedBy().isEmpty()) {
          backRef=collJpaEntityType.getAttribute(oneToMany.mappedBy()).getJavaMember();
        }
        @SuppressWarnings(""String_Node_Str"") Collection<Object> coll=(Collection<Object>)getValue(jpaEntity,member);
        for (        OEntity oentity : ((ORelatedEntitiesLinkInline)link).getRelatedEntities()) {
          Object collJpaEntity=createNewJPAEntity(em,collJpaEntityType,oentity,true);
          if (backRef != null) {
            setValue(collJpaEntity,backRef,jpaEntity);
          }
          coll.add(collJpaEntity);
        }
      }
 else       if (link instanceof ORelatedEntityLink) {
      }
 else {
        Attribute<?,?> att=jpaEntityType.getAttribute(propName);
        Member member=att.getJavaMember();
        WebResource webResource=httpClient.resource(link.getHref());
        String requestEntity=webResource.get(String.class);
        OEntity relOEntity=BaseResource.convertFromString(requestEntity);
        String term=((AtomInfo)relOEntity).getCategoryTerm();
        EdmEntitySet ees=metadata.getEdmEntitySet(term.split(""String_Node_Str"")[1]);
        EntityType<?> jpaRelType=findJPAEntityType(em,ees.type.name);
        Object relEntity=createNewJPAEntity(em,jpaRelType,relOEntity,false);
        setValue(jpaEntity,member,relEntity);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private void applyOLinks(EntityManager em,EntityType<?> jpaEntityType,List<OLink> links,Object jpaEntity){
  try {
    for (    final OLink link : links) {
      String[] propNameSplit=link.getRelation().split(""String_Node_Str"");
      String propName=propNameSplit[propNameSplit.length - 1];
      if (link instanceof ORelatedEntitiesLinkInline) {
        CollectionAttribute<?,?> att=jpaEntityType.getCollection(propName);
        Member member=att.getJavaMember();
        EntityType<?> collJpaEntityType=(EntityType<?>)att.getElementType();
        OneToMany oneToMany=getAnnotation(member,OneToMany.class);
        Member backRef=null;
        if (oneToMany != null && oneToMany.mappedBy() != null && !oneToMany.mappedBy().isEmpty()) {
          backRef=collJpaEntityType.getAttribute(oneToMany.mappedBy()).getJavaMember();
        }
        @SuppressWarnings(""String_Node_Str"") Collection<Object> coll=(Collection<Object>)getValue(jpaEntity,member);
        for (        OEntity oentity : ((ORelatedEntitiesLinkInline)link).getRelatedEntities()) {
          Object collJpaEntity=createNewJPAEntity(em,collJpaEntityType,oentity,true);
          if (backRef != null) {
            setValue(collJpaEntity,backRef,jpaEntity);
          }
          coll.add(collJpaEntity);
        }
      }
 else       if (link instanceof ORelatedEntityLinkInline) {
      }
 else {
        Attribute<?,?> att=jpaEntityType.getAttribute(propName);
        Member member=att.getJavaMember();
        WebResource webResource=httpClient.resource(link.getHref());
        String requestEntity=webResource.get(String.class);
        OEntity relOEntity=BaseResource.convertFromString(requestEntity);
        String term=((AtomInfo)relOEntity).getCategoryTerm();
        EdmEntitySet ees=metadata.getEdmEntitySet(term.split(""String_Node_Str"")[1]);
        EntityType<?> jpaRelType=findJPAEntityType(em,ees.type.name);
        Object relEntity=createNewJPAEntity(em,jpaRelType,relOEntity,false);
        setValue(jpaEntity,member,relEntity);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
83998,"public static void main(String... args){
  ODataConsumer c=ODataConsumer.create(ODataEndpoints.NETFLIX);
  ODataConsumer.dump.all(true);
  int morganSpurlockId=c.getEntities(""String_Node_Str"").filter(""String_Node_Str"").execute().first().getProperty(""String_Node_Str"",Integer.class).getValue();
  List<OEntity> titlesActedIn=c.getEntities(""String_Node_Str"").nav(morganSpurlockId,""String_Node_Str"").execute().toList();
  for (  OEntity title : titlesActedIn) {
    for (    OProperty<?> p : title.getProperties()) {
      report(""String_Node_Str"",p.getName(),p.getValue());
    }
    report(""String_Node_Str"");
    for (    OLink link : title.getLinks()) {
      System.out.println(""String_Node_Str"" + link);
    }
  }
  report(""String_Node_Str"" + titlesActedIn.size());
}","public static void main(String... args){
  ODataConsumer c=ODataConsumer.create(ODataEndpoints.NETFLIX);
  int morganSpurlockId=c.getEntities(""String_Node_Str"").filter(""String_Node_Str"").execute().first().getProperty(""String_Node_Str"",Integer.class).getValue();
  List<OEntity> titlesActedIn=c.getEntities(""String_Node_Str"").nav(morganSpurlockId,""String_Node_Str"").execute().toList();
  for (  OEntity title : titlesActedIn) {
    for (    OProperty<?> p : title.getProperties()) {
      report(""String_Node_Str"",p.getName(),p.getValue());
    }
    report(""String_Node_Str"");
  }
  report(""String_Node_Str"" + titlesActedIn.size());
}"
83999,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  ODataConsumer.dump.requestHeaders(true);
  Enumerable<String> smallServices=Enumerable.create(ODataEndpoints.NORTHWIND,ODataEndpoints.ODATA4JSAMPLE_APPSPOT,ODataEndpoints.ODATA_WEBSITE_DATA,ODataEndpoints.ODATA_TEST_SERVICE_READONLY,ODataEndpoints.NERD_DINNER,ODataEndpoints.MIX10,ODataEndpoints.TECH_ED,ODataEndpoints.EU_TECH_ED,ODataEndpoints.PLURALSIGHT,ODataEndpoints.TELERIK_TV,ODataEndpoints.AGILITRAIN,ODataEndpoints.PROAGORA_FR,ODataEndpoints.PROAGORA_EN);
  Enumerable<String> brokenServices=Enumerable.create(ODataEndpoints.CITY_OF_EDMONTON,ODataEndpoints.DEVEXPRESS,ODataEndpoints.DEVTRANSIT,ODataEndpoints.LOGMYTIME);
  Enumerable<String> largeServices=Enumerable.create(ODataEndpoints.BASEBALL_STATS,ODataEndpoints.NETFLIX,ODataEndpoints.STACK_OVERFLOW,ODataEndpoints.SUPER_USER,ODataEndpoints.SERVER_FAULT,ODataEndpoints.META_STACK_OVERFLOW,ODataEndpoints.WORLD_CUP);
  for (  String endpoint : smallServices) {
    ODataConsumer c=ODataConsumer.create(endpoint);
    for (    String entitySet : c.getEntitySets()) {
      reportEntities(entitySet,c.getEntities(entitySet).execute());
    }
    return;
  }
  for (  String endpoint : largeServices) {
    ODataConsumer c=ODataConsumer.create(endpoint);
    for (    String entitySet : c.getEntitySets()) {
      reportEntities(entitySet,c.getEntities(entitySet).top(1).execute());
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  ODataConsumer.dump.requestHeaders(true);
  Enumerable<String> smallServices=Enumerable.create(ODataEndpoints.NORTHWIND,ODataEndpoints.ODATA4JSAMPLE_APPSPOT,ODataEndpoints.ODATA_WEBSITE_DATA,ODataEndpoints.ODATA_TEST_SERVICE_READONLY,ODataEndpoints.NERD_DINNER,ODataEndpoints.TECH_ED,ODataEndpoints.EU_TECH_ED,ODataEndpoints.PLURALSIGHT,ODataEndpoints.TELERIK_TV,ODataEndpoints.AGILITRAIN,ODataEndpoints.PROAGORA_FR,ODataEndpoints.PROAGORA_EN,ODataEndpoints.INETA_LIVE);
  Enumerable<String> brokenServices=Enumerable.create(ODataEndpoints.CITY_OF_EDMONTON,ODataEndpoints.DEVEXPRESS,ODataEndpoints.DEVTRANSIT,ODataEndpoints.LOGMYTIME,ODataEndpoints.PDC_2010,ODataEndpoints.MIX10);
  Enumerable<String> largeServices=Enumerable.create(ODataEndpoints.BASEBALL_STATS,ODataEndpoints.NETFLIX,ODataEndpoints.WORLD_CUP);
  for (  String endpoint : smallServices) {
    ODataConsumer c=ODataConsumer.create(endpoint);
    for (    String entitySet : c.getEntitySets()) {
      reportEntities(entitySet,c.getEntities(entitySet).execute());
    }
  }
  for (  String endpoint : largeServices) {
    ODataConsumer c=ODataConsumer.create(endpoint);
    for (    String entitySet : c.getEntitySets()) {
      reportEntities(entitySet,c.getEntities(entitySet).top(1).execute());
    }
  }
}"
84000,"public ODataClient(FormatType type,Class<F> feedClass,Class<E> entryClass,OClientBehavior... behaviors){
  this.feedClass=feedClass;
  this.entryClass=entryClass;
  this.behaviors=Enumerable.create(requiredBehaviors).concat(Enumerable.create(behaviors)).toArray(OClientBehavior.class);
  this.type=type;
  this.client=ClientUtil.newClient(behaviors);
}","@SuppressWarnings(""String_Node_Str"") public ODataClient(FormatType type,Class<?> feedClass,Class<?> entryClass,OClientBehavior... behaviors){
  this.feedClass=(Class<F>)feedClass;
  this.entryClass=(Class<E>)entryClass;
  this.behaviors=Enumerable.create(requiredBehaviors).concat(Enumerable.create(behaviors)).toArray(OClientBehavior.class);
  this.type=type;
  this.client=ClientUtil.newClient(behaviors);
}"
