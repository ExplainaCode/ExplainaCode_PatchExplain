record_number,buggy_code,fixed_code
30001,"/** 
 * Setting up the key involves the following steps: -If a key exists and we can connect using the key, do nothing. -Generate a key pair if there isn't one -Connect to remote host using password auth and do the following: 1. create .ssh directory if it doesn't exist 2. copy over the key as key.tmp 3. Append the key to authorized_keys file 4. Remove the temporary key file key.tmp 5. Fix permissions for home, .ssh and authorized_keys
 * @param node        - remote host
 * @param pubKeyFile  - .pub file
 * @param generateKey - flag to indicate if key needs to be generated or not
 * @param passwd      - ssh user password
 * @throws IOException
 * @throws InterruptedException
 */
public void setupKey(String node,String pubKeyFile,boolean generateKey,String passwd) throws IOException, InterruptedException {
  boolean connected=false;
  File key=new File(keyFile);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + keyFile);
  if (key.exists()) {
    if (checkConnection()) {
      throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
    }
  }
 else {
    if (generateKey) {
      if (!generateKeyPair()) {
        throw new IOException(""String_Node_Str"");
      }
    }
 else {
      throw new IOException(""String_Node_Str"");
    }
  }
  if (passwd == null) {
    throw new IOException(""String_Node_Str"");
  }
  connection=new Connection(node,port);
  connection.connect();
  connected=connection.authenticateWithPassword(userName,passwd);
  if (!connected) {
    throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
  }
  Connection conn=new Connection(node,port);
  conn.connect();
  boolean ret=conn.authenticateWithPassword(userName,passwd);
  if (!ret) {
    throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
  }
  SCPClient scp=new SCPClient(conn);
  SFTPClient sftp=new SFTPClient(connection);
  if (key.exists()) {
    setupSSHDir();
    if (pubKeyFile == null) {
      pubKeyFile=keyFile + ""String_Node_Str"";
    }
    File pubKey=new File(pubKeyFile);
    if (!pubKey.exists()) {
      throw new IOException(""String_Node_Str"" + pubKeyFile + ""String_Node_Str"");
    }
    try {
      if (!sftp.exists(SSH_DIR)) {
        if (logger.isLoggable(Level.FINER)) {
          logger.fine(SSH_DIR + ""String_Node_Str"");
        }
        sftp.mkdirs(""String_Node_Str"",0700);
      }
    }
 catch (    Exception e) {
      if (logger.isLoggable(Level.FINER)) {
        e.printStackTrace();
      }
      throw new IOException(""String_Node_Str"" + e.getMessage());
    }
    scp.put(pubKey.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    String mergeCommand=""String_Node_Str"" + AUTH_KEY_FILE;
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"" + mergeCommand);
    }
    if (conn.exec(mergeCommand,new ByteArrayOutputStream()) != 0) {
      throw new IOException(""String_Node_Str"" + pubKeyFile + ""String_Node_Str""+ host);
    }
    logger.info(""String_Node_Str"" + pubKeyFile + ""String_Node_Str""+ userName+ ""String_Node_Str""+ host);
    if (conn.exec(""String_Node_Str"",new ByteArrayOutputStream()) != 0) {
      logger.warning(""String_Node_Str"" + host);
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"");
    }
    logger.info(""String_Node_Str"");
    sftp.chmod(""String_Node_Str"",0755);
    sftp.chmod(SSH_DIR,0700);
    sftp.chmod(SSH_DIR + AUTH_KEY_FILE,0644);
    sftp.close();
    conn.close();
    conn=null;
  }
}","/** 
 * Setting up the key involves the following steps: -If a key exists and we can connect using the key, do nothing. -Generate a key pair if there isn't one -Connect to remote host using password auth and do the following: 1. create .ssh directory if it doesn't exist 2. copy over the key as key.tmp 3. Append the key to authorized_keys file 4. Remove the temporary key file key.tmp 5. Fix permissions for home, .ssh and authorized_keys
 * @param node        - remote host
 * @param pubKeyFile  - .pub file
 * @param generateKey - flag to indicate if key needs to be generated or not
 * @param passwd      - ssh user password
 * @throws IOException
 * @throws InterruptedException
 */
public void setupKey(String node,String pubKeyFile,boolean generateKey,String passwd) throws IOException, InterruptedException {
  boolean connected=false;
  File key=new File(keyFile);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + keyFile);
  if (key.exists()) {
    if (checkConnection()) {
      throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
    }
  }
 else {
    if (generateKey) {
      if (!generateKeyPair()) {
        throw new IOException(""String_Node_Str"");
      }
    }
 else {
      throw new IOException(""String_Node_Str"");
    }
  }
  if (passwd == null) {
    throw new IOException(""String_Node_Str"");
  }
  connection=new Connection(node,port);
  connection.connect();
  connected=connection.authenticateWithPassword(userName,passwd);
  if (!connected) {
    throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
  }
  Connection conn=new Connection(node,port);
  conn.connect();
  boolean ret=conn.authenticateWithPassword(userName,passwd);
  if (!ret) {
    throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
  }
  SCPClient scp=new SCPClient(conn);
  SFTPClient sftp=new SFTPClient(connection);
  if (key.exists()) {
    setupSSHDir();
    if (pubKeyFile == null) {
      pubKeyFile=keyFile + ""String_Node_Str"";
    }
    File pubKey=new File(pubKeyFile);
    if (!pubKey.exists()) {
      throw new IOException(""String_Node_Str"" + pubKeyFile + ""String_Node_Str"");
    }
    try {
      if (!sftp.exists(SSH_DIR)) {
        if (logger.isLoggable(Level.FINER)) {
          logger.fine(SSH_DIR + ""String_Node_Str"");
        }
        sftp.mkdirs(""String_Node_Str"",0700);
      }
    }
 catch (    Exception e) {
      if (logger.isLoggable(Level.FINER)) {
        e.printStackTrace();
      }
      throw new IOException(""String_Node_Str"" + e.getMessage());
    }
    scp.put(pubKey.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    String mergeCommand=""String_Node_Str"" + AUTH_KEY_FILE;
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"" + mergeCommand);
    }
    if (conn.exec(mergeCommand,new ByteArrayOutputStream()) != 0) {
      throw new IOException(""String_Node_Str"" + pubKeyFile + ""String_Node_Str""+ host);
    }
    logger.info(""String_Node_Str"" + pubKeyFile + ""String_Node_Str""+ userName+ ""String_Node_Str""+ host);
    if (conn.exec(""String_Node_Str"",new ByteArrayOutputStream()) != 0) {
      logger.warning(""String_Node_Str"" + host);
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"");
    }
    logger.info(""String_Node_Str"");
    sftp.chmod(""String_Node_Str"",0755);
    sftp.chmod(SSH_DIR,0700);
    sftp.chmod(SSH_DIR + AUTH_KEY_FILE,0644);
    sftp.close();
    conn.close();
  }
}"
30002,"private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  if (!baseDir.mkdirs()) {
    throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
  }
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=Util.resolve(baseURI,zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      outputFile.mkdirs();
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      try {
        FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
      }
 catch (      IOException e) {
        os.close();
      }
    }
  }
}","private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  if (!baseDir.exists() && !baseDir.mkdirs()) {
    throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
  }
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=Util.resolve(baseURI,zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      outputFile.mkdirs();
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      try {
        FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
      }
 catch (      IOException e) {
        os.close();
      }
    }
  }
}"
30003,"private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  baseDir.mkdirs();
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=Util.resolve(baseURI,zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      outputFile.mkdirs();
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
    }
  }
}","private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  if (!baseDir.mkdirs()) {
    throw new IOException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",baseDir.getAbsolutePath()));
  }
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=Util.resolve(baseURI,zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      outputFile.mkdirs();
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      try {
        FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
      }
 catch (      IOException e) {
        os.close();
      }
    }
  }
}"
30004,"private static void retrieveArtifacts(final AdminCommandContext context,final Collection<Artifacts.FullAndPartURIs> artifactInfo,final String targetLocalDir,final boolean reportErrorsInTopReport){
  Logger logger=context.getLogger();
  try {
    Payload.Outbound outboundPayload=context.getOutboundPayload();
    boolean retrieveArtifacts=false;
    if (outboundPayload == null) {
      outboundPayload=PayloadImpl.Outbound.newInstance();
      retrieveArtifacts=true;
    }
    Properties props=new Properties();
    props.setProperty(""String_Node_Str"",targetLocalDir.replace('\\','/'));
    for (    Artifacts.FullAndPartURIs uriPair : artifactInfo) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"",uriPair.getFull());
      }
      outboundPayload.attachFile(""String_Node_Str"",uriPair.getPart(),""String_Node_Str"",props,new File(uriPair.getFull().getSchemeSpecificPart()));
    }
    if (retrieveArtifacts) {
      File targetLocalFile=new File(targetLocalDir);
      if (targetLocalFile.exists()) {
        final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetLocalFile.getAbsolutePath());
        throw new Exception(msg);
      }
      if (!targetLocalFile.getParentFile().exists()) {
        final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetLocalFile.getParent());
        throw new Exception(msg);
      }
      FileOutputStream targetStream=new FileOutputStream(targetLocalFile);
      outboundPayload.writeTo(targetStream);
      targetStream.flush();
      targetStream.close();
    }
  }
 catch (  Exception e) {
    final String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    logger.log(Level.SEVERE,errorMsg,e);
    ActionReport report=context.getActionReport();
    if (!reportErrorsInTopReport) {
      report=report.addSubActionsReport();
      report.setActionExitCode(ExitCode.WARNING);
    }
 else {
      report.setActionExitCode(ExitCode.FAILURE);
    }
    report.setMessage(errorMsg);
    report.setFailureCause(e);
  }
}","private static void retrieveArtifacts(final AdminCommandContext context,final Collection<Artifacts.FullAndPartURIs> artifactInfo,final String targetLocalDir,final boolean reportErrorsInTopReport){
  Logger logger=context.getLogger();
  FileOutputStream targetStream=null;
  try {
    Payload.Outbound outboundPayload=context.getOutboundPayload();
    boolean retrieveArtifacts=false;
    if (outboundPayload == null) {
      outboundPayload=PayloadImpl.Outbound.newInstance();
      retrieveArtifacts=true;
    }
    Properties props=new Properties();
    props.setProperty(""String_Node_Str"",targetLocalDir.replace('\\','/'));
    for (    Artifacts.FullAndPartURIs uriPair : artifactInfo) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"",uriPair.getFull());
      }
      outboundPayload.attachFile(""String_Node_Str"",uriPair.getPart(),""String_Node_Str"",props,new File(uriPair.getFull().getSchemeSpecificPart()));
    }
    if (retrieveArtifacts) {
      File targetLocalFile=new File(targetLocalDir);
      if (targetLocalFile.exists()) {
        final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetLocalFile.getAbsolutePath());
        throw new Exception(msg);
      }
      if (!targetLocalFile.getParentFile().exists()) {
        final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetLocalFile.getParent());
        throw new Exception(msg);
      }
      targetStream=new FileOutputStream(targetLocalFile);
      outboundPayload.writeTo(targetStream);
      targetStream.flush();
    }
  }
 catch (  Exception e) {
    handleRetrieveException(e,context,reportErrorsInTopReport);
  }
 finally {
    if (targetStream != null) {
      try {
        targetStream.close();
      }
 catch (      IOException ex) {
        handleRetrieveException(ex,context,reportErrorsInTopReport);
      }
    }
  }
}"
30005,"public void initialize(Object config) throws IOException {
  String sun_acc=System.getProperty(ACC_XML,""String_Node_Str"");
  List<MessageSecurityConfig> msgconfigs=null;
  if (Globals.getDefaultHabitat() == null && sun_acc != null) {
    try {
      InputStream is=new FileInputStream(sun_acc);
      JAXBContext jc=JAXBContext.newInstance(ClientContainer.class);
      Unmarshaller u=jc.createUnmarshaller();
      ClientContainer cc=(ClientContainer)u.unmarshal(is);
      msgconfigs=cc.getMessageSecurityConfig();
    }
 catch (    JAXBException ex) {
      _logger.log(Level.SEVERE,null,ex);
    }
  }
 else {
    Util util=Util.getInstance();
    assert(util != null);
    msgconfigs=(List<MessageSecurityConfig>)util.getAppClientMsgSecConfigs();
  }
  this.initialize(msgconfigs);
}","public void initialize(Object config) throws IOException {
  String sun_acc=System.getProperty(ACC_XML,""String_Node_Str"");
  List<MessageSecurityConfig> msgconfigs=null;
  if (Globals.getDefaultHabitat() == null && sun_acc != null) {
    InputStream is=null;
    try {
      is=new FileInputStream(sun_acc);
      JAXBContext jc=JAXBContext.newInstance(ClientContainer.class);
      Unmarshaller u=jc.createUnmarshaller();
      ClientContainer cc=(ClientContainer)u.unmarshal(is);
      msgconfigs=cc.getMessageSecurityConfig();
    }
 catch (    JAXBException ex) {
      _logger.log(Level.SEVERE,null,ex);
    }
 finally {
      if (is != null) {
        is.close();
      }
    }
  }
 else {
    Util util=Util.getInstance();
    assert(util != null);
    msgconfigs=(List<MessageSecurityConfig>)util.getAppClientMsgSecConfigs();
  }
  this.initialize(msgconfigs);
}"
30006,"private File getPidFile() throws PidException {
  try {
    String configDirString=System.getProperty(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY);
    if (!ok(configDirString))     throw new PidException(strings.get(""String_Node_Str"",""String_Node_Str"" + SystemPropertyConstants.INSTANCE_ROOT_PROPERTY));
    File configDir=new File(new File(configDirString),""String_Node_Str"");
    if (!configDir.isDirectory())     throw new PidException(strings.get(""String_Node_Str"",configDir));
    File pidFile=new File(configDir,""String_Node_Str"");
    if (pidFile.exists()) {
      pidFile.delete();
      if (pidFile.exists()) {
        throw new PidException(strings.get(""String_Node_Str"",pidFile));
      }
    }
    return pidFile;
  }
 catch (  PidException pe) {
    throw pe;
  }
catch (  Exception e) {
    throw new PidException(e.getMessage());
  }
}","private File getPidFile() throws PidException {
  try {
    String configDirString=System.getProperty(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY);
    if (!ok(configDirString))     throw new PidException(strings.get(""String_Node_Str"",""String_Node_Str"" + SystemPropertyConstants.INSTANCE_ROOT_PROPERTY));
    File configDir=new File(new File(configDirString),""String_Node_Str"");
    if (!configDir.isDirectory())     throw new PidException(strings.get(""String_Node_Str"",configDir));
    File pidFile=new File(configDir,""String_Node_Str"");
    if (pidFile.exists()) {
      if (!pidFile.delete() || pidFile.exists()) {
        throw new PidException(strings.get(""String_Node_Str"",pidFile));
      }
    }
    return pidFile;
  }
 catch (  PidException pe) {
    throw pe;
  }
catch (  Exception e) {
    throw new PidException(e.getMessage());
  }
}"
30007,"@Override public void writePidFile(){
  File pidFile=null;
  try {
    pidFile=SmartFile.sanitize(getPidFile());
    File pidFileCopy=new File(pidFile.getPath() + ""String_Node_Str"");
    String pidString=getPidString();
    FileUtils.writeStringToFile(pidString,pidFile);
    FileUtils.writeStringToFile(pidString,pidFileCopy);
  }
 catch (  PidException pe) {
    _logger.warning(pe.getMessage());
  }
catch (  Exception e) {
    _logger.warning(strings.get(""String_Node_Str"",e));
  }
 finally {
    pidFile.deleteOnExit();
  }
}","@Override public void writePidFile(){
  File pidFile=null;
  try {
    pidFile=SmartFile.sanitize(getPidFile());
    File pidFileCopy=new File(pidFile.getPath() + ""String_Node_Str"");
    String pidString=getPidString();
    FileUtils.writeStringToFile(pidString,pidFile);
    FileUtils.writeStringToFile(pidString,pidFileCopy);
  }
 catch (  PidException pe) {
    _logger.warning(pe.getMessage());
  }
catch (  Exception e) {
    _logger.warning(strings.get(""String_Node_Str"",e));
  }
 finally {
    if (pidFile != null) {
      pidFile.deleteOnExit();
    }
  }
}"
30008,"public Set<ServiceDescription> getImplicitServiceDescriptions(ReadableArchive readableArchive,String appName){
  HashSet<ServiceDescription> defs=new HashSet<ServiceDescription>();
  if (DeploymentUtils.isJavaEE(readableArchive,habitat)) {
    ServiceDescription sd=generateDefaultServiceDescription(appName);
    defs.add(sd);
  }
  return defs;
}","public Set<ServiceDescription> getImplicitServiceDescriptions(ReadableArchive readableArchive,String appName){
  HashSet<ServiceDescription> defs=new HashSet<ServiceDescription>();
  if (JavaEEDeploymentUtils.isJavaEE(readableArchive,habitat)) {
    ServiceDescription sd=generateDefaultServiceDescription(appName);
    defs.add(sd);
  }
  return defs;
}"
30009,"private Set<ServiceReference> discoverServiceReferences(ReadableArchive cloudArchive,String appName){
  Set<ServiceReference> serviceReferences=new HashSet<ServiceReference>();
  Application application=null;
  try {
    application=dolProvider.processDeploymentMetaData(cloudArchive);
  }
 catch (  Exception ex) {
    MQServicePluginLogger.getLogger().log(Level.INFO,""String_Node_Str"",ex);
  }
  if (!DeploymentUtils.isJavaEE(cloudArchive,habitat)) {
    return serviceReferences;
  }
  if (application != null) {
    Set<BundleDescriptor> bundleDescriptors=application.getBundleDescriptors();
    for (    BundleDescriptor descriptor : bundleDescriptors) {
      populateResourceRefsAsServiceReferences(descriptor,serviceReferences);
      if (descriptor instanceof EjbBundleDescriptor) {
        EjbBundleDescriptor ejbDesc=(EjbBundleDescriptor)descriptor;
        Set<EjbDescriptor> ejbDescriptors=ejbDesc.getEjbs();
        for (        EjbDescriptor ejbDescriptor : ejbDescriptors) {
          populateResourceRefsAsServiceReferences(ejbDescriptor,serviceReferences);
        }
        Set<EjbInterceptor> ejbInterceptors=ejbDesc.getInterceptors();
        for (        EjbInterceptor ejbInterceptor : ejbInterceptors) {
          populateResourceRefsAsServiceReferences(ejbInterceptor,serviceReferences);
        }
      }
      Set<ManagedBeanDescriptor> managedBeanDescriptors=descriptor.getManagedBeans();
      for (      ManagedBeanDescriptor mbd : managedBeanDescriptors) {
        populateResourceRefsAsServiceReferences(mbd,serviceReferences);
      }
    }
  }
  return serviceReferences;
}","private Set<ServiceReference> discoverServiceReferences(ReadableArchive cloudArchive,String appName){
  Set<ServiceReference> serviceReferences=new HashSet<ServiceReference>();
  Application application=null;
  try {
    application=dolProvider.processDeploymentMetaData(cloudArchive);
  }
 catch (  Exception ex) {
    MQServicePluginLogger.getLogger().log(Level.INFO,""String_Node_Str"",ex);
  }
  if (!JavaEEDeploymentUtils.isJavaEE(cloudArchive,habitat)) {
    return serviceReferences;
  }
  if (application != null) {
    Set<BundleDescriptor> bundleDescriptors=application.getBundleDescriptors();
    for (    BundleDescriptor descriptor : bundleDescriptors) {
      populateResourceRefsAsServiceReferences(descriptor,serviceReferences);
      if (descriptor instanceof EjbBundleDescriptor) {
        EjbBundleDescriptor ejbDesc=(EjbBundleDescriptor)descriptor;
        Set<EjbDescriptor> ejbDescriptors=ejbDesc.getEjbs();
        for (        EjbDescriptor ejbDescriptor : ejbDescriptors) {
          populateResourceRefsAsServiceReferences(ejbDescriptor,serviceReferences);
        }
        Set<EjbInterceptor> ejbInterceptors=ejbDesc.getInterceptors();
        for (        EjbInterceptor ejbInterceptor : ejbInterceptors) {
          populateResourceRefsAsServiceReferences(ejbInterceptor,serviceReferences);
        }
      }
      Set<ManagedBeanDescriptor> managedBeanDescriptors=descriptor.getManagedBeans();
      for (      ManagedBeanDescriptor mbd : managedBeanDescriptors) {
        populateResourceRefsAsServiceReferences(mbd,serviceReferences);
      }
    }
  }
  return serviceReferences;
}"
30010,"public Set<ServiceDescription> getImplicitServiceDescriptions(ReadableArchive cloudArchive,String appName){
  HashSet<ServiceDescription> implicitServiceDescriptions=new HashSet<ServiceDescription>();
  if (!DeploymentUtils.isJavaEE(cloudArchive,habitat)) {
    return implicitServiceDescriptions;
  }
  Set<ServiceReference> serviceReferences=discoverServiceReferences(cloudArchive,appName);
  boolean hasJMSReference=false;
  for (  ServiceReference serviceReference : serviceReferences) {
    if (serviceReferenceTypes.contains(serviceReference.getType())) {
      hasJMSReference=true;
      break;
    }
  }
  if (hasJMSReference) {
    implicitServiceDescriptions.add(getDefaultServiceDescription(appName,null));
  }
  return implicitServiceDescriptions;
}","public Set<ServiceDescription> getImplicitServiceDescriptions(ReadableArchive cloudArchive,String appName){
  HashSet<ServiceDescription> implicitServiceDescriptions=new HashSet<ServiceDescription>();
  if (!JavaEEDeploymentUtils.isJavaEE(cloudArchive,habitat)) {
    return implicitServiceDescriptions;
  }
  Set<ServiceReference> serviceReferences=discoverServiceReferences(cloudArchive,appName);
  boolean hasJMSReference=false;
  for (  ServiceReference serviceReference : serviceReferences) {
    if (serviceReferenceTypes.contains(serviceReference.getType())) {
      hasJMSReference=true;
      break;
    }
  }
  if (hasJMSReference) {
    implicitServiceDescriptions.add(getDefaultServiceDescription(appName,null));
  }
  return implicitServiceDescriptions;
}"
30011,"void setCommandLine() throws GFLauncherException {
  List<String> cmdLine=getCommandLine();
  cmdLine.clear();
  addIgnoreNull(cmdLine,javaExe);
  addIgnoreNull(cmdLine,""String_Node_Str"");
  addIgnoreNull(cmdLine,getClasspath());
  addIgnoreNull(cmdLine,debugOptions);
  String CLIStartTime=System.getProperty(""String_Node_Str"");
  if (CLIStartTime != null && CLIStartTime.length() > 0) {
    cmdLine.add(""String_Node_Str"" + CLIStartTime);
  }
  if (jvmOptions != null)   addIgnoreNull(cmdLine,jvmOptions.toStringArray());
  GFLauncherNativeHelper nativeHelper=new GFLauncherNativeHelper(info,javaConfig,jvmOptions,profiler);
  addIgnoreNull(cmdLine,nativeHelper.getCommands());
  addIgnoreNull(cmdLine,getMainClass());
  try {
    addIgnoreNull(cmdLine,getInfo().getArgsAsList());
  }
 catch (  GFLauncherException gfle) {
    throw gfle;
  }
catch (  Exception e) {
  }
}","void setCommandLine() throws GFLauncherException {
  List<String> cmdLine=getCommandLine();
  cmdLine.clear();
  addIgnoreNull(cmdLine,javaExe);
  addIgnoreNull(cmdLine,""String_Node_Str"");
  addIgnoreNull(cmdLine,getClasspath());
  addIgnoreNull(cmdLine,debugOptions);
  String CLIStartTime=System.getProperty(""String_Node_Str"");
  if (CLIStartTime != null && CLIStartTime.length() > 0) {
    cmdLine.add(""String_Node_Str"" + CLIStartTime);
  }
  GFLauncherNativeHelper nativeHelper=new GFLauncherNativeHelper(info,javaConfig,jvmOptions,profiler);
  addIgnoreNull(cmdLine,nativeHelper.getCommands());
  addIgnoreNull(cmdLine,getMainClass());
  try {
    addIgnoreNull(cmdLine,getInfo().getArgsAsList());
  }
 catch (  GFLauncherException gfle) {
    throw gfle;
  }
catch (  Exception e) {
  }
}"
30012,"public void setup() throws GFLauncherException, MiniXmlParserException {
  ASenvPropertyReader pr;
  if (isFakeLaunch()) {
    pr=new ASenvPropertyReader(info.getInstallDir());
  }
 else {
    pr=new ASenvPropertyReader();
  }
  asenvProps=pr.getProps();
  info.setup();
  setupLogLevels();
  MiniXmlParser parser=new MiniXmlParser(getInfo().getConfigFile(),getInfo().getInstanceName());
  String domainName=parser.getDomainName();
  if (GFLauncherUtils.ok(domainName)) {
    info.setDomainName(domainName);
  }
  info.setAdminAddresses(parser.getAdminAddresses());
  javaConfig=new JavaConfig(parser.getJavaConfig());
  setupProfilerAndJvmOptions(parser);
  setupUpgradeSecurity();
  Map<String,String> realmprops=parser.getAdminRealmProperties();
  if (realmprops != null) {
    String classname=realmprops.get(""String_Node_Str"");
    String keyfile=realmprops.get(""String_Node_Str"");
    if (""String_Node_Str"".equals(classname) && keyfile != null) {
      adminFileRealmKeyFile=keyfile;
    }
  }
  secureAdminEnabled=parser.getSecureAdminEnabled();
  renameOsgiCache();
  setupMonitoring(parser);
  sysPropsFromXml=parser.getSystemProperties();
  asenvProps.put(INSTANCE_ROOT_PROPERTY,getInfo().getInstanceRootDir().getPath());
  String jhome=javaConfig.getJavaHome();
  if (GFLauncherUtils.ok(jhome) && !jhome.trim().equals(""String_Node_Str"" + JAVA_ROOT_PROPERTY + ""String_Node_Str"")) {
    asenvProps.put(JAVA_ROOT_PROPERTY,jhome);
  }
  debugOptions=getDebug();
  parseDebug();
  parser.setupConfigDir(getInfo().getConfigDir(),getInfo().getInstallDir());
  setLogFilename(parser);
  resolveAllTokens();
  fixLogFilename();
  GFLauncherLogger.addLogFileHandler(logFilename,info);
  setJavaExecutable();
  setClasspath();
  setCommandLine();
  logCommandLine();
  needsAutoUpgrade=!parser.hasNetworkConfig();
  needsManualUpgrade=!parser.hasDefaultConfig();
  setupCalledByClients=true;
}","public void setup() throws GFLauncherException, MiniXmlParserException {
  ASenvPropertyReader pr;
  if (isFakeLaunch()) {
    pr=new ASenvPropertyReader(info.getInstallDir());
  }
 else {
    pr=new ASenvPropertyReader();
  }
  asenvProps=pr.getProps();
  info.setup();
  setupLogLevels();
  MiniXmlParser parser=new MiniXmlParser(getInfo().getConfigFile(),getInfo().getInstanceName());
  String domainName=parser.getDomainName();
  if (GFLauncherUtils.ok(domainName)) {
    info.setDomainName(domainName);
  }
  info.setAdminAddresses(parser.getAdminAddresses());
  javaConfig=new JavaConfig(parser.getJavaConfig());
  setupProfilerAndJvmOptions(parser);
  setupUpgradeSecurity();
  Map<String,String> realmprops=parser.getAdminRealmProperties();
  if (realmprops != null) {
    String classname=realmprops.get(""String_Node_Str"");
    String keyfile=realmprops.get(""String_Node_Str"");
    if (""String_Node_Str"".equals(classname) && keyfile != null) {
      adminFileRealmKeyFile=keyfile;
    }
  }
  secureAdminEnabled=parser.getSecureAdminEnabled();
  renameOsgiCache();
  setupMonitoring(parser);
  sysPropsFromXml=parser.getSystemProperties();
  asenvProps.put(INSTANCE_ROOT_PROPERTY,getInfo().getInstanceRootDir().getPath());
  String jhome=javaConfig.getJavaHome();
  if (GFLauncherUtils.ok(jhome) && !jhome.trim().equals(""String_Node_Str"" + JAVA_ROOT_PROPERTY + ""String_Node_Str"")) {
    asenvProps.put(JAVA_ROOT_PROPERTY,jhome);
  }
  debugOptions=getDebug();
  parseDebug();
  parser.setupConfigDir(getInfo().getConfigDir(),getInfo().getInstallDir());
  setLogFilename(parser);
  resolveAllTokens();
  fixLogFilename();
  GFLauncherLogger.addLogFileHandler(logFilename,info);
  setJavaExecutable();
  setClasspath();
  setJvmOptions();
  setCommandLine();
  logJvmOptions();
  logCommandLine();
  needsAutoUpgrade=!parser.hasNetworkConfig();
  needsManualUpgrade=!parser.hasDefaultConfig();
  setupCalledByClients=true;
}"
30013,"/** 
 * Let's fake-launch domain1  -- which DOES have the jvm logging args
 */
@Test public void test2() throws GFLauncherException, MiniXmlParserException {
  info.setDomainName(""String_Node_Str"");
  launcher.launch();
  List<String> cmdline=launcher.getCommandLine();
  assertTrue(cmdline.contains(""String_Node_Str""));
  assertEquals(cmdline.get(3),""String_Node_Str"");
}","/** 
 * Let's fake-launch domain1  -- which DOES have the jvm logging args
 */
@Test public void test2() throws GFLauncherException, MiniXmlParserException {
  info.setDomainName(""String_Node_Str"");
  launcher.launch();
  List<String> cmdline=launcher.getJvmOptions();
  assertTrue(cmdline.contains(""String_Node_Str""));
  assertEquals(cmdline.get(0),""String_Node_Str"");
}"
30014,"/** 
 * Let's fake-launch domain2 -- which does NOT have the jvm logging args
 */
@Test public void test3() throws GFLauncherException, MiniXmlParserException {
  info.setDomainName(""String_Node_Str"");
  launcher.launch();
  List<String> cmdline=launcher.getCommandLine();
  assertFalse(cmdline.contains(""String_Node_Str""));
}","/** 
 * Let's fake-launch domain2 -- which does NOT have the jvm logging args
 */
@Test public void test3() throws GFLauncherException, MiniXmlParserException {
  info.setDomainName(""String_Node_Str"");
  launcher.launch();
  List<String> cmdline=launcher.getJvmOptions();
  assertFalse(cmdline.contains(""String_Node_Str""));
}"
30015,"private synchronized void init(WebModule wm){
  if (initialized) {
    return;
  }
  ServerContext serverContext=wm.getServerContext();
  if (serverContext == null) {
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,wm.getName());
    throw new IllegalStateException(msg);
  }
  im=serverContext.getDefaultServices().forContract(InvocationManager.class).get();
  tm=serverContext.getDefaultServices().forContract(JavaEETransactionManager.class).get();
  injectionMgr=serverContext.getDefaultServices().forContract(InjectionManager.class).get();
  initialized=true;
  securityContext=serverContext.getDefaultServices().forContract(AppServSecurityContext.class).get();
  if (securityContext != null) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + securityContext);
    }
  }
 else {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
}","private synchronized void init(WebModule wm){
  if (initialized) {
    return;
  }
  ServerContext serverContext=wm.getServerContext();
  if (serverContext == null) {
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,wm.getName());
    throw new IllegalStateException(msg);
  }
  Services services=serverContext.getDefaultServices();
  im=services.forContract(InvocationManager.class).get();
  tm=getJavaEETransactionManager(services);
  injectionMgr=services.forContract(InjectionManager.class).get();
  initialized=true;
  securityContext=serverContext.getDefaultServices().forContract(AppServSecurityContext.class).get();
  if (securityContext != null) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + securityContext);
    }
  }
 else {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
}"
30016,"private void handleAfterEvent(InstanceEvent event,InstanceEvent.EventType eventType){
  Wrapper wrapper=event.getWrapper();
  Context context=(Context)wrapper.getParent();
  if (!(context instanceof WebModule)) {
    return;
  }
  WebModule wm=(WebModule)context;
  Object instance;
  if (eventType == InstanceEvent.EventType.AFTER_FILTER_EVENT) {
    instance=event.getFilter();
  }
 else {
    instance=event.getServlet();
  }
  if (instance == null) {
    return;
  }
  if (instance instanceof Servlet) {
    if (eventType == InstanceEvent.EventType.AFTER_INIT_EVENT) {
      wm.servletInitializedEvent(wrapper.getName());
    }
 else     if (eventType == InstanceEvent.EventType.AFTER_DESTROY_EVENT) {
      wm.servletDestroyedEvent(wrapper.getName());
    }
  }
  try {
    if (eventType == InstanceEvent.EventType.AFTER_DESTROY_EVENT && !DefaultServlet.class.equals(instance.getClass()) && !JspServlet.class.equals(instance.getClass())) {
      injectionMgr.destroyManagedObject(instance,false);
    }
  }
 catch (  InjectionException ie) {
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    _logger.log(Level.SEVERE,msg,ie);
  }
  ComponentInvocation inv=new WebComponentInvocation(wm,instance);
  try {
    im.postInvoke(inv);
  }
 catch (  Exception ex) {
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    throw new RuntimeException(msg,ex);
  }
 finally {
    if (eventType == InstanceEvent.EventType.AFTER_DESTROY_EVENT) {
      tm.componentDestroyed(instance,inv);
    }
 else     if (eventType == InstanceEvent.EventType.AFTER_FILTER_EVENT || eventType == InstanceEvent.EventType.AFTER_SERVICE_EVENT) {
      if (eventType == InstanceEvent.EventType.AFTER_SERVICE_EVENT) {
        ServletResponse response=event.getResponse();
        int status=-1;
        if (response != null && response instanceof HttpServletResponse) {
          status=((HttpServletResponse)response).getStatus();
        }
        wm.afterServiceEvent(wrapper.getName(),status);
      }
      if (im.getCurrentInvocation() == null) {
        try {
          Realm ra=context.getRealm();
          if (ra != null && (ra instanceof RealmInitializer)) {
            ((RealmInitializer)ra).logout();
          }
        }
 catch (        Exception ex) {
          String msg=_rb.getString(""String_Node_Str"");
          msg=MessageFormat.format(msg,new Object[]{eventType,wm});
          _logger.log(Level.SEVERE,msg,ex);
        }
        try {
          if (tm.getTransaction() != null) {
            tm.rollback();
          }
          tm.cleanTxnTimeout();
        }
 catch (        Exception ex) {
        }
      }
      tm.componentDestroyed(instance,inv);
    }
  }
}","private void handleAfterEvent(InstanceEvent event,InstanceEvent.EventType eventType){
  Wrapper wrapper=event.getWrapper();
  Context context=(Context)wrapper.getParent();
  if (!(context instanceof WebModule)) {
    return;
  }
  WebModule wm=(WebModule)context;
  Object instance;
  if (eventType == InstanceEvent.EventType.AFTER_FILTER_EVENT) {
    instance=event.getFilter();
  }
 else {
    instance=event.getServlet();
  }
  if (instance == null) {
    return;
  }
  if (instance instanceof Servlet) {
    if (eventType == InstanceEvent.EventType.AFTER_INIT_EVENT) {
      wm.servletInitializedEvent(wrapper.getName());
    }
 else     if (eventType == InstanceEvent.EventType.AFTER_DESTROY_EVENT) {
      wm.servletDestroyedEvent(wrapper.getName());
    }
  }
  try {
    if (eventType == InstanceEvent.EventType.AFTER_DESTROY_EVENT && !DefaultServlet.class.equals(instance.getClass()) && !JspServlet.class.equals(instance.getClass())) {
      injectionMgr.destroyManagedObject(instance,false);
    }
  }
 catch (  InjectionException ie) {
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    _logger.log(Level.SEVERE,msg,ie);
  }
  ComponentInvocation inv=new WebComponentInvocation(wm,instance);
  try {
    im.postInvoke(inv);
  }
 catch (  Exception ex) {
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    throw new RuntimeException(msg,ex);
  }
 finally {
    if (eventType == InstanceEvent.EventType.AFTER_DESTROY_EVENT) {
      if (tm != null) {
        tm.componentDestroyed(instance,inv);
      }
    }
 else     if (eventType == InstanceEvent.EventType.AFTER_FILTER_EVENT || eventType == InstanceEvent.EventType.AFTER_SERVICE_EVENT) {
      if (eventType == InstanceEvent.EventType.AFTER_SERVICE_EVENT) {
        ServletResponse response=event.getResponse();
        int status=-1;
        if (response != null && response instanceof HttpServletResponse) {
          status=((HttpServletResponse)response).getStatus();
        }
        wm.afterServiceEvent(wrapper.getName(),status);
      }
      if (im.getCurrentInvocation() == null) {
        try {
          Realm ra=context.getRealm();
          if (ra != null && (ra instanceof RealmInitializer)) {
            ((RealmInitializer)ra).logout();
          }
        }
 catch (        Exception ex) {
          String msg=_rb.getString(""String_Node_Str"");
          msg=MessageFormat.format(msg,new Object[]{eventType,wm});
          _logger.log(Level.SEVERE,msg,ex);
        }
        if (tm != null) {
          try {
            if (tm.getTransaction() != null) {
              tm.rollback();
            }
            tm.cleanTxnTimeout();
          }
 catch (          Exception ex) {
          }
        }
      }
      if (tm != null) {
        tm.componentDestroyed(instance,inv);
      }
    }
  }
}"
30017,"private void handleBeforeEvent(InstanceEvent event,InstanceEvent.EventType eventType){
  Context context=(Context)event.getWrapper().getParent();
  if (!(context instanceof WebModule)) {
    return;
  }
  WebModule wm=(WebModule)context;
  Object instance;
  if (eventType == InstanceEvent.EventType.BEFORE_FILTER_EVENT) {
    instance=event.getFilter();
  }
 else {
    instance=event.getServlet();
  }
  Realm ra=context.getRealm();
  if (ra != null) {
    ServletRequest request=event.getRequest();
    if (request != null && request instanceof HttpServletRequest) {
      HttpServletRequest hreq=(HttpServletRequest)request;
      HttpServletRequest base=hreq;
      Principal prin=hreq.getUserPrincipal();
      Principal basePrincipal=prin;
      boolean wrapped=false;
      while (prin != null) {
        if (base instanceof ServletRequestWrapper) {
          ServletRequest sr=((ServletRequestWrapper)base).getRequest();
          if (sr instanceof HttpServletRequest) {
            base=(HttpServletRequest)sr;
            wrapped=true;
            continue;
          }
        }
        if (wrapped) {
          basePrincipal=base.getUserPrincipal();
        }
 else         if (base instanceof RequestFacade) {
          if (base.getClass() != RequestFacade.class) {
            basePrincipal=((RequestFacade)base).getUnwrappedCoyoteRequest().getUserPrincipal();
          }
        }
 else {
          basePrincipal=base.getUserPrincipal();
        }
        break;
      }
      if (prin != null && prin == basePrincipal && prin.getClass().getName().equals(SecurityConstants.WEB_PRINCIPAL_CLASS)) {
        securityContext.setSecurityContextWithPrincipal(prin);
      }
 else       if (prin != basePrincipal) {
        checkObjectForDoAsPermission(hreq);
        securityContext.setSecurityContextWithPrincipal(prin);
      }
    }
  }
  ComponentInvocation inv=new WebComponentInvocation(wm,instance);
  try {
    im.preInvoke(inv);
    if (eventType == InstanceEvent.EventType.BEFORE_SERVICE_EVENT) {
      wm.beforeServiceEvent(event.getWrapper().getName());
      tm.enlistComponentResources();
    }
  }
 catch (  Exception ex) {
    im.postInvoke(inv);
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    throw new RuntimeException(msg,ex);
  }
}","private void handleBeforeEvent(InstanceEvent event,InstanceEvent.EventType eventType){
  Context context=(Context)event.getWrapper().getParent();
  if (!(context instanceof WebModule)) {
    return;
  }
  WebModule wm=(WebModule)context;
  Object instance;
  if (eventType == InstanceEvent.EventType.BEFORE_FILTER_EVENT) {
    instance=event.getFilter();
  }
 else {
    instance=event.getServlet();
  }
  Realm ra=context.getRealm();
  if (ra != null) {
    ServletRequest request=event.getRequest();
    if (request != null && request instanceof HttpServletRequest) {
      HttpServletRequest hreq=(HttpServletRequest)request;
      HttpServletRequest base=hreq;
      Principal prin=hreq.getUserPrincipal();
      Principal basePrincipal=prin;
      boolean wrapped=false;
      while (prin != null) {
        if (base instanceof ServletRequestWrapper) {
          ServletRequest sr=((ServletRequestWrapper)base).getRequest();
          if (sr instanceof HttpServletRequest) {
            base=(HttpServletRequest)sr;
            wrapped=true;
            continue;
          }
        }
        if (wrapped) {
          basePrincipal=base.getUserPrincipal();
        }
 else         if (base instanceof RequestFacade) {
          if (base.getClass() != RequestFacade.class) {
            basePrincipal=((RequestFacade)base).getUnwrappedCoyoteRequest().getUserPrincipal();
          }
        }
 else {
          basePrincipal=base.getUserPrincipal();
        }
        break;
      }
      if (prin != null && prin == basePrincipal && prin.getClass().getName().equals(SecurityConstants.WEB_PRINCIPAL_CLASS)) {
        securityContext.setSecurityContextWithPrincipal(prin);
      }
 else       if (prin != basePrincipal) {
        checkObjectForDoAsPermission(hreq);
        securityContext.setSecurityContextWithPrincipal(prin);
      }
    }
  }
  ComponentInvocation inv=new WebComponentInvocation(wm,instance);
  try {
    im.preInvoke(inv);
    if (eventType == InstanceEvent.EventType.BEFORE_SERVICE_EVENT) {
      wm.beforeServiceEvent(event.getWrapper().getName());
      if (tm != null) {
        tm.enlistComponentResources();
      }
    }
  }
 catch (  Exception ex) {
    im.postInvoke(inv);
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    throw new RuntimeException(msg,ex);
  }
}"
30018,"public static Map maskOffPassword(Map<String,Object> attrs){
  Map masked=new HashMap();
  for (  String key : attrs.keySet()) {
    if (pswdAttrList.contains(key.toLowerCase())) {
      masked.put(key,""String_Node_Str"");
    }
 else {
      masked.put(key,attrs.get(key));
    }
  }
  return masked;
}","public static Map maskOffPassword(Map<String,Object> attrs){
  Map masked=new HashMap();
  if (attrs == null) {
    return masked;
  }
  for (  String key : attrs.keySet()) {
    if (pswdAttrList.contains(key.toLowerCase())) {
      masked.put(key,""String_Node_Str"");
    }
 else {
      masked.put(key,attrs.get(key));
    }
  }
  return masked;
}"
30019,"public static Map<String,Object> parseResponse(RestResponse response,HandlerContext handlerCtx,String endpoint,Object attrs,boolean quiet,boolean throwException){
  String message=""String_Node_Str"";
  ExitCode exitCode=ExitCode.FAILURE;
  Map maskedAttr=maskOffPassword((Map<String,Object>)attrs);
  if (response != null) {
    try {
      int status=response.getResponseCode();
      Map responseMap=response.getResponse();
      if (responseMap.get(""String_Node_Str"") != null) {
        String exitCodeStr=(String)((Map)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
        exitCode=(exitCodeStr != null) ? ExitCode.valueOf(exitCodeStr) : ExitCode.SUCCESS;
      }
      if (exitCode != ExitCode.SUCCESS) {
        Map dataMap=(Map)responseMap.get(""String_Node_Str"");
        if (dataMap != null) {
          message=getMessage(dataMap);
          List<Map> subReports=(List<Map>)dataMap.get(""String_Node_Str"");
          if (subReports != null) {
            StringBuilder sb=new StringBuilder(""String_Node_Str"");
            for (            Map oneSubReport : subReports) {
              sb.append(""String_Node_Str"").append(getMessage(oneSubReport));
            }
            message=message + sb.toString();
          }
        }
 else {
          Object msgs=responseMap.get(""String_Node_Str"");
          if (msgs == null) {
            message=""String_Node_Str"" + endpoint + ""String_Node_Str""+ status+ ""String_Node_Str"";
          }
 else           if (msgs instanceof List) {
            StringBuilder builder=new StringBuilder(""String_Node_Str"");
            for (            Object obj : ((List<Object>)msgs)) {
              if ((obj instanceof Map) && ((Map<String,Object>)obj).containsKey(""String_Node_Str"")) {
                obj=((Map<String,Object>)obj).get(""String_Node_Str"");
              }
              builder.append(obj.toString());
            }
            message=builder.toString();
          }
 else           if (msgs instanceof Map) {
            message=((Map<String,Object>)msgs).get(""String_Node_Str"").toString();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
switch (exitCode) {
case FAILURE:
{
          if (throwException) {
            if (handlerCtx != null) {
              GuiUtil.handleError(handlerCtx,message);
              if (!quiet) {
                GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
                GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
              }
              return new HashMap();
            }
 else {
              throw new RuntimeException(message);
            }
          }
 else {
            if (!quiet) {
              GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
              GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
            }
            return responseMap;
          }
        }
case WARNING:
{
        GuiUtil.prepareAlert(""String_Node_Str"",GuiUtil.getCommonMessage(""String_Node_Str""),message);
        GuiUtil.getLogger().warning(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
        return responseMap;
      }
case SUCCESS:
{
      return responseMap;
    }
}
}
 catch (Exception ex) {
if (!quiet) {
  GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
  GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
}
if (handlerCtx != null) {
  if (throwException) {
    if (""String_Node_Str"".equals(message)) {
      GuiUtil.handleException(handlerCtx,ex);
    }
 else {
      GuiUtil.handleError(handlerCtx,message);
    }
  }
}
 else {
  if (""String_Node_Str"".equals(message)) {
    throw new RuntimeException(ex);
  }
 else {
    throw new RuntimeException(message,ex);
  }
}
}
}
return null;
}","public static Map<String,Object> parseResponse(RestResponse response,HandlerContext handlerCtx,String endpoint,Object attrs,boolean quiet,boolean throwException){
  String message=""String_Node_Str"";
  ExitCode exitCode=ExitCode.FAILURE;
  Object maskedAttr=attrs;
  if ((attrs != null) && (attrs instanceof Map)) {
    maskedAttr=maskOffPassword((Map<String,Object>)attrs);
  }
  if (response != null) {
    try {
      int status=response.getResponseCode();
      Map responseMap=response.getResponse();
      if (responseMap.get(""String_Node_Str"") != null) {
        String exitCodeStr=(String)((Map)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
        exitCode=(exitCodeStr != null) ? ExitCode.valueOf(exitCodeStr) : ExitCode.SUCCESS;
      }
      if (exitCode != ExitCode.SUCCESS) {
        Map dataMap=(Map)responseMap.get(""String_Node_Str"");
        if (dataMap != null) {
          message=getMessage(dataMap);
          List<Map> subReports=(List<Map>)dataMap.get(""String_Node_Str"");
          if (subReports != null) {
            StringBuilder sb=new StringBuilder(""String_Node_Str"");
            for (            Map oneSubReport : subReports) {
              sb.append(""String_Node_Str"").append(getMessage(oneSubReport));
            }
            message=message + sb.toString();
          }
        }
 else {
          Object msgs=responseMap.get(""String_Node_Str"");
          if (msgs == null) {
            message=""String_Node_Str"" + endpoint + ""String_Node_Str""+ status+ ""String_Node_Str"";
          }
 else           if (msgs instanceof List) {
            StringBuilder builder=new StringBuilder(""String_Node_Str"");
            for (            Object obj : ((List<Object>)msgs)) {
              if ((obj instanceof Map) && ((Map<String,Object>)obj).containsKey(""String_Node_Str"")) {
                obj=((Map<String,Object>)obj).get(""String_Node_Str"");
              }
              builder.append(obj.toString());
            }
            message=builder.toString();
          }
 else           if (msgs instanceof Map) {
            message=((Map<String,Object>)msgs).get(""String_Node_Str"").toString();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
switch (exitCode) {
case FAILURE:
{
          if (throwException) {
            if (handlerCtx != null) {
              GuiUtil.handleError(handlerCtx,message);
              if (!quiet) {
                GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
                GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
              }
              return new HashMap();
            }
 else {
              throw new RuntimeException(message);
            }
          }
 else {
            if (!quiet) {
              GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
              GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
            }
            return responseMap;
          }
        }
case WARNING:
{
        GuiUtil.prepareAlert(""String_Node_Str"",GuiUtil.getCommonMessage(""String_Node_Str""),message);
        GuiUtil.getLogger().warning(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
        return responseMap;
      }
case SUCCESS:
{
      return responseMap;
    }
}
}
 catch (Exception ex) {
if (!quiet) {
  GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
  GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
}
if (handlerCtx != null) {
  if (throwException) {
    if (""String_Node_Str"".equals(message) || message == null) {
      GuiUtil.handleException(handlerCtx,ex);
    }
 else {
      GuiUtil.handleError(handlerCtx,message);
    }
  }
}
 else {
  if (""String_Node_Str"".equals(message) || message == null) {
    throw new RuntimeException(ex);
  }
 else {
    throw new RuntimeException(message,ex);
  }
}
}
}
return null;
}"
30020,"@Override public ProvisionedService provisionService(ServiceDescription serviceDescription,PaaSDeploymentContext dc){
  String serviceName=serviceDescription.getName();
  LBPluginLogger.getLogger().log(Level.INFO,""String_Node_Str"" + serviceName);
  logger.entering(getClass().getName(),""String_Node_Str"");
  ArrayList<String> params;
  String[] parameters;
  params=new ArrayList<String>();
  ActionReport report=habitat.getComponent(ActionReport.class);
  org.glassfish.api.admin.CommandRunner.CommandInvocation invocation=commandRunner.getCommandInvocation(""String_Node_Str"",report);
  ParameterMap parameterMap=new ParameterMap();
  if (serviceDescription.getAppName() != null) {
    parameterMap.add(""String_Node_Str"",serviceDescription.getAppName());
  }
  if (serviceDescription.getServiceCharacteristics() != null) {
    String serviceCharacteristics=formatArgument(serviceDescription.getServiceCharacteristics().getServiceCharacteristics());
    parameterMap.add(""String_Node_Str"",serviceCharacteristics);
  }
 else   if (serviceDescription.getTemplateIdentifier() != null) {
    String templateID=serviceDescription.getTemplateIdentifier().getId();
    parameterMap.add(""String_Node_Str"",templateID);
  }
  String serviceConfigurations=formatArgument(serviceDescription.getConfigurations());
  parameterMap.add(""String_Node_Str"",serviceConfigurations);
  parameterMap.add(""String_Node_Str"",""String_Node_Str"");
  parameterMap.add(""String_Node_Str"",serviceDescription.getVirtualClusterName());
  String domainName=System.getProperty(Constants.DOMAIN_NAME_SYSTEM_PROPERTY);
  if (domainName != null) {
    parameterMap.add(""String_Node_Str"",domainName);
  }
  parameterMap.add(""String_Node_Str"",serviceName);
  invocation.parameters(parameterMap).execute();
  if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
    LBPluginLogger.getLogger().log(Level.INFO,""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
  Properties serviceProperties=report.getExtraProperties();
  parameterMap=new ParameterMap();
  if (serviceDescription.getAppName() != null) {
    parameterMap.add(""String_Node_Str"",serviceDescription.getAppName());
  }
  parameterMap.add(""String_Node_Str"",serviceDescription.getVirtualClusterName());
  parameterMap.add(""String_Node_Str"",serviceProperties.getProperty(""String_Node_Str""));
  parameterMap.add(""String_Node_Str"",serviceName);
  report=habitat.getComponent(ActionReport.class);
  invocation=commandRunner.getCommandInvocation(""String_Node_Str"",report);
  invocation.parameters(parameterMap).execute();
  if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
    LBPluginLogger.getLogger().log(Level.WARNING,""String_Node_Str"" + serviceName + ""String_Node_Str"",report.getFailureCause());
  }
  GlassFishLBProvisionedService ps=new GlassFishLBProvisionedService(serviceDescription,serviceProperties);
  ps.setStatus(ServiceStatus.RUNNING);
  return ps;
}","@Override public ProvisionedService provisionService(ServiceDescription serviceDescription,PaaSDeploymentContext dc){
  String serviceName=serviceDescription.getName();
  LBPluginLogger.getLogger().log(Level.INFO,""String_Node_Str"" + serviceName);
  logger.entering(getClass().getName(),""String_Node_Str"");
  ActionReport report=habitat.getComponent(ActionReport.class);
  org.glassfish.api.admin.CommandRunner.CommandInvocation invocation=commandRunner.getCommandInvocation(""String_Node_Str"",report);
  ParameterMap parameterMap=new ParameterMap();
  if (serviceDescription.getAppName() != null) {
    parameterMap.add(""String_Node_Str"",serviceDescription.getAppName());
  }
  if (serviceDescription.getServiceCharacteristics() != null) {
    String serviceCharacteristics=formatArgument(serviceDescription.getServiceCharacteristics().getServiceCharacteristics());
    parameterMap.add(""String_Node_Str"",serviceCharacteristics);
  }
 else   if (serviceDescription.getTemplateIdentifier() != null) {
    String templateID=serviceDescription.getTemplateIdentifier().getId();
    parameterMap.add(""String_Node_Str"",templateID);
  }
  String serviceConfigurations=formatArgument(serviceDescription.getConfigurations());
  parameterMap.add(""String_Node_Str"",serviceConfigurations);
  parameterMap.add(""String_Node_Str"",""String_Node_Str"");
  parameterMap.add(""String_Node_Str"",serviceDescription.getVirtualClusterName());
  String domainName=System.getProperty(Constants.DOMAIN_NAME_SYSTEM_PROPERTY);
  if (domainName != null) {
    parameterMap.add(""String_Node_Str"",domainName);
  }
  parameterMap.add(""String_Node_Str"",serviceName);
  invocation.parameters(parameterMap).execute();
  if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
    LBPluginLogger.getLogger().log(Level.INFO,""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
  Properties serviceProperties=report.getExtraProperties();
  parameterMap=new ParameterMap();
  if (serviceDescription.getAppName() != null) {
    parameterMap.add(""String_Node_Str"",serviceDescription.getAppName());
  }
  parameterMap.add(""String_Node_Str"",serviceDescription.getVirtualClusterName());
  parameterMap.add(""String_Node_Str"",serviceProperties.getProperty(""String_Node_Str""));
  parameterMap.add(""String_Node_Str"",serviceName);
  report=habitat.getComponent(ActionReport.class);
  invocation=commandRunner.getCommandInvocation(""String_Node_Str"",report);
  invocation.parameters(parameterMap).execute();
  if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
    LBPluginLogger.getLogger().log(Level.WARNING,""String_Node_Str"" + serviceName + ""String_Node_Str"",report.getFailureCause());
  }
  GlassFishLBProvisionedService ps=new GlassFishLBProvisionedService(serviceDescription,serviceProperties);
  ps.setStatus(ServiceStatus.RUNNING);
  return ps;
}"
30021,"void logCommandLine(){
  StringBuilder sb=new StringBuilder();
  for (  String s : commandLine) {
    sb.append(NEWLINE);
    sb.append(s);
  }
  if (!isFakeLaunch()) {
    GFLauncherLogger.fine(""String_Node_Str"",sb.toString());
  }
}","void logCommandLine(){
  StringBuilder sb=new StringBuilder();
  for (  String s : jvmOptionsList) {
    sb.append(NEWLINE);
    sb.append(s);
  }
  if (!isFakeLaunch()) {
    GFLauncherLogger.info(""String_Node_Str"",sb.toString());
  }
}"
30022,"public void setup() throws GFLauncherException, MiniXmlParserException {
  ASenvPropertyReader pr;
  if (isFakeLaunch()) {
    pr=new ASenvPropertyReader(info.getInstallDir());
  }
 else {
    pr=new ASenvPropertyReader();
  }
  asenvProps=pr.getProps();
  info.setup();
  setupLogLevels();
  MiniXmlParser parser=new MiniXmlParser(getInfo().getConfigFile(),getInfo().getInstanceName());
  String domainName=parser.getDomainName();
  if (GFLauncherUtils.ok(domainName)) {
    info.setDomainName(domainName);
  }
  info.setAdminAddresses(parser.getAdminAddresses());
  javaConfig=new JavaConfig(parser.getJavaConfig());
  setupProfilerAndJvmOptions(parser);
  setupUpgradeSecurity();
  Map<String,String> realmprops=parser.getAdminRealmProperties();
  if (realmprops != null) {
    String classname=realmprops.get(""String_Node_Str"");
    String keyfile=realmprops.get(""String_Node_Str"");
    if (""String_Node_Str"".equals(classname) && keyfile != null) {
      adminFileRealmKeyFile=keyfile;
    }
  }
  secureAdminEnabled=parser.getSecureAdminEnabled();
  renameOsgiCache();
  setupMonitoring(parser);
  sysPropsFromXml=parser.getSystemProperties();
  asenvProps.put(INSTANCE_ROOT_PROPERTY,getInfo().getInstanceRootDir().getPath());
  String jhome=javaConfig.getJavaHome();
  if (GFLauncherUtils.ok(jhome) && !jhome.trim().equals(""String_Node_Str"" + JAVA_ROOT_PROPERTY + ""String_Node_Str"")) {
    asenvProps.put(JAVA_ROOT_PROPERTY,jhome);
  }
  debugOptions=getDebug();
  parseDebug();
  parser.setupConfigDir(getInfo().getConfigDir(),getInfo().getInstallDir());
  setLogFilename(parser);
  resolveAllTokens();
  fixLogFilename();
  GFLauncherLogger.addLogFileHandler(logFilename,info);
  setJavaExecutable();
  setClasspath();
  setCommandLine();
  logCommandLine();
  needsAutoUpgrade=!parser.hasNetworkConfig();
  needsManualUpgrade=!parser.hasDefaultConfig();
  setupCalledByClients=true;
}","public void setup() throws GFLauncherException, MiniXmlParserException {
  ASenvPropertyReader pr;
  if (isFakeLaunch()) {
    pr=new ASenvPropertyReader(info.getInstallDir());
  }
 else {
    pr=new ASenvPropertyReader();
  }
  asenvProps=pr.getProps();
  info.setup();
  setupLogLevels();
  MiniXmlParser parser=new MiniXmlParser(getInfo().getConfigFile(),getInfo().getInstanceName());
  String domainName=parser.getDomainName();
  if (GFLauncherUtils.ok(domainName)) {
    info.setDomainName(domainName);
  }
  info.setAdminAddresses(parser.getAdminAddresses());
  javaConfig=new JavaConfig(parser.getJavaConfig());
  setupProfilerAndJvmOptions(parser);
  setupUpgradeSecurity();
  Map<String,String> realmprops=parser.getAdminRealmProperties();
  if (realmprops != null) {
    String classname=realmprops.get(""String_Node_Str"");
    String keyfile=realmprops.get(""String_Node_Str"");
    if (""String_Node_Str"".equals(classname) && keyfile != null) {
      adminFileRealmKeyFile=keyfile;
    }
  }
  secureAdminEnabled=parser.getSecureAdminEnabled();
  renameOsgiCache();
  setupMonitoring(parser);
  sysPropsFromXml=parser.getSystemProperties();
  asenvProps.put(INSTANCE_ROOT_PROPERTY,getInfo().getInstanceRootDir().getPath());
  String jhome=javaConfig.getJavaHome();
  if (GFLauncherUtils.ok(jhome) && !jhome.trim().equals(""String_Node_Str"" + JAVA_ROOT_PROPERTY + ""String_Node_Str"")) {
    asenvProps.put(JAVA_ROOT_PROPERTY,jhome);
  }
  debugOptions=getDebug();
  parseDebug();
  parser.setupConfigDir(getInfo().getConfigDir(),getInfo().getInstallDir());
  setLogFilename(parser);
  resolveAllTokens();
  fixLogFilename();
  GFLauncherLogger.addLogFileHandler(logFilename,info);
  setJavaExecutable();
  setClasspath();
  setCommandLine();
  setJvmOptions();
  logCommandLine();
  needsAutoUpgrade=!parser.hasNetworkConfig();
  needsManualUpgrade=!parser.hasDefaultConfig();
  setupCalledByClients=true;
}"
30023,"private boolean set(AdminCommandContext context,String nameval){
  int i=nameval.indexOf('=');
  if (i < 0) {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",nameval));
    return false;
  }
  String target=nameval.substring(0,i);
  String value=nameval.substring(i + 1);
  int lastDotIndex=trueLastIndexOf(target,'.');
  if (lastDotIndex == -1) {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target));
    return false;
  }
  String attrName=target.substring(lastDotIndex + 1).replace(""String_Node_Str"",""String_Node_Str"");
  String pattern=target.substring(0,lastDotIndex);
  if (attrName.replace('_','-').equals(""String_Node_Str"")) {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target));
    return false;
  }
  boolean isProperty=false;
  if (""String_Node_Str"".equals(pattern.substring(trueLastIndexOf(pattern,'.') + 1))) {
    pattern=target.replaceAll(""String_Node_Str"",""String_Node_Str"");
    isProperty=true;
  }
  TreeNode[] parentNodes=getAliasedParent(domain,pattern);
  String prefix;
  boolean lookAtSubNodes=true;
  if (parentNodes[0].relativeName.length() == 0 || parentNodes[0].relativeName.equals(""String_Node_Str"")) {
    prefix=""String_Node_Str"";
    lookAtSubNodes=false;
  }
 else   if (!pattern.startsWith(parentNodes[0].relativeName)) {
    prefix=pattern.substring(0,pattern.indexOf(parentNodes[0].relativeName));
    pattern=parentNodes[0].relativeName;
  }
 else {
    prefix=""String_Node_Str"";
    pattern=parentNodes[0].relativeName;
  }
  String targetName=prefix + pattern;
  Map<Dom,String> matchingNodes;
  boolean applyOverrideRules=false;
  Map<Dom,String> dottedNames=new HashMap<Dom,String>();
  if (lookAtSubNodes) {
    for (    TreeNode parentNode : parentNodes) {
      dottedNames.putAll(getAllDottedNodes(parentNode.node));
    }
    matchingNodes=getMatchingNodes(dottedNames,pattern);
    applyOverrideRules=true;
  }
 else {
    matchingNodes=new HashMap<Dom,String>();
    for (    TreeNode parentNode : parentNodes) {
      matchingNodes.put(parentNode.node,pattern);
    }
  }
  if (matchingNodes.isEmpty()) {
    pattern=target.substring(0,trueLastIndexOf(target,'.'));
    if (pattern.endsWith(""String_Node_Str"")) {
      pattern=pattern.substring(0,trueLastIndexOf(pattern,'.'));
      parentNodes=getAliasedParent(domain,pattern);
      pattern=parentNodes[0].relativeName;
      matchingNodes=getMatchingNodes(dottedNames,pattern);
      if (matchingNodes.isEmpty()) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
        return false;
      }
      Dom parentNode=null;
      for (      Map.Entry<Dom,String> node : matchingNodes.entrySet()) {
        if (node.getValue().equals(pattern)) {
          parentNode=node.getKey();
        }
      }
      if (parentNode == null) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
        return false;
      }
      Map<String,String> attributes=new HashMap<String,String>();
      attributes.put(""String_Node_Str"",value);
      attributes.put(""String_Node_Str"",attrName);
      try {
        ConfigSupport.createAndSet((ConfigBean)parentNode,Property.class,attributes);
        success(context,targetName,value);
        runLegacyChecks(context);
        if (targetService.isThisDAS() && !replicateSetCommand(context,targetName,value))         return false;
        return true;
      }
 catch (      TransactionFailure transactionFailure) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
        return false;
      }
    }
  }
  Map<ConfigBean,Map<String,String>> changes=new HashMap<ConfigBean,Map<String,String>>();
  boolean setElementSuccess=false;
  boolean delPropertySuccess=false;
  boolean delProperty=false;
  Map<String,String> attrChanges=new HashMap<String,String>();
  if (isProperty) {
    attrName=""String_Node_Str"";
    if ((value == null) || (value.length() == 0)) {
      delProperty=true;
    }
    attrChanges.put(attrName,value);
  }
  List<Map.Entry> mNodes=new ArrayList(matchingNodes.entrySet());
  if (applyOverrideRules) {
    mNodes=applyOverrideRules(mNodes);
  }
  for (  Map.Entry<Dom,String> node : mNodes) {
    final Dom targetNode=node.getKey();
    for (    String name : targetNode.model.getAttributeNames()) {
      String finalDottedName=node.getValue() + ""String_Node_Str"" + name;
      if (matches(finalDottedName,pattern)) {
        if (attrName.equals(name) || attrName.replace('_','-').equals(name.replace('_','-'))) {
          if (isDeprecatedAttr(targetNode,name)) {
            warning(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",finalDottedName));
          }
          if (!isProperty) {
            targetName=prefix + finalDottedName;
            if (value != null && value.length() > 0) {
              attrChanges.put(name,value);
            }
 else {
              attrChanges.put(name,null);
            }
          }
 else {
            targetName=prefix + node.getValue();
          }
          if (delProperty) {
            String str=node.getValue();
            if (trueLastIndexOf(str,'.') != -1) {
              str=str.substring(trueLastIndexOf(str,'.') + 1);
            }
            try {
              if (str != null) {
                ConfigSupport.deleteChild((ConfigBean)targetNode.parent(),(ConfigBean)targetNode);
                delPropertySuccess=true;
              }
            }
 catch (            IllegalArgumentException ie) {
              fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ie.getMessage()),ie);
              return false;
            }
catch (            TransactionFailure transactionFailure) {
              fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
              return false;
            }
          }
 else {
            changes.put((ConfigBean)node.getKey(),attrChanges);
          }
        }
      }
    }
    for (    String name : targetNode.model.getLeafElementNames()) {
      String finalDottedName=node.getValue() + ""String_Node_Str"" + name;
      if (matches(finalDottedName,pattern)) {
        if (attrName.equals(name) || attrName.replace('_','-').equals(name.replace('_','-'))) {
          if (isDeprecatedAttr(targetNode,name)) {
            warning(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",finalDottedName));
          }
          try {
            setLeafElement((ConfigBean)targetNode,name,value);
          }
 catch (          TransactionFailure ex) {
            fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ex.getMessage()),ex);
            return false;
          }
          setElementSuccess=true;
          break;
        }
      }
    }
  }
  if (!changes.isEmpty()) {
    try {
      config.apply(changes);
      success(context,targetName,value);
      runLegacyChecks(context);
    }
 catch (    TransactionFailure transactionFailure) {
      fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
      return false;
    }
  }
 else   if (delPropertySuccess || setElementSuccess) {
    success(context,targetName,value);
  }
 else {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
    return false;
  }
  if (targetService.isThisDAS() && !replicateSetCommand(context,targetName,value))   return false;
  return true;
}","private boolean set(AdminCommandContext context,String nameval){
  int i=nameval.indexOf('=');
  if (i < 0) {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",nameval));
    return false;
  }
  String target=nameval.substring(0,i);
  String value=nameval.substring(i + 1);
  int lastDotIndex=trueLastIndexOf(target,'.');
  if (lastDotIndex == -1) {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target));
    return false;
  }
  String attrName=target.substring(lastDotIndex + 1).replace(""String_Node_Str"",""String_Node_Str"");
  String pattern=target.substring(0,lastDotIndex);
  if (attrName.replace('_','-').equals(""String_Node_Str"")) {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target));
    return false;
  }
  boolean isProperty=false;
  if (""String_Node_Str"".equals(pattern.substring(trueLastIndexOf(pattern,'.') + 1))) {
    pattern=target.replaceAll(""String_Node_Str"",""String_Node_Str"");
    isProperty=true;
  }
  TreeNode[] parentNodes=getAliasedParent(domain,pattern);
  String prefix;
  boolean lookAtSubNodes=true;
  if (parentNodes[0].relativeName.length() == 0 || parentNodes[0].relativeName.equals(""String_Node_Str"")) {
    prefix=""String_Node_Str"";
    lookAtSubNodes=false;
  }
 else   if (!pattern.startsWith(parentNodes[0].relativeName)) {
    prefix=pattern.substring(0,pattern.indexOf(parentNodes[0].relativeName));
    pattern=parentNodes[0].relativeName;
  }
 else {
    prefix=""String_Node_Str"";
    pattern=parentNodes[0].relativeName;
  }
  String targetName=prefix + pattern;
  Map<Dom,String> matchingNodes;
  boolean applyOverrideRules=false;
  Map<Dom,String> dottedNames=new HashMap<Dom,String>();
  if (lookAtSubNodes) {
    for (    TreeNode parentNode : parentNodes) {
      dottedNames.putAll(getAllDottedNodes(parentNode.node));
    }
    matchingNodes=getMatchingNodes(dottedNames,pattern);
    applyOverrideRules=true;
  }
 else {
    matchingNodes=new HashMap<Dom,String>();
    for (    TreeNode parentNode : parentNodes) {
      matchingNodes.put(parentNode.node,pattern);
    }
  }
  if (matchingNodes.isEmpty()) {
    pattern=target.substring(0,trueLastIndexOf(target,'.'));
    if (pattern.endsWith(""String_Node_Str"")) {
      pattern=pattern.substring(0,trueLastIndexOf(pattern,'.'));
      parentNodes=getAliasedParent(domain,pattern);
      pattern=parentNodes[0].relativeName;
      matchingNodes=getMatchingNodes(dottedNames,pattern);
      if (matchingNodes.isEmpty()) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
        return false;
      }
      Dom parentNode=null;
      for (      Map.Entry<Dom,String> node : matchingNodes.entrySet()) {
        if (node.getValue().equals(pattern)) {
          parentNode=node.getKey();
        }
      }
      if (parentNode == null) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
        return false;
      }
      if (value == null || value.length() == 0) {
        success(context,targetName,value);
        return true;
      }
      Map<String,String> attributes=new HashMap<String,String>();
      attributes.put(""String_Node_Str"",value);
      attributes.put(""String_Node_Str"",attrName);
      try {
        ConfigSupport.createAndSet((ConfigBean)parentNode,Property.class,attributes);
        success(context,targetName,value);
        runLegacyChecks(context);
        if (targetService.isThisDAS() && !replicateSetCommand(context,targetName,value))         return false;
        return true;
      }
 catch (      TransactionFailure transactionFailure) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
        return false;
      }
    }
  }
  Map<ConfigBean,Map<String,String>> changes=new HashMap<ConfigBean,Map<String,String>>();
  boolean setElementSuccess=false;
  boolean delPropertySuccess=false;
  boolean delProperty=false;
  Map<String,String> attrChanges=new HashMap<String,String>();
  if (isProperty) {
    attrName=""String_Node_Str"";
    if ((value == null) || (value.length() == 0)) {
      delProperty=true;
    }
    attrChanges.put(attrName,value);
  }
  List<Map.Entry> mNodes=new ArrayList(matchingNodes.entrySet());
  if (applyOverrideRules) {
    mNodes=applyOverrideRules(mNodes);
  }
  for (  Map.Entry<Dom,String> node : mNodes) {
    final Dom targetNode=node.getKey();
    for (    String name : targetNode.model.getAttributeNames()) {
      String finalDottedName=node.getValue() + ""String_Node_Str"" + name;
      if (matches(finalDottedName,pattern)) {
        if (attrName.equals(name) || attrName.replace('_','-').equals(name.replace('_','-'))) {
          if (isDeprecatedAttr(targetNode,name)) {
            warning(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",finalDottedName));
          }
          if (!isProperty) {
            targetName=prefix + finalDottedName;
            if (value != null && value.length() > 0) {
              attrChanges.put(name,value);
            }
 else {
              attrChanges.put(name,null);
            }
          }
 else {
            targetName=prefix + node.getValue();
          }
          if (delProperty) {
            String str=node.getValue();
            if (trueLastIndexOf(str,'.') != -1) {
              str=str.substring(trueLastIndexOf(str,'.') + 1);
            }
            try {
              if (str != null) {
                ConfigSupport.deleteChild((ConfigBean)targetNode.parent(),(ConfigBean)targetNode);
                delPropertySuccess=true;
              }
            }
 catch (            IllegalArgumentException ie) {
              fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ie.getMessage()),ie);
              return false;
            }
catch (            TransactionFailure transactionFailure) {
              fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
              return false;
            }
          }
 else {
            changes.put((ConfigBean)node.getKey(),attrChanges);
          }
        }
      }
    }
    for (    String name : targetNode.model.getLeafElementNames()) {
      String finalDottedName=node.getValue() + ""String_Node_Str"" + name;
      if (matches(finalDottedName,pattern)) {
        if (attrName.equals(name) || attrName.replace('_','-').equals(name.replace('_','-'))) {
          if (isDeprecatedAttr(targetNode,name)) {
            warning(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",finalDottedName));
          }
          try {
            setLeafElement((ConfigBean)targetNode,name,value);
          }
 catch (          TransactionFailure ex) {
            fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ex.getMessage()),ex);
            return false;
          }
          setElementSuccess=true;
          break;
        }
      }
    }
  }
  if (!changes.isEmpty()) {
    try {
      config.apply(changes);
      success(context,targetName,value);
      runLegacyChecks(context);
    }
 catch (    TransactionFailure transactionFailure) {
      fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
      return false;
    }
  }
 else   if (delPropertySuccess || setElementSuccess) {
    success(context,targetName,value);
  }
 else {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
    return false;
  }
  if (targetService.isThisDAS() && !replicateSetCommand(context,targetName,value))   return false;
  return true;
}"
30024,"@Override public void onEntryAddedEvent(final FileCache fileCache,final FileCacheEntry entry){
  grizzlyMonitoring.getFileCacheProbeProvider().incOpenCacheEntriesEvent(monitoringId);
switch (entry.type) {
case HEAP:
{
      grizzlyMonitoring.getFileCacheProbeProvider().addHeapSizeEvent(monitoringId,entry.contentLength);
      break;
    }
case MAPPED:
{
    grizzlyMonitoring.getFileCacheProbeProvider().addMappedMemorySizeEvent(monitoringId,entry.contentLength);
    break;
  }
}
}","@Override public void onEntryAddedEvent(final FileCache fileCache,final FileCacheEntry entry){
  grizzlyMonitoring.getFileCacheProbeProvider().incOpenCacheEntriesEvent(monitoringId);
switch (entry.type) {
case HEAP:
{
      grizzlyMonitoring.getFileCacheProbeProvider().addHeapSizeEvent(monitoringId,entry.contentLength);
      break;
    }
case MAPPED:
{
    grizzlyMonitoring.getFileCacheProbeProvider().addMappedMemorySizeEvent(monitoringId,entry.contentLength);
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"" + entry.type);
}
}
}"
30025,"@Override public void onEntryHitEvent(final FileCache fileCache,final FileCacheEntry entry){
  grizzlyMonitoring.getFileCacheProbeProvider().countHitEvent(monitoringId);
switch (entry.type) {
case HEAP:
{
      grizzlyMonitoring.getFileCacheProbeProvider().countInfoHitEvent(monitoringId);
      break;
    }
case MAPPED:
{
    grizzlyMonitoring.getFileCacheProbeProvider().countContentHitEvent(monitoringId);
    break;
  }
}
}","@Override public void onEntryHitEvent(final FileCache fileCache,final FileCacheEntry entry){
  grizzlyMonitoring.getFileCacheProbeProvider().countHitEvent(monitoringId);
switch (entry.type) {
case HEAP:
{
      grizzlyMonitoring.getFileCacheProbeProvider().countInfoHitEvent(monitoringId);
      break;
    }
case MAPPED:
{
    grizzlyMonitoring.getFileCacheProbeProvider().countContentHitEvent(monitoringId);
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"" + entry.type);
}
}
}"
30026,"@Override public void onEntryRemovedEvent(final FileCache fileCache,final FileCacheEntry entry){
  grizzlyMonitoring.getFileCacheProbeProvider().decOpenCacheEntriesEvent(monitoringId);
switch (entry.type) {
case HEAP:
{
      grizzlyMonitoring.getFileCacheProbeProvider().subHeapSizeEvent(monitoringId,entry.contentLength);
      break;
    }
case MAPPED:
{
    grizzlyMonitoring.getFileCacheProbeProvider().subMappedMemorySizeEvent(monitoringId,entry.contentLength);
    break;
  }
}
}","@Override public void onEntryRemovedEvent(final FileCache fileCache,final FileCacheEntry entry){
  grizzlyMonitoring.getFileCacheProbeProvider().decOpenCacheEntriesEvent(monitoringId);
switch (entry.type) {
case HEAP:
{
      grizzlyMonitoring.getFileCacheProbeProvider().subHeapSizeEvent(monitoringId,entry.contentLength);
      break;
    }
case MAPPED:
{
    grizzlyMonitoring.getFileCacheProbeProvider().subMappedMemorySizeEvent(monitoringId,entry.contentLength);
    break;
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"" + entry.type);
}
}
}"
30027,"public KeepAliveMonitor(GrizzlyMonitoring grizzlyMonitoring,String monitoringId,KeepAlive config){
  this.grizzlyMonitoring=grizzlyMonitoring;
  this.monitoringId=monitoringId;
  if (grizzlyMonitoring != null) {
    final KeepAliveStatsProvider statsProvider=grizzlyMonitoring.getKeepAliveStatsProvider(monitoringId);
    if (statsProvider != null) {
      statsProvider.setStatsObject(config);
    }
    statsProvider.reset();
  }
}","public KeepAliveMonitor(GrizzlyMonitoring grizzlyMonitoring,String monitoringId,KeepAlive config){
  this.grizzlyMonitoring=grizzlyMonitoring;
  this.monitoringId=monitoringId;
  if (grizzlyMonitoring != null) {
    final KeepAliveStatsProvider statsProvider=grizzlyMonitoring.getKeepAliveStatsProvider(monitoringId);
    statsProvider.setStatsObject(config);
    statsProvider.reset();
  }
}"
30028,"public PrintStream printf(String str,Object... args){
  StringBuilder sb=new StringBuilder();
  Formatter formatter=new Formatter(sb,Locale.getDefault());
  formatter.format(str,args);
  print(sb.toString());
  return null;
}","public PrintStream printf(Locale locale,String str,Object... args){
  StringBuilder sb=new StringBuilder();
  Formatter formatter=new Formatter(sb,locale);
  formatter.format(str,args);
  print(sb.toString());
  return null;
}"
30029,"private void addEnvironmentProperties(ScopeType scope,Iterator envItr,Collection<JNDIBinding> jndiBindings){
  while (envItr.hasNext()) {
    EnvironmentProperty next=(EnvironmentProperty)envItr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    if (next.hasAValue()) {
      String name=descriptorToLogicalJndiName(next);
      Object value=next.hasLookupName() ? namingUtils.createLazyNamingObjectFactory(name,next.getLookupName(),true) : namingUtils.createSimpleNamingObjectFactory(name,next.getValueObject());
      jndiBindings.add(new CompEnvBinding(name,value));
    }
  }
}","private void addEnvironmentProperties(ScopeType scope,Iterator envItr,Collection<JNDIBinding> jndiBindings){
  while (envItr.hasNext()) {
    EnvironmentProperty next=(EnvironmentProperty)envItr.next();
    if (!dependencyAppliesToScope(next,scope)) {
      continue;
    }
    if (next.hasAValue()) {
      String name=descriptorToLogicalJndiName(next);
      Object value;
      if (next.hasLookupName()) {
        value=namingUtils.createLazyNamingObjectFactory(name,next.getLookupName(),true);
      }
 else       if (next.getMappedName().length() > 0) {
        value=namingUtils.createLazyNamingObjectFactory(name,next.getMappedName(),true);
      }
 else {
        value=namingUtils.createSimpleNamingObjectFactory(name,next.getValueObject());
      }
      jndiBindings.add(new CompEnvBinding(name,value));
    }
  }
}"
30030,"public boolean hasAValue(){
  return (setValueCalled || hasLookupName());
}","public boolean hasAValue(){
  return (setValueCalled || hasLookupName() || getMappedName().length() > 0);
}"
30031,"public String getLogFileForGivenTarget(String targetServerName) throws IOException {
  Server targetServer=domain.getServerNamed(targetServerName);
  String serverNode=targetServer.getNodeRef();
  if (targetServer.isDas()) {
    String logFileDetailsForServer=loggingConfig.getLoggingFileDetails();
    logFileDetailsForServer=TranslatedConfigView.getTranslatedValue(logFileDetailsForServer).toString();
    return logFileDetailsForServer;
  }
 else {
    String logFileDetailsForInstance=getInstanceLogFileDirectory(targetServer);
    Node node=domain.getNodes().getNode(serverNode);
    String loggingDir=""String_Node_Str"";
    String loggingFile=""String_Node_Str"";
    if (logFileDetailsForInstance.contains(""String_Node_Str"") && node.getNodeDir() != null) {
      loggingDir=node.getNodeDir() + File.separator + serverNode+ File.separator+ targetServerName;
      loggingFile=logFileDetailsForInstance.replace(""String_Node_Str"",loggingDir);
    }
 else     if (logFileDetailsForInstance.contains(""String_Node_Str"") && node.getInstallDir() != null) {
      loggingDir=node.getInstallDir() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ serverNode+ File.separator+ targetServerName;
      loggingFile=logFileDetailsForInstance.replace(""String_Node_Str"",loggingDir);
    }
 else {
      loggingFile=logFileDetailsForInstance;
    }
    if (node.isLocal()) {
      return loggingFile;
    }
 else {
      String logFileName=logFileDetailsForInstance.substring(logFileDetailsForInstance.lastIndexOf(File.separator) + 1,logFileDetailsForInstance.length());
      File instanceFile=new LogFilterForInstance().downloadGivenInstanceLogFile(habitat,targetServer,domain,logger,targetServerName,env.getDomainRoot().getAbsolutePath(),logFileName,logFileDetailsForInstance);
      return instanceFile.getAbsolutePath();
    }
  }
}","public String getLogFileForGivenTarget(String targetServerName) throws IOException {
  Server targetServer=domain.getServerNamed(targetServerName);
  String serverNode=targetServer.getNodeRef();
  if (targetServer.isDas()) {
    String logFileDetailsForServer=loggingConfig.getLoggingFileDetails();
    logFileDetailsForServer=TranslatedConfigView.getTranslatedValue(logFileDetailsForServer).toString();
    return logFileDetailsForServer;
  }
 else {
    String logFileDetailsForInstance=getInstanceLogFileDirectory(targetServer);
    Node node=domain.getNodes().getNode(serverNode);
    String loggingDir=""String_Node_Str"";
    String loggingFile=""String_Node_Str"";
    if (logFileDetailsForInstance.contains(""String_Node_Str"") && node.getNodeDir() != null) {
      loggingDir=node.getNodeDir() + File.separator + serverNode+ File.separator+ targetServerName;
      loggingFile=logFileDetailsForInstance.replace(""String_Node_Str"",loggingDir);
    }
 else     if (logFileDetailsForInstance.contains(""String_Node_Str"") && node.getInstallDir() != null) {
      loggingDir=node.getInstallDir() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ serverNode+ File.separator+ targetServerName;
      loggingFile=logFileDetailsForInstance.replace(""String_Node_Str"",loggingDir);
    }
 else {
      loggingFile=logFileDetailsForInstance;
    }
    if (node.isLocal()) {
      return loggingFile;
    }
 else {
      String logFileName=logFileDetailsForInstance.substring(logFileDetailsForInstance.lastIndexOf(File.separator) + 1,logFileDetailsForInstance.length());
      File instanceFile=null;
      try {
        instanceFile=new LogFilterForInstance().downloadGivenInstanceLogFile(habitat,targetServer,domain,logger,targetServerName,env.getDomainRoot().getAbsolutePath(),logFileName,logFileDetailsForInstance);
      }
 catch (      WindowsException we) {
        throw new IOException(""String_Node_Str"");
      }
      return instanceFile.getAbsolutePath();
    }
  }
}"
30032,"private Application getAppFromDescriptor(){
  Application app=null;
  if (descriptor instanceof BundleDescriptor) {
    BundleDescriptor bundle=(BundleDescriptor)descriptor;
    app=bundle.getApplication();
  }
 else   if (descriptor instanceof EjbDescriptor) {
    app=((EjbDescriptor)descriptor).getApplication();
  }
  return app;
}","public Application getAppFromDescriptor(){
  Application app=null;
  if (descriptor instanceof BundleDescriptor) {
    BundleDescriptor bundle=(BundleDescriptor)descriptor;
    app=bundle.getApplication();
  }
 else   if (descriptor instanceof EjbDescriptor) {
    app=((EjbDescriptor)descriptor).getApplication();
  }
  return app;
}"
30033,"private EnvironmentProperty[] getDescriptors(Class resourceType,String logicalName,ResourceContainerContext[] rcContexts,Resource resourceAn){
  Class webServiceContext=null;
  try {
    WSDolSupport support=Globals.getDefaultHabitat().getComponent(WSDolSupport.class);
    if (support != null) {
      webServiceContext=support.getType(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
  }
  if (resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"")) {
    return getMessageDestinationReferenceDescriptors(logicalName,rcContexts);
  }
 else   if (resourceType == javax.sql.DataSource.class || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType == webServiceContext || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType == org.omg.CORBA_2_3.ORB.class || resourceType == org.omg.CORBA.ORB.class || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"")) {
    return getResourceReferenceDescriptors(logicalName,rcContexts);
  }
 else   if (envEntryTypes.containsKey(resourceType) || resourceType.isEnum()) {
    return getEnvironmentPropertyDescriptors(logicalName,rcContexts,resourceAn);
  }
 else {
    return getJmsDestinationReferenceDescriptors(logicalName,rcContexts);
  }
}","private EnvironmentProperty[] getDescriptors(Class resourceType,String logicalName,ResourceContainerContext[] rcContexts,Resource resourceAn){
  Class webServiceContext=null;
  try {
    WSDolSupport support=habitat.getComponent(WSDolSupport.class);
    if (support != null) {
      webServiceContext=support.getType(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
  }
  if (resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"")) {
    return getMessageDestinationReferenceDescriptors(logicalName,rcContexts);
  }
 else   if (envEntryTypes.containsKey(resourceType) || resourceType.isEnum()) {
    return getEnvironmentPropertyDescriptors(logicalName,rcContexts,resourceAn);
  }
 else   if (resourceType == javax.sql.DataSource.class || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType == webServiceContext || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType == org.omg.CORBA_2_3.ORB.class || resourceType == org.omg.CORBA.ORB.class || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || resourceType.getName().equals(""String_Node_Str"") || DOLUtils.isRAConnectionFactory(habitat,resourceType.getName(),((ResourceContainerContextImpl)rcContexts[0]).getAppFromDescriptor())) {
    return getResourceReferenceDescriptors(logicalName,rcContexts);
  }
 else {
    return getJmsDestinationReferenceDescriptors(logicalName,rcContexts);
  }
}"
30034,"/** 
 * read the modules deployment descriptor from this application object using the passed archive
 * @param app application containing the list of modules.
 * @param appArchive containing the sub modules files.
 * @return true if everything went fine
 */
public boolean readModulesDescriptors(Application app,ReadableArchive appArchive) throws IOException, SAXParseException {
  List<ModuleDescriptor> nonexistentModules=new ArrayList<ModuleDescriptor>();
  for (  ModuleDescriptor aModule : app.getModules()) {
    if (DOLUtils.getDefaultLogger().isLoggable(Level.FINE)) {
      DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + aModule);
    }
    RootDeploymentDescriptor descriptor=null;
    Archivist newArchivist=archivistFactory.get().getPrivateArchivistFor(aModule.getModuleType());
    newArchivist.initializeContext(this);
    newArchivist.setRuntimeXMLValidation(this.getRuntimeXMLValidation());
    newArchivist.setRuntimeXMLValidationLevel(this.getRuntimeXMLValidationLevel());
    newArchivist.setAnnotationProcessingRequested(annotationProcessingRequested);
    ReadableArchive embeddedArchive=appArchive.getSubArchive(aModule.getArchiveUri());
    if (embeddedArchive == null) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
    }
    embeddedArchive.setParentArchive(appArchive);
    if (aModule.getAlternateDescriptor() != null) {
      InputStream is=appArchive.getEntry(aModule.getAlternateDescriptor());
      DeploymentDescriptorFile ddFile=newArchivist.getStandardDDFile();
      ddFile.setXMLValidation(newArchivist.getXMLValidation());
      ddFile.setXMLValidationLevel(newArchivist.getXMLValidationLevel());
      if (appArchive.getURI() != null) {
        ddFile.setErrorReportingString(appArchive.getURI().getSchemeSpecificPart());
      }
      descriptor=(BundleDescriptor)ddFile.read(is);
      ((BundleDescriptor)descriptor).setApplication(app);
      is.close();
      Map<ExtensionsArchivist,RootDeploymentDescriptor> extensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
      if (extensionsArchivists != null) {
        for (        ExtensionsArchivist extension : extensionsArchivists) {
          if (extension.supportsModuleType(aModule.getModuleType())) {
            Object rdd=extension.open(newArchivist,embeddedArchive,descriptor);
            if (rdd instanceof RootDeploymentDescriptor) {
              extensions.put(extension,(RootDeploymentDescriptor)rdd);
            }
          }
        }
      }
      newArchivist.postStandardDDsRead(descriptor,embeddedArchive,extensions);
      newArchivist.readAnnotations(embeddedArchive,descriptor,extensions);
      newArchivist.postAnnotationProcess(descriptor,embeddedArchive);
      newArchivist.postOpen(descriptor,embeddedArchive);
      if (isHandlingRuntimeInfo()) {
        is=appArchive.getEntry(""String_Node_Str"" + aModule.getAlternateDescriptor());
        if (is != null) {
          DeploymentDescriptorFile confDD=newArchivist.getConfigurationDDFile();
          confDD.setXMLValidation(newArchivist.getRuntimeXMLValidation());
          confDD.setXMLValidationLevel(newArchivist.getRuntimeXMLValidationLevel());
          if (appArchive.getURI() != null) {
            confDD.setErrorReportingString(appArchive.getURI().getSchemeSpecificPart());
          }
          confDD.read(descriptor,is);
          is.close();
          newArchivist.postRuntimeDDsRead((RootDeploymentDescriptor)descriptor,embeddedArchive);
        }
 else {
          if (embeddedArchive != null) {
            newArchivist.readRuntimeDeploymentDescriptor(embeddedArchive,descriptor);
          }
        }
        for (        Map.Entry<ExtensionsArchivist,RootDeploymentDescriptor> extension : extensions.entrySet()) {
          if (extension.getValue() != null) {
            extension.getKey().readRuntimeDeploymentDescriptor(newArchivist,embeddedArchive,extension.getValue());
          }
        }
      }
    }
 else {
      if (embeddedArchive != null) {
        descriptor=newArchivist.open(embeddedArchive,app);
      }
 else {
        DOLUtils.getDefaultLogger().info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
        nonexistentModules.add(aModule);
        continue;
      }
    }
    if (embeddedArchive != null) {
      embeddedArchive.close();
    }
    if (descriptor != null && descriptor instanceof BundleDescriptor) {
      descriptor.getModuleDescriptor().setArchiveUri(aModule.getArchiveUri());
      aModule.setModuleName(descriptor.getModuleDescriptor().getModuleName());
      aModule.setDescriptor((BundleDescriptor)descriptor);
      ((BundleDescriptor)descriptor).setApplication(app);
      aModule.setManifest(newArchivist.getManifest());
      if (!appArchive.exists(""String_Node_Str"")) {
        if (aModule.getModuleType().equals(XModuleType.WAR)) {
          aModule.setContextRoot(aModule.getModuleName());
        }
      }
    }
 else {
      if (embeddedArchive != null) {
        DOLUtils.getDefaultLogger().info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
      }
      return false;
    }
  }
  for (  ModuleDescriptor nonexistentModule : nonexistentModules) {
    app.removeModule(nonexistentModule);
  }
  return true;
}","/** 
 * read the modules deployment descriptor from this application object using the passed archive
 * @param app application containing the list of modules.
 * @param appArchive containing the sub modules files.
 * @return true if everything went fine
 */
public boolean readModulesDescriptors(Application app,ReadableArchive appArchive) throws IOException, SAXParseException {
  List<ModuleDescriptor> nonexistentModules=new ArrayList<ModuleDescriptor>();
  List<ModuleDescriptor> sortedModules=sortModules(app);
  for (  ModuleDescriptor aModule : sortedModules) {
    if (DOLUtils.getDefaultLogger().isLoggable(Level.FINE)) {
      DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + aModule);
    }
    RootDeploymentDescriptor descriptor=null;
    Archivist newArchivist=archivistFactory.get().getPrivateArchivistFor(aModule.getModuleType());
    newArchivist.initializeContext(this);
    newArchivist.setRuntimeXMLValidation(this.getRuntimeXMLValidation());
    newArchivist.setRuntimeXMLValidationLevel(this.getRuntimeXMLValidationLevel());
    newArchivist.setAnnotationProcessingRequested(annotationProcessingRequested);
    ReadableArchive embeddedArchive=appArchive.getSubArchive(aModule.getArchiveUri());
    if (embeddedArchive == null) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
    }
    embeddedArchive.setParentArchive(appArchive);
    if (aModule.getAlternateDescriptor() != null) {
      InputStream is=appArchive.getEntry(aModule.getAlternateDescriptor());
      DeploymentDescriptorFile ddFile=newArchivist.getStandardDDFile();
      ddFile.setXMLValidation(newArchivist.getXMLValidation());
      ddFile.setXMLValidationLevel(newArchivist.getXMLValidationLevel());
      if (appArchive.getURI() != null) {
        ddFile.setErrorReportingString(appArchive.getURI().getSchemeSpecificPart());
      }
      descriptor=(BundleDescriptor)ddFile.read(is);
      ((BundleDescriptor)descriptor).setApplication(app);
      is.close();
      Map<ExtensionsArchivist,RootDeploymentDescriptor> extensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
      if (extensionsArchivists != null) {
        for (        ExtensionsArchivist extension : extensionsArchivists) {
          if (extension.supportsModuleType(aModule.getModuleType())) {
            Object rdd=extension.open(newArchivist,embeddedArchive,descriptor);
            if (rdd instanceof RootDeploymentDescriptor) {
              extensions.put(extension,(RootDeploymentDescriptor)rdd);
            }
          }
        }
      }
      newArchivist.postStandardDDsRead(descriptor,embeddedArchive,extensions);
      newArchivist.readAnnotations(embeddedArchive,descriptor,extensions);
      newArchivist.postAnnotationProcess(descriptor,embeddedArchive);
      newArchivist.postOpen(descriptor,embeddedArchive);
      if (isHandlingRuntimeInfo()) {
        is=appArchive.getEntry(""String_Node_Str"" + aModule.getAlternateDescriptor());
        if (is != null) {
          DeploymentDescriptorFile confDD=newArchivist.getConfigurationDDFile();
          confDD.setXMLValidation(newArchivist.getRuntimeXMLValidation());
          confDD.setXMLValidationLevel(newArchivist.getRuntimeXMLValidationLevel());
          if (appArchive.getURI() != null) {
            confDD.setErrorReportingString(appArchive.getURI().getSchemeSpecificPart());
          }
          confDD.read(descriptor,is);
          is.close();
          newArchivist.postRuntimeDDsRead((RootDeploymentDescriptor)descriptor,embeddedArchive);
        }
 else {
          if (embeddedArchive != null) {
            newArchivist.readRuntimeDeploymentDescriptor(embeddedArchive,descriptor);
          }
        }
        for (        Map.Entry<ExtensionsArchivist,RootDeploymentDescriptor> extension : extensions.entrySet()) {
          if (extension.getValue() != null) {
            extension.getKey().readRuntimeDeploymentDescriptor(newArchivist,embeddedArchive,extension.getValue());
          }
        }
      }
    }
 else {
      if (embeddedArchive != null) {
        descriptor=newArchivist.open(embeddedArchive,app);
      }
 else {
        DOLUtils.getDefaultLogger().info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
        nonexistentModules.add(aModule);
        continue;
      }
    }
    if (embeddedArchive != null) {
      embeddedArchive.close();
    }
    if (descriptor != null && descriptor instanceof BundleDescriptor) {
      descriptor.getModuleDescriptor().setArchiveUri(aModule.getArchiveUri());
      aModule.setModuleName(descriptor.getModuleDescriptor().getModuleName());
      aModule.setDescriptor((BundleDescriptor)descriptor);
      ((BundleDescriptor)descriptor).setApplication(app);
      aModule.setManifest(newArchivist.getManifest());
      if (!appArchive.exists(""String_Node_Str"")) {
        if (aModule.getModuleType().equals(XModuleType.WAR)) {
          aModule.setContextRoot(aModule.getModuleName());
        }
      }
    }
 else {
      if (embeddedArchive != null) {
        DOLUtils.getDefaultLogger().info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
      }
      return false;
    }
  }
  for (  ModuleDescriptor nonexistentModule : nonexistentModules) {
    app.removeModule(nonexistentModule);
  }
  return true;
}"
30035,"@Override public void configure(final Habitat habitat,final NetworkListener networkListener,final Http http){
  final boolean jkSupportEnabled=http.getJkEnabled() != null ? Boolean.parseBoolean(http.getJkEnabled()) : Boolean.parseBoolean(networkListener.getJkEnabled());
  if (jkSupportEnabled) {
    final String jkPropertiesFilename=Boolean.parseBoolean(http.getJkEnabled()) ? http.getJkConfigurationFile() : networkListener.getJkConfigurationFile();
    File propertiesFile=null;
    if (jkPropertiesFilename != null) {
      propertiesFile=new File(jkPropertiesFilename);
    }
    final String systemPropertyFilename=System.getProperty(""String_Node_Str"");
    if ((propertiesFile == null || (propertiesFile != null && !propertiesFile.exists())) && systemPropertyFilename != null) {
      propertiesFile=new File(systemPropertyFilename);
    }
    if (propertiesFile == null) {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.finest(""String_Node_Str"");
      }
      return;
    }
    if (!propertiesFile.exists()) {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,""String_Node_Str"",propertiesFile.getAbsoluteFile());
      }
      return;
    }
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.log(Level.FINEST,""String_Node_Str"",propertiesFile.getAbsolutePath());
    }
    Properties properties=null;
    InputStream is=null;
    try {
      is=new BufferedInputStream(new FileInputStream(propertiesFile));
      properties=new Properties();
      properties.load(is);
    }
 catch (    Exception ex) {
      throw new IllegalStateException(ex);
    }
 finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
    configure(properties);
  }
}","@Override public void configure(final Habitat habitat,final NetworkListener networkListener,final Http http){
  final boolean jkSupportEnabled=http.getJkEnabled() != null ? Boolean.parseBoolean(http.getJkEnabled()) : Boolean.parseBoolean(networkListener.getJkEnabled());
  if (jkSupportEnabled) {
    final String jkPropertiesFilename=Boolean.parseBoolean(http.getJkEnabled()) ? http.getJkConfigurationFile() : networkListener.getJkConfigurationFile();
    File propertiesFile=null;
    if (jkPropertiesFilename != null) {
      propertiesFile=new File(jkPropertiesFilename);
    }
    final String systemPropertyFilename=System.getProperty(""String_Node_Str"");
    if ((propertiesFile == null || !propertiesFile.exists()) && systemPropertyFilename != null) {
      propertiesFile=new File(systemPropertyFilename);
    }
    if (propertiesFile == null) {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.finest(""String_Node_Str"");
      }
      return;
    }
    if (!propertiesFile.exists()) {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,""String_Node_Str"",propertiesFile.getAbsoluteFile());
      }
      return;
    }
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.log(Level.FINEST,""String_Node_Str"",propertiesFile.getAbsolutePath());
    }
    Properties properties=null;
    InputStream is=null;
    try {
      is=new BufferedInputStream(new FileInputStream(propertiesFile));
      properties=new Properties();
      properties.load(is);
    }
 catch (    Exception ex) {
      throw new IllegalStateException(ex);
    }
 finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException ioe) {
        }
      }
    }
    configure(properties);
  }
}"
30036,"private void parse(Document document){
  Element element=document.getDocumentElement();
  NodeList adapters=element.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < adapters.getLength(); i++) {
    Node adapter=adapters.item(i);
    NamedNodeMap attrs=adapter.getAttributes();
    NodeList properties=adapter.getChildNodes();
    ArrayList<GrizzlyProperty> list=new ArrayList<GrizzlyProperty>();
    for (int j=0; j < properties.getLength(); j++) {
      Node property=properties.item(j);
      NamedNodeMap values=property.getAttributes();
      if (values != null) {
        list.add(new GrizzlyProperty(values.getNamedItem(""String_Node_Str"").getNodeValue(),values.getNamedItem(""String_Node_Str"").getNodeValue()));
      }
    }
    adapterProperties.put(attrs.getNamedItem(""String_Node_Str"").getNodeValue(),list);
    if (attrs != null) {
      addAdapter(attrs.getNamedItem(""String_Node_Str"").getNodeValue(),attrs.getNamedItem(""String_Node_Str"").getNodeValue());
    }
  }
}","private void parse(Document document){
  Element element=document.getDocumentElement();
  NodeList adapters=element.getElementsByTagName(""String_Node_Str"");
  for (int i=0; i < adapters.getLength(); i++) {
    Node adapter=adapters.item(i);
    NamedNodeMap attrs=adapter.getAttributes();
    NodeList properties=adapter.getChildNodes();
    ArrayList<GrizzlyProperty> list=new ArrayList<GrizzlyProperty>();
    for (int j=0; j < properties.getLength(); j++) {
      Node property=properties.item(j);
      NamedNodeMap values=property.getAttributes();
      if (values != null) {
        list.add(new GrizzlyProperty(values.getNamedItem(""String_Node_Str"").getNodeValue(),values.getNamedItem(""String_Node_Str"").getNodeValue()));
      }
    }
    adapterProperties.put(attrs.getNamedItem(""String_Node_Str"").getNodeValue(),list);
    addAdapter(attrs.getNamedItem(""String_Node_Str"").getNodeValue(),attrs.getNamedItem(""String_Node_Str"").getNodeValue());
  }
}"
30037,"/** 
 * <p> This handler returns the requestParameter value based on the key. If it doesn't exists, then it will look at the request attribute.  If there is no request attribute, it will return the default, if specified.</p> <p> This method will ""html escape"" any &lt;, &gt;, or &amp; characters that appear in a String from the QUERY_STRING.  This is to help prevent XSS vulnerabilities.</p> <p> Input value: ""key"" -- Type: <code>String</code></p> <p> Output value: ""value"" -- Type: <code>String</code></p>
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=Object.class)}) public static void getRequestValue(HandlerContext handlerCtx){
  String key=(String)handlerCtx.getInputValue(""String_Node_Str"");
  Object defaultValue=handlerCtx.getInputValue(""String_Node_Str"");
  Object value=handlerCtx.getFacesContext().getExternalContext().getRequestParameterMap().get(key);
  if ((value == null) || ""String_Node_Str"".equals(value)) {
    value=handlerCtx.getFacesContext().getExternalContext().getRequestMap().get(key);
    if ((value == null) && (defaultValue != null)) {
      value=defaultValue;
    }
  }
 else {
    value=Util.htmlEscape((String)value);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",value);
}","/** 
 * <p> This handler returns the requestParameter value based on the key. If it doesn't exists, then it will look at the request attribute.  If there is no request attribute, it will return the default, if specified.</p> <p> This method will ""html escape"" any &lt;, &gt;, or &amp; characters that appear in a String from the QUERY_STRING.  This is to help prevent XSS vulnerabilities.</p> <p> orig without escape is available, but be very cautious when using it. <p> Input value: ""key"" -- Type: <code>String</code></p> <p> Output value: ""value"" -- Type: <code>String</code></p> <p> Output value: ""orig"" -- Type: <code>String</code></p>
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=Object.class),@HandlerOutput(name=""String_Node_Str"",type=Object.class)}) public static void getRequestValue(HandlerContext handlerCtx){
  String key=(String)handlerCtx.getInputValue(""String_Node_Str"");
  Object defaultValue=handlerCtx.getInputValue(""String_Node_Str"");
  Object value=handlerCtx.getFacesContext().getExternalContext().getRequestParameterMap().get(key);
  Object orig=value;
  if ((value == null) || ""String_Node_Str"".equals(value)) {
    value=handlerCtx.getFacesContext().getExternalContext().getRequestMap().get(key);
    if ((value == null) && (defaultValue != null)) {
      value=defaultValue;
    }
  }
 else {
    value=Util.htmlEscape((String)value);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",value);
  handlerCtx.setOutputValue(""String_Node_Str"",orig);
}"
30038,"/** 
 * A Simple rotate method to close the old file and start the new one when the limit is reached.
 */
public void rotate(){
  final GFFileHandler thisInstance=this;
  java.security.AccessController.doPrivileged(new java.security.PrivilegedAction(){
    public Object run(){
      thisInstance.flush();
      thisInstance.close();
      try {
        if (!absoluteFile.exists()) {
          File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
          creatingDeletedLogFile.createNewFile();
          absoluteFile=creatingDeletedLogFile;
        }
        File oldFile=absoluteFile;
        StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
        logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
        File rotatedFile=new File(renamedFileName.toString());
        boolean renameSuccess=oldFile.renameTo(rotatedFile);
        FileOutputStream oldFileFO=new FileOutputStream(oldFile);
        oldFileFO.close();
        if (!renameSuccess) {
          FileUtils.copy(absoluteFile,rotatedFile);
          File freshServerLogFile=getLogFileName();
          FileOutputStream fo=new FileOutputStream(freshServerLogFile);
          fo.close();
        }
        openFile(getLogFileName());
        absoluteFile=getLogFileName();
        if (dayBasedFileRotation) {
          LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
        }
 else {
          LogRotationTimer.getInstance().restartTimer();
        }
        cleanUpHistoryLogFiles();
      }
 catch (      IOException ix) {
        publish(new LogRecord(Level.SEVERE,""String_Node_Str"" + ix.getMessage()));
      }
      return null;
    }
  }
);
}","/** 
 * A Simple rotate method to close the old file and start the new one when the limit is reached.
 */
public void rotate(){
  final GFFileHandler thisInstance=this;
  java.security.AccessController.doPrivileged(new java.security.PrivilegedAction(){
    public Object run(){
      thisInstance.flush();
      thisInstance.close();
      try {
        if (!absoluteFile.exists()) {
          File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
          creatingDeletedLogFile.createNewFile();
          absoluteFile=creatingDeletedLogFile;
        }
        File oldFile=absoluteFile;
        StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
        logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
        File rotatedFile=new File(renamedFileName.toString());
        boolean renameSuccess=oldFile.renameTo(rotatedFile);
        if (!renameSuccess) {
          FileUtils.copy(absoluteFile,rotatedFile);
          File freshServerLogFile=getLogFileName();
          FileOutputStream fo=new FileOutputStream(freshServerLogFile);
          fo.close();
        }
        FileOutputStream oldFileFO=new FileOutputStream(oldFile);
        oldFileFO.close();
        openFile(getLogFileName());
        absoluteFile=getLogFileName();
        if (dayBasedFileRotation) {
          LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
        }
 else {
          LogRotationTimer.getInstance().restartTimer();
        }
        cleanUpHistoryLogFiles();
      }
 catch (      IOException ix) {
        publish(new LogRecord(Level.SEVERE,""String_Node_Str"" + ix.getMessage()));
      }
      return null;
    }
  }
);
}"
30039,"public Object run(){
  thisInstance.flush();
  thisInstance.close();
  try {
    if (!absoluteFile.exists()) {
      File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
      creatingDeletedLogFile.createNewFile();
      absoluteFile=creatingDeletedLogFile;
    }
    File oldFile=absoluteFile;
    StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
    logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
    File rotatedFile=new File(renamedFileName.toString());
    boolean renameSuccess=oldFile.renameTo(rotatedFile);
    FileOutputStream oldFileFO=new FileOutputStream(oldFile);
    oldFileFO.close();
    if (!renameSuccess) {
      FileUtils.copy(absoluteFile,rotatedFile);
      File freshServerLogFile=getLogFileName();
      FileOutputStream fo=new FileOutputStream(freshServerLogFile);
      fo.close();
    }
    openFile(getLogFileName());
    absoluteFile=getLogFileName();
    if (dayBasedFileRotation) {
      LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
    }
 else {
      LogRotationTimer.getInstance().restartTimer();
    }
    cleanUpHistoryLogFiles();
  }
 catch (  IOException ix) {
    publish(new LogRecord(Level.SEVERE,""String_Node_Str"" + ix.getMessage()));
  }
  return null;
}","public Object run(){
  thisInstance.flush();
  thisInstance.close();
  try {
    if (!absoluteFile.exists()) {
      File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
      creatingDeletedLogFile.createNewFile();
      absoluteFile=creatingDeletedLogFile;
    }
    File oldFile=absoluteFile;
    StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
    logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
    File rotatedFile=new File(renamedFileName.toString());
    boolean renameSuccess=oldFile.renameTo(rotatedFile);
    if (!renameSuccess) {
      FileUtils.copy(absoluteFile,rotatedFile);
      File freshServerLogFile=getLogFileName();
      FileOutputStream fo=new FileOutputStream(freshServerLogFile);
      fo.close();
    }
    FileOutputStream oldFileFO=new FileOutputStream(oldFile);
    oldFileFO.close();
    openFile(getLogFileName());
    absoluteFile=getLogFileName();
    if (dayBasedFileRotation) {
      LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
    }
 else {
      LogRotationTimer.getInstance().restartTimer();
    }
    cleanUpHistoryLogFiles();
  }
 catch (  IOException ix) {
    publish(new LogRecord(Level.SEVERE,""String_Node_Str"" + ix.getMessage()));
  }
  return null;
}"
30040,"/** 
 * Reinitialize connections established in the connection pool and  bring the pool to steady pool size. 
 * @throws com.sun.appserv.connectors.internal.api.PoolingException
 */
public synchronized boolean flushConnectionPool() throws PoolingException {
  logFine(""String_Node_Str"");
  if (!poolInitialized) {
    _logger.log(Level.WARNING,""String_Node_Str"",getPoolInfo());
    String exString=localStrings.getString(""String_Node_Str"",poolInfo.toString());
    throw new PoolingException(exString);
  }
  try {
    killExtraResources(ds.getResourcesSize());
    increaseSteadyPoolSize(steadyPoolSize);
  }
 catch (  PoolingException ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",new Object[]{getPoolInfo(),ex.getMessage()});
    throw ex;
  }
  logFine(""String_Node_Str"");
  return true;
}","/** 
 * Reinitialize connections established in the connection pool and  bring the pool to steady pool size. 
 * @throws com.sun.appserv.connectors.internal.api.PoolingException
 */
public synchronized boolean flushConnectionPool() throws PoolingException {
  logFine(""String_Node_Str"");
  if (!poolInitialized) {
    _logger.log(Level.WARNING,""String_Node_Str"",getPoolInfo());
    String exString=localStrings.getString(""String_Node_Str"",poolInfo.toString());
    throw new PoolingException(exString);
  }
  try {
    cancelResizerTask();
    ds.removeAll();
    scheduleResizerTask();
    increaseSteadyPoolSize(steadyPoolSize);
  }
 catch (  PoolingException ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",new Object[]{getPoolInfo(),ex.getMessage()});
    throw ex;
  }
  logFine(""String_Node_Str"");
  return true;
}"
30041,"@Override protected AuthenticationInfo authenticationInfo(){
  AuthenticationInfo result=null;
  if (SecureAdmin.Util.isUsingUsernamePasswordAuth(secureAdmin)) {
    final SecureAdminInternalUser secureAdminInternalUser=SecureAdmin.Util.secureAdminInternalUser(secureAdmin);
    if (secureAdminInternalUser != null) {
      try {
        String pw=masterPassword().getMasterPasswordAdapter().getPasswordForAlias(secureAdminInternalUser.getPasswordAlias());
        result=new AuthenticationInfo(secureAdminInternalUser.getUsername(),pw);
        pw=null;
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  return result;
}","@Override protected synchronized AuthenticationInfo authenticationInfo(){
  AuthenticationInfo result=null;
  if (SecureAdmin.Util.isUsingUsernamePasswordAuth(secureAdmin)) {
    final SecureAdminInternalUser secureAdminInternalUser=SecureAdmin.Util.secureAdminInternalUser(secureAdmin);
    if (secureAdminInternalUser != null) {
      try {
        result=new AuthenticationInfo(secureAdminInternalUser.getUsername(),masterPassword().getMasterPasswordAdapter().getPasswordForAlias(secureAdminInternalUser.getPasswordAlias()));
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  return result;
}"
30042,"private boolean isPrincipalAuthorized(final Principal reqPrincipal){
  final String principalName=reqPrincipal.getName();
  for (  SecureAdminPrincipal configPrincipal : SecureAdmin.Util.secureAdminPrincipals(secureAdmin,habitat)) {
    if (configPrincipal.getDn().equals(principalName)) {
      return true;
    }
  }
  return false;
}","private synchronized boolean isPrincipalAuthorized(final Principal reqPrincipal){
  final String principalName=reqPrincipal.getName();
  for (  SecureAdminPrincipal configPrincipal : SecureAdmin.Util.secureAdminPrincipals(secureAdmin,habitat)) {
    if (configPrincipal.getDn().equals(principalName)) {
      return true;
    }
  }
  return false;
}"
30043,"/** 
 * Return the access to be granted, if the user turns out to be a valid admin user, based on whether the request is local or remote and whether this is the DAS or an instance. <p> If this is the DAS, then secure admin must be on to accept remote requests from users.  If this an instance, then it's possible that the DAS is using username/password authentication in its admin messages to the  instances.  In that case, we make sure that the admin indicator header was sent with the request and that its value matches the value in this server's config.
 * @return the access to be granted to the user if subsequently authorized
 */
private Access checkRemoteAccess(final String originHost,final boolean adminIndicatorCheckerMatched){
  Access grantedAccess;
  if (serverEnv.isDas()) {
    if (NetUtils.isThisHostLocal(originHost) || SecureAdmin.Util.isEnabled(secureAdmin)) {
      grantedAccess=Access.FULL;
    }
 else {
      logger.log(Level.FINE,""String_Node_Str"");
      grantedAccess=Access.FORBIDDEN;
    }
  }
 else {
    if (adminIndicatorCheckerMatched) {
      grantedAccess=Access.FULL;
      logger.log(Level.FINE,""String_Node_Str"");
    }
 else {
      grantedAccess=Access.NONE;
      logger.log(Level.FINE,""String_Node_Str"");
    }
  }
  return grantedAccess;
}","/** 
 * Return the access to be granted, if the user turns out to be a valid admin user, based on whether the request is local or remote and whether this is the DAS or an instance. <p> If this is the DAS, then secure admin must be on to accept remote requests from users.  If this an instance, then it's possible that the DAS is using username/password authentication in its admin messages to the  instances.  In that case, we make sure that the admin indicator header was sent with the request and that its value matches the value in this server's config.
 * @return the access to be granted to the user if subsequently authorized
 */
private synchronized Access checkRemoteAccess(final String originHost,final boolean adminIndicatorCheckerMatched){
  Access grantedAccess;
  if (serverEnv.isDas()) {
    if (NetUtils.isThisHostLocal(originHost) || SecureAdmin.Util.isEnabled(secureAdmin)) {
      grantedAccess=Access.FULL;
    }
 else {
      logger.log(Level.FINE,""String_Node_Str"");
      grantedAccess=Access.FORBIDDEN;
    }
  }
 else {
    if (adminIndicatorCheckerMatched) {
      grantedAccess=Access.FULL;
      logger.log(Level.FINE,""String_Node_Str"");
    }
 else {
      grantedAccess=Access.NONE;
      logger.log(Level.FINE,""String_Node_Str"");
    }
  }
  return grantedAccess;
}"
30044,"private boolean isAuthorizedInternalUser(final String username){
  for (  SecureAdminInternalUser u : SecureAdmin.Util.secureAdminInternalUsers(secureAdmin)) {
    if (u.getUsername().equals(username)) {
      return true;
    }
  }
  return false;
}","private synchronized boolean isAuthorizedInternalUser(final String username){
  for (  SecureAdminInternalUser u : SecureAdmin.Util.secureAdminInternalUsers(secureAdmin)) {
    if (u.getUsername().equals(username)) {
      return true;
    }
  }
  return false;
}"
30045,"@Override public void postConstruct(){
  secureAdmin=domain.getSecureAdmin();
  if (as.usesFileRealm()) {
    try {
      AuthRealm ar=as.getAssociatedAuthRealm();
      if (FileRealm.class.getName().equals(ar.getClassname())) {
        String adminKeyFilePath=ar.getPropertyValue(""String_Node_Str"");
        FileRealm fr=new FileRealm(adminKeyFilePath);
        if (!fr.hasAuthenticatableUser()) {
          String emsg=lsm.getLocalString(""String_Node_Str"",""String_Node_Str"");
          logger.log(Level.SEVERE,emsg);
          throw new IllegalStateException(emsg);
        }
      }
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,ex.getMessage());
      throw new RuntimeException(ex);
    }
  }
}","@Override public synchronized void postConstruct(){
  secureAdmin=domain.getSecureAdmin();
  if (as.usesFileRealm()) {
    try {
      AuthRealm ar=as.getAssociatedAuthRealm();
      if (FileRealm.class.getName().equals(ar.getClassname())) {
        String adminKeyFilePath=ar.getPropertyValue(""String_Node_Str"");
        FileRealm fr=new FileRealm(adminKeyFilePath);
        if (!fr.hasAuthenticatableUser()) {
          String emsg=lsm.getLocalString(""String_Node_Str"",""String_Node_Str"");
          logger.log(Level.SEVERE,emsg);
          throw new IllegalStateException(emsg);
        }
      }
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,ex.getMessage());
      throw new RuntimeException(ex);
    }
  }
}"
30046,"private void ensureConfigReady(final Config c,final String adminListenerProtocol) throws TransactionFailure, PropertyVetoException {
  final NetworkConfig nc=c.getNetworkConfig();
  final NetworkListener nl=nc.getNetworkListener(SecureAdminCommand.ADMIN_LISTENER_NAME);
  if (nl != null) {
    return;
  }
  final Config config_w=writableConfig(c);
  final NetworkListener nl_w=createAdminNetworkListener(transaction(),nc,adminListenerProtocol);
  final VirtualServer vs_w=createAdminVirtualServer(transaction(),config_w);
}","private void ensureConfigReady(final Config c,final String adminListenerProtocol) throws TransactionFailure, PropertyVetoException {
  final NetworkConfig nc=c.getNetworkConfig();
  final NetworkListener nl=nc.getNetworkListener(SecureAdminCommand.ADMIN_LISTENER_NAME);
  if (nl != null) {
    return;
  }
  final Config config_w=writableConfig(c);
  createAdminNetworkListener(transaction(),nc,adminListenerProtocol);
  createAdminVirtualServer(transaction(),config_w);
}"
30047,"private void ensureKeyPairForInstanceAlias() throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, UnrecoverableKeyException, ProcessManagerException {
  final KeyStore ks=sslUtils().getKeyStore();
  if (ks.containsAlias(SecureAdmin.Duck.DEFAULT_INSTANCE_ALIAS)) {
    return;
  }
  final File keyStoreFile=serverEnv.getJKS();
  final File trustStoreFile=new File(serverEnv.getConfigDirPath(),""String_Node_Str"");
  final String pw=masterPassword();
  final char[] pwChar=pw.toCharArray();
  ProcessManager pm=new ProcessManager(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keyStoreFile.getAbsolutePath(),""String_Node_Str"",SecureAdmin.Duck.DEFAULT_INSTANCE_ALIAS,""String_Node_Str"",getCertificateDN(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",pw,""String_Node_Str"",pw});
  pm.execute();
  if (pm.getExitValue() != 0) {
    final String err=pm.getStdout();
    throw new RuntimeException(err);
  }
  final File tempCertFile=new File(serverEnv.getConfigDirPath(),""String_Node_Str"");
  tempCertFile.deleteOnExit();
  pm=new ProcessManager(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keyStoreFile.getAbsolutePath(),""String_Node_Str"",SecureAdmin.Duck.DEFAULT_INSTANCE_ALIAS,""String_Node_Str"",pw,""String_Node_Str"",pw,""String_Node_Str"",tempCertFile.getAbsolutePath()});
  pm.execute();
  if (pm.getExitValue() != 0) {
    throw new RuntimeException(pm.getStderr());
  }
  pm=new ProcessManager(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",pw,""String_Node_Str"",pw,""String_Node_Str"",trustStoreFile.getAbsolutePath(),""String_Node_Str"",tempCertFile.getAbsolutePath(),""String_Node_Str"",SecureAdmin.Duck.DEFAULT_INSTANCE_ALIAS});
  pm.execute();
  tempCertFile.delete();
  if (pm.getExitValue() != 0) {
    throw new RuntimeException(pm.getStderr());
  }
  reload(sslUtils().getKeyStore(),keyStoreFile,pw);
  reload(sslUtils().getTrustStore(),serverEnv.getTrustStore(),pw);
}","private void ensureKeyPairForInstanceAlias() throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, UnrecoverableKeyException, ProcessManagerException {
  final KeyStore ks=sslUtils().getKeyStore();
  if (ks.containsAlias(SecureAdmin.Duck.DEFAULT_INSTANCE_ALIAS)) {
    return;
  }
  final File keyStoreFile=serverEnv.getJKS();
  final File trustStoreFile=new File(serverEnv.getConfigDirPath(),""String_Node_Str"");
  final String pw=masterPassword();
  ProcessManager pm=new ProcessManager(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keyStoreFile.getAbsolutePath(),""String_Node_Str"",SecureAdmin.Duck.DEFAULT_INSTANCE_ALIAS,""String_Node_Str"",getCertificateDN(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",pw,""String_Node_Str"",pw});
  pm.execute();
  if (pm.getExitValue() != 0) {
    final String err=pm.getStdout();
    throw new RuntimeException(err);
  }
  final File tempCertFile=new File(serverEnv.getConfigDirPath(),""String_Node_Str"");
  tempCertFile.deleteOnExit();
  pm=new ProcessManager(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",keyStoreFile.getAbsolutePath(),""String_Node_Str"",SecureAdmin.Duck.DEFAULT_INSTANCE_ALIAS,""String_Node_Str"",pw,""String_Node_Str"",pw,""String_Node_Str"",tempCertFile.getAbsolutePath()});
  pm.execute();
  if (pm.getExitValue() != 0) {
    throw new RuntimeException(pm.getStderr());
  }
  pm=new ProcessManager(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",pw,""String_Node_Str"",pw,""String_Node_Str"",trustStoreFile.getAbsolutePath(),""String_Node_Str"",tempCertFile.getAbsolutePath(),""String_Node_Str"",SecureAdmin.Duck.DEFAULT_INSTANCE_ALIAS});
  pm.execute();
  if (!tempCertFile.delete()) {
    logger.log(Level.FINE,""String_Node_Str"",tempCertFile.getAbsolutePath());
  }
  if (pm.getExitValue() != 0) {
    throw new RuntimeException(pm.getStderr());
  }
  reload(sslUtils().getKeyStore(),keyStoreFile,pw);
  reload(sslUtils().getTrustStore(),serverEnv.getTrustStore(),pw);
}"
30048,"/** 
 * Returns whether at least one admin user has an empty password.
 * @return true if at least one admin user has an empty password; false otherwise 
 * @throws BadRealmException
 * @throws NoSuchRealmException
 * @throws NoSuchUserException 
 */
@Override public boolean isAnyAdminUserWithoutPassword() throws Exception {
  final FileRealm adminRealm=adminRealm();
  for (final Enumeration<String> e=adminRealm.getUserNames(); e.hasMoreElements(); ) {
    final String username=e.nextElement();
    final FileRealmUser fru;
    try {
      fru=(FileRealmUser)adminRealm.getUser(username);
      final String[] groupNames=adminRealm.authenticate(username,emptyPassword);
      if (groupNames != null) {
        for (        String groupName : groupNames) {
          if (DOMAIN_ADMIN_GROUP_NAME.equals(groupName)) {
            return true;
          }
        }
      }
    }
 catch (    NoSuchUserException ex) {
    }
  }
  return false;
}","/** 
 * Returns whether at least one admin user has an empty password.
 * @return true if at least one admin user has an empty password; false otherwise 
 * @throws BadRealmException
 * @throws NoSuchRealmException
 * @throws NoSuchUserException 
 */
@Override public boolean isAnyAdminUserWithoutPassword() throws Exception {
  final FileRealm adminRealm=adminRealm();
  for (final Enumeration<String> e=adminRealm.getUserNames(); e.hasMoreElements(); ) {
    final String username=e.nextElement();
    final String[] groupNames=adminRealm.authenticate(username,emptyPassword);
    if (groupNames != null) {
      for (      String groupName : groupNames) {
        if (DOMAIN_ADMIN_GROUP_NAME.equals(groupName)) {
          return true;
        }
      }
    }
  }
  return false;
}"
30049,"private void validateUser(final String username) throws BadRealmException, NoSuchRealmException {
  final FileRealm fr=adminRealm();
  try {
    FileRealmUser fru=(FileRealmUser)fr.getUser(username);
    for (    String group : fru.getGroups()) {
      if (isInAdminGroup(fru)) {
        return;
      }
    }
    throw new RuntimeException(Strings.get(""String_Node_Str"",username));
  }
 catch (  NoSuchUserException ex) {
    throw new RuntimeException(Strings.get(""String_Node_Str"",username));
  }
}","private void validateUser(final String username) throws BadRealmException, NoSuchRealmException {
  final FileRealm fr=adminRealm();
  try {
    FileRealmUser fru=(FileRealmUser)fr.getUser(username);
    if (isInAdminGroup(fru)) {
      return;
    }
    throw new RuntimeException(Strings.get(""String_Node_Str"",username));
  }
 catch (  NoSuchUserException ex) {
    throw new RuntimeException(Strings.get(""String_Node_Str"",username));
  }
}"
30050,"final protected SecureAdmin secureAdmin() throws TransactionFailure {
  if (secureAdmin == null) {
    secureAdmin=domain.getSecureAdmin();
    if (secureAdmin == null) {
      secureAdmin=writableSecureAdmin();
      secureAdminWasCreated=true;
      secureAdmin.setSpecialAdminIndicator(specialAdminIndicator());
    }
  }
  return secureAdmin;
}","final protected SecureAdmin secureAdmin() throws TransactionFailure {
  if (secureAdmin == null) {
    secureAdmin=domain.getSecureAdmin();
    if (secureAdmin == null) {
      secureAdmin=writableSecureAdmin();
      secureAdmin.setSpecialAdminIndicator(specialAdminIndicator());
    }
  }
  return secureAdmin;
}"
30051,"public String[] generateOutputRow(String[] headings,int heading_count,String e,HashMap<String,HashMap> mapOfMaps){
  String[] outputRow=new String[heading_count];
  int count=0;
  HashMap<String,String> map=new HashMap<String,String>();
  for (  String s : headings) {
    map=mapOfMaps.get(s);
    outputRow[count]=map.get(e);
    count++;
  }
  return outputRow;
}","public String[] generateOutputRow(String[] headings,int heading_count,String e,HashMap<String,HashMap> mapOfMaps){
  String[] outputRow=new String[heading_count];
  int count=0;
  HashMap<String,String> map=null;
  for (  String s : headings) {
    map=mapOfMaps.get(s);
    outputRow[count]=map.get(e);
    count++;
  }
  return outputRow;
}"
30052,"public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  boolean sharedServiceFound=false;
  Services services=domain.getExtensionByType(Services.class);
  if (services != null) {
    for (    org.glassfish.paas.orchestrator.config.Service service : services.getServices()) {
      if (service instanceof SharedService) {
        SharedService sharedService=(SharedService)service;
        String serviceType=sharedService.getType();
        if (sharedService.getServiceName().equalsIgnoreCase(serviceName)) {
          sharedServiceFound=true;
          if (sharedService.getState().equalsIgnoreCase(ServiceStatus.RUNNING.toString())) {
            report.setMessage(""String_Node_Str"" + sharedService.getServiceName() + ""String_Node_Str"");
            report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
            return;
          }
 else {
            ServiceInfo serviceInfo=serviceUtil.getServiceInfo(serviceName,null,null);
            ServiceDescription serviceDescription=orchestrator.getSharedServiceDescription(serviceName);
            ServicePlugin plugin=serviceDescription.getPlugin();
            ProvisionedService provisionedService=plugin.startService(serviceDescription,serviceInfo);
            if (provisionedService != null) {
              orchestrator.addSharedService(serviceName,provisionedService);
              try {
                if (ConfigSupport.apply(new SingleConfigCode<Services>(){
                  public Object run(                  Services param) throws PropertyVetoException, TransactionFailure {
                    for (                    org.glassfish.paas.orchestrator.config.Service service : param.getServices()) {
                      if (service instanceof SharedService) {
                        SharedService sharedSvc=(SharedService)service;
                        if (sharedSvc.getServiceName().equalsIgnoreCase(serviceName)) {
                          Transaction t=Transaction.getTransaction(param);
                          SharedService sharedService_w=t.enroll(sharedSvc);
                          sharedService_w.setState(ServiceStatus.RUNNING.toString());
                        }
                      }
                    }
                    return param;
                  }
                }
,services) == null) {
                  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                  report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
                }
 else {
                  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
                  return;
                }
              }
 catch (              TransactionFailure transactionFailure) {
                report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                report.setFailureCause(transactionFailure);
                return;
              }
            }
 else {
              report.setActionExitCode(ActionReport.ExitCode.FAILURE);
              report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
              return;
            }
          }
        }
      }
    }
    if (!sharedServiceFound) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
      return;
    }
  }
 else {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    return;
  }
}","public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  boolean sharedServiceFound=false;
  Services services=domain.getExtensionByType(Services.class);
  if (services != null) {
    for (    org.glassfish.paas.orchestrator.config.Service service : services.getServices()) {
      if (service instanceof SharedService) {
        SharedService sharedService=(SharedService)service;
        if (sharedService.getServiceName().equalsIgnoreCase(serviceName)) {
          sharedServiceFound=true;
          if (sharedService.getState().equalsIgnoreCase(ServiceStatus.RUNNING.toString())) {
            report.setMessage(""String_Node_Str"" + sharedService.getServiceName() + ""String_Node_Str"");
            report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
            return;
          }
 else {
            ServiceInfo serviceInfo=serviceUtil.getServiceInfo(serviceName,null,null);
            ServiceDescription serviceDescription=orchestrator.getSharedServiceDescription(serviceName);
            ServicePlugin plugin=serviceDescription.getPlugin();
            ProvisionedService provisionedService=plugin.startService(serviceDescription,serviceInfo);
            if (provisionedService != null) {
              orchestrator.addSharedService(serviceName,provisionedService);
              try {
                if (ConfigSupport.apply(new SingleConfigCode<Services>(){
                  public Object run(                  Services param) throws PropertyVetoException, TransactionFailure {
                    for (                    org.glassfish.paas.orchestrator.config.Service service : param.getServices()) {
                      if (service instanceof SharedService) {
                        SharedService sharedSvc=(SharedService)service;
                        if (sharedSvc.getServiceName().equalsIgnoreCase(serviceName)) {
                          Transaction t=Transaction.getTransaction(param);
                          SharedService sharedService_w=t.enroll(sharedSvc);
                          sharedService_w.setState(ServiceStatus.RUNNING.toString());
                        }
                      }
                    }
                    return param;
                  }
                }
,services) == null) {
                  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                  report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
                }
 else {
                  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
                  return;
                }
              }
 catch (              TransactionFailure transactionFailure) {
                report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                report.setFailureCause(transactionFailure);
                return;
              }
            }
 else {
              report.setActionExitCode(ActionReport.ExitCode.FAILURE);
              report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
              return;
            }
          }
        }
      }
    }
    if (!sharedServiceFound) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
      return;
    }
  }
 else {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    return;
  }
}"
30053,"public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  boolean sharedServiceFound=false;
  Services services=domain.getExtensionByType(Services.class);
  if (services != null) {
    for (    org.glassfish.paas.orchestrator.config.Service service : services.getServices()) {
      if (service instanceof SharedService) {
        SharedService sharedService=(SharedService)service;
        String serviceType=sharedService.getType();
        if (sharedService.getServiceName().equalsIgnoreCase(serviceName)) {
          sharedServiceFound=true;
          if (sharedService.getState().equalsIgnoreCase(ServiceStatus.STOPPED.toString())) {
            report.setMessage(""String_Node_Str"" + sharedService.getServiceName() + ""String_Node_Str"");
            report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
            return;
          }
 else {
            String appName=null;
            boolean appEnabled=false;
            List<ServiceRef> serviceRefList=services.getServiceRefs();
            for (            ServiceRef serviceRef : serviceRefList) {
              if (serviceName.equalsIgnoreCase(serviceRef.getServiceName())) {
                appName=serviceRef.getApplicationName();
                if (appName != null) {
                  Clusters clusters=domain.getClusters();
                  List<Cluster> clusterList=clusters.getCluster();
                  for (                  Cluster cluster : clusterList) {
                    ApplicationRef applicationRef=cluster.getApplicationRef(appName);
                    if (applicationRef != null) {
                      if (""String_Node_Str"".equalsIgnoreCase(applicationRef.getEnabled())) {
                        appEnabled=true;
                        report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str""+ ""String_Node_Str""+ appName+ ""String_Node_Str"");
                        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                        return;
                      }
                    }
                  }
                }
              }
            }
            if (!appEnabled) {
              ServiceInfo serviceInfo=serviceUtil.getServiceInfo(serviceName,null,null);
              ServiceDescription serviceDescription=orchestrator.getSharedServiceDescription(serviceName);
              ServicePlugin plugin=serviceDescription.getPlugin();
              boolean serviceStopped=plugin.stopService(serviceDescription,serviceInfo);
              if (serviceStopped) {
                orchestrator.removeSharedService(serviceName);
                try {
                  if (ConfigSupport.apply(new SingleConfigCode<Services>(){
                    public Object run(                    Services param) throws PropertyVetoException, TransactionFailure {
                      for (                      org.glassfish.paas.orchestrator.config.Service service : param.getServices()) {
                        if (service instanceof SharedService) {
                          SharedService sharedSvc=(SharedService)service;
                          if (sharedSvc.getServiceName().equalsIgnoreCase(serviceName)) {
                            Transaction t=Transaction.getTransaction(param);
                            SharedService sharedService_w=t.enroll(sharedSvc);
                            sharedService_w.setState(ServiceStatus.STOPPED.toString());
                          }
                        }
                      }
                      return param;
                    }
                  }
,services) == null) {
                    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                    report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
                  }
 else {
                    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
                    return;
                  }
                }
 catch (                TransactionFailure transactionFailure) {
                  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                  report.setFailureCause(transactionFailure);
                  return;
                }
              }
 else {
                report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
                return;
              }
            }
          }
        }
      }
    }
    if (!sharedServiceFound) {
      report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      return;
    }
  }
 else {
    report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    return;
  }
}","public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  boolean sharedServiceFound=false;
  Services services=domain.getExtensionByType(Services.class);
  if (services != null) {
    for (    org.glassfish.paas.orchestrator.config.Service service : services.getServices()) {
      if (service instanceof SharedService) {
        SharedService sharedService=(SharedService)service;
        if (sharedService.getServiceName().equalsIgnoreCase(serviceName)) {
          sharedServiceFound=true;
          if (sharedService.getState().equalsIgnoreCase(ServiceStatus.STOPPED.toString())) {
            report.setMessage(""String_Node_Str"" + sharedService.getServiceName() + ""String_Node_Str"");
            report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
            return;
          }
 else {
            String appName=null;
            boolean appEnabled=false;
            List<ServiceRef> serviceRefList=services.getServiceRefs();
            for (            ServiceRef serviceRef : serviceRefList) {
              if (serviceName.equalsIgnoreCase(serviceRef.getServiceName())) {
                appName=serviceRef.getApplicationName();
                if (appName != null) {
                  Clusters clusters=domain.getClusters();
                  List<Cluster> clusterList=clusters.getCluster();
                  for (                  Cluster cluster : clusterList) {
                    ApplicationRef applicationRef=cluster.getApplicationRef(appName);
                    if (applicationRef != null) {
                      if (""String_Node_Str"".equalsIgnoreCase(applicationRef.getEnabled())) {
                        appEnabled=true;
                        report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str""+ ""String_Node_Str""+ appName+ ""String_Node_Str"");
                        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                        return;
                      }
                    }
                  }
                }
              }
            }
            if (!appEnabled) {
              ServiceInfo serviceInfo=serviceUtil.getServiceInfo(serviceName,null,null);
              ServiceDescription serviceDescription=orchestrator.getSharedServiceDescription(serviceName);
              ServicePlugin plugin=serviceDescription.getPlugin();
              boolean serviceStopped=plugin.stopService(serviceDescription,serviceInfo);
              if (serviceStopped) {
                orchestrator.removeSharedService(serviceName);
                try {
                  if (ConfigSupport.apply(new SingleConfigCode<Services>(){
                    public Object run(                    Services param) throws PropertyVetoException, TransactionFailure {
                      for (                      org.glassfish.paas.orchestrator.config.Service service : param.getServices()) {
                        if (service instanceof SharedService) {
                          SharedService sharedSvc=(SharedService)service;
                          if (sharedSvc.getServiceName().equalsIgnoreCase(serviceName)) {
                            Transaction t=Transaction.getTransaction(param);
                            SharedService sharedService_w=t.enroll(sharedSvc);
                            sharedService_w.setState(ServiceStatus.STOPPED.toString());
                          }
                        }
                      }
                      return param;
                    }
                  }
,services) == null) {
                    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                    report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
                  }
 else {
                    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
                    return;
                  }
                }
 catch (                TransactionFailure transactionFailure) {
                  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                  report.setFailureCause(transactionFailure);
                  return;
                }
              }
 else {
                report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
                return;
              }
            }
          }
        }
      }
    }
    if (!sharedServiceFound) {
      report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      return;
    }
  }
 else {
    report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    return;
  }
}"
30054,"/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}","/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        try {
          ((ExtendedDeploymentContext)context).prepareScratchDirs();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}"
30055,"/** 
 * Loads an individual PersistenceUnitDescriptor and registers the EntityManagerFactory in appropriate DOL structure.
 * @param pud PersistenceUnitDescriptor to be loaded.
 */
private EntityManagerFactory loadPU(PersistenceUnitDescriptor pud){
  checkForUpgradeFromTopLinkEssentials(pud);
  checkForDataSourceOverride(pud);
  calculateDefaultDataSource(pud);
  PersistenceUnitInfo pInfo=new PersistenceUnitInfoImpl(pud,providerContainerContractInfo);
  String applicationLocation=providerContainerContractInfo.getApplicationLocation();
  final boolean fineMsgLoggable=logger.isLoggable(Level.FINE);
  if (fineMsgLoggable) {
    logger.fine(""String_Node_Str"" + applicationLocation + ""String_Node_Str""+ pud.getPuRoot());
    logger.fine(""String_Node_Str"" + pInfo);
  }
  PersistenceProvider provider;
  try {
    provider=PersistenceProvider.class.cast(providerContainerContractInfo.getClassLoader().loadClass(pInfo.getPersistenceProviderClassName()).newInstance());
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
  if (providerContainerContractInfo.isJava2DBRequired()) {
    processor=new JPAJava2DBProcessor(new Java2DBProcessorHelper(providerContainerContractInfo.getDeploymentContext()));
    java2db=processor.isJava2DbPU(pud);
  }
  Map<String,Object> overRides=new HashMap<String,Object>((java2db) ? integrationPropertiesWithJava2DB : integrationPropertiesWithoutJava2DB);
  ValidationMode validationMode=getValidationMode(pud);
  if (validationMode == ValidationMode.AUTO || validationMode == ValidationMode.CALLBACK) {
    overRides.put(VALIDATOR_FACTORY,providerContainerContractInfo.getValidatorFactory());
  }
  if (!providerContainerContractInfo.isWeavingEnabled()) {
    overRides.put(ECLIPSELINK_WEAVING_PROPERTY,System.getProperty(ECLIPSELINK_WEAVING_PROPERTY,""String_Node_Str""));
  }
  EntityManagerFactory emf=provider.createContainerEntityManagerFactory(pInfo,overRides);
  if (fineMsgLoggable) {
    logger.logp(Level.FINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",emf);
  }
  PersistenceUnitsDescriptor parent=pud.getParent();
  RootDeploymentDescriptor containingBundle=parent.getParent();
  providerContainerContractInfo.registerEMF(pInfo.getPersistenceUnitName(),pud.getPuRoot(),containingBundle,emf);
  if (fineMsgLoggable) {
    logger.fine(""String_Node_Str"" + applicationLocation);
  }
  return emf;
}","/** 
 * Loads an individual PersistenceUnitDescriptor and registers the EntityManagerFactory in appropriate DOL structure.
 * @param pud PersistenceUnitDescriptor to be loaded.
 */
private EntityManagerFactory loadPU(PersistenceUnitDescriptor pud){
  checkForUpgradeFromTopLinkEssentials(pud);
  checkForDataSourceOverride(pud);
  calculateDefaultDataSource(pud);
  PersistenceUnitInfo pInfo=new PersistenceUnitInfoImpl(pud,providerContainerContractInfo);
  String applicationLocation=providerContainerContractInfo.getApplicationLocation();
  final boolean fineMsgLoggable=logger.isLoggable(Level.FINE);
  if (fineMsgLoggable) {
    logger.fine(""String_Node_Str"" + applicationLocation + ""String_Node_Str""+ pud.getPuRoot());
    logger.fine(""String_Node_Str"" + pInfo);
  }
  PersistenceProvider provider;
  try {
    provider=PersistenceProvider.class.cast(providerContainerContractInfo.getClassLoader().loadClass(pInfo.getPersistenceProviderClassName()).newInstance());
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
  if (providerContainerContractInfo.isJava2DBRequired()) {
    processor=new JPAJava2DBProcessor(new Java2DBProcessorHelper(providerContainerContractInfo.getDeploymentContext()));
    java2db=processor.isJava2DbPU(pud);
  }
  Map<String,Object> overRides=new HashMap<String,Object>((java2db) ? integrationPropertiesWithJava2DB : integrationPropertiesWithoutJava2DB);
  ValidationMode validationMode=getValidationMode(pud);
  if (validationMode == ValidationMode.AUTO || validationMode == ValidationMode.CALLBACK) {
    overRides.put(VALIDATOR_FACTORY,providerContainerContractInfo.getValidatorFactory());
  }
  if (!providerContainerContractInfo.isWeavingEnabled()) {
    overRides.put(ECLIPSELINK_WEAVING_PROPERTY,System.getProperty(ECLIPSELINK_WEAVING_PROPERTY,""String_Node_Str""));
  }
  EntityManagerFactory emf=provider.createContainerEntityManagerFactory(pInfo,overRides);
  EntityManager em=null;
  try {
    em=emf.createEntityManager();
  }
 catch (  PersistenceException e) {
    emf.close();
    throw e;
  }
 finally {
    if (em != null) {
      em.close();
    }
  }
  if (fineMsgLoggable) {
    logger.logp(Level.FINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",emf);
  }
  PersistenceUnitsDescriptor parent=pud.getParent();
  RootDeploymentDescriptor containingBundle=parent.getParent();
  providerContainerContractInfo.registerEMF(pInfo.getPersistenceUnitName(),pud.getPuRoot(),containingBundle,emf);
  if (fineMsgLoggable) {
    logger.fine(""String_Node_Str"" + applicationLocation);
  }
  return emf;
}"
30056,"public ApplicationInfo deploy(Collection<Sniffer> sniffers,final ExtendedDeploymentContext context){
  long operationStartTime=Calendar.getInstance().getTimeInMillis();
  events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_START,context));
  final ActionReport report=context.getActionReport();
  final DeployCommandParameters commandParams=context.getCommandParameters(DeployCommandParameters.class);
  final String appName=commandParams.name();
  if (commandParams.origin == OpsParams.Origin.deploy && appRegistry.get(appName) != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return null;
  }
  if (commandParams.virtualservers == null) {
    commandParams.virtualservers=getVirtualServers(commandParams.target);
  }
  if (commandParams.enabled == null) {
    commandParams.enabled=Boolean.TRUE;
  }
  ProgressTracker tracker=new ProgressTracker(){
    public void actOn(    Logger logger){
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.stop(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        PreDestroy.class.cast(context).preDestroy();
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.unload(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        ApplicationInfo appInfo=appRegistry.get(appName);
        if (appInfo != null) {
          events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
        }
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.clean(context);
        }
 catch (        Exception e) {
        }
      }
      if (!commandParams.keepfailedstubs) {
        try {
          context.clean();
        }
 catch (        Exception e) {
        }
      }
      appRegistry.remove(appName);
    }
  }
;
  context.addTransientAppMetaData(ExtendedDeploymentContext.TRACKER,tracker);
  context.setPhase(DeploymentContextImpl.Phase.PREPARE);
  ApplicationInfo appInfo=null;
  try {
    ArchiveHandler handler=context.getArchiveHandler();
    if (handler == null) {
      handler=getArchiveHandler(context.getSource(),commandParams.type);
      context.setArchiveHandler(handler);
    }
    DeploymentTracing tracing=context.getModuleMetaData(DeploymentTracing.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
    }
    if (handler == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSourceDir()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return null;
    }
    ClassLoaderHierarchy clh=habitat.getByContract(ClassLoaderHierarchy.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_HIERARCHY);
    }
    context.createDeploymentClassLoader(clh,handler);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
    }
    getDeployableTypes(context);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.PARSING_DONE);
    }
    final ClassLoader cloader=context.getClassLoader();
    final ClassLoader currentCL=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(cloader);
      if (sniffers != null && logger.isLoggable(Level.FINE)) {
        for (        Sniffer sniffer : sniffers) {
          logger.fine(""String_Node_Str"" + sniffer.getModuleType());
        }
      }
      List<EngineInfo> sortedEngineInfos=setupContainerInfos(handler,sniffers,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTAINERS_SETUP_DONE);
      }
      if (logger.isLoggable(Level.FINE)) {
        for (        EngineInfo info : sortedEngineInfos) {
          logger.fine(""String_Node_Str"" + info.getSniffer().getModuleType());
        }
      }
      if (sortedEngineInfos == null || sortedEngineInfos.isEmpty()) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSource().getName()));
        tracker.actOn(logger);
        return null;
      }
      ApplicationInfo tempAppInfo=new ApplicationInfo(events,context.getSource(),appName);
      for (      Object m : context.getModuleMetadata()) {
        tempAppInfo.addMetaData(m);
      }
      tempAppInfo.setIsJavaEEApp(sortedEngineInfos);
      context.getSource().setExtraData(Boolean.class,tempAppInfo.isJavaEEApp());
      appRegistry.add(appName,tempAppInfo);
      try {
        notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.PREPARE,context);
      }
 catch (      Throwable interceptorException) {
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(interceptorException);
        logger.log(Level.SEVERE,interceptorException.getMessage(),interceptorException);
        tracker.actOn(logger);
        return null;
      }
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_BEFORE_CLASSLOADER_CREATION,context),false);
      context.createApplicationClassLoader(clh,handler);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
      }
      ModuleInfo moduleInfo=null;
      try {
        moduleInfo=prepareModule(sortedEngineInfos,appName,context,tracker);
      }
 catch (      Throwable prepareException) {
        prepareException.printStackTrace();
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(prepareException);
        logger.log(Level.SEVERE,prepareException.getMessage(),prepareException);
        tracker.actOn(logger);
        return null;
      }
      appInfo=context.getModuleMetaData(ApplicationInfo.class);
      if (appInfo == null) {
        appInfo=new ApplicationInfo(events,context.getSource(),appName);
        appInfo.addModule(moduleInfo);
        for (        Object m : context.getModuleMetadata()) {
          moduleInfo.addMetaData(m);
          appInfo.addMetaData(m);
        }
      }
 else {
        for (        EngineRef ref : moduleInfo.getEngineRefs()) {
          appInfo.add(ref);
        }
      }
      appRegistry.remove(appName);
      appInfo.setIsJavaEEApp(sortedEngineInfos);
      appRegistry.add(appName,appInfo);
      notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.PREPARED);
      }
      context.setPhase(DeploymentContextImpl.Phase.PREPARED);
      Thread.currentThread().setContextClassLoader(context.getClassLoader());
      appInfo.setAppClassLoader(context.getClassLoader());
      installTransformers(context);
      events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,context),false);
      if (loadOnCurrentInstance(context)) {
        appInfo.setLibraries(commandParams.libraries());
        try {
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.LOAD,context);
          appInfo.load(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.LOAD,context);
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.START,context);
          appInfo.start(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.START,context);
        }
 catch (        Throwable loadException) {
          report.failure(logger,""String_Node_Str"",null);
          report.setFailureCause(loadException);
          tracker.actOn(logger);
          return null;
        }
      }
      return appInfo;
    }
  finally {
      context.postDeployClean(false);
      Thread.currentThread().setContextClassLoader(currentCL);
    }
  }
 catch (  Throwable e) {
    report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName),null);
    report.setFailureCause(e);
    logger.log(Level.SEVERE,e.getMessage(),e);
    tracker.actOn(logger);
    return null;
  }
 finally {
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      events.send(new Event<ApplicationInfo>(Deployment.DEPLOYMENT_SUCCESS,appInfo));
      long operationTime=Calendar.getInstance().getTimeInMillis() - operationStartTime;
      if (appInfo != null) {
        deploymentLifecycleProbeProvider.applicationDeployedEvent(appName,getApplicationType(appInfo),String.valueOf(operationTime));
      }
    }
 else {
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_FAILURE,context));
    }
  }
}","public ApplicationInfo deploy(Collection<Sniffer> sniffers,final ExtendedDeploymentContext context){
  long operationStartTime=Calendar.getInstance().getTimeInMillis();
  events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_START,context));
  final ActionReport report=context.getActionReport();
  final DeployCommandParameters commandParams=context.getCommandParameters(DeployCommandParameters.class);
  final String appName=commandParams.name();
  if (commandParams.origin == OpsParams.Origin.deploy && appRegistry.get(appName) != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return null;
  }
  if (commandParams.virtualservers == null) {
    commandParams.virtualservers=getVirtualServers(commandParams.target);
  }
  if (commandParams.enabled == null) {
    commandParams.enabled=Boolean.TRUE;
  }
  ProgressTracker tracker=new ProgressTracker(){
    public void actOn(    Logger logger){
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.stop(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        PreDestroy.class.cast(context).preDestroy();
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.unload(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        ApplicationInfo appInfo=appRegistry.get(appName);
        if (appInfo != null) {
          events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
        }
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.clean(context);
        }
 catch (        Exception e) {
        }
      }
      if (!commandParams.keepfailedstubs) {
        try {
          context.clean();
        }
 catch (        Exception e) {
        }
      }
      appRegistry.remove(appName);
    }
  }
;
  context.addTransientAppMetaData(ExtendedDeploymentContext.TRACKER,tracker);
  context.setPhase(DeploymentContextImpl.Phase.PREPARE);
  ApplicationInfo appInfo=null;
  try {
    ArchiveHandler handler=context.getArchiveHandler();
    if (handler == null) {
      handler=getArchiveHandler(context.getSource(),commandParams.type);
      context.setArchiveHandler(handler);
    }
    DeploymentTracing tracing=context.getModuleMetaData(DeploymentTracing.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
    }
    if (handler == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSourceDir()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return null;
    }
    ClassLoaderHierarchy clh=habitat.getByContract(ClassLoaderHierarchy.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_HIERARCHY);
    }
    context.createDeploymentClassLoader(clh,handler);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
    }
    getDeployableTypes(context);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.PARSING_DONE);
    }
    final ClassLoader cloader=context.getClassLoader();
    final ClassLoader currentCL=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(cloader);
      if (sniffers != null && logger.isLoggable(Level.FINE)) {
        for (        Sniffer sniffer : sniffers) {
          logger.fine(""String_Node_Str"" + sniffer.getModuleType());
        }
      }
      List<EngineInfo> sortedEngineInfos=setupContainerInfos(handler,sniffers,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTAINERS_SETUP_DONE);
      }
      if (logger.isLoggable(Level.FINE)) {
        for (        EngineInfo info : sortedEngineInfos) {
          logger.fine(""String_Node_Str"" + info.getSniffer().getModuleType());
        }
      }
      if (sortedEngineInfos == null || sortedEngineInfos.isEmpty()) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSource().getName()));
        tracker.actOn(logger);
        return null;
      }
      ApplicationInfo tempAppInfo=new ApplicationInfo(events,context.getSource(),appName);
      for (      Object m : context.getModuleMetadata()) {
        tempAppInfo.addMetaData(m);
      }
      tempAppInfo.setIsJavaEEApp(sortedEngineInfos);
      context.getSource().setExtraData(Boolean.class,tempAppInfo.isJavaEEApp());
      appRegistry.add(appName,tempAppInfo);
      try {
        notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.PREPARE,context);
      }
 catch (      Throwable interceptorException) {
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(interceptorException);
        logger.log(Level.SEVERE,interceptorException.getMessage(),interceptorException);
        tracker.actOn(logger);
        return null;
      }
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_BEFORE_CLASSLOADER_CREATION,context),false);
      context.createApplicationClassLoader(clh,handler);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
      }
      ModuleInfo moduleInfo=null;
      try {
        moduleInfo=prepareModule(sortedEngineInfos,appName,context,tracker);
      }
 catch (      Throwable prepareException) {
        prepareException.printStackTrace();
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(prepareException);
        logger.log(Level.SEVERE,prepareException.getMessage(),prepareException);
        tracker.actOn(logger);
        return null;
      }
      appInfo=context.getModuleMetaData(ApplicationInfo.class);
      if (appInfo == null) {
        appInfo=new ApplicationInfo(events,context.getSource(),appName);
        appInfo.addModule(moduleInfo);
        for (        Object m : context.getModuleMetadata()) {
          moduleInfo.addMetaData(m);
          appInfo.addMetaData(m);
        }
      }
 else {
        for (        EngineRef ref : moduleInfo.getEngineRefs()) {
          appInfo.add(ref);
        }
      }
      appRegistry.remove(appName);
      appInfo.setIsJavaEEApp(sortedEngineInfos);
      appRegistry.add(appName,appInfo);
      notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.PREPARED);
      }
      context.setPhase(DeploymentContextImpl.Phase.PREPARED);
      Thread.currentThread().setContextClassLoader(context.getClassLoader());
      appInfo.setAppClassLoader(context.getClassLoader());
      events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,context),false);
      if (loadOnCurrentInstance(context)) {
        appInfo.setLibraries(commandParams.libraries());
        try {
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.LOAD,context);
          appInfo.load(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.LOAD,context);
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.START,context);
          appInfo.start(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.START,context);
        }
 catch (        Throwable loadException) {
          report.failure(logger,""String_Node_Str"",null);
          report.setFailureCause(loadException);
          tracker.actOn(logger);
          return null;
        }
      }
      return appInfo;
    }
  finally {
      context.postDeployClean(false);
      Thread.currentThread().setContextClassLoader(currentCL);
    }
  }
 catch (  Throwable e) {
    report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName),null);
    report.setFailureCause(e);
    logger.log(Level.SEVERE,e.getMessage(),e);
    tracker.actOn(logger);
    return null;
  }
 finally {
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      events.send(new Event<ApplicationInfo>(Deployment.DEPLOYMENT_SUCCESS,appInfo));
      long operationTime=Calendar.getInstance().getTimeInMillis() - operationStartTime;
      if (appInfo != null) {
        deploymentLifecycleProbeProvider.applicationDeployedEvent(appName,getApplicationType(appInfo),String.valueOf(operationTime));
      }
    }
 else {
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_FAILURE,context));
    }
  }
}"
30057,"/** 
 * Add a new ClassFileTransformer to the context. Once all the deployers potentially invalidating the application class loader (as indicated by the
 * @link {MetaData.invalidatesClassLoader()})the deployment backend will recreate the application's class loader registering all the ClassTransformers added by the deployers to this context.
 * @param transformer the new class file transformer to register to the new applicationclass loader
 * @throws UnsupportedOperationException if the class loader we use does not support theregistration of a ClassFileTransformer. In such case, the deployer should either fail deployment or revert to a mode without the byteocode enhancement feature.
 */
public void addTransformer(ClassFileTransformer transformer){
  transformers.add(transformer);
}","/** 
 * Add a new ClassFileTransformer to the context
 * @param transformer the new class file transformer to register to the new applicationclass loader
 * @throws UnsupportedOperationException if the class loader we use does not support theregistration of a ClassFileTransformer. In such case, the deployer should either fail deployment or revert to a mode without the byteocode enhancement feature.
 */
public void addTransformer(ClassFileTransformer transformer){
  InstrumentableClassLoader icl=InstrumentableClassLoader.class.cast(getFinalClassLoader());
  String isComposite=getAppProps().getProperty(ServerTags.IS_COMPOSITE);
  if (Boolean.valueOf(isComposite) && icl instanceof URLClassLoader) {
    URLClassLoader urlCl=(URLClassLoader)icl;
    boolean isAppLevel=(getParentContext() == null);
    if (isAppLevel) {
      icl=InstrumentableClassLoader.class.cast(urlCl.getParent().getParent());
    }
 else {
      ClassLoader libCl=urlCl.getParent().getParent();
      if (!(libCl instanceof URLClassLoader)) {
        libCl=libCl.getParent();
      }
      if (libCl instanceof URLClassLoader) {
        InstrumentableClassLoader libIcl=InstrumentableClassLoader.class.cast(libCl);
        libIcl.addTransformer(transformer);
      }
    }
  }
  icl.addTransformer(transformer);
}"
30058,"public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Resources resources=domain.getResources();
  String scope=""String_Node_Str"";
  if (moduleName != null) {
    if (!poolUtil.isValidModule(applicationName,moduleName,poolName,report)) {
      return;
    }
    Application application=applications.getApplication(applicationName);
    Module module=application.getModule(moduleName);
    resources=module.getResources();
    scope=ConnectorConstants.JAVA_MODULE_SCOPE_PREFIX;
  }
 else   if (applicationName != null) {
    if (!poolUtil.isValidApplication(applicationName,poolName,report)) {
      return;
    }
    Application application=applications.getApplication(applicationName);
    resources=application.getResources();
    scope=ConnectorConstants.JAVA_APP_SCOPE_PREFIX;
  }
  if (!poolUtil.isValidPool(resources,poolName,scope,report)) {
    return;
  }
  boolean poolingEnabled=false;
  ResourcePool pool=(ResourcePool)ConnectorsUtil.getResourceByName(resources,ResourcePool.class,poolName);
  if (pool instanceof ConnectorConnectionPool) {
    ConnectorConnectionPool ccp=(ConnectorConnectionPool)pool;
    poolingEnabled=Boolean.valueOf(ccp.getPooling());
  }
 else {
    JdbcConnectionPool ccp=(JdbcConnectionPool)pool;
    poolingEnabled=Boolean.valueOf(ccp.getPooling());
  }
  if (!poolingEnabled) {
    String i18nMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolName);
    report.setMessage(i18nMsg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    PoolInfo poolInfo=new PoolInfo(poolName,applicationName,moduleName);
    _runtime.flushConnectionPool(poolInfo);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  ConnectorRuntimeException e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolName,e.getMessage()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}","public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Resources resources=domain.getResources();
  String scope=""String_Node_Str"";
  if (moduleName != null) {
    if (!poolUtil.isValidModule(applicationName,moduleName,poolName,report)) {
      return;
    }
    Application application=applications.getApplication(applicationName);
    Module module=application.getModule(moduleName);
    resources=module.getResources();
    scope=ConnectorConstants.JAVA_MODULE_SCOPE_PREFIX;
  }
 else   if (applicationName != null) {
    if (!poolUtil.isValidApplication(applicationName,poolName,report)) {
      return;
    }
    Application application=applications.getApplication(applicationName);
    resources=application.getResources();
    scope=ConnectorConstants.JAVA_APP_SCOPE_PREFIX;
  }
  if (!poolUtil.isValidPool(resources,poolName,scope,report)) {
    return;
  }
  boolean poolingEnabled=false;
  ResourcePool pool=(ResourcePool)ConnectorsUtil.getResourceByName(resources,ResourcePool.class,poolName);
  if (pool instanceof ConnectorConnectionPool) {
    ConnectorConnectionPool ccp=(ConnectorConnectionPool)pool;
    poolingEnabled=Boolean.valueOf(ccp.getPooling());
  }
 else {
    JdbcConnectionPool ccp=(JdbcConnectionPool)pool;
    poolingEnabled=Boolean.valueOf(ccp.getPooling());
  }
  if (!poolingEnabled) {
    String i18nMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolName);
    report.setMessage(i18nMsg);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    PoolInfo poolInfo=new PoolInfo(poolName,applicationName,moduleName);
    _runtime.flushConnectionPool(poolInfo);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  ConnectorRuntimeException e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}"
30059,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the parameter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  boolean status=false;
  Resources resources=domain.getResources();
  String scope=""String_Node_Str"";
  if (moduleName != null) {
    if (!poolUtil.isValidModule(applicationName,moduleName,poolName,report)) {
      return;
    }
    Application application=applications.getApplication(applicationName);
    Module module=application.getModule(moduleName);
    resources=module.getResources();
    scope=""String_Node_Str"";
  }
 else   if (applicationName != null) {
    if (!poolUtil.isValidApplication(applicationName,poolName,report)) {
      return;
    }
    Application application=applications.getApplication(applicationName);
    resources=application.getResources();
    scope=""String_Node_Str"";
  }
  if (!poolUtil.isValidPool(resources,poolName,scope,report)) {
    return;
  }
  PoolInfo poolInfo=new PoolInfo(poolName,applicationName,moduleName);
  try {
    status=connRuntime.pingConnectionPool(poolInfo);
    if (status) {
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    }
 else {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolInfo));
    }
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolInfo) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the parameter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  boolean status=false;
  Resources resources=domain.getResources();
  String scope=""String_Node_Str"";
  if (moduleName != null) {
    if (!poolUtil.isValidModule(applicationName,moduleName,poolName,report)) {
      return;
    }
    Application application=applications.getApplication(applicationName);
    Module module=application.getModule(moduleName);
    resources=module.getResources();
    scope=""String_Node_Str"";
  }
 else   if (applicationName != null) {
    if (!poolUtil.isValidApplication(applicationName,poolName,report)) {
      return;
    }
    Application application=applications.getApplication(applicationName);
    resources=application.getResources();
    scope=""String_Node_Str"";
  }
  if (!poolUtil.isValidPool(resources,poolName,scope,report)) {
    return;
  }
  PoolInfo poolInfo=new PoolInfo(poolName,applicationName,moduleName);
  try {
    status=connRuntime.pingConnectionPool(poolInfo);
    if (status) {
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    }
 else {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolInfo));
    }
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",poolInfo));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}"
30060,"public String toString(){
  String beanClassesString=((getBeanClasses().size() > 0) ? getBeanClasses().toString() : ""String_Node_Str"");
  String val=""String_Node_Str"" + getId() + ""String_Node_Str""+ bdaType+ ""String_Node_Str""+ getBeanDeploymentArchives().size()+ ""String_Node_Str""+ formatAccessibleBDAs(this)+ ""String_Node_Str""+ getBeanClasses().size()+ ""String_Node_Str""+ beanClassesString+ ""String_Node_Str""+ getEjbs()+ ""String_Node_Str"";
  Collection<BeanDeploymentArchive> bdas=getBeanDeploymentArchives();
  Iterator<BeanDeploymentArchive> iter=bdas.iterator();
  while (iter.hasNext()) {
    BeanDeploymentArchive bda=(BeanDeploymentArchive)iter.next();
    BDAType embedBDAType=BDAType.UNKNOWN;
    if (bda instanceof BeanDeploymentArchiveImpl) {
      embedBDAType=((BeanDeploymentArchiveImpl)bda).getBDAType();
    }
    String embedBDABeanClasses=((bda.getBeanClasses().size() > 0) ? bda.getBeanClasses().toString() : ""String_Node_Str"");
    val+=""String_Node_Str"" + bda.getId() + ""String_Node_Str""+ embedBDAType.toString()+ ""String_Node_Str""+ bda.getBeanDeploymentArchives().size()+ ""String_Node_Str""+ formatAccessibleBDAs(bda)+ ""String_Node_Str""+ bda.getBeanClasses().size()+ ""String_Node_Str""+ embedBDABeanClasses+ ""String_Node_Str""+ bda.getEjbs()+ ""String_Node_Str"";
  }
  return val;
}","public String toString(){
  String beanClassesString=((getBeanClasses().size() > 0) ? getBeanClasses().toString() : ""String_Node_Str"");
  String initVal=""String_Node_Str"" + getId() + ""String_Node_Str""+ bdaType+ ""String_Node_Str""+ getBeanDeploymentArchives().size()+ ""String_Node_Str""+ formatAccessibleBDAs(this)+ ""String_Node_Str""+ getBeanClasses().size()+ ""String_Node_Str""+ beanClassesString+ ""String_Node_Str""+ getEjbs()+ ""String_Node_Str"";
  StringBuffer valBuff=new StringBuffer(initVal);
  Collection<BeanDeploymentArchive> bdas=getBeanDeploymentArchives();
  Iterator<BeanDeploymentArchive> iter=bdas.iterator();
  while (iter.hasNext()) {
    BeanDeploymentArchive bda=(BeanDeploymentArchive)iter.next();
    BDAType embedBDAType=BDAType.UNKNOWN;
    if (bda instanceof BeanDeploymentArchiveImpl) {
      embedBDAType=((BeanDeploymentArchiveImpl)bda).getBDAType();
    }
    String embedBDABeanClasses=((bda.getBeanClasses().size() > 0) ? bda.getBeanClasses().toString() : ""String_Node_Str"");
    String val=""String_Node_Str"" + bda.getId() + ""String_Node_Str""+ embedBDAType.toString()+ ""String_Node_Str""+ bda.getBeanDeploymentArchives().size()+ ""String_Node_Str""+ formatAccessibleBDAs(bda)+ ""String_Node_Str""+ bda.getBeanClasses().size()+ ""String_Node_Str""+ embedBDABeanClasses+ ""String_Node_Str""+ bda.getEjbs()+ ""String_Node_Str"";
    valBuff.append(val);
  }
  return valBuff.toString();
}"
30061,"/** 
 * Produce <code>BeanDeploymentArchive</code>s for this <code>Deployment</code> from information from the provided <code>ReadableArchive</code>. 
 */
public DeploymentImpl(ReadableArchive archive,Collection<EjbDescriptor> ejbs,DeploymentContext context){
  logger.log(FINE,""String_Node_Str"" + archive.getName());
  this.beanDeploymentArchives=new ArrayList<BeanDeploymentArchive>();
  this.context=context;
  this.idToBeanDeploymentArchive=new HashMap<String,BeanDeploymentArchive>();
  if (libJarBDAs == null) {
    libJarBDAs=scanForLibJars(archive,ejbs,context);
    if ((libJarBDAs != null) && libJarBDAs.size() > 0) {
      return;
    }
  }
  BeanDeploymentArchive bda=new BeanDeploymentArchiveImpl(archive,ejbs,context);
  this.beanDeploymentArchives.add(bda);
  if (((BeanDeploymentArchiveImpl)bda).getBDAType().equals(BDAType.WAR)) {
    if (warBDAs == null) {
      warBDAs=new ArrayList<BeanDeploymentArchive>();
    }
    warBDAs.add(bda);
  }
 else   if (((BeanDeploymentArchiveImpl)bda).getBDAType().equals(BDAType.JAR)) {
    if (jarBDAs == null) {
      jarBDAs=new ArrayList<BeanDeploymentArchive>();
    }
    jarBDAs.add(bda);
  }
  this.idToBeanDeploymentArchive.put(bda.getId(),bda);
}","/** 
 * Produce <code>BeanDeploymentArchive</code>s for this <code>Deployment</code> from information from the provided <code>ReadableArchive</code>. 
 */
public DeploymentImpl(ReadableArchive archive,Collection<EjbDescriptor> ejbs,DeploymentContext context){
  logger.log(FINE,""String_Node_Str"" + archive.getName());
  this.beanDeploymentArchives=new ArrayList<BeanDeploymentArchive>();
  this.context=context;
  this.idToBeanDeploymentArchive=new HashMap<String,BeanDeploymentArchive>();
  libJarBDAs=scanForLibJars(archive,ejbs,context);
  if ((libJarBDAs != null) && libJarBDAs.size() > 0) {
    return;
  }
  BeanDeploymentArchive bda=new BeanDeploymentArchiveImpl(archive,ejbs,context);
  this.beanDeploymentArchives.add(bda);
  if (((BeanDeploymentArchiveImpl)bda).getBDAType().equals(BDAType.WAR)) {
    if (warBDAs == null) {
      warBDAs=new ArrayList<BeanDeploymentArchive>();
    }
    warBDAs.add(bda);
  }
 else   if (((BeanDeploymentArchiveImpl)bda).getBDAType().equals(BDAType.JAR)) {
    if (jarBDAs == null) {
      jarBDAs=new ArrayList<BeanDeploymentArchive>();
    }
    jarBDAs.add(bda);
  }
  this.idToBeanDeploymentArchive.put(bda.getId(),bda);
}"
30062,"@Override public String toString(){
  String val=null;
  List<BeanDeploymentArchive> beanDeploymentArchives=getBeanDeploymentArchives();
  ListIterator<BeanDeploymentArchive> lIter=beanDeploymentArchives.listIterator();
  while (lIter.hasNext()) {
    BeanDeploymentArchive bda=lIter.next();
    val+=bda.toString();
  }
  return val;
}","@Override public String toString(){
  StringBuffer valBuff=new StringBuffer();
  List<BeanDeploymentArchive> beanDeploymentArchives=getBeanDeploymentArchives();
  ListIterator<BeanDeploymentArchive> lIter=beanDeploymentArchives.listIterator();
  while (lIter.hasNext()) {
    BeanDeploymentArchive bda=lIter.next();
    valBuff.append(bda.toString());
  }
  return valBuff.toString();
}"
30063,"/** 
 * Constructor. <P>The created FileRealmHelper instance is not registered in the Realm registry. This constructor can be used by admin tools to create a FileRealmHelper instance which can be edited by adding or removing users and then saved to disk, without affecting the installed realm instance. <P>The file provided should always exist. A default (empty) keyfile is installed with the server so this should always be the case unless the user has manually deleted this file.  If this file path provided does not point to an existing file this constructor will first attempt to create it. If this succeeds the constructor returns normally and an empty keyfile will have been created; otherwise an exception is thrown.
 * @param keyfile Full path to the keyfile to read for user data.
 * @exception IOException If the configuration parametersidentify a corrupt keyfile
 */
public FileRealmHelper(String keyfileName) throws IOException {
  this.keyfileName=keyfileName;
  keyfile=new File(keyfileName);
  if (!keyfile.exists()) {
    keyfile.createNewFile();
  }
  loadKeyFile();
}","/** 
 * Constructor. <P>The created FileRealmHelper instance is not registered in the Realm registry. This constructor can be used by admin tools to create a FileRealmHelper instance which can be edited by adding or removing users and then saved to disk, without affecting the installed realm instance. <P>The file provided should always exist. A default (empty) keyfile is installed with the server so this should always be the case unless the user has manually deleted this file.  If this file path provided does not point to an existing file this constructor will first attempt to create it. If this succeeds the constructor returns normally and an empty keyfile will have been created; otherwise an exception is thrown.
 * @param keyfile Full path to the keyfile to read for user data.
 * @exception IOException If the configuration parametersidentify a corrupt keyfile
 */
public FileRealmHelper(String keyfileName) throws IOException {
  this.keyfileName=keyfileName;
  keyfile=new File(keyfileName);
  if (!keyfile.exists()) {
    if (keyfile.createNewFile() == false) {
      throw new IOException(sm.getString(""String_Node_Str"",keyfileName));
    }
  }
  loadKeyFile();
}"
30064,"/** 
 * Decodes a line from the keyfile.
 * @param encodedLine A line from the keyfile containing user data.
 * @param newGroupSizeMap Groups found in the encodedLine are added tothis map.
 * @returns FileRealmUser Representing the loaded user.
 * @throws IllegalArgumentException Thrown on failure.
 */
private static User decodeUser(String encodedLine,Map newGroupSizeMap) throws IllegalArgumentException {
  StringTokenizer st=new StringTokenizer(encodedLine,FIELD_SEP);
  String algo=algoSHA256;
  String user=null;
  String pwdInfo=null;
  String groupList=null;
  try {
    user=st.nextToken();
    pwdInfo=st.nextToken();
  }
 catch (  Exception e) {
    String msg=sm.getString(""String_Node_Str"",encodedLine);
    throw new IllegalArgumentException(msg);
  }
  if (st.hasMoreTokens()) {
    groupList=st.nextToken();
  }
  User ud=new User(user);
  if (resetKey.equals(pwdInfo)) {
    ud.setAlgo(resetKey);
  }
 else {
    if (encodedLine.contains(SSHA_TAG)) {
      algo=algoSHA;
    }
    int resultLength=32;
    if (algoSHA.equals(algo)) {
      resultLength=20;
    }
    byte[] hash=new byte[resultLength];
    byte[] salt=SSHA.decode(pwdInfo,hash,algo);
    ud.setHash(hash);
    ud.setSalt(salt);
    ud.setAlgo(algo);
  }
  List<String> membership=new ArrayList<String>();
  if (groupList != null) {
    StringTokenizer gst=new StringTokenizer(groupList,GROUP_SEP);
    while (gst.hasMoreTokens()) {
      String g=gst.nextToken();
      membership.add(g);
      Integer groupSize=(Integer)newGroupSizeMap.get(g);
      newGroupSizeMap.put(g,Integer.valueOf((groupSize != null) ? (groupSize.intValue() + 1) : 1));
    }
  }
  ud.setGroups(membership.toArray(new String[0]));
  return ud;
}","/** 
 * Decodes a line from the keyfile.
 * @param encodedLine A line from the keyfile containing user data.
 * @param newGroupSizeMap Groups found in the encodedLine are added tothis map.
 * @returns FileRealmUser Representing the loaded user.
 * @throws IllegalArgumentException Thrown on failure.
 */
private static User decodeUser(String encodedLine,Map newGroupSizeMap) throws IllegalArgumentException {
  StringTokenizer st=new StringTokenizer(encodedLine,FIELD_SEP);
  String algo=algoSHA256;
  String user=null;
  String pwdInfo=null;
  String groupList=null;
  try {
    user=st.nextToken();
    pwdInfo=st.nextToken();
  }
 catch (  Exception e) {
    String msg=sm.getString(""String_Node_Str"",encodedLine);
    throw new IllegalArgumentException(msg);
  }
  if (st.hasMoreTokens()) {
    groupList=st.nextToken();
  }
  User ud=new User(user);
  if (resetKey.equals(pwdInfo)) {
    ud.setAlgo(resetKey);
  }
 else {
    if (encodedLine.contains(SSHA_TAG)) {
      algo=algoSHA;
    }
    int resultLength=32;
    if (algoSHA.equals(algo)) {
      resultLength=20;
    }
    byte[] hash=new byte[resultLength];
    byte[] salt=SSHA.decode(pwdInfo,hash,algo);
    ud.setHash(hash);
    ud.setSalt(salt);
    ud.setAlgo(algo);
  }
  List<String> membership=new ArrayList<String>();
  if (groupList != null) {
    StringTokenizer gst=new StringTokenizer(groupList,GROUP_SEP);
    while (gst.hasMoreTokens()) {
      String g=gst.nextToken();
      membership.add(g);
      Integer groupSize=(Integer)newGroupSizeMap.get(g);
      newGroupSizeMap.put(g,Integer.valueOf((groupSize != null) ? (groupSize.intValue() + 1) : 1));
    }
  }
  ud.setGroups(membership.toArray(new String[membership.size()]));
  return ud;
}"
30065,"/** 
 * Load keyfile from config and populate internal cache.
 */
private void loadKeyFile() throws IOException {
  File filePath=keyfile;
  BufferedReader input=null;
  try {
    input=new BufferedReader(new FileReader(keyfile));
    while (input.ready()) {
      String line=input.readLine();
      if (!line.startsWith(COMMENT) && line.indexOf(FIELD_SEP) > 0) {
        User ud=decodeUser(line,groupSizeMap);
        userTable.put(ud.getName(),ud);
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(e.toString());
  }
 finally {
    if (input != null) {
      try {
        input.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}","/** 
 * Load keyfile from config and populate internal cache.
 */
private void loadKeyFile() throws IOException {
  BufferedReader input=null;
  try {
    input=new BufferedReader(new FileReader(keyfile));
    while (input.ready()) {
      String line=input.readLine();
      if (line != null && !line.startsWith(COMMENT) && line.indexOf(FIELD_SEP) >= 0) {
        User ud=decodeUser(line,groupSizeMap);
        userTable.put(ud.getName(),ud);
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(e.toString());
  }
 finally {
    if (input != null) {
      try {
        input.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}"
30066,"/** 
 * Handle the specified Throwable encountered while processing the specified Request to produce the specified Response.  Any exceptions that occur during generation of the exception report are logged and swallowed.
 * @param request The request being processed
 * @param response The response being generated
 * @param exception The exception that occurred (which possibly wrapsa root cause exception
 */
protected void throwable(Request request,Response response,Throwable throwable){
  Context context=request.getContext();
  if (context == null)   return;
  Throwable realError=throwable;
  if (realError instanceof ServletException) {
    realError=((ServletException)realError).getRootCause();
    if (realError == null) {
      realError=throwable;
    }
  }
  if (realError instanceof ClientAbortException) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(sm.getString(""String_Node_Str"",realError.getCause().getMessage()));
    }
    return;
  }
  ErrorPage errorPage=findErrorPage(context,throwable);
  if ((errorPage == null) && (realError != throwable)) {
    errorPage=findErrorPage(context,realError);
  }
  if (errorPage != null) {
    dispatchToErrorPage(request,response,errorPage,throwable,realError,0);
  }
 else   if (context.getDefaultErrorPage() != null) {
    dispatchToErrorPage(request,response,context.getDefaultErrorPage(),throwable,realError,0);
  }
 else {
    ServletResponse sresp=(ServletResponse)response;
    ((HttpServletResponse)sresp).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    response.setError();
    status(request,response);
  }
}","/** 
 * Handle the specified Throwable encountered while processing the specified Request to produce the specified Response.  Any exceptions that occur during generation of the exception report are logged and swallowed.
 * @param request The request being processed
 * @param response The response being generated
 * @param throwable The throwable that occurred (which possibly wrapsa root cause exception
 */
protected void throwable(Request request,Response response,Throwable throwable){
  Context context=request.getContext();
  if (context == null)   return;
  Throwable realError=throwable;
  if (realError instanceof ServletException) {
    realError=((ServletException)realError).getRootCause();
    if (realError == null) {
      realError=throwable;
    }
  }
  if (realError instanceof ClientAbortException) {
    if (log.isLoggable(Level.FINE)) {
      log.fine(sm.getString(""String_Node_Str"",realError.getCause().getMessage()));
    }
    return;
  }
  ErrorPage errorPage=findErrorPage(context,throwable);
  if ((errorPage == null) && (realError != throwable)) {
    errorPage=findErrorPage(context,realError);
  }
  if (errorPage != null) {
    dispatchToErrorPage(request,response,errorPage,throwable,realError,0);
  }
 else   if (context.getDefaultErrorPage() != null) {
    dispatchToErrorPage(request,response,context.getDefaultErrorPage(),throwable,realError,0);
  }
 else {
    ServletResponse sresp=(ServletResponse)response;
    ((HttpServletResponse)sresp).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    response.setError();
    status(request,response);
  }
}"
30067,"public void initializePersistenceStrategy(Context ctx,SessionManager smBean,ServerConfigLookup serverConfigLookup){
  setDefaultParams(ctx,smBean);
  readInstanceLevelParams(serverConfigLookup);
  readWebAppParams(ctx,smBean);
  ctx.setBackgroundProcessorDelay(reapInterval);
  StandardContext sctx=(StandardContext)ctx;
  sctx.restrictedSetPipeline(new PESessionLockingStandardPipeline(sctx));
}","public void initializePersistenceStrategy(Context ctx,SessionManager smBean,ServerConfigLookup serverConfigLookup){
  setDefaultParams(ctx,smBean);
  readInstanceLevelParams(serverConfigLookup);
  readWebAppParams(ctx,smBean);
  ctx.setBackgroundProcessorDelay(reapInterval);
}"
30068,"private void handleBeforeEvent(InstanceEvent event,InstanceEvent.EventType eventType){
  Context context=(Context)event.getWrapper().getParent();
  if (!(context instanceof WebModule)) {
    return;
  }
  WebModule wm=(WebModule)context;
  Object instance;
  if (eventType == InstanceEvent.EventType.BEFORE_FILTER_EVENT) {
    instance=event.getFilter();
  }
 else {
    instance=event.getServlet();
  }
  Realm ra=context.getRealm();
  if (ra != null) {
    ServletRequest request=event.getRequest();
    if (request != null && request instanceof HttpServletRequest) {
      HttpServletRequest hreq=(HttpServletRequest)request;
      HttpServletRequest base=hreq;
      Principal prin=hreq.getUserPrincipal();
      Principal basePrincipal=prin;
      boolean wrapped=false;
      while (prin != null) {
        if (base instanceof ServletRequestWrapper) {
          ServletRequest sr=((ServletRequestWrapper)base).getRequest();
          if (sr instanceof HttpServletRequest) {
            base=(HttpServletRequest)sr;
            wrapped=true;
            continue;
          }
        }
        if (wrapped) {
          basePrincipal=base.getUserPrincipal();
        }
 else         if (base instanceof RequestFacade) {
          if (base.getClass() != RequestFacade.class) {
            basePrincipal=((RequestFacade)base).getUnwrappedCoyoteRequest().getUserPrincipal();
          }
        }
 else {
          basePrincipal=base.getUserPrincipal();
        }
        break;
      }
      if (prin != null && prin == basePrincipal && prin.getClass().getName().equals(SecurityConstants.WEB_PRINCIPAL_CLASS)) {
        securityContext.setSecurityContextWithPrincipal(prin);
      }
 else       if (prin != basePrincipal) {
        checkObjectForDoAsPermission(hreq);
        securityContext.setSecurityContextWithPrincipal(prin);
      }
    }
  }
  ComponentInvocation inv=new WebComponentInvocation(wm,instance);
  try {
    im.preInvoke(inv);
    if (eventType == InstanceEvent.EventType.BEFORE_SERVICE_EVENT) {
      wm.beforeServiceEvent(event.getWrapper().getName());
      Transaction tran;
      if ((tran=tm.getTransaction()) != null) {
        inv.setTransaction(tran);
      }
      tm.enlistComponentResources();
    }
  }
 catch (  Exception ex) {
    im.postInvoke(inv);
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    throw new RuntimeException(msg,ex);
  }
}","private void handleBeforeEvent(InstanceEvent event,InstanceEvent.EventType eventType){
  Context context=(Context)event.getWrapper().getParent();
  if (!(context instanceof WebModule)) {
    return;
  }
  WebModule wm=(WebModule)context;
  Object instance;
  if (eventType == InstanceEvent.EventType.BEFORE_FILTER_EVENT) {
    instance=event.getFilter();
  }
 else {
    instance=event.getServlet();
  }
  Realm ra=context.getRealm();
  if (ra != null) {
    ServletRequest request=event.getRequest();
    if (request != null && request instanceof HttpServletRequest) {
      HttpServletRequest hreq=(HttpServletRequest)request;
      HttpServletRequest base=hreq;
      Principal prin=hreq.getUserPrincipal();
      Principal basePrincipal=prin;
      boolean wrapped=false;
      while (prin != null) {
        if (base instanceof ServletRequestWrapper) {
          ServletRequest sr=((ServletRequestWrapper)base).getRequest();
          if (sr instanceof HttpServletRequest) {
            base=(HttpServletRequest)sr;
            wrapped=true;
            continue;
          }
        }
        if (wrapped) {
          basePrincipal=base.getUserPrincipal();
        }
 else         if (base instanceof RequestFacade) {
          if (base.getClass() != RequestFacade.class) {
            basePrincipal=((RequestFacade)base).getUnwrappedCoyoteRequest().getUserPrincipal();
          }
        }
 else {
          basePrincipal=base.getUserPrincipal();
        }
        break;
      }
      if (prin != null && prin == basePrincipal && prin.getClass().getName().equals(SecurityConstants.WEB_PRINCIPAL_CLASS)) {
        securityContext.setSecurityContextWithPrincipal(prin);
      }
 else       if (prin != basePrincipal) {
        checkObjectForDoAsPermission(hreq);
        securityContext.setSecurityContextWithPrincipal(prin);
      }
    }
  }
  ComponentInvocation inv=new WebComponentInvocation(wm,instance);
  try {
    im.preInvoke(inv);
    if (eventType == InstanceEvent.EventType.BEFORE_SERVICE_EVENT) {
      wm.beforeServiceEvent(event.getWrapper().getName());
      tm.enlistComponentResources();
    }
  }
 catch (  Exception ex) {
    im.postInvoke(inv);
    String msg=_rb.getString(""String_Node_Str"");
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    throw new RuntimeException(msg,ex);
  }
}"
30069,"public void postConstruct(){
  if (callFlowAgent == null) {
    callFlowAgent=(Agent)Proxy.newProxyInstance(EjbContainerUtilImpl.class.getClassLoader(),new Class[]{Agent.class},new InvocationHandler(){
      public Object invoke(      Object proxy,      Method m,      Object[] args){
        return null;
      }
    }
);
  }
  defaultThreadPoolExecutor=createThreadPoolExecutor(DEFAULT_THREAD_POOL_NAME);
  if (!isDas()) {
    _doDBReadBeforeTimeout=true;
  }
  _me=this;
}","public void postConstruct(){
  ClassLoader ejbImplClassLoader=EjbContainerUtilImpl.class.getClassLoader();
  if (callFlowAgent == null) {
    callFlowAgent=(Agent)Proxy.newProxyInstance(ejbImplClassLoader,new Class[]{Agent.class},new InvocationHandler(){
      public Object invoke(      Object proxy,      Method m,      Object[] args){
        return null;
      }
    }
);
  }
  defaultThreadPoolExecutor=createThreadPoolExecutor(DEFAULT_THREAD_POOL_NAME);
  if (!isDas()) {
    _doDBReadBeforeTimeout=true;
  }
  ClassLoader originalClassLoader=null;
  try {
    originalClassLoader=Utility.setContextClassLoader(ejbImplClassLoader);
    _timer=new Timer(true);
  }
  finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
  }
  _me=this;
}"
30070,"/** 
 * Method getLogger
 * @param clazz
 * @param name
 * @return
 */
public static synchronized Logger getLogger(final Class clazz,final String name){
  final ClassLoader cloader=clazz.getClassLoader();
  Logger l=LogManager.getLogManager().getLogger(name);
  if (l == null) {
    l=Logger.getLogger(name);
  }
  ;
  String pkgName=clazz.getPackage().getName();
  String loggerName=name + ""String_Node_Str"" + pkgName;
  Logger cLogger=LogManager.getLogManager().getLogger(loggerName);
  if (cLogger == null) {
    cLogger=new Logger(loggerName,null){
      final ResourceBundle rb=initResourceBundle();
      private final int offValue=Level.OFF.intValue();
      public void log(      LogRecord record){
        record.getSourceMethodName();
        if (record.getResourceBundle() == null) {
          if (rb != null) {
            record.setResourceBundle(rb);
          }
        }
        if (record.getMessage() == null) {
          record.setMessage(""String_Node_Str"");
        }
        super.log(record);
      }
      /** 
 * Retrieve the localization resource bundle for this logger for the current default locale.  Note that if the result is null, then the Logger will use a resource bundle inherited from its parent.
 * @return localization bundle (may be null)
 */
      public ResourceBundle getResourceBundle(){
        return rb;
      }
      private ResourceBundle initResourceBundle(){
        try {
          return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
        }
 catch (        MissingResourceException e) {
          String root=clazz.getPackage().getName();
          try {
            return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 catch (          MissingResourceException me) {
            String p=root;
            while (p != null) {
              try {
                int i=p.lastIndexOf(""String_Node_Str"");
                if (i != -1) {
                  p=p.substring(0,i);
                  return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
                }
 else {
                  p=null;
                }
              }
 catch (              MissingResourceException mre) {
              }
            }
          }
          try {
            return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
          }
 catch (          MissingResourceException me) {
          }
          if (!vectorClazz.contains(clazz.getName())) {
            Logger l=LogManager.getLogManager().getLogger(name);
            l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
            vectorClazz.add(clazz.getName());
          }
          return null;
        }
      }
    }
;
    if (!addLoggerToLogManager(cLogger)) {
      final Logger existing=LogManager.getLogManager().getLogger(name);
      if (existing == null) {
        addLoggerToLogManager(cLogger);
      }
 else {
        cLogger=existing;
      }
    }
  }
  ;
  return cLogger;
}","/** 
 * Method getLogger
 * @param clazz
 * @param name
 * @return
 */
public static synchronized Logger getLogger(final Class clazz,final String name){
  final ClassLoader cloader=clazz.getClassLoader();
  Logger l=LogManager.getLogManager().getLogger(name);
  if (l == null) {
    l=Logger.getLogger(name);
  }
  ;
  String pkgName=clazz.getPackage().getName();
  String loggerName=name + ""String_Node_Str"" + pkgName;
  Logger cLogger=LogManager.getLogManager().getLogger(loggerName);
  if (cLogger == null) {
    cLogger=new Logger(loggerName,null){
      final ResourceBundle rb=initResourceBundle();
      private final int offValue=Level.OFF.intValue();
      public void log(      LogRecord record){
        record.getSourceMethodName();
        if (record.getResourceBundle() == null) {
          if (rb != null) {
            record.setResourceBundle(rb);
          }
        }
        if (record.getMessage() == null) {
          record.setMessage(""String_Node_Str"");
        }
        super.log(record);
      }
      /** 
 * Retrieve the localization resource bundle for this logger for the current default locale.  Note that if the result is null, then the Logger will use a resource bundle inherited from its parent.
 * @return localization bundle (may be null)
 */
      public ResourceBundle getResourceBundle(){
        return rb;
      }
      private ResourceBundle initResourceBundle(){
        try {
          return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
        }
 catch (        MissingResourceException e) {
          String root=clazz.getPackage().getName();
          try {
            return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 catch (          MissingResourceException me) {
            String p=root;
            while (p != null) {
              try {
                int i=p.lastIndexOf(""String_Node_Str"");
                if (i != -1) {
                  p=p.substring(0,i);
                  return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
                }
 else {
                  p=null;
                }
              }
 catch (              MissingResourceException mre) {
              }
            }
          }
          try {
            return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
          }
 catch (          MissingResourceException me) {
          }
          if (!vectorClazz.contains(clazz.getName())) {
            Logger l=LogManager.getLogManager().getLogger(name);
            if (l != null) {
              l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
            }
            vectorClazz.add(clazz.getName());
          }
          return null;
        }
      }
    }
;
    if (!addLoggerToLogManager(cLogger)) {
      final Logger existing=LogManager.getLogManager().getLogger(name);
      if (existing == null) {
        addLoggerToLogManager(cLogger);
      }
 else {
        cLogger=existing;
      }
    }
  }
  ;
  return cLogger;
}"
30071,"private ResourceBundle initResourceBundle(){
  try {
    return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
  }
 catch (  MissingResourceException e) {
    String root=clazz.getPackage().getName();
    try {
      return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
    }
 catch (    MissingResourceException me) {
      String p=root;
      while (p != null) {
        try {
          int i=p.lastIndexOf(""String_Node_Str"");
          if (i != -1) {
            p=p.substring(0,i);
            return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 else {
            p=null;
          }
        }
 catch (        MissingResourceException mre) {
        }
      }
    }
    try {
      return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
    }
 catch (    MissingResourceException me) {
    }
    if (!vectorClazz.contains(clazz.getName())) {
      Logger l=LogManager.getLogManager().getLogger(name);
      l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
      vectorClazz.add(clazz.getName());
    }
    return null;
  }
}","private ResourceBundle initResourceBundle(){
  try {
    return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
  }
 catch (  MissingResourceException e) {
    String root=clazz.getPackage().getName();
    try {
      return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
    }
 catch (    MissingResourceException me) {
      String p=root;
      while (p != null) {
        try {
          int i=p.lastIndexOf(""String_Node_Str"");
          if (i != -1) {
            p=p.substring(0,i);
            return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 else {
            p=null;
          }
        }
 catch (        MissingResourceException mre) {
        }
      }
    }
    try {
      return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
    }
 catch (    MissingResourceException me) {
    }
    if (!vectorClazz.contains(clazz.getName())) {
      Logger l=LogManager.getLogManager().getLogger(name);
      if (l != null) {
        l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
      }
      vectorClazz.add(clazz.getName());
    }
    return null;
  }
}"
30072,"/** 
 * Enables access logging for this virtual server, by adding its accesslog valve to its pipeline, or starting its accesslog valve if it is already present in the pipeline.
 */
void enableAccessLogging(){
  if (!isAccessLogValveActivated()) {
    addValve((GlassFishValve)accessLogValve);
  }
 else {
    try {
      if (accessLogValve.isStarted()) {
        accessLogValve.stop();
      }
      accessLogValve.start();
    }
 catch (    LifecycleException le) {
      _logger.log(Level.SEVERE,""String_Node_Str"",le);
    }
  }
}","/** 
 * Enables access logging for this virtual server, by adding its accesslog valve to its pipeline, or starting its accesslog valve if it is already present in the pipeline.
 */
void enableAccessLogging(){
  if (!isAccessLogValveActivated()) {
    addValve((GlassFishValve)accessLogValve);
  }
 else {
    try {
      if (accessLogValve.isStarted()) {
        accessLogValve.stop();
      }
      accessLogValve.start();
    }
 catch (    LifecycleException le) {
      _logger.log(Level.SEVERE,""String_Node_Str"",le);
    }
  }
  addHttpProbes(false);
}"
30073,"/** 
 * Disables access logging for this virtual server, by removing its accesslog valve from its pipeline.
 */
void disableAccessLogging(){
  removeValve(accessLogValve);
}","/** 
 * Disables access logging for this virtual server, by removing its accesslog valve from its pipeline.
 */
void disableAccessLogging(){
  removeValve(accessLogValve);
  addHttpProbes(true);
}"
30074,"/** 
 * Reconfigures the access log of this VirtualServer with the updated attributes of the access-log element from domain.xml.
 */
void reconfigureAccessLog(HttpService httpService,WebContainerFeatureFactory webcontainerFeatureFactory){
  try {
    boolean restart=false;
    if (accessLogValve.isStarted()) {
      accessLogValve.stop();
      restart=true;
    }
    accessLogValve.updateAccessLogAttributes(httpService,webcontainerFeatureFactory);
    if (restart) {
      accessLogValve.start();
    }
  }
 catch (  LifecycleException le) {
    _logger.log(Level.SEVERE,""String_Node_Str"",le);
  }
}","/** 
 * Reconfigures the access log of this VirtualServer with the updated attributes of the access-log element from domain.xml.
 */
void reconfigureAccessLog(HttpService httpService,WebContainerFeatureFactory webcontainerFeatureFactory){
  try {
    boolean restart=false;
    if (accessLogValve.isStarted()) {
      accessLogValve.stop();
      restart=true;
    }
    accessLogValve.updateAccessLogAttributes(httpService,webcontainerFeatureFactory);
    if (restart) {
      accessLogValve.start();
      addHttpProbes(false);
    }
  }
 catch (  LifecycleException le) {
    _logger.log(Level.SEVERE,""String_Node_Str"",le);
  }
}"
30075,"/** 
 * Create a virtual server/host.
 */
public VirtualServer createHost(String vsID,com.sun.enterprise.config.serverbeans.VirtualServer vsBean,String docroot,MimeMap mimeMap){
  VirtualServer vs=(VirtualServer)_embedded.createHost(vsID,vsBean,docroot,vsBean.getLogFile(),mimeMap);
  vs.configureState();
  vs.configureRemoteAddressFilterValve();
  vs.configureRemoteHostFilterValve();
  vs.configureSingleSignOn(globalSSOEnabled,webContainerFeatureFactory,isSsoFailoverEnabled());
  vs.configureRedirect();
  vs.configureErrorPage();
  vs.configureErrorReportValve();
  vs.setServerContext(getServerContext());
  return vs;
}","/** 
 * Create a virtual server/host.
 */
public VirtualServer createHost(String vsID,com.sun.enterprise.config.serverbeans.VirtualServer vsBean,String docroot,MimeMap mimeMap){
  VirtualServer vs=(VirtualServer)_embedded.createHost(vsID,vsBean,docroot,vsBean.getLogFile(),mimeMap);
  vs.configureState();
  vs.configureRemoteAddressFilterValve();
  vs.configureRemoteHostFilterValve();
  vs.configureSingleSignOn(globalSSOEnabled,webContainerFeatureFactory,isSsoFailoverEnabled());
  vs.configureRedirect();
  vs.configureErrorPage();
  vs.configureErrorReportValve();
  vs.setServerContext(getServerContext());
  vs.setServerConfig(serverConfig);
  vs.setGrizzlyService(grizzlyService);
  vs.setWebContainer(this);
  return vs;
}"
30076,"public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Services services=domain.getExtensionByType(Services.class);
  boolean found=false;
  if (services != null) {
    for (    final org.glassfish.paas.orchestrator.config.Service service : services.getServices()) {
      if (service.getServiceName().equals(serviceName)) {
        if (service instanceof SharedService) {
          found=true;
          List<ServiceRef> serviceRefList=services.getServiceRefs();
          String appName=null;
          for (          ServiceRef serviceRef : serviceRefList) {
            if (serviceName.equalsIgnoreCase(serviceRef.getServiceName())) {
              appName=serviceRef.getApplicationName();
              if (appName != null) {
                Clusters clusters=domain.getClusters();
                List<Cluster> clusterList=clusters.getCluster();
                for (                Cluster cluster : clusterList) {
                  ApplicationRef applicationRef=cluster.getApplicationRef(appName);
                  if (applicationRef != null) {
                    if (""String_Node_Str"".equalsIgnoreCase(applicationRef.getEnabled())) {
                      report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str""+ ""String_Node_Str""+ appName+ ""String_Node_Str"");
                      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                      return;
                    }
                  }
                }
              }
            }
          }
          SharedService sharedService=(SharedService)service;
          ProvisionedService provisionedService=serviceOrchestrator.getSharedService(sharedService.getServiceName());
          Plugin plugin=provisionedService.getServiceDescription().getPlugin();
          PaaSDeploymentContext pdc=new PaaSDeploymentContext(null,null,serviceOrchestrator);
          plugin.unprovisionService(provisionedService.getServiceDescription(),pdc);
          serviceOrchestrator.removeSharedService(sharedService.getServiceName());
          String virtualClusterName=service.getServiceName();
          CommandResult result=commandRunner.run(""String_Node_Str"",virtualClusterName);
          logger.finest(""String_Node_Str"" + virtualClusterName + ""String_Node_Str""+ ""String_Node_Str""+ result.getOutput()+ ""String_Node_Str"");
          if (result.getExitStatus().equals(CommandResult.ExitStatus.FAILURE)) {
            throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + virtualClusterName + ""String_Node_Str"");
          }
        }
      }
    }
    if (!found) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    }
  }
 else {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
}","public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Services services=domain.getExtensionByType(Services.class);
  boolean found=false;
  if (services != null) {
    for (    final org.glassfish.paas.orchestrator.config.Service service : services.getServices()) {
      if (service.getServiceName().equals(serviceName)) {
        if (service instanceof SharedService) {
          found=true;
          List<ServiceRef> serviceRefList=services.getServiceRefs();
          String appName=null;
          for (          ServiceRef serviceRef : serviceRefList) {
            if (serviceName.equalsIgnoreCase(serviceRef.getServiceName())) {
              appName=serviceRef.getApplicationName();
              if (appName != null) {
                Clusters clusters=domain.getClusters();
                List<Cluster> clusterList=clusters.getCluster();
                for (                Cluster cluster : clusterList) {
                  ApplicationRef applicationRef=cluster.getApplicationRef(appName);
                  if (applicationRef != null) {
                    report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str""+ ""String_Node_Str""+ appName+ ""String_Node_Str"");
                    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
                    return;
                  }
                }
              }
            }
          }
          SharedService sharedService=(SharedService)service;
          ProvisionedService provisionedService=serviceOrchestrator.getSharedService(sharedService.getServiceName());
          Plugin plugin=provisionedService.getServiceDescription().getPlugin();
          PaaSDeploymentContext pdc=new PaaSDeploymentContext(null,null,serviceOrchestrator);
          plugin.unprovisionService(provisionedService.getServiceDescription(),pdc);
          serviceOrchestrator.removeSharedService(sharedService.getServiceName());
          String virtualClusterName=service.getServiceName();
          CommandResult result=commandRunner.run(""String_Node_Str"",virtualClusterName);
          logger.finest(""String_Node_Str"" + virtualClusterName + ""String_Node_Str""+ ""String_Node_Str""+ result.getOutput()+ ""String_Node_Str"");
          if (result.getExitStatus().equals(CommandResult.ExitStatus.FAILURE)) {
            throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + virtualClusterName + ""String_Node_Str"");
          }
        }
      }
    }
    if (!found) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
    }
  }
 else {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(""String_Node_Str"" + serviceName + ""String_Node_Str"");
  }
}"
30077,"/** 
 * cache the default client info which can will set back during close()<br> as this connection may be re-used by connection pool of application server<br>
 */
protected void init(){
  try {
    defaultClientInfo=getClientInfo();
  }
 catch (  SQLException e) {
    _logger.log(Level.INFO,""String_Node_Str"",e.getMessage());
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.log(Level.FINEST,""String_Node_Str"",e);
    }
  }
}","/** 
 * cache the default client info which can will set back during close()<br> as this connection may be re-used by connection pool of application server<br>
 */
protected void init(){
  try {
    if (isSupportClientInfo()) {
      defaultClientInfo=getClientInfo();
    }
  }
 catch (  Throwable e) {
    _logger.log(Level.INFO,""String_Node_Str"",e.getMessage());
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.log(Level.FINEST,""String_Node_Str"",e);
    }
  }
}"
30078,"/** 
 * Closes the logical connection.<br> Cleans up client specific details<br>
 * @throws SQLException In case of a database error.
 */
public void close() throws SQLException {
  if (isClosed) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",this);
    }
    return;
  }
  if (!jdbc30Connection) {
    try {
      checkValidity();
      if (defaultClientInfo == null) {
        setClientInfo(new Properties());
      }
 else {
        setClientInfo(defaultClientInfo);
      }
    }
 catch (    SQLClientInfoException e) {
      _logger.log(Level.INFO,""String_Node_Str"",e.getMessage());
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,""String_Node_Str"",e);
      }
    }
  }
  super.close();
}","/** 
 * Closes the logical connection.<br> Cleans up client specific details<br>
 * @throws SQLException In case of a database error.
 */
public void close() throws SQLException {
  if (isClosed) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",this);
    }
    return;
  }
  if (!jdbc30Connection) {
    try {
      checkValidity();
      if (isSupportClientInfo()) {
        if (defaultClientInfo == null) {
          setClientInfo(new Properties());
        }
 else {
          setClientInfo(defaultClientInfo);
        }
      }
    }
 catch (    Throwable e) {
      _logger.log(Level.INFO,""String_Node_Str"",e.getMessage());
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,""String_Node_Str"",e);
      }
    }
  }
  super.close();
}"
30079,"@Override public Iterable<Metadata<Extension>> getExtensions(){
  return context.getTransientAppMetaData(WeldDeployer.WELD_BOOTSTRAP,WeldBootstrap.class).loadExtensions(Thread.currentThread().getContextClassLoader());
}","@Override public Iterable<Metadata<Extension>> getExtensions(){
  List<BeanDeploymentArchive> bdas=getBeanDeploymentArchives();
  ArrayList<Metadata<Extension>> extnList=new ArrayList<Metadata<Extension>>();
  for (  BeanDeploymentArchive bda : bdas) {
    Iterable<Metadata<Extension>> bdaExtns=context.getTransientAppMetaData(WeldDeployer.WELD_BOOTSTRAP,WeldBootstrap.class).loadExtensions(((BeanDeploymentArchiveImpl)bda).getModuleClassLoaderForBDA());
    for (    Metadata<Extension> bdaExtn : bdaExtns) {
      extnList.add(bdaExtn);
    }
  }
  return extnList;
}"
30080,"private void firePITEvent(WeldBootstrap bootstrap,BeanDeploymentArchive bda,Class<?> bdaClazz){
  AnnotatedType at=bootstrap.getManager(bda).createAnnotatedType(bdaClazz);
  InjectionTarget<?> it=bootstrap.getManager(bda).fireProcessInjectionTarget(at);
  ((BeanDeploymentArchiveImpl)bda).putInjectionTarget(at,it);
}","private void firePITEvent(WeldBootstrap bootstrap,BeanDeploymentArchive bda,Class<?> bdaClazz){
  if (bdaClazz.isInterface()) {
    return;
  }
  AnnotatedType at=bootstrap.getManager(bda).createAnnotatedType(bdaClazz);
  InjectionTarget<?> it=bootstrap.getManager(bda).fireProcessInjectionTarget(at);
  ((BeanDeploymentArchiveImpl)bda).putInjectionTarget(at,it);
}"
30081,"/** 
 * Specific stages of the Weld bootstrapping process will execute across different stages of the deployment process.  Weld deployment will happen when the load phase of the  deployment process is complete.  When all modules have been loaded, a deployment  graph is produced defining the accessiblity relationships between  <code>BeanDeploymentArchive</code>s.
 */
public void event(Event event){
  if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_LOADED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    WeldBootstrap bootstrap=(WeldBootstrap)appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      DeploymentImpl deploymentImpl=(DeploymentImpl)appInfo.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
      deploymentImpl.buildDeploymentGraph();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.fine(deploymentImpl.toString());
      }
      ClassLoader oldTCL=Thread.currentThread().getContextClassLoader();
      try {
        bootstrap.startContainer(Environments.SERVLET,deploymentImpl);
        bootstrap.startInitialization();
        fireProcessInjectionTargetEvents(bootstrap,deploymentImpl);
        bootstrap.deployBeans();
      }
 catch (      Throwable t) {
        DeploymentException de=new DeploymentException(t.getMessage());
        de.initCause(t);
        throw (de);
      }
 finally {
        Thread.currentThread().setContextClassLoader(oldTCL);
      }
    }
  }
 else   if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_STARTED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    WeldBootstrap bootstrap=(WeldBootstrap)appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      try {
        bootstrap.validateBeans();
        bootstrap.endInitialization();
      }
 catch (      Throwable t) {
        DeploymentException de=new DeploymentException(t.getMessage());
        de.initCause(t);
        throw (de);
      }
    }
  }
 else   if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_STOPPED) || event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_UNLOADED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    Application app=appInfo.getMetaData(Application.class);
    if (app != null) {
      for (      BundleDescriptor next : app.getBundleDescriptors()) {
        if (next instanceof EjbBundleDescriptor || next instanceof WebBundleDescriptor) {
          bundleToBeanDeploymentArchive.remove(next);
        }
      }
      appToBootstrap.remove(app);
    }
    String shutdown=appInfo.getTransientAppMetaData(WELD_SHUTDOWN,String.class);
    if (Boolean.valueOf(shutdown) == Boolean.TRUE) {
      return;
    }
    WeldBootstrap bootstrap=(WeldBootstrap)appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      try {
        bootstrap.shutdown();
      }
 catch (      Exception e) {
        _logger.log(Level.WARNING,""String_Node_Str"",e);
      }
      appInfo.addTransientAppMetaData(WELD_SHUTDOWN,""String_Node_Str"");
    }
    DeploymentImpl deploymentImpl=(DeploymentImpl)appInfo.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
    if (deploymentImpl != null) {
      deploymentImpl.cleanup();
    }
  }
}","/** 
 * Specific stages of the Weld bootstrapping process will execute across different stages of the deployment process.  Weld deployment will happen when the load phase of the  deployment process is complete.  When all modules have been loaded, a deployment  graph is produced defining the accessiblity relationships between  <code>BeanDeploymentArchive</code>s.
 */
public void event(Event event){
  if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_LOADED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    WeldBootstrap bootstrap=(WeldBootstrap)appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      DeploymentImpl deploymentImpl=(DeploymentImpl)appInfo.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
      List<BeanDeploymentArchive> archives=deploymentImpl.getBeanDeploymentArchives();
      for (      BeanDeploymentArchive archive : archives) {
        ResourceLoaderImpl loader=new ResourceLoaderImpl(((BeanDeploymentArchiveImpl)archive).getModuleClassLoaderForBDA());
        archive.getServices().add(ResourceLoader.class,loader);
      }
      deploymentImpl.buildDeploymentGraph();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.fine(deploymentImpl.toString());
      }
      ClassLoader oldTCL=Thread.currentThread().getContextClassLoader();
      try {
        bootstrap.startContainer(Environments.SERVLET,deploymentImpl);
        bootstrap.startInitialization();
        fireProcessInjectionTargetEvents(bootstrap,deploymentImpl);
        bootstrap.deployBeans();
      }
 catch (      Throwable t) {
        DeploymentException de=new DeploymentException(t.getMessage());
        de.initCause(t);
        throw (de);
      }
 finally {
        Thread.currentThread().setContextClassLoader(oldTCL);
      }
    }
  }
 else   if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_STARTED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    WeldBootstrap bootstrap=(WeldBootstrap)appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      try {
        bootstrap.validateBeans();
        bootstrap.endInitialization();
      }
 catch (      Throwable t) {
        DeploymentException de=new DeploymentException(t.getMessage());
        de.initCause(t);
        throw (de);
      }
    }
  }
 else   if (event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_STOPPED) || event.is(org.glassfish.internal.deployment.Deployment.APPLICATION_UNLOADED)) {
    ApplicationInfo appInfo=(ApplicationInfo)event.hook();
    Application app=appInfo.getMetaData(Application.class);
    if (app != null) {
      for (      BundleDescriptor next : app.getBundleDescriptors()) {
        if (next instanceof EjbBundleDescriptor || next instanceof WebBundleDescriptor) {
          bundleToBeanDeploymentArchive.remove(next);
        }
      }
      appToBootstrap.remove(app);
    }
    String shutdown=appInfo.getTransientAppMetaData(WELD_SHUTDOWN,String.class);
    if (Boolean.valueOf(shutdown) == Boolean.TRUE) {
      return;
    }
    WeldBootstrap bootstrap=(WeldBootstrap)appInfo.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
    if (bootstrap != null) {
      try {
        bootstrap.shutdown();
      }
 catch (      Exception e) {
        _logger.log(Level.WARNING,""String_Node_Str"",e);
      }
      appInfo.addTransientAppMetaData(WELD_SHUTDOWN,""String_Node_Str"");
    }
    DeploymentImpl deploymentImpl=(DeploymentImpl)appInfo.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
    if (deploymentImpl != null) {
      deploymentImpl.cleanup();
    }
  }
}"
30082,"/** 
 * Remove trailing slash from a path string
 * @param s
 * @return
 */
String removeTrailingSlash(String s){
  if (s.endsWith(""String_Node_Str"")) {
    s=s.substring(0,s.length() - 1);
  }
  return s;
}","/** 
 * Remove trailing slash from a path string
 * @param s
 * @return
 */
String removeTrailingSlash(String s){
  if (!StringUtils.ok(s))   return s;
  if (s.endsWith(""String_Node_Str"")) {
    s=s.substring(0,s.length() - 1);
  }
  return s;
}"
30083,"public synchronized Future<Result<Thread>> createNetworkProxy(NetworkListener listener){
  if (!Boolean.valueOf(listener.getEnabled())) {
    logger.log(Level.INFO,""String_Node_Str"",new Object[]{listener.getName(),listener.getPort()});
    return null;
  }
  final boolean ajpListener=ConfigBeansUtilities.toBoolean(listener.getJkEnabled());
  GrizzlyProxy proxy=new GrizzlyProxy(this,listener);
  Future<Result<Thread>> future;
  try {
    proxy.initialize();
    if (!ajpListener && !""String_Node_Str"".equals(listener.getProtocol())) {
      final NetworkConfig networkConfig=listener.getParent(NetworkListeners.class).getParent(NetworkConfig.class);
      for (      VirtualServer vs : networkConfig.getParent(Config.class).getHttpService().getVirtualServer()) {
        List<String> vsListeners=StringUtils.parseStringList(vs.getNetworkListeners(),""String_Node_Str"");
        if (vsListeners == null || vsListeners.isEmpty() || vsListeners.contains(listener.getName())) {
          if (!hosts.contains(vs.getId())) {
            hosts.add(vs.getId());
          }
        }
      }
      addChangeListener(listener);
      addChangeListener(listener.findThreadPool());
      addChangeListener(listener.findTransport());
      final Protocol protocol=listener.findHttpProtocol();
      if (protocol != null) {
        addChangeListener(protocol);
        addChangeListener(protocol.getHttp());
        addChangeListener(protocol.getHttp().getFileCache());
        addChangeListener(protocol.getSsl());
      }
    }
    if (!ajpListener) {
      future=proxy.start();
    }
 else {
      future=ReadyFutureImpl.create(new Result<Thread>(new Thread(new Runnable(){
        @Override public void run(){
        }
      }
)));
    }
    proxies.add(proxy);
    futures.add(future);
  }
 catch (  IOException e) {
    final FutureImpl<Result<Thread>> errorFuture=UnsafeFutureImpl.<Result<Thread>>create();
    errorFuture.failure(e);
    future=errorFuture;
  }
  return future;
}","public synchronized Future<Result<Thread>> createNetworkProxy(NetworkListener listener){
  if (!Boolean.valueOf(listener.getEnabled())) {
    logger.log(Level.INFO,""String_Node_Str"",new Object[]{listener.getName(),listener.getPort()});
    return null;
  }
  final boolean ajpListener=ConfigBeansUtilities.toBoolean(listener.getJkEnabled());
  GrizzlyProxy proxy=new GrizzlyProxy(this,listener);
  Future<Result<Thread>> future=null;
  try {
    proxy.initialize();
    if (!ajpListener && !""String_Node_Str"".equals(listener.getProtocol())) {
      final NetworkConfig networkConfig=listener.getParent(NetworkListeners.class).getParent(NetworkConfig.class);
      for (      VirtualServer vs : networkConfig.getParent(Config.class).getHttpService().getVirtualServer()) {
        List<String> vsListeners=StringUtils.parseStringList(vs.getNetworkListeners(),""String_Node_Str"");
        if (vsListeners == null || vsListeners.isEmpty() || vsListeners.contains(listener.getName())) {
          if (!hosts.contains(vs.getId())) {
            hosts.add(vs.getId());
          }
        }
      }
      addChangeListener(listener);
      addChangeListener(listener.findThreadPool());
      addChangeListener(listener.findTransport());
      final Protocol protocol=listener.findHttpProtocol();
      if (protocol != null) {
        addChangeListener(protocol);
        addChangeListener(protocol.getHttp());
        addChangeListener(protocol.getHttp().getFileCache());
        addChangeListener(protocol.getSsl());
      }
    }
    if (!ajpListener) {
      future=proxy.start();
    }
 else {
      future=ReadyFutureImpl.create(new Result<Thread>(new Thread(new Runnable(){
        @Override public void run(){
        }
      }
)));
    }
    proxies.add(proxy);
  }
 catch (  Throwable e) {
    final FutureImpl<Result<Thread>> errorFuture=UnsafeFutureImpl.<Result<Thread>>create();
    errorFuture.result(new Result<Thread>(e));
    future=errorFuture;
  }
 finally {
    if (future == null) {
      final FutureImpl<Result<Thread>> errorFuture=UnsafeFutureImpl.<Result<Thread>>create();
      errorFuture.result(new Result<Thread>(new IllegalStateException(""String_Node_Str"")));
      future=errorFuture;
    }
    futures.add(future);
  }
  return future;
}"
30084,"/** 
 * Reconfigure the Pool's properties. The reconfigConnectorConnectionPool method in the ConnectorRuntime will use this method (through PoolManager) if it needs to just change pool properties and not recreate the pool
 * @param poolResource - the ConnectorConnectionPool JavaBean that holdsthe new pool properties
 * @throws PoolingException if the pool resizing fails
 */
public synchronized void reconfigurePool(ConnectorConnectionPool poolResource) throws PoolingException {
  int _idleTime=Integer.parseInt(poolResource.getIdleTimeoutInSeconds()) * 1000;
  if (poolInitialized) {
    if (_idleTime != idletime && _idleTime != 0) {
      scheduleResizerTask();
    }
    if (_idleTime == 0) {
      cancelResizerTask();
    }
  }
  idletime=_idleTime;
  resizeQuantity=Integer.parseInt(poolResource.getPoolResizeQuantity());
  maxWaitTime=Integer.parseInt(poolResource.getMaxWaitTimeInMillis());
  if (maxWaitTime < 0) {
    maxWaitTime=0;
  }
  validation=poolResource.isIsConnectionValidationRequired();
  failAllConnections=poolResource.isFailAllConnections();
  setAdvancedPoolConfiguration(poolResource);
  if (!isSelfManaged()) {
    int _maxPoolSize=Integer.parseInt(poolResource.getMaxPoolSize());
    int oldMaxPoolSize=maxPoolSize;
    if (_maxPoolSize < steadyPoolSize) {
      maxPoolSize=steadyPoolSize;
    }
 else {
      maxPoolSize=_maxPoolSize;
    }
    if (oldMaxPoolSize != maxPoolSize) {
      ds.setMaxSize(maxPoolSize);
    }
    int _steadyPoolSize=Integer.parseInt(poolResource.getSteadyPoolSize());
    int oldSteadyPoolSize=steadyPoolSize;
    if (_steadyPoolSize > maxPoolSize) {
      steadyPoolSize=maxPoolSize;
    }
 else {
      steadyPoolSize=_steadyPoolSize;
    }
    if (poolInitialized) {
      int toKill=ds.getResourcesSize() - maxPoolSize;
      if (toKill > 0)       killExtraResources(toKill);
    }
    if (oldSteadyPoolSize != steadyPoolSize) {
      if (poolInitialized) {
        if (oldSteadyPoolSize < steadyPoolSize) {
          increaseSteadyPoolSize(_steadyPoolSize);
          if (poolLifeCycleListener != null) {
            poolLifeCycleListener.connectionsFreed(steadyPoolSize);
          }
        }
      }
    }
  }
}","/** 
 * Reconfigure the Pool's properties. The reconfigConnectorConnectionPool method in the ConnectorRuntime will use this method (through PoolManager) if it needs to just change pool properties and not recreate the pool
 * @param poolResource - the ConnectorConnectionPool JavaBean that holdsthe new pool properties
 * @throws PoolingException if the pool resizing fails
 */
public synchronized void reconfigurePool(ConnectorConnectionPool poolResource) throws PoolingException {
  int _idleTime=Integer.parseInt(poolResource.getIdleTimeoutInSeconds()) * 1000;
  if (poolInitialized) {
    if (_idleTime != idletime && _idleTime != 0) {
      idletime=_idleTime;
      scheduleResizerTask();
    }
    if (_idleTime == 0) {
      cancelResizerTask();
    }
  }
  idletime=_idleTime;
  resizeQuantity=Integer.parseInt(poolResource.getPoolResizeQuantity());
  maxWaitTime=Integer.parseInt(poolResource.getMaxWaitTimeInMillis());
  if (maxWaitTime < 0) {
    maxWaitTime=0;
  }
  validation=poolResource.isIsConnectionValidationRequired();
  failAllConnections=poolResource.isFailAllConnections();
  setAdvancedPoolConfiguration(poolResource);
  if (!isSelfManaged()) {
    int _maxPoolSize=Integer.parseInt(poolResource.getMaxPoolSize());
    int oldMaxPoolSize=maxPoolSize;
    if (_maxPoolSize < steadyPoolSize) {
      maxPoolSize=steadyPoolSize;
    }
 else {
      maxPoolSize=_maxPoolSize;
    }
    if (oldMaxPoolSize != maxPoolSize) {
      ds.setMaxSize(maxPoolSize);
    }
    int _steadyPoolSize=Integer.parseInt(poolResource.getSteadyPoolSize());
    int oldSteadyPoolSize=steadyPoolSize;
    if (_steadyPoolSize > maxPoolSize) {
      steadyPoolSize=maxPoolSize;
    }
 else {
      steadyPoolSize=_steadyPoolSize;
    }
    if (poolInitialized) {
      int toKill=ds.getResourcesSize() - maxPoolSize;
      if (toKill > 0)       killExtraResources(toKill);
    }
    reconfigureSteadyPoolSize(oldSteadyPoolSize,_steadyPoolSize);
  }
}"
30085,"/** 
 * Gets the value of the gmsMulticastPort property. This is the communication port GMS uses to listen for group  events. This should be a valid port number.
 * @return possible object is{@link String }
 */
@Attribute @Min(value=2048) @Max(value=32000) String getGmsMulticastPort();","/** 
 * Gets the value of the gmsMulticastPort property. This is the communication port GMS uses to listen for group  events. This should be a valid port number.
 * @return possible object is{@link String }
 */
@Attribute @Min(value=2048) @Max(value=49151) String getGmsMulticastPort();"
30086,"/** 
 * Execute the remote command using the parameters we've collected.
 */
@Override protected int executeCommand() throws CommandException {
  RemoteAdminCommand rac=new RemoteAdminCommand(name,programOpts.getHost(),programOpts.getPort(),programOpts.isSecure(),programOpts.getUser(),programOpts.getPassword(),logger);
  rac.executeCommand(params);
  return SUCCESS;
}","/** 
 * Execute the remote command using the parameters we've collected.
 */
@Override protected int executeCommand() throws CommandException {
  if (ok(domainDirParam) || ok(userArgDomainName)) {
    String domainDir=(ok(domainDirParam)) ? domainDirParam : getDomainsDir().getPath();
    String domainName=(ok(userArgDomainName)) ? userArgDomainName : getDomainName();
    return changeAdminPasswordLocally(domainDir,domainName);
  }
 else {
    try {
      RemoteAdminCommand rac=new RemoteAdminCommand(name,programOpts.getHost(),programOpts.getPort(),programOpts.isSecure(),programOpts.getUser(),programOpts.getPassword(),logger);
      rac.executeCommand(params);
      return SUCCESS;
    }
 catch (    CommandException ce) {
      if (ce.getCause() instanceof ConnectException) {
        if (!isLocalHost(programOpts.getHost())) {
          throw ce;
        }
        return changeAdminPasswordLocally(getDomainsDir().getPath(),getDomainName());
      }
 else {
        throw ce;
      }
    }
  }
}"
30087,"/** 
 * Require the user to actually type the passwords unless they are in the file specified by the --passwordfile option.
 */
@Override protected void validate() throws CommandException, CommandValidationException {
  if (programOpts.getUser() == null) {
    Console cons=System.console();
    if (cons != null && programOpts.isInteractive()) {
      cons.printf(""String_Node_Str"",strings.get(""String_Node_Str"",SystemPropertyConstants.DEFAULT_ADMIN_USER));
      String val=cons.readLine();
      if (ok(val))       programOpts.setUser(val);
 else       programOpts.setUser(SystemPropertyConstants.DEFAULT_ADMIN_USER);
    }
 else {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  try {
    String password=getPasswords();
    programOpts.setPassword(password,ProgramOptions.PasswordLocation.USER);
  }
 catch (  CommandValidationException cve) {
    throw new CommandException(cve);
  }
  params=new ParameterMap();
  params.set(""String_Node_Str"",programOpts.getUser());
  params.set(oldpwName,passwords.get(oldpwName));
  params.set(newpwName,passwords.get(newpwName));
}","/** 
 * Require the user to actually type the passwords unless they are in the file specified by the --passwordfile option.
 */
@Override protected void validate() throws CommandException, CommandValidationException {
  setDomainName(userArgDomainName);
  super.validate();
  if (programOpts.getUser() == null) {
    Console cons=System.console();
    if (cons != null && programOpts.isInteractive()) {
      cons.printf(""String_Node_Str"",strings.get(""String_Node_Str"",SystemPropertyConstants.DEFAULT_ADMIN_USER));
      String val=cons.readLine();
      if (ok(val))       programOpts.setUser(val);
 else       programOpts.setUser(SystemPropertyConstants.DEFAULT_ADMIN_USER);
    }
 else {
      throw new CommandValidationException(strings.get(""String_Node_Str""));
    }
  }
  try {
    String password=getPasswords();
    programOpts.setPassword(password,ProgramOptions.PasswordLocation.USER);
  }
 catch (  CommandValidationException cve) {
    throw new CommandException(cve);
  }
  params=new ParameterMap();
  params.set(""String_Node_Str"",programOpts.getUser());
  params.set(oldpwName,passwords.get(oldpwName));
  params.set(newpwName,passwords.get(newpwName));
}"
30088,"public String hostname() throws UnknownHostException {
  InetAddress.getByName(mHostName);
  if (mHostName.equals(""String_Node_Str"") || mHostName.equals(""String_Node_Str"")) {
    return Util.localhost();
  }
 else   if (mHostName.contains(""String_Node_Str"") && !mHostName.startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + mHostName + ""String_Node_Str"";
  }
  return mHostName;
}","public String hostname() throws UnknownHostException {
  if (mHostName.equals(""String_Node_Str"") || mHostName.equals(""String_Node_Str"")) {
    return Util.localhost();
  }
 else   if (mHostName.contains(""String_Node_Str"") && !mHostName.startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + mHostName + ""String_Node_Str"";
  }
  return mHostName;
}"
30089,"@Override public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ActionReport.MessagePart messagePart=report.getTopMessagePart();
  String output;
  List<String> outputList=new ArrayList<String>();
  ServiceProvisioningEngines serviceProvisioningEngines=serviceUtil.getServiceProvisioningEngines();
  if (type == null) {
    for (    ServiceProvisioningEngine serviceProvisioningEngine : serviceProvisioningEngines.getServiceProvisioningEngines()) {
      output=serviceProvisioningEngine.getType().toUpperCase() + ""String_Node_Str"" + serviceProvisioningEngine.getClassName()+ ""String_Node_Str"";
      if (serviceProvisioningEngine.getDefault()) {
        output=output + ""String_Node_Str"";
      }
      outputList.add(output);
    }
  }
 else {
    for (    ServiceProvisioningEngine serviceProvisioningEngine : serviceProvisioningEngines.getServiceProvisioningEngines()) {
      if (serviceProvisioningEngine.getType().equalsIgnoreCase(type)) {
        output=type.toUpperCase() + ""String_Node_Str"" + serviceProvisioningEngine.getClassName()+ ""String_Node_Str"";
        if (serviceProvisioningEngine.getDefault()) {
          output=output + ""String_Node_Str"";
        }
        outputList.add(output);
      }
    }
    if (outputList.isEmpty()) {
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      report.setMessage(""String_Node_Str"" + type + ""String_Node_Str"");
      return;
    }
  }
  for (  String anOutputList : outputList) {
    ActionReport.MessagePart childPart=messagePart.addChild();
    childPart.setMessage(anOutputList);
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","@Override public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ActionReport.MessagePart messagePart=report.getTopMessagePart();
  String output;
  List<String> outputList=new ArrayList<String>();
  ServiceProvisioningEngines serviceProvisioningEngines=serviceUtil.getServiceProvisioningEngines();
  Locale locale=Locale.getDefault();
  if (type == null) {
    for (    ServiceProvisioningEngine serviceProvisioningEngine : serviceProvisioningEngines.getServiceProvisioningEngines()) {
      output=serviceProvisioningEngine.getType().toUpperCase(locale) + ""String_Node_Str"" + serviceProvisioningEngine.getClassName()+ ""String_Node_Str"";
      if (serviceProvisioningEngine.getDefault()) {
        output=output + ""String_Node_Str"";
      }
      outputList.add(output);
    }
  }
 else {
    for (    ServiceProvisioningEngine serviceProvisioningEngine : serviceProvisioningEngines.getServiceProvisioningEngines()) {
      if (serviceProvisioningEngine.getType().equalsIgnoreCase(type)) {
        output=type.toUpperCase(locale) + ""String_Node_Str"" + serviceProvisioningEngine.getClassName()+ ""String_Node_Str"";
        if (serviceProvisioningEngine.getDefault()) {
          output=output + ""String_Node_Str"";
        }
        outputList.add(output);
      }
    }
    if (outputList.isEmpty()) {
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      report.setMessage(""String_Node_Str"" + type + ""String_Node_Str"");
      return;
    }
  }
  for (  String anOutputList : outputList) {
    ActionReport.MessagePart childPart=messagePart.addChild();
    childPart.setMessage(anOutputList);
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
30090,"public Object run(ServiceProvisioningEngines serviceProvisioningEngines) throws PropertyVetoException, TransactionFailure {
  ServiceProvisioningEngine serviceProvisioningEngine=serviceProvisioningEngines.createChild(ServiceProvisioningEngine.class);
  serviceProvisioningEngine.setClassName(className);
  serviceProvisioningEngine.setType(type.toUpperCase());
  serviceProvisioningEngine.setDefault(defaultService);
  if (properties != null) {
    for (    Map.Entry e : properties.entrySet()) {
      Property prop=serviceProvisioningEngine.createChild(Property.class);
      prop.setName((String)e.getKey());
      prop.setValue((String)e.getValue());
      serviceProvisioningEngine.getProperty().add(prop);
    }
  }
  serviceProvisioningEngines.getServiceProvisioningEngines().add(serviceProvisioningEngine);
  if (defaultService) {
    if (force) {
      for (      final ServiceProvisioningEngine spe : serviceProvisioningEngines.getServiceProvisioningEngines()) {
        if (spe.getDefault() && type.equalsIgnoreCase(spe.getType())) {
          Transaction t=Transaction.getTransaction(serviceProvisioningEngines);
          ServiceProvisioningEngine spe_w=t.enroll(spe);
          spe_w.setDefault(false);
          break;
        }
      }
    }
  }
  return serviceProvisioningEngines;
}","public Object run(ServiceProvisioningEngines serviceProvisioningEngines) throws PropertyVetoException, TransactionFailure {
  Locale locale=Locale.getDefault();
  ServiceProvisioningEngine serviceProvisioningEngine=serviceProvisioningEngines.createChild(ServiceProvisioningEngine.class);
  serviceProvisioningEngine.setClassName(className);
  serviceProvisioningEngine.setType(type.toUpperCase(locale));
  serviceProvisioningEngine.setDefault(defaultService);
  if (properties != null) {
    for (    Map.Entry e : properties.entrySet()) {
      Property prop=serviceProvisioningEngine.createChild(Property.class);
      prop.setName((String)e.getKey());
      prop.setValue((String)e.getValue());
      serviceProvisioningEngine.getProperty().add(prop);
    }
  }
  serviceProvisioningEngines.getServiceProvisioningEngines().add(serviceProvisioningEngine);
  if (defaultService) {
    if (force) {
      for (      final ServiceProvisioningEngine spe : serviceProvisioningEngines.getServiceProvisioningEngines()) {
        if (spe.getDefault() && type.equalsIgnoreCase(spe.getType())) {
          Transaction t=Transaction.getTransaction(serviceProvisioningEngines);
          ServiceProvisioningEngine spe_w=t.enroll(spe);
          spe_w.setDefault(false);
          break;
        }
      }
    }
  }
  return serviceProvisioningEngines;
}"
30091,"@Override public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final ServiceProvisioningEngines serviceProvisioningEngines=serviceUtil.getServiceProvisioningEngines();
  if (defaultService) {
    if (!force) {
      for (      ServiceProvisioningEngine serviceProvisioningEngine : serviceProvisioningEngines.getServiceProvisioningEngines()) {
        if (Boolean.valueOf(serviceProvisioningEngine.getDefault()) && type.equalsIgnoreCase(serviceProvisioningEngine.getType())) {
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setFailureCause(new RuntimeException(""String_Node_Str"" + serviceProvisioningEngine.getClassName() + ""String_Node_Str""+ ""String_Node_Str""+ type+ ""String_Node_Str""));
          return;
        }
      }
    }
  }
  try {
    if (ConfigSupport.apply(new SingleConfigCode<ServiceProvisioningEngines>(){
      public Object run(      ServiceProvisioningEngines serviceProvisioningEngines) throws PropertyVetoException, TransactionFailure {
        ServiceProvisioningEngine serviceProvisioningEngine=serviceProvisioningEngines.createChild(ServiceProvisioningEngine.class);
        serviceProvisioningEngine.setClassName(className);
        serviceProvisioningEngine.setType(type.toUpperCase());
        serviceProvisioningEngine.setDefault(defaultService);
        if (properties != null) {
          for (          Map.Entry e : properties.entrySet()) {
            Property prop=serviceProvisioningEngine.createChild(Property.class);
            prop.setName((String)e.getKey());
            prop.setValue((String)e.getValue());
            serviceProvisioningEngine.getProperty().add(prop);
          }
        }
        serviceProvisioningEngines.getServiceProvisioningEngines().add(serviceProvisioningEngine);
        if (defaultService) {
          if (force) {
            for (            final ServiceProvisioningEngine spe : serviceProvisioningEngines.getServiceProvisioningEngines()) {
              if (spe.getDefault() && type.equalsIgnoreCase(spe.getType())) {
                Transaction t=Transaction.getTransaction(serviceProvisioningEngines);
                ServiceProvisioningEngine spe_w=t.enroll(spe);
                spe_w.setDefault(false);
                break;
              }
            }
          }
        }
        return serviceProvisioningEngines;
      }
    }
,serviceProvisioningEngines) == null) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setFailureCause(new RuntimeException(""String_Node_Str""));
      return;
    }
 else {
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      return;
    }
  }
 catch (  TransactionFailure transactionFailure) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(transactionFailure);
    return;
  }
}","@Override public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final ServiceProvisioningEngines serviceProvisioningEngines=serviceUtil.getServiceProvisioningEngines();
  if (defaultService) {
    if (!force) {
      for (      ServiceProvisioningEngine serviceProvisioningEngine : serviceProvisioningEngines.getServiceProvisioningEngines()) {
        if (Boolean.valueOf(serviceProvisioningEngine.getDefault()) && type.equalsIgnoreCase(serviceProvisioningEngine.getType())) {
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setFailureCause(new RuntimeException(""String_Node_Str"" + serviceProvisioningEngine.getClassName() + ""String_Node_Str""+ ""String_Node_Str""+ type+ ""String_Node_Str""));
          return;
        }
      }
    }
  }
  try {
    if (ConfigSupport.apply(new SingleConfigCode<ServiceProvisioningEngines>(){
      public Object run(      ServiceProvisioningEngines serviceProvisioningEngines) throws PropertyVetoException, TransactionFailure {
        Locale locale=Locale.getDefault();
        ServiceProvisioningEngine serviceProvisioningEngine=serviceProvisioningEngines.createChild(ServiceProvisioningEngine.class);
        serviceProvisioningEngine.setClassName(className);
        serviceProvisioningEngine.setType(type.toUpperCase(locale));
        serviceProvisioningEngine.setDefault(defaultService);
        if (properties != null) {
          for (          Map.Entry e : properties.entrySet()) {
            Property prop=serviceProvisioningEngine.createChild(Property.class);
            prop.setName((String)e.getKey());
            prop.setValue((String)e.getValue());
            serviceProvisioningEngine.getProperty().add(prop);
          }
        }
        serviceProvisioningEngines.getServiceProvisioningEngines().add(serviceProvisioningEngine);
        if (defaultService) {
          if (force) {
            for (            final ServiceProvisioningEngine spe : serviceProvisioningEngines.getServiceProvisioningEngines()) {
              if (spe.getDefault() && type.equalsIgnoreCase(spe.getType())) {
                Transaction t=Transaction.getTransaction(serviceProvisioningEngines);
                ServiceProvisioningEngine spe_w=t.enroll(spe);
                spe_w.setDefault(false);
                break;
              }
            }
          }
        }
        return serviceProvisioningEngines;
      }
    }
,serviceProvisioningEngines) == null) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setFailureCause(new RuntimeException(""String_Node_Str""));
      return;
    }
 else {
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      return;
    }
  }
 catch (  TransactionFailure transactionFailure) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(transactionFailure);
    return;
  }
}"
30092,"private ResourceStatus isValid(Resources resources){
  ResourceStatus status=new ResourceStatus(ResourceStatus.SUCCESS,""String_Node_Str"");
  if (jdbcconnectionpoolid == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    return new ResourceStatus(ResourceStatus.FAILURE,msg);
  }
  for (  ResourcePool pool : resources.getResources(ResourcePool.class)) {
    if (pool.getName().equals(jdbcconnectionpoolid)) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jdbcconnectionpoolid);
      return new ResourceStatus(ResourceStatus.FAILURE,msg,true);
    }
  }
  if (this.validationmethod.equals(""String_Node_Str"") && this.isconnectvalidatereq.equals(Boolean.TRUE.toString()) && this.validationtable == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
    return new ResourceStatus(ResourceStatus.FAILURE,msg,true);
  }
  return status;
}","private ResourceStatus isValid(Resources resources){
  ResourceStatus status=new ResourceStatus(ResourceStatus.SUCCESS,""String_Node_Str"");
  if (jdbcconnectionpoolid == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    return new ResourceStatus(ResourceStatus.FAILURE,msg);
  }
  for (  ResourcePool pool : resources.getResources(ResourcePool.class)) {
    if (pool.getName().equals(jdbcconnectionpoolid)) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jdbcconnectionpoolid);
      return new ResourceStatus(ResourceStatus.FAILURE,msg,true);
    }
  }
  if (""String_Node_Str"".equals(this.validationmethod) && Boolean.TRUE.toString().equals(this.isconnectvalidatereq) && this.validationtable == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
    return new ResourceStatus(ResourceStatus.FAILURE,msg,true);
  }
  return status;
}"
30093,"/** 
 * Get equivalent name for the database vendor name. This is useful for introspection as the vendor name for oracle and sun oracle type of jdbc drivers are the same. 
 * @param dbVendor
 * @return
 */
private String getEquivalentName(String dbVendor){
  if (dbVendor.toUpperCase(Locale.getDefault()).startsWith(DATABASE_VENDOR_JAVADB) || dbVendor.equalsIgnoreCase(DATABASE_VENDOR_EMBEDDED_DERBY)) {
    return DATABASE_VENDOR_DERBY;
  }
 else   if (dbVendor.equalsIgnoreCase(DATABASE_VENDOR_MSSQLSERVER) || dbVendor.equalsIgnoreCase(DATABASE_VENDOR_SUN_SQLSERVER)) {
    return DATABASE_VENDOR_SQLSERVER;
  }
 else   if (dbVendor.equalsIgnoreCase(DATABASE_VENDOR_SUN_DB2)) {
    return DATABASE_VENDOR_DB2;
  }
 else   if (dbVendor.equalsIgnoreCase(DATABASE_VENDOR_SUN_ORACLE)) {
    return DATABASE_VENDOR_ORACLE;
  }
 else   if (dbVendor.equalsIgnoreCase(DATABASE_VENDOR_SUN_SYBASE)) {
    return DATABASE_VENDOR_SYBASE;
  }
  return null;
}","/** 
 * Get equivalent name for the database vendor name. This is useful for introspection as the vendor name for oracle and sun oracle type of jdbc drivers are the same. 
 * @param dbVendor
 * @return
 */
private String getEquivalentName(String dbVendor){
  if (dbVendor.toUpperCase(Locale.getDefault()).startsWith(DATABASE_VENDOR_JAVADB) || dbVendor.equalsIgnoreCase(DATABASE_VENDOR_EMBEDDED_DERBY) || dbVendor.equalsIgnoreCase(DATABASE_VENDOR_EMBEDDED_DERBY_30)|| dbVendor.equalsIgnoreCase(DATABASE_VENDOR_DERBY_30)|| dbVendor.equalsIgnoreCase(DATABASE_VENDOR_JAVADB_30)) {
    return DATABASE_VENDOR_DERBY;
  }
 else   if (dbVendor.equalsIgnoreCase(DATABASE_VENDOR_MSSQLSERVER) || dbVendor.equalsIgnoreCase(DATABASE_VENDOR_SUN_SQLSERVER)) {
    return DATABASE_VENDOR_SQLSERVER;
  }
 else   if (dbVendor.equalsIgnoreCase(DATABASE_VENDOR_SUN_DB2)) {
    return DATABASE_VENDOR_DB2;
  }
 else   if (dbVendor.equalsIgnoreCase(DATABASE_VENDOR_SUN_ORACLE)) {
    return DATABASE_VENDOR_ORACLE;
  }
 else   if (dbVendor.equalsIgnoreCase(DATABASE_VENDOR_SUN_SYBASE)) {
    return DATABASE_VENDOR_SYBASE;
  }
  return null;
}"
30094,"public Object prepareInvocation(boolean doPreInvoke) throws Exception {
  ComponentInvocation inv=null;
  AdapterInvocationInfo adapterInvInfo=new AdapterInvocationInfo();
  if (adapter == null) {
synchronized (this) {
      if (adapter == null) {
        try {
          EjbDescriptor ejbDesc=endpoint.getEjbComponentImpl();
          Iterator<ResourceReferenceDescriptor> it=ejbDesc.getResourceReferenceDescriptors().iterator();
          while (it.hasNext()) {
            ResourceReferenceDescriptor r=it.next();
            if (r.isWebServiceContext()) {
              Iterator<InjectionTarget> iter=r.getInjectionTargets().iterator();
              boolean matchingClassFound=false;
              while (iter.hasNext()) {
                InjectionTarget target=iter.next();
                if (ejbDesc.getEjbClassName().equals(target.getClassName())) {
                  matchingClassFound=true;
                  break;
                }
              }
              if (!matchingClassFound) {
                continue;
              }
              try {
                javax.naming.InitialContext ic=new javax.naming.InitialContext();
                wsCtxt=(WebServiceContextImpl)ic.lookup(""String_Node_Str"" + r.getName());
              }
 catch (              Throwable t) {
                logger.fine(""String_Node_Str"" + t.getCause());
              }
            }
          }
          if (wsCtxt == null) {
            wsCtxt=new WebServiceContextImpl();
          }
        }
 catch (        Throwable t) {
          t.printStackTrace();
          logger.severe(""String_Node_Str"" + endpoint.getName() + ""String_Node_Str""+ t.getMessage());
          return null;
        }
      }
    }
  }
  if (doPreInvoke) {
    inv=container.startInvocation();
    adapterInvInfo.setInv(inv);
  }
  if (!handlersConfigured && doPreInvoke) {
synchronized (this) {
      if (!handlersConfigured) {
        try {
          WsUtil wsu=new WsUtil();
          String implClassName=endpoint.getEjbComponentImpl().getEjbClassName();
          Class clazz=container.getEndpointClassLoader().loadClass(implClassName);
          String givenBinding=endpoint.getProtocolBinding();
          SDDocumentSource primaryWsdl=null;
          Collection docs=null;
          if (endpoint.getWebService().hasWsdlFile()) {
            WebServiceContractImpl wscImpl=WebServiceContractImpl.getInstance();
            ApplicationRegistry appRegistry=wscImpl.getHabitat().getByType(ApplicationRegistry.class);
            ApplicationInfo appInfo=appRegistry.get(endpoint.getBundleDescriptor().getApplication().getRegistrationName());
            URI deployedDir=appInfo.getSource().getURI();
            URL pkgedWsdl;
            if (deployedDir != null) {
              if (endpoint.getBundleDescriptor().getApplication().isVirtual()) {
                pkgedWsdl=deployedDir.resolve(endpoint.getWebService().getWsdlFileUri()).toURL();
              }
 else {
                String moduleUri1=endpoint.getBundleDescriptor().getModuleDescriptor().getArchiveUri();
                String moduleUri=FileUtils.makeFriendlyFilenameExtension(moduleUri1);
                pkgedWsdl=deployedDir.resolve(moduleUri + ""String_Node_Str"" + endpoint.getWebService().getWsdlFileUri()).toURL();
              }
            }
 else {
              pkgedWsdl=endpoint.getWebService().getWsdlFileUrl();
            }
            if (pkgedWsdl != null) {
              primaryWsdl=SDDocumentSource.create(pkgedWsdl);
              docs=wsu.getWsdlsAndSchemas(pkgedWsdl);
            }
          }
          JAXWSContainer container=new JAXWSContainer(null,endpoint);
          java.net.URL catalogURL=clazz.getResource('/' + endpoint.getBundleDescriptor().getDeploymentDescriptorDir() + File.separator+ ""String_Node_Str"");
          boolean mtomEnabled=wsu.getMtom(endpoint);
          WSBinding binding=null;
          ArrayList<WebServiceFeature> wsFeatures=new ArrayList<WebServiceFeature>();
          if (mtomEnabled) {
            int mtomThreshold=endpoint.getMtomThreshold() != null ? new Integer(endpoint.getMtomThreshold()) : 0;
            MTOMFeature mtom=new MTOMFeature(true,mtomThreshold);
            wsFeatures.add(mtom);
          }
          Addressing addressing=endpoint.getAddressing();
          if (endpoint.getAddressing() != null) {
            AddressingFeature addressingFeature=new AddressingFeature(addressing.isEnabled(),addressing.isRequired(),getResponse(addressing.getResponses()));
            wsFeatures.add(addressingFeature);
          }
          if (wsFeatures.size() > 0) {
            binding=BindingID.parse(givenBinding).createBinding(wsFeatures.toArray(new WebServiceFeature[wsFeatures.size()]));
          }
 else {
            binding=BindingID.parse(givenBinding).createBinding();
          }
          wsu.configureJAXWSServiceHandlers(endpoint,endpoint.getProtocolBinding(),binding);
          Invoker invoker=new InstanceResolverImpl(clazz).createInvoker();
          WSEndpoint wsep=WSEndpoint.create(clazz,false,new EjbInvokerImpl(clazz,invoker,webServiceEndpointServant,wsCtxt),endpoint.getServiceName(),endpoint.getWsdlPort(),container,binding,primaryWsdl,docs,catalogURL);
          String uri=endpoint.getEndpointAddressUri();
          String urlPattern=uri.startsWith(""String_Node_Str"") ? uri : ""String_Node_Str"" + uri;
          if (adapterList == null) {
            adapterList=new ServletAdapterList();
          }
          adapter=adapterList.createAdapter(endpoint.getName(),urlPattern,wsep);
          handlersConfigured=true;
        }
 catch (        Throwable t) {
          logger.log(Level.SEVERE,""String_Node_Str"" + endpoint.getName() + ""String_Node_Str"",t);
          adapter=null;
        }
      }
    }
  }
  addWSContextInfo(wsCtxt);
  if (inv != null) {
    EJBInvocation ejbInv=(EJBInvocation)inv;
    ejbInv.setWebServiceContext(wsCtxt);
  }
  adapterInvInfo.setAdapter(adapter);
  return adapterInvInfo;
}","public Object prepareInvocation(boolean doPreInvoke) throws Exception {
  ComponentInvocation inv=null;
  AdapterInvocationInfo adapterInvInfo=new AdapterInvocationInfo();
  if (adapter == null) {
synchronized (this) {
      if (adapter == null) {
        try {
          EjbDescriptor ejbDesc=endpoint.getEjbComponentImpl();
          Iterator<ResourceReferenceDescriptor> it=ejbDesc.getResourceReferenceDescriptors().iterator();
          while (it.hasNext()) {
            ResourceReferenceDescriptor r=it.next();
            if (r.isWebServiceContext()) {
              Iterator<InjectionTarget> iter=r.getInjectionTargets().iterator();
              boolean matchingClassFound=false;
              while (iter.hasNext()) {
                InjectionTarget target=iter.next();
                if (ejbDesc.getEjbClassName().equals(target.getClassName())) {
                  matchingClassFound=true;
                  break;
                }
              }
              if (!matchingClassFound) {
                continue;
              }
              try {
                javax.naming.InitialContext ic=new javax.naming.InitialContext();
                wsCtxt=(WebServiceContextImpl)ic.lookup(""String_Node_Str"" + r.getName());
              }
 catch (              Throwable t) {
                logger.fine(""String_Node_Str"" + t.getCause());
              }
            }
          }
          if (wsCtxt == null) {
            wsCtxt=new WebServiceContextImpl();
          }
        }
 catch (        Throwable t) {
          t.printStackTrace();
          logger.severe(""String_Node_Str"" + endpoint.getName() + ""String_Node_Str""+ t.getMessage());
          return null;
        }
      }
    }
  }
  if (doPreInvoke) {
    inv=container.startInvocation();
    adapterInvInfo.setInv(inv);
  }
  if (!handlersConfigured && doPreInvoke) {
synchronized (this) {
      if (!handlersConfigured) {
        try {
          WsUtil wsu=new WsUtil();
          String implClassName=endpoint.getEjbComponentImpl().getEjbClassName();
          Class clazz=container.getEndpointClassLoader().loadClass(implClassName);
          String givenBinding=endpoint.getProtocolBinding();
          SDDocumentSource primaryWsdl=null;
          Collection docs=null;
          if (endpoint.getWebService().hasWsdlFile()) {
            WebServiceContractImpl wscImpl=WebServiceContractImpl.getInstance();
            ApplicationRegistry appRegistry=wscImpl.getHabitat().getByType(ApplicationRegistry.class);
            ApplicationInfo appInfo=appRegistry.get(endpoint.getBundleDescriptor().getApplication().getRegistrationName());
            URI deployedDir=appInfo.getSource().getURI();
            URL pkgedWsdl;
            if (deployedDir != null) {
              if (endpoint.getBundleDescriptor().getApplication().isVirtual()) {
                pkgedWsdl=deployedDir.resolve(endpoint.getWebService().getWsdlFileUri()).toURL();
              }
 else {
                String moduleUri1=endpoint.getBundleDescriptor().getModuleDescriptor().getArchiveUri();
                String moduleUri=FileUtils.makeFriendlyFilenameExtension(moduleUri1);
                pkgedWsdl=deployedDir.resolve(moduleUri + ""String_Node_Str"" + endpoint.getWebService().getWsdlFileUri()).toURL();
              }
            }
 else {
              pkgedWsdl=endpoint.getWebService().getWsdlFileUrl();
            }
            if (pkgedWsdl != null) {
              primaryWsdl=SDDocumentSource.create(pkgedWsdl);
              docs=wsu.getWsdlsAndSchemas(pkgedWsdl);
            }
          }
          JAXWSContainer container=new JAXWSContainer(null,endpoint);
          java.net.URL catalogURL=clazz.getResource('/' + endpoint.getBundleDescriptor().getDeploymentDescriptorDir() + File.separator+ ""String_Node_Str"");
          boolean mtomEnabled=wsu.getMtom(endpoint);
          WSBinding binding=null;
          ArrayList<WebServiceFeature> wsFeatures=new ArrayList<WebServiceFeature>();
          if (mtomEnabled) {
            int mtomThreshold=endpoint.getMtomThreshold() != null ? new Integer(endpoint.getMtomThreshold()) : 0;
            MTOMFeature mtom=new MTOMFeature(true,mtomThreshold);
            wsFeatures.add(mtom);
          }
          Addressing addressing=endpoint.getAddressing();
          if (endpoint.getAddressing() != null) {
            AddressingFeature addressingFeature=new AddressingFeature(addressing.isEnabled(),addressing.isRequired(),getResponse(addressing.getResponses()));
            wsFeatures.add(addressingFeature);
          }
          if (wsFeatures.size() > 0) {
            binding=BindingID.parse(givenBinding).createBinding(wsFeatures.toArray(new WebServiceFeature[wsFeatures.size()]));
          }
 else {
            binding=BindingID.parse(givenBinding).createBinding();
          }
          wsu.configureJAXWSServiceHandlers(endpoint,endpoint.getProtocolBinding(),binding);
          Invoker invoker=new InstanceResolverImpl(clazz).createInvoker();
          WSEndpoint wsep=WSEndpoint.create(clazz,false,new EjbInvokerImpl(clazz,invoker,webServiceEndpointServant,wsCtxt),endpoint.getServiceName(),endpoint.getWsdlPort(),container,binding,primaryWsdl,docs,catalogURL);
          String uri=endpoint.getEndpointAddressUri();
          String urlPattern=uri.startsWith(""String_Node_Str"") ? uri : ""String_Node_Str"" + uri;
          if (adapterList == null) {
            adapterList=new ServletAdapterList();
          }
          adapter=adapterList.createAdapter(endpoint.getName(),urlPattern,wsep);
          handlersConfigured=true;
        }
 catch (        Throwable t) {
          logger.log(Level.SEVERE,""String_Node_Str"" + endpoint.getName() + ""String_Node_Str"",t);
          adapter=null;
        }
      }
    }
  }
synchronized (this) {
    addWSContextInfo(wsCtxt);
    if (inv != null) {
      EJBInvocation ejbInv=(EJBInvocation)inv;
      ejbInv.setWebServiceContext(wsCtxt);
    }
  }
  adapterInvInfo.setAdapter(adapter);
  return adapterInvInfo;
}"
30095,"public WebServiceContext getWebServiceContext(){
  return wsCtxt;
}","public synchronized WebServiceContext getWebServiceContext(){
  return wsCtxt;
}"
30096,"/** 
 * Extract the root cause from a servlet exception.
 * @param e The servlet exception
 */
public static Throwable getRootCause(ServletException e){
  Throwable rootCause=e;
  Throwable rootCauseCheck;
  do {
    try {
      rootCauseCheck=(Throwable)IntrospectionUtils.getProperty(rootCause,""String_Node_Str"");
      if (rootCauseCheck != null)       rootCause=rootCauseCheck;
    }
 catch (    ClassCastException ex) {
      rootCauseCheck=null;
    }
  }
 while (rootCauseCheck != null);
  return rootCause;
}","/** 
 * Extract the root cause from a servlet exception.
 * @param e The servlet exception
 */
public static Throwable getRootCause(ServletException e){
  Throwable rootCause=e;
  Throwable rootCauseCheck;
  int loops=0;
  do {
    loops++;
    rootCauseCheck=rootCause.getCause();
    if (rootCauseCheck != null)     rootCause=rootCauseCheck;
  }
 while (rootCauseCheck != null && (loops < 20));
  return rootCause;
}"
30097,"/** 
 * This constructor is called from ContainerFactoryImpl when an EJB Jar is deployed.
 */
protected BaseContainer(ContainerType type,EjbDescriptor ejbDesc,ClassLoader loader) throws Exception {
  this.containerType=type;
  try {
    this.loader=loader;
    this.ejbDescriptor=ejbDesc;
    logParams=new Object[1];
    logParams[0]=ejbDesc.getName();
    invocationManager=ejbContainerUtilImpl.getInvocationManager();
    injectionManager=ejbContainerUtilImpl.getInjectionManager();
    namingManager=ejbContainerUtilImpl.getGlassfishNamingManager();
    transactionManager=ejbContainerUtilImpl.getTransactionManager();
    ejbClass=loader.loadClass(ejbDescriptor.getEjbImplClassName());
    IASEjbExtraDescriptors iased=ejbDesc.getIASEjbExtraDescriptors();
    cmtTimeoutInSeconds=iased.getCmtTimeoutInSeconds();
    if (ejbDescriptor.getType().equals(EjbMessageBeanDescriptor.TYPE)) {
      assertFullProfile(""String_Node_Str"");
      isMessageDriven=true;
      EjbMessageBeanDescriptor mdb=(EjbMessageBeanDescriptor)ejbDescriptor;
      if (mdb.getTransactionType().equals(""String_Node_Str"")) {
        isBeanManagedTran=true;
      }
 else {
        isBeanManagedTran=false;
      }
    }
 else {
      if (ejbDescriptor.getType().equals(EjbEntityDescriptor.TYPE)) {
        assertFullProfile(""String_Node_Str"");
        isEntity=true;
      }
 else {
        isSession=true;
        EjbSessionDescriptor sd=(EjbSessionDescriptor)ejbDescriptor;
        if (!sd.isSessionTypeSet()) {
          throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",sd.getName(),sd));
        }
        if (sd.isSingleton()) {
          isSingleton=true;
        }
 else {
          isStatelessSession=sd.isStateless();
          isStatefulSession=!isStatelessSession;
          if (isStatefulSession) {
            if (!Serializable.class.isAssignableFrom(ejbClass)) {
              sfsbSerializedClass=EJBUtils.loadGeneratedSerializableClass(ejbClass.getClassLoader(),ejbClass.getName());
            }
          }
        }
        if (sd.getTransactionType().equals(""String_Node_Str"")) {
          isBeanManagedTran=true;
        }
 else {
          isBeanManagedTran=false;
        }
        hasAsynchronousInvocations=sd.hasAsynchronousMethods();
        if (hasAsynchronousInvocations) {
          assertFullProfile(""String_Node_Str"");
        }
      }
      if (ejbDescriptor.isRemoteInterfacesSupported() || ejbDescriptor.isRemoteBusinessInterfacesSupported()) {
        assertFullProfile(""String_Node_Str"");
        initializeProtocolManager();
      }
      if (ejbDescriptor.isRemoteInterfacesSupported()) {
        isRemote=true;
        hasRemoteHomeView=true;
        String homeClassName=ejbDescriptor.getHomeClassName();
        homeIntf=loader.loadClass(homeClassName);
        remoteIntf=loader.loadClass(ejbDescriptor.getRemoteClassName());
        String id=Long.toString(ejbDescriptor.getUniqueId()) + ""String_Node_Str"";
        remoteHomeRefFactory=getProtocolManager().getRemoteReferenceFactory(this,true,id);
      }
      if (ejbDescriptor.isRemoteBusinessInterfacesSupported()) {
        isRemote=true;
        hasRemoteBusinessView=true;
        remoteBusinessHomeIntf=EJBUtils.loadGeneratedGenericEJBHomeClass(loader);
        for (        String next : ejbDescriptor.getRemoteBusinessClassNames()) {
          EJBUtils.loadGeneratedRemoteBusinessClasses(loader,next);
          String nextGen=EJBUtils.getGeneratedRemoteIntfName(next);
          Class genRemoteIntf=loader.loadClass(nextGen);
          RemoteBusinessIntfInfo info=new RemoteBusinessIntfInfo();
          info.generatedRemoteIntf=genRemoteIntf;
          info.remoteBusinessIntf=loader.loadClass(next);
          String id=Long.toString(ejbDescriptor.getUniqueId()) + ""String_Node_Str"" + ""String_Node_Str""+ genRemoteIntf.getName();
          info.referenceFactory=getProtocolManager().getRemoteReferenceFactory(this,false,id);
          remoteBusinessIntfInfo.put(genRemoteIntf.getName(),info);
          addToGeneratedMonitoredMethodInfo(nextGen,genRemoteIntf);
        }
      }
      if (ejbDescriptor.isLocalInterfacesSupported()) {
        isLocal=true;
        hasLocalHomeView=true;
        String localHomeClassName=ejbDescriptor.getLocalHomeClassName();
        localHomeIntf=loader.loadClass(localHomeClassName);
        localIntf=loader.loadClass(ejbDescriptor.getLocalClassName());
      }
      if (ejbDescriptor.isLocalBusinessInterfacesSupported()) {
        isLocal=true;
        hasLocalBusinessView=true;
        localBusinessHomeIntf=GenericEJBLocalHome.class;
        for (        String next : ejbDescriptor.getLocalBusinessClassNames()) {
          Class clz=loader.loadClass(next);
          localBusinessIntfs.add(clz);
          addToGeneratedMonitoredMethodInfo(next,clz);
        }
      }
      if (ejbDescriptor.isLocalBean()) {
        isLocal=true;
        hasOptionalLocalBusinessView=true;
        ejbOptionalLocalBusinessHomeIntf=GenericEJBLocalHome.class;
        Class clz=loader.loadClass(ejbDescriptor.getEjbClassName());
        addToGeneratedMonitoredMethodInfo(ejbDescriptor.getEjbClassName(),clz);
        this.optIntfClassName=EJBUtils.getGeneratedOptionalInterfaceName(ejbClass.getName());
        optIntfClassLoader=new EjbOptionalIntfGenerator(loader);
        ((EjbOptionalIntfGenerator)optIntfClassLoader).generateOptionalLocalInterface(ejbClass,optIntfClassName);
        ejbGeneratedOptionalLocalBusinessIntfClass=optIntfClassLoader.loadClass(optIntfClassName);
      }
      if (isStatelessSession || isSingleton) {
        EjbBundleDescriptor bundle=ejbDescriptor.getEjbBundleDescriptor();
        WebServicesDescriptor webServices=bundle.getWebServices();
        Collection endpoints=webServices.getEndpointsImplementedBy(ejbDescriptor);
        if (endpoints.size() == 1) {
          assertFullProfile(""String_Node_Str"");
          webServiceEndpointIntf=loader.loadClass(ejbDescriptor.getWebServiceEndpointInterfaceName());
          isWebServiceEndpoint=true;
        }
      }
      try {
        ejbPassivateMethod=ejbClass.getMethod(""String_Node_Str"",NO_PARAMS);
        ejbActivateMethod=ejbClass.getMethod(""String_Node_Str"",NO_PARAMS);
        ejbRemoveMethod=ejbClass.getMethod(""String_Node_Str"",NO_PARAMS);
      }
 catch (      NoSuchMethodException nsme) {
      }
    }
    if (ejbDescriptor.isTimedObject()) {
      assertFullProfile(""String_Node_Str"");
      MethodDescriptor ejbTimeoutMethodDesc=ejbDescriptor.getEjbTimeoutMethod();
      if (ejbTimeoutMethodDesc != null) {
        Method method=ejbTimeoutMethodDesc.getMethod(ejbDescriptor);
        processEjbTimeoutMethod(method);
        ejbTimeoutMethod=method;
      }
      for (      ScheduledTimerDescriptor schd : ejbDescriptor.getScheduledTimerDescriptors()) {
        Method method=schd.getTimeoutMethod().getMethod(ejbDescriptor);
        if (method == null) {
          throw new EJBException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ejbClass.getName(),schd.getTimeoutMethod().getFormattedString()));
        }
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + method);
        }
        processEjbTimeoutMethod(method);
        List<ScheduledTimerDescriptor> list=schedules.get(method);
        if (list == null) {
          list=new ArrayList<ScheduledTimerDescriptor>();
          schedules.put(method,list);
        }
        list.add(schd);
      }
    }
    if (isTimedObject_) {
      if (!isStatefulSession) {
        EJBTimerService timerService=ejbContainerUtilImpl.getEJBTimerService();
        if (timerService != null) {
          timerService.timedObjectCount();
        }
      }
 else {
        isTimedObject_=false;
        throw new EJBException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ejbDescriptor.getName()));
      }
    }
    preInitialize(ejbDesc,loader);
    initializeEjbInterfaceMethods();
    if (needSystemInterceptorProxy()) {
      addSystemInterceptorProxy();
    }
    initializeInvocationInfo();
    setupEnvironment();
  }
 catch (  Exception ex) {
    _logger.log(Level.FINE,""String_Node_Str"",logParams);
    _logger.log(Level.FINE,""String_Node_Str"",ex);
    throw ex;
  }
  _debugDescription=""String_Node_Str"" + ejbDescriptor.getName() + ""String_Node_Str""+ ejbDescriptor.getUniqueId();
  _logger.log(Level.FINE,""String_Node_Str"" + _debugDescription);
}","/** 
 * This constructor is called from ContainerFactoryImpl when an EJB Jar is deployed.
 */
protected BaseContainer(ContainerType type,EjbDescriptor ejbDesc,ClassLoader loader) throws Exception {
  this.containerType=type;
  try {
    this.loader=loader;
    this.ejbDescriptor=ejbDesc;
    logParams=new Object[1];
    logParams[0]=ejbDesc.getName();
    invocationManager=ejbContainerUtilImpl.getInvocationManager();
    injectionManager=ejbContainerUtilImpl.getInjectionManager();
    namingManager=ejbContainerUtilImpl.getGlassfishNamingManager();
    transactionManager=ejbContainerUtilImpl.getTransactionManager();
    ejbClass=loader.loadClass(ejbDescriptor.getEjbImplClassName());
    IASEjbExtraDescriptors iased=ejbDesc.getIASEjbExtraDescriptors();
    cmtTimeoutInSeconds=iased.getCmtTimeoutInSeconds();
    if (ejbDescriptor.getType().equals(EjbMessageBeanDescriptor.TYPE)) {
      assertFullProfile(""String_Node_Str"");
      isMessageDriven=true;
      EjbMessageBeanDescriptor mdb=(EjbMessageBeanDescriptor)ejbDescriptor;
      if (mdb.getTransactionType().equals(""String_Node_Str"")) {
        isBeanManagedTran=true;
      }
 else {
        isBeanManagedTran=false;
      }
      initializeProtocolManager();
    }
 else {
      if (ejbDescriptor.getType().equals(EjbEntityDescriptor.TYPE)) {
        assertFullProfile(""String_Node_Str"");
        isEntity=true;
      }
 else {
        isSession=true;
        EjbSessionDescriptor sd=(EjbSessionDescriptor)ejbDescriptor;
        if (!sd.isSessionTypeSet()) {
          throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",sd.getName(),sd));
        }
        if (sd.isSingleton()) {
          isSingleton=true;
        }
 else {
          isStatelessSession=sd.isStateless();
          isStatefulSession=!isStatelessSession;
          if (isStatefulSession) {
            if (!Serializable.class.isAssignableFrom(ejbClass)) {
              sfsbSerializedClass=EJBUtils.loadGeneratedSerializableClass(ejbClass.getClassLoader(),ejbClass.getName());
            }
          }
        }
        if (sd.getTransactionType().equals(""String_Node_Str"")) {
          isBeanManagedTran=true;
        }
 else {
          isBeanManagedTran=false;
        }
        hasAsynchronousInvocations=sd.hasAsynchronousMethods();
        if (hasAsynchronousInvocations) {
          assertFullProfile(""String_Node_Str"");
        }
      }
      if (ejbDescriptor.isRemoteInterfacesSupported() || ejbDescriptor.isRemoteBusinessInterfacesSupported()) {
        assertFullProfile(""String_Node_Str"");
        initializeProtocolManager();
      }
      if (ejbDescriptor.isRemoteInterfacesSupported()) {
        isRemote=true;
        hasRemoteHomeView=true;
        String homeClassName=ejbDescriptor.getHomeClassName();
        homeIntf=loader.loadClass(homeClassName);
        remoteIntf=loader.loadClass(ejbDescriptor.getRemoteClassName());
        String id=Long.toString(ejbDescriptor.getUniqueId()) + ""String_Node_Str"";
        remoteHomeRefFactory=getProtocolManager().getRemoteReferenceFactory(this,true,id);
      }
      if (ejbDescriptor.isRemoteBusinessInterfacesSupported()) {
        isRemote=true;
        hasRemoteBusinessView=true;
        remoteBusinessHomeIntf=EJBUtils.loadGeneratedGenericEJBHomeClass(loader);
        for (        String next : ejbDescriptor.getRemoteBusinessClassNames()) {
          EJBUtils.loadGeneratedRemoteBusinessClasses(loader,next);
          String nextGen=EJBUtils.getGeneratedRemoteIntfName(next);
          Class genRemoteIntf=loader.loadClass(nextGen);
          RemoteBusinessIntfInfo info=new RemoteBusinessIntfInfo();
          info.generatedRemoteIntf=genRemoteIntf;
          info.remoteBusinessIntf=loader.loadClass(next);
          String id=Long.toString(ejbDescriptor.getUniqueId()) + ""String_Node_Str"" + ""String_Node_Str""+ genRemoteIntf.getName();
          info.referenceFactory=getProtocolManager().getRemoteReferenceFactory(this,false,id);
          remoteBusinessIntfInfo.put(genRemoteIntf.getName(),info);
          addToGeneratedMonitoredMethodInfo(nextGen,genRemoteIntf);
        }
      }
      if (ejbDescriptor.isLocalInterfacesSupported()) {
        isLocal=true;
        hasLocalHomeView=true;
        String localHomeClassName=ejbDescriptor.getLocalHomeClassName();
        localHomeIntf=loader.loadClass(localHomeClassName);
        localIntf=loader.loadClass(ejbDescriptor.getLocalClassName());
      }
      if (ejbDescriptor.isLocalBusinessInterfacesSupported()) {
        isLocal=true;
        hasLocalBusinessView=true;
        localBusinessHomeIntf=GenericEJBLocalHome.class;
        for (        String next : ejbDescriptor.getLocalBusinessClassNames()) {
          Class clz=loader.loadClass(next);
          localBusinessIntfs.add(clz);
          addToGeneratedMonitoredMethodInfo(next,clz);
        }
      }
      if (ejbDescriptor.isLocalBean()) {
        isLocal=true;
        hasOptionalLocalBusinessView=true;
        ejbOptionalLocalBusinessHomeIntf=GenericEJBLocalHome.class;
        Class clz=loader.loadClass(ejbDescriptor.getEjbClassName());
        addToGeneratedMonitoredMethodInfo(ejbDescriptor.getEjbClassName(),clz);
        this.optIntfClassName=EJBUtils.getGeneratedOptionalInterfaceName(ejbClass.getName());
        optIntfClassLoader=new EjbOptionalIntfGenerator(loader);
        ((EjbOptionalIntfGenerator)optIntfClassLoader).generateOptionalLocalInterface(ejbClass,optIntfClassName);
        ejbGeneratedOptionalLocalBusinessIntfClass=optIntfClassLoader.loadClass(optIntfClassName);
      }
      if (isStatelessSession || isSingleton) {
        EjbBundleDescriptor bundle=ejbDescriptor.getEjbBundleDescriptor();
        WebServicesDescriptor webServices=bundle.getWebServices();
        Collection endpoints=webServices.getEndpointsImplementedBy(ejbDescriptor);
        if (endpoints.size() == 1) {
          assertFullProfile(""String_Node_Str"");
          webServiceEndpointIntf=loader.loadClass(ejbDescriptor.getWebServiceEndpointInterfaceName());
          isWebServiceEndpoint=true;
        }
      }
      try {
        ejbPassivateMethod=ejbClass.getMethod(""String_Node_Str"",NO_PARAMS);
        ejbActivateMethod=ejbClass.getMethod(""String_Node_Str"",NO_PARAMS);
        ejbRemoveMethod=ejbClass.getMethod(""String_Node_Str"",NO_PARAMS);
      }
 catch (      NoSuchMethodException nsme) {
      }
    }
    if (ejbDescriptor.isTimedObject()) {
      assertFullProfile(""String_Node_Str"");
      MethodDescriptor ejbTimeoutMethodDesc=ejbDescriptor.getEjbTimeoutMethod();
      if (ejbTimeoutMethodDesc != null) {
        Method method=ejbTimeoutMethodDesc.getMethod(ejbDescriptor);
        processEjbTimeoutMethod(method);
        ejbTimeoutMethod=method;
      }
      for (      ScheduledTimerDescriptor schd : ejbDescriptor.getScheduledTimerDescriptors()) {
        Method method=schd.getTimeoutMethod().getMethod(ejbDescriptor);
        if (method == null) {
          throw new EJBException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ejbClass.getName(),schd.getTimeoutMethod().getFormattedString()));
        }
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + method);
        }
        processEjbTimeoutMethod(method);
        List<ScheduledTimerDescriptor> list=schedules.get(method);
        if (list == null) {
          list=new ArrayList<ScheduledTimerDescriptor>();
          schedules.put(method,list);
        }
        list.add(schd);
      }
    }
    if (isTimedObject_) {
      if (!isStatefulSession) {
        EJBTimerService timerService=ejbContainerUtilImpl.getEJBTimerService();
        if (timerService != null) {
          timerService.timedObjectCount();
        }
      }
 else {
        isTimedObject_=false;
        throw new EJBException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ejbDescriptor.getName()));
      }
    }
    preInitialize(ejbDesc,loader);
    initializeEjbInterfaceMethods();
    if (needSystemInterceptorProxy()) {
      addSystemInterceptorProxy();
    }
    initializeInvocationInfo();
    setupEnvironment();
  }
 catch (  Exception ex) {
    _logger.log(Level.FINE,""String_Node_Str"",logParams);
    _logger.log(Level.FINE,""String_Node_Str"",ex);
    throw ex;
  }
  _debugDescription=""String_Node_Str"" + ejbDescriptor.getName() + ""String_Node_Str""+ ejbDescriptor.getUniqueId();
  _logger.log(Level.FINE,""String_Node_Str"" + _debugDescription);
}"
30098,"/** 
 * Parses static domain.xml of all domains to determine if a node is configured for use.
 * @param host remote host
 * @return true|false
 */
boolean checkIfNodeExistsForHost(String host,String iDir){
  boolean result=false;
  try {
    File domainsDirFile=DomainDirs.getDefaultDomainsDir();
    File[] files=domainsDirFile.listFiles(new FileFilter(){
      public boolean accept(      File f){
        return f.isDirectory();
      }
    }
);
    if (files == null || files.length == 0)     return false;
    for (    File file : files) {
      DomainDirs dir=new DomainDirs(file);
      File domainXMLFile=dir.getServerDirs().getDomainXml();
      logger.finer(""String_Node_Str"" + domainXMLFile);
      try {
        ArrayList<URL> urls=new ArrayList<URL>();
        File idir=new File(System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY));
        File mdir=new File(idir,""String_Node_Str"");
        for (        File f : mdir.listFiles()) {
          if (f.toString().endsWith(""String_Node_Str"")) {
            urls.add(f.toURI().toURL());
          }
        }
        URL[] urlsA=urls.toArray(new URL[0]);
        ClassLoader cl=new URLClassLoader(urlsA,Globals.class.getClassLoader());
        ModulesRegistry registry=new StaticModulesRegistry(cl);
        Habitat habitat=registry.createHabitat(""String_Node_Str"");
        ConfigParser parser=new ConfigParser(habitat);
        URL domainURL=domainXMLFile.toURI().toURL();
        DomDocument doc=parser.parse(domainURL);
        Dom domDomain=doc.getRoot();
        Domain domain=domDomain.createProxy(Domain.class);
        Nodes nodes=domain.getNodes();
        for (        Node node : nodes.getNode()) {
          iDir=removeTrailingSlash(iDir.replaceAll(""String_Node_Str"",""String_Node_Str""));
          String d=removeTrailingSlash(node.getInstallDirUnixStyle());
          if ((NetUtils.isEqual(node.getNodeHost(),host) || NetUtils.isThisHostLocal(host)) && d.equals(iDir)) {
            result=true;
          }
        }
      }
 catch (      Exception e) {
        if (logger.isLoggable(Level.FINE)) {
          e.printStackTrace();
        }
      }
    }
  }
 catch (  IOException ioe) {
    if (logger.isLoggable(Level.FINE)) {
      ioe.printStackTrace();
    }
  }
  return result;
}","/** 
 * Parses static domain.xml of all domains to determine if a node is configured for use.
 * @param host remote host
 * @return true|false
 */
boolean checkIfNodeExistsForHost(String host,String iDir){
  boolean result=false;
  try {
    File domainsDirFile=DomainDirs.getDefaultDomainsDir();
    File[] files=domainsDirFile.listFiles(new FileFilter(){
      public boolean accept(      File f){
        return f.isDirectory();
      }
    }
);
    if (files == null || files.length == 0)     return false;
    for (    File file : files) {
      DomainDirs dir=new DomainDirs(file);
      File domainXMLFile=dir.getServerDirs().getDomainXml();
      logger.finer(""String_Node_Str"" + domainXMLFile);
      try {
        ArrayList<URL> urls=new ArrayList<URL>();
        File idir=new File(System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY));
        File mdir=new File(idir,""String_Node_Str"");
        for (        File f : mdir.listFiles()) {
          if (f.toString().endsWith(""String_Node_Str"")) {
            urls.add(f.toURI().toURL());
          }
        }
        final URL[] urlsA=urls.toArray(new URL[urls.size()]);
        ClassLoader cl=(ClassLoader)AccessController.doPrivileged(new PrivilegedAction(){
          @Override public Object run(){
            return new URLClassLoader(urlsA,Globals.class.getClassLoader());
          }
        }
);
        ModulesRegistry registry=new StaticModulesRegistry(cl);
        Habitat habitat=registry.createHabitat(""String_Node_Str"");
        ConfigParser parser=new ConfigParser(habitat);
        URL domainURL=domainXMLFile.toURI().toURL();
        DomDocument doc=parser.parse(domainURL);
        Dom domDomain=doc.getRoot();
        Domain domain=domDomain.createProxy(Domain.class);
        Nodes nodes=domain.getNodes();
        for (        Node node : nodes.getNode()) {
          iDir=removeTrailingSlash(iDir.replaceAll(""String_Node_Str"",""String_Node_Str""));
          String d=removeTrailingSlash(node.getInstallDirUnixStyle());
          if ((NetUtils.isEqual(node.getNodeHost(),host) || NetUtils.isThisHostLocal(host)) && d.equals(iDir)) {
            result=true;
          }
        }
      }
 catch (      Exception e) {
        if (logger.isLoggable(Level.FINE)) {
          e.printStackTrace();
        }
      }
    }
  }
 catch (  IOException ioe) {
    if (logger.isLoggable(Level.FINE)) {
      ioe.printStackTrace();
    }
  }
  return result;
}"
30099,"private void doService(final org.glassfish.grizzly.http.server.Request req,final Request request,final org.glassfish.grizzly.http.server.Response res,final Response response,final boolean v3Enabled) throws Exception {
  if (!connector.isEnabled()) {
    String msg=sm.getString(""String_Node_Str"",String.valueOf(connector.getPort()));
    if (log.isLoggable(Level.FINE)) {
      log.fine(msg);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND,msg);
    return;
  }
  if (connector.isXpoweredBy()) {
    response.addHeader(""String_Node_Str"",POWERED_BY);
  }
  if (postParseRequest(req,request,res,response,v3Enabled)) {
    boolean authPassthroughEnabled=connector.getAuthPassthroughEnabled();
    ProxyHandler proxyHandler=connector.getProxyHandler();
    if (authPassthroughEnabled && proxyHandler != null) {
      if (proxyHandler.getSSLKeysize((HttpServletRequest)request.getRequest()) > 0) {
        request.setSecure(true);
      }
      X509Certificate[] certs=null;
      try {
        certs=proxyHandler.getSSLClientCertificateChain(request.getRequest());
      }
 catch (      CertificateException ce) {
        log.log(Level.SEVERE,sm.getString(""String_Node_Str""),ce);
      }
      if (certs != null) {
        request.setAttribute(Globals.CERTIFICATES_ATTR,certs);
      }
    }
    if (serverName != null && !serverName.isEmpty()) {
      response.addHeader(""String_Node_Str"",serverName);
    }
    connector.requestStartEvent(request.getRequest(),request.getHost(),request.getContext());
    Container container=connector.getContainer();
    try {
      if (container.getPipeline().hasNonBasicValves() || container.hasCustomPipeline()) {
        container.getPipeline().invoke(request,response);
      }
 else {
        Host host=request.getHost();
        if (host == null) {
          response.sendError(HttpServletResponse.SC_BAD_REQUEST);
          response.setDetailMessage(sm.getString(""String_Node_Str"",request.getRequest().getServerName()));
          return;
        }
        if (host.getPipeline().hasNonBasicValves() || host.hasCustomPipeline()) {
          host.getPipeline().invoke(request,response);
        }
 else {
          GlassFishValve hostValve=host.getPipeline().getBasic();
          hostValve.invoke(request,response);
          hostValve.postInvoke(request,response);
        }
      }
    }
  finally {
      connector.requestEndEvent(request.getRequest(),request.getHost(),request.getContext(),response.getStatus());
    }
  }
}","private void doService(final org.glassfish.grizzly.http.server.Request req,final Request request,final org.glassfish.grizzly.http.server.Response res,final Response response,final boolean v3Enabled) throws Exception {
  if (!connector.isEnabled()) {
    String msg=sm.getString(""String_Node_Str"",String.valueOf(connector.getPort()));
    if (log.isLoggable(Level.FINE)) {
      log.fine(msg);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND,msg);
    return;
  }
  if (connector.isXpoweredBy()) {
    response.addHeader(""String_Node_Str"",POWERED_BY);
  }
  if (postParseRequest(req,request,res,response,v3Enabled)) {
    boolean authPassthroughEnabled=connector.getAuthPassthroughEnabled();
    ProxyHandler proxyHandler=connector.getProxyHandler();
    if (authPassthroughEnabled && proxyHandler != null) {
      if (proxyHandler.getSSLKeysize((HttpServletRequest)request.getRequest()) > 0) {
        request.setSecure(true);
      }
      X509Certificate[] certs=null;
      try {
        certs=proxyHandler.getSSLClientCertificateChain(request.getRequest());
      }
 catch (      CertificateException ce) {
        log.log(Level.SEVERE,sm.getString(""String_Node_Str""),ce);
      }
      if (certs != null) {
        request.setAttribute(Globals.CERTIFICATES_ATTR,certs);
      }
    }
    if (serverName != null && !serverName.isEmpty()) {
      response.addHeader(""String_Node_Str"",serverName);
    }
    connector.requestStartEvent(request.getRequest(),request.getHost(),request.getContext());
    Container container=connector.getContainer();
    try {
      request.lockSession();
      if (container.getPipeline().hasNonBasicValves() || container.hasCustomPipeline()) {
        container.getPipeline().invoke(request,response);
      }
 else {
        Host host=request.getHost();
        if (host == null) {
          response.sendError(HttpServletResponse.SC_BAD_REQUEST);
          response.setDetailMessage(sm.getString(""String_Node_Str"",request.getRequest().getServerName()));
          return;
        }
        if (host.getPipeline().hasNonBasicValves() || host.hasCustomPipeline()) {
          host.getPipeline().invoke(request,response);
        }
 else {
          GlassFishValve hostValve=host.getPipeline().getBasic();
          hostValve.invoke(request,response);
          hostValve.postInvoke(request,response);
        }
      }
    }
  finally {
      try {
        connector.requestEndEvent(request.getRequest(),request.getHost(),request.getContext(),response.getStatus());
      }
  finally {
        request.unlockSession();
      }
    }
  }
}"
30100,"/** 
 * Handle an HTTP status code or Java exception by forwarding control to the location included in the specified errorPage object.  It is assumed that the caller has already recorded any request attributes that are to be forwarded to this page.  Return <code>true</code> if we successfully utilized the specified error page location, or <code>false</code> if the default error report should be rendered.
 * @param request The request being processed
 * @param response The response being generated
 * @param errorPage The errorPage directive we are obeying
 */
protected boolean custom(Request request,Response response,ErrorPage errorPage){
  if (debug >= 1)   log(""String_Node_Str"" + errorPage);
  HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
  HttpServletResponse hres=(HttpServletResponse)response.getResponse();
  ((HttpRequest)request).setPathInfo(errorPage.getLocation());
  try {
    Integer statusCodeObj=(Integer)hreq.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);
    int statusCode=statusCodeObj.intValue();
    String message=(String)hreq.getAttribute(RequestDispatcher.ERROR_MESSAGE);
    hres.setStatus(statusCode,message);
    request.lockSession();
    ServletContext servletContext=request.getContext().getServletContext();
    ApplicationDispatcher dispatcher=(ApplicationDispatcher)servletContext.getRequestDispatcher(errorPage.getLocation());
    if (hres.isCommitted()) {
      dispatcher.include(hreq,hres);
    }
 else {
      response.resetBuffer(true);
      dispatcher.dispatch(hreq,hres,DispatcherType.ERROR);
      response.setSuspended(false);
    }
    return (true);
  }
 catch (  Throwable t) {
    log(""String_Node_Str"" + errorPage,t);
    return (false);
  }
 finally {
    request.unlockSession();
  }
}","/** 
 * Handle an HTTP status code or Java exception by forwarding control to the location included in the specified errorPage object.  It is assumed that the caller has already recorded any request attributes that are to be forwarded to this page.  Return <code>true</code> if we successfully utilized the specified error page location, or <code>false</code> if the default error report should be rendered.
 * @param request The request being processed
 * @param response The response being generated
 * @param errorPage The errorPage directive we are obeying
 */
protected boolean custom(Request request,Response response,ErrorPage errorPage){
  if (debug >= 1)   log(""String_Node_Str"" + errorPage);
  HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
  HttpServletResponse hres=(HttpServletResponse)response.getResponse();
  ((HttpRequest)request).setPathInfo(errorPage.getLocation());
  try {
    Integer statusCodeObj=(Integer)hreq.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);
    int statusCode=statusCodeObj.intValue();
    String message=(String)hreq.getAttribute(RequestDispatcher.ERROR_MESSAGE);
    hres.setStatus(statusCode,message);
    ServletContext servletContext=request.getContext().getServletContext();
    ApplicationDispatcher dispatcher=(ApplicationDispatcher)servletContext.getRequestDispatcher(errorPage.getLocation());
    if (hres.isCommitted()) {
      dispatcher.include(hreq,hres);
    }
 else {
      response.resetBuffer(true);
      dispatcher.dispatch(hreq,hres,DispatcherType.ERROR);
      response.setSuspended(false);
    }
    return (true);
  }
 catch (  Throwable t) {
    log(""String_Node_Str"" + errorPage,t);
    return (false);
  }
}"
30101,"private void handleError(Request request,Response response,int statusCode) throws IOException {
  ServletRequest sreq=request.getRequest();
  ServletResponse sres=response.getResponse();
  HttpServletResponse hres=(HttpServletResponse)sres;
  ErrorPage errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
  if (errorPage != null) {
    try {
      request.lockSession();
      hres.setStatus(statusCode);
      ServletContext servletContext=request.getContext().getServletContext();
      ApplicationDispatcher dispatcher=(ApplicationDispatcher)servletContext.getRequestDispatcher(errorPage.getLocation());
      if (hres.isCommitted()) {
        dispatcher.include(sreq,sres);
      }
 else {
        response.resetBuffer(true);
        dispatcher.dispatch(sreq,sres,DispatcherType.ERROR);
        response.setSuspended(false);
      }
      sres.flushBuffer();
    }
 catch (    Throwable t) {
      if (log.isLoggable(Level.INFO)) {
        String message=sm.getString(""String_Node_Str"",errorPage.getLocation());
        log.log(Level.INFO,message,t);
      }
    }
 finally {
      request.unlockSession();
    }
  }
 else {
    hres.sendError(statusCode);
  }
}","private void handleError(Request request,Response response,int statusCode) throws IOException {
  ServletRequest sreq=request.getRequest();
  ServletResponse sres=response.getResponse();
  HttpServletResponse hres=(HttpServletResponse)sres;
  ErrorPage errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
  if (errorPage != null) {
    try {
      hres.setStatus(statusCode);
      ServletContext servletContext=request.getContext().getServletContext();
      ApplicationDispatcher dispatcher=(ApplicationDispatcher)servletContext.getRequestDispatcher(errorPage.getLocation());
      if (hres.isCommitted()) {
        dispatcher.include(sreq,sres);
      }
 else {
        response.resetBuffer(true);
        dispatcher.dispatch(sreq,sres,DispatcherType.ERROR);
        response.setSuspended(false);
      }
      sres.flushBuffer();
    }
 catch (    Throwable t) {
      if (log.isLoggable(Level.INFO)) {
        String message=sm.getString(""String_Node_Str"",errorPage.getLocation());
        log.log(Level.INFO,message,t);
      }
    }
  }
 else {
    hres.sendError(statusCode);
  }
}"
30102,"private void getHealthWithGMS(){
  StringBuilder result=new StringBuilder();
  HealthHistory history=gmsAdapter.getHealthHistory();
  if (history == null) {
    setFail(Strings.get(""String_Node_Str""));
    return;
  }
  if (history.getInstances().isEmpty()) {
    report.setMessage(Strings.get(""String_Node_Str"",clusterName));
    return;
  }
  ActionReport.MessagePart top=report.getTopMessagePart();
  SortedSet<String> names=new TreeSet<String>(history.getInstances());
  for (  String name : names) {
    HealthHistory.InstanceHealth ih=history.getHealthByInstance(name);
    if (HealthHistory.NOTIME == ih.time) {
      result.append(Strings.get(""String_Node_Str"",name,ih.state));
      top.addProperty(name,ih.state.toString());
    }
 else {
      String status=Strings.get(""String_Node_Str"",name,ih.state,new Date(ih.time).toString());
      result.append(status);
      top.addProperty(name,status.substring(name.length(),status.length() - 1).trim());
    }
    result.append(""String_Node_Str"");
  }
  String rawResult=result.toString();
  report.setMessage(rawResult.substring(0,rawResult.lastIndexOf(""String_Node_Str"")));
}","private void getHealthWithGMS(){
  StringBuilder result=new StringBuilder();
  HealthHistory history=gmsAdapter.getHealthHistory();
  if (history == null) {
    setFail(Strings.get(""String_Node_Str""));
    return;
  }
  if (history.getInstances().isEmpty()) {
    report.setMessage(Strings.get(""String_Node_Str"",clusterName));
    return;
  }
  SortedSet<String> names=new TreeSet<String>(history.getInstances());
  List<Properties> statesAndTimes=new ArrayList<Properties>(names.size());
  for (  String name : names) {
    Properties instanceStateAndTime=new Properties();
    HealthHistory.InstanceHealth ih=history.getHealthByInstance(name);
    instanceStateAndTime.put(""String_Node_Str"",name);
    instanceStateAndTime.put(""String_Node_Str"",ih.state.name());
    if (HealthHistory.NOTIME == ih.time) {
      result.append(Strings.get(""String_Node_Str"",name,ih.state));
      instanceStateAndTime.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      result.append(Strings.get(""String_Node_Str"",name,ih.state,new Date(ih.time).toString()));
      instanceStateAndTime.put(""String_Node_Str"",String.valueOf(ih.time));
    }
    result.append(""String_Node_Str"");
    statesAndTimes.add(instanceStateAndTime);
  }
  Properties instanceStateTimes=new Properties();
  instanceStateTimes.put(""String_Node_Str"",statesAndTimes);
  report.setExtraProperties(instanceStateTimes);
  String rawResult=result.toString();
  report.setMessage(rawResult.substring(0,rawResult.lastIndexOf(""String_Node_Str"")));
}"
30103,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  Target targetUtil=habitat.getComponent(Target.class);
  Config newConfig=targetUtil.getConfig(target);
  if (newConfig != null) {
    config=newConfig;
  }
  if (!type.equals(""String_Node_Str"")) {
    if (listenerId == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  try {
    SslConfigHandler sslConfigHandler=habitat.getComponent(SslConfigHandler.class,type);
    if (sslConfigHandler != null) {
      sslConfigHandler.delete(this,report);
    }
 else     if (""String_Node_Str"".equals(type)) {
      JmxConnector jmxConnector=null;
      for (      JmxConnector listener : config.getAdminService().getJmxConnector()) {
        if (listener.getName().equals(listenerId)) {
          jmxConnector=listener;
        }
      }
      if (jmxConnector == null) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",listenerId));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
      if (jmxConnector.getSsl() == null) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",listenerId));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
      ConfigSupport.apply(new SingleConfigCode<JmxConnector>(){
        public Object run(        JmxConnector param) throws PropertyVetoException {
          param.setSsl(null);
          return null;
        }
      }
,jmxConnector);
    }
  }
 catch (  TransactionFailure e) {
    reportError(report,e);
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the parameter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  Target targetUtil=habitat.getComponent(Target.class);
  Config newConfig=targetUtil.getConfig(target);
  if (newConfig != null) {
    config=newConfig;
  }
  if (!type.equals(""String_Node_Str"")) {
    if (listenerId == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  try {
    SslConfigHandler sslConfigHandler=habitat.getComponent(SslConfigHandler.class,type);
    if (sslConfigHandler != null) {
      sslConfigHandler.delete(this,report);
    }
 else     if (""String_Node_Str"".equals(type)) {
      JmxConnector jmxConnector=null;
      for (      JmxConnector listener : config.getAdminService().getJmxConnector()) {
        if (listener.getName().equals(listenerId)) {
          jmxConnector=listener;
        }
      }
      if (jmxConnector == null) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",listenerId));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
      if (jmxConnector.getSsl() == null) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",listenerId));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
      ConfigSupport.apply(new SingleConfigCode<JmxConnector>(){
        public Object run(        JmxConnector param) throws PropertyVetoException {
          param.setSsl(null);
          return null;
        }
      }
,jmxConnector);
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    }
  }
 catch (  TransactionFailure e) {
    reportError(report,e);
  }
}"
30104,"public void transactionCommited(final List<PropertyChangeEvent> changes){
  for (  PropertyChangeEvent event : changes) {
    if (event.getSource() instanceof Application || event.getSource() instanceof ApplicationRef) {
      Object oldValue=event.getOldValue();
      Object newValue=event.getNewValue();
      if (oldValue != null && newValue != null && oldValue instanceof String && newValue instanceof String && !((String)oldValue).equals((String)newValue)) {
        Object parent=event.getSource();
        String appName=null;
        if (parent instanceof Application) {
          appName=((Application)parent).getName();
        }
 else         if (parent instanceof ApplicationRef) {
          appName=((ApplicationRef)parent).getRef();
        }
        if (applications.getApplication(appName) == null) {
          return;
        }
        if (event.getPropertyName().equals(ServerTags.ENABLED)) {
          handleAppEnableChange(event.getSource(),appName,Boolean.valueOf((String)newValue));
        }
 else         if (event.getPropertyName().equals(ServerTags.CONTEXT_ROOT) || event.getPropertyName().equals(ServerTags.VIRTUAL_SERVERS) || event.getPropertyName().equals(ServerTags.AVAILABILITY_ENABLED)) {
          handleOtherAppConfigChanges(event.getSource(),appName);
        }
      }
    }
  }
}","public void transactionCommited(final List<PropertyChangeEvent> changes){
  boolean isUpdatingAttribute=true;
  for (  PropertyChangeEvent event : changes) {
    Object oldValue=event.getOldValue();
    Object newValue=event.getNewValue();
    if (event.getSource() instanceof Applications) {
      if (event.getPropertyName().equals(ServerTags.APPLICATION)) {
        if (oldValue == null || newValue == null) {
          isUpdatingAttribute=false;
          break;
        }
      }
    }
 else     if (event.getSource() instanceof Server || event.getSource() instanceof Cluster) {
      if (event.getPropertyName().equals(ServerTags.APPLICATION_REF)) {
        if (oldValue == null || newValue == null) {
          isUpdatingAttribute=false;
          break;
        }
      }
    }
  }
  if (!isUpdatingAttribute) {
    return;
  }
  for (  PropertyChangeEvent event : changes) {
    if (event.getSource() instanceof Application || event.getSource() instanceof ApplicationRef) {
      Object oldValue=event.getOldValue();
      Object newValue=event.getNewValue();
      if (oldValue != null && newValue != null && oldValue instanceof String && newValue instanceof String && !((String)oldValue).equals((String)newValue)) {
        Object parent=event.getSource();
        String appName=null;
        if (parent instanceof Application) {
          appName=((Application)parent).getName();
        }
 else         if (parent instanceof ApplicationRef) {
          appName=((ApplicationRef)parent).getRef();
        }
        if (applications.getApplication(appName) == null) {
          return;
        }
        if (event.getPropertyName().equals(ServerTags.ENABLED)) {
          handleAppEnableChange(event.getSource(),appName,Boolean.valueOf((String)newValue));
        }
 else         if (event.getPropertyName().equals(ServerTags.CONTEXT_ROOT) || event.getPropertyName().equals(ServerTags.VIRTUAL_SERVERS) || event.getPropertyName().equals(ServerTags.AVAILABILITY_ENABLED)) {
          handleOtherAppConfigChanges(event.getSource(),appName);
        }
      }
    }
  }
}"
30105,"/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
@Override public void execute(AdminCommandContext context){
  events.register(this);
  final DeployCommandSupplementalInfo suppInfo=new DeployCommandSupplementalInfo();
  context.getActionReport().setResultType(DeployCommandSupplementalInfo.class,suppInfo);
  try {
    DeploymentTracing timing=new DeploymentTracing();
    DeploymentTracing tracing=null;
    if (System.getProperty(""String_Node_Str"") != null) {
      tracing=new DeploymentTracing();
    }
    final ActionReport report=context.getActionReport();
    final Logger logger=context.getLogger();
    originalPathValue=path;
    if (!path.exists()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getAbsolutePath()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    if (snifferManager.hasNoSniffers()) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      report.failure(logger,msg);
      return;
    }
    ReadableArchive archive;
    try {
      archive=archiveFactory.openArchive(path,this);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.ARCHIVE_OPENED);
      }
    }
 catch (    IOException e) {
      final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getAbsolutePath());
      if (logReportedErrors) {
        report.failure(logger,msg,e);
      }
 else {
        report.setMessage(msg + path.getAbsolutePath() + e.toString());
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
      return;
    }
    File expansionDir=null;
    ExtendedDeploymentContext deploymentContext=null;
    try {
      deployment.validateSpecifiedTarget(target);
      ArchiveHandler archiveHandler=deployment.getArchiveHandler(archive,type);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
      }
      if (archiveHandler == null) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getName()));
        return;
      }
      ExtendedDeploymentContext initialContext=new DeploymentContextImpl(report,logger,archive,this,env);
      if (tracing != null) {
        initialContext.addModuleMetaData(tracing);
        tracing.addMark(DeploymentTracing.Mark.INITIAL_CONTEXT_CREATED);
      }
      if (name == null) {
        name=archiveHandler.getDefaultApplicationName(archive,initialContext);
      }
 else {
        DeploymentUtils.validateApplicationName(name);
      }
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.APPNAME_DETERMINED);
      }
      boolean isUntagged=VersioningUtils.isUntagged(name);
      if (name != null && !isUntagged && type != null && type.equals(""String_Node_Str"")) {
        ActionReport.MessagePart msgPart=context.getActionReport().getTopMessagePart();
        msgPart.setChildrenType(""String_Node_Str"");
        ActionReport.MessagePart childPart=msgPart.addChild();
        childPart.setMessage(VersioningUtils.LOCALSTRINGS.getLocalString(""String_Node_Str"",""String_Node_Str""));
        name=VersioningUtils.getUntaggedName(name);
      }
      if (isUntagged) {
        String versionIdentifier=archiveHandler.getVersionIdentifier(archive);
        if (versionIdentifier != null && !versionIdentifier.isEmpty()) {
          StringBuilder sb=new StringBuilder(name).append(VersioningUtils.EXPRESSION_SEPARATOR).append(versionIdentifier);
          name=sb.toString();
        }
      }
      if (target == null) {
        target=deployment.getDefaultTarget(name,origin);
      }
      Collection<Interceptor> interceptors=habitat.getAllByContract(""String_Node_Str"");
      if (interceptors != null) {
        for (        Interceptor interceptor : interceptors) {
          interceptor.intercept(this,initialContext);
        }
      }
      boolean isRegistered=deployment.isRegistered(name);
      isredeploy=isRegistered && force;
      deployment.validateDeploymentTarget(target,name,isredeploy);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.TARGET_VALIDATED);
      }
      ActionReport.MessagePart part=report.getTopMessagePart();
      part.addProperty(DeploymentProperties.NAME,name);
      ApplicationConfigInfo savedAppConfig=new ApplicationConfigInfo(apps.getModule(Application.class,name));
      Properties undeployProps=handleRedeploy(name,report);
      if (enabled == null) {
        enabled=Boolean.TRUE;
      }
      if (!keepreposdir.booleanValue()) {
        final File reposDir=new File(env.getApplicationRepositoryPath(),VersioningUtils.getRepositoryName(name));
        if (reposDir.exists()) {
          final FileArchive arch=DeploymentUtils.openAsFileArchive(reposDir,archiveFactory);
          arch.delete();
        }
      }
      if (!DeploymentUtils.isDomainTarget(target) && enabled) {
        try {
          versioningService.handleDisable(name,target,report);
        }
 catch (        VersioningSyntaxException e) {
          report.failure(logger,e.getMessage());
          return;
        }
      }
      File source=new File(archive.getURI().getSchemeSpecificPart());
      boolean isDirectoryDeployed=true;
      if (!source.isDirectory()) {
        isDirectoryDeployed=false;
        expansionDir=new File(domain.getApplicationRoot(),name);
        path=expansionDir;
      }
 else {
        String versionFromSameDir=versioningService.getVersionFromSameDir(source);
        if (!force && versionFromSameDir != null) {
          report.failure(logger,VersioningUtils.LOCALSTRINGS.getLocalString(""String_Node_Str"",""String_Node_Str"",source.getPath(),versionFromSameDir));
          return;
        }
      }
      deploymentContext=deployment.getBuilder(logger,this,report).source(archive).archiveHandler(archiveHandler).build(initialContext);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTEXT_CREATED);
        deploymentContext.addModuleMetaData(tracing);
      }
      if (undeployProps != null) {
        deploymentContext.getAppProps().putAll(undeployProps);
      }
      if (properties != null || property != null) {
        if (properties == null) {
          properties=new Properties();
        }
        if (property != null) {
          properties.putAll(property);
        }
      }
      if (properties != null) {
        deploymentContext.getAppProps().putAll(properties);
        validateDeploymentProperties(properties,deploymentContext);
      }
      deploymentContext.clean();
      Properties appProps=deploymentContext.getAppProps();
      String appLocation=DeploymentUtils.relativizeWithinDomainIfPossible(deploymentContext.getSource().getURI());
      appProps.setProperty(ServerTags.LOCATION,appLocation);
      appProps.setProperty(ServerTags.OBJECT_TYPE,""String_Node_Str"");
      if (contextroot != null) {
        appProps.setProperty(ServerTags.CONTEXT_ROOT,contextroot);
      }
      appProps.setProperty(ServerTags.DIRECTORY_DEPLOYED,String.valueOf(isDirectoryDeployed));
      savedAppConfig.store(appProps);
      deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_TARGETS,previousTargets);
      deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_VIRTUAL_SERVERS,previousVirtualServers);
      deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_ENABLED_ATTRIBUTES,previousEnabledAttributes);
      Transaction t=deployment.prepareAppConfigChanges(deploymentContext);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.DEPLOY);
      }
      ApplicationInfo appInfo;
      if (type == null) {
        appInfo=deployment.deploy(deploymentContext);
      }
 else {
        appInfo=deployment.deploy(deployment.prepareSniffersForOSGiDeployment(type,deploymentContext),deploymentContext);
      }
      final Artifacts downloadableArtifacts=DeploymentUtils.downloadableArtifacts(deploymentContext);
      final Artifacts generatedArtifacts=DeploymentUtils.generatedArtifacts(deploymentContext);
      if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
        try {
          moveAppFilesToPermanentLocation(deploymentContext,logger);
          recordFileLocations(appProps);
          downloadableArtifacts.record(appProps);
          generatedArtifacts.record(appProps);
          deployment.registerAppInDomainXML(appInfo,deploymentContext,t);
          suppInfo.setDeploymentContext(deploymentContext);
          ActionReport.ExitCode worstExitCode=ExitCode.SUCCESS;
          for (          ActionReport subReport : report.getSubActionsReport()) {
            ActionReport.ExitCode actionExitCode=subReport.getActionExitCode();
            if (actionExitCode.isWorse(worstExitCode)) {
              worstExitCode=actionExitCode;
            }
          }
          report.setActionExitCode(worstExitCode);
          report.setResultType(String.class,name);
        }
 catch (        Exception e) {
          deployment.undeploy(name,deploymentContext);
          deploymentContext.clean();
          throw e;
        }
      }
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.REGISTRATION);
      }
      if (retrieve != null) {
        retrieveArtifacts(context,downloadableArtifacts.getArtifacts(),retrieve,false);
      }
    }
 catch (    Throwable e) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(e.getMessage());
      report.setFailureCause(e);
    }
 finally {
      try {
        archive.close();
      }
 catch (      IOException e) {
        logger.log(Level.FINE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getAbsolutePath()),e);
      }
      if (tracing != null) {
        tracing.print(System.out);
        TracingUtilities.dump(""String_Node_Str"",System.out);
      }
      if (report.getActionExitCode().equals(ActionReport.ExitCode.SUCCESS)) {
        report.setResultType(String.class,name);
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name));
        logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,timing.elapsed()));
      }
 else       if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
        String errorMessage=report.getMessage();
        Throwable cause=report.getFailureCause();
        if (cause != null) {
          String causeMessage=cause.getMessage();
          if (causeMessage != null && !causeMessage.equals(errorMessage)) {
            errorMessage=errorMessage + ""String_Node_Str"" + cause.getMessage();
          }
          logger.log(Level.SEVERE,errorMessage,cause.getCause());
        }
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",errorMessage));
        report.setFailureCause(null);
        if (expansionDir != null) {
          final FileArchive arch;
          try {
            arch=DeploymentUtils.openAsFileArchive(expansionDir,archiveFactory);
            arch.delete();
          }
 catch (          IOException ex) {
            final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",expansionDir.getAbsolutePath());
            report.failure(logger,msg,ex);
          }
        }
      }
      if (deploymentContext != null) {
        deploymentContext.postDeployClean(true);
      }
    }
  }
  finally {
    events.unregister(this);
  }
}","/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
@Override public void execute(AdminCommandContext context){
  events.register(this);
  final DeployCommandSupplementalInfo suppInfo=new DeployCommandSupplementalInfo();
  context.getActionReport().setResultType(DeployCommandSupplementalInfo.class,suppInfo);
  try {
    DeploymentTracing timing=new DeploymentTracing();
    DeploymentTracing tracing=null;
    if (System.getProperty(""String_Node_Str"") != null) {
      tracing=new DeploymentTracing();
    }
    final ActionReport report=context.getActionReport();
    final Logger logger=context.getLogger();
    originalPathValue=path;
    if (!path.exists()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getAbsolutePath()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    if (!path.canRead()) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getAbsolutePath()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    if (snifferManager.hasNoSniffers()) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      report.failure(logger,msg);
      return;
    }
    ReadableArchive archive;
    try {
      archive=archiveFactory.openArchive(path,this);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.ARCHIVE_OPENED);
      }
    }
 catch (    IOException e) {
      final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getAbsolutePath());
      if (logReportedErrors) {
        report.failure(logger,msg,e);
      }
 else {
        report.setMessage(msg + path.getAbsolutePath() + e.toString());
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
      return;
    }
    File expansionDir=null;
    ExtendedDeploymentContext deploymentContext=null;
    try {
      deployment.validateSpecifiedTarget(target);
      ArchiveHandler archiveHandler=deployment.getArchiveHandler(archive,type);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
      }
      if (archiveHandler == null) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getName()));
        return;
      }
      ExtendedDeploymentContext initialContext=new DeploymentContextImpl(report,logger,archive,this,env);
      if (tracing != null) {
        initialContext.addModuleMetaData(tracing);
        tracing.addMark(DeploymentTracing.Mark.INITIAL_CONTEXT_CREATED);
      }
      if (name == null) {
        name=archiveHandler.getDefaultApplicationName(archive,initialContext);
      }
 else {
        DeploymentUtils.validateApplicationName(name);
      }
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.APPNAME_DETERMINED);
      }
      boolean isUntagged=VersioningUtils.isUntagged(name);
      if (name != null && !isUntagged && type != null && type.equals(""String_Node_Str"")) {
        ActionReport.MessagePart msgPart=context.getActionReport().getTopMessagePart();
        msgPart.setChildrenType(""String_Node_Str"");
        ActionReport.MessagePart childPart=msgPart.addChild();
        childPart.setMessage(VersioningUtils.LOCALSTRINGS.getLocalString(""String_Node_Str"",""String_Node_Str""));
        name=VersioningUtils.getUntaggedName(name);
      }
      if (isUntagged) {
        String versionIdentifier=archiveHandler.getVersionIdentifier(archive);
        if (versionIdentifier != null && !versionIdentifier.isEmpty()) {
          StringBuilder sb=new StringBuilder(name).append(VersioningUtils.EXPRESSION_SEPARATOR).append(versionIdentifier);
          name=sb.toString();
        }
      }
      if (target == null) {
        target=deployment.getDefaultTarget(name,origin);
      }
      Collection<Interceptor> interceptors=habitat.getAllByContract(""String_Node_Str"");
      if (interceptors != null) {
        for (        Interceptor interceptor : interceptors) {
          interceptor.intercept(this,initialContext);
        }
      }
      boolean isRegistered=deployment.isRegistered(name);
      isredeploy=isRegistered && force;
      deployment.validateDeploymentTarget(target,name,isredeploy);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.TARGET_VALIDATED);
      }
      ActionReport.MessagePart part=report.getTopMessagePart();
      part.addProperty(DeploymentProperties.NAME,name);
      ApplicationConfigInfo savedAppConfig=new ApplicationConfigInfo(apps.getModule(Application.class,name));
      Properties undeployProps=handleRedeploy(name,report);
      if (enabled == null) {
        enabled=Boolean.TRUE;
      }
      if (!keepreposdir.booleanValue()) {
        final File reposDir=new File(env.getApplicationRepositoryPath(),VersioningUtils.getRepositoryName(name));
        if (reposDir.exists()) {
          final FileArchive arch=DeploymentUtils.openAsFileArchive(reposDir,archiveFactory);
          arch.delete();
        }
      }
      if (!DeploymentUtils.isDomainTarget(target) && enabled) {
        try {
          versioningService.handleDisable(name,target,report);
        }
 catch (        VersioningSyntaxException e) {
          report.failure(logger,e.getMessage());
          return;
        }
      }
      File source=new File(archive.getURI().getSchemeSpecificPart());
      boolean isDirectoryDeployed=true;
      if (!source.isDirectory()) {
        isDirectoryDeployed=false;
        expansionDir=new File(domain.getApplicationRoot(),name);
        path=expansionDir;
      }
 else {
        String versionFromSameDir=versioningService.getVersionFromSameDir(source);
        if (!force && versionFromSameDir != null) {
          report.failure(logger,VersioningUtils.LOCALSTRINGS.getLocalString(""String_Node_Str"",""String_Node_Str"",source.getPath(),versionFromSameDir));
          return;
        }
      }
      deploymentContext=deployment.getBuilder(logger,this,report).source(archive).archiveHandler(archiveHandler).build(initialContext);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTEXT_CREATED);
        deploymentContext.addModuleMetaData(tracing);
      }
      if (undeployProps != null) {
        deploymentContext.getAppProps().putAll(undeployProps);
      }
      if (properties != null || property != null) {
        if (properties == null) {
          properties=new Properties();
        }
        if (property != null) {
          properties.putAll(property);
        }
      }
      if (properties != null) {
        deploymentContext.getAppProps().putAll(properties);
        validateDeploymentProperties(properties,deploymentContext);
      }
      deploymentContext.clean();
      Properties appProps=deploymentContext.getAppProps();
      String appLocation=DeploymentUtils.relativizeWithinDomainIfPossible(deploymentContext.getSource().getURI());
      appProps.setProperty(ServerTags.LOCATION,appLocation);
      appProps.setProperty(ServerTags.OBJECT_TYPE,""String_Node_Str"");
      if (contextroot != null) {
        appProps.setProperty(ServerTags.CONTEXT_ROOT,contextroot);
      }
      appProps.setProperty(ServerTags.DIRECTORY_DEPLOYED,String.valueOf(isDirectoryDeployed));
      savedAppConfig.store(appProps);
      deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_TARGETS,previousTargets);
      deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_VIRTUAL_SERVERS,previousVirtualServers);
      deploymentContext.addTransientAppMetaData(DeploymentProperties.PREVIOUS_ENABLED_ATTRIBUTES,previousEnabledAttributes);
      Transaction t=deployment.prepareAppConfigChanges(deploymentContext);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.DEPLOY);
      }
      ApplicationInfo appInfo;
      if (type == null) {
        appInfo=deployment.deploy(deploymentContext);
      }
 else {
        appInfo=deployment.deploy(deployment.prepareSniffersForOSGiDeployment(type,deploymentContext),deploymentContext);
      }
      final Artifacts downloadableArtifacts=DeploymentUtils.downloadableArtifacts(deploymentContext);
      final Artifacts generatedArtifacts=DeploymentUtils.generatedArtifacts(deploymentContext);
      if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
        try {
          moveAppFilesToPermanentLocation(deploymentContext,logger);
          recordFileLocations(appProps);
          downloadableArtifacts.record(appProps);
          generatedArtifacts.record(appProps);
          deployment.registerAppInDomainXML(appInfo,deploymentContext,t);
          suppInfo.setDeploymentContext(deploymentContext);
          ActionReport.ExitCode worstExitCode=ExitCode.SUCCESS;
          for (          ActionReport subReport : report.getSubActionsReport()) {
            ActionReport.ExitCode actionExitCode=subReport.getActionExitCode();
            if (actionExitCode.isWorse(worstExitCode)) {
              worstExitCode=actionExitCode;
            }
          }
          report.setActionExitCode(worstExitCode);
          report.setResultType(String.class,name);
        }
 catch (        Exception e) {
          deployment.undeploy(name,deploymentContext);
          deploymentContext.clean();
          throw e;
        }
      }
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.REGISTRATION);
      }
      if (retrieve != null) {
        retrieveArtifacts(context,downloadableArtifacts.getArtifacts(),retrieve,false);
      }
    }
 catch (    Throwable e) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(e.getMessage());
      report.setFailureCause(e);
    }
 finally {
      try {
        archive.close();
      }
 catch (      IOException e) {
        logger.log(Level.FINE,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",path.getAbsolutePath()),e);
      }
      if (tracing != null) {
        tracing.print(System.out);
        TracingUtilities.dump(""String_Node_Str"",System.out);
      }
      if (report.getActionExitCode().equals(ActionReport.ExitCode.SUCCESS)) {
        report.setResultType(String.class,name);
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name));
        logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name,timing.elapsed()));
      }
 else       if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
        String errorMessage=report.getMessage();
        Throwable cause=report.getFailureCause();
        if (cause != null) {
          String causeMessage=cause.getMessage();
          if (causeMessage != null && !causeMessage.equals(errorMessage)) {
            errorMessage=errorMessage + ""String_Node_Str"" + cause.getMessage();
          }
          logger.log(Level.SEVERE,errorMessage,cause.getCause());
        }
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",errorMessage));
        report.setFailureCause(null);
        if (expansionDir != null) {
          final FileArchive arch;
          try {
            arch=DeploymentUtils.openAsFileArchive(expansionDir,archiveFactory);
            arch.delete();
          }
 catch (          IOException ex) {
            final String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",expansionDir.getAbsolutePath());
            report.failure(logger,msg,ex);
          }
        }
      }
      if (deploymentContext != null) {
        deploymentContext.postDeployClean(true);
      }
    }
  }
  finally {
    events.unregister(this);
  }
}"
30106,"public boolean start(ApplicationContext startupContext) throws Exception {
  cl=startupContext.getClassLoader();
  try {
    app=deploymentCtx.getModuleMetaData(Application.class);
    Iterator<EjbEndpoint> iter=ejbendpoints.iterator();
    EjbEndpoint ejbendpoint=null;
    while (iter.hasNext()) {
      ejbendpoint=iter.next();
      String contextRoot=ejbendpoint.contextRoot;
      dispatcher.registerEndpoint(contextRoot,httpHandler,this);
      logger.info(format(rb.getString(""String_Node_Str""),app.getAppName(),new WsUtil().getWebServerInfoForDAS().getWebServerRootURL(ejbendpoint.isSecure).toString() + contextRoot));
    }
  }
 catch (  EndpointRegistrationException e) {
    logger.log(Level.SEVERE,format(rb.getString(""String_Node_Str""),e.toString()));
  }
  return true;
}","public boolean start(ApplicationContext startupContext) throws Exception {
  cl=startupContext.getClassLoader();
  try {
    app=deploymentCtx.getModuleMetaData(Application.class);
    Iterator<EjbEndpoint> iter=ejbendpoints.iterator();
    EjbEndpoint ejbendpoint=null;
    while (iter.hasNext()) {
      ejbendpoint=iter.next();
      String contextRoot=ejbendpoint.contextRoot;
      WebServerInfo wsi=new WsUtil().getWebServerInfoForDAS();
      URL rootURL=wsi.getWebServerRootURL(ejbendpoint.isSecure);
      dispatcher.registerEndpoint(contextRoot,httpHandler,this);
      if (wsi.getHttpVS() != null && wsi.getHttpVS().getPort() != 0)       logger.info(format(rb.getString(""String_Node_Str""),app.getAppName(),rootURL + contextRoot));
    }
  }
 catch (  EndpointRegistrationException e) {
    logger.log(Level.SEVERE,format(rb.getString(""String_Node_Str""),e.toString()));
  }
  return true;
}"
30107,"/** 
 * Prepares the servlet based web services specified in web.xml for deployment. Swap the application written servlet implementation class for one provided by the container.  The original class is stored as runtime information since it will be used as the servant at dispatch time.
 */
private void doWebServiceDeployment(WebBundleDescriptor webBunDesc) throws DeploymentException, MalformedURLException {
  Collection<WebServiceEndpoint> endpoints=webBunDesc.getWebServices().getEndpoints();
  ClassLoader cl=webBunDesc.getClassLoader();
  WsUtil wsutil=new WsUtil();
  for (  WebServiceEndpoint nextEndpoint : endpoints) {
    WebComponentDescriptor webComp=nextEndpoint.getWebComponentImpl();
    if (!nextEndpoint.hasServletImplClass()) {
      throw new DeploymentException(format(rb.getString(""String_Node_Str""),nextEndpoint.getEndpointName()));
    }
    String servletImplClass=nextEndpoint.getServletImplClass();
    if (!nextEndpoint.getWebService().hasFilePublishing()) {
      String publishingUri=nextEndpoint.getPublishingUri();
      String publishingUrlPattern=(publishingUri.charAt(0) == '/') ? publishingUri : ""String_Node_Str"" + publishingUri + ""String_Node_Str"";
      webComp.addUrlPattern(publishingUrlPattern);
    }
    try {
      Class servletImplClazz=cl.loadClass(servletImplClass);
      String containerServlet;
      if (wsutil.isJAXWSbasedService(nextEndpoint.getWebService())) {
        containerServlet=""String_Node_Str"";
        addWSServletContextListener(webBunDesc);
      }
 else {
        containerServlet=SingleThreadModel.class.isAssignableFrom(servletImplClazz) ? ""String_Node_Str"" : ""String_Node_Str"";
      }
      webComp.setWebComponentImplementation(containerServlet);
    }
 catch (    ClassNotFoundException cex) {
      throw new DeploymentException(format(rb.getString(""String_Node_Str""),nextEndpoint.getEndpointName()));
    }
    WebServerInfo wsi=new WsUtil().getWebServerInfoForDAS();
    URL rootURL=wsi.getWebServerRootURL(nextEndpoint.isSecure());
    String contextRoot=webBunDesc.getContextRoot();
    URL actualAddress=nextEndpoint.composeEndpointAddress(rootURL,contextRoot);
    logger.info(format(rb.getString(""String_Node_Str""),nextEndpoint.getEndpointName(),actualAddress.toString()));
  }
}","/** 
 * Prepares the servlet based web services specified in web.xml for deployment. Swap the application written servlet implementation class for one provided by the container.  The original class is stored as runtime information since it will be used as the servant at dispatch time.
 */
private void doWebServiceDeployment(WebBundleDescriptor webBunDesc) throws DeploymentException, MalformedURLException {
  Collection<WebServiceEndpoint> endpoints=webBunDesc.getWebServices().getEndpoints();
  ClassLoader cl=webBunDesc.getClassLoader();
  WsUtil wsutil=new WsUtil();
  for (  WebServiceEndpoint nextEndpoint : endpoints) {
    WebComponentDescriptor webComp=nextEndpoint.getWebComponentImpl();
    if (!nextEndpoint.hasServletImplClass()) {
      throw new DeploymentException(format(rb.getString(""String_Node_Str""),nextEndpoint.getEndpointName()));
    }
    String servletImplClass=nextEndpoint.getServletImplClass();
    if (!nextEndpoint.getWebService().hasFilePublishing()) {
      String publishingUri=nextEndpoint.getPublishingUri();
      String publishingUrlPattern=(publishingUri.charAt(0) == '/') ? publishingUri : ""String_Node_Str"" + publishingUri + ""String_Node_Str"";
      webComp.addUrlPattern(publishingUrlPattern);
    }
    try {
      Class servletImplClazz=cl.loadClass(servletImplClass);
      String containerServlet;
      if (wsutil.isJAXWSbasedService(nextEndpoint.getWebService())) {
        containerServlet=""String_Node_Str"";
        addWSServletContextListener(webBunDesc);
      }
 else {
        containerServlet=SingleThreadModel.class.isAssignableFrom(servletImplClazz) ? ""String_Node_Str"" : ""String_Node_Str"";
      }
      webComp.setWebComponentImplementation(containerServlet);
    }
 catch (    ClassNotFoundException cex) {
      throw new DeploymentException(format(rb.getString(""String_Node_Str""),nextEndpoint.getEndpointName()));
    }
    WebServerInfo wsi=new WsUtil().getWebServerInfoForDAS();
    URL rootURL=wsi.getWebServerRootURL(nextEndpoint.isSecure());
    String contextRoot=webBunDesc.getContextRoot();
    URL actualAddress=nextEndpoint.composeEndpointAddress(rootURL,contextRoot);
    if (wsi.getHttpVS() != null && wsi.getHttpVS().getPort() != 0)     logger.info(format(rb.getString(""String_Node_Str""),nextEndpoint.getEndpointName(),actualAddress.toString()));
  }
}"
30108,"public WebServerInfo getWebServerInfoForDAS(){
  WebServerInfo wsi=new WebServerInfo();
  if (this.networkListeners == null) {
    List<Integer> adminPorts=new ArrayList<Integer>();
    for (    org.glassfish.api.container.Adapter subAdapter : habitat.getAllByContract(org.glassfish.api.container.Adapter.class)) {
      if (subAdapter instanceof AdminAdapter) {
        AdminAdapter aa=(AdminAdapter)subAdapter;
        adminPorts.add(aa.getListenPort());
      }
 else       if (subAdapter instanceof AdminConsoleAdapter) {
        AdminConsoleAdapter aca=(AdminConsoleAdapter)subAdapter;
        adminPorts.add(aca.getListenPort());
      }
    }
    for (    NetworkListener nl : config.getNetworkConfig().getNetworkListeners().getNetworkListener()) {
      if (!adminPorts.contains(Integer.valueOf(nl.getPort()))) {
        if (networkListeners == null)         networkListeners=new ArrayList<NetworkListener>();
        networkListeners.add(nl);
      }
    }
  }
  for (  NetworkListener listener : networkListeners) {
    String host=listener.getAddress();
    if (listener.getAddress().equals(""String_Node_Str""))     try {
      host=InetAddress.getLocalHost().getHostName();
    }
 catch (    UnknownHostException e) {
      host=""String_Node_Str"";
    }
 else {
    }
    if (listener.findHttpProtocol().getSecurityEnabled().equals(""String_Node_Str""))     wsi.setHttpVS(new VirtualServerInfo(""String_Node_Str"",host,Integer.parseInt(listener.getPort())));
 else     if (listener.findHttpProtocol().getSecurityEnabled().equals(""String_Node_Str""))     wsi.setHttpsVS(new VirtualServerInfo(""String_Node_Str"",host,Integer.parseInt(listener.getPort())));
  }
  return wsi;
}","public WebServerInfo getWebServerInfoForDAS(){
  WebServerInfo wsi=new WebServerInfo();
  if (this.networkListeners == null) {
    List<Integer> adminPorts=new ArrayList<Integer>();
    for (    org.glassfish.api.container.Adapter subAdapter : habitat.getAllByContract(org.glassfish.api.container.Adapter.class)) {
      if (subAdapter instanceof AdminAdapter) {
        AdminAdapter aa=(AdminAdapter)subAdapter;
        adminPorts.add(aa.getListenPort());
      }
 else       if (subAdapter instanceof AdminConsoleAdapter) {
        AdminConsoleAdapter aca=(AdminConsoleAdapter)subAdapter;
        adminPorts.add(aca.getListenPort());
      }
    }
    for (    NetworkListener nl : config.getNetworkConfig().getNetworkListeners().getNetworkListener()) {
      if (!adminPorts.contains(Integer.valueOf(nl.getPort()))) {
        if (networkListeners == null)         networkListeners=new ArrayList<NetworkListener>();
        networkListeners.add(nl);
      }
    }
  }
  if ((networkListeners != null) && (!networkListeners.isEmpty())) {
    for (    NetworkListener listener : networkListeners) {
      String host=listener.getAddress();
      if (listener.getAddress().equals(""String_Node_Str""))       try {
        host=InetAddress.getLocalHost().getHostName();
      }
 catch (      UnknownHostException e) {
        host=""String_Node_Str"";
      }
      if (listener.findHttpProtocol().getSecurityEnabled().equals(""String_Node_Str""))       wsi.setHttpVS(new VirtualServerInfo(""String_Node_Str"",host,Integer.parseInt(listener.getPort())));
 else       if (listener.findHttpProtocol().getSecurityEnabled().equals(""String_Node_Str""))       wsi.setHttpsVS(new VirtualServerInfo(""String_Node_Str"",host,Integer.parseInt(listener.getPort())));
    }
  }
 else {
    wsi.setHttpVS(new VirtualServerInfo(""String_Node_Str"",""String_Node_Str"",0));
  }
  return wsi;
}"
30109,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  if (load_balancer_name == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  LoadBalancers loadBalancers=domain.getExtensionByType(LoadBalancers.class);
  if (loadBalancers != null && loadBalancers.getLoadBalancer(load_balancer_name) != null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",load_balancer_name);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (target != null && !tgt.isValid(target)) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  boolean isCluster=tgt.isCluster(target);
  String lbConfigName=load_balancer_name + ""String_Node_Str"";
  if (!isCluster) {
    if ((lbpolicy != null) || (lbpolicymodule != null)) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
  try {
    createLBConfig(lbConfigName);
    if (target != null) {
      final CreateHTTPLBRefCommand command=(CreateHTTPLBRefCommand)runner.getCommand(""String_Node_Str"",report,context.getLogger());
      command.target=target;
      command.config=lbConfigName;
      command.lbpolicy=lbpolicy;
      command.lbpolicymodule=lbpolicymodule;
      command.healthcheckerurl=healthcheckerurl;
      command.healthcheckerinterval=healthcheckerinterval;
      command.healthcheckertimeout=healthcheckertimeout;
      command.lbenableallinstances=lbenableallinstances;
      command.lbenableallapplications=lbenableallapplications;
      command.lbweight=lbweight;
      command.execute(context);
      checkCommandStatus(context);
    }
  }
 catch (  CommandException e) {
    String msg=e.getLocalizedMessage();
    logger.warning(msg);
  }
  addLoadBalancer(lbConfigName);
  if (isCluster && lbweight != null) {
    try {
      final ConfigureLBWeightCommand command=(ConfigureLBWeightCommand)runner.getCommand(""String_Node_Str"",report,context.getLogger());
      command.weights=lbweight;
      command.cluster=target;
      command.execute(context);
      checkCommandStatus(context);
    }
 catch (    CommandException e) {
      String msg=e.getLocalizedMessage();
      logger.warning(msg);
    }
  }
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  if (load_balancer_name == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (!Pattern.matches(NAME_REGEX,load_balancer_name)) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  LoadBalancers loadBalancers=domain.getExtensionByType(LoadBalancers.class);
  if (loadBalancers != null && loadBalancers.getLoadBalancer(load_balancer_name) != null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",load_balancer_name);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (target != null && !tgt.isValid(target)) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  boolean isCluster=tgt.isCluster(target);
  String lbConfigName=load_balancer_name + ""String_Node_Str"";
  if (!isCluster) {
    if ((lbpolicy != null) || (lbpolicymodule != null)) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
  try {
    createLBConfig(lbConfigName);
    if (target != null) {
      final CreateHTTPLBRefCommand command=(CreateHTTPLBRefCommand)runner.getCommand(""String_Node_Str"",report,context.getLogger());
      command.target=target;
      command.config=lbConfigName;
      command.lbpolicy=lbpolicy;
      command.lbpolicymodule=lbpolicymodule;
      command.healthcheckerurl=healthcheckerurl;
      command.healthcheckerinterval=healthcheckerinterval;
      command.healthcheckertimeout=healthcheckertimeout;
      command.lbenableallinstances=lbenableallinstances;
      command.lbenableallapplications=lbenableallapplications;
      command.lbweight=lbweight;
      command.execute(context);
      checkCommandStatus(context);
    }
  }
 catch (  CommandException e) {
    String msg=e.getLocalizedMessage();
    logger.warning(msg);
  }
  addLoadBalancer(lbConfigName);
  if (isCluster && lbweight != null) {
    try {
      final ConfigureLBWeightCommand command=(ConfigureLBWeightCommand)runner.getCommand(""String_Node_Str"",report,context.getLogger());
      command.weights=lbweight;
      command.cluster=target;
      command.execute(context);
      checkCommandStatus(context);
    }
 catch (    CommandException e) {
      String msg=e.getLocalizedMessage();
      logger.warning(msg);
    }
  }
}"
30110,"private String checkForAddrAny(Properties props,String orbInitialHost){
  if ((orbInitialHost.equals(""String_Node_Str"")) || (orbInitialHost.equals(""String_Node_Str"")) || (orbInitialHost.equals(""String_Node_Str""))) {
    try {
      String localAddress=java.net.InetAddress.getLocalHost().getHostAddress();
      return localAddress;
    }
 catch (    java.net.UnknownHostException uhe) {
      logger.log(Level.WARNING,""String_Node_Str"");
      return DEFAULT_ORB_INIT_HOST;
    }
  }
 else {
    return orbInitialHost;
  }
}","private String checkForAddrAny(Properties props,String orbInitialHost){
  if ((orbInitialHost.equals(""String_Node_Str"")) || (orbInitialHost.equals(""String_Node_Str"")) || (orbInitialHost.equals(""String_Node_Str""))) {
    try {
      String localAddress=java.net.InetAddress.getLocalHost().getHostAddress();
      return localAddress;
    }
 catch (    java.net.UnknownHostException uhe) {
      logger.log(Level.WARNING,""String_Node_Str"");
      return DEFAULT_ORB_INIT_HOST;
    }
  }
 else {
    props.setProperty(ORBConstants.SERVER_HOST_PROPERTY,orbInitialHost);
    return orbInitialHost;
  }
}"
30111,"/** 
 * Process a particular annotation whose type is the same as the one returned by @see getAnnotationType(). All information pertinent to the annotation and its context is encapsulated in the passed AnnotationInfo instance.
 * @param ainfo the annotation information
 * @param rcContexts an array of ResourceContainerContext
 * @param ejbAn
 * @return HandlerProcessingResult
 */
protected HandlerProcessingResult processEJB(AnnotationInfo ainfo,ResourceContainerContext[] rcContexts,EJB ejbAn) throws AnnotationProcessorException {
  EjbReferenceDescriptor ejbRefs[]=null;
  String defaultLogicalName=null;
  Class defaultBeanInterface=null;
  InjectionTarget target=null;
  if (ElementType.FIELD.equals(ainfo.getElementType())) {
    Field f=(Field)ainfo.getAnnotatedElement();
    String targetClassName=f.getDeclaringClass().getName();
    defaultLogicalName=targetClassName + ""String_Node_Str"" + f.getName();
    defaultBeanInterface=f.getType();
    target=new InjectionTarget();
    target.setClassName(targetClassName);
    target.setFieldName(f.getName());
    target.setMetadataSource(MetadataSource.ANNOTATION);
  }
 else   if (ElementType.METHOD.equals(ainfo.getElementType())) {
    Method m=(Method)ainfo.getAnnotatedElement();
    String targetClassName=m.getDeclaringClass().getName();
    validateInjectionMethod(m,ainfo);
    String propertyName=getInjectionMethodPropertyName(m,ainfo);
    defaultLogicalName=targetClassName + ""String_Node_Str"" + propertyName;
    defaultBeanInterface=m.getParameterTypes()[0];
    target=new InjectionTarget();
    target.setClassName(targetClassName);
    target.setMethodName(m.getName());
    target.setMetadataSource(MetadataSource.ANNOTATION);
  }
 else   if (ElementType.TYPE.equals(ainfo.getElementType())) {
    if (ejbAn.name().equals(""String_Node_Str"") || ejbAn.beanInterface() == Object.class) {
      Class c=(Class)ainfo.getAnnotatedElement();
      log(Level.SEVERE,ainfo,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{ejbAn.name(),ejbAn.beanInterface(),c}));
      return getDefaultFailedResult();
    }
  }
 else {
    return getDefaultFailedResult();
  }
  Class beanInterface=(ejbAn.beanInterface() == Object.class) ? defaultBeanInterface : ejbAn.beanInterface();
  String logicalName=ejbAn.name().equals(""String_Node_Str"") ? defaultLogicalName : ejbAn.name();
  ejbRefs=getEjbReferenceDescriptors(logicalName,rcContexts);
  for (  EjbReferenceDescriptor ejbRef : ejbRefs) {
    if (target != null)     ejbRef.addInjectionTarget(target);
    if (!ok(ejbRef.getName()))     ejbRef.setName(logicalName);
    setEjbType(ejbRef,beanInterface);
    if (!ok(ejbRef.getDescription()) && ok(ejbAn.description()))     ejbRef.setDescription(ejbAn.description());
    if (!ejbRef.hasLookupName() && ok(ejbAn.lookup()))     ejbRef.setLookupName(ejbAn.lookup());
    if (!ok(ejbRef.getMappedName()) && ok(ejbAn.mappedName()))     ejbRef.setMappedName(ejbAn.mappedName());
    if (!ok(ejbRef.getLinkName()) && ok(ejbAn.beanName()))     ejbRef.setLinkName(ejbAn.beanName());
  }
  return getDefaultProcessedResult();
}","/** 
 * Process a particular annotation whose type is the same as the one returned by @see getAnnotationType(). All information pertinent to the annotation and its context is encapsulated in the passed AnnotationInfo instance.
 * @param ainfo the annotation information
 * @param rcContexts an array of ResourceContainerContext
 * @param ejbAn
 * @return HandlerProcessingResult
 */
protected HandlerProcessingResult processEJB(AnnotationInfo ainfo,ResourceContainerContext[] rcContexts,EJB ejbAn) throws AnnotationProcessorException {
  EjbReferenceDescriptor ejbRefs[]=null;
  String defaultLogicalName=null;
  Class defaultBeanInterface=null;
  InjectionTarget target=null;
  if (ElementType.FIELD.equals(ainfo.getElementType())) {
    Field f=(Field)ainfo.getAnnotatedElement();
    String targetClassName=f.getDeclaringClass().getName();
    defaultLogicalName=targetClassName + ""String_Node_Str"" + f.getName();
    defaultBeanInterface=f.getType();
    target=new InjectionTarget();
    target.setClassName(targetClassName);
    target.setFieldName(f.getName());
    target.setMetadataSource(MetadataSource.ANNOTATION);
  }
 else   if (ElementType.METHOD.equals(ainfo.getElementType())) {
    Method m=(Method)ainfo.getAnnotatedElement();
    String targetClassName=m.getDeclaringClass().getName();
    validateInjectionMethod(m,ainfo);
    String propertyName=getInjectionMethodPropertyName(m,ainfo);
    defaultLogicalName=targetClassName + ""String_Node_Str"" + propertyName;
    defaultBeanInterface=m.getParameterTypes()[0];
    target=new InjectionTarget();
    target.setClassName(targetClassName);
    target.setMethodName(m.getName());
    target.setMetadataSource(MetadataSource.ANNOTATION);
  }
 else   if (ElementType.TYPE.equals(ainfo.getElementType())) {
    if (ejbAn.name().equals(""String_Node_Str"") || ejbAn.beanInterface() == Object.class) {
      Class c=(Class)ainfo.getAnnotatedElement();
      AnnotationProcessorException fatalException=new AnnotationProcessorException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{ejbAn.name(),ejbAn.beanInterface(),c}),ainfo);
      fatalException.setFatal(true);
      throw fatalException;
    }
  }
 else {
    return getDefaultFailedResult();
  }
  Class beanInterface=(ejbAn.beanInterface() == Object.class) ? defaultBeanInterface : ejbAn.beanInterface();
  String logicalName=ejbAn.name().equals(""String_Node_Str"") ? defaultLogicalName : ejbAn.name();
  ejbRefs=getEjbReferenceDescriptors(logicalName,rcContexts);
  for (  EjbReferenceDescriptor ejbRef : ejbRefs) {
    if (target != null)     ejbRef.addInjectionTarget(target);
    if (!ok(ejbRef.getName()))     ejbRef.setName(logicalName);
    setEjbType(ejbRef,beanInterface);
    if (!ok(ejbRef.getDescription()) && ok(ejbAn.description()))     ejbRef.setDescription(ejbAn.description());
    if (!ejbRef.hasLookupName() && ok(ejbAn.lookup()))     ejbRef.setLookupName(ejbAn.lookup());
    if (!ok(ejbRef.getMappedName()) && ok(ejbAn.mappedName()))     ejbRef.setMappedName(ejbAn.mappedName());
    if (!ok(ejbRef.getLinkName()) && ok(ejbAn.beanName()))     ejbRef.setLinkName(ejbAn.beanName());
  }
  return getDefaultProcessedResult();
}"
30112,"public void unload(ExtendedDeploymentContext context){
  Logger logger=context.getLogger();
  if (!isLoaded) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(appClassLoader);
    context.setClassLoader(appClassLoader);
    super.unload(context);
    for (    ModuleInfo module : reversedModules) {
      module.unload(getSubContext(module,context));
    }
    isLoaded=false;
    if (events != null) {
      events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_UNLOADED,this),false);
    }
    try {
      PreDestroy.class.cast(appClassLoader).preDestroy();
    }
 catch (    Exception e) {
    }
    appClassLoader=null;
    for (    ModuleInfo module : getModuleInfos()) {
      if (module.getClassLoaders() != null) {
        for (        ClassLoader cloader : module.getClassLoaders()) {
          try {
            PreDestroy.class.cast(cloader).preDestroy();
          }
 catch (          Exception e) {
          }
        }
        module.cleanClassLoaders();
      }
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
    context.setClassLoader(null);
  }
}","public void unload(ExtendedDeploymentContext context){
  Logger logger=context.getLogger();
  if (!isLoaded) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(appClassLoader);
    context.setClassLoader(appClassLoader);
    super.unload(context);
    for (    ModuleInfo module : reversedModules) {
      module.unload(getSubContext(module,context));
    }
    isLoaded=false;
    if (events != null) {
      events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_UNLOADED,this),false);
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
    context.setClassLoader(null);
  }
}"
30113,"public void clean(ExtendedDeploymentContext context) throws Exception {
  if (appClassLoader != null) {
    try {
      PreDestroy.class.cast(appClassLoader).preDestroy();
    }
 catch (    Exception e) {
    }
    appClassLoader=null;
  }
  super.clean(context);
  for (  ModuleInfo info : reversedModules) {
    info.clean(getSubContext(info,context));
    info=null;
  }
  if (events != null) {
    events.send(new EventListener.Event<DeploymentContext>(Deployment.APPLICATION_CLEANED,context),false);
  }
}","public void clean(ExtendedDeploymentContext context) throws Exception {
  super.clean(context);
  for (  ModuleInfo info : reversedModules) {
    info.clean(getSubContext(info,context));
    info=null;
  }
  if (appClassLoader != null) {
    try {
      PreDestroy.class.cast(appClassLoader).preDestroy();
    }
 catch (    Exception e) {
    }
    appClassLoader=null;
  }
  for (  ModuleInfo module : getModuleInfos()) {
    if (module.getClassLoaders() != null) {
      for (      ClassLoader cloader : module.getClassLoaders()) {
        try {
          PreDestroy.class.cast(cloader).preDestroy();
        }
 catch (        Exception e) {
        }
      }
      module.cleanClassLoaders();
    }
  }
  if (events != null) {
    events.send(new EventListener.Event<DeploymentContext>(Deployment.APPLICATION_CLEANED,context),false);
  }
}"
30114,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  List<Config> configList=configs.getConfig();
  Config config=configList.get(0);
  SecurityService securityService=config.getSecurityService();
  AuthRealm fileAuthRealm=null;
  for (  AuthRealm authRealm : securityService.getAuthRealm()) {
    if (authRealm.getName().equals(ADMIN_REALM)) {
      fileAuthRealm=authRealm;
      break;
    }
  }
  if (fileAuthRealm == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String fileRealmClassName=fileAuthRealm.getClassname();
  if (fileRealmClassName != null && !fileRealmClassName.equals(""String_Node_Str"")) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String keyFile=null;
  for (  Property fileProp : fileAuthRealm.getProperty()) {
    if (fileProp.getName().equals(""String_Node_Str""))     keyFile=fileProp.getValue();
  }
  if (keyFile == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  FileRealm fr=null;
  try {
    realmsManager.createRealms(config);
    fr=(FileRealm)realmsManager.getFromLoadedRealms(config.getName(),fileAuthRealm.getName());
    if (fr == null) {
      throw new NoSuchRealmException(fileAuthRealm.getName());
    }
  }
 catch (  NoSuchRealmException e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  try {
    Enumeration en=fr.getGroupNames(userName);
    int size=0;
    while (en.hasMoreElements()) {
      size++;
      en.nextElement();
    }
    String[] groups=new String[size];
    en=fr.getGroupNames(userName);
    for (int i=0; i < size; i++) {
      groups[i]=(String)en.nextElement();
    }
    fr.updateUser(userName,userName,newpassword.toCharArray(),groups);
    fr.writeKeyFile(keyFile);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  secureAdmin=domain.getSecureAdmin();
  if (SecureAdmin.Util.isEnabled(secureAdmin)) {
    if ((newpassword == null) || (newpassword.isEmpty())) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  List<Config> configList=configs.getConfig();
  Config config=configList.get(0);
  SecurityService securityService=config.getSecurityService();
  AuthRealm fileAuthRealm=null;
  for (  AuthRealm authRealm : securityService.getAuthRealm()) {
    if (authRealm.getName().equals(adminService.getAuthRealmName())) {
      fileAuthRealm=authRealm;
      break;
    }
  }
  if (fileAuthRealm == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String fileRealmClassName=fileAuthRealm.getClassname();
  if (fileRealmClassName != null && !fileRealmClassName.equals(""String_Node_Str"")) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String keyFile=null;
  for (  Property fileProp : fileAuthRealm.getProperty()) {
    if (fileProp.getName().equals(""String_Node_Str""))     keyFile=fileProp.getValue();
  }
  if (keyFile == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  FileRealm fr=null;
  try {
    realmsManager.createRealms(config);
    fr=(FileRealm)realmsManager.getFromLoadedRealms(config.getName(),fileAuthRealm.getName());
    if (fr == null) {
      throw new NoSuchRealmException(fileAuthRealm.getName());
    }
  }
 catch (  NoSuchRealmException e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  try {
    Enumeration en=fr.getGroupNames(userName);
    int size=0;
    while (en.hasMoreElements()) {
      size++;
      en.nextElement();
    }
    String[] groups=new String[size];
    en=fr.getGroupNames(userName);
    for (int i=0; i < size; i++) {
      groups[i]=(String)en.nextElement();
    }
    fr.updateUser(userName,userName,newpassword.toCharArray(),groups);
    fr.writeKeyFile(keyFile);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}"
30115,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Config tmp=null;
  try {
    tmp=configs.getConfigByName(target);
  }
 catch (  Exception ex) {
  }
  if (tmp != null) {
    config=tmp;
  }
  if (tmp == null) {
    Server targetServer=domain.getServerNamed(target);
    if (targetServer != null) {
      config=domain.getConfigNamed(targetServer.getConfigRef());
    }
    com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      config=domain.getConfigNamed(cluster.getConfigRef());
    }
  }
  final SecurityService securityService=config.getSecurityService();
  AuthRealm fileAuthRealm=null;
  if (authRealmName == null)   authRealmName=securityService.getDefaultRealm();
  for (  AuthRealm authRealm : securityService.getAuthRealm()) {
    if (authRealm.getName().equals(authRealmName)) {
      fileAuthRealm=authRealm;
      break;
    }
  }
  if (fileAuthRealm == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String fileRealmClassName=fileAuthRealm.getClassname();
  if (fileRealmClassName != null && !fileRealmClassName.equals(""String_Node_Str"")) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",fileRealmClassName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String keyFile=null;
  for (  Property fileProp : fileAuthRealm.getProperty()) {
    if (fileProp.getName().equals(""String_Node_Str""))     keyFile=fileProp.getValue();
  }
  final String kf=keyFile;
  if (keyFile == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  boolean exists=(new File(kf)).exists();
  if (!exists) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{kf,authRealmName}));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  final String password=userpassword;
  if (password == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",userName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<SecurityService>(){
      public Object run(      SecurityService param) throws PropertyVetoException, TransactionFailure {
        try {
          realmsManager.createRealms(config);
          refreshRealm(config.getName(),authRealmName);
          final FileRealm fr=(FileRealm)realmsManager.getFromLoadedRealms(config.getName(),authRealmName);
          CreateFileUser.handleAdminGroup(authRealmName,groups);
          String[] groups1=groups.toArray(new String[groups.size()]);
          try {
            fr.addUser(userName,password.toCharArray(),groups1);
          }
 catch (          BadRealmException br) {
            if (se != null && se.isDas()) {
              throw new BadRealmException(br);
            }
          }
          if (Util.isEmbeddedServer()) {
            fr.writeKeyFile(Util.writeConfigFileToTempDir(kf).getAbsolutePath());
          }
 else {
            fr.writeKeyFile(kf);
          }
          report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
        }
 catch (        Exception e) {
          String localalizedErrorMsg=(e.getLocalizedMessage() == null) ? ""String_Node_Str"" : e.getLocalizedMessage();
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + localalizedErrorMsg);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setFailureCause(e);
        }
        return null;
      }
    }
,securityService);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Config tmp=null;
  try {
    tmp=configs.getConfigByName(target);
  }
 catch (  Exception ex) {
  }
  if (tmp != null) {
    config=tmp;
  }
  if (tmp == null) {
    Server targetServer=domain.getServerNamed(target);
    if (targetServer != null) {
      config=domain.getConfigNamed(targetServer.getConfigRef());
    }
    com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      config=domain.getConfigNamed(cluster.getConfigRef());
    }
  }
  final SecurityService securityService=config.getSecurityService();
  AuthRealm fileAuthRealm=null;
  if (authRealmName == null)   authRealmName=securityService.getDefaultRealm();
  for (  AuthRealm authRealm : securityService.getAuthRealm()) {
    if (authRealm.getName().equals(authRealmName)) {
      fileAuthRealm=authRealm;
      break;
    }
  }
  if (fileAuthRealm == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String fileRealmClassName=fileAuthRealm.getClassname();
  if (fileRealmClassName != null && !fileRealmClassName.equals(""String_Node_Str"")) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",fileRealmClassName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String keyFile=null;
  for (  Property fileProp : fileAuthRealm.getProperty()) {
    if (fileProp.getName().equals(""String_Node_Str""))     keyFile=fileProp.getValue();
  }
  final String kf=keyFile;
  if (keyFile == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  boolean exists=(new File(kf)).exists();
  if (!exists) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{kf,authRealmName}));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  final String password=userpassword;
  if (password == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",userName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  secureAdmin=domain.getSecureAdmin();
  if ((SecureAdmin.Util.isEnabled(secureAdmin)) && (authRealmName.equals(adminService.getAuthRealmName()))) {
    if ((password == null) || (password.isEmpty())) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<SecurityService>(){
      public Object run(      SecurityService param) throws PropertyVetoException, TransactionFailure {
        try {
          realmsManager.createRealms(config);
          refreshRealm(config.getName(),authRealmName);
          final FileRealm fr=(FileRealm)realmsManager.getFromLoadedRealms(config.getName(),authRealmName);
          CreateFileUser.handleAdminGroup(authRealmName,groups);
          String[] groups1=groups.toArray(new String[groups.size()]);
          try {
            fr.addUser(userName,password.toCharArray(),groups1);
          }
 catch (          BadRealmException br) {
            if (se != null && se.isDas()) {
              throw new BadRealmException(br);
            }
          }
          if (Util.isEmbeddedServer()) {
            fr.writeKeyFile(Util.writeConfigFileToTempDir(kf).getAbsolutePath());
          }
 else {
            fr.writeKeyFile(kf);
          }
          report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
        }
 catch (        Exception e) {
          String localalizedErrorMsg=(e.getLocalizedMessage() == null) ? ""String_Node_Str"" : e.getLocalizedMessage();
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + localalizedErrorMsg);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setFailureCause(e);
        }
        return null;
      }
    }
,securityService);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}"
30116,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Config tmp=null;
  try {
    tmp=configs.getConfigByName(target);
  }
 catch (  Exception ex) {
  }
  if (tmp != null) {
    config=tmp;
  }
  if (tmp == null) {
    Server targetServer=domain.getServerNamed(target);
    if (targetServer != null) {
      config=domain.getConfigNamed(targetServer.getConfigRef());
    }
    com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      config=domain.getConfigNamed(cluster.getConfigRef());
    }
  }
  final SecurityService securityService=config.getSecurityService();
  if (authRealmName == null)   authRealmName=securityService.getDefaultRealm();
  AuthRealm fileAuthRealm=null;
  for (  AuthRealm authRealm : securityService.getAuthRealm()) {
    if (authRealm.getName().equals(authRealmName))     fileAuthRealm=authRealm;
  }
  if (fileAuthRealm == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String fileRealmClassName=fileAuthRealm.getClassname();
  if (fileRealmClassName != null && !fileRealmClassName.equals(""String_Node_Str"")) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",fileRealmClassName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String keyFile=null;
  for (  Property fileProp : fileAuthRealm.getProperty()) {
    if (fileProp.getName().equals(""String_Node_Str""))     keyFile=fileProp.getValue();
  }
  if (keyFile == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  boolean exists=(new File(keyFile)).exists();
  if (!exists) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{keyFile,authRealmName}));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String password=userpassword;
  if (password == null && groups == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",userName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  FileRealm fr=null;
  try {
    realmsManager.createRealms(config);
    fr=(FileRealm)realmsManager.getFromLoadedRealms(config.getName(),authRealmName);
    if (fr == null) {
      throw new NoSuchRealmException(authRealmName);
    }
  }
 catch (  NoSuchRealmException e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  try {
    CreateFileUser.handleAdminGroup(authRealmName,groups);
    String[] groups1=(groups == null) ? null : groups.toArray(new String[groups.size()]);
    fr.updateUser(userName,userName,password,groups1);
    fr.writeKeyFile(keyFile);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Config tmp=null;
  try {
    tmp=configs.getConfigByName(target);
  }
 catch (  Exception ex) {
  }
  if (tmp != null) {
    config=tmp;
  }
  if (tmp == null) {
    Server targetServer=domain.getServerNamed(target);
    if (targetServer != null) {
      config=domain.getConfigNamed(targetServer.getConfigRef());
    }
    com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      config=domain.getConfigNamed(cluster.getConfigRef());
    }
  }
  final SecurityService securityService=config.getSecurityService();
  if (authRealmName == null)   authRealmName=securityService.getDefaultRealm();
  AuthRealm fileAuthRealm=null;
  for (  AuthRealm authRealm : securityService.getAuthRealm()) {
    if (authRealm.getName().equals(authRealmName))     fileAuthRealm=authRealm;
  }
  if (fileAuthRealm == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String fileRealmClassName=fileAuthRealm.getClassname();
  if (fileRealmClassName != null && !fileRealmClassName.equals(""String_Node_Str"")) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",fileRealmClassName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String keyFile=null;
  for (  Property fileProp : fileAuthRealm.getProperty()) {
    if (fileProp.getName().equals(""String_Node_Str""))     keyFile=fileProp.getValue();
  }
  if (keyFile == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  boolean exists=(new File(keyFile)).exists();
  if (!exists) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{keyFile,authRealmName}));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  String password=userpassword;
  if (password == null && groups == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",userName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (password != null) {
    secureAdmin=domain.getSecureAdmin();
    if ((SecureAdmin.Util.isEnabled(secureAdmin)) && (adminService.getAuthRealmName().equals(authRealmName))) {
      if ((password.isEmpty())) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        return;
      }
    }
  }
  FileRealm fr=null;
  try {
    realmsManager.createRealms(config);
    fr=(FileRealm)realmsManager.getFromLoadedRealms(config.getName(),authRealmName);
    if (fr == null) {
      throw new NoSuchRealmException(authRealmName);
    }
  }
 catch (  NoSuchRealmException e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",authRealmName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  try {
    CreateFileUser.handleAdminGroup(authRealmName,groups);
    String[] groups1=(groups == null) ? null : groups.toArray(new String[groups.size()]);
    fr.updateUser(userName,userName,password,groups1);
    fr.writeKeyFile(keyFile);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",userName,authRealmName) + ""String_Node_Str"" + e.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
  }
}"
30117,"public Object lookup(String name) throws NamingException, RemoteException {
  Object obj=super.lookup(name);
  ClassLoader originalClassLoader=null;
  try {
    if (obj instanceof Reference) {
      Reference ref=(Reference)obj;
      if (ref.getFactoryClassName().equals(GlassfishNamingManagerImpl.IIOPOBJECT_FACTORY)) {
        originalClassLoader=Utility.setContextClassLoader(getClass().getClassLoader());
        Hashtable env=new Hashtable();
        env.put(""String_Node_Str"",orb);
        obj=javax.naming.spi.NamingManager.getObjectInstance(obj,new CompositeName(name),null,env);
      }
    }
 else     if (obj instanceof NamingObjectProxy) {
      NamingObjectProxy namingProxy=(NamingObjectProxy)obj;
      obj=((NamingObjectProxy)obj).create(new InitialContext());
      if (namingProxy instanceof NamingObjectProxy.InitializationNamingObjectProxy) {
        return super.lookup(name);
      }
    }
  }
 catch (  Exception e) {
    RemoteException re=new RemoteException(""String_Node_Str"",e);
    throw re;
  }
 finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
  }
  return obj;
}","@Override public Object lookup(String name) throws NamingException, RemoteException {
  Object obj=super.lookup(name);
  ClassLoader originalClassLoader=null;
  try {
    if (obj instanceof Reference) {
      Reference ref=(Reference)obj;
      if (ref.getFactoryClassName().equals(GlassfishNamingManagerImpl.IIOPOBJECT_FACTORY)) {
        originalClassLoader=Utility.setContextClassLoader(getClass().getClassLoader());
        Hashtable env=new Hashtable();
        env.put(""String_Node_Str"",orb);
        obj=javax.naming.spi.NamingManager.getObjectInstance(obj,new CompositeName(name),null,env);
      }
    }
 else     if (obj instanceof NamingObjectProxy) {
      NamingObjectProxy namingProxy=(NamingObjectProxy)obj;
      obj=((NamingObjectProxy)obj).create(new InitialContext());
      if (namingProxy instanceof NamingObjectProxy.InitializationNamingObjectProxy) {
        return super.lookup(name);
      }
    }
  }
 catch (  Exception e) {
    RemoteException re=new RemoteException(""String_Node_Str"",e);
    throw re;
  }
 finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
  }
  return obj;
}"
30118,"public static MbeanService getInstance(){
  if (habitat == null)   return null;
  return habitat.getComponent(MbeanService.class);
}","public static MbeanService getInstance(){
  if (habitat == null)   return null;
  if (_mbeanService != null)   return _mbeanService;
  return habitat.getComponent(MbeanService.class);
}"
30119,"public void init(ServletConfig servletConfig) throws ServletException {
  try {
    super.init(servletConfig);
    wsEngine_=WebServiceEngineImpl.getInstance();
    doInit(servletConfig);
  }
 catch (  Throwable e) {
    throw new ServletException(e);
  }
}","public void init(ServletConfig servletConfig) throws ServletException {
  String servletName=""String_Node_Str"";
  try {
    super.init(servletConfig);
    wsEngine_=WebServiceEngineImpl.getInstance();
    WebServiceContractImpl wscImpl=WebServiceContractImpl.getInstance();
    ComponentEnvManager compEnvManager=wscImpl.getComponentEnvManager();
    JndiNameEnvironment jndiNameEnv=compEnvManager.getCurrentJndiNameEnvironment();
    WebBundleDescriptor webBundle=null;
    if (jndiNameEnv != null && jndiNameEnv instanceof WebBundleDescriptor) {
      webBundle=((WebBundleDescriptor)jndiNameEnv);
    }
 else {
      throw new WebServiceException(""String_Node_Str"" + jndiNameEnv);
    }
    servletName=servletConfig.getServletName();
    contextRoot=webBundle.getContextRoot();
    WebComponentDescriptor webComponent=webBundle.getWebComponentByCanonicalName(servletName);
    if (webComponent != null) {
      WebServicesDescriptor webServices=webBundle.getWebServices();
      Collection<WebServiceEndpoint> endpoints=webServices.getEndpointsImplementedBy(webComponent);
      endpoint=endpoints.iterator().next();
    }
 else {
      throw new ServletException(servletName + ""String_Node_Str"");
    }
    if (!(HTTPBinding.HTTP_BINDING.equals(endpoint.getProtocolBinding()))) {
      wsEngine_.createHandler(endpoint);
    }
    if (endpoint.getWsdlExposed() != null) {
      wsdlExposed=Boolean.parseBoolean(endpoint.getWsdlExposed());
    }
    String uri=endpoint.getEndpointAddressUri();
    urlPattern=uri.startsWith(""String_Node_Str"") ? uri : ""String_Node_Str"" + uri;
  }
 catch (  Throwable t) {
    logger.log(Level.WARNING,""String_Node_Str"" + servletName + ""String_Node_Str"",t);
    ServletException se=new ServletException();
    se.initCause(t);
    throw se;
  }
}"
30120,"/** 
 * Convert invocation method to a constant for easier processing.
 */
private static void Init(){
  serviceMethodTypes=new HashMap();
  fullWsdlIllegalMethods=new HashSet();
  noWsdlIllegalMethods=new HashSet();
  try {
    Class noParams[]=new Class[0];
    String createCall=""String_Node_Str"";
    Class serviceClass=javax.xml.rpc.Service.class;
    Method createCallNoArgs=serviceClass.getDeclaredMethod(createCall,noParams);
    serviceMethodTypes.put(createCallNoArgs,Integer.valueOf(CREATE_CALL_NO_ARGS));
    Method createCallPort=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class});
    serviceMethodTypes.put(createCallPort,Integer.valueOf(CREATE_CALL_PORT));
    Method createCallOperationQName=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class,QName.class});
    serviceMethodTypes.put(createCallOperationQName,Integer.valueOf(CREATE_CALL_OPERATION_QNAME));
    Method createCallOperationString=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class,String.class});
    serviceMethodTypes.put(createCallOperationString,Integer.valueOf(CREATE_CALL_OPERATION_STRING));
    Method getCalls=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{QName.class});
    serviceMethodTypes.put(getCalls,Integer.valueOf(GET_CALLS));
    Method getHandlerRegistry=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getHandlerRegistry,Integer.valueOf(GET_HANDLER_REGISTRY));
    Method getPortContainerManaged=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{Class.class});
    serviceMethodTypes.put(getPortContainerManaged,Integer.valueOf(GET_PORT_CONTAINER_MANAGED));
    Method getPortClientManaged=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{QName.class,Class.class});
    serviceMethodTypes.put(getPortClientManaged,Integer.valueOf(GET_PORT_CLIENT_MANAGED));
    Method getPorts=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getPorts,new Integer(GET_PORTS));
    Method getServiceName=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getServiceName,Integer.valueOf(GET_SERVICE_NAME));
    Method getTypeMappingRegistry=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getTypeMappingRegistry,Integer.valueOf(GET_TYPE_MAPPING_REGISTRY));
    Method getWsdlLocation=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getWsdlLocation,Integer.valueOf(GET_WSDL_LOCATION));
  }
 catch (  NoSuchMethodException nsme) {
  }
  fullWsdlIllegalMethods.add(GET_HANDLER_REGISTRY);
  fullWsdlIllegalMethods.add(GET_TYPE_MAPPING_REGISTRY);
  noWsdlIllegalMethods.add(CREATE_CALL_PORT);
  noWsdlIllegalMethods.add(CREATE_CALL_OPERATION_QNAME);
  noWsdlIllegalMethods.add(CREATE_CALL_OPERATION_STRING);
  noWsdlIllegalMethods.add(GET_CALLS);
  noWsdlIllegalMethods.add(GET_HANDLER_REGISTRY);
  noWsdlIllegalMethods.add(GET_PORT_CONTAINER_MANAGED);
  noWsdlIllegalMethods.add(GET_PORT_CLIENT_MANAGED);
  noWsdlIllegalMethods.add(GET_PORTS);
  noWsdlIllegalMethods.add(GET_SERVICE_NAME);
  noWsdlIllegalMethods.add(GET_TYPE_MAPPING_REGISTRY);
  noWsdlIllegalMethods.add(GET_WSDL_LOCATION);
  noWsdlIllegalMethods.add(new Integer(GENERATED_SERVICE_METHOD));
}","/** 
 * Convert invocation method to a constant for easier processing.
 */
private static void Init(){
  serviceMethodTypes=new HashMap();
  fullWsdlIllegalMethods=new HashSet();
  noWsdlIllegalMethods=new HashSet();
  try {
    Class noParams[]=new Class[0];
    String createCall=""String_Node_Str"";
    Class serviceClass=javax.xml.rpc.Service.class;
    Method createCallNoArgs=serviceClass.getDeclaredMethod(createCall,noParams);
    serviceMethodTypes.put(createCallNoArgs,Integer.valueOf(CREATE_CALL_NO_ARGS));
    Method createCallPort=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class});
    serviceMethodTypes.put(createCallPort,Integer.valueOf(CREATE_CALL_PORT));
    Method createCallOperationQName=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class,QName.class});
    serviceMethodTypes.put(createCallOperationQName,Integer.valueOf(CREATE_CALL_OPERATION_QNAME));
    Method createCallOperationString=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class,String.class});
    serviceMethodTypes.put(createCallOperationString,Integer.valueOf(CREATE_CALL_OPERATION_STRING));
    Method getCalls=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{QName.class});
    serviceMethodTypes.put(getCalls,Integer.valueOf(GET_CALLS));
    Method getHandlerRegistry=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getHandlerRegistry,Integer.valueOf(GET_HANDLER_REGISTRY));
    Method getPortContainerManaged=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{Class.class});
    serviceMethodTypes.put(getPortContainerManaged,Integer.valueOf(GET_PORT_CONTAINER_MANAGED));
    Method getPortClientManaged=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{QName.class,Class.class});
    serviceMethodTypes.put(getPortClientManaged,Integer.valueOf(GET_PORT_CLIENT_MANAGED));
    Method getPorts=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getPorts,Integer.valueOf(GET_PORTS));
    Method getServiceName=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getServiceName,Integer.valueOf(GET_SERVICE_NAME));
    Method getTypeMappingRegistry=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getTypeMappingRegistry,Integer.valueOf(GET_TYPE_MAPPING_REGISTRY));
    Method getWsdlLocation=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getWsdlLocation,Integer.valueOf(GET_WSDL_LOCATION));
  }
 catch (  NoSuchMethodException nsme) {
  }
  fullWsdlIllegalMethods.add(GET_HANDLER_REGISTRY);
  fullWsdlIllegalMethods.add(GET_TYPE_MAPPING_REGISTRY);
  noWsdlIllegalMethods.add(CREATE_CALL_PORT);
  noWsdlIllegalMethods.add(CREATE_CALL_OPERATION_QNAME);
  noWsdlIllegalMethods.add(CREATE_CALL_OPERATION_STRING);
  noWsdlIllegalMethods.add(GET_CALLS);
  noWsdlIllegalMethods.add(GET_HANDLER_REGISTRY);
  noWsdlIllegalMethods.add(GET_PORT_CONTAINER_MANAGED);
  noWsdlIllegalMethods.add(GET_PORT_CLIENT_MANAGED);
  noWsdlIllegalMethods.add(GET_PORTS);
  noWsdlIllegalMethods.add(GET_SERVICE_NAME);
  noWsdlIllegalMethods.add(GET_TYPE_MAPPING_REGISTRY);
  noWsdlIllegalMethods.add(GET_WSDL_LOCATION);
  noWsdlIllegalMethods.add(Integer.valueOf(GENERATED_SERVICE_METHOD));
}"
30121,"public void registerEndpoint(WebServiceEndpoint webserviceEndpoint,EjbEndpointFacade ejbContainer,Object servant,Class tieClass){
  String ctxtRoot=null;
  String uri=null;
  EjbRuntimeEndpointInfo endpoint=createEjbEndpointInfo(webserviceEndpoint,ejbContainer,servant,tieClass);
synchronized (webServiceEjbEndpoints) {
    String uriRaw=endpoint.getEndpointAddressUri();
    if (uriRaw != null) {
      uri=(uriRaw.charAt(0) == '/') ? uriRaw.substring(1) : uriRaw;
      if (webServiceEjbEndpoints.containsKey(uri)) {
        logger.log(Level.SEVERE,format(rb.getString(""String_Node_Str""),uri));
      }
      webServiceEjbEndpoints.put(uri,endpoint);
      regenerateEjbContextRoots();
      ctxtRoot=getContextRootForUri(uri);
      if (adapterListMap.get(uri) == null) {
        ServletAdapterList list=new ServletAdapterList();
        adapterListMap.put(uri,list);
      }
    }
 else     throw new WebServiceException(rb.getString(""String_Node_Str""));
  }
  WebServiceEngineImpl engine=WebServiceEngineImpl.getInstance();
  if (endpoint.getEndpoint().getWebService().getMappingFileUri() != null) {
    engine.createHandler((com.sun.xml.rpc.spi.runtime.SystemHandlerDelegate)null,endpoint.getEndpoint());
  }
 else {
    engine.createHandler(endpoint.getEndpoint());
    try {
      endpoint.initRuntimeInfo((ServletAdapterList)adapterListMap.get(uri));
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}","public void registerEndpoint(WebServiceEndpoint webserviceEndpoint,EjbEndpointFacade ejbContainer,Object servant,Class tieClass){
  String uri=null;
  EjbRuntimeEndpointInfo endpoint=createEjbEndpointInfo(webserviceEndpoint,ejbContainer,servant,tieClass);
synchronized (webServiceEjbEndpoints) {
    String uriRaw=endpoint.getEndpointAddressUri();
    if (uriRaw != null) {
      uri=(uriRaw.charAt(0) == '/') ? uriRaw.substring(1) : uriRaw;
      if (webServiceEjbEndpoints.containsKey(uri)) {
        logger.log(Level.SEVERE,format(rb.getString(""String_Node_Str""),uri));
      }
      webServiceEjbEndpoints.put(uri,endpoint);
      regenerateEjbContextRoots();
      if (adapterListMap.get(uri) == null) {
        ServletAdapterList list=new ServletAdapterList();
        adapterListMap.put(uri,list);
      }
    }
 else     throw new WebServiceException(rb.getString(""String_Node_Str""));
  }
  WebServiceEngineImpl engine=WebServiceEngineImpl.getInstance();
  if (endpoint.getEndpoint().getWebService().getMappingFileUri() != null) {
    engine.createHandler((com.sun.xml.rpc.spi.runtime.SystemHandlerDelegate)null,endpoint.getEndpoint());
  }
 else {
    engine.createHandler(endpoint.getEndpoint());
    try {
      endpoint.initRuntimeInfo((ServletAdapterList)adapterListMap.get(uri));
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}"
30122,"public Object resolveWSReference(ServiceReferenceDescriptor desc,Context context) throws NamingException {
  Class serviceInterfaceClass=null;
  Object returnObj=null;
  WsUtil wsUtil=new WsUtil();
  InitialContext iContext=new InitialContext();
  if (desc.hasLookupName()) {
    return iContext.lookup(desc.getLookupName());
  }
  try {
    WSContainerResolver.set(desc);
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    serviceInterfaceClass=cl.loadClass(desc.getServiceInterface());
    resolvePortComponentLinks(desc);
    javax.xml.rpc.Service serviceDelegate=null;
    javax.xml.ws.Service jaxwsDelegate=null;
    Object injValue=null;
    if (desc.hasGeneratedServiceInterface() || desc.hasWsdlFile()) {
      String serviceImplName=desc.getServiceImplClassName();
      if (serviceImplName != null) {
        Class serviceImplClass=cl.loadClass(serviceImplName);
        serviceDelegate=(javax.xml.rpc.Service)serviceImplClass.newInstance();
      }
 else {
        if (javax.xml.ws.Service.class.isAssignableFrom(serviceInterfaceClass) && !javax.xml.ws.Service.class.equals(serviceInterfaceClass)) {
          injValue=initiateInstance(serviceInterfaceClass,desc);
        }
 else {
          if (desc.isInjectable()) {
            InjectionTarget target=desc.getInjectionTargets().iterator().next();
            Class serviceType=null;
            if (target.isFieldInjectable()) {
              java.lang.reflect.Field f=target.getField();
              if (f == null) {
                String fName=target.getFieldName();
                Class targetClass=cl.loadClass(target.getClassName());
                try {
                  f=targetClass.getDeclaredField(fName);
                }
 catch (                java.lang.NoSuchFieldException nsfe) {
                }
              }
              serviceType=f.getType();
            }
            if (target.isMethodInjectable()) {
              Method m=target.getMethod();
              if (m == null) {
                String mName=target.getMethodName();
                Class targetClass=cl.loadClass(target.getClassName());
                try {
                  m=targetClass.getDeclaredMethod(mName);
                }
 catch (                java.lang.NoSuchMethodException nsfe) {
                }
              }
              if (m.getParameterTypes().length == 1) {
                serviceType=m.getParameterTypes()[0];
              }
            }
            if (serviceType != null) {
              Class loadedSvcClass=cl.loadClass(serviceType.getCanonicalName());
              injValue=initiateInstance(loadedSvcClass,desc);
            }
          }
        }
        if (injValue == null) {
          javax.xml.ws.Service svc=javax.xml.ws.Service.create((new WsUtil()).privilegedGetServiceRefWsdl(desc),desc.getServiceName());
          jaxwsDelegate=new JAXWSServiceDelegate(desc,svc,cl);
        }
      }
      if (desc.hasHandlers()) {
        javax.xml.rpc.Service configuredService=wsUtil.createConfiguredService(desc);
        Iterator ports=configuredService.getPorts();
        wsUtil.configureHandlerChain(desc,serviceDelegate,ports,cl);
      }
      if (javax.xml.ws.Service.class.isAssignableFrom(serviceInterfaceClass)) {
        javax.xml.ws.Service service=(injValue != null ? (javax.xml.ws.Service)injValue : jaxwsDelegate);
        if (service != null) {
          wsUtil.configureJAXWSClientHandlers(service,desc);
        }
        if (injValue != null && desc.getInjectionTargetType() != null) {
          Class requestedPortType=service.getClass().getClassLoader().loadClass(desc.getInjectionTargetType());
          ArrayList<WebServiceFeature> wsFeatures=getWebServiceFeatures(desc);
          if (wsFeatures.size() > 0) {
            injValue=service.getPort(requestedPortType,wsFeatures.toArray(new WebServiceFeature[wsFeatures.size()]));
          }
 else {
            injValue=service.getPort(requestedPortType);
          }
        }
      }
    }
 else {
      QName serviceName=desc.getServiceName();
      if (serviceName == null) {
        serviceName=new QName(""String_Node_Str"",""String_Node_Str"");
      }
      ServiceFactory serviceFac=ServiceFactory.newInstance();
      serviceDelegate=serviceFac.createService(serviceName);
    }
    InvocationHandler handler=null;
    if (serviceDelegate != null) {
      handler=new ServiceInvocationHandler(desc,serviceDelegate,cl);
      returnObj=Proxy.newProxyInstance(cl,new Class[]{serviceInterfaceClass},handler);
    }
 else     if (jaxwsDelegate != null) {
      returnObj=jaxwsDelegate;
    }
 else     if (injValue != null) {
      returnObj=injValue;
    }
  }
 catch (  PrivilegedActionException pae) {
    logger.log(Level.WARNING,""String_Node_Str"",pae);
    NamingException ne=new NamingException();
    ne.initCause(pae.getCause());
    throw ne;
  }
catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    NamingException ne=new NamingException();
    ne.initCause(e);
    throw ne;
  }
 finally {
    WSContainerResolver.unset();
  }
  return returnObj;
}","public Object resolveWSReference(ServiceReferenceDescriptor desc,Context context) throws NamingException {
  Class serviceInterfaceClass=null;
  Object returnObj=null;
  WsUtil wsUtil=new WsUtil();
  InitialContext iContext=new InitialContext();
  if (desc.hasLookupName()) {
    return iContext.lookup(desc.getLookupName());
  }
  try {
    WSContainerResolver.set(desc);
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    serviceInterfaceClass=cl.loadClass(desc.getServiceInterface());
    resolvePortComponentLinks(desc);
    javax.xml.rpc.Service serviceDelegate=null;
    javax.xml.ws.Service jaxwsDelegate=null;
    Object injValue=null;
    if (desc.hasGeneratedServiceInterface() || desc.hasWsdlFile()) {
      String serviceImplName=desc.getServiceImplClassName();
      if (serviceImplName != null) {
        Class serviceImplClass=cl.loadClass(serviceImplName);
        serviceDelegate=(javax.xml.rpc.Service)serviceImplClass.newInstance();
      }
 else {
        if (javax.xml.ws.Service.class.isAssignableFrom(serviceInterfaceClass) && !javax.xml.ws.Service.class.equals(serviceInterfaceClass)) {
          injValue=initiateInstance(serviceInterfaceClass,desc);
        }
 else {
          if (desc.isInjectable()) {
            InjectionTarget target=desc.getInjectionTargets().iterator().next();
            Class serviceType=null;
            if (target.isFieldInjectable()) {
              java.lang.reflect.Field f=target.getField();
              if (f == null) {
                String fName=target.getFieldName();
                Class targetClass=cl.loadClass(target.getClassName());
                try {
                  f=targetClass.getDeclaredField(fName);
                }
 catch (                java.lang.NoSuchFieldException nsfe) {
                }
              }
              if (f != null) {
                serviceType=f.getType();
              }
            }
            if (target.isMethodInjectable()) {
              Method m=target.getMethod();
              if (m == null) {
                String mName=target.getMethodName();
                Class targetClass=cl.loadClass(target.getClassName());
                try {
                  m=targetClass.getDeclaredMethod(mName);
                }
 catch (                java.lang.NoSuchMethodException nsfe) {
                }
              }
              if (m != null && m.getParameterTypes().length == 1) {
                serviceType=m.getParameterTypes()[0];
              }
            }
            if (serviceType != null) {
              Class loadedSvcClass=cl.loadClass(serviceType.getCanonicalName());
              injValue=initiateInstance(loadedSvcClass,desc);
            }
          }
        }
        if (injValue == null) {
          javax.xml.ws.Service svc=javax.xml.ws.Service.create((new WsUtil()).privilegedGetServiceRefWsdl(desc),desc.getServiceName());
          jaxwsDelegate=new JAXWSServiceDelegate(desc,svc,cl);
        }
      }
      if (desc.hasHandlers()) {
        javax.xml.rpc.Service configuredService=wsUtil.createConfiguredService(desc);
        Iterator ports=configuredService.getPorts();
        wsUtil.configureHandlerChain(desc,serviceDelegate,ports,cl);
      }
      if (javax.xml.ws.Service.class.isAssignableFrom(serviceInterfaceClass)) {
        javax.xml.ws.Service service=(injValue != null ? (javax.xml.ws.Service)injValue : jaxwsDelegate);
        if (service != null) {
          wsUtil.configureJAXWSClientHandlers(service,desc);
        }
        if (injValue != null && desc.getInjectionTargetType() != null) {
          Class requestedPortType=service.getClass().getClassLoader().loadClass(desc.getInjectionTargetType());
          ArrayList<WebServiceFeature> wsFeatures=getWebServiceFeatures(desc);
          if (wsFeatures.size() > 0) {
            injValue=service.getPort(requestedPortType,wsFeatures.toArray(new WebServiceFeature[wsFeatures.size()]));
          }
 else {
            injValue=service.getPort(requestedPortType);
          }
        }
      }
    }
 else {
      QName serviceName=desc.getServiceName();
      if (serviceName == null) {
        serviceName=new QName(""String_Node_Str"",""String_Node_Str"");
      }
      ServiceFactory serviceFac=ServiceFactory.newInstance();
      serviceDelegate=serviceFac.createService(serviceName);
    }
    InvocationHandler handler=null;
    if (serviceDelegate != null) {
      handler=new ServiceInvocationHandler(desc,serviceDelegate,cl);
      returnObj=Proxy.newProxyInstance(cl,new Class[]{serviceInterfaceClass},handler);
    }
 else     if (jaxwsDelegate != null) {
      returnObj=jaxwsDelegate;
    }
 else     if (injValue != null) {
      returnObj=injValue;
    }
  }
 catch (  PrivilegedActionException pae) {
    logger.log(Level.WARNING,""String_Node_Str"",pae);
    NamingException ne=new NamingException();
    ne.initCause(pae.getCause());
    throw ne;
  }
catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
    NamingException ne=new NamingException();
    ne.initCause(e);
    throw ne;
  }
 finally {
    WSContainerResolver.unset();
  }
  return returnObj;
}"
30123,"/** 
 * Prepares the application bits for running in the application server. For certain cases, this is exploding the jar file to a format the ContractProvider instance is expecting, generating non portable artifacts and other application specific tasks. Failure to prepare should throw an exception which will cause the overall deployment to fail.
 * @param dc deployment context
 * @return true if the prepare phase was successful
 */
@Override public boolean prepare(DeploymentContext dc){
  try {
    Application app=dc.getModuleMetaData(Application.class);
    if (app == null) {
      logger.severe(format(rb.getString(""String_Node_Str"")));
      return false;
    }
    BundleDescriptor bundle=DOLUtils.getCurrentBundleForContext(dc);
    String moduleCP=getModuleClassPath(dc);
    List<URL> moduleCPUrls=ASClassLoaderUtil.getURLsFromClasspath(moduleCP,File.pathSeparator,null);
    ClassLoader oldCl=Thread.currentThread().getContextClassLoader();
    URLClassLoader newCl=new URLClassLoader(ASClassLoaderUtil.convertURLListToArray(moduleCPUrls),oldCl);
    Thread.currentThread().setContextClassLoader(newCl);
    WebServicesDescriptor wsDesc=bundle.getWebServices();
    for (    WebService ws : wsDesc.getWebServices()) {
      if ((new WsUtil()).isJAXWSbasedService(ws)) {
        setupJaxWSServiceForDeployment(dc,ws);
      }
 else {
        JAXRPCCodeGenFacade facade=habitat.getByContract(JAXRPCCodeGenFacade.class);
        if (facade != null) {
          facade.run(habitat,dc,moduleCP,false);
        }
 else {
          throw new DeploymentException(rb.getString(""String_Node_Str""));
        }
      }
    }
    doWebServicesDeployment(app,dc);
    Thread.currentThread().setContextClassLoader(oldCl);
    WebServicesContainer container=habitat.getComponent(WebServicesContainer.class);
    WebServicesDeploymentMBean bean=container.getDeploymentBean();
    WebServiceDeploymentNotifier notifier=getDeploymentNotifier();
    bean.deploy(wsDesc,notifier);
    return true;
  }
 catch (  Exception ex) {
    RuntimeException re=new RuntimeException(ex.getMessage());
    re.initCause(ex);
    throw re;
  }
}","/** 
 * Prepares the application bits for running in the application server. For certain cases, this is exploding the jar file to a format the ContractProvider instance is expecting, generating non portable artifacts and other application specific tasks. Failure to prepare should throw an exception which will cause the overall deployment to fail.
 * @param dc deployment context
 * @return true if the prepare phase was successful
 */
@Override public boolean prepare(DeploymentContext dc){
  try {
    Application app=dc.getModuleMetaData(Application.class);
    if (app == null) {
      logger.severe(format(rb.getString(""String_Node_Str"")));
      return false;
    }
    BundleDescriptor bundle=DOLUtils.getCurrentBundleForContext(dc);
    String moduleCP=getModuleClassPath(dc);
    final List<URL> moduleCPUrls=ASClassLoaderUtil.getURLsFromClasspath(moduleCP,File.pathSeparator,null);
    final ClassLoader oldCl=Thread.currentThread().getContextClassLoader();
    URLClassLoader newCl=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
      @Override public URLClassLoader run(){
        return new URLClassLoader(ASClassLoaderUtil.convertURLListToArray(moduleCPUrls),oldCl);
      }
    }
);
    Thread.currentThread().setContextClassLoader(newCl);
    WebServicesDescriptor wsDesc=bundle.getWebServices();
    for (    WebService ws : wsDesc.getWebServices()) {
      if ((new WsUtil()).isJAXWSbasedService(ws)) {
        setupJaxWSServiceForDeployment(dc,ws);
      }
 else {
        JAXRPCCodeGenFacade facade=habitat.getByContract(JAXRPCCodeGenFacade.class);
        if (facade != null) {
          facade.run(habitat,dc,moduleCP,false);
        }
 else {
          throw new DeploymentException(rb.getString(""String_Node_Str""));
        }
      }
    }
    doWebServicesDeployment(app,dc);
    Thread.currentThread().setContextClassLoader(oldCl);
    WebServicesContainer container=habitat.getComponent(WebServicesContainer.class);
    WebServicesDeploymentMBean bean=container.getDeploymentBean();
    WebServiceDeploymentNotifier notifier=getDeploymentNotifier();
    bean.deploy(wsDesc,notifier);
    return true;
  }
 catch (  Exception ex) {
    RuntimeException re=new RuntimeException(ex.getMessage());
    re.initCause(ex);
    throw re;
  }
}"
30124,"public void downloadFile(URL httpUrl,File toFile) throws Exception {
  InputStream is=null;
  FileOutputStream os=null;
  try {
    if (!toFile.createNewFile()) {
      throw new Exception(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",toFile.getAbsolutePath()));
    }
    is=httpUrl.openStream();
    os=new FileOutputStream(toFile,true);
    int readCount;
    byte[] buffer=new byte[10240];
    while (true) {
      readCount=is.read(buffer,0,10240);
      if (readCount != -1) {
        os.write(buffer,0,readCount);
      }
 else {
        break;
      }
    }
  }
  finally {
    if (is != null) {
      is.close();
    }
    if (os != null) {
      os.flush();
      os.close();
    }
  }
}","public void downloadFile(URL httpUrl,File toFile) throws Exception {
  InputStream is=null;
  FileOutputStream os=null;
  try {
    if (!toFile.createNewFile()) {
      throw new Exception(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",toFile.getAbsolutePath()));
    }
    is=httpUrl.openStream();
    os=new FileOutputStream(toFile,true);
    int readCount;
    byte[] buffer=new byte[10240];
    while (true) {
      readCount=is.read(buffer,0,10240);
      if (readCount != -1) {
        os.write(buffer,0,readCount);
      }
 else {
        break;
      }
    }
    os.flush();
  }
  finally {
    try {
      if (is != null) {
        is.close();
      }
    }
  finally {
      if (os != null) {
        os.close();
      }
    }
  }
}"
30125,"private void ctor(InputStream inStream,File anExplodeDir) throws ZipFileException {
  insist(anExplodeDir != null);
  explodeDir=anExplodeDir;
  try {
    zipStream=new ZipInputStream(inStream);
    checkExplodeDir();
  }
 catch (  Throwable t) {
    if (zipStream != null) {
      try {
        zipStream.close();
      }
 catch (      Throwable thr) {
      }
    }
    throw new ZipFileException(t.toString());
  }
}","/** 
 * /******************************** Private  /
 */
private void ctor(InputStream inStream,File anExplodeDir) throws ZipFileException {
  insist(anExplodeDir != null);
  explodeDir=anExplodeDir;
  try {
    zipStream=new ZipInputStream(inStream);
    checkExplodeDir();
  }
 catch (  Throwable t) {
    if (zipStream != null) {
      try {
        zipStream.close();
      }
 catch (      Throwable thr) {
      }
    }
    throw new ZipFileException(t.toString());
  }
}"
30126,"public static MbeanService getInstance(){
  if (habitat == null)   return null;
  return habitat.getComponent(MbeanService.class);
}","public static MbeanService getInstance(){
  if (habitat == null)   return null;
  if (mbeanService != null)   return mbeanService;
  return habitat.getComponent(MbeanService.class);
}"
30127,"void logCommandLine(){
  StringBuilder sb=new StringBuilder();
  for (  String s : commandLine) {
    sb.append(NEWLINE);
    sb.append(s);
  }
  if (!isFakeLaunch()) {
    GFLauncherLogger.info(""String_Node_Str"",sb.toString());
  }
}","void logCommandLine(){
  StringBuilder sb=new StringBuilder();
  for (  String s : commandLine) {
    sb.append(NEWLINE);
    sb.append(s);
  }
  if (!isFakeLaunch()) {
    GFLauncherLogger.fine(""String_Node_Str"",sb.toString());
  }
}"
30128,"public synchronized void add(T key){
  cache.put(key,null);
}","public void add(T key){
synchronized (cache) {
    cache.put(key,null);
  }
}"
30129,"/** 
 * Return the specified URL with the nonce added to the query string. 
 * @param url URL to be modified
 */
private String addNonce(String url){
  if ((url == null) || (nonce == null))   return (url);
  String path=url;
  String query=""String_Node_Str"";
  String anchor=""String_Node_Str"";
  int pound=path.indexOf('#');
  if (pound >= 0) {
    anchor=path.substring(pound);
    path=path.substring(0,pound);
  }
  int question=path.indexOf('?');
  if (question >= 0) {
    query=path.substring(question);
    path=path.substring(0,question);
  }
  StringBuilder sb=new StringBuilder(path);
  if (query.length() > 0) {
    sb.append(query);
    sb.append('&');
  }
 else {
    sb.append('?');
  }
  sb.append(Constants.CSRF_NONCE_REQUEST_PARAM);
  sb.append('=');
  sb.append(nonce);
  sb.append(anchor);
  return (sb.toString());
}","/** 
 * Return the specified URL with the nonce added to the query string.
 * @param url URL to be modified
 */
private String addNonce(String url){
  if ((url == null) || (nonce == null)) {
    return (url);
  }
  String path=url;
  String query=""String_Node_Str"";
  String anchor=""String_Node_Str"";
  int pound=path.indexOf('#');
  if (pound >= 0) {
    anchor=path.substring(pound);
    path=path.substring(0,pound);
  }
  int question=path.indexOf('?');
  if (question >= 0) {
    query=path.substring(question);
    path=path.substring(0,question);
  }
  StringBuilder sb=new StringBuilder(path);
  if (query.length() > 0) {
    sb.append(query);
    sb.append('&');
  }
 else {
    sb.append('?');
  }
  sb.append(Constants.CSRF_NONCE_REQUEST_PARAM);
  sb.append('=');
  sb.append(nonce);
  sb.append(anchor);
  return (sb.toString());
}"
30130,"@Override protected boolean removeEldestEntry(Map.Entry<K,V> eldest){
  if (size() > cacheSize) {
    return true;
  }
  return false;
}","@Override protected boolean removeEldestEntry(Map.Entry<T,T> eldest){
  if (size() > cacheSize) {
    return true;
  }
  return false;
}"
30131,"public synchronized boolean contains(T key){
  return cache.containsKey(key);
}","public boolean contains(T key){
synchronized (cache) {
    return cache.containsKey(key);
  }
}"
30132,"public LruCache(final int cacheSize){
  cache=new FixedSizedLinkedHashMap<T,T>(cacheSize);
}","public LruCache(final int cacheSize){
  cache=new LinkedHashMap<T,T>(){
    private static final long serialVersionUID=1L;
    @Override protected boolean removeEldestEntry(    Map.Entry<T,T> eldest){
      if (size() > cacheSize) {
        return true;
      }
      return false;
    }
  }
;
}"
30133,"/** 
 * Generate a once time token (nonce) for authenticating subsequent requests. This will also add the token to the session. The nonce generation is a simplified version of ManagerBase.generateSessionId().
 */
protected String generateNonce(){
  byte random[]=new byte[16];
  StringBuilder buffer=new StringBuilder();
  randomSource.nextBytes(random);
  for (int j=0; j < random.length; j++) {
    byte b1=(byte)((random[j] & 0xf0) >> 4);
    byte b2=(byte)(random[j] & 0x0f);
    if (b1 < 10)     buffer.append((char)('0' + b1));
 else     buffer.append((char)('A' + (b1 - 10)));
    if (b2 < 10)     buffer.append((char)('0' + b2));
 else     buffer.append((char)('A' + (b2 - 10)));
  }
  return buffer.toString();
}","/** 
 * Generate a once time token (nonce) for authenticating subsequent requests. This will also add the token to the session. The nonce generation is a simplified version of ManagerBase.generateSessionId().
 */
protected String generateNonce(){
  byte random[]=new byte[16];
  StringBuilder buffer=new StringBuilder();
  randomSource.nextBytes(random);
  for (int j=0; j < random.length; j++) {
    byte b1=(byte)((random[j] & 0xf0) >> 4);
    byte b2=(byte)(random[j] & 0x0f);
    if (b1 < 10) {
      buffer.append((char)('0' + b1));
    }
 else {
      buffer.append((char)('A' + (b1 - 10)));
    }
    if (b2 < 10) {
      buffer.append((char)('0' + b2));
    }
 else {
      buffer.append((char)('A' + (b2 - 10)));
    }
  }
  return buffer.toString();
}"
30134,"@Override public void init(FilterConfig filterConfig) throws ServletException {
  Enumeration<String> paramNames=filterConfig.getInitParameterNames();
  while (paramNames.hasMoreElements()) {
    String paramName=paramNames.nextElement();
    if (!IntrospectionUtils.setProperty(this,paramName,filterConfig.getInitParameter(paramName))) {
      getLogger().warning(sm.getString(""String_Node_Str"",paramName,this.getClass().getName()));
    }
  }
}","@Override public void init(FilterConfig filterConfig) throws ServletException {
  Enumeration<String> paramNames=filterConfig.getInitParameterNames();
  while (paramNames.hasMoreElements()) {
    String paramName=paramNames.nextElement();
    if (!IntrospectionUtils.setProperty(this,paramName,filterConfig.getInitParameter(paramName))) {
      String msg=sm.getString(""String_Node_Str"",paramName,this.getClass().getName());
      if (isConfigProblemFatal()) {
        throw new ServletException(msg);
      }
 else {
        getLogger().warning(msg);
      }
    }
  }
}"
30135,"/** 
 * A Simple rotate method to close the old file and start the new one when the limit is reached.
 */
public void rotate(){
  final GFFileHandler thisInstance=this;
  java.security.AccessController.doPrivileged(new java.security.PrivilegedAction(){
    public Object run(){
      thisInstance.flush();
      thisInstance.close();
      try {
        if (!absoluteFile.exists()) {
          File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
          creatingDeletedLogFile.createNewFile();
          absoluteFile=creatingDeletedLogFile;
        }
        File oldFile=absoluteFile;
        StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
        logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
        File rotatedFile=new File(renamedFileName.toString());
        boolean renameSuccess=oldFile.renameTo(rotatedFile);
        if (!renameSuccess) {
          FileUtils.copy(absoluteFile,rotatedFile);
          File freshServerLogFile=getLogFileName();
          FileOutputStream fo=new FileOutputStream(freshServerLogFile);
          fo.close();
        }
        openFile(getLogFileName());
        absoluteFile=getLogFileName();
        if (dayBasedFileRotation) {
          LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
        }
 else {
          LogRotationTimer.getInstance().restartTimer();
        }
        cleanUpHistoryLogFiles();
      }
 catch (      IOException ix) {
        publish(new LogRecord(Level.SEVERE,""String_Node_Str"" + ix.getMessage()));
      }
      return null;
    }
  }
);
}","/** 
 * A Simple rotate method to close the old file and start the new one when the limit is reached.
 */
public void rotate(){
  final GFFileHandler thisInstance=this;
  java.security.AccessController.doPrivileged(new java.security.PrivilegedAction(){
    public Object run(){
      thisInstance.flush();
      thisInstance.close();
      try {
        if (!absoluteFile.exists()) {
          File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
          creatingDeletedLogFile.createNewFile();
          absoluteFile=creatingDeletedLogFile;
        }
        File oldFile=absoluteFile;
        StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
        logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
        File rotatedFile=new File(renamedFileName.toString());
        boolean renameSuccess=oldFile.renameTo(rotatedFile);
        FileOutputStream oldFileFO=new FileOutputStream(oldFile);
        oldFileFO.close();
        if (!renameSuccess) {
          FileUtils.copy(absoluteFile,rotatedFile);
          File freshServerLogFile=getLogFileName();
          FileOutputStream fo=new FileOutputStream(freshServerLogFile);
          fo.close();
        }
        openFile(getLogFileName());
        absoluteFile=getLogFileName();
        if (dayBasedFileRotation) {
          LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
        }
 else {
          LogRotationTimer.getInstance().restartTimer();
        }
        cleanUpHistoryLogFiles();
      }
 catch (      IOException ix) {
        publish(new LogRecord(Level.SEVERE,""String_Node_Str"" + ix.getMessage()));
      }
      return null;
    }
  }
);
}"
30136,"public Object run(){
  thisInstance.flush();
  thisInstance.close();
  try {
    if (!absoluteFile.exists()) {
      File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
      creatingDeletedLogFile.createNewFile();
      absoluteFile=creatingDeletedLogFile;
    }
    File oldFile=absoluteFile;
    StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
    logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
    File rotatedFile=new File(renamedFileName.toString());
    boolean renameSuccess=oldFile.renameTo(rotatedFile);
    if (!renameSuccess) {
      FileUtils.copy(absoluteFile,rotatedFile);
      File freshServerLogFile=getLogFileName();
      FileOutputStream fo=new FileOutputStream(freshServerLogFile);
      fo.close();
    }
    openFile(getLogFileName());
    absoluteFile=getLogFileName();
    if (dayBasedFileRotation) {
      LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
    }
 else {
      LogRotationTimer.getInstance().restartTimer();
    }
    cleanUpHistoryLogFiles();
  }
 catch (  IOException ix) {
    publish(new LogRecord(Level.SEVERE,""String_Node_Str"" + ix.getMessage()));
  }
  return null;
}","public Object run(){
  thisInstance.flush();
  thisInstance.close();
  try {
    if (!absoluteFile.exists()) {
      File creatingDeletedLogFile=new File(absoluteFile.getAbsolutePath());
      creatingDeletedLogFile.createNewFile();
      absoluteFile=creatingDeletedLogFile;
    }
    File oldFile=absoluteFile;
    StringBuffer renamedFileName=new StringBuffer(absoluteFile + ""String_Node_Str"");
    logRotateDateFormatter.format(new Date(),renamedFileName,new FieldPosition(0));
    File rotatedFile=new File(renamedFileName.toString());
    boolean renameSuccess=oldFile.renameTo(rotatedFile);
    FileOutputStream oldFileFO=new FileOutputStream(oldFile);
    oldFileFO.close();
    if (!renameSuccess) {
      FileUtils.copy(absoluteFile,rotatedFile);
      File freshServerLogFile=getLogFileName();
      FileOutputStream fo=new FileOutputStream(freshServerLogFile);
      fo.close();
    }
    openFile(getLogFileName());
    absoluteFile=getLogFileName();
    if (dayBasedFileRotation) {
      LogRotationTimer.getInstance().restartTimerForDayBasedRotation();
    }
 else {
      LogRotationTimer.getInstance().restartTimer();
    }
    cleanUpHistoryLogFiles();
  }
 catch (  IOException ix) {
    publish(new LogRecord(Level.SEVERE,""String_Node_Str"" + ix.getMessage()));
  }
  return null;
}"
30137,"MeteredStream(OutputStream out,long written){
  this.out=out;
  this.written=written;
}","MeteredStream(OutputStream out,long written){
  this.out=out;
  this.written=written;
  isOpen=true;
}"
30138,"public void close() throws IOException {
  out.close();
}","public void close() throws IOException {
  if (isOpen) {
    isOpen=false;
    flush();
    out.close();
  }
}"
30139,"public void process(ReadableArchive archiveFile,T bundleDesc,ClassLoader classLoader,Parser parser) throws IOException {
  File file=new File(archiveFile.getURI());
  if (parser != null) {
    classParser=parser;
  }
 else {
    ParsingContext.Builder builder=new ParsingContext.Builder();
    builder.logger(logger);
    ParsingContext pc=builder.build();
    classParser=new Parser(pc);
  }
  process(file,bundleDesc,classLoader);
  completeProcess(bundleDesc,archiveFile);
  calculateResults();
}","public void process(ReadableArchive archiveFile,T bundleDesc,ClassLoader classLoader,Parser parser) throws IOException {
  File file=new File(archiveFile.getURI());
  setParser(parser);
  process(file,bundleDesc,classLoader);
  completeProcess(bundleDesc,archiveFile);
  calculateResults();
}"
30140,"/** 
 * This add all classes in given jarFile to be scanned.
 * @param jarURI
 */
protected void addScanURI(final URI jarURI){
  scannedURI.add(jarURI);
  JarInputStream jis=null;
  try {
    final InputStream jarInputStream=jarURI.toURL().openStream();
    jis=new JarInputStream(jarInputStream);
    JarEntry je;
    while ((je=jis.getNextJarEntry()) != null) {
      if (je.getName().endsWith(""String_Node_Str"")) {
        if (processAllClasses) {
          addEntry(je);
        }
 else {
          final ByteArrayOutputStream baos=new ByteArrayOutputStream();
          int bytesRead;
          final byte[] buffer=new byte[je.getSize() > -1 ? (int)je.getSize() : DEFAULT_ENTRY_BUFFER_SIZE];
          while ((bytesRead=jis.read(buffer)) != -1) {
            baos.write(buffer,0,bytesRead);
          }
          if (classFile.containsAnnotation(baos.toByteArray())) {
            addEntry(je);
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,ex.getMessage() + ""String_Node_Str"" + jarURI.toASCIIString(),ex);
  }
 finally {
    if (jis != null) {
      try {
        jis.close();
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,jarURI.toASCIIString(),ex);
      }
    }
  }
}","/** 
 * This add all classes in given jarFile to be scanned.
 * @param jarURI
 */
protected void addScanURI(final URI jarURI) throws IOException {
  addScanJar(new File(jarURI));
}"
30141,"/** 
 * This will include all class in directory to be scanned. param directory
 */
protected void addScanDirectory(File directory) throws IOException {
  scannedURI.add(directory.toURI());
  if (processAllClasses) {
    initScanDirectory(directory,directory);
  }
 else {
    classParser.parse(directory,null);
  }
}","/** 
 * This will include all class in directory to be scanned. param directory
 */
protected void addScanDirectory(File directory) throws IOException {
  scannedURI.add(directory.toURI());
  if (needScanAnnotation) {
    classParser.parse(directory,null);
  }
}"
30142,"/** 
 * This add all classes in given jarFile to be scanned.
 * @param jarFile
 */
protected void addScanJar(File jarFile) throws IOException {
  try {
    if (!jarFile.exists()) {
      return;
    }
    scannedURI.add(jarFile.toURI());
    if (processAllClasses) {
      JarFile jf=null;
      try {
        jf=new JarFile(jarFile);
        Enumeration<JarEntry> entriesEnum=jf.entries();
        while (entriesEnum.hasMoreElements()) {
          JarEntry je=entriesEnum.nextElement();
          if (je.getName().endsWith(""String_Node_Str"")) {
            addEntry(je);
          }
        }
      }
  finally {
        if (jf != null)         jf.close();
      }
    }
 else {
      classParser.parse(jarFile,null);
    }
  }
 catch (  ZipException ze) {
    logger.log(Level.WARNING,ze.getMessage() + ""String_Node_Str"" + jarFile.getPath());
  }
}","/** 
 * This add all classes in given jarFile to be scanned.
 * @param jarFile
 */
protected void addScanJar(File jarFile) throws IOException {
  try {
    if (!jarFile.exists()) {
      return;
    }
    scannedURI.add(jarFile.toURI());
    if (needScanAnnotation) {
      classParser.parse(jarFile,null);
    }
  }
 catch (  ZipException ze) {
    logger.log(Level.WARNING,ze.getMessage() + ""String_Node_Str"" + jarFile.getPath());
  }
}"
30143,"/** 
 * This scanner will scan the archiveFile for annotation processing.
 * @param readableArchive the archive to process
 * @param webBundleDesc existing bundle descriptor to add to
 * @param classLoader classloader to load archive classes with.
 */
@Override public void process(ReadableArchive readableArchive,WebBundleDescriptor webBundleDesc,ClassLoader classLoader,Parser parser) throws IOException {
  this.archiveFile=new File(readableArchive.getURI());
  this.classLoader=classLoader;
  if (parser == null) {
    ParsingContext.Builder builder=new ParsingContext.Builder();
    builder.logger(logger);
    ParsingContext pc=builder.build();
    parser=new Parser(pc);
  }
  this.classParser=parser;
  if (AnnotationUtils.getLogger().isLoggable(Level.FINE)) {
    AnnotationUtils.getLogger().fine(""String_Node_Str"" + archiveFile);
    AnnotationUtils.getLogger().fine(""String_Node_Str"" + webBundleDesc);
    AnnotationUtils.getLogger().fine(""String_Node_Str"" + classLoader);
  }
  if (!archiveFile.isDirectory()) {
    return;
  }
  if (isScanOtherLibraries()) {
    addLibraryJars(webBundleDesc,readableArchive);
    calculateResults();
    return;
  }
  File webinf=new File(archiveFile,""String_Node_Str"");
  if (webBundleDesc instanceof WebFragmentDescriptor) {
    WebFragmentDescriptor webFragmentDesc=(WebFragmentDescriptor)webBundleDesc;
    File lib=new File(webinf,""String_Node_Str"");
    if (lib.exists()) {
      File jarFile=new File(lib,webFragmentDesc.getJarName());
      if (jarFile.exists()) {
        if (jarFile.isDirectory()) {
          addScanDirectory(jarFile);
        }
 else {
          addScanJar(jarFile);
        }
      }
    }
  }
 else {
    File classes=new File(webinf,""String_Node_Str"");
    if (classes.exists()) {
      addScanDirectory(classes);
    }
    scanXmlDefinedClassesIfNecessary(webBundleDesc);
  }
  calculateResults();
}","/** 
 * This scanner will scan the archiveFile for annotation processing.
 * @param readableArchive the archive to process
 * @param webBundleDesc existing bundle descriptor to add to
 * @param classLoader classloader to load archive classes with.
 */
@Override public void process(ReadableArchive readableArchive,WebBundleDescriptor webBundleDesc,ClassLoader classLoader,Parser parser) throws IOException {
  this.archiveFile=new File(readableArchive.getURI());
  this.classLoader=classLoader;
  setParser(parser);
  if (AnnotationUtils.getLogger().isLoggable(Level.FINE)) {
    AnnotationUtils.getLogger().fine(""String_Node_Str"" + archiveFile);
    AnnotationUtils.getLogger().fine(""String_Node_Str"" + webBundleDesc);
    AnnotationUtils.getLogger().fine(""String_Node_Str"" + classLoader);
  }
  if (!archiveFile.isDirectory()) {
    return;
  }
  if (isScanOtherLibraries()) {
    addLibraryJars(webBundleDesc,readableArchive);
    calculateResults();
    return;
  }
  File webinf=new File(archiveFile,""String_Node_Str"");
  if (webBundleDesc instanceof WebFragmentDescriptor) {
    WebFragmentDescriptor webFragmentDesc=(WebFragmentDescriptor)webBundleDesc;
    File lib=new File(webinf,""String_Node_Str"");
    if (lib.exists()) {
      File jarFile=new File(lib,webFragmentDesc.getJarName());
      if (jarFile.exists()) {
        if (jarFile.isDirectory()) {
          addScanDirectory(jarFile);
        }
 else {
          addScanJar(jarFile);
        }
      }
    }
  }
 else {
    File classes=new File(webinf,""String_Node_Str"");
    if (classes.exists()) {
      addScanDirectory(classes);
    }
    scanXmlDefinedClassesIfNecessary(webBundleDesc);
  }
  calculateResults();
}"
30144,"/** 
 * Process annotations in a bundle descriptor, the annoation processing is dependent on the type of descriptor being passed.
 */
protected ProcessingResult processAnnotations(RootDeploymentDescriptor bundleDesc,ModuleScanner scanner,ReadableArchive archive) throws AnnotationProcessorException, IOException {
  if (scanner == null) {
    return null;
  }
  AnnotatedElementHandler aeHandler=AnnotatedElementHandlerFactory.createAnnotatedElementHandler(bundleDesc);
  if (aeHandler == null) {
    return null;
  }
  Parser parser=null;
  if (archive.getParentArchive() != null) {
    parser=archive.getParentArchive().getExtraData(Parser.class);
  }
 else {
    parser=archive.getExtraData(Parser.class);
  }
  if (parser == null) {
    ParsingContext parsingContext=new ParsingContext.Builder().logger(logger).executorService(getExecutorService()).build();
    parser=new Parser(parsingContext);
  }
  scanner.process(archive,bundleDesc,classLoader,parser);
  if (!scanner.getElements().isEmpty()) {
    if (bundleDesc.isDDWithNoAnnotationAllowed()) {
      String ddName=getStandardDDFile().getDeploymentDescriptorPath();
      String explodedArchiveName=new File(archive.getURI()).getName();
      String archiveName=FileUtils.revertFriendlyFilenameExtension(explodedArchiveName);
      throw new AnnotationProcessorException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{ddName,archiveName,bundleDesc.getSpecVersion()}));
    }
    AnnotationProcessor ap=annotationFactory.getAnnotationProcessor();
    ProcessingContext ctx=ap.createContext();
    ctx.setArchive(archive);
    if (annotationErrorHandler != null) {
      ctx.setErrorHandler(annotationErrorHandler);
    }
    ctx.setProcessingInput(scanner);
    ctx.pushHandler(aeHandler);
    ClassLoader originalBundleClassLoader=null;
    try {
      originalBundleClassLoader=bundleDesc.getClassLoader();
    }
 catch (    Exception e) {
    }
    if (originalBundleClassLoader == null) {
      bundleDesc.setClassLoader(classLoader);
    }
    try {
      return ap.process(ctx);
    }
  finally {
      if (originalBundleClassLoader == null) {
        bundleDesc.setClassLoader(null);
      }
    }
  }
  return null;
}","/** 
 * Process annotations in a bundle descriptor, the annoation processing is dependent on the type of descriptor being passed.
 */
protected ProcessingResult processAnnotations(RootDeploymentDescriptor bundleDesc,ModuleScanner scanner,ReadableArchive archive) throws AnnotationProcessorException, IOException {
  if (scanner == null) {
    return null;
  }
  AnnotatedElementHandler aeHandler=AnnotatedElementHandlerFactory.createAnnotatedElementHandler(bundleDesc);
  if (aeHandler == null) {
    return null;
  }
  Parser parser=null;
  if (archive.getParentArchive() != null) {
    parser=archive.getParentArchive().getExtraData(Parser.class);
  }
 else {
    parser=archive.getExtraData(Parser.class);
  }
  scanner.process(archive,bundleDesc,classLoader,parser);
  if (!scanner.getElements().isEmpty()) {
    if (bundleDesc.isDDWithNoAnnotationAllowed()) {
      String ddName=getStandardDDFile().getDeploymentDescriptorPath();
      String explodedArchiveName=new File(archive.getURI()).getName();
      String archiveName=FileUtils.revertFriendlyFilenameExtension(explodedArchiveName);
      throw new AnnotationProcessorException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{ddName,archiveName,bundleDesc.getSpecVersion()}));
    }
    AnnotationProcessor ap=annotationFactory.getAnnotationProcessor();
    ProcessingContext ctx=ap.createContext();
    ctx.setArchive(archive);
    if (annotationErrorHandler != null) {
      ctx.setErrorHandler(annotationErrorHandler);
    }
    ctx.setProcessingInput(scanner);
    ctx.pushHandler(aeHandler);
    ClassLoader originalBundleClassLoader=null;
    try {
      originalBundleClassLoader=bundleDesc.getClassLoader();
    }
 catch (    Exception e) {
    }
    if (originalBundleClassLoader == null) {
      bundleDesc.setClassLoader(classLoader);
    }
    try {
      return ap.process(ctx);
    }
  finally {
      if (originalBundleClassLoader == null) {
        bundleDesc.setClassLoader(null);
      }
    }
  }
  return null;
}"
30145,"private ExecutorService createExecutorService(){
  Runtime runtime=Runtime.getRuntime();
  int nrOfProcessors=runtime.availableProcessors();
  return Executors.newFixedThreadPool(nrOfProcessors,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread t=new Thread(r);
      t.setName(""String_Node_Str"");
      t.setDaemon(true);
      return t;
    }
  }
);
}","private ExecutorService createExecutorService(){
  Runtime runtime=Runtime.getRuntime();
  int nrOfProcessors=runtime.availableProcessors();
  return Executors.newFixedThreadPool(nrOfProcessors,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread t=new Thread(r);
      t.setName(""String_Node_Str"");
      t.setContextClassLoader(getClass().getClassLoader());
      t.setDaemon(true);
      return t;
    }
  }
);
}"
30146,"@Override public Thread newThread(Runnable r){
  Thread t=new Thread(r);
  t.setName(""String_Node_Str"");
  t.setDaemon(true);
  return t;
}","@Override public Thread newThread(Runnable r){
  Thread t=new Thread(r);
  t.setName(""String_Node_Str"");
  t.setContextClassLoader(getClass().getClassLoader());
  t.setDaemon(true);
  return t;
}"
30147,"public void executeInitSql(Properties dbProps,String sqlFile){
  try {
    System.out.println(""String_Node_Str"" + sqlFile);
    Project project=new Project();
    project.init();
    SQLExec task=new SQLExec();
    SQLExec.OnError error=new SQLExec.OnError();
    error.setValue(""String_Node_Str"");
    task.setDriver(""String_Node_Str"");
    String url=""String_Node_Str"" + dbProps.getProperty(""String_Node_Str"") + ""String_Node_Str""+ dbProps.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ dbProps.getProperty(DatabaseProvisioner.DATABASENAME)+ ""String_Node_Str"";
    task.setUrl(url);
    task.setUserid(dbProps.getProperty(DatabaseProvisioner.USER));
    task.setPassword(dbProps.getProperty(DatabaseProvisioner.PASSWORD));
    task.setSrc(new File(sqlFile));
    task.setOnerror(error);
    String derbyClient=new File(System.getProperty(""String_Node_Str"")).getParent() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    Path path=new Path(project,derbyClient);
    path.addJavaRuntime();
    task.setClasspath(path);
    task.setProject(project);
    task.setAutocommit(true);
    task.execute();
    System.out.println(""String_Node_Str"" + sqlFile);
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"" + sqlFile + ""String_Node_Str""+ ex);
  }
}","public void executeInitSql(Properties dbProps,String sqlFile){
  try {
    System.out.println(""String_Node_Str"" + sqlFile);
    Project project=new Project();
    project.init();
    SQLExec task=new SQLExec();
    SQLExec.OnError error=new SQLExec.OnError();
    error.setValue(""String_Node_Str"");
    task.setDriver(""String_Node_Str"");
    String url=""String_Node_Str"" + dbProps.getProperty(""String_Node_Str"") + ""String_Node_Str""+ dbProps.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ dbProps.getProperty(DatabaseProvisioner.DATABASENAME)+ ""String_Node_Str"";
    task.setUrl(url);
    task.setUserid(dbProps.getProperty(DatabaseProvisioner.USER));
    task.setPassword(dbProps.getProperty(DatabaseProvisioner.PASSWORD));
    task.setSrc(new File(sqlFile));
    task.setOnerror(error);
    Path path=new Path(project,clh.getCommonClassPath());
    path.addJavaRuntime();
    task.setClasspath(path);
    task.setProject(project);
    task.setAutocommit(true);
    task.execute();
    System.out.println(""String_Node_Str"" + sqlFile);
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,""String_Node_Str"" + sqlFile + ""String_Node_Str""+ ex);
  }
}"
30148,"public void run(){
  TemplateInstance matchingTemplate=null;
  if (templateRepository != null) {
    if (templateId == null) {
      if (serviceCharacteristics != null) {
        Set<TemplateCondition> andConditions=new HashSet<TemplateCondition>();
        andConditions.add(new org.glassfish.virtualization.util.ServiceType(serviceCharacteristics.getProperty(""String_Node_Str"")));
        for (        TemplateInstance ti : templateRepository.all()) {
          boolean allConditionsSatisfied=true;
          for (          TemplateCondition condition : andConditions) {
            if (!ti.satisfies(condition)) {
              allConditionsSatisfied=false;
              break;
            }
          }
          if (allConditionsSatisfied) {
            matchingTemplate=ti;
            break;
          }
        }
        if (matchingTemplate != null) {
          templateId=matchingTemplate.getConfig().getName();
        }
      }
    }
 else {
      for (      TemplateInstance ti : templateRepository.all()) {
        if (ti.getConfig().getName().equals(templateId)) {
          matchingTemplate=ti;
          break;
        }
      }
    }
  }
  if (matchingTemplate != null) {
    try {
      VirtualCluster vCluster=virtualClusters.byName(virtualClusterName);
      PhasedFuture<AllocationPhase,VirtualMachine> future=iaas.allocate(new AllocationConstraints(matchingTemplate,vCluster),null);
      VirtualMachine vm=future.get();
      String initSqlFile=serviceConfigurations.getProperty(""String_Node_Str"");
      if (initSqlFile != null && initSqlFile.trim().length() > 0) {
        DerbyProvisioner derbyProvisioner=new DerbyProvisioner();
        Properties serviceProperties=new Properties();
        serviceProperties.putAll(derbyProvisioner.getDefaultConnectionProperties());
        serviceProperties.put(""String_Node_Str"",vm.getAddress().getHostAddress());
        serviceProperties.put(""String_Node_Str"",""String_Node_Str"");
        derbyProvisioner.executeInitSql(serviceProperties,initSqlFile);
      }
      ServiceInfo entry=new ServiceInfo();
      entry.setInstanceId(vm.getName());
      entry.setIpAddress(vm.getAddress().getHostAddress());
      entry.setState(ServiceInfo.State.Running.toString());
      entry.setServiceName(serviceName);
      entry.setAppName(appName);
      entry.setServerType(ServiceType.DATABASE.toString());
      dbServiceUtil.registerDBInfo(entry);
    }
 catch (    Throwable ex) {
      throw new RuntimeException(ex);
    }
    return;
  }
 else {
    CloudProvisioner cloudProvisioner=provisionerUtil.getCloudProvisioner();
    String instanceID=cloudProvisioner.createMasterInstance();
    String ipAddress=cloudProvisioner.getIPAddress(instanceID);
    DatabaseProvisioner dbProvisioner=provisionerUtil.getDatabaseProvisioner();
    dbProvisioner.startDatabase(ipAddress);
    ServiceInfo entry=new ServiceInfo();
    entry.setInstanceId(instanceID);
    entry.setIpAddress(ipAddress);
    entry.setState(ServiceInfo.State.Running.toString());
    entry.setServiceName(serviceName);
    entry.setAppName(appName);
    entry.setServerType(ServiceType.DATABASE.toString());
    dbServiceUtil.registerDBInfo(entry);
  }
}","public void run(){
  TemplateInstance matchingTemplate=null;
  if (templateRepository != null) {
    if (templateId == null) {
      if (serviceCharacteristics != null) {
        Set<TemplateCondition> andConditions=new HashSet<TemplateCondition>();
        andConditions.add(new org.glassfish.virtualization.util.ServiceType(serviceCharacteristics.getProperty(""String_Node_Str"")));
        for (        TemplateInstance ti : templateRepository.all()) {
          boolean allConditionsSatisfied=true;
          for (          TemplateCondition condition : andConditions) {
            if (!ti.satisfies(condition)) {
              allConditionsSatisfied=false;
              break;
            }
          }
          if (allConditionsSatisfied) {
            matchingTemplate=ti;
            break;
          }
        }
        if (matchingTemplate != null) {
          templateId=matchingTemplate.getConfig().getName();
        }
      }
    }
 else {
      for (      TemplateInstance ti : templateRepository.all()) {
        if (ti.getConfig().getName().equals(templateId)) {
          matchingTemplate=ti;
          break;
        }
      }
    }
  }
  if (matchingTemplate != null) {
    try {
      VirtualCluster vCluster=virtualClusters.byName(virtualClusterName);
      PhasedFuture<AllocationPhase,VirtualMachine> future=iaas.allocate(new AllocationConstraints(matchingTemplate,vCluster),null);
      VirtualMachine vm=future.get();
      String initSqlFile=serviceConfigurations.getProperty(""String_Node_Str"");
      if (initSqlFile != null && initSqlFile.trim().length() > 0) {
        Properties serviceProperties=new Properties();
        serviceProperties.putAll(derbyProvisioner.getDefaultConnectionProperties());
        serviceProperties.put(""String_Node_Str"",vm.getAddress().getHostAddress());
        serviceProperties.put(""String_Node_Str"",""String_Node_Str"");
        derbyProvisioner.executeInitSql(serviceProperties,initSqlFile);
      }
      ServiceInfo entry=new ServiceInfo();
      entry.setInstanceId(vm.getName());
      entry.setIpAddress(vm.getAddress().getHostAddress());
      entry.setState(ServiceInfo.State.Running.toString());
      entry.setServiceName(serviceName);
      entry.setAppName(appName);
      entry.setServerType(ServiceType.DATABASE.toString());
      dbServiceUtil.registerDBInfo(entry);
    }
 catch (    Throwable ex) {
      throw new RuntimeException(ex);
    }
    return;
  }
 else {
    CloudProvisioner cloudProvisioner=provisionerUtil.getCloudProvisioner();
    String instanceID=cloudProvisioner.createMasterInstance();
    String ipAddress=cloudProvisioner.getIPAddress(instanceID);
    DatabaseProvisioner dbProvisioner=provisionerUtil.getDatabaseProvisioner();
    dbProvisioner.startDatabase(ipAddress);
    ServiceInfo entry=new ServiceInfo();
    entry.setInstanceId(instanceID);
    entry.setIpAddress(ipAddress);
    entry.setState(ServiceInfo.State.Running.toString());
    entry.setServiceName(serviceName);
    entry.setAppName(appName);
    entry.setServerType(ServiceType.DATABASE.toString());
    dbServiceUtil.registerDBInfo(entry);
  }
}"
30149,"public void run(){
  TemplateInstance matchingTemplate=null;
  if (templateRepository != null) {
    if (templateId == null) {
      if (serviceCharacteristics != null) {
        Set<TemplateCondition> andConditions=new HashSet<TemplateCondition>();
        andConditions.add(new org.glassfish.virtualization.util.ServiceType(serviceCharacteristics.getProperty(""String_Node_Str"")));
        for (        TemplateInstance ti : templateRepository.all()) {
          boolean allConditionsSatisfied=true;
          for (          TemplateCondition condition : andConditions) {
            if (!ti.satisfies(condition)) {
              allConditionsSatisfied=false;
              break;
            }
          }
          if (allConditionsSatisfied) {
            matchingTemplate=ti;
            break;
          }
        }
        if (matchingTemplate != null) {
          templateId=matchingTemplate.getConfig().getName();
        }
      }
    }
 else {
      for (      TemplateInstance ti : templateRepository.all()) {
        if (ti.getConfig().getName().equals(templateId)) {
          matchingTemplate=ti;
          break;
        }
      }
    }
  }
  if (matchingTemplate != null) {
    try {
      VirtualCluster vCluster=virtualClusters.byName(virtualClusterName);
      PhasedFuture<AllocationPhase,VirtualMachine> future=iaas.allocate(new AllocationConstraints(matchingTemplate,vCluster),null);
      VirtualMachine vm=future.get();
      String initSqlFile=serviceConfigurations.getProperty(""String_Node_Str"");
      if (initSqlFile != null && initSqlFile.trim().length() > 0) {
        DerbyProvisioner derbyProvisioner=new DerbyProvisioner();
        Properties serviceProperties=new Properties();
        serviceProperties.putAll(derbyProvisioner.getDefaultConnectionProperties());
        serviceProperties.put(""String_Node_Str"",vm.getAddress());
        serviceProperties.put(""String_Node_Str"",""String_Node_Str"");
        derbyProvisioner.executeInitSql(serviceProperties,initSqlFile);
      }
      ServiceInfo entry=new ServiceInfo();
      entry.setInstanceId(vm.getName());
      entry.setIpAddress(vm.getAddress().getHostAddress());
      entry.setState(ServiceInfo.State.Running.toString());
      entry.setServiceName(serviceName);
      entry.setAppName(appName);
      entry.setServerType(ServiceType.DATABASE.toString());
      dbServiceUtil.registerDBInfo(entry);
    }
 catch (    Throwable ex) {
      throw new RuntimeException(ex);
    }
    return;
  }
 else {
    CloudProvisioner cloudProvisioner=provisionerUtil.getCloudProvisioner();
    String instanceID=cloudProvisioner.createMasterInstance();
    String ipAddress=cloudProvisioner.getIPAddress(instanceID);
    DatabaseProvisioner dbProvisioner=provisionerUtil.getDatabaseProvisioner();
    dbProvisioner.startDatabase(ipAddress);
    ServiceInfo entry=new ServiceInfo();
    entry.setInstanceId(instanceID);
    entry.setIpAddress(ipAddress);
    entry.setState(ServiceInfo.State.Running.toString());
    entry.setServiceName(serviceName);
    entry.setAppName(appName);
    entry.setServerType(ServiceType.DATABASE.toString());
    dbServiceUtil.registerDBInfo(entry);
  }
}","public void run(){
  TemplateInstance matchingTemplate=null;
  if (templateRepository != null) {
    if (templateId == null) {
      if (serviceCharacteristics != null) {
        Set<TemplateCondition> andConditions=new HashSet<TemplateCondition>();
        andConditions.add(new org.glassfish.virtualization.util.ServiceType(serviceCharacteristics.getProperty(""String_Node_Str"")));
        for (        TemplateInstance ti : templateRepository.all()) {
          boolean allConditionsSatisfied=true;
          for (          TemplateCondition condition : andConditions) {
            if (!ti.satisfies(condition)) {
              allConditionsSatisfied=false;
              break;
            }
          }
          if (allConditionsSatisfied) {
            matchingTemplate=ti;
            break;
          }
        }
        if (matchingTemplate != null) {
          templateId=matchingTemplate.getConfig().getName();
        }
      }
    }
 else {
      for (      TemplateInstance ti : templateRepository.all()) {
        if (ti.getConfig().getName().equals(templateId)) {
          matchingTemplate=ti;
          break;
        }
      }
    }
  }
  if (matchingTemplate != null) {
    try {
      VirtualCluster vCluster=virtualClusters.byName(virtualClusterName);
      PhasedFuture<AllocationPhase,VirtualMachine> future=iaas.allocate(new AllocationConstraints(matchingTemplate,vCluster),null);
      VirtualMachine vm=future.get();
      String initSqlFile=serviceConfigurations.getProperty(""String_Node_Str"");
      if (initSqlFile != null && initSqlFile.trim().length() > 0) {
        DerbyProvisioner derbyProvisioner=new DerbyProvisioner();
        Properties serviceProperties=new Properties();
        serviceProperties.putAll(derbyProvisioner.getDefaultConnectionProperties());
        serviceProperties.put(""String_Node_Str"",vm.getAddress().getHostAddress());
        serviceProperties.put(""String_Node_Str"",""String_Node_Str"");
        derbyProvisioner.executeInitSql(serviceProperties,initSqlFile);
      }
      ServiceInfo entry=new ServiceInfo();
      entry.setInstanceId(vm.getName());
      entry.setIpAddress(vm.getAddress().getHostAddress());
      entry.setState(ServiceInfo.State.Running.toString());
      entry.setServiceName(serviceName);
      entry.setAppName(appName);
      entry.setServerType(ServiceType.DATABASE.toString());
      dbServiceUtil.registerDBInfo(entry);
    }
 catch (    Throwable ex) {
      throw new RuntimeException(ex);
    }
    return;
  }
 else {
    CloudProvisioner cloudProvisioner=provisionerUtil.getCloudProvisioner();
    String instanceID=cloudProvisioner.createMasterInstance();
    String ipAddress=cloudProvisioner.getIPAddress(instanceID);
    DatabaseProvisioner dbProvisioner=provisionerUtil.getDatabaseProvisioner();
    dbProvisioner.startDatabase(ipAddress);
    ServiceInfo entry=new ServiceInfo();
    entry.setInstanceId(instanceID);
    entry.setIpAddress(ipAddress);
    entry.setState(ServiceInfo.State.Running.toString());
    entry.setServiceName(serviceName);
    entry.setAppName(appName);
    entry.setServerType(ServiceType.DATABASE.toString());
    dbServiceUtil.registerDBInfo(entry);
  }
}"
30150,"public void run(){
  TemplateInstance matchingTemplate=null;
  if (templateRepository != null) {
    if (templateId == null) {
      if (serviceCharacteristics != null) {
        Set<TemplateCondition> andConditions=new HashSet<TemplateCondition>();
        andConditions.add(new org.glassfish.virtualization.util.ServiceType(serviceCharacteristics.getProperty(""String_Node_Str"")));
        for (        TemplateInstance ti : templateRepository.all()) {
          boolean allConditionsSatisfied=true;
          for (          TemplateCondition condition : andConditions) {
            if (!ti.satisfies(condition)) {
              allConditionsSatisfied=false;
              break;
            }
          }
          if (allConditionsSatisfied) {
            matchingTemplate=ti;
            break;
          }
        }
        if (matchingTemplate != null) {
          templateId=matchingTemplate.getConfig().getName();
        }
      }
    }
 else {
      for (      TemplateInstance ti : templateRepository.all()) {
        if (ti.getConfig().getName().equals(templateId)) {
          matchingTemplate=ti;
          break;
        }
      }
    }
  }
  if (matchingTemplate != null) {
    try {
      VirtualCluster vCluster=virtualClusters.byName(virtualClusterName);
      PhasedFuture<AllocationPhase,VirtualMachine> future=iaas.allocate(new AllocationConstraints(matchingTemplate,vCluster),null);
      VirtualMachine vm=future.get();
      ServiceInfo entry=new ServiceInfo();
      entry.setInstanceId(vm.getName());
      entry.setIpAddress(vm.getAddress());
      entry.setState(ServiceInfo.State.Running.toString());
      entry.setServiceName(serviceName);
      entry.setAppName(appName);
      entry.setServerType(""String_Node_Str"");
      serviceUtil.registerCloudEntry(entry);
    }
 catch (    Throwable ex) {
      throw new RuntimeException(ex);
    }
    return;
  }
}","public void run(){
  TemplateInstance matchingTemplate=null;
  if (templateRepository != null) {
    if (templateId == null) {
      if (serviceCharacteristics != null) {
        Set<TemplateCondition> andConditions=new HashSet<TemplateCondition>();
        andConditions.add(new org.glassfish.virtualization.util.ServiceType(serviceCharacteristics.getProperty(""String_Node_Str"")));
        for (        TemplateInstance ti : templateRepository.all()) {
          boolean allConditionsSatisfied=true;
          for (          TemplateCondition condition : andConditions) {
            if (!ti.satisfies(condition)) {
              allConditionsSatisfied=false;
              break;
            }
          }
          if (allConditionsSatisfied) {
            matchingTemplate=ti;
            break;
          }
        }
        if (matchingTemplate != null) {
          templateId=matchingTemplate.getConfig().getName();
        }
      }
    }
 else {
      for (      TemplateInstance ti : templateRepository.all()) {
        if (ti.getConfig().getName().equals(templateId)) {
          matchingTemplate=ti;
          break;
        }
      }
    }
  }
  if (matchingTemplate != null) {
    try {
      VirtualCluster vCluster=virtualClusters.byName(virtualClusterName);
      PhasedFuture<AllocationPhase,VirtualMachine> future=iaas.allocate(new AllocationConstraints(matchingTemplate,vCluster),null);
      VirtualMachine vm=future.get();
      ServiceInfo entry=new ServiceInfo();
      entry.setInstanceId(vm.getName());
      entry.setIpAddress(vm.getAddress().getHostAddress());
      entry.setState(ServiceInfo.State.Running.toString());
      entry.setServiceName(serviceName);
      entry.setAppName(appName);
      entry.setServerType(""String_Node_Str"");
      serviceUtil.registerCloudEntry(entry);
    }
 catch (    Throwable ex) {
      throw new RuntimeException(ex);
    }
    return;
  }
}"
30151,"@Override public List<SocketInfo> extract(IOR ior){
  List<SocketInfo> socketInfo=null;
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
    IIOPProfileTemplate iiopProfileTemplate=(IIOPProfileTemplate)ior.getProfile().getTaggedProfileTemplate();
    IIOPAddress primary=iiopProfileTemplate.getPrimaryAddress();
    String host=primary.getHost().toLowerCase();
    IIOPSSLUtil sslUtil=null;
    if (Globals.getDefaultHabitat() != null) {
      sslUtil=Globals.getDefaultHabitat().getComponent(IIOPSSLUtil.class);
      socketInfo=(List<SocketInfo>)sslUtil.getSSLPortsAsSocketInfo(ior);
    }
    if (socketInfo == null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
 else {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
 finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",new Object[]{baseMsg,socketInfo});
    }
  }
  return socketInfo;
}","@Override public List<SocketInfo> extract(IOR ior){
  List<SocketInfo> socketInfo=null;
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
    IIOPProfileTemplate iiopProfileTemplate=(IIOPProfileTemplate)ior.getProfile().getTaggedProfileTemplate();
    IIOPAddress primary=iiopProfileTemplate.getPrimaryAddress();
    IIOPSSLUtil sslUtil=null;
    if (Globals.getDefaultHabitat() != null) {
      sslUtil=Globals.getDefaultHabitat().getComponent(IIOPSSLUtil.class);
      socketInfo=(List<SocketInfo>)sslUtil.getSSLPortsAsSocketInfo(ior);
    }
    if (socketInfo == null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
 else {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
 finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",new Object[]{baseMsg,socketInfo});
    }
  }
  return socketInfo;
}"
30152,"/** 
 * Create an SSL server socket at the specified InetSocketAddress. If the type is SSL_MUTUALAUTH then SSL client authentication is requested.
 */
private ServerSocket createSSLServerSocket(String type,InetSocketAddress inetSocketAddress) throws IOException {
  if (inetSocketAddress == null) {
    throw new IOException(getFormatMessage(""String_Node_Str"",new Object[]{null}));
  }
  int port=inetSocketAddress.getPort();
  Integer iport=new Integer(port);
  SSLInfo sslInfo=(SSLInfo)portToSSLInfo.get(iport);
  if (sslInfo == null) {
    throw new IOException(getFormatMessage(""String_Node_Str"",new Object[]{iport}));
  }
  SSLServerSocketFactory ssf=sslInfo.getContext().getServerSocketFactory();
  String[] ssl3TlsCiphers=sslInfo.getSsl3TlsCiphers();
  String[] ssl2Ciphers=sslInfo.getSsl2Ciphers();
  String[] ciphers=null;
  if (ssl3TlsCiphers != null || ssl2Ciphers != null) {
    String[] socketCiphers=ssf.getDefaultCipherSuites();
    ciphers=mergeCiphers(socketCiphers,ssl3TlsCiphers,ssl2Ciphers);
  }
  String cs[]=null;
  if (_logger.isLoggable(Level.FINE)) {
    cs=ssf.getSupportedCipherSuites();
    for (int i=0; i < cs.length; ++i) {
      _logger.log(Level.FINE,""String_Node_Str"" + cs[i]);
    }
  }
  ServerSocket ss=null;
  try {
    ss=ssf.createServerSocket(port,BACKLOG,inetSocketAddress.getAddress());
    if (ciphers != null) {
      ((SSLServerSocket)ss).setEnabledCipherSuites(ciphers);
    }
  }
 catch (  IOException e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{type,String.valueOf(port)});
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw e;
  }
  try {
    if (type.equals(SSL_MUTUALAUTH)) {
      _logger.log(Level.FINE,""String_Node_Str"");
      ((SSLServerSocket)ss).setNeedClientAuth(true);
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new IOException(e.getMessage());
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + ss);
  }
  return ss;
}","/** 
 * Create an SSL server socket at the specified InetSocketAddress. If the type is SSL_MUTUALAUTH then SSL client authentication is requested.
 */
private ServerSocket createSSLServerSocket(String type,InetSocketAddress inetSocketAddress) throws IOException {
  if (inetSocketAddress == null) {
    throw new IOException(getFormatMessage(""String_Node_Str"",new Object[]{null}));
  }
  int port=inetSocketAddress.getPort();
  Integer iport=Integer.valueOf(port);
  SSLInfo sslInfo=(SSLInfo)portToSSLInfo.get(iport);
  if (sslInfo == null) {
    throw new IOException(getFormatMessage(""String_Node_Str"",new Object[]{iport}));
  }
  SSLServerSocketFactory ssf=sslInfo.getContext().getServerSocketFactory();
  String[] ssl3TlsCiphers=sslInfo.getSsl3TlsCiphers();
  String[] ssl2Ciphers=sslInfo.getSsl2Ciphers();
  String[] ciphers=null;
  if (ssl3TlsCiphers != null || ssl2Ciphers != null) {
    String[] socketCiphers=ssf.getDefaultCipherSuites();
    ciphers=mergeCiphers(socketCiphers,ssl3TlsCiphers,ssl2Ciphers);
  }
  String cs[]=null;
  if (_logger.isLoggable(Level.FINE)) {
    cs=ssf.getSupportedCipherSuites();
    for (int i=0; i < cs.length; ++i) {
      _logger.log(Level.FINE,""String_Node_Str"" + cs[i]);
    }
  }
  ServerSocket ss=null;
  try {
    ss=ssf.createServerSocket(port,BACKLOG,inetSocketAddress.getAddress());
    if (ciphers != null) {
      ((SSLServerSocket)ss).setEnabledCipherSuites(ciphers);
    }
  }
 catch (  IOException e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{type,String.valueOf(port)});
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw e;
  }
  try {
    if (type.equals(SSL_MUTUALAUTH)) {
      _logger.log(Level.FINE,""String_Node_Str"");
      ((SSLServerSocket)ss).setNeedClientAuth(true);
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new IOException(e.getMessage());
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + ss);
  }
  return ss;
}"
30153,"/** 
 * This add all classes in given jarFile to be scanned.
 * @param jarURI
 */
protected void addScanURI(final URI jarURI){
  scannedURI.add(jarURI);
  JarInputStream jis=null;
  try {
    final InputStream jarInputStream=jarURI.toURL().openStream();
    if (jarInputStream == null) {
      return;
    }
    jis=new JarInputStream(jarInputStream);
    JarEntry je;
    while ((je=jis.getNextJarEntry()) != null) {
      if (je.getName().endsWith(""String_Node_Str"")) {
        if (processAllClasses) {
          addEntry(je);
        }
 else {
          final ByteArrayOutputStream baos=new ByteArrayOutputStream();
          int bytesRead;
          final byte[] buffer=new byte[je.getSize() > -1 ? (int)je.getSize() : DEFAULT_ENTRY_BUFFER_SIZE];
          while ((bytesRead=jis.read(buffer)) != -1) {
            baos.write(buffer,0,bytesRead);
          }
          if (classFile.containsAnnotation(baos.toByteArray())) {
            addEntry(je);
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,ex.getMessage() + ""String_Node_Str"" + jarURI.toASCIIString(),ex);
  }
 finally {
    if (jis != null) {
      try {
        jis.close();
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,jarURI.toASCIIString(),ex);
      }
    }
  }
}","/** 
 * This add all classes in given jarFile to be scanned.
 * @param jarURI
 */
protected void addScanURI(final URI jarURI){
  scannedURI.add(jarURI);
  JarInputStream jis=null;
  try {
    final InputStream jarInputStream=jarURI.toURL().openStream();
    jis=new JarInputStream(jarInputStream);
    JarEntry je;
    while ((je=jis.getNextJarEntry()) != null) {
      if (je.getName().endsWith(""String_Node_Str"")) {
        if (processAllClasses) {
          addEntry(je);
        }
 else {
          final ByteArrayOutputStream baos=new ByteArrayOutputStream();
          int bytesRead;
          final byte[] buffer=new byte[je.getSize() > -1 ? (int)je.getSize() : DEFAULT_ENTRY_BUFFER_SIZE];
          while ((bytesRead=jis.read(buffer)) != -1) {
            baos.write(buffer,0,bytesRead);
          }
          if (classFile.containsAnnotation(baos.toByteArray())) {
            addEntry(je);
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,ex.getMessage() + ""String_Node_Str"" + jarURI.toASCIIString(),ex);
  }
 finally {
    if (jis != null) {
      try {
        jis.close();
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,jarURI.toASCIIString(),ex);
      }
    }
  }
}"
30154,"private T readDeploymentDescriptors(ReadableArchive descriptorArchive,ReadableArchive contentArchive,Application app) throws IOException, SAXParseException {
  T descriptor=readStandardDeploymentDescriptor(descriptorArchive);
  if (descriptor instanceof BundleDescriptor) {
    ((BundleDescriptor)descriptor).setApplication(app);
  }
  ModuleDescriptor newModule=createModuleDescriptor(descriptor);
  newModule.setArchiveUri(contentArchive.getURI().getSchemeSpecificPart());
  return readRestDeploymentDescriptors(descriptor,descriptorArchive,contentArchive,app);
}","/** 
 * Read the standard deployment descriptors (can contained in one or many file) and return the corresponding initialized descriptor instance. By default, the standard deployment descriptors are all contained in the xml file characterized with the path returned by
 * @return the initialized descriptor
 */
private T readDeploymentDescriptors(ReadableArchive descriptorArchive,ReadableArchive contentArchive,Application app) throws IOException, SAXParseException {
  T descriptor=readStandardDeploymentDescriptor(descriptorArchive);
  if (descriptor instanceof BundleDescriptor) {
    ((BundleDescriptor)descriptor).setApplication(app);
  }
  ModuleDescriptor newModule=createModuleDescriptor(descriptor);
  newModule.setArchiveUri(contentArchive.getURI().getSchemeSpecificPart());
  return readRestDeploymentDescriptors(descriptor,descriptorArchive,contentArchive,app);
}"
30155,"/** 
 * Reads persistence.xml from spec defined pu roots of an ear. Spec defined pu roots are - (1)Non component jars in root of ear (2)jars in lib of ear
 */
@Override public Object open(Archivist main,ReadableArchive earArchive,final RootDeploymentDescriptor descriptor) throws IOException, SAXParseException {
  if (logger.isLoggable(Level.FINE)) {
    logger.logp(Level.FINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",earArchive.getURI());
  }
  Map<String,ReadableArchive> probablePersitenceArchives=new HashMap<String,ReadableArchive>();
  try {
    final Application app=Application.class.cast(descriptor);
    EARBasedPersistenceHelper.addLibraryAndTopLevelCandidates(earArchive,app,true,probablePersitenceArchives);
    for (    Map.Entry<String,ReadableArchive> pathToArchiveEntry : probablePersitenceArchives.entrySet()) {
      readPersistenceDeploymentDescriptor(main,pathToArchiveEntry.getValue(),pathToArchiveEntry.getKey(),descriptor);
    }
  }
  finally {
    for (    Archive subArchive : probablePersitenceArchives.values()) {
      subArchive.close();
    }
  }
  return null;
}","/** 
 * Reads persistence.xml from spec defined pu roots of an ear. Spec defined pu roots are - (1)Non component jars in root of ear (2)jars in lib of ear
 */
@Override public Object open(Archivist main,ReadableArchive earArchive,final RootDeploymentDescriptor descriptor) throws IOException, SAXParseException {
  if (logger.isLoggable(Level.FINE)) {
    logger.logp(Level.FINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",earArchive.getURI());
  }
  Map<String,ReadableArchive> probablePersitenceArchives=new HashMap<String,ReadableArchive>();
  try {
    if (!(descriptor instanceof Application)) {
      return null;
    }
    final Application app=Application.class.cast(descriptor);
    EARBasedPersistenceHelper.addLibraryAndTopLevelCandidates(earArchive,app,true,probablePersitenceArchives);
    for (    Map.Entry<String,ReadableArchive> pathToArchiveEntry : probablePersitenceArchives.entrySet()) {
      readPersistenceDeploymentDescriptor(main,pathToArchiveEntry.getValue(),pathToArchiveEntry.getKey(),descriptor);
    }
  }
  finally {
    for (    Archive subArchive : probablePersitenceArchives.values()) {
      subArchive.close();
    }
  }
  return null;
}"
30156,"public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final Logger logger=context.getLogger();
  File libDir=env.getLibPath();
  if (type.equals(""String_Node_Str"")) {
    libDir=new File(libDir,""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    libDir=new File(libDir,""String_Node_Str"");
  }
  ActionReport.MessagePart part=report.getTopMessagePart();
  for (  File libFile : FileUtils.listFiles(libDir)) {
    if (libFile.isFile()) {
      ActionReport.MessagePart childPart=part.addChild();
      childPart.setMessage(libFile.getName());
    }
  }
}","public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  File libDir=env.getLibPath();
  if (type.equals(""String_Node_Str"")) {
    libDir=new File(libDir,""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    libDir=new File(libDir,""String_Node_Str"");
  }
  ActionReport.MessagePart part=report.getTopMessagePart();
  for (  File libFile : FileUtils.listFiles(libDir)) {
    if (libFile.isFile()) {
      ActionReport.MessagePart childPart=part.addChild();
      childPart.setMessage(libFile.getName());
    }
  }
}"
30157,"public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final Logger logger=context.getLogger();
  File libDir=env.getLibPath();
  if (type.equals(""String_Node_Str"")) {
    libDir=new File(libDir,""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    libDir=new File(libDir,""String_Node_Str"");
  }
  String msg=""String_Node_Str"";
  for (  String libraryName : names) {
    File libraryFile=new File(libDir,libraryName);
    if (libraryFile.exists()) {
      FileUtils.deleteFile(libraryFile);
    }
 else {
      msg+=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",libraryFile.getAbsolutePath());
    }
  }
  if (msg.length() > 0) {
    logger.log(Level.WARNING,msg);
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
    report.setMessage(msg);
  }
}","public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final Logger logger=context.getLogger();
  File libDir=env.getLibPath();
  if (type.equals(""String_Node_Str"")) {
    libDir=new File(libDir,""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    libDir=new File(libDir,""String_Node_Str"");
  }
  StringBuffer msg=new StringBuffer();
  for (  String libraryName : names) {
    File libraryFile=new File(libDir,libraryName);
    if (libraryFile.exists()) {
      FileUtils.deleteFile(libraryFile);
    }
 else {
      msg.append(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",libraryFile.getAbsolutePath()));
    }
  }
  if (msg.length() > 0) {
    logger.log(Level.WARNING,msg.toString());
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
    report.setMessage(msg.toString());
  }
}"
30158,"private List<URI> getURIs(DeploymentContext context){
  List<URI> uris=new ArrayList<URI>();
  uris.add(context.getSource().getURI());
  try {
    File f=new File(context.getSource().getURI());
    if (f.exists() && f.isDirectory()) {
      uris.add(new URI(context.getSource().getURI().toString() + ""String_Node_Str""));
    }
    if (context instanceof ExtendedDeploymentContext) {
      if (((ExtendedDeploymentContext)context).getParentContext() == null) {
        List<URL> moduleLibraries=DeploymentUtils.getModuleLibraryJars(context);
        for (        URL url : moduleLibraries) {
          uris.add(url.toURI());
        }
      }
 else {
        ApplicationInfoProvider appInfoProvider=habitat.getComponent(ApplicationInfoProvider.class);
        if (appInfoProvider != null) {
          List<URL> libraryJars=appInfoProvider.getLibraryJars(context);
          for (          URL url : libraryJars) {
            uris.add(url.toURI());
          }
        }
      }
    }
  }
 catch (  Exception e) {
    context.getLogger().log(Level.WARNING,e.getMessage(),e);
  }
  return uris;
}","private List<URI> getURIs(DeploymentContext context){
  List<URI> uris=new ArrayList<URI>();
  uris.add(context.getSource().getURI());
  try {
    File f=new File(context.getSource().getURI());
    if (f.exists() && f.isDirectory()) {
      uris.add(new URI(context.getSource().getURI().toString() + ""String_Node_Str""));
    }
    if (context instanceof ExtendedDeploymentContext) {
      if (((ExtendedDeploymentContext)context).getParentContext() == null) {
        List<URL> moduleLibraries=DeploymentUtils.getModuleLibraryJars(context);
        for (        URL url : moduleLibraries) {
          uris.add(Util.toURI(url));
        }
      }
 else {
        ApplicationInfoProvider appInfoProvider=habitat.getComponent(ApplicationInfoProvider.class);
        if (appInfoProvider != null) {
          List<URL> libraryJars=appInfoProvider.getLibraryJars(context);
          for (          URL url : libraryJars) {
            uris.add(Util.toURI(url));
          }
        }
      }
    }
  }
 catch (  Exception e) {
    context.getLogger().log(Level.WARNING,e.getMessage(),e);
  }
  return uris;
}"
30159,"private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  baseDir.mkdirs();
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=baseURI.resolve(zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      outputFile.mkdirs();
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
    }
  }
}","private void processGeneratedContent(final File generatedContentParam,final ExtendedDeploymentContext deploymentContext,final Logger logger) throws IOException {
  if (generatedContentParam == null) {
    return;
  }
  final File baseDir=deploymentContext.getScratchDir(""String_Node_Str"").getParentFile().getParentFile();
  baseDir.mkdirs();
  final URI baseURI=baseDir.toURI();
  final ZipFile zipFile=new ZipFile(generatedContentParam);
  for (Enumeration<? extends ZipEntry> entries=zipFile.entries(); entries.hasMoreElements(); ) {
    final ZipEntry zipEntry=entries.nextElement();
    final URI outputFileURI=Util.resolve(baseURI,zipEntry.getName());
    final File outputFile=new File(outputFileURI);
    if (zipEntry.isDirectory()) {
      outputFile.mkdirs();
    }
 else {
      final FileOutputStream os=new FileOutputStream(outputFile);
      FileUtils.copy(zipFile.getInputStream(zipEntry),os,zipEntry.getSize());
    }
  }
}"
30160,"private ReferenceFactory createReferenceFactory(String poaId,String repoid) throws Exception {
  try {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{poaId,repoid});
    }
    ReferenceFactoryManager rfm=(ReferenceFactoryManager)orb.resolve_initial_references(ORBConstants.REFERENCE_FACTORY_MANAGER);
    List<Policy> policies=new ArrayList<Policy>();
    policies.add(ServantCachingPolicy.getPolicy());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{poaId,repoid,ejbDescriptor});
    }
    policies.add(new CSIv2Policy(ejbDescriptor));
    IASEjbExtraDescriptors extraDesc=ejbDescriptor.getIASEjbExtraDescriptors();
    String threadPoolName=extraDesc.getUseThreadPoolId();
    int threadPoolNumericID=0;
    boolean usePassByReference=extraDesc.getPassByReference();
    if (usePassByReference) {
      policies.add(new CopyObjectPolicy(PASS_BY_REFERENCE_ID));
    }
    if (logger.isLoggable(Level.FINE)) {
      String jndiName=ejbDescriptor.getJndiName();
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{threadPoolName,threadPoolNumericID,jndiName});
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{usePassByReference,usePassByReference});
    }
    if (ejbDescriptor.allMechanismsRequireSSL()) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.WARNING,""String_Node_Str"",new Object[]{poaId,repoid});
      }
      policies.add(ZeroPortPolicy.getPolicy());
    }
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{poaId,repoid,policies});
    }
    ReferenceFactory rf=rfm.create(poaId,repoid,policies,this);
    return rf;
  }
  finally {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.WARNING,""String_Node_Str"",new Object[]{poaId,repoid});
    }
  }
}","private ReferenceFactory createReferenceFactory(String poaId,String repoid) throws Exception {
  try {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{poaId,repoid});
    }
    ReferenceFactoryManager rfm=(ReferenceFactoryManager)orb.resolve_initial_references(ORBConstants.REFERENCE_FACTORY_MANAGER);
    List<Policy> policies=new ArrayList<Policy>();
    policies.add(ServantCachingPolicy.getPolicy());
    policies.add(new OTSPolicyImpl());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{poaId,repoid,ejbDescriptor});
    }
    policies.add(new CSIv2Policy(ejbDescriptor));
    IASEjbExtraDescriptors extraDesc=ejbDescriptor.getIASEjbExtraDescriptors();
    String threadPoolName=extraDesc.getUseThreadPoolId();
    int threadPoolNumericID=0;
    boolean usePassByReference=extraDesc.getPassByReference();
    if (usePassByReference) {
      policies.add(new CopyObjectPolicy(PASS_BY_REFERENCE_ID));
    }
    if (logger.isLoggable(Level.FINE)) {
      String jndiName=ejbDescriptor.getJndiName();
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{threadPoolName,threadPoolNumericID,jndiName});
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{usePassByReference,usePassByReference});
    }
    if (ejbDescriptor.allMechanismsRequireSSL()) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.WARNING,""String_Node_Str"",new Object[]{poaId,repoid});
      }
      policies.add(ZeroPortPolicy.getPolicy());
    }
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"",new Object[]{poaId,repoid,policies});
    }
    ReferenceFactory rf=rfm.create(poaId,repoid,policies,this);
    return rf;
  }
  finally {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.WARNING,""String_Node_Str"",new Object[]{poaId,repoid});
    }
  }
}"
30161,"public Object resolveEjbReference(EjbReferenceDescriptor ejbRefDesc,Context context) throws NamingException {
  Object jndiObj=null;
  boolean resolved=false;
  if (ejbRefDesc.isLocal()) {
    if (ejbRefDesc.hasLookupName()) {
      jndiObj=context.lookup(ejbRefDesc.getLookupName());
      resolved=true;
    }
  }
 else   if (!ejbRefDesc.hasJndiName() && ejbRefDesc.hasLookupName()) {
    jndiObj=context.lookup(ejbRefDesc.getLookupName());
    resolved=true;
  }
 else   if (ejbRefDesc.hasJndiName() && ejbRefDesc.getJndiName().startsWith(""String_Node_Str"") && !ejbRefDesc.getJndiName().startsWith(""String_Node_Str"")) {
    String remoteJndiName=ejbRefDesc.getJndiName();
    String appName=(String)context.lookup(""String_Node_Str"");
    String newPrefix=""String_Node_Str"" + appName + ""String_Node_Str"";
    int javaAppLength=""String_Node_Str"".length();
    String globalLookup=newPrefix + remoteJndiName.substring(javaAppLength);
    jndiObj=context.lookup(globalLookup);
    resolved=true;
  }
 else {
    String remoteJndiName=EJBUtils.getRemoteEjbJndiName(ejbRefDesc);
    ClassLoader origClassLoader=Utility.getClassLoader();
    boolean setCL=false;
    try {
      try {
        String refInterface=ejbRefDesc.isEJB30ClientView() ? ejbRefDesc.getEjbInterface() : ejbRefDesc.getHomeClassName();
        origClassLoader.loadClass(refInterface);
      }
 catch (      ClassNotFoundException e) {
        ClassLoader referringBundleClassLoader=ejbRefDesc.getReferringBundleDescriptor().getClassLoader();
        Utility.setContextClassLoader(referringBundleClassLoader);
        setCL=true;
      }
      if (remoteJndiName.startsWith(CORBANAME)) {
        GlassFishORBHelper orbHelper=habitat.getComponent(GlassFishORBHelper.class);
        ORB orb=orbHelper.getORB();
        jndiObj=(Object)orb.string_to_object(remoteJndiName);
      }
 else {
        jndiObj=context.lookup(remoteJndiName);
      }
    }
 catch (    Exception e) {
      NamingException ne=new NamingException(""String_Node_Str"" + ejbRefDesc + ""String_Node_Str""+ remoteJndiName+ ""String_Node_Str"");
      ne.initCause(e);
      throw ne;
    }
 finally {
      if (setCL) {
        Utility.setContextClassLoader(origClassLoader);
      }
    }
  }
  return resolved ? jndiObj : EJBUtils.resolveEjbRefObject(ejbRefDesc,jndiObj);
}","@Override public Object resolveEjbReference(EjbReferenceDescriptor ejbRefDesc,Context context) throws NamingException {
  Object jndiObj=null;
  boolean resolved=false;
  if (ejbRefDesc.isLocal()) {
    if (ejbRefDesc.hasLookupName()) {
      jndiObj=context.lookup(ejbRefDesc.getLookupName());
      resolved=true;
    }
  }
 else   if (!ejbRefDesc.hasJndiName() && ejbRefDesc.hasLookupName()) {
    try {
      jndiObj=context.lookup(ejbRefDesc.getLookupName());
    }
 catch (    NamingException e) {
      ClassLoader oldLoader=null;
      try {
        oldLoader=Utility.setContextClassLoader(ejbRefDesc.getReferringBundleDescriptor().getClassLoader());
        jndiObj=context.lookup(ejbRefDesc.getLookupName());
      }
  finally {
        Utility.setContextClassLoader(oldLoader);
      }
    }
    resolved=true;
  }
 else   if (ejbRefDesc.hasJndiName() && ejbRefDesc.getJndiName().startsWith(""String_Node_Str"") && !ejbRefDesc.getJndiName().startsWith(""String_Node_Str"")) {
    String remoteJndiName=ejbRefDesc.getJndiName();
    String appName=(String)context.lookup(""String_Node_Str"");
    String newPrefix=""String_Node_Str"" + appName + ""String_Node_Str"";
    int javaAppLength=""String_Node_Str"".length();
    String globalLookup=newPrefix + remoteJndiName.substring(javaAppLength);
    jndiObj=context.lookup(globalLookup);
    resolved=true;
  }
 else {
    String remoteJndiName=EJBUtils.getRemoteEjbJndiName(ejbRefDesc);
    ClassLoader origClassLoader=Utility.getClassLoader();
    boolean setCL=false;
    try {
      try {
        String refInterface=ejbRefDesc.isEJB30ClientView() ? ejbRefDesc.getEjbInterface() : ejbRefDesc.getHomeClassName();
        origClassLoader.loadClass(refInterface);
      }
 catch (      ClassNotFoundException e) {
        ClassLoader referringBundleClassLoader=ejbRefDesc.getReferringBundleDescriptor().getClassLoader();
        Utility.setContextClassLoader(referringBundleClassLoader);
        setCL=true;
      }
      if (remoteJndiName.startsWith(CORBANAME)) {
        GlassFishORBHelper orbHelper=habitat.getComponent(GlassFishORBHelper.class);
        ORB orb=orbHelper.getORB();
        jndiObj=(Object)orb.string_to_object(remoteJndiName);
      }
 else {
        jndiObj=context.lookup(remoteJndiName);
      }
    }
 catch (    Exception e) {
      NamingException ne=new NamingException(""String_Node_Str"" + ejbRefDesc + ""String_Node_Str""+ remoteJndiName+ ""String_Node_Str"");
      ne.initCause(e);
      throw ne;
    }
 finally {
      if (setCL) {
        Utility.setContextClassLoader(origClassLoader);
      }
    }
  }
  return resolved ? jndiObj : EJBUtils.resolveEjbRefObject(ejbRefDesc,jndiObj);
}"
30162,"public void unload(ExtendedDeploymentContext context){
  Logger logger=context.getLogger();
  if (!isLoaded) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(appClassLoader);
    context.setClassLoader(appClassLoader);
    super.unload(context);
    for (    ModuleInfo module : getModuleInfos()) {
      module.unload(getSubContext(module,context));
    }
    isLoaded=false;
    if (events != null) {
      events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_UNLOADED,this),false);
    }
    try {
      PreDestroy.class.cast(appClassLoader).preDestroy();
    }
 catch (    Exception e) {
    }
    appClassLoader=null;
    for (    ModuleInfo module : getModuleInfos()) {
      if (module.getClassLoaders() != null) {
        for (        ClassLoader cloader : module.getClassLoaders()) {
          try {
            PreDestroy.class.cast(cloader).preDestroy();
          }
 catch (          Exception e) {
          }
        }
        module.cleanClassLoaders();
      }
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
    context.setClassLoader(null);
  }
}","public void unload(ExtendedDeploymentContext context){
  Logger logger=context.getLogger();
  if (!isLoaded) {
    logger.fine(""String_Node_Str"");
    return;
  }
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(appClassLoader);
    context.setClassLoader(appClassLoader);
    super.unload(context);
    for (    ModuleInfo module : reversedModules) {
      module.unload(getSubContext(module,context));
    }
    isLoaded=false;
    if (events != null) {
      events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_UNLOADED,this),false);
    }
    try {
      PreDestroy.class.cast(appClassLoader).preDestroy();
    }
 catch (    Exception e) {
    }
    appClassLoader=null;
    for (    ModuleInfo module : getModuleInfos()) {
      if (module.getClassLoaders() != null) {
        for (        ClassLoader cloader : module.getClassLoaders()) {
          try {
            PreDestroy.class.cast(cloader).preDestroy();
          }
 catch (          Exception e) {
          }
        }
        module.cleanClassLoaders();
      }
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
    context.setClassLoader(null);
  }
}"
30163,"public boolean suspend(Logger logger){
  boolean isSuccess=super.suspend(logger);
  for (  ModuleInfo module : modules) {
    if (!module.suspend(logger)) {
      isSuccess=false;
    }
  }
  return isSuccess;
}","public boolean suspend(Logger logger){
  boolean isSuccess=super.suspend(logger);
  for (  ModuleInfo module : reversedModules) {
    if (!module.suspend(logger)) {
      isSuccess=false;
    }
  }
  return isSuccess;
}"
30164,"public void clean(ExtendedDeploymentContext context) throws Exception {
  if (appClassLoader != null) {
    try {
      PreDestroy.class.cast(appClassLoader).preDestroy();
    }
 catch (    Exception e) {
    }
    appClassLoader=null;
  }
  super.clean(context);
  for (  ModuleInfo info : modules) {
    info.clean(getSubContext(info,context));
    info=null;
  }
  if (events != null) {
    events.send(new EventListener.Event<DeploymentContext>(Deployment.APPLICATION_CLEANED,context),false);
  }
}","public void clean(ExtendedDeploymentContext context) throws Exception {
  if (appClassLoader != null) {
    try {
      PreDestroy.class.cast(appClassLoader).preDestroy();
    }
 catch (    Exception e) {
    }
    appClassLoader=null;
  }
  super.clean(context);
  for (  ModuleInfo info : reversedModules) {
    info.clean(getSubContext(info,context));
    info=null;
  }
  if (events != null) {
    events.send(new EventListener.Event<DeploymentContext>(Deployment.APPLICATION_CLEANED,context),false);
  }
}"
30165,"public void addModule(ModuleInfo info){
  modules.add(info);
}","public void addModule(ModuleInfo info){
  modules.add(info);
  reversedModules.addFirst(info);
}"
30166,"public void stop(ExtendedDeploymentContext context,Logger logger){
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(appClassLoader);
    context.setClassLoader(appClassLoader);
    super.stop(context,logger);
    for (    ModuleInfo module : getModuleInfos()) {
      module.stop(getSubContext(module,context),logger);
    }
    if (events != null) {
      events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_STOPPED,this),false);
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
  }
}","public void stop(ExtendedDeploymentContext context,Logger logger){
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(appClassLoader);
    context.setClassLoader(appClassLoader);
    super.stop(context,logger);
    for (    ModuleInfo module : reversedModules) {
      module.stop(getSubContext(module,context),logger);
    }
    if (events != null) {
      events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_STOPPED,this),false);
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
  }
}"
30167,"/** 
 * The <code>doFilter</code> method of the Filter is called by the container each time a request/response pair is passed through the chain due to a client request for a resource at the end of the chain. The FilterChain passed in to this method allows the Filter to pass on the request and response to the next entity in the chain.
 * @param srequest the runtime request
 * @param sresponse the runtime response
 * @param chain the filter chain to in the request processing
 * @throws IOException , ServletException - First check if this HTTP method permits caching (using helper)  if not, call the downstream filter and return.  - Otherwise, get the key based on the request (using helper).  - Check if we have a response entry in the cache already.  - If there is entry and is valid, write out the response from that entry.  - create a CachingResponse and CachingOutputStream wrappers and call  the downstream filter
 */
public void doFilter(ServletRequest srequest,ServletResponse sresponse,FilterChain chain) throws IOException, ServletException {
  String key;
  HttpServletRequest request=(HttpServletRequest)srequest;
  HttpServletResponse response=(HttpServletResponse)sresponse;
  request.setAttribute(DefaultCacheHelper.ATTR_CACHING_FILTER_NAME,filterName);
  request.setAttribute(CacheHelper.ATTR_CACHE_MAPPED_SERVLET_NAME,servletName);
  request.setAttribute(CacheHelper.ATTR_CACHE_MAPPED_URL_PATTERN,urlPattern);
  boolean isFine=_logger.isLoggable(Level.FINE);
  if (isEnabled && helper.isCacheable((HttpServletRequest)request) && (key=helper.getCacheKey(request)) != null) {
    int index=cache.getIndex(key);
    if (isFine) {
      _logger.fine(""String_Node_Str"" + request.getServletPath() + ""String_Node_Str""+ key+ ""String_Node_Str""+ index);
    }
    HttpCacheEntry entry=null;
    boolean entryReady=false, waitForRefresh=true;
    if (!helper.isRefreshNeeded(request)) {
      do {
        entry=(HttpCacheEntry)cache.get(key);
        if (entry != null && entry.isValid()) {
          entryReady=true;
          break;
        }
 else {
          waitForRefresh=cache.waitRefresh(index);
        }
      }
 while (waitForRefresh);
    }
 else {
      if (isFine) {
        _logger.fine(""String_Node_Str"" + request.getServletPath() + ""String_Node_Str""+ key);
      }
    }
    if (entryReady) {
      if (isFine) {
        _logger.fine(""String_Node_Str"" + request.getServletPath() + ""String_Node_Str""+ key);
      }
      sendCachedResponse(entry,response);
    }
 else {
      CachingResponseWrapper wrapper=null;
      boolean needNotify=true;
      try {
        wrapper=new CachingResponseWrapper(response);
        chain.doFilter(srequest,(ServletResponse)wrapper);
        if (!wrapper.isError()) {
          int timeout=helper.getTimeout(request);
          entry=wrapper.cacheResponse();
          if (timeout == CacheHelper.TIMEOUT_VALUE_NOT_SET) {
            Long lval=wrapper.getExpiresDateHeader();
            if (lval == null) {
              timeout=manager.getDefaultTimeout();
              entry.computeExpireTime(timeout);
            }
 else {
              long expireTime=lval.longValue();
              entry.setExpireTime(expireTime);
            }
          }
 else {
            entry.computeExpireTime(timeout);
          }
          cache.put(key,entry,entry.getSize());
          cache.notifyRefresh(index);
          needNotify=false;
          writeBody(entry,response);
        }
 else {
          cache.remove(key);
        }
      }
  finally {
        if (needNotify) {
          cache.notifyRefresh(index);
        }
        if (wrapper != null) {
          wrapper.clear();
        }
      }
    }
  }
 else {
    if (isFine) {
      _logger.fine(""String_Node_Str"" + request.getServletPath() + ""String_Node_Str""+ isEnabled);
    }
    request.removeAttribute(DefaultCacheHelper.ATTR_CACHING_FILTER_NAME);
    request.removeAttribute(CacheHelper.ATTR_CACHE_MAPPED_SERVLET_NAME);
    request.removeAttribute(CacheHelper.ATTR_CACHE_MAPPED_URL_PATTERN);
    chain.doFilter(srequest,sresponse);
  }
}","/** 
 * The <code>doFilter</code> method of the Filter is called by the container each time a request/response pair is passed through the chain due to a client request for a resource at the end of the chain. The FilterChain passed in to this method allows the Filter to pass on the request and response to the next entity in the chain.
 * @param srequest the runtime request
 * @param sresponse the runtime response
 * @param chain the filter chain to in the request processing
 * @throws IOException , ServletException - First check if this HTTP method permits caching (using helper)  if not, call the downstream filter and return.  - Otherwise, get the key based on the request (using helper).  - Check if we have a response entry in the cache already.  - If there is entry and is valid, write out the response from that entry.  - create a CachingResponse and CachingOutputStream wrappers and call  the downstream filter
 */
public void doFilter(ServletRequest srequest,ServletResponse sresponse,FilterChain chain) throws IOException, ServletException {
  String key;
  HttpServletRequest request=(HttpServletRequest)srequest;
  HttpServletResponse response=(HttpServletResponse)sresponse;
  request.setAttribute(DefaultCacheHelper.ATTR_CACHING_FILTER_NAME,filterName);
  request.setAttribute(CacheHelper.ATTR_CACHE_MAPPED_SERVLET_NAME,servletName);
  request.setAttribute(CacheHelper.ATTR_CACHE_MAPPED_URL_PATTERN,urlPattern);
  boolean isFine=_logger.isLoggable(Level.FINE);
  if (isEnabled && helper.isCacheable((HttpServletRequest)request) && (key=helper.getCacheKey(request)) != null) {
    int index=cache.getIndex(key);
    if (isFine) {
      _logger.fine(""String_Node_Str"" + request.getServletPath() + ""String_Node_Str""+ key+ ""String_Node_Str""+ index);
    }
    HttpCacheEntry entry=null;
    boolean entryReady=false, waitForRefresh=true;
    if (!helper.isRefreshNeeded(request)) {
      do {
        entry=(HttpCacheEntry)cache.get(key);
        if (entry != null && entry.isValid()) {
          entryReady=true;
          break;
        }
 else {
          waitForRefresh=waitForRefresh(request,key,index);
        }
      }
 while (waitForRefresh);
    }
 else {
      if (isFine) {
        _logger.fine(""String_Node_Str"" + request.getServletPath() + ""String_Node_Str""+ key);
      }
    }
    if (entryReady) {
      if (isFine) {
        _logger.fine(""String_Node_Str"" + request.getServletPath() + ""String_Node_Str""+ key);
      }
      sendCachedResponse(entry,response);
    }
 else {
      CachingResponseWrapper wrapper=null;
      boolean needNotify=true;
      try {
        wrapper=new CachingResponseWrapper(response);
        chain.doFilter(srequest,(ServletResponse)wrapper);
        if (!wrapper.isError()) {
          int timeout=helper.getTimeout(request);
          entry=wrapper.cacheResponse();
          if (timeout == CacheHelper.TIMEOUT_VALUE_NOT_SET) {
            Long lval=wrapper.getExpiresDateHeader();
            if (lval == null) {
              timeout=manager.getDefaultTimeout();
              entry.computeExpireTime(timeout);
            }
 else {
              long expireTime=lval.longValue();
              entry.setExpireTime(expireTime);
            }
          }
 else {
            entry.computeExpireTime(timeout);
          }
          cache.put(key,entry,entry.getSize());
          cache.notifyRefresh(index);
          needNotify=false;
          writeBody(entry,response);
        }
 else {
          cache.remove(key);
        }
      }
  finally {
        if (needNotify) {
          cache.notifyRefresh(index);
        }
        if (wrapper != null) {
          wrapper.clear();
        }
      }
    }
  }
 else {
    if (isFine) {
      _logger.fine(""String_Node_Str"" + request.getServletPath() + ""String_Node_Str""+ isEnabled);
    }
    request.removeAttribute(DefaultCacheHelper.ATTR_CACHING_FILTER_NAME);
    request.removeAttribute(CacheHelper.ATTR_CACHE_MAPPED_SERVLET_NAME);
    request.removeAttribute(CacheHelper.ATTR_CACHE_MAPPED_URL_PATTERN);
    chain.doFilter(srequest,sresponse);
  }
}"
30168,"public void postConstruct(){
  for (  Config config : configs.getConfig()) {
    currentConfig=config;
    try {
      final NetworkConfig networkConfig=currentConfig.getNetworkConfig();
      if (networkConfig == null) {
        createFromScratch();
      }
      normalizeThreadPools();
      if (currentConfig.getHttpService() != null) {
        promoteHttpServiceProperties(currentConfig.getHttpService());
        promoteVirtualServerProperties(currentConfig.getHttpService());
      }
 else {
        Logger.getAnonymousLogger().log(Level.WARNING,String.format(""String_Node_Str"",currentConfig.getName()));
      }
      promoteSystemProperties();
      addAsadminProtocol(currentConfig.getNetworkConfig());
    }
 catch (    TransactionFailure tf) {
      Logger.getAnonymousLogger().log(Level.SEVERE,""String_Node_Str"",tf);
      throw new RuntimeException(tf);
    }
  }
}","public void postConstruct(){
  for (  Config config : configs.getConfig()) {
    currentConfig=config;
    try {
      final NetworkConfig networkConfig=currentConfig.getNetworkConfig();
      if (networkConfig == null) {
        createFromScratch();
      }
      normalizeThreadPools();
      if (currentConfig.getHttpService() != null) {
        promoteHttpServiceProperties(currentConfig.getHttpService());
        promoteVirtualServerProperties(currentConfig.getHttpService());
      }
 else {
        logger.log(Level.WARNING,""String_Node_Str"",new String[]{currentConfig.getName()});
      }
      promoteSystemProperties();
      addAsadminProtocol(currentConfig.getNetworkConfig());
    }
 catch (    TransactionFailure tf) {
      logger.log(Level.SEVERE,""String_Node_Str"",tf);
      throw new RuntimeException(tf);
    }
  }
}"
30169,"@Override public <T extends ConfigBeanProxy>NotProcessed changed(TYPE type,Class<T> tClass,T t){
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,""String_Node_Str"",new Object[]{type,tClass,t});
  }
  if (tClass == NetworkListener.class) {
    return processNetworkListener(type,(NetworkListener)t,events);
  }
 else   if (tClass == Http.class) {
    return processProtocol(type,(Protocol)t.getParent(),events);
  }
 else   if (tClass == FileCache.class) {
    return processProtocol(type,(Protocol)t.getParent().getParent(),null);
  }
 else   if (tClass == Ssl.class) {
    return processProtocol(type,(Protocol)t.getParent(),null);
  }
 else   if (tClass == Protocol.class) {
    return processProtocol(type,(Protocol)t,null);
  }
 else   if (tClass == ThreadPool.class) {
    NotProcessed notProcessed=null;
    for (    NetworkListener listener : ((ThreadPool)t).findNetworkListeners()) {
      notProcessed=processNetworkListener(type,listener,null);
    }
    return notProcessed;
  }
 else   if (tClass == Transport.class) {
    NotProcessed notProcessed=null;
    for (    NetworkListener listener : ((Transport)t).findNetworkListeners()) {
      notProcessed=processNetworkListener(type,listener,null);
    }
    return notProcessed;
  }
 else   if (tClass == VirtualServer.class && !grizzlyService.hasMapperUpdateListener()) {
    return processVirtualServer(type,(VirtualServer)t);
  }
 else   if (tClass == SystemProperty.class) {
    NetworkConfig networkConfig=config.getNetworkConfig();
    if ((networkConfig != null) && ((SystemProperty)t).getName().endsWith(""String_Node_Str"")) {
      for (      NetworkListener listener : networkConfig.getNetworkListeners().getNetworkListener()) {
        if (listener.getPort().equals(((SystemProperty)t).getValue())) {
          return processNetworkListener(Changed.TYPE.CHANGE,listener,events);
        }
      }
    }
    return null;
  }
  return null;
}","@Override public <T extends ConfigBeanProxy>NotProcessed changed(TYPE type,Class<T> tClass,T t){
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,""String_Node_Str"",new Object[]{type,tClass,t});
  }
  if (tClass == NetworkListener.class && t instanceof NetworkListener) {
    return processNetworkListener(type,(NetworkListener)t,events);
  }
 else   if (tClass == Http.class && t instanceof Http) {
    return processProtocol(type,(Protocol)t.getParent(),events);
  }
 else   if (tClass == FileCache.class && t instanceof FileCache) {
    return processProtocol(type,(Protocol)t.getParent().getParent(),null);
  }
 else   if (tClass == Ssl.class && t instanceof Ssl) {
    return processProtocol(type,(Protocol)t.getParent(),null);
  }
 else   if (tClass == Protocol.class && t instanceof Protocol) {
    return processProtocol(type,(Protocol)t,null);
  }
 else   if (tClass == ThreadPool.class && t instanceof ThreadPool) {
    NotProcessed notProcessed=null;
    for (    NetworkListener listener : ((ThreadPool)t).findNetworkListeners()) {
      notProcessed=processNetworkListener(type,listener,null);
    }
    return notProcessed;
  }
 else   if (tClass == Transport.class && t instanceof Transport) {
    NotProcessed notProcessed=null;
    for (    NetworkListener listener : ((Transport)t).findNetworkListeners()) {
      notProcessed=processNetworkListener(type,listener,null);
    }
    return notProcessed;
  }
 else   if (tClass == VirtualServer.class && t instanceof VirtualServer && !grizzlyService.hasMapperUpdateListener()) {
    return processVirtualServer(type,(VirtualServer)t);
  }
 else   if (tClass == SystemProperty.class && t instanceof SystemProperty) {
    NetworkConfig networkConfig=config.getNetworkConfig();
    if ((networkConfig != null) && ((SystemProperty)t).getName().endsWith(""String_Node_Str"")) {
      for (      NetworkListener listener : networkConfig.getNetworkListeners().getNetworkListener()) {
        if (listener.getPort().equals(((SystemProperty)t).getValue())) {
          return processNetworkListener(Changed.TYPE.CHANGE,listener,events);
        }
      }
    }
    return null;
  }
  return null;
}"
30170,"public <V>V loadMetaData(Class<V> type,DeploymentContext dc){
  WebBundleDescriptor wbd=dc.getModuleMetaData(WebBundleDescriptor.class);
  if (wbd.isStandalone()) {
    DeployCommandParameters params=dc.getCommandParameters(DeployCommandParameters.class);
    String contextRoot=params.contextroot;
    if (contextRoot == null) {
      contextRoot=wbd.getContextRoot();
      if (""String_Node_Str"".equals(contextRoot))       contextRoot=null;
    }
    if (contextRoot == null) {
      contextRoot=params.previousContextRoot;
    }
    if (contextRoot == null)     contextRoot=wbd.getModuleDescriptor().getModuleName();
    if (contextRoot == null)     contextRoot=dc.getSource().getName();
    if (!contextRoot.startsWith(""String_Node_Str"")) {
      contextRoot=""String_Node_Str"" + contextRoot;
    }
    wbd.setContextRoot(contextRoot);
    wbd.setName(params.name());
    dc.getAppProps().setProperty(ServerTags.CONTEXT_ROOT,contextRoot);
  }
  return null;
}","public <V>V loadMetaData(Class<V> type,DeploymentContext dc){
  WebBundleDescriptor wbd=dc.getModuleMetaData(WebBundleDescriptor.class);
  if (wbd.isStandalone()) {
    DeployCommandParameters params=dc.getCommandParameters(DeployCommandParameters.class);
    String contextRoot=params.contextroot;
    if (contextRoot == null) {
      contextRoot=wbd.getContextRoot();
      if (""String_Node_Str"".equals(contextRoot))       contextRoot=null;
    }
    if (contextRoot == null) {
      contextRoot=params.previousContextRoot;
    }
    if (contextRoot == null)     contextRoot=dc.getOriginalSource().getName();
    if (!contextRoot.startsWith(""String_Node_Str"")) {
      contextRoot=""String_Node_Str"" + contextRoot;
    }
    wbd.setContextRoot(contextRoot);
    wbd.setName(params.name());
    dc.getAppProps().setProperty(ServerTags.CONTEXT_ROOT,contextRoot);
  }
  return null;
}"
30171,"public boolean hasMore() throws NamingException {
  return hasMoreElements();
}","@Override public boolean hasMore() throws NamingException {
  return hasMoreElements();
}"
30172,"public boolean hasMoreElements(){
  return names.hasNext();
}","@Override public boolean hasMoreElements(){
  return names.hasNext();
}"
30173,"public Object next() throws NamingException {
  return nextElement();
}","@Override public Object next() throws NamingException {
  return nextElement();
}"
30174,"public void close() throws NamingException {
  throw new OperationNotSupportedException(""String_Node_Str"");
}","@Override public void close(){
}"
30175,"public Object nextElement(){
  if (names.hasNext()) {
    try {
      String name=(String)names.next();
      return new Binding(name,nm.lookup(name));
    }
 catch (    Exception ex) {
      throw new RuntimeException(""String_Node_Str"" + ex);
    }
  }
 else   return null;
}","@Override public Object nextElement(){
  if (names.hasNext()) {
    try {
      String name=(String)names.next();
      return new Binding(name,nm.lookup(name));
    }
 catch (    Exception ex) {
      throw new RuntimeException(""String_Node_Str"" + ex);
    }
  }
 else   return null;
}"
30176,"/** 
 * read the modules deployment descriptor from this application object using the passed archive
 * @param app application containing the list of modules.
 * @param appArchive containing the sub modules files.
 * @return true if everything went fine
 */
public boolean readModulesDescriptors(Application app,ReadableArchive appArchive) throws IOException, SAXParseException {
  List<ModuleDescriptor> nonexistentModules=new ArrayList<ModuleDescriptor>();
  for (  ModuleDescriptor aModule : app.getModules()) {
    if (DOLUtils.getDefaultLogger().isLoggable(Level.FINE)) {
      DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + aModule);
    }
    RootDeploymentDescriptor descriptor=null;
    Archivist newArchivist=archivistFactory.get().getPrivateArchivistFor(aModule.getModuleType());
    newArchivist.initializeContext(this);
    newArchivist.setRuntimeXMLValidation(this.getRuntimeXMLValidation());
    newArchivist.setRuntimeXMLValidationLevel(this.getRuntimeXMLValidationLevel());
    newArchivist.setAnnotationProcessingRequested(annotationProcessingRequested);
    ReadableArchive embeddedArchive=appArchive.getSubArchive(aModule.getArchiveUri());
    if (embeddedArchive != null) {
      embeddedArchive.setParentArchive(appArchive);
    }
    if (aModule.getAlternateDescriptor() != null) {
      InputStream is=appArchive.getEntry(aModule.getAlternateDescriptor());
      DeploymentDescriptorFile ddFile=newArchivist.getStandardDDFile();
      ddFile.setXMLValidation(newArchivist.getXMLValidation());
      ddFile.setXMLValidationLevel(newArchivist.getXMLValidationLevel());
      if (appArchive.getURI() != null) {
        ddFile.setErrorReportingString(appArchive.getURI().getSchemeSpecificPart());
      }
      descriptor=(BundleDescriptor)ddFile.read(is);
      ((BundleDescriptor)descriptor).setApplication(app);
      is.close();
      Map<ExtensionsArchivist,RootDeploymentDescriptor> extensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
      if (extensionsArchivists != null) {
        for (        ExtensionsArchivist extension : extensionsArchivists) {
          if (extension.supportsModuleType(aModule.getModuleType())) {
            Object rdd=extension.open(newArchivist,embeddedArchive,descriptor);
            if (rdd instanceof RootDeploymentDescriptor) {
              extensions.put(extension,(RootDeploymentDescriptor)rdd);
            }
          }
        }
      }
      newArchivist.postStandardDDsRead(descriptor,embeddedArchive,extensions);
      newArchivist.readAnnotations(embeddedArchive,descriptor,extensions);
      newArchivist.postAnnotationProcess(descriptor,embeddedArchive);
      newArchivist.postOpen(descriptor,embeddedArchive);
      if (isHandlingRuntimeInfo()) {
        is=appArchive.getEntry(""String_Node_Str"" + aModule.getAlternateDescriptor());
        if (is != null) {
          DeploymentDescriptorFile confDD=newArchivist.getConfigurationDDFile();
          confDD.setXMLValidation(newArchivist.getRuntimeXMLValidation());
          confDD.setXMLValidationLevel(newArchivist.getRuntimeXMLValidationLevel());
          if (appArchive.getURI() != null) {
            confDD.setErrorReportingString(appArchive.getURI().getSchemeSpecificPart());
          }
          confDD.read(descriptor,is);
          is.close();
          newArchivist.postRuntimeDDsRead((RootDeploymentDescriptor)descriptor,embeddedArchive);
        }
 else {
          if (embeddedArchive != null) {
            newArchivist.readRuntimeDeploymentDescriptor(embeddedArchive,descriptor);
          }
        }
        for (        Map.Entry<ExtensionsArchivist,RootDeploymentDescriptor> extension : extensions.entrySet()) {
          if (extension.getValue() != null) {
            extension.getKey().readRuntimeDeploymentDescriptor(newArchivist,embeddedArchive,extension.getValue());
          }
        }
      }
    }
 else {
      if (embeddedArchive != null) {
        descriptor=newArchivist.open(embeddedArchive,app);
      }
 else {
        DOLUtils.getDefaultLogger().info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
        nonexistentModules.add(aModule);
        continue;
      }
    }
    if (embeddedArchive != null) {
      embeddedArchive.close();
    }
    if (descriptor != null && descriptor instanceof BundleDescriptor) {
      descriptor.getModuleDescriptor().setArchiveUri(aModule.getArchiveUri());
      aModule.setModuleName(descriptor.getModuleDescriptor().getModuleName());
      aModule.setDescriptor((BundleDescriptor)descriptor);
      ((BundleDescriptor)descriptor).setApplication(app);
      aModule.setManifest(newArchivist.getManifest());
      if (!appArchive.exists(""String_Node_Str"")) {
        if (aModule.getModuleType().equals(XModuleType.WAR)) {
          aModule.setContextRoot(aModule.getModuleName());
        }
      }
    }
 else {
      if (embeddedArchive != null) {
        DOLUtils.getDefaultLogger().info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
      }
      return false;
    }
  }
  for (  ModuleDescriptor nonexistentModule : nonexistentModules) {
    app.removeModule(nonexistentModule);
  }
  return true;
}","/** 
 * read the modules deployment descriptor from this application object using the passed archive
 * @param app application containing the list of modules.
 * @param appArchive containing the sub modules files.
 * @return true if everything went fine
 */
public boolean readModulesDescriptors(Application app,ReadableArchive appArchive) throws IOException, SAXParseException {
  List<ModuleDescriptor> nonexistentModules=new ArrayList<ModuleDescriptor>();
  for (  ModuleDescriptor aModule : app.getModules()) {
    if (DOLUtils.getDefaultLogger().isLoggable(Level.FINE)) {
      DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + aModule);
    }
    RootDeploymentDescriptor descriptor=null;
    Archivist newArchivist=archivistFactory.get().getPrivateArchivistFor(aModule.getModuleType());
    newArchivist.initializeContext(this);
    newArchivist.setRuntimeXMLValidation(this.getRuntimeXMLValidation());
    newArchivist.setRuntimeXMLValidationLevel(this.getRuntimeXMLValidationLevel());
    newArchivist.setAnnotationProcessingRequested(annotationProcessingRequested);
    ReadableArchive embeddedArchive=appArchive.getSubArchive(aModule.getArchiveUri());
    if (embeddedArchive == null) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
    }
    embeddedArchive.setParentArchive(appArchive);
    if (aModule.getAlternateDescriptor() != null) {
      InputStream is=appArchive.getEntry(aModule.getAlternateDescriptor());
      DeploymentDescriptorFile ddFile=newArchivist.getStandardDDFile();
      ddFile.setXMLValidation(newArchivist.getXMLValidation());
      ddFile.setXMLValidationLevel(newArchivist.getXMLValidationLevel());
      if (appArchive.getURI() != null) {
        ddFile.setErrorReportingString(appArchive.getURI().getSchemeSpecificPart());
      }
      descriptor=(BundleDescriptor)ddFile.read(is);
      ((BundleDescriptor)descriptor).setApplication(app);
      is.close();
      Map<ExtensionsArchivist,RootDeploymentDescriptor> extensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
      if (extensionsArchivists != null) {
        for (        ExtensionsArchivist extension : extensionsArchivists) {
          if (extension.supportsModuleType(aModule.getModuleType())) {
            Object rdd=extension.open(newArchivist,embeddedArchive,descriptor);
            if (rdd instanceof RootDeploymentDescriptor) {
              extensions.put(extension,(RootDeploymentDescriptor)rdd);
            }
          }
        }
      }
      newArchivist.postStandardDDsRead(descriptor,embeddedArchive,extensions);
      newArchivist.readAnnotations(embeddedArchive,descriptor,extensions);
      newArchivist.postAnnotationProcess(descriptor,embeddedArchive);
      newArchivist.postOpen(descriptor,embeddedArchive);
      if (isHandlingRuntimeInfo()) {
        is=appArchive.getEntry(""String_Node_Str"" + aModule.getAlternateDescriptor());
        if (is != null) {
          DeploymentDescriptorFile confDD=newArchivist.getConfigurationDDFile();
          confDD.setXMLValidation(newArchivist.getRuntimeXMLValidation());
          confDD.setXMLValidationLevel(newArchivist.getRuntimeXMLValidationLevel());
          if (appArchive.getURI() != null) {
            confDD.setErrorReportingString(appArchive.getURI().getSchemeSpecificPart());
          }
          confDD.read(descriptor,is);
          is.close();
          newArchivist.postRuntimeDDsRead((RootDeploymentDescriptor)descriptor,embeddedArchive);
        }
 else {
          if (embeddedArchive != null) {
            newArchivist.readRuntimeDeploymentDescriptor(embeddedArchive,descriptor);
          }
        }
        for (        Map.Entry<ExtensionsArchivist,RootDeploymentDescriptor> extension : extensions.entrySet()) {
          if (extension.getValue() != null) {
            extension.getKey().readRuntimeDeploymentDescriptor(newArchivist,embeddedArchive,extension.getValue());
          }
        }
      }
    }
 else {
      if (embeddedArchive != null) {
        descriptor=newArchivist.open(embeddedArchive,app);
      }
 else {
        DOLUtils.getDefaultLogger().info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
        nonexistentModules.add(aModule);
        continue;
      }
    }
    if (embeddedArchive != null) {
      embeddedArchive.close();
    }
    if (descriptor != null && descriptor instanceof BundleDescriptor) {
      descriptor.getModuleDescriptor().setArchiveUri(aModule.getArchiveUri());
      aModule.setModuleName(descriptor.getModuleDescriptor().getModuleName());
      aModule.setDescriptor((BundleDescriptor)descriptor);
      ((BundleDescriptor)descriptor).setApplication(app);
      aModule.setManifest(newArchivist.getManifest());
      if (!appArchive.exists(""String_Node_Str"")) {
        if (aModule.getModuleType().equals(XModuleType.WAR)) {
          aModule.setContextRoot(aModule.getModuleName());
        }
      }
    }
 else {
      if (embeddedArchive != null) {
        DOLUtils.getDefaultLogger().info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{aModule.getArchiveUri()}));
      }
      return false;
    }
  }
  for (  ModuleDescriptor nonexistentModule : nonexistentModules) {
    app.removeModule(nonexistentModule);
  }
  return true;
}"
30177,"public void generateOptionalLocalInterface(Class ejbClass,String intfClassName) throws Exception {
  if (protectionDomain == null) {
    protectionDomain=ejbClass.getProtectionDomain();
  }
  ClassWriter cw=new ClassWriter(INTF_FLAGS);
  ClassVisitor tv=cw;
  String intfInternalName=intfClassName.replace('.','/');
  tv.visit(V1_1,ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE,intfInternalName,null,Type.getType(Object.class).getInternalName(),(new String[]{Type.getType(Serializable.class).getInternalName()}));
  Set<java.lang.reflect.Method> allMethods=new HashSet<java.lang.reflect.Method>();
  for (Class clz=ejbClass; clz != Object.class; clz=clz.getSuperclass()) {
    java.lang.reflect.Method[] beanMethods=clz.getDeclaredMethods();
    for (    java.lang.reflect.Method m : beanMethods) {
      int mod=m.getModifiers();
      if ((Modifier.isPublic(mod)) && (!Modifier.isStatic(mod)) && (!Modifier.isAbstract(mod))&& (!Modifier.isFinal(mod))) {
        if (!hasSameSignatureAsExisting(m,allMethods)) {
          generateInterfaceMethod(tv,m);
          allMethods.add(m);
        }
      }
    }
  }
  tv.visitEnd();
  byte[] classData=cw.toByteArray();
  classMap.put(intfClassName,classData);
}","public void generateOptionalLocalInterface(Class ejbClass,String intfClassName) throws Exception {
  if (protectionDomain == null) {
    protectionDomain=ejbClass.getProtectionDomain();
  }
  ClassWriter cw=new ClassWriter(INTF_FLAGS);
  ClassVisitor tv=cw;
  String intfInternalName=intfClassName.replace('.','/');
  tv.visit(V1_1,ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE,intfInternalName,null,Type.getType(Object.class).getInternalName(),(new String[]{Type.getType(Serializable.class).getInternalName()}));
  for (  java.lang.reflect.Method m : ejbClass.getMethods()) {
    if (qualifiedAsBeanMethod(m)) {
      generateInterfaceMethod(tv,m);
    }
  }
  tv.visitEnd();
  byte[] classData=cw.toByteArray();
  classMap.put(intfClassName,classData);
}"
30178,"public void generateOptionalLocalInterfaceSubClass(Class superClass,String subClassName,Class delegateClass) throws Exception {
  if (protectionDomain == null) {
    protectionDomain=superClass.getProtectionDomain();
  }
  ClassWriter cw=new ClassWriter(INTF_FLAGS);
  ClassVisitor tv=cw;
  String[] interfaces=new String[]{OptionalLocalInterfaceProvider.class.getName().replace('.','/'),com.sun.ejb.spi.io.IndirectlySerializable.class.getName().replace('.','/')};
  tv.visit(V1_1,ACC_PUBLIC,subClassName.replace('.','/'),null,Type.getType(superClass).getInternalName(),interfaces);
  String fldDesc=Type.getDescriptor(delegateClass);
  FieldVisitor fv=tv.visitField(ACC_PRIVATE,DELEGATE_FIELD_NAME,fldDesc,null,null);
  fv.visitEnd();
{
    Constructor[] ctors=superClass.getConstructors();
    Constructor ctorWithParams=null;
    for (    Constructor ctor : ctors) {
      if (ctor.getParameterTypes().length > 0) {
        ctorWithParams=ctor;
        break;
      }
    }
    MethodVisitor cv=tv.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    cv.visitVarInsn(ALOAD,0);
    String paramTypeString=""String_Node_Str"";
    int maxValue=1;
    if (ctorWithParams != null) {
      Class[] paramTypes=ctorWithParams.getParameterTypes();
      for (int i=0; i < paramTypes.length; i++) {
        cv.visitInsn(ACONST_NULL);
      }
      paramTypeString=Type.getConstructorDescriptor(ctorWithParams);
      maxValue=paramTypes.length + 1;
    }
    cv.visitMethodInsn(INVOKESPECIAL,Type.getType(superClass).getInternalName(),""String_Node_Str"",paramTypeString);
    cv.visitInsn(RETURN);
    cv.visitMaxs(maxValue,1);
  }
  generateSetDelegateMethod(tv,delegateClass,subClassName);
  generateGetSerializableObjectFactoryMethod(tv,fldDesc,subClassName.replace('.','/'));
  Set<java.lang.reflect.Method> allMethods=new HashSet<java.lang.reflect.Method>();
  for (Class clz=superClass; clz != Object.class; clz=clz.getSuperclass()) {
    java.lang.reflect.Method[] beanMethods=clz.getDeclaredMethods();
    for (    java.lang.reflect.Method mth : beanMethods) {
      if (!hasSameSignatureAsExisting(mth,allMethods)) {
        int modifiers=mth.getModifiers();
        boolean isPublic=Modifier.isPublic(modifiers);
        boolean isPrivate=Modifier.isPrivate(modifiers);
        boolean isProtected=Modifier.isProtected(modifiers);
        boolean isPackage=!isPublic && !isPrivate && !isProtected;
        boolean isStatic=Modifier.isStatic(modifiers);
        if (isPublic && !isStatic) {
          generateBeanMethod(tv,subClassName,mth,delegateClass);
        }
 else         if ((isPackage || isProtected) && !isStatic) {
          generateNonAccessibleMethod(tv,mth);
        }
        allMethods.add(mth);
      }
    }
  }
  java.lang.reflect.Method mth=Object.class.getDeclaredMethod(""String_Node_Str"",emptyClassArray);
  if (!hasSameSignatureAsExisting(mth,allMethods)) {
    generateToStringBeanMethod(tv,superClass);
  }
  tv.visitEnd();
  byte[] classData=cw.toByteArray();
  classMap.put(subClassName,classData);
}","public void generateOptionalLocalInterfaceSubClass(Class superClass,String subClassName,Class delegateClass) throws Exception {
  if (protectionDomain == null) {
    protectionDomain=superClass.getProtectionDomain();
  }
  ClassWriter cw=new ClassWriter(INTF_FLAGS);
  ClassVisitor tv=cw;
  String[] interfaces=new String[]{OptionalLocalInterfaceProvider.class.getName().replace('.','/'),com.sun.ejb.spi.io.IndirectlySerializable.class.getName().replace('.','/')};
  tv.visit(V1_1,ACC_PUBLIC,subClassName.replace('.','/'),null,Type.getType(superClass).getInternalName(),interfaces);
  String fldDesc=Type.getDescriptor(delegateClass);
  FieldVisitor fv=tv.visitField(ACC_PRIVATE,DELEGATE_FIELD_NAME,fldDesc,null,null);
  fv.visitEnd();
{
    Constructor[] ctors=superClass.getConstructors();
    Constructor ctorWithParams=null;
    for (    Constructor ctor : ctors) {
      if (ctor.getParameterTypes().length > 0) {
        ctorWithParams=ctor;
        break;
      }
    }
    MethodVisitor cv=tv.visitMethod(ACC_PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null);
    cv.visitVarInsn(ALOAD,0);
    String paramTypeString=""String_Node_Str"";
    int maxValue=1;
    if (ctorWithParams != null) {
      Class[] paramTypes=ctorWithParams.getParameterTypes();
      for (int i=0; i < paramTypes.length; i++) {
        cv.visitInsn(ACONST_NULL);
      }
      paramTypeString=Type.getConstructorDescriptor(ctorWithParams);
      maxValue=paramTypes.length + 1;
    }
    cv.visitMethodInsn(INVOKESPECIAL,Type.getType(superClass).getInternalName(),""String_Node_Str"",paramTypeString);
    cv.visitInsn(RETURN);
    cv.visitMaxs(maxValue,1);
  }
  generateSetDelegateMethod(tv,delegateClass,subClassName);
  generateGetSerializableObjectFactoryMethod(tv,fldDesc,subClassName.replace('.','/'));
  Set<java.lang.reflect.Method> allMethods=new HashSet<java.lang.reflect.Method>();
  for (  java.lang.reflect.Method m : superClass.getMethods()) {
    if (qualifiedAsBeanMethod(m)) {
      generateBeanMethod(tv,subClassName,m,delegateClass);
    }
  }
  for (Class clz=superClass; clz != Object.class; clz=clz.getSuperclass()) {
    java.lang.reflect.Method[] beanMethods=clz.getDeclaredMethods();
    for (    java.lang.reflect.Method mth : beanMethods) {
      if (!hasSameSignatureAsExisting(mth,allMethods)) {
        int modifiers=mth.getModifiers();
        boolean isPublic=Modifier.isPublic(modifiers);
        boolean isPrivate=Modifier.isPrivate(modifiers);
        boolean isProtected=Modifier.isProtected(modifiers);
        boolean isPackage=!isPublic && !isPrivate && !isProtected;
        boolean isStatic=Modifier.isStatic(modifiers);
        if ((isPackage || isProtected) && !isStatic) {
          generateNonAccessibleMethod(tv,mth);
        }
        allMethods.add(mth);
      }
    }
  }
  java.lang.reflect.Method mth=Object.class.getDeclaredMethod(""String_Node_Str"",emptyClassArray);
  if (!hasSameSignatureAsExisting(mth,allMethods)) {
    generateToStringBeanMethod(tv,superClass);
  }
  tv.visitEnd();
  byte[] classData=cw.toByteArray();
  classMap.put(subClassName,classData);
}"
30179,"public NamingEnumeration list(String name) throws NamingException {
  ArrayList list=listNames(name);
  return new NamePairsEnum(this,list.iterator());
}","public NamingEnumeration<NameClassPair> list(String name) throws NamingException {
  ArrayList list=listNames(name);
  return new BindingsIterator<NameClassPair>(this,list.iterator(),true);
}"
30180,"@Override public Object next() throws NamingException {
  return nextElement();
}","@Override public T next() throws NamingException {
  return nextElement();
}"
30181,"BindingsIterator(GlassfishNamingManagerImpl nm,Iterator names){
  this.nm=nm;
  this.names=names;
}","BindingsIterator(GlassfishNamingManagerImpl nm,Iterator names,boolean producesNamesOnly){
  this.nm=nm;
  this.names=names;
  this.producesNamesOnly=producesNamesOnly;
}"
30182,"public NamingEnumeration listBindings(String name) throws NamingException {
  ArrayList list=listNames(name);
  return new BindingsIterator(this,list.iterator());
}","public NamingEnumeration<Binding> listBindings(String name) throws NamingException {
  ArrayList list=listNames(name);
  return new BindingsIterator<Binding>(this,list.iterator(),false);
}"
30183,"@Override public Object nextElement(){
  if (names.hasNext()) {
    try {
      String name=(String)names.next();
      return new Binding(name,nm.lookup(name));
    }
 catch (    Exception ex) {
      throw new RuntimeException(""String_Node_Str"" + ex);
    }
  }
 else   return null;
}","@Override public T nextElement(){
  if (names.hasNext()) {
    try {
      String name=(String)names.next();
      Object obj=nm.lookup(name);
      return producesNamesOnly ? (T)(new NameClassPair(name,getClass().getName())) : (T)(new Binding(name,obj));
    }
 catch (    RuntimeException ex) {
      throw ex;
    }
catch (    Exception ex) {
      throw new RuntimeException(ex);
    }
  }
 else {
    return null;
  }
}"
30184,"/** 
 * Lookup a name in either the cosnaming or serial context.
 * @return the object that is being looked up.
 * @throws NamingException if there is a naming exception.
 */
public Object lookup(Name name) throws NamingException {
  return lookup(name.toString());
}","/** 
 * Lookup a name in either the cosnaming or serial context.
 * @return the object that is being looked up.
 * @throws NamingException if there is a naming exception.
 */
@Override public Object lookup(Name name) throws NamingException {
  return lookup(name.toString());
}"
30185,"/** 
 * Return the name parser for the specified name.
 * @return the NameParser instance.
 * @throws NamingException if there is an exception.
 */
public NameParser getNameParser(Name name) throws NamingException {
  return getNameParser(name.toString());
}","/** 
 * Return the name parser for the specified name.
 * @return the NameParser instance.
 * @throws NamingException if there is an exception.
 */
@Override public NameParser getNameParser(Name name) throws NamingException {
  return getNameParser(name.toString());
}"
30186,"public Name composeName(Name name,Name prefix) throws NamingException {
  Name result=(Name)(prefix.clone());
  result.addAll(name);
  return result;
}","@Override public Name composeName(Name name,Name prefix) throws NamingException {
  Name result=(Name)(prefix.clone());
  result.addAll(name);
  return result;
}"
30187,"/** 
 * Get the context's environment.
 */
public Hashtable getEnvironment() throws NamingException {
  if (myEnv == null) {
    myEnv=new Hashtable(3,0.75f);
  }
  return myEnv;
}","/** 
 * Get the context's environment.
 */
@Override public Hashtable getEnvironment() throws NamingException {
  if (myEnv == null) {
    myEnv=new Hashtable(3,0.75f);
  }
  return myEnv;
}"
30188,"/** 
 * Lists the contents of a context or subcontext. The operation is delegated to the serial context.
 * @return an enumeration of the contents of the context.
 * @throws NamingException if there is a naming exception.
 */
public NamingEnumeration list(Name name) throws NamingException {
  return list(name.toString());
}","/** 
 * Lists the contents of a context or subcontext. The operation is delegated to the serial context.
 * @return an enumeration of the contents of the context.
 * @throws NamingException if there is a naming exception.
 */
@Override public NamingEnumeration<NameClassPair> list(Name name) throws NamingException {
  return list(name.toString());
}"
30189,"/** 
 * Lists the bindings of a context or subcontext. The operation is delegated to the serial context.
 * @return an enumeration of the bindings of the context.
 * @throws NamingException if there is a naming exception.
 */
public NamingEnumeration listBindings(Name name) throws NamingException {
  return listBindings(name.toString());
}","/** 
 * Lists the bindings of a context or subcontext. The operation is delegated to the serial context.
 * @return an enumeration of the bindings of the context.
 * @throws NamingException if there is a naming exception.
 */
@Override public NamingEnumeration<Binding> listBindings(Name name) throws NamingException {
  return listBindings(name.toString());
}"
30190,"/** 
 * This context does not treat links specially. A lookup operation is performed.
 */
public Object lookupLink(Name name) throws NamingException {
  return lookupLink(name.toString());
}","/** 
 * This context does not treat links specially. A lookup operation is performed.
 */
@Override public Object lookupLink(Name name) throws NamingException {
  return lookupLink(name.toString());
}"
30191,"/** 
 * Bind an object in the namespace. Binds the reference to the actual object in either the cosnaming or serial context.
 * @throws NamingException if there is a naming exception.
 */
public void bind(Name name,Object obj) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}","/** 
 * Bind an object in the namespace. Binds the reference to the actual object in either the cosnaming or serial context.
 * @throws NamingException if there is a naming exception.
 */
@Override public void bind(Name name,Object obj) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}"
30192,"/** 
 * Rebind an object in the namespace. Rebinds the reference to the actual object in either the cosnaming or serial context.
 * @throws NamingException if there is a naming exception.
 */
public void rebind(Name name,Object obj) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}","/** 
 * Rebind an object in the namespace. Rebinds the reference to the actual object in either the cosnaming or serial context.
 * @throws NamingException if there is a naming exception.
 */
@Override public void rebind(Name name,Object obj) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}"
30193,"/** 
 * Unbind an object from the namespace.
 * @throws NamingException if there is a naming exception.
 */
public void unbind(Name name) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}","/** 
 * Unbind an object from the namespace.
 * @throws NamingException if there is a naming exception.
 */
@Override public void unbind(Name name) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}"
30194,"/** 
 * The rename operation is not supported by this context. It throws an OperationNotSupportedException.
 */
public void rename(Name oldname,Name newname) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}","/** 
 * The rename operation is not supported by this context. It throws an OperationNotSupportedException.
 */
@Override public void rename(Name oldname,Name newname) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}"
30195,"public Context createSubcontext(Name name) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}","@Override public Context createSubcontext(Name name) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}"
30196,"/** 
 * Remove a property from the environment.
 */
public Object removeFromEnvironment(String propName) throws NamingException {
  if (myEnv == null) {
    return null;
  }
  return myEnv.remove(propName);
}","/** 
 * Remove a property from the environment.
 */
@Override public Object removeFromEnvironment(String propName) throws NamingException {
  if (myEnv == null) {
    return null;
  }
  return myEnv.remove(propName);
}"
30197,"/** 
 * Return the name of this context within the namespace.  The name can be passed as an argument to (new InitialContext()).lookup() to reproduce this context.
 */
public String getNameInNamespace() throws NamingException {
  return myName;
}","/** 
 * Return the name of this context within the namespace.  The name can be passed as an argument to (new InitialContext()).lookup() to reproduce this context.
 */
@Override public String getNameInNamespace() throws NamingException {
  return myName;
}"
30198,"/** 
 * The destroySubcontext operation is not supported by this context. It throws an OperationNotSupportedException.
 */
public void destroySubcontext(Name name) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}","/** 
 * The destroySubcontext operation is not supported by this context. It throws an OperationNotSupportedException.
 */
@Override public void destroySubcontext(Name name) throws NamingException {
  throw new NamingException(""String_Node_Str"");
}"
30199,"/** 
 * Add a property to the environment.
 */
public Object addToEnvironment(String propName,Object propVal) throws NamingException {
  if (myEnv == null) {
    myEnv=new Hashtable(5,0.75f);
  }
  return myEnv.put(propName,propVal);
}","/** 
 * Add a property to the environment.
 */
@Override public Object addToEnvironment(String propName,Object propVal) throws NamingException {
  if (myEnv == null) {
    myEnv=new Hashtable(5,0.75f);
  }
  return myEnv.put(propName,propVal);
}"
30200,"/** 
 * New JNDI 1.2 operation.
 */
public void close() throws NamingException {
  myEnv=null;
}","/** 
 * New JNDI 1.2 operation.
 */
@Override public void close() throws NamingException {
  myEnv=null;
}"
30201,"public byte[] run(){
  Iterator iter=credset.iterator();
  PasswordCredential pc=(PasswordCredential)iter.next();
  return pc.getTargetName();
}","public byte[] run(){
  Iterator<PasswordCredential> iter=credset.iterator();
  PasswordCredential pc=iter.next();
  return pc.getTargetName();
}"
30202,"private byte[] getTargetName(Subject subj){
  byte[] tgt_name={};
  final Subject sub=subj;
  final Set credset=AccessController.doPrivileged(new PrivilegedAction<Set>(){
    public Set run(){
      return sub.getPrivateCredentials(PasswordCredential.class);
    }
  }
);
  if (credset.size() == 1) {
    tgt_name=AccessController.doPrivileged(new PrivilegedAction<byte[]>(){
      public byte[] run(){
        Iterator iter=credset.iterator();
        PasswordCredential pc=(PasswordCredential)iter.next();
        return pc.getTargetName();
      }
    }
);
  }
  return tgt_name;
}","private byte[] getTargetName(Subject subj){
  byte[] tgt_name={};
  final Subject sub=subj;
  final Set<PasswordCredential> credset=AccessController.doPrivileged(new PrivilegedAction<Set>(){
    public Set run(){
      return sub.getPrivateCredentials(PasswordCredential.class);
    }
  }
);
  if (credset.size() == 1) {
    tgt_name=AccessController.doPrivileged(new PrivilegedAction<byte[]>(){
      public byte[] run(){
        Iterator<PasswordCredential> iter=credset.iterator();
        PasswordCredential pc=iter.next();
        return pc.getTargetName();
      }
    }
);
  }
  return tgt_name;
}"
30203,"/** 
 * Get the username and password either from the JAAS subject or from thread local storage. For appclients if login has'nt happened this method would trigger login and popup a user interface to gather authentication information.
 * @return the security context.
 */
private SecurityContext getUsernameAndPassword(ComponentInvocation ci,CompoundSecMech mechanism) throws SecurityMechanismException {
  try {
    Subject s=null;
    if (isNotServerOrACC()) {
      ClientSecurityContext sc=ClientSecurityContext.getCurrent();
      if (sc == null) {
        return null;
      }
      s=sc.getSubject();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + s);
      }
    }
 else {
      if (isACC()) {
        ClientSecurityContext sc=ClientSecurityContext.getCurrent();
        if (sc == null) {
          s=LoginContextDriver.doClientLogin(SecurityConstants.USERNAME_PASSWORD,SecurityServicesUtil.getInstance().getCallbackHandler());
        }
 else {
          s=sc.getSubject();
        }
      }
 else {
        s=getSubjectFromSecurityCurrent();
      }
    }
    SecurityContext ctx=new SecurityContext();
    final Subject sub=s;
    ctx.subject=s;
    Set privateCredSet=AccessController.doPrivileged(new PrivilegedAction<Set>(){
      public Set run(){
        return sub.getPrivateCredentials();
      }
    }
);
    if (privateCredSet.isEmpty()) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      ctx.authcls=null;
      ctx.identcls=GSSUPName.class;
    }
 else {
      AS_ContextSec asContext=mechanism.as_context_mech;
      final byte[] target_name=asContext.target_name;
      byte[] _realm=null;
      if (target_name == null || target_name.length == 0) {
        _realm=Realm.getDefaultRealm().getBytes();
      }
 else {
        _realm=GSSUtils.importName(GSSUtils.GSSUP_MECH_OID,target_name);
      }
      final String realm_name=new String(_realm);
      final Iterator it=privateCredSet.iterator();
      for (; it.hasNext(); ) {
        AccessController.doPrivileged(new PrivilegedAction<Object>(){
          public java.lang.Object run(){
            PasswordCredential pc=(PasswordCredential)it.next();
            pc.setRealm(realm_name);
            return null;
          }
        }
);
      }
      ctx.authcls=PasswordCredential.class;
    }
    return ctx;
  }
 catch (  LoginException le) {
    throw le;
  }
catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
}","/** 
 * Get the username and password either from the JAAS subject or from thread local storage. For appclients if login has'nt happened this method would trigger login and popup a user interface to gather authentication information.
 * @return the security context.
 */
private SecurityContext getUsernameAndPassword(ComponentInvocation ci,CompoundSecMech mechanism) throws SecurityMechanismException {
  try {
    Subject s=null;
    if (isNotServerOrACC()) {
      ClientSecurityContext sc=ClientSecurityContext.getCurrent();
      if (sc == null) {
        return null;
      }
      s=sc.getSubject();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + s);
      }
    }
 else {
      if (isACC()) {
        ClientSecurityContext sc=ClientSecurityContext.getCurrent();
        if (sc == null) {
          s=LoginContextDriver.doClientLogin(SecurityConstants.USERNAME_PASSWORD,SecurityServicesUtil.getInstance().getCallbackHandler());
        }
 else {
          s=sc.getSubject();
        }
      }
 else {
        s=getSubjectFromSecurityCurrent();
      }
    }
    SecurityContext ctx=new SecurityContext();
    final Subject sub=s;
    ctx.subject=s;
    Set<PasswordCredential> privateCredSet=AccessController.doPrivileged(new PrivilegedAction<Set>(){
      public Set run(){
        return sub.getPrivateCredentials(PasswordCredential.class);
      }
    }
);
    if (privateCredSet.isEmpty()) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"");
      }
      ctx.authcls=null;
      ctx.identcls=GSSUPName.class;
    }
 else {
      AS_ContextSec asContext=mechanism.as_context_mech;
      final byte[] target_name=asContext.target_name;
      byte[] _realm=null;
      if (target_name == null || target_name.length == 0) {
        _realm=Realm.getDefaultRealm().getBytes();
      }
 else {
        _realm=GSSUtils.importName(GSSUtils.GSSUP_MECH_OID,target_name);
      }
      final String realm_name=new String(_realm);
      final Iterator it=privateCredSet.iterator();
      for (; it.hasNext(); ) {
        AccessController.doPrivileged(new PrivilegedAction<Object>(){
          public java.lang.Object run(){
            PasswordCredential pc=(PasswordCredential)it.next();
            pc.setRealm(realm_name);
            return null;
          }
        }
);
      }
      ctx.authcls=PasswordCredential.class;
    }
    return ctx;
  }
 catch (  LoginException le) {
    throw le;
  }
catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    return null;
  }
}"
30204,"/** 
 * Get the principal/distinguished name from thread local storage.
 * @return the security context.
 */
private SecurityContext getIdentity() throws SecurityMechanismException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  SecurityContext ctx=new SecurityContext();
  final SecurityContext sCtx=ctx;
  com.sun.enterprise.security.SecurityContext scontext=com.sun.enterprise.security.SecurityContext.getCurrent();
  if ((scontext == null) || scontext.didServerGenerateCredentials()) {
    sCtx.identcls=AnonCredential.class;
    AccessController.doPrivileged(new PrivilegedAction<Object>(){
      public java.lang.Object run(){
        Subject sub=new Subject();
        sCtx.subject=sub;
        sCtx.subject.getPublicCredentials().add(new AnonCredential());
        return null;
      }
    }
);
    return sCtx;
  }
  Subject s=getSubjectFromSecurityCurrent();
  ctx.subject=s;
  final Subject sub=s;
  Set credSet=AccessController.doPrivileged(new PrivilegedAction<Set>(){
    public Set run(){
      return sub.getPrivateCredentials(PasswordCredential.class);
    }
  }
);
  if (credSet.size() == 1) {
    ctx.identcls=GSSUPName.class;
    final Set cs=credSet;
    Subject subj=AccessController.doPrivileged(new PrivilegedAction<Subject>(){
      public Subject run(){
        Subject ss=new Subject();
        Iterator iter=cs.iterator();
        PasswordCredential pc=(PasswordCredential)iter.next();
        GSSUPName gssname=new GSSUPName(pc.getUser(),pc.getRealm());
        ss.getPublicCredentials().add(gssname);
        return ss;
      }
    }
);
    ctx.subject=subj;
    return ctx;
  }
  credSet=s.getPublicCredentials();
  if (credSet.size() != 1) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    return null;
  }
 else {
    Iterator credIter=credSet.iterator();
    if (credIter.hasNext()) {
      Object o=credIter.next();
      if (o instanceof GSSUPName) {
        ctx.identcls=GSSUPName.class;
      }
 else       if (o instanceof X500Name) {
        ctx.identcls=X500Name.class;
      }
 else {
        ctx.identcls=X509CertificateCredential.class;
      }
    }
 else {
      _logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
  }
  return ctx;
}","/** 
 * Get the principal/distinguished name from thread local storage.
 * @return the security context.
 */
private SecurityContext getIdentity() throws SecurityMechanismException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  SecurityContext ctx=new SecurityContext();
  final SecurityContext sCtx=ctx;
  com.sun.enterprise.security.SecurityContext scontext=com.sun.enterprise.security.SecurityContext.getCurrent();
  if ((scontext == null) || scontext.didServerGenerateCredentials()) {
    sCtx.identcls=AnonCredential.class;
    AccessController.doPrivileged(new PrivilegedAction<Object>(){
      public java.lang.Object run(){
        Subject sub=new Subject();
        sCtx.subject=sub;
        sCtx.subject.getPublicCredentials().add(new AnonCredential());
        return null;
      }
    }
);
    return sCtx;
  }
  Subject s=getSubjectFromSecurityCurrent();
  ctx.subject=s;
  final Subject sub=s;
  Set<PasswordCredential> credSet=AccessController.doPrivileged(new PrivilegedAction<Set>(){
    public Set run(){
      return sub.getPrivateCredentials(PasswordCredential.class);
    }
  }
);
  if (credSet.size() == 1) {
    ctx.identcls=GSSUPName.class;
    final Set cs=credSet;
    Subject subj=AccessController.doPrivileged(new PrivilegedAction<Subject>(){
      public Subject run(){
        Subject ss=new Subject();
        Iterator<PasswordCredential> iter=cs.iterator();
        PasswordCredential pc=iter.next();
        GSSUPName gssname=new GSSUPName(pc.getUser(),pc.getRealm());
        ss.getPublicCredentials().add(gssname);
        return ss;
      }
    }
);
    ctx.subject=subj;
    return ctx;
  }
  Set pubCredSet=s.getPublicCredentials();
  if (pubCredSet.size() != 1) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    return null;
  }
 else {
    Iterator credIter=pubCredSet.iterator();
    if (credIter.hasNext()) {
      Object o=credIter.next();
      if (o instanceof GSSUPName) {
        ctx.identcls=GSSUPName.class;
      }
 else       if (o instanceof X500Name) {
        ctx.identcls=X500Name.class;
      }
 else {
        ctx.identcls=X509CertificateCredential.class;
      }
    }
 else {
      _logger.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
  }
  return ctx;
}"
30205,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + command + ""String_Node_Str""+ httpMethod+ ""String_Node_Str""+ resourcePath+ ""String_Node_Str""+ displayName+ ""String_Node_Str""+ String.valueOf(commandParams)+ ""String_Node_Str""+ customClassName+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + command + ""String_Node_Str""+ httpMethod+ ""String_Node_Str""+ resourcePath+ ""String_Node_Str""+ displayName+ ""String_Node_Str""+ Arrays.asList(commandParams).toString()+ ""String_Node_Str""+ customClassName+ '}';
}"
30206,"/** 
 * Return the relative path associated with this servlet.
 * @param request The servlet request we are processing
 */
protected String getRelativePath(HttpServletRequest request){
  if (request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI) != null) {
    String result=(String)request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
    if (result == null)     result=(String)request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
    if ((result == null) || (result.equals(""String_Node_Str"")))     result=""String_Node_Str"";
    return (result);
  }
  String result=request.getPathInfo();
  if (result == null) {
    result=request.getServletPath();
  }
  if ((result == null) || (result.equals(""String_Node_Str""))) {
    result=""String_Node_Str"";
  }
  return (result);
}","/** 
 * Return the relative path associated with this servlet.
 * @param request The servlet request we are processing
 */
protected String getRelativePath(HttpServletRequest request){
  if (request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI) != null) {
    String result=(String)request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
    if (result == null)     result=(String)request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
    if ((result == null) || (result.equals(""String_Node_Str"")))     result=""String_Node_Str"";
    return (result);
  }
  String result=request.getPathInfo();
  if (result == null) {
    result=request.getServletPath();
  }
 else {
    result=request.getServletPath() + result;
  }
  if ((result == null) || (result.equals(""String_Node_Str""))) {
    result=""String_Node_Str"";
  }
  return (result);
}"
30207,"private void validateKeepStateOption(DeploymentContext context,DeployCommandParameters params,Application app){
  if ((params.keepstate != null && params.keepstate) || app.getKeepState()) {
    if (!DeploymentUtils.isDASTarget(params.target)) {
      params.keepstate=false;
      String warningMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      ActionReport subReport=context.getActionReport().addSubActionsReport();
      subReport.setActionExitCode(ActionReport.ExitCode.WARNING);
      subReport.setMessage(warningMsg);
      context.getLogger().log(Level.WARNING,warningMsg);
    }
  }
}","private void validateKeepStateOption(DeploymentContext context,DeployCommandParameters params,Application app){
  if ((params.keepstate != null && params.keepstate) || app.getKeepState()) {
    if (!isDASTarget(context,params)) {
      params.keepstate=false;
      String warningMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      ActionReport subReport=context.getActionReport().addSubActionsReport();
      subReport.setActionExitCode(ActionReport.ExitCode.WARNING);
      subReport.setMessage(warningMsg);
      context.getLogger().log(Level.WARNING,warningMsg);
    }
  }
}"
30208,"/** 
 * Return true if the two object references refer to the same remote object.
 */
@Override public boolean isIdentical(Remote obj1,Remote obj2){
  org.omg.CORBA.Object corbaObj1=(org.omg.CORBA.Object)obj1;
  org.omg.CORBA.Object corbaObj2=(org.omg.CORBA.Object)obj2;
  return corbaObj1._is_equivalent(corbaObj2);
}","/** 
 * Return true if the two object references refer to the same remote object.
 */
@Override public boolean isIdentical(Remote obj1,Remote obj2){
  if (obj1 instanceof org.omg.CORBA.Object && obj2 instanceof org.omg.CORBA.Object) {
    org.omg.CORBA.Object corbaObj1=(org.omg.CORBA.Object)obj1;
    org.omg.CORBA.Object corbaObj2=(org.omg.CORBA.Object)obj2;
    return corbaObj1._is_equivalent(corbaObj2);
  }
 else {
    return false;
  }
}"
30209,"private boolean setSyncBundleExportFile(){
  if (isRetrieve) {
    try {
      syncBundleExport=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      syncBundleExport.deleteOnExit();
    }
 catch (    Exception ex) {
      syncBundleExport=null;
      setError(Strings.get(""String_Node_Str"",ex.getLocalizedMessage()));
      return false;
    }
  }
 else {
    File f=null;
    if (file_name != null && !file_name.isEmpty()) {
      f=new File(file_name);
      if (f.isDirectory()) {
        f=new File(f,getDefaultBundleName());
      }
    }
 else {
      f=getDefaultBundle();
    }
    if (f.getParentFile() != null && !f.getParentFile().exists()) {
      f.getParentFile().mkdirs();
    }
    syncBundleExport=SmartFile.sanitize(f);
  }
  return true;
}","private boolean setSyncBundleExportFile(){
  if (isRetrieve) {
    try {
      syncBundleExport=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      syncBundleExport.deleteOnExit();
    }
 catch (    Exception ex) {
      syncBundleExport=null;
      setError(Strings.get(""String_Node_Str"",ex.getLocalizedMessage()));
      return false;
    }
  }
 else {
    File f=null;
    if (file_name != null && !file_name.isEmpty()) {
      f=new File(file_name);
      if (f.isDirectory()) {
        f=new File(f,getDefaultBundleName());
      }
    }
 else {
      f=getDefaultBundle();
    }
    if (f.getParentFile() != null && !f.getParentFile().exists()) {
      if (!f.getParentFile().mkdirs()) {
        setError(Strings.get(""String_Node_Str"",f.getParentFile().getPath()));
        return false;
      }
    }
    syncBundleExport=SmartFile.sanitize(f);
  }
  return true;
}"
30210,"@Override public void execute(AdminCommandContext ctxt){
  final ActionReport report=ctxt.getActionReport();
  final Logger logger=ctxt.getLogger();
  try {
    Node n=domain.getNodes().getNode(node);
    if (n == null) {
      ConfigSupport.apply(new SingleConfigCode<Nodes>(){
        public Object run(        Nodes param) throws PropertyVetoException, TransactionFailure {
          Node newNode=param.createChild(Node.class);
          newNode.setName(node);
          if (installdir != null && installdir != ""String_Node_Str"")           newNode.setInstallDir(installdir);
          if (nodedir != null && nodedir != ""String_Node_Str"")           newNode.setNodeDir(nodedir);
          if (nodehost != null && nodehost != ""String_Node_Str"")           newNode.setNodeHost(nodehost);
          newNode.setType(type);
          param.getNode().add(newNode);
          return newNode;
        }
      }
,domain.getNodes());
    }
    Server s=domain.getServers().getServer(instanceName);
    if (s == null) {
      ConfigSupport.apply(new SingleConfigCode<Servers>(){
        public Object run(        Servers param) throws PropertyVetoException, TransactionFailure {
          Server newServer=param.createChild(Server.class);
          newServer.setConfigRef(config);
          newServer.setName(instanceName);
          newServer.setNodeRef(node);
          if (systemProperties != null) {
            for (            final Map.Entry<Object,Object> entry : systemProperties.entrySet()) {
              final String propName=(String)entry.getKey();
              final String propValue=(String)entry.getValue();
              SystemProperty newSP=newServer.createChild(SystemProperty.class);
              newSP.setName(propName);
              newSP.setValue(propValue);
              newServer.getSystemProperty().add(newSP);
            }
          }
          param.getServer().add(newServer);
          return newServer;
        }
      }
,domain.getServers());
      Cluster thisCluster=domain.getClusterNamed(clusterName);
      if (thisCluster != null) {
        ConfigSupport.apply(new SingleConfigCode<Cluster>(){
          public Object run(          Cluster param) throws PropertyVetoException, TransactionFailure {
            ServerRef newServerRef=param.createChild(ServerRef.class);
            newServerRef.setRef(instanceName);
            newServerRef.setLbEnabled(lbEnabled);
            param.getServerRef().add(newServerRef);
            return param;
          }
        }
,thisCluster);
      }
    }
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  TransactionFailure tfe) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",instanceName,server.getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
    return;
  }
catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",instanceName,server.getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
}","@Override public void execute(AdminCommandContext ctxt){
  final ActionReport report=ctxt.getActionReport();
  try {
    Node n=domain.getNodes().getNode(node);
    if (n == null) {
      ConfigSupport.apply(new SingleConfigCode<Nodes>(){
        @Override public Object run(        Nodes param) throws PropertyVetoException, TransactionFailure {
          Node newNode=param.createChild(Node.class);
          newNode.setName(node);
          if (installdir != null && !""String_Node_Str"".equals(installdir))           newNode.setInstallDir(installdir);
          if (nodedir != null && !""String_Node_Str"".equals(nodedir))           newNode.setNodeDir(nodedir);
          if (nodehost != null && !""String_Node_Str"".equals(nodehost))           newNode.setNodeHost(nodehost);
          newNode.setType(type);
          param.getNode().add(newNode);
          return newNode;
        }
      }
,domain.getNodes());
    }
    Server s=domain.getServers().getServer(instanceName);
    if (s == null) {
      ConfigSupport.apply(new SingleConfigCode<Servers>(){
        public Object run(        Servers param) throws PropertyVetoException, TransactionFailure {
          Server newServer=param.createChild(Server.class);
          newServer.setConfigRef(config);
          newServer.setName(instanceName);
          newServer.setNodeRef(node);
          if (systemProperties != null) {
            for (            final Map.Entry<Object,Object> entry : systemProperties.entrySet()) {
              final String propName=(String)entry.getKey();
              final String propValue=(String)entry.getValue();
              SystemProperty newSP=newServer.createChild(SystemProperty.class);
              newSP.setName(propName);
              newSP.setValue(propValue);
              newServer.getSystemProperty().add(newSP);
            }
          }
          param.getServer().add(newServer);
          return newServer;
        }
      }
,domain.getServers());
      Cluster thisCluster=domain.getClusterNamed(clusterName);
      if (thisCluster != null) {
        ConfigSupport.apply(new SingleConfigCode<Cluster>(){
          public Object run(          Cluster param) throws PropertyVetoException, TransactionFailure {
            ServerRef newServerRef=param.createChild(ServerRef.class);
            newServerRef.setRef(instanceName);
            newServerRef.setLbEnabled(lbEnabled);
            param.getServerRef().add(newServerRef);
            return param;
          }
        }
,thisCluster);
      }
    }
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  TransactionFailure tfe) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",instanceName,server.getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
    return;
  }
catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",instanceName,server.getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
}"
30211,"public BitSet getRolesOfPrincipals(String pcid,String[] roles,Principal[] principals) throws SecurityException, UnsupportedOperationException {
  BitSet roleSet=new BitSet(roles.length);
  if (principals.length == 0 || roles == null || roles.length == 0) {
    return null;
  }
  SecurityRoleMapper srm=getInternalMapper(pcid);
  for (int i=0; i < roles.length; i++) {
    roleSet.set(i,arePrincipalsInRole(srm,principals,roles[i]));
  }
  return roleSet;
}","public BitSet getRolesOfPrincipals(String pcid,String[] roles,Principal[] principals) throws SecurityException, UnsupportedOperationException {
  if (principals.length == 0 || roles == null || roles.length == 0) {
    return null;
  }
  BitSet roleSet=new BitSet(roles.length);
  SecurityRoleMapper srm=getInternalMapper(pcid);
  for (int i=0; i < roles.length; i++) {
    roleSet.set(i,arePrincipalsInRole(srm,principals,roles[i]));
  }
  return roleSet;
}"
30212,"/** 
 * Causes all policy statements to be deleted from this PolicyConfiguration and sets its internal state such that calling any method, other than delete, getContextID, or inService on the PolicyConfiguration will be rejected and cause an UnsupportedOperationException to be thrown. <P> This operation has no affect on any linked PolicyConfigurations other than removing any links involving the deleted PolicyConfiguration.
 * @throws java.lang.SecurityException if called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the delete method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException.
 */
public void delete() throws javax.security.jacc.PolicyContextException {
  checkSetPolicyPermission();
  SharedState.removeLinks(id);
  pcwLock.lock();
  try {
    removePolicy();
  }
  finally {
    pcwLock.unlock();
    setState(DELETED_STATE);
  }
}","/** 
 * Causes all policy statements to be deleted from this PolicyConfiguration and sets its internal state such that calling any method, other than delete, getContextID, or inService on the PolicyConfiguration will be rejected and cause an UnsupportedOperationException to be thrown. <P> This operation has no affect on any linked PolicyConfigurations other than removing any links involving the deleted PolicyConfiguration.
 * @throws java.lang.SecurityException if called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the delete method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException.
 */
public void delete() throws javax.security.jacc.PolicyContextException {
  checkSetPolicyPermission();
  SharedState.removeLinks(id);
  pcwLock.lock();
  try {
    removePolicy();
  }
  finally {
    try {
      setState(DELETED_STATE);
    }
  finally {
      pcwLock.unlock();
    }
  }
}"
30213,"private Role getRole(String roleName){
  int index=-1;
  Role rvalue=new Role(roleName);
  if (roleTable == null) {
    roleTable=new ArrayList<Role>();
  }
 else {
    index=roleTable.indexOf(rvalue);
  }
  if (index < 0) {
    roleTable.add(rvalue);
    roleTable.indexOf(rvalue);
  }
 else {
    rvalue=roleTable.get(index);
  }
  return rvalue;
}","private Role getRole(String roleName){
  int index=-1;
  Role rvalue=new Role(roleName);
  if (roleTable == null) {
    roleTable=new ArrayList<Role>();
  }
 else {
    index=roleTable.indexOf(rvalue);
  }
  if (index < 0) {
    roleTable.add(rvalue);
  }
 else {
    rvalue=roleTable.get(index);
  }
  return rvalue;
}"
30214,"/** 
 * Makes sure something is running at the DASHost and DASPort. We intentionally do not do an operation that requires authentication since we may be called in a context where authentication is not provided (like over SSH). This method assumes that _create_instance_filesystem is being called by the DAS via SSH -- so the DAS should be running.
 * @throws CommandException
 */
private void checkDASCoordinates() throws CommandException {
  try {
    InetAddress addr=InetAddress.getByName(DASHost);
  }
 catch (  UnknownHostException e) {
    String thisHost=NetUtils.getHostName();
    String msg=Strings.get(""String_Node_Str"",DASHost,thisHost);
    throw new CommandException(msg,e);
  }
  if (!NetUtils.isRunning(DASHost,DASPort)) {
    String thisHost=NetUtils.getHostName();
    String msg=Strings.get(""String_Node_Str"",DASHost,Integer.toString(DASPort),thisHost);
    throw new CommandException(msg);
  }
}","/** 
 * Makes sure something is running at the DASHost and DASPort. We intentionally do not do an operation that requires authentication since we may be called in a context where authentication is not provided (like over SSH). This method assumes that _create_instance_filesystem is being called by the DAS via SSH -- so the DAS should be running.
 * @throws CommandException
 */
private void checkDASCoordinates() throws CommandException {
  try {
    InetAddress.getByName(DASHost);
  }
 catch (  UnknownHostException e) {
    String thisHost=NetUtils.getHostName();
    String msg=Strings.get(""String_Node_Str"",DASHost,thisHost);
    throw new CommandException(msg,e);
  }
  if (!NetUtils.isRunning(DASHost,DASPort)) {
    String thisHost=NetUtils.getHostName();
    String msg=Strings.get(""String_Node_Str"",DASHost,Integer.toString(DASPort),thisHost);
    throw new CommandException(msg);
  }
}"
30215,"private void writeDasProperties() throws IOException {
  dasPropsFile.createNewFile();
  dasProperties=new Properties();
  dasProperties.setProperty(K_DAS_HOST,DASHost);
  dasProperties.setProperty(K_DAS_PORT,String.valueOf(DASPort));
  dasProperties.setProperty(K_DAS_IS_SECURE,String.valueOf(dasIsSecure));
  dasProperties.setProperty(K_DAS_PROTOCOL,DASProtocol);
  FileOutputStream fos=new FileOutputStream(dasPropsFile);
  dasProperties.store(fos,Strings.get(""String_Node_Str""));
  fos.close();
}","private void writeDasProperties() throws IOException {
  if (dasPropsFile.createNewFile()) {
    dasProperties=new Properties();
    dasProperties.setProperty(K_DAS_HOST,DASHost);
    dasProperties.setProperty(K_DAS_PORT,String.valueOf(DASPort));
    dasProperties.setProperty(K_DAS_IS_SECURE,String.valueOf(dasIsSecure));
    dasProperties.setProperty(K_DAS_PROTOCOL,DASProtocol);
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(dasPropsFile);
      dasProperties.store(fos,Strings.get(""String_Node_Str""));
    }
  finally {
      if (fos != null) {
        fos.close();
      }
    }
  }
}"
30216,"private void writeDasProperties() throws IOException {
  dasPropsFile.createNewFile();
  dasProperties=new Properties();
  dasProperties.setProperty(K_DAS_HOST,DASHost);
  dasProperties.setProperty(K_DAS_PORT,String.valueOf(DASPort));
  dasProperties.setProperty(K_DAS_IS_SECURE,String.valueOf(dasIsSecure));
  dasProperties.setProperty(K_DAS_PROTOCOL,DASProtocol);
  FileOutputStream fos=new FileOutputStream(dasPropsFile);
  dasProperties.store(fos,Strings.get(""String_Node_Str""));
  fos.close();
}","private void writeDasProperties() throws IOException {
  if (dasPropsFile.createNewFile()) {
    dasProperties=new Properties();
    dasProperties.setProperty(K_DAS_HOST,DASHost);
    dasProperties.setProperty(K_DAS_PORT,String.valueOf(DASPort));
    dasProperties.setProperty(K_DAS_IS_SECURE,String.valueOf(dasIsSecure));
    dasProperties.setProperty(K_DAS_PROTOCOL,DASProtocol);
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(dasPropsFile);
      dasProperties.store(fos,Strings.get(""String_Node_Str""));
    }
  finally {
      if (fos != null) {
        fos.close();
      }
    }
  }
}"
30217,"private void restoreInstanceDir(){
  File backup=getBackupDir();
  if (backup != null && backup.isDirectory()) {
    getServerDirs().getServerDir().delete();
    backup.renameTo(getServerDirs().getServerDir());
  }
}","private void restoreInstanceDir(){
  File backup=getBackupDir();
  if (backup != null && backup.isDirectory()) {
    getServerDirs().getServerDir().delete();
    if (!backup.renameTo(getServerDirs().getServerDir())) {
      logger.warning(Strings.get(""String_Node_Str"",backup.getAbsolutePath(),getServerDirs().getServerDir().getAbsolutePath()));
    }
  }
}"
30218,"private int createDirectories() throws CommandException {
  if (!agentConfigDir.isDirectory()) {
    agentConfigDir.mkdirs();
  }
  writeProperties();
  FileInputStream in=null;
  Payload.Inbound payload=null;
  try {
    in=new FileInputStream(syncBundle);
    payload=PayloadImpl.Inbound.newInstance(""String_Node_Str"",in);
  }
 catch (  IOException ex) {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException ioe) {
      logger.warning(Strings.get(""String_Node_Str"",syncBundle,ioe.getLocalizedMessage()));
    }
    throw new CommandException(Strings.get(""String_Node_Str"",syncBundle,ex.getLocalizedMessage()),ex);
  }
  backupInstanceDir();
  File targetDir=this.getServerDirs().getServerDir();
  targetDir.mkdirs();
  Perm perm=new Perm(targetDir,null,logger);
  try {
    perm.processParts(payload);
  }
 catch (  Exception ex) {
    restoreInstanceDir();
    String msg=Strings.get(""String_Node_Str"",syncBundle,targetDir.getAbsolutePath());
    if (ex.getLocalizedMessage() != null)     msg=msg + ""String_Node_Str"" + ex.getLocalizedMessage();
    throw new CommandException(msg,ex);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException ex) {
      logger.warning(Strings.get(""String_Node_Str"",syncBundle,ex.getLocalizedMessage()));
    }
  }
  deleteBackupDir();
  return SUCCESS;
}","private int createDirectories() throws CommandException {
  if (!agentConfigDir.isDirectory()) {
    if (!agentConfigDir.mkdirs()) {
      throw new CommandException(Strings.get(""String_Node_Str"",agentConfigDir.getPath()));
    }
  }
  writeProperties();
  FileInputStream in=null;
  Payload.Inbound payload=null;
  try {
    in=new FileInputStream(syncBundle);
    payload=PayloadImpl.Inbound.newInstance(""String_Node_Str"",in);
  }
 catch (  IOException ex) {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException ioe) {
      logger.warning(Strings.get(""String_Node_Str"",syncBundle,ioe.getLocalizedMessage()));
    }
    throw new CommandException(Strings.get(""String_Node_Str"",syncBundle,ex.getLocalizedMessage()),ex);
  }
  backupInstanceDir();
  File targetDir=this.getServerDirs().getServerDir();
  if (!targetDir.mkdirs()) {
    restoreInstanceDir();
    throw new CommandException(Strings.get(""String_Node_Str"",targetDir.getPath()));
  }
  Perm perm=new Perm(targetDir,null,logger);
  try {
    perm.processParts(payload);
  }
 catch (  Exception ex) {
    restoreInstanceDir();
    String msg=Strings.get(""String_Node_Str"",syncBundle,targetDir.getAbsolutePath());
    if (ex.getLocalizedMessage() != null)     msg=msg + ""String_Node_Str"" + ex.getLocalizedMessage();
    throw new CommandException(msg,ex);
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException ex) {
      logger.warning(Strings.get(""String_Node_Str"",syncBundle,ex.getLocalizedMessage()));
    }
  }
  deleteBackupDir();
  return SUCCESS;
}"
30219,"@Override public String generateMethodBody(CommandModel cm,String httpMethod,String resourcePath,boolean includeOptional,boolean needsMultiPart){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  Map<String,String> paramNames=new HashMap<String,String>();
  Collection<ParamModel> params=cm.getParameters();
  if ((params != null) && (!params.isEmpty())) {
    for (    ParamModel model : params) {
      Param param=model.getParam();
      boolean include=true;
      if (param.optional() && !includeOptional) {
        continue;
      }
      String key=(!param.alias().isEmpty()) ? param.alias() : model.getName();
      String paramName=Util.eleminateHypen(model.getName());
      sb.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(paramName).append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(httpMethod.toUpperCase(Locale.US)).append(""String_Node_Str"").append(resourcePath).append(""String_Node_Str"").append(""String_Node_Str"").append(needsMultiPart).append(""String_Node_Str"");
  return sb.toString();
}","@Override public String generateMethodBody(CommandModel cm,String httpMethod,String resourcePath,boolean includeOptional,boolean needsMultiPart){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  Collection<ParamModel> params=cm.getParameters();
  if ((params != null) && (!params.isEmpty())) {
    for (    ParamModel model : params) {
      Param param=model.getParam();
      boolean include=true;
      if (param.optional() && !includeOptional) {
        continue;
      }
      String key=(!param.alias().isEmpty()) ? param.alias() : model.getName();
      String paramName=Util.eleminateHypen(model.getName());
      sb.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(paramName).append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(httpMethod.toUpperCase(Locale.US)).append(""String_Node_Str"").append(resourcePath).append(""String_Node_Str"").append(""String_Node_Str"").append(needsMultiPart).append(""String_Node_Str"");
  return sb.toString();
}"
30220,"public static void main(String[] args){
  try {
    File f=new File(""String_Node_Str"");
    BackupFilenameManager mgr=new BackupFilenameManager(f,""String_Node_Str"");
    File fnew=mgr.next();
    System.out.println(""String_Node_Str"" + fnew);
    File fold=mgr.latest();
    System.out.println(""String_Node_Str"" + fold);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  try {
    File f=new File(args[0]);
    BackupFilenameManager mgr=new BackupFilenameManager(f,""String_Node_Str"");
    File fnew=mgr.next();
    System.out.println(""String_Node_Str"" + fnew);
    File fold=mgr.latest();
    System.out.println(""String_Node_Str"" + fold);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
30221,"/** 
 * @param file Either a zip file that contains backup.properties -- or backup.properties itself.
 * @param terse if true, give a short summary
 * @return a String summary of the backup
 */
private void setPropsFromFile(File file){
  props=null;
  ZipInputStream zis=null;
  if (file.getName().toLowerCase().endsWith(""String_Node_Str"")) {
    readPropertiesFile(file);
    return;
  }
  try {
    zis=new ZipInputStream(new FileInputStream(file));
    ZipEntry ze;
    while ((ze=zis.getNextEntry()) != null) {
      if (ze.getName().equals(Constants.PROPS_FILENAME)) {
        props=new Properties();
        props.load(zis);
        break;
      }
    }
  }
 catch (  Exception e) {
    props=null;
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * @param file Either a zip file that contains backup.properties -- or backup.properties itself.
 * @param terse if true, give a short summary
 * @return a String summary of the backup
 */
private void setPropsFromFile(File file){
  props=null;
  ZipInputStream zis=null;
  if (file.getName().toLowerCase(Locale.ENGLISH).endsWith(""String_Node_Str"")) {
    readPropertiesFile(file);
    return;
  }
  try {
    zis=new ZipInputStream(new FileInputStream(file));
    ZipEntry ze;
    while ((ze=zis.getNextEntry()) != null) {
      if (ze.getName().equals(Constants.PROPS_FILENAME)) {
        props=new Properties();
        props.load(zis);
        break;
      }
    }
  }
 catch (  Exception e) {
    props=null;
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception e) {
      }
    }
  }
}"
30222,"private void setProps(){
  props.setProperty(Constants.PROPS_USER_NAME,System.getProperty(Constants.PROPS_USER_NAME));
  props.setProperty(Constants.PROPS_TIMESTAMP_MSEC,""String_Node_Str"" + request.timestamp);
  props.setProperty(Constants.PROPS_DOMAINS_DIR,FileUtils.safeGetCanonicalPath(request.domainsDir));
  props.setProperty(Constants.PROPS_DOMAIN_DIR,FileUtils.safeGetCanonicalPath(request.domainDir));
  props.setProperty(Constants.PROPS_BACKUP_FILE,FileUtils.safeGetCanonicalPath(request.backupFile));
  props.setProperty(Constants.PROPS_DOMAIN_NAME,request.domainName);
  props.setProperty(Constants.PROPS_DESCRIPTION,request.description);
  props.setProperty(Constants.PROPS_TIMESTAMP_HUMAN,new Date(request.timestamp).toString());
  props.setProperty(Constants.PROPS_VERSION,Version.getFullVersion());
  String type=request.configOnly ? Constants.CONFIG_ONLY : Constants.FULL;
  props.setProperty(Constants.PROPS_TYPE,type);
  String bc=(request.backupConfig == null) ? Constants.NO_CONFIG : request.backupConfig;
  props.setProperty(Constants.BACKUP_CONFIG,bc);
}","private void setProps(BackupRequest request){
  props.setProperty(Constants.PROPS_USER_NAME,System.getProperty(Constants.PROPS_USER_NAME));
  props.setProperty(Constants.PROPS_TIMESTAMP_MSEC,""String_Node_Str"" + request.timestamp);
  props.setProperty(Constants.PROPS_DOMAINS_DIR,FileUtils.safeGetCanonicalPath(request.domainsDir));
  props.setProperty(Constants.PROPS_DOMAIN_DIR,FileUtils.safeGetCanonicalPath(request.domainDir));
  props.setProperty(Constants.PROPS_BACKUP_FILE,FileUtils.safeGetCanonicalPath(request.backupFile));
  props.setProperty(Constants.PROPS_DOMAIN_NAME,request.domainName);
  props.setProperty(Constants.PROPS_DESCRIPTION,request.description);
  props.setProperty(Constants.PROPS_TIMESTAMP_HUMAN,new Date(request.timestamp).toString());
  props.setProperty(Constants.PROPS_VERSION,Version.getFullVersion());
  String type=request.configOnly ? Constants.CONFIG_ONLY : Constants.FULL;
  props.setProperty(Constants.PROPS_TYPE,type);
  String bc=(request.backupConfig == null) ? Constants.NO_CONFIG : request.backupConfig;
  props.setProperty(Constants.BACKUP_CONFIG,bc);
}"
30223,"void delete(){
  if (!statusFile.delete()) {
    statusFile.deleteOnExit();
  }
}","void delete(){
  if (statusFile != null && !statusFile.delete()) {
    statusFile.deleteOnExit();
  }
}"
30224,"String write(BackupRequest req){
  props=new Properties();
  request=req;
  File backupFileDir=null;
  if (request.configOnly) {
    backupFileDir=new File(request.domainDir,Constants.CONFIG_DIR);
  }
 else {
    backupFileDir=request.domainDir;
  }
  statusFile=new File(backupFileDir,Constants.PROPS_FILENAME);
  FileOutputStream out=null;
  try {
    setProps();
    out=new FileOutputStream(statusFile);
    props.store(out,Constants.PROPS_HEADER);
    return propsToString(false);
  }
 catch (  Exception e) {
    return StringHelper.get(""String_Node_Str"",statusFile);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}","String write(BackupRequest request){
  props=new Properties();
  File backupFileDir=null;
  if (request.configOnly) {
    backupFileDir=new File(request.domainDir,Constants.CONFIG_DIR);
  }
 else {
    backupFileDir=request.domainDir;
  }
  statusFile=new File(backupFileDir,Constants.PROPS_FILENAME);
  FileOutputStream out=null;
  try {
    setProps(request);
    out=new FileOutputStream(statusFile);
    props.store(out,Constants.PROPS_HEADER);
    return propsToString(false);
  }
 catch (  Exception e) {
    return StringHelper.get(""String_Node_Str"",statusFile);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException ex) {
      }
    }
  }
}"
30225,"public boolean accept(File dir,String name){
  return name.toLowerCase().endsWith(""String_Node_Str"");
}","public boolean accept(File dir,String name){
  return name.toLowerCase(Locale.ENGLISH).endsWith(""String_Node_Str"");
}"
30226,"@Override public void gatherMetric(){
  TreeNode activeSessionsNode=rootNode.getNode(WEB_SESSION_ACTIVESESSIONSCURRENT);
  if (activeSessionsNode != null) {
    Object value=activeSessionsNode.getValue();
    if (value != null) {
      if (value instanceof RangeStatistic) {
        RangeStatistic statisticObject=(RangeStatistic)value;
        table.add(System.currentTimeMillis(),new ActiveSessionsStat(statisticObject.getHighWaterMark(),statisticObject.getLastSampleTime(),statisticObject.getDescription(),statisticObject.getUnit(),statisticObject.getName(),statisticObject.getStartTime(),statisticObject.getCurrent(),statisticObject.getLowWaterMark()));
        Iterator<TabularMetricEntry<ActiveSessionsStat>> iter=table.iterator(10,TimeUnit.SECONDS);
        while (iter.hasNext()) {
          TabularMetricEntry<ActiveSessionsStat> tme=iter.next();
        }
      }
    }
  }
}","@Override public void gatherMetric(){
  if (rootNode != null) {
    TreeNode activeSessionsNode=rootNode.getNode(WEB_SESSION_ACTIVESESSIONSCURRENT);
    if (activeSessionsNode != null) {
      Object value=activeSessionsNode.getValue();
      if (value != null) {
        if (value instanceof RangeStatistic) {
          RangeStatistic statisticObject=(RangeStatistic)value;
          table.add(System.currentTimeMillis(),new ActiveSessionsStat(statisticObject.getHighWaterMark(),statisticObject.getLastSampleTime(),statisticObject.getDescription(),statisticObject.getUnit(),statisticObject.getName(),statisticObject.getStartTime(),statisticObject.getCurrent(),statisticObject.getLowWaterMark()));
        }
      }
    }
  }
}"
30227,"@Override public void gatherMetric(){
  TreeNode activeSessionsNode=rootNode.getNode(WEB_REQUEST_PROCESSINGTIME);
  if (activeSessionsNode != null) {
    Object value=activeSessionsNode.getValue();
    if (value != null) {
      if (value instanceof CountStatistic) {
        CountStatistic statisticObject=(CountStatistic)value;
        table.add(System.currentTimeMillis(),new ProcessingTimeStat(statisticObject.getLastSampleTime(),statisticObject.getDescription(),statisticObject.getUnit(),statisticObject.getName(),statisticObject.getStartTime(),statisticObject.getCount()));
        Iterator<TabularMetricEntry<ProcessingTimeStat>> iter=table.iterator(10,TimeUnit.SECONDS);
        while (iter.hasNext()) {
          TabularMetricEntry<ProcessingTimeStat> tme=iter.next();
        }
      }
    }
  }
}","@Override public void gatherMetric(){
  if (rootNode != null) {
    TreeNode activeSessionsNode=rootNode.getNode(WEB_REQUEST_PROCESSINGTIME);
    if (activeSessionsNode != null) {
      Object value=activeSessionsNode.getValue();
      if (value != null) {
        if (value instanceof CountStatistic) {
          CountStatistic statisticObject=(CountStatistic)value;
          table.add(System.currentTimeMillis(),new ProcessingTimeStat(statisticObject.getLastSampleTime(),statisticObject.getDescription(),statisticObject.getUnit(),statisticObject.getName(),statisticObject.getStartTime(),statisticObject.getCount()));
        }
      }
    }
  }
}"
30228,"public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  MonitorContract mContract=null;
  for (  MonitorContract m : habitat.getAllByContract(MonitorContract.class)) {
    if ((m.getName()).equals(type)) {
      mContract=m;
      break;
    }
  }
  if (mContract != null) {
    mContract.process(report,filter);
    return;
  }
  if (habitat.getAllByContract(MonitorContract.class).size() != 0) {
    String validTypes=""String_Node_Str"";
    Iterator<MonitorContract> contractsIterator=habitat.getAllByContract(MonitorContract.class).iterator();
    while (contractsIterator.hasNext()) {
      validTypes+=contractsIterator.next().getName();
      if (contractsIterator.hasNext()) {
        validTypes+=""String_Node_Str"";
      }
    }
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",type,validTypes));
  }
 else {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",type));
  }
  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
}","public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  MonitorContract mContract=null;
  for (  MonitorContract m : habitat.getAllByContract(MonitorContract.class)) {
    if ((m.getName()).equals(type)) {
      mContract=m;
      break;
    }
  }
  if (mContract != null) {
    mContract.process(report,filter);
    return;
  }
  if (habitat.getAllByContract(MonitorContract.class).size() != 0) {
    StringBuffer buf=new StringBuffer();
    Iterator<MonitorContract> contractsIterator=habitat.getAllByContract(MonitorContract.class).iterator();
    while (contractsIterator.hasNext()) {
      buf.append(contractsIterator.next().getName());
      if (contractsIterator.hasNext()) {
        buf.append(""String_Node_Str"");
      }
    }
    String validTypes=buf.toString();
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",type,validTypes));
  }
 else {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",type));
  }
  report.setActionExitCode(ActionReport.ExitCode.FAILURE);
}"
30229,"Enumeration privateGetAttributeList(){
synchronized (attributes) {
    return (new Enumerator(new ArrayList(attributes.keySet())));
  }
}","Enumeration privateGetAttributeList(){
  return (new Enumerator(new ArrayList(attributes.keySet())));
}"
30230,"/** 
 * set the SessionAttributeState for attributeName based on persistent value
 * @param attributeName
 * @param persistent
 */
void setAttributeStatePersistent(String attributeName,boolean persistent){
synchronized (attributes) {
    SessionAttributeState attrState=(SessionAttributeState)_attributeStates.get(attributeName);
    if (attrState == null) {
      attrState=new SessionAttributeState();
      attrState.setPersistent(persistent);
      _attributeStates.put(attributeName,attrState);
    }
 else {
      attrState.setPersistent(persistent);
    }
  }
}","/** 
 * set the SessionAttributeState for attributeName based on persistent value
 * @param attributeName
 * @param persistent
 */
void setAttributeStatePersistent(String attributeName,boolean persistent){
  SessionAttributeState attrState=(SessionAttributeState)_attributeStates.get(attributeName);
  if (attrState == null) {
    attrState=new SessionAttributeState();
    attrState.setPersistent(persistent);
    _attributeStates.put(attributeName,attrState);
  }
 else {
    attrState.setPersistent(persistent);
  }
}"
30231,"/** 
 * this method called when session is loaded from persistent store or after session state was stored note: pre-condition is that the removed attributes have been removed from _attributeStates; this is taken care of by removeAttribute method
 */
void resetAttributeState(){
  clearAttributeStates();
synchronized (attributes) {
    Enumeration attrNames=getAttributeNames();
    while (attrNames.hasMoreElements()) {
      String nextAttrName=(String)attrNames.nextElement();
      SessionAttributeState nextAttrState=SessionAttributeState.createPersistentAttribute();
      _attributeStates.put(nextAttrName,nextAttrState);
    }
    setDirty(false);
  }
}","/** 
 * this method called when session is loaded from persistent store or after session state was stored note: pre-condition is that the removed attributes have been removed from _attributeStates; this is taken care of by removeAttribute method
 */
void resetAttributeState(){
  clearAttributeStates();
  Enumeration attrNames=getAttributeNames();
  while (attrNames.hasMoreElements()) {
    String nextAttrName=(String)attrNames.nextElement();
    SessionAttributeState nextAttrState=SessionAttributeState.createPersistentAttribute();
    _attributeStates.put(nextAttrName,nextAttrState);
  }
  setDirty(false);
}"
30232,"/** 
 * set the attribute name to the value value and update the attribute state accordingly
 * @param name
 * @param value
 */
public void setAttribute(String name,Object value){
synchronized (attributes) {
    super.setAttribute(name,value);
    SessionAttributeState attributeState=getAttributeState(name);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + name + ""String_Node_Str""+ attributeState);
    }
    if (value == null) {
      if (attributeState != null) {
        if (attributeState.isPersistent()) {
          attributeState.setDeleted(true);
        }
 else {
          removeAttributeState(name);
        }
      }
    }
 else {
      if (attributeState == null) {
        SessionAttributeState newAttrState=new SessionAttributeState();
        _attributeStates.put(name,newAttrState);
      }
 else {
        if (attributeState.isDeleted()) {
          attributeState.setDeleted(false);
        }
 else {
          if (attributeState.isPersistent()) {
            attributeState.setDirty(true);
          }
        }
      }
    }
    setDirty(true);
  }
}","/** 
 * set the attribute name to the value value and update the attribute state accordingly
 * @param name
 * @param value
 */
public void setAttribute(String name,Object value){
  super.setAttribute(name,value);
  SessionAttributeState attributeState=getAttributeState(name);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + name + ""String_Node_Str""+ attributeState);
  }
  if (value == null) {
    if (attributeState != null) {
      if (attributeState.isPersistent()) {
        attributeState.setDeleted(true);
      }
 else {
        removeAttributeState(name);
      }
    }
  }
 else {
    if (attributeState == null) {
      SessionAttributeState newAttrState=new SessionAttributeState();
      _attributeStates.put(name,newAttrState);
    }
 else {
      if (attributeState.isDeleted()) {
        attributeState.setDeleted(false);
      }
 else {
        if (attributeState.isPersistent()) {
          attributeState.setDirty(true);
        }
      }
    }
  }
  setDirty(true);
}"
30233,"/** 
 * set the SessionAttributeState for attributeName based on dirty value
 * @param attributeName
 * @param dirty
 */
void setAttributeStateDirty(String attributeName,boolean dirty){
synchronized (attributes) {
    SessionAttributeState attrState=(SessionAttributeState)_attributeStates.get(attributeName);
    if (attrState == null) {
      attrState=new SessionAttributeState();
      attrState.setDirty(dirty);
      _attributeStates.put(attributeName,attrState);
    }
 else {
      attrState.setDirty(dirty);
    }
  }
}","/** 
 * set the SessionAttributeState for attributeName based on dirty value
 * @param attributeName
 * @param dirty
 */
void setAttributeStateDirty(String attributeName,boolean dirty){
  SessionAttributeState attrState=(SessionAttributeState)_attributeStates.get(attributeName);
  if (attrState == null) {
    attrState=new SessionAttributeState();
    attrState.setDirty(dirty);
    _attributeStates.put(attributeName,attrState);
  }
 else {
    attrState.setDirty(dirty);
  }
}"
30234,"/** 
 * remove the attribute name and update the attribute state accordingly
 * @param name
 */
public void removeAttribute(String name){
synchronized (attributes) {
    super.removeAttribute(name);
    SessionAttributeState attributeState=getAttributeState(name);
    if (attributeState != null) {
      if (attributeState.isPersistent()) {
        attributeState.setDeleted(true);
      }
 else {
        removeAttributeState(name);
      }
    }
    setDirty(true);
  }
}","/** 
 * remove the attribute name and update the attribute state accordingly
 * @param name
 */
public void removeAttribute(String name){
  super.removeAttribute(name);
  SessionAttributeState attributeState=getAttributeState(name);
  if (attributeState != null) {
    if (attributeState.isPersistent()) {
      attributeState.setDeleted(true);
    }
 else {
      removeAttributeState(name);
    }
  }
  setDirty(true);
}"
30235,"public void removeSessionFromManagerCache(Session session){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ session);
  }
  if (session == null) {
    return;
  }
  Session removed=null;
synchronized (sessions) {
    removed=sessions.remove(session.getIdInternal());
  }
  if (removed != null && logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + session.getId());
  }
}","public void removeSessionFromManagerCache(Session session){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ session);
  }
  if (session == null) {
    return;
  }
  Session removed=null;
  removed=sessions.remove(session.getIdInternal());
  if (removed != null && logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + session.getId());
  }
}"
30236,"private void getClusterSizeMonitoringStats(){
  List<ClusterSizeStat> heapData=new ArrayList<ClusterSizeStat>();
  SortedMap<Long,Long> sortedMap=new TreeMap<Long,Long>();
  Map<String,Object> result=null;
  String clusterName=getEnvName();
  result=null;
  String endPoint=""String_Node_Str"" + clusterName + ""String_Node_Str"";
  result=(Map<String,Object>)RestUtil.restRequest(endPoint,null,""String_Node_Str"",null,null,false,true).get(""String_Node_Str"");
  if (result != null) {
    Map<String,Object> heapResultExtraProps=(Map<String,Object>)result.get(""String_Node_Str"");
    if (heapResultExtraProps != null) {
      Map<String,Object> heapResultEntity=(Map<String,Object>)heapResultExtraProps.get(""String_Node_Str"");
      if (heapResultEntity != null && !heapResultEntity.isEmpty()) {
        Map<String,Map<String,Long>> heapResultProps=(Map<String,Map<String,Long>>)(heapResultEntity.get(""String_Node_Str""));
        for (        String heapProp : heapResultProps.keySet()) {
          sortedMap.put(Long.valueOf(heapProp),heapResultProps.get(heapProp).get(""String_Node_Str""));
        }
      }
    }
  }
  setClusterSizeMonitoringChartInfo(sortedMap);
}","private void getClusterSizeMonitoringStats(){
  SortedMap<Long,Long> sortedMap=new TreeMap<Long,Long>();
  Map<String,Object> result=null;
  String clusterName=getEnvName();
  result=null;
  String endPoint=""String_Node_Str"" + clusterName + ""String_Node_Str"";
  result=(Map<String,Object>)RestUtil.restRequest(endPoint,null,""String_Node_Str"",null,null,false,true).get(""String_Node_Str"");
  if (result != null) {
    Map<String,Object> heapResultExtraProps=(Map<String,Object>)result.get(""String_Node_Str"");
    if (heapResultExtraProps != null) {
      Map<String,Object> heapResultEntity=(Map<String,Object>)heapResultExtraProps.get(""String_Node_Str"");
      if (heapResultEntity != null && !heapResultEntity.isEmpty()) {
        Map<String,Map<String,Long>> heapResultProps=(Map<String,Map<String,Long>>)(heapResultEntity.get(""String_Node_Str""));
        for (        String heapProp : heapResultProps.keySet()) {
          sortedMap.put(Long.valueOf(heapProp),heapResultProps.get(heapProp).get(""String_Node_Str""));
        }
      }
    }
  }
  setClusterSizeMonitoringChartInfo(sortedMap);
}"
30237,"private GSSUPToken(ORB orb,Codec codec,byte[] authtok) throws SecurityMechanismException {
  byte[] name_utf8=null;
  byte[] password_utf8=null;
  byte[] target_name=null;
  String username=""String_Node_Str"";
  char[] userpwd=null;
  String realm=""String_Node_Str"";
  byte[] encoded_token=null;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  encoded_token=GSSUtils.getMechToken(GSSUtils.GSSUP_MECH_OID,authtok);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + encoded_token.length);
  }
  Any a=orb.create_any();
  try {
    a=codec.decode_value(encoded_token,InitialContextTokenHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  InitialContextToken inctxToken=InitialContextTokenHelper.extract(a);
  password_utf8=inctxToken.password;
  name_utf8=inctxToken.username;
  target_name=inctxToken.target_name;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + GSSUtils.dumpHex(name_utf8));
    _logger.fine(""String_Node_Str"" + ""String_Node_Str"");
    _logger.fine(""String_Node_Str"" + GSSUtils.dumpHex(target_name));
  }
  try {
    username=new String(name_utf8,""String_Node_Str"");
    userpwd=Utility.convertByteArrayToCharArray(password_utf8,""String_Node_Str"");
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  String name;
  int index=username.indexOf(DELIMITER);
  int esc_index=username.indexOf(ESCAPE_CHAR);
  if (index == -1) {
    name=username;
  }
 else   if (index == 0 || esc_index == 0) {
    throw new SecurityMechanismException(""String_Node_Str"");
  }
 else   if (esc_index != -1) {
    if (esc_index + 2 >= username.length()) {
      name=username.replaceAll(ESCAPE_CHAR_REGEXP,DELIMITER);
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
      }
      realm=DEFAULT_REALM_NAME;
    }
 else {
      int second_at_index=username.indexOf(DELIMITER,esc_index + 3);
      if (second_at_index == -1) {
        name=username.replaceAll(ESCAPE_CHAR_REGEXP,DELIMITER);
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
        }
        realm=DEFAULT_REALM_NAME;
      }
 else {
        name=username.substring(0,second_at_index);
        name=name.replaceAll(ESCAPE_CHAR_REGEXP,DELIMITER);
        realm=username.substring(second_at_index + 1);
        if (realm == null) {
          if (_logger.isLoggable(Level.FINE)) {
            _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
          }
          realm=DEFAULT_REALM_NAME;
        }
      }
    }
  }
 else {
    StringTokenizer strtok=new StringTokenizer(username,DELIMITER);
    name=strtok.nextToken();
    if (strtok.hasMoreTokens()) {
      realm=strtok.nextToken();
      if (realm == null) {
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
        }
        realm=DEFAULT_REALM_NAME;
      }
    }
  }
  String targetNameRealm=null;
  try {
    if (target_name != null && target_name.length != 0) {
      targetNameRealm=new String(GSSUtils.importName(GSSUtils.GSSUP_MECH_OID,target_name));
    }
  }
 catch (  IOException ex) {
    _logger.log(Level.FINE,null,ex);
  }
  if (targetNameRealm != null && !DEFAULT_REALM_NAME.equals(targetNameRealm)) {
    realm=targetNameRealm;
  }
  pwdcred=new PasswordCredential(name,userpwd,realm,target_name);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,pwdcred.toString());
  }
}","private GSSUPToken(ORB orb,Codec codec,byte[] authtok) throws SecurityMechanismException {
  byte[] name_utf8=null;
  byte[] password_utf8=null;
  byte[] target_name=null;
  String username=""String_Node_Str"";
  char[] userpwd=null;
  String realm=""String_Node_Str"";
  byte[] encoded_token=null;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  encoded_token=GSSUtils.getMechToken(GSSUtils.GSSUP_MECH_OID,authtok);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + encoded_token.length);
  }
  Any a=orb.create_any();
  try {
    a=codec.decode_value(encoded_token,InitialContextTokenHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  InitialContextToken inctxToken=InitialContextTokenHelper.extract(a);
  password_utf8=inctxToken.password;
  name_utf8=inctxToken.username;
  target_name=inctxToken.target_name;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + GSSUtils.dumpHex(name_utf8));
    _logger.fine(""String_Node_Str"" + ""String_Node_Str"");
    _logger.fine(""String_Node_Str"" + GSSUtils.dumpHex(target_name));
  }
  try {
    username=new String(name_utf8,""String_Node_Str"");
    userpwd=Utility.convertByteArrayToCharArray(password_utf8,""String_Node_Str"");
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
  }
  String name;
  int index=username.indexOf(DELIMITER);
  int esc_index=username.indexOf(ESCAPE_CHAR);
  if (index == -1) {
    name=username;
  }
 else   if (index == 0 || esc_index == 0) {
    throw new SecurityMechanismException(""String_Node_Str"");
  }
 else   if (esc_index != -1) {
    if (esc_index + 2 >= username.length()) {
      name=username.replaceAll(ESCAPE_CHAR_REGEXP,DELIMITER);
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
      }
      realm=DEFAULT_REALM_NAME;
    }
 else {
      int second_at_index=username.indexOf(DELIMITER,esc_index + 3);
      if (second_at_index == -1) {
        name=username.replaceAll(ESCAPE_CHAR_REGEXP,DELIMITER);
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
        }
        realm=DEFAULT_REALM_NAME;
      }
 else {
        name=username.substring(0,second_at_index);
        name=name.replaceAll(ESCAPE_CHAR_REGEXP,DELIMITER);
        realm=username.substring(second_at_index + 1);
        if (realm == null || realm.isEmpty()) {
          if (_logger.isLoggable(Level.FINE)) {
            _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
          }
          realm=DEFAULT_REALM_NAME;
        }
      }
    }
  }
 else {
    StringTokenizer strtok=new StringTokenizer(username,DELIMITER);
    name=strtok.nextToken();
    if (strtok.hasMoreTokens()) {
      realm=strtok.nextToken();
      if (realm.isEmpty()) {
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
        }
        realm=DEFAULT_REALM_NAME;
      }
    }
  }
  String targetNameRealm=null;
  try {
    if (target_name != null && target_name.length != 0) {
      targetNameRealm=new String(GSSUtils.importName(GSSUtils.GSSUP_MECH_OID,target_name));
    }
  }
 catch (  IOException ex) {
    _logger.log(Level.FINE,null,ex);
  }
  if (targetNameRealm != null && !DEFAULT_REALM_NAME.equals(targetNameRealm)) {
    realm=targetNameRealm;
  }
  pwdcred=new PasswordCredential(name,userpwd,realm,target_name);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,pwdcred.toString());
  }
}"
30238,"/** 
 * Return the ASN.1 encoded representation of a GSS mechanism identifier. Currently only the GSSUP Mechanism is supported.
 */
public static byte[] getMechanism(){
  return mech;
}","/** 
 * Return the ASN.1 encoded representation of a GSS mechanism identifier. Currently only the GSSUP Mechanism is supported.
 */
public static byte[] getMechanism(){
  byte[] mechCopy=Arrays.copyOf(mech,mech.length);
  return mechCopy;
}"
30239,"private int getServerPort(String mech){
  IiopListener[] iiopListenerBeans=(IiopListener[])IIOPUtils.getInstance().getIiopService().getIiopListener().toArray(new IiopListener[0]);
  for (  IiopListener ilisten : iiopListenerBeans) {
    if (mech.equalsIgnoreCase(""String_Node_Str"")) {
      if (ilisten.getSecurityEnabled().equalsIgnoreCase(""String_Node_Str"") && ilisten.getSsl() != null && !ilisten.getSsl().getClientAuthEnabled().equalsIgnoreCase(""String_Node_Str"")) {
        return Integer.parseInt(ilisten.getPort());
      }
    }
 else     if (mech.equalsIgnoreCase(""String_Node_Str"")) {
      if (ilisten.getSecurityEnabled().equalsIgnoreCase(""String_Node_Str"") && ilisten.getSsl() != null && ilisten.getSsl().getClientAuthEnabled().equalsIgnoreCase(""String_Node_Str"")) {
        return Integer.parseInt(ilisten.getPort());
      }
    }
 else     if (!ilisten.getSecurityEnabled().equalsIgnoreCase(""String_Node_Str"")) {
      return Integer.parseInt(ilisten.getPort());
    }
  }
  return -1;
}","private int getServerPort(String mech){
  List<IiopListener> listenersList=IIOPUtils.getInstance().getIiopService().getIiopListener();
  IiopListener[] iiopListenerBeans=listenersList.toArray(new IiopListener[listenersList.size()]);
  for (  IiopListener ilisten : iiopListenerBeans) {
    if (mech.equalsIgnoreCase(""String_Node_Str"")) {
      if (ilisten.getSecurityEnabled().equalsIgnoreCase(""String_Node_Str"") && ilisten.getSsl() != null && !ilisten.getSsl().getClientAuthEnabled().equalsIgnoreCase(""String_Node_Str"")) {
        return Integer.parseInt(ilisten.getPort());
      }
    }
 else     if (mech.equalsIgnoreCase(""String_Node_Str"")) {
      if (ilisten.getSecurityEnabled().equalsIgnoreCase(""String_Node_Str"") && ilisten.getSsl() != null && ilisten.getSsl().getClientAuthEnabled().equalsIgnoreCase(""String_Node_Str"")) {
        return Integer.parseInt(ilisten.getPort());
      }
    }
 else     if (!ilisten.getSecurityEnabled().equalsIgnoreCase(""String_Node_Str"")) {
      return Integer.parseInt(ilisten.getPort());
    }
  }
  return -1;
}"
30240,"private boolean authorizeCORBA(byte[] object_id,String method) throws Exception {
  ProtocolManager protocolMgr=orbHelper.getProtocolManager();
  if (protocolMgr == null) {
    return true;
  }
  if (protocolMgr.getEjbDescriptor(object_id) != null) {
    return true;
  }
  CORBAObjectPermission perm=new CORBAObjectPermission(""String_Node_Str"",method);
  com.sun.enterprise.security.SecurityContext sc=com.sun.enterprise.security.SecurityContext.getCurrent();
  Set principalSet=sc.getPrincipalSet();
  Principal[] principals=(principalSet == null ? null : (Principal[])principalSet.toArray(new Principal[0]));
  CodeSource cs=new CodeSource(new java.net.URL(""String_Node_Str""),(java.security.cert.Certificate[])null);
  ProtectionDomain prdm=new ProtectionDomain(cs,null,null,principals);
  boolean result=policy.implies(prdm,perm);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + result + ""String_Node_Str""+ method);
  }
  return result;
}","private boolean authorizeCORBA(byte[] object_id,String method) throws Exception {
  ProtocolManager protocolMgr=orbHelper.getProtocolManager();
  if (protocolMgr == null) {
    return true;
  }
  if (protocolMgr.getEjbDescriptor(object_id) != null) {
    return true;
  }
  CORBAObjectPermission perm=new CORBAObjectPermission(""String_Node_Str"",method);
  com.sun.enterprise.security.SecurityContext sc=com.sun.enterprise.security.SecurityContext.getCurrent();
  Set principalSet=sc.getPrincipalSet();
  Principal[] principals=(principalSet == null ? null : (Principal[])principalSet.toArray(new Principal[principalSet.size()]));
  CodeSource cs=new CodeSource(new java.net.URL(""String_Node_Str""),(java.security.cert.Certificate[])null);
  ProtectionDomain prdm=new ProtectionDomain(cs,null,null,principals);
  boolean result=policy.implies(prdm,perm);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + result + ""String_Node_Str""+ method);
  }
  return result;
}"
30241,"private boolean evaluate_client_conformance_ascontext(SecurityContext ctx,EjbIORConfigurationDescriptor iordesc,String realmName){
  boolean client_authenticated=false;
  AS_ContextSec ascontext=null;
  try {
    ascontext=this.getCtc().createASContextSec(iordesc,realmName);
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    return false;
  }
  if (ascontext == null)   return false;
  if ((ctx != null) && (ctx.authcls != null) && (ctx.subject != null))   client_authenticated=true;
 else   client_authenticated=false;
  if (client_authenticated) {
    if (!(isSet(ascontext.target_requires,EstablishTrustInClient.value) || isSet(ascontext.target_supports,EstablishTrustInClient.value))) {
      return false;
    }
    byte[] client_tgtname=getTargetName(ctx.subject);
    if (ascontext.target_name.length != client_tgtname.length) {
      return false;
    }
    for (int i=0; i < ascontext.target_name.length; i++)     if (ascontext.target_name[i] != client_tgtname[i]) {
      return false;
    }
  }
 else {
    if (isSet(ascontext.target_requires,EstablishTrustInClient.value)) {
      return false;
    }
  }
  return true;
}","private boolean evaluate_client_conformance_ascontext(SecurityContext ctx,EjbIORConfigurationDescriptor iordesc,String realmName){
  boolean client_authenticated=false;
  AS_ContextSec ascontext=null;
  try {
    ascontext=this.getCtc().createASContextSec(iordesc,realmName);
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    return false;
  }
  if ((ctx != null) && (ctx.authcls != null) && (ctx.subject != null))   client_authenticated=true;
 else   client_authenticated=false;
  if (client_authenticated) {
    if (!(isSet(ascontext.target_requires,EstablishTrustInClient.value) || isSet(ascontext.target_supports,EstablishTrustInClient.value))) {
      return false;
    }
    byte[] client_tgtname=getTargetName(ctx.subject);
    if (ascontext.target_name.length != client_tgtname.length) {
      return false;
    }
    for (int i=0; i < ascontext.target_name.length; i++)     if (ascontext.target_name[i] != client_tgtname[i]) {
      return false;
    }
  }
 else {
    if (isSet(ascontext.target_requires,EstablishTrustInClient.value)) {
      return false;
    }
  }
  return true;
}"
30242,"private boolean evaluate_client_conformance_ssl(EjbIORConfigurationDescriptor iordesc,boolean ssl_used,X509Certificate[] certchain){
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    boolean ssl_required=false;
    boolean ssl_supported=false;
    int ssl_target_requires=0;
    int ssl_target_supports=0;
    ssl_target_requires=this.getCtc().getTargetRequires(iordesc);
    ssl_target_supports=this.getCtc().getTargetSupports(iordesc);
    if (isSet(ssl_target_requires,Integrity.value) || isSet(ssl_target_requires,Confidentiality.value) || isSet(ssl_target_requires,EstablishTrustInClient.value))     ssl_required=true;
 else     ssl_required=false;
    if (ssl_target_supports != 0)     ssl_supported=true;
 else     ssl_supported=false;
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + isSet(ssl_target_requires,Integrity.value) + ""String_Node_Str""+ isSet(ssl_target_requires,Confidentiality.value)+ ""String_Node_Str""+ isSet(ssl_target_requires,EstablishTrustInClient.value)+ ""String_Node_Str""+ ssl_required+ ""String_Node_Str""+ ssl_supported+ ""String_Node_Str""+ ssl_used);
    }
    if (ssl_used) {
      if (!(ssl_required || ssl_supported))       return false;
    }
 else {
      if (ssl_required)       return false;
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + certchain + ""String_Node_Str""+ isSet(ssl_target_requires,EstablishTrustInClient.value)+ ""String_Node_Str""+ isSet(ssl_target_supports,EstablishTrustInClient.value));
    }
    if (certchain != null) {
      if (!(isSet(ssl_target_requires,EstablishTrustInClient.value) || isSet(ssl_target_supports,EstablishTrustInClient.value)))       return false;
    }
 else {
      if (isSet(ssl_target_requires,EstablishTrustInClient.value))       return false;
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    return true;
  }
  finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
}","private boolean evaluate_client_conformance_ssl(EjbIORConfigurationDescriptor iordesc,boolean ssl_used,X509Certificate[] certchain){
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    boolean ssl_required=false;
    boolean ssl_supported=false;
    int ssl_target_requires=0;
    int ssl_target_supports=0;
    ssl_target_requires=this.getCtc().getTargetRequires(iordesc);
    ssl_target_supports=this.getCtc().getTargetSupports(iordesc);
    if (isSet(ssl_target_requires,Integrity.value) || isSet(ssl_target_requires,Confidentiality.value) || isSet(ssl_target_requires,EstablishTrustInClient.value))     ssl_required=true;
 else     ssl_required=false;
    if (ssl_target_supports != 0)     ssl_supported=true;
 else     ssl_supported=false;
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + isSet(ssl_target_requires,Integrity.value) + ""String_Node_Str""+ isSet(ssl_target_requires,Confidentiality.value)+ ""String_Node_Str""+ isSet(ssl_target_requires,EstablishTrustInClient.value)+ ""String_Node_Str""+ ssl_required+ ""String_Node_Str""+ ssl_supported+ ""String_Node_Str""+ ssl_used);
    }
    if (ssl_used) {
      if (!(ssl_required || ssl_supported))       return false;
    }
 else {
      if (ssl_required)       return false;
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + isSet(ssl_target_requires,EstablishTrustInClient.value) + ""String_Node_Str""+ isSet(ssl_target_supports,EstablishTrustInClient.value));
    }
    if (certchain != null) {
      if (!(isSet(ssl_target_requires,EstablishTrustInClient.value) || isSet(ssl_target_supports,EstablishTrustInClient.value)))       return false;
    }
 else {
      if (isSet(ssl_target_requires,EstablishTrustInClient.value))       return false;
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
    return true;
  }
  finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
}"
30243,"private boolean evaluate_client_conformance_sascontext(SecurityContext ctx,EjbIORConfigurationDescriptor iordesc){
  boolean caller_propagated=false;
  SAS_ContextSec sascontext=null;
  try {
    sascontext=this.getCtc().createSASContextSec(iordesc);
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    return false;
  }
  if (sascontext == null)   return false;
  if ((ctx != null) && (ctx.identcls != null) && (ctx.subject != null))   caller_propagated=true;
 else   caller_propagated=false;
  if (caller_propagated) {
    if (!isSet(sascontext.target_supports,IdentityAssertion.value))     return false;
    return true;
  }
  return true;
}","private boolean evaluate_client_conformance_sascontext(SecurityContext ctx,EjbIORConfigurationDescriptor iordesc){
  boolean caller_propagated=false;
  SAS_ContextSec sascontext=null;
  try {
    sascontext=this.getCtc().createSASContextSec(iordesc);
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    return false;
  }
  if ((ctx != null) && (ctx.identcls != null) && (ctx.subject != null))   caller_propagated=true;
 else   caller_propagated=false;
  if (caller_propagated) {
    if (!isSet(sascontext.target_supports,IdentityAssertion.value))     return false;
    return true;
  }
  return true;
}"
30244,"private boolean isMechanismSupported(SAS_ContextSec sas){
  byte[][] mechanisms=sas.supported_naming_mechanisms;
  byte[] mechSupported=GSSUtils.getMechanism();
  if (mechSupported == null) {
    return false;
  }
  if (mechanisms == null) {
    return false;
  }
  for (int i=0; i < mechanisms.length; i++) {
    if (Arrays.equals(mechSupported,mechanisms[i])) {
      return true;
    }
  }
  return false;
}","private boolean isMechanismSupported(SAS_ContextSec sas){
  byte[][] mechanisms=sas.supported_naming_mechanisms;
  byte[] mechSupported=GSSUtils.getMechanism();
  if (mechanisms == null) {
    return false;
  }
  for (int i=0; i < mechanisms.length; i++) {
    if (Arrays.equals(mechSupported,mechanisms[i])) {
      return true;
    }
  }
  return false;
}"
30245,"private boolean isMechanismSupportedAS(AS_ContextSec as){
  byte[] mechanism=as.client_authentication_mech;
  byte[] mechSupported=GSSUtils.getMechanism();
  if (mechSupported == null) {
    return false;
  }
  if (mechanism == null) {
    return false;
  }
  if (Arrays.equals(mechanism,mechSupported)) {
    return true;
  }
  return false;
}","private boolean isMechanismSupportedAS(AS_ContextSec as){
  byte[] mechanism=as.client_authentication_mech;
  byte[] mechSupported=GSSUtils.getMechanism();
  if (mechanism == null) {
    return false;
  }
  if (Arrays.equals(mechanism,mechSupported)) {
    return true;
  }
  return false;
}"
30246,"public BitSet getRolesOfPrincipals(String pcid,String[] roles,Principal[] principals) throws SecurityException, UnsupportedOperationException {
  BitSet roleSet=new BitSet(roles.length);
  if (principals == null || principals.length == 0 || roles == null || roles.length == 0) {
    return null;
  }
  SecurityRoleMapper srm=getInternalMapper(pcid);
  for (int i=0; i < roles.length; i++) {
    roleSet.set(i,arePrincipalsInRole(srm,principals,roles[i]));
  }
  return roleSet;
}","public BitSet getRolesOfPrincipals(String pcid,String[] roles,Principal[] principals) throws SecurityException, UnsupportedOperationException {
  BitSet roleSet=new BitSet(roles.length);
  if (principals.length == 0 || roles == null || roles.length == 0) {
    return null;
  }
  SecurityRoleMapper srm=getInternalMapper(pcid);
  for (int i=0; i < roles.length; i++) {
    roleSet.set(i,arePrincipalsInRole(srm,principals,roles[i]));
  }
  return roleSet;
}"
30247,"/** 
 * Causes all policy statements to be deleted from this PolicyConfiguration and sets its internal state such that calling any method, other than delete, getContextID, or inService on the PolicyConfiguration will be rejected and cause an UnsupportedOperationException to be thrown. <P> This operation has no affect on any linked PolicyConfigurations other than removing any links involving the deleted PolicyConfiguration.
 * @throws java.lang.SecurityException if called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the delete method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException.
 */
public void delete() throws javax.security.jacc.PolicyContextException {
  checkSetPolicyPermission();
  SharedState.removeLinks(id);
  pcwLock.lock();
  try {
    removePolicy();
  }
  finally {
    setState(DELETED_STATE);
    pcwLock.unlock();
  }
}","/** 
 * Causes all policy statements to be deleted from this PolicyConfiguration and sets its internal state such that calling any method, other than delete, getContextID, or inService on the PolicyConfiguration will be rejected and cause an UnsupportedOperationException to be thrown. <P> This operation has no affect on any linked PolicyConfigurations other than removing any links involving the deleted PolicyConfiguration.
 * @throws java.lang.SecurityException if called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the delete method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException.
 */
public void delete() throws javax.security.jacc.PolicyContextException {
  checkSetPolicyPermission();
  SharedState.removeLinks(id);
  pcwLock.lock();
  try {
    removePolicy();
  }
  finally {
    pcwLock.unlock();
    setState(DELETED_STATE);
  }
}"
30248,"private Role getRole(String roleName){
  int index=-1;
  Role rvalue=new Role(roleName);
  if (roleTable == null) {
    roleTable=new ArrayList<Role>();
  }
 else {
    index=roleTable.indexOf(rvalue);
  }
  if (index < 0) {
    roleTable.add(rvalue);
    index=roleTable.indexOf(rvalue);
  }
 else {
    rvalue=roleTable.get(index);
  }
  return rvalue;
}","private Role getRole(String roleName){
  int index=-1;
  Role rvalue=new Role(roleName);
  if (roleTable == null) {
    roleTable=new ArrayList<Role>();
  }
 else {
    index=roleTable.indexOf(rvalue);
  }
  if (index < 0) {
    roleTable.add(rvalue);
    roleTable.indexOf(rvalue);
  }
 else {
    rvalue=roleTable.get(index);
  }
  return rvalue;
}"
30249,"private static String _loadRegistration(AuthConfigProvider provider,String layer,String appContext,String description){
  RegistrationContext rc=new RegistrationContextImpl(layer,appContext,description,true);
  String regisID=getRegistrationID(layer,appContext);
  RegistrationContext prevRegisContext=id2RegisContextMap.get(regisID);
  AuthConfigProvider prevProvider=id2ProviderMap.get(regisID);
  boolean wasRegistered=id2ProviderMap.containsKey(regisID);
  if (wasRegistered) {
    List<String> prevRegisIDs=provider2IdsMap.get(prevProvider);
    prevRegisIDs.remove(regisID);
    if (prevRegisIDs.isEmpty()) {
      provider2IdsMap.remove(prevProvider);
    }
  }
  id2ProviderMap.put(regisID,provider);
  id2RegisContextMap.put(regisID,rc);
  List<String> regisIDs=provider2IdsMap.get(provider);
  if (regisIDs == null) {
    regisIDs=new ArrayList<String>();
    provider2IdsMap.put(provider,regisIDs);
  }
  if (!regisIDs.contains(regisID)) {
    regisIDs.add(regisID);
  }
  return regisID;
}","private static String _loadRegistration(AuthConfigProvider provider,String layer,String appContext,String description){
  RegistrationContext rc=new RegistrationContextImpl(layer,appContext,description,true);
  String regisID=getRegistrationID(layer,appContext);
  id2RegisContextMap.get(regisID);
  AuthConfigProvider prevProvider=id2ProviderMap.get(regisID);
  boolean wasRegistered=id2ProviderMap.containsKey(regisID);
  if (wasRegistered) {
    List<String> prevRegisIDs=provider2IdsMap.get(prevProvider);
    prevRegisIDs.remove(regisID);
    if (prevRegisIDs.isEmpty()) {
      provider2IdsMap.remove(prevProvider);
    }
  }
  id2ProviderMap.put(regisID,provider);
  id2RegisContextMap.put(regisID,rc);
  List<String> regisIDs=provider2IdsMap.get(provider);
  if (regisIDs == null) {
    regisIDs=new ArrayList<String>();
    provider2IdsMap.put(provider,regisIDs);
  }
  if (!regisIDs.contains(regisID)) {
    regisIDs.add(regisID);
  }
  return regisID;
}"
30250,"private EntryInfo readRegEntry(BufferedReader reader) throws IOException {
  String className=null;
  Map<String,String> properties=null;
  List<RegistrationContext> ctxs=new ArrayList<RegistrationContext>();
  String line=reader.readLine().trim();
  while (!line.equals(""String_Node_Str"")) {
    if (line.startsWith(CON_ENTRY)) {
      EntryInfo conEntry=readConEntry(reader);
      className=conEntry.getClassName();
      properties=conEntry.getProperties();
    }
 else     if (line.startsWith(REG_CTX)) {
      ctxs.add(readRegContext(reader));
    }
    line=reader.readLine().trim();
  }
  return new EntryInfo(className,properties,ctxs);
}","private EntryInfo readRegEntry(BufferedReader reader) throws IOException {
  String className=null;
  Map<String,String> properties=null;
  List<RegistrationContext> ctxs=new ArrayList<RegistrationContext>();
  String line=reader.readLine();
  if (line != null) {
    line=line.trim();
  }
  while (!""String_Node_Str"".equals(line)) {
    if (line.startsWith(CON_ENTRY)) {
      EntryInfo conEntry=readConEntry(reader);
      className=conEntry.getClassName();
      properties=conEntry.getProperties();
    }
 else     if (line.startsWith(REG_CTX)) {
      ctxs.add(readRegContext(reader));
    }
    line=reader.readLine();
    if (line != null) {
      line=line.trim();
    }
  }
  return new EntryInfo(className,properties,ctxs);
}"
30251,"private void clearExistingFile() throws IOException {
  boolean newCreation=!confFile.exists();
  if (!newCreation) {
    confFile.delete();
  }
  if (newCreation) {
    logger.log(Level.INFO,""String_Node_Str"",confFile.getPath());
  }
  confFile.createNewFile();
}","private void clearExistingFile() throws IOException {
  boolean newCreation=!confFile.exists();
  if (!newCreation) {
    if (!confFile.delete()) {
      throw new IOException();
    }
  }
  if (newCreation) {
    logger.log(Level.INFO,""String_Node_Str"",confFile.getPath());
  }
  if (!confFile.createNewFile()) {
    throw new IOException();
  }
}"
30252,"private Map<String,String> readProperties(BufferedReader reader) throws IOException {
  String line=reader.readLine().trim();
  if (line.equals(""String_Node_Str"")) {
    return null;
  }
  Map<String,String> properties=new HashMap<String,String>();
  while (!line.equals(""String_Node_Str"")) {
    properties.put(line.substring(0,line.indexOf(SEP)),line.substring(line.indexOf(SEP) + 1,line.length()));
    line=reader.readLine().trim();
  }
  return properties;
}","private Map<String,String> readProperties(BufferedReader reader) throws IOException {
  String line=reader.readLine();
  if (line != null) {
    line=line.trim();
  }
  if (""String_Node_Str"".equals(line)) {
    return null;
  }
  Map<String,String> properties=new HashMap<String,String>();
  while (!""String_Node_Str"".equals(line)) {
    properties.put(line.substring(0,line.indexOf(SEP)),line.substring(line.indexOf(SEP) + 1,line.length()));
    line=reader.readLine();
    if (line != null) {
      line=line.trim();
    }
  }
  return properties;
}"
30253,"private RegistrationContext readRegContext(BufferedReader reader) throws IOException {
  String layer=null;
  String appCtx=null;
  String description=null;
  String line=reader.readLine().trim();
  while (!line.equals(""String_Node_Str"")) {
    String value=line.substring(line.indexOf(SEP) + 1,line.length());
    if (line.startsWith(LAYER)) {
      layer=value;
    }
 else     if (line.startsWith(APP_CTX)) {
      appCtx=value;
    }
 else     if (line.startsWith(DESCRIPTION)) {
      description=value;
    }
    line=reader.readLine().trim();
  }
  return new RegistrationContextImpl(layer,appCtx,description,true);
}","private RegistrationContext readRegContext(BufferedReader reader) throws IOException {
  String layer=null;
  String appCtx=null;
  String description=null;
  String line=reader.readLine();
  if (line != null) {
    line=line.trim();
  }
  while (!""String_Node_Str"".equals(line)) {
    String value=line.substring(line.indexOf(SEP) + 1,line.length());
    if (line.startsWith(LAYER)) {
      layer=value;
    }
 else     if (line.startsWith(APP_CTX)) {
      appCtx=value;
    }
 else     if (line.startsWith(DESCRIPTION)) {
      description=value;
    }
    line=reader.readLine();
    if (line != null) {
      line=line.trim();
    }
  }
  return new RegistrationContextImpl(layer,appCtx,description,true);
}"
30254,"private EntryInfo readConEntry(BufferedReader reader) throws IOException {
  String className=reader.readLine().trim();
  Map<String,String> properties=readProperties(reader);
  return new EntryInfo(className,properties);
}","private EntryInfo readConEntry(BufferedReader reader) throws IOException {
  String className=reader.readLine();
  if (className != null) {
    className=className.trim();
  }
  Map<String,String> properties=readProperties(reader);
  return new EntryInfo(className,properties);
}"
30255,"private Integer getHashCode(Map properties){
  if (properties == null) {
    return new Integer(0);
  }
  return new Integer(properties.hashCode());
}","private Integer getHashCode(Map properties){
  if (properties == null) {
    return Integer.valueOf(""String_Node_Str"");
  }
  return Integer.valueOf(properties.hashCode());
}"
30256,"protected void logIfLevel(Level level,Throwable t,String... msgParts){
  Logger logger=Logger.getLogger(loggerName);
  if (logger.isLoggable(level)) {
    String msg=null;
    for (    String m : msgParts) {
      msg+=m;
    }
    if (msg != null && t != null) {
      logger.log(level,msg,t);
    }
 else     if (msg != null) {
      logger.log(level,msg);
    }
  }
}","protected void logIfLevel(Level level,Throwable t,String... msgParts){
  Logger logger=Logger.getLogger(loggerName);
  if (logger.isLoggable(level)) {
    StringBuffer msgB=new StringBuffer(""String_Node_Str"");
    for (    String m : msgParts) {
      msgB.append(m);
    }
    String msg=msgB.toString();
    if (!msg.isEmpty() && t != null) {
      logger.log(level,msg,t);
    }
 else     if (!msg.isEmpty()) {
      logger.log(level,msg);
    }
  }
}"
30257,"protected void logIfLevel(Level level,Throwable t,String... msgParts){
  Logger logger=Logger.getLogger(loggerName);
  if (logger.isLoggable(level)) {
    String msg=null;
    for (    String m : msgParts) {
      msg+=m;
    }
    if (msg != null && t != null) {
      logger.log(level,msg,t);
    }
 else     if (msg != null) {
      logger.log(level,msg);
    }
  }
}","protected void logIfLevel(Level level,Throwable t,String... msgParts){
  Logger logger=Logger.getLogger(loggerName);
  if (logger.isLoggable(level)) {
    StringBuffer msgB=new StringBuffer(""String_Node_Str"");
    for (    String m : msgParts) {
      msgB.append(m);
    }
    String msg=msgB.toString();
    if (!msg.isEmpty() && t != null) {
      logger.log(level,msg,t);
    }
 else     if (!msg.isEmpty()) {
      logger.log(level,msg);
    }
  }
}"
30258,"/** 
 * The ExtendedConfigFile subclass was created because the Configuration interface does not provide a way to do what this method does; i.e. get all the app names from the config.
 * @param authModuleClass an Array of Class objects or null. When thisparameter is not null, the appnames are filtered by removing all names that are not associated via an AppConfigurationEntry with at least one LoginModule that implements an authModuleClass.
 * @return String[] containing all the AppNames appearing in the config file.
 * @throws SecurityException
 */
public String[] getAppNames(final Class[] authModuleClass){
  final Set<String> nameSet;
  try {
    nameSet=(Set<String>)AccessController.doPrivileged(new PrivilegedExceptionAction(){
      @Override public Object run() throws Exception {
        HashMap map;
        Field field=ConfigFile.class.getDeclaredField(""String_Node_Str"");
        field.setAccessible(true);
        map=(HashMap)field.get(ExtendedConfigFile.this);
        return (Set<String>)map.keySet();
      }
    }
);
  }
 catch (  PrivilegedActionException pae) {
    throw new SecurityException(pae.getCause());
  }
  if (authModuleClass != null) {
    try {
      AccessController.doPrivileged(new PrivilegedExceptionAction(){
        @Override public Object run() throws Exception {
          ClassLoader loader=Thread.currentThread().getContextClassLoader();
          String[] names=nameSet.toArray(new String[0]);
          for (          String id : names) {
            boolean hasAuthModule=false;
            AppConfigurationEntry[] entry=getAppConfigurationEntry(id);
            for (int i=0; i < entry.length && !hasAuthModule; i++) {
              String clazz=entry[i].getLoginModuleName();
              try {
                Class c=Class.forName(clazz,true,loader);
                for (                Class required : authModuleClass) {
                  if (required.isAssignableFrom(c)) {
                    hasAuthModule=true;
                    break;
                  }
                }
              }
 catch (              Throwable t) {
                String msg=""String_Node_Str"" + clazz + ""String_Node_Str""+ id;
                logger.log(Level.WARNING,msg);
              }
            }
            if (!hasAuthModule) {
              nameSet.remove(id);
            }
          }
          return null;
        }
      }
);
    }
 catch (    java.security.PrivilegedActionException pae) {
      throw new SecurityException(pae.getCause());
    }
  }
  return nameSet.toArray(new String[0]);
}","/** 
 * The ExtendedConfigFile subclass was created because the Configuration interface does not provide a way to do what this method does; i.e. get all the app names from the config.
 * @param authModuleClass an Array of Class objects or null. When thisparameter is not null, the appnames are filtered by removing all names that are not associated via an AppConfigurationEntry with at least one LoginModule that implements an authModuleClass.
 * @return String[] containing all the AppNames appearing in the config file.
 * @throws SecurityException
 */
public String[] getAppNames(final Class[] authModuleClass){
  final Set<String> nameSet;
  try {
    nameSet=(Set<String>)AccessController.doPrivileged(new PrivilegedExceptionAction(){
      @Override public Object run() throws Exception {
        HashMap map;
        Field field=ConfigFile.class.getDeclaredField(""String_Node_Str"");
        field.setAccessible(true);
        map=(HashMap)field.get(ExtendedConfigFile.this);
        return (Set<String>)map.keySet();
      }
    }
);
  }
 catch (  PrivilegedActionException pae) {
    throw new SecurityException(pae.getCause());
  }
  if (authModuleClass != null) {
    try {
      AccessController.doPrivileged(new PrivilegedExceptionAction(){
        @Override public Object run() throws Exception {
          ClassLoader loader=Thread.currentThread().getContextClassLoader();
          String[] names=nameSet.toArray(new String[nameSet.size()]);
          for (          String id : names) {
            boolean hasAuthModule=false;
            AppConfigurationEntry[] entry=getAppConfigurationEntry(id);
            for (int i=0; i < entry.length && !hasAuthModule; i++) {
              String clazz=entry[i].getLoginModuleName();
              try {
                Class c=Class.forName(clazz,true,loader);
                for (                Class required : authModuleClass) {
                  if (required.isAssignableFrom(c)) {
                    hasAuthModule=true;
                    break;
                  }
                }
              }
 catch (              Throwable t) {
                String msg=""String_Node_Str"" + clazz + ""String_Node_Str""+ id;
                logger.log(Level.WARNING,msg);
              }
            }
            if (!hasAuthModule) {
              nameSet.remove(id);
            }
          }
          return null;
        }
      }
);
    }
 catch (    java.security.PrivilegedActionException pae) {
      throw new SecurityException(pae.getCause());
    }
  }
  return nameSet.toArray(new String[nameSet.size()]);
}"
30259,"@Override public Object run() throws Exception {
  ClassLoader loader=Thread.currentThread().getContextClassLoader();
  String[] names=nameSet.toArray(new String[0]);
  for (  String id : names) {
    boolean hasAuthModule=false;
    AppConfigurationEntry[] entry=getAppConfigurationEntry(id);
    for (int i=0; i < entry.length && !hasAuthModule; i++) {
      String clazz=entry[i].getLoginModuleName();
      try {
        Class c=Class.forName(clazz,true,loader);
        for (        Class required : authModuleClass) {
          if (required.isAssignableFrom(c)) {
            hasAuthModule=true;
            break;
          }
        }
      }
 catch (      Throwable t) {
        String msg=""String_Node_Str"" + clazz + ""String_Node_Str""+ id;
        logger.log(Level.WARNING,msg);
      }
    }
    if (!hasAuthModule) {
      nameSet.remove(id);
    }
  }
  return null;
}","@Override public Object run() throws Exception {
  ClassLoader loader=Thread.currentThread().getContextClassLoader();
  String[] names=nameSet.toArray(new String[nameSet.size()]);
  for (  String id : names) {
    boolean hasAuthModule=false;
    AppConfigurationEntry[] entry=getAppConfigurationEntry(id);
    for (int i=0; i < entry.length && !hasAuthModule; i++) {
      String clazz=entry[i].getLoginModuleName();
      try {
        Class c=Class.forName(clazz,true,loader);
        for (        Class required : authModuleClass) {
          if (required.isAssignableFrom(c)) {
            hasAuthModule=true;
            break;
          }
        }
      }
 catch (      Throwable t) {
        String msg=""String_Node_Str"" + clazz + ""String_Node_Str""+ id;
        logger.log(Level.WARNING,msg);
      }
    }
    if (!hasAuthModule) {
      nameSet.remove(id);
    }
  }
  return null;
}"
30260,"public JAASAuthContextHelper(String loggerName,boolean returnNullContexts,ExtendedConfigFile jaasConfig,Map properties,String appContext) throws AuthException {
  super(loggerName,returnNullContexts);
  this.loggerName=loggerName;
  this.jaasConfig=jaasConfig;
  this.appContext=appContext;
  initialize();
}","public JAASAuthContextHelper(String loggerName,boolean returnNullContexts,ExtendedConfigFile jaasConfig,Map properties,String appContext) throws AuthException {
  super(loggerName,returnNullContexts);
  this.jaasConfig=jaasConfig;
  this.appContext=appContext;
  initialize();
}"
30261,"private void initJKS(){
  String keyStoreFileName=null;
  String trustStoreFileName=null;
  keyStoreFileName=System.getProperty(keyStoreProp);
  trustStoreFileName=System.getProperty(trustStoreProp);
  char[] keyStorePass=null;
  char[] trustStorePass=null;
  if (!isInstantiated()) {
    if (masterPasswordHelper == null && Globals.getDefaultHabitat() != null) {
      masterPasswordHelper=Globals.getDefaultHabitat().getByType(MasterPasswordImpl.class);
    }
    if (masterPasswordHelper instanceof MasterPasswordImpl) {
      keyStorePass=masterPasswordHelper.getMasterPassword();
      trustStorePass=keyStorePass;
    }
  }
  if (keyStorePass == null) {
    keyStorePass=System.getProperty(KEYSTORE_PASS_PROP,DEFAULT_KEYSTORE_PASS).toCharArray();
    trustStorePass=System.getProperty(TRUSTSTORE_PASS_PROP,DEFAULT_TRUSTSTORE_PASS).toCharArray();
  }
  if (!initialized) {
    loadStores(null,null,keyStoreFileName,keyStorePass,System.getProperty(KEYSTORE_TYPE_PROP,KeyStore.getDefaultType()),trustStoreFileName,trustStorePass,System.getProperty(TRUSTSTORE_TYPE_PROP,KeyStore.getDefaultType()));
    Arrays.fill(keyStorePass,' ');
    Arrays.fill(trustStorePass,' ');
    initialized=true;
  }
}","private void initJKS(){
  String keyStoreFileName=null;
  String trustStoreFileName=null;
  keyStoreFileName=System.getProperty(keyStoreProp);
  trustStoreFileName=System.getProperty(trustStoreProp);
  char[] keyStorePass=null;
  char[] trustStorePass=null;
  if (!isInstantiated()) {
    if (masterPasswordHelper == null && Globals.getDefaultHabitat() != null) {
      masterPasswordHelper=Globals.getDefaultHabitat().getByType(MasterPasswordImpl.class);
    }
    if (masterPasswordHelper != null) {
      keyStorePass=masterPasswordHelper.getMasterPassword();
      trustStorePass=keyStorePass;
    }
  }
  if (keyStorePass == null) {
    keyStorePass=System.getProperty(KEYSTORE_PASS_PROP,DEFAULT_KEYSTORE_PASS).toCharArray();
    trustStorePass=System.getProperty(TRUSTSTORE_PASS_PROP,DEFAULT_TRUSTSTORE_PASS).toCharArray();
  }
  if (!initialized) {
    loadStores(null,null,keyStoreFileName,keyStorePass,System.getProperty(KEYSTORE_TYPE_PROP,KeyStore.getDefaultType()),trustStoreFileName,trustStorePass,System.getProperty(TRUSTSTORE_TYPE_PROP,KeyStore.getDefaultType()));
    Arrays.fill(keyStorePass,' ');
    Arrays.fill(trustStorePass,' ');
    initialized=true;
  }
}"
30262,"/** 
 * Returns the directory for the selected instance that is on the local system.
 * @param instanceName name of the instance
 * @return File for the local file system location of the instance directory
 * @throws IOException
 */
protected File getLocalInstanceDir(String instance) throws IOException {
  String nodeDir=node.getNodeDirAbsolute();
  final File nodeDirFile=(nodeDir != null ? new File(nodeDir) : defaultLocalNodeDirFile());
  InstanceDirs instanceDirs=new InstanceDirs(nodeDirFile.toString(),node.getName(),instance);
  return instanceDirs.getInstanceDir();
}","/** 
 * Returns the directory for the selected instance that is on the local system.
 * @param instanceName name of the instance
 * @return File for the local file system location of the instance directory
 * @throws IOException
 */
File getLocalInstanceDir(String instance) throws IOException {
  String nodeDir=node.getNodeDirAbsolute();
  final File nodeDirFile=(nodeDir != null ? new File(nodeDir) : defaultLocalNodeDirFile());
  InstanceDirs instanceDirs=new InstanceDirs(nodeDirFile.toString(),node.getName(),instance);
  return instanceDirs.getInstanceDir();
}"
30263,"protected File defaultLocalNodeDirFile(){
  String installDir=node.getInstallDir();
  String nodeName=node.getName();
  final File nodeParentDir=(installDir == null ? serverContext.getInstallRoot() : new File(installDir,""String_Node_Str""));
  return new File(nodeParentDir,""String_Node_Str"");
}","File defaultLocalNodeDirFile(){
  String installDir=node.getInstallDir();
  String nodeName=node.getName();
  final File nodeParentDir=(installDir == null ? serverContext.getInstallRoot() : new File(installDir,""String_Node_Str""));
  return new File(nodeParentDir,""String_Node_Str"");
}"
30264,"public InstanceDirUtils(Node node,ServerContext serverContext){
  this.node=node;
  this.serverContext=serverContext;
}","InstanceDirUtils(Node node,ServerContext serverContext){
  this.node=node;
  this.serverContext=serverContext;
}"
30265,"@AfterClass public static void tearDown(){
  application.delete();
}","@AfterClass public static void tearDown(){
  if (application != null) {
    application.delete();
  }
}"
30266,"public void event(Event event){
  if (myTestEvents.contains(event.type())) {
    myTestEvents.remove(event.type());
  }
}","public void event(Event event){
  if (myTestEvents2.contains(event.type())) {
    myTestEvents2.remove(event.type());
  }
}"
30267,"public void setLoadBalancers(List<String> javaEEInstances){
  this.loadBalancers=loadBalancers;
}","public void setLoadBalancers(List<String> loadBalancers){
  this.loadBalancers=loadBalancers;
}"
30268,"private void validateRemoteConnection(ParameterMap map) throws CommandValidationException {
  RemoteType type=parseType(map);
  if (type == RemoteType.SSH)   validateSSHConnection(map);
 else   validateDcomConnection(map);
}","private void validateRemoteConnection(ParameterMap map) throws CommandValidationException {
  RemoteType type=parseType(map);
  if (type == RemoteType.SSH)   validateSSHConnection(map);
 else   if (type == RemoteType.DCOM)   validateDcomConnection(map);
}"
30269,"private String pollForRealDeath(String mode){
  int counter=0;
  while (++counter < 24) {
    try {
      if (mode.equals(""String_Node_Str"")) {
        if (!pidFile.exists()) {
          return null;
        }
      }
 else {
        if (!ftpClient.exists(pidFile.toString()))         return null;
      }
      Thread.sleep(5000);
    }
 catch (    Exception e) {
    }
  }
  return Strings.get(""String_Node_Str"",instanceName);
}","private String pollForRealDeath(String mode){
  int counter=0;
  while (++counter < 24) {
    try {
      if (mode.equals(""String_Node_Str"")) {
        if (!pidFile.exists()) {
          return null;
        }
      }
 else       if (mode.equals(""String_Node_Str"")) {
        if (!ftpClient.exists(pidFile.toString()))         return null;
      }
 else       if (mode.equals(""String_Node_Str"")) {
        if (wrf == null || !wrf.exists())         return null;
      }
      Thread.sleep(5000);
    }
 catch (    Exception e) {
    }
  }
  return Strings.get(""String_Node_Str"",instanceName);
}"
30270,"public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  SSHLauncher launcher;
  int dasPort;
  String dasHost;
  if (env.isDas()) {
    if (kill) {
      errorMessage=killInstance(context);
    }
 else {
      errorMessage=callInstance();
    }
  }
 else {
    errorMessage=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
  }
  if (errorMessage == null && !kill) {
    errorMessage=pollForDeath();
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  report.setMessage(Strings.get(""String_Node_Str"",instanceName));
  if (kill) {
    return;
  }
  String nodeName=instance.getNodeRef();
  Node node=nodes.getNode(nodeName);
  String nodeHost=node.getNodeHost();
  InstanceDirUtils insDU=new InstanceDirUtils(node,serverContext);
  try {
    pidFile=new File(insDU.getLocalInstanceDir(instance.getName()),""String_Node_Str"");
  }
 catch (  java.io.IOException eio) {
    return;
  }
  dasPort=helper.getAdminPort(SystemPropertyConstants.DAS_SERVER_NAME);
  dasHost=System.getProperty(SystemPropertyConstants.HOST_NAME_PROPERTY);
  if (node.isLocal()) {
    if (pidFile.exists()) {
      errorMessage=pollForRealDeath(""String_Node_Str"");
    }
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    launcher=habitat.getComponent(SSHLauncher.class);
    launcher.init(node,logger);
    try {
      ftpClient=launcher.getSFTPClient();
      if (ftpClient.exists(pidFile.toString())) {
        errorMessage=pollForRealDeath(""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
    }
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
  }
}","public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  SSHLauncher launcher;
  int dasPort;
  String dasHost;
  if (env.isDas()) {
    if (kill) {
      errorMessage=killInstance(context);
    }
 else {
      errorMessage=callInstance();
    }
  }
 else {
    errorMessage=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
  }
  if (errorMessage == null && !kill) {
    errorMessage=pollForDeath();
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  report.setMessage(Strings.get(""String_Node_Str"",instanceName));
  if (kill) {
    return;
  }
  String nodeName=instance.getNodeRef();
  Node node=nodes.getNode(nodeName);
  String nodeHost=node.getNodeHost();
  InstanceDirUtils insDU=new InstanceDirUtils(node,serverContext);
  dasPort=helper.getAdminPort(SystemPropertyConstants.DAS_SERVER_NAME);
  dasHost=System.getProperty(SystemPropertyConstants.HOST_NAME_PROPERTY);
  if (node.isLocal()) {
    try {
      pidFile=new File(insDU.getLocalInstanceDir(instance.getName()),""String_Node_Str"");
    }
 catch (    java.io.IOException eio) {
      return;
    }
    if (pidFile.exists()) {
      errorMessage=pollForRealDeath(""String_Node_Str"");
    }
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    try {
      pidFile=new File(insDU.getLocalInstanceDir(instance.getName()),""String_Node_Str"");
    }
 catch (    java.io.IOException eio) {
      return;
    }
    launcher=habitat.getComponent(SSHLauncher.class);
    launcher.init(node,logger);
    try {
      ftpClient=launcher.getSFTPClient();
      if (ftpClient.exists(pidFile.toString())) {
        errorMessage=pollForRealDeath(""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
    }
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    DcomInfo info;
    try {
      info=new DcomInfo(node);
      String path=info.getRemoteNodeRootDirectory() + ""String_Node_Str"";
      wrf=new WindowsRemoteFile(info.getCredentials(),path);
      if (wrf.exists())       errorMessage=pollForRealDeath(""String_Node_Str"");
    }
 catch (    WindowsException ex) {
    }
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
  }
}"
30271,"public final int runAdminCommandOnRemoteNode(Node thisNode,StringBuilder output,List<String> args,List<String> stdinLines) throws SSHCommandExecutionException, IllegalArgumentException, UnsupportedOperationException {
  String commandAsString=null;
  try {
    this.node=thisNode;
    dcomInfo=new DcomInfo(node);
    WindowsCredentials bonafides=dcomInfo.getCredentials();
    List<String> fullcommand=new ArrayList<String>();
    fullcommand.add(dcomInfo.getNadminPath());
    if (stdinLines != null && !stdinLines.isEmpty())     setupAuthTokenFile(fullcommand,stdinLines);
    fullcommand.addAll(args);
    commandAsString=commandListToString(fullcommand);
    WindowsRemoteScripter scripter=new WindowsRemoteScripter(bonafides);
    String out=scripter.run(commandAsString);
    logger.info(Strings.get(""String_Node_Str"",commandAsString,out));
    return 0;
  }
 catch (  WindowsException ex) {
    throw new SSHCommandExecutionException(Strings.get(""String_Node_Str"",ex.getMessage(),commandAsString),ex);
  }
 finally {
    teardownAuthTokenFile();
  }
}","public final int runAdminCommandOnRemoteNode(Node thisNode,StringBuilder output,List<String> args,List<String> stdinLines) throws SSHCommandExecutionException, IllegalArgumentException, UnsupportedOperationException {
  String humanreadable=null;
  try {
    this.node=thisNode;
    dcomInfo=new DcomInfo(node);
    List<String> fullcommand=new ArrayList<String>();
    WindowsRemoteAsadmin asadmin=dcomInfo.getAsadmin();
    if (stdinLines != null && !stdinLines.isEmpty())     setupAuthTokenFile(fullcommand,stdinLines);
    fullcommand.addAll(args);
    humanreadable=dcomInfo.getNadminPath() + ""String_Node_Str"" + commandListToString(fullcommand);
    String out=asadmin.run(fullcommand);
    logger.info(Strings.get(""String_Node_Str"",humanreadable,out));
    return 0;
  }
 catch (  WindowsException ex) {
    throw new SSHCommandExecutionException(Strings.get(""String_Node_Str"",ex.getMessage(),humanreadable),ex);
  }
 finally {
    teardownAuthTokenFile();
  }
}"
30272,"private void setupAuthTokenFile(List<String> cmd,List<String> stdin) throws WindowsException {
  WindowsRemoteFileSystem wrfs=new WindowsRemoteFileSystem(dcomInfo.getCredentials());
  authTokenFilePath=dcomInfo.getNadminParentPath() + ""String_Node_Str"";
  authTokenFile=new WindowsRemoteFile(wrfs,authTokenFilePath);
  authTokenFile.copyFrom(stdin);
  URI authTokenFileUri=new File(authTokenFilePath).toURI();
  cmd.add(AsadminInput.CLI_INPUT_OPTION);
  cmd.add(authTokenFileUri.toString());
}","private void setupAuthTokenFile(List<String> cmd,List<String> stdin) throws WindowsException {
  WindowsRemoteFileSystem wrfs=new WindowsRemoteFileSystem(dcomInfo.getCredentials());
  authTokenFilePath=dcomInfo.getNadminParentPath() + ""String_Node_Str"" + System.nanoTime()+ new Random().nextInt(1000);
  authTokenFilePath=createUniqueFilename(dcomInfo.getNadminParentPath());
  authTokenFile=new WindowsRemoteFile(wrfs,authTokenFilePath);
  authTokenFile.copyFrom(stdin);
  URI authTokenFileUri=new File(authTokenFilePath).toURI();
  cmd.add(AsadminInput.CLI_INPUT_OPTION);
  cmd.add(authTokenFileUri.toString());
}"
30273,"public DcomInfo(Node theNode) throws WindowsException {
  TokenResolver resolver=new TokenResolver(new HashMap<String,String>((Map)(System.getProperties())));
  node=theNode;
  if (node == null)   throw new WindowsException(Strings.get(""String_Node_Str"",""String_Node_Str""));
  if (!isDcomNode(node))   throw new WindowsException(Strings.get(""String_Node_Str"",getNode().getName(),getNode().getType()));
  SshConnector conn=node.getSshConnector();
  if (conn == null)   throw new WindowsException(Strings.get(""String_Node_Str""));
  SshAuth auth=conn.getSshAuth();
  if (auth == null)   throw new WindowsException(Strings.get(""String_Node_Str""));
  String notFinal=auth.getPassword();
  if (!ok(notFinal))   throw new WindowsException(Strings.get(""String_Node_Str""));
  password=DcomUtils.resolvePassword(notFinal);
  notFinal=node.getNodeHost();
  if (!ok(notFinal))   notFinal=conn.getSshHost();
  if (!ok(notFinal))   throw new WindowsException(Strings.get(""String_Node_Str""));
  host=resolver.resolve(notFinal);
  notFinal=auth.getUserName();
  if (!ok(notFinal))   notFinal=System.getProperty(""String_Node_Str"");
  if (!ok(notFinal))   throw new WindowsException(Strings.get(""String_Node_Str""));
  user=resolver.resolve(notFinal);
  notFinal=node.getWindowsDomain();
  if (!ok(notFinal))   notFinal=host;
  windowsDomain=resolver.resolve(notFinal);
  notFinal=node.getInstallDirUnixStyle();
  if (!ok(notFinal))   throw new WindowsException(Strings.get(""String_Node_Str""));
  if (!notFinal.endsWith(""String_Node_Str""))   notFinal+=""String_Node_Str"";
  notFinal+=SystemPropertyConstants.getComponentName();
  notFinal+=""String_Node_Str"";
  notFinal=StringUtils.quotePathIfNecessary(notFinal);
  notFinal=notFinal.replace('/','\\');
  nadminParentPath=notFinal;
  nadminPath=notFinal + ""String_Node_Str"";
  credentials=new WindowsCredentials(getHost(),getWindowsDomain(),getUser(),getPassword());
}","public DcomInfo(Node theNode) throws WindowsException {
  TokenResolver resolver=new TokenResolver(new HashMap<String,String>((Map)(System.getProperties())));
  node=theNode;
  if (node == null)   throw new WindowsException(Strings.get(""String_Node_Str"",""String_Node_Str""));
  if (!isDcomNode(node))   throw new WindowsException(Strings.get(""String_Node_Str"",getNode().getName(),getNode().getType()));
  SshConnector conn=node.getSshConnector();
  if (conn == null)   throw new WindowsException(Strings.get(""String_Node_Str""));
  SshAuth auth=conn.getSshAuth();
  if (auth == null)   throw new WindowsException(Strings.get(""String_Node_Str""));
  String notFinal=auth.getPassword();
  if (!ok(notFinal))   throw new WindowsException(Strings.get(""String_Node_Str""));
  password=DcomUtils.resolvePassword(notFinal);
  notFinal=node.getNodeHost();
  if (!ok(notFinal))   notFinal=conn.getSshHost();
  if (!ok(notFinal))   throw new WindowsException(Strings.get(""String_Node_Str""));
  host=resolver.resolve(notFinal);
  notFinal=auth.getUserName();
  if (!ok(notFinal))   notFinal=System.getProperty(""String_Node_Str"");
  if (!ok(notFinal))   throw new WindowsException(Strings.get(""String_Node_Str""));
  user=resolver.resolve(notFinal);
  notFinal=node.getWindowsDomain();
  if (!ok(notFinal))   notFinal=host;
  windowsDomain=resolver.resolve(notFinal);
  notFinal=node.getInstallDirUnixStyle();
  if (!ok(notFinal))   throw new WindowsException(Strings.get(""String_Node_Str""));
  if (!notFinal.endsWith(""String_Node_Str""))   notFinal+=""String_Node_Str"";
  notFinal+=SystemPropertyConstants.getComponentName();
  remoteInstallRoot=StringUtils.quotePathIfNecessary(notFinal);
  notFinal+=""String_Node_Str"";
  notFinal=StringUtils.quotePathIfNecessary(notFinal);
  notFinal=notFinal.replace('/','\\');
  nadminParentPath=notFinal;
  nadminPath=notFinal + ""String_Node_Str"";
  String notFinal2=node.getNodeDirAbsolute();
  if (notFinal2 == null) {
    notFinal2=remoteInstallRoot;
    notFinal2+=""String_Node_Str"";
  }
  notFinal2=notFinal2.replace('/','\\');
  if (!notFinal2.endsWith(""String_Node_Str""))   notFinal2+='\\';
  remoteNodeRootDirectory=notFinal2 + node.getName();
  credentials=new WindowsCredentials(getHost(),getWindowsDomain(),getUser(),getPassword());
}"
30274,"public WindowsRemoteAsadmin(String remoteInstallRoot,WindowsCredentials bonafides){
  super(bonafides);
  remoteInstallRoot.replace('/','\\');
  if (!remoteInstallRoot.endsWith(""String_Node_Str""))   remoteInstallRoot+=""String_Node_Str"";
  asadminRemotePath=StringUtils.quotePathIfNecessary(remoteInstallRoot + ""String_Node_Str"");
}","public WindowsRemoteAsadmin(String remoteInstallRoot,WindowsCredentials bonafides){
  super(bonafides);
  remoteInstallRoot=remoteInstallRoot.replace('/','\\');
  if (!remoteInstallRoot.endsWith(""String_Node_Str""))   remoteInstallRoot+=""String_Node_Str"";
  asadminRemotePath=StringUtils.quotePathIfNecessary(remoteInstallRoot + ""String_Node_Str"");
}"
30275,"/** 
 * Discover the dependencies of the application and provision the various  Services that are needed by the application.
 * @param appName Application Name
 * @param archive Application Archive
 * @param dc DeploymentContext associated with the current deployment operation
 */
private void provisionServicesForApplication(String appName,ReadableArchive archive,DeploymentContext dc){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=serviceDependencyDiscovery(appName,archive,installedPlugins);
  Set<ProvisionedService> appProvisionedSvcs=provisionServices(installedPlugins,appServiceMetadata,dc);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,true,dc);
  serviceMetadata.put(appName,appServiceMetadata);
  provisionedServices.put(appName,appProvisionedSvcs);
  logger.exiting(getClass().getName(),""String_Node_Str"");
}","/** 
 * Discover the dependencies of the application and provision the various  Services that are needed by the application.
 * @param appName Application Name
 * @param archive Application Archive
 * @param dc DeploymentContext associated with the current deployment operation
 */
private void provisionServicesForApplication(String appName,ReadableArchive archive,DeploymentContext dc){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=serviceDependencyDiscovery(appName,archive,installedPlugins);
  Set<ProvisionedService> appProvisionedSvcs=provisionServices(installedPlugins,appServiceMetadata,dc);
  logger.log(Level.FINE,""String_Node_Str"" + appName + ""String_Node_Str""+ appProvisionedSvcs);
  serviceMetadata.put(appName,appServiceMetadata);
  provisionedServices.put(appName,appProvisionedSvcs);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,true,dc);
  logger.exiting(getClass().getName(),""String_Node_Str"");
}"
30276,"/** 
 * Once the CPAS merges all discovered and explicit <code>ServiceDefinitions</code>s, it provisions the required Services through the <code>Plugin</code>.
 * @return a Set of <code>ProvisionedService</code>s
 */
public ProvisionedService provisionService(ServiceDescription serviceDescription,DeploymentContext dc);","/** 
 * Once the CPAS merges all discovered and explicit <code>ServiceDefinitions</code>s, it provisions the required Services through the <code>Plugin</code>. The <code>Plugin</code> is responsible for ensuring that the provisioning action is atomic. That is, the Service that is being provisioned must be completely provisioned or not at all.
 * @return a Set of <code>ProvisionedService</code>s
 */
public ProvisionedService provisionService(ServiceDescription serviceDescription,DeploymentContext dc);"
30277,"void processMetaData(File file){
  metaData=CommandUtil.getPreSelectedServices(file.getAbsolutePath());
  database=""String_Node_Str"";
  eeTemplate=""String_Node_Str"";
  loadBalancer=""String_Node_Str"";
  databasesMetaData.clear();
  eeTemplatesMetaData.clear();
  loadBalancersMetaData.clear();
  for (  Map oneService : metaData) {
    String serviceType=(String)oneService.get(""String_Node_Str"");
    String serviceName=(String)oneService.get(""String_Node_Str"");
    String templateId=(String)oneService.get(""String_Node_Str"");
    if (CommandUtil.SERVICE_TYPE_RDMBS.equals(serviceType)) {
      databasesMetaData.add(oneService);
      if (database.length() > 0) {
        database+=""String_Node_Str"";
      }
      database+=templateId != null ? templateId : serviceName;
    }
 else     if (CommandUtil.SERVICE_TYPE_JAVAEE.equals(serviceType)) {
      eeTemplatesMetaData.add(oneService);
      if (eeTemplate.length() > 0) {
        eeTemplate+=""String_Node_Str"";
      }
      eeTemplate+=templateId != null ? templateId : serviceName;
    }
 else     if (CommandUtil.SERVICE_TYPE_LB.equals(serviceType)) {
      loadBalancersMetaData.add(oneService);
      if (loadBalancer.length() > 0) {
        loadBalancer+=""String_Node_Str"";
      }
      loadBalancer+=templateId != null ? templateId : serviceName;
    }
  }
  if (databasesMetaData != null) {
    createSelectItems(CommandUtil.SERVICE_TYPE_RDMBS);
  }
  if (eeTemplatesMetaData != null) {
    createSelectItems(CommandUtil.SERVICE_TYPE_JAVAEE);
  }
  if (loadBalancersMetaData != null) {
    createSelectItems(CommandUtil.SERVICE_TYPE_LB);
  }
}","void processMetaData(File file){
  metaData=CommandUtil.getPreSelectedServices(file.getAbsolutePath());
  database=""String_Node_Str"";
  eeTemplate=""String_Node_Str"";
  loadBalancer=""String_Node_Str"";
  databasesMetaData.clear();
  eeTemplatesMetaData.clear();
  loadBalancersMetaData.clear();
  for (  Map oneService : metaData) {
    String serviceType=(String)oneService.get(""String_Node_Str"");
    String serviceName=(String)oneService.get(""String_Node_Str"");
    String templateId=(String)oneService.get(""String_Node_Str"");
    if (CommandUtil.SERVICE_TYPE_RDMBS.equals(serviceType)) {
      databasesMetaData.add(oneService);
      if (database.length() > 0) {
        database+=""String_Node_Str"";
      }
      database+=templateId != null ? templateId : serviceName;
    }
 else     if (CommandUtil.SERVICE_TYPE_JAVAEE.equals(serviceType)) {
      eeTemplatesMetaData.add(oneService);
      if (eeTemplate.length() > 0) {
        eeTemplate+=""String_Node_Str"";
      }
      eeTemplate+=templateId != null ? templateId : serviceName;
    }
 else     if (CommandUtil.SERVICE_TYPE_LB.equals(serviceType)) {
      loadBalancersMetaData.add(oneService);
      if (loadBalancer.length() > 0) {
        loadBalancer+=""String_Node_Str"";
      }
      loadBalancer+=templateId != null ? templateId : serviceName;
    }
  }
  createSelectItems(CommandUtil.SERVICE_TYPE_RDMBS);
  createSelectItems(CommandUtil.SERVICE_TYPE_JAVAEE);
  createSelectItems(CommandUtil.SERVICE_TYPE_LB);
}"
30278,"@Override public void encodeEnd(FacesContext facesContext,UIComponent component) throws IOException {
  ResponseWriter writer=facesContext.getResponseWriter();
  Draggable draggable=(Draggable)component;
  String target=findTarget(facesContext,draggable);
  writer.startElement(""String_Node_Str"",draggable);
  writer.writeAttribute(""String_Node_Str"",""String_Node_Str"",null);
  writer.write(""String_Node_Str"" + target + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + draggable.getCursor() + ""String_Node_Str"");
  if (draggable.isDisabled()) {
    writer.write(""String_Node_Str"");
  }
  if (draggable.getAxis() != null) {
    writer.write(""String_Node_Str"" + draggable.getAxis() + ""String_Node_Str"");
  }
  if (draggable.getContainment() != null) {
    writer.write(""String_Node_Str"" + draggable.getContainment() + ""String_Node_Str"");
  }
  if (draggable.getHelper() != null) {
    writer.write(""String_Node_Str"" + draggable.getHelper() + ""String_Node_Str"");
  }
  if (draggable.getRevert() != null) {
    final String revert=draggable.getRevert();
    writer.write(""String_Node_Str"" + ((""String_Node_Str"".equalsIgnoreCase(revert) || ""String_Node_Str"".equals(revert)) ? revert : ""String_Node_Str"" + revert + ""String_Node_Str""));
  }
  if (draggable.getZindex() != -1) {
    writer.write(""String_Node_Str"" + draggable.getZindex());
  }
  if (draggable.getHandle() != null) {
    writer.write(""String_Node_Str"" + draggable.getHandle() + ""String_Node_Str"");
  }
  if (draggable.getOpacity() != 1.0) {
    writer.write(""String_Node_Str"" + draggable.getOpacity());
  }
  if (draggable.getRevertDuration() != null) {
    writer.write(""String_Node_Str"" + draggable.getRevertDuration());
  }
  if (draggable.getStack() != null) {
    writer.write(""String_Node_Str"" + draggable.getStack() + ""String_Node_Str"");
  }
  if (draggable.getGrid() != null) {
    writer.write(""String_Node_Str"" + draggable.getGrid() + ""String_Node_Str"");
  }
  if (draggable.getScope() != null) {
    writer.write(""String_Node_Str"" + draggable.getScope() + ""String_Node_Str"");
  }
  if (draggable.isSnap()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + draggable.getSnapTolerance());
    if (draggable.getSnapMode() != null)     writer.write(""String_Node_Str"" + draggable.getSnapMode() + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.endElement(""String_Node_Str"");
}","@Override public void encodeEnd(FacesContext facesContext,UIComponent component) throws IOException {
  ResponseWriter writer=facesContext.getResponseWriter();
  Draggable draggable;
  if (component instanceof Draggable) {
    draggable=(Draggable)component;
  }
 else {
    throw new FacesException(""String_Node_Str"" + component.getId());
  }
  String target=findTarget(facesContext,draggable);
  writer.startElement(""String_Node_Str"",draggable);
  writer.writeAttribute(""String_Node_Str"",""String_Node_Str"",null);
  writer.write(""String_Node_Str"" + target + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + draggable.getCursor() + ""String_Node_Str"");
  if (draggable.isDisabled()) {
    writer.write(""String_Node_Str"");
  }
  if (draggable.getAxis() != null) {
    writer.write(""String_Node_Str"" + draggable.getAxis() + ""String_Node_Str"");
  }
  if (draggable.getContainment() != null) {
    writer.write(""String_Node_Str"" + draggable.getContainment() + ""String_Node_Str"");
  }
  if (draggable.getHelper() != null) {
    writer.write(""String_Node_Str"" + draggable.getHelper() + ""String_Node_Str"");
  }
  if (draggable.getRevert() != null) {
    final String revert=draggable.getRevert();
    writer.write(""String_Node_Str"" + ((""String_Node_Str"".equalsIgnoreCase(revert) || ""String_Node_Str"".equals(revert)) ? revert : ""String_Node_Str"" + revert + ""String_Node_Str""));
  }
  if (draggable.getZindex() != -1) {
    writer.write(""String_Node_Str"" + draggable.getZindex());
  }
  if (draggable.getHandle() != null) {
    writer.write(""String_Node_Str"" + draggable.getHandle() + ""String_Node_Str"");
  }
  if (draggable.getOpacity() != 1.0) {
    writer.write(""String_Node_Str"" + draggable.getOpacity());
  }
  if (draggable.getRevertDuration() != null) {
    writer.write(""String_Node_Str"" + draggable.getRevertDuration());
  }
  if (draggable.getStack() != null) {
    writer.write(""String_Node_Str"" + draggable.getStack() + ""String_Node_Str"");
  }
  if (draggable.getGrid() != null) {
    writer.write(""String_Node_Str"" + draggable.getGrid() + ""String_Node_Str"");
  }
  if (draggable.getScope() != null) {
    writer.write(""String_Node_Str"" + draggable.getScope() + ""String_Node_Str"");
  }
  if (draggable.isSnap()) {
    writer.write(""String_Node_Str"");
    writer.write(""String_Node_Str"" + draggable.getSnapTolerance());
    if (draggable.getSnapMode() != null)     writer.write(""String_Node_Str"" + draggable.getSnapMode() + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  writer.endElement(""String_Node_Str"");
}"
30279,"public String getProperty(String serviceName,String property){
  for (  Service service : serviceUtil.getServices().getServices()) {
    return service.getServiceName().equals(serviceName) ? service.getProperty(property).getValue() : null;
  }
  return null;
}","public String getProperty(String serviceName,String property){
  for (  Service service : serviceUtil.getServices().getServices()) {
    if (service.getServiceName().equals(serviceName)) {
      Property p=service.getProperty(property);
      if (p != null) {
        return p.getValue();
      }
 else {
        return null;
      }
    }
  }
  return null;
}"
30280,"static private String getHtmlRespresentationForParameter(String parameter,ParameterMetaData parameterMetaData,String parameterValue){
  if (""String_Node_Str"".equals(parameterMetaData.getAttributeValue(Constants.DEPRECATED))) {
    return ""String_Node_Str"";
  }
  StringBuilder result=new StringBuilder(parameter);
  String parameterType=parameterMetaData.isFileParameter() ? ""String_Node_Str"" : ""String_Node_Str"";
  if (parameterMetaData.getAttributeValue(Constants.OPTIONAL).equalsIgnoreCase(""String_Node_Str"")) {
    result.append(""String_Node_Str"");
  }
  result.append(""String_Node_Str"").append(parameter).append(""String_Node_Str"").append(result).append(""String_Node_Str"").append(""String_Node_Str"");
  boolean isBoolean=false;
  if ((parameterMetaData.getAttributeValue(Constants.TYPE).endsWith(Constants.JAVA_BOOLEAN_TYPE)) || (parameterMetaData.getAttributeValue(Constants.TYPE).equals(Constants.XSD_BOOLEAN_TYPE))) {
    isBoolean=true;
  }
  boolean hasAcceptableValues=false;
  String acceptableValues=parameterMetaData.getAttributeValue(Constants.ACCEPTABLE_VALUES);
  if ((acceptableValues != null) && (acceptableValues.length() > 0)) {
    hasAcceptableValues=true;
  }
  boolean hasValue=false;
  if ((parameterValue == null) || (parameterValue.equals(""String_Node_Str""))) {
    String defaultValue=parameterMetaData.getAttributeValue(Constants.DEFAULT_VALUE);
    if ((defaultValue != null) && (defaultValue.length() > 0)) {
      parameterValue=defaultValue;
    }
  }
  if ((parameterValue != null) && (parameterValue.length() > 0)) {
    hasValue=true;
  }
  boolean keyAttribute=Boolean.valueOf(parameterMetaData.getAttributeValue(Constants.KEY)).booleanValue();
  if (keyAttribute) {
    if (hasValue) {
      result.append(""String_Node_Str"").append(parameter).append(""String_Node_Str"").append(parameterValue).append(""String_Node_Str"").append(parameterType).append(""String_Node_Str"");
    }
 else {
      result.append(""String_Node_Str"").append(parameter).append(""String_Node_Str"").append(parameterType).append(""String_Node_Str"");
    }
  }
 else {
    if (isBoolean || hasAcceptableValues) {
      result.append(""String_Node_Str"").append(parameter).append(""String_Node_Str"");
      String[] values;
      if (isBoolean) {
        values=new String[]{""String_Node_Str"",""String_Node_Str""};
      }
 else {
        values=stringToArray(acceptableValues,""String_Node_Str"");
      }
      for (      String value : values) {
        if ((hasValue) && (value.equalsIgnoreCase(parameterValue))) {
          if (isBoolean) {
            parameterValue=parameterValue.toLowerCase(Locale.US);
          }
          result.append(""String_Node_Str"").append(parameterValue).append(""String_Node_Str"");
        }
 else {
          result.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
        }
      }
      result.append(""String_Node_Str"");
    }
 else {
      String field;
      boolean isList=parameterMetaData.getAttributeValue(Constants.TYPE).equals(""String_Node_Str"");
      if (hasValue) {
        field=""String_Node_Str"" + parameter + ""String_Node_Str""+ parameterValue+ ""String_Node_Str""+ parameterType+ ""String_Node_Str"";
      }
 else {
        field=""String_Node_Str"" + parameter + ""String_Node_Str""+ parameterType+ ""String_Node_Str"";
      }
      result.append(""String_Node_Str"").append(field);
      if (isList) {
        result.append(""String_Node_Str"");
      }
      result.append(""String_Node_Str"");
    }
  }
  return result.toString();
}","static private String getHtmlRespresentationForParameter(String parameter,ParameterMetaData parameterMetaData,String parameterValue){
  if (""String_Node_Str"".equals(parameterMetaData.getAttributeValue(Constants.DEPRECATED))) {
    return ""String_Node_Str"";
  }
  String parameterType=parameterMetaData.isFileParameter() ? ""String_Node_Str"" : ""String_Node_Str"";
  StringBuilder result=new StringBuilder();
  result.append(""String_Node_Str"").append(parameter).append(""String_Node_Str"").append(parameter).append(parameterMetaData.getAttributeValue(Constants.OPTIONAL).equalsIgnoreCase(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  boolean isBoolean=false;
  if ((parameterMetaData.getAttributeValue(Constants.TYPE).endsWith(Constants.JAVA_BOOLEAN_TYPE)) || (parameterMetaData.getAttributeValue(Constants.TYPE).equals(Constants.XSD_BOOLEAN_TYPE))) {
    isBoolean=true;
  }
  boolean hasAcceptableValues=false;
  String acceptableValues=parameterMetaData.getAttributeValue(Constants.ACCEPTABLE_VALUES);
  if ((acceptableValues != null) && (acceptableValues.length() > 0)) {
    hasAcceptableValues=true;
  }
  boolean hasValue=false;
  if ((parameterValue == null) || (parameterValue.equals(""String_Node_Str""))) {
    String defaultValue=parameterMetaData.getAttributeValue(Constants.DEFAULT_VALUE);
    if ((defaultValue != null) && (defaultValue.length() > 0)) {
      parameterValue=defaultValue;
    }
  }
  if ((parameterValue != null) && (parameterValue.length() > 0)) {
    hasValue=true;
  }
  boolean keyAttribute=Boolean.valueOf(parameterMetaData.getAttributeValue(Constants.KEY)).booleanValue();
  if (keyAttribute) {
    if (hasValue) {
      result.append(""String_Node_Str"").append(parameter).append(""String_Node_Str"").append(parameterValue).append(""String_Node_Str"").append(parameterType).append(""String_Node_Str"");
    }
 else {
      result.append(""String_Node_Str"").append(parameter).append(""String_Node_Str"").append(parameterType).append(""String_Node_Str"");
    }
  }
 else {
    if (isBoolean || hasAcceptableValues) {
      result.append(""String_Node_Str"").append(parameter).append(""String_Node_Str"");
      String[] values;
      if (isBoolean) {
        values=new String[]{""String_Node_Str"",""String_Node_Str""};
      }
 else {
        values=stringToArray(acceptableValues,""String_Node_Str"");
      }
      for (      String value : values) {
        if ((hasValue) && (value.equalsIgnoreCase(parameterValue))) {
          if (isBoolean) {
            parameterValue=parameterValue.toLowerCase(Locale.US);
          }
          result.append(""String_Node_Str"").append(parameterValue).append(""String_Node_Str"");
        }
 else {
          result.append(""String_Node_Str"").append(value).append(""String_Node_Str"");
        }
      }
      result.append(""String_Node_Str"");
    }
 else {
      String field;
      boolean isList=parameterMetaData.getAttributeValue(Constants.TYPE).equals(""String_Node_Str"");
      if (hasValue) {
        field=""String_Node_Str"" + parameter + ""String_Node_Str""+ parameterValue+ ""String_Node_Str""+ parameterType+ ""String_Node_Str"";
      }
 else {
        field=""String_Node_Str"" + parameter + ""String_Node_Str""+ parameterType+ ""String_Node_Str"";
      }
      result.append(""String_Node_Str"").append(field);
      if (isList) {
        result.append(""String_Node_Str"");
      }
      result.append(""String_Node_Str"");
    }
  }
  return result.toString();
}"
30281,"public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Services services=serviceUtil.getServices();
  List<Service> matchedServices=new ArrayList<Service>();
  if (appName != null) {
    if (domain.getApplications().getApplication(appName) == null) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(""String_Node_Str"" + appName + ""String_Node_Str"");
      return;
    }
    for (    Service service : services.getServices()) {
      if (service instanceof ApplicationScopedService) {
        if (appName.equals(((ApplicationScopedService)service).getApplicationName())) {
          if (type != null) {
            if (service.getType().equals(type)) {
              if (scope != null) {
                if (scope.equals(getServiceScope(service))) {
                  matchedServices.add(service);
                }
              }
 else {
                matchedServices.add(service);
              }
            }
          }
 else {
            if (scope != null) {
              if (scope.equals(getServiceScope(service))) {
                matchedServices.add(service);
              }
            }
 else {
              matchedServices.add(service);
            }
          }
        }
      }
    }
    for (    ServiceRef serviceRef : services.getServiceRefs()) {
      if (appName.equals(serviceRef.getApplicationName())) {
        for (        Service service : services.getServices()) {
          if (service.getServiceName().equals(serviceRef.getServiceName())) {
            if (type != null) {
              if (service.getType().equals(type)) {
                if (scope != null) {
                  if (scope.equals(getServiceScope(service))) {
                    matchedServices.add(service);
                  }
                }
 else {
                  matchedServices.add(service);
                  break;
                }
              }
            }
 else {
              if (scope != null) {
                if (scope.equals(getServiceScope(service))) {
                  matchedServices.add(service);
                  break;
                }
 else {
                  matchedServices.add(service);
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    if (scope != null && scope.equals(SCOPE_APPLICATION)) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(""String_Node_Str"");
      return;
    }
    for (    Service service : services.getServices()) {
      if (type != null) {
        if (service.getType().equals(type)) {
          if (scope != null) {
            if (scope.equals(getServiceScope(service))) {
              matchedServices.add(service);
            }
          }
 else {
            matchedServices.add(service);
          }
        }
      }
 else {
        if (scope != null) {
          if (scope.equals(getServiceScope(service))) {
            matchedServices.add(service);
          }
        }
 else {
          matchedServices.add(service);
        }
      }
    }
  }
  Properties extraProperties=new Properties();
  extraProperties.put(""String_Node_Str"",new ArrayList<Map<String,String>>());
  if (matchedServices.size() > 0) {
    String headings[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    if (terse) {
      if (header) {
        headings=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        if (type != null) {
          if (scope != null) {
            headings=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          }
 else {
            headings=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          }
        }
 else {
          if (scope != null) {
            headings=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          }
        }
      }
    }
 else     if (output != null) {
      String[] outputheaders=output.split(""String_Node_Str"");
      int count=0;
      for (      String s : outputheaders) {
        s=s.toUpperCase();
        headings[count]=s;
        count++;
      }
    }
 else {
      headings=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      if (type != null) {
        if (scope != null) {
          headings=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        }
 else {
          headings=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        }
      }
 else {
        if (scope != null) {
          headings=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
        }
      }
    }
    ColumnFormatter cf=new ColumnFormatter(headings);
    boolean foundRows=false;
    HashMap<String,String> name_map=new HashMap<String,String>();
    HashMap<String,String> ip_map=new HashMap<String,String>();
    HashMap<String,String> vm_map=new HashMap<String,String>();
    HashMap<String,String> type_map=new HashMap<String,String>();
    HashMap<String,String> state_map=new HashMap<String,String>();
    HashMap<String,String> scope_map=new HashMap<String,String>();
    for (    Service service : matchedServices) {
      foundRows=true;
      String cloudName=service.getServiceName();
      String ipAddress=service.getPropertyValue(""String_Node_Str"");
      if (ipAddress == null) {
        ipAddress=""String_Node_Str"";
      }
      String instanceID=service.getPropertyValue(""String_Node_Str"");
      if (instanceID == null) {
        instanceID=""String_Node_Str"";
      }
      String serverType=service.getType();
      String serviceType=null;
      String state=""String_Node_Str"";
      if (service instanceof ApplicationScopedService) {
        state=((ApplicationScopedService)service).getState();
        serviceType=SCOPE_APPLICATION;
      }
 else       if (service instanceof SharedService) {
        state=((SharedService)service).getState();
        serviceType=SCOPE_SHARED;
      }
 else       if (service instanceof ExternalService) {
        state=""String_Node_Str"";
        serviceType=SCOPE_EXTERNAL;
      }
      name_map.put(cloudName,cloudName);
      ip_map.put(cloudName,ipAddress);
      vm_map.put(cloudName,instanceID);
      type_map.put(cloudName,serverType);
      state_map.put(cloudName,state);
      scope_map.put(cloudName,serviceType);
      if (key == null) {
        if (output != null) {
          String outputstring[]=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          int count=0;
          for (          String s : headings) {
            if (s.equals(""String_Node_Str"")) {
              outputstring[count]=cloudName;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=ipAddress;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=instanceID;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=serverType;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=state;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=serviceType;
            }
            count++;
          }
          cf.addRow(outputstring);
        }
 else         if (type == null) {
          if (scope == null) {
            cf.addRow(new Object[]{cloudName,ipAddress,instanceID,serverType,state,serviceType});
          }
 else {
            if (serviceType.equals(scope)) {
              cf.addRow(new Object[]{cloudName,ipAddress,instanceID,serverType,state});
            }
          }
        }
 else {
          if (scope == null) {
            cf.addRow(new Object[]{cloudName,ipAddress,instanceID,state,serviceType});
          }
 else {
            if (serviceType.equals(scope)) {
              cf.addRow(new Object[]{cloudName,ipAddress,instanceID,state});
            }
          }
        }
      }
    }
    if (key != null) {
      if (key.equals(""String_Node_Str"")) {
        name_map=sortHashMap(name_map);
        for (        String e : name_map.keySet()) {
          cf.addRow(new Object[]{name_map.get(e),ip_map.get(e),vm_map.get(e),type_map.get(e),state_map.get(e),scope_map.get(e)});
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        ip_map=sortHashMap(ip_map);
        for (        String e : ip_map.keySet()) {
          cf.addRow(new Object[]{name_map.get(e),ip_map.get(e),vm_map.get(e),type_map.get(e),state_map.get(e),scope_map.get(e)});
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        vm_map=sortHashMap(vm_map);
        for (        String e : vm_map.keySet()) {
          cf.addRow(new Object[]{name_map.get(e),ip_map.get(e),vm_map.get(e),type_map.get(e),state_map.get(e),scope_map.get(e)});
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        type_map=sortHashMap(type_map);
        for (        String e : type_map.keySet()) {
          cf.addRow(new Object[]{name_map.get(e),ip_map.get(e),vm_map.get(e),type_map.get(e),state_map.get(e),scope_map.get(e)});
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        state_map=sortHashMap(state_map);
        for (        String e : state_map.keySet()) {
          cf.addRow(new Object[]{name_map.get(e),ip_map.get(e),vm_map.get(e),type_map.get(e),state_map.get(e),scope_map.get(e)});
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        scope_map=sortHashMap(scope_map);
        for (        String e : scope_map.keySet()) {
          cf.addRow(new Object[]{name_map.get(e),ip_map.get(e),vm_map.get(e),type_map.get(e),state_map.get(e),scope_map.get(e)});
        }
      }
    }
    if (foundRows) {
      report.setMessage(cf.toString());
      extraProperties.put(""String_Node_Str"",cf.getContent());
    }
 else     if (header=true) {
      report.setMessage(""String_Node_Str"");
    }
  }
 else   if (header=true) {
    report.setMessage(""String_Node_Str"");
  }
  report.setExtraProperties(extraProperties);
  ActionReport.ExitCode ec=ActionReport.ExitCode.SUCCESS;
  report.setActionExitCode(ec);
}","public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Services services=serviceUtil.getServices();
  List<Service> matchedServices=new ArrayList<Service>();
  if (appName != null) {
    if (domain.getApplications().getApplication(appName) == null) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(""String_Node_Str"" + appName + ""String_Node_Str"");
      return;
    }
    for (    Service service : services.getServices()) {
      if (service instanceof ApplicationScopedService) {
        if (appName.equals(((ApplicationScopedService)service).getApplicationName())) {
          if (type != null) {
            if (service.getType().equals(type)) {
              if (scope != null) {
                if (scope.equals(getServiceScope(service))) {
                  matchedServices.add(service);
                }
              }
 else {
                matchedServices.add(service);
              }
            }
          }
 else {
            if (scope != null) {
              if (scope.equals(getServiceScope(service))) {
                matchedServices.add(service);
              }
            }
 else {
              matchedServices.add(service);
            }
          }
        }
      }
    }
    for (    ServiceRef serviceRef : services.getServiceRefs()) {
      if (appName.equals(serviceRef.getApplicationName())) {
        for (        Service service : services.getServices()) {
          if (service.getServiceName().equals(serviceRef.getServiceName())) {
            if (type != null) {
              if (service.getType().equals(type)) {
                if (scope != null) {
                  if (scope.equals(getServiceScope(service))) {
                    matchedServices.add(service);
                  }
                }
 else {
                  matchedServices.add(service);
                  break;
                }
              }
            }
 else {
              if (scope != null) {
                if (scope.equals(getServiceScope(service))) {
                  matchedServices.add(service);
                  break;
                }
 else {
                  matchedServices.add(service);
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    if (scope != null && scope.equals(SCOPE_APPLICATION)) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(""String_Node_Str"");
      return;
    }
    for (    Service service : services.getServices()) {
      if (type != null) {
        if (service.getType().equals(type)) {
          if (scope != null) {
            if (scope.equals(getServiceScope(service))) {
              matchedServices.add(service);
            }
          }
 else {
            matchedServices.add(service);
          }
        }
      }
 else {
        if (scope != null) {
          if (scope.equals(getServiceScope(service))) {
            matchedServices.add(service);
          }
        }
 else {
          matchedServices.add(service);
        }
      }
    }
  }
  Properties extraProperties=new Properties();
  extraProperties.put(""String_Node_Str"",new ArrayList<Map<String,String>>());
  if (matchedServices.size() > 0) {
    int heading_count=0;
    List<String> headerList=new ArrayList<String>();
    if (output != null) {
      String[] outputheaders=output.split(""String_Node_Str"");
      int count=0;
      for (      String s : outputheaders) {
        s=s.trim().toUpperCase();
        if (!(s.equals(""String_Node_Str"") || s.equals(""String_Node_Str"") || s.equals(""String_Node_Str"")|| s.equals(""String_Node_Str"")|| s.equals(""String_Node_Str"")|| s.equals(""String_Node_Str""))) {
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(""String_Node_Str"" + s.toLowerCase() + ""String_Node_Str"");
          return;
        }
        headerList.add(s);
      }
    }
 else {
      headerList.add(""String_Node_Str"");
      headerList.add(""String_Node_Str"");
      headerList.add(""String_Node_Str"");
      headerList.add(""String_Node_Str"");
      headerList.add(""String_Node_Str"");
      headerList.add(""String_Node_Str"");
      if (type != null) {
        if (scope != null) {
          headerList.remove(""String_Node_Str"");
          headerList.remove(""String_Node_Str"");
        }
 else {
          headerList.remove(""String_Node_Str"");
        }
      }
 else {
        if (scope != null) {
          headerList.remove(""String_Node_Str"");
        }
      }
    }
    ColumnFormatter cf=new ColumnFormatter();
    String[] headings=headerList.toArray(new String[headerList.size()]);
    heading_count=headerList.size();
    if (terse && (header == false)) {
      String[] s=new String[headerList.size()];
      for (int i=0; i < heading_count; i++) {
        s[i]=""String_Node_Str"";
      }
      cf=new ColumnFormatter(s);
    }
 else {
      cf=new ColumnFormatter(headings);
    }
    boolean foundRows=false;
    HashMap<String,String> name_map=new HashMap<String,String>();
    HashMap<String,String> ip_map=new HashMap<String,String>();
    HashMap<String,String> vm_map=new HashMap<String,String>();
    HashMap<String,String> type_map=new HashMap<String,String>();
    HashMap<String,String> state_map=new HashMap<String,String>();
    HashMap<String,String> scope_map=new HashMap<String,String>();
    for (    Service service : matchedServices) {
      foundRows=true;
      String cloudName=service.getServiceName();
      String ipAddress=service.getPropertyValue(""String_Node_Str"");
      if (ipAddress == null) {
        ipAddress=""String_Node_Str"";
      }
      String instanceID=service.getPropertyValue(""String_Node_Str"");
      if (instanceID == null) {
        instanceID=""String_Node_Str"";
      }
      String serverType=service.getType();
      String serviceType=null;
      String state=""String_Node_Str"";
      if (service instanceof ApplicationScopedService) {
        state=((ApplicationScopedService)service).getState();
        serviceType=SCOPE_APPLICATION;
      }
 else       if (service instanceof SharedService) {
        state=((SharedService)service).getState();
        serviceType=SCOPE_SHARED;
      }
 else       if (service instanceof ExternalService) {
        state=""String_Node_Str"";
        serviceType=SCOPE_EXTERNAL;
      }
      name_map.put(cloudName,cloudName);
      ip_map.put(cloudName,ipAddress);
      vm_map.put(cloudName,instanceID);
      type_map.put(cloudName,serverType);
      state_map.put(cloudName,state);
      scope_map.put(cloudName,serviceType);
      if (key == null) {
        if (output != null) {
          String[] outputstring=new String[heading_count];
          int count=0;
          for (          String s : headings) {
            if (s.equals(""String_Node_Str"")) {
              outputstring[count]=cloudName;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=ipAddress;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=instanceID;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=serverType;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=state;
            }
 else             if (s.equals(""String_Node_Str"")) {
              outputstring[count]=serviceType;
            }
            count++;
          }
          cf.addRow(outputstring);
        }
 else         if (type == null) {
          if (scope == null) {
            cf.addRow(new Object[]{cloudName,ipAddress,instanceID,serverType,state,serviceType});
          }
 else {
            if (serviceType.equals(scope)) {
              cf.addRow(new Object[]{cloudName,ipAddress,instanceID,serverType,state});
            }
          }
        }
 else {
          if (scope == null) {
            cf.addRow(new Object[]{cloudName,ipAddress,instanceID,state,serviceType});
          }
 else {
            if (serviceType.equals(scope)) {
              cf.addRow(new Object[]{cloudName,ipAddress,instanceID,state});
            }
          }
        }
      }
    }
    if (key != null) {
      if (key.equals(""String_Node_Str"")) {
        name_map=sortHashMap(name_map);
        for (        String e : name_map.keySet()) {
          cf.addRow(this.generateOutputRow(headings,heading_count,e,name_map,ip_map,vm_map,type_map,state_map,scope_map));
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        ip_map=sortHashMap(ip_map);
        for (        String e : ip_map.keySet()) {
          cf.addRow(this.generateOutputRow(headings,heading_count,e,name_map,ip_map,vm_map,type_map,state_map,scope_map));
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        vm_map=sortHashMap(vm_map);
        for (        String e : vm_map.keySet()) {
          cf.addRow(this.generateOutputRow(headings,heading_count,e,name_map,ip_map,vm_map,type_map,state_map,scope_map));
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        type_map=sortHashMap(type_map);
        for (        String e : type_map.keySet()) {
          cf.addRow(this.generateOutputRow(headings,heading_count,e,name_map,ip_map,vm_map,type_map,state_map,scope_map));
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        state_map=sortHashMap(state_map);
        for (        String e : state_map.keySet()) {
          cf.addRow(this.generateOutputRow(headings,heading_count,e,name_map,ip_map,vm_map,type_map,state_map,scope_map));
        }
      }
 else       if (key.equals(""String_Node_Str"")) {
        scope_map=sortHashMap(scope_map);
        for (        String e : scope_map.keySet()) {
          cf.addRow(this.generateOutputRow(headings,heading_count,e,name_map,ip_map,vm_map,type_map,state_map,scope_map));
        }
      }
    }
    if (foundRows) {
      report.setMessage(cf.toString());
      extraProperties.put(""String_Node_Str"",cf.getContent());
    }
 else     if (header=true) {
      report.setMessage(""String_Node_Str"");
    }
  }
 else   if (header=true) {
    report.setMessage(""String_Node_Str"");
  }
  report.setExtraProperties(extraProperties);
  ActionReport.ExitCode ec=ActionReport.ExitCode.SUCCESS;
  report.setActionExitCode(ec);
}"
30282,"public IAASImpl(@Inject(optional=true) Virtualizations virtualizations,@Inject Transactions transactions,@Inject ServerEnvironment env,@Inject Services services){
  this.services=services;
  transactions.addListenerForType(ServerPoolConfig.class,this);
  if (virtualizations == null || env.isInstance())   return;
  for (  Virtualization virt : virtualizations.getVirtualizations()) {
    for (    ServerPoolConfig groupConfig : virt.getServerPools()) {
      try {
        ServerPool group=addServerPool(groupConfig);
        System.out.println(""String_Node_Str"" + group.getName());
        if (group instanceof PhysicalServerPool) {
          for (          Machine machine : ((PhysicalServerPool)group).machines()) {
            System.out.println(""String_Node_Str"" + machine.getName() + ""String_Node_Str""+ machine.getIpAddress()+ ""String_Node_Str""+ machine.getState());
            if (machine.getState().equals(Machine.State.READY)) {
              try {
                System.out.println(machine.toString());
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
            }
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}","public IAASImpl(@Inject(optional=true) Virtualizations virtualizations,@Inject Transactions transactions,@Inject ServerEnvironment env,@Inject final Services services){
  this.services=services;
  transactions.addListenerForType(Virtualization.class,this);
  if (virtualizations == null) {
    transactions.addListenerForType(Virtualizations.class,new ConfigListener(){
      @Override public UnprocessedChangeEvents changed(      PropertyChangeEvent[] propertyChangeEvents){
        Virtualizations virts=services.forContract(Virtualizations.class).get();
        for (        Virtualization virt : virts.getVirtualizations()) {
          processVirtualization(virt);
        }
        Dom.unwrap(virts).addListener(IAASImpl.this);
        return null;
      }
    }
);
  }
  if (virtualizations == null || env.isInstance())   return;
  for (  Virtualization virt : virtualizations.getVirtualizations()) {
    processVirtualization(virt);
  }
}"
30283,"private ServerPool addServerPool(ServerPoolConfig serverPoolConfig){
  ServerPoolFactory spf=services.forContract(ServerPoolFactory.class).named(serverPoolConfig.getVirtualization().getType()).get();
  if (spf == null) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + ServerPoolFactory.class.getName() + ""String_Node_Str""+ serverPoolConfig.getVirtualization().getType());
    throw new RuntimeException(""String_Node_Str"" + serverPoolConfig.getVirtualization().getType());
  }
  ServerPool serverPool=spf.build(serverPoolConfig);
synchronized (this) {
    groups.put(serverPoolConfig.getName(),serverPool);
  }
  return serverPool;
}","private ServerPool addServerPool(ServerPoolConfig serverPoolConfig){
  if (groups.containsKey(serverPoolConfig.getName())) {
    return groups.get(serverPoolConfig.getName());
  }
  ServerPoolFactory spf=services.forContract(ServerPoolFactory.class).named(serverPoolConfig.getVirtualization().getType()).get();
  if (spf == null) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + ServerPoolFactory.class.getName() + ""String_Node_Str""+ serverPoolConfig.getVirtualization().getType());
    throw new RuntimeException(""String_Node_Str"" + serverPoolConfig.getVirtualization().getType());
  }
  ServerPool serverPool=spf.build(serverPoolConfig);
synchronized (this) {
    groups.put(serverPoolConfig.getName(),serverPool);
  }
  return serverPool;
}"
30284,"@Override public UnprocessedChangeEvents changed(PropertyChangeEvent[] propertyChangeEvents){
  Virtualizations virtualizations=services.forContract(Virtualizations.class).get();
  for (  Virtualization virt : virtualizations.getVirtualizations()) {
    for (    ServerPoolConfig config : virt.getServerPools()) {
      if (!groups.containsKey(config.getName())) {
        addServerPool(config);
      }
    }
  }
  return null;
}","@Override public UnprocessedChangeEvents changed(PropertyChangeEvent[] propertyChangeEvents){
  for (  ServerPoolConfig serverPoolConfig : target.getServerPools()) {
    addServerPool(serverPoolConfig);
  }
  return null;
}"
30285,"public LocalServerPool(ServerPoolConfig config,LocalServerPoolFactory serverPoolFactory){
  this.config=config;
  this.serverPoolFactory=serverPoolFactory;
  if (serverPoolFactory.getDomain().getClusters() != null) {
    for (    Cluster cluster : serverPoolFactory.getDomain().getClusters().getCluster()) {
      for (      VirtualMachineConfig vmc : cluster.getExtensionsByType(VirtualMachineConfig.class)) {
        if (vmc.getServerPool().equals(config)) {
          vms.put(vmc.getName(),new LocalVirtualMachine(vmc,vmc.getTemplate().getUser(),this,null,vmc.getName()));
        }
      }
    }
  }
  vmId=new AtomicLong(vms.size());
}","public LocalServerPool(ServerPoolConfig config,LocalServerPoolFactory serverPoolFactory){
  this.config=config;
  this.serverPoolFactory=serverPoolFactory;
  if (serverPoolFactory.getDomain().getClusters() != null) {
    for (    Cluster cluster : serverPoolFactory.getDomain().getClusters().getCluster()) {
      for (      VirtualMachineConfig vmc : cluster.getExtensionsByType(VirtualMachineConfig.class)) {
        if (vmc.getServerPool().getName().equals(config.getName())) {
          vms.put(vmc.getName(),new LocalVirtualMachine(vmc,vmc.getTemplate().getUser(),this,null,vmc.getName()));
        }
      }
    }
  }
  vmId=new AtomicLong(vms.size());
}"
30286,"@Override public Iterable<GroupAccess> groups(){
  return groups.values();
}","@Override public Iterable<GroupAccess> groups(){
  final Iterator<ServerPool> pools=groupMgt.iterator();
  return new Iterable<GroupAccess>(){
    @Override public Iterator<GroupAccess> iterator(){
      return new Iterator<GroupAccess>(){
        @Override public boolean hasNext(){
          return pools.hasNext();
        }
        @Override public GroupAccess next(){
          return LocalGroupAccess.from(injector,pools.next());
        }
        @Override public void remove(){
          throw new RuntimeException(""String_Node_Str"");
        }
      }
;
    }
  }
;
}"
30287,"@Override public GroupAccess byName(String name){
  return groups.get(name);
}","@Override public GroupAccess byName(String name){
  ServerPool serverPool=groupMgt.byName(name);
  return LocalGroupAccess.from(injector,serverPool);
}"
30288,"public void dissociateServices(ProvisionedService serviceConsumer,ServiceReference svcRef,ProvisionedService serviceProvider,boolean beforeUndeploy,DeploymentContext dc){
  if (beforeUndeploy) {
    GlassFishProvisionedService gfps=(GlassFishProvisionedService)serviceConsumer;
    String serviceName=gfps.getServiceDescription().getName();
    String clusterName=gfServiceUtil.getClusterName(serviceName,gfps.getServiceDescription().getAppName());
    if (dc != null) {
      UndeployCommandParameters ucp=dc.getCommandParameters(UndeployCommandParameters.class);
      ucp.target=clusterName;
    }
  }
 else {
    if (svcRef.getServiceRefType().equals(""String_Node_Str"")) {
      GlassFishProvisionedService glassfishProvisionedService=(GlassFishProvisionedService)serviceConsumer;
      String serviceName=glassfishProvisionedService.getServiceDescription().getName();
      String clusterName=gfServiceUtil.getClusterName(serviceName,glassfishProvisionedService.getServiceDescription().getAppName());
      String poolName=svcRef.getServiceRefName();
      String resourceName=svcRef.getServiceRefName();
      String dasIPAddress=gfServiceUtil.getDASIPAddress(glassfishProvisionedService.getServiceDescription().getName());
      GlassFishProvisioner glassFishProvisioner=(GlassFishProvisioner)provisionerUtil.getAppServerProvisioner(dasIPAddress);
      glassFishProvisioner.deleteJdbcResource(dasIPAddress,clusterName,resourceName);
      glassFishProvisioner.deleteJdbcConnectionPool(dasIPAddress,poolName);
    }
  }
}","public void dissociateServices(ProvisionedService serviceConsumer,ServiceReference svcRef,ProvisionedService serviceProvider,boolean beforeUndeploy,DeploymentContext dc){
  if (beforeUndeploy) {
    GlassFishProvisionedService gfps=(GlassFishProvisionedService)serviceConsumer;
    String serviceName=gfps.getServiceDescription().getName();
    String clusterName=gfServiceUtil.getClusterName(serviceName,gfps.getServiceDescription().getAppName());
    if (dc != null) {
      UndeployCommandParameters ucp=dc.getCommandParameters(UndeployCommandParameters.class);
      ucp.target=clusterName;
    }
  }
 else {
    if (svcRef.getServiceRefType().equals(""String_Node_Str"") && serviceProvider.getServiceType().toString().equals(""String_Node_Str"") && serviceConsumer.getServiceType().toString().equals(""String_Node_Str"")) {
      GlassFishProvisionedService glassfishProvisionedService=(GlassFishProvisionedService)serviceConsumer;
      String serviceName=glassfishProvisionedService.getServiceDescription().getName();
      String clusterName=gfServiceUtil.getClusterName(serviceName,glassfishProvisionedService.getServiceDescription().getAppName());
      String poolName=svcRef.getServiceRefName();
      String resourceName=svcRef.getServiceRefName();
      String dasIPAddress=gfServiceUtil.getDASIPAddress(glassfishProvisionedService.getServiceDescription().getName());
      GlassFishProvisioner glassFishProvisioner=(GlassFishProvisioner)provisionerUtil.getAppServerProvisioner(dasIPAddress);
      glassFishProvisioner.deleteJdbcResource(dasIPAddress,clusterName,resourceName);
      glassFishProvisioner.deleteJdbcConnectionPool(dasIPAddress,poolName);
    }
  }
}"
30289,"/** 
 * @param serviceConsumer   Service that consumes the service provided by serviceProvider referred via service-reference
 * @param serviceProvider   Provisioned service like DB service or JMS service.
 * @param svcRef           Service Reference from GlassFish to that service.
 * @param beforeDeployment indicates if this association is happening before the
 */
public void associateServices(ProvisionedService serviceConsumer,ServiceReference svcRef,ProvisionedService serviceProvider,boolean beforeDeployment,DeploymentContext dc){
  if (svcRef.getServiceRefType().equals(""String_Node_Str"") && serviceProvider.getServiceType().toString().equals(""String_Node_Str"")) {
    if (!beforeDeployment)     return;
    ServiceDescription serviceDescription=serviceProvider.getServiceDescription();
    Properties dbProperties=new Properties();
    dbProperties.putAll(svcRef.getProperties());
    String serverName=serviceProvider.getServiceProperties().getProperty(""String_Node_Str"");
    String url=serviceProvider.getServiceProperties().getProperty(""String_Node_Str"");
    if (serverName != null) {
      dbProperties.setProperty(""String_Node_Str"",serverName);
    }
    if (url != null) {
      dbProperties.setProperty(""String_Node_Str"",url);
    }
    String serviceName=serviceConsumer.getServiceDescription().getName();
    String clusterName=gfServiceUtil.getClusterName(serviceName,serviceDescription.getAppName());
    String dasIPAddress=gfServiceUtil.getDASIPAddress(serviceConsumer.getServiceDescription().getName());
    String poolName=svcRef.getServiceRefName();
    String resourceName=svcRef.getServiceRefName();
    GlassFishProvisioner glassFishProvisioner=(GlassFishProvisioner)provisionerUtil.getAppServerProvisioner(dasIPAddress);
    glassFishProvisioner.createJdbcConnectionPool(dasIPAddress,clusterName,dbProperties,poolName);
    glassFishProvisioner.createJdbcResource(dasIPAddress,clusterName,poolName,resourceName);
  }
  if (svcRef.getServiceRefType().equals(""String_Node_Str"")) {
    String appServerServiceName=serviceConsumer.getServiceDescription().getName();
    String clusterName=gfServiceUtil.getClusterName(appServerServiceName,serviceConsumer.getServiceDescription().getAppName());
    String dasIPAddress=gfServiceUtil.getDASIPAddress(serviceConsumer.getServiceDescription().getName());
    ApplicationServerProvisioner appServerProvisioner=provisionerUtil.getAppServerProvisioner(dasIPAddress);
    String lbServiceName=serviceProvider.getServiceDescription().getName();
    String domainName=domain.getProperty(Domain.DOMAIN_NAME_PROPERTY).getValue();
    if (beforeDeployment) {
      LBProvisioner lbProvisioner=provisionerUtil.getLBProvisioner();
      String lbIPAddress=gfServiceUtil.getIPAddress(lbServiceName,serviceConsumer.getServiceDescription().getAppName(),ServiceType.LOAD_BALANCER);
      lbProvisioner.associateApplicationServerWithLB(lbIPAddress,dasIPAddress,domainName);
      lbProvisioner.stopLB(lbIPAddress);
      lbProvisioner.startLB(lbIPAddress);
      appServerProvisioner.associateLBWithApplicationServer(dasIPAddress,clusterName,lbIPAddress,lbServiceName);
    }
 else {
      appServerProvisioner.refreshLBConfiguration(dasIPAddress,lbServiceName);
    }
  }
  if (beforeDeployment) {
    GlassFishProvisionedService gfps=(GlassFishProvisionedService)serviceConsumer;
    String clusterServiceName=gfServiceUtil.getClusterName(serviceConsumer.getName(),gfps.getServiceDescription().getAppName());
    if (dc != null) {
      DeployCommandParameters ucp=dc.getCommandParameters(DeployCommandParameters.class);
      ucp.target=clusterServiceName;
    }
  }
}","/** 
 * @param serviceConsumer   Service that consumes the service provided by serviceProvider referred via service-reference
 * @param serviceProvider   Provisioned service like DB service or JMS service.
 * @param svcRef           Service Reference from GlassFish to that service.
 * @param beforeDeployment indicates if this association is happening before the
 */
public void associateServices(ProvisionedService serviceConsumer,ServiceReference svcRef,ProvisionedService serviceProvider,boolean beforeDeployment,DeploymentContext dc){
  if (svcRef.getServiceRefType().equals(""String_Node_Str"") && serviceProvider.getServiceType().toString().equals(""String_Node_Str"") && serviceConsumer.getServiceType().toString().equals(""String_Node_Str"")) {
    if (!beforeDeployment)     return;
    ServiceDescription serviceDescription=serviceProvider.getServiceDescription();
    Properties dbProperties=new Properties();
    dbProperties.putAll(svcRef.getProperties());
    String serverName=serviceProvider.getServiceProperties().getProperty(""String_Node_Str"");
    String url=serviceProvider.getServiceProperties().getProperty(""String_Node_Str"");
    if (serverName != null) {
      dbProperties.setProperty(""String_Node_Str"",serverName);
    }
    if (url != null) {
      dbProperties.setProperty(""String_Node_Str"",url);
    }
    String serviceName=serviceConsumer.getServiceDescription().getName();
    String clusterName=gfServiceUtil.getClusterName(serviceName,serviceDescription.getAppName());
    String dasIPAddress=gfServiceUtil.getDASIPAddress(serviceConsumer.getServiceDescription().getName());
    String poolName=svcRef.getServiceRefName();
    String resourceName=svcRef.getServiceRefName();
    GlassFishProvisioner glassFishProvisioner=(GlassFishProvisioner)provisionerUtil.getAppServerProvisioner(dasIPAddress);
    glassFishProvisioner.createJdbcConnectionPool(dasIPAddress,clusterName,dbProperties,poolName);
    glassFishProvisioner.createJdbcResource(dasIPAddress,clusterName,poolName,resourceName);
  }
  if (svcRef.getServiceRefType().equals(""String_Node_Str"")) {
    String appServerServiceName=serviceConsumer.getServiceDescription().getName();
    String clusterName=gfServiceUtil.getClusterName(appServerServiceName,serviceConsumer.getServiceDescription().getAppName());
    String dasIPAddress=gfServiceUtil.getDASIPAddress(serviceConsumer.getServiceDescription().getName());
    ApplicationServerProvisioner appServerProvisioner=provisionerUtil.getAppServerProvisioner(dasIPAddress);
    String lbServiceName=serviceProvider.getServiceDescription().getName();
    String domainName=domain.getProperty(Domain.DOMAIN_NAME_PROPERTY).getValue();
    if (beforeDeployment) {
      LBProvisioner lbProvisioner=provisionerUtil.getLBProvisioner();
      String lbIPAddress=gfServiceUtil.getIPAddress(lbServiceName,serviceConsumer.getServiceDescription().getAppName(),ServiceType.LOAD_BALANCER);
      lbProvisioner.associateApplicationServerWithLB(lbIPAddress,dasIPAddress,domainName);
      lbProvisioner.stopLB(lbIPAddress);
      lbProvisioner.startLB(lbIPAddress);
      appServerProvisioner.associateLBWithApplicationServer(dasIPAddress,clusterName,lbIPAddress,lbServiceName);
    }
 else {
      appServerProvisioner.refreshLBConfiguration(dasIPAddress,lbServiceName);
    }
  }
  if (beforeDeployment) {
    GlassFishProvisionedService gfps=(GlassFishProvisionedService)serviceConsumer;
    String clusterServiceName=gfServiceUtil.getClusterName(serviceConsumer.getName(),gfps.getServiceDescription().getAppName());
    if (dc != null) {
      DeployCommandParameters ucp=dc.getCommandParameters(DeployCommandParameters.class);
      ucp.target=clusterServiceName;
    }
  }
}"
30290,"@Test public void testEmptySubContext(){
  try {
    String name1=""String_Node_Str"";
    Context ctx=newInitialContext();
    ctx.bind(name1,""String_Node_Str"");
    String val=(String)ctx.lookup(name1);
    assert(false);
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    assert(true);
  }
 finally {
  }
}","@Test(expected=Exception.class) public void testEmptySubContext() throws Exception {
  String name1=""String_Node_Str"";
  Context ctx=newInitialContext();
  ctx.bind(name1,""String_Node_Str"");
  String val=(String)ctx.lookup(name1);
}"
30291,"private void testEmptyJavaCompEnv(){
  GlassfishNamingManagerImpl nm=null;
  InvocationManager im=new InvocationManagerImpl();
  ComponentInvocation inv=null;
  try {
    InitialContext ic=newInitialContext();
    nm=new GlassfishNamingManagerImpl(ic);
    nm.setInvocationManager(im);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,new ArrayList<Binding>());
    Context ctx=(Context)ic.lookup(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + ctx);
  }
 catch (  javax.naming.NamingException nnfEx) {
    nnfEx.printStackTrace();
    assert(false);
  }
}","@Test public void testEmptyJavaCompEnv(){
  GlassfishNamingManagerImpl nm=null;
  InvocationManager im=new InvocationManagerImpl();
  ComponentInvocation inv=null;
  try {
    InitialContext ic=newInitialContext();
    triggerLoadingNamedProxies(ic);
    nm=new GlassfishNamingManagerImpl(ic);
    nm.setInvocationManager(im);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,new ArrayList<Binding>());
    Context ctx=(Context)ic.lookup(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + ctx);
  }
 catch (  javax.naming.NamingException nnfEx) {
    nnfEx.printStackTrace();
    assert(false);
  }
}"
30292,"@Test public void testNonCachingNamingObjectFactory(){
  GlassfishNamingManagerImpl nm=null;
  InvocationManager im=new InvocationManagerImpl();
  ComponentInvocation inv=null;
  try {
    InitialContext ic=newInitialContext();
    nm=new GlassfishNamingManagerImpl(ic);
    nm.setInvocationManager(im);
    List<Binding> bindings=new ArrayList<Binding>();
    NamingObjectFactory intFactory=new NamingObjectFactory(){
      private int counter=1;
      public boolean isCreateResultCacheable(){
        return false;
      }
      public Object create(      Context ic){
        return new Integer(++counter);
      }
      public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    bindings.add(new Binding(""String_Node_Str"",intFactory));
    bindings.add(new Binding(""String_Node_Str"",""String_Node_Str""));
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,bindings);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    NamingObjectFactory floatFactory=new NamingObjectFactory(){
      private int counter=1;
      public boolean isCreateResultCacheable(){
        return false;
      }
      public Object create(      Context ic){
        return Float.valueOf((""String_Node_Str"" + (++counter)) + ""String_Node_Str"" + 2323);
      }
      public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    List<Binding> bindings2=new ArrayList<Binding>();
    bindings2.add(new Binding(""String_Node_Str"",floatFactory));
    bindings2.add(new Binding(""String_Node_Str"",""String_Node_Str""));
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,bindings2);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    assert(true);
  }
 catch (  InvocationException inEx) {
    inEx.printStackTrace();
    assert(false);
  }
catch (  Exception ex) {
    ex.printStackTrace();
    assert(false);
  }
 finally {
    try {
      im.postInvoke(inv);
      nm.unbindComponentObjects(""String_Node_Str"");
    }
 catch (    InvocationException inEx) {
    }
catch (    Exception ex) {
    }
  }
}","@Test public void testNonCachingNamingObjectFactory(){
  GlassfishNamingManagerImpl nm=null;
  InvocationManager im=new InvocationManagerImpl();
  ComponentInvocation inv=null;
  try {
    InitialContext ic=newInitialContext();
    triggerLoadingNamedProxies(ic);
    nm=new GlassfishNamingManagerImpl(ic);
    nm.setInvocationManager(im);
    List<Binding> bindings=new ArrayList<Binding>();
    NamingObjectFactory intFactory=new NamingObjectFactory(){
      private int counter=1;
      public boolean isCreateResultCacheable(){
        return false;
      }
      public Object create(      Context ic){
        return new Integer(++counter);
      }
      public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    bindings.add(new Binding(""String_Node_Str"",intFactory));
    bindings.add(new Binding(""String_Node_Str"",""String_Node_Str""));
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,bindings);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    NamingObjectFactory floatFactory=new NamingObjectFactory(){
      private int counter=1;
      public boolean isCreateResultCacheable(){
        return false;
      }
      public Object create(      Context ic){
        return Float.valueOf((""String_Node_Str"" + (++counter)) + ""String_Node_Str"" + 2323);
      }
      public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    List<Binding> bindings2=new ArrayList<Binding>();
    bindings2.add(new Binding(""String_Node_Str"",floatFactory));
    bindings2.add(new Binding(""String_Node_Str"",""String_Node_Str""));
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,bindings2);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    assert(true);
  }
 catch (  InvocationException inEx) {
    inEx.printStackTrace();
    assert(false);
  }
catch (  Exception ex) {
    ex.printStackTrace();
    assert(false);
  }
 finally {
    try {
      im.postInvoke(inv);
      nm.unbindComponentObjects(""String_Node_Str"");
    }
 catch (    InvocationException inEx) {
    }
catch (    Exception ex) {
    }
  }
}"
30293,"public void testBind(){
  GlassfishNamingManager nm=null;
  try {
    InvocationManager im=new InvocationManagerImpl();
    InitialContext ic=newInitialContext();
    nm=new GlassfishNamingManagerImpl(ic);
    nm.publishObject(""String_Node_Str"",""String_Node_Str"",false);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    assert(true);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    assert(false);
  }
 finally {
    try {
      nm.unpublishObject(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
  }
}","@Test public void testBind(){
  GlassfishNamingManager nm=null;
  try {
    InvocationManager im=new InvocationManagerImpl();
    InitialContext ic=newInitialContext();
    nm=new GlassfishNamingManagerImpl(ic);
    nm.publishObject(""String_Node_Str"",""String_Node_Str"",false);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    assert(true);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    assert(false);
  }
 finally {
    try {
      nm.unpublishObject(""String_Node_Str"");
    }
 catch (    Exception ex) {
    }
  }
}"
30294,"public void testCreateNewInitialContext(){
  try {
    newInitialContext();
    assert(true);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    assert(false);
  }
}","@Test public void testCreateNewInitialContext(){
  try {
    newInitialContext();
    assert(true);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    assert(false);
  }
}"
30295,"public void testEmptySubContext(){
  try {
    String name1=""String_Node_Str"";
    Context ctx=newInitialContext();
    ctx.bind(name1,""String_Node_Str"");
    String val=(String)ctx.lookup(name1);
    assert(false);
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    assert(true);
  }
 finally {
  }
}","@Test public void testEmptySubContext(){
  try {
    String name1=""String_Node_Str"";
    Context ctx=newInitialContext();
    ctx.bind(name1,""String_Node_Str"");
    String val=(String)ctx.lookup(name1);
    assert(false);
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    assert(true);
  }
 finally {
  }
}"
30296,"public void testEmptyJavaCompEnv(){
  GlassfishNamingManagerImpl nm=null;
  InvocationManager im=new InvocationManagerImpl();
  ComponentInvocation inv=null;
  try {
    InitialContext ic=newInitialContext();
    nm=new GlassfishNamingManagerImpl(ic);
    nm.setInvocationManager(im);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,new ArrayList<Binding>());
    Context ctx=(Context)ic.lookup(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + ctx);
    assert(true);
  }
 catch (  javax.naming.NamingException nnfEx) {
    nnfEx.printStackTrace();
    assert(false);
  }
}","private void testEmptyJavaCompEnv(){
  GlassfishNamingManagerImpl nm=null;
  InvocationManager im=new InvocationManagerImpl();
  ComponentInvocation inv=null;
  try {
    InitialContext ic=newInitialContext();
    nm=new GlassfishNamingManagerImpl(ic);
    nm.setInvocationManager(im);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,new ArrayList<Binding>());
    Context ctx=(Context)ic.lookup(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + ctx);
  }
 catch (  javax.naming.NamingException nnfEx) {
    nnfEx.printStackTrace();
    assert(false);
  }
}"
30297,"public void testNonCachingNamingObjectFactory(){
  GlassfishNamingManagerImpl nm=null;
  InvocationManager im=new InvocationManagerImpl();
  ComponentInvocation inv=null;
  try {
    InitialContext ic=newInitialContext();
    nm=new GlassfishNamingManagerImpl(ic);
    nm.setInvocationManager(im);
    List<Binding> bindings=new ArrayList<Binding>();
    NamingObjectFactory intFactory=new NamingObjectFactory(){
      private int counter=1;
      public boolean isCreateResultCacheable(){
        return false;
      }
      public Object create(      Context ic){
        return new Integer(++counter);
      }
      public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    bindings.add(new Binding(""String_Node_Str"",intFactory));
    bindings.add(new Binding(""String_Node_Str"",""String_Node_Str""));
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,bindings);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    NamingObjectFactory floatFactory=new NamingObjectFactory(){
      private int counter=1;
      public boolean isCreateResultCacheable(){
        return false;
      }
      public Object create(      Context ic){
        return Float.valueOf((""String_Node_Str"" + (++counter)) + ""String_Node_Str"" + 2323);
      }
      public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    List<Binding> bindings2=new ArrayList<Binding>();
    bindings2.add(new Binding(""String_Node_Str"",floatFactory));
    bindings2.add(new Binding(""String_Node_Str"",""String_Node_Str""));
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,bindings2);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    assert(true);
  }
 catch (  InvocationException inEx) {
    inEx.printStackTrace();
    assert(false);
  }
catch (  Exception ex) {
    ex.printStackTrace();
    assert(false);
  }
 finally {
    try {
      im.postInvoke(inv);
      nm.unbindComponentObjects(""String_Node_Str"");
    }
 catch (    InvocationException inEx) {
    }
catch (    Exception ex) {
    }
  }
}","@Test public void testNonCachingNamingObjectFactory(){
  GlassfishNamingManagerImpl nm=null;
  InvocationManager im=new InvocationManagerImpl();
  ComponentInvocation inv=null;
  try {
    InitialContext ic=newInitialContext();
    nm=new GlassfishNamingManagerImpl(ic);
    nm.setInvocationManager(im);
    List<Binding> bindings=new ArrayList<Binding>();
    NamingObjectFactory intFactory=new NamingObjectFactory(){
      private int counter=1;
      public boolean isCreateResultCacheable(){
        return false;
      }
      public Object create(      Context ic){
        return new Integer(++counter);
      }
      public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    bindings.add(new Binding(""String_Node_Str"",intFactory));
    bindings.add(new Binding(""String_Node_Str"",""String_Node_Str""));
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,bindings);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    NamingObjectFactory floatFactory=new NamingObjectFactory(){
      private int counter=1;
      public boolean isCreateResultCacheable(){
        return false;
      }
      public Object create(      Context ic){
        return Float.valueOf((""String_Node_Str"" + (++counter)) + ""String_Node_Str"" + 2323);
      }
      public String toString(){
        return ""String_Node_Str"";
      }
    }
;
    List<Binding> bindings2=new ArrayList<Binding>();
    bindings2.add(new Binding(""String_Node_Str"",floatFactory));
    bindings2.add(new Binding(""String_Node_Str"",""String_Node_Str""));
    nm.bindToComponentNamespace(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,bindings2);
    inv=new ComponentInvocation(""String_Node_Str"",ComponentInvocation.ComponentInvocationType.EJB_INVOCATION,null,null,null);
    im.preInvoke(inv);
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    System.out.println(""String_Node_Str"" + ic.lookup(""String_Node_Str""));
    assert(true);
  }
 catch (  InvocationException inEx) {
    inEx.printStackTrace();
    assert(false);
  }
catch (  Exception ex) {
    ex.printStackTrace();
    assert(false);
  }
 finally {
    try {
      im.postInvoke(inv);
      nm.unbindComponentObjects(""String_Node_Str"");
    }
 catch (    InvocationException inEx) {
    }
catch (    Exception ex) {
    }
  }
}"
30298,"public void registerEndpoint(WebServiceEndpoint webserviceEndpoint,EjbEndpointFacade ejbContainer,Object servant,Class tieClass){
  String ctxtRoot=null;
  EjbRuntimeEndpointInfo endpoint=createEjbEndpointInfo(webserviceEndpoint,ejbContainer,servant,tieClass);
synchronized (webServiceEjbEndpoints) {
    String uriRaw=endpoint.getEndpointAddressUri();
    if (uriRaw != null) {
      String uri=(uriRaw.charAt(0) == '/') ? uriRaw.substring(1) : uriRaw;
      if (webServiceEjbEndpoints.containsKey(uri)) {
        logger.log(Level.SEVERE,format(rb.getString(""String_Node_Str""),uri));
      }
      webServiceEjbEndpoints.put(uri,endpoint);
      regenerateEjbContextRoots();
      ctxtRoot=getContextRootForUri(uri);
      if (adapterListMap.get(ctxtRoot) == null) {
        ServletAdapterList list=new ServletAdapterList();
        adapterListMap.put(ctxtRoot,list);
      }
    }
 else     throw new WebServiceException(rb.getString(""String_Node_Str""));
  }
  WebServiceEngineImpl engine=WebServiceEngineImpl.getInstance();
  if (endpoint.getEndpoint().getWebService().getMappingFileUri() != null) {
    engine.createHandler((com.sun.xml.rpc.spi.runtime.SystemHandlerDelegate)null,endpoint.getEndpoint());
  }
 else {
    engine.createHandler(endpoint.getEndpoint());
    try {
      endpoint.initRuntimeInfo((ServletAdapterList)adapterListMap.get(ctxtRoot));
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}","public void registerEndpoint(WebServiceEndpoint webserviceEndpoint,EjbEndpointFacade ejbContainer,Object servant,Class tieClass){
  String ctxtRoot=null;
  String uri=null;
  EjbRuntimeEndpointInfo endpoint=createEjbEndpointInfo(webserviceEndpoint,ejbContainer,servant,tieClass);
synchronized (webServiceEjbEndpoints) {
    String uriRaw=endpoint.getEndpointAddressUri();
    if (uriRaw != null) {
      uri=(uriRaw.charAt(0) == '/') ? uriRaw.substring(1) : uriRaw;
      if (webServiceEjbEndpoints.containsKey(uri)) {
        logger.log(Level.SEVERE,format(rb.getString(""String_Node_Str""),uri));
      }
      webServiceEjbEndpoints.put(uri,endpoint);
      regenerateEjbContextRoots();
      ctxtRoot=getContextRootForUri(uri);
      if (adapterListMap.get(uri) == null) {
        ServletAdapterList list=new ServletAdapterList();
        adapterListMap.put(uri,list);
      }
    }
 else     throw new WebServiceException(rb.getString(""String_Node_Str""));
  }
  WebServiceEngineImpl engine=WebServiceEngineImpl.getInstance();
  if (endpoint.getEndpoint().getWebService().getMappingFileUri() != null) {
    engine.createHandler((com.sun.xml.rpc.spi.runtime.SystemHandlerDelegate)null,endpoint.getEndpoint());
  }
 else {
    engine.createHandler(endpoint.getEndpoint());
    try {
      endpoint.initRuntimeInfo((ServletAdapterList)adapterListMap.get(uri));
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}"
30299,"public void unregisterEndpoint(String endpointAddressUri){
  EjbRuntimeEndpointInfo endpoint=null;
synchronized (webServiceEjbEndpoints) {
    String uriRaw=endpointAddressUri;
    String uri=(uriRaw.charAt(0) == '/') ? uriRaw.substring(1) : uriRaw;
    String ctxtRoot=getContextRootForUri(uri);
    ServletAdapterList list=(ServletAdapterList)adapterListMap.get(ctxtRoot);
    if (list != null) {
      Iterator<ServletAdapter> it=list.iterator();
      while (it.hasNext()) {
        ServletAdapter x=it.next();
        if (endpointAddressUri.equalsIgnoreCase(x.urlPattern)) {
          x.getEndpoint().dispose();
          it.remove();
        }
      }
      if (list.isEmpty()) {
        adapterListMap.remove(ctxtRoot);
      }
    }
    endpoint=(EjbRuntimeEndpointInfo)webServiceEjbEndpoints.remove(uri);
    regenerateEjbContextRoots();
  }
  if (endpoint == null) {
    return;
  }
  WebServiceEngineImpl engine=WebServiceEngineImpl.getInstance();
  engine.removeHandler(endpoint.getEndpoint());
}","public void unregisterEndpoint(String endpointAddressUri){
  EjbRuntimeEndpointInfo endpoint=null;
synchronized (webServiceEjbEndpoints) {
    String uriRaw=endpointAddressUri;
    String uri=(uriRaw.charAt(0) == '/') ? uriRaw.substring(1) : uriRaw;
    ServletAdapterList list=(ServletAdapterList)adapterListMap.get(uri);
    if (list != null) {
      for (      ServletAdapter x : list) {
        x.getEndpoint().dispose();
      }
      adapterListMap.remove(uri);
    }
    endpoint=(EjbRuntimeEndpointInfo)webServiceEjbEndpoints.remove(uri);
    regenerateEjbContextRoots();
  }
  if (endpoint == null) {
    return;
  }
  WebServiceEngineImpl engine=WebServiceEngineImpl.getInstance();
  engine.removeHandler(endpoint.getEndpoint());
}"
30300,"private static Properties getVersionProp(){
  String installRoot=System.getProperty(INSTALL_ROOT_PROP_NAME);
  if (installRoot != null) {
    File ir=new File(installRoot);
    File bd=new File(new File(ir,""String_Node_Str""),""String_Node_Str"");
    if (bd.isDirectory()) {
      for (      File f : bd.listFiles(new FileFilter(){
        @Override public boolean accept(        File f){
          return f.getName().endsWith(""String_Node_Str"") && f.canRead();
        }
      }
)) {
        try {
          FileReader fr=new FileReader(f);
          Properties p=new Properties();
          p.load(fr);
          versionProps.add(p);
          fr.close();
        }
 catch (        IOException ex) {
        }
      }
    }
    Collections.sort(versionProps,new Comparator<Properties>(){
      @Override public int compare(      Properties p1,      Properties p2){
        String abp1=p1.getProperty(ABBREV_PRODUCT_NAME_KEY);
        String bo1=p1.getProperty(BASED_ON_KEY);
        String abp2=p2.getProperty(ABBREV_PRODUCT_NAME_KEY);
        String bo2=p2.getProperty(BASED_ON_KEY);
        if (bo1 != null && abp2 != null && bo1.contains(abp2)) {
          return -1;
        }
        if (bo2 != null && abp1 != null && bo2.contains(abp1)) {
          return 1;
        }
        return 0;
      }
    }
);
    if (versionProps.size() > 0) {
      return versionProps.get(0);
    }
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  return null;
}","private static Properties getVersionProp(){
  String installRoot=System.getProperty(INSTALL_ROOT_PROP_NAME);
  if (installRoot != null) {
    File ir=new File(installRoot);
    File bd=new File(new File(ir,""String_Node_Str""),""String_Node_Str"");
    if (bd.isDirectory()) {
      for (      File f : bd.listFiles(new FileFilter(){
        @Override public boolean accept(        File f){
          return f.getName().endsWith(""String_Node_Str"") && f.canRead();
        }
      }
)) {
        FileReader fr=null;
        try {
          fr=new FileReader(f);
          Properties p=new Properties();
          p.load(fr);
          versionProps.add(p);
          fr.close();
        }
 catch (        IOException ex) {
        }
 finally {
          if (fr != null) {
            try {
              fr.close();
            }
 catch (            IOException ex) {
            }
          }
        }
      }
    }
    Collections.sort(versionProps,new Comparator<Properties>(){
      @Override public int compare(      Properties p1,      Properties p2){
        String abp1=p1.getProperty(ABBREV_PRODUCT_NAME_KEY);
        String bo1=p1.getProperty(BASED_ON_KEY);
        String abp2=p2.getProperty(ABBREV_PRODUCT_NAME_KEY);
        String bo2=p2.getProperty(BASED_ON_KEY);
        if (bo1 != null && abp2 != null && bo1.contains(abp2)) {
          return -1;
        }
        if (bo2 != null && abp1 != null && bo2.contains(abp1)) {
          return 1;
        }
        return 0;
      }
    }
);
    if (versionProps.size() > 0) {
      return versionProps.get(0);
    }
  }
 else {
    System.out.println(""String_Node_Str"");
  }
  return null;
}"
30301,"/** 
 * Return major_version [. minor_version [. update_version]]
 */
public static String getVersionNumber(){
  String maj=getMajorVersion();
  String min=getMinorVersion();
  String upd=getUpdateVersion();
  String v;
  try {
    if (min != null & min.length() > 0 && Integer.parseInt(min) >= 0) {
      if (upd != null && upd.length() > 0 && Integer.parseInt(upd) >= 0) {
        v=maj + ""String_Node_Str"" + min+ ""String_Node_Str""+ upd;
      }
 else {
        v=maj + ""String_Node_Str"" + min;
      }
    }
 else {
      if (upd != null && upd.length() > 0 && Integer.parseInt(upd) >= 0) {
        v=maj + ""String_Node_Str"" + upd;
      }
 else {
        v=maj;
      }
    }
  }
 catch (  NumberFormatException nfe) {
    v=maj;
  }
  return v;
}","/** 
 * Return major_version [. minor_version [. update_version]]
 */
public static String getVersionNumber(){
  String maj=getMajorVersion();
  String min=getMinorVersion();
  String upd=getUpdateVersion();
  String v;
  try {
    if (min != null && min.length() > 0 && Integer.parseInt(min) >= 0) {
      if (upd != null && upd.length() > 0 && Integer.parseInt(upd) >= 0) {
        v=maj + ""String_Node_Str"" + min+ ""String_Node_Str""+ upd;
      }
 else {
        v=maj + ""String_Node_Str"" + min;
      }
    }
 else {
      if (upd != null && upd.length() > 0 && Integer.parseInt(upd) >= 0) {
        v=maj + ""String_Node_Str"" + upd;
      }
 else {
        v=maj;
      }
    }
  }
 catch (  NumberFormatException nfe) {
    v=maj;
  }
  return v;
}"
30302,"/** 
 * Returns the name of the command associated with this resource,if any, for the given operation.
 * @param type the given resource operation
 * @return String the associated command name for the given operation.
 */
public static String getCommand(RestRedirect.OpType type,ConfigModel model){
  Class<? extends ConfigBeanProxy> cbp=null;
  try {
    cbp=(Class<? extends ConfigBeanProxy>)model.classLoaderHolder.get().loadClass(model.targetTypeName);
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  RestRedirects restRedirects=cbp.getAnnotation(RestRedirects.class);
  if (restRedirects != null) {
    RestRedirect[] values=restRedirects.value();
    for (    RestRedirect r : values) {
      if (r.opType().equals(type)) {
        return r.commandName();
      }
    }
  }
  return null;
}","/** 
 * Returns the name of the command associated with this resource,if any, for the given operation.
 * @param type the given resource operation
 * @return String the associated command name for the given operation.
 */
public static String getCommand(RestRedirect.OpType type,ConfigModel model){
  Class<? extends ConfigBeanProxy> cbp=null;
  try {
    cbp=(Class<? extends ConfigBeanProxy>)model.classLoaderHolder.get().loadClass(model.targetTypeName);
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  if (cbp != null) {
    RestRedirects restRedirects=cbp.getAnnotation(RestRedirects.class);
    if (restRedirects != null) {
      RestRedirect[] values=restRedirects.value();
      for (      RestRedirect r : values) {
        if (r.opType().equals(type)) {
          return r.commandName();
        }
      }
    }
  }
  return null;
}"
30303,"public static RestConfig getRestConfig(Habitat habitat){
  if (restConfig == null) {
    if (habitat == null) {
      return null;
    }
    Domain domain=habitat.getComponent(Domain.class);
    if (domain != null) {
      Config config=domain.getConfigNamed(""String_Node_Str"");
      if (config != null) {
        restConfig=config.getExtensionByType(RestConfig.class);
      }
    }
  }
  return restConfig;
}","public static synchronized RestConfig getRestConfig(Habitat habitat){
  if (restConfig == null) {
    if (habitat == null) {
      return null;
    }
    Domain domain=habitat.getComponent(Domain.class);
    if (domain != null) {
      Config config=domain.getConfigNamed(""String_Node_Str"");
      if (config != null) {
        restConfig=config.getExtensionByType(RestConfig.class);
      }
    }
  }
  return restConfig;
}"
30304,"/** 
 * @return true if the session has not timed out. false otherwise
 */
public boolean isSessionActive(){
  long inactiveSessionLifeTime=30 * 60 * 1000;
  RestConfig restConfig=ResourceUtil.getRestConfig(habitat);
  if (restConfig != null) {
    inactiveSessionLifeTime=Integer.parseInt(restConfig.getSessionTokenTimeout()) * 60000;
  }
  return lastAccessedTime + inactiveSessionLifeTime > System.currentTimeMillis();
}","/** 
 * @return true if the session has not timed out. false otherwise
 */
public boolean isSessionActive(){
  long inactiveSessionLifeTime=30 * 60 * 1000;
  RestConfig restConfig=ResourceUtil.getRestConfig(habitat);
  if (restConfig != null) {
    inactiveSessionLifeTime=Integer.parseInt(restConfig.getSessionTokenTimeout()) * 60000L;
  }
  return lastAccessedTime + inactiveSessionLifeTime > System.currentTimeMillis();
}"
30305,"/** 
 * Returns the html for the given message.
 * @param uriInfo the uriInfo context of the request
 * @return String the html representation of the given message
 */
protected static String getHtml(String message,UriInfo uriInfo,boolean delete){
  String result=ProviderUtil.getHtmlHeader(uriInfo.getBaseUri().toASCIIString());
  String uri=uriInfo.getAbsolutePath().toString();
  if (delete) {
    uri=uri + ""String_Node_Str"";
  }
  String name=upperCaseFirstLetter(eleminateHypen(getName(uri,'/')));
  String parentName=upperCaseFirstLetter(eleminateHypen(getParentName(uri)));
  result=result + ""String_Node_Str"" + name+ ""String_Node_Str"";
  result=result + message;
  result=result + ""String_Node_Str"" + uri+ ""String_Node_Str"";
  result=result + ""String_Node_Str"";
  return result;
}","/** 
 * Returns the html for the given message.
 * @param uriInfo the uriInfo context of the request
 * @return String the html representation of the given message
 */
protected static String getHtml(String message,UriInfo uriInfo,boolean delete){
  String result=ProviderUtil.getHtmlHeader(uriInfo.getBaseUri().toASCIIString());
  String uri=uriInfo.getAbsolutePath().toString();
  if (delete) {
    uri=uri + ""String_Node_Str"";
  }
  String name=upperCaseFirstLetter(eleminateHypen(getName(uri,'/')));
  result=result + ""String_Node_Str"" + name+ ""String_Node_Str"";
  result=result + message;
  result=result + ""String_Node_Str"" + uri+ ""String_Node_Str"";
  result=result + ""String_Node_Str"";
  return result;
}"
30306,"private void exposeContext() throws EndpointRegistrationException {
  String context=getContextRoot();
  logger.log(Level.FINE,""String_Node_Str"",context);
  if ((context != null) || (!""String_Node_Str"".equals(context))) {
    Set<Class<?>> classes=getResourcesConfig();
    adapter=lazyJerseyInterface.exposeContext(classes,sc,habitat);
    logger.log(Level.INFO,""String_Node_Str"",context);
  }
}","private void exposeContext() throws EndpointRegistrationException {
  String context=getContextRoot();
  logger.log(Level.FINE,""String_Node_Str"",context);
  if ((context != null) && (!""String_Node_Str"".equals(context))) {
    Set<Class<?>> classes=getResourcesConfig();
    adapter=lazyJerseyInterface.exposeContext(classes,sc,habitat);
    logger.log(Level.INFO,""String_Node_Str"",context);
  }
}"
30307,"private void debug(String clsName,byte[] classData){
  clsName=clsName.replace('.','/');
  clsName=clsName.replace('\\','/');
  int index=clsName.lastIndexOf(""String_Node_Str"");
  if (index >= 0) {
    clsName=clsName.substring(index + 1);
  }
  try {
    String rootPath=System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY) + File.separator + ""String_Node_Str""+ File.separator;
    String fileName=rootPath + clsName + ""String_Node_Str"";
    File file=new File(fileName);
    file.getParentFile().mkdirs();
    FileOutputStream fos=new FileOutputStream(file);
    fos.write(classData);
    fos.flush();
    fos.close();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","private void debug(String clsName,byte[] classData){
  clsName=clsName.replace('.','/');
  clsName=clsName.replace('\\','/');
  int index=clsName.lastIndexOf(""String_Node_Str"");
  if (index >= 0) {
    clsName=clsName.substring(index + 1);
  }
  FileOutputStream fos=null;
  try {
    String rootPath=System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY) + File.separator + ""String_Node_Str""+ File.separator;
    String fileName=rootPath + clsName + ""String_Node_Str"";
    File file=new File(fileName);
    if (file.getParentFile().mkdirs()) {
      fos=new FileOutputStream(file);
      fos.write(classData);
      fos.flush();
    }
 else {
      Logger.getLogger(ASMClassWriter.class.getName()).log(Level.INFO,null,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    if (fos != null) {
      try {
        fos.close();
      }
 catch (      IOException ex) {
        Logger.getLogger(ASMClassWriter.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
}"
30308,"public String defineClass(Class similarClass) throws Exception {
  String generatedClassName=""String_Node_Str"";
  generatedClassName=generatedClassName + className;
  byte[] byteContent=getByteClass();
  ProtectionDomain pd=similarClass.getProtectionDomain();
  java.lang.reflect.Method jm=null;
  for (  java.lang.reflect.Method jm2 : ClassLoader.class.getDeclaredMethods()) {
    if (jm2.getName().equals(""String_Node_Str"") && jm2.getParameterTypes().length == 5) {
      jm=jm2;
      break;
    }
  }
  if (jm == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  final java.lang.reflect.Method clM=jm;
  try {
    java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction(){
      public java.lang.Object run() throws Exception {
        if (!clM.isAccessible()) {
          clM.setAccessible(true);
        }
        return null;
      }
    }
);
    clM.invoke(similarClass.getClassLoader(),generatedClassName,byteContent,0,byteContent.length,pd);
    Class c=null;
    try {
      c=similarClass.getClassLoader().loadClass(generatedClassName);
    }
 catch (    ClassNotFoundException cnfEx) {
      throw new RuntimeException(cnfEx);
    }
    return generatedClassName;
  }
 catch (  PrivilegedActionException pEx) {
    throw new RuntimeException(pEx);
  }
catch (  IllegalAccessException illegalAccessException) {
    throw new RuntimeException(illegalAccessException);
  }
catch (  InvocationTargetException invtEx) {
    throw new RuntimeException(invtEx);
  }
}","public String defineClass(Class similarClass) throws Exception {
  String generatedClassName=""String_Node_Str"";
  generatedClassName=generatedClassName + className;
  byte[] byteContent=getByteClass();
  ProtectionDomain pd=similarClass.getProtectionDomain();
  java.lang.reflect.Method jm=null;
  for (  java.lang.reflect.Method jm2 : ClassLoader.class.getDeclaredMethods()) {
    if (jm2.getName().equals(""String_Node_Str"") && jm2.getParameterTypes().length == 5) {
      jm=jm2;
      break;
    }
  }
  if (jm == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  final java.lang.reflect.Method clM=jm;
  try {
    java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction(){
      public java.lang.Object run() throws Exception {
        if (!clM.isAccessible()) {
          clM.setAccessible(true);
        }
        return null;
      }
    }
);
    clM.invoke(similarClass.getClassLoader(),generatedClassName,byteContent,0,byteContent.length,pd);
    try {
      similarClass.getClassLoader().loadClass(generatedClassName);
    }
 catch (    ClassNotFoundException cnfEx) {
      throw new RuntimeException(cnfEx);
    }
    return generatedClassName;
  }
 catch (  PrivilegedActionException pEx) {
    throw new RuntimeException(pEx);
  }
catch (  IllegalAccessException illegalAccessException) {
    throw new RuntimeException(illegalAccessException);
  }
catch (  InvocationTargetException invtEx) {
    throw new RuntimeException(invtEx);
  }
}"
30309,"/** 
 * @param elementName
 * @return bean name for the given element name. The name is derived by uppercasing first letter of elementName,eliminating hyphens from elementName and uppercasing letter followed by hyphen
 */
public static String getBeanName(String elementName){
  String ret=""String_Node_Str"";
  boolean nextisUpper=true;
  for (int i=0; i < elementName.length(); i++) {
    if (nextisUpper == true) {
      ret=ret + elementName.substring(i,i + 1).toUpperCase(Locale.US);
      nextisUpper=false;
    }
 else {
      if (elementName.charAt(i) == '-') {
        nextisUpper=true;
      }
 else {
        nextisUpper=false;
        ret=ret + elementName.substring(i,i + 1);
      }
    }
  }
  return ret;
}","/** 
 * @param elementName
 * @return bean name for the given element name. The name is derived by uppercasing first letter of elementName,eliminating hyphens from elementName and uppercasing letter followed by hyphen
 */
public static String getBeanName(String elementName){
  StringBuilder ret=new StringBuilder();
  boolean nextisUpper=true;
  for (int i=0; i < elementName.length(); i++) {
    if (nextisUpper == true) {
      ret.append(elementName.substring(i,i + 1).toUpperCase(Locale.US));
      nextisUpper=false;
    }
 else {
      if (elementName.charAt(i) == '-') {
        nextisUpper=true;
      }
 else {
        nextisUpper=false;
        ret.append(elementName.substring(i,i + 1));
      }
    }
  }
  return ret.toString();
}"
30310,"private boolean hasSingletonAnnotation(ConfigModel model){
  Class<? extends ConfigBeanProxy> cbp=null;
  try {
    cbp=(Class<? extends ConfigBeanProxy>)model.classLoaderHolder.get().loadClass(model.targetTypeName);
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  org.glassfish.config.support.Singleton sing=cbp.getAnnotation(org.glassfish.config.support.Singleton.class);
  return (sing != null);
}","private boolean hasSingletonAnnotation(ConfigModel model){
  Class<? extends ConfigBeanProxy> cbp=null;
  try {
    cbp=(Class<? extends ConfigBeanProxy>)model.classLoaderHolder.get().loadClass(model.targetTypeName);
    if (cbp != null) {
      org.glassfish.config.support.Singleton sing=cbp.getAnnotation(org.glassfish.config.support.Singleton.class);
      return (sing != null);
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  return false;
}"
30311,"/** 
 * @param className Name of class to be generated
 * @param generationDir Absolute location where it needs to be generated
 * @param baseClassName
 * @param resourcePath
 */
public TextClassWriter(Habitat habitat,File generationDir,String className,String baseClassName,String resourcePath) throws IOException {
  this.habitat=habitat;
  File file=new File(generationDir,className + ""String_Node_Str"");
  file.createNewFile();
  FileWriter fstream=new FileWriter(file);
  writer=new BufferedWriter(fstream);
  writeCopyRightHeader();
  writePackageHeader();
  writeImportStatements();
  if (resourcePath != null) {
    writer.write(""String_Node_Str"" + resourcePath + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"" + className + ""String_Node_Str""+ baseClassName+ ""String_Node_Str"");
}","/** 
 * @param className Name of class to be generated
 * @param generationDir Absolute location where it needs to be generated
 * @param baseClassName
 * @param resourcePath
 */
public TextClassWriter(Habitat habitat,File generationDir,String className,String baseClassName,String resourcePath) throws IOException {
  this.habitat=habitat;
  File file=new File(generationDir,className + ""String_Node_Str"");
  boolean success=file.createNewFile();
  if (!success) {
    throw new IOException(""String_Node_Str"" + file.getAbsolutePath());
  }
  FileWriter fstream=new FileWriter(file);
  writer=new BufferedWriter(fstream);
  writeCopyRightHeader();
  writePackageHeader();
  writeImportStatements();
  if (resourcePath != null) {
    writer.write(""String_Node_Str"" + resourcePath + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"" + className + ""String_Node_Str""+ baseClassName+ ""String_Node_Str"");
}"
30312,"@Override public String endGeneration(){
  File file=new File(generationDir + ""String_Node_Str"");
  try {
    file.createNewFile();
    FileWriter fstream=new FileWriter(file);
    BufferedWriter out=new BufferedWriter(fstream);
    out.write(""String_Node_Str"" + new Date() + ""String_Node_Str"");
    out.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return ""String_Node_Str"" + generationDir;
}","@Override public String endGeneration(){
  File file=new File(generationDir + ""String_Node_Str"");
  BufferedWriter out=null;
  try {
    if (file.createNewFile()) {
      FileWriter fstream=new FileWriter(file);
      out=new BufferedWriter(fstream);
      out.write(""String_Node_Str"" + new Date() + ""String_Node_Str"");
    }
 else {
      Logger.getLogger(TextResourcesGenerator.class.getName()).log(Level.SEVERE,""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException ex) {
        Logger.getLogger(TextResourcesGenerator.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
  return ""String_Node_Str"" + generationDir;
}"
30313,"public TextResourcesGenerator(String outputDir,Habitat habitat){
  super(habitat);
  generationDir=new File(outputDir);
  generationDir.mkdirs();
}","public TextResourcesGenerator(String outputDir,Habitat habitat){
  super(habitat);
  generationDir=new File(outputDir);
  if (!generationDir.mkdirs()) {
    throw new RuntimeException(""String_Node_Str"" + outputDir);
  }
}"
30314,"private String getBeanName(String elementName){
  String ret=""String_Node_Str"";
  boolean nextisUpper=true;
  for (int i=0; i < elementName.length(); i++) {
    if (nextisUpper == true) {
      ret=ret + elementName.substring(i,i + 1).toUpperCase(Locale.US);
      nextisUpper=false;
    }
 else {
      if (elementName.charAt(i) == '-') {
        nextisUpper=true;
      }
 else {
        nextisUpper=false;
        ret=ret + elementName.substring(i,i + 1);
      }
    }
  }
  return ret;
}","private String getBeanName(String elementName){
  StringBuilder ret=new StringBuilder();
  boolean nextisUpper=true;
  for (int i=0; i < elementName.length(); i++) {
    if (nextisUpper == true) {
      ret.append(elementName.substring(i,i + 1).toUpperCase(Locale.US));
      nextisUpper=false;
    }
 else {
      if (elementName.charAt(i) == '-') {
        nextisUpper=true;
      }
 else {
        nextisUpper=false;
        ret.append(elementName.substring(i,i + 1));
      }
    }
  }
  return ret.toString();
}"
30315,"@GET public String get(@QueryParam(""String_Node_Str"") String outputDir){
  if (outputDir == null) {
    outputDir=DEFAULT_OUTPUT_DIR;
  }
  baseDirectory=new File(outputDir);
  baseDirectory.mkdirs();
  String retVal=""String_Node_Str"" + outputDir + ""String_Node_Str"";
  try {
    generateClasses();
  }
 catch (  Exception ex) {
    Logger.getLogger(GeneratorResource.class.getName()).log(Level.SEVERE,null,ex);
    retVal=""String_Node_Str"" + ex.toString() + ""String_Node_Str"";
  }
  return retVal;
}","@GET public String get(@QueryParam(""String_Node_Str"") String outputDir){
  String retVal=""String_Node_Str"" + outputDir + ""String_Node_Str"";
  if (outputDir == null) {
    outputDir=DEFAULT_OUTPUT_DIR;
  }
  baseDirectory=new File(outputDir);
  boolean success=baseDirectory.mkdirs();
  if (success) {
    try {
      generateClasses();
    }
 catch (    Exception ex) {
      Logger.getLogger(GeneratorResource.class.getName()).log(Level.SEVERE,null,ex);
      retVal=""String_Node_Str"" + ex.toString() + ""String_Node_Str"";
    }
  }
 else {
    retVal=""String_Node_Str"";
  }
  return retVal;
}"
30316,"protected void writeClassFile(String className,StringBuilder source){
  File classFile=new File(baseDirectory,className + ""String_Node_Str"");
  try {
    BufferedWriter bw=new BufferedWriter(new FileWriter(classFile));
    bw.write(source.toString());
    bw.close();
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
}","protected void writeClassFile(String className,StringBuilder source){
  File classFile=new File(baseDirectory,className + ""String_Node_Str"");
  BufferedWriter bw=null;
  try {
    bw=new BufferedWriter(new FileWriter(classFile));
    bw.write(source.toString());
  }
 catch (  IOException ioe) {
    throw new RuntimeException(ioe);
  }
 finally {
    if (bw != null) {
      try {
        bw.close();
      }
 catch (      IOException ex) {
        Logger.getLogger(ClientGeneratorBaseResource.class.getName()).log(Level.SEVERE,null,ex);
      }
    }
  }
}"
30317,"/** 
 * Serve the specified resource, optionally including the data content.
 * @param request The servlet request we are processing
 * @param response The servlet response we are creating
 * @param content Should the content be included?
 * @exception IOException if an input/output error occurs
 * @exception ServletException if a servlet-specified error occurs
 */
protected void serveResource(HttpServletRequest request,HttpServletResponse response,boolean content) throws IOException, ServletException {
  String path=getRelativePath(request);
  if (debug > 0) {
    if (content)     log(""String_Node_Str"" + path + ""String_Node_Str"");
 else     log(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  CacheEntry cacheEntry=null;
  ProxyDirContext proxyDirContext=resources;
  if (alternateDocBases == null || alternateDocBases.size() == 0) {
    cacheEntry=proxyDirContext.lookupCache(path);
  }
 else {
    AlternateDocBase match=AlternateDocBase.findMatch(path,alternateDocBases);
    if (match != null) {
      cacheEntry=((ProxyDirContext)match.getResources()).lookupCache(path);
    }
 else {
      cacheEntry=proxyDirContext.lookupCache(path);
    }
  }
  if (!cacheEntry.exists) {
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    String metaInfResPath=Globals.META_INF_RESOURCES + path;
    if (cl instanceof WebappClassLoader) {
      WebappClassLoader wcl=(WebappClassLoader)cl;
      final URL resourceUrl=wcl.getResourceFromJars(metaInfResPath);
      if (resourceUrl != null) {
        ConcurrentHashMap<String,ResourceEntry> resourceEntries=wcl.getResourceEntries();
        ResourceEntry resourceEntry=resourceEntries.get(metaInfResPath);
        if (resourceEntry != null) {
          cacheEntry=new CacheEntry();
          try {
            URI resourceUri=resourceUrl.toURI();
            if (""String_Node_Str"".equals(resourceUri.getScheme()) && (new File(resourceUri)).isDirectory()) {
              if (!path.endsWith(""String_Node_Str"")) {
                response.sendRedirect(response.encodeRedirectUrl(request.getContextPath() + path + ""String_Node_Str""));
                return;
              }
              FileDirContext fileDirContext=new FileDirContext();
              String base=resourceUrl.getPath();
              int index=base.lastIndexOf(path);
              if (index != -1) {
                base=base.substring(0,index);
              }
              fileDirContext.setDocBase(base);
              proxyDirContext=new ProxyDirContext(new Hashtable<String,String>(),fileDirContext);
              cacheEntry.context=proxyDirContext;
            }
 else {
              cacheEntry.resource=new Resource(){
                public InputStream streamContent() throws IOException {
                  return resourceUrl.openStream();
                }
              }
;
            }
          }
 catch (          Exception ex) {
            throw new IOException(ex);
          }
          cacheEntry.name=path;
          cacheEntry.attributes=new ResourceAttributes();
          cacheEntry.exists=true;
        }
      }
    }
  }
  if (!cacheEntry.exists) {
    String requestUri=(String)request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI);
    if (requestUri != null) {
      throw new FileNotFoundException(requestUri);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (cacheEntry.context == null) {
    if (path.endsWith(""String_Node_Str"") || (path.endsWith(""String_Node_Str""))) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
  }
  if (cacheEntry.context == null) {
    boolean included=(request.getAttribute(RequestDispatcher.INCLUDE_CONTEXT_PATH) != null);
    if (!included && !checkIfHeaders(request,response,cacheEntry.attributes)) {
      return;
    }
  }
  String contentType=cacheEntry.attributes.getMimeType();
  if (contentType == null) {
    contentType=getServletContext().getMimeType(cacheEntry.name);
    cacheEntry.attributes.setMimeType(contentType);
  }
  ArrayList<Range> ranges=null;
  long contentLength=-1L;
  if (cacheEntry.context != null) {
    if (!listings) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
    contentType=""String_Node_Str"";
  }
 else {
    if (useAcceptRanges) {
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
    }
    ranges=parseRange(request,response,cacheEntry.attributes);
    response.setHeader(""String_Node_Str"",cacheEntry.attributes.getETag());
    response.setHeader(""String_Node_Str"",cacheEntry.attributes.getLastModifiedHttp());
    contentLength=cacheEntry.attributes.getContentLength();
    if (contentLength == 0L) {
      content=false;
    }
  }
  ServletOutputStream ostream=null;
  PrintWriter writer=null;
  if (content) {
    try {
      ostream=response.getOutputStream();
    }
 catch (    IllegalStateException e) {
      if ((contentType == null) || (contentType.startsWith(""String_Node_Str"")) || (contentType.startsWith(""String_Node_Str""))) {
        writer=response.getWriter();
      }
 else {
        throw e;
      }
    }
  }
  if ((cacheEntry.context != null) || (((ranges == null) || (ranges.isEmpty())) && (request.getHeader(""String_Node_Str"") == null)) || (ranges == FULL)) {
    if (contentType != null) {
      if (debug > 0)       log(""String_Node_Str"" + contentType + ""String_Node_Str"");
      response.setContentType(contentType);
    }
    if ((cacheEntry.resource != null) && (contentLength >= 0)) {
      if (debug > 0)       log(""String_Node_Str"" + contentLength);
      if (contentLength < Integer.MAX_VALUE) {
        response.setContentLength((int)contentLength);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + contentLength);
      }
    }
    InputStream renderResult=null;
    if (cacheEntry.context != null) {
      if (content) {
        renderResult=render(request.getContextPath(),cacheEntry,proxyDirContext);
      }
    }
    if (content) {
      try {
        response.setBufferSize(output);
      }
 catch (      IllegalStateException e) {
      }
      if (ostream != null) {
        if (!checkSendfile(request,response,cacheEntry,contentLength,null))         copy(cacheEntry,renderResult,ostream);
      }
 else {
        copy(cacheEntry,renderResult,writer);
      }
    }
  }
 else {
    if ((ranges == null) || (ranges.isEmpty()))     return;
    response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
    if (ranges.size() == 1) {
      Range range=ranges.get(0);
      response.addHeader(""String_Node_Str"",""String_Node_Str"" + range.start + ""String_Node_Str""+ range.end+ ""String_Node_Str""+ range.length);
      long length=range.end - range.start + 1;
      if (length < Integer.MAX_VALUE) {
        response.setContentLength((int)length);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + length);
      }
      if (contentType != null) {
        if (debug > 0)         log(""String_Node_Str"" + contentType + ""String_Node_Str"");
        response.setContentType(contentType);
      }
      if (content) {
        try {
          response.setBufferSize(output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          if (!checkSendfile(request,response,cacheEntry,range.end - range.start + 1,range))           copy(cacheEntry,ostream,range);
        }
 else {
          copy(cacheEntry,writer,range);
        }
      }
    }
 else {
      response.setContentType(""String_Node_Str"" + mimeSeparation);
      if (content) {
        try {
          response.setBufferSize(output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          copy(cacheEntry,ostream,ranges.iterator(),contentType);
        }
 else {
          copy(cacheEntry,writer,ranges.iterator(),contentType);
        }
      }
    }
  }
}","/** 
 * Serve the specified resource, optionally including the data content.
 * @param request The servlet request we are processing
 * @param response The servlet response we are creating
 * @param content Should the content be included?
 * @exception IOException if an input/output error occurs
 * @exception ServletException if a servlet-specified error occurs
 */
protected void serveResource(HttpServletRequest request,HttpServletResponse response,boolean content) throws IOException, ServletException {
  String path=getRelativePath(request);
  if (debug > 0) {
    if (content)     log(""String_Node_Str"" + path + ""String_Node_Str"");
 else     log(""String_Node_Str"" + path + ""String_Node_Str"");
  }
  CacheEntry cacheEntry=null;
  ProxyDirContext proxyDirContext=resources;
  if (alternateDocBases == null || alternateDocBases.size() == 0) {
    cacheEntry=proxyDirContext.lookupCache(path);
  }
 else {
    AlternateDocBase match=AlternateDocBase.findMatch(path,alternateDocBases);
    if (match != null) {
      cacheEntry=((ProxyDirContext)match.getResources()).lookupCache(path);
    }
 else {
      cacheEntry=proxyDirContext.lookupCache(path);
    }
  }
  if (!cacheEntry.exists) {
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    String metaInfResPath=Globals.META_INF_RESOURCES + path;
    if (cl instanceof WebappClassLoader) {
      WebappClassLoader wcl=(WebappClassLoader)cl;
      final URL resourceUrl=wcl.getResourceFromJars(metaInfResPath);
      if (resourceUrl != null) {
        ConcurrentHashMap<String,ResourceEntry> resourceEntries=wcl.getResourceEntries();
        ResourceEntry resourceEntry=resourceEntries.get(metaInfResPath);
        if (resourceEntry != null) {
          cacheEntry=new CacheEntry();
          try {
            URI resourceUri=resourceUrl.toURI();
            if (""String_Node_Str"".equals(resourceUri.getScheme()) && (new File(resourceUri)).isDirectory()) {
              if (!path.endsWith(""String_Node_Str"")) {
                response.sendRedirect(response.encodeRedirectUrl(request.getContextPath() + path + ""String_Node_Str""));
                return;
              }
              FileDirContext fileDirContext=new FileDirContext();
              String base=resourceUrl.getPath();
              int index=base.lastIndexOf(path);
              if (index != -1) {
                base=base.substring(0,index);
              }
              fileDirContext.setDocBase(base);
              proxyDirContext=new ProxyDirContext(new Hashtable<String,String>(),fileDirContext);
              cacheEntry.context=proxyDirContext;
            }
 else {
              cacheEntry.resource=new Resource(){
                public InputStream streamContent() throws IOException {
                  return resourceUrl.openStream();
                }
              }
;
            }
          }
 catch (          Exception ex) {
            throw new IOException(ex);
          }
          cacheEntry.name=path;
          cacheEntry.attributes=new ResourceAttributes();
          cacheEntry.exists=true;
        }
      }
    }
  }
  if (!cacheEntry.exists) {
    String requestUri=(String)request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI);
    if (requestUri != null) {
      throw new FileNotFoundException(requestUri);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND);
    return;
  }
  if (cacheEntry.context == null) {
    if (path.endsWith(""String_Node_Str"") || (path.endsWith(""String_Node_Str""))) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
  }
  if (cacheEntry.context == null) {
    boolean included=(request.getAttribute(RequestDispatcher.INCLUDE_CONTEXT_PATH) != null);
    if (!included && !checkIfHeaders(request,response,cacheEntry.attributes)) {
      return;
    }
  }
  String contentType=cacheEntry.attributes.getMimeType();
  if (contentType == null) {
    contentType=getServletContext().getMimeType(cacheEntry.name);
    cacheEntry.attributes.setMimeType(contentType);
  }
  ArrayList<Range> ranges=null;
  long contentLength=-1L;
  if (cacheEntry.context != null) {
    if (!listings) {
      response.sendError(HttpServletResponse.SC_NOT_FOUND);
      return;
    }
    contentType=""String_Node_Str"";
  }
 else {
    if (useAcceptRanges) {
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
    }
    ranges=parseRange(request,response,cacheEntry.attributes);
    response.setHeader(""String_Node_Str"",cacheEntry.attributes.getETag());
    response.setHeader(""String_Node_Str"",cacheEntry.attributes.getLastModifiedHttp());
    contentLength=cacheEntry.attributes.getContentLength();
    if (contentLength == 0L) {
      content=false;
    }
  }
  ServletOutputStream ostream=null;
  PrintWriter writer=null;
  if (content) {
    try {
      ostream=response.getOutputStream();
    }
 catch (    IllegalStateException e) {
      if ((contentType == null) || (contentType.startsWith(""String_Node_Str"")) || (contentType.startsWith(""String_Node_Str""))) {
        writer=response.getWriter();
      }
 else {
        throw e;
      }
    }
  }
  if ((cacheEntry.context != null) || (((ranges == null) || (ranges.isEmpty())) && (request.getHeader(""String_Node_Str"") == null)) || (ranges == FULL)) {
    if (contentType != null) {
      if (debug > 0)       log(""String_Node_Str"" + contentType + ""String_Node_Str"");
      response.setContentType(contentType);
    }
    if ((cacheEntry.resource != null) && (contentLength >= 0)) {
      if (debug > 0)       log(""String_Node_Str"" + contentLength);
      if (contentLength < Integer.MAX_VALUE) {
        response.setContentLength((int)contentLength);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + contentLength);
      }
    }
    InputStream renderResult=null;
    if (cacheEntry.context != null) {
      if (content) {
        renderResult=render(request.getContextPath(),cacheEntry,proxyDirContext);
      }
    }
    if (content) {
      try {
        response.setBufferSize(output);
      }
 catch (      IllegalStateException e) {
      }
      if (ostream != null) {
        if (!checkSendfile(request,response,cacheEntry,contentLength,null))         copy(cacheEntry,renderResult,ostream);
      }
 else {
        copy(cacheEntry,renderResult,writer);
      }
    }
  }
 else {
    if ((ranges == null) || (ranges.isEmpty()))     return;
    if (maxHeaderRangeItems >= 0 && ranges.size() > maxHeaderRangeItems) {
      response.sendError(HttpServletResponse.SC_FORBIDDEN);
      return;
    }
    response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
    if (ranges.size() == 1) {
      Range range=ranges.get(0);
      response.addHeader(""String_Node_Str"",""String_Node_Str"" + range.start + ""String_Node_Str""+ range.end+ ""String_Node_Str""+ range.length);
      long length=range.end - range.start + 1;
      if (length < Integer.MAX_VALUE) {
        response.setContentLength((int)length);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + length);
      }
      if (contentType != null) {
        if (debug > 0)         log(""String_Node_Str"" + contentType + ""String_Node_Str"");
        response.setContentType(contentType);
      }
      if (content) {
        try {
          response.setBufferSize(output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          if (!checkSendfile(request,response,cacheEntry,range.end - range.start + 1,range))           copy(cacheEntry,ostream,range);
        }
 else {
          copy(cacheEntry,writer,range);
        }
      }
    }
 else {
      response.setContentType(""String_Node_Str"" + mimeSeparation);
      if (content) {
        try {
          response.setBufferSize(output);
        }
 catch (        IllegalStateException e) {
        }
        if (ostream != null) {
          copy(cacheEntry,ostream,ranges.iterator(),contentType);
        }
 else {
          copy(cacheEntry,writer,ranges.iterator(),contentType);
        }
      }
    }
  }
}"
30318,"/** 
 * Initialize this servlet.
 */
public void init() throws ServletException {
  ServletConfig sc=getServletConfig();
  if (sc.getInitParameter(""String_Node_Str"") != null)   debug=Integer.parseInt(sc.getInitParameter(""String_Node_Str""));
  if (sc.getInitParameter(""String_Node_Str"") != null)   input=Integer.parseInt(sc.getInitParameter(""String_Node_Str""));
  if (sc.getInitParameter(""String_Node_Str"") != null)   output=Integer.parseInt(sc.getInitParameter(""String_Node_Str""));
  listings=Boolean.parseBoolean(sc.getInitParameter(""String_Node_Str""));
  String sortedByInitParam=sc.getInitParameter(""String_Node_Str"");
  if (sortedByInitParam != null) {
    sortedBy=Enum.valueOf(SortedBy.class,sortedByInitParam);
  }
  if (sc.getInitParameter(""String_Node_Str"") != null)   readOnly=Boolean.parseBoolean(sc.getInitParameter(""String_Node_Str""));
  if (sc.getInitParameter(""String_Node_Str"") != null)   sendfileSize=Integer.parseInt(sc.getInitParameter(""String_Node_Str"")) * 1024;
  fileEncoding=sc.getInitParameter(""String_Node_Str"");
  globalXsltFile=sc.getInitParameter(""String_Node_Str"");
  localXsltFile=sc.getInitParameter(""String_Node_Str"");
  readmeFile=sc.getInitParameter(""String_Node_Str"");
  if (sc.getInitParameter(""String_Node_Str"") != null)   useAcceptRanges=Boolean.parseBoolean(sc.getInitParameter(""String_Node_Str""));
  if (input < 256)   input=256;
  if (output < 256)   output=256;
  if (debug > 0) {
    log(""String_Node_Str"" + input + ""String_Node_Str""+ output);
  }
  resources=(ProxyDirContext)getServletContext().getAttribute(Globals.RESOURCES_ATTR);
  if (resources == null) {
    try {
      resources=(ProxyDirContext)new InitialContext().lookup(RESOURCES_JNDI_NAME);
    }
 catch (    NamingException e) {
      throw new ServletException(""String_Node_Str"",e);
    }
catch (    ClassCastException e) {
    }
  }
  if (resources == null) {
    throw new UnavailableException(""String_Node_Str"");
  }
  try {
    alternateDocBases=getAlternateDocBases();
  }
 catch (  ClassCastException e) {
  }
}","/** 
 * Initialize this servlet.
 */
public void init() throws ServletException {
  ServletConfig sc=getServletConfig();
  if (sc.getInitParameter(""String_Node_Str"") != null)   debug=Integer.parseInt(sc.getInitParameter(""String_Node_Str""));
  if (sc.getInitParameter(""String_Node_Str"") != null)   input=Integer.parseInt(sc.getInitParameter(""String_Node_Str""));
  if (sc.getInitParameter(""String_Node_Str"") != null)   output=Integer.parseInt(sc.getInitParameter(""String_Node_Str""));
  listings=Boolean.parseBoolean(sc.getInitParameter(""String_Node_Str""));
  String sortedByInitParam=sc.getInitParameter(""String_Node_Str"");
  if (sortedByInitParam != null) {
    sortedBy=Enum.valueOf(SortedBy.class,sortedByInitParam);
  }
  if (sc.getInitParameter(""String_Node_Str"") != null)   readOnly=Boolean.parseBoolean(sc.getInitParameter(""String_Node_Str""));
  if (sc.getInitParameter(""String_Node_Str"") != null)   sendfileSize=Integer.parseInt(sc.getInitParameter(""String_Node_Str"")) * 1024;
  if (sc.getInitParameter(""String_Node_Str"") != null) {
    maxHeaderRangeItems=Integer.parseInt(sc.getInitParameter(""String_Node_Str""));
  }
  fileEncoding=sc.getInitParameter(""String_Node_Str"");
  globalXsltFile=sc.getInitParameter(""String_Node_Str"");
  localXsltFile=sc.getInitParameter(""String_Node_Str"");
  readmeFile=sc.getInitParameter(""String_Node_Str"");
  if (sc.getInitParameter(""String_Node_Str"") != null)   useAcceptRanges=Boolean.parseBoolean(sc.getInitParameter(""String_Node_Str""));
  if (input < 256)   input=256;
  if (output < 256)   output=256;
  if (debug > 0) {
    log(""String_Node_Str"" + input + ""String_Node_Str""+ output);
  }
  resources=(ProxyDirContext)getServletContext().getAttribute(Globals.RESOURCES_ATTR);
  if (resources == null) {
    try {
      resources=(ProxyDirContext)new InitialContext().lookup(RESOURCES_JNDI_NAME);
    }
 catch (    NamingException e) {
      throw new ServletException(""String_Node_Str"",e);
    }
catch (    ClassCastException e) {
    }
  }
  if (resources == null) {
    throw new UnavailableException(""String_Node_Str"");
  }
  try {
    alternateDocBases=getAlternateDocBases();
  }
 catch (  ClassCastException e) {
  }
}"
30319,"public void prepareForUndeploy(String appName,ReadableArchive archive,DeploymentContext dc){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=getServiceMetadata(appName);
  if (appServiceMetadata == null) {
    appServiceMetadata=serviceDependencyDiscovery(appName,archive,installedPlugins);
    serviceMetadata.put(appName,appServiceMetadata);
  }
  Set<ProvisionedService> appProvisionedServices=getProvisionedServices(appName);
  if (appProvisionedServices == null) {
    Set<ProvisionedService> provisionedServiceSet=retrieveProvisionedServices(installedPlugins,appServiceMetadata,dc);
    provisionedServices.put(appName,provisionedServiceSet);
  }
  dissociateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedServices,true,dc);
}","public void prepareForUndeploy(String appName,ReadableArchive archive,DeploymentContext dc){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=getServiceMetadata(appName);
  if (appServiceMetadata == null) {
    appServiceMetadata=serviceDependencyDiscovery(appName,archive,installedPlugins);
    serviceMetadata.put(appName,appServiceMetadata);
  }
  Set<ProvisionedService> appProvisionedServices=getProvisionedServices(appName);
  if (appProvisionedServices == null) {
    appProvisionedServices=retrieveProvisionedServices(installedPlugins,appServiceMetadata,dc);
    provisionedServices.put(appName,appProvisionedServices);
  }
  dissociateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedServices,true,dc);
}"
30320,"@Override public void customize(VirtualCluster cluster,VirtualMachine virtualMachine) throws VirtException {
  ActionReport report=services.forContract(ActionReport.class).named(""String_Node_Str"").get();
  final String nodeName=virtualMachine.getServerPool().getName() + ""String_Node_Str"" + virtualMachine.getMachine().getName()+ ""String_Node_Str""+ virtualMachine.getName();
  String installDir=virtualMachine.getProperty(VirtualMachine.PropertyName.INSTALL_DIR);
  rtContext.executeAdminCommand(report,""String_Node_Str"",nodeName,""String_Node_Str"",virtualMachine.getAddress(),""String_Node_Str"",virtualMachine.getUser().getUserId(),""String_Node_Str"",installDir);
  if (report.hasFailures()) {
    return;
  }
  rtContext.executeAdminCommand(report,""String_Node_Str"",nodeName + ""String_Node_Str"",""String_Node_Str"",nodeName,""String_Node_Str"",cluster.getConfig().getName());
}","@Override public void customize(VirtualCluster cluster,VirtualMachine virtualMachine) throws VirtException {
  ActionReport report=services.forContract(ActionReport.class).named(""String_Node_Str"").get();
  final String nodeName=virtualMachine.getServerPool().getName() + ""String_Node_Str"" + virtualMachine.getMachine().getName()+ ""String_Node_Str""+ virtualMachine.getName();
  String installDir=virtualMachine.getProperty(VirtualMachine.PropertyName.INSTALL_DIR);
  rtContext.executeAdminCommand(report,""String_Node_Str"",nodeName,""String_Node_Str"",virtualMachine.getAddress(),""String_Node_Str"",virtualMachine.getUser().getName(),""String_Node_Str"",installDir);
  if (report.hasFailures()) {
    return;
  }
  rtContext.executeAdminCommand(report,""String_Node_Str"",nodeName + ""String_Node_Str"",""String_Node_Str"",nodeName,""String_Node_Str"",cluster.getConfig().getName());
}"
30321,"private void addDomain(Domain domain) throws VirtException {
  String domainName=domain.getName();
  if (!domains.containsKey(domainName)) {
    for (    Cluster cluster : domainConfig.getClusters().getCluster()) {
      for (      VirtualMachineConfig vmc : cluster.getExtensionsByType(VirtualMachineConfig.class)) {
        if (vmc.getName().equals(domainName)) {
          LibVirtVirtualMachine gfVM=new LibVirtVirtualMachine(this,domain);
          domains.put(domainName,gfVM);
          return;
        }
      }
    }
  }
}","private void addDomain(Domain domain,Collection<StorageVol> volumes) throws VirtException {
  String domainName=domain.getName();
  if (!domains.containsKey(domainName)) {
    for (    Cluster cluster : domainConfig.getClusters().getCluster()) {
      for (      VirtualMachineConfig vmc : cluster.getExtensionsByType(VirtualMachineConfig.class)) {
        if (vmc.getName().equals(domainName)) {
          List<StorageVol> storageVols=new ArrayList<StorageVol>();
          for (          StorageVol storageVol : volumes) {
            if (storageVol.getName().startsWith(domainName)) {
              storageVols.add(storageVol);
            }
          }
          LibVirtVirtualMachine gfVM=new LibVirtVirtualMachine(vmc.getTemplate().getUser(),this,domain,storageVols);
          domains.put(domainName,gfVM);
          return;
        }
      }
    }
  }
}"
30322,"private void populate() throws VirtException {
  if (getIpAddress() == null) {
    RuntimeContext.logger.log(Level.INFO,""String_Node_Str"" + getName());
    return;
  }
  try {
    Connect connection=connection();
    if (connection != null) {
      populateStoragePools(connection().listStoragePools());
      populateDomain(connection().listDomains());
      populateDomain(connection().listDefinedDomains());
    }
  }
 catch (  VirtException e) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw e;
  }
}","private void populate() throws VirtException {
  if (getIpAddress() == null) {
    RuntimeContext.logger.log(Level.INFO,""String_Node_Str"" + getName());
    return;
  }
  try {
    Connect connection=connection();
    if (connection != null) {
      populateStoragePools(connection().listStoragePools());
      Collection<StorageVol> storageVols=new ArrayList<StorageVol>();
      for (      StoragePool pool : storagePools.values()) {
        for (        StorageVol vol : pool.volumes()) {
          storageVols.add(vol);
        }
      }
      for (      int domainId : connection().listDomains()) {
        try {
          populateDomain(domainId,storageVols);
        }
 catch (        VirtException e) {
          for (          int d : connection().listDomains()) {
            if (d == domainId) {
              throw e;
            }
          }
        }
      }
      for (      String domainId : connection().listDefinedDomains()) {
        try {
          populateDomain(domainId,storageVols);
        }
 catch (        VirtException e) {
          for (          String d : connection().listDefinedDomains()) {
            if (d.equals(domainId)) {
              throw e;
            }
          }
        }
      }
    }
  }
 catch (  VirtException e) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw e;
  }
}"
30323,"private void populateDomain(String[] domainIds) throws VirtException {
  for (  String domainId : domainIds) {
    addDomain(connect.domainLookupByName(domainId));
  }
}","private void populateDomain(String domainId,Collection<StorageVol> volumes) throws VirtException {
  addDomain(connect.domainLookupByName(domainId),volumes);
}"
30324,"public ListenableFuture<AllocationPhase,VirtualMachine> create(final TemplateInstance template,final VirtualCluster cluster,final EventSource<AllocationPhase> source) throws VirtException, IOException {
  populate();
  source.fireEvent(AllocationPhase.VM_PREPARE);
  final String name=cluster.getConfig().getName() + cluster.allocateToken();
  File xml=template.getFileByExtension(""String_Node_Str"");
  Element vmConfig=loadConfigFile(xml);
  List<StorageVol> volumes=prepare(template,name,cluster);
  File machineDisks=absolutize(new File(virtualizations.getDisksLocation(),serverPool.getName()));
  machineDisks=new File(machineDisks,getName());
  File custDirectory=prepareCustDirectory(name,cluster.getConfig(),template.getConfig());
  File custFile=new File(machineDisks,name + ""String_Node_Str"");
  prepareCustomization(custDirectory,custFile,name);
  final String diskLocation=config.getDisksLocation();
  delete(diskLocation + ""String_Node_Str"" + custFile.getName());
  copy(custFile,new File(diskLocation));
  OsInterface os=services.forContract(OsInterface.class).get();
  String uuid=UUID.randomUUID().toString();
  String macAddress=os.macAddressGen();
  vmConfig.setAttribute(""String_Node_Str"",getVirtualizationConfig().getName());
  NodeList children=vmConfig.getChildNodes();
  for (int k=0; k < children.getLength(); k++) {
    Node node=children.item(k);
    if (node.getNodeName().equals(""String_Node_Str"")) {
      node.getChildNodes().item(0).setNodeValue(name);
    }
    if (node.getNodeName().equals(""String_Node_Str"")) {
      node.getChildNodes().item(0).setNodeValue(uuid);
    }
    if (node.getNodeName().equals(""String_Node_Str"")) {
      NodeList devices=node.getChildNodes();
      for (int i=0; i < devices.getLength(); i++) {
        Node device=devices.item(i);
        if (device.getNodeName().equals(""String_Node_Str"")) {
          node.removeChild(device);
        }
        if (device.getNodeName().equals(""String_Node_Str"") && device.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
          NodeList intfInfos=device.getChildNodes();
          for (int j=0; j < intfInfos.getLength(); j++) {
            if (intfInfos.item(j).getNodeName().equals(""String_Node_Str"")) {
              intfInfos.item(j).getAttributes().getNamedItem(""String_Node_Str"").setNodeValue(macAddress);
            }
          }
        }
        if (device.getNodeName().equals(""String_Node_Str"")) {
          device.getChildNodes().item(0).setNodeValue(getVirtualizationConfig().getEmulatorPath());
        }
      }
      int position=0;
      for (      StorageVol aVol : volumes) {
        if (aVol instanceof LibVirtStorageVol) {
          Node newNode=((LibVirtStorageVol)aVol).getXML(node,position++);
          node.appendChild(newNode);
        }
      }
      DiskReference cdRom=new CDRomDisk();
      Node cdRomNode=cdRom.save(this.getUserHome() + ""String_Node_Str"" + config.getDisksLocation()+ ""String_Node_Str""+ custFile.getName(),node,0);
      node.appendChild(cdRomNode);
    }
  }
  File destXml=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  writeConfig(vmConfig,destXml);
  System.out.println(""String_Node_Str"" + uuid + ""String_Node_Str""+ macAddress);
  try {
    Domain domain=connection().domainDefineXML(getConfig(vmConfig));
    source.fireEvent(AllocationPhase.VM_SPAWN);
    final CountDownLatch latch=vmLifecycle.inStartup(name);
    final LibVirtVirtualMachine vm=new LibVirtVirtualMachine(this,domain);
    domains.put(name,vm);
    cluster.add(template,vm);
    ListenableFutureImpl<AllocationPhase,VirtualMachine> future=new ListenableFutureImpl<AllocationPhase,VirtualMachine>(latch,vm,source);
    future.fireEvent(AllocationPhase.VM_START);
    vmLifecycle.start(vm);
    return future;
  }
 catch (  VirtException e) {
    for (    StorageVol volume : volumes) {
      volume.delete();
    }
    throw new VirtException(e);
  }
}","public ListenableFuture<AllocationPhase,VirtualMachine> create(final TemplateInstance template,final VirtualCluster cluster,final EventSource<AllocationPhase> source) throws VirtException, IOException {
  populate();
  source.fireEvent(AllocationPhase.VM_PREPARE);
  final String name=cluster.getConfig().getName() + cluster.allocateToken();
  File xml=template.getFileByExtension(""String_Node_Str"");
  Element vmConfig=loadConfigFile(xml);
  List<StorageVol> volumes=prepare(template,name,cluster);
  File machineDisks=absolutize(new File(virtualizations.getDisksLocation(),serverPool.getName()));
  machineDisks=new File(machineDisks,getName());
  File custDirectory=prepareCustDirectory(name,cluster.getConfig(),template.getConfig());
  File custFile=new File(machineDisks,name + ""String_Node_Str"");
  prepareCustomization(custDirectory,custFile,name);
  final String diskLocation=config.getDisksLocation();
  delete(diskLocation + ""String_Node_Str"" + custFile.getName());
  copy(custFile,new File(diskLocation));
  OsInterface os=services.forContract(OsInterface.class).get();
  String uuid=UUID.randomUUID().toString();
  String macAddress=os.macAddressGen();
  vmConfig.setAttribute(""String_Node_Str"",getVirtualizationConfig().getName());
  NodeList children=vmConfig.getChildNodes();
  for (int k=0; k < children.getLength(); k++) {
    Node node=children.item(k);
    if (node.getNodeName().equals(""String_Node_Str"")) {
      node.getChildNodes().item(0).setNodeValue(name);
    }
    if (node.getNodeName().equals(""String_Node_Str"")) {
      node.getChildNodes().item(0).setNodeValue(uuid);
    }
    if (node.getNodeName().equals(""String_Node_Str"")) {
      NodeList devices=node.getChildNodes();
      for (int i=0; i < devices.getLength(); i++) {
        Node device=devices.item(i);
        if (device.getNodeName().equals(""String_Node_Str"")) {
          node.removeChild(device);
        }
        if (device.getNodeName().equals(""String_Node_Str"") && device.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue().equals(""String_Node_Str"")) {
          NodeList intfInfos=device.getChildNodes();
          for (int j=0; j < intfInfos.getLength(); j++) {
            if (intfInfos.item(j).getNodeName().equals(""String_Node_Str"")) {
              intfInfos.item(j).getAttributes().getNamedItem(""String_Node_Str"").setNodeValue(macAddress);
            }
          }
        }
        if (device.getNodeName().equals(""String_Node_Str"")) {
          device.getChildNodes().item(0).setNodeValue(getVirtualizationConfig().getEmulatorPath());
        }
      }
      int position=0;
      for (      StorageVol aVol : volumes) {
        if (aVol instanceof LibVirtStorageVol) {
          Node newNode=((LibVirtStorageVol)aVol).getXML(node,position++);
          node.appendChild(newNode);
        }
      }
      DiskReference cdRom=new CDRomDisk();
      Node cdRomNode=cdRom.save(this.getUserHome() + ""String_Node_Str"" + config.getDisksLocation()+ ""String_Node_Str""+ custFile.getName(),node,0);
      node.appendChild(cdRomNode);
    }
  }
  File destXml=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  writeConfig(vmConfig,destXml);
  System.out.println(""String_Node_Str"" + uuid + ""String_Node_Str""+ macAddress);
  try {
    Domain domain=connection().domainDefineXML(getConfig(vmConfig));
    source.fireEvent(AllocationPhase.VM_SPAWN);
    final CountDownLatch latch=vmLifecycle.inStartup(name);
    final LibVirtVirtualMachine vm=new LibVirtVirtualMachine(template.getConfig().getUser(),this,domain,volumes);
    domains.put(name,vm);
    cluster.add(template,vm);
    ListenableFutureImpl<AllocationPhase,VirtualMachine> future=new ListenableFutureImpl<AllocationPhase,VirtualMachine>(latch,vm,source);
    future.fireEvent(AllocationPhase.VM_START);
    vmLifecycle.start(vm);
    return future;
  }
 catch (  VirtException e) {
    for (    StorageVol volume : volumes) {
      volume.delete();
    }
    throw new VirtException(e);
  }
}"
30325,"protected LibVirtVirtualMachine(Machine owner,Domain domain) throws VirtException {
  this.domain=domain;
  this.owner=owner;
  this.name=domain.getName();
}","protected LibVirtVirtualMachine(VirtUser user,Machine owner,Domain domain,List<StorageVol> storageVols) throws VirtException {
  super(user);
  this.domain=domain;
  this.owner=owner;
  this.name=domain.getName();
  this.storageVols=new ArrayList<StorageVol>(storageVols);
}"
30326,"@Override public String executeOn(String[] args) throws IOException, InterruptedException {
  SSHLauncher sshLauncher=new SSHLauncher();
  File home=new File(System.getProperty(""String_Node_Str""));
  String keyFile=new File(home,""String_Node_Str"").getAbsolutePath();
  sshLauncher.init(getUser().getUserId(),address,22,null,keyFile,null,Logger.getAnonymousLogger());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  StringBuilder stringBuilder=new StringBuilder();
  for (  String arg : args) {
    stringBuilder.append(arg);
    stringBuilder.append(""String_Node_Str"");
  }
  sshLauncher.runCommand(stringBuilder.toString().trim(),baos);
  return baos.toString();
}","@Override public String executeOn(String[] args) throws IOException, InterruptedException {
  SSHLauncher sshLauncher=new SSHLauncher();
  File home=new File(System.getProperty(""String_Node_Str""));
  String keyFile=new File(home,""String_Node_Str"").getAbsolutePath();
  sshLauncher.init(getUser().getName(),address,22,null,keyFile,null,Logger.getAnonymousLogger());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  StringBuilder stringBuilder=new StringBuilder();
  for (  String arg : args) {
    stringBuilder.append(arg);
    stringBuilder.append(""String_Node_Str"");
  }
  sshLauncher.runCommand(stringBuilder.toString().trim(),baos);
  return baos.toString();
}"
30327,"public void delete() throws VirtException {
  try {
    stop();
  }
 catch (  VirtException e) {
    e.printStackTrace();
  }
  for (  StorageVol volume : volumes()) {
    volume.delete();
  }
  domain.undefine();
}","public void delete() throws VirtException {
  try {
    stop();
  }
 catch (  VirtException e) {
    e.printStackTrace();
  }
  for (  StorageVol volume : storageVols) {
    volume.delete();
  }
  domain.undefine();
}"
30328,"@Override public void intercept(DeployCommand command,DeploymentContext context){
  System.out.println(""String_Node_Str"" + command.name());
  boolean clusterCreated=false;
  try {
    if (context.getSource().exists(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"");
      CloudApplication cloudApplication=readConfig(context.getSource());
      for (      CloudService cloudService : cloudApplication.getServices().getServices()) {
        if (cloudService instanceof JavaEEService) {
          JavaEEService javaEE=(JavaEEService)cloudService;
          System.out.println(""String_Node_Str"" + javaEE.getMinInstances() + ""String_Node_Str"");
          rtContext.executeAdminCommand(actionReport,""String_Node_Str"",command.name(),""String_Node_Str"",javaEE.getMinInstances());
          if (actionReport.hasFailures()) {
            throw new DeploymentException(actionReport.getMessage());
          }
          clusterCreated=true;
          command.target=command.name();
        }
 else         if (cloudService instanceof DatabaseService) {
          try {
            VirtualCluster virtualCluster=virtualClusters.byName(command.name());
            for (            ServerPool serverPool : iaas) {
              String virtTypeName=serverPool.getConfig().getVirtualization().getType();
              VirtualizationType virtType=new VirtualizationType(virtTypeName);
              ServiceType serviceType=new ServiceType(""String_Node_Str"");
              TemplateRepository templateRepository=services.forContract(TemplateRepository.class).get();
              for (              TemplateInstance ti : templateRepository.all()) {
                if (ti.satisfies(virtType) && (ti.satisfies(serviceType))) {
                  VMOrder vmOrder=new VMOrder(ti,virtualCluster);
                  Future<?> future=iaas.allocate(vmOrder,null);
                  try {
                    future.get();
                  }
 catch (                  InterruptedException e) {
                    e.printStackTrace();
                  }
catch (                  ExecutionException e) {
                    e.printStackTrace();
                  }
                }
              }
            }
          }
 catch (          VirtException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    if (clusterCreated) {
      rtContext.executeAdminCommand(actionReport,""String_Node_Str"",command.name());
    }
  }
}","@Override public void intercept(final DeployCommand command,final DeploymentContext context){
  System.out.println(""String_Node_Str"" + command.name());
  try {
    if (context.getSource().exists(""String_Node_Str"")) {
      AdminCommandLock.runWithSuspendedLock(new Runnable(){
        @Override public void run(){
          boolean clusterCreated=false;
          try {
            System.out.println(""String_Node_Str"");
            CloudApplication cloudApplication=readConfig(context.getSource());
            for (            CloudService cloudService : cloudApplication.getServices().getServices()) {
              if (cloudService instanceof JavaEEService) {
                JavaEEService javaEE=(JavaEEService)cloudService;
                System.out.println(""String_Node_Str"" + javaEE.getMinInstances() + ""String_Node_Str"");
                rtContext.executeAdminCommand(actionReport,""String_Node_Str"",command.name(),""String_Node_Str"",javaEE.getMinInstances());
                if (actionReport.hasFailures()) {
                  throw new DeploymentException(actionReport.getMessage());
                }
                clusterCreated=true;
                command.target=command.name();
              }
 else               if (cloudService instanceof DatabaseService) {
                try {
                  VirtualCluster virtualCluster=virtualClusters.byName(command.name());
                  for (                  ServerPool serverPool : iaas) {
                    String virtTypeName=serverPool.getConfig().getVirtualization().getType();
                    VirtualizationType virtType=new VirtualizationType(virtTypeName);
                    ServiceType serviceType=new ServiceType(""String_Node_Str"");
                    TemplateRepository templateRepository=services.forContract(TemplateRepository.class).get();
                    for (                    TemplateInstance ti : templateRepository.all()) {
                      if (ti.satisfies(virtType) && (ti.satisfies(serviceType))) {
                        VMOrder vmOrder=new VMOrder(ti,virtualCluster);
                        Future<?> future=iaas.allocate(vmOrder,null);
                        try {
                          future.get();
                        }
 catch (                        InterruptedException e) {
                          e.printStackTrace();
                        }
catch (                        ExecutionException e) {
                          e.printStackTrace();
                        }
                      }
                    }
                  }
                }
 catch (                VirtException e) {
                  e.printStackTrace();
                }
              }
            }
          }
 catch (          IOException e) {
            e.printStackTrace();
            if (clusterCreated) {
              rtContext.executeAdminCommand(actionReport,""String_Node_Str"",command.name());
            }
          }
        }
      }
);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
30329,"@Override public void execute(AdminCommandContext context){
  ServerPool targetGroup=iaas.byName(group);
  if (targetGroup == null) {
    context.getActionReport().failure(RuntimeContext.logger,""String_Node_Str"" + group);
    return;
  }
  try {
    VirtualMachine vm=targetGroup.vmByName(virtualMachine);
    if (vm != null) {
      CountDownLatch latch=vmLifecycle.getStartupLatch(vm.getName());
      if (latch != null) {
        latch.countDown();
      }
      vm.setAddress(address);
      Cluster clusterConfig=domain.getClusterNamed(cluster);
      VirtualMachineConfig vmConfig=clusterConfig.getExtensionsByTypeAndName(VirtualMachineConfig.class,vm.getName());
      for (      Property property : vmConfig.getProperty()) {
        vm.setProperty(VirtualMachine.PropertyName.valueOf(property.getName()),property.getValue());
      }
      Template template=vmConfig.getTemplate();
      templateRepository.byName(template.getName()).getCustomizer().start(vm);
    }
  }
 catch (  VirtException e) {
    RuntimeContext.logger.log(Level.SEVERE,e.getMessage(),e);
    context.getActionReport().failure(RuntimeContext.logger,e.getMessage());
    return;
  }
  context.getActionReport().setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","@Override public void execute(AdminCommandContext context){
  ServerPool targetGroup=iaas.byName(group);
  if (targetGroup == null) {
    context.getActionReport().failure(RuntimeContext.logger,""String_Node_Str"" + group);
    return;
  }
  try {
    VirtualMachine vm=targetGroup.vmByName(virtualMachine);
    if (vm != null) {
      CountDownLatch latch=vmLifecycle.getStartupLatch(vm.getName());
      if (latch != null) {
        latch.countDown();
      }
      vm.setAddress(address);
      Cluster clusterConfig=domain.getClusterNamed(cluster);
      VirtualMachineConfig vmConfig=clusterConfig.getExtensionsByTypeAndName(VirtualMachineConfig.class,vm.getName());
      for (      Property property : vmConfig.getProperty()) {
        vm.setProperty(VirtualMachine.PropertyName.valueOf(property.getName()),property.getValue());
      }
      Template template=vmConfig.getTemplate();
      TemplateCustomizer customizer=templateRepository.byName(template.getName()).getCustomizer();
      if (customizer != null) {
        customizer.start(vm);
      }
    }
  }
 catch (  VirtException e) {
    RuntimeContext.logger.log(Level.SEVERE,e.getMessage(),e);
    context.getActionReport().failure(RuntimeContext.logger,e.getMessage());
    return;
  }
  context.getActionReport().setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
30330,"@Override public void execute(AdminCommandContext context){
  if (group == null) {
    context.getActionReport().failure(RuntimeContext.logger,""String_Node_Str"");
    return;
  }
  ServerPool targetGroup=groups.byName(group);
  if (targetGroup == null) {
    context.getActionReport().failure(RuntimeContext.logger,""String_Node_Str"" + group);
    return;
  }
  try {
    VirtualMachine vm=targetGroup.vmByName(virtualMachine);
    if (vm != null) {
      CountDownLatch latch=vmLifecycle.getStartupLatch(vm.getName());
      if (latch != null) {
        latch.countDown();
      }
      vm.setAddress(address);
      vm.setUser(new VMUser(sshUser,VMUser.ConnectionType.SSH));
      vm.setProperty(VirtualMachine.PropertyName.INSTALL_DIR,installDir);
      Cluster clusterConfig=domain.getClusterNamed(cluster);
      VirtualMachineConfig vmConfig=clusterConfig.getExtensionsByTypeAndName(VirtualMachineConfig.class,vm.getName());
      try {
        ConfigSupport.apply(new SingleConfigCode<VirtualMachineConfig>(){
          @Override public Object run(          VirtualMachineConfig wConfig) throws PropertyVetoException, TransactionFailure {
            Property wProperty=wConfig.createChild(Property.class);
            wProperty.setName(VirtualMachine.PropertyName.INSTALL_DIR.toString());
            wProperty.setValue(installDir);
            wConfig.getProperty().add(wProperty);
            return wProperty;
          }
        }
,vmConfig);
      }
 catch (      TransactionFailure transactionFailure) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"",transactionFailure);
      }
      Template template=vmConfig.getTemplate();
      VirtualCluster virtualCluster=virtualClusters.byName(cluster);
      templateRepository.byName(template.getName()).getCustomizer().customize(virtualCluster,vm);
      templateRepository.byName(template.getName()).getCustomizer().start(vm);
    }
  }
 catch (  VirtException e) {
    RuntimeContext.logger.log(Level.SEVERE,e.getMessage(),e);
    context.getActionReport().failure(RuntimeContext.logger,e.getMessage());
  }
}","@Override public void execute(AdminCommandContext context){
  if (group == null) {
    context.getActionReport().failure(RuntimeContext.logger,""String_Node_Str"");
    return;
  }
  ServerPool targetGroup=groups.byName(group);
  if (targetGroup == null) {
    context.getActionReport().failure(RuntimeContext.logger,""String_Node_Str"" + group);
    return;
  }
  try {
    VirtualMachine vm=targetGroup.vmByName(virtualMachine);
    if (vm != null) {
      vm.setAddress(address);
      vm.setProperty(VirtualMachine.PropertyName.INSTALL_DIR,installDir);
      Cluster clusterConfig=domain.getClusterNamed(cluster);
      VirtualMachineConfig vmConfig=clusterConfig.getExtensionsByTypeAndName(VirtualMachineConfig.class,vm.getName());
      try {
        ConfigSupport.apply(new SingleConfigCode<VirtualMachineConfig>(){
          @Override public Object run(          VirtualMachineConfig wConfig) throws PropertyVetoException, TransactionFailure {
            Property wProperty=wConfig.createChild(Property.class);
            wProperty.setName(VirtualMachine.PropertyName.INSTALL_DIR.toString());
            wProperty.setValue(installDir);
            wConfig.getProperty().add(wProperty);
            return wProperty;
          }
        }
,vmConfig);
      }
 catch (      TransactionFailure transactionFailure) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"",transactionFailure);
      }
      Template template=vmConfig.getTemplate();
      VirtualCluster virtualCluster=virtualClusters.byName(cluster);
      TemplateCustomizer customizer=templateRepository.byName(template.getName()).getCustomizer();
      if (customizer != null) {
        customizer.customize(virtualCluster,vm);
        customizer.start(vm);
      }
      CountDownLatch latch=vmLifecycle.getStartupLatch(vm.getName());
      if (latch != null) {
        latch.countDown();
      }
    }
  }
 catch (  VirtException e) {
    RuntimeContext.logger.log(Level.SEVERE,e.getMessage(),e);
    context.getActionReport().failure(RuntimeContext.logger,e.getMessage());
  }
}"
30331,"/** 
 * Set the type information for the EJB starting with the EJB business interface, but only if it hasn't already been set.
 */
private void setEjbIntfType(EjbReferenceDescriptor ejbRef,Class beanInterface){
  if (ejbRef.getEjbInterface() != null)   return;
  ejbRef.setEjbInterface(beanInterface.getName());
  if (beanInterface.getAnnotation(Local.class) != null) {
    ejbRef.setLocal(true);
  }
 else   if (beanInterface.getAnnotation(Remote.class) != null) {
    ejbRef.setLocal(false);
  }
 else {
    ejbRef.setLocal(false);
  }
  ejbRef.setType(EjbSessionDescriptor.TYPE);
}","/** 
 * Set the type information for the EJB starting with the EJB business interface, but only if it hasn't already been set.
 */
private void setEjbIntfType(EjbReferenceDescriptor ejbRef,Class beanInterface){
  if (ejbRef.getEjbInterface() != null)   return;
  ejbRef.setEjbInterface(beanInterface.getName());
  if (beanInterface.getAnnotation(Local.class) != null) {
    ejbRef.setLocal(true);
  }
 else {
    ejbRef.setLocal(false);
  }
  ejbRef.setType(EjbSessionDescriptor.TYPE);
}"
30332,"/** 
 * Allocate an initialized instance of this Servlet that is ready to have its <code>service()</code> method called.  If the servlet class does not implement <code>SingleThreadModel</code>, the (only) initialized instance may be returned immediately.  If the servlet class implements <code>SingleThreadModel</code>, the Wrapper implementation must ensure that this instance is not allocated again until it is deallocated by a call to <code>deallocate()</code>.
 * @exception ServletException if the servlet init() method threwan exception
 * @exception ServletException if a loading error occurs
 */
public synchronized Servlet allocate() throws ServletException {
  if (unloading) {
    throw new ServletException(sm.getString(""String_Node_Str"",getName()));
  }
  if (!singleThreadModel) {
    if (instance == null) {
      try {
        if (log.isLoggable(Level.FINEST))         log.finest(""String_Node_Str"");
        instance=loadServlet();
        initServlet(instance);
      }
 catch (      ServletException e) {
        throw e;
      }
catch (      Throwable e) {
        throw new ServletException(sm.getString(""String_Node_Str""),e);
      }
    }
 else     if (instance.getServletConfig() == null) {
      initServlet(instance);
    }
    if (!singleThreadModel) {
      if (log.isLoggable(Level.FINEST))       log.finest(""String_Node_Str"");
      countAllocated.incrementAndGet();
      return (instance);
    }
  }
synchronized (instancePool) {
    while (countAllocated.get() >= nInstances) {
      if (nInstances < maxInstances) {
        try {
          Servlet servlet=loadServlet();
          initServlet(servlet);
          instancePool.push(servlet);
          nInstances++;
        }
 catch (        ServletException e) {
          throw e;
        }
catch (        Throwable e) {
          throw new ServletException(sm.getString(""String_Node_Str""),e);
        }
      }
 else {
        try {
          instancePool.wait();
        }
 catch (        InterruptedException e) {
        }
      }
    }
    if (log.isLoggable(Level.FINEST)) {
      log.finest(""String_Node_Str"");
    }
    countAllocated.incrementAndGet();
    return instancePool.pop();
  }
}","/** 
 * Allocate an initialized instance of this Servlet that is ready to have its <code>service()</code> method called.  If the servlet class does not implement <code>SingleThreadModel</code>, the (only) initialized instance may be returned immediately.  If the servlet class implements <code>SingleThreadModel</code>, the Wrapper implementation must ensure that this instance is not allocated again until it is deallocated by a call to <code>deallocate()</code>.
 * @exception ServletException if the servlet init() method threwan exception
 * @exception ServletException if a loading error occurs
 */
public synchronized Servlet allocate() throws ServletException {
  if (unloading) {
    throw new ServletException(sm.getString(""String_Node_Str"",getName()));
  }
  if (!singleThreadModel) {
    if (instance == null) {
      try {
        if (log.isLoggable(Level.FINEST))         log.finest(""String_Node_Str"");
        instance=loadServlet();
        initServlet(instance);
      }
 catch (      ServletException e) {
        throw e;
      }
catch (      Throwable e) {
        throw new ServletException(sm.getString(""String_Node_Str""),e);
      }
    }
 else     if (!instanceInitialized) {
      initServlet(instance);
    }
    if (!singleThreadModel) {
      if (log.isLoggable(Level.FINEST))       log.finest(""String_Node_Str"");
      countAllocated.incrementAndGet();
      return (instance);
    }
  }
synchronized (instancePool) {
    while (countAllocated.get() >= nInstances) {
      if (nInstances < maxInstances) {
        try {
          Servlet servlet=loadServlet();
          initServlet(servlet);
          instancePool.push(servlet);
          nInstances++;
        }
 catch (        ServletException e) {
          throw e;
        }
catch (        Throwable e) {
          throw new ServletException(sm.getString(""String_Node_Str""),e);
        }
      }
 else {
        try {
          instancePool.wait();
        }
 catch (        InterruptedException e) {
        }
      }
    }
    if (log.isLoggable(Level.FINEST)) {
      log.finest(""String_Node_Str"");
    }
    countAllocated.incrementAndGet();
    return instancePool.pop();
  }
}"
30333,"/** 
 * Initializes the given servlet instance, by calling its init method.
 */
private void initServlet(Servlet servlet) throws ServletException {
  if (servlet.getServletConfig() != null) {
    return;
  }
  try {
    instanceSupport.fireInstanceEvent(BEFORE_INIT_EVENT,servlet);
    if (SecurityUtil.executeUnderSubjectDoAs()) {
      Object[] initType=new Object[1];
      initType[0]=facade;
      SecurityUtil.doAsPrivilege(""String_Node_Str"",servlet,classType,initType);
      initType=null;
    }
 else {
      servlet.init(facade);
    }
    if ((loadOnStartup >= 0) && (jspFile != null)) {
      DummyRequest req=new DummyRequest();
      req.setServletPath(jspFile);
      req.setQueryString(""String_Node_Str"");
      String allowedMethods=(String)parameters.get(""String_Node_Str"");
      if (allowedMethods != null && allowedMethods.length() > 0) {
        String[] s=allowedMethods.split(""String_Node_Str"");
        if (s != null && s.length > 0) {
          req.setMethod(s[0].trim());
        }
      }
      DummyResponse res=new DummyResponse();
      if (SecurityUtil.executeUnderSubjectDoAs()) {
        Object[] serviceType=new Object[2];
        serviceType[0]=req;
        serviceType[1]=res;
        SecurityUtil.doAsPrivilege(""String_Node_Str"",servlet,classTypeUsedInService,serviceType);
      }
 else {
        servlet.service(req,res);
      }
    }
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet);
  }
 catch (  UnavailableException f) {
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    unavailable(f);
    throw f;
  }
catch (  ServletException f) {
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    throw f;
  }
catch (  Throwable f) {
    getServletContext().log(""String_Node_Str"",f);
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    throw new ServletException(sm.getString(""String_Node_Str"",getName()),f);
  }
}","/** 
 * Initializes the given servlet instance, by calling its init method.
 */
private void initServlet(Servlet servlet) throws ServletException {
  if (instanceInitialized && !singleThreadModel) {
    return;
  }
  try {
    instanceSupport.fireInstanceEvent(BEFORE_INIT_EVENT,servlet);
    if (SecurityUtil.executeUnderSubjectDoAs()) {
      Object[] initType=new Object[1];
      initType[0]=facade;
      SecurityUtil.doAsPrivilege(""String_Node_Str"",servlet,classType,initType);
      initType=null;
    }
 else {
      servlet.init(facade);
    }
    instanceInitialized=true;
    if ((loadOnStartup >= 0) && (jspFile != null)) {
      DummyRequest req=new DummyRequest();
      req.setServletPath(jspFile);
      req.setQueryString(""String_Node_Str"");
      String allowedMethods=(String)parameters.get(""String_Node_Str"");
      if (allowedMethods != null && allowedMethods.length() > 0) {
        String[] s=allowedMethods.split(""String_Node_Str"");
        if (s != null && s.length > 0) {
          req.setMethod(s[0].trim());
        }
      }
      DummyResponse res=new DummyResponse();
      if (SecurityUtil.executeUnderSubjectDoAs()) {
        Object[] serviceType=new Object[2];
        serviceType[0]=req;
        serviceType[1]=res;
        SecurityUtil.doAsPrivilege(""String_Node_Str"",servlet,classTypeUsedInService,serviceType);
      }
 else {
        servlet.service(req,res);
      }
    }
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet);
  }
 catch (  UnavailableException f) {
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    unavailable(f);
    throw f;
  }
catch (  ServletException f) {
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    throw f;
  }
catch (  Throwable f) {
    getServletContext().log(""String_Node_Str"",f);
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    throw new ServletException(sm.getString(""String_Node_Str"",getName()),f);
  }
}"
30334,"@Override public Object run(ConfigBeanProxy writableParent) throws PropertyVetoException, TransactionFailure {
  ConfigBeanProxy childBean=writableParent.createChild(targetType);
  manager.inject(childBean,targetType,getInjectionResolver());
  String name=null;
  if (Named.class.isAssignableFrom(targetType)) {
    name=((Named)childBean).getName();
  }
  if (name != null) {
    Object cbp=habitat.getComponent(targetType.getName(),name);
    if (cbp != null) {
      String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetType.getSimpleName(),name);
      result.failure(logger,msg);
      throw new TransactionFailure(msg);
    }
  }
  try {
    if (targetMethod.getParameterTypes().length == 0) {
      Object result=targetMethod.invoke(writableParent);
      if (result instanceof List) {
        List<ConfigBeanProxy> children=List.class.cast(result);
        children.add(childBean);
      }
    }
 else {
      targetMethod.invoke(writableParent,childBean);
    }
  }
 catch (  Exception e) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetMethod.toString(),e.toString());
    result.failure(logger,msg,e);
    throw new TransactionFailure(msg,e);
  }
  CreationDecorator<ConfigBeanProxy> decorator=habitat.getComponent(create.decorator());
  if (decorator == null) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",create.decorator().toString());
    result.failure(logger,msg);
    throw new TransactionFailure(msg);
  }
 else {
    manager.inject(decorator,paramResolver);
    decorator.decorate(context,childBean);
  }
  return childBean;
}","@Override public Object run(ConfigBeanProxy writableParent) throws PropertyVetoException, TransactionFailure {
  ConfigBeanProxy childBean=writableParent.createChild(targetType);
  manager.inject(childBean,targetType,getInjectionResolver());
  String name=null;
  if (Named.class.isAssignableFrom(targetType)) {
    name=((Named)childBean).getName();
  }
  if (name != null) {
    Object cbp=habitat.getComponent(targetType.getName(),name);
    if (cbp != null) {
      String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetType.getSimpleName(),name);
      result.failure(logger,msg);
      throw new TransactionFailure(msg);
    }
  }
  try {
    if (targetMethod.getParameterTypes().length == 0) {
      Object result=targetMethod.invoke(writableParent);
      if (result instanceof List) {
        List<ConfigBeanProxy> children=List.class.cast(result);
        children.add(childBean);
      }
    }
 else {
      targetMethod.invoke(writableParent,childBean);
    }
  }
 catch (  Exception e) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetMethod.toString(),e.toString());
    result.failure(logger,msg,e);
    throw new TransactionFailure(msg,e);
  }
  CreationDecorator<ConfigBeanProxy> decorator=null;
  if (create != null) {
    decorator=habitat.getComponent(create.decorator());
  }
  if (decorator == null) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",create == null ? ""String_Node_Str"" : create.decorator().toString());
    result.failure(logger,msg);
    throw new TransactionFailure(msg);
  }
 else {
    manager.inject(decorator,paramResolver);
    decorator.decorate(context,childBean);
  }
  return childBean;
}"
30335,"@Override public void execute(final AdminCommandContext context){
  final ActionReport result=context.getActionReport();
  final InjectionManager manager=new InjectionManager();
  CrudResolver resolver=habitat.getComponent(resolverType);
  final InjectionResolver paramResolver=getInjectionResolver();
  manager.inject(resolver,paramResolver);
  final ConfigBeanProxy parentBean=resolver.resolve(context,parentType);
  if (parentBean == null) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",resolver.getClass().toString(),parentType,targetType);
    result.failure(logger,msg);
    return;
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<ConfigBeanProxy>(){
      @Override public Object run(      ConfigBeanProxy writableParent) throws PropertyVetoException, TransactionFailure {
        ConfigBeanProxy childBean=writableParent.createChild(targetType);
        manager.inject(childBean,targetType,getInjectionResolver());
        String name=null;
        if (Named.class.isAssignableFrom(targetType)) {
          name=((Named)childBean).getName();
        }
        if (name != null) {
          Object cbp=habitat.getComponent(targetType.getName(),name);
          if (cbp != null) {
            String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetType.getSimpleName(),name);
            result.failure(logger,msg);
            throw new TransactionFailure(msg);
          }
        }
        try {
          if (targetMethod.getParameterTypes().length == 0) {
            Object result=targetMethod.invoke(writableParent);
            if (result instanceof List) {
              List<ConfigBeanProxy> children=List.class.cast(result);
              children.add(childBean);
            }
          }
 else {
            targetMethod.invoke(writableParent,childBean);
          }
        }
 catch (        Exception e) {
          String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetMethod.toString(),e.toString());
          result.failure(logger,msg,e);
          throw new TransactionFailure(msg,e);
        }
        CreationDecorator<ConfigBeanProxy> decorator=habitat.getComponent(create.decorator());
        if (decorator == null) {
          String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",create.decorator().toString());
          result.failure(logger,msg);
          throw new TransactionFailure(msg);
        }
 else {
          manager.inject(decorator,paramResolver);
          decorator.decorate(context,childBean);
        }
        return childBean;
      }
    }
,parentBean);
  }
 catch (  TransactionFailure e) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",getRootCauseMessage(e));
    result.failure(logger,msg);
  }
}","@Override public void execute(final AdminCommandContext context){
  final ActionReport result=context.getActionReport();
  final InjectionManager manager=new InjectionManager();
  CrudResolver resolver=habitat.getComponent(resolverType);
  final InjectionResolver paramResolver=getInjectionResolver();
  manager.inject(resolver,paramResolver);
  final ConfigBeanProxy parentBean=resolver.resolve(context,parentType);
  if (parentBean == null) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",resolver.getClass().toString(),parentType,targetType);
    result.failure(logger,msg);
    return;
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<ConfigBeanProxy>(){
      @Override public Object run(      ConfigBeanProxy writableParent) throws PropertyVetoException, TransactionFailure {
        ConfigBeanProxy childBean=writableParent.createChild(targetType);
        manager.inject(childBean,targetType,getInjectionResolver());
        String name=null;
        if (Named.class.isAssignableFrom(targetType)) {
          name=((Named)childBean).getName();
        }
        if (name != null) {
          Object cbp=habitat.getComponent(targetType.getName(),name);
          if (cbp != null) {
            String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetType.getSimpleName(),name);
            result.failure(logger,msg);
            throw new TransactionFailure(msg);
          }
        }
        try {
          if (targetMethod.getParameterTypes().length == 0) {
            Object result=targetMethod.invoke(writableParent);
            if (result instanceof List) {
              List<ConfigBeanProxy> children=List.class.cast(result);
              children.add(childBean);
            }
          }
 else {
            targetMethod.invoke(writableParent,childBean);
          }
        }
 catch (        Exception e) {
          String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",targetMethod.toString(),e.toString());
          result.failure(logger,msg,e);
          throw new TransactionFailure(msg,e);
        }
        CreationDecorator<ConfigBeanProxy> decorator=null;
        if (create != null) {
          decorator=habitat.getComponent(create.decorator());
        }
        if (decorator == null) {
          String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",create == null ? ""String_Node_Str"" : create.decorator().toString());
          result.failure(logger,msg);
          throw new TransactionFailure(msg);
        }
 else {
          manager.inject(decorator,paramResolver);
          decorator.decorate(context,childBean);
        }
        return childBean;
      }
    }
,parentBean);
  }
 catch (  TransactionFailure e) {
    String msg=localStrings.getLocalString(GenericCrudCommand.class,""String_Node_Str"",""String_Node_Str"",getRootCauseMessage(e));
    result.failure(logger,msg);
  }
}"
30336,"/** 
 * Find a method with the right name If found, call the method ( if param is int or boolean we'll convert value to the right type before) - that means you can have setDebug(1).
 */
public static boolean setProperty(Object o,String name,String value){
  if (debugLevel > 1) {
    debug(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  }
  String setter=""String_Node_Str"" + capitalize(name);
  try {
    Method methods[]=findMethods(o.getClass());
    Method setPropertyMethodVoid=null;
    Method setPropertyMethodBool=null;
    for (    Method method : methods) {
      Class<?> paramTypes[]=method.getParameterTypes();
      if (setter.equals(method.getName()) && paramTypes.length == 1 && ""String_Node_Str"".equals(paramTypes[0].getName())) {
        method.invoke(o,value);
        return true;
      }
    }
    for (    Method method : methods) {
      boolean ok=true;
      if (setter.equals(method.getName()) && method.getParameterTypes().length == 1) {
        Class<?> paramType=method.getParameterTypes()[0];
        Object params[]=new Object[1];
        if (""String_Node_Str"".equals(paramType.getName()) || ""String_Node_Str"".equals(paramType.getName())) {
          try {
            params[0]=new Integer(value);
          }
 catch (          NumberFormatException ex) {
            ok=false;
          }
        }
 else         if (""String_Node_Str"".equals(paramType.getName()) || ""String_Node_Str"".equals(paramType.getName())) {
          try {
            params[0]=new Long(value);
          }
 catch (          NumberFormatException ex) {
            ok=false;
          }
        }
 else         if (""String_Node_Str"".equals(paramType.getName()) || ""String_Node_Str"".equals(paramType.getName())) {
          params[0]=new Boolean(value);
        }
 else         if (""String_Node_Str"".equals(paramType.getName())) {
          try {
            params[0]=InetAddress.getByName(value);
          }
 catch (          UnknownHostException exc) {
            debug(""String_Node_Str"" + value);
            ok=false;
          }
        }
 else {
          debug(""String_Node_Str"" + paramType.getName());
        }
        if (ok) {
          method.invoke(o,params);
          return true;
        }
      }
      if (""String_Node_Str"".equals(method.getName())) {
        if (method.getReturnType().equals(Boolean.TYPE)) {
          setPropertyMethodBool=method;
        }
 else {
          setPropertyMethodVoid=method;
        }
      }
    }
    if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {
      Object params[]=new Object[2];
      params[0]=name;
      params[1]=value;
      if (setPropertyMethodBool != null) {
        try {
          return (Boolean)setPropertyMethodBool.invoke(o,params);
        }
 catch (        IllegalArgumentException biae) {
          if (setPropertyMethodVoid != null) {
            setPropertyMethodVoid.invoke(o,params);
            return true;
          }
 else {
            throw biae;
          }
        }
      }
 else {
        setPropertyMethodVoid.invoke(o,params);
        return true;
      }
    }
  }
 catch (  IllegalArgumentException ex2) {
    logger.log(Level.INFO,""String_Node_Str"" + o + ""String_Node_Str""+ name+ ""String_Node_Str""+ value,ex2);
  }
catch (  SecurityException ex1) {
    if (debugLevel > 0) {
      debug(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str"");
    }
    if (debugLevel > 1) {
      ex1.printStackTrace();
    }
  }
catch (  IllegalAccessException iae) {
    if (debugLevel > 0) {
      debug(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str"");
    }
    if (debugLevel > 1) {
      iae.printStackTrace();
    }
  }
catch (  InvocationTargetException ie) {
    if (debugLevel > 0) {
      debug(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str"");
    }
    if (debugLevel > 1) {
      ie.printStackTrace();
    }
  }
  return false;
}","/** 
 * Find a method with the right name If found, call the method ( if param is int or boolean we'll convert value to the right type before) - that means you can have setDebug(1).
 */
public static boolean setProperty(Object o,String name,String value){
  if (debugLevel > 1) {
    debug(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str"");
  }
  String setter=""String_Node_Str"" + capitalize(name);
  try {
    Method methods[]=findMethods(o.getClass());
    Method setPropertyMethodVoid=null;
    Method setPropertyMethodBool=null;
    for (    Method method : methods) {
      Class<?> paramTypes[]=method.getParameterTypes();
      if (setter.equals(method.getName()) && paramTypes.length == 1 && ""String_Node_Str"".equals(paramTypes[0].getName())) {
        method.invoke(o,value);
        return true;
      }
    }
    for (    Method method : methods) {
      boolean ok=true;
      if (setter.equals(method.getName()) && method.getParameterTypes().length == 1) {
        Class<?> paramType=method.getParameterTypes()[0];
        Object params[]=new Object[1];
        if (""String_Node_Str"".equals(paramType.getName()) || ""String_Node_Str"".equals(paramType.getName())) {
          try {
            params[0]=new Integer(value);
          }
 catch (          NumberFormatException ex) {
            ok=false;
          }
        }
 else         if (""String_Node_Str"".equals(paramType.getName()) || ""String_Node_Str"".equals(paramType.getName())) {
          try {
            params[0]=new Long(value);
          }
 catch (          NumberFormatException ex) {
            ok=false;
          }
        }
 else         if (""String_Node_Str"".equals(paramType.getName()) || ""String_Node_Str"".equals(paramType.getName())) {
          params[0]=Boolean.valueOf(value);
        }
 else         if (""String_Node_Str"".equals(paramType.getName())) {
          try {
            params[0]=InetAddress.getByName(value);
          }
 catch (          UnknownHostException exc) {
            debug(""String_Node_Str"" + value);
            ok=false;
          }
        }
 else {
          debug(""String_Node_Str"" + paramType.getName());
        }
        if (ok) {
          method.invoke(o,params);
          return true;
        }
      }
      if (""String_Node_Str"".equals(method.getName())) {
        if (method.getReturnType().equals(Boolean.TYPE)) {
          setPropertyMethodBool=method;
        }
 else {
          setPropertyMethodVoid=method;
        }
      }
    }
    if (setPropertyMethodBool != null || setPropertyMethodVoid != null) {
      Object params[]=new Object[2];
      params[0]=name;
      params[1]=value;
      if (setPropertyMethodBool != null) {
        try {
          return (Boolean)setPropertyMethodBool.invoke(o,params);
        }
 catch (        IllegalArgumentException biae) {
          if (setPropertyMethodVoid != null) {
            setPropertyMethodVoid.invoke(o,params);
            return true;
          }
 else {
            throw biae;
          }
        }
      }
 else {
        setPropertyMethodVoid.invoke(o,params);
        return true;
      }
    }
  }
 catch (  IllegalArgumentException ex2) {
    logger.log(Level.INFO,""String_Node_Str"" + o + ""String_Node_Str""+ name+ ""String_Node_Str""+ value,ex2);
  }
catch (  SecurityException ex1) {
    if (debugLevel > 0) {
      debug(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str"");
    }
    if (debugLevel > 1) {
      ex1.printStackTrace();
    }
  }
catch (  IllegalAccessException iae) {
    if (debugLevel > 0) {
      debug(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str"");
    }
    if (debugLevel > 1) {
      iae.printStackTrace();
    }
  }
catch (  InvocationTargetException ie) {
    if (debugLevel > 0) {
      debug(""String_Node_Str"" + o.getClass() + ""String_Node_Str""+ name+ ""String_Node_Str""+ value+ ""String_Node_Str"");
    }
    if (debugLevel > 1) {
      ie.printStackTrace();
    }
  }
  return false;
}"
30337,"private void writeSecurityTokens(Process sp) throws GFLauncherException, IOException {
  handleDeadProcess();
  OutputStream os=sp.getOutputStream();
  BufferedWriter bw=null;
  try {
    bw=new BufferedWriter(new OutputStreamWriter(os));
    for (    String token : info.securityTokens) {
      bw.write(token);
      bw.newLine();
      bw.flush();
    }
  }
 catch (  IOException e) {
    handleDeadProcess();
    throw e;
  }
 finally {
    if (bw != null) {
      handleDeadProcess();
      bw.close();
    }
 else     if (os != null)     try {
      os.close();
    }
 catch (    IOException ioe) {
    }
  }
}","private void writeSecurityTokens(Process sp) throws GFLauncherException, IOException {
  handleDeadProcess();
  OutputStream os=sp.getOutputStream();
  OutputStreamWriter osw=null;
  BufferedWriter bw=null;
  try {
    osw=new OutputStreamWriter(os);
    bw=new BufferedWriter(osw);
    for (    String token : info.securityTokens) {
      bw.write(token);
      bw.newLine();
      bw.flush();
    }
  }
 catch (  IOException e) {
    handleDeadProcess();
    throw e;
  }
 finally {
    if (bw != null) {
      bw.close();
    }
    if (osw != null) {
      osw.close();
    }
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException ioe) {
      }
    }
    if (bw != null) {
      handleDeadProcess();
    }
  }
}"
30338,"private void computeTimeOut(){
  long currentTime=System.currentTimeMillis();
  timeOutReached=((currentTime - startTime) >= (timeOutSeconds * 1000));
}","private void computeTimeOut(){
  long currentTime=System.currentTimeMillis();
  timeOutReached=((currentTime - startTime) >= (timeOutSeconds * 1000L));
}"
30339,"public static TokenValueSet getTokenValueSet(DomainConfig domainConfig){
  final String installRoot=(String)domainConfig.get(DomainConfig.K_INSTALL_ROOT);
  final String domainRoot=(String)domainConfig.get(DomainConfig.K_DOMAINS_ROOT);
  final TokenValueSet tokens=new TokenValueSet();
  String instanceName=(String)domainConfig.get(DomainConfig.K_SERVERID);
  if ((instanceName == null) || (instanceName.equals(""String_Node_Str"")))   instanceName=PEFileLayout.DEFAULT_INSTANCE_NAME;
  TokenValue tv=new TokenValue(CONFIG_MODEL_NAME_TOKEN_NAME,CONFIG_MODEL_NAME_TOKEN_VALUE);
  tokens.add(tv);
  tv=new TokenValue(HOST_NAME_TOKEN_NAME,(String)domainConfig.get(DomainConfig.K_HOST_NAME));
  tokens.add(tv);
  final Integer adminPort=(Integer)domainConfig.get(DomainConfig.K_ADMIN_PORT);
  tv=new TokenValue(ADMIN_PORT_TOKEN_NAME,adminPort.toString());
  tokens.add(tv);
  final Integer httpPort=(Integer)domainConfig.get(DomainConfig.K_INSTANCE_PORT);
  tv=new TokenValue(HTTP_PORT_TOKEN_NAME,httpPort.toString());
  tokens.add(tv);
  final Integer orbPort=(Integer)domainConfig.get(DomainConfig.K_ORB_LISTENER_PORT);
  tv=new TokenValue(ORB_LISTENER_PORT_TOKEN_NAME,orbPort.toString());
  tokens.add(tv);
  final Integer jmsPort=(Integer)domainConfig.get(DomainConfig.K_JMS_PORT);
  tv=new TokenValue(JMS_PROVIDER_PORT_TOKEN_NAME,jmsPort.toString());
  tokens.add(tv);
  tv=new TokenValue(SERVER_ID_TOKEN_NAME,instanceName);
  tokens.add(tv);
  final Integer httpSslPort=(Integer)domainConfig.get(DomainConfig.K_HTTP_SSL_PORT);
  tv=new TokenValue(HTTP_SSL_PORT_TOKEN_NAME,httpSslPort.toString());
  tokens.add(tv);
  final Integer orbSslPort=(Integer)domainConfig.get(DomainConfig.K_IIOP_SSL_PORT);
  tv=new TokenValue(ORB_SSL_PORT_TOKEN_NAME,orbSslPort.toString());
  tokens.add(tv);
  final Integer orbMutualAuthPort=(Integer)domainConfig.get(DomainConfig.K_IIOP_MUTUALAUTH_PORT);
  tv=new TokenValue(ORB_MUTUALAUTH_PORT_TOKEN_NAME,orbMutualAuthPort.toString());
  tokens.add(tv);
  final Integer jmxPort=(Integer)domainConfig.get(DomainConfig.K_JMX_PORT);
  tv=new TokenValue(JMX_SYSTEM_CONNECTOR_PORT_TOKEN_NAME,jmxPort.toString());
  tokens.add(tv);
  tv=new TokenValue(DOMAIN_NAME_TOKEN_NAME,domainConfig.getRepositoryName());
  tokens.add(tv);
  final Integer osgiShellTelnetPort=(Integer)domainConfig.get(DomainConfig.K_OSGI_SHELL_TELNET_PORT);
  tv=new TokenValue(OSGI_SHELL_TELNET_PORT_TOKEN_NAME,osgiShellTelnetPort.toString());
  tokens.add(tv);
  final Integer javaDebuggerPort=(Integer)domainConfig.get(DomainConfig.K_JAVA_DEBUGGER_PORT);
  tv=new TokenValue(JAVA_DEBUGGER_PORT_TOKEN_NAME,javaDebuggerPort.toString());
  tokens.add(tv);
  tv=new TokenValue(ADMIN_CERT_DN_TOKEN_NAME,(String)domainConfig.get(DomainConfig.K_ADMIN_CERT_DN));
  tokens.add(tv);
  tv=new TokenValue(INSTANCE_CERT_DN_TOKEN_NAME,(String)domainConfig.get(DomainConfig.K_INSTANCE_CERT_DN));
  tokens.add(tv);
  tv=new TokenValue(SECURE_ADMIN_IDENTIFIER_TOKEN_NAME,(String)domainConfig.get(DomainConfig.K_SECURE_ADMIN_IDENTIFIER));
  tokens.add(tv);
  return (tokens);
}","public static TokenValueSet getTokenValueSet(DomainConfig domainConfig){
  final TokenValueSet tokens=new TokenValueSet();
  String instanceName=(String)domainConfig.get(DomainConfig.K_SERVERID);
  if ((instanceName == null) || (instanceName.equals(""String_Node_Str"")))   instanceName=PEFileLayout.DEFAULT_INSTANCE_NAME;
  TokenValue tv=new TokenValue(CONFIG_MODEL_NAME_TOKEN_NAME,CONFIG_MODEL_NAME_TOKEN_VALUE);
  tokens.add(tv);
  tv=new TokenValue(HOST_NAME_TOKEN_NAME,(String)domainConfig.get(DomainConfig.K_HOST_NAME));
  tokens.add(tv);
  final Integer adminPort=(Integer)domainConfig.get(DomainConfig.K_ADMIN_PORT);
  tv=new TokenValue(ADMIN_PORT_TOKEN_NAME,adminPort.toString());
  tokens.add(tv);
  final Integer httpPort=(Integer)domainConfig.get(DomainConfig.K_INSTANCE_PORT);
  tv=new TokenValue(HTTP_PORT_TOKEN_NAME,httpPort.toString());
  tokens.add(tv);
  final Integer orbPort=(Integer)domainConfig.get(DomainConfig.K_ORB_LISTENER_PORT);
  tv=new TokenValue(ORB_LISTENER_PORT_TOKEN_NAME,orbPort.toString());
  tokens.add(tv);
  final Integer jmsPort=(Integer)domainConfig.get(DomainConfig.K_JMS_PORT);
  tv=new TokenValue(JMS_PROVIDER_PORT_TOKEN_NAME,jmsPort.toString());
  tokens.add(tv);
  tv=new TokenValue(SERVER_ID_TOKEN_NAME,instanceName);
  tokens.add(tv);
  final Integer httpSslPort=(Integer)domainConfig.get(DomainConfig.K_HTTP_SSL_PORT);
  tv=new TokenValue(HTTP_SSL_PORT_TOKEN_NAME,httpSslPort.toString());
  tokens.add(tv);
  final Integer orbSslPort=(Integer)domainConfig.get(DomainConfig.K_IIOP_SSL_PORT);
  tv=new TokenValue(ORB_SSL_PORT_TOKEN_NAME,orbSslPort.toString());
  tokens.add(tv);
  final Integer orbMutualAuthPort=(Integer)domainConfig.get(DomainConfig.K_IIOP_MUTUALAUTH_PORT);
  tv=new TokenValue(ORB_MUTUALAUTH_PORT_TOKEN_NAME,orbMutualAuthPort.toString());
  tokens.add(tv);
  final Integer jmxPort=(Integer)domainConfig.get(DomainConfig.K_JMX_PORT);
  tv=new TokenValue(JMX_SYSTEM_CONNECTOR_PORT_TOKEN_NAME,jmxPort.toString());
  tokens.add(tv);
  tv=new TokenValue(DOMAIN_NAME_TOKEN_NAME,domainConfig.getRepositoryName());
  tokens.add(tv);
  final Integer osgiShellTelnetPort=(Integer)domainConfig.get(DomainConfig.K_OSGI_SHELL_TELNET_PORT);
  tv=new TokenValue(OSGI_SHELL_TELNET_PORT_TOKEN_NAME,osgiShellTelnetPort.toString());
  tokens.add(tv);
  final Integer javaDebuggerPort=(Integer)domainConfig.get(DomainConfig.K_JAVA_DEBUGGER_PORT);
  tv=new TokenValue(JAVA_DEBUGGER_PORT_TOKEN_NAME,javaDebuggerPort.toString());
  tokens.add(tv);
  tv=new TokenValue(ADMIN_CERT_DN_TOKEN_NAME,(String)domainConfig.get(DomainConfig.K_ADMIN_CERT_DN));
  tokens.add(tv);
  tv=new TokenValue(INSTANCE_CERT_DN_TOKEN_NAME,(String)domainConfig.get(DomainConfig.K_INSTANCE_CERT_DN));
  tokens.add(tv);
  tv=new TokenValue(SECURE_ADMIN_IDENTIFIER_TOKEN_NAME,(String)domainConfig.get(DomainConfig.K_SECURE_ADMIN_IDENTIFIER));
  tokens.add(tv);
  return (tokens);
}"
30340,"/** 
 * This method will return the list of web fragment in the desired order.
 */
private List<WebFragmentDescriptor> readStandardFragments(WebBundleDescriptor descriptor,ReadableArchive archive) throws IOException {
  List<WebFragmentDescriptor> wfList=new ArrayList<WebFragmentDescriptor>();
  Vector libs=getLibraries(archive);
  if (libs != null && libs.size() > 0) {
    for (int i=0; i < libs.size(); i++) {
      String lib=(String)libs.get(i);
      Archivist wfArchivist=new WebFragmentArchivist();
      wfArchivist.initializeContext(this);
      wfArchivist.setRuntimeXMLValidation(this.getRuntimeXMLValidation());
      wfArchivist.setRuntimeXMLValidationLevel(this.getRuntimeXMLValidationLevel());
      wfArchivist.setAnnotationProcessingRequested(false);
      WebFragmentDescriptor wfDesc=null;
      ReadableArchive embeddedArchive=archive.getSubArchive(lib);
      try {
        if (embeddedArchive != null && wfArchivist.hasStandardDeploymentDescriptor(embeddedArchive)) {
          try {
            wfDesc=(WebFragmentDescriptor)wfArchivist.open(embeddedArchive);
          }
 catch (          SAXParseException ex) {
            IOException ioex=new IOException();
            ioex.initCause(ex);
            throw ioex;
          }
        }
 else {
          wfDesc=new WebFragmentDescriptor();
        }
      }
  finally {
        if (embeddedArchive != null) {
          embeddedArchive.close();
        }
      }
      wfDesc.setJarName(lib.substring(lib.lastIndexOf('/') + 1));
      wfList.add(wfDesc);
      descriptor.putJarNameWebFragmentNamePair(wfDesc.getJarName(),wfDesc.getName());
    }
    if (descriptor.getAbsoluteOrderingDescriptor() != null) {
      wfList=descriptor.getAbsoluteOrderingDescriptor().order(wfList);
    }
 else {
      OrderingDescriptor.sort(wfList);
    }
    for (    WebFragmentDescriptor wf : wfList) {
      descriptor.addOrderedLib(wf.getJarName());
    }
  }
  return wfList;
}","/** 
 * This method will return the list of web fragment in the desired order.
 */
private List<WebFragmentDescriptor> readStandardFragments(WebBundleDescriptor descriptor,ReadableArchive archive) throws IOException {
  List<WebFragmentDescriptor> wfList=new ArrayList<WebFragmentDescriptor>();
  Vector libs=getLibraries(archive);
  if (libs != null && libs.size() > 0) {
    for (int i=0; i < libs.size(); i++) {
      String lib=(String)libs.get(i);
      Archivist wfArchivist=new WebFragmentArchivist(habitat);
      wfArchivist.initializeContext(this);
      wfArchivist.setRuntimeXMLValidation(this.getRuntimeXMLValidation());
      wfArchivist.setRuntimeXMLValidationLevel(this.getRuntimeXMLValidationLevel());
      wfArchivist.setAnnotationProcessingRequested(false);
      WebFragmentDescriptor wfDesc=null;
      ReadableArchive embeddedArchive=archive.getSubArchive(lib);
      try {
        if (embeddedArchive != null && wfArchivist.hasStandardDeploymentDescriptor(embeddedArchive)) {
          try {
            wfDesc=(WebFragmentDescriptor)wfArchivist.open(embeddedArchive);
          }
 catch (          SAXParseException ex) {
            IOException ioex=new IOException();
            ioex.initCause(ex);
            throw ioex;
          }
        }
 else {
          wfDesc=new WebFragmentDescriptor();
        }
      }
  finally {
        if (embeddedArchive != null) {
          embeddedArchive.close();
        }
      }
      wfDesc.setJarName(lib.substring(lib.lastIndexOf('/') + 1));
      wfList.add(wfDesc);
      descriptor.putJarNameWebFragmentNamePair(wfDesc.getJarName(),wfDesc.getName());
    }
    if (descriptor.getAbsoluteOrderingDescriptor() != null) {
      wfList=descriptor.getAbsoluteOrderingDescriptor().order(wfList);
    }
 else {
      OrderingDescriptor.sort(wfList);
    }
    for (    WebFragmentDescriptor wf : wfList) {
      descriptor.addOrderedLib(wf.getJarName());
    }
  }
  return wfList;
}"
30341,"@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  if (name == null)   name=nodehost.toString();
  if (nodes.getNode(name) != null) {
    return;
  }
  CommandInvocation ci=cr.getCommandInvocation(""String_Node_Str"",report);
  ParameterMap map=new ParameterMap();
  map.add(""String_Node_Str"",name);
  map.add(NodeUtils.PARAM_NODEDIR,nodedir);
  map.add(NodeUtils.PARAM_INSTALLDIR,installdir);
  map.add(NodeUtils.PARAM_NODEHOST,nodehost);
  map.add(NodeUtils.PARAM_TYPE,""String_Node_Str"");
  ci.parameters(map);
  ci.execute();
}","@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  if (name == null)   name=nodehost;
  if (nodes.getNode(name) != null) {
    return;
  }
  CommandInvocation ci=cr.getCommandInvocation(""String_Node_Str"",report);
  ParameterMap map=new ParameterMap();
  map.add(""String_Node_Str"",name);
  map.add(NodeUtils.PARAM_NODEDIR,nodedir);
  map.add(NodeUtils.PARAM_INSTALLDIR,installdir);
  map.add(NodeUtils.PARAM_NODEHOST,nodehost);
  map.add(NodeUtils.PARAM_TYPE,""String_Node_Str"");
  ci.parameters(map);
  ci.execute();
}"
30342,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  Logger logger=context.getLogger();
  ListNodesHelper lnh=new ListNodesHelper(logger,servers,nodes,""String_Node_Str"",long_opt,terse);
  String nodeList=lnh.getNodeList();
  report.setMessage(nodeList);
  report.setActionExitCode(ExitCode.SUCCESS);
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  ListNodesHelper lnh=new ListNodesHelper(logger,servers,nodes,""String_Node_Str"",long_opt,terse);
  String nodeList=lnh.getNodeList();
  report.setMessage(nodeList);
  report.setActionExitCode(ExitCode.SUCCESS);
}"
30343,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  Logger logger=context.getLogger();
  ListNodesHelper lnh=new ListNodesHelper(logger,servers,nodes,""String_Node_Str"",long_opt,terse);
  String nodeList=lnh.getNodeList();
  report.setMessage(nodeList);
  report.setActionExitCode(ExitCode.SUCCESS);
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  ListNodesHelper lnh=new ListNodesHelper(logger,servers,nodes,""String_Node_Str"",long_opt,terse);
  String nodeList=lnh.getNodeList();
  report.setMessage(nodeList);
  report.setActionExitCode(ExitCode.SUCCESS);
}"
30344,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  Logger logger=context.getLogger();
  ListNodesHelper lnh=new ListNodesHelper(logger,servers,nodes,""String_Node_Str"",long_opt,terse);
  String nodeList=lnh.getNodeList();
  report.setMessage(nodeList);
  report.setActionExitCode(ExitCode.SUCCESS);
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  ListNodesHelper lnh=new ListNodesHelper(logger,servers,nodes,""String_Node_Str"",long_opt,terse);
  String nodeList=lnh.getNodeList();
  report.setMessage(nodeList);
  report.setActionExitCode(ExitCode.SUCCESS);
}"
30345,"private void validateSSHConnection(ParameterMap map) throws CommandValidationException {
  String nodehost=map.getOne(PARAM_NODEHOST);
  String installdir=map.getOne(PARAM_INSTALLDIR);
  String nodedir=map.getOne(PARAM_NODEDIR);
  String sshport=map.getOne(PARAM_SSHPORT);
  String sshuser=map.getOne(PARAM_SSHUSER);
  String sshkeyfile=map.getOne(PARAM_SSHKEYFILE);
  String sshpassword=map.getOne(PARAM_SSHPASSWORD);
  String sshkeypassphrase=map.getOne(PARAM_SSHKEYPASSPHRASE);
  boolean installFlag=Boolean.parseBoolean(map.getOne(PARAM_INSTALL));
  if (!NetUtils.isPortStringValid(resolver.resolve(sshport))) {
    throw new CommandValidationException(Strings.get(""String_Node_Str"",sshport));
  }
  int port=Integer.parseInt(resolver.resolve(sshport));
  try {
    String resolvedInstallDir=resolver.resolve(installdir);
    sshL.validate(resolver.resolve(nodehost),port,resolver.resolve(sshuser),sshpassword,resolver.resolve(sshkeyfile),sshkeypassphrase,resolvedInstallDir,LANDMARK_FILE,logger);
  }
 catch (  IOException e) {
    String m1=e.getMessage();
    String m2=""String_Node_Str"";
    Throwable e2=e.getCause();
    if (e2 != null) {
      m2=e2.getMessage();
    }
    if (e instanceof FileNotFoundException) {
      logger.warning(StringUtils.cat(""String_Node_Str"",m1,m2,sshL.toString()));
      if (!installFlag)       throw new CommandValidationException(StringUtils.cat(NL,m1,m2));
    }
 else {
      String msg=Strings.get(""String_Node_Str"",nodehost);
      logger.warning(StringUtils.cat(""String_Node_Str"",msg,m1,m2,sshL.toString()));
      throw new CommandValidationException(StringUtils.cat(NL,msg,m1,m2));
    }
  }
}","private void validateSSHConnection(ParameterMap map) throws CommandValidationException {
  String nodehost=map.getOne(PARAM_NODEHOST);
  String installdir=map.getOne(PARAM_INSTALLDIR);
  String sshport=map.getOne(PARAM_SSHPORT);
  String sshuser=map.getOne(PARAM_SSHUSER);
  String sshkeyfile=map.getOne(PARAM_SSHKEYFILE);
  String sshpassword=map.getOne(PARAM_SSHPASSWORD);
  String sshkeypassphrase=map.getOne(PARAM_SSHKEYPASSPHRASE);
  boolean installFlag=Boolean.parseBoolean(map.getOne(PARAM_INSTALL));
  if (!NetUtils.isPortStringValid(resolver.resolve(sshport))) {
    throw new CommandValidationException(Strings.get(""String_Node_Str"",sshport));
  }
  int port=Integer.parseInt(resolver.resolve(sshport));
  try {
    String resolvedInstallDir=resolver.resolve(installdir);
    sshL.validate(resolver.resolve(nodehost),port,resolver.resolve(sshuser),sshpassword,resolver.resolve(sshkeyfile),sshkeypassphrase,resolvedInstallDir,LANDMARK_FILE,logger);
  }
 catch (  IOException e) {
    String m1=e.getMessage();
    String m2=""String_Node_Str"";
    Throwable e2=e.getCause();
    if (e2 != null) {
      m2=e2.getMessage();
    }
    if (e instanceof FileNotFoundException) {
      logger.warning(StringUtils.cat(""String_Node_Str"",m1,m2,sshL.toString()));
      if (!installFlag)       throw new CommandValidationException(StringUtils.cat(NL,m1,m2));
    }
 else {
      String msg=Strings.get(""String_Node_Str"",nodehost);
      logger.warning(StringUtils.cat(""String_Node_Str"",msg,m1,m2,sshL.toString()));
      throw new CommandValidationException(StringUtils.cat(NL,msg,m1,m2));
    }
  }
}"
30346,"void validateHostName(String hostName) throws CommandValidationException {
  if (!StringUtils.ok(hostName)) {
    throw new CommandValidationException(Strings.get(""String_Node_Str""));
  }
  try {
    InetAddress addr=InetAddress.getByName(hostName);
  }
 catch (  UnknownHostException e) {
    throw new CommandValidationException(Strings.get(""String_Node_Str"",hostName),e);
  }
}","void validateHostName(String hostName) throws CommandValidationException {
  if (!StringUtils.ok(hostName)) {
    throw new CommandValidationException(Strings.get(""String_Node_Str""));
  }
  try {
    InetAddress.getByName(hostName);
  }
 catch (  UnknownHostException e) {
    throw new CommandValidationException(Strings.get(""String_Node_Str"",hostName),e);
  }
}"
30347,"@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  StringBuilder msg=new StringBuilder();
  Node theNode=null;
  logger=context.getLogger();
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  theNode=nodes.getNode(name);
  if (theNode == null) {
    String m=Strings.get(""String_Node_Str"",name);
    logger.warning(m);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(m);
    return;
  }
  if (!NodeUtils.isSSHNode(theNode)) {
    String m=Strings.get(""String_Node_Str"",name);
    logger.warning(m);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(m);
    return;
  }
  try {
    String version=""String_Node_Str"";
    if (validate) {
      nodeUtils.validate(theNode);
      version=Strings.get(""String_Node_Str"",theNode.getInstallDir(),nodeUtils.getGlassFishVersionOnNode(theNode));
    }
 else {
      nodeUtils.pingSSHConnection(theNode);
    }
    String m1=Strings.get(""String_Node_Str"",name,theNode.getNodeHost());
    if (StringUtils.ok(version)) {
      m1=m1 + NL + version;
    }
    report.setMessage(m1.toString());
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  CommandValidationException e) {
    String m1=Strings.get(""String_Node_Str"",name,theNode.getNodeHost());
    msg.append(StringUtils.cat(NL,m1,e.getMessage()));
    report.setMessage(msg.toString());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
}","@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  StringBuilder msg=new StringBuilder();
  Node theNode=null;
  logger=context.getLogger();
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  theNode=nodes.getNode(name);
  if (theNode == null) {
    String m=Strings.get(""String_Node_Str"",name);
    logger.warning(m);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(m);
    return;
  }
  if (!NodeUtils.isSSHNode(theNode)) {
    String m=Strings.get(""String_Node_Str"",name);
    logger.warning(m);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(m);
    return;
  }
  try {
    String version=""String_Node_Str"";
    if (validate) {
      nodeUtils.validate(theNode);
      version=Strings.get(""String_Node_Str"",theNode.getInstallDir(),nodeUtils.getGlassFishVersionOnNode(theNode));
    }
 else {
      nodeUtils.pingSSHConnection(theNode);
    }
    String m1=Strings.get(""String_Node_Str"",name,theNode.getNodeHost());
    if (StringUtils.ok(version)) {
      m1=m1 + NL + version;
    }
    report.setMessage(m1);
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  }
 catch (  CommandValidationException e) {
    String m1=Strings.get(""String_Node_Str"",name,theNode.getNodeHost());
    msg.append(StringUtils.cat(NL,m1,e.getMessage()));
    report.setMessage(msg.toString());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
}"
30348,"public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  SSHLauncher launcher;
  RemoteConnectHelper rch;
  int dasPort;
  String dasHost;
  if (env.isDas()) {
    if (kill) {
      errorMessage=killInstance(context);
    }
 else {
      errorMessage=callInstance();
    }
  }
 else {
    errorMessage=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
  }
  if (errorMessage == null && !kill) {
    errorMessage=pollForDeath();
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  report.setMessage(Strings.get(""String_Node_Str"",instanceName));
  if (kill) {
    return;
  }
  String nodeName=instance.getNodeRef();
  Node node=nodes.getNode(nodeName);
  String nodeHost=node.getNodeHost();
  InstanceDirUtils insDU=new InstanceDirUtils(node,serverContext);
  try {
    pidFile=new File(insDU.getLocalInstanceDir(instance.getName()),""String_Node_Str"");
  }
 catch (  java.io.IOException eio) {
    return;
  }
  dasPort=helper.getAdminPort(SystemPropertyConstants.DAS_SERVER_NAME);
  dasHost=System.getProperty(SystemPropertyConstants.HOST_NAME_PROPERTY);
  rch=new RemoteConnectHelper(habitat,node,logger,dasHost,dasPort);
  if (rch.isLocalhost()) {
    if (pidFile.exists()) {
      errorMessage=pollForRealDeath(""String_Node_Str"");
    }
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    launcher=habitat.getComponent(SSHLauncher.class);
    launcher.init(node,logger);
    try {
      ftpClient=launcher.getSFTPClient();
      if (ftpClient.exists(pidFile.toString())) {
        errorMessage=pollForRealDeath(""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
    }
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
  }
}","public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  SSHLauncher launcher;
  int dasPort;
  String dasHost;
  if (env.isDas()) {
    if (kill) {
      errorMessage=killInstance(context);
    }
 else {
      errorMessage=callInstance();
    }
  }
 else {
    errorMessage=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
  }
  if (errorMessage == null && !kill) {
    errorMessage=pollForDeath();
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  report.setMessage(Strings.get(""String_Node_Str"",instanceName));
  if (kill) {
    return;
  }
  String nodeName=instance.getNodeRef();
  Node node=nodes.getNode(nodeName);
  String nodeHost=node.getNodeHost();
  InstanceDirUtils insDU=new InstanceDirUtils(node,serverContext);
  try {
    pidFile=new File(insDU.getLocalInstanceDir(instance.getName()),""String_Node_Str"");
  }
 catch (  java.io.IOException eio) {
    return;
  }
  dasPort=helper.getAdminPort(SystemPropertyConstants.DAS_SERVER_NAME);
  dasHost=System.getProperty(SystemPropertyConstants.HOST_NAME_PROPERTY);
  if (node.isLocal()) {
    if (pidFile.exists()) {
      errorMessage=pollForRealDeath(""String_Node_Str"");
    }
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    launcher=habitat.getComponent(SSHLauncher.class);
    launcher.init(node,logger);
    try {
      ftpClient=launcher.getSFTPClient();
      if (ftpClient.exists(pidFile.toString())) {
        errorMessage=pollForRealDeath(""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
    }
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
  }
}"
30349,"private int runAdminCommandOnRemoteNode(Node node,StringBuilder output,List<String> args,List<String> stdinLines) throws SSHCommandExecutionException, IllegalArgumentException, UnsupportedOperationException {
  if (!isSshNode(node)) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  String installDir=node.getInstallDirUnixStyle() + ""String_Node_Str"" + SystemPropertyConstants.getComponentName();
  if (!StringUtils.ok(installDir)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<String> fullcommand=new ArrayList<String>();
  fullcommand.add(installDir + ""String_Node_Str"");
  fullcommand.addAll(args);
  try {
    lastCommandRun=commandListToString(fullcommand);
    trace(""String_Node_Str"" + node.getNodeHost() + ""String_Node_Str""+ lastCommandRun);
    sshL=habitat.getComponent(SSHLauncher.class);
    sshL.init(node,logger);
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    commandStatus=sshL.runCommand(fullcommand,outStream,stdinLines);
    String results=outStream.toString();
    output.append(outStream.toString());
    return commandStatus;
  }
 catch (  IOException ex) {
    String m1=""String_Node_Str"" + ex.getMessage();
    String m2=""String_Node_Str"";
    Throwable e2=ex.getCause();
    if (e2 != null) {
      m2=e2.getMessage();
    }
    logger.severe(""String_Node_Str"" + lastCommandRun);
    SSHCommandExecutionException cee=new SSHCommandExecutionException(StringUtils.cat(""String_Node_Str"",m1));
    cee.setSSHSettings(sshL.toString());
    cee.setCommandRun(lastCommandRun);
    throw cee;
  }
catch (  java.lang.InterruptedException ei) {
    ei.printStackTrace();
    String m1=ei.getMessage();
    String m2=""String_Node_Str"";
    Throwable e2=ei.getCause();
    if (e2 != null) {
      m2=e2.getMessage();
    }
    logger.severe(""String_Node_Str"" + lastCommandRun);
    SSHCommandExecutionException cee=new SSHCommandExecutionException(StringUtils.cat(""String_Node_Str"",m1,m2));
    cee.setSSHSettings(sshL.toString());
    cee.setCommandRun(lastCommandRun);
    throw cee;
  }
}","private int runAdminCommandOnRemoteNode(Node node,StringBuilder output,List<String> args,List<String> stdinLines) throws SSHCommandExecutionException, IllegalArgumentException, UnsupportedOperationException {
  if (!isSshNode(node)) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  String installDir=node.getInstallDirUnixStyle() + ""String_Node_Str"" + SystemPropertyConstants.getComponentName();
  if (!StringUtils.ok(installDir)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<String> fullcommand=new ArrayList<String>();
  fullcommand.add(installDir + ""String_Node_Str"");
  fullcommand.addAll(args);
  try {
    lastCommandRun=commandListToString(fullcommand);
    trace(""String_Node_Str"" + node.getNodeHost() + ""String_Node_Str""+ lastCommandRun);
    sshL=habitat.getComponent(SSHLauncher.class);
    sshL.init(node,logger);
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    commandStatus=sshL.runCommand(fullcommand,outStream,stdinLines);
    output.append(outStream.toString());
    return commandStatus;
  }
 catch (  IOException ex) {
    String m1=""String_Node_Str"" + ex.getMessage();
    String m2=""String_Node_Str"";
    Throwable e2=ex.getCause();
    if (e2 != null) {
      m2=e2.getMessage();
    }
    logger.severe(""String_Node_Str"" + lastCommandRun);
    SSHCommandExecutionException cee=new SSHCommandExecutionException(StringUtils.cat(""String_Node_Str"",m1,m2));
    cee.setSSHSettings(sshL.toString());
    cee.setCommandRun(lastCommandRun);
    throw cee;
  }
catch (  java.lang.InterruptedException ei) {
    ei.printStackTrace();
    String m1=ei.getMessage();
    String m2=""String_Node_Str"";
    Throwable e2=ei.getCause();
    if (e2 != null) {
      m2=e2.getMessage();
    }
    logger.severe(""String_Node_Str"" + lastCommandRun);
    SSHCommandExecutionException cee=new SSHCommandExecutionException(StringUtils.cat(""String_Node_Str"",m1,m2));
    cee.setSSHSettings(sshL.toString());
    cee.setCommandRun(lastCommandRun);
    throw cee;
  }
}"
30350,"public void deployApplication(String appName,ReadableArchive cloudArchive){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=serviceDependencyDiscovery(appName,cloudArchive,installedPlugins);
  Set<ProvisionedService> appProvisionedSvcs=provisionServices(installedPlugins,appServiceMetadata,null);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,true);
  deployArchive(cloudArchive,installedPlugins);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,false);
}","public void deployApplication(String appName,ReadableArchive cloudArchive){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=serviceDependencyDiscovery(appName,cloudArchive,installedPlugins);
  Set<ProvisionedService> appProvisionedSvcs=provisionServices(installedPlugins,appServiceMetadata,null);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,true,null);
  deployArchive(cloudArchive,installedPlugins);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,false,null);
}"
30351,"private void associateProvisionedServices(Set<Plugin> installedPlugins,ServiceMetadata appServiceMetadata,Set<ProvisionedService> appProvisionedSvcs,boolean preDeployment){
  logger.entering(getClass().getName(),""String_Node_Str"" + preDeployment);
  for (  ProvisionedService ps : appProvisionedSvcs) {
    for (    Plugin<?> svcPlugin : installedPlugins) {
      if (!ps.getServiceType().equals(svcPlugin.getServiceType())) {
        Set<ServiceReference> appSRs=appServiceMetadata.getServiceReferences();
        for (        ServiceReference sr : appSRs) {
          logger.log(Level.INFO,""String_Node_Str"" + ps + ""String_Node_Str""+ sr+ ""String_Node_Str""+ svcPlugin);
          svcPlugin.associateServices(ps,sr,preDeployment);
        }
      }
    }
  }
}","private void associateProvisionedServices(Set<Plugin> installedPlugins,ServiceMetadata appServiceMetadata,Set<ProvisionedService> appProvisionedSvcs,boolean preDeployment,DeploymentContext dc){
  logger.entering(getClass().getName(),""String_Node_Str"" + preDeployment);
  for (  ProvisionedService ps : appProvisionedSvcs) {
    for (    Plugin<?> svcPlugin : installedPlugins) {
      if (!ps.getServiceType().equals(svcPlugin.getServiceType())) {
        Set<ServiceReference> appSRs=appServiceMetadata.getServiceReferences();
        for (        ServiceReference sr : appSRs) {
          logger.log(Level.INFO,""String_Node_Str"" + ps + ""String_Node_Str""+ sr+ ""String_Node_Str""+ svcPlugin);
          svcPlugin.associateServices(ps,sr,preDeployment,dc);
        }
      }
    }
  }
}"
30352,"public void provisionServicesForApplication(String appName,ReadableArchive archive,DeploymentContext dc){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=serviceDependencyDiscovery(appName,archive,installedPlugins);
  Set<ProvisionedService> appProvisionedSvcs=provisionServices(installedPlugins,appServiceMetadata,dc);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,true);
  serviceMetadata.put(appName,appServiceMetadata);
  provisionedServices.put(appName,appProvisionedSvcs);
  logger.exiting(getClass().getName(),""String_Node_Str"");
}","public void provisionServicesForApplication(String appName,ReadableArchive archive,DeploymentContext dc){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=serviceDependencyDiscovery(appName,archive,installedPlugins);
  Set<ProvisionedService> appProvisionedSvcs=provisionServices(installedPlugins,appServiceMetadata,dc);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,true,dc);
  serviceMetadata.put(appName,appServiceMetadata);
  provisionedServices.put(appName,appProvisionedSvcs);
  logger.exiting(getClass().getName(),""String_Node_Str"");
}"
30353,"public void postDeploy(String appName,ReadableArchive cloudArchive){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=serviceMetadata.get(appName);
  Set<ProvisionedService> appProvisionedSvcs=provisionedServices.get(appName);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,false);
  logger.exiting(getClass().getName(),""String_Node_Str"");
}","public void postDeploy(String appName,ReadableArchive archive,DeploymentContext dc){
  logger.entering(getClass().getName(),""String_Node_Str"");
  Set<Plugin> installedPlugins=getPlugins();
  ServiceMetadata appServiceMetadata=serviceMetadata.get(appName);
  Set<ProvisionedService> appProvisionedSvcs=provisionedServices.get(appName);
  associateProvisionedServices(installedPlugins,appServiceMetadata,appProvisionedSvcs,false,dc);
  logger.exiting(getClass().getName(),""String_Node_Str"");
}"
30354,"public void after(ExtendedDeploymentContext.Phase phase,ExtendedDeploymentContext context){
  if (!usingDeployService) {
    if (phase.equals(ExtendedDeploymentContext.Phase.REPLICATION)) {
      if (serverEnvironment.isDas()) {
        OpsParams params=context.getCommandParameters(OpsParams.class);
        ReadableArchive archive=context.getSource();
        if (params.origin == OpsParams.Origin.deploy) {
          String appName=params.name();
          postDeploy(appName,archive);
        }
        if (params.origin == OpsParams.Origin.undeploy) {
          if (params.command == OpsParams.Command.undeploy) {
            String appName=params.name();
            postUndeploy(appName,context.getSource(),context);
            serviceMetadata.remove(appName);
            provisionedServices.remove(appName);
          }
        }
      }
    }
  }
}","public void after(ExtendedDeploymentContext.Phase phase,ExtendedDeploymentContext context){
  if (!usingDeployService) {
    if (phase.equals(ExtendedDeploymentContext.Phase.REPLICATION)) {
      if (serverEnvironment.isDas()) {
        OpsParams params=context.getCommandParameters(OpsParams.class);
        ReadableArchive archive=context.getSource();
        if (params.origin == OpsParams.Origin.deploy) {
          String appName=params.name();
          postDeploy(appName,archive,context);
        }
        if (params.origin == OpsParams.Origin.undeploy) {
          if (params.command == OpsParams.Command.undeploy) {
            String appName=params.name();
            postUndeploy(appName,context.getSource(),context);
            serviceMetadata.remove(appName);
            provisionedServices.remove(appName);
          }
        }
      }
    }
  }
}"
30355,"public ServiceMetadata discoverDeclaredServices(String appName,ReadableArchive ra){
  ServiceMetadata serviceMetadata=null;
  try {
    InputStream inputStream=ra.getEntry(""String_Node_Str"");
    if (inputStream != null) {
      JAXBContext jaxbContext=JAXBContext.newInstance(ServiceMetadata.class);
      Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
      serviceMetadata=(ServiceMetadata)unmarshaller.unmarshal(inputStream);
      if (appName != null) {
        serviceMetadata.setAppName(appName);
      }
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  if (serviceMetadata != null) {
    for (    ServiceDescription serviceDescription : serviceMetadata.getServiceDescriptions()) {
      serviceDescription.setAppName(appName);
    }
  }
  return serviceMetadata;
}","public ServiceMetadata discoverDeclaredServices(String appName,ReadableArchive ra){
  ServiceMetadata serviceMetadata=null;
  try {
    InputStream inputStream=null;
    if (DeploymentUtils.isWebArchive(ra)) {
      inputStream=ra.getEntry(""String_Node_Str"");
    }
 else {
      inputStream=ra.getEntry(""String_Node_Str"");
    }
    if (inputStream != null) {
      JAXBContext jaxbContext=JAXBContext.newInstance(ServiceMetadata.class);
      Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
      serviceMetadata=(ServiceMetadata)unmarshaller.unmarshal(inputStream);
      if (appName != null) {
        serviceMetadata.setAppName(appName);
      }
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  if (serviceMetadata != null) {
    for (    ServiceDescription serviceDescription : serviceMetadata.getServiceDescriptions()) {
      serviceDescription.setAppName(appName);
    }
  }
  return serviceMetadata;
}"
30356,"@XmlElement(name=""String_Node_Str"") public Set<ServiceDescription> getServiceDescriptions(){
  return serviceDescriptions == null ? new HashSet<ServiceDescription>() : serviceDescriptions;
}","@XmlElement(name=""String_Node_Str"") public Set<ServiceDescription> getServiceDescriptions(){
  if (serviceDescriptions == null) {
    serviceDescriptions=new HashSet<ServiceDescription>();
  }
  return serviceDescriptions;
}"
30357,"/** 
 * A <code>ProvisionedService</code> for a <code>ServiceReference</code> is associated with each other through this method.
 * @param beforeDeployment indicates if this association is happening before thedeployment of the application.
 */
public void associateServices(ProvisionedService provisionedSvc,ServiceReference svcRef,boolean beforeDeployment);","/** 
 * A <code>ProvisionedService</code> for a <code>ServiceReference</code> is associated with each other through this method.
 * @param beforeDeployment indicates if this association is happening before thedeployment of the application.
 */
public void associateServices(ProvisionedService provisionedSvc,ServiceReference svcRef,boolean beforeDeployment,DeploymentContext dc);"
30358,"/** 
 * This method is for processing security annotation associated to ejb. Dervied class call this method may like to override protected void processEjbMethodSecurity(Annotation authAnnotation, MethodDescriptor md, EjbDescriptor ejbDesc)
 */
@Override public void postProcessAnnotation(AnnotationInfo ainfo,AnnotatedElementHandler aeHandler) throws AnnotationProcessorException {
  EjbContext ejbContext=(EjbContext)aeHandler;
  EjbDescriptor ejbDesc=ejbContext.getDescriptor();
  Annotation authAnnotation=ainfo.getAnnotation();
  if (!ejbContext.isInherited() && (ejbDesc.getMethodPermissionsFromDD() == null || ejbDesc.getMethodPermissionsFromDD().size() == 0)) {
    for (    MethodDescriptor md : getMethodAllDescriptors(ejbDesc)) {
      processEjbMethodSecurity(authAnnotation,md,ejbDesc);
    }
  }
 else {
    Class classAn=(Class)ainfo.getAnnotatedElement();
    for (    Object next : ejbDesc.getSecurityBusinessMethodDescriptors()) {
      MethodDescriptor md=(MethodDescriptor)next;
      if (classAn.equals(ejbContext.getDeclaringClass(md)) && !hasMethodPermissionsFromDD(md,ejbDesc)) {
        processEjbMethodSecurity(authAnnotation,md,ejbDesc);
      }
    }
  }
}","/** 
 * This method is for processing security annotation associated to ejb. Dervied class call this method may like to override protected void processEjbMethodSecurity(Annotation authAnnotation, MethodDescriptor md, EjbDescriptor ejbDesc)
 */
@Override public void postProcessAnnotation(AnnotationInfo ainfo,EjbContext ejbContext) throws AnnotationProcessorException {
  EjbDescriptor ejbDesc=ejbContext.getDescriptor();
  Annotation authAnnotation=ainfo.getAnnotation();
  if (!ejbContext.isInherited() && (ejbDesc.getMethodPermissionsFromDD() == null || ejbDesc.getMethodPermissionsFromDD().size() == 0)) {
    for (    MethodDescriptor md : getMethodAllDescriptors(ejbDesc)) {
      processEjbMethodSecurity(authAnnotation,md,ejbDesc);
    }
  }
 else {
    Class classAn=(Class)ainfo.getAnnotatedElement();
    for (    Object next : ejbDesc.getSecurityBusinessMethodDescriptors()) {
      MethodDescriptor md=(MethodDescriptor)next;
      if (classAn.equals(ejbContext.getDeclaringClass(md)) && !hasMethodPermissionsFromDD(md,ejbDesc)) {
        processEjbMethodSecurity(authAnnotation,md,ejbDesc);
      }
    }
  }
}"
30359,"public void postProcessAnnotation(AnnotationInfo ainfo,AnnotatedElementHandler aeHandler) throws AnnotationProcessorException ;","public void postProcessAnnotation(AnnotationInfo ainfo,T aeHandler) throws AnnotationProcessorException ;"
30360,"/** 
 * Set the default value (from class type annotation) on all methods that don't have a value.
 */
public void postProcessAnnotation(AnnotationInfo ainfo,AnnotatedElementHandler aeHandler) throws AnnotationProcessorException {
  EjbContext ejbContext=(EjbContext)aeHandler;
  EjbSessionDescriptor ejbDesc=(EjbSessionDescriptor)ejbContext.getDescriptor();
  Class classAn=(Class)ainfo.getAnnotatedElement();
  AccessTimeout timeoutAnn=(AccessTimeout)ainfo.getAnnotation();
  List<Method> toProcess=new ArrayList<Method>();
  for (  Method m : ejbContext.getComponentDefinitionMethods()) {
    if (classAn.equals(m.getDeclaringClass())) {
      toProcess.add(m);
    }
  }
  for (  Method m : classAn.getDeclaredMethods()) {
    if (Modifier.isPrivate(m.getModifiers())) {
      toProcess.add(m);
    }
  }
  for (  Method m : toProcess) {
    if (!matchesExistingAccessTimeoutMethod(m,ejbDesc)) {
      MethodDescriptor newMethodDesc=new MethodDescriptor(m);
      ejbDesc.addAccessTimeoutMethod(newMethodDesc,timeoutAnn.value(),timeoutAnn.unit());
    }
  }
}","/** 
 * Set the default value (from class type annotation) on all methods that don't have a value.
 */
public void postProcessAnnotation(AnnotationInfo ainfo,EjbContext ejbContext) throws AnnotationProcessorException {
  EjbSessionDescriptor ejbDesc=(EjbSessionDescriptor)ejbContext.getDescriptor();
  Class classAn=(Class)ainfo.getAnnotatedElement();
  AccessTimeout timeoutAnn=(AccessTimeout)ainfo.getAnnotation();
  List<Method> toProcess=new ArrayList<Method>();
  for (  Method m : ejbContext.getComponentDefinitionMethods()) {
    if (classAn.equals(m.getDeclaringClass())) {
      toProcess.add(m);
    }
  }
  for (  Method m : classAn.getDeclaredMethods()) {
    if (Modifier.isPrivate(m.getModifiers())) {
      toProcess.add(m);
    }
  }
  for (  Method m : toProcess) {
    if (!matchesExistingAccessTimeoutMethod(m,ejbDesc)) {
      MethodDescriptor newMethodDesc=new MethodDescriptor(m);
      ejbDesc.addAccessTimeoutMethod(newMethodDesc,timeoutAnn.value(),timeoutAnn.unit());
    }
  }
}"
30361,"/** 
 * Set the default value (from class type annotation) on all methods that don't have a value. Class type annotation applies to all EJB 3.x Local/Remote/no-interface  views in which  that  business method is exposed for that bean. 
 */
public void postProcessAnnotation(AnnotationInfo ainfo,AnnotatedElementHandler aeHandler) throws AnnotationProcessorException {
  EjbContext ejbContext=(EjbContext)aeHandler;
  EjbDescriptor ejbDesc=ejbContext.getDescriptor();
  Class classAn=(Class)ainfo.getAnnotatedElement();
  Method[] methods=classAn.getDeclaredMethods();
  for (  Method m0 : methods) {
    setAsynchronous(m0,ejbDesc);
  }
}","/** 
 * Set the default value (from class type annotation) on all methods that don't have a value. Class type annotation applies to all EJB 3.x Local/Remote/no-interface  views in which  that  business method is exposed for that bean. 
 */
public void postProcessAnnotation(AnnotationInfo ainfo,EjbContext ejbContext) throws AnnotationProcessorException {
  EjbDescriptor ejbDesc=ejbContext.getDescriptor();
  Class classAn=(Class)ainfo.getAnnotatedElement();
  Method[] methods=classAn.getDeclaredMethods();
  for (  Method m0 : methods) {
    setAsynchronous(m0,ejbDesc);
  }
}"
30362,"/** 
 * Set the default value (from class type annotation) on all methods that don't have a value.
 */
public void postProcessAnnotation(AnnotationInfo ainfo,AnnotatedElementHandler aeHandler) throws AnnotationProcessorException {
  EjbContext ejbContext=(EjbContext)aeHandler;
  EjbSessionDescriptor ejbDesc=(EjbSessionDescriptor)ejbContext.getDescriptor();
  Class classAn=(Class)ainfo.getAnnotatedElement();
  Lock lockAnn=(Lock)ainfo.getAnnotation();
  List<Method> toProcess=new ArrayList<Method>();
  for (  Method m : ejbContext.getComponentDefinitionMethods()) {
    if (classAn.equals(m.getDeclaringClass())) {
      toProcess.add(m);
    }
  }
  for (  Method m : classAn.getDeclaredMethods()) {
    if (Modifier.isPrivate(m.getModifiers())) {
      toProcess.add(m);
    }
  }
  for (  Method m : toProcess) {
    if (!matchesExistingReadOrWriteLockMethod(m,ejbDesc)) {
      MethodDescriptor newMethodDesc=new MethodDescriptor(m);
      if (lockAnn.value() == LockType.WRITE) {
        ejbDesc.addWriteLockMethod(newMethodDesc);
      }
 else {
        ejbDesc.addReadLockMethod(newMethodDesc);
      }
    }
  }
}","/** 
 * Set the default value (from class type annotation) on all methods that don't have a value.
 */
public void postProcessAnnotation(AnnotationInfo ainfo,EjbContext ejbContext) throws AnnotationProcessorException {
  EjbSessionDescriptor ejbDesc=(EjbSessionDescriptor)ejbContext.getDescriptor();
  Class classAn=(Class)ainfo.getAnnotatedElement();
  Lock lockAnn=(Lock)ainfo.getAnnotation();
  List<Method> toProcess=new ArrayList<Method>();
  for (  Method m : ejbContext.getComponentDefinitionMethods()) {
    if (classAn.equals(m.getDeclaringClass())) {
      toProcess.add(m);
    }
  }
  for (  Method m : classAn.getDeclaredMethods()) {
    if (Modifier.isPrivate(m.getModifiers())) {
      toProcess.add(m);
    }
  }
  for (  Method m : toProcess) {
    if (!matchesExistingReadOrWriteLockMethod(m,ejbDesc)) {
      MethodDescriptor newMethodDesc=new MethodDescriptor(m);
      if (lockAnn.value() == LockType.WRITE) {
        ejbDesc.addWriteLockMethod(newMethodDesc);
      }
 else {
        ejbDesc.addReadLockMethod(newMethodDesc);
      }
    }
  }
}"
30363,"/** 
 * Set the default value (from class type annotation) on all methods that don't have a value.
 */
public void postProcessAnnotation(AnnotationInfo ainfo,AnnotatedElementHandler aeHandler) throws AnnotationProcessorException {
  EjbContext ejbContext=(EjbContext)aeHandler;
  EjbDescriptor ejbDesc=ejbContext.getDescriptor();
  TransactionAttribute taAn=(TransactionAttribute)ainfo.getAnnotation();
  ContainerTransaction containerTransaction=getContainerTransaction(taAn.value());
  Class classAn=(Class)ainfo.getAnnotatedElement();
  Set txBusMethods=ejbDesc.getTxBusinessMethodDescriptors();
  for (  Object mdObj : txBusMethods) {
    MethodDescriptor md=(MethodDescriptor)mdObj;
    if (classAn.equals(ejbContext.getDeclaringClass(md)) && ejbDesc.getContainerTransactionFor(md) == null) {
      ejbDesc.setContainerTransactionFor(md,containerTransaction);
    }
  }
}","/** 
 * Set the default value (from class type annotation) on all methods that don't have a value.
 */
public void postProcessAnnotation(AnnotationInfo ainfo,EjbContext ejbContext) throws AnnotationProcessorException {
  EjbDescriptor ejbDesc=ejbContext.getDescriptor();
  TransactionAttribute taAn=(TransactionAttribute)ainfo.getAnnotation();
  ContainerTransaction containerTransaction=getContainerTransaction(taAn.value());
  Class classAn=(Class)ainfo.getAnnotatedElement();
  Set txBusMethods=ejbDesc.getTxBusinessMethodDescriptors();
  for (  Object mdObj : txBusMethods) {
    MethodDescriptor md=(MethodDescriptor)mdObj;
    if (classAn.equals(ejbContext.getDeclaringClass(md)) && ejbDesc.getContainerTransactionFor(md) == null) {
      ejbDesc.setContainerTransactionFor(md,containerTransaction);
    }
  }
}"
30364,"@Override public void flush(){
  if (staleEntryNames.isEmpty()) {
    logger.log(DEBUG_LEVEL,""String_Node_Str"");
    Util.markerFile(archiveFile).delete();
    return;
  }
  PrintStream ps=null;
  try {
    ps=new PrintStream(Util.markerFile(archiveFile));
  }
 catch (  FileNotFoundException ex) {
    throw new RuntimeException(ex);
  }
  for (  String staleEntryName : staleEntryNames) {
    ps.println(staleEntryName);
  }
  ps.close();
  logger.log(DEBUG_LEVEL,""String_Node_Str"",new Object[]{markerFile.getAbsolutePath(),staleEntryNames.toString()});
}","@Override public void flush(){
  if (staleEntryNames.isEmpty()) {
    logger.log(DEBUG_LEVEL,""String_Node_Str"");
    final File marker=Util.markerFile(archiveFile);
    if (!marker.exists() || marker.delete()) {
      return;
    }
    logger.log(Level.FINE,""String_Node_Str"",marker.getAbsolutePath());
  }
  PrintStream ps=null;
  try {
    ps=new PrintStream(Util.markerFile(archiveFile));
  }
 catch (  FileNotFoundException ex) {
    throw new RuntimeException(ex);
  }
  for (  String staleEntryName : staleEntryNames) {
    ps.println(staleEntryName);
  }
  ps.close();
  logger.log(DEBUG_LEVEL,""String_Node_Str"",new Object[]{markerFile.getAbsolutePath(),staleEntryNames.toString()});
}"
30365,"private List<String> getHostAndPort(HttpRequest request) throws IOException {
  boolean isWebServerRequest=false;
  Enumeration headerNames=((HttpServletRequest)request.getRequest()).getHeaderNames();
  String[] hostPort=new String[2];
  boolean isHeaderPresent=false;
  while (headerNames.hasMoreElements()) {
    String headerName=(String)headerNames.nextElement();
    String hostVal=""String_Node_Str"";
    if (headerName.equalsIgnoreCase(""String_Node_Str"")) {
      hostVal=((HttpServletRequest)request.getRequest()).getHeader(headerName);
      isHeaderPresent=true;
      hostPort=hostVal.split(""String_Node_Str"");
    }
  }
  boolean isHostPortNullOrEmpty=(hostPort[1] == null || hostPort[1].trim().isEmpty());
  if (!isHeaderPresent) {
    isWebServerRequest=false;
  }
 else   if (isHostPortNullOrEmpty) {
    isWebServerRequest=true;
  }
 else {
    boolean breakFromLoop=false;
    for (    NetworkListener nwListener : nwListeners.getNetworkListener()) {
      String nwAddress=nwListener.getAddress();
      InetAddress[] localHostAdresses=new InetAddress[10];
      if (nwAddress == null || nwAddress.equals(""String_Node_Str"")) {
        nwAddress=NetUtils.getCanonicalHostName();
        if (!nwAddress.equals(hostPort[0])) {
          localHostAdresses=NetUtils.getHostAddresses();
          InetAddress hostAddress=InetAddress.getByName(hostPort[0]);
          for (          InetAddress inetAdress : localHostAdresses) {
            if (inetAdress.equals(hostAddress)) {
              String nwPort=nwListener.getPort();
              if (!nwPort.equals(hostPort[1])) {
                isWebServerRequest=true;
              }
 else {
                isWebServerRequest=false;
                breakFromLoop=true;
                break;
              }
            }
          }
        }
 else {
          String nwPort=nwListener.getPort();
          if (!nwPort.equals(hostPort[1])) {
            isWebServerRequest=true;
          }
 else {
            isWebServerRequest=false;
            breakFromLoop=true;
          }
        }
      }
      if (breakFromLoop && !isWebServerRequest) {
        break;
      }
    }
  }
  String serverHost=request.getRequest().getServerName();
  int redirectPort=request.getConnector().getRedirectPort();
  if (isWebServerRequest) {
    serverHost=hostPort[0];
    if (isHostPortNullOrEmpty) {
      redirectPort=-1;
    }
 else {
      redirectPort=Integer.parseInt(hostPort[1]);
    }
  }
  List<String> hostAndPort=new ArrayList<String>();
  hostAndPort.add(serverHost);
  hostAndPort.add(String.valueOf(redirectPort));
  return hostAndPort;
}","private List<String> getHostAndPort(HttpRequest request) throws IOException {
  boolean isWebServerRequest=false;
  Enumeration headerNames=((HttpServletRequest)request.getRequest()).getHeaderNames();
  String[] hostPort=null;
  boolean isHeaderPresent=false;
  while (headerNames.hasMoreElements()) {
    String headerName=(String)headerNames.nextElement();
    String hostVal;
    if (headerName.equalsIgnoreCase(""String_Node_Str"")) {
      hostVal=((HttpServletRequest)request.getRequest()).getHeader(headerName);
      isHeaderPresent=true;
      hostPort=hostVal.split(""String_Node_Str"");
    }
  }
  if (hostPort == null) {
    throw new ProtocolException(rb.getString(""String_Node_Str""));
  }
  boolean isHostPortNullOrEmpty=((hostPort.length <= 1) || (hostPort[1] == null || hostPort[1].trim().isEmpty()));
  if (!isHeaderPresent) {
    isWebServerRequest=false;
  }
 else   if (isHostPortNullOrEmpty) {
    isWebServerRequest=true;
  }
 else {
    boolean breakFromLoop=false;
    for (    NetworkListener nwListener : nwListeners.getNetworkListener()) {
      String nwAddress=nwListener.getAddress();
      InetAddress[] localHostAdresses=new InetAddress[10];
      if (nwAddress == null || nwAddress.equals(""String_Node_Str"")) {
        nwAddress=NetUtils.getCanonicalHostName();
        if (!nwAddress.equals(hostPort[0])) {
          localHostAdresses=NetUtils.getHostAddresses();
          InetAddress hostAddress=InetAddress.getByName(hostPort[0]);
          for (          InetAddress inetAdress : localHostAdresses) {
            if (inetAdress.equals(hostAddress)) {
              String nwPort=nwListener.getPort();
              if (!nwPort.equals(hostPort[1])) {
                isWebServerRequest=true;
              }
 else {
                isWebServerRequest=false;
                breakFromLoop=true;
                break;
              }
            }
          }
        }
 else {
          String nwPort=nwListener.getPort();
          if (!nwPort.equals(hostPort[1])) {
            isWebServerRequest=true;
          }
 else {
            isWebServerRequest=false;
            breakFromLoop=true;
          }
        }
      }
      if (breakFromLoop && !isWebServerRequest) {
        break;
      }
    }
  }
  String serverHost=request.getRequest().getServerName();
  int redirectPort=request.getConnector().getRedirectPort();
  if (isWebServerRequest) {
    serverHost=hostPort[0];
    if (isHostPortNullOrEmpty) {
      redirectPort=-1;
    }
 else {
      redirectPort=Integer.parseInt(hostPort[1]);
    }
  }
  List<String> hostAndPort=new ArrayList<String>();
  hostAndPort.add(serverHost);
  hostAndPort.add(String.valueOf(redirectPort));
  return hostAndPort;
}"
30366,"private String readDeploymentConfig(final InputStream is) throws IOException {
  String encoding=null;
  XMLEventReader rdr=null;
  try {
    is.mark(Integer.MAX_VALUE);
    rdr=xmlInputFactory.createXMLEventReader(new InputStreamReader(is));
    while (rdr.hasNext()) {
      final XMLEvent ev=rdr.nextEvent();
      if (ev.isStartDocument()) {
        final StartDocument sd=(StartDocument)ev;
        encoding=sd.getCharacterEncodingScheme();
        rdr.close();
        break;
      }
    }
  }
 catch (  XMLStreamException e) {
    if (rdr != null) {
      try {
        rdr.close();
      }
 catch (      XMLStreamException inner) {
        throw new IOException(e);
      }
    }
    throw new IOException(e);
  }
  if (encoding == null) {
    encoding=""String_Node_Str"";
  }
  is.reset();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int bytesRead;
  final byte[] buffer=new byte[1024];
  while ((bytesRead=is.read(buffer)) != -1) {
    baos.write(buffer,0,bytesRead);
  }
  if (rdr != null) {
    try {
      rdr.close();
    }
 catch (    XMLStreamException ex) {
      throw new IOException(ex);
    }
  }
  is.close();
  return new String(baos.toByteArray(),encoding);
}","private String readDeploymentConfig(final InputStream is) throws IOException {
  String encoding=null;
  XMLEventReader rdr=null;
  try {
    is.mark(Integer.MAX_VALUE);
    rdr=xmlInputFactory.createXMLEventReader(new InputStreamReader(is));
    while (rdr.hasNext()) {
      final XMLEvent ev=rdr.nextEvent();
      if (ev.isStartDocument()) {
        final StartDocument sd=(StartDocument)ev;
        encoding=sd.getCharacterEncodingScheme();
        rdr.close();
        break;
      }
    }
  }
 catch (  XMLStreamException e) {
    if (rdr != null) {
      try {
        rdr.close();
      }
 catch (      XMLStreamException inner) {
        throw new IOException(e);
      }
    }
    throw new IOException(e);
  }
  if (encoding == null) {
    encoding=""String_Node_Str"";
  }
  is.reset();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int bytesRead;
  final byte[] buffer=new byte[1024];
  while ((bytesRead=is.read(buffer)) != -1) {
    baos.write(buffer,0,bytesRead);
  }
  try {
    rdr.close();
  }
 catch (  XMLStreamException ex) {
    throw new IOException(ex);
  }
  is.close();
  return new String(baos.toByteArray(),encoding);
}"
30367,"public ObjectName[] getChildren(){
  ObjectName result[]=new ObjectName[children.size()];
  Iterator<Container> it=children.values().iterator();
  int i=0;
  while (it.hasNext()) {
    Object next=it.next();
    if (next instanceof ContainerBase) {
      result[i++]=((ContainerBase)next).getJmxName();
    }
  }
  return result;
}","public ObjectName[] getChildren(){
synchronized (children) {
    ObjectName result[]=new ObjectName[children.size()];
    Iterator<Container> it=children.values().iterator();
    int i=0;
    while (it.hasNext()) {
      Object next=it.next();
      if (next instanceof ContainerBase) {
        result[i++]=((ContainerBase)next).getJmxName();
      }
    }
    return result;
  }
}"
30368,"/** 
 * Return the set of active Sessions associated with this Manager. If this Manager has no active Sessions, a zero-length array is returned.
 */
public Session[] findSessions(){
  return sessions.values().toArray(new Session[sessions.size()]);
}","/** 
 * Return the set of active Sessions associated with this Manager. If this Manager has no active Sessions, a zero-length array is returned.
 */
public Session[] findSessions(){
  Collection<Session> sessionsValues=sessions.values();
  List<Session> list=new ArrayList<Session>(sessionsValues.size());
  for (  Session session : sessionsValues) {
    list.add(session);
  }
  return list.toArray(new Session[list.size()]);
}"
30369,"/** 
 * Purges those session ids from the map of invalidated session ids whose time has come up
 */
protected void processInvalidatedSessions(){
  if (!started) {
    return;
  }
  long timeNow=System.currentTimeMillis();
  Iterator<String> iter=invalidatedSessions.keySet().iterator();
  while (iter.hasNext()) {
    String id=iter.next();
    Long timeAdded=invalidatedSessions.get(id);
    if ((timeAdded == null) || (timeNow - timeAdded.longValue() > rememberInvalidatedSessionIdMilliSecs)) {
      removeFromInvalidatedSessions(id);
    }
  }
}","/** 
 * Purges those session ids from the map of invalidated session ids whose time has come up
 */
protected void processInvalidatedSessions(){
  if (!started) {
    return;
  }
  long timeNow=System.currentTimeMillis();
  for (  Map.Entry<String,Long> e : invalidatedSessions.entrySet()) {
    String id=e.getKey();
    Long timeAdded=e.getValue();
    if ((timeAdded == null) || (timeNow - timeAdded.longValue() > rememberInvalidatedSessionIdMilliSecs)) {
      removeFromInvalidatedSessions(id);
    }
  }
}"
30370,"public void writeSessions(OutputStream os,boolean doExpire) throws IOException {
  ObjectOutputStream oos=null;
  try {
    if (container != null) {
      oos=((StandardContext)container).createObjectOutputStream(new BufferedOutputStream(os));
    }
 else {
      oos=new ObjectOutputStream(new BufferedOutputStream(os));
    }
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,sm.getString(""String_Node_Str"",e),e);
    if (oos != null) {
      try {
        oos.close();
      }
 catch (      IOException f) {
      }
      oos=null;
    }
    throw e;
  }
  ArrayList<StandardSession> list=new ArrayList<StandardSession>();
synchronized (sessions) {
    if (log.isLoggable(Level.FINE))     log.fine(""String_Node_Str"" + sessions.size() + ""String_Node_Str"");
    try {
      Session actSessions[]=findSessions();
      if (actSessions != null) {
        for (        Session actSession : actSessions) {
          StandardSession session=(StandardSession)actSession;
          session.passivate();
        }
      }
      oos.writeObject(Integer.valueOf(sessions.size()));
      for (      Session o : sessions.values()) {
        StandardSession session=(StandardSession)o;
        list.add(session);
        oos.writeObject(session);
      }
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",e),e);
      if (oos != null) {
        try {
          oos.close();
        }
 catch (        IOException f) {
        }
        oos=null;
      }
      throw e;
    }
  }
  try {
    oos.flush();
  }
 catch (  IOException e) {
    if (oos != null) {
      try {
        oos.close();
      }
 catch (      IOException f) {
      }
      oos=null;
    }
    throw e;
  }
 finally {
    try {
      if (oos != null) {
        oos.close();
      }
    }
 catch (    IOException f) {
    }
  }
  if (doExpire) {
    if (log.isLoggable(Level.FINE))     log.fine(""String_Node_Str"" + list.size() + ""String_Node_Str"");
    Iterator<StandardSession> expires=list.iterator();
    while (expires.hasNext()) {
      StandardSession session=(StandardSession)expires.next();
      try {
        session.expire(false);
      }
 catch (      Throwable t) {
      }
    }
  }
}","public void writeSessions(OutputStream os,boolean doExpire) throws IOException {
  ObjectOutputStream oos=null;
  try {
    if (container != null) {
      oos=((StandardContext)container).createObjectOutputStream(new BufferedOutputStream(os));
    }
 else {
      oos=new ObjectOutputStream(new BufferedOutputStream(os));
    }
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,sm.getString(""String_Node_Str"",e),e);
    if (oos != null) {
      try {
        oos.close();
      }
 catch (      IOException f) {
      }
      oos=null;
    }
    throw e;
  }
  StandardSession[] currentStandardSessions=null;
synchronized (sessions) {
    if (log.isLoggable(Level.FINE))     log.fine(""String_Node_Str"" + sessions.size() + ""String_Node_Str"");
    try {
      for (      Session actSession : findSessions()) {
        StandardSession session=(StandardSession)actSession;
        session.passivate();
      }
      Session[] currentSessions=findSessions();
      int size=currentSessions.length;
      currentStandardSessions=new StandardSession[size];
      oos.writeObject(Integer.valueOf(size));
      for (int i=0; i < size; i++) {
        StandardSession session=(StandardSession)currentSessions[i];
        currentStandardSessions[i]=session;
        oos.writeObject(session);
      }
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",e),e);
      if (oos != null) {
        try {
          oos.close();
        }
 catch (        IOException f) {
        }
        oos=null;
      }
      throw e;
    }
  }
  try {
    oos.flush();
  }
 catch (  IOException e) {
    if (oos != null) {
      try {
        oos.close();
      }
 catch (      IOException f) {
      }
      oos=null;
    }
    throw e;
  }
 finally {
    try {
      if (oos != null) {
        oos.close();
      }
    }
 catch (    IOException f) {
    }
  }
  if (doExpire) {
    if (log.isLoggable(Level.FINE))     log.fine(""String_Node_Str"" + currentStandardSessions.length + ""String_Node_Str"");
    for (    StandardSession session : currentStandardSessions) {
      try {
        session.expire(false);
      }
 catch (      Throwable t) {
      }
    }
  }
}"
30371,"/** 
 * Return the names of all currently defined session attributes as an array of Strings.  If there are no defined attributes, a zero-length array is returned.
 */
protected String[] keys(){
  if (attributes.size() > 0) {
    return attributes.keySet().toArray(EMPTY_ARRAY);
  }
 else {
    return EMPTY_ARRAY;
  }
}","/** 
 * Return the names of all currently defined session attributes as an array of Strings.  If there are no defined attributes, a zero-length array is returned.
 */
protected String[] keys(){
  if (attributes.size() > 0) {
    List<String> list=new ArrayList<String>();
    for (    String key : attributes.keySet()) {
      list.add(key);
    }
    return list.toArray(new String[list.size()]);
  }
 else {
    return EMPTY_ARRAY;
  }
}"
30372,"protected void nullInstance(Object instance){
  if (instance == null) {
    return;
  }
  Field[] fields=instance.getClass().getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    int mods=field.getModifiers();
    if (field.getType().isPrimitive() || (field.getName().indexOf(""String_Node_Str"") != -1)) {
      continue;
    }
    try {
      setAccessible(field);
      if (Modifier.isStatic(mods) && Modifier.isFinal(mods)) {
        continue;
      }
 else {
        Object value=field.get(instance);
        if (null != value) {
          Class<? extends Object> valueClass=value.getClass();
          if (logger.isLoggable(Level.FINE)) {
            logger.fine(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ instance.getClass().getName()+ ""String_Node_Str""+ valueClass.getName()+ ""String_Node_Str"");
          }
        }
 else {
          field.set(instance,null);
          if (logger.isLoggable(Level.FINE))           logger.fine(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ instance.getClass().getName());
        }
      }
    }
 catch (    Throwable t) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"" + field.getName() + ""String_Node_Str""+ instance.getClass().getName(),t);
      }
    }
  }
}","protected void nullInstance(Object instance){
  if (instance == null) {
    return;
  }
  Field[] fields=instance.getClass().getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    int mods=field.getModifiers();
    if (field.getType().isPrimitive() || (field.getName().indexOf(""String_Node_Str"") != -1)) {
      continue;
    }
    try {
      setAccessible(field);
      if (Modifier.isStatic(mods) && Modifier.isFinal(mods)) {
        continue;
      }
 else {
        Object value=field.get(instance);
        if (null != value) {
          Class<? extends Object> valueClass=value.getClass();
          if (!loadedByThisOrChild(valueClass)) {
            if (logger.isLoggable(Level.FINE)) {
              logger.fine(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ instance.getClass().getName()+ ""String_Node_Str""+ valueClass.getName()+ ""String_Node_Str"");
            }
          }
 else {
            field.set(instance,null);
            if (logger.isLoggable(Level.FINE))             logger.fine(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ instance.getClass().getName());
          }
        }
      }
    }
 catch (    Throwable t) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"" + field.getName() + ""String_Node_Str""+ instance.getClass().getName(),t);
      }
    }
  }
}"
30373,"/** 
 * @return a list of libraries included in the archivist
 */
public Vector getLibraries(Archive archive){
  return null;
}","/** 
 * @return a list of libraries included in the archivist
 */
@Override public Vector getLibraries(Archive archive){
  return null;
}"
30374,"private URL getResource(String name,boolean fromJarsOnly){
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + name + ""String_Node_Str"");
  URL url=null;
  if (delegate || (name.startsWith(""String_Node_Str"") && (!name.startsWith(""String_Node_Str"") || !useMyFaces)) || name.startsWith(""String_Node_Str"")|| (name.startsWith(""String_Node_Str"") && !name.startsWith(""String_Node_Str"") && !useMyFaces)|| name.startsWith(""String_Node_Str"")) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    url=loader.getResource(name);
    if (url != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
      return (url);
    }
  }
  url=findResource(name,fromJarsOnly);
  if (url != null) {
    ResourceEntry entry=resourceEntries.get(name);
    try {
      String repository=entry.codeBase.toString();
      if ((repository.endsWith(""String_Node_Str"")) && !(name.endsWith(""String_Node_Str"")) && !(name.endsWith(""String_Node_Str""))) {
        File resourceFile=new File(loaderDir,name);
        url=resourceFile.toURI().toURL();
      }
    }
 catch (    Exception e) {
    }
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
    return (url);
  }
  if (!delegate) {
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    url=loader.getResource(name);
    if (url != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
      return (url);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"");
  return (null);
}","private URL getResource(String name,boolean fromJarsOnly){
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + name + ""String_Node_Str"");
  URL url=null;
  if (isResourceDelegate(name)) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    url=loader.getResource(name);
    if (url != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
      return (url);
    }
  }
  url=findResource(name,fromJarsOnly);
  if (url != null) {
    ResourceEntry entry=resourceEntries.get(name);
    try {
      String repository=entry.codeBase.toString();
      if ((repository.endsWith(""String_Node_Str"")) && !(name.endsWith(""String_Node_Str"")) && !(name.endsWith(""String_Node_Str""))) {
        File resourceFile=new File(loaderDir,name);
        url=resourceFile.toURI().toURL();
      }
    }
 catch (    Exception e) {
    }
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
    return (url);
  }
  if (!delegate) {
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    url=loader.getResource(name);
    if (url != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + url.toString() + ""String_Node_Str"");
      return (url);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"");
  return (null);
}"
30375,"/** 
 * Find the resource with the given name, and return an input stream that can be used for reading it.  The search order is as described for <code>getResource()</code>, after checking to see if the resource data has been previously cached.  If the resource cannot be found, return <code>null</code>.
 * @param name Name of the resource to return an input stream for
 */
@Override public InputStream getResourceAsStream(String name){
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + name + ""String_Node_Str"");
  InputStream stream=null;
  stream=findLoadedResource(name);
  if (stream != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"");
    return (stream);
  }
  if (delegate || name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"")|| (name.startsWith(""String_Node_Str"") && !name.startsWith(""String_Node_Str""))|| name.startsWith(""String_Node_Str"")) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    stream=loader.getResourceAsStream(name);
    if (stream != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"");
      return (stream);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"");
  URL url=findResource(name);
  if (url != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"");
    stream=findLoadedResource(name);
    try {
      if (hasExternalRepositories && (stream == null))       stream=url.openStream();
    }
 catch (    IOException e) {
      ;
    }
    if (stream != null)     return (stream);
  }
  if (!delegate) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    stream=loader.getResourceAsStream(name);
    if (stream != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"");
      return (stream);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"");
  return (null);
}","/** 
 * Find the resource with the given name, and return an input stream that can be used for reading it.  The search order is as described for <code>getResource()</code>, after checking to see if the resource data has been previously cached.  If the resource cannot be found, return <code>null</code>.
 * @param name Name of the resource to return an input stream for
 */
@Override public InputStream getResourceAsStream(String name){
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + name + ""String_Node_Str"");
  InputStream stream=null;
  stream=findLoadedResource(name);
  if (stream != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"");
    return (stream);
  }
  if (isResourceDelegate(name)) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    stream=loader.getResourceAsStream(name);
    if (stream != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"");
      return (stream);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"");
  URL url=findResource(name);
  if (url != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"");
    stream=findLoadedResource(name);
    try {
      if (hasExternalRepositories && (stream == null))       stream=url.openStream();
    }
 catch (    IOException e) {
      ;
    }
    if (stream != null)     return (stream);
  }
  if (!delegate) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    stream=loader.getResourceAsStream(name);
    if (stream != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"");
      return (stream);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"");
  return (null);
}"
30376,"protected void makeChanges() throws TransactionFailure {
  for (  final String xmlName : mChanges.keySet()) {
    final Object value=mChanges.get(xmlName);
    final ConfigModel.Property prop=getConfigModel_Property(xmlName);
    if (prop.isCollection()) {
      final List<String> results=handleCollection(mWriteable,prop,ListUtil.asStringList(value));
    }
 else     if (value == null || (value instanceof String)) {
      mWriteable.setter(prop,value,String.class);
    }
 else {
      throw new TransactionFailure(""String_Node_Str"" + xmlName + ""String_Node_Str""+ value.getClass().getName());
    }
  }
}","protected void makeChanges() throws TransactionFailure {
  for (  final String xmlName : mChanges.keySet()) {
    final Object value=mChanges.get(xmlName);
    final ConfigModel.Property prop=getConfigModel_Property(xmlName);
    if (prop.isCollection()) {
      handleCollection(mWriteable,prop,ListUtil.asStringList(value));
    }
 else     if (value == null || (value instanceof String)) {
      mWriteable.setter(prop,value,String.class);
    }
 else {
      throw new TransactionFailure(""String_Node_Str"" + xmlName + ""String_Node_Str""+ value.getClass().getName());
    }
  }
}"
30377,"public boolean passivateEJB(StatefulEJBContext ctx,Serializable sessionKey) throws java.io.NotSerializableException {
  try {
    int hashCode=hash(sessionKey);
    int index=getIndex(hashCode);
    boolean itemRemoved=false;
    CacheItem prev=null, item=null;
synchronized (bucketLocks[index]) {
      for (item=buckets[index]; item != null; item=item.next) {
        if (item.value == ctx) {
          LruCacheItem lruSCItem=(LruCacheItem)item;
          if (lruSCItem.isTrimmed == false) {
            if (_logger.isLoggable(Level.FINE)) {
              _logger.log(Level.FINE,cacheName + ""String_Node_Str"" + sessionKey);
            }
            return false;
          }
          break;
        }
        prev=item;
      }
      if (item == null) {
        return true;
      }
      if (removeIfIdle) {
        long idleThreshold=System.currentTimeMillis() - removalTimeoutInSeconds * 1000L;
        if (ctx.getLastAccessTime() <= idleThreshold) {
          if (_logger.isLoggable(Level.FINE)) {
            _logger.log(Level.FINE,cacheName + ""String_Node_Str"" + ""String_Node_Str""+ sessionKey);
          }
          if (prev == null) {
            buckets[index]=item.next;
          }
 else {
            prev.next=item.next;
          }
          item.next=null;
          itemRemoved=true;
        }
      }
    }
    if (itemRemoved) {
      decrementEntryCount();
      incrementRemovalCount();
      return true;
    }
    if (saveStateToStore(sessionKey,ctx) == false) {
      return false;
    }
synchronized (bucketLocks[index]) {
      prev=null;
      for (item=buckets[index]; item != null; item=item.next) {
        if (item.value == ctx) {
          LruCacheItem lruSCItem=(LruCacheItem)item;
          if (lruSCItem.isTrimmed == false) {
            return false;
          }
          if (prev == null) {
            buckets[index]=item.next;
          }
 else {
            prev.next=item.next;
          }
          item.next=null;
          break;
        }
        prev=item;
      }
    }
    if (item != null) {
      decrementEntryCount();
      incrementRemovalCount();
    }
    return true;
  }
 catch (  java.io.NotSerializableException notSerEx) {
    throw notSerEx;
  }
catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"" + cacheName + ""String_Node_Str"",ex);
  }
  return false;
}","public boolean passivateEJB(StatefulEJBContext ctx,Serializable sessionKey) throws java.io.NotSerializableException {
  try {
    int hashCode=hash(sessionKey);
    int index=getIndex(hashCode);
    CacheItem prev=null, item=null;
synchronized (bucketLocks[index]) {
      for (item=buckets[index]; item != null; item=item.next) {
        if (item.value == ctx) {
          LruCacheItem lruSCItem=(LruCacheItem)item;
          if (lruSCItem.isTrimmed == false) {
            if (_logger.isLoggable(Level.FINE)) {
              _logger.log(Level.FINE,cacheName + ""String_Node_Str"" + sessionKey);
            }
            return false;
          }
          break;
        }
        prev=item;
      }
      if (item == null) {
        return true;
      }
    }
    if (saveStateToStore(sessionKey,ctx) == false) {
      return false;
    }
synchronized (bucketLocks[index]) {
      prev=null;
      for (item=buckets[index]; item != null; item=item.next) {
        if (item.value == ctx) {
          LruCacheItem lruSCItem=(LruCacheItem)item;
          if (lruSCItem.isTrimmed == false) {
            return false;
          }
          if (prev == null) {
            buckets[index]=item.next;
          }
 else {
            prev.next=item.next;
          }
          item.next=null;
          break;
        }
        prev=item;
      }
    }
    if (item != null) {
      decrementEntryCount();
      incrementRemovalCount();
    }
    return true;
  }
 catch (  java.io.NotSerializableException notSerEx) {
    throw notSerEx;
  }
catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"" + cacheName + ""String_Node_Str"",ex);
  }
  return false;
}"
30378,"/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  File domainXMLFile=getDomainXml();
  logger.log(Level.FINER,""String_Node_Str"",domainXMLFile);
  try {
    ArrayList<URL> urls=new ArrayList<URL>();
    File idir=new File(System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY));
    File mdir=new File(idir,""String_Node_Str"");
    for (    File f : mdir.listFiles()) {
      if (f.toString().endsWith(""String_Node_Str"")) {
        urls.add(f.toURI().toURL());
      }
    }
    URL[] urlsA=urls.toArray(new URL[0]);
    ClassLoader cl=new URLClassLoader(urlsA,Globals.class.getClassLoader());
    ModulesRegistry registry=new StaticModulesRegistry(cl);
    Habitat habitat=registry.createHabitat(""String_Node_Str"");
    ConfigParser parser=new ConfigParser(habitat);
    URL domainURL=domainXMLFile.toURI().toURL();
    DomDocument doc=parser.parse(domainURL);
    Dom domDomain=doc.getRoot();
    Domain domain=domDomain.createProxy(Domain.class);
    DomainXmlVerifier validator=new DomainXmlVerifier(domain);
    if (validator.invokeConfigValidator())     return 1;
  }
 catch (  Exception e) {
    throw new CommandException(e);
  }
  return 0;
}","/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  File domainXMLFile=getDomainXml();
  logger.log(Level.FINER,""String_Node_Str"",domainXMLFile);
  try {
    ArrayList<URL> urls=new ArrayList<URL>();
    File idir=new File(System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY));
    File mdir=new File(idir,""String_Node_Str"");
    for (    File f : mdir.listFiles()) {
      if (f.toString().endsWith(""String_Node_Str"")) {
        urls.add(f.toURI().toURL());
      }
    }
    final URL[] urlsA=urls.toArray(new URL[urls.size()]);
    ClassLoader cl=(ClassLoader)AccessController.doPrivileged(new PrivilegedAction(){
      @Override public Object run(){
        return new URLClassLoader(urlsA,Globals.class.getClassLoader());
      }
    }
);
    ModulesRegistry registry=new StaticModulesRegistry(cl);
    Habitat habitat=registry.createHabitat(""String_Node_Str"");
    ConfigParser parser=new ConfigParser(habitat);
    URL domainURL=domainXMLFile.toURI().toURL();
    DomDocument doc=parser.parse(domainURL);
    Dom domDomain=doc.getRoot();
    Domain domain=domDomain.createProxy(Domain.class);
    DomainXmlVerifier validator=new DomainXmlVerifier(domain);
    if (validator.invokeConfigValidator())     return 1;
  }
 catch (  Exception e) {
    throw new CommandException(e);
  }
  return 0;
}"
30379,"private List<String> handleAttrs(final Map<String,String> old,final Map<String,String> cur){
  if (old.size() != cur.size()) {
    throw new IllegalArgumentException();
  }
  final List<String> reasons=new ArrayList<String>();
  for (  final String key : old.keySet()) {
    final String oldValue=old.get(key);
    final String curValue=cur.get(key);
    final boolean changed=(oldValue == null && curValue != null) || (oldValue != null && curValue == null) || (oldValue != null && !oldValue.equals(curValue));
    if (changed) {
      reasons.add(""String_Node_Str"" + key + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ curValue+ ""String_Node_Str"");
    }
  }
  return reasons;
}","private List<String> handleAttrs(final Map<String,String> old,final Map<String,String> cur){
  if (old.size() != cur.size()) {
    throw new IllegalArgumentException();
  }
  final List<String> reasons=new ArrayList<String>();
  for (  final Map.Entry<String,String> olde : old.entrySet()) {
    final String key=olde.getKey();
    final String oldValue=olde.getValue();
    final String curValue=cur.get(key);
    final boolean changed=(oldValue == null && curValue != null) || (oldValue != null && curValue == null) || (oldValue != null && !oldValue.equals(curValue));
    if (changed) {
      reasons.add(""String_Node_Str"" + key + ""String_Node_Str""+ oldValue+ ""String_Node_Str""+ curValue+ ""String_Node_Str"");
    }
  }
  return reasons;
}"
30380,"@Override public <T extends ConfigBeanProxy>NotProcessed changed(TYPE type,Class<T> tc,T t){
  NotProcessed result=null;
  if (tc == Profiler.class) {
    result=new NotProcessed(""String_Node_Str"");
  }
 else   if (tc == Property.class && t.getParent().getClass() == JavaConfig.class) {
    result=new NotProcessed(""String_Node_Str"");
  }
 else   if (tc == JavaConfig.class) {
    final JavaConfig njc=(JavaConfig)t;
    logFine(type,njc);
    final List<String> curProps=new ArrayList<String>(njc.getJvmOptions());
    final boolean jvmOptionsWereChanged=!oldProps.equals(curProps);
    final List<String> reasons=handle(oldProps,curProps);
    oldProps=curProps;
    final Map<String,String> curAttrs=collectAttrs(njc);
    reasons.addAll(handleAttrs(oldAttrs,curAttrs));
    oldAttrs=curAttrs;
    result=reasons.isEmpty() ? null : new NotProcessed(CombinedJavaConfigSystemPropertyListener.toString(reasons));
  }
 else   if (tc == SystemProperty.class) {
    final SystemProperty sp=(SystemProperty)t;
    ConfigBeanProxy proxy=sp.getParent();
    ConfigView p=ConfigSupport.getImpl(proxy);
    if (p == ConfigSupport.getImpl(server) || p == ConfigSupport.getImpl(config) || (cluster != null && p == ConfigSupport.getImpl(cluster)) || p == ConfigSupport.getImpl(domain)) {
      String pname=sp.getName();
      if (referencesProperty(pname,oldProps) || referencesProperty(pname,oldAttrs.values())) {
        result=new NotProcessed(""String_Node_Str"" + pname + ""String_Node_Str"");
      }
    }
    if (type == TYPE.ADD || type == TYPE.CHANGE) {
      if (proxy instanceof Domain) {
        return addToDomain(sp);
      }
 else       if (proxy instanceof Config) {
        return addToConfig(sp);
      }
 else       if (proxy instanceof Cluster) {
        return addToCluster(sp);
      }
 else {
        if (proxy instanceof Server) {
          Server changedServer=(Server)proxy;
          String changedServerName=changedServer.getName();
          String thisServerName=server.getName();
          if (changedServerName.equals(thisServerName)) {
            return addToServer(sp);
          }
        }
      }
    }
 else     if (type == TYPE.REMOVE) {
      if (proxy instanceof Domain) {
        return removeFromDomain(sp);
      }
 else       if (proxy instanceof Config) {
        return removeFromConfig(sp);
      }
 else       if (proxy instanceof Cluster) {
        return removeFromCluster(sp);
      }
 else {
        return removeFromServer(sp);
      }
    }
  }
 else {
  }
  return result;
}","@Override public <T extends ConfigBeanProxy>NotProcessed changed(TYPE type,Class<T> tc,T t){
  NotProcessed result=null;
  if (tc == Profiler.class) {
    result=new NotProcessed(""String_Node_Str"");
  }
 else   if (tc == Property.class && t.getParent().getClass() == JavaConfig.class) {
    result=new NotProcessed(""String_Node_Str"");
  }
 else   if (tc == JavaConfig.class && t instanceof JavaConfig) {
    final JavaConfig njc=(JavaConfig)t;
    logFine(type,njc);
    final List<String> curProps=new ArrayList<String>(njc.getJvmOptions());
    final boolean jvmOptionsWereChanged=!oldProps.equals(curProps);
    final List<String> reasons=handle(oldProps,curProps);
    oldProps=curProps;
    final Map<String,String> curAttrs=collectAttrs(njc);
    reasons.addAll(handleAttrs(oldAttrs,curAttrs));
    oldAttrs=curAttrs;
    result=reasons.isEmpty() ? null : new NotProcessed(CombinedJavaConfigSystemPropertyListener.toString(reasons));
  }
 else   if (tc == SystemProperty.class && t instanceof SystemProperty) {
    final SystemProperty sp=(SystemProperty)t;
    ConfigBeanProxy proxy=sp.getParent();
    ConfigView p=ConfigSupport.getImpl(proxy);
    if (p == ConfigSupport.getImpl(server) || p == ConfigSupport.getImpl(config) || (cluster != null && p == ConfigSupport.getImpl(cluster)) || p == ConfigSupport.getImpl(domain)) {
      String pname=sp.getName();
      if (referencesProperty(pname,oldProps) || referencesProperty(pname,oldAttrs.values())) {
        result=new NotProcessed(""String_Node_Str"" + pname + ""String_Node_Str"");
      }
    }
    if (type == TYPE.ADD || type == TYPE.CHANGE) {
      if (proxy instanceof Domain) {
        return addToDomain(sp);
      }
 else       if (proxy instanceof Config) {
        return addToConfig(sp);
      }
 else       if (proxy instanceof Cluster) {
        return addToCluster(sp);
      }
 else {
        if (proxy instanceof Server) {
          Server changedServer=(Server)proxy;
          String changedServerName=changedServer.getName();
          String thisServerName=server.getName();
          if (changedServerName.equals(thisServerName)) {
            return addToServer(sp);
          }
        }
      }
    }
 else     if (type == TYPE.REMOVE) {
      if (proxy instanceof Domain) {
        return removeFromDomain(sp);
      }
 else       if (proxy instanceof Config) {
        return removeFromConfig(sp);
      }
 else       if (proxy instanceof Cluster) {
        return removeFromCluster(sp);
      }
 else {
        return removeFromServer(sp);
      }
    }
  }
 else {
  }
  return result;
}"
30381,"private void init(ServletRequest servletRequest,ServletResponse servletResponse,boolean isStartAsyncWithZeroArg){
  this.servletRequest=servletRequest;
  this.servletResponse=servletResponse;
  this.isOriginalRequestAndResponse=((servletRequest instanceof RequestFacade || servletRequest instanceof ApplicationHttpRequest) && (servletResponse instanceof ResponseFacade || servletResponse instanceof ApplicationHttpResponse));
  zeroArgDispatchTarget=getZeroArgDispatchTarget(this.origRequest,servletRequest,isStartAsyncWithZeroArg);
}","private void init(ServletRequest servletRequest,ServletResponse servletResponse,boolean isStartAsyncWithZeroArg){
  this.servletRequest=servletRequest;
  this.servletResponse=servletResponse;
  this.isOriginalRequestAndResponse=((servletRequest instanceof RequestFacade || servletRequest instanceof ApplicationHttpRequest) && (servletResponse instanceof ResponseFacade || servletResponse instanceof ApplicationHttpResponse));
  this.isStartAsyncWithZeroArg=isStartAsyncWithZeroArg;
}"
30382,"/** 
 * Dispatches the given request and response to the resource for which this dispatcher was acquired. <p>Any runtime exceptions, IOException, or ServletException thrown by the target will be propagated to the caller.
 * @param request The request to be forwarded
 * @param response The response to be forwarded
 * @param dispatcherType The type of dispatch to be performed
 * @throws IOException if an input/output error occurs
 * @throws ServletException if a servlet exception occurs
 * @throws IllegalArgumentException if the dispatcher type is differentfrom FORWARD, ERROR, and ASYNC
 */
public void dispatch(ServletRequest request,ServletResponse response,DispatcherType dispatcherType) throws ServletException, IOException {
  if (!DispatcherType.FORWARD.equals(dispatcherType) && !DispatcherType.ERROR.equals(dispatcherType) && !DispatcherType.ASYNC.equals(dispatcherType)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean isCommit=(DispatcherType.FORWARD.equals(dispatcherType) || DispatcherType.ERROR.equals(dispatcherType));
  if (Globals.IS_SECURITY_ENABLED) {
    try {
      PrivilegedDispatch dp=new PrivilegedDispatch(request,response,dispatcherType);
      AccessController.doPrivileged(dp);
      if (isCommit && !request.isAsyncStarted()) {
        ApplicationDispatcherForward.commit(request,response,context,wrapper);
      }
    }
 catch (    PrivilegedActionException pe) {
      Exception e=pe.getException();
      if (e instanceof ServletException)       throw (ServletException)e;
      throw (IOException)e;
    }
  }
 else {
    doDispatch(request,response,dispatcherType);
    if (isCommit && !request.isAsyncStarted()) {
      ApplicationDispatcherForward.commit(request,response,context,wrapper);
    }
  }
}","/** 
 * Dispatches the given request and response to the resource for which this dispatcher was acquired. <p>Any runtime exceptions, IOException, or ServletException thrown by the target will be propagated to the caller.
 * @param request The request to be forwarded
 * @param response The response to be forwarded
 * @param dispatcherType The type of dispatch to be performed
 * @throws IOException if an input/output error occurs
 * @throws ServletException if a servlet exception occurs
 * @throws IllegalArgumentException if the dispatcher type is differentfrom FORWARD, ERROR, and ASYNC
 */
public void dispatch(ServletRequest request,ServletResponse response,DispatcherType dispatcherType) throws ServletException, IOException {
  if (DispatcherType.FORWARD != dispatcherType && DispatcherType.ERROR != dispatcherType && DispatcherType.ASYNC != dispatcherType) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean isCommit=(DispatcherType.FORWARD == dispatcherType || DispatcherType.ERROR == dispatcherType);
  if (Globals.IS_SECURITY_ENABLED) {
    try {
      PrivilegedDispatch dp=new PrivilegedDispatch(request,response,dispatcherType);
      AccessController.doPrivileged(dp);
      if (isCommit && !request.isAsyncStarted()) {
        ApplicationDispatcherForward.commit(request,response,context,wrapper);
      }
    }
 catch (    PrivilegedActionException pe) {
      Exception e=pe.getException();
      if (e instanceof ServletException)       throw (ServletException)e;
      throw (IOException)e;
    }
  }
 else {
    doDispatch(request,response,dispatcherType);
    if (isCommit && !request.isAsyncStarted()) {
      ApplicationDispatcherForward.commit(request,response,context,wrapper);
    }
  }
}"
30383,"private void doDispatch(ServletRequest request,ServletResponse response,DispatcherType dispatcherType) throws ServletException, IOException {
  if (!DispatcherType.ASYNC.equals(dispatcherType)) {
    if (response.isCommitted()) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"");
      throw new IllegalStateException(sm.getString(""String_Node_Str""));
    }
    try {
      response.resetBuffer();
    }
 catch (    IllegalStateException e) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"" + e);
      throw e;
    }
  }
  State state=new State(request,response,dispatcherType);
  HttpServletRequest hrequest=null;
  if (request instanceof HttpServletRequest) {
    hrequest=(HttpServletRequest)request;
  }
  HttpServletResponse hresponse=null;
  if (response instanceof HttpServletResponse) {
    hresponse=(HttpServletResponse)response;
  }
  if ((hrequest == null) || (hresponse == null)) {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    processRequest(request,response,state,wrequest.getRequestFacade());
    unwrapRequest(state);
  }
 else   if ((servletPath == null) && (pathInfo == null)) {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    wrequest.setRequestURI(hrequest.getRequestURI());
    wrequest.setContextPath(hrequest.getContextPath());
    wrequest.setServletPath(hrequest.getServletPath());
    wrequest.setPathInfo(hrequest.getPathInfo());
    wrequest.setQueryString(hrequest.getQueryString());
    processRequest(request,response,state,wrequest.getRequestFacade());
    wrequest.recycle();
    unwrapRequest(state);
  }
 else {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    if ((DispatcherType.FORWARD.equals(dispatcherType) && hrequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI) == null) || (DispatcherType.ASYNC.equals(dispatcherType) && hrequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI) == null)) {
      wrequest.initSpecialAttributes(hrequest.getRequestURI(),hrequest.getContextPath(),hrequest.getServletPath(),hrequest.getPathInfo(),hrequest.getQueryString());
    }
    String targetContextPath=context.getPath();
    RequestFacade requestFacade=wrequest.getRequestFacade();
    String originContextPath=requestFacade.getContextPath(false);
    if (originContextPath != null && originContextPath.equals(targetContextPath)) {
      targetContextPath=hrequest.getContextPath();
    }
    wrequest.setContextPath(targetContextPath);
    wrequest.setRequestURI(requestURI);
    wrequest.setServletPath(servletPath);
    wrequest.setPathInfo(pathInfo);
    if (queryString != null) {
      wrequest.setQueryString(queryString);
      wrequest.setQueryParams(queryString);
    }
    processRequest(request,response,state,wrequest.getRequestFacade());
    wrequest.recycle();
    unwrapRequest(state);
  }
}","private void doDispatch(ServletRequest request,ServletResponse response,DispatcherType dispatcherType) throws ServletException, IOException {
  if (DispatcherType.ASYNC != dispatcherType) {
    if (response.isCommitted()) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"");
      throw new IllegalStateException(sm.getString(""String_Node_Str""));
    }
    try {
      response.resetBuffer();
    }
 catch (    IllegalStateException e) {
      if (log.isLoggable(Level.FINE))       log.fine(""String_Node_Str"" + e);
      throw e;
    }
  }
  if (DispatcherType.INCLUDE != dispatcherType) {
    DispatchTargetsInfo dtInfo=(DispatchTargetsInfo)request.getAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR);
    if (dtInfo == null) {
      dtInfo=new DispatchTargetsInfo();
      request.setAttribute(LAST_DISPATCH_REQUEST_PATH_ATTR,dtInfo);
    }
    if (servletPath == null && pathInfo == null) {
      dtInfo.addDispatchTarget(wrapper.getServletName(),true);
    }
 else {
      dtInfo.addDispatchTarget(getCombinedPath(),false);
    }
  }
  State state=new State(request,response,dispatcherType);
  HttpServletRequest hrequest=null;
  if (request instanceof HttpServletRequest) {
    hrequest=(HttpServletRequest)request;
  }
  HttpServletResponse hresponse=null;
  if (response instanceof HttpServletResponse) {
    hresponse=(HttpServletResponse)response;
  }
  if ((hrequest == null) || (hresponse == null)) {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    processRequest(request,response,state,wrequest.getRequestFacade());
    unwrapRequest(state);
  }
 else   if ((servletPath == null) && (pathInfo == null)) {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    wrequest.setRequestURI(hrequest.getRequestURI());
    wrequest.setContextPath(hrequest.getContextPath());
    wrequest.setServletPath(hrequest.getServletPath());
    wrequest.setPathInfo(hrequest.getPathInfo());
    wrequest.setQueryString(hrequest.getQueryString());
    processRequest(request,response,state,wrequest.getRequestFacade());
    wrequest.recycle();
    unwrapRequest(state);
  }
 else {
    ApplicationHttpRequest wrequest=wrapRequest(state);
    if ((DispatcherType.FORWARD == dispatcherType && hrequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI) == null) || (DispatcherType.ASYNC == dispatcherType && hrequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI) == null)) {
      wrequest.initSpecialAttributes(hrequest.getRequestURI(),hrequest.getContextPath(),hrequest.getServletPath(),hrequest.getPathInfo(),hrequest.getQueryString());
    }
    String targetContextPath=context.getPath();
    RequestFacade requestFacade=wrequest.getRequestFacade();
    String originContextPath=requestFacade.getContextPath(false);
    if (originContextPath != null && originContextPath.equals(targetContextPath)) {
      targetContextPath=hrequest.getContextPath();
    }
    wrequest.setContextPath(targetContextPath);
    wrequest.setRequestURI(requestURI);
    wrequest.setServletPath(servletPath);
    wrequest.setPathInfo(pathInfo);
    if (queryString != null) {
      wrequest.setQueryString(queryString);
      wrequest.setQueryParams(queryString);
    }
    processRequest(request,response,state,wrequest.getRequestFacade());
    wrequest.recycle();
    unwrapRequest(state);
  }
}"
30384,"/** 
 * Create and return a response wrapper that has been inserted in the appropriate spot in the response chain.
 */
private ServletResponse wrapResponse(State state){
  ServletResponse previous=null;
  ServletResponse current=state.outerResponse;
  while (current != null) {
    if (!(current instanceof ServletResponseWrapper))     break;
    if (current instanceof ApplicationHttpResponse)     break;
    if (current instanceof ApplicationResponse)     break;
    if (current instanceof org.apache.catalina.Response)     break;
    previous=current;
    current=((ServletResponseWrapper)current).getResponse();
  }
  ServletResponse wrapper=null;
  if ((current instanceof ApplicationHttpResponse) || (current instanceof HttpResponse) || (current instanceof HttpServletResponse))   wrapper=new ApplicationHttpResponse((HttpServletResponse)current,DispatcherType.INCLUDE.equals(state.dispatcherType));
 else   wrapper=new ApplicationResponse(current,DispatcherType.INCLUDE.equals(state.dispatcherType));
  if (previous == null)   state.outerResponse=wrapper;
 else   ((ServletResponseWrapper)previous).setResponse(wrapper);
  state.wrapResponse=wrapper;
  return (wrapper);
}","/** 
 * Create and return a response wrapper that has been inserted in the appropriate spot in the response chain.
 */
private ServletResponse wrapResponse(State state){
  ServletResponse previous=null;
  ServletResponse current=state.outerResponse;
  while (current != null) {
    if (!(current instanceof ServletResponseWrapper))     break;
    if (current instanceof ApplicationHttpResponse)     break;
    if (current instanceof ApplicationResponse)     break;
    if (current instanceof org.apache.catalina.Response)     break;
    previous=current;
    current=((ServletResponseWrapper)current).getResponse();
  }
  ServletResponse wrapper=null;
  if ((current instanceof ApplicationHttpResponse) || (current instanceof HttpResponse) || (current instanceof HttpServletResponse))   wrapper=new ApplicationHttpResponse((HttpServletResponse)current,DispatcherType.INCLUDE == state.dispatcherType);
 else   wrapper=new ApplicationResponse(current,DispatcherType.INCLUDE == state.dispatcherType);
  if (previous == null)   state.outerResponse=wrapper;
 else   ((ServletResponseWrapper)previous).setResponse(wrapper);
  state.wrapResponse=wrapper;
  return (wrapper);
}"
30385,"/** 
 * Get the list of commands from the remote server.
 * @return the commands as a String array, sorted
 */
public static String[] getRemoteCommands(Habitat habitat,ProgramOptions po,Environment env) throws CommandException, CommandValidationException {
  Set<String> localnames=new HashSet<String>();
  String cname=CLICommand.class.getName();
  for (  Inhabitant<?> command : habitat.getInhabitantsByContract(cname)) {
    for (    String name : Inhabitants.getNamesFor(command,cname))     localnames.add(name);
  }
  RemoteCommand cmd=new RemoteCommand(""String_Node_Str"",po,env);
  String cmds=cmd.executeAndReturnOutput(""String_Node_Str"");
  List<String> rcmds=new ArrayList<String>();
  BufferedReader r=new BufferedReader(new StringReader(cmds));
  String line;
  try {
    while ((line=r.readLine()) != null) {
      if (line.startsWith(""String_Node_Str"")) {
        int i=line.indexOf(':');
        if (i < 0)         continue;
        String s=line.substring(i + 1).trim();
        if (!localnames.contains(s))         rcmds.add(s);
      }
    }
  }
 catch (  IOException ioex) {
  }
  Collections.sort(rcmds);
  String[] remoteCommands=rcmds.toArray(new String[rcmds.size()]);
  Arrays.sort(remoteCommands);
  return remoteCommands;
}","/** 
 * Get the list of commands from the remote server.
 * @return the commands as a String array, sorted
 */
public static String[] getRemoteCommands(Habitat habitat,ProgramOptions po,Environment env) throws CommandException, CommandValidationException {
  Set<String> localnames=new HashSet<String>();
  String cname=CLICommand.class.getName();
  for (  Inhabitant<?> command : habitat.getInhabitantsByContract(cname)) {
    for (    String name : Inhabitants.getNamesFor(command,cname))     localnames.add(name);
  }
  RemoteCommand cmd=new RemoteCommand(""String_Node_Str"",po,env);
  String cmds=cmd.executeAndReturnOutput(""String_Node_Str"");
  List<String> rcmds=new ArrayList<String>();
  BufferedReader r=new BufferedReader(new StringReader(cmds));
  String line;
  try {
    while ((line=r.readLine()) != null) {
      if (!localnames.contains(line)) {
        rcmds.add(line);
      }
    }
  }
 catch (  IOException ioex) {
  }
  Collections.sort(rcmds);
  String[] remoteCommands=rcmds.toArray(new String[rcmds.size()]);
  Arrays.sort(remoteCommands);
  return remoteCommands;
}"
30386,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  context.getActionReport().setActionExitCode(ActionReport.ExitCode.SUCCESS);
  ActionReport report=context.getActionReport();
  report.setMessage(""String_Node_Str"");
  report.getTopMessagePart().setChildrenType(""String_Node_Str"");
  for (  String name : sortedAdminCommands()) {
    ActionReport.MessagePart part=report.getTopMessagePart().addChild();
    part.setMessage(name);
  }
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  context.getActionReport().setActionExitCode(ActionReport.ExitCode.SUCCESS);
  ActionReport report=context.getActionReport();
  report.getTopMessagePart().setChildrenType(""String_Node_Str"");
  for (  String name : sortedAdminCommands()) {
    ActionReport.MessagePart part=report.getTopMessagePart().addChild();
    part.setMessage(name);
  }
}"
30387,"@Override public ListenableFuture<AllocationPhase,VirtualMachine> allocate(final TemplateInstance template,final VirtualCluster cluster) throws VirtException {
  int park=size();
  if (park == 0) {
    throw new VirtException(""String_Node_Str"");
  }
  final List<ListenableFuture<AllocationPhase,VirtualMachine>> vms=new ArrayList<ListenableFuture<AllocationPhase,VirtualMachine>>();
  Iterator<? extends Machine> machines=machines().iterator();
  Machine machine;
  int machineTried=0;
  do {
    if (!machines.hasNext()) {
      machines=machines().iterator();
    }
    machine=machines.next();
    machineTried++;
    if (!machine.isUp()) {
      RuntimeContext.logger.info(""String_Node_Str"" + machine.getName());
      try {
        Habitat habitat=Dom.unwrap(config).getHabitat();
        habitat.getComponent(OsInterface.class).resume(machine);
      }
 catch (      IOException e) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + machine.getName(),e);
      }
      int tries=0;
      do {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        tries++;
      }
 while (!machine.isUp() && tries < 5);
      if (!machine.isUp()) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + machine.getConfig().getDisksLocation());
      }
    }
  }
 while (!machine.isUp() || machineTried > park);
  if (!machine.isUp()) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"");
    throw new VirtException(""String_Node_Str"");
  }
  final Machine targetMachine=machine;
  allocationCount.incrementAndGet();
  final String suffix=allocationCount.toString();
  ListenableFuture<AllocationPhase,VirtualMachine> vm=null;
  try {
    vm=targetMachine.create(template,cluster);
  }
 catch (  IOException e) {
    throw new VirtException(e);
  }
  RuntimeContext.logger.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ cluster.getConfig().getName());
  return vm;
}","@Override public ListenableFuture<AllocationPhase,VirtualMachine> allocate(final TemplateInstance template,final VirtualCluster cluster) throws VirtException {
  int park=size();
  if (park == 0) {
    throw new VirtException(""String_Node_Str"");
  }
  Iterator<? extends Machine> machines=machines().iterator();
  Machine machine;
  int machineTried=0;
  do {
    if (!machines.hasNext()) {
      machines=machines().iterator();
    }
    machine=machines.next();
    machineTried++;
    if (!machine.isUp()) {
      RuntimeContext.logger.info(""String_Node_Str"" + machine.getName());
      try {
        Habitat habitat=Dom.unwrap(config).getHabitat();
        habitat.getComponent(OsInterface.class).resume(machine);
      }
 catch (      IOException e) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + machine.getName(),e);
      }
      int tries=0;
      do {
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        tries++;
      }
 while (!machine.isUp() && tries < 5);
      if (!machine.isUp()) {
        RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"" + machine.getConfig().getDisksLocation());
      }
    }
  }
 while (!machine.isUp() || machineTried > park);
  if (!machine.isUp()) {
    RuntimeContext.logger.log(Level.SEVERE,""String_Node_Str"");
    throw new VirtException(""String_Node_Str"");
  }
  final Machine targetMachine=machine;
  allocationCount.incrementAndGet();
  final String suffix=allocationCount.toString();
  ListenableFuture<AllocationPhase,VirtualMachine> vm=null;
  try {
    vm=targetMachine.create(template,cluster);
  }
 catch (  IOException e) {
    throw new VirtException(e);
  }
  RuntimeContext.logger.info(""String_Node_Str"" + getName() + ""String_Node_Str""+ cluster.getConfig().getName());
  return vm;
}"
30388,"public void writeReport(String prefix,MessagePart part,Manifest m,Attributes attr){
  StringBuilder sb=new StringBuilder();
  getCombinedMessages(this,sb);
  attr.putValue(""String_Node_Str"",sb.toString());
  if (part.getProps().size() > 0) {
    String keys=null;
    for (    Map.Entry entry : part.getProps().entrySet()) {
      String key=fixKey(entry.getKey().toString());
      keys=(keys == null ? key : keys + ""String_Node_Str"" + key);
      attr.putValue(key + ""String_Node_Str"",entry.getKey().toString());
      attr.putValue(key + ""String_Node_Str"",entry.getValue().toString());
    }
    attr.putValue(""String_Node_Str"",keys);
  }
  if (part.getChildren().size() > 0) {
    attr.putValue(""String_Node_Str"",part.getChildrenType());
    String keys=null;
    for (    MessagePart child : part.getChildren()) {
      String cm=child.getMessage().replaceAll(""String_Node_Str"",""String_Node_Str"");
      String newPrefix=(prefix == null ? cm : prefix + ""String_Node_Str"" + cm);
      keys=(keys == null ? newPrefix : keys + ""String_Node_Str"" + newPrefix);
      Attributes childAttr=new Attributes();
      m.getEntries().put(newPrefix,childAttr);
      writeReport(newPrefix,child,m,childAttr);
    }
    attr.putValue(""String_Node_Str"",keys);
  }
}","public void writeReport(String prefix,MessagePart part,Manifest m,Attributes attr){
  StringBuilder sb=new StringBuilder();
  getCombinedMessages(this,sb);
  attr.putValue(""String_Node_Str"",sb.toString());
  if (part.getProps().size() > 0) {
    String keys=null;
    for (    Map.Entry entry : part.getProps().entrySet()) {
      String key=fixKey(entry.getKey().toString());
      keys=(keys == null ? key : keys + ""String_Node_Str"" + key);
      attr.putValue(key + ""String_Node_Str"",entry.getKey().toString());
      attr.putValue(key + ""String_Node_Str"",entry.getValue().toString());
    }
    attr.putValue(""String_Node_Str"",keys);
  }
  if (part.getChildren().size() > 0) {
    attr.putValue(""String_Node_Str"",part.getChildrenType());
    String keys=null;
    for (    MessagePart child : part.getChildren()) {
      String cm=child.getMessage();
      if (cm != null)       cm=cm.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String newPrefix=(prefix == null ? cm : prefix + ""String_Node_Str"" + cm);
      keys=(keys == null ? newPrefix : keys + ""String_Node_Str"" + newPrefix);
      Attributes childAttr=new Attributes();
      m.getEntries().put(newPrefix,childAttr);
      writeReport(newPrefix,child,m,childAttr);
    }
    attr.putValue(""String_Node_Str"",keys);
  }
}"
30389,"private boolean doIsEncodeable(Request hreq,Session session,String location){
  URL url=null;
  try {
    url=new URL(location);
  }
 catch (  MalformedURLException e) {
    return false;
  }
  if (!hreq.getScheme().equalsIgnoreCase(url.getProtocol()))   return false;
  if (!hreq.getServerName().equalsIgnoreCase(url.getHost()))   return false;
  int serverPort=hreq.getServerPort();
  if (serverPort == -1) {
    if (""String_Node_Str"".equals(hreq.getScheme()))     serverPort=443;
 else     serverPort=80;
  }
  int urlPort=url.getPort();
  if (urlPort == -1) {
    if (""String_Node_Str"".equals(url.getProtocol()))     urlPort=443;
 else     urlPort=80;
  }
  if (serverPort != urlPort)   return false;
  Context ctx=getContext();
  if (ctx != null) {
    String contextPath=ctx.getPath();
    if (contextPath != null) {
      String file=url.getFile();
      if (file == null || !file.startsWith(contextPath)) {
        return false;
      }
      String sessionParamName=ctx.getSessionParameterName();
      if (file.contains(""String_Node_Str"" + sessionParamName + ""String_Node_Str""+ session.getIdInternal())) {
        return false;
      }
    }
  }
  return true;
}","private boolean doIsEncodeable(Request hreq,Session session,String location){
  URL url=null;
  try {
    url=new URL(location);
  }
 catch (  MalformedURLException e) {
    return false;
  }
  if (!hreq.getServerName().equalsIgnoreCase(url.getHost()))   return false;
  int serverPort=hreq.getServerPort();
  if (serverPort == -1) {
    if (""String_Node_Str"".equals(hreq.getScheme()))     serverPort=443;
 else     serverPort=80;
  }
  int urlPort=url.getPort();
  boolean httpsLocation=""String_Node_Str"".equals(url.getProtocol());
  if (urlPort == -1) {
    if (httpsLocation)     urlPort=443;
 else     urlPort=80;
  }
  if (!((hreq.getScheme().equalsIgnoreCase(url.getProtocol()) && serverPort == urlPort) || httpsLocation)) {
    return false;
  }
  Context ctx=getContext();
  if (ctx != null) {
    String contextPath=ctx.getPath();
    if (contextPath != null) {
      String file=url.getFile();
      if (file == null || !file.startsWith(contextPath)) {
        return false;
      }
      String sessionParamName=ctx.getSessionParameterName();
      if (file.contains(""String_Node_Str"" + sessionParamName + ""String_Node_Str""+ session.getIdInternal())) {
        return false;
      }
    }
  }
  return true;
}"
30390,"/** 
 * Method to be used to create resource, instead of calling ResourceAllocator.createConfigBean(). This method handles the connection creation retrial in case of failure
 * @param resourceAllocator ResourceAllocator
 * @return ResourceHandle newly created resource
 * @throws PoolingException when unable create a resource
 */
protected ResourceHandle createSingleResource(ResourceAllocator resourceAllocator) throws PoolingException {
  ResourceHandle resourceHandle;
  int count=0;
  long startTime=0;
  while (true) {
    try {
      count++;
      startTime=System.currentTimeMillis();
      resourceHandle=resourceAllocator.createResource();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + resourceHandle.getResourceSpec().getResourceId() + ""String_Node_Str""+ (System.currentTimeMillis() - startTime));
      }
      if (validation || validateAtmostEveryIdleSecs)       resourceHandle.setLastValidated(System.currentTimeMillis());
      break;
    }
 catch (    Exception ex) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + count + ""String_Node_Str""+ ""String_Node_Str"",ex);
      }
      if (!connectionCreationRetry_ || count >= connectionCreationRetryAttempts_)       throw new PoolingException(ex);
      try {
        Thread.sleep(conCreationRetryInterval_);
      }
 catch (      InterruptedException ie) {
      }
    }
  }
  return resourceHandle;
}","/** 
 * Method to be used to create resource, instead of calling ResourceAllocator.createConfigBean(). This method handles the connection creation retrial in case of failure
 * @param resourceAllocator ResourceAllocator
 * @return ResourceHandle newly created resource
 * @throws PoolingException when unable create a resource
 */
protected ResourceHandle createSingleResource(ResourceAllocator resourceAllocator) throws PoolingException {
  ResourceHandle resourceHandle;
  int count=0;
  long startTime=0;
  while (true) {
    try {
      count++;
      startTime=System.currentTimeMillis();
      resourceHandle=resourceAllocator.createResource();
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + resourceHandle.getResourceSpec().getResourceId() + ""String_Node_Str""+ (System.currentTimeMillis() - startTime));
      }
      if (validation || validateAtmostEveryIdleSecs)       resourceHandle.setLastValidated(System.currentTimeMillis());
      break;
    }
 catch (    Exception ex) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + count + ""String_Node_Str""+ ""String_Node_Str"",ex);
      }
      if (!connectionCreationRetry_ || count > connectionCreationRetryAttempts_)       throw new PoolingException(ex);
      try {
        Thread.sleep(conCreationRetryInterval_);
      }
 catch (      InterruptedException ie) {
      }
    }
  }
  return resourceHandle;
}"
30391,"static File obtainFileStatusDir(File f,File statDir,File autoDeployDir){
  File dir=f.getParentFile();
  while (!dir.getAbsolutePath().equals(autoDeployDir.getAbsolutePath())) {
    statDir=new File(statDir,dir.getName());
    dir=dir.getParentFile();
  }
  if (autoDeployDir.exists()) {
    if (!statDir.mkdirs()) {
      sLogger.log(Level.WARNING,""String_Node_Str"",autoDeployDir.getAbsolutePath());
    }
  }
  return statDir;
}","static File obtainFileStatusDir(File f,File statDir,File autoDeployDir){
  File dir=f.getParentFile();
  while (!dir.getAbsolutePath().equals(autoDeployDir.getAbsolutePath())) {
    statDir=new File(statDir,dir.getName());
    dir=dir.getParentFile();
  }
  if (autoDeployDir.exists()) {
    if (!statDir.exists() && !statDir.mkdirs()) {
      sLogger.log(Level.WARNING,""String_Node_Str"",autoDeployDir.getAbsolutePath());
    }
  }
  return statDir;
}"
30392,"/** 
 * Method getLogger
 * @param clazz
 * @param name
 * @return
 */
public static synchronized Logger getLogger(final Class clazz,final String name){
  final ClassLoader cloader=clazz.getClassLoader();
  Logger l=LogManager.getLogManager().getLogger(name);
  if (l == null) {
    l=Logger.getLogger(name);
  }
  ;
  String pkgName=clazz.getPackage().getName();
  String loggerName=name + ""String_Node_Str"" + pkgName;
  Logger cLogger=LogManager.getLogManager().getLogger(loggerName);
  if (cLogger == null) {
    cLogger=new Logger(loggerName,null){
      private final int offValue=Level.OFF.intValue();
      public void log(      LogRecord record){
        record.getSourceMethodName();
        if (record.getResourceBundle() == null) {
          ResourceBundle rb=getResourceBundle();
          if (rb != null) {
            record.setResourceBundle(rb);
          }
        }
        if (record.getMessage() == null) {
          record.setMessage(""String_Node_Str"");
        }
        super.log(record);
      }
      /** 
 * Retrieve the localization resource bundle for this logger for the current default locale.  Note that if the result is null, then the Logger will use a resource bundle inherited from its parent.
 * @return localization bundle (may be null)
 */
      public ResourceBundle getResourceBundle(){
        try {
          return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
        }
 catch (        MissingResourceException e) {
          String root=clazz.getPackage().getName();
          try {
            return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 catch (          MissingResourceException me) {
            String p=root;
            while (p != null) {
              try {
                int i=p.lastIndexOf(""String_Node_Str"");
                if (i != -1) {
                  p=p.substring(0,i);
                  return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
                }
 else {
                  p=null;
                }
              }
 catch (              MissingResourceException mre) {
              }
            }
          }
          try {
            return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
          }
 catch (          MissingResourceException me) {
          }
          Logger l=LogManager.getLogManager().getLogger(name);
          l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
          return null;
        }
      }
    }
;
    if (!addLoggerToLogManager(cLogger)) {
      final Logger existing=LogManager.getLogManager().getLogger(name);
      if (existing == null) {
        addLoggerToLogManager(cLogger);
      }
 else {
        cLogger=existing;
      }
    }
  }
  ;
  return cLogger;
}","/** 
 * Method getLogger
 * @param clazz
 * @param name
 * @return
 */
public static synchronized Logger getLogger(final Class clazz,final String name){
  final ClassLoader cloader=clazz.getClassLoader();
  Logger l=LogManager.getLogManager().getLogger(name);
  if (l == null) {
    l=Logger.getLogger(name);
  }
  ;
  String pkgName=clazz.getPackage().getName();
  String loggerName=name + ""String_Node_Str"" + pkgName;
  Logger cLogger=LogManager.getLogManager().getLogger(loggerName);
  if (cLogger == null) {
    cLogger=new Logger(loggerName,null){
      private final int offValue=Level.OFF.intValue();
      public void log(      LogRecord record){
        record.getSourceMethodName();
        if (record.getResourceBundle() == null) {
          ResourceBundle rb=getResourceBundle();
          if (rb != null) {
            record.setResourceBundle(rb);
          }
        }
        if (record.getMessage() == null) {
          record.setMessage(""String_Node_Str"");
        }
        super.log(record);
      }
      /** 
 * Retrieve the localization resource bundle for this logger for the current default locale.  Note that if the result is null, then the Logger will use a resource bundle inherited from its parent.
 * @return localization bundle (may be null)
 */
      public ResourceBundle getResourceBundle(){
        try {
          return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
        }
 catch (        MissingResourceException e) {
          String root=clazz.getPackage().getName();
          try {
            return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 catch (          MissingResourceException me) {
            String p=root;
            while (p != null) {
              try {
                int i=p.lastIndexOf(""String_Node_Str"");
                if (i != -1) {
                  p=p.substring(0,i);
                  return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
                }
 else {
                  p=null;
                }
              }
 catch (              MissingResourceException mre) {
              }
            }
          }
          try {
            return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
          }
 catch (          MissingResourceException me) {
          }
          if (!vectorClazz.contains(clazz.getName())) {
            Logger l=LogManager.getLogManager().getLogger(name);
            l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
            vectorClazz.add(clazz.getName());
          }
          return null;
        }
      }
    }
;
    if (!addLoggerToLogManager(cLogger)) {
      final Logger existing=LogManager.getLogManager().getLogger(name);
      if (existing == null) {
        addLoggerToLogManager(cLogger);
      }
 else {
        cLogger=existing;
      }
    }
  }
  ;
  return cLogger;
}"
30393,"/** 
 * Retrieve the localization resource bundle for this logger for the current default locale.  Note that if the result is null, then the Logger will use a resource bundle inherited from its parent.
 * @return localization bundle (may be null)
 */
public ResourceBundle getResourceBundle(){
  try {
    return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
  }
 catch (  MissingResourceException e) {
    String root=clazz.getPackage().getName();
    try {
      return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
    }
 catch (    MissingResourceException me) {
      String p=root;
      while (p != null) {
        try {
          int i=p.lastIndexOf(""String_Node_Str"");
          if (i != -1) {
            p=p.substring(0,i);
            return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 else {
            p=null;
          }
        }
 catch (        MissingResourceException mre) {
        }
      }
    }
    try {
      return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
    }
 catch (    MissingResourceException me) {
    }
    Logger l=LogManager.getLogManager().getLogger(name);
    l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
    return null;
  }
}","/** 
 * Retrieve the localization resource bundle for this logger for the current default locale.  Note that if the result is null, then the Logger will use a resource bundle inherited from its parent.
 * @return localization bundle (may be null)
 */
public ResourceBundle getResourceBundle(){
  try {
    return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
  }
 catch (  MissingResourceException e) {
    String root=clazz.getPackage().getName();
    try {
      return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
    }
 catch (    MissingResourceException me) {
      String p=root;
      while (p != null) {
        try {
          int i=p.lastIndexOf(""String_Node_Str"");
          if (i != -1) {
            p=p.substring(0,i);
            return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 else {
            p=null;
          }
        }
 catch (        MissingResourceException mre) {
        }
      }
    }
    try {
      return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
    }
 catch (    MissingResourceException me) {
    }
    if (!vectorClazz.contains(clazz.getName())) {
      Logger l=LogManager.getLogManager().getLogger(name);
      l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
      vectorClazz.add(clazz.getName());
    }
    return null;
  }
}"
30394,"/** 
 * Obtain connection validation class names.
 * @see #VALIDATION_CLASS_NAMES_KEY
 * @see #REASON_FAILED_KEY
 */
@ManagedOperation(impact=MBeanOperationInfo.INFO) @Description(""String_Node_Str"") public Map<String,Object> getValidationClassNames(final String dbVendor);","/** 
 * Obtain connection validation class names.
 * @see #VALIDATION_CLASS_NAMES_KEY
 * @see #REASON_FAILED_KEY
 */
@ManagedOperation(impact=MBeanOperationInfo.INFO) @Description(""String_Node_Str"") public Map<String,Object> getValidationClassNames(final String className);"
30395,"/** 
 * Obtain a set of connection validation class names for the database vendor that the jdbc connection pool refers to. This API is used when custom-validation is chosen as the connection validation method, to list the various custom validation implementations available for this dbvendor.
 * @param poolName
 * @return a map containing a VALIDATION_CLASS_NAMES_KEY with a set ofvalidation class names. If VALIDATION_CLASS_NAMES_KEY is null, an  exception has occured and REASON_FAILED_KEY would give the reason why getting connection validation classnames failed.
 */
public Map<String,Object> getValidationClassNames(final String dbVendor){
  final Map<String,Object> result=new HashMap<String,Object>();
  if (mHabitat == null) {
    result.put(ConnectorRuntimeAPIProvider.VALIDATION_CLASS_NAMES_KEY,false);
    result.put(ConnectorRuntimeAPIProvider.REASON_FAILED_KEY,""String_Node_Str"");
    return result;
  }
  try {
    final ConnectorRuntime connRuntime=mHabitat.getComponent(ConnectorRuntime.class,null);
    final Set<String> valClassNames=connRuntime.getValidationClassNames(dbVendor);
    result.put(ConnectorRuntimeAPIProvider.VALIDATION_CLASS_NAMES_KEY,valClassNames);
  }
 catch (  ComponentException e) {
    result.put(ConnectorRuntimeAPIProvider.VALIDATION_CLASS_NAMES_KEY,null);
    result.put(ConnectorRuntimeAPIProvider.REASON_FAILED_KEY,ExceptionUtil.toString(e));
  }
catch (  Exception e) {
    result.put(ConnectorRuntimeAPIProvider.VALIDATION_CLASS_NAMES_KEY,null);
    result.put(ConnectorRuntimeAPIProvider.REASON_FAILED_KEY,ExceptionUtil.toString(e));
  }
  return result;
}","/** 
 * Obtain a set of connection validation class names for the datasource/driver class name that the jdbc connection pool refers to. This API is used when custom-validation is chosen as the connection validation method, to list the various custom validation implementations available.
 * @param className
 * @return a map containing a VALIDATION_CLASS_NAMES_KEY with a set ofvalidation class names. If VALIDATION_CLASS_NAMES_KEY is null, an  exception has occured and REASON_FAILED_KEY would give the reason why getting connection validation classnames failed.
 */
public Map<String,Object> getValidationClassNames(final String className){
  final Map<String,Object> result=new HashMap<String,Object>();
  if (mHabitat == null) {
    result.put(ConnectorRuntimeAPIProvider.VALIDATION_CLASS_NAMES_KEY,false);
    result.put(ConnectorRuntimeAPIProvider.REASON_FAILED_KEY,""String_Node_Str"");
    return result;
  }
  try {
    final ConnectorRuntime connRuntime=mHabitat.getComponent(ConnectorRuntime.class,null);
    final Set<String> valClassNames=connRuntime.getValidationClassNames(className);
    result.put(ConnectorRuntimeAPIProvider.VALIDATION_CLASS_NAMES_KEY,valClassNames);
  }
 catch (  ComponentException e) {
    result.put(ConnectorRuntimeAPIProvider.VALIDATION_CLASS_NAMES_KEY,null);
    result.put(ConnectorRuntimeAPIProvider.REASON_FAILED_KEY,ExceptionUtil.toString(e));
  }
catch (  Exception e) {
    result.put(ConnectorRuntimeAPIProvider.VALIDATION_CLASS_NAMES_KEY,null);
    result.put(ConnectorRuntimeAPIProvider.REASON_FAILED_KEY,ExceptionUtil.toString(e));
  }
  return result;
}"
30396,"/** 
 * Get Validation class names list for the database vendor that the jdbc  connection pool refers to. This is used for custom connection validation.
 * @param dbVendor database vendor
 * @return all validation class names.
 */
public Set<String> getValidationClassNames(String dbVendor);","/** 
 * Get Validation class names list for the datasource/driver class name that the jdbc connection pool refers to. This is used for custom connection validation.
 * @param className class name
 * @return all validation class names.
 */
public Set<String> getValidationClassNames(String className);"
30397,"/** 
 * Get Validation class names list for the database vendor that the jdbc  connection pool refers to. This is used for custom connection validation.
 * @param dbVendor
 * @return all validation class names.
 */
public Set<String> getValidationClassNames(String dbVendor){
  return jdbcAdminService.getValidationClassNames(dbVendor);
}","/** 
 * Get Validation class names list for the datasource/driver class name that the jdbc connection pool refers to. This is used for custom connection validation.
 * @param className class name
 * @return all validation class names.
 */
public Set<String> getValidationClassNames(String className){
  return jdbcAdminService.getValidationClassNames(className);
}"
30398,"/** 
 * Get Validation class names list for the database vendor that the jdbc  connection pool refers to. This is used for custom connection validation.
 * @param dbVendor
 * @return all validation class names.
 */
public Set<String> getValidationClassNames(String dbVendor){
  SortedSet classNames=new TreeSet();
  if (dbVendor.equalsIgnoreCase(""String_Node_Str"")) {
    classNames.add(""String_Node_Str"");
  }
 else   if (dbVendor.equalsIgnoreCase(""String_Node_Str"")) {
    classNames.add(""String_Node_Str"");
  }
 else   if (dbVendor.equalsIgnoreCase(""String_Node_Str"")) {
    classNames.add(""String_Node_Str"");
  }
 else   if (dbVendor.equalsIgnoreCase(""String_Node_Str"")) {
    classNames.add(""String_Node_Str"");
  }
  return classNames;
}","/** 
 * Get Validation class names list for the classname that the jdbc  connection pool refers to. This is used for custom connection validation.
 * @param className
 * @return all validation class names.
 */
public Set<String> getValidationClassNames(String className){
  SortedSet classNames=new TreeSet();
  if (className == null) {
    _logger.log(Level.WARNING,""String_Node_Str"");
    return classNames;
  }
  File validationClassMappingFile;
  String dbVendor=getDatabaseVendorName(className);
  if (dbVendor != null) {
    validationClassMappingFile=new File(DBVENDOR_MAPPINGS_ROOT + CONVAL_PROPERTIES);
    Properties validationClassMappings=DriverLoader.loadFile(validationClassMappingFile);
    String validationClassName=validationClassMappings.getProperty(dbVendor);
    if (validationClassName != null) {
      classNames.add(validationClassName);
    }
    if (detectJDBC40(className)) {
      classNames.add(JDBC40_CONNECTION_VALIDATION);
    }
  }
  return classNames;
}"
30399,"/** 
 * Perform the filtering that has been configured for this Valve, matching against the specified request property.
 * @param property The request property on which to filter
 * @param request The servlet request to be processed
 * @param response The servlet response to be processed
 * @exception IOException if an input/output error occurs
 * @exception ServletException if a servlet error occurs
 */
protected int process(String property,Request request,Response response) throws IOException, ServletException {
  for (int i=0; i < denies.length; i++) {
    if (denies[i].matcher(property).matches()) {
      ServletResponse sres=response.getResponse();
      HttpServletResponse hres=(HttpServletResponse)sres;
      hres.sendError(HttpServletResponse.SC_FORBIDDEN);
      return END_PIPELINE;
    }
  }
  for (int i=0; i < allows.length; i++) {
    if (allows[i].matcher(property).matches()) {
      return INVOKE_NEXT;
    }
  }
  if ((denies.length > 0) && (allows.length == 0)) {
    return INVOKE_NEXT;
  }
  ServletResponse sres=response.getResponse();
  HttpServletResponse hres=(HttpServletResponse)sres;
  hres.sendError(HttpServletResponse.SC_FORBIDDEN);
  return END_PIPELINE;
}","/** 
 * Perform the filtering that has been configured for this Valve, matching against the specified request property.
 * @param property The request property on which to filter
 * @param request The servlet request to be processed
 * @param response The servlet response to be processed
 * @exception IOException if an input/output error occurs
 * @exception ServletException if a servlet error occurs
 */
protected int process(String property,Request request,Response response) throws IOException, ServletException {
  for (int i=0; i < denies.length; i++) {
    if (denies[i].matcher(property).matches()) {
      handleError(request,response,HttpServletResponse.SC_FORBIDDEN);
      return END_PIPELINE;
    }
  }
  for (int i=0; i < allows.length; i++) {
    if (allows[i].matcher(property).matches()) {
      return INVOKE_NEXT;
    }
  }
  if ((denies.length > 0) && (allows.length == 0)) {
    return INVOKE_NEXT;
  }
  handleError(request,response,HttpServletResponse.SC_FORBIDDEN);
  return END_PIPELINE;
}"
30400,"protected void service(HttpServletRequest hreq,HttpServletResponse hresp) throws ServletException, IOException {
  boolean dispatch=true;
  String requestUriRaw=hreq.getRequestURI();
  String requestUri=(requestUriRaw.charAt(0) == '/') ? requestUriRaw.substring(1) : requestUriRaw;
  String query=hreq.getQueryString();
  if (""String_Node_Str"".equalsIgnoreCase(query)) {
    Endpoint endpoint=WebServiceEngineImpl.getInstance().getEndpoint(hreq.getRequestURI());
    if ((endpoint.getDescriptor().isSecure()) || (endpoint.getDescriptor().getMessageSecurityBinding() != null)) {
      String message=endpoint.getDescriptor().getWebService().getName() + ""String_Node_Str"";
      (new WsUtil()).writeInvalidMethodType(hresp,message);
      return;
    }
    if (endpoint != null && Boolean.parseBoolean(endpoint.getDescriptor().getDebugging())) {
      dispatch=false;
      WebServiceTesterServlet.invoke(hreq,hresp,endpoint.getDescriptor());
    }
  }
  if (dispatch) {
    WebServiceEjbEndpointRegistry wsejbEndpointRegistry=(WebServiceEjbEndpointRegistry)org.glassfish.internal.api.Globals.getDefaultHabitat().getComponent(WSEjbEndpointRegistry.class);
    EjbRuntimeEndpointInfo ejbEndpoint=wsejbEndpointRegistry.getEjbWebServiceEndpoint(requestUri,hreq.getMethod(),query);
    if (ejbEndpoint != null) {
      dispatchToEjbEndpoint(hreq,hresp,ejbEndpoint);
    }
  }
}","protected void service(HttpServletRequest hreq,HttpServletResponse hresp) throws ServletException, IOException {
  boolean dispatch=true;
  String requestUriRaw=hreq.getRequestURI();
  String requestUri=(requestUriRaw.charAt(0) == '/') ? requestUriRaw.substring(1) : requestUriRaw;
  String query=hreq.getQueryString();
  if (""String_Node_Str"".equalsIgnoreCase(query)) {
    Endpoint endpoint=WebServiceEngineImpl.getInstance().getEndpoint(hreq.getRequestURI());
    if ((endpoint.getDescriptor().isSecure()) || (endpoint.getDescriptor().getMessageSecurityBinding() != null)) {
      String message=endpoint.getDescriptor().getWebService().getName() + ""String_Node_Str"";
      (new WsUtil()).writeInvalidMethodType(hresp,message);
      return;
    }
    if (Boolean.parseBoolean(endpoint.getDescriptor().getDebugging())) {
      dispatch=false;
      WebServiceTesterServlet.invoke(hreq,hresp,endpoint.getDescriptor());
    }
  }
  if (dispatch) {
    WebServiceEjbEndpointRegistry wsejbEndpointRegistry=(WebServiceEjbEndpointRegistry)org.glassfish.internal.api.Globals.getDefaultHabitat().getComponent(WSEjbEndpointRegistry.class);
    EjbRuntimeEndpointInfo ejbEndpoint=wsejbEndpointRegistry.getEjbWebServiceEndpoint(requestUri,hreq.getMethod(),query);
    if (ejbEndpoint != null) {
      dispatchToEjbEndpoint(hreq,hresp,ejbEndpoint);
    }
  }
}"
30401,"ContextAdapter(String contextRoot){
  this.contextRoot=contextRoot;
  fixedUrlPatternEndpoints=new HashMap();
  pathUrlPatternEndpoints=new ArrayList();
}","ContextAdapter(){
  fixedUrlPatternEndpoints=new HashMap();
  pathUrlPatternEndpoints=new ArrayList();
}"
30402,"/** 
 * Convert invocation method to a constant for easier processing.
 */
private static void Init(){
  serviceMethodTypes=new HashMap();
  fullWsdlIllegalMethods=new HashSet();
  noWsdlIllegalMethods=new HashSet();
  try {
    Class noParams[]=new Class[0];
    String createCall=""String_Node_Str"";
    Class serviceClass=javax.xml.rpc.Service.class;
    Method createCallNoArgs=serviceClass.getDeclaredMethod(createCall,noParams);
    serviceMethodTypes.put(createCallNoArgs,Integer.valueOf(CREATE_CALL_NO_ARGS));
    Method createCallPort=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class});
    serviceMethodTypes.put(createCallPort,Integer.valueOf(CREATE_CALL_PORT));
    Method createCallOperationQName=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class,QName.class});
    serviceMethodTypes.put(createCallOperationQName,Integer.valueOf(CREATE_CALL_OPERATION_QNAME));
    Method createCallOperationString=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class,String.class});
    serviceMethodTypes.put(createCallOperationString,Integer.valueOf(CREATE_CALL_OPERATION_STRING));
    Method getCalls=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{QName.class});
    serviceMethodTypes.put(getCalls,new Integer(GET_CALLS));
    Method getHandlerRegistry=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getHandlerRegistry,Integer.valueOf(GET_HANDLER_REGISTRY));
    Method getPortContainerManaged=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{Class.class});
    serviceMethodTypes.put(getPortContainerManaged,Integer.valueOf(GET_PORT_CONTAINER_MANAGED));
    Method getPortClientManaged=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{QName.class,Class.class});
    serviceMethodTypes.put(getPortClientManaged,Integer.valueOf(GET_PORT_CLIENT_MANAGED));
    Method getPorts=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getPorts,new Integer(GET_PORTS));
    Method getServiceName=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getServiceName,Integer.valueOf(GET_SERVICE_NAME));
    Method getTypeMappingRegistry=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getTypeMappingRegistry,Integer.valueOf(GET_TYPE_MAPPING_REGISTRY));
    Method getWsdlLocation=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getWsdlLocation,Integer.valueOf(GET_WSDL_LOCATION));
  }
 catch (  NoSuchMethodException nsme) {
  }
  fullWsdlIllegalMethods.add(GET_HANDLER_REGISTRY);
  fullWsdlIllegalMethods.add(GET_TYPE_MAPPING_REGISTRY);
  noWsdlIllegalMethods.add(CREATE_CALL_PORT);
  noWsdlIllegalMethods.add(CREATE_CALL_OPERATION_QNAME);
  noWsdlIllegalMethods.add(CREATE_CALL_OPERATION_STRING);
  noWsdlIllegalMethods.add(GET_CALLS);
  noWsdlIllegalMethods.add(GET_HANDLER_REGISTRY);
  noWsdlIllegalMethods.add(GET_PORT_CONTAINER_MANAGED);
  noWsdlIllegalMethods.add(GET_PORT_CLIENT_MANAGED);
  noWsdlIllegalMethods.add(GET_PORTS);
  noWsdlIllegalMethods.add(GET_SERVICE_NAME);
  noWsdlIllegalMethods.add(GET_TYPE_MAPPING_REGISTRY);
  noWsdlIllegalMethods.add(GET_WSDL_LOCATION);
  noWsdlIllegalMethods.add(new Integer(GENERATED_SERVICE_METHOD));
}","/** 
 * Convert invocation method to a constant for easier processing.
 */
private static void Init(){
  serviceMethodTypes=new HashMap();
  fullWsdlIllegalMethods=new HashSet();
  noWsdlIllegalMethods=new HashSet();
  try {
    Class noParams[]=new Class[0];
    String createCall=""String_Node_Str"";
    Class serviceClass=javax.xml.rpc.Service.class;
    Method createCallNoArgs=serviceClass.getDeclaredMethod(createCall,noParams);
    serviceMethodTypes.put(createCallNoArgs,Integer.valueOf(CREATE_CALL_NO_ARGS));
    Method createCallPort=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class});
    serviceMethodTypes.put(createCallPort,Integer.valueOf(CREATE_CALL_PORT));
    Method createCallOperationQName=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class,QName.class});
    serviceMethodTypes.put(createCallOperationQName,Integer.valueOf(CREATE_CALL_OPERATION_QNAME));
    Method createCallOperationString=serviceClass.getDeclaredMethod(createCall,new Class[]{QName.class,String.class});
    serviceMethodTypes.put(createCallOperationString,Integer.valueOf(CREATE_CALL_OPERATION_STRING));
    Method getCalls=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{QName.class});
    serviceMethodTypes.put(getCalls,Integer.valueOf(GET_CALLS));
    Method getHandlerRegistry=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getHandlerRegistry,Integer.valueOf(GET_HANDLER_REGISTRY));
    Method getPortContainerManaged=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{Class.class});
    serviceMethodTypes.put(getPortContainerManaged,Integer.valueOf(GET_PORT_CONTAINER_MANAGED));
    Method getPortClientManaged=serviceClass.getDeclaredMethod(""String_Node_Str"",new Class[]{QName.class,Class.class});
    serviceMethodTypes.put(getPortClientManaged,Integer.valueOf(GET_PORT_CLIENT_MANAGED));
    Method getPorts=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getPorts,new Integer(GET_PORTS));
    Method getServiceName=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getServiceName,Integer.valueOf(GET_SERVICE_NAME));
    Method getTypeMappingRegistry=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getTypeMappingRegistry,Integer.valueOf(GET_TYPE_MAPPING_REGISTRY));
    Method getWsdlLocation=serviceClass.getDeclaredMethod(""String_Node_Str"",noParams);
    serviceMethodTypes.put(getWsdlLocation,Integer.valueOf(GET_WSDL_LOCATION));
  }
 catch (  NoSuchMethodException nsme) {
  }
  fullWsdlIllegalMethods.add(GET_HANDLER_REGISTRY);
  fullWsdlIllegalMethods.add(GET_TYPE_MAPPING_REGISTRY);
  noWsdlIllegalMethods.add(CREATE_CALL_PORT);
  noWsdlIllegalMethods.add(CREATE_CALL_OPERATION_QNAME);
  noWsdlIllegalMethods.add(CREATE_CALL_OPERATION_STRING);
  noWsdlIllegalMethods.add(GET_CALLS);
  noWsdlIllegalMethods.add(GET_HANDLER_REGISTRY);
  noWsdlIllegalMethods.add(GET_PORT_CONTAINER_MANAGED);
  noWsdlIllegalMethods.add(GET_PORT_CLIENT_MANAGED);
  noWsdlIllegalMethods.add(GET_PORTS);
  noWsdlIllegalMethods.add(GET_SERVICE_NAME);
  noWsdlIllegalMethods.add(GET_TYPE_MAPPING_REGISTRY);
  noWsdlIllegalMethods.add(GET_WSDL_LOCATION);
  noWsdlIllegalMethods.add(new Integer(GENERATED_SERVICE_METHOD));
}"
30403,"private void checkUnsupportedMethods(int methodType) throws UnsupportedOperationException {
  Set illegalMethods=fullWsdl ? fullWsdlIllegalMethods : noWsdlIllegalMethods;
  if (illegalMethods.contains(new Integer(methodType))) {
    throw new UnsupportedOperationException();
  }
  return;
}","private void checkUnsupportedMethods(int methodType) throws UnsupportedOperationException {
  Set illegalMethods=fullWsdl ? fullWsdlIllegalMethods : noWsdlIllegalMethods;
  if (illegalMethods.contains(Integer.valueOf(methodType))) {
    throw new UnsupportedOperationException();
  }
  return;
}"
30404,"/** 
 * Note: This method is not synchronized, we are assuming that the synchronization will happen at the Log Handler.publish( ) method.
 */
private String uniformLogFormat(LogRecord record){
  try {
    SimpleDateFormat dateFormatter=new SimpleDateFormat(getRecordDateFormat() != null ? getRecordDateFormat() : RFC_3339_DATE_FORMAT);
    StringBuilder recordBuffer=new StringBuilder(getRecordBeginMarker() != null ? getRecordBeginMarker() : RECORD_BEGIN_MARKER);
    date.setTime(record.getMillis());
    recordBuffer.append(dateFormatter.format(date));
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(record.getLevel()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(getProductId()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(record.getLoggerName()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    recordBuffer.append(record.getThreadID()).append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    recordBuffer.append(Thread.currentThread().getName());
    recordBuffer.append(NVPAIR_SEPARATOR);
    Level level=record.getLevel();
    if (LOG_SOURCE_IN_KEY_VALUE || (level.intValue() <= Level.FINE.intValue())) {
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(record.getSourceClassName());
      recordBuffer.append(NVPAIR_SEPARATOR);
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(record.getSourceMethodName());
      recordBuffer.append(NVPAIR_SEPARATOR);
    }
    if (RECORD_NUMBER_IN_KEY_VALUE) {
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(recordNumber++).append(NVPAIR_SEPARATOR);
    }
    getNameValuePairs(recordBuffer,record);
    if (_delegate != null) {
      _delegate.format(recordBuffer,level);
    }
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    String logMessage=record.getMessage();
    if (logMessage == null || logMessage.trim().equals(""String_Node_Str"")) {
      if (record.getThrown() != null) {
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        recordBuffer.append(sw.toString());
        sw.close();
      }
 else {
        logMessage=""String_Node_Str"";
        recordBuffer.append(logMessage);
      }
    }
 else {
      if (logMessage.indexOf(""String_Node_Str"") >= 0 && record.getParameters() != null) {
        logMessage=java.text.MessageFormat.format(logMessage,record.getParameters());
      }
 else {
        ResourceBundle rb=getResourceBundle(record.getLoggerName());
        if (rb != null) {
          try {
            logMessage=MessageFormat.format(rb.getString(logMessage),record.getParameters());
          }
 catch (          java.util.MissingResourceException e) {
          }
        }
      }
      recordBuffer.append(logMessage);
      if (record.getThrown() != null) {
        recordBuffer.append(LINE_SEPARATOR);
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        recordBuffer.append(sw.toString());
        sw.close();
      }
    }
    recordBuffer.append((getRecordEndMarker() != null ? getRecordEndMarker() : RECORD_END_MARKER) + LINE_SEPARATOR + LINE_SEPARATOR);
    return recordBuffer.toString();
  }
 catch (  Exception ex) {
    new ErrorManager().error(""String_Node_Str"",ex,ErrorManager.FORMAT_FAILURE);
    return ""String_Node_Str"";
  }
}","/** 
 * Note: This method is not synchronized, we are assuming that the synchronization will happen at the Log Handler.publish( ) method.
 */
private String uniformLogFormat(LogRecord record){
  try {
    SimpleDateFormat dateFormatter=new SimpleDateFormat(getRecordDateFormat() != null ? getRecordDateFormat() : RFC_3339_DATE_FORMAT);
    StringBuilder recordBuffer=new StringBuilder(getRecordBeginMarker() != null ? getRecordBeginMarker() : RECORD_BEGIN_MARKER);
    date.setTime(record.getMillis());
    recordBuffer.append(dateFormatter.format(date));
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(record.getLevel()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(getProductId()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(record.getLoggerName()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    recordBuffer.append(record.getThreadID()).append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    recordBuffer.append(Thread.currentThread().getName());
    recordBuffer.append(NVPAIR_SEPARATOR);
    Level level=record.getLevel();
    if (LOG_SOURCE_IN_KEY_VALUE || (level.intValue() <= Level.FINE.intValue())) {
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(record.getSourceClassName());
      recordBuffer.append(NVPAIR_SEPARATOR);
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(record.getSourceMethodName());
      recordBuffer.append(NVPAIR_SEPARATOR);
    }
    if (RECORD_NUMBER_IN_KEY_VALUE) {
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(recordNumber++).append(NVPAIR_SEPARATOR);
    }
    if (_delegate != null) {
      _delegate.format(recordBuffer,level);
    }
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    String logMessage=record.getMessage();
    if (logMessage == null || logMessage.trim().equals(""String_Node_Str"")) {
      if (record.getThrown() != null) {
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        recordBuffer.append(sw.toString());
        sw.close();
      }
 else {
        logMessage=""String_Node_Str"";
        recordBuffer.append(logMessage);
      }
    }
 else {
      if (logMessage.indexOf(""String_Node_Str"") >= 0 && record.getParameters() != null) {
        logMessage=java.text.MessageFormat.format(logMessage,record.getParameters());
      }
 else {
        ResourceBundle rb=getResourceBundle(record.getLoggerName());
        if (rb != null) {
          try {
            logMessage=MessageFormat.format(rb.getString(logMessage),record.getParameters());
          }
 catch (          java.util.MissingResourceException e) {
          }
        }
      }
      recordBuffer.append(logMessage);
      if (record.getThrown() != null) {
        recordBuffer.append(LINE_SEPARATOR);
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        recordBuffer.append(sw.toString());
        sw.close();
      }
    }
    recordBuffer.append((getRecordEndMarker() != null ? getRecordEndMarker() : RECORD_END_MARKER) + LINE_SEPARATOR + LINE_SEPARATOR);
    return recordBuffer.toString();
  }
 catch (  Exception ex) {
    new ErrorManager().error(""String_Node_Str"",ex,ErrorManager.FORMAT_FAILURE);
    return ""String_Node_Str"";
  }
}"
30405,"public void log(LogRecord record){
  record.getSourceMethodName();
  if (record.getResourceBundle() == null) {
    ResourceBundle rb=getResourceBundle();
    if (rb != null) {
      record.setResourceBundle(rb);
    }
  }
  super.log(record);
}","public void log(LogRecord record){
  record.getSourceMethodName();
  if (record.getResourceBundle() == null) {
    ResourceBundle rb=getResourceBundle();
    if (rb != null) {
      record.setResourceBundle(rb);
    }
  }
  if (record.getMessage() == null) {
    record.setMessage(""String_Node_Str"");
  }
  super.log(record);
}"
30406,"/** 
 * Method getLogger
 * @param clazz
 * @param name
 * @return
 */
public static synchronized Logger getLogger(final Class clazz,final String name){
  final ClassLoader cloader=clazz.getClassLoader();
  Logger l=LogManager.getLogManager().getLogger(name);
  if (l == null) {
    l=Logger.getLogger(name);
  }
  ;
  String pkgName=clazz.getPackage().getName();
  String loggerName=name + ""String_Node_Str"" + pkgName;
  Logger cLogger=LogManager.getLogManager().getLogger(loggerName);
  if (cLogger == null) {
    cLogger=new Logger(loggerName,null){
      private final int offValue=Level.OFF.intValue();
      public void log(      LogRecord record){
        record.getSourceMethodName();
        if (record.getResourceBundle() == null) {
          ResourceBundle rb=getResourceBundle();
          if (rb != null) {
            record.setResourceBundle(rb);
          }
        }
        super.log(record);
      }
      /** 
 * Retrieve the localization resource bundle for this logger for the current default locale.  Note that if the result is null, then the Logger will use a resource bundle inherited from its parent.
 * @return localization bundle (may be null)
 */
      public ResourceBundle getResourceBundle(){
        try {
          return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
        }
 catch (        MissingResourceException e) {
          String root=clazz.getPackage().getName();
          try {
            return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 catch (          MissingResourceException me) {
            String p=root;
            while (p != null) {
              try {
                int i=p.lastIndexOf(""String_Node_Str"");
                if (i != -1) {
                  p=p.substring(0,i);
                  return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
                }
 else {
                  p=null;
                }
              }
 catch (              MissingResourceException mre) {
              }
            }
          }
          try {
            return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
          }
 catch (          MissingResourceException me) {
          }
          Logger l=LogManager.getLogManager().getLogger(name);
          l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
          return null;
        }
      }
    }
;
    if (!addLoggerToLogManager(cLogger)) {
      final Logger existing=LogManager.getLogManager().getLogger(name);
      if (existing == null) {
        addLoggerToLogManager(cLogger);
      }
 else {
        cLogger=existing;
      }
    }
  }
  ;
  return cLogger;
}","/** 
 * Method getLogger
 * @param clazz
 * @param name
 * @return
 */
public static synchronized Logger getLogger(final Class clazz,final String name){
  final ClassLoader cloader=clazz.getClassLoader();
  Logger l=LogManager.getLogManager().getLogger(name);
  if (l == null) {
    l=Logger.getLogger(name);
  }
  ;
  String pkgName=clazz.getPackage().getName();
  String loggerName=name + ""String_Node_Str"" + pkgName;
  Logger cLogger=LogManager.getLogManager().getLogger(loggerName);
  if (cLogger == null) {
    cLogger=new Logger(loggerName,null){
      private final int offValue=Level.OFF.intValue();
      public void log(      LogRecord record){
        record.getSourceMethodName();
        if (record.getResourceBundle() == null) {
          ResourceBundle rb=getResourceBundle();
          if (rb != null) {
            record.setResourceBundle(rb);
          }
        }
        if (record.getMessage() == null) {
          record.setMessage(""String_Node_Str"");
        }
        super.log(record);
      }
      /** 
 * Retrieve the localization resource bundle for this logger for the current default locale.  Note that if the result is null, then the Logger will use a resource bundle inherited from its parent.
 * @return localization bundle (may be null)
 */
      public ResourceBundle getResourceBundle(){
        try {
          return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),cloader);
        }
 catch (        MissingResourceException e) {
          String root=clazz.getPackage().getName();
          try {
            return ResourceBundle.getBundle(root + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
          }
 catch (          MissingResourceException me) {
            String p=root;
            while (p != null) {
              try {
                int i=p.lastIndexOf(""String_Node_Str"");
                if (i != -1) {
                  p=p.substring(0,i);
                  return ResourceBundle.getBundle(p + ""String_Node_Str"" + RESOURCE_BUNDLE,Locale.getDefault(),cloader);
                }
 else {
                  p=null;
                }
              }
 catch (              MissingResourceException mre) {
              }
            }
          }
          try {
            return ResourceBundle.getBundle(getLoggerResourceBundleName(name),Locale.getDefault(),LogDomains.class.getClassLoader());
          }
 catch (          MissingResourceException me) {
          }
          Logger l=LogManager.getLogManager().getLogger(name);
          l.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + clazz.getName());
          return null;
        }
      }
    }
;
    if (!addLoggerToLogManager(cLogger)) {
      final Logger existing=LogManager.getLogManager().getLogger(name);
      if (existing == null) {
        addLoggerToLogManager(cLogger);
      }
 else {
        cLogger=existing;
      }
    }
  }
  ;
  return cLogger;
}"
30407,"private boolean checkCache(Permission p,Epoch e){
  rLock.lock();
  try {
    if (loading) {
      return false;
    }
 else     if (cache != null) {
      return checkLoadedCache(p,e);
    }
  }
  finally {
    rLock.unlock();
  }
  wLock.lock();
  if (loading) {
    wLock.unlock();
    return false;
  }
 else   if (cache != null) {
    rLock.lock();
    wLock.unlock();
    try {
      return checkLoadedCache(p,e);
    }
  finally {
      rLock.unlock();
    }
  }
 else {
    cache=null;
    loading=true;
    wLock.unlock();
  }
  Permissions nextCache=new Permissions();
  boolean setPc=false;
  String oldpcID=null;
  try {
    oldpcID=PolicyContext.getContextID();
    if (!this.pcID.equals(oldpcID) && (this.pcID == null || !this.pcID.equals(oldpcID))) {
      setPc=true;
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
  PermissionCollection pc=null;
  try {
    if (setPc) {
      setPolicyContextID(this.pcID);
    }
    pc=policy.getPermissions(this.codesource);
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
 finally {
    if (setPc) {
      try {
        setPolicyContextID(oldpcID);
      }
 catch (      Exception ex) {
        _logger.log(Level.SEVERE,""String_Node_Str"",ex);
        return false;
      }
    }
  }
  resolvePermissions(pc,p);
  Enumeration granted=pc.elements();
  while (granted.hasMoreElements()) {
    Permission i=(Permission)granted.nextElement();
    if (i.equals(allPermission)) {
      nextCache.add(i);
    }
 else {
      boolean classMatch=true;
      if (this.classes != null) {
        classMatch=false;
        Class iClazz=i.getClass();
        for (int j=0; j < this.classes.length; j++) {
          if (this.classes[j].equals(iClazz)) {
            classMatch=true;
            break;
          }
        }
      }
      if (classMatch) {
        if (this.name != null) {
          String iName=i.getName();
          if (iName != null && this.name.equals(iName)) {
            nextCache.add(i);
          }
        }
 else {
          nextCache.add(i);
        }
      }
    }
  }
  wLock.lock();
  cache=nextCache;
  loading=false;
  try {
    rLock.lock();
    wLock.unlock();
    return checkLoadedCache(p,e);
  }
  finally {
    rLock.unlock();
  }
}","private boolean checkCache(Permission p,Epoch e){
  rLock.lock();
  try {
    if (loading) {
      return false;
    }
 else     if (cache != null) {
      return checkLoadedCache(p,e);
    }
  }
  finally {
    rLock.unlock();
  }
  wLock.lock();
  if (loading) {
    wLock.unlock();
    return false;
  }
 else   if (cache != null) {
    rLock.lock();
    wLock.unlock();
    try {
      return checkLoadedCache(p,e);
    }
  finally {
      rLock.unlock();
    }
  }
 else {
    cache=null;
    loading=true;
    wLock.unlock();
  }
  Permissions nextCache=new Permissions();
  boolean setPc=false;
  String oldpcID=null;
  try {
    oldpcID=PolicyContext.getContextID();
    if (this.pcID == null || !this.pcID.equals(oldpcID)) {
      setPc=true;
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
  PermissionCollection pc=null;
  try {
    if (setPc) {
      setPolicyContextID(this.pcID);
    }
    pc=policy.getPermissions(this.codesource);
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
 finally {
    if (setPc) {
      try {
        setPolicyContextID(oldpcID);
      }
 catch (      Exception ex) {
        _logger.log(Level.SEVERE,""String_Node_Str"",ex);
        return false;
      }
    }
  }
  resolvePermissions(pc,p);
  Enumeration granted=pc.elements();
  while (granted.hasMoreElements()) {
    Permission i=(Permission)granted.nextElement();
    if (i.equals(allPermission)) {
      nextCache.add(i);
    }
 else {
      boolean classMatch=true;
      if (this.classes != null) {
        classMatch=false;
        Class iClazz=i.getClass();
        for (int j=0; j < this.classes.length; j++) {
          if (this.classes[j].equals(iClazz)) {
            classMatch=true;
            break;
          }
        }
      }
      if (classMatch) {
        if (this.name != null) {
          String iName=i.getName();
          if (iName != null && this.name.equals(iName)) {
            nextCache.add(i);
          }
        }
 else {
          nextCache.add(i);
        }
      }
    }
  }
  wLock.lock();
  cache=nextCache;
  loading=false;
  try {
    rLock.lock();
    wLock.unlock();
    return checkLoadedCache(p,e);
  }
  finally {
    rLock.unlock();
  }
}"
30408,"private boolean deleteFile(File path){
  if (path != null && path.exists()) {
    if (path.isDirectory()) {
      File[] files=path.listFiles();
      for (      File file : files) {
        if (file.isDirectory()) {
          deleteFile(file);
          if (file.delete())           continue;
        }
 else {
          if (file.delete())           continue;
        }
      }
    }
    path.delete();
  }
  return true;
}","private boolean deleteFile(File path){
  if (path != null && path.exists()) {
    if (path.isDirectory()) {
      File[] files=path.listFiles();
      for (      File file : files) {
        if (file.isDirectory()) {
          deleteFile(file);
          if (file.delete())           continue;
        }
 else {
          if (file.delete())           continue;
        }
      }
    }
    if (!path.delete()) {
      return false;
    }
  }
  return true;
}"
30409,"public void postConstruct(){
  for (  Config config : configs.getConfig()) {
    SecurityService service=config.getSecurityService();
    if (service != null) {
      upgradeJACCProvider(service);
    }
    populateSSLElement(config);
  }
  String instanceRoot=env.getInstanceRoot().getAbsolutePath();
  File genPolicyDir=new File(instanceRoot,DIR_GENERATED_POLICY);
  if (genPolicyDir != null) {
    File[] applicationDirs=genPolicyDir.listFiles();
    if (applicationDirs != null) {
      for (      File policyDir : applicationDirs) {
        deleteFile(genPolicyDir);
      }
    }
  }
  for (  Config config : configs.getConfig()) {
    SecurityService service=config.getSecurityService();
    List<AuthRealm> authRealms=service.getAuthRealm();
    try {
      for (      AuthRealm authRealm : authRealms) {
        if (JDBC_REALM_CLASSNAME.equals(authRealm.getClassname())) {
          Property digestAlgoProp=authRealm.getProperty(PARAM_DIGEST_ALGORITHM);
          if (digestAlgoProp != null) {
            String digestAlgo=digestAlgoProp.getValue();
            if (digestAlgo == null || digestAlgo.isEmpty()) {
              digestAlgoProp.setValue(""String_Node_Str"");
            }
          }
 else {
            ConfigSupport.apply(new SingleConfigCode<AuthRealm>(){
              public Object run(              AuthRealm updatedAuthRealm) throws PropertyVetoException, TransactionFailure {
                Property prop1=updatedAuthRealm.createChild(Property.class);
                prop1.setName(PARAM_DIGEST_ALGORITHM);
                prop1.setValue(""String_Node_Str"");
                updatedAuthRealm.getProperty().add(prop1);
                return null;
              }
            }
,authRealm);
          }
        }
      }
    }
 catch (    PropertyVetoException pve) {
      _logger.log(Level.SEVERE,""String_Node_Str"",pve);
      throw new RuntimeException(pve);
    }
catch (    TransactionFailure tf) {
      _logger.log(Level.SEVERE,""String_Node_Str"",tf);
      throw new RuntimeException(tf);
    }
  }
  if (requiresSecureAdmin()) {
    _logger.log(Level.WARNING,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
  }
  for (  Config config : configs.getConfig()) {
    AdminService service=config.getAdminService();
    for (    JmxConnector jmxConnector : service.getJmxConnector()) {
      Ssl sslElement=jmxConnector.getSsl();
      if (sslElement != null) {
        try {
          ConfigSupport.apply(new SingleConfigCode<Ssl>(){
            public Object run(            Ssl ssl) throws PropertyVetoException, TransactionFailure {
              ssl.setClassname(GF_SSL_IMPL_NAME);
              return null;
            }
          }
,sslElement);
        }
 catch (        TransactionFailure tf) {
          _logger.log(Level.SEVERE,""String_Node_Str"",tf);
          throw new RuntimeException(tf);
        }
      }
    }
  }
}","public void postConstruct(){
  for (  Config config : configs.getConfig()) {
    SecurityService service=config.getSecurityService();
    if (service != null) {
      upgradeJACCProvider(service);
    }
    populateSSLElement(config);
  }
  String instanceRoot=env.getInstanceRoot().getAbsolutePath();
  File genPolicyDir=new File(instanceRoot,DIR_GENERATED_POLICY);
  if (genPolicyDir != null) {
    File[] applicationDirs=genPolicyDir.listFiles();
    if (applicationDirs != null) {
      for (      File policyDir : applicationDirs) {
        deleteFile(policyDir);
      }
    }
  }
  for (  Config config : configs.getConfig()) {
    SecurityService service=config.getSecurityService();
    List<AuthRealm> authRealms=service.getAuthRealm();
    try {
      for (      AuthRealm authRealm : authRealms) {
        if (JDBC_REALM_CLASSNAME.equals(authRealm.getClassname())) {
          Property digestAlgoProp=authRealm.getProperty(PARAM_DIGEST_ALGORITHM);
          if (digestAlgoProp != null) {
            String digestAlgo=digestAlgoProp.getValue();
            if (digestAlgo == null || digestAlgo.isEmpty()) {
              digestAlgoProp.setValue(""String_Node_Str"");
            }
          }
 else {
            ConfigSupport.apply(new SingleConfigCode<AuthRealm>(){
              public Object run(              AuthRealm updatedAuthRealm) throws PropertyVetoException, TransactionFailure {
                Property prop1=updatedAuthRealm.createChild(Property.class);
                prop1.setName(PARAM_DIGEST_ALGORITHM);
                prop1.setValue(""String_Node_Str"");
                updatedAuthRealm.getProperty().add(prop1);
                return null;
              }
            }
,authRealm);
          }
        }
      }
    }
 catch (    PropertyVetoException pve) {
      _logger.log(Level.SEVERE,""String_Node_Str"",pve);
      throw new RuntimeException(pve);
    }
catch (    TransactionFailure tf) {
      _logger.log(Level.SEVERE,""String_Node_Str"",tf);
      throw new RuntimeException(tf);
    }
  }
  if (requiresSecureAdmin()) {
    _logger.log(Level.WARNING,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
  }
  for (  Config config : configs.getConfig()) {
    AdminService service=config.getAdminService();
    for (    JmxConnector jmxConnector : service.getJmxConnector()) {
      Ssl sslElement=jmxConnector.getSsl();
      if (sslElement != null) {
        try {
          ConfigSupport.apply(new SingleConfigCode<Ssl>(){
            public Object run(            Ssl ssl) throws PropertyVetoException, TransactionFailure {
              ssl.setClassname(GF_SSL_IMPL_NAME);
              return null;
            }
          }
,sslElement);
        }
 catch (        TransactionFailure tf) {
          _logger.log(Level.SEVERE,""String_Node_Str"",tf);
          throw new RuntimeException(tf);
        }
      }
    }
  }
}"
30410,"private void ensureNonDASConfigsHaveAdminNetworkListener() throws TransactionFailure {
  final Transaction t=new Transaction();
  for (  Config c : configs.getConfig()) {
    final NetworkConfig nc=c.getNetworkConfig();
    final NetworkListener nl=nc.getNetworkListener(SecureAdminCommand.ADMIN_LISTENER_NAME);
    if (nl != null) {
      continue;
    }
    ConfigSupport.apply(new SingleConfigCode<Config>(){
      @Override public Object run(      Config config_w) throws PropertyVetoException, TransactionFailure {
        final NetworkListener nl_w=createAdminNetworkListener(t,nc);
        final VirtualServer vs_w=createAdminVirtualServer(t,config_w);
        return config_w;
      }
    }
,c);
  }
  try {
    t.commit();
  }
 catch (  RetryableException ex) {
    throw new TransactionFailure(""String_Node_Str"",ex);
  }
}","private void ensureNonDASConfigsHaveAdminNetworkListener() throws TransactionFailure {
  final Transaction t=new Transaction();
  for (  Config c : configs.getConfig()) {
    final NetworkConfig nc=c.getNetworkConfig();
    final NetworkListener nl=nc.getNetworkListener(SecureAdminCommand.ADMIN_LISTENER_NAME);
    if (nl != null) {
      continue;
    }
    ConfigSupport.apply(new SingleConfigCode<Config>(){
      @Override public Object run(      Config config_w) throws PropertyVetoException, TransactionFailure {
        createAdminNetworkListener(t,nc);
        createAdminVirtualServer(t,config_w);
        return config_w;
      }
    }
,c);
  }
  try {
    t.commit();
  }
 catch (  RetryableException ex) {
    throw new TransactionFailure(""String_Node_Str"",ex);
  }
}"
30411,"@Override public Object run(Config config_w) throws PropertyVetoException, TransactionFailure {
  final NetworkListener nl_w=createAdminNetworkListener(t,nc);
  final VirtualServer vs_w=createAdminVirtualServer(t,config_w);
  return config_w;
}","@Override public Object run(Config config_w) throws PropertyVetoException, TransactionFailure {
  createAdminNetworkListener(t,nc);
  createAdminVirtualServer(t,config_w);
  return config_w;
}"
30412,"/** 
 * Authenticate the user by prompting for a username and password. <p>
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 * @exception FailedLoginException if the authentication fails. <p>
 * @exception LoginException if this <code>LoginModule</code>is unable to perform the authentication.
 */
public boolean login() throws LoginException {
  if (callbackHandler == null) {
    throw new LoginException(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    String[] as=new String[ks.size()];
    String[] aliasString=new String[ks.size()];
    Enumeration aliases=ks.aliases();
    for (int i=0; i < ks.size(); i++) {
      aliasString[i]=(String)aliases.nextElement();
      as[i]=((X509Certificate)ks.getCertificate(aliasString[i])).getSubjectDN().getName();
    }
    Callback[] callbacks=new Callback[1];
    callbacks[0]=new ChoiceCallback(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),as,0,false);
    callbackHandler.handle(callbacks);
    String[] choices=((ChoiceCallback)callbacks[0]).getChoices();
    int[] idx=((ChoiceCallback)callbacks[0]).getSelectedIndexes();
    if (idx == null) {
      throw new LoginException(""String_Node_Str"");
    }
 else     if (idx[0] == -1) {
      throw new LoginException(""String_Node_Str"");
    }
    if (debug) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
        for (int i=0; i < idx.length; i++) {
          _logger.log(Level.FINE,aliasString[idx[i]]);
        }
      }
    }
    this.alias=aliasString[idx[0]];
    certificate=(X509Certificate)ks.getCertificate(alias);
    if (debug) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    succeeded=true;
    return true;
  }
 catch (  java.io.IOException ioe) {
    throw new LoginException(ioe.toString());
  }
catch (  UnsupportedCallbackException uce) {
    throw new LoginException(""String_Node_Str"" + uce.getCallback().toString() + ""String_Node_Str""+ ""String_Node_Str"");
  }
catch (  Exception e) {
    throw new LoginException(e.toString());
  }
}","/** 
 * Authenticate the user by prompting for a username and password. <p>
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 * @exception LoginException if this <code>LoginModule</code>is unable to perform the authentication.
 */
public boolean login() throws LoginException {
  if (callbackHandler == null) {
    throw new LoginException(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    String[] as=new String[ks.size()];
    String[] aliasString=new String[ks.size()];
    Enumeration aliases=ks.aliases();
    for (int i=0; i < ks.size(); i++) {
      aliasString[i]=(String)aliases.nextElement();
      as[i]=((X509Certificate)ks.getCertificate(aliasString[i])).getSubjectDN().getName();
    }
    Callback[] callbacks=new Callback[1];
    callbacks[0]=new ChoiceCallback(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),as,0,false);
    callbackHandler.handle(callbacks);
    int[] idx=((ChoiceCallback)callbacks[0]).getSelectedIndexes();
    if (idx == null) {
      throw new LoginException(""String_Node_Str"");
    }
 else     if (idx[0] == -1) {
      throw new LoginException(""String_Node_Str"");
    }
    if (debug) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
        for (int i=0; i < idx.length; i++) {
          _logger.log(Level.FINE,aliasString[idx[i]]);
        }
      }
    }
    this.alias=aliasString[idx[0]];
    certificate=(X509Certificate)ks.getCertificate(alias);
    if (debug) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    succeeded=true;
    return true;
  }
 catch (  java.io.IOException ioe) {
    throw new LoginException(ioe.toString());
  }
catch (  UnsupportedCallbackException uce) {
    throw new LoginException(""String_Node_Str"" + uce.getCallback().toString() + ""String_Node_Str""+ ""String_Node_Str"");
  }
catch (  Exception e) {
    throw new LoginException(e.toString());
  }
}"
30413,"@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final StringNonce other=(StringNonce)obj;
  if (!this.nonce.equals(other.getNonce()) && (this.nonce == null || !this.nonce.equals(other.getNonce()))) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final StringNonce other=(StringNonce)obj;
  if (this.nonce == null || !this.nonce.equals(other.getNonce())) {
    return false;
  }
  return true;
}"
30414,"public static void createRealms(String defaultRealm,List<AuthRealm> realms,String configName){
  assert(realms != null);
  String goodRealm=null;
  for (  AuthRealm aRealm : realms) {
    String realmName=aRealm.getName();
    String realmClass=aRealm.getClassname();
    assert(realmName != null);
    assert(realmClass != null);
    try {
      List<Property> realmProps=aRealm.getProperty();
      Properties props=new Properties();
      for (      Property realmProp : realmProps) {
        props.setProperty(realmProp.getName(),realmProp.getValue());
      }
      Realm.instantiate(realmName,realmClass,props,configName);
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + realmName);
      }
      if (goodRealm == null) {
        goodRealm=realmName;
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",realmName);
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  if (goodRealm == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    try {
      Realm def=Realm.getInstance(defaultRealm);
    }
 catch (    Exception e) {
      defaultRealm=goodRealm;
    }
    Realm.setDefaultRealm(defaultRealm);
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + defaultRealm);
    }
  }
}","public static void createRealms(String defaultRealm,List<AuthRealm> realms,String configName){
  assert(realms != null);
  String goodRealm=null;
  for (  AuthRealm aRealm : realms) {
    String realmName=aRealm.getName();
    String realmClass=aRealm.getClassname();
    assert(realmName != null);
    assert(realmClass != null);
    try {
      List<Property> realmProps=aRealm.getProperty();
      Properties props=new Properties();
      for (      Property realmProp : realmProps) {
        props.setProperty(realmProp.getName(),realmProp.getValue());
      }
      Realm.instantiate(realmName,realmClass,props,configName);
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + realmName);
      }
      if (goodRealm == null) {
        goodRealm=realmName;
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",realmName);
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  if (goodRealm == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    try {
      Realm.getInstance(defaultRealm);
    }
 catch (    Exception e) {
      defaultRealm=goodRealm;
    }
    Realm.setDefaultRealm(defaultRealm);
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + defaultRealm);
    }
  }
}"
30415,"@Override public Enumeration getGroupNames(String username) throws NoSuchUserException {
  try {
    Set<String> groupsSet=Collections.EMPTY_SET;
    groupsSet=new PAM(PAM_SERVICE).getGroupsOfUser(username);
    return Collections.enumeration(groupsSet);
  }
 catch (  PAMException ex) {
    Logger.getLogger(PamRealm.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    return null;
  }
}","@Override public Enumeration getGroupNames(String username) throws NoSuchUserException {
  try {
    Set<String> groupsSet=new PAM(PAM_SERVICE).getGroupsOfUser(username);
    return Collections.enumeration(groupsSet);
  }
 catch (  PAMException ex) {
    Logger.getLogger(PamRealm.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    return null;
  }
}"
30416,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Config tmp=null;
  try {
    tmp=configs.getConfigByName(target);
  }
 catch (  Exception ex) {
  }
  if (tmp != null) {
    config=tmp;
  }
  if (tmp == null) {
    Server targetServer=domain.getServerNamed(target);
    if (targetServer != null) {
      config=domain.getConfigNamed(targetServer.getConfigRef());
    }
    com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      config=domain.getConfigNamed(cluster.getConfigRef());
    }
  }
  final SecurityService secService=config.getSecurityService();
  List<MessageSecurityConfig> mscs=secService.getMessageSecurityConfig();
  report.getTopMessagePart().setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  report.getTopMessagePart().setChildrenType(""String_Node_Str"");
  for (  MessageSecurityConfig msc : secService.getMessageSecurityConfig()) {
    if (authLayer == null) {
      for (      ProviderConfig pc : msc.getProviderConfig()) {
        ActionReport.MessagePart part=report.getTopMessagePart().addChild();
        part.setMessage(pc.getProviderId());
      }
    }
 else {
      if (msc.getAuthLayer().equals(authLayer)) {
        for (        ProviderConfig pc : msc.getProviderConfig()) {
          ActionReport.MessagePart part=report.getTopMessagePart().addChild();
          part.setMessage(pc.getProviderId());
        }
      }
    }
  }
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  Config tmp=null;
  try {
    tmp=configs.getConfigByName(target);
  }
 catch (  Exception ex) {
  }
  if (tmp != null) {
    config=tmp;
  }
  if (tmp == null) {
    Server targetServer=domain.getServerNamed(target);
    if (targetServer != null) {
      config=domain.getConfigNamed(targetServer.getConfigRef());
    }
    com.sun.enterprise.config.serverbeans.Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      config=domain.getConfigNamed(cluster.getConfigRef());
    }
  }
  final SecurityService secService=config.getSecurityService();
  secService.getMessageSecurityConfig();
  report.getTopMessagePart().setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  report.getTopMessagePart().setChildrenType(""String_Node_Str"");
  for (  MessageSecurityConfig msc : secService.getMessageSecurityConfig()) {
    if (authLayer == null) {
      for (      ProviderConfig pc : msc.getProviderConfig()) {
        ActionReport.MessagePart part=report.getTopMessagePart().addChild();
        part.setMessage(pc.getProviderId());
      }
    }
 else {
      if (msc.getAuthLayer().equals(authLayer)) {
        for (        ProviderConfig pc : msc.getProviderConfig()) {
          ActionReport.MessagePart part=report.getTopMessagePart().addChild();
          part.setMessage(pc.getProviderId());
        }
      }
    }
  }
}"
30417,"public static File writeConfigFileToTempDir(String fileName) throws IOException {
  File filePath=new File(fileName);
  if (filePath.exists()) {
    return filePath;
  }
  File localFile=null;
  if (filePath.getParentFile() != null && filePath.getParentFile().exists()) {
    localFile=filePath;
    localFile.createNewFile();
  }
 else {
    String userHome=System.getProperty(""String_Node_Str"");
    String embeddedServerName=getCurrentEmbeddedServerName();
    File tempDir=new File(userHome + File.separator + ""String_Node_Str""+ embeddedServerName+ File.separator+ ""String_Node_Str"");
    boolean mkDirSuccess=true;
    if (!tempDir.exists()) {
      mkDirSuccess=tempDir.mkdirs();
    }
    localFile=new File(tempDir.getAbsolutePath() + File.separator + fileName);
    if (mkDirSuccess && !localFile.exists()) {
      localFile.createNewFile();
    }
  }
  FileOutputStream oStream=null;
  InputStream iStream=null;
  try {
    oStream=new FileOutputStream(localFile);
    iStream=Util.class.getResourceAsStream(""String_Node_Str"" + fileName);
    while (iStream != null && iStream.available() > 0) {
      oStream.write(iStream.read());
    }
  }
  finally {
    oStream.close();
    if (iStream != null) {
      iStream.close();
    }
  }
  return localFile;
}","public static File writeConfigFileToTempDir(String fileName) throws IOException {
  File filePath=new File(fileName);
  if (filePath.exists()) {
    return filePath;
  }
  File localFile=null;
  if (filePath.getParentFile() != null && filePath.getParentFile().exists()) {
    localFile=filePath;
    if (!localFile.createNewFile()) {
      throw new IOException();
    }
  }
 else {
    String userHome=System.getProperty(""String_Node_Str"");
    String embeddedServerName=getCurrentEmbeddedServerName();
    File tempDir=new File(userHome + File.separator + ""String_Node_Str""+ embeddedServerName+ File.separator+ ""String_Node_Str"");
    boolean mkDirSuccess=true;
    if (!tempDir.exists()) {
      mkDirSuccess=tempDir.mkdirs();
    }
    localFile=new File(tempDir.getAbsolutePath() + File.separator + fileName);
    if (mkDirSuccess && !localFile.exists()) {
      localFile.createNewFile();
    }
  }
  FileOutputStream oStream=null;
  InputStream iStream=null;
  try {
    oStream=new FileOutputStream(localFile);
    iStream=Util.class.getResourceAsStream(""String_Node_Str"" + fileName);
    while (iStream != null && iStream.available() > 0) {
      oStream.write(iStream.read());
    }
  }
  finally {
    oStream.close();
    if (iStream != null) {
      iStream.close();
    }
  }
  return localFile;
}"
30418,"public void copyConfigFiles(Habitat habitat,File fromInstanceDir,File domainXml){
  ServerEnvironment se=habitat.getComponent(ServerEnvironment.class);
  if (!isEmbedded(se)) {
    return;
  }
  if ((fromInstanceDir == null) || (domainXml == null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  File toInstanceDir=habitat.getComponent(ServerEnvironmentImpl.class).getInstanceRoot();
  List<String> fileNames=new ArrayList<String>();
  try {
    fileNames.addAll(new EmbeddedSecurityUtil().new DomainXmlSecurityParser(domainXml).getAbsolutePathKeyFileNames(fromInstanceDir));
    String keyStoreFileName=fromInstanceDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    String trustStoreFileName=fromInstanceDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    fileNames.add(keyStoreFileName);
    fileNames.add(trustStoreFileName);
    String loginConf=fromInstanceDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    String secPolicy=fromInstanceDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    fileNames.add(loginConf);
    fileNames.add(secPolicy);
    File toConfigDir=new File(toInstanceDir,""String_Node_Str"");
    if (!toConfigDir.exists()) {
      toConfigDir.mkdir();
    }
    for (    String fileName : fileNames) {
      FileUtils.copyFile(new File(fileName),new File(toConfigDir,parseFileName(fileName)));
    }
  }
 catch (  IOException e) {
    _logger.log(Level.WARNING,""String_Node_Str"",e);
  }
catch (  XMLStreamException e) {
    _logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}","public void copyConfigFiles(Habitat habitat,File fromInstanceDir,File domainXml){
  ServerEnvironment se=habitat.getComponent(ServerEnvironment.class);
  if (!isEmbedded(se)) {
    return;
  }
  if ((fromInstanceDir == null) || (domainXml == null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  File toInstanceDir=habitat.getComponent(ServerEnvironmentImpl.class).getInstanceRoot();
  List<String> fileNames=new ArrayList<String>();
  try {
    fileNames.addAll(new EmbeddedSecurityUtil().new DomainXmlSecurityParser(domainXml).getAbsolutePathKeyFileNames(fromInstanceDir));
    String keyStoreFileName=fromInstanceDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    String trustStoreFileName=fromInstanceDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    fileNames.add(keyStoreFileName);
    fileNames.add(trustStoreFileName);
    String loginConf=fromInstanceDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    String secPolicy=fromInstanceDir + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"";
    fileNames.add(loginConf);
    fileNames.add(secPolicy);
    File toConfigDir=new File(toInstanceDir,""String_Node_Str"");
    if (!toConfigDir.exists()) {
      if (!toConfigDir.mkdir()) {
        throw new IOException();
      }
    }
    for (    String fileName : fileNames) {
      FileUtils.copyFile(new File(fileName),new File(toConfigDir,parseFileName(fileName)));
    }
  }
 catch (  IOException e) {
    _logger.log(Level.WARNING,""String_Node_Str"",e);
  }
catch (  XMLStreamException e) {
    _logger.log(Level.WARNING,""String_Node_Str"",e);
  }
}"
30419,"/** 
 * Read the repository directory name, create the directory, and  save the name in 'repository'
 */
private String initializeRepository(){
  try {
    repository=System.getProperty(REPOSITORY_HOME_PROP);
    if (repository == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      logger.log(Level.SEVERE,msg);
    }
 else {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + repository);
      }
      File rf=new File(repository);
      if (rf.exists()) {
        if (!rf.isDirectory()) {
          String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + repository,new Object[]{repository});
          logger.log(Level.SEVERE,msg);
        }
 else {
          File[] appsInService=rf.listFiles();
          if (appsInService != null) {
            for (int i=0; i < appsInService.length; i++) {
              File[] contextsInService=appsInService[i].listFiles(new FileFilter(){
                public boolean accept(                File pathname){
                  return pathname.isDirectory();
                }
              }
);
              if (contextsInService != null) {
                for (int j=0; j < contextsInService.length; j++) {
                  try {
                    PolicyConfigurationImpl pc=new PolicyConfigurationImpl(contextsInService[j],false,false,this);
                    putPolicyConfigurationImpl(pc.CONTEXT_ID,pc);
                  }
 catch (                  Exception ex) {
                    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{contextsInService[i].toString()});
                    logger.log(Level.WARNING,msg,ex);
                  }
                }
              }
            }
          }
        }
      }
 else {
        if (logger.isLoggable(Level.FINE)) {
          logger.fine(""String_Node_Str"");
        }
        rf.mkdirs();
      }
    }
  }
 catch (  Exception e) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{e});
    logger.log(Level.SEVERE,msg);
    repository=null;
  }
  return repository;
}","/** 
 * Read the repository directory name, create the directory, and  save the name in 'repository'
 */
private String initializeRepository(){
  try {
    repository=System.getProperty(REPOSITORY_HOME_PROP);
    if (repository == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      logger.log(Level.SEVERE,msg);
    }
 else {
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + repository);
      }
      File rf=new File(repository);
      if (rf.exists()) {
        if (!rf.isDirectory()) {
          String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + repository,new Object[]{repository});
          logger.log(Level.SEVERE,msg);
        }
 else {
          File[] appsInService=rf.listFiles();
          if (appsInService != null) {
            for (int i=0; i < appsInService.length; i++) {
              File[] contextsInService=appsInService[i].listFiles(new FileFilter(){
                public boolean accept(                File pathname){
                  return pathname.isDirectory();
                }
              }
);
              if (contextsInService != null) {
                for (int j=0; j < contextsInService.length; j++) {
                  try {
                    PolicyConfigurationImpl pc=new PolicyConfigurationImpl(contextsInService[j],false,false,this);
                    putPolicyConfigurationImpl(pc.CONTEXT_ID,pc);
                  }
 catch (                  Exception ex) {
                    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{contextsInService[i].toString()});
                    logger.log(Level.WARNING,msg,ex);
                  }
                }
              }
            }
          }
        }
      }
 else {
        if (logger.isLoggable(Level.FINE)) {
          logger.fine(""String_Node_Str"");
        }
        if (!rf.mkdirs()) {
          throw new IOException();
        }
      }
    }
  }
 catch (  Exception e) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{e});
    logger.log(Level.SEVERE,msg);
    repository=null;
  }
  return repository;
}"
30420,"/** 
 * Used to add a single excluded policy statement to this PolicyConfiguration. <P>
 * @param permission the permission to be addedto the excluded policy statements. 
 * @throws java.lang.SecurityException if called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.
 * @throws java.lang.UnsupportedOperationException if the state of the policy context whose interface is this PolicyConfiguration Object is ""deleted"" or ""inService"" when this method is called.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the addToExcludedPolicy method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException.
 */
public void addToExcludedPolicy(Permission permission) throws PolicyContextException {
  assertStateIsOpen();
  if (permission != null) {
    checkSetPolicyPermission();
    this.getExcludedPermissions().add(permission);
    writeOnCommit=true;
  }
}","/** 
 * Used to add a single excluded policy statement to this PolicyConfiguration. <P>
 * @param permission the permission to be addedto the excluded policy statements. 
 * @throws java.lang.SecurityException if called by an AccessControlContext that has not been granted the ""setPolicy"" SecurityPermission.                  fa
 * @throws java.lang.UnsupportedOperationException if the state of the policy context whose interface is this PolicyConfiguration Object is ""deleted"" or ""inService"" when this method is called.
 * @throws javax.security.jacc.PolicyContextException if the implementation throws a checked exception that has not been accounted for by the addToExcludedPolicy method signature. The exception thrown by the implementation class will be encapsulated (during construction) in the thrown PolicyContextException.
 */
public void addToExcludedPolicy(Permission permission) throws PolicyContextException {
  assertStateIsOpen();
  if (permission != null) {
    checkSetPolicyPermission();
    this.getExcludedPermissions().add(permission);
    writeOnCommit=true;
  }
}"
30421,"private void removePolicyContextDirectory(){
  String directoryName=getContextDirectoryName();
  File f=new File(directoryName);
  if (f.exists()) {
    File[] files=f.listFiles();
    if (files != null && files.length > 0) {
      for (int i=0; i < files.length; i++) {
        files[i].delete();
      }
    }
    if (!f.delete()) {
      String defMsg=""String_Node_Str"" + directoryName;
      String msg=localStrings.getLocalString(""String_Node_Str"",defMsg);
      logger.log(Level.SEVERE,msg);
      throw new RuntimeException(defMsg);
    }
 else     if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + directoryName);
    }
    File appDir=f.getParentFile();
    File[] fs=appDir.listFiles();
    if (fs != null && fs.length > 0) {
      boolean hasDir=false;
      for (int i=0; i < fs.length; i++) {
        if (fs[i].isDirectory()) {
          hasDir=true;
          break;
        }
      }
      if (!hasDir) {
        for (int i=0; i < fs.length; i++) {
          fs[i].delete();
        }
      }
    }
    File[] moduleDirs=appDir.listFiles();
    if (moduleDirs == null || moduleDirs.length == 0) {
      if (!appDir.delete()) {
        String defMsg=""String_Node_Str"" + appDir;
        String msg=localStrings.getLocalString(""String_Node_Str"",defMsg);
        logger.log(Level.SEVERE,msg);
        throw new RuntimeException(defMsg);
      }
    }
  }
}","private void removePolicyContextDirectory(){
  String directoryName=getContextDirectoryName();
  File f=new File(directoryName);
  if (f.exists()) {
    File[] files=f.listFiles();
    if (files != null && files.length > 0) {
      for (int i=0; i < files.length; i++) {
        if (!files[i].delete()) {
          String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
          logger.log(Level.SEVERE,msg);
          throw new RuntimeException(msg);
        }
      }
    }
    if (!f.delete()) {
      String defMsg=""String_Node_Str"" + directoryName;
      String msg=localStrings.getLocalString(""String_Node_Str"",defMsg);
      logger.log(Level.SEVERE,msg);
      throw new RuntimeException(defMsg);
    }
 else     if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + directoryName);
    }
    File appDir=f.getParentFile();
    File[] fs=appDir.listFiles();
    if (fs != null && fs.length > 0) {
      boolean hasDir=false;
      for (int i=0; i < fs.length; i++) {
        if (fs[i].isDirectory()) {
          hasDir=true;
          break;
        }
      }
      if (!hasDir) {
        for (int i=0; i < fs.length; i++) {
          fs[i].delete();
        }
      }
    }
    File[] moduleDirs=appDir.listFiles();
    if (moduleDirs == null || moduleDirs.length == 0) {
      if (!appDir.delete()) {
        String defMsg=""String_Node_Str"" + appDir;
        String msg=localStrings.getLocalString(""String_Node_Str"",defMsg);
        logger.log(Level.SEVERE,msg);
        throw new RuntimeException(defMsg);
      }
    }
  }
}"
30422,"private void createPolicyContextDirectory(){
  String contextDirectoryName=getContextDirectoryName();
  File d=new File(contextDirectoryName);
  if (d.exists()) {
    if (!d.isDirectory()) {
      String defMsg=""String_Node_Str"";
      String msg=localStrings.getLocalString(""String_Node_Str"",defMsg,new Object[]{contextDirectoryName});
      logger.log(Level.SEVERE,msg);
      throw new RuntimeException(defMsg);
    }
  }
 else {
    d.mkdirs();
  }
}","private void createPolicyContextDirectory(){
  String contextDirectoryName=getContextDirectoryName();
  File d=new File(contextDirectoryName);
  String defMsg=""String_Node_Str"";
  String msg=localStrings.getLocalString(""String_Node_Str"",defMsg,new Object[]{contextDirectoryName});
  if (d.exists()) {
    if (!d.isDirectory()) {
      logger.log(Level.SEVERE,msg);
      throw new RuntimeException(defMsg);
    }
  }
 else {
    if (!d.mkdirs()) {
      logger.log(Level.SEVERE,msg);
      throw new RuntimeException(defMsg);
    }
  }
}"
30423,"private void configureStandardHostValve(StandardHostValve host){
  if ((errorReportValveClass != null) && !""String_Node_Str"".equals(errorReportValveClass)) {
    try {
      GlassFishValve valve=(GlassFishValve)Class.forName(errorReportValveClass).newInstance();
      host.setErrorReportValve(valve);
    }
 catch (    Throwable t) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",errorReportValveClass),t);
    }
  }
}","public void configureStandardHostValve(StandardHostValve host){
  if ((errorReportValveClass != null) && !""String_Node_Str"".equals(errorReportValveClass)) {
    try {
      GlassFishValve valve=(GlassFishValve)Class.forName(errorReportValveClass).newInstance();
      host.setErrorReportValve(valve);
    }
 catch (    Throwable t) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",errorReportValveClass),t);
    }
  }
}"
30424,"void setErrorReportValve(GlassFishValve errorReportValve){
  this.errorReportValve=errorReportValve;
}","public void setErrorReportValve(GlassFishValve errorReportValve){
  this.errorReportValve=errorReportValve;
}"
30425,"public void configureStandardHostValve(StandardHostValve host){
  if ((errorReportValveClass != null) && !""String_Node_Str"".equals(errorReportValveClass)) {
    try {
      GlassFishValve valve=(GlassFishValve)Class.forName(errorReportValveClass).newInstance();
      host.setErrorReportValve(valve);
    }
 catch (    Throwable t) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",errorReportValveClass),t);
    }
  }
}","private void configureStandardHostValve(StandardHostValve host){
  if ((errorReportValveClass != null) && !""String_Node_Str"".equals(errorReportValveClass)) {
    try {
      GlassFishValve valve=(GlassFishValve)loadInstance(errorReportValveClass);
      host.setErrorReportValve(valve);
    }
 catch (    Throwable t) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",errorReportValveClass),t);
    }
  }
}"
30426,"public void setErrorReportValve(GlassFishValve errorReportValve){
  this.errorReportValve=errorReportValve;
}","void setErrorReportValve(GlassFishValve errorReportValve){
  this.errorReportValve=errorReportValve;
}"
30427,"private Object loadInstance(String className){
  try {
    Class clazz=serverContext.getCommonClassLoader().loadClass(className);
    return clazz.newInstance();
  }
 catch (  Throwable ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
  return null;
}","@Override protected Object loadInstance(String className) throws Exception {
  Class clazz=serverContext.getCommonClassLoader().loadClass(className);
  return clazz.newInstance();
}"
30428,"/** 
 * Adds the <code>Valve</code> with the given class name to this VirtualServer.
 * @param valveName The valve's fully qualified class nam
 */
protected void addValve(String valveName){
  Object valve=loadInstance(valveName);
  if (valve instanceof Valve) {
    addValve((Valve)valve);
  }
 else   if (valve instanceof GlassFishValve) {
    addValve((GlassFishValve)valve);
  }
 else {
    _logger.log(Level.WARNING,""String_Node_Str"",valveName);
  }
}","/** 
 * Adds the <code>Valve</code> with the given class name to this VirtualServer.
 * @param valveName The valve's fully qualified class nam
 */
protected void addValve(String valveName){
  Object valve=safeLoadInstance(valveName);
  if (valve instanceof Valve) {
    addValve((Valve)valve);
  }
 else   if (valve instanceof GlassFishValve) {
    addValve((GlassFishValve)valve);
  }
 else {
    _logger.log(Level.WARNING,""String_Node_Str"",valveName);
  }
}"
30429,"/** 
 * Adds the Catalina listener with the given class name to this VirtualServer.
 * @param listenerName The fully qualified class name of the listener
 */
protected void addListener(String listenerName){
  Object listener=loadInstance(listenerName);
  if (listener == null)   return;
  if (listener instanceof ContainerListener) {
    addContainerListener((ContainerListener)listener);
  }
 else   if (listener instanceof LifecycleListener) {
    addLifecycleListener((LifecycleListener)listener);
  }
 else {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{listenerName,getID()});
  }
}","/** 
 * Adds the Catalina listener with the given class name to this VirtualServer.
 * @param listenerName The fully qualified class name of the listener
 */
protected void addListener(String listenerName){
  Object listener=safeLoadInstance(listenerName);
  if (listener == null)   return;
  if (listener instanceof ContainerListener) {
    addContainerListener((ContainerListener)listener);
  }
 else   if (listener instanceof LifecycleListener) {
    addLifecycleListener((LifecycleListener)listener);
  }
 else {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{listenerName,getID()});
  }
}"
30430,"/** 
 * receives notification of the value for a particular tag
 * @param element the xml element
 * @param value it's associated value
 */
public void setElementValue(XMLElement element,String value){
  String name=element.getQName();
  if (name.equals(RuntimeTagNames.TIMEOUT_SECS)) {
    timeoutSecs=Integer.parseInt(value);
  }
 else   if (name.equals(RuntimeTagNames.INVALIDATION_INTERVAL_SECS)) {
    int reapIntervalSeconds=Integer.parseInt(value);
    addManagerProperty(REAP_INTERVAL_SECONDS,value);
  }
 else   if (name.equals(RuntimeTagNames.MAX_IN_MEMORY_SESSIONS)) {
    int maxSessions=Integer.parseInt(value);
    addManagerProperty(MAX_SESSIONS,value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_NAME)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setName(value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_PATH)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setPath(value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_DOMAIN)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setDomain(value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_COMMENT)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setComment(value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_SECURE)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setSecure(Boolean.parseBoolean(value));
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_MAX_AGE_SECS)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setMaxAge(Integer.parseInt(value));
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_HTTP_ONLY)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setHttpOnly(Boolean.parseBoolean(value));
  }
 else   if (name.equals(RuntimeTagNames.COOKIES_ENABLED)) {
    cookieTrackingMode=Boolean.parseBoolean(value);
  }
 else   if (name.equals(RuntimeTagNames.URL_REWRITING_ENABLED)) {
    urlTrackingMode=Boolean.parseBoolean(value);
  }
 else   if (name.equals(RuntimeTagNames.PERSISTENT_STORE_DIR)) {
    addStoreProperty(DIRECTORY,value);
  }
 else {
    super.setElementValue(element,value);
  }
}","/** 
 * receives notification of the value for a particular tag
 * @param element the xml element
 * @param value it's associated value
 */
public void setElementValue(XMLElement element,String value){
  String name=element.getQName();
  if (name.equals(RuntimeTagNames.TIMEOUT_SECS)) {
    timeoutSecs=Integer.parseInt(value);
  }
 else   if (name.equals(RuntimeTagNames.INVALIDATION_INTERVAL_SECS)) {
    Integer.parseInt(value);
    addManagerProperty(REAP_INTERVAL_SECONDS,value);
  }
 else   if (name.equals(RuntimeTagNames.MAX_IN_MEMORY_SESSIONS)) {
    Integer.parseInt(value);
    addManagerProperty(MAX_SESSIONS,value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_NAME)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setName(value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_PATH)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setPath(value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_DOMAIN)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setDomain(value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_COMMENT)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setComment(value);
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_SECURE)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setSecure(Boolean.parseBoolean(value));
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_MAX_AGE_SECS)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setMaxAge(Integer.parseInt(value));
  }
 else   if (name.equals(RuntimeTagNames.COOKIE_HTTP_ONLY)) {
    CookieConfig cookieConfig=getCookieConfig();
    cookieConfig.setHttpOnly(Boolean.parseBoolean(value));
  }
 else   if (name.equals(RuntimeTagNames.COOKIES_ENABLED)) {
    cookieTrackingMode=Boolean.parseBoolean(value);
  }
 else   if (name.equals(RuntimeTagNames.URL_REWRITING_ENABLED)) {
    urlTrackingMode=Boolean.parseBoolean(value);
  }
 else   if (name.equals(RuntimeTagNames.PERSISTENT_STORE_DIR)) {
    addStoreProperty(DIRECTORY,value);
  }
 else {
    super.setElementValue(element,value);
  }
}"
30431,"/** 
 * Returns the element name used by the parent to store instances of the child
 * @param document the dom document this configuration element lives in.
 * @param parent type of the parent
 * @param child type of the child
 * @return the element name holding child's instances in the parent
 * @throws ClassNotFoundException when subclasses cannot be loaded
 */
public static String elementName(DomDocument document,Class<?> parent,Class<?> child) throws ClassNotFoundException {
  ConfigModel cm=document.buildModel(parent);
  for (  String elementName : cm.getElementNames()) {
    ConfigModel.Property prop=cm.getElement(elementName);
    if (prop instanceof ConfigModel.Node) {
      ConfigModel childCM=((ConfigModel.Node)prop).getModel();
      String childTypeName=childCM.targetTypeName;
      if (childTypeName.equals(child.getName())) {
        return elementName;
      }
      List<ConfigModel> subChildrenModels=document.getAllModelsImplementing(childCM.classLoaderHolder.get().loadClass(childTypeName));
      if (subChildrenModels != null) {
        for (        ConfigModel subChildModel : subChildrenModels) {
          if (subChildModel.targetTypeName.equals(child.getName())) {
            return elementName;
          }
        }
      }
    }
  }
  return null;
}","/** 
 * Returns the element name used by the parent to store instances of the child
 * @param document the dom document this configuration element lives in.
 * @param parent type of the parent
 * @param child type of the child
 * @return the element name holding child's instances in the parent
 * @throws ClassNotFoundException when subclasses cannot be loaded
 */
public static String elementName(DomDocument document,Class<?> parent,Class<?> child) throws ClassNotFoundException {
  ConfigModel cm=document.buildModel(parent);
  for (  String elementName : cm.getElementNames()) {
    ConfigModel.Property prop=cm.getElement(elementName);
    if (prop instanceof ConfigModel.Node) {
      ConfigModel childCM=((ConfigModel.Node)prop).getModel();
      String childTypeName=childCM.targetTypeName;
      if (childTypeName.equals(child.getName())) {
        return childCM.getTagName();
      }
      List<ConfigModel> subChildrenModels=document.getAllModelsImplementing(childCM.classLoaderHolder.get().loadClass(childTypeName));
      if (subChildrenModels != null) {
        for (        ConfigModel subChildModel : subChildrenModels) {
          if (subChildModel.targetTypeName.equals(child.getName())) {
            return subChildModel.getTagName();
          }
        }
      }
    }
  }
  return null;
}"
30432,"private EJBHomeImpl instantiateEJBHomeImpl() throws Exception {
  EJBHomeInvocationHandler handler=new EJBHomeInvocationHandler(ejbDescriptor,homeIntf,proxyInvocationInfoMap);
  EJBHomeImpl homeImpl=handler;
  Set proxyInterfacesSet=new LinkedHashSet();
  if (ejbDescriptor.getIASEjbExtraDescriptors().isIsReadOnlyBean()) {
    proxyInterfacesSet.add(ReadOnlyEJBHome.class);
  }
  proxyInterfacesSet.add(homeIntf);
  Class[] proxyInterfaces=(Class[])proxyInterfacesSet.toArray(new Class[proxyInterfacesSet.size()]);
  EJBHome ejbHomeProxy=(EJBHome)Proxy.newProxyInstance(loader,proxyInterfaces,handler);
  handler.setProxy(ejbHomeProxy);
  homeImpl.setContainer(this);
  return homeImpl;
}","private EJBHomeImpl instantiateEJBHomeImpl() throws Exception {
  EJBHomeInvocationHandler handler=new EJBHomeInvocationHandler(ejbDescriptor,homeIntf,proxyInvocationInfoMap);
  EJBHomeImpl homeImpl=handler;
  Set proxyInterfacesSet=new LinkedHashSet();
  if (ejbDescriptor.getIASEjbExtraDescriptors().isIsReadOnlyBean()) {
    proxyInterfacesSet.add(ReadOnlyEJBHome.class);
  }
  proxyInterfacesSet.add(homeIntf);
  Class[] proxyInterfaces=(Class[])proxyInterfacesSet.toArray(new Class[proxyInterfacesSet.size()]);
  try {
    EJBHome ejbHomeProxy=(EJBHome)Proxy.newProxyInstance(loader,proxyInterfaces,handler);
    handler.setProxy(ejbHomeProxy);
  }
 catch (  ClassCastException e) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",homeIntf);
    throw new IllegalArgumentException(msg,e);
  }
  homeImpl.setContainer(this);
  return homeImpl;
}"
30433,"private EJBLocalHomeImpl instantiateEJBLocalHomeImpl() throws Exception {
  EJBLocalHomeInvocationHandler invHandler=new EJBLocalHomeInvocationHandler(ejbDescriptor,localHomeIntf,proxyInvocationInfoMap);
  EJBLocalHomeImpl homeImpl=invHandler;
  Set proxyInterfacesSet=new LinkedHashSet();
  proxyInterfacesSet.add(IndirectlySerializable.class);
  if (ejbDescriptor.getIASEjbExtraDescriptors().isIsReadOnlyBean()) {
    proxyInterfacesSet.add(ReadOnlyEJBLocalHome.class);
  }
  proxyInterfacesSet.add(localHomeIntf);
  Class[] proxyInterfaces=(Class[])proxyInterfacesSet.toArray(new Class[proxyInterfacesSet.size()]);
  EJBLocalHome proxy=(EJBLocalHome)Proxy.newProxyInstance(loader,proxyInterfaces,invHandler);
  invHandler.setProxy(proxy);
  homeImpl.setContainer(this);
  return homeImpl;
}","private EJBLocalHomeImpl instantiateEJBLocalHomeImpl() throws Exception {
  EJBLocalHomeInvocationHandler invHandler=new EJBLocalHomeInvocationHandler(ejbDescriptor,localHomeIntf,proxyInvocationInfoMap);
  EJBLocalHomeImpl homeImpl=invHandler;
  Set proxyInterfacesSet=new LinkedHashSet();
  proxyInterfacesSet.add(IndirectlySerializable.class);
  if (ejbDescriptor.getIASEjbExtraDescriptors().isIsReadOnlyBean()) {
    proxyInterfacesSet.add(ReadOnlyEJBLocalHome.class);
  }
  proxyInterfacesSet.add(localHomeIntf);
  Class[] proxyInterfaces=(Class[])proxyInterfacesSet.toArray(new Class[proxyInterfacesSet.size()]);
  try {
    EJBLocalHome proxy=(EJBLocalHome)Proxy.newProxyInstance(loader,proxyInterfaces,invHandler);
    invHandler.setProxy(proxy);
  }
 catch (  ClassCastException e) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",localHomeIntf);
    throw new IllegalArgumentException(msg,e);
  }
  homeImpl.setContainer(this);
  return homeImpl;
}"
30434,"protected EJBLocalObjectImpl instantiateEJBLocalObjectImpl() throws Exception {
  EJBLocalObjectImpl localObjImpl=null;
  EJBLocalObjectInvocationHandler handler=new EJBLocalObjectInvocationHandler(proxyInvocationInfoMap,localIntf);
  localObjImpl=handler;
  EJBLocalObject localObjectProxy=(EJBLocalObject)ejbLocalObjectProxyCtor.newInstance(new Object[]{handler});
  handler.setProxy(localObjectProxy);
  localObjImpl.setContainer(this);
  return localObjImpl;
}","protected EJBLocalObjectImpl instantiateEJBLocalObjectImpl() throws Exception {
  EJBLocalObjectImpl localObjImpl=null;
  EJBLocalObjectInvocationHandler handler=new EJBLocalObjectInvocationHandler(proxyInvocationInfoMap,localIntf);
  localObjImpl=handler;
  try {
    EJBLocalObject localObjectProxy=(EJBLocalObject)ejbLocalObjectProxyCtor.newInstance(new Object[]{handler});
    handler.setProxy(localObjectProxy);
  }
 catch (  ClassCastException e) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",localIntf);
    throw new IllegalArgumentException(msg,e);
  }
  localObjImpl.setContainer(this);
  return localObjImpl;
}"
30435,"protected EJBObjectImpl instantiateEJBObjectImpl() throws Exception {
  EJBObjectInvocationHandler handler=new EJBObjectInvocationHandler(proxyInvocationInfoMap,remoteIntf);
  EJBObjectImpl ejbObjImpl=handler;
  EJBObject ejbObjectProxy=(EJBObject)ejbObjectProxyCtor.newInstance(new Object[]{handler});
  handler.setEJBObject(ejbObjectProxy);
  ejbObjImpl.setContainer(this);
  return ejbObjImpl;
}","protected EJBObjectImpl instantiateEJBObjectImpl() throws Exception {
  EJBObjectInvocationHandler handler=new EJBObjectInvocationHandler(proxyInvocationInfoMap,remoteIntf);
  EJBObjectImpl ejbObjImpl=handler;
  try {
    EJBObject ejbObjectProxy=(EJBObject)ejbObjectProxyCtor.newInstance(new Object[]{handler});
    handler.setEJBObject(ejbObjectProxy);
  }
 catch (  ClassCastException e) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",remoteIntf);
    throw new IllegalArgumentException(msg,e);
  }
  ejbObjImpl.setContainer(this);
  return ejbObjImpl;
}"
30436,"/** 
 * Log the interesting request parameters, invoke the next Valve in the sequence, and log the interesting response parameters.
 * @param request The servlet request to be processed
 * @param response The servlet response to be created
 * @exception IOException if an input/output error occurs
 * @exception ServletException if a servlet error occurs
 */
public int invoke(Request request,Response response) throws IOException, ServletException {
  if (!(request instanceof HttpRequest) || !(response instanceof HttpResponse)) {
    return INVOKE_NEXT;
  }
  HttpRequest hrequest=(HttpRequest)request;
  HttpResponse hresponse=(HttpResponse)response;
  HttpServletRequest hreq=(HttpServletRequest)hrequest.getRequest();
  log(""String_Node_Str"" + hreq.getRequestURI());
  log(""String_Node_Str"" + hreq.getAuthType());
  log(""String_Node_Str"" + hreq.getCharacterEncoding());
  log(""String_Node_Str"" + hreq.getContentLength());
  log(""String_Node_Str"" + hreq.getContentType());
  log(""String_Node_Str"" + hreq.getContextPath());
  Cookie cookies[]=hreq.getCookies();
  if (cookies != null) {
    for (int i=0; i < cookies.length; i++)     log(""String_Node_Str"" + cookies[i].getName() + ""String_Node_Str""+ cookies[i].getValue());
  }
  Enumeration<String> hnames=hreq.getHeaderNames();
  while (hnames.hasMoreElements()) {
    String hname=hnames.nextElement();
    Enumeration<String> hvalues=hreq.getHeaders(hname);
    while (hvalues.hasMoreElements()) {
      String hvalue=hvalues.nextElement();
      log(""String_Node_Str"" + hname + ""String_Node_Str""+ hvalue);
    }
  }
  log(""String_Node_Str"" + hreq.getLocale());
  log(""String_Node_Str"" + hreq.getMethod());
  Enumeration<String> pnames=hreq.getParameterNames();
  while (pnames.hasMoreElements()) {
    String pname=pnames.nextElement();
    String pvalues[]=hreq.getParameterValues(pname);
    StringBuilder result=new StringBuilder(pname);
    result.append('=');
    for (int i=0; i < pvalues.length; i++) {
      if (i > 0)       result.append(""String_Node_Str"");
      result.append(pvalues[i]);
    }
    log(""String_Node_Str"" + result.toString());
  }
  log(""String_Node_Str"" + hreq.getPathInfo());
  log(""String_Node_Str"" + hreq.getProtocol());
  log(""String_Node_Str"" + hreq.getQueryString());
  log(""String_Node_Str"" + hreq.getRemoteAddr());
  log(""String_Node_Str"" + hreq.getRemoteHost());
  log(""String_Node_Str"" + hreq.getRemoteUser());
  log(""String_Node_Str"" + hreq.getRequestedSessionId());
  log(""String_Node_Str"" + hreq.getScheme());
  log(""String_Node_Str"" + hreq.getServerName());
  log(""String_Node_Str"" + hreq.getServerPort());
  log(""String_Node_Str"" + hreq.getServletPath());
  log(""String_Node_Str"" + hreq.isSecure());
  log(""String_Node_Str"");
  return INVOKE_NEXT;
}","/** 
 * Log the interesting request parameters, invoke the next Valve in the sequence, and log the interesting response parameters.
 * @param request The servlet request to be processed
 * @param response The servlet response to be created
 * @exception IOException if an input/output error occurs
 * @exception ServletException if a servlet error occurs
 */
public int invoke(Request request,Response response) throws IOException, ServletException {
  if (!(request instanceof HttpRequest) || !(response instanceof HttpResponse)) {
    return INVOKE_NEXT;
  }
  HttpRequest hrequest=(HttpRequest)request;
  HttpServletRequest hreq=(HttpServletRequest)hrequest.getRequest();
  log(""String_Node_Str"" + hreq.getRequestURI());
  log(""String_Node_Str"" + hreq.getAuthType());
  log(""String_Node_Str"" + hreq.getCharacterEncoding());
  log(""String_Node_Str"" + hreq.getContentLength());
  log(""String_Node_Str"" + hreq.getContentType());
  log(""String_Node_Str"" + hreq.getContextPath());
  Cookie cookies[]=hreq.getCookies();
  if (cookies != null) {
    for (int i=0; i < cookies.length; i++)     log(""String_Node_Str"" + cookies[i].getName() + ""String_Node_Str""+ cookies[i].getValue());
  }
  Enumeration<String> hnames=hreq.getHeaderNames();
  while (hnames.hasMoreElements()) {
    String hname=hnames.nextElement();
    Enumeration<String> hvalues=hreq.getHeaders(hname);
    while (hvalues.hasMoreElements()) {
      String hvalue=hvalues.nextElement();
      log(""String_Node_Str"" + hname + ""String_Node_Str""+ hvalue);
    }
  }
  log(""String_Node_Str"" + hreq.getLocale());
  log(""String_Node_Str"" + hreq.getMethod());
  Enumeration<String> pnames=hreq.getParameterNames();
  while (pnames.hasMoreElements()) {
    String pname=pnames.nextElement();
    String pvalues[]=hreq.getParameterValues(pname);
    StringBuilder result=new StringBuilder(pname);
    result.append('=');
    for (int i=0; i < pvalues.length; i++) {
      if (i > 0)       result.append(""String_Node_Str"");
      result.append(pvalues[i]);
    }
    log(""String_Node_Str"" + result.toString());
  }
  log(""String_Node_Str"" + hreq.getPathInfo());
  log(""String_Node_Str"" + hreq.getProtocol());
  log(""String_Node_Str"" + hreq.getQueryString());
  log(""String_Node_Str"" + hreq.getRemoteAddr());
  log(""String_Node_Str"" + hreq.getRemoteHost());
  log(""String_Node_Str"" + hreq.getRemoteUser());
  log(""String_Node_Str"" + hreq.getRequestedSessionId());
  log(""String_Node_Str"" + hreq.getScheme());
  log(""String_Node_Str"" + hreq.getServerName());
  log(""String_Node_Str"" + hreq.getServerPort());
  log(""String_Node_Str"" + hreq.getServletPath());
  log(""String_Node_Str"" + hreq.isSecure());
  log(""String_Node_Str"");
  return INVOKE_NEXT;
}"
30437,"public ApplicationInfo unload(ApplicationInfo info,ExtendedDeploymentContext context){
  ActionReport report=context.getActionReport();
  if (info == null) {
    report.failure(context.getLogger(),""String_Node_Str"",null);
    return null;
  }
  if (info.isLoaded()) {
    info.stop(context,context.getLogger());
    info.unload(context);
    events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,info));
  }
  try {
    info.clean(context);
  }
 catch (  Exception e) {
    report.failure(context.getLogger(),""String_Node_Str"",e);
    return info;
  }
  return info;
}","public ApplicationInfo unload(ApplicationInfo info,ExtendedDeploymentContext context){
  ActionReport report=context.getActionReport();
  if (info == null) {
    report.failure(context.getLogger(),""String_Node_Str"",null);
    return null;
  }
  if (info.isLoaded()) {
    info.stop(context,context.getLogger());
    info.unload(context);
    events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,info),false);
  }
  try {
    info.clean(context);
  }
 catch (  Exception e) {
    report.failure(context.getLogger(),""String_Node_Str"",e);
    return info;
  }
  return info;
}"
30438,"/** 
 * Sets the ejb descriptor to which I refer.
 * @param ejbDescriptor the ejb descriptor referenced, null if it is unknow at this time
 */
public void setEjbDescriptor(EjbDescriptor ejbDescriptor){
  if (this.ejbDescriptor != null) {
    this.ejbDescriptor.removeEjbReferencer(this);
  }
  this.ejbDescriptor=ejbDescriptor;
  if (ejbDescriptor != null) {
    ejbDescriptor.addEjbReferencer(this);
    if (isLocal()) {
      if (!ejbDescriptor.isLocalInterfacesSupported() && !ejbDescriptor.isLocalBusinessInterfacesSupported() && !ejbDescriptor.isLocalBean()) {
        throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else {
      if (!ejbDescriptor.isRemoteInterfacesSupported() && !ejbDescriptor.isRemoteBusinessInterfacesSupported()) {
        throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      }
    }
  }
}","/** 
 * Sets the ejb descriptor to which I refer.
 * @param ejbDescriptor the ejb descriptor referenced, null if it is unknow at this time
 */
public void setEjbDescriptor(EjbDescriptor ejbDescriptor){
  if (this.ejbDescriptor != null) {
    this.ejbDescriptor.removeEjbReferencer(this);
  }
  this.ejbDescriptor=ejbDescriptor;
  if (ejbDescriptor != null) {
    ejbDescriptor.addEjbReferencer(this);
    if (isLocal()) {
      if (!ejbDescriptor.isLocalInterfacesSupported() && !ejbDescriptor.isLocalBusinessInterfacesSupported() && !ejbDescriptor.isLocalBean()) {
        throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{ejbDescriptor.getName()}));
      }
    }
 else {
      if (!ejbDescriptor.isRemoteInterfacesSupported() && !ejbDescriptor.isRemoteBusinessInterfacesSupported()) {
        throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{ejbDescriptor.getName()}));
      }
    }
  }
}"
30439,"private boolean checkCache(Permission p,Epoch e){
  rLock.lock();
  try {
    if (loading) {
      return false;
    }
 else     if (cache != null) {
      return checkLoadedCache(p,e);
    }
  }
  finally {
    rLock.unlock();
  }
  wLock.lock();
  if (loading) {
    wLock.unlock();
    return false;
  }
 else   if (cache != null) {
    rLock.lock();
    wLock.unlock();
    try {
      return checkLoadedCache(p,e);
    }
  finally {
      rLock.unlock();
    }
  }
 else {
    cache=null;
    loading=true;
    wLock.unlock();
  }
  Permissions nextCache=new Permissions();
  boolean setPc=false;
  String oldpcID=null;
  try {
    oldpcID=PolicyContext.getContextID();
    if (this.pcID != oldpcID && (this.pcID == null || !this.pcID.equals(oldpcID))) {
      setPc=true;
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
  PermissionCollection pc=null;
  try {
    if (setPc) {
      setPolicyContextID(this.pcID);
    }
    pc=policy.getPermissions(this.codesource);
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
 finally {
    if (setPc) {
      try {
        setPolicyContextID(oldpcID);
      }
 catch (      Exception ex) {
        _logger.log(Level.SEVERE,""String_Node_Str"",ex);
        return false;
      }
    }
  }
  resolvePermissions(pc,p);
  Enumeration granted=pc.elements();
  while (granted.hasMoreElements()) {
    Permission i=(Permission)granted.nextElement();
    if (i.equals(allPermission)) {
      nextCache.add(i);
    }
 else {
      boolean classMatch=true;
      if (this.classes != null) {
        classMatch=false;
        Class iClazz=i.getClass();
        for (int j=0; j < this.classes.length; j++) {
          if (this.classes[j].equals(iClazz)) {
            classMatch=true;
            break;
          }
        }
      }
      if (classMatch) {
        if (this.name != null) {
          String iName=i.getName();
          if (iName != null && this.name.equals(iName)) {
            nextCache.add(i);
          }
        }
 else {
          nextCache.add(i);
        }
      }
    }
  }
  wLock.lock();
  cache=nextCache;
  loading=false;
  try {
    rLock.lock();
    wLock.unlock();
    return checkLoadedCache(p,e);
  }
  finally {
    rLock.unlock();
  }
}","private boolean checkCache(Permission p,Epoch e){
  rLock.lock();
  try {
    if (loading) {
      return false;
    }
 else     if (cache != null) {
      return checkLoadedCache(p,e);
    }
  }
  finally {
    rLock.unlock();
  }
  wLock.lock();
  if (loading) {
    wLock.unlock();
    return false;
  }
 else   if (cache != null) {
    rLock.lock();
    wLock.unlock();
    try {
      return checkLoadedCache(p,e);
    }
  finally {
      rLock.unlock();
    }
  }
 else {
    cache=null;
    loading=true;
    wLock.unlock();
  }
  Permissions nextCache=new Permissions();
  boolean setPc=false;
  String oldpcID=null;
  try {
    oldpcID=PolicyContext.getContextID();
    if (!this.pcID.equals(oldpcID) && (this.pcID == null || !this.pcID.equals(oldpcID))) {
      setPc=true;
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
  PermissionCollection pc=null;
  try {
    if (setPc) {
      setPolicyContextID(this.pcID);
    }
    pc=policy.getPermissions(this.codesource);
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return false;
  }
 finally {
    if (setPc) {
      try {
        setPolicyContextID(oldpcID);
      }
 catch (      Exception ex) {
        _logger.log(Level.SEVERE,""String_Node_Str"",ex);
        return false;
      }
    }
  }
  resolvePermissions(pc,p);
  Enumeration granted=pc.elements();
  while (granted.hasMoreElements()) {
    Permission i=(Permission)granted.nextElement();
    if (i.equals(allPermission)) {
      nextCache.add(i);
    }
 else {
      boolean classMatch=true;
      if (this.classes != null) {
        classMatch=false;
        Class iClazz=i.getClass();
        for (int j=0; j < this.classes.length; j++) {
          if (this.classes[j].equals(iClazz)) {
            classMatch=true;
            break;
          }
        }
      }
      if (classMatch) {
        if (this.name != null) {
          String iName=i.getName();
          if (iName != null && this.name.equals(iName)) {
            nextCache.add(i);
          }
        }
 else {
          nextCache.add(i);
        }
      }
    }
  }
  wLock.lock();
  cache=nextCache;
  loading=false;
  try {
    rLock.lock();
    wLock.unlock();
    return checkLoadedCache(p,e);
  }
  finally {
    rLock.unlock();
  }
}"
30440,"public void onInitialization(){
  try {
    if (_logger.isLoggable(Level.INFO)) {
      _logger.log(Level.INFO,""String_Node_Str"");
    }
    webStatsProvider=new WebSecurityDeployerStatsProvider();
    StatsProviderManager.register(""String_Node_Str"",PluginPoint.SERVER,""String_Node_Str"",webStatsProvider);
    initializeJMAC();
    policyLoader.loadPolicy();
    realmsManager.createRealms();
    AuditManager auditManager=secServUtil.getAuditManager();
    auditManager.loadAuditModules();
    auditManager.serverStarted();
    if (_logger.isLoggable(Level.INFO)) {
      _logger.log(Level.INFO,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    throw new SecurityLifecycleException(ex);
  }
}","public void onInitialization(){
  try {
    if (_logger.isLoggable(Level.INFO)) {
      _logger.log(Level.INFO,""String_Node_Str"");
    }
    initializeJMAC();
    policyLoader.loadPolicy();
    realmsManager.createRealms();
    AuditManager auditManager=secServUtil.getAuditManager();
    auditManager.loadAuditModules();
    auditManager.serverStarted();
    if (_logger.isLoggable(Level.INFO)) {
      _logger.log(Level.INFO,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    throw new SecurityLifecycleException(ex);
  }
}"
30441,"private boolean deleteFile(File path){
  if (path != null && path.exists()) {
    if (path.isDirectory()) {
      File[] files=path.listFiles();
      for (      File file : files) {
        if (file.isDirectory()) {
          deleteFile(file);
          file.delete();
        }
 else {
          file.delete();
        }
      }
    }
    path.delete();
  }
  return true;
}","private boolean deleteFile(File path){
  if (path != null && path.exists()) {
    if (path.isDirectory()) {
      File[] files=path.listFiles();
      for (      File file : files) {
        if (file.isDirectory()) {
          deleteFile(file);
          if (file.delete())           continue;
        }
 else {
          if (file.delete())           continue;
        }
      }
    }
    path.delete();
  }
  return true;
}"
30442,"/** 
 * Logout the user. <p> This method removes the <code>PrincipalImpl</code> that was added by the <code>commit</code> method. <p>
 * @exception LoginException if the logout fails.
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 */
public boolean logout() throws LoginException {
  ssl=null;
  sslUtils.setAppclientSsl(ssl);
  subject.getPrincipals().remove(userPrincipal);
  succeeded=false;
  succeeded=commitSucceeded;
  alias=null;
  userPrincipal=null;
  return true;
}","/** 
 * Logout the user. <p> This method removes the <code>PrincipalImpl</code> that was added by the <code>commit</code> method. <p>
 * @exception LoginException if the logout fails.
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 */
public boolean logout() throws LoginException {
  ssl=null;
  sslUtils.setAppclientSsl(ssl);
  subject.getPrincipals().remove(userPrincipal);
  succeeded=false;
  commitSucceeded=false;
  alias=null;
  userPrincipal=null;
  return true;
}"
30443,"/** 
 * Authenticate the user by prompting for a username and password. <p>
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 * @exception FailedLoginException if the authentication fails. <p>
 * @exception LoginException if this <code>LoginModule</code>is unable to perform the authentication.
 */
public boolean login() throws LoginException {
  if (callbackHandler == null) {
    throw new LoginException(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    String[] as=new String[ks.size()];
    String[] aliasString=new String[ks.size()];
    Enumeration aliases=ks.aliases();
    for (int i=0; i < ks.size(); i++) {
      aliasString[i]=(String)aliases.nextElement();
      as[i]=((X509Certificate)ks.getCertificate(aliasString[i])).getSubjectDN().getName();
    }
    Callback[] callbacks=new Callback[1];
    callbacks[0]=new ChoiceCallback(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),as,0,false);
    callbackHandler.handle(callbacks);
    String[] choices=((ChoiceCallback)callbacks[0]).getChoices();
    int[] idx=((ChoiceCallback)callbacks[0]).getSelectedIndexes();
    if (choices == null) {
    }
    if (idx == null) {
      throw new LoginException(""String_Node_Str"");
    }
 else     if (idx[0] == -1) {
      throw new LoginException(""String_Node_Str"");
    }
    if (debug) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
        for (int i=0; i < idx.length; i++) {
          _logger.log(Level.FINE,aliasString[idx[i]]);
        }
      }
    }
    this.alias=aliasString[idx[0]];
    certificate=(X509Certificate)ks.getCertificate(alias);
    if (debug) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    succeeded=true;
    return true;
  }
 catch (  java.io.IOException ioe) {
    throw new LoginException(ioe.toString());
  }
catch (  UnsupportedCallbackException uce) {
    throw new LoginException(""String_Node_Str"" + uce.getCallback().toString() + ""String_Node_Str""+ ""String_Node_Str"");
  }
catch (  Exception e) {
    throw new LoginException(e.toString());
  }
}","/** 
 * Authenticate the user by prompting for a username and password. <p>
 * @return true in all cases since this <code>LoginModule</code>should not be ignored.
 * @exception FailedLoginException if the authentication fails. <p>
 * @exception LoginException if this <code>LoginModule</code>is unable to perform the authentication.
 */
public boolean login() throws LoginException {
  if (callbackHandler == null) {
    throw new LoginException(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    String[] as=new String[ks.size()];
    String[] aliasString=new String[ks.size()];
    Enumeration aliases=ks.aliases();
    for (int i=0; i < ks.size(); i++) {
      aliasString[i]=(String)aliases.nextElement();
      as[i]=((X509Certificate)ks.getCertificate(aliasString[i])).getSubjectDN().getName();
    }
    Callback[] callbacks=new Callback[1];
    callbacks[0]=new ChoiceCallback(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),as,0,false);
    callbackHandler.handle(callbacks);
    String[] choices=((ChoiceCallback)callbacks[0]).getChoices();
    int[] idx=((ChoiceCallback)callbacks[0]).getSelectedIndexes();
    if (idx == null) {
      throw new LoginException(""String_Node_Str"");
    }
 else     if (idx[0] == -1) {
      throw new LoginException(""String_Node_Str"");
    }
    if (debug) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
        for (int i=0; i < idx.length; i++) {
          _logger.log(Level.FINE,aliasString[idx[i]]);
        }
      }
    }
    this.alias=aliasString[idx[0]];
    certificate=(X509Certificate)ks.getCertificate(alias);
    if (debug) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    succeeded=true;
    return true;
  }
 catch (  java.io.IOException ioe) {
    throw new LoginException(ioe.toString());
  }
catch (  UnsupportedCallbackException uce) {
    throw new LoginException(""String_Node_Str"" + uce.getCallback().toString() + ""String_Node_Str""+ ""String_Node_Str"");
  }
catch (  Exception e) {
    throw new LoginException(e.toString());
  }
}"
30444,"/** 
 * Return the hashCode computed from the password and realm name.
 * @return the hash code.
 */
public int hashCode(){
  return username.hashCode() + password.hashCode() + realm.hashCode();
}","/** 
 * Return the hashCode computed from the password and realm name.
 * @return the hash code.
 */
public int hashCode(){
  return username.hashCode() + Arrays.hashCode(password) + realm.hashCode();
}"
30445,"/** 
 * Compare two instances of the credential and return true if they are the same and false otherwise.
 * @param the object that this instance is being compared to.
 * @return true if the instances are equal, false otherwise
 */
public boolean equals(Object o){
  if (o instanceof PasswordCredential) {
    PasswordCredential pc=(PasswordCredential)o;
    if (pc.getUser().equals(username) && pc.getPassword().equals(password) && pc.getRealm().equals(realm)) {
      return true;
    }
  }
  return false;
}","/** 
 * Compare two instances of the credential and return true if they are the same and false otherwise.
 * @param the object that this instance is being compared to.
 * @return true if the instances are equal, false otherwise
 */
public boolean equals(Object o){
  if (o instanceof PasswordCredential) {
    PasswordCredential pc=(PasswordCredential)o;
    if (pc.getUser().equals(username) && Arrays.equals(pc.getPassword(),password) && pc.getRealm().equals(realm)) {
      return true;
    }
  }
  return false;
}"
30446,"@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final StringNonce other=(StringNonce)obj;
  if (this.nonce != other.getNonce() && (this.nonce == null || !this.nonce.equals(other.getNonce()))) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final StringNonce other=(StringNonce)obj;
  if (!this.nonce.equals(other.getNonce()) && (this.nonce == null || !this.nonce.equals(other.getNonce()))) {
    return false;
  }
  return true;
}"
30447,"/** 
 * Instantiates a Realm class of the given type and invokes its init()
 */
private static synchronized Realm doInstantiate(String name,String className,Properties props) throws BadRealmException {
  Habitat habitat=Globals.getDefaultHabitat();
  RealmsManager mgr=null;
  try {
    mgr=getRealmsManager();
    Class realmClass=null;
    Realm r=habitat.getComponent(Realm.class,name);
    if (r == null) {
      try {
        ClassLoaderHierarchy hierarchy=habitat.getComponent(ClassLoaderHierarchy.class);
        realmClass=hierarchy.getCommonClassLoader().loadClass(className);
        Object obj=realmClass.newInstance();
        r=(Realm)obj;
      }
 catch (      ClassNotFoundException ex) {
        realmClass=Class.forName(className);
        Object obj=realmClass.newInstance();
        r=(Realm)obj;
      }
    }
    if (r != null) {
      r.setName(name);
      r.init(props);
      if (mgr == null) {
        throw new BadRealmException(""String_Node_Str"");
      }
      _logger.log(Level.INFO,""String_Node_Str"",new Object[]{name,className});
      return r;
    }
 else {
      throw new BadRealmException(""String_Node_Str"" + className);
    }
  }
 catch (  NoSuchRealmException ex) {
    throw new BadRealmException(ex);
  }
catch (  InstantiationException ex) {
    throw new BadRealmException(ex);
  }
catch (  IllegalAccessException ex) {
    throw new BadRealmException(ex);
  }
catch (  ClassNotFoundException ex) {
    throw new BadRealmException(ex);
  }
}","/** 
 * Instantiates a Realm class of the given type and invokes its init()
 */
private static synchronized Realm doInstantiate(String name,String className,Properties props) throws BadRealmException {
  Habitat habitat=Globals.getDefaultHabitat();
  RealmsManager mgr=null;
  try {
    mgr=getRealmsManager();
    Class realmClass=null;
    Realm r=habitat.getComponent(Realm.class,name);
    if (r == null) {
      try {
        ClassLoaderHierarchy hierarchy=habitat.getComponent(ClassLoaderHierarchy.class);
        realmClass=hierarchy.getCommonClassLoader().loadClass(className);
        Object obj=realmClass.newInstance();
        r=(Realm)obj;
      }
 catch (      ClassNotFoundException ex) {
        realmClass=Class.forName(className);
        Object obj=realmClass.newInstance();
        r=(Realm)obj;
      }
    }
    r.setName(name);
    r.init(props);
    if (mgr == null) {
      throw new BadRealmException(""String_Node_Str"");
    }
    _logger.log(Level.INFO,""String_Node_Str"",new Object[]{name,className});
    return r;
  }
 catch (  NoSuchRealmException ex) {
    throw new BadRealmException(ex);
  }
catch (  InstantiationException ex) {
    throw new BadRealmException(ex);
  }
catch (  IllegalAccessException ex) {
    throw new BadRealmException(ex);
  }
catch (  ClassNotFoundException ex) {
    throw new BadRealmException(ex);
  }
}"
30448,"public static void createRealms(String defaultRealm,List<AuthRealm> realms,String configName){
  assert(realms != null);
  String goodRealm=null;
  for (  AuthRealm aRealm : realms) {
    String realmName=aRealm.getName();
    String realmClass=aRealm.getClassname();
    assert(realmName != null);
    assert(realmClass != null);
    try {
      List<Property> realmProps=aRealm.getProperty();
      Properties props=new Properties();
      for (      Property realmProp : realmProps) {
        props.setProperty(realmProp.getName(),realmProp.getValue());
      }
      Realm.instantiate(realmName,realmClass,props,configName);
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + realmName);
      }
      if (goodRealm == null) {
        goodRealm=realmName;
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",realmName);
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  if (goodRealm == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    try {
      Realm def=Realm.getInstance(defaultRealm);
      if (def == null) {
        defaultRealm=goodRealm;
      }
    }
 catch (    Exception e) {
      defaultRealm=goodRealm;
    }
    Realm.setDefaultRealm(defaultRealm);
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + defaultRealm);
    }
  }
}","public static void createRealms(String defaultRealm,List<AuthRealm> realms,String configName){
  assert(realms != null);
  String goodRealm=null;
  for (  AuthRealm aRealm : realms) {
    String realmName=aRealm.getName();
    String realmClass=aRealm.getClassname();
    assert(realmName != null);
    assert(realmClass != null);
    try {
      List<Property> realmProps=aRealm.getProperty();
      Properties props=new Properties();
      for (      Property realmProp : realmProps) {
        props.setProperty(realmProp.getName(),realmProp.getValue());
      }
      Realm.instantiate(realmName,realmClass,props,configName);
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + realmName);
      }
      if (goodRealm == null) {
        goodRealm=realmName;
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",realmName);
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  if (goodRealm == null) {
    logger.severe(""String_Node_Str"");
  }
 else {
    try {
      Realm def=Realm.getInstance(defaultRealm);
    }
 catch (    Exception e) {
      defaultRealm=goodRealm;
    }
    Realm.setDefaultRealm(defaultRealm);
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + defaultRealm);
    }
  }
}"
30449,"/** 
 * Load keyfile from config and populate internal cache.
 */
private void loadKeyFile() throws BadRealmException {
  String file=this.getProperty(PARAM_KEYFILE);
  _logger.fine(""String_Node_Str"" + file);
  File filePath=new File(file);
  if ((file != null) && !filePath.exists()) {
    try {
      if ((instanceRoot != null) && (filePath.getCanonicalPath().startsWith(instanceRoot))) {
        filePath.createNewFile();
      }
    }
 catch (    IOException ex) {
    }
  }
  BufferedReader input=null;
  try {
    if (Util.isEmbeddedServer()) {
      String embeddedFilePath=Util.writeConfigFileToTempDir(file).getAbsolutePath();
      this.setProperty(PARAM_KEYFILE,embeddedFilePath);
      input=new BufferedReader(new FileReader(embeddedFilePath));
    }
 else {
      input=new BufferedReader(new FileReader(file));
    }
    while (input.ready()) {
      String line=input.readLine();
      if (!line.startsWith(COMMENT) && line.indexOf(FIELD_SEP) > 0) {
        FileRealmUser ud=decodeUser(line,groupSizeMap);
        userTable.put(ud.getName(),ud);
      }
    }
  }
 catch (  Exception e) {
    _logger.log(Level.WARNING,""String_Node_Str"",e);
    throw new BadRealmException(e.toString());
  }
 finally {
    if (input != null) {
      try {
        input.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}","/** 
 * Load keyfile from config and populate internal cache.
 */
private void loadKeyFile() throws BadRealmException {
  String file=this.getProperty(PARAM_KEYFILE);
  _logger.fine(""String_Node_Str"" + file);
  File filePath=new File(file);
  if ((file != null) && !filePath.exists()) {
    try {
      if ((instanceRoot != null) && (filePath.getCanonicalPath().startsWith(instanceRoot))) {
        if (!filePath.createNewFile()) {
          throw new IOException();
        }
      }
    }
 catch (    IOException ex) {
    }
  }
  BufferedReader input=null;
  try {
    if (Util.isEmbeddedServer()) {
      String embeddedFilePath=Util.writeConfigFileToTempDir(file).getAbsolutePath();
      this.setProperty(PARAM_KEYFILE,embeddedFilePath);
      input=new BufferedReader(new FileReader(embeddedFilePath));
    }
 else {
      input=new BufferedReader(new FileReader(file));
    }
    while (input.ready()) {
      String line=input.readLine();
      if (!line.startsWith(COMMENT) && line.indexOf(FIELD_SEP) > 0) {
        FileRealmUser ud=decodeUser(line,groupSizeMap);
        userTable.put(ud.getName(),ud);
      }
    }
  }
 catch (  Exception e) {
    _logger.log(Level.WARNING,""String_Node_Str"",e);
    throw new BadRealmException(e.toString());
  }
 finally {
    if (input != null) {
      try {
        input.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}"
30450,"/** 
 * Initialize a realm with some properties.  This can be used when instantiating realms from their descriptions.  This method may only be called a single time.  
 * @param props Initialization parameters used by this realm.
 * @exception BadRealmException If the configuration parametersidentify a corrupt realm.
 * @exception NoSuchRealmException If the configuration parametersspecify a realm which doesn't exist.
 */
public synchronized void init(Properties props) throws BadRealmException, NoSuchRealmException {
  super.init(props);
  String url=props.getProperty(PARAM_DIRURL);
  String dn=props.getProperty(PARAM_USERDN);
  String jaasCtx=props.getProperty(IASRealm.JAAS_CONTEXT_PARAM);
  if (url == null || dn == null || jaasCtx == null) {
    String msg=sm.getString(""String_Node_Str"",url,dn,jaasCtx);
    throw new BadRealmException(msg);
  }
  this.setProperty(PARAM_DIRURL,url);
  ldapBindProps.setProperty(Context.PROVIDER_URL,url);
  this.setProperty(PARAM_USERDN,dn);
  this.setProperty(IASRealm.JAAS_CONTEXT_PARAM,jaasCtx);
  String mode=props.getProperty(PARAM_MODE,MODE_DEFAULT);
  if (!MODE_DEFAULT.equals(mode)) {
    String msg=sm.getString(""String_Node_Str"",mode);
    throw new BadRealmException(msg);
  }
  this.setProperty(PARAM_MODE,mode);
  String ctxF=props.getProperty(PARAM_JNDICF,JNDICF_DEFAULT);
  this.setProperty(PARAM_JNDICF,ctxF);
  ldapBindProps.setProperty(Context.INITIAL_CONTEXT_FACTORY,ctxF);
  String searchFilter=props.getProperty(PARAM_SEARCH_FILTER,SEARCH_FILTER_DEFAULT);
  this.setProperty(PARAM_SEARCH_FILTER,searchFilter);
  String grpDN=props.getProperty(PARAM_GRPDN,dn);
  this.setProperty(PARAM_GRPDN,grpDN);
  String grpSearchFilter=props.getProperty(PARAM_GRP_SEARCH_FILTER,GRP_SEARCH_FILTER_DEFAULT);
  this.setProperty(PARAM_GRP_SEARCH_FILTER,grpSearchFilter);
  String grpTarget=props.getProperty(PARAM_GRP_TARGET,GRP_TARGET_DEFAULT);
  this.setProperty(PARAM_GRP_TARGET,grpTarget);
  String objectFactory=props.getProperty(DYNAMIC_GROUP_FACTORY_OBJECT_PROPERTY,DYNAMIC_GROUP_OBJECT_FACTORY);
  this.setProperty(DYNAMIC_GROUP_FACTORY_OBJECT_PROPERTY,objectFactory);
  ldapBindProps.setProperty(DYNAMIC_GROUP_FACTORY_OBJECT_PROPERTY,objectFactory);
  String stateFactory=props.getProperty(DYNAMIC_GROUP_STATE_FACTORY_PROPERTY,DYNAMIC_GROUP_STATE_FACTORY);
  this.setProperty(DYNAMIC_GROUP_STATE_FACTORY_PROPERTY,stateFactory);
  ldapBindProps.setProperty(DYNAMIC_GROUP_STATE_FACTORY_PROPERTY,stateFactory);
  String bindDN=props.getProperty(PARAM_BINDDN);
  if (bindDN != null) {
    this.setProperty(PARAM_BINDDN,bindDN);
    ldapBindProps.setProperty(Context.SECURITY_PRINCIPAL,bindDN);
  }
  String bindPWD=props.getProperty(PARAM_BINDPWD);
  if (bindPWD != null) {
    try {
      bindPWD=RelativePathResolver.getRealPasswordFromAlias(bindPWD);
    }
 catch (    Exception ex) {
      _logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    this.setProperty(PARAM_BINDPWD,bindPWD);
    ldapBindProps.setProperty(Context.SECURITY_CREDENTIALS,bindPWD);
  }
  Enumeration penum=props.propertyNames();
  while (penum.hasMoreElements()) {
    String propName=(String)penum.nextElement();
    if (propName.startsWith(""String_Node_Str"") || propName.startsWith(""String_Node_Str"") || propName.startsWith(""String_Node_Str"")) {
      ldapBindProps.setProperty(propName,props.getProperty(propName));
    }
 else     if (propName.startsWith(SUN_JNDI_POOL_) && !SUN_JNDI_POOL_MAXSIZE.equals(propName)) {
      if (System.getProperty(propName) == null) {
        System.setProperty(propName,props.getProperty(propName));
      }
    }
  }
  String poolSize=Integer.getInteger(PARAM_POOLSIZE,POOLSIZE_DEFAULT).toString();
  String sunPoolSizeStr=props.getProperty(SUN_JNDI_POOL_MAXSIZE,poolSize);
  try {
    sunPoolSizeStr=Integer.valueOf(sunPoolSizeStr).toString();
  }
 catch (  Exception ex) {
    sunPoolSizeStr=poolSize;
  }
  if (System.getProperty(SUN_JNDI_POOL_MAXSIZE) == null) {
    System.setProperty(SUN_JNDI_POOL_MAXSIZE,sunPoolSizeStr);
  }
  this.setProperty(PARAM_POOLSIZE,sunPoolSizeStr);
  String usePool=props.getProperty(SUN_JNDI_POOL,""String_Node_Str"");
  ldapBindProps.setProperty(SUN_JNDI_POOL,usePool);
  if (url != null && url.startsWith(LDAPS_URL)) {
    ldapBindProps.setProperty(LDAP_SOCKET_FACTORY,DEFAULT_SSL_LDAP_SOCKET_FACTORY);
    if (System.getProperty(SUN_JNDI_POOL_PROTOCOL) == null) {
      System.setProperty(SUN_JNDI_POOL_PROTOCOL,DEFAULT_POOL_PROTOCOL);
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    Properties tempProps=(Properties)ldapBindProps.clone();
    tempProps.remove(Context.SECURITY_CREDENTIALS);
    _logger.log(Level.FINE,""String_Node_Str"" + tempProps);
  }
  groupCache=new HashMap();
  emptyVector=new Vector();
}","/** 
 * Initialize a realm with some properties.  This can be used when instantiating realms from their descriptions.  This method may only be called a single time.  
 * @param props Initialization parameters used by this realm.
 * @exception BadRealmException If the configuration parametersidentify a corrupt realm.
 * @exception NoSuchRealmException If the configuration parametersspecify a realm which doesn't exist.
 */
public synchronized void init(Properties props) throws BadRealmException, NoSuchRealmException {
  super.init(props);
  String url=props.getProperty(PARAM_DIRURL);
  String dn=props.getProperty(PARAM_USERDN);
  String jaasCtx=props.getProperty(IASRealm.JAAS_CONTEXT_PARAM);
  if (url == null || dn == null || jaasCtx == null) {
    String msg=sm.getString(""String_Node_Str"",url,dn,jaasCtx);
    throw new BadRealmException(msg);
  }
  this.setProperty(PARAM_DIRURL,url);
  ldapBindProps.setProperty(Context.PROVIDER_URL,url);
  this.setProperty(PARAM_USERDN,dn);
  this.setProperty(IASRealm.JAAS_CONTEXT_PARAM,jaasCtx);
  String mode=props.getProperty(PARAM_MODE,MODE_DEFAULT);
  if (!MODE_DEFAULT.equals(mode)) {
    String msg=sm.getString(""String_Node_Str"",mode);
    throw new BadRealmException(msg);
  }
  this.setProperty(PARAM_MODE,mode);
  String ctxF=props.getProperty(PARAM_JNDICF,JNDICF_DEFAULT);
  this.setProperty(PARAM_JNDICF,ctxF);
  ldapBindProps.setProperty(Context.INITIAL_CONTEXT_FACTORY,ctxF);
  String searchFilter=props.getProperty(PARAM_SEARCH_FILTER,SEARCH_FILTER_DEFAULT);
  this.setProperty(PARAM_SEARCH_FILTER,searchFilter);
  String grpDN=props.getProperty(PARAM_GRPDN,dn);
  this.setProperty(PARAM_GRPDN,grpDN);
  String grpSearchFilter=props.getProperty(PARAM_GRP_SEARCH_FILTER,GRP_SEARCH_FILTER_DEFAULT);
  this.setProperty(PARAM_GRP_SEARCH_FILTER,grpSearchFilter);
  String grpTarget=props.getProperty(PARAM_GRP_TARGET,GRP_TARGET_DEFAULT);
  this.setProperty(PARAM_GRP_TARGET,grpTarget);
  String objectFactory=props.getProperty(DYNAMIC_GROUP_FACTORY_OBJECT_PROPERTY,DYNAMIC_GROUP_OBJECT_FACTORY);
  this.setProperty(DYNAMIC_GROUP_FACTORY_OBJECT_PROPERTY,objectFactory);
  ldapBindProps.setProperty(DYNAMIC_GROUP_FACTORY_OBJECT_PROPERTY,objectFactory);
  String stateFactory=props.getProperty(DYNAMIC_GROUP_STATE_FACTORY_PROPERTY,DYNAMIC_GROUP_STATE_FACTORY);
  this.setProperty(DYNAMIC_GROUP_STATE_FACTORY_PROPERTY,stateFactory);
  ldapBindProps.setProperty(DYNAMIC_GROUP_STATE_FACTORY_PROPERTY,stateFactory);
  String bindDN=props.getProperty(PARAM_BINDDN);
  if (bindDN != null) {
    this.setProperty(PARAM_BINDDN,bindDN);
    ldapBindProps.setProperty(Context.SECURITY_PRINCIPAL,bindDN);
  }
  String bindPWD=props.getProperty(PARAM_BINDPWD);
  if (bindPWD != null) {
    try {
      bindPWD=RelativePathResolver.getRealPasswordFromAlias(bindPWD);
    }
 catch (    Exception ex) {
      _logger.log(Level.WARNING,""String_Node_Str"",ex);
    }
    this.setProperty(PARAM_BINDPWD,bindPWD);
    ldapBindProps.setProperty(Context.SECURITY_CREDENTIALS,bindPWD);
  }
  Enumeration penum=props.propertyNames();
  while (penum.hasMoreElements()) {
    String propName=(String)penum.nextElement();
    if (propName.startsWith(""String_Node_Str"") || propName.startsWith(""String_Node_Str"") || propName.startsWith(""String_Node_Str"")) {
      ldapBindProps.setProperty(propName,props.getProperty(propName));
    }
 else     if (propName.startsWith(SUN_JNDI_POOL_) && !SUN_JNDI_POOL_MAXSIZE.equals(propName)) {
      if (System.getProperty(propName) == null) {
        System.setProperty(propName,props.getProperty(propName));
      }
    }
  }
  String poolSize=Integer.getInteger(PARAM_POOLSIZE,POOLSIZE_DEFAULT).toString();
  String sunPoolSizeStr=props.getProperty(SUN_JNDI_POOL_MAXSIZE,poolSize);
  try {
    sunPoolSizeStr=Integer.valueOf(sunPoolSizeStr).toString();
  }
 catch (  Exception ex) {
    sunPoolSizeStr=poolSize;
  }
  if (System.getProperty(SUN_JNDI_POOL_MAXSIZE) == null) {
    System.setProperty(SUN_JNDI_POOL_MAXSIZE,sunPoolSizeStr);
  }
  this.setProperty(PARAM_POOLSIZE,sunPoolSizeStr);
  String usePool=props.getProperty(SUN_JNDI_POOL,""String_Node_Str"");
  ldapBindProps.setProperty(SUN_JNDI_POOL,usePool);
  if (url.startsWith(LDAPS_URL)) {
    ldapBindProps.setProperty(LDAP_SOCKET_FACTORY,DEFAULT_SSL_LDAP_SOCKET_FACTORY);
    if (System.getProperty(SUN_JNDI_POOL_PROTOCOL) == null) {
      System.setProperty(SUN_JNDI_POOL_PROTOCOL,DEFAULT_POOL_PROTOCOL);
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    Properties tempProps=(Properties)ldapBindProps.clone();
    tempProps.remove(Context.SECURITY_CREDENTIALS);
    _logger.log(Level.FINE,""String_Node_Str"" + tempProps);
  }
  groupCache=new HashMap();
  emptyVector=new Vector();
}"
30451,"/** 
 * Supports mode=find-bind. See class documentation.
 */
public String[] findAndBind(String _username,char[] _password) throws LoginException {
  StringBuffer sb=new StringBuffer(getProperty(PARAM_SEARCH_FILTER));
  substitute(sb,SUBST_SUBJECT_NAME,_username);
  String userid=sb.toString();
  DirContext ctx=null;
  String srcFilter=null;
  String[] grpList=null;
  try {
    ctx=new InitialDirContext(getLdapBindProps());
    String realUserDN=userSearch(ctx,getProperty(PARAM_USERDN),userid);
    if (realUserDN == null) {
      String msg=sm.getString(""String_Node_Str"",_username);
      throw new LoginException(msg);
    }
    boolean bindSuccessful=bindAsUser(realUserDN,_password);
    if (bindSuccessful == false) {
      String msg=sm.getString(""String_Node_Str"",realUserDN);
      throw new LoginException(msg);
    }
    sb=new StringBuffer(getProperty(PARAM_GRP_SEARCH_FILTER));
    substitute(sb,SUBST_SUBJECT_NAME,_username);
    substitute(sb,SUBST_SUBJECT_DN,realUserDN);
    srcFilter=sb.toString();
    ArrayList groupsList=new ArrayList();
    groupsList.addAll(groupSearch(ctx,getProperty(PARAM_GRPDN),srcFilter,getProperty(PARAM_GRP_TARGET)));
    groupsList.addAll(dynamicGroupSearch(ctx,getProperty(PARAM_GRPDN),getProperty(PARAM_GRP_TARGET),realUserDN));
    grpList=new String[groupsList.size()];
    groupsList.toArray(grpList);
  }
 catch (  Exception e) {
    LoginException le=new LoginException(e.toString());
    le.initCause(e);
    _logger.log(Level.SEVERE,""String_Node_Str"",le);
    throw le;
  }
 finally {
    if (ctx != null) {
      try {
        ctx.close();
      }
 catch (      NamingException e) {
      }
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + srcFilter);
    StringBuffer gb=new StringBuffer();
    gb.append(""String_Node_Str"");
    if (grpList != null) {
      for (int i=0; i < grpList.length; i++) {
        gb.append(""String_Node_Str"" + grpList[i]);
      }
    }
 else {
      gb.append(""String_Node_Str"");
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + gb.toString());
    }
  }
  grpList=addAssignGroups(grpList);
  grpList=this.addMappedGroupNames(grpList);
  setGroupNames(_username,grpList);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + _username);
  }
  return grpList;
}","/** 
 * Supports mode=find-bind. See class documentation.
 */
public String[] findAndBind(String _username,char[] _password) throws LoginException {
  StringBuffer sb=new StringBuffer(getProperty(PARAM_SEARCH_FILTER));
  substitute(sb,SUBST_SUBJECT_NAME,_username);
  String userid=sb.toString();
  DirContext ctx=null;
  String srcFilter=null;
  String[] grpList=null;
  try {
    ctx=new InitialDirContext(getLdapBindProps());
    String realUserDN=userSearch(ctx,getProperty(PARAM_USERDN),userid);
    if (realUserDN == null) {
      String msg=sm.getString(""String_Node_Str"",_username);
      throw new LoginException(msg);
    }
    boolean bindSuccessful=bindAsUser(realUserDN,_password);
    if (bindSuccessful == false) {
      String msg=sm.getString(""String_Node_Str"",realUserDN);
      throw new LoginException(msg);
    }
    sb=new StringBuffer(getProperty(PARAM_GRP_SEARCH_FILTER));
    substitute(sb,SUBST_SUBJECT_NAME,_username);
    substitute(sb,SUBST_SUBJECT_DN,realUserDN);
    srcFilter=sb.toString();
    ArrayList groupsList=new ArrayList();
    groupsList.addAll(groupSearch(ctx,getProperty(PARAM_GRPDN),srcFilter,getProperty(PARAM_GRP_TARGET)));
    groupsList.addAll(dynamicGroupSearch(ctx,getProperty(PARAM_GRPDN),getProperty(PARAM_GRP_TARGET),realUserDN));
    grpList=new String[groupsList.size()];
    groupsList.toArray(grpList);
  }
 catch (  Exception e) {
    LoginException le=new LoginException(e.toString());
    le.initCause(e);
    _logger.log(Level.SEVERE,""String_Node_Str"",le);
    throw le;
  }
 finally {
    if (ctx != null) {
      try {
        ctx.close();
      }
 catch (      NamingException e) {
      }
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + srcFilter);
    StringBuffer gb=new StringBuffer();
    gb.append(""String_Node_Str"");
    if (grpList.length > 0) {
      for (int i=0; i < grpList.length; i++) {
        gb.append(""String_Node_Str"" + grpList[i]);
      }
    }
 else {
      gb.append(""String_Node_Str"");
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + gb.toString());
    }
  }
  grpList=addAssignGroups(grpList);
  grpList=this.addMappedGroupNames(grpList);
  setGroupNames(_username,grpList);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + _username);
  }
  return grpList;
}"
30452,"public static void addIndex(Config c,Habitat habitat,String name){
  habitat.addIndex(new ExistingSingletonInhabitant<Config>(c),Config.class.getName(),ServerEnvironment.DEFAULT_INSTANCE_NAME);
  ConfigBeanProxy dirref[]={c.getAdminListener(),c.getAdminService(),c.getAlertService(),c.getAvailabilityService(),c.getConnectorService(),c.getDiagnosticService(),c.getEjbContainer(),c.getGroupManagementService(),c.getHttpService(),c.getIiopService(),c.getJavaConfig(),c.getJmsService(),c.getLogService(),c.getManagementRules(),c.getMdbContainer(),c.getMonitoringService(),c.getNetworkConfig(),c.getSecurityService(),c.getThreadPools(),c.getTransactionService(),c.getWebContainer()};
  for (  ConfigBeanProxy cbp : dirref) {
    if (cbp != null) {
      habitat.addIndex(new ExistingSingletonInhabitant<ConfigBeanProxy>(cbp),ConfigSupport.getImpl(cbp).getProxyType().getName(),ServerEnvironment.DEFAULT_INSTANCE_NAME);
    }
  }
  for (  Container extension : c.getContainers()) {
    habitat.addIndex(new ExistingSingletonInhabitant<Container>(extension),ConfigSupport.getImpl(extension).getProxyType().getName(),ServerEnvironment.DEFAULT_INSTANCE_NAME);
  }
}","public static void addIndex(Config c,Habitat habitat,String name){
  habitat.addIndex(new ExistingSingletonInhabitant<Config>(c),Config.class.getName(),ServerEnvironment.DEFAULT_INSTANCE_NAME);
  ConfigBeanProxy dirref[]={c.getAdminService(),c.getAlertService(),c.getAvailabilityService(),c.getConnectorService(),c.getDiagnosticService(),c.getEjbContainer(),c.getGroupManagementService(),c.getHttpService(),c.getIiopService(),c.getJavaConfig(),c.getJmsService(),c.getLogService(),c.getManagementRules(),c.getMdbContainer(),c.getMonitoringService(),c.getNetworkConfig(),c.getSecurityService(),c.getThreadPools(),c.getTransactionService(),c.getWebContainer()};
  for (  ConfigBeanProxy cbp : dirref) {
    if (cbp != null) {
      habitat.addIndex(new ExistingSingletonInhabitant<ConfigBeanProxy>(cbp),ConfigSupport.getImpl(cbp).getProxyType().getName(),ServerEnvironment.DEFAULT_INSTANCE_NAME);
    }
  }
  for (  Container extension : c.getContainers()) {
    habitat.addIndex(new ExistingSingletonInhabitant<Container>(extension),ConfigSupport.getImpl(extension).getProxyType().getName(),ServerEnvironment.DEFAULT_INSTANCE_NAME);
  }
}"
30453,"public boolean validate(HttpServletRequest request,String authorization,LoginConfig config){
  if (authorization == null) {
    return false;
  }
  if (!authorization.startsWith(""String_Node_Str"")) {
    return false;
  }
  authorization=authorization.substring(7).trim();
  String[] tokens=authorization.split(""String_Node_Str"");
  String opaque_client=null;
  for (int i=0; i < tokens.length; i++) {
    String currentToken=tokens[i];
    if (currentToken.length() == 0)     continue;
    int equalSign=currentToken.indexOf('=');
    if (equalSign < 0) {
      return false;
    }
    String currentTokenName=currentToken.substring(0,equalSign).trim();
    String currentTokenValue=currentToken.substring(equalSign + 1).trim();
    if (""String_Node_Str"".equals(currentTokenName))     userName=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     realmName=removeQuotes(currentTokenValue,true);
    if (""String_Node_Str"".equals(currentTokenName))     nonce=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     nc=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     cnonce=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     qop=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     uri=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     response=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     opaque_client=removeQuotes(currentTokenValue);
  }
  if ((userName == null) || (realmName == null) || (nonce == null)|| (uri == null)|| (response == null)) {
    return false;
  }
  if (validateUri) {
    String uriQuery;
    String query=request.getQueryString();
    if (query == null) {
      uriQuery=request.getRequestURI();
    }
 else {
      uriQuery=request.getRequestURI() + ""String_Node_Str"" + query;
    }
    if (!uri.equals(uriQuery)) {
      return false;
    }
  }
  String lcRealm=config.getRealmName();
  if (lcRealm == null) {
    lcRealm=REALM_NAME;
  }
  if (!lcRealm.equals(realmName)) {
    return false;
  }
  if (!this.opaque.equals(opaque_client)) {
    return false;
  }
  int i=nonce.indexOf(""String_Node_Str"");
  if (i < 0 || (i + 1) == nonce.length()) {
    return false;
  }
  long nOnceTime;
  try {
    nOnceTime=Long.parseLong(nonce.substring(0,i));
  }
 catch (  NumberFormatException nfe) {
    return false;
  }
  String md5clientIpTimeKey=nonce.substring(i + 1);
  long currentTime=System.currentTimeMillis();
  if ((currentTime - nOnceTime) > nonceValidity) {
    nonceStale=true;
    return false;
  }
  String serverIpTimeKey=request.getRemoteAddr() + ""String_Node_Str"" + nOnceTime+ ""String_Node_Str""+ key;
  byte[] buffer=digest(serverIpTimeKey.getBytes());
  String md5ServerIpTimeKey=new String(digestEncoder.encode(buffer));
  if (!md5ServerIpTimeKey.equals(md5clientIpTimeKey)) {
    return false;
  }
  if (qop != null && !QOP.equals(qop)) {
    return false;
  }
  if (qop == null) {
    if (cnonce != null || nc != null) {
      return false;
    }
  }
 else {
    if (cnonce == null || nc == null) {
      return false;
    }
    if (nc.length() != 8) {
      return false;
    }
    long count;
    try {
      count=Long.parseLong(nc,16);
    }
 catch (    NumberFormatException nfe) {
      return false;
    }
  }
  return true;
}","public boolean validate(HttpServletRequest request,String authorization,LoginConfig config){
  if (authorization == null) {
    return false;
  }
  if (!authorization.startsWith(""String_Node_Str"")) {
    return false;
  }
  authorization=authorization.substring(7).trim();
  String[] tokens=authorization.split(""String_Node_Str"");
  String opaque_client=null;
  for (int i=0; i < tokens.length; i++) {
    String currentToken=tokens[i];
    if (currentToken.length() == 0)     continue;
    int equalSign=currentToken.indexOf('=');
    if (equalSign < 0) {
      return false;
    }
    String currentTokenName=currentToken.substring(0,equalSign).trim();
    String currentTokenValue=currentToken.substring(equalSign + 1).trim();
    if (""String_Node_Str"".equals(currentTokenName))     userName=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     realmName=removeQuotes(currentTokenValue,true);
    if (""String_Node_Str"".equals(currentTokenName))     nonce=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     nc=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     cnonce=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     qop=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     uri=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     response=removeQuotes(currentTokenValue);
    if (""String_Node_Str"".equals(currentTokenName))     opaque_client=removeQuotes(currentTokenValue);
  }
  if ((userName == null) || (realmName == null) || (nonce == null)|| (uri == null)|| (response == null)) {
    return false;
  }
  if (validateUri) {
    String uriQuery;
    String query=request.getQueryString();
    if (query == null) {
      uriQuery=request.getRequestURI();
    }
 else {
      uriQuery=request.getRequestURI() + ""String_Node_Str"" + query;
    }
    if (!uri.equals(uriQuery)) {
      return false;
    }
  }
  String lcRealm=config.getRealmName();
  if (lcRealm == null) {
    lcRealm=REALM_NAME;
  }
  if (!lcRealm.equals(realmName)) {
    return false;
  }
  if (!this.opaque.equals(opaque_client)) {
    return false;
  }
  int i=nonce.indexOf(""String_Node_Str"");
  if (i < 0 || (i + 1) == nonce.length()) {
    return false;
  }
  long nOnceTime;
  try {
    nOnceTime=Long.parseLong(nonce.substring(0,i));
  }
 catch (  NumberFormatException nfe) {
    return false;
  }
  String md5clientIpTimeKey=nonce.substring(i + 1);
  long currentTime=System.currentTimeMillis();
  if ((currentTime - nOnceTime) > nonceValidity) {
    nonceStale=true;
    return false;
  }
  String serverIpTimeKey=request.getRemoteAddr() + ""String_Node_Str"" + nOnceTime+ ""String_Node_Str""+ key;
  byte[] buffer=digest(serverIpTimeKey.getBytes());
  String md5ServerIpTimeKey=new String(digestEncoder.encode(buffer));
  if (!md5ServerIpTimeKey.equals(md5clientIpTimeKey)) {
    return false;
  }
  if (qop != null && !QOP.equals(qop)) {
    return false;
  }
  if (qop == null) {
    if (cnonce != null || nc != null) {
      return false;
    }
  }
 else {
    if (cnonce == null || nc == null) {
      return false;
    }
    if (nc.length() != 8) {
      return false;
    }
    try {
      Long.parseLong(nc,16);
    }
 catch (    NumberFormatException nfe) {
      return false;
    }
  }
  return true;
}"
30454,"/** 
 * Add a repository to our internal array only.
 * @param repository The new repository
 * @exception IllegalArgumentException if the manifest of a JAR filecannot be processed correctly
 */
protected void addRepositoryInternal(String repository){
  URLStreamHandler streamHandler=null;
  String protocol=parseProtocol(repository);
  if (factory != null)   streamHandler=factory.createURLStreamHandler(protocol);
  if (!repository.endsWith(File.separator) && !repository.endsWith(""String_Node_Str"")) {
    JarFile jarFile=null;
    try {
      Manifest manifest=null;
      if (repository.startsWith(""String_Node_Str"")) {
        URL url=new URL(null,repository,streamHandler);
        JarURLConnection conn=(JarURLConnection)url.openConnection();
        conn.setAllowUserInteraction(false);
        conn.setDoInput(true);
        conn.setDoOutput(false);
        conn.connect();
        jarFile=conn.getJarFile();
      }
 else       if (repository.startsWith(""String_Node_Str"")) {
        jarFile=new JarFile(repository.substring(7));
      }
 else       if (repository.startsWith(""String_Node_Str"")) {
        jarFile=new JarFile(repository.substring(5));
      }
 else       if (repository.endsWith(""String_Node_Str"")) {
        URL url=new URL(null,repository,streamHandler);
        URLConnection conn=url.openConnection();
        JarInputStream jis=new JarInputStream(conn.getInputStream());
        try {
          manifest=jis.getManifest();
        }
  finally {
          try {
            jis.close();
          }
 catch (          Throwable t) {
          }
        }
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + repository + ""String_Node_Str"");
      }
    }
 catch (    Throwable t) {
      IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"");
      iae.initCause(t);
      throw iae;
    }
 finally {
      if (jarFile != null) {
        try {
          jarFile.close();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  repositories.add(repository);
}","/** 
 * Add a repository to our internal array only.
 * @param repository The new repository
 * @exception IllegalArgumentException if the manifest of a JAR filecannot be processed correctly
 */
protected void addRepositoryInternal(String repository){
  URLStreamHandler streamHandler=null;
  String protocol=parseProtocol(repository);
  if (factory != null)   streamHandler=factory.createURLStreamHandler(protocol);
  if (!repository.endsWith(File.separator) && !repository.endsWith(""String_Node_Str"")) {
    JarFile jarFile=null;
    try {
      if (repository.startsWith(""String_Node_Str"")) {
        URL url=new URL(null,repository,streamHandler);
        JarURLConnection conn=(JarURLConnection)url.openConnection();
        conn.setAllowUserInteraction(false);
        conn.setDoInput(true);
        conn.setDoOutput(false);
        conn.connect();
        jarFile=conn.getJarFile();
      }
 else       if (repository.startsWith(""String_Node_Str"")) {
        jarFile=new JarFile(repository.substring(7));
      }
 else       if (repository.startsWith(""String_Node_Str"")) {
        jarFile=new JarFile(repository.substring(5));
      }
 else       if (repository.endsWith(""String_Node_Str"")) {
        URL url=new URL(null,repository,streamHandler);
        URLConnection conn=url.openConnection();
        JarInputStream jis=new JarInputStream(conn.getInputStream());
        try {
          jis.getManifest();
        }
  finally {
          try {
            jis.close();
          }
 catch (          Throwable t) {
          }
        }
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + repository + ""String_Node_Str"");
      }
    }
 catch (    Throwable t) {
      IllegalArgumentException iae=new IllegalArgumentException(""String_Node_Str"");
      iae.initCause(t);
      throw iae;
    }
 finally {
      if (jarFile != null) {
        try {
          jarFile.close();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  repositories.add(repository);
}"
30455,"public void init(){
  initialized=true;
  if (oname == null) {
    if (container instanceof StandardContext) {
      try {
        StandardContext ctx=(StandardContext)container;
        String path=ctx.getEncodedPath();
        if (path.equals(""String_Node_Str"")) {
          path=""String_Node_Str"";
        }
        oname=new ObjectName(ctx.getEngineName() + ""String_Node_Str"" + path+ ""String_Node_Str""+ ctx.getParent().getName());
        controller=oname;
      }
 catch (      Exception e) {
        log.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
  }
  if (container == null) {
  }
}","public void init(){
  initialized=true;
  if (oname == null) {
    if (container instanceof StandardContext) {
      try {
        StandardContext ctx=(StandardContext)container;
        String path=ctx.getEncodedPath();
        if (path.equals(""String_Node_Str"")) {
          path=""String_Node_Str"";
        }
        oname=new ObjectName(ctx.getEngineName() + ""String_Node_Str"" + path+ ""String_Node_Str""+ ctx.getParent().getName());
        controller=oname;
      }
 catch (      Exception e) {
        log.log(Level.SEVERE,""String_Node_Str"",e);
      }
    }
  }
}"
30456,"/** 
 * MKCOL Method.
 */
protected void doMkcol(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (readOnly) {
    resp.sendError(WebdavStatus.SC_FORBIDDEN);
    return;
  }
  if (isLocked(req)) {
    resp.sendError(WebdavStatus.SC_LOCKED);
    return;
  }
  String path=getRelativePath(req);
  if (path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"") || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"")) {
    resp.sendError(WebdavStatus.SC_FORBIDDEN);
    return;
  }
  boolean exists=true;
  Object object=null;
  try {
    object=resources.lookup(path);
  }
 catch (  NamingException e) {
    exists=false;
  }
  if (exists) {
    StringBuilder methodsAllowed=determineMethodsAllowed(resources,req);
    resp.addHeader(""String_Node_Str"",methodsAllowed.toString());
    resp.sendError(WebdavStatus.SC_METHOD_NOT_ALLOWED);
    return;
  }
  if (req.getInputStream().available() > 0) {
    DocumentBuilder documentBuilder=getDocumentBuilder();
    try {
      Document document=documentBuilder.parse(new InputSource(req.getInputStream()));
      resp.sendError(WebdavStatus.SC_NOT_IMPLEMENTED);
      return;
    }
 catch (    SAXException saxe) {
      resp.sendError(WebdavStatus.SC_BAD_REQUEST);
      return;
    }
  }
  boolean result=true;
  try {
    resources.createSubcontext(path);
  }
 catch (  NamingException e) {
    result=false;
  }
  if (!result) {
    resp.sendError(WebdavStatus.SC_CONFLICT,WebdavStatus.getStatusText(WebdavStatus.SC_CONFLICT));
  }
 else {
    resp.setStatus(WebdavStatus.SC_CREATED);
    lockNullResources.remove(path);
  }
}","/** 
 * MKCOL Method.
 */
protected void doMkcol(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (readOnly) {
    resp.sendError(WebdavStatus.SC_FORBIDDEN);
    return;
  }
  if (isLocked(req)) {
    resp.sendError(WebdavStatus.SC_LOCKED);
    return;
  }
  String path=getRelativePath(req);
  if (path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"") || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"")) {
    resp.sendError(WebdavStatus.SC_FORBIDDEN);
    return;
  }
  boolean exists=true;
  try {
    resources.lookup(path);
  }
 catch (  NamingException e) {
    exists=false;
  }
  if (exists) {
    StringBuilder methodsAllowed=determineMethodsAllowed(resources,req);
    resp.addHeader(""String_Node_Str"",methodsAllowed.toString());
    resp.sendError(WebdavStatus.SC_METHOD_NOT_ALLOWED);
    return;
  }
  if (req.getInputStream().available() > 0) {
    DocumentBuilder documentBuilder=getDocumentBuilder();
    try {
      documentBuilder.parse(new InputSource(req.getInputStream()));
      resp.sendError(WebdavStatus.SC_NOT_IMPLEMENTED);
      return;
    }
 catch (    SAXException saxe) {
      resp.sendError(WebdavStatus.SC_BAD_REQUEST);
      return;
    }
  }
  boolean result=true;
  try {
    resources.createSubcontext(path);
  }
 catch (  NamingException e) {
    result=false;
  }
  if (!result) {
    resp.sendError(WebdavStatus.SC_CONFLICT,WebdavStatus.getStatusText(WebdavStatus.SC_CONFLICT));
  }
 else {
    resp.setStatus(WebdavStatus.SC_CREATED);
    lockNullResources.remove(path);
  }
}"
30457,"/** 
 * Return the random number generator instance we should use for generating session identifiers.  If there is no such generator currently defined, construct and seed a new one.
 */
public synchronized Random getRandom(){
  if (this.random == null) {
synchronized (this) {
      if (this.random == null) {
        long seed=System.currentTimeMillis();
        long t1=seed;
        char entropy[]=getEntropy().toCharArray();
        for (int i=0; i < entropy.length; i++) {
          long update=((byte)entropy[i]) << ((i % 8) * 8);
          seed^=update;
        }
        try {
          Class<?> clazz=Class.forName(randomClass);
          this.random=(Random)clazz.newInstance();
          this.random.setSeed(seed);
        }
 catch (        Exception e) {
          log.log(Level.SEVERE,sm.getString(""String_Node_Str"",randomClass),e);
          this.random=new java.util.Random();
          this.random.setSeed(seed);
        }
        long t2=System.currentTimeMillis();
        if ((t2 - t1) > 100)         if (log.isLoggable(Level.FINE)) {
          log.fine(sm.getString(""String_Node_Str"",randomClass) + ""String_Node_Str"" + (t2 - t1));
        }
      }
    }
  }
  return (this.random);
}","/** 
 * Return the random number generator instance we should use for generating session identifiers.  If there is no such generator currently defined, construct and seed a new one.
 */
public synchronized Random getRandom(){
  if (this.random == null) {
    long seed=System.currentTimeMillis();
    long t1=seed;
    char entropy[]=getEntropy().toCharArray();
    for (int i=0; i < entropy.length; i++) {
      long update=((byte)entropy[i]) << ((i % 8) * 8);
      seed^=update;
    }
    try {
      Class<?> clazz=Class.forName(randomClass);
      this.random=(Random)clazz.newInstance();
      this.random.setSeed(seed);
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,sm.getString(""String_Node_Str"",randomClass),e);
      this.random=new java.util.Random();
      this.random.setSeed(seed);
    }
    long t2=System.currentTimeMillis();
    if ((t2 - t1) > 100)     if (log.isLoggable(Level.FINE)) {
      log.fine(sm.getString(""String_Node_Str"",randomClass) + ""String_Node_Str"" + (t2 - t1));
    }
  }
  return (this.random);
}"
30458,"/** 
 * Gracefully terminate the active use of the public methods of this component.  This method should be the last one called on a given instance of this component.
 * @exception LifecycleException if this component detects a fatal errorthat needs to be reported
 */
public void stop() throws LifecycleException {
  if (log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"");
  if (!isStarted()) {
    if (log.isLoggable(Level.INFO)) {
      log.info(sm.getString(""String_Node_Str""));
    }
    return;
  }
  lifecycle.fireLifecycleEvent(STOP_EVENT,null);
  setStarted(false);
  if (getStore() != null && saveOnRestart) {
    unload();
  }
 else {
    Session sessions[]=findSessions();
    for (int i=0; i < sessions.length; i++) {
      StandardSession session=(StandardSession)sessions[i];
      if (!session.isValid())       continue;
      session.expire();
    }
  }
  if (getStore() != null && getStore() instanceof Lifecycle)   ((Lifecycle)getStore()).stop();
  this.random=null;
  if (initialized)   destroy();
}","/** 
 * Gracefully terminate the active use of the public methods of this component.  This method should be the last one called on a given instance of this component.
 * @exception LifecycleException if this component detects a fatal errorthat needs to be reported
 */
public void stop() throws LifecycleException {
  if (log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"");
  if (!isStarted()) {
    if (log.isLoggable(Level.INFO)) {
      log.info(sm.getString(""String_Node_Str""));
    }
    return;
  }
  lifecycle.fireLifecycleEvent(STOP_EVENT,null);
  setStarted(false);
  if (getStore() != null && saveOnRestart) {
    unload();
  }
 else {
    Session sessions[]=findSessions();
    for (int i=0; i < sessions.length; i++) {
      StandardSession session=(StandardSession)sessions[i];
      if (!session.isValid())       continue;
      session.expire();
    }
  }
  if (getStore() != null && getStore() instanceof Lifecycle)   ((Lifecycle)getStore()).stop();
  resetRandom();
  if (initialized)   destroy();
}"
30459,"/** 
 * Gracefully terminate the active use of the public methods of this component.  This method should be the last one called on a given instance of this component.
 * @param isShutdown true if this manager is being stopped as part of adomain shutdown (as opposed to an undeployment), and false otherwise
 * @exception LifecycleException if this component detects a fatal errorthat needs to be reported
 */
public void stop(boolean isShutdown) throws LifecycleException {
  if (log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"");
  if (!started)   throw new LifecycleException(sm.getString(""String_Node_Str""));
  lifecycle.fireLifecycleEvent(STOP_EVENT,null);
  started=false;
  try {
    unload(false,isShutdown);
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,sm.getString(""String_Node_Str""),e);
  }
  Session sessions[]=findSessions();
  if (sessions != null) {
    for (    Session session : sessions) {
      if (!session.isValid()) {
        continue;
      }
      try {
        session.expire();
      }
 catch (      Throwable t) {
      }
 finally {
        session.recycle();
      }
    }
  }
  this.random=null;
  if (initialized) {
    destroy();
  }
}","/** 
 * Gracefully terminate the active use of the public methods of this component.  This method should be the last one called on a given instance of this component.
 * @param isShutdown true if this manager is being stopped as part of adomain shutdown (as opposed to an undeployment), and false otherwise
 * @exception LifecycleException if this component detects a fatal errorthat needs to be reported
 */
public void stop(boolean isShutdown) throws LifecycleException {
  if (log.isLoggable(Level.FINE))   log.fine(""String_Node_Str"");
  if (!started)   throw new LifecycleException(sm.getString(""String_Node_Str""));
  lifecycle.fireLifecycleEvent(STOP_EVENT,null);
  started=false;
  try {
    unload(false,isShutdown);
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,sm.getString(""String_Node_Str""),e);
  }
  Session sessions[]=findSessions();
  if (sessions != null) {
    for (    Session session : sessions) {
      if (!session.isValid()) {
        continue;
      }
      try {
        session.expire();
      }
 catch (      Throwable t) {
      }
 finally {
        session.recycle();
      }
    }
  }
  resetRandom();
  if (initialized) {
    destroy();
  }
}"
30460,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  boolean isCluster=tgt.isCluster(target);
  logger.fine(""String_Node_Str"" + target);
  if (config != null && lbname != null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (config != null) {
    if (lbconfigs.getLbConfig(config) == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",config);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
 else   if (lbname != null) {
    LoadBalancer lb=domain.getLoadBalancers().getLoadBalancer(lbname);
    config=lb.getLbConfigName();
  }
  if (isCluster) {
    deleteClusterFromLBConfig(config,target);
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,config);
    logger.info(msg);
  }
 else   if (domain.isServer(target)) {
    deleteServerFromLBConfig(config,target);
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,config);
    logger.info(msg);
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  boolean isCluster=tgt.isCluster(target);
  logger.fine(""String_Node_Str"" + target);
  if (config != null && lbname != null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (config == null && lbname == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (config != null) {
    if (lbconfigs.getLbConfig(config) == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",config);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
 else   if (lbname != null) {
    LoadBalancer lb=domain.getLoadBalancers().getLoadBalancer(lbname);
    config=lb.getLbConfigName();
  }
  if (isCluster) {
    deleteClusterFromLBConfig(config,target);
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,config);
    logger.info(msg);
  }
 else   if (domain.isServer(target)) {
    deleteServerFromLBConfig(config,target);
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,config);
    logger.info(msg);
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}"
30461,"private void deleteServerFromLBConfig(String configName,String serverName){
  LbConfig lbConfig=lbconfigs.getLbConfig(configName);
  ServerRef sRef=lbConfig.getRefByRef(ServerRef.class,serverName);
  if (sRef == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    logger.finest(""String_Node_Str"" + serverName + ""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (!Boolean.parseBoolean(force)) {
    if (Boolean.parseBoolean(sRef.getLbEnabled())) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",serverName);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    Server s=domain.getServerNamed(serverName);
    if (s == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    List<ApplicationRef> appRefs=domain.getApplicationRefsInTarget(target);
    if (appRefs == null || appRefs.size() == 0) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    boolean appLbEnabled=false;
    for (    ApplicationRef aRef : appRefs) {
      if (Boolean.parseBoolean(aRef.getLbEnabled())) {
        appLbEnabled=true;
        break;
      }
    }
    if (appLbEnabled) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
  removeServerRef(lbConfig,sRef);
}","private void deleteServerFromLBConfig(String configName,String serverName){
  LbConfig lbConfig=lbconfigs.getLbConfig(configName);
  ServerRef sRef=lbConfig.getRefByRef(ServerRef.class,serverName);
  if (sRef == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    logger.finest(""String_Node_Str"" + serverName + ""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (!Boolean.parseBoolean(force)) {
    if (Boolean.parseBoolean(sRef.getLbEnabled())) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",serverName);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    Server s=domain.getServerNamed(serverName);
    if (s == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    List<ApplicationRef> appRefs=domain.getApplicationRefsInTarget(target);
    if (appRefs == null || appRefs.isEmpty()) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    boolean appLbEnabled=false;
    for (    ApplicationRef aRef : appRefs) {
      if (Boolean.parseBoolean(aRef.getLbEnabled())) {
        appLbEnabled=true;
        break;
      }
    }
    if (appLbEnabled) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
  removeServerRef(lbConfig,sRef);
}"
30462,"private void removeListener(String name){
  final String listenerName=name;
  try {
    NetworkListeners networkListeners=networkConfig.getNetworkListeners();
    final NetworkListener listenerToBeRemoved=networkConfig.getNetworkListener(name);
    final Protocols protocols=networkConfig.getProtocols();
    final Protocol protocol=networkConfig.findProtocol(name);
    if (listenerToBeRemoved == null) {
      log.severe(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      final com.sun.enterprise.config.serverbeans.VirtualServer virtualServer=httpService.getVirtualServerByName(listenerToBeRemoved.findHttpProtocol().getHttp().getDefaultVirtualServer());
      ConfigSupport.apply(new ConfigCode(){
        public Object run(        ConfigBeanProxy... params) throws PropertyVetoException {
          final NetworkListeners listeners=(NetworkListeners)params[0];
          final com.sun.enterprise.config.serverbeans.VirtualServer server=(com.sun.enterprise.config.serverbeans.VirtualServer)params[1];
          listeners.getNetworkListener().remove(listenerToBeRemoved);
          server.removeNetworkListener(listenerToBeRemoved.getName());
          return listenerToBeRemoved;
        }
      }
,networkListeners,virtualServer);
      ConfigSupport.apply(new ConfigCode(){
        public Object run(        ConfigBeanProxy... params) throws PropertyVetoException {
          final Protocols protocols=(Protocols)params[0];
          final Protocol protocol=(Protocol)params[1];
          protocols.getProtocol().remove(protocol);
          return protocol;
        }
      }
,protocols,protocol);
    }
  }
 catch (  TransactionFailure e) {
    log.severe(""String_Node_Str"" + name + ""String_Node_Str""+ e.getMessage());
  }
}","private void removeListener(String name){
  try {
    NetworkListeners networkListeners=networkConfig.getNetworkListeners();
    final NetworkListener listenerToBeRemoved=networkConfig.getNetworkListener(name);
    final Protocols protocols=networkConfig.getProtocols();
    final Protocol protocol=networkConfig.findProtocol(name);
    if (listenerToBeRemoved == null) {
      log.severe(""String_Node_Str"" + name + ""String_Node_Str"");
    }
 else {
      final com.sun.enterprise.config.serverbeans.VirtualServer virtualServer=httpService.getVirtualServerByName(listenerToBeRemoved.findHttpProtocol().getHttp().getDefaultVirtualServer());
      ConfigSupport.apply(new ConfigCode(){
        public Object run(        ConfigBeanProxy... params) throws PropertyVetoException {
          final NetworkListeners listeners=(NetworkListeners)params[0];
          final com.sun.enterprise.config.serverbeans.VirtualServer server=(com.sun.enterprise.config.serverbeans.VirtualServer)params[1];
          listeners.getNetworkListener().remove(listenerToBeRemoved);
          server.removeNetworkListener(listenerToBeRemoved.getName());
          return listenerToBeRemoved;
        }
      }
,networkListeners,virtualServer);
      ConfigSupport.apply(new ConfigCode(){
        public Object run(        ConfigBeanProxy... params) throws PropertyVetoException {
          final Protocols protocols=(Protocols)params[0];
          final Protocol protocol=(Protocol)params[1];
          protocols.getProtocol().remove(protocol);
          return protocol;
        }
      }
,protocols,protocol);
    }
  }
 catch (  TransactionFailure e) {
    log.severe(""String_Node_Str"" + name + ""String_Node_Str""+ e.getMessage());
  }
}"
30463,"/** 
 * Stops the given <tt>virtualServer</tt> and removes it from this <tt>WebContainer</tt>.
 * @param virtualServer the <tt>VirtualServer</tt> to be stoppedand removed
 * @throws GlassFishException if an error occurs during the stoppingor removal of the given <tt>virtualServer</tt>
 */
public void removeVirtualServer(VirtualServer virtualServer) throws GlassFishException {
  if (!initialized) {
    init();
  }
  engine.removeChild((Container)virtualServer);
}","/** 
 * Stops the given <tt>virtualServer</tt> and removes it from this <tt>WebContainer</tt>.
 * @param virtualServer the <tt>VirtualServer</tt> to be stoppedand removed
 * @throws GlassFishException if an error occurs during the stoppingor removal of the given <tt>virtualServer</tt>
 */
public void removeVirtualServer(VirtualServer virtualServer) throws GlassFishException {
  if (!initialized) {
    init();
  }
  if (virtualServer instanceof Container) {
    engine.removeChild((Container)virtualServer);
  }
 else   if (virtualServer instanceof VirtualServerFacade) {
    engine.removeChild(((VirtualServerFacade)virtualServer).getVirtualServer());
  }
}"
30464,"/** 
 * Adds the given <tt>VirtualServer</tt> to this <tt>WebContainer</tt>. <p>If this <tt>WebContainer</tt> has already been started, the given <tt>virtualServer</tt> will be started as well.
 * @param virtualServer the <tt>VirtualServer</tt> to add
 * @throws ConfigException if a <tt>VirtualServer</tt> with thesame id has already been registered with this <tt>WebContainer</tt>
 * @throws GlassFishException if the given <tt>virtualServer</tt> failsto be started
 */
public void addVirtualServer(VirtualServer virtualServer) throws ConfigException, GlassFishException {
  if (!initialized) {
    init();
  }
  if (log.isLoggable(Level.INFO)) {
    log.info(""String_Node_Str"" + virtualServer.getID());
  }
  com.sun.enterprise.web.VirtualServer vs=(com.sun.enterprise.web.VirtualServer)engine.findChild(virtualServer.getID());
  if (vs != null) {
    throw new ConfigException(""String_Node_Str"" + virtualServer.getID() + ""String_Node_Str"");
  }
  Collection<WebListener> webListeners=virtualServer.getWebListeners();
  List<String> names=new ArrayList<String>();
  if ((webListeners != null) && (!webListeners.isEmpty())) {
    for (    WebListener listener : webListeners) {
      names.add(listener.getId());
    }
  }
 else {
    for (    NetworkListener networkListener : networkConfig.getNetworkListeners().getNetworkListener()) {
      names.add(networkListener.getName());
    }
    webListeners=listeners;
  }
  StringBuffer networkListeners=new StringBuffer(""String_Node_Str"");
  if (names.size() > 0) {
    networkListeners.append(names.get(0));
  }
  for (int i=1; i < names.size(); i++) {
    networkListeners.append(""String_Node_Str"");
    networkListeners.append(names.get(i));
  }
  String docRoot=null;
  if (virtualServer.getDocRoot() != null) {
    docRoot=virtualServer.getDocRoot().getPath();
  }
  String hostName=null;
  if (virtualServer.getConfig() != null) {
    hostName=virtualServer.getConfig().getHostNames();
  }
  final String root=docRoot;
  final String nl=networkListeners.toString();
  final String id=virtualServer.getID();
  final String hosts=hostName;
  try {
    ConfigSupport.apply(new SingleConfigCode<HttpService>(){
      public Object run(      HttpService param) throws PropertyVetoException, TransactionFailure {
        com.sun.enterprise.config.serverbeans.VirtualServer newVirtualServer=param.createChild(com.sun.enterprise.config.serverbeans.VirtualServer.class);
        newVirtualServer.setId(id);
        newVirtualServer.setNetworkListeners(nl);
        if (hosts != null) {
          newVirtualServer.setHosts(hosts);
        }
        Property property=newVirtualServer.createChild(Property.class);
        property.setName(""String_Node_Str"");
        property.setValue(root);
        newVirtualServer.getProperty().add(property);
        param.getVirtualServer().add(newVirtualServer);
        return newVirtualServer;
      }
    }
,httpService);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  if ((webListeners != null) && (!webListeners.isEmpty())) {
    for (    WebListener listener : webListeners) {
      if (getWebListener(listener.getId()) == null) {
        addWebListener(listener,virtualServer.getID());
      }
    }
  }
  vs=(com.sun.enterprise.web.VirtualServer)engine.findChild(id);
  if (vs != null) {
    if (log.isLoggable(Level.INFO)) {
      log.info(""String_Node_Str"" + id + ""String_Node_Str""+ docRoot+ ""String_Node_Str""+ nl);
    }
    ((VirtualServerFacade)virtualServer).setVirtualSever(vs);
    vs.setNetworkListenerNames(names.toArray(new String[names.size()]));
  }
 else {
    log.severe(""String_Node_Str"" + id);
    throw new GlassFishException(new Exception(""String_Node_Str"" + id));
  }
}","/** 
 * Adds the given <tt>VirtualServer</tt> to this <tt>WebContainer</tt>. <p>If this <tt>WebContainer</tt> has already been started, the given <tt>virtualServer</tt> will be started as well.
 * @param virtualServer the <tt>VirtualServer</tt> to add
 * @throws ConfigException if a <tt>VirtualServer</tt> with thesame id has already been registered with this <tt>WebContainer</tt>
 * @throws GlassFishException if the given <tt>virtualServer</tt> failsto be started
 */
public void addVirtualServer(VirtualServer virtualServer) throws ConfigException, GlassFishException {
  if (!initialized) {
    init();
  }
  if (log.isLoggable(Level.INFO)) {
    log.info(""String_Node_Str"" + virtualServer.getID());
  }
  com.sun.enterprise.web.VirtualServer vs=(com.sun.enterprise.web.VirtualServer)engine.findChild(virtualServer.getID());
  if (vs != null) {
    throw new ConfigException(""String_Node_Str"" + virtualServer.getID() + ""String_Node_Str"");
  }
  Collection<WebListener> webListeners=virtualServer.getWebListeners();
  List<String> names=new ArrayList<String>();
  if ((webListeners != null) && (!webListeners.isEmpty())) {
    for (    WebListener listener : webListeners) {
      names.add(listener.getId());
    }
  }
 else {
    for (    NetworkListener networkListener : networkConfig.getNetworkListeners().getNetworkListener()) {
      names.add(networkListener.getName());
    }
    webListeners=listeners;
  }
  StringBuffer networkListeners=new StringBuffer(""String_Node_Str"");
  if (names.size() > 0) {
    networkListeners.append(names.get(0));
  }
  for (int i=1; i < names.size(); i++) {
    networkListeners.append(""String_Node_Str"");
    networkListeners.append(names.get(i));
  }
  String docRoot=null;
  if (virtualServer.getDocRoot() != null) {
    docRoot=virtualServer.getDocRoot().getPath();
  }
  String hostName=null;
  if (virtualServer.getConfig() != null) {
    hostName=virtualServer.getConfig().getHostNames();
  }
  final String root=docRoot;
  final String nl=networkListeners.toString();
  final String id=virtualServer.getID();
  final String hosts=hostName;
  try {
    ConfigSupport.apply(new SingleConfigCode<HttpService>(){
      public Object run(      HttpService param) throws PropertyVetoException, TransactionFailure {
        com.sun.enterprise.config.serverbeans.VirtualServer newVirtualServer=param.createChild(com.sun.enterprise.config.serverbeans.VirtualServer.class);
        newVirtualServer.setId(id);
        newVirtualServer.setNetworkListeners(nl);
        if (hosts != null) {
          newVirtualServer.setHosts(hosts);
        }
        Property property=newVirtualServer.createChild(Property.class);
        property.setName(""String_Node_Str"");
        property.setValue(root);
        newVirtualServer.getProperty().add(property);
        param.getVirtualServer().add(newVirtualServer);
        return newVirtualServer;
      }
    }
,httpService);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  if ((webListeners != null) && (!webListeners.isEmpty())) {
    for (    WebListener listener : webListeners) {
      if (getWebListener(listener.getId()) == null) {
        addWebListener(listener,virtualServer.getID());
      }
    }
  }
  vs=(com.sun.enterprise.web.VirtualServer)engine.findChild(id);
  if (vs != null) {
    if (log.isLoggable(Level.INFO)) {
      log.info(""String_Node_Str"" + id + ""String_Node_Str""+ docRoot+ ""String_Node_Str""+ nl);
    }
    if (virtualServer instanceof VirtualServerFacade) {
      ((VirtualServerFacade)virtualServer).setVirtualServer(vs);
    }
    vs.setNetworkListenerNames(names.toArray(new String[names.size()]));
  }
 else {
    log.severe(""String_Node_Str"" + id);
    throw new GlassFishException(new Exception(""String_Node_Str"" + id));
  }
}"
30465,"private void breakBlockAndStoreItems(final WorldServer w,final BlockPos pos,final List<ItemStack> items){
  w.setBlockToAir(pos);
  final AxisAlignedBB box=new AxisAlignedBB(pos.getX() - 0.2,pos.getY() - 0.2,pos.getZ() - 0.2,pos.getX() + 1.2,pos.getY() + 1.2,pos.getZ() + 1.2);
  for (  final Object ei : w.getEntitiesWithinAABB(EntityItem.class,box)) {
    if (ei instanceof EntityItem) {
      final EntityItem entityItem=(EntityItem)ei;
      this.storeEntityItem(entityItem);
    }
  }
  for (  final ItemStack snaggedItem : items) {
    final IAEItemStack overflow=this.storeItemStack(snaggedItem);
    this.spawnOverflow(overflow);
  }
}","private void breakBlockAndStoreItems(final WorldServer w,final BlockPos pos){
  w.destroyBlock(pos,true);
  final AxisAlignedBB box=new AxisAlignedBB(pos).grow(0.2);
  for (  final Object ei : w.getEntitiesWithinAABB(EntityItem.class,box)) {
    if (ei instanceof EntityItem) {
      final EntityItem entityItem=(EntityItem)ei;
      this.storeEntityItem(entityItem);
    }
  }
}"
30466,"private TickRateModulation breakBlock(final boolean modulate){
  if (this.isAccepting && this.getProxy().isActive()) {
    try {
      final TileEntity te=this.getTile();
      final WorldServer w=(WorldServer)te.getWorld();
      final BlockPos pos=te.getPos().offset(this.getSide().getFacing());
      final IEnergyGrid energy=this.getProxy().getEnergy();
      if (this.canHandleBlock(w,pos)) {
        final List<ItemStack> items=this.obtainBlockDrops(w,pos);
        final float requiredPower=this.calculateEnergyUsage(w,pos,items);
        final boolean hasPower=energy.extractAEPower(requiredPower,Actionable.SIMULATE,PowerMultiplier.CONFIG) > requiredPower - 0.1;
        final boolean canStore=this.canStoreItemStacks(items);
        if (hasPower && canStore) {
          if (modulate) {
            energy.extractAEPower(requiredPower,Actionable.MODULATE,PowerMultiplier.CONFIG);
            this.breakBlockAndStoreItems(w,pos,items);
            AppEng.proxy.sendToAllNearExcept(null,pos.getX(),pos.getY(),pos.getZ(),64,w,new PacketTransitionEffect(pos.getX(),pos.getY(),pos.getZ(),this.getSide(),true));
          }
 else {
            this.breaking=true;
            TickHandler.INSTANCE.addCallable(this.getTile().getWorld(),this);
          }
          return TickRateModulation.URGENT;
        }
      }
    }
 catch (    final GridAccessException e1) {
    }
  }
  return TickRateModulation.IDLE;
}","private TickRateModulation breakBlock(final boolean modulate){
  if (this.isAccepting && this.getProxy().isActive()) {
    try {
      final TileEntity te=this.getTile();
      final WorldServer w=(WorldServer)te.getWorld();
      final BlockPos pos=te.getPos().offset(this.getSide().getFacing());
      final IEnergyGrid energy=this.getProxy().getEnergy();
      if (this.canHandleBlock(w,pos)) {
        final List<ItemStack> items=this.obtainBlockDrops(w,pos);
        final float requiredPower=this.calculateEnergyUsage(w,pos,items);
        final boolean hasPower=energy.extractAEPower(requiredPower,Actionable.SIMULATE,PowerMultiplier.CONFIG) > requiredPower - 0.1;
        final boolean canStore=this.canStoreItemStacks(items);
        if (hasPower && canStore) {
          if (modulate) {
            energy.extractAEPower(requiredPower,Actionable.MODULATE,PowerMultiplier.CONFIG);
            this.breakBlockAndStoreItems(w,pos);
            AppEng.proxy.sendToAllNearExcept(null,pos.getX(),pos.getY(),pos.getZ(),64,w,new PacketTransitionEffect(pos.getX(),pos.getY(),pos.getZ(),this.getSide(),true));
          }
 else {
            this.breaking=true;
            TickHandler.INSTANCE.addCallable(this.getTile().getWorld(),this);
          }
          return TickRateModulation.URGENT;
        }
      }
    }
 catch (    final GridAccessException e1) {
    }
  }
  return TickRateModulation.IDLE;
}"
30467,"public static void postChanges(final IStorageGrid gs,final ItemStack removed,final ItemStack added,final IActionSource src){
  final IItemStorageChannel itemChannel=AEApi.instance().storage().getStorageChannel(IItemStorageChannel.class);
  final IFluidStorageChannel fluidChannel=AEApi.instance().storage().getStorageChannel(IFluidStorageChannel.class);
  final IItemList<IAEItemStack> itemChanges=itemChannel.createList();
  final IItemList<IAEFluidStack> fluidChanges=fluidChannel.createList();
  if (!removed.isEmpty()) {
    final IMEInventory<IAEItemStack> myItems=AEApi.instance().registries().cell().getCellInventory(removed,null,itemChannel);
    if (myItems != null) {
      for (      final IAEItemStack is : myItems.getAvailableItems(itemChanges)) {
        is.setStackSize(-is.getStackSize());
      }
    }
    final IMEInventory<IAEFluidStack> myFluids=AEApi.instance().registries().cell().getCellInventory(removed,null,fluidChannel);
    if (myFluids != null) {
      for (      final IAEFluidStack is : myFluids.getAvailableItems(fluidChanges)) {
        is.setStackSize(-is.getStackSize());
      }
    }
  }
  if (!added.isEmpty()) {
    final IMEInventory<IAEItemStack> myItems=AEApi.instance().registries().cell().getCellInventory(added,null,itemChannel);
    if (myItems != null) {
      myItems.getAvailableItems(itemChanges);
    }
    final IMEInventory<IAEFluidStack> myFluids=AEApi.instance().registries().cell().getCellInventory(added,null,fluidChannel);
    if (myFluids != null) {
      myFluids.getAvailableItems(fluidChanges);
    }
  }
  gs.postAlterationOfStoredItems(itemChannel,itemChanges,src);
}","public static void postChanges(final IStorageGrid gs,final ItemStack removed,final ItemStack added,final IActionSource src){
  final IItemStorageChannel itemChannel=AEApi.instance().storage().getStorageChannel(IItemStorageChannel.class);
  final IFluidStorageChannel fluidChannel=AEApi.instance().storage().getStorageChannel(IFluidStorageChannel.class);
  final IItemList<IAEItemStack> itemChanges=itemChannel.createList();
  final IItemList<IAEFluidStack> fluidChanges=fluidChannel.createList();
  if (!removed.isEmpty()) {
    final IMEInventory<IAEItemStack> myItems=AEApi.instance().registries().cell().getCellInventory(removed,null,itemChannel);
    if (myItems != null) {
      for (      final IAEItemStack is : myItems.getAvailableItems(itemChanges)) {
        is.setStackSize(-is.getStackSize());
      }
    }
    final IMEInventory<IAEFluidStack> myFluids=AEApi.instance().registries().cell().getCellInventory(removed,null,fluidChannel);
    if (myFluids != null) {
      for (      final IAEFluidStack is : myFluids.getAvailableItems(fluidChanges)) {
        is.setStackSize(-is.getStackSize());
      }
    }
  }
  if (!added.isEmpty()) {
    final IMEInventory<IAEItemStack> myItems=AEApi.instance().registries().cell().getCellInventory(added,null,itemChannel);
    if (myItems != null) {
      myItems.getAvailableItems(itemChanges);
    }
    final IMEInventory<IAEFluidStack> myFluids=AEApi.instance().registries().cell().getCellInventory(added,null,fluidChannel);
    if (myFluids != null) {
      myFluids.getAvailableItems(fluidChanges);
    }
  }
  gs.postAlterationOfStoredItems(itemChannel,itemChanges,src);
  gs.postAlterationOfStoredItems(fluidChannel,fluidChanges,src);
}"
30468,"@Override public boolean canTurn(){
  if (Platform.isClient()) {
    return false;
  }
  if (this.getStackInSlot(6).isEmpty()) {
    final IInventory src=new WrapperInventoryRange(this,this.inputs,true);
    for (int x=0; x < src.getSizeInventory(); x++) {
      ItemStack item=src.getStackInSlot(x);
      if (item.isEmpty()) {
        continue;
      }
      final IGrinderRecipe r=AEApi.instance().registries().grinder().getRecipeForInput(item);
      if (r != null) {
        if (item.getCount() >= r.getInput().getCount()) {
          item.grow(-r.getInput().getCount());
          final ItemStack ais=item.copy();
          ais.setCount(r.getInput().getCount());
          if (item.getCount() <= 0) {
            item=ItemStack.EMPTY;
          }
          src.setInventorySlotContents(x,item);
          this.setInventorySlotContents(6,ais);
          return true;
        }
      }
    }
    return false;
  }
  return true;
}","@Override public boolean canTurn(){
  if (Platform.isClient()) {
    return false;
  }
  if (this.getStackInSlot(6).isEmpty()) {
    final IInventory src=new WrapperInventoryRange(this,this.inputs,true);
    for (int x=0; x < src.getSizeInventory(); x++) {
      ItemStack item=src.getStackInSlot(x);
      if (item.isEmpty()) {
        continue;
      }
      final IGrinderRecipe r=AEApi.instance().registries().grinder().getRecipeForInput(item);
      if (r != null) {
        if (item.getCount() >= r.getInput().getCount()) {
          final ItemStack ais=item.copy();
          ais.setCount(r.getInput().getCount());
          item.shrink(r.getInput().getCount());
          if (item.getCount() <= 0) {
            item=ItemStack.EMPTY;
          }
          src.setInventorySlotContents(x,item);
          this.setInventorySlotContents(6,ais);
          return true;
        }
      }
    }
    return false;
  }
  return true;
}"
30469,"public void craftOrGetItem(final PacketPatternSlot packetPatternSlot){
  if (packetPatternSlot.slotItem != null && this.getCellInventory() != null) {
    final IAEItemStack out=packetPatternSlot.slotItem.copy();
    InventoryAdaptor inv=new AdaptorPlayerHand(this.getPlayerInv().player);
    final InventoryAdaptor playerInv=InventoryAdaptor.getAdaptor(this.getPlayerInv().player,EnumFacing.UP);
    if (packetPatternSlot.shift) {
      inv=playerInv;
    }
    if (!inv.simulateAdd(out.getItemStack()).isEmpty()) {
      return;
    }
    final IAEItemStack extracted=Platform.poweredExtraction(this.getPowerSource(),this.getCellInventory(),out,this.getActionSource());
    final EntityPlayer p=this.getPlayerInv().player;
    if (extracted != null) {
      inv.addItems(extracted.getItemStack());
      if (p instanceof EntityPlayerMP) {
        this.updateHeld((EntityPlayerMP)p);
      }
      this.detectAndSendChanges();
      return;
    }
    final InventoryCrafting ic=new InventoryCrafting(new ContainerNull(),3,3);
    final InventoryCrafting real=new InventoryCrafting(new ContainerNull(),3,3);
    for (int x=0; x < 9; x++) {
      ic.setInventorySlotContents(x,packetPatternSlot.pattern[x] == null ? ItemStack.EMPTY : packetPatternSlot.pattern[x].getItemStack());
    }
    final IRecipe r=Platform.findMatchingRecipe(ic,p.world);
    if (r == null) {
      return;
    }
    final IMEMonitor<IAEItemStack> storage=this.getPatternTerminal().getItemInventory();
    final IItemList<IAEItemStack> all=storage.getStorageList();
    final ItemStack is=r.getCraftingResult(ic);
    for (int x=0; x < ic.getSizeInventory(); x++) {
      if (!ic.getStackInSlot(x).isEmpty()) {
        final ItemStack pulled=Platform.extractItemsByRecipe(this.getPowerSource(),this.getActionSource(),storage,p.world,r,is,ic,ic.getStackInSlot(x),x,all,Actionable.MODULATE,ItemViewCell.createFilter(this.getViewCells()));
        real.setInventorySlotContents(x,pulled);
      }
    }
    final IRecipe rr=Platform.findMatchingRecipe(real,p.world);
    if (rr == r && Platform.itemComparisons().isSameItem(rr.getCraftingResult(real),is)) {
      final SlotCrafting sc=new SlotCrafting(p,real,this.cOut,0,0,0);
      sc.onTake(p,is);
      for (int x=0; x < real.getSizeInventory(); x++) {
        final ItemStack failed=playerInv.addItems(real.getStackInSlot(x));
        if (!failed.isEmpty()) {
          p.dropItem(failed,false);
        }
      }
      inv.addItems(is);
      if (p instanceof EntityPlayerMP) {
        this.updateHeld((EntityPlayerMP)p);
      }
      this.detectAndSendChanges();
    }
 else {
      for (int x=0; x < real.getSizeInventory(); x++) {
        final ItemStack failed=real.getStackInSlot(x);
        if (!failed.isEmpty()) {
          this.getCellInventory().injectItems(AEItemStack.create(failed),Actionable.MODULATE,new MachineSource(this.getPatternTerminal()));
        }
      }
    }
  }
}","public void craftOrGetItem(final PacketPatternSlot packetPatternSlot){
  if (packetPatternSlot.slotItem != null && this.getCellInventory() != null) {
    final IAEItemStack out=packetPatternSlot.slotItem.copy();
    InventoryAdaptor inv=new AdaptorPlayerHand(this.getPlayerInv().player);
    final InventoryAdaptor playerInv=InventoryAdaptor.getAdaptor(this.getPlayerInv().player,EnumFacing.UP);
    if (packetPatternSlot.shift) {
      inv=playerInv;
    }
    if (!inv.simulateAdd(out.getItemStack()).isEmpty()) {
      return;
    }
    final IAEItemStack extracted=Platform.poweredExtraction(this.getPowerSource(),this.getCellInventory(),out,this.getActionSource());
    final EntityPlayer p=this.getPlayerInv().player;
    if (extracted != null) {
      inv.addItems(extracted.getItemStack());
      if (p instanceof EntityPlayerMP) {
        this.updateHeld((EntityPlayerMP)p);
      }
      this.detectAndSendChanges();
      return;
    }
    final InventoryCrafting ic=new InventoryCrafting(new ContainerNull(),3,3);
    final InventoryCrafting real=new InventoryCrafting(new ContainerNull(),3,3);
    for (int x=0; x < 9; x++) {
      ic.setInventorySlotContents(x,packetPatternSlot.pattern[x] == null ? ItemStack.EMPTY : packetPatternSlot.pattern[x].getItemStack());
    }
    final IRecipe r=Platform.findMatchingRecipe(ic,p.world);
    if (r == null) {
      return;
    }
    final IMEMonitor<IAEItemStack> storage=this.getPatternTerminal().getItemInventory();
    final IItemList<IAEItemStack> all=storage.getStorageList();
    final ItemStack is=r.getCraftingResult(ic);
    for (int x=0; x < ic.getSizeInventory(); x++) {
      if (!ic.getStackInSlot(x).isEmpty()) {
        final ItemStack pulled=Platform.extractItemsByRecipe(this.getPowerSource(),this.getActionSource(),storage,p.world,r,is,ic,ic.getStackInSlot(x),x,all,Actionable.MODULATE,ItemViewCell.createFilter(this.getViewCells()));
        real.setInventorySlotContents(x,pulled);
      }
    }
    final IRecipe rr=Platform.findMatchingRecipe(real,p.world);
    if (rr == r && Platform.itemComparisons().isSameItem(rr.getCraftingResult(real),is)) {
      final InventoryCraftResult craftingResult=new InventoryCraftResult();
      craftingResult.setRecipeUsed(rr);
      final SlotCrafting sc=new SlotCrafting(p,real,craftingResult,0,0,0);
      sc.onTake(p,is);
      for (int x=0; x < real.getSizeInventory(); x++) {
        final ItemStack failed=playerInv.addItems(real.getStackInSlot(x));
        if (!failed.isEmpty()) {
          p.dropItem(failed,false);
        }
      }
      inv.addItems(is);
      if (p instanceof EntityPlayerMP) {
        this.updateHeld((EntityPlayerMP)p);
      }
      this.detectAndSendChanges();
    }
 else {
      for (int x=0; x < real.getSizeInventory(); x++) {
        final ItemStack failed=real.getStackInSlot(x);
        if (!failed.isEmpty()) {
          this.getCellInventory().injectItems(AEItemStack.create(failed),Actionable.MODULATE,new MachineSource(this.getPatternTerminal()));
        }
      }
    }
  }
}"
30470,"@Override protected final void drawGuiContainerBackgroundLayer(final float f,final int x,final int y){
  final int ox=this.guiLeft;
  final int oy=this.guiTop;
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  this.drawBG(ox,oy,x,y);
  final List<Slot> slots=this.getInventorySlots();
  for (  final Slot slot : slots) {
    if (slot instanceof OptionalSlotFake) {
      final OptionalSlotFake fs=(OptionalSlotFake)slot;
      if (fs.renderDisabled()) {
        if (fs.isEnabled()) {
          this.drawTexturedModalRect(ox + fs.xPos - 1,oy + fs.yPos - 1,fs.getSourceX() - 1,fs.getSourceY() - 1,18,18);
        }
 else {
          GlStateManager.color(1.0F,1.0F,1.0F,0.4F);
          GlStateManager.enableBlend();
          this.drawTexturedModalRect(ox + fs.xPos - 1,oy + fs.yPos - 1,fs.getSourceX() - 1,fs.getSourceY() - 1,18,18);
          GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
        }
      }
    }
  }
}","@Override protected final void drawGuiContainerBackgroundLayer(final float f,final int x,final int y){
  final int ox=this.guiLeft;
  final int oy=this.guiTop;
  GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
  this.drawBG(ox,oy,x,y);
  final List<Slot> slots=this.getInventorySlots();
  for (  final Slot slot : slots) {
    if (slot instanceof OptionalSlotFake) {
      final OptionalSlotFake fs=(OptionalSlotFake)slot;
      if (fs.renderDisabled()) {
        if (fs.isSlotEnabled()) {
          this.drawTexturedModalRect(ox + fs.xPos - 1,oy + fs.yPos - 1,fs.getSourceX() - 1,fs.getSourceY() - 1,18,18);
        }
 else {
          GlStateManager.color(1.0F,1.0F,1.0F,0.4F);
          GlStateManager.enableBlend();
          this.drawTexturedModalRect(ox + fs.xPos - 1,oy + fs.yPos - 1,fs.getSourceX() - 1,fs.getSourceY() - 1,18,18);
          GlStateManager.color(1.0F,1.0F,1.0F,1.0F);
        }
      }
    }
  }
}"
30471,"@Override public void detectAndSendChanges(){
  this.verifyPermissions(SecurityPermissions.BUILD,false);
  if (Platform.isServer()) {
    final IConfigManager cm=this.getUpgradeable().getConfigManager();
    this.loadSettingsFromHost(cm);
  }
  this.checkToolbox();
  for (  final Object o : this.inventorySlots) {
    if (o instanceof OptionalSlotFake) {
      final OptionalSlotFake fs=(OptionalSlotFake)o;
      if (!fs.isEnabled() && !fs.getDisplayStack().isEmpty()) {
        fs.clearStack();
      }
    }
  }
  this.standardDetectAndSendChanges();
}","@Override public void detectAndSendChanges(){
  this.verifyPermissions(SecurityPermissions.BUILD,false);
  if (Platform.isServer()) {
    final IConfigManager cm=this.getUpgradeable().getConfigManager();
    this.loadSettingsFromHost(cm);
  }
  this.checkToolbox();
  for (  final Object o : this.inventorySlots) {
    if (o instanceof OptionalSlotFake) {
      final OptionalSlotFake fs=(OptionalSlotFake)o;
      if (!fs.isSlotEnabled() && !fs.getDisplayStack().isEmpty()) {
        fs.clearStack();
      }
    }
  }
  this.standardDetectAndSendChanges();
}"
30472,"@Override public boolean isItemValid(final ItemStack par1ItemStack){
  if (this.isEnabled()) {
    return super.isItemValid(par1ItemStack);
  }
  return false;
}","@Override public boolean isItemValid(final ItemStack par1ItemStack){
  if (this.isSlotEnabled()) {
    return super.isItemValid(par1ItemStack);
  }
  return false;
}"
30473,"@Override public void putStack(final ItemStack par1ItemStack){
  if (this.isEnabled()) {
    super.putStack(par1ItemStack);
    if (this.getContainer() != null) {
      this.getContainer().onSlotChange(this);
    }
  }
}","@Override public void putStack(final ItemStack par1ItemStack){
  if (this.isSlotEnabled()) {
    super.putStack(par1ItemStack);
    if (this.getContainer() != null) {
      this.getContainer().onSlotChange(this);
    }
  }
}"
30474,"@Override public boolean canTakeStack(final EntityPlayer par1EntityPlayer){
  if (this.isEnabled()) {
    return super.canTakeStack(par1EntityPlayer);
  }
  return false;
}","@Override public boolean canTakeStack(final EntityPlayer par1EntityPlayer){
  if (this.isSlotEnabled()) {
    return super.canTakeStack(par1EntityPlayer);
  }
  return false;
}"
30475,"@Override public boolean isEnabled(){
  return super.isEnabled();
}","@Override @SideOnly(Side.CLIENT) public boolean isEnabled(){
  return super.isEnabled();
}"
30476,"@Override @Nonnull public ItemStack getStack(){
  if (!this.isEnabled()) {
    return ItemStack.EMPTY;
  }
  if (this.inventory.getSizeInventory() <= this.getSlotIndex()) {
    return ItemStack.EMPTY;
  }
  if (this.isDisplay()) {
    this.setDisplay(false);
    return this.getDisplayStack();
  }
  return super.getStack();
}","@Override @Nonnull public ItemStack getStack(){
  if (!this.isSlotEnabled()) {
    return ItemStack.EMPTY;
  }
  if (this.inventory.getSizeInventory() <= this.getSlotIndex()) {
    return ItemStack.EMPTY;
  }
  if (this.isDisplay()) {
    this.setDisplay(false);
    return this.getDisplayStack();
  }
  return super.getStack();
}"
30477,"public boolean shouldDisplay(){
  return this.isEnabled();
}","public boolean shouldDisplay(){
  return this.isSlotEnabled();
}"
30478,"@Override @Nonnull public ItemStack getStack(){
  if (!this.isEnabled()) {
    if (!this.getDisplayStack().isEmpty()) {
      this.clearStack();
    }
  }
  return super.getStack();
}","@Override @Nonnull public ItemStack getStack(){
  if (!this.isSlotEnabled()) {
    if (!this.getDisplayStack().isEmpty()) {
      this.clearStack();
    }
  }
  return super.getStack();
}"
30479,"@Override public boolean shouldDisplay(){
  return super.isEnabled();
}","@Override public boolean shouldDisplay(){
  return super.isSlotEnabled();
}"
30480,"@Override public ItemStack getStack(){
  if (!this.isEnabled()) {
    if (!this.getDisplayStack().isEmpty()) {
      this.clearStack();
    }
  }
  return super.getStack();
}","@Override public ItemStack getStack(){
  if (!this.isSlotEnabled()) {
    if (!this.getDisplayStack().isEmpty()) {
      this.clearStack();
    }
  }
  return super.getStack();
}"
30481,"public boolean spawnMeteorite(final IMeteoriteWorld w,final int x,final int y,final int z){
  if (!w.hasSkyLight()) {
    return false;
  }
  Block blk=w.getBlock(x,y,z);
  if (!this.validSpawn.contains(blk)) {
    return false;
  }
  this.settings=new NBTTagCompound();
  this.settings.setInteger(""String_Node_Str"",x);
  this.settings.setInteger(""String_Node_Str"",y);
  this.settings.setInteger(""String_Node_Str"",z);
  this.settings.setInteger(""String_Node_Str"",Block.getIdFromBlock(blk));
  this.settings.setDouble(""String_Node_Str"",this.meteoriteSize);
  this.settings.setDouble(""String_Node_Str"",this.realCrater);
  this.settings.setDouble(""String_Node_Str"",this.squaredMeteoriteSize);
  this.settings.setDouble(""String_Node_Str"",this.crater);
  this.settings.setBoolean(""String_Node_Str"",Math.random() > 0.9);
  if (blk == Blocks.SAND) {
    this.type=new FalloutSand(w,x,y,z,this.putter,this.skyStoneDefinition);
  }
 else   if (blk == Blocks.HARDENED_CLAY) {
    this.type=new FalloutCopy(w,x,y,z,this.putter,this.skyStoneDefinition);
  }
 else   if (blk == Blocks.ICE || blk == Blocks.SNOW) {
    this.type=new FalloutSnow(w,x,y,z,this.putter,this.skyStoneDefinition);
  }
  int realValidBlocks=0;
  for (int i=x - 6; i < x + 6; i++) {
    for (int j=y - 6; j < y + 6; j++) {
      for (int k=z - 6; k < z + 6; k++) {
        blk=w.getBlock(i,j,k);
        if (this.validSpawn.contains(blk)) {
          realValidBlocks++;
        }
      }
    }
  }
  int validBlocks=0;
  for (int i=x - 15; i < x + 15; i++) {
    for (int j=y - 15; j < y + 15; j++) {
      for (int k=z - 15; k < z + 15; k++) {
        blk=w.getBlock(i,j,k);
        if (this.invalidSpawn.contains(blk)) {
          return false;
        }
        if (this.validSpawn.contains(blk)) {
          validBlocks++;
        }
      }
    }
  }
  final int minBlocks=200;
  if (validBlocks > minBlocks && realValidBlocks > 80) {
    int skyMode=0;
    for (int i=x - 15; i < x + 15; i++) {
      for (int j=y - 15; j < y + 11; j++) {
        for (int k=z - 15; k < z + 15; k++) {
          if (w.canBlockSeeTheSky(i,j,k)) {
            skyMode++;
          }
        }
      }
    }
    boolean solid=true;
    for (int j=y - 15; j < y - 1; j++) {
      if (w.getBlock(x,j,z) == Platform.AIR_BLOCK) {
        solid=false;
      }
    }
    if (!solid) {
      skyMode=0;
    }
    if (skyMode > 10) {
      this.placeCrater(w,x,y,z);
    }
    this.placeMeteorite(w,x,y,z);
    if (skyMode > 3) {
      this.decay(w,x,y,z);
    }
    this.settings.setInteger(""String_Node_Str"",skyMode);
    w.done();
    WorldData.instance().spawnData().addNearByMeteorites(w.getWorld().provider.getDimension(),x >> 4,z >> 4,this.settings);
    return true;
  }
  return false;
}","public boolean spawnMeteorite(final IMeteoriteWorld w,final int x,final int y,final int z){
  if (!w.isNether()) {
    return false;
  }
  Block blk=w.getBlock(x,y,z);
  if (!this.validSpawn.contains(blk)) {
    return false;
  }
  this.settings=new NBTTagCompound();
  this.settings.setInteger(""String_Node_Str"",x);
  this.settings.setInteger(""String_Node_Str"",y);
  this.settings.setInteger(""String_Node_Str"",z);
  this.settings.setInteger(""String_Node_Str"",Block.getIdFromBlock(blk));
  this.settings.setDouble(""String_Node_Str"",this.meteoriteSize);
  this.settings.setDouble(""String_Node_Str"",this.realCrater);
  this.settings.setDouble(""String_Node_Str"",this.squaredMeteoriteSize);
  this.settings.setDouble(""String_Node_Str"",this.crater);
  this.settings.setBoolean(""String_Node_Str"",Math.random() > 0.9);
  if (blk == Blocks.SAND) {
    this.type=new FalloutSand(w,x,y,z,this.putter,this.skyStoneDefinition);
  }
 else   if (blk == Blocks.HARDENED_CLAY) {
    this.type=new FalloutCopy(w,x,y,z,this.putter,this.skyStoneDefinition);
  }
 else   if (blk == Blocks.ICE || blk == Blocks.SNOW) {
    this.type=new FalloutSnow(w,x,y,z,this.putter,this.skyStoneDefinition);
  }
  int realValidBlocks=0;
  for (int i=x - 6; i < x + 6; i++) {
    for (int j=y - 6; j < y + 6; j++) {
      for (int k=z - 6; k < z + 6; k++) {
        blk=w.getBlock(i,j,k);
        if (this.validSpawn.contains(blk)) {
          realValidBlocks++;
        }
      }
    }
  }
  int validBlocks=0;
  for (int i=x - 15; i < x + 15; i++) {
    for (int j=y - 15; j < y + 15; j++) {
      for (int k=z - 15; k < z + 15; k++) {
        blk=w.getBlock(i,j,k);
        if (this.invalidSpawn.contains(blk)) {
          return false;
        }
        if (this.validSpawn.contains(blk)) {
          validBlocks++;
        }
      }
    }
  }
  final int minBlocks=200;
  if (validBlocks > minBlocks && realValidBlocks > 80) {
    int skyMode=0;
    for (int i=x - 15; i < x + 15; i++) {
      for (int j=y - 15; j < y + 11; j++) {
        for (int k=z - 15; k < z + 15; k++) {
          if (w.canBlockSeeTheSky(i,j,k)) {
            skyMode++;
          }
        }
      }
    }
    boolean solid=true;
    for (int j=y - 15; j < y - 1; j++) {
      if (w.getBlock(x,j,z) == Platform.AIR_BLOCK) {
        solid=false;
      }
    }
    if (!solid) {
      skyMode=0;
    }
    if (skyMode > 10) {
      this.placeCrater(w,x,y,z);
    }
    this.placeMeteorite(w,x,y,z);
    if (skyMode > 3) {
      this.decay(w,x,y,z);
    }
    this.settings.setInteger(""String_Node_Str"",skyMode);
    w.done();
    WorldData.instance().spawnData().addNearByMeteorites(w.getWorld().provider.getDimension(),x >> 4,z >> 4,this.settings);
    return true;
  }
  return false;
}"
30482,"@Override public SelectedPart selectPart(final Vec3d pos){
  for (  final AEPartLocation side : AEPartLocation.values()) {
    final IPart p=this.getPart(side);
    if (p != null) {
      final List<AxisAlignedBB> boxes=new LinkedList<AxisAlignedBB>();
      final IPartCollisionHelper bch=new BusCollisionHelper(boxes,side,null,true);
      p.getBoxes(bch);
      for (      AxisAlignedBB bb : boxes) {
        bb=bb.expand(0.002,0.002,0.002);
        if (bb.contains(pos)) {
          return new SelectedPart(p,side);
        }
      }
    }
  }
  if (AEApi.instance().partHelper().getCableRenderMode().opaqueFacades) {
    final IFacadeContainer fc=this.getFacadeContainer();
    for (    final AEPartLocation side : AEPartLocation.SIDE_LOCATIONS) {
      final IFacadePart p=fc.getFacade(side);
      if (p != null) {
        final List<AxisAlignedBB> boxes=new LinkedList<AxisAlignedBB>();
        final IPartCollisionHelper bch=new BusCollisionHelper(boxes,side,null,true);
        p.getBoxes(bch,null);
        for (        AxisAlignedBB bb : boxes) {
          bb=bb.expand(0.01,0.01,0.01);
          if (bb.contains(pos)) {
            return new SelectedPart(p,side);
          }
        }
      }
    }
  }
  return new SelectedPart();
}","@Override public SelectedPart selectPart(final Vec3d pos){
  for (  final AEPartLocation side : AEPartLocation.values()) {
    final IPart p=this.getPart(side);
    if (p != null) {
      final List<AxisAlignedBB> boxes=new LinkedList<AxisAlignedBB>();
      final IPartCollisionHelper bch=new BusCollisionHelper(boxes,side,null,true);
      p.getBoxes(bch);
      for (      AxisAlignedBB bb : boxes) {
        bb=bb.grow(0.002,0.002,0.002);
        if (bb.contains(pos)) {
          return new SelectedPart(p,side);
        }
      }
    }
  }
  if (AEApi.instance().partHelper().getCableRenderMode().opaqueFacades) {
    final IFacadeContainer fc=this.getFacadeContainer();
    for (    final AEPartLocation side : AEPartLocation.SIDE_LOCATIONS) {
      final IFacadePart p=fc.getFacade(side);
      if (p != null) {
        final List<AxisAlignedBB> boxes=new LinkedList<AxisAlignedBB>();
        final IPartCollisionHelper bch=new BusCollisionHelper(boxes,side,null,true);
        p.getBoxes(bch,null);
        for (        AxisAlignedBB bb : boxes) {
          bb=bb.grow(0.01,0.01,0.01);
          if (bb.contains(pos)) {
            return new SelectedPart(p,side);
          }
        }
      }
    }
  }
  return new SelectedPart();
}"
30483,"@Override public boolean onBlockActivated(final World w,final BlockPos pos,final IBlockState state,final EntityPlayer p,final EnumHand hand,final EnumFacing side,final float hitX,final float hitY,final float hitZ){
  final TileCraftingTile tg=this.getTileEntity(w,pos);
  if (tg != null && !p.isSneaking() && tg.isFormed() && tg.isActive()) {
    if (Platform.isClient()) {
      return true;
    }
    Platform.openGUI(p,tg,AEPartLocation.fromFacing(side),GuiBridge.GUI_CRAFTING_CPU);
    return true;
  }
  return super.onBlockActivated(w,pos,state,p,hand,heldItem,side,hitX,hitY,hitZ);
}","@Override public boolean onBlockActivated(final World w,final BlockPos pos,final IBlockState state,final EntityPlayer p,final EnumHand hand,final EnumFacing side,final float hitX,final float hitY,final float hitZ){
  final TileCraftingTile tg=this.getTileEntity(w,pos);
  if (tg != null && !p.isSneaking() && tg.isFormed() && tg.isActive()) {
    if (Platform.isClient()) {
      return true;
    }
    Platform.openGUI(p,tg,AEPartLocation.fromFacing(side),GuiBridge.GUI_CRAFTING_CPU);
    return true;
  }
  return super.onBlockActivated(w,pos,state,p,hand,side,hitX,hitY,hitZ);
}"
30484,"@Override public boolean onBlockActivated(final World w,final BlockPos pos,final IBlockState state,final EntityPlayer p,final EnumHand hand,final EnumFacing side,final float hitX,final float hitY,final float hitZ){
  final TileMolecularAssembler tg=this.getTileEntity(w,pos);
  if (tg != null && !p.isSneaking()) {
    Platform.openGUI(p,tg,AEPartLocation.fromFacing(side),GuiBridge.GUI_MAC);
    return true;
  }
  return super.onBlockActivated(w,pos,state,p,hand,heldItem,side,hitX,hitY,hitZ);
}","@Override public boolean onBlockActivated(final World w,final BlockPos pos,final IBlockState state,final EntityPlayer p,final EnumHand hand,final EnumFacing side,final float hitX,final float hitY,final float hitZ){
  final TileMolecularAssembler tg=this.getTileEntity(w,pos);
  if (tg != null && !p.isSneaking()) {
    Platform.openGUI(p,tg,AEPartLocation.fromFacing(side),GuiBridge.GUI_MAC);
    return true;
  }
  return super.onBlockActivated(w,pos,state,p,hand,side,hitX,hitY,hitZ);
}"
30485,"@Override public boolean onBlockActivated(final World w,final BlockPos pos,final IBlockState state,final EntityPlayer player,final EnumHand hand,final EnumFacing side,final float hitX,final float hitY,final float hitZ){
  final TileWireless tg=this.getTileEntity(w,pos);
  if (tg != null && !player.isSneaking()) {
    if (Platform.isServer()) {
      Platform.openGUI(player,tg,AEPartLocation.fromFacing(side),GuiBridge.GUI_WIRELESS);
    }
    return true;
  }
  return super.onBlockActivated(w,pos,state,player,hand,heldItem,side,hitX,hitY,hitZ);
}","@Override public boolean onBlockActivated(final World w,final BlockPos pos,final IBlockState state,final EntityPlayer player,final EnumHand hand,final EnumFacing side,final float hitX,final float hitY,final float hitZ){
  final TileWireless tg=this.getTileEntity(w,pos);
  if (tg != null && !player.isSneaking()) {
    if (Platform.isServer()) {
      Platform.openGUI(player,tg,AEPartLocation.fromFacing(side),GuiBridge.GUI_WIRELESS);
    }
    return true;
  }
  return super.onBlockActivated(w,pos,state,player,hand,side,hitX,hitY,hitZ);
}"
30486,"private void putVertexTR(UnpackedBakedQuad.Builder builder,EnumFacing face,float x,float y,float z,UvVector uv){
  float u;
  float v;
switch (uvRotations[face.ordinal()]) {
default :
case 0:
    u=uv.u2;
  v=uv.v1;
break;
case 1:
u=uv.u1;
v=uv.v1;
break;
case 2:
u=uv.u1;
v=uv.v2;
break;
case 3:
u=uv.u2;
v=uv.v2;
break;
}
putVertex(builder,face,x,y,z,u,v);
}","private void putVertexTR(UnpackedBakedQuad.Builder builder,EnumFacing face,float x,float y,float z,UvVector uv){
  float u, v;
switch (uvRotations[face.ordinal()]) {
default :
case 0:
    u=uv.u2;
  v=uv.v1;
break;
case 1:
u=uv.u1;
v=uv.v1;
break;
case 2:
u=uv.u1;
v=uv.v2;
break;
case 3:
u=uv.u2;
v=uv.v2;
break;
}
putVertex(builder,face,x,y,z,u,v);
}"
30487,"private void putFace(EnumFacing face,float x1,float y1,float z1,float x2,float y2,float z2){
  TextureAtlasSprite texture=textures.get(face);
  UnpackedBakedQuad.Builder builder=new UnpackedBakedQuad.Builder(format);
  builder.setTexture(texture);
  builder.setQuadOrientation(face);
  UvVector uv=new UvVector();
  Vector4f customUv=this.customUv.get(face);
  if (customUv != null) {
    uv.u1=texture.getInterpolatedU(customUv.x);
    uv.v1=texture.getInterpolatedV(customUv.y);
    uv.u2=texture.getInterpolatedU(customUv.z);
    uv.v2=texture.getInterpolatedV(customUv.w);
  }
 else {
    uv=getDefaultUv(face,texture,x1,y1,z1,x2,y2,z2);
  }
switch (face) {
case DOWN:
    putVertexTR(builder,face,x2,y1,z1,uv);
  putVertexBR(builder,face,x2,y1,z2,uv);
putVertexBL(builder,face,x1,y1,z2,uv);
putVertexTL(builder,face,x1,y1,z1,uv);
break;
case UP:
putVertexTL(builder,face,x1,y2,z1,uv);
putVertexBL(builder,face,x1,y2,z2,uv);
putVertexBR(builder,face,x2,y2,z2,uv);
putVertexTR(builder,face,x2,y2,z1,uv);
break;
case NORTH:
putVertexTL(builder,face,x2,y2,z1,uv);
putVertexTL(builder,face,x2,y1,z1,uv);
putVertexTL(builder,face,x1,y1,z1,uv);
putVertexTL(builder,face,x1,y2,z1,uv);
break;
case SOUTH:
putVertexBL(builder,face,x1,y2,z2,uv);
putVertexTL(builder,face,x1,y1,z2,uv);
putVertexTR(builder,face,x2,y1,z2,uv);
putVertexBR(builder,face,x2,y2,z2,uv);
break;
case WEST:
putVertexTL(builder,face,x1,y1,z1,uv);
putVertexTR(builder,face,x1,y1,z2,uv);
putVertexBR(builder,face,x1,y2,z2,uv);
putVertexBL(builder,face,x1,y2,z1,uv);
break;
case EAST:
putVertexBR(builder,face,x2,y2,z1,uv);
putVertexBL(builder,face,x2,y2,z2,uv);
putVertexTL(builder,face,x2,y1,z2,uv);
putVertexTR(builder,face,x2,y1,z1,uv);
break;
}
int[] vertexData=builder.build().getVertexData();
output.add(new BakedQuad(vertexData,-1,face,texture,true,format));
}","private void putFace(EnumFacing face,float x1,float y1,float z1,float x2,float y2,float z2){
  TextureAtlasSprite texture=textures.get(face);
  UnpackedBakedQuad.Builder builder=new UnpackedBakedQuad.Builder(format);
  builder.setTexture(texture);
  builder.setQuadOrientation(face);
  UvVector uv=new UvVector();
  Vector4f customUv=this.customUv.get(face);
  if (customUv != null) {
    uv.u1=texture.getInterpolatedU(customUv.x);
    uv.v1=texture.getInterpolatedV(customUv.y);
    uv.u2=texture.getInterpolatedU(customUv.z);
    uv.v2=texture.getInterpolatedV(customUv.w);
  }
 else {
    uv=getDefaultUv(face,texture,x1,y1,z1,x2,y2,z2);
  }
switch (face) {
case DOWN:
    putVertexTR(builder,face,x2,y1,z1,uv);
  putVertexBR(builder,face,x2,y1,z2,uv);
putVertexBL(builder,face,x1,y1,z2,uv);
putVertexTL(builder,face,x1,y1,z1,uv);
break;
case UP:
putVertexTL(builder,face,x1,y2,z1,uv);
putVertexBL(builder,face,x1,y2,z2,uv);
putVertexBR(builder,face,x2,y2,z2,uv);
putVertexTR(builder,face,x2,y2,z1,uv);
break;
case NORTH:
putVertexBR(builder,face,x2,y2,z1,uv);
putVertexTR(builder,face,x2,y1,z1,uv);
putVertexTL(builder,face,x1,y1,z1,uv);
putVertexBL(builder,face,x1,y2,z1,uv);
break;
case SOUTH:
putVertexBL(builder,face,x1,y2,z2,uv);
putVertexTL(builder,face,x1,y1,z2,uv);
putVertexTR(builder,face,x2,y1,z2,uv);
putVertexBR(builder,face,x2,y2,z2,uv);
break;
case WEST:
putVertexTL(builder,face,x1,y1,z1,uv);
putVertexTR(builder,face,x1,y1,z2,uv);
putVertexBR(builder,face,x1,y2,z2,uv);
putVertexBL(builder,face,x1,y2,z1,uv);
break;
case EAST:
putVertexBR(builder,face,x2,y2,z1,uv);
putVertexBL(builder,face,x2,y2,z2,uv);
putVertexTL(builder,face,x2,y1,z2,uv);
putVertexTR(builder,face,x2,y1,z1,uv);
break;
}
int[] vertexData=builder.build().getVertexData();
output.add(new BakedQuad(vertexData,-1,face,texture,true,format));
}"
30488,"/** 
 * Create an IC2 power sink for the given external sink.
 */
public static IC2PowerSink createPowerSink(TileEntity tileEntity,IExternalPowerSink externalSink){
  return instance.powerSinkFactory.apply(tileEntity,externalSink);
}","/** 
 * Create an IC2 power sink for the given external sink.
 */
public static IC2PowerSink createPowerSink(TileEntity tileEntity,IExternalPowerSink externalSink){
  return powerSinkFactory.apply(tileEntity,externalSink);
}"
30489,"public PacketClick(final BlockPos pos,final EnumFacing side,final float hitX,final float hitY,final float hitZ,final EnumHand hand){
  final ByteBuf data=Unpooled.buffer();
  data.writeInt(this.getPacketID());
  data.writeInt(this.x=pos.getX());
  data.writeInt(this.y=pos.getY());
  data.writeInt(this.z=pos.getZ());
  data.writeByte(side.ordinal());
  data.writeFloat(this.hitX=hitX);
  data.writeFloat(this.hitY=hitY);
  data.writeFloat(this.hitZ=hitZ);
  data.writeByte(hand.ordinal());
  this.configureWrite(data);
}","public PacketClick(final BlockPos pos,final EnumFacing side,final float hitX,final float hitY,final float hitZ,final EnumHand hand){
  final ByteBuf data=Unpooled.buffer();
  data.writeInt(this.getPacketID());
  data.writeInt(this.x=pos.getX());
  data.writeInt(this.y=pos.getY());
  data.writeInt(this.z=pos.getZ());
  if (side == null) {
    data.writeByte(-1);
  }
 else {
    data.writeByte(side.ordinal());
  }
  data.writeFloat(this.hitX=hitX);
  data.writeFloat(this.hitY=hitY);
  data.writeFloat(this.hitZ=hitZ);
  data.writeByte(hand.ordinal());
  this.configureWrite(data);
}"
30490,"@SubscribeEvent public void playerInteract(final PlayerInteractEvent event){
  if (event instanceof PlayerInteractEvent.RightClickEmpty && event.getEntityPlayer().worldObj.isRemote) {
    final RayTraceResult mop=Platform.rayTrace(event.getEntityPlayer(),true,false);
    final Minecraft mc=Minecraft.getMinecraft();
    final float f=1.0F;
    final double d0=mc.playerController.getBlockReachDistance();
    final Vec3d vec3=mc.getRenderViewEntity().getPositionEyes(f);
    if (mop != null && mop.hitVec.distanceTo(vec3) < d0) {
      final World w=event.getEntity().worldObj;
      final TileEntity te=w.getTileEntity(mop.getBlockPos());
      if (te instanceof IPartHost && this.wasCanceled) {
        event.setCanceled(true);
      }
    }
 else {
      final ItemStack held=event.getEntityPlayer().getHeldItem(event.getHand());
      final IItems items=AEApi.instance().definitions().items();
      boolean supportedItem=items.memoryCard().isSameAs(held);
      supportedItem|=items.colorApplicator().isSameAs(held);
      if (event.getEntityPlayer().isSneaking() && held != null && supportedItem) {
        NetworkHandler.instance.sendToServer(new PacketClick(event.getPos(),event.getFace(),0,0,0,event.getHand()));
      }
    }
  }
 else   if (event instanceof PlayerInteractEvent.RightClickBlock && event.getEntityPlayer().worldObj.isRemote) {
    if (this.placing.get() != null) {
      return;
    }
    this.placing.set(event);
    final ItemStack held=event.getEntityPlayer().getHeldItem(event.getHand());
    if (place(held,event.getPos(),event.getFace(),event.getEntityPlayer(),event.getHand(),event.getEntityPlayer().worldObj,PlaceType.INTERACT_FIRST_PASS,0) == EnumActionResult.SUCCESS) {
      event.setCanceled(true);
      this.wasCanceled=true;
    }
    this.placing.set(null);
  }
}","@SubscribeEvent public void playerInteract(final PlayerInteractEvent event){
  if (event.getHand() != EnumHand.MAIN_HAND) {
    return;
  }
  if (event instanceof PlayerInteractEvent.RightClickEmpty && event.getEntityPlayer().worldObj.isRemote) {
    final RayTraceResult mop=Platform.rayTrace(event.getEntityPlayer(),true,false);
    final Minecraft mc=Minecraft.getMinecraft();
    final float f=1.0F;
    final double d0=mc.playerController.getBlockReachDistance();
    final Vec3d vec3=mc.getRenderViewEntity().getPositionEyes(f);
    if (mop != null && mop.hitVec.distanceTo(vec3) < d0) {
      final World w=event.getEntity().worldObj;
      final TileEntity te=w.getTileEntity(mop.getBlockPos());
      if (te instanceof IPartHost && this.wasCanceled) {
        event.setCanceled(true);
      }
    }
 else {
      final ItemStack held=event.getEntityPlayer().getHeldItem(event.getHand());
      final IItems items=AEApi.instance().definitions().items();
      boolean supportedItem=items.memoryCard().isSameAs(held);
      supportedItem|=items.colorApplicator().isSameAs(held);
      if (event.getEntityPlayer().isSneaking() && held != null && supportedItem) {
        NetworkHandler.instance.sendToServer(new PacketClick(event.getPos(),event.getFace(),0,0,0,event.getHand()));
      }
    }
  }
 else   if (event instanceof PlayerInteractEvent.RightClickBlock && !event.getEntityPlayer().worldObj.isRemote) {
    if (this.placing.get() != null) {
      return;
    }
    this.placing.set(event);
    final ItemStack held=event.getEntityPlayer().getHeldItem(event.getHand());
    if (place(held,event.getPos(),event.getFace(),event.getEntityPlayer(),event.getHand(),event.getEntityPlayer().worldObj,PlaceType.INTERACT_FIRST_PASS,0) == EnumActionResult.SUCCESS) {
      event.setCanceled(true);
      this.wasCanceled=true;
    }
    this.placing.set(null);
  }
}"
30491,"@Override protected final void drawGuiContainerBackgroundLayer(final float f,final int x,final int y){
  final int ox=this.guiLeft;
  final int oy=this.guiTop;
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  this.drawBG(ox,oy,x,y);
  final List<Slot> slots=this.getInventorySlots();
  for (  final Slot slot : slots) {
    if (slot instanceof OptionalSlotFake) {
      final OptionalSlotFake fs=(OptionalSlotFake)slot;
      if (fs.renderDisabled()) {
        if (fs.isEnabled()) {
          this.drawTexturedModalRect(ox + fs.xDisplayPosition - 1,oy + fs.yDisplayPosition - 1,fs.getSourceX() - 1,fs.getSourceY() - 1,18,18);
        }
 else {
          GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
          GL11.glColor4f(1.0F,1.0F,1.0F,0.4F);
          GL11.glEnable(GL11.GL_BLEND);
          this.drawTexturedModalRect(ox + fs.xDisplayPosition - 1,oy + fs.yDisplayPosition - 1,fs.getSourceX() - 1,fs.getSourceY() - 1,18,18);
          GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
          GL11.glPopAttrib();
        }
      }
    }
  }
}","@Override protected final void drawGuiContainerBackgroundLayer(final float f,final int x,final int y){
  final int ox=this.guiLeft;
  final int oy=this.guiTop;
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  this.drawBG(ox,oy,x,y);
  final List<Slot> slots=this.getInventorySlots();
  for (  final Slot slot : slots) {
    if (slot instanceof OptionalSlotFake) {
      final OptionalSlotFake fs=(OptionalSlotFake)slot;
      if (fs.renderDisabled()) {
        if (fs.isEnabled()) {
          this.drawTexturedModalRect(ox + fs.xDisplayPosition - 1,oy + fs.yDisplayPosition - 1,fs.getSourceX() - 1,fs.getSourceY() - 1,18,18);
        }
 else {
          GL11.glColor4f(1.0F,1.0F,1.0F,0.4F);
          GlStateManager.enableBlend();
          this.drawTexturedModalRect(ox + fs.xDisplayPosition - 1,oy + fs.yDisplayPosition - 1,fs.getSourceX() - 1,fs.getSourceY() - 1,18,18);
          GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
        }
      }
    }
  }
}"
30492,"@Override public void drawButton(final Minecraft minecraft,final int x,final int y){
  if (this.visible) {
    GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
    minecraft.renderEngine.bindTexture(new ResourceLocation(""String_Node_Str"",""String_Node_Str""));
    this.hovered=x >= this.xPosition && y >= this.yPosition && x < this.xPosition + this.width && y < this.yPosition + this.height;
    int uv_x=(this.hideEdge > 0 ? 11 : 13);
    final int offsetX=this.hideEdge > 0 ? 1 : 0;
    this.drawTexturedModalRect(this.xPosition,this.yPosition,uv_x * 16,0,25,22);
    if (this.myIcon >= 0) {
      final int uv_y=(int)Math.floor(this.myIcon / 16);
      uv_x=this.myIcon - uv_y * 16;
      this.drawTexturedModalRect(offsetX + this.xPosition + 3,this.yPosition + 3,uv_x * 16,uv_y * 16,16,16);
    }
    this.mouseDragged(minecraft,x,y);
    if (this.myItem != null) {
      this.zLevel=100.0F;
      this.itemRenderer.zLevel=100.0F;
      RenderHelper.enableGUIStandardItemLighting();
      this.itemRenderer.renderItemAndEffectIntoGUI(this.myItem,offsetX + this.xPosition + 3,this.yPosition + 3);
      this.itemRenderer.zLevel=0.0F;
      this.zLevel=0.0F;
    }
  }
}","@Override public void drawButton(final Minecraft minecraft,final int x,final int y){
  if (this.visible) {
    GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
    minecraft.renderEngine.bindTexture(new ResourceLocation(""String_Node_Str"",""String_Node_Str""));
    this.hovered=x >= this.xPosition && y >= this.yPosition && x < this.xPosition + this.width && y < this.yPosition + this.height;
    int uv_x=(this.hideEdge > 0 ? 11 : 13);
    final int offsetX=this.hideEdge > 0 ? 1 : 0;
    this.drawTexturedModalRect(this.xPosition,this.yPosition,uv_x * 16,0,25,22);
    if (this.myIcon >= 0) {
      final int uv_y=(int)Math.floor(this.myIcon / 16);
      uv_x=this.myIcon - uv_y * 16;
      this.drawTexturedModalRect(offsetX + this.xPosition + 3,this.yPosition + 3,uv_x * 16,uv_y * 16,16,16);
    }
    this.mouseDragged(minecraft,x,y);
    if (this.myItem != null) {
      this.zLevel=100.0F;
      this.itemRenderer.zLevel=100.0F;
      GlStateManager.enableDepth();
      RenderHelper.enableGUIStandardItemLighting();
      this.itemRenderer.renderItemAndEffectIntoGUI(this.myItem,offsetX + this.xPosition + 3,this.yPosition + 3);
      GlStateManager.disableDepth();
      this.itemRenderer.zLevel=0.0F;
      this.zLevel=0.0F;
    }
  }
}"
30493,"CableBuilder(VertexFormat format,Function<ResourceLocation,TextureAtlasSprite> bakedTextureGetter){
  this.format=format;
  this.coreTextures=new EnumMap<>(CableCoreType.class);
  for (  CableCoreType type : CableCoreType.values()) {
    EnumMap<AEColor,TextureAtlasSprite> colorTextures=new EnumMap<>(AEColor.class);
    for (    AEColor color : AEColor.values()) {
      colorTextures.put(color,bakedTextureGetter.apply(type.getTexture(color)));
    }
    coreTextures.put(type,colorTextures);
  }
  this.connectionTextures=new EnumMap<>(AECableType.class);
  for (  AECableType type : AECableType.VALIDCABLES) {
    EnumMap<AEColor,TextureAtlasSprite> colorTextures=new EnumMap<>(AEColor.class);
    for (    AEColor color : AEColor.values()) {
      colorTextures.put(color,bakedTextureGetter.apply(type.getConnectionTexture(color)));
    }
    connectionTextures.put(type,colorTextures);
  }
  smartCableTextures=new SmartCableTextures(bakedTextureGetter);
}","CableBuilder(VertexFormat format,Function<ResourceLocation,TextureAtlasSprite> bakedTextureGetter){
  this.format=format;
  this.coreTextures=new EnumMap<>(CableCoreType.class);
  for (  CableCoreType type : CableCoreType.values()) {
    EnumMap<AEColor,TextureAtlasSprite> colorTextures=new EnumMap<>(AEColor.class);
    for (    AEColor color : AEColor.values()) {
      colorTextures.put(color,bakedTextureGetter.apply(type.getTexture(color)));
    }
    coreTextures.put(type,colorTextures);
  }
  this.connectionTextures=new EnumMap<>(AECableType.class);
  for (  AECableType type : AECableType.VALIDCABLES) {
    EnumMap<AEColor,TextureAtlasSprite> colorTextures=new EnumMap<>(AEColor.class);
    for (    AEColor color : AEColor.values()) {
      colorTextures.put(color,bakedTextureGetter.apply(getConnectionTexture(type,color)));
    }
    connectionTextures.put(type,colorTextures);
  }
  smartCableTextures=new SmartCableTextures(bakedTextureGetter);
}"
30494,"public static List<ResourceLocation> getTextures(){
  List<ResourceLocation> locations=new ArrayList<>();
  for (  CableCoreType coreType : CableCoreType.values()) {
    for (    AEColor color : AEColor.values()) {
      locations.add(coreType.getTexture(color));
    }
  }
  for (  AECableType cableType : AECableType.VALIDCABLES) {
    for (    AEColor color : AEColor.values()) {
      locations.add(cableType.getConnectionTexture(color));
    }
  }
  Collections.addAll(locations,SmartCableTextures.SMART_CHANNELS_TEXTURES);
  return locations;
}","public static List<ResourceLocation> getTextures(){
  List<ResourceLocation> locations=new ArrayList<>();
  for (  CableCoreType coreType : CableCoreType.values()) {
    for (    AEColor color : AEColor.values()) {
      locations.add(coreType.getTexture(color));
    }
  }
  for (  AECableType cableType : AECableType.VALIDCABLES) {
    for (    AEColor color : AEColor.values()) {
      locations.add(getConnectionTexture(cableType,color));
    }
  }
  Collections.addAll(locations,SmartCableTextures.SMART_CHANNELS_TEXTURES);
  return locations;
}"
30495,"/** 
 * Gets a list of texture sprites appropriate for particles (digging, etc.) given the render state for a cable bus.
 */
public List<TextureAtlasSprite> getParticleTextures(CableBusRenderState renderState){
  CableCoreType coreType=renderState.getCableType().getCoreType();
  AEColor cableColor=renderState.getCableColor();
  if (coreType != null) {
    return Collections.singletonList(cableBuilder.getCoreTexture(coreType,cableColor));
  }
 else {
    return Collections.emptyList();
  }
}","/** 
 * Gets a list of texture sprites appropriate for particles (digging, etc.) given the render state for a cable bus.
 */
public List<TextureAtlasSprite> getParticleTextures(CableBusRenderState renderState){
  CableCoreType coreType=CableCoreType.fromCableType(renderState.getCableType());
  AEColor cableColor=renderState.getCableColor();
  if (coreType != null) {
    return Collections.singletonList(cableBuilder.getCoreTexture(coreType,cableColor));
  }
 else {
    return Collections.emptyList();
  }
}"
30496,"@Override public CableBusRenderState getRenderState(){
  PartCable cable=(PartCable)getCenter();
  CableBusRenderState renderState=new CableBusRenderState();
  if (cable != null) {
    renderState.setCableColor(cable.getCableColor());
    renderState.setCableType(cable.getCableConnectionType());
    renderState.setCoreType(cable.getCableConnectionType().getCoreType());
    for (    EnumFacing facing : EnumFacing.values()) {
      if (!cable.isConnected(facing)) {
        continue;
      }
      AECableType connectionType=cable.getCableConnectionType();
      BlockPos adjacentPos=this.getTile().getPos().offset(facing);
      TileEntity adjacentTe=this.getTile().getWorld().getTileEntity(adjacentPos);
      if (adjacentTe instanceof IGridHost) {
        if (!(adjacentTe instanceof IPartHost) || cable.getCableConnectionType() == AECableType.DENSE) {
          IGridHost gridHost=(IGridHost)adjacentTe;
          connectionType=gridHost.getCableConnectionType(AEPartLocation.fromFacing(facing.getOpposite()));
        }
      }
      if (adjacentTe instanceof IPartHost) {
        renderState.getCableBusAdjacent().add(facing);
      }
      renderState.getConnectionTypes().put(facing,connectionType);
    }
    for (    EnumFacing facing : EnumFacing.values()) {
      int channels=cable.getChannelsOnSide(facing);
      renderState.getChannelsOnSide().put(facing,channels);
    }
  }
  for (  EnumFacing facing : EnumFacing.values()) {
    IPart part=getPart(facing);
    if (part == null) {
      continue;
    }
    if (part instanceof IGridHost) {
      IGridHost gridHost=(IGridHost)part;
      AECableType desiredType=gridHost.getCableConnectionType(AEPartLocation.INTERNAL);
      if (renderState.getCoreType() == CableCoreType.GLASS && (desiredType == AECableType.SMART || desiredType == AECableType.COVERED)) {
        renderState.setCoreType(CableCoreType.COVERED);
      }
      int length=(int)part.getCableConnectionLength(null);
      if (length > 0 && length <= 8) {
        renderState.getAttachmentConnections().put(facing,length);
      }
    }
    renderState.getAttachments().put(facing,part.getStaticModels());
  }
  return renderState;
}","@Override public CableBusRenderState getRenderState(){
  PartCable cable=(PartCable)getCenter();
  CableBusRenderState renderState=new CableBusRenderState();
  if (cable != null) {
    renderState.setCableColor(cable.getCableColor());
    renderState.setCableType(cable.getCableConnectionType());
    renderState.setCoreType(CableCoreType.fromCableType(cable.getCableConnectionType()));
    for (    EnumFacing facing : EnumFacing.values()) {
      if (!cable.isConnected(facing)) {
        continue;
      }
      AECableType connectionType=cable.getCableConnectionType();
      BlockPos adjacentPos=this.getTile().getPos().offset(facing);
      TileEntity adjacentTe=this.getTile().getWorld().getTileEntity(adjacentPos);
      if (adjacentTe instanceof IGridHost) {
        if (!(adjacentTe instanceof IPartHost) || cable.getCableConnectionType() == AECableType.DENSE) {
          IGridHost gridHost=(IGridHost)adjacentTe;
          connectionType=gridHost.getCableConnectionType(AEPartLocation.fromFacing(facing.getOpposite()));
        }
      }
      if (adjacentTe instanceof IPartHost) {
        renderState.getCableBusAdjacent().add(facing);
      }
      renderState.getConnectionTypes().put(facing,connectionType);
    }
    for (    EnumFacing facing : EnumFacing.values()) {
      int channels=cable.getChannelsOnSide(facing);
      renderState.getChannelsOnSide().put(facing,channels);
    }
  }
  for (  EnumFacing facing : EnumFacing.values()) {
    IPart part=getPart(facing);
    if (part == null) {
      continue;
    }
    if (part instanceof IGridHost) {
      IGridHost gridHost=(IGridHost)part;
      AECableType desiredType=gridHost.getCableConnectionType(AEPartLocation.INTERNAL);
      if (renderState.getCoreType() == CableCoreType.GLASS && (desiredType == AECableType.SMART || desiredType == AECableType.COVERED)) {
        renderState.setCoreType(CableCoreType.COVERED);
      }
      int length=(int)part.getCableConnectionLength(null);
      if (length > 0 && length <= 8) {
        renderState.getAttachmentConnections().put(facing,length);
      }
    }
    renderState.getAttachments().put(facing,part.getStaticModels());
  }
  return renderState;
}"
30497,"public ApiBlocks(FeatureFactory registry){
  this.quartzOre=registry.block(""String_Node_Str"",BlockQuartzOre::new).postInit((block,item) -> {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(block));
  }
).build();
  this.quartzOreCharged=registry.block(""String_Node_Str"",BlockChargedQuartzOre::new).postInit((block,item) -> {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(block));
  }
).build();
  this.matrixFrame=registry.block(""String_Node_Str"",BlockMatrixFrame::new).features(AEFeature.SpatialIO).build();
  FeatureFactory deco=registry.features(AEFeature.DecorativeQuartzBlocks);
  this.quartzBlock=deco.block(""String_Node_Str"",BlockQuartz::new).build();
  this.quartzPillar=deco.block(""String_Node_Str"",BlockQuartzPillar::new).build();
  this.chiseledQuartzBlock=deco.block(""String_Node_Str"",BlockChiseledQuartz::new).build();
  this.quartzGlass=deco.block(""String_Node_Str"",BlockQuartzGlass::new).build();
  this.quartzVibrantGlass=deco.block(""String_Node_Str"",BlockQuartzLamp::new).addFeatures(AEFeature.DecorativeLights).build();
  this.quartzFixture=registry.block(""String_Node_Str"",BlockQuartzFixture::new).features(AEFeature.DecorativeLights).build();
  this.fluixBlock=deco.block(""String_Node_Str"",BlockFluix::new).build();
  this.skyStoneBlock=deco.block(""String_Node_Str"",() -> new BlockSkyStone(SkystoneType.STONE)).build();
  this.smoothSkyStoneBlock=deco.block(""String_Node_Str"",() -> new BlockSkyStone(SkystoneType.BLOCK)).build();
  this.skyStoneBrick=deco.block(""String_Node_Str"",() -> new BlockSkyStone(SkystoneType.BRICK)).build();
  this.skyStoneSmallBrick=deco.block(""String_Node_Str"",() -> new BlockSkyStone(SkystoneType.SMALL_BRICK)).build();
  this.skyStoneChest=registry.block(""String_Node_Str"",() -> new BlockSkyChest(SkyChestType.STONE)).features(AEFeature.SkyStoneChests).rendering(new SkyChestRenderingCustomizer(SkyChestType.STONE)).build();
  this.smoothSkyStoneChest=registry.block(""String_Node_Str"",() -> new BlockSkyChest(SkyChestType.BLOCK)).features(AEFeature.SkyStoneChests).rendering(new SkyChestRenderingCustomizer(SkyChestType.BLOCK)).build();
  this.skyCompass=registry.block(""String_Node_Str"",BlockSkyCompass::new).features(AEFeature.MeteoriteCompass).build();
  this.grindstone=registry.block(""String_Node_Str"",BlockGrinder::new).features(AEFeature.GrindStone).build();
  this.crank=registry.block(""String_Node_Str"",BlockCrank::new).features(AEFeature.GrindStone).build();
  this.inscriber=registry.block(""String_Node_Str"",BlockInscriber::new).features(AEFeature.Inscriber).build();
  this.wirelessAccessPoint=registry.block(""String_Node_Str"",BlockWireless::new).features(AEFeature.WirelessAccessTerminal).build();
  this.charger=registry.block(""String_Node_Str"",BlockCharger::new).rendering(new BlockRenderingCustomizer(){
    @Override public void customize(    IBlockRendering rendering,    IItemRendering itemRendering){
      rendering.tesr(BlockCharger.createTesr());
    }
  }
).build();
  this.tinyTNT=registry.block(""String_Node_Str"",BlockTinyTNT::new).features(AEFeature.TinyTNT).postInit((block,item) -> {
    BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(item,new DispenserBehaviorTinyTNT());
  }
).build();
  this.securityStation=registry.block(""String_Node_Str"",BlockSecurityStation::new).features(AEFeature.Security).build();
  this.quantumRing=registry.block(""String_Node_Str"",BlockQuantumRing::new).features(AEFeature.QuantumNetworkBridge).build();
  this.quantumLink=registry.block(""String_Node_Str"",BlockQuantumLinkChamber::new).features(AEFeature.QuantumNetworkBridge).build();
  this.spatialPylon=registry.block(""String_Node_Str"",BlockSpatialPylon::new).features(AEFeature.SpatialIO).build();
  this.spatialIOPort=registry.block(""String_Node_Str"",BlockSpatialIOPort::new).features(AEFeature.SpatialIO).build();
  this.controller=registry.block(""String_Node_Str"",BlockController::new).features(AEFeature.Channels).build();
  this.drive=registry.block(""String_Node_Str"",BlockDrive::new).features(AEFeature.StorageCells,AEFeature.MEDrive).build();
  this.chest=registry.block(""String_Node_Str"",BlockChest::new).features(AEFeature.StorageCells,AEFeature.MEChest).build();
  this.iface=registry.block(""String_Node_Str"",BlockInterface::new).build();
  this.cellWorkbench=registry.block(""String_Node_Str"",BlockCellWorkbench::new).features(AEFeature.StorageCells).build();
  this.iOPort=registry.block(""String_Node_Str"",BlockIOPort::new).features(AEFeature.StorageCells,AEFeature.IOPort).build();
  this.condenser=registry.block(""String_Node_Str"",BlockCondenser::new).build();
  this.energyAcceptor=registry.block(""String_Node_Str"",BlockEnergyAcceptor::new).build();
  this.vibrationChamber=registry.block(""String_Node_Str"",BlockVibrationChamber::new).features(AEFeature.PowerGen).build();
  this.quartzGrowthAccelerator=registry.block(""String_Node_Str"",BlockQuartzGrowthAccelerator::new).build();
  this.energyCell=registry.block(""String_Node_Str"",BlockEnergyCell::new).item(AEBaseItemBlockChargeable::new).rendering(new BlockEnergyCellRendering(new ResourceLocation(AppEng.MOD_ID,""String_Node_Str""))).build();
  this.energyCellDense=registry.block(""String_Node_Str"",BlockDenseEnergyCell::new).features(AEFeature.DenseEnergyCells).item(AEBaseItemBlockChargeable::new).rendering(new BlockEnergyCellRendering(new ResourceLocation(AppEng.MOD_ID,""String_Node_Str""))).build();
  this.energyCellCreative=registry.block(""String_Node_Str"",BlockCreativeEnergyCell::new).features(AEFeature.Creative).item(AEBaseItemBlockChargeable::new).build();
  FeatureFactory crafting=registry.features(AEFeature.CraftingCPU);
  this.craftingUnit=crafting.block(""String_Node_Str"",() -> new BlockCraftingUnit(CraftingUnitType.UNIT)).build();
  this.craftingAccelerator=crafting.block(""String_Node_Str"",() -> new BlockCraftingUnit(CraftingUnitType.ACCELERATOR)).build();
  this.craftingStorage1k=crafting.block(""String_Node_Str"",() -> new BlockCraftingStorage(CraftingUnitType.STORAGE_1K)).item(ItemCraftingStorage::new).build();
  this.craftingStorage4k=crafting.block(""String_Node_Str"",() -> new BlockCraftingStorage(CraftingUnitType.STORAGE_4K)).item(ItemCraftingStorage::new).build();
  this.craftingStorage16k=crafting.block(""String_Node_Str"",() -> new BlockCraftingStorage(CraftingUnitType.STORAGE_16K)).item(ItemCraftingStorage::new).build();
  this.craftingStorage64k=crafting.block(""String_Node_Str"",() -> new BlockCraftingStorage(CraftingUnitType.STORAGE_64K)).item(ItemCraftingStorage::new).build();
  this.craftingMonitor=crafting.block(""String_Node_Str"",BlockCraftingMonitor::new).build();
  this.molecularAssembler=registry.block(""String_Node_Str"",BlockMolecularAssembler::new).features(AEFeature.MolecularAssembler).build();
  this.lightDetector=registry.block(""String_Node_Str"",BlockLightDetector::new).features(AEFeature.LightDetector).build();
  this.paint=registry.block(""String_Node_Str"",BlockPaint::new).features(AEFeature.PaintBalls).build();
  this.skyStoneStairs=makeStairs(""String_Node_Str"",registry,this.skyStoneBlock());
  this.smoothSkyStoneStairs=makeStairs(""String_Node_Str"",registry,this.smoothSkyStoneBlock());
  this.skyStoneBrickStairs=makeStairs(""String_Node_Str"",registry,this.skyStoneBrick());
  this.skyStoneSmallBrickStairs=makeStairs(""String_Node_Str"",registry,this.skyStoneSmallBrick());
  this.fluixStairs=makeStairs(""String_Node_Str"",registry,this.fluixBlock());
  this.quartzStairs=makeStairs(""String_Node_Str"",registry,this.quartzBlock());
  this.chiseledQuartzStairs=makeStairs(""String_Node_Str"",registry,this.chiseledQuartzBlock());
  this.quartzPillarStairs=makeStairs(""String_Node_Str"",registry,this.quartzPillar());
  this.multiPart=registry.block(""String_Node_Str"",BlockCableBus::new).rendering(new BlockRenderingCustomizer(){
    @Override @SideOnly(Side.CLIENT) public void customize(    IBlockRendering rendering,    IItemRendering itemRendering){
      rendering.modelCustomizer(new CableModelCustomizer()::customizeModel).blockColor(new CableBusColor());
    }
  }
).build();
  this.itemGen=registry.block(""String_Node_Str"",BlockItemGen::new).features(AEFeature.UnsupportedDeveloperTools,AEFeature.Creative).build();
  this.chunkLoader=registry.block(""String_Node_Str"",BlockChunkloader::new).features(AEFeature.UnsupportedDeveloperTools,AEFeature.Creative).build();
  this.phantomNode=registry.block(""String_Node_Str"",BlockPhantomNode::new).features(AEFeature.UnsupportedDeveloperTools,AEFeature.Creative).build();
  this.cubeGenerator=registry.block(""String_Node_Str"",BlockCubeGenerator::new).features(AEFeature.UnsupportedDeveloperTools,AEFeature.Creative).build();
}","public ApiBlocks(FeatureFactory registry){
  this.quartzOre=registry.block(""String_Node_Str"",BlockQuartzOre::new).postInit((block,item) -> {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(block));
  }
).build();
  this.quartzOreCharged=registry.block(""String_Node_Str"",BlockChargedQuartzOre::new).postInit((block,item) -> {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(block));
  }
).build();
  this.matrixFrame=registry.block(""String_Node_Str"",BlockMatrixFrame::new).features(AEFeature.SpatialIO).build();
  FeatureFactory deco=registry.features(AEFeature.DecorativeQuartzBlocks);
  this.quartzBlock=deco.block(""String_Node_Str"",BlockQuartz::new).build();
  this.quartzPillar=deco.block(""String_Node_Str"",BlockQuartzPillar::new).build();
  this.chiseledQuartzBlock=deco.block(""String_Node_Str"",BlockChiseledQuartz::new).build();
  this.quartzGlass=deco.block(""String_Node_Str"",BlockQuartzGlass::new).useCustomItemModel().build();
  this.quartzVibrantGlass=deco.block(""String_Node_Str"",BlockQuartzLamp::new).addFeatures(AEFeature.DecorativeLights).useCustomItemModel().build();
  this.quartzFixture=registry.block(""String_Node_Str"",BlockQuartzFixture::new).features(AEFeature.DecorativeLights).useCustomItemModel().build();
  this.fluixBlock=deco.block(""String_Node_Str"",BlockFluix::new).build();
  this.skyStoneBlock=deco.block(""String_Node_Str"",() -> new BlockSkyStone(SkystoneType.STONE)).build();
  this.smoothSkyStoneBlock=deco.block(""String_Node_Str"",() -> new BlockSkyStone(SkystoneType.BLOCK)).build();
  this.skyStoneBrick=deco.block(""String_Node_Str"",() -> new BlockSkyStone(SkystoneType.BRICK)).build();
  this.skyStoneSmallBrick=deco.block(""String_Node_Str"",() -> new BlockSkyStone(SkystoneType.SMALL_BRICK)).build();
  this.skyStoneChest=registry.block(""String_Node_Str"",() -> new BlockSkyChest(SkyChestType.STONE)).features(AEFeature.SkyStoneChests).rendering(new SkyChestRenderingCustomizer(SkyChestType.STONE)).build();
  this.smoothSkyStoneChest=registry.block(""String_Node_Str"",() -> new BlockSkyChest(SkyChestType.BLOCK)).features(AEFeature.SkyStoneChests).rendering(new SkyChestRenderingCustomizer(SkyChestType.BLOCK)).build();
  this.skyCompass=registry.block(""String_Node_Str"",BlockSkyCompass::new).features(AEFeature.MeteoriteCompass).build();
  this.grindstone=registry.block(""String_Node_Str"",BlockGrinder::new).features(AEFeature.GrindStone).build();
  this.crank=registry.block(""String_Node_Str"",BlockCrank::new).features(AEFeature.GrindStone).useCustomItemModel().build();
  this.inscriber=registry.block(""String_Node_Str"",BlockInscriber::new).features(AEFeature.Inscriber).build();
  this.wirelessAccessPoint=registry.block(""String_Node_Str"",BlockWireless::new).features(AEFeature.WirelessAccessTerminal).build();
  this.charger=registry.block(""String_Node_Str"",BlockCharger::new).rendering(new BlockRenderingCustomizer(){
    @Override public void customize(    IBlockRendering rendering,    IItemRendering itemRendering){
      rendering.tesr(BlockCharger.createTesr());
    }
  }
).build();
  this.tinyTNT=registry.block(""String_Node_Str"",BlockTinyTNT::new).features(AEFeature.TinyTNT).postInit((block,item) -> {
    BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(item,new DispenserBehaviorTinyTNT());
  }
).build();
  this.securityStation=registry.block(""String_Node_Str"",BlockSecurityStation::new).features(AEFeature.Security).build();
  this.quantumRing=registry.block(""String_Node_Str"",BlockQuantumRing::new).features(AEFeature.QuantumNetworkBridge).build();
  this.quantumLink=registry.block(""String_Node_Str"",BlockQuantumLinkChamber::new).features(AEFeature.QuantumNetworkBridge).build();
  this.spatialPylon=registry.block(""String_Node_Str"",BlockSpatialPylon::new).features(AEFeature.SpatialIO).build();
  this.spatialIOPort=registry.block(""String_Node_Str"",BlockSpatialIOPort::new).features(AEFeature.SpatialIO).build();
  this.controller=registry.block(""String_Node_Str"",BlockController::new).features(AEFeature.Channels).build();
  this.drive=registry.block(""String_Node_Str"",BlockDrive::new).features(AEFeature.StorageCells,AEFeature.MEDrive).build();
  this.chest=registry.block(""String_Node_Str"",BlockChest::new).features(AEFeature.StorageCells,AEFeature.MEChest).build();
  this.iface=registry.block(""String_Node_Str"",BlockInterface::new).build();
  this.cellWorkbench=registry.block(""String_Node_Str"",BlockCellWorkbench::new).features(AEFeature.StorageCells).build();
  this.iOPort=registry.block(""String_Node_Str"",BlockIOPort::new).features(AEFeature.StorageCells,AEFeature.IOPort).build();
  this.condenser=registry.block(""String_Node_Str"",BlockCondenser::new).build();
  this.energyAcceptor=registry.block(""String_Node_Str"",BlockEnergyAcceptor::new).build();
  this.vibrationChamber=registry.block(""String_Node_Str"",BlockVibrationChamber::new).features(AEFeature.PowerGen).build();
  this.quartzGrowthAccelerator=registry.block(""String_Node_Str"",BlockQuartzGrowthAccelerator::new).build();
  this.energyCell=registry.block(""String_Node_Str"",BlockEnergyCell::new).item(AEBaseItemBlockChargeable::new).rendering(new BlockEnergyCellRendering(new ResourceLocation(AppEng.MOD_ID,""String_Node_Str""))).build();
  this.energyCellDense=registry.block(""String_Node_Str"",BlockDenseEnergyCell::new).features(AEFeature.DenseEnergyCells).item(AEBaseItemBlockChargeable::new).rendering(new BlockEnergyCellRendering(new ResourceLocation(AppEng.MOD_ID,""String_Node_Str""))).build();
  this.energyCellCreative=registry.block(""String_Node_Str"",BlockCreativeEnergyCell::new).features(AEFeature.Creative).item(AEBaseItemBlockChargeable::new).build();
  FeatureFactory crafting=registry.features(AEFeature.CraftingCPU);
  this.craftingUnit=crafting.block(""String_Node_Str"",() -> new BlockCraftingUnit(CraftingUnitType.UNIT)).build();
  this.craftingAccelerator=crafting.block(""String_Node_Str"",() -> new BlockCraftingUnit(CraftingUnitType.ACCELERATOR)).build();
  this.craftingStorage1k=crafting.block(""String_Node_Str"",() -> new BlockCraftingStorage(CraftingUnitType.STORAGE_1K)).item(ItemCraftingStorage::new).build();
  this.craftingStorage4k=crafting.block(""String_Node_Str"",() -> new BlockCraftingStorage(CraftingUnitType.STORAGE_4K)).item(ItemCraftingStorage::new).build();
  this.craftingStorage16k=crafting.block(""String_Node_Str"",() -> new BlockCraftingStorage(CraftingUnitType.STORAGE_16K)).item(ItemCraftingStorage::new).build();
  this.craftingStorage64k=crafting.block(""String_Node_Str"",() -> new BlockCraftingStorage(CraftingUnitType.STORAGE_64K)).item(ItemCraftingStorage::new).build();
  this.craftingMonitor=crafting.block(""String_Node_Str"",BlockCraftingMonitor::new).build();
  this.molecularAssembler=registry.block(""String_Node_Str"",BlockMolecularAssembler::new).features(AEFeature.MolecularAssembler).build();
  this.lightDetector=registry.block(""String_Node_Str"",BlockLightDetector::new).features(AEFeature.LightDetector).build();
  this.paint=registry.block(""String_Node_Str"",BlockPaint::new).features(AEFeature.PaintBalls).build();
  this.skyStoneStairs=makeStairs(""String_Node_Str"",registry,this.skyStoneBlock());
  this.smoothSkyStoneStairs=makeStairs(""String_Node_Str"",registry,this.smoothSkyStoneBlock());
  this.skyStoneBrickStairs=makeStairs(""String_Node_Str"",registry,this.skyStoneBrick());
  this.skyStoneSmallBrickStairs=makeStairs(""String_Node_Str"",registry,this.skyStoneSmallBrick());
  this.fluixStairs=makeStairs(""String_Node_Str"",registry,this.fluixBlock());
  this.quartzStairs=makeStairs(""String_Node_Str"",registry,this.quartzBlock());
  this.chiseledQuartzStairs=makeStairs(""String_Node_Str"",registry,this.chiseledQuartzBlock());
  this.quartzPillarStairs=makeStairs(""String_Node_Str"",registry,this.quartzPillar());
  this.multiPart=registry.block(""String_Node_Str"",BlockCableBus::new).rendering(new BlockRenderingCustomizer(){
    @Override @SideOnly(Side.CLIENT) public void customize(    IBlockRendering rendering,    IItemRendering itemRendering){
      rendering.modelCustomizer(new CableModelCustomizer()::customizeModel).blockColor(new CableBusColor());
    }
  }
).build();
  this.itemGen=registry.block(""String_Node_Str"",BlockItemGen::new).features(AEFeature.UnsupportedDeveloperTools,AEFeature.Creative).build();
  this.chunkLoader=registry.block(""String_Node_Str"",BlockChunkloader::new).features(AEFeature.UnsupportedDeveloperTools,AEFeature.Creative).build();
  this.phantomNode=registry.block(""String_Node_Str"",BlockPhantomNode::new).features(AEFeature.UnsupportedDeveloperTools,AEFeature.Creative).build();
  this.cubeGenerator=registry.block(""String_Node_Str"",BlockCubeGenerator::new).features(AEFeature.UnsupportedDeveloperTools,AEFeature.Creative).build();
}"
30498,"@Override public void customize(IBlockRendering rendering,IItemRendering itemRendering){
  rendering.tesr(new SkyCompassTESR());
  rendering.modelCustomizer((loc,model) -> model);
  itemRendering.model(ITEM_MODEL);
  itemRendering.builtInModel(""String_Node_Str"",new SkyCompassModel());
}","@Override @SideOnly(Side.CLIENT) public void customize(IBlockRendering rendering,IItemRendering itemRendering){
  rendering.tesr(new SkyCompassTESR());
  rendering.modelCustomizer((loc,model) -> model);
  itemRendering.model(ITEM_MODEL);
  itemRendering.builtInModel(""String_Node_Str"",new SkyCompassModel());
}"
30499,"protected boolean isStraight(IPartHost host,final EnumSet<AEPartLocation> sides){
  boolean b=false;
  for (  EnumFacing facing : EnumFacing.values()) {
    b|=host.getPart(facing) != null;
  }
  if (!b && sides.size() == 2) {
    AEPartLocation[] sa=sides.toArray(new AEPartLocation[0]);
    if (sa[0] == sa[1].getOpposite()) {
      for (      AEPartLocation side : sides) {
        TileEntity to=host.getTile().getWorld().getTileEntity(host.getTile().getPos().offset(side.getFacing()));
        b|=to instanceof IPartHost && ((IPartHost)to).getPart(AEPartLocation.INTERNAL) instanceof IPartCable && ((IPartCable)((IPartHost)to).getPart(AEPartLocation.INTERNAL)).getCableConnectionType() == getCableConnectionType();
      }
      return !b;
    }
  }
  return false;
}","/** 
 * A cable connection is considered straight, if there are exactly two connection points on opposite sides, and the cable has no attached busses.
 */
protected boolean isStraight(IPartHost host,final EnumSet<AEPartLocation> sides){
  if (sides.size() != 2) {
    return false;
  }
  Iterator<AEPartLocation> it=sides.iterator();
  EnumFacing firstSide=it.next().getFacing();
  EnumFacing secondSide=it.next().getFacing();
  if (firstSide.getOpposite() != secondSide) {
    return false;
  }
  for (  EnumFacing facing : EnumFacing.values()) {
    if (facing != firstSide && facing != secondSide) {
      if (host.getPart(facing) != null) {
        return false;
      }
    }
  }
  return true;
}"
30500,"public BlockCableBus(){
  super(AEGlassMaterial.INSTANCE);
  this.setLightOpacity(0);
  this.setFullSize(this.setOpaque(false));
  this.setTileEntity(TileCableBus.class);
}","public BlockCableBus(){
  super(AEGlassMaterial.INSTANCE);
  this.setLightOpacity(0);
  this.setFullSize(false);
  this.setOpaque(false);
  this.setTileEntity(TileCableBus.class);
}"
30501,"@Override public int colorMultiplier(IBlockState state,IBlockAccess worldIn,BlockPos pos,int color){
  AEPartLocation side=AEPartLocation.fromOrdinal((color >> 2) & 7);
  CableBusContainer bus=((IExtendedBlockState)state).getValue(BlockCableBus.cableBus);
switch (color & 3) {
case 0:
    return bus.getGridNode(side) != null && bus.getGridNode(side).isActive() ? 0xffffff : 0;
case 1:
  return bus.getColor().blackVariant;
case 2:
return bus.getColor().mediumVariant;
case 3:
return bus.getColor().whiteVariant;
default :
return color;
}
}","@Override public int colorMultiplier(IBlockState state,IBlockAccess worldIn,BlockPos pos,int color){
  boolean active=true;
  AEColor busColor=AEColor.Transparent;
  if (state instanceof IExtendedBlockState) {
    AEPartLocation side=AEPartLocation.fromOrdinal((color >> 2) & 7);
    CableBusContainer bus=((IExtendedBlockState)state).getValue(BlockCableBus.cableBus);
    if (bus != null) {
      active=bus.getGridNode(side) != null && bus.getGridNode(side).isActive();
      busColor=bus.getColor();
    }
  }
switch (color & 3) {
case 0:
    return active ? 0xffffff : 0;
case 1:
  return busColor.blackVariant;
case 2:
return busColor.mediumVariant;
case 3:
return busColor.whiteVariant;
default :
return color;
}
}"
30502,"@Override public void setTexture(TextureAtlasSprite texture){
}","@Override public void setTexture(TextureAtlasSprite texture){
  parent.setTexture(texture);
}"
30503,"@Override public void setApplyDiffuseLighting(boolean diffuse){
}","@Override public void setApplyDiffuseLighting(boolean diffuse){
  parent.setApplyDiffuseLighting(diffuse);
}"
30504,"public void setQuadTint(int tint){
}","public void setQuadTint(int tint){
  parent.setQuadTint(tint);
}"
30505,"@Override public BakedQuad makeBakedQuad(Vector3f posFrom,Vector3f posTo,BlockPartFace face,TextureAtlasSprite sprite,EnumFacing facing,ITransformation modelRotationIn,BlockPartRotation partRotation,boolean uvLocked,boolean shade){
  BakedQuad quad=super.makeBakedQuad(posFrom,posTo,face,sprite,facing,modelRotationIn,partRotation,uvLocked,shade);
  Pair<Float,Float> brightness=uvlightmap.get(face);
  if (brightness != null) {
    VertexFormat format=new VertexFormat(quad.getFormat());
    if (!format.getElements().contains(DefaultVertexFormats.TEX_2S)) {
      format.addElement(DefaultVertexFormats.TEX_2S);
    }
    UnpackedBakedQuad.Builder builder=new UnpackedBakedQuad.Builder(format);
    VertexLighterFlat trans=new VertexLighterFlat(Minecraft.getMinecraft().getBlockColors()){
      @Override protected void updateLightmap(      float[] normal,      float[] lightmap,      float x,      float y,      float z){
        lightmap[0]=brightness.getRight();
        lightmap[1]=brightness.getLeft();
      }
    }
;
    trans.setParent(builder);
    quad.pipe(trans);
    builder.setQuadOrientation(quad.getFace());
    return builder.build();
  }
 else {
    return quad;
  }
}","@Override public BakedQuad makeBakedQuad(Vector3f posFrom,Vector3f posTo,BlockPartFace face,TextureAtlasSprite sprite,EnumFacing facing,ITransformation modelRotationIn,BlockPartRotation partRotation,boolean uvLocked,boolean shade){
  BakedQuad quad=super.makeBakedQuad(posFrom,posTo,face,sprite,facing,modelRotationIn,partRotation,uvLocked,shade);
  Pair<Float,Float> brightness=uvlightmap.get(face);
  if (brightness != null) {
    VertexFormat format=new VertexFormat(quad.getFormat());
    if (!format.getElements().contains(DefaultVertexFormats.TEX_2S)) {
      format.addElement(DefaultVertexFormats.TEX_2S);
    }
    UnpackedBakedQuad.Builder builder=new UnpackedBakedQuad.Builder(format);
    VertexLighterFlat trans=new VertexLighterFlat(Minecraft.getMinecraft().getBlockColors()){
      @Override protected void updateLightmap(      float[] normal,      float[] lightmap,      float x,      float y,      float z){
        lightmap[0]=brightness.getRight();
        lightmap[1]=brightness.getLeft();
      }
      @Override public void setQuadTint(      int tint){
      }
    }
;
    trans.setParent(builder);
    quad.pipe(trans);
    builder.setQuadTint(quad.getTintIndex());
    builder.setQuadOrientation(quad.getFace());
    return builder.build();
  }
 else {
    return quad;
  }
}"
30506,"void apply(FeatureFactory factory,Item item){
  if (this.itemMeshDefinition != null) {
    factory.addBootstrapComponent(new ItemMeshDefinitionComponent(item,itemMeshDefinition));
  }
  if (!this.itemModels.isEmpty()) {
    factory.addBootstrapComponent(new ItemModelComponent(item,this.itemModels));
  }
  Set<ResourceLocation> resources=new HashSet<>(variants);
  if (this.itemMeshDefinition == null && this.itemModels.isEmpty()) {
    ModelResourceLocation model;
    if (item instanceof ItemBlock) {
      Block block=((ItemBlock)item).getBlock();
      StateMapperHelper helper=new StateMapperHelper(block.getRegistryName());
      model=helper.getModelResourceLocation(block.getDefaultState());
    }
 else {
      model=new ModelResourceLocation(item.getRegistryName(),""String_Node_Str"");
    }
    factory.addBootstrapComponent(new ItemModelComponent(item,ImmutableMap.of(0,model)));
    resources.add(model);
  }
  if (!resources.isEmpty()) {
    factory.addBootstrapComponent(new ItemVariantsComponent(item,resources));
  }
  if (itemColor != null) {
    factory.addBootstrapComponent(new ItemColorComponent(item,itemColor));
  }
}","void apply(FeatureFactory factory,Item item){
  if (this.itemMeshDefinition != null) {
    factory.addBootstrapComponent(new ItemMeshDefinitionComponent(item,itemMeshDefinition));
  }
  if (!this.itemModels.isEmpty()) {
    factory.addBootstrapComponent(new ItemModelComponent(item,this.itemModels));
  }
  Set<ResourceLocation> resources=new HashSet<>(variants);
  if (this.itemMeshDefinition == null && this.itemModels.isEmpty()) {
    ModelResourceLocation model;
    if (item instanceof ItemBlock) {
      Block block=((ItemBlock)item).getBlock();
      StateMapperHelper helper=new StateMapperHelper(block.getRegistryName());
      model=helper.getModelResourceLocation(block.getDefaultState());
    }
 else {
      model=new ModelResourceLocation(item.getRegistryName(),""String_Node_Str"");
      resources.add(model);
    }
    factory.addBootstrapComponent(new ItemModelComponent(item,ImmutableMap.of(0,model)));
  }
  if (!resources.isEmpty()) {
    factory.addBootstrapComponent(new ItemVariantsComponent(item,resources));
  }
  if (itemColor != null) {
    factory.addBootstrapComponent(new ItemColorComponent(item,itemColor));
  }
}"
30507,"private TileEntity getTileEntity(TileEntity self,int x,int y,int z){
  final World w=self.getWorldObj();
  if (w.getChunkProvider().chunkExists(x >> 4,z >> 4)) {
    return w.getTileEntity(x,y,z);
  }
  return null;
}","private TileEntity getTileEntity(TileEntity self,BlockPos pos){
  World w=self.getWorld();
  if (w.getChunkProvider().chunkExists(pos.getX() >> 4,pos.getZ() >> 4)) {
    return w.getTileEntity(pos);
  }
  return null;
}"
30508,"@Override public boolean renderInWorld(AEBaseBlock block,IBlockAccess world,BlockPos pos,ModelGenerator renderer){
  IOrientable te=((IOrientableBlock)block).getOrientable(world,pos);
  float Point2=6.0f / 16.0f;
  float Point3=7.0f / 16.0f;
  float Point13=10.0f / 16.0f;
  float Point12=9.0f / 16.0f;
  float singlePixel=1.0f / 16.0f;
  float renderBottom=5.0f / 16.0f;
  float renderTop=10.0f / 16.0f;
  float bottom=7.0f / 16.0f;
  float top=8.0f / 16.0f;
  float xOff=0.0f;
  float yOff=0.0f;
  float zOff=0.0f;
  renderer.renderAllFaces=true;
  if (te != null) {
    AEPartLocation forward=AEPartLocation.fromFacing(te.getUp());
    xOff=forward.xOffset * -(4.0f / 16.0f);
    yOff=forward.yOffset * -(4.0f / 16.0f);
    zOff=forward.zOffset * -(4.0f / 16.0f);
  }
  renderer.setRenderBounds(Point3 + xOff,renderBottom + yOff,Point3 + zOff,Point12 + xOff,renderTop + yOff,Point12 + zOff);
  super.renderInWorld(blk,world,pos,renderer);
  int r=(pos.getX() + pos.getY() + pos.getZ()) % 2;
  if (r == 0) {
    renderer.setRenderBounds(Point3 + xOff,renderTop + yOff,Point3 + zOff,Point3 + singlePixel + xOff,renderTop + singlePixel + yOff,Point3 + singlePixel + zOff);
    super.renderInWorld(blk,world,pos,renderer);
    renderer.setRenderBounds(Point12 - singlePixel + xOff,renderBottom - singlePixel + yOff,Point12 - singlePixel + zOff,Point12 + xOff,renderBottom + yOff,Point12 + zOff);
    super.renderInWorld(blk,world,pos,renderer);
  }
 else {
    renderer.setRenderBounds(Point3 + xOff,renderBottom - singlePixel + yOff,Point3 + zOff,Point3 + singlePixel + xOff,renderBottom + yOff,Point3 + singlePixel + zOff);
    super.renderInWorld(blk,world,pos,renderer);
    renderer.setRenderBounds(Point12 - singlePixel + xOff,renderTop + yOff,Point12 - singlePixel + zOff,Point12 + xOff,renderTop + singlePixel + yOff,Point12 + zOff);
    super.renderInWorld(blk,world,pos,renderer);
  }
  block.getRendererInstance().setTemporaryRenderIcon(renderer.getIcon(Blocks.hopper.getDefaultState())[0]);
  renderer.setRenderBounds(Point2 + xOff,bottom + yOff,Point2 + zOff,Point13 + xOff,top + yOff,Point3 + zOff);
  boolean out=renderer.renderStandardBlock(block,pos);
  renderer.setRenderBounds(Point2 + xOff,bottom + yOff,Point12 + zOff,Point13 + xOff,top + yOff,Point13 + zOff);
  renderer.renderStandardBlock(block,pos);
  renderer.setRenderBounds(Point2 + xOff,bottom + yOff,Point3 + zOff,Point3 + xOff,top + yOff,Point12 + zOff);
  renderer.renderStandardBlock(block,pos);
  renderer.setRenderBounds(Point12 + xOff,bottom + yOff,Point3 + zOff,Point13 + xOff,top + yOff,Point12 + zOff);
  renderer.renderStandardBlock(block,pos);
  if (te != null) {
    AEPartLocation forward=AEPartLocation.fromFacing(te.getUp());
switch (forward) {
case EAST:
      renderer.setRenderBounds(0,bottom + yOff,bottom + zOff,Point2 + xOff,top + yOff,top + zOff);
    renderer.renderStandardBlock(block,pos);
  break;
case WEST:
renderer.setRenderBounds(Point13 + xOff,bottom + yOff,bottom + zOff,1.0,top + yOff,top + zOff);
renderer.renderStandardBlock(block,pos);
break;
case NORTH:
renderer.setRenderBounds(bottom + xOff,bottom + yOff,Point13 + zOff,top + xOff,top + yOff,1.0);
renderer.renderStandardBlock(block,pos);
break;
case SOUTH:
renderer.setRenderBounds(bottom + xOff,bottom + yOff,0,top + xOff,top + yOff,Point2 + zOff);
renderer.renderStandardBlock(block,pos);
break;
case UP:
renderer.setRenderBounds(Point2,0,Point2,Point3,bottom + yOff,Point3);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point2,0,Point12,Point3,bottom + yOff,Point13);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point12,0,Point2,Point13,bottom + yOff,Point3);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point12,0,Point12,Point13,bottom + yOff,Point13);
renderer.renderStandardBlock(block,pos);
break;
case DOWN:
renderer.setRenderBounds(Point2,top + yOff,Point2,Point3,1.0,Point3);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point2,top + yOff,Point12,Point3,1.0,Point13);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point12,top + yOff,Point2,Point13,1.0,Point3);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point12,top + yOff,Point12,Point13,1.0,Point13);
renderer.renderStandardBlock(block,pos);
break;
default :
}
}
renderer.renderAllFaces=false;
block.getRendererInstance().setTemporaryRenderIcon(null);
return out;
}","@Override public boolean renderInWorld(AEBaseBlock block,IBlockAccess world,BlockPos pos,ModelGenerator renderer){
  IOrientable te=((IOrientableBlock)block).getOrientable(world,pos);
  float Point2=6.0f / 16.0f;
  float Point3=7.0f / 16.0f;
  float Point13=10.0f / 16.0f;
  float Point12=9.0f / 16.0f;
  float singlePixel=1.0f / 16.0f;
  float renderBottom=5.0f / 16.0f;
  float renderTop=10.0f / 16.0f;
  float bottom=7.0f / 16.0f;
  float top=8.0f / 16.0f;
  float xOff=0.0f;
  float yOff=0.0f;
  float zOff=0.0f;
  renderer.renderAllFaces=true;
  if (te != null) {
    AEPartLocation forward=AEPartLocation.fromFacing(te.getUp());
    xOff=forward.xOffset * -(4.0f / 16.0f);
    yOff=forward.yOffset * -(4.0f / 16.0f);
    zOff=forward.zOffset * -(4.0f / 16.0f);
  }
  renderer.setRenderBounds(Point3 + xOff,renderBottom + yOff,Point3 + zOff,Point12 + xOff,renderTop + yOff,Point12 + zOff);
  super.renderInWorld(block,world,pos,renderer);
  int r=(pos.getX() + pos.getY() + pos.getZ()) % 2;
  if (r == 0) {
    renderer.setRenderBounds(Point3 + xOff,renderTop + yOff,Point3 + zOff,Point3 + singlePixel + xOff,renderTop + singlePixel + yOff,Point3 + singlePixel + zOff);
    super.renderInWorld(block,world,pos,renderer);
    renderer.setRenderBounds(Point12 - singlePixel + xOff,renderBottom - singlePixel + yOff,Point12 - singlePixel + zOff,Point12 + xOff,renderBottom + yOff,Point12 + zOff);
    super.renderInWorld(block,world,pos,renderer);
  }
 else {
    renderer.setRenderBounds(Point3 + xOff,renderBottom - singlePixel + yOff,Point3 + zOff,Point3 + singlePixel + xOff,renderBottom + yOff,Point3 + singlePixel + zOff);
    super.renderInWorld(block,world,pos,renderer);
    renderer.setRenderBounds(Point12 - singlePixel + xOff,renderTop + yOff,Point12 - singlePixel + zOff,Point12 + xOff,renderTop + singlePixel + yOff,Point12 + zOff);
    super.renderInWorld(block,world,pos,renderer);
  }
  block.getRendererInstance().setTemporaryRenderIcon(renderer.getIcon(Blocks.hopper.getDefaultState())[0]);
  renderer.setRenderBounds(Point2 + xOff,bottom + yOff,Point2 + zOff,Point13 + xOff,top + yOff,Point3 + zOff);
  boolean out=renderer.renderStandardBlock(block,pos);
  renderer.setRenderBounds(Point2 + xOff,bottom + yOff,Point12 + zOff,Point13 + xOff,top + yOff,Point13 + zOff);
  renderer.renderStandardBlock(block,pos);
  renderer.setRenderBounds(Point2 + xOff,bottom + yOff,Point3 + zOff,Point3 + xOff,top + yOff,Point12 + zOff);
  renderer.renderStandardBlock(block,pos);
  renderer.setRenderBounds(Point12 + xOff,bottom + yOff,Point3 + zOff,Point13 + xOff,top + yOff,Point12 + zOff);
  renderer.renderStandardBlock(block,pos);
  if (te != null) {
    AEPartLocation forward=AEPartLocation.fromFacing(te.getUp());
switch (forward) {
case EAST:
      renderer.setRenderBounds(0,bottom + yOff,bottom + zOff,Point2 + xOff,top + yOff,top + zOff);
    renderer.renderStandardBlock(block,pos);
  break;
case WEST:
renderer.setRenderBounds(Point13 + xOff,bottom + yOff,bottom + zOff,1.0,top + yOff,top + zOff);
renderer.renderStandardBlock(block,pos);
break;
case NORTH:
renderer.setRenderBounds(bottom + xOff,bottom + yOff,Point13 + zOff,top + xOff,top + yOff,1.0);
renderer.renderStandardBlock(block,pos);
break;
case SOUTH:
renderer.setRenderBounds(bottom + xOff,bottom + yOff,0,top + xOff,top + yOff,Point2 + zOff);
renderer.renderStandardBlock(block,pos);
break;
case UP:
renderer.setRenderBounds(Point2,0,Point2,Point3,bottom + yOff,Point3);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point2,0,Point12,Point3,bottom + yOff,Point13);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point12,0,Point2,Point13,bottom + yOff,Point3);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point12,0,Point12,Point13,bottom + yOff,Point13);
renderer.renderStandardBlock(block,pos);
break;
case DOWN:
renderer.setRenderBounds(Point2,top + yOff,Point2,Point3,1.0,Point3);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point2,top + yOff,Point12,Point3,1.0,Point13);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point12,top + yOff,Point2,Point13,1.0,Point3);
renderer.renderStandardBlock(block,pos);
renderer.setRenderBounds(Point12,top + yOff,Point12,Point13,1.0,Point13);
renderer.renderStandardBlock(block,pos);
break;
default :
}
}
renderer.renderAllFaces=false;
block.getRendererInstance().setTemporaryRenderIcon(null);
return out;
}"
30509,"@Override public boolean isSameAs(IBlockAccess world,int x,int y,int z){
  return false;
}","@Override public boolean isSameAs(ItemStack comparableStack){
  if (comparableStack == null) {
    return false;
  }
  return this.isEnabled() && comparableStack.getItem() == this.source.get().getItem() && comparableStack.getItemDamage() == this.source.get().getDamage();
}"
30510,"@Override public boolean isSameAs(IBlockAccess world,int x,int y,int z){
  return false;
}","@Override public final boolean isSameAs(ItemStack comparableStack){
  return this.isEnabled() && Platform.isSameItemType(comparableStack,this.maybeStack(1).get());
}"
30511,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + this.part + ""String_Node_Str""+ this.variant+ ""String_Node_Str""+ this.ico+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + this.part + ""String_Node_Str""+ this.variant+ '}';
}"
30512,"/** 
 * Check for a controller at this coordinates as well as is it loaded.
 * @return true if there is a loaded controller
 */
private boolean checkController(BlockPos pos){
  if (this.worldObj.getChunkProvider().chunkExists(this.xCoord >> 4,this.zCoord >> 4)) {
    return this.worldObj.getTileEntity(pos) instanceof TileController;
  }
  return false;
}","/** 
 * Check for a controller at this coordinates as well as is it loaded.
 * @return true if there is a loaded controller
 */
private boolean checkController(BlockPos pos){
  final BlockPos ownPos=this.getPos();
  if (this.worldObj.getChunkProvider().chunkExists(ownPos.getX() >> 4,ownPos.getZ() >> 4)) {
    return this.worldObj.getTileEntity(pos) instanceof TileController;
  }
  return false;
}"
30513,"protected void bindPlayerInventory(InventoryPlayer inventoryPlayer,int offset_x,int offset_y){
  for (int i=0; i < 9; i++) {
    if (this.locked.contains(i))     this.addSlotToContainer(new SlotDisabled(inventoryPlayer,i,8 + i * 18 + offset_x,58 + offset_y));
 else     this.addSlotToContainer(new SlotPlayerHotBar(inventoryPlayer,i,8 + i * 18 + offset_x,58 + offset_y));
  }
  for (int i=0; i < 3; i++) {
    for (int j=0; j < 9; j++) {
      if (this.locked.contains(j + i * 9 + 9))       this.addSlotToContainer(new SlotDisabled(inventoryPlayer,j + i * 9 + 9,8 + j * 18 + offset_x,offset_y + i * 18));
 else       this.addSlotToContainer(new SlotPlayerInv(inventoryPlayer,j + i * 9 + 9,8 + j * 18 + offset_x,offset_y + i * 18));
    }
  }
}","protected void bindPlayerInventory(InventoryPlayer inventoryPlayer,int offset_x,int offset_y){
  for (int i=0; i < 3; i++) {
    for (int j=0; j < 9; j++) {
      if (this.locked.contains(j + i * 9 + 9))       this.addSlotToContainer(new SlotDisabled(inventoryPlayer,j + i * 9 + 9,8 + j * 18 + offset_x,offset_y + i * 18));
 else       this.addSlotToContainer(new SlotPlayerInv(inventoryPlayer,j + i * 9 + 9,8 + j * 18 + offset_x,offset_y + i * 18));
    }
  }
  for (int i=0; i < 9; i++) {
    if (this.locked.contains(i))     this.addSlotToContainer(new SlotDisabled(inventoryPlayer,i,8 + i * 18 + offset_x,58 + offset_y));
 else     this.addSlotToContainer(new SlotPlayerHotBar(inventoryPlayer,i,8 + i * 18 + offset_x,58 + offset_y));
  }
}"
30514,"public GuiMEPortableCell(InventoryPlayer inventoryPlayer,IPortableCell te){
  super(inventoryPlayer,te,new ContainerMEPortableCell(inventoryPlayer,null));
}","public GuiMEPortableCell(InventoryPlayer inventoryPlayer,IPortableCell te){
  super(inventoryPlayer,te,new ContainerMEPortableCell(inventoryPlayer,te));
}"
30515,"@Override public void detectAndSendChanges(){
  ItemStack currentItem=this.getPlayerInv().getCurrentItem();
  if (this.civ != null) {
    if (currentItem != this.civ.getItemStack()) {
      if (currentItem != null) {
        if (Platform.isSameItem(this.civ.getItemStack(),currentItem))         this.getPlayerInv().setInventorySlotContents(this.getPlayerInv().currentItem,this.civ.getItemStack());
 else         this.isContainerValid=false;
      }
 else       this.isContainerValid=false;
    }
  }
 else   this.isContainerValid=false;
  this.ticks++;
  if (this.ticks > 10) {
    this.civ.extractAEPower(this.powerMultiplier * this.ticks,Actionable.MODULATE,PowerMultiplier.CONFIG);
    this.ticks=0;
  }
  super.detectAndSendChanges();
}","@Override public void detectAndSendChanges(){
  ItemStack currentItem=slot < 0 ? this.getPlayerInv().getCurrentItem() : this.getPlayerInv().getStackInSlot(slot);
  if (this.civ != null) {
    if (currentItem != this.civ.getItemStack()) {
      if (currentItem != null) {
        if (Platform.isSameItem(this.civ.getItemStack(),currentItem))         this.getPlayerInv().setInventorySlotContents(this.getPlayerInv().currentItem,this.civ.getItemStack());
 else         this.isContainerValid=false;
      }
 else       this.isContainerValid=false;
    }
  }
 else   this.isContainerValid=false;
  this.ticks++;
  if (this.ticks > 10) {
    this.civ.extractAEPower(this.powerMultiplier * this.ticks,Actionable.MODULATE,PowerMultiplier.CONFIG);
    this.ticks=0;
  }
  super.detectAndSendChanges();
}"
30516,"public ContainerMEPortableCell(InventoryPlayer ip,IPortableCell monitorable){
  super(ip,monitorable,false);
  this.lockPlayerInventorySlot(ip.currentItem);
  this.civ=monitorable;
  this.bindPlayerInventory(ip,0,0);
}","public ContainerMEPortableCell(InventoryPlayer ip,IPortableCell monitorable){
  super(ip,monitorable,false);
  if (monitorable instanceof IInventorySlotAware) {
    int slotIndex=((IInventorySlotAware)monitorable).getInventorySlot();
    this.lockPlayerInventorySlot(slotIndex);
    this.slot=slotIndex;
  }
 else {
    this.slot=-1;
    this.lockPlayerInventorySlot(ip.currentItem);
  }
  this.civ=monitorable;
  this.bindPlayerInventory(ip,0,0);
}"
30517,"public WirelessTerminalGuiObject(IWirelessTermHandler wh,ItemStack is,EntityPlayer ep,World w,int x,int y,int z){
  this.encryptionKey=wh.getEncryptionKey(is);
  this.effectiveItem=is;
  this.myPlayer=ep;
  this.wth=wh;
  ILocatable obj=null;
  try {
    long encKey=Long.parseLong(this.encryptionKey);
    obj=AEApi.instance().registries().locatable().getLocatableBy(encKey);
  }
 catch (  NumberFormatException err) {
  }
  if (obj instanceof IGridHost) {
    IGridNode n=((IGridHost)obj).getGridNode(ForgeDirection.UNKNOWN);
    if (n != null) {
      this.targetGrid=n.getGrid();
      if (this.targetGrid != null) {
        this.sg=this.targetGrid.getCache(IStorageGrid.class);
        if (this.sg != null)         this.itemStorage=this.sg.getItemInventory();
      }
    }
  }
}","public WirelessTerminalGuiObject(IWirelessTermHandler wh,ItemStack is,EntityPlayer ep,World w,int x,int y,int z){
  this.encryptionKey=wh.getEncryptionKey(is);
  this.effectiveItem=is;
  this.myPlayer=ep;
  this.wth=wh;
  this.inventorySlot=x;
  ILocatable obj=null;
  try {
    long encKey=Long.parseLong(this.encryptionKey);
    obj=AEApi.instance().registries().locatable().getLocatableBy(encKey);
  }
 catch (  NumberFormatException err) {
  }
  if (obj instanceof IGridHost) {
    IGridNode n=((IGridHost)obj).getGridNode(ForgeDirection.UNKNOWN);
    if (n != null) {
      this.targetGrid=n.getGrid();
      if (this.targetGrid != null) {
        this.sg=this.targetGrid.getCache(IStorageGrid.class);
        if (this.sg != null)         this.itemStorage=this.sg.getItemInventory();
      }
    }
  }
}"
30518,"public PortableCellViewer(ItemStack is){
  super(CellInventory.getCell(is,null));
  this.ips=(IAEItemPowerStorage)is.getItem();
  this.target=is;
}","public PortableCellViewer(ItemStack is,int slot){
  super(CellInventory.getCell(is,null));
  this.ips=(IAEItemPowerStorage)is.getItem();
  this.target=is;
  this.inventorySlot=slot;
}"
30519,"@Override public IGuiItemObject getGuiObject(ItemStack is,World w,int x,int y,int z){
  return new PortableCellViewer(is);
}","@Override public IGuiItemObject getGuiObject(ItemStack is,World w,int x,int y,int z){
  return new PortableCellViewer(is,x);
}"
30520,"public static void openGUI(EntityPlayer p,TileEntity tile,ForgeDirection side,GuiBridge type){
  if (isClient())   return;
  int x=(int)p.posX;
  int y=(int)p.posY;
  int z=(int)p.posZ;
  if (tile != null) {
    x=tile.xCoord;
    y=tile.yCoord;
    z=tile.zCoord;
  }
  if ((type.getType().isItem() && tile == null) || type.hasPermissions(tile,x,y,z,side,p)) {
    if (tile == null || type.getType() == GuiHostType.ITEM)     p.openGui(AppEng.instance,type.ordinal() << 4 | (1 << 3),p.getEntityWorld(),x,y,z);
 else     p.openGui(AppEng.instance,type.ordinal() << 4 | (side.ordinal()),tile.getWorldObj(),x,y,z);
  }
}","public static void openGUI(EntityPlayer p,TileEntity tile,ForgeDirection side,GuiBridge type){
  if (isClient())   return;
  int x=(int)p.posX;
  int y=(int)p.posY;
  int z=(int)p.posZ;
  if (tile != null) {
    x=tile.xCoord;
    y=tile.yCoord;
    z=tile.zCoord;
  }
  if ((type.getType().isItem() && tile == null) || type.hasPermissions(tile,x,y,z,side,p)) {
    if (tile != null && type.getType() == GuiHostType.ITEM)     p.openGui(AppEng.instance,type.ordinal() << 4 | (1 << 3),p.getEntityWorld(),x,y,z);
 else     if (tile == null && type.getType() == GuiHostType.ITEM)     p.openGui(AppEng.instance,type.ordinal() << 4 | (0 << 3),p.getEntityWorld(),p.inventory.currentItem,0,0);
 else     p.openGui(AppEng.instance,type.ordinal() << 4 | (side.ordinal()),tile.getWorldObj(),x,y,z);
  }
}"
30521,"@Override public IAEFluidStack injectItems(IAEFluidStack input,Actionable mode,BaseActionSource src){
  if (input != null)   target.addPower(input.getStackSize() / 1000.0);
  return null;
}","@Override public IAEFluidStack injectItems(IAEFluidStack input,Actionable mode,BaseActionSource src){
  if (mode == Actionable.SIMULATE)   return null;
  if (input != null)   target.addPower(input.getStackSize() / 1000.0);
  return null;
}"
30522,"@Override public IAEItemStack injectItems(IAEItemStack input,Actionable mode,BaseActionSource src){
  if (input != null)   target.addPower(input.getStackSize());
  return null;
}","@Override public IAEItemStack injectItems(IAEItemStack input,Actionable mode,BaseActionSource src){
  if (mode == Actionable.SIMULATE)   return null;
  if (input != null)   target.addPower(input.getStackSize());
  return null;
}"
30523,"private <T>T[] shrink(T[] in,boolean parts){
  int newSize=0;
  for (int x=0; x < in.length; x++)   if (in[x] != null)   newSize=x;
  if (newSize == 0)   return null;
  newSize++;
  if (newSize == in.length)   return in;
  T[] newArray=(T[])(parts ? new IPart[newSize] : new IFacadePart[newSize]);
  System.arraycopy(in,0,newArray,0,newSize);
  return newArray;
}","private <T>T[] shrink(T[] in,boolean parts){
  int newSize=-1;
  for (int x=0; x < in.length; x++)   if (in[x] != null)   newSize=x;
  if (newSize == -1)   return null;
  newSize++;
  if (newSize == in.length)   return in;
  T[] newArray=(T[])(parts ? new IPart[newSize] : new IFacadePart[newSize]);
  System.arraycopy(in,0,newArray,0,newSize);
  return newArray;
}"
30524,"private void checkInterfaceVsStorageBus(TileEntity target,ForgeDirection side){
  IInterfaceHost achievement=null;
  if (target instanceof IInterfaceHost)   achievement=(IInterfaceHost)target;
  if (target instanceof IPartHost) {
    Object part=((IPartHost)target).getPart(side);
    if (part instanceof IInterfaceHost)     achievement=(IInterfaceHost)part;
  }
  if (achievement != null) {
    Platform.addStat(achievement.getActionableNode().getPlayerID(),Achievements.Recursive.getAchievement());
    Platform.addStat(getActionableNode().getPlayerID(),Achievements.Recursive.getAchievement());
  }
}","private void checkInterfaceVsStorageBus(TileEntity target,ForgeDirection side){
  IInterfaceHost achievement=null;
  if (target instanceof IInterfaceHost)   achievement=(IInterfaceHost)target;
  if (target instanceof IPartHost) {
    Object part=((IPartHost)target).getPart(side);
    if (part instanceof IInterfaceHost)     achievement=(IInterfaceHost)part;
  }
  if (achievement != null) {
    Platform.addStat(achievement.getActionableNode().getPlayerID(),Achievements.Recursive.getAchievement());
  }
}"
30525,"@Override public ItemStack addItems(ItemStack A){
  if (A == null)   return null;
  if (A.stackSize == 0)   return null;
  if (p == null)   return A;
  if (p.inventory == null)   return A;
  ItemStack hand=p.inventory.getItemStack();
  if (hand != null && !Platform.isSameItem(A,hand))   return A;
  int original=0;
  ItemStack newHand=null;
  if (hand == null)   newHand=A.copy();
 else {
    newHand=hand;
    original=hand.stackSize;
    newHand.stackSize+=A.stackSize;
  }
  if (newHand.stackSize > newHand.getMaxStackSize()) {
    newHand.stackSize=newHand.getMaxStackSize();
    ItemStack B=A.copy();
    B.stackSize-=newHand.stackSize - original;
    p.inventory.setItemStack(newHand);
    return B;
  }
  p.inventory.setItemStack(newHand);
  return null;
}","@Override public ItemStack addItems(ItemStack A){
  if (A == null)   return null;
  if (A.stackSize == 0)   return null;
  if (p == null)   return A;
  if (p.inventory == null)   return A;
  ItemStack hand=p.inventory.getItemStack();
  if (hand != null && !Platform.isSameItemPrecise(A,hand))   return A;
  int original=0;
  ItemStack newHand=null;
  if (hand == null)   newHand=A.copy();
 else {
    newHand=hand;
    original=hand.stackSize;
    newHand.stackSize+=A.stackSize;
  }
  if (newHand.stackSize > newHand.getMaxStackSize()) {
    newHand.stackSize=newHand.getMaxStackSize();
    ItemStack B=A.copy();
    B.stackSize-=newHand.stackSize - original;
    p.inventory.setItemStack(newHand);
    return B;
  }
  p.inventory.setItemStack(newHand);
  return null;
}"
30526,"@Override public byte[] transform(String name,String transformedName,byte[] basicClass){
  if (basicClass == null)   return basicClass;
  try {
    if (transformedName != null && privateToPublicMethods.containsKey(transformedName)) {
      ClassNode classNode=new ClassNode();
      ClassReader classReader=new ClassReader(basicClass);
      classReader.accept(classNode,0);
      for (      publicLine Set : privateToPublicMethods.get(transformedName)) {
        makePublic(classNode,Set);
      }
      if (transformedName.equals(""String_Node_Str"")) {
        for (        MethodNode mn : classNode.methods) {
          if (mn.name.equals(""String_Node_Str"") || (mn.name.equals(""String_Node_Str"") && mn.desc.equals(""String_Node_Str""))) {
            MethodNode newNode=new MethodNode(Opcodes.ACC_PUBLIC,""String_Node_Str"",mn.desc,mn.signature,new String[0]);
            newNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));
            newNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));
            newNode.instructions.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,classNode.name,mn.name,mn.desc,false));
            newNode.instructions.add(new InsnNode(Opcodes.RETURN));
            log(newNode.name + newNode.desc + ""String_Node_Str"");
            classNode.methods.add(newNode);
            break;
          }
        }
        for (        MethodNode mn : classNode.methods) {
          if (mn.name.equals(""String_Node_Str"") || mn.name.equals(""String_Node_Str"") || (mn.name.equals(""String_Node_Str"") && mn.desc.equals(""String_Node_Str""))) {
            Iterator<AbstractInsnNode> i=mn.instructions.iterator();
            while (i.hasNext()) {
              AbstractInsnNode in=i.next();
              if (in.getOpcode() == Opcodes.INVOKESPECIAL) {
                MethodInsnNode n=(MethodInsnNode)in;
                if (n.name.equals(""String_Node_Str"") || (n.name.equals(""String_Node_Str"") && n.desc.equals(""String_Node_Str""))) {
                  log(n.name + n.desc + ""String_Node_Str"");
                  mn.instructions.insertBefore(n,new MethodInsnNode(Opcodes.INVOKEVIRTUAL,n.owner,n.name,n.desc,false));
                  mn.instructions.remove(in);
                  break;
                }
              }
            }
          }
        }
      }
      ClassWriter writer=new ClassWriter(ClassWriter.COMPUTE_MAXS);
      classNode.accept(writer);
      return writer.toByteArray();
    }
  }
 catch (  Throwable t) {
  }
  return basicClass;
}","@Override public byte[] transform(String name,String transformedName,byte[] basicClass){
  if (basicClass == null)   return basicClass;
  try {
    if (transformedName != null && privateToPublicMethods.containsKey(transformedName)) {
      ClassNode classNode=new ClassNode();
      ClassReader classReader=new ClassReader(basicClass);
      classReader.accept(classNode,0);
      for (      publicLine Set : privateToPublicMethods.get(transformedName)) {
        makePublic(classNode,Set);
      }
      if (transformedName.equals(""String_Node_Str"")) {
        for (        MethodNode mn : classNode.methods) {
          if (mn.name.equals(""String_Node_Str"") || (mn.name.equals(""String_Node_Str"") && mn.desc.equals(""String_Node_Str""))) {
            MethodNode newNode=new MethodNode(Opcodes.ACC_PUBLIC,""String_Node_Str"",mn.desc,mn.signature,new String[0]);
            newNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));
            newNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));
            newNode.instructions.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,classNode.name,mn.name,mn.desc));
            newNode.instructions.add(new InsnNode(Opcodes.RETURN));
            log(newNode.name + newNode.desc + ""String_Node_Str"");
            classNode.methods.add(newNode);
            break;
          }
        }
        for (        MethodNode mn : classNode.methods) {
          if (mn.name.equals(""String_Node_Str"") || mn.name.equals(""String_Node_Str"") || (mn.name.equals(""String_Node_Str"") && mn.desc.equals(""String_Node_Str""))) {
            Iterator<AbstractInsnNode> i=mn.instructions.iterator();
            while (i.hasNext()) {
              AbstractInsnNode in=i.next();
              if (in.getOpcode() == Opcodes.INVOKESPECIAL) {
                MethodInsnNode n=(MethodInsnNode)in;
                if (n.name.equals(""String_Node_Str"") || (n.name.equals(""String_Node_Str"") && n.desc.equals(""String_Node_Str""))) {
                  log(n.name + n.desc + ""String_Node_Str"");
                  mn.instructions.insertBefore(n,new MethodInsnNode(Opcodes.INVOKEVIRTUAL,n.owner,n.name,n.desc));
                  mn.instructions.remove(in);
                  break;
                }
              }
            }
          }
        }
      }
      ClassWriter writer=new ClassWriter(ClassWriter.COMPUTE_MAXS);
      classNode.accept(writer);
      return writer.toByteArray();
    }
  }
 catch (  Throwable t) {
  }
  return basicClass;
}"
30527,"@Override public boolean onActivated(World w,int x,int y,int z,EntityPlayer p,int side,float hitX,float hitY,float hitZ){
  TileChest tg=getTileEntity(w,x,y,z);
  if (tg != null && !p.isSneaking()) {
    if (Platform.isClient())     return true;
    if (side != tg.getUp().ordinal()) {
      Platform.openGUI(p,tg,ForgeDirection.getOrientation(side),GuiBridge.GUI_CHEST);
    }
 else {
      ItemStack cell=tg.getStackInSlot(1);
      if (cell != null) {
        ICellHandler ch=AEApi.instance().registries().cell().getHandler(cell);
        tg.openGui(p,ch,cell,side);
      }
 else       p.addChatMessage(PlayerMessages.ChestCannotReadStorageCell.get());
    }
    return true;
  }
  return false;
}","@Override public boolean onActivated(World w,int x,int y,int z,EntityPlayer p,int side,float hitX,float hitY,float hitZ){
  TileChest tg=getTileEntity(w,x,y,z);
  if (tg != null && !p.isSneaking()) {
    if (Platform.isClient())     return true;
    if (side != tg.getUp().ordinal()) {
      Platform.openGUI(p,tg,ForgeDirection.getOrientation(side),GuiBridge.GUI_CHEST);
    }
 else {
      ItemStack cell=tg.getStackInSlot(1);
      if (cell != null) {
        ICellHandler ch=AEApi.instance().registries().cell().getHandler(cell);
        if (GuiBridge.GUI_CHEST.hasPermissions(tg,x,y,z,ForgeDirection.values()[side],p)) {
          tg.openGui(p,ch,cell,side);
        }
      }
 else       p.addChatMessage(PlayerMessages.ChestCannotReadStorageCell.get());
    }
    return true;
  }
  return false;
}"
30528,"@Override public boolean onActivated(World w,int x,int y,int z,EntityPlayer p,int side,float hitX,float hitY,float hitZ){
  TileChest tg=getTileEntity(w,x,y,z);
  if (tg != null && !p.isSneaking()) {
    if (Platform.isClient())     return true;
    if (side != tg.getUp().ordinal()) {
      Platform.openGUI(p,tg,ForgeDirection.getOrientation(side),GuiBridge.GUI_CHEST);
    }
 else {
      ItemStack cell=tg.getStackInSlot(1);
      if (cell != null) {
        ICellHandler ch=AEApi.instance().registries().cell().getHandler(cell);
        if (GuiBridge.GUI_CHEST.hasPermissions(tg,x,y,z,ForgeDirection.values()[side],p)) {
          tg.openGui(p,ch,cell,side);
        }
      }
 else       p.addChatMessage(PlayerMessages.ChestCannotReadStorageCell.get());
    }
    return true;
  }
  return false;
}","@Override public boolean onActivated(World w,int x,int y,int z,EntityPlayer p,int side,float hitX,float hitY,float hitZ){
  TileChest tg=getTileEntity(w,x,y,z);
  if (tg != null && !p.isSneaking()) {
    if (Platform.isClient())     return true;
    if (side != tg.getUp().ordinal()) {
      Platform.openGUI(p,tg,ForgeDirection.getOrientation(side),GuiBridge.GUI_CHEST);
    }
 else {
      ItemStack cell=tg.getStackInSlot(1);
      if (cell != null) {
        ICellHandler ch=AEApi.instance().registries().cell().getHandler(cell);
        tg.openGui(p,ch,cell,side);
      }
 else       p.addChatMessage(PlayerMessages.ChestCannotReadStorageCell.get());
    }
    return true;
  }
  return false;
}"
30529,"@Override protected void handleMouseClick(Slot slot,int slotIdx,int ctrlDown,int key){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (slot instanceof SlotFake) {
    InventoryAction action=null;
    action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (slot instanceof SlotPatternTerm) {
    if (key == 6)     return;
    try {
      NetworkHandler.instance.sendToServer(((SlotPatternTerm)slot).getRequest(key == 1));
    }
 catch (    IOException e) {
      AELog.error(e);
    }
  }
 else   if (slot instanceof SlotCraftingTerm) {
    if (key == 6)     return;
    InventoryAction action=null;
    if (key == 1)     action=InventoryAction.CRAFT_SHIFT;
 else     action=ctrlDown == 1 ? InventoryAction.CRAFT_STACK : InventoryAction.CRAFT_ITEM;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
    if (enableSpaceClicking()) {
      IAEItemStack stack=null;
      if (slot instanceof SlotME)       stack=((SlotME)slot).getAEStack();
      try {
        int slotNum=inventorySlots.inventorySlots.size();
        if (!(slot instanceof SlotME) && slot != null)         slotNum=slot.slotNumber;
        ((AEBaseContainer)inventorySlots).setTargetStack(stack);
        PacketInventoryAction p=new PacketInventoryAction(InventoryAction.MOVE_REGION,slotNum,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
      return;
    }
  }
  if (slot instanceof SlotDisconnected) {
    InventoryAction action=null;
switch (key) {
case 0:
      action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    break;
case 1:
  action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
break;
case 3:
if (player.capabilities.isCreativeMode) {
action=InventoryAction.CREATIVE_DUPLICATE;
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
PacketInventoryAction p=new PacketInventoryAction(action,slot.getSlotIndex(),((SlotDisconnected)slot).mySlot.id);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
if (slot instanceof SlotME) {
InventoryAction action=null;
IAEItemStack stack=null;
switch (key) {
case 0:
action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
stack=((SlotME)slot).getAEStack();
if (stack != null && action == InventoryAction.PICKUP_OR_SETDOWN && stack.getStackSize() == 0 && player.inventory.getItemStack() == null) action=InventoryAction.AUTOCRAFT;
break;
case 1:
action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
stack=((SlotME)slot).getAEStack();
break;
case 3:
stack=((SlotME)slot).getAEStack();
if (stack != null && stack.isCraftable()) action=InventoryAction.AUTOCRAFT;
 else if (player.capabilities.isCreativeMode) {
IAEItemStack slotItem=((SlotME)slot).getAEStack();
if (slotItem != null) {
action=InventoryAction.CREATIVE_DUPLICATE;
}
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
((AEBaseContainer)inventorySlots).setTargetStack(stack);
PacketInventoryAction p=new PacketInventoryAction(action,inventorySlots.inventorySlots.size(),0);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
if (disableShiftClick == false && isShiftKeyDown()) {
disableShiftClick=true;
if (dbl_whichItem == null || bl_clicked != slot || dbl_clickTimer.elapsed(TimeUnit.MILLISECONDS) > 150) {
bl_clicked=slot;
dbl_clickTimer=Stopwatch.createStarted();
if (slot != null) dbl_whichItem=slot.getHasStack() ? slot.getStack().copy() : null;
 else dbl_whichItem=null;
}
 else if (dbl_whichItem != null) {
Iterator iterator=this.inventorySlots.inventorySlots.iterator();
while (iterator.hasNext()) {
Slot targetSlot=(Slot)iterator.next();
if (targetSlot != null && targetSlot.canTakeStack(this.mc.thePlayer) && targetSlot.getHasStack() && targetSlot.inventory == slot.inventory && Container.func_94527_a(targetSlot,dbl_whichItem,true)) {
this.handleMouseClick(targetSlot,targetSlot.slotNumber,ctrlDown,1);
}
}
}
disableShiftClick=false;
}
super.handleMouseClick(slot,slotIdx,ctrlDown,key);
}","@Override protected void handleMouseClick(Slot slot,int slotIdx,int ctrlDown,int key){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (slot instanceof SlotFake) {
    InventoryAction action=null;
    action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    if (drag_click.size() > 1)     return;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (slot instanceof SlotPatternTerm) {
    if (key == 6)     return;
    try {
      NetworkHandler.instance.sendToServer(((SlotPatternTerm)slot).getRequest(key == 1));
    }
 catch (    IOException e) {
      AELog.error(e);
    }
  }
 else   if (slot instanceof SlotCraftingTerm) {
    if (key == 6)     return;
    InventoryAction action=null;
    if (key == 1)     action=InventoryAction.CRAFT_SHIFT;
 else     action=ctrlDown == 1 ? InventoryAction.CRAFT_STACK : InventoryAction.CRAFT_ITEM;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
    if (enableSpaceClicking()) {
      IAEItemStack stack=null;
      if (slot instanceof SlotME)       stack=((SlotME)slot).getAEStack();
      try {
        int slotNum=inventorySlots.inventorySlots.size();
        if (!(slot instanceof SlotME) && slot != null)         slotNum=slot.slotNumber;
        ((AEBaseContainer)inventorySlots).setTargetStack(stack);
        PacketInventoryAction p=new PacketInventoryAction(InventoryAction.MOVE_REGION,slotNum,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
      return;
    }
  }
  if (slot instanceof SlotDisconnected) {
    InventoryAction action=null;
switch (key) {
case 0:
      action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    break;
case 1:
  action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
break;
case 3:
if (player.capabilities.isCreativeMode) {
action=InventoryAction.CREATIVE_DUPLICATE;
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
PacketInventoryAction p=new PacketInventoryAction(action,slot.getSlotIndex(),((SlotDisconnected)slot).mySlot.id);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
if (slot instanceof SlotME) {
InventoryAction action=null;
IAEItemStack stack=null;
switch (key) {
case 0:
action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
stack=((SlotME)slot).getAEStack();
if (stack != null && action == InventoryAction.PICKUP_OR_SETDOWN && stack.getStackSize() == 0 && player.inventory.getItemStack() == null) action=InventoryAction.AUTOCRAFT;
break;
case 1:
action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
stack=((SlotME)slot).getAEStack();
break;
case 3:
stack=((SlotME)slot).getAEStack();
if (stack != null && stack.isCraftable()) action=InventoryAction.AUTOCRAFT;
 else if (player.capabilities.isCreativeMode) {
IAEItemStack slotItem=((SlotME)slot).getAEStack();
if (slotItem != null) {
action=InventoryAction.CREATIVE_DUPLICATE;
}
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
((AEBaseContainer)inventorySlots).setTargetStack(stack);
PacketInventoryAction p=new PacketInventoryAction(action,inventorySlots.inventorySlots.size(),0);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
if (disableShiftClick == false && isShiftKeyDown()) {
disableShiftClick=true;
if (dbl_whichItem == null || bl_clicked != slot || dbl_clickTimer.elapsed(TimeUnit.MILLISECONDS) > 150) {
bl_clicked=slot;
dbl_clickTimer=Stopwatch.createStarted();
if (slot != null) dbl_whichItem=slot.getHasStack() ? slot.getStack().copy() : null;
 else dbl_whichItem=null;
}
 else if (dbl_whichItem != null) {
Iterator iterator=this.inventorySlots.inventorySlots.iterator();
while (iterator.hasNext()) {
Slot targetSlot=(Slot)iterator.next();
if (targetSlot != null && targetSlot.canTakeStack(this.mc.thePlayer) && targetSlot.getHasStack() && targetSlot.inventory == slot.inventory && Container.func_94527_a(targetSlot,dbl_whichItem,true)) {
this.handleMouseClick(targetSlot,targetSlot.slotNumber,ctrlDown,1);
}
}
}
disableShiftClick=false;
}
super.handleMouseClick(slot,slotIdx,ctrlDown,key);
}"
30530,"protected void mouseClickMove(int x,int y,int c,long d){
  Slot slot=this.getSlot(x,y);
  ItemStack itemstack=this.mc.thePlayer.inventory.getItemStack();
  if (slot instanceof SlotFake && itemstack != null) {
    if (c == 0) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(InventoryAction.PICKUP_OR_SETDOWN,slot.slotNumber,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
  }
 else   super.mouseClickMove(x,y,c,d);
}","protected void mouseClickMove(int x,int y,int c,long d){
  Slot slot=this.getSlot(x,y);
  ItemStack itemstack=this.mc.thePlayer.inventory.getItemStack();
  if (slot instanceof SlotFake && itemstack != null) {
    drag_click.add(slot);
    if (drag_click.size() > 1) {
      try {
        for (        Slot dr : drag_click) {
          PacketInventoryAction p=new PacketInventoryAction(c == 0 ? InventoryAction.PICKUP_OR_SETDOWN : InventoryAction.PLACE_SINGLE,dr.slotNumber,0);
          NetworkHandler.instance.sendToServer(p);
        }
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
  }
 else   super.mouseClickMove(x,y,c,d);
}"
30531,"@Override protected void mouseClicked(int xCoord,int yCoord,int btn){
  if (btn == 1) {
    for (    Object o : this.buttonList) {
      GuiButton guibutton=(GuiButton)o;
      if (guibutton.mousePressed(this.mc,xCoord,yCoord)) {
        super.mouseClicked(xCoord,yCoord,0);
        return;
      }
    }
  }
  super.mouseClicked(xCoord,yCoord,btn);
}","@Override protected void mouseClicked(int xCoord,int yCoord,int btn){
  drag_click.clear();
  if (btn == 1) {
    for (    Object o : this.buttonList) {
      GuiButton guibutton=(GuiButton)o;
      if (guibutton.mousePressed(this.mc,xCoord,yCoord)) {
        super.mouseClicked(xCoord,yCoord,0);
        return;
      }
    }
  }
  super.mouseClicked(xCoord,yCoord,btn);
}"
30532,"public void doAction(EntityPlayerMP player,InventoryAction action,int slot,long id){
  if (slot >= 0 && slot < inventorySlots.size()) {
    Slot s=getSlot(slot);
    if (s instanceof SlotCraftingTerm) {
switch (action) {
case CRAFT_SHIFT:
case CRAFT_ITEM:
case CRAFT_STACK:
        ((SlotCraftingTerm)s).doClick(action,player);
      updateHeld(player);
default :
  }
}
if (s instanceof SlotFake) {
  ItemStack hand=player.inventory.getItemStack();
switch (action) {
case PICKUP_OR_SETDOWN:
    if (hand == null)     s.putStack(null);
 else     s.putStack(hand.copy());
  break;
case SPLIT_OR_PLACESINGLE:
ItemStack is=s.getStack();
if (is != null) {
if (hand == null) is.stackSize--;
 else if (hand.isItemEqual(is)) is.stackSize=Math.min(is.getMaxStackSize(),is.stackSize + 1);
 else {
  is=hand.copy();
  is.stackSize=1;
}
s.putStack(is);
}
 else if (hand != null) {
is=hand.copy();
is.stackSize=1;
s.putStack(is);
}
break;
case CREATIVE_DUPLICATE:
case MOVE_REGION:
case SHIFT_CLICK:
default :
break;
}
}
if (action == InventoryAction.MOVE_REGION) {
List<Slot> from=new LinkedList();
for (Object j : inventorySlots) {
if (j instanceof Slot && j.getClass() == s.getClass()) from.add((Slot)j);
}
for (Slot fr : from) transferStackInSlot(player,fr.slotNumber);
}
return;
}
IAEItemStack slotItem=getTargetStack();
switch (action) {
case SHIFT_CLICK:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
}
break;
case ROLLDOWN:
if (powerSrc == null || cellInv == null) return;
int releaseQty=1;
ItemStack isg=player.inventory.getItemStack();
if (isg != null && releaseQty > 0) {
IAEItemStack ais=AEApi.instance().storage().createItemStack(isg);
ais.setStackSize(1);
IAEItemStack extracted=ais.copy();
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais == null) {
InventoryAdaptor ia=new AdaptorPlayerHand(player);
ItemStack fail=ia.removeItems(1,extracted.getItemStack(),null);
if (fail == null) cellInv.extractItems(extracted,Actionable.MODULATE,mySrc);
updateHeld(player);
}
}
break;
case ROLLUP:
case PICKUP_SINGLE:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
int liftQty=1;
ItemStack isgg=player.inventory.getItemStack();
if (isgg != null) {
if (isgg.stackSize >= isgg.getMaxStackSize()) liftQty=0;
if (!Platform.isSameItemPrecise(slotItem.getItemStack(),isgg)) liftQty=0;
}
if (liftQty > 0) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) {
InventoryAdaptor ia=new AdaptorPlayerHand(player);
ItemStack fail=ia.addItems(ais.getItemStack());
if (fail != null) cellInv.injectItems(ais,Actionable.MODULATE,mySrc);
updateHeld(player);
}
}
}
break;
case PICKUP_OR_SETDOWN:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(ais.getItemStack().getMaxStackSize());
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
break;
case SPLIT_OR_PLACESINGLE:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
long maxSize=ais.getItemStack().getMaxStackSize();
ais.setStackSize(maxSize);
ais=cellInv.extractItems(ais,Actionable.SIMULATE,mySrc);
if (ais != null) {
long stackSize=Math.min(maxSize,ais.getStackSize());
ais.setStackSize((stackSize + 1) >> 1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
}
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais.setStackSize(1);
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais == null) {
ItemStack is=player.inventory.getItemStack();
is.stackSize--;
if (is.stackSize <= 0) player.inventory.setItemStack(null);
updateHeld(player);
}
}
break;
case CREATIVE_DUPLICATE:
if (player.capabilities.isCreativeMode && slotItem != null) {
ItemStack is=slotItem.getItemStack();
is.stackSize=is.getMaxStackSize();
player.inventory.setItemStack(is);
updateHeld(player);
}
break;
case MOVE_REGION:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
int playerInv=9 * 4;
for (int slotNum=0; slotNum < playerInv; slotNum++) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
 else return;
}
}
break;
default :
break;
}
}","public void doAction(EntityPlayerMP player,InventoryAction action,int slot,long id){
  if (slot >= 0 && slot < inventorySlots.size()) {
    Slot s=getSlot(slot);
    if (s instanceof SlotCraftingTerm) {
switch (action) {
case CRAFT_SHIFT:
case CRAFT_ITEM:
case CRAFT_STACK:
        ((SlotCraftingTerm)s).doClick(action,player);
      updateHeld(player);
default :
  }
}
if (s instanceof SlotFake) {
  ItemStack hand=player.inventory.getItemStack();
switch (action) {
case PICKUP_OR_SETDOWN:
    if (hand == null)     s.putStack(null);
 else     s.putStack(hand.copy());
  break;
case PLACE_SINGLE:
if (hand != null) {
  ItemStack is=hand.copy();
  is.stackSize=1;
  s.putStack(is);
}
break;
case SPLIT_OR_PLACESINGLE:
ItemStack is=s.getStack();
if (is != null) {
if (hand == null) is.stackSize--;
 else if (hand.isItemEqual(is)) is.stackSize=Math.min(is.getMaxStackSize(),is.stackSize + 1);
 else {
is=hand.copy();
is.stackSize=1;
}
s.putStack(is);
}
 else if (hand != null) {
is=hand.copy();
is.stackSize=1;
s.putStack(is);
}
break;
case CREATIVE_DUPLICATE:
case MOVE_REGION:
case SHIFT_CLICK:
default :
break;
}
}
if (action == InventoryAction.MOVE_REGION) {
List<Slot> from=new LinkedList();
for (Object j : inventorySlots) {
if (j instanceof Slot && j.getClass() == s.getClass()) from.add((Slot)j);
}
for (Slot fr : from) transferStackInSlot(player,fr.slotNumber);
}
return;
}
IAEItemStack slotItem=getTargetStack();
switch (action) {
case SHIFT_CLICK:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
}
break;
case ROLLDOWN:
if (powerSrc == null || cellInv == null) return;
int releaseQty=1;
ItemStack isg=player.inventory.getItemStack();
if (isg != null && releaseQty > 0) {
IAEItemStack ais=AEApi.instance().storage().createItemStack(isg);
ais.setStackSize(1);
IAEItemStack extracted=ais.copy();
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais == null) {
InventoryAdaptor ia=new AdaptorPlayerHand(player);
ItemStack fail=ia.removeItems(1,extracted.getItemStack(),null);
if (fail == null) cellInv.extractItems(extracted,Actionable.MODULATE,mySrc);
updateHeld(player);
}
}
break;
case ROLLUP:
case PICKUP_SINGLE:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
int liftQty=1;
ItemStack isgg=player.inventory.getItemStack();
if (isgg != null) {
if (isgg.stackSize >= isgg.getMaxStackSize()) liftQty=0;
if (!Platform.isSameItemPrecise(slotItem.getItemStack(),isgg)) liftQty=0;
}
if (liftQty > 0) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) {
InventoryAdaptor ia=new AdaptorPlayerHand(player);
ItemStack fail=ia.addItems(ais.getItemStack());
if (fail != null) cellInv.injectItems(ais,Actionable.MODULATE,mySrc);
updateHeld(player);
}
}
}
break;
case PICKUP_OR_SETDOWN:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(ais.getItemStack().getMaxStackSize());
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
break;
case SPLIT_OR_PLACESINGLE:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
long maxSize=ais.getItemStack().getMaxStackSize();
ais.setStackSize(maxSize);
ais=cellInv.extractItems(ais,Actionable.SIMULATE,mySrc);
if (ais != null) {
long stackSize=Math.min(maxSize,ais.getStackSize());
ais.setStackSize((stackSize + 1) >> 1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
}
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais.setStackSize(1);
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais == null) {
ItemStack is=player.inventory.getItemStack();
is.stackSize--;
if (is.stackSize <= 0) player.inventory.setItemStack(null);
updateHeld(player);
}
}
break;
case CREATIVE_DUPLICATE:
if (player.capabilities.isCreativeMode && slotItem != null) {
ItemStack is=slotItem.getItemStack();
is.stackSize=is.getMaxStackSize();
player.inventory.setItemStack(is);
updateHeld(player);
}
break;
case MOVE_REGION:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
int playerInv=9 * 4;
for (int slotNum=0; slotNum < playerInv; slotNum++) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
 else return;
}
}
break;
default :
break;
}
}"
30533,"public boolean commit(BaseActionSource src){
  IItemList<IAEItemStack> added=AEApi.instance().storage().createItemList();
  IItemList<IAEItemStack> pulled=AEApi.instance().storage().createItemList();
  boolean failed=false;
  if (logExtracted) {
    for (    IAEItemStack extra : extractedCache) {
      IAEItemStack result=null;
      pulled.add(result=target.extractItems(extra,Actionable.MODULATE,src));
      if (result == null || result.getStackSize() != extra.getStackSize()) {
        failed=true;
        break;
      }
    }
  }
  if (failed) {
    for (    IAEItemStack is : pulled)     target.injectItems(is,Actionable.MODULATE,src);
    return false;
  }
  if (logInjections) {
    for (    IAEItemStack injec : injectedCache) {
      IAEItemStack result=null;
      added.add(result=target.injectItems(injec,Actionable.MODULATE,src));
      if (result != null) {
        failed=true;
        break;
      }
    }
  }
  if (failed) {
    for (    IAEItemStack is : added)     target.extractItems(is,Actionable.MODULATE,src);
    for (    IAEItemStack is : pulled)     target.injectItems(is,Actionable.MODULATE,src);
    return false;
  }
  if (logMissing && par != null) {
    for (    IAEItemStack extra : missingCache)     par.addMissing(extra);
  }
  return true;
}","public boolean commit(BaseActionSource src){
  IItemList<IAEItemStack> added=AEApi.instance().storage().createItemList();
  IItemList<IAEItemStack> pulled=AEApi.instance().storage().createItemList();
  boolean failed=false;
  if (logInjections) {
    for (    IAEItemStack injec : injectedCache) {
      IAEItemStack result=null;
      added.add(result=target.injectItems(injec,Actionable.MODULATE,src));
      if (result != null) {
        failed=true;
        break;
      }
    }
  }
  if (failed) {
    for (    IAEItemStack is : added)     target.extractItems(is,Actionable.MODULATE,src);
    return false;
  }
  if (logExtracted) {
    for (    IAEItemStack extra : extractedCache) {
      IAEItemStack result=null;
      pulled.add(result=target.extractItems(extra,Actionable.MODULATE,src));
      if (result == null || result.getStackSize() != extra.getStackSize()) {
        failed=true;
        break;
      }
    }
  }
  if (failed) {
    for (    IAEItemStack is : added)     target.extractItems(is,Actionable.MODULATE,src);
    for (    IAEItemStack is : pulled)     target.injectItems(is,Actionable.MODULATE,src);
    return false;
  }
  if (logMissing && par != null) {
    for (    IAEItemStack extra : missingCache)     par.addMissing(extra);
  }
  return true;
}"
30534,"@Override public IAEItemStack extractItems(IAEItemStack request,Actionable mode,BaseActionSource src){
  if (request == null)   return null;
  IAEItemStack list=localCache.findPrecise(request);
  if (list == null || list.getStackSize() == 0)   return null;
  if (mode == Actionable.MODULATE && logExtracted)   extractedCache.add(request);
  if (list.getStackSize() >= request.getStackSize()) {
    if (mode == Actionable.MODULATE)     list.decStackSize(request.getStackSize());
    return request;
  }
  IAEItemStack ret=request.copy();
  ret.setStackSize(list.getStackSize());
  if (mode == Actionable.MODULATE)   list.reset();
  return ret;
}","@Override public IAEItemStack extractItems(IAEItemStack request,Actionable mode,BaseActionSource src){
  if (request == null)   return null;
  IAEItemStack list=localCache.findPrecise(request);
  if (list == null || list.getStackSize() == 0)   return null;
  if (list.getStackSize() >= request.getStackSize()) {
    if (mode == Actionable.MODULATE) {
      list.decStackSize(request.getStackSize());
      if (logExtracted)       extractedCache.add(request);
    }
    return request;
  }
  IAEItemStack ret=request.copy();
  ret.setStackSize(list.getStackSize());
  if (mode == Actionable.MODULATE) {
    list.reset();
    if (logExtracted)     extractedCache.add(ret);
  }
  return ret;
}"
30535,"@Override public boolean sameAs(AEColor color,ItemStack comparableItem){
  ItemStackSrc is=colors[color.ordinal()];
  if (comparableItem == null)   return false;
  return comparableItem.getItem() == is.item && comparableItem.getItemDamage() == is.damage;
}","@Override public boolean sameAs(AEColor color,ItemStack comparableItem){
  ItemStackSrc is=colors[color.ordinal()];
  if (comparableItem == null || is == null)   return false;
  return comparableItem.getItem() == is.item && comparableItem.getItemDamage() == is.damage;
}"
30536,"@SideOnly(Side.CLIENT) public void renderCoveredConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isSmart=false;
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of)));
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent)   rh.setTexture(getGlassTexture(ccph.getColor()));
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.COVERED && ccph.getColor() != AEColor.Transparent) rh.setTexture(getCoveredTexture(ccph.getColor()));
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.SMART) {
isSmart=true;
rh.setTexture(getSmartTexture(getCableColor()));
}
 else rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
if (isSmart) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(getCableColor().blackVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(getCableColor().whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
}","@SideOnly(Side.CLIENT) public void renderCoveredConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isSmart=false;
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of)));
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent)   rh.setTexture(getGlassTexture(ccph.getColor()));
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.COVERED && ccph.getColor() != AEColor.Transparent && ccph.getPart(of.getOpposite()) == null) rh.setTexture(getCoveredTexture(ccph.getColor()));
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.SMART && ccph.getPart(of.getOpposite()) == null) {
isSmart=true;
rh.setTexture(getSmartTexture(getCableColor()));
}
 else rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
if (isSmart) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(getCableColor().blackVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(getCableColor().whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
}"
30537,"public TickRateModulation onTick(){
  boolean changed=false;
  LinkedList<IAEItemStack> changes=new LinkedList<IAEItemStack>();
  list.resetStatus();
  for (  ItemSlot is : adaptor) {
    CachedItemStack old=memory.get(is.slot);
    ItemStack newIS=is == null || is.isExtractable == false && mode == StorageFilter.EXTACTABLE_ONLY ? null : is.getItemStack();
    ItemStack oldIS=old == null ? null : old.itemStack;
    if (isDiffrent(newIS,oldIS)) {
      CachedItemStack cis=new CachedItemStack(is.getItemStack());
      memory.put(is.slot,cis);
      if (old != null && old.aeStack != null) {
        old.aeStack.setStackSize(-old.aeStack.getStackSize());
        changes.add(old.aeStack);
      }
      if (cis != null && cis.aeStack != null) {
        changes.add(cis.aeStack);
        list.add(cis.aeStack);
      }
      changed=true;
    }
 else     if (is != null) {
      int newSize=(newIS == null ? 0 : newIS.stackSize);
      int diff=newSize - (oldIS == null ? 0 : oldIS.stackSize);
      IAEItemStack stack=(old == null || old.aeStack == null ? AEApi.instance().storage().createItemStack(newIS) : old.aeStack.copy());
      if (stack != null) {
        stack.setStackSize(newSize);
        list.add(stack);
      }
      if (diff != 0 && stack != null) {
        CachedItemStack cis=new CachedItemStack(is.getItemStack());
        memory.put(is.slot,cis);
        IAEItemStack a=stack.copy();
        a.setStackSize(diff);
        changes.add(a);
        changed=true;
      }
    }
  }
  if (!changes.isEmpty())   postDiffrence(changes);
  return changed ? TickRateModulation.URGENT : TickRateModulation.SLOWER;
}","public TickRateModulation onTick(){
  boolean changed=false;
  LinkedList<IAEItemStack> changes=new LinkedList<IAEItemStack>();
  int high=0;
  list.resetStatus();
  for (  ItemSlot is : adaptor) {
    CachedItemStack old=memory.get(is.slot);
    high=Math.max(high,is.slot);
    ItemStack newIS=is == null || is.isExtractable == false && mode == StorageFilter.EXTACTABLE_ONLY ? null : is.getItemStack();
    ItemStack oldIS=old == null ? null : old.itemStack;
    if (isDiffrent(newIS,oldIS)) {
      CachedItemStack cis=new CachedItemStack(is.getItemStack());
      memory.put(is.slot,cis);
      if (old != null && old.aeStack != null) {
        old.aeStack.setStackSize(-old.aeStack.getStackSize());
        changes.add(old.aeStack);
      }
      if (cis != null && cis.aeStack != null) {
        changes.add(cis.aeStack);
        list.add(cis.aeStack);
      }
      changed=true;
    }
 else     if (is != null) {
      int newSize=(newIS == null ? 0 : newIS.stackSize);
      int diff=newSize - (oldIS == null ? 0 : oldIS.stackSize);
      IAEItemStack stack=(old == null || old.aeStack == null ? AEApi.instance().storage().createItemStack(newIS) : old.aeStack.copy());
      if (stack != null) {
        stack.setStackSize(newSize);
        list.add(stack);
      }
      if (diff != 0 && stack != null) {
        CachedItemStack cis=new CachedItemStack(is.getItemStack());
        memory.put(is.slot,cis);
        IAEItemStack a=stack.copy();
        a.setStackSize(diff);
        changes.add(a);
        changed=true;
      }
    }
  }
  NavigableMap<Integer,CachedItemStack> end=memory.tailMap(high,false);
  if (!end.isEmpty()) {
    for (    CachedItemStack cis : end.values()) {
      IAEItemStack a=cis.aeStack.copy();
      a.setStackSize(-a.getStackSize());
      changes.add(a);
      changed=true;
    }
    end.clear();
  }
  if (!changes.isEmpty())   postDiffrence(changes);
  return changed ? TickRateModulation.URGENT : TickRateModulation.SLOWER;
}"
30538,"public TickRateModulation onTick(){
  boolean changed=false;
  LinkedList<IAEItemStack> changes=new LinkedList<IAEItemStack>();
  int high=0;
  list.resetStatus();
  for (  ItemSlot is : adaptor) {
    CachedItemStack old=memory.get(is.slot);
    high=Math.max(high,is.slot);
    ItemStack newIS=is == null || is.isExtractable == false && mode == StorageFilter.EXTACTABLE_ONLY ? null : is.getItemStack();
    ItemStack oldIS=old == null ? null : old.itemStack;
    if (isDiffrent(newIS,oldIS)) {
      CachedItemStack cis=new CachedItemStack(is.getItemStack());
      memory.put(is.slot,cis);
      if (old != null && old.aeStack != null) {
        old.aeStack.setStackSize(-old.aeStack.getStackSize());
        changes.add(old.aeStack);
      }
      if (cis != null && cis.aeStack != null) {
        changes.add(cis.aeStack);
        list.add(cis.aeStack);
      }
      changed=true;
    }
 else     if (is != null) {
      int newSize=(newIS == null ? 0 : newIS.stackSize);
      int diff=newSize - (oldIS == null ? 0 : oldIS.stackSize);
      IAEItemStack stack=(old == null || old.aeStack == null ? AEApi.instance().storage().createItemStack(newIS) : old.aeStack.copy());
      if (stack != null) {
        stack.setStackSize(newSize);
        list.add(stack);
      }
      if (diff != 0 && stack != null) {
        CachedItemStack cis=new CachedItemStack(is.getItemStack());
        memory.put(is.slot,cis);
        IAEItemStack a=stack.copy();
        a.setStackSize(diff);
        changes.add(a);
        changed=true;
      }
    }
  }
  NavigableMap<Integer,CachedItemStack> end=memory.tailMap(high,false);
  if (!end.isEmpty()) {
    for (    CachedItemStack cis : end.values()) {
      IAEItemStack a=cis.aeStack.copy();
      a.setStackSize(-a.getStackSize());
      changes.add(a);
      changed=true;
    }
    end.clear();
  }
  if (!changes.isEmpty())   postDiffrence(changes);
  return changed ? TickRateModulation.URGENT : TickRateModulation.SLOWER;
}","public TickRateModulation onTick(){
  boolean changed=false;
  LinkedList<IAEItemStack> changes=new LinkedList<IAEItemStack>();
  int high=0;
  list.resetStatus();
  for (  ItemSlot is : adaptor) {
    CachedItemStack old=memory.get(is.slot);
    high=Math.max(high,is.slot);
    ItemStack newIS=is == null || is.isExtractable == false && mode == StorageFilter.EXTACTABLE_ONLY ? null : is.getItemStack();
    ItemStack oldIS=old == null ? null : old.itemStack;
    if (isDiffrent(newIS,oldIS)) {
      CachedItemStack cis=new CachedItemStack(is.getItemStack());
      memory.put(is.slot,cis);
      if (old != null && old.aeStack != null) {
        old.aeStack.setStackSize(-old.aeStack.getStackSize());
        changes.add(old.aeStack);
      }
      if (cis != null && cis.aeStack != null) {
        changes.add(cis.aeStack);
        list.add(cis.aeStack);
      }
      changed=true;
    }
 else     if (is != null) {
      int newSize=(newIS == null ? 0 : newIS.stackSize);
      int diff=newSize - (oldIS == null ? 0 : oldIS.stackSize);
      IAEItemStack stack=(old == null || old.aeStack == null ? AEApi.instance().storage().createItemStack(newIS) : old.aeStack.copy());
      if (stack != null) {
        stack.setStackSize(newSize);
        list.add(stack);
      }
      if (diff != 0 && stack != null) {
        CachedItemStack cis=new CachedItemStack(is.getItemStack());
        memory.put(is.slot,cis);
        IAEItemStack a=stack.copy();
        a.setStackSize(diff);
        changes.add(a);
        changed=true;
      }
    }
  }
  NavigableMap<Integer,CachedItemStack> end=memory.tailMap(high,false);
  if (!end.isEmpty()) {
    for (    CachedItemStack cis : end.values()) {
      if (cis != null) {
        IAEItemStack a=cis.aeStack.copy();
        a.setStackSize(-a.getStackSize());
        changes.add(a);
        changed=true;
      }
    }
    end.clear();
  }
  if (!changes.isEmpty())   postDiffrence(changes);
  return changed ? TickRateModulation.URGENT : TickRateModulation.SLOWER;
}"
30539,"public CraftingTreeProcess(ICraftingGrid cc,CraftingJob job,ICraftingPatternDetails details,CraftingTreeNode craftingTreeNode,int depth,World world){
  parent=craftingTreeNode;
  this.details=details;
  this.job=job;
  this.depth=depth;
  world=job.getWorld();
  if (details.isCraftable()) {
    IAEItemStack list[]=details.getInputs();
    InventoryCrafting ic=new InventoryCrafting(new ContainerNull(),3,3);
    IAEItemStack[] is=details.getInputs();
    for (int x=0; x < ic.getSizeInventory(); x++)     ic.setInventorySlotContents(x,is[x] == null ? null : is[x].getItemStack());
    FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)world),details.getOutput(ic,world),ic);
    for (int x=0; x < ic.getSizeInventory(); x++) {
      ItemStack g=ic.getStackInSlot(x);
      if (g != null && g.stackSize > 1)       fullsimulation=true;
    }
    for (int x=0; x < list.length; x++) {
      IAEItemStack part=list[x];
      if (part != null) {
        ItemStack g=part.getItemStack();
        boolean isAnInput=false;
        for (        IAEItemStack a : is) {
          if (g != null && a != null && a.equals(g))           isAnInput=true;
        }
        if (isAnInput)         limitQty=true;
        if (g.getItem().hasContainerItem(g))         limitQty=containerItems=true;
      }
    }
    boolean complicated=false;
    if (containerItems || complicated) {
      for (int x=0; x < list.length; x++) {
        IAEItemStack part=list[x];
        if (part != null)         nodes.put(new CraftingTreeNode(cc,job,part.copy(),this,x,depth + 1),part.getStackSize());
      }
    }
 else {
      for (      IAEItemStack part : details.getCondencedInputs()) {
        for (int x=0; x < list.length; x++) {
          IAEItemStack ppart=list[x];
          if (part != null && part.equals(ppart)) {
            nodes.put(new CraftingTreeNode(cc,job,part.copy(),this,x,depth + 1),part.getStackSize());
            break;
          }
        }
      }
    }
  }
 else {
    IAEItemStack list[]=details.getInputs();
    IAEItemStack[] is=details.getInputs();
    for (int x=0; x < list.length; x++) {
      IAEItemStack part=list[x];
      if (part != null) {
        ItemStack g=part.getItemStack();
        boolean isAnInput=false;
        for (        IAEItemStack a : is) {
          if (g != null && a != null && a.equals(g))           isAnInput=true;
        }
        if (isAnInput)         limitQty=true;
      }
    }
    for (    IAEItemStack part : details.getCondencedInputs()) {
      nodes.put(new CraftingTreeNode(cc,job,part.copy(),this,-1,depth + 1),part.getStackSize());
    }
  }
}","public CraftingTreeProcess(ICraftingGrid cc,CraftingJob job,ICraftingPatternDetails details,CraftingTreeNode craftingTreeNode,int depth,World world){
  parent=craftingTreeNode;
  this.details=details;
  this.job=job;
  this.depth=depth;
  world=job.getWorld();
  if (details.isCraftable()) {
    IAEItemStack list[]=details.getInputs();
    InventoryCrafting ic=new InventoryCrafting(new ContainerNull(),3,3);
    IAEItemStack[] is=details.getInputs();
    for (int x=0; x < ic.getSizeInventory(); x++)     ic.setInventorySlotContents(x,is[x] == null ? null : is[x].getItemStack());
    FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)world),details.getOutput(ic,world),ic);
    for (int x=0; x < ic.getSizeInventory(); x++) {
      ItemStack g=ic.getStackInSlot(x);
      if (g != null && g.stackSize > 1)       fullsimulation=true;
    }
    for (    IAEItemStack part : details.getCondencedInputs()) {
      ItemStack g=part.getItemStack();
      boolean isAnInput=false;
      for (      IAEItemStack a : details.getCondencedOutputs()) {
        if (g != null && a != null && a.equals(g))         isAnInput=true;
      }
      if (isAnInput)       limitQty=true;
      if (g.getItem().hasContainerItem(g))       limitQty=containerItems=true;
    }
    boolean complicated=false;
    if (containerItems || complicated) {
      for (int x=0; x < list.length; x++) {
        IAEItemStack part=list[x];
        if (part != null)         nodes.put(new CraftingTreeNode(cc,job,part.copy(),this,x,depth + 1),part.getStackSize());
      }
    }
 else {
      for (      IAEItemStack part : details.getCondencedInputs()) {
        for (int x=0; x < list.length; x++) {
          IAEItemStack ppart=list[x];
          if (part != null && part.equals(ppart)) {
            nodes.put(new CraftingTreeNode(cc,job,part.copy(),this,x,depth + 1),part.getStackSize());
            break;
          }
        }
      }
    }
  }
 else {
    for (    IAEItemStack part : details.getCondencedInputs()) {
      ItemStack g=part.getItemStack();
      boolean isAnInput=false;
      for (      IAEItemStack a : details.getCondencedOutputs()) {
        if (g != null && a != null && a.equals(g))         isAnInput=true;
      }
      if (isAnInput)       limitQty=true;
    }
    for (    IAEItemStack part : details.getCondencedInputs()) {
      nodes.put(new CraftingTreeNode(cc,job,part.copy(),this,-1,depth + 1),part.getStackSize());
    }
  }
}"
30540,"@Override protected void handleMouseClick(Slot slot,int slotIdx,int ctrlDown,int key){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (slot instanceof SlotFake) {
    InventoryAction action=null;
    action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (slot instanceof SlotPatternTerm) {
    if (key == 6)     return;
    try {
      NetworkHandler.instance.sendToServer(((SlotPatternTerm)slot).getRequest(key == 1));
    }
 catch (    IOException e) {
      AELog.error(e);
    }
  }
 else   if (slot instanceof SlotCraftingTerm) {
    if (key == 6)     return;
    InventoryAction action=null;
    if (key == 1)     action=InventoryAction.CRAFT_SHIFT;
 else     action=ctrlDown == 1 ? InventoryAction.CRAFT_STACK : InventoryAction.CRAFT_ITEM;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
    if (enableSpaceClicking()) {
      IAEItemStack stack=null;
      if (slot instanceof SlotME)       stack=((SlotME)slot).getAEStack();
      try {
        int slotNum=inventorySlots.inventorySlots.size();
        if (!(slot instanceof SlotME) && slot != null)         slotNum=slot.slotNumber;
        ((AEBaseContainer)inventorySlots).setTargetStack(stack);
        PacketInventoryAction p=new PacketInventoryAction(InventoryAction.MOVE_REGION,slotNum,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
      return;
    }
  }
  if (slot instanceof SlotDisconnected) {
    InventoryAction action=null;
switch (key) {
case 0:
      action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    break;
case 1:
  action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
break;
case 3:
if (player.capabilities.isCreativeMode) {
action=InventoryAction.CREATIVE_DUPLICATE;
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
PacketInventoryAction p=new PacketInventoryAction(action,slot.getSlotIndex(),((SlotDisconnected)slot).mySlot.id);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
if (slot instanceof SlotME) {
InventoryAction action=null;
IAEItemStack stack=null;
switch (key) {
case 0:
action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
stack=((SlotME)slot).getAEStack();
if (stack != null && action == InventoryAction.PICKUP_OR_SETDOWN && stack.getStackSize() == 0 && player.inventory.getItemStack() == null) action=InventoryAction.AUTOCRAFT;
break;
case 1:
action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
stack=((SlotME)slot).getAEStack();
break;
case 3:
stack=((SlotME)slot).getAEStack();
if (stack != null && stack.isCraftable()) action=InventoryAction.AUTOCRAFT;
 else if (player.capabilities.isCreativeMode) {
IAEItemStack slotItem=((SlotME)slot).getAEStack();
if (slotItem != null) {
action=InventoryAction.CREATIVE_DUPLICATE;
}
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
((AEBaseContainer)inventorySlots).setTargetStack(stack);
PacketInventoryAction p=new PacketInventoryAction(action,inventorySlots.inventorySlots.size(),0);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
if (dbl_whichItem == null || bl_clicked != slot || dbl_clickTimer.elapsed(TimeUnit.MILLISECONDS) > 150) {
bl_clicked=slot;
dbl_clickTimer=Stopwatch.createStarted();
if (slot != null) dbl_whichItem=slot.getHasStack() ? slot.getStack().copy() : null;
 else dbl_whichItem=null;
}
 else if (dbl_whichItem != null) {
Iterator iterator=this.inventorySlots.inventorySlots.iterator();
while (iterator.hasNext()) {
Slot targetSlot=(Slot)iterator.next();
if (targetSlot != null && targetSlot.canTakeStack(this.mc.thePlayer) && targetSlot.getHasStack() && targetSlot.inventory == slot.inventory && Container.func_94527_a(targetSlot,dbl_whichItem,true)) {
this.handleMouseClick(targetSlot,targetSlot.slotNumber,ctrlDown,1);
}
}
}
super.handleMouseClick(slot,slotIdx,ctrlDown,key);
}","@Override protected void handleMouseClick(Slot slot,int slotIdx,int ctrlDown,int key){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (slot instanceof SlotFake) {
    InventoryAction action=null;
    action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (slot instanceof SlotPatternTerm) {
    if (key == 6)     return;
    try {
      NetworkHandler.instance.sendToServer(((SlotPatternTerm)slot).getRequest(key == 1));
    }
 catch (    IOException e) {
      AELog.error(e);
    }
  }
 else   if (slot instanceof SlotCraftingTerm) {
    if (key == 6)     return;
    InventoryAction action=null;
    if (key == 1)     action=InventoryAction.CRAFT_SHIFT;
 else     action=ctrlDown == 1 ? InventoryAction.CRAFT_STACK : InventoryAction.CRAFT_ITEM;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
    if (enableSpaceClicking()) {
      IAEItemStack stack=null;
      if (slot instanceof SlotME)       stack=((SlotME)slot).getAEStack();
      try {
        int slotNum=inventorySlots.inventorySlots.size();
        if (!(slot instanceof SlotME) && slot != null)         slotNum=slot.slotNumber;
        ((AEBaseContainer)inventorySlots).setTargetStack(stack);
        PacketInventoryAction p=new PacketInventoryAction(InventoryAction.MOVE_REGION,slotNum,0);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
      return;
    }
  }
  if (slot instanceof SlotDisconnected) {
    InventoryAction action=null;
switch (key) {
case 0:
      action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    break;
case 1:
  action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
break;
case 3:
if (player.capabilities.isCreativeMode) {
action=InventoryAction.CREATIVE_DUPLICATE;
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
PacketInventoryAction p=new PacketInventoryAction(action,slot.getSlotIndex(),((SlotDisconnected)slot).mySlot.id);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
if (slot instanceof SlotME) {
InventoryAction action=null;
IAEItemStack stack=null;
switch (key) {
case 0:
action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
stack=((SlotME)slot).getAEStack();
if (stack != null && action == InventoryAction.PICKUP_OR_SETDOWN && stack.getStackSize() == 0 && player.inventory.getItemStack() == null) action=InventoryAction.AUTOCRAFT;
break;
case 1:
action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
stack=((SlotME)slot).getAEStack();
break;
case 3:
stack=((SlotME)slot).getAEStack();
if (stack != null && stack.isCraftable()) action=InventoryAction.AUTOCRAFT;
 else if (player.capabilities.isCreativeMode) {
IAEItemStack slotItem=((SlotME)slot).getAEStack();
if (slotItem != null) {
action=InventoryAction.CREATIVE_DUPLICATE;
}
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
((AEBaseContainer)inventorySlots).setTargetStack(stack);
PacketInventoryAction p=new PacketInventoryAction(action,inventorySlots.inventorySlots.size(),0);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
if (disableShiftClick == false) {
disableShiftClick=true;
if (dbl_whichItem == null || bl_clicked != slot || dbl_clickTimer.elapsed(TimeUnit.MILLISECONDS) > 150) {
bl_clicked=slot;
dbl_clickTimer=Stopwatch.createStarted();
if (slot != null) dbl_whichItem=slot.getHasStack() ? slot.getStack().copy() : null;
 else dbl_whichItem=null;
}
 else if (dbl_whichItem != null) {
Iterator iterator=this.inventorySlots.inventorySlots.iterator();
while (iterator.hasNext()) {
Slot targetSlot=(Slot)iterator.next();
if (targetSlot != null && targetSlot.canTakeStack(this.mc.thePlayer) && targetSlot.getHasStack() && targetSlot.inventory == slot.inventory && Container.func_94527_a(targetSlot,dbl_whichItem,true)) {
this.handleMouseClick(targetSlot,targetSlot.slotNumber,ctrlDown,1);
}
}
}
disableShiftClick=false;
}
super.handleMouseClick(slot,slotIdx,ctrlDown,key);
}"
30541,"public static ItemStack extractItemsByRecipe(IEnergySource energySrc,BaseActionSource mySrc,IMEMonitor<IAEItemStack> src,World w,IRecipe r,ItemStack output,InventoryCrafting ci,ItemStack providedTemplate,int slot,IItemList<IAEItemStack> aitems,Actionable realForFake){
  if (energySrc.extractAEPower(1,Actionable.SIMULATE,PowerMultiplier.CONFIG) > 0.9) {
    if (providedTemplate == null)     return null;
    AEItemStack ae_req=AEItemStack.create(providedTemplate);
    ae_req.setStackSize(1);
    IAEItemStack ae_ext=src.extractItems(ae_req,realForFake,mySrc);
    if (ae_ext != null) {
      ItemStack extracted=ae_ext.getItemStack();
      if (extracted != null) {
        energySrc.extractAEPower(1,realForFake,PowerMultiplier.CONFIG);
        return extracted;
      }
    }
    if (aitems != null && (ae_req.isOre() || providedTemplate.hasTagCompound() || providedTemplate.isItemStackDamageable())) {
      for (      IAEItemStack x : aitems) {
        ItemStack sh=x.getItemStack();
        if ((Platform.isSameItemType(providedTemplate,sh) || ae_req.sameOre(x)) && !Platform.isSameItem(sh,output)) {
          ItemStack cp=Platform.cloneItemStack(sh);
          cp.stackSize=1;
          ci.setInventorySlotContents(slot,cp);
          if (r.matches(ci,w) && Platform.isSameItem(r.getCraftingResult(ci),output)) {
            IAEItemStack ax=x.copy();
            ax.setStackSize(1);
            IAEItemStack ex=src.extractItems(ax,realForFake,mySrc);
            if (ex != null) {
              energySrc.extractAEPower(1,realForFake,PowerMultiplier.CONFIG);
              return ex.getItemStack();
            }
          }
          ci.setInventorySlotContents(slot,providedTemplate);
        }
      }
    }
  }
  return null;
}","public static ItemStack extractItemsByRecipe(IEnergySource energySrc,BaseActionSource mySrc,IMEMonitor<IAEItemStack> src,World w,IRecipe r,ItemStack output,InventoryCrafting ci,ItemStack providedTemplate,int slot,IItemList<IAEItemStack> aitems,Actionable realForFake){
  if (energySrc.extractAEPower(1,Actionable.SIMULATE,PowerMultiplier.CONFIG) > 0.9) {
    if (providedTemplate == null)     return null;
    AEItemStack ae_req=AEItemStack.create(providedTemplate);
    ae_req.setStackSize(1);
    IAEItemStack ae_ext=src.extractItems(ae_req,realForFake,mySrc);
    if (ae_ext != null) {
      ItemStack extracted=ae_ext.getItemStack();
      if (extracted != null) {
        energySrc.extractAEPower(1,realForFake,PowerMultiplier.CONFIG);
        return extracted;
      }
    }
    boolean checkFuzzy=ae_req.isOre() || providedTemplate.getItemDamage() == OreDictionary.WILDCARD_VALUE || providedTemplate.hasTagCompound() || providedTemplate.isItemStackDamageable();
    if (aitems != null && checkFuzzy) {
      for (      IAEItemStack x : aitems) {
        ItemStack sh=x.getItemStack();
        if ((Platform.isSameItemType(providedTemplate,sh) || ae_req.sameOre(x)) && !Platform.isSameItem(sh,output)) {
          ItemStack cp=Platform.cloneItemStack(sh);
          cp.stackSize=1;
          ci.setInventorySlotContents(slot,cp);
          if (r.matches(ci,w) && Platform.isSameItem(r.getCraftingResult(ci),output)) {
            IAEItemStack ax=x.copy();
            ax.setStackSize(1);
            IAEItemStack ex=src.extractItems(ax,realForFake,mySrc);
            if (ex != null) {
              energySrc.extractAEPower(1,realForFake,PowerMultiplier.CONFIG);
              return ex.getItemStack();
            }
          }
          ci.setInventorySlotContents(slot,providedTemplate);
        }
      }
    }
  }
  return null;
}"
30542,"@Override public boolean onItemUseFirst(ItemStack is,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block b=world.getBlock(x,y,z);
  if (b != null && !player.isSneaking() && Platform.hasPermissions(new DimensionalCoord(world,x,y,z),player)) {
    if (Platform.isClient())     return true;
    ForgeDirection mySide=ForgeDirection.getOrientation(side);
    if (b.rotateBlock(world,x,y,z,mySide)) {
      b.onNeighborBlockChange(world,x,y,z,Platform.air);
      player.swingItem();
      return !world.isRemote;
    }
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack is,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block b=world.getBlock(x,y,z);
  if (b != null && !player.isSneaking() && Platform.hasPermissions(new DimensionalCoord(world,x,y,z),player)) {
    if (Platform.isClient())     return !world.isRemote;
    ForgeDirection mySide=ForgeDirection.getOrientation(side);
    if (b.rotateBlock(world,x,y,z,mySide)) {
      b.onNeighborBlockChange(world,x,y,z,Platform.air);
      player.swingItem();
      return !world.isRemote;
    }
  }
  return false;
}"
30543,"@Override public void breakBlock(World w,int x,int y,int z,Block a,int b){
  AEBaseTile te=getTileEntity(w,x,y,z);
  if (te != null) {
    if (te.dropItems) {
      ArrayList<ItemStack> drops=new ArrayList<ItemStack>();
      te.getDrops(w,x,y,z,drops);
      Platform.spawnDrops(w,x,y,z,drops);
    }
  }
  super.breakBlock(w,x,y,z,a,b);
  if (te != null)   w.setTileEntity(x,y,z,null);
}","@Override public void breakBlock(World w,int x,int y,int z,Block a,int b){
  AEBaseTile te=getTileEntity(w,x,y,z);
  if (te != null) {
    ArrayList<ItemStack> drops=new ArrayList<ItemStack>();
    if (te.dropItems())     te.getDrops(w,x,y,z,drops);
 else     te.getNoDrops(w,x,y,z,drops);
    Platform.spawnDrops(w,x,y,z,drops);
  }
  super.breakBlock(w,x,y,z,a,b);
  if (te != null)   w.setTileEntity(x,y,z,null);
}"
30544,"@SuppressWarnings(""String_Node_Str"") @Override public boolean removedByPlayer(World world,EntityPlayer player,int x,int y,int z){
  if (player.capabilities.isCreativeMode) {
    AEBaseTile tile=getTileEntity(world,x,y,z);
    if (tile != null)     tile.dropItems=false;
  }
  return super.removedByPlayer(world,player,x,y,z);
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean removedByPlayer(World world,EntityPlayer player,int x,int y,int z){
  if (player.capabilities.isCreativeMode) {
    AEBaseTile tile=getTileEntity(world,x,y,z);
    if (tile != null)     tile.disableDrops();
  }
  return super.removedByPlayer(world,player,x,y,z);
}"
30545,"public void securityBreak(){
  worldObj.func_147480_a(xCoord,yCoord,zCoord,true);
  dropItems=false;
}","public void securityBreak(){
  worldObj.func_147480_a(xCoord,yCoord,zCoord,true);
  disableDrops();
}"
30546,"protected AEBaseBlock(Class<?> c,Material mat,String subname){
  super(mat);
  if (mat == Material.glass)   setStepSound(Block.soundTypeGlass);
 else   if (mat == Material.rock)   setStepSound(Block.soundTypeStone);
 else   setStepSound(Block.soundTypeMetal);
  FeatureFullname=AEFeatureHandler.getName(c,subname);
  FeatureSubname=subname;
}","protected AEBaseBlock(Class<?> c,Material mat,String subname){
  super(mat);
  if (mat == AEGlassMaterial.instance)   setStepSound(Block.soundTypeGlass);
 else   if (mat == Material.glass)   setStepSound(Block.soundTypeGlass);
 else   if (mat == Material.rock)   setStepSound(Block.soundTypeStone);
 else   setStepSound(Block.soundTypeMetal);
  FeatureFullname=AEFeatureHandler.getName(c,subname);
  FeatureSubname=subname;
}"
30547,"public BlockCableBus(){
  super(BlockCableBus.class,Material.glass);
  setfeature(EnumSet.of(AEFeature.Core));
  setLightOpacity(0);
  isFullSize=isOpaque=false;
}","public BlockCableBus(){
  super(BlockCableBus.class,AEGlassMaterial.instance);
  setfeature(EnumSet.of(AEFeature.Core));
  setLightOpacity(0);
  isFullSize=isOpaque=false;
}"
30548,"public BlockCreativeEnergyCell(){
  super(BlockCreativeEnergyCell.class,Material.glass);
  setfeature(EnumSet.of(AEFeature.Creative));
  setTileEntiy(TileCreativeEnergyCell.class);
}","public BlockCreativeEnergyCell(){
  super(BlockCreativeEnergyCell.class,AEGlassMaterial.instance);
  setfeature(EnumSet.of(AEFeature.Creative));
  setTileEntiy(TileCreativeEnergyCell.class);
}"
30549,"public BlockWireless(){
  super(BlockWireless.class,Material.glass);
  setfeature(EnumSet.of(AEFeature.Core,AEFeature.WirelessAccessTerminal));
  setTileEntiy(TileWireless.class);
  setLightOpacity(0);
  isFullSize=false;
  isOpaque=false;
}","public BlockWireless(){
  super(BlockWireless.class,AEGlassMaterial.instance);
  setfeature(EnumSet.of(AEFeature.Core,AEFeature.WirelessAccessTerminal));
  setTileEntiy(TileWireless.class);
  setLightOpacity(0);
  isFullSize=false;
  isOpaque=false;
}"
30550,"public BlockQuantumLinkChamber(){
  super(BlockQuantumLinkChamber.class,Material.glass);
  setfeature(EnumSet.of(AEFeature.QuantumNetworkBridge));
  setTileEntiy(TileQuantumBridge.class);
  float shave=2.0f / 16.0f;
  setBlockBounds(shave,shave,shave,1.0f - shave,1.0f - shave,1.0f - shave);
  setLightOpacity(0);
  isFullSize=isOpaque=false;
}","public BlockQuantumLinkChamber(){
  super(BlockQuantumLinkChamber.class,AEGlassMaterial.instance);
  setfeature(EnumSet.of(AEFeature.QuantumNetworkBridge));
  setTileEntiy(TileQuantumBridge.class);
  float shave=2.0f / 16.0f;
  setBlockBounds(shave,shave,shave,1.0f - shave,1.0f - shave,1.0f - shave);
  setLightOpacity(0);
  isFullSize=isOpaque=false;
}"
30551,"@Override public boolean shouldSideBeRendered(IBlockAccess w,int x,int y,int z,int side){
  if (w.getBlock(x,y,z).getMaterial() == Material.glass) {
    if (w.getBlock(x,y,z).getRenderType() == this.getRenderType())     return false;
  }
  return super.shouldSideBeRendered(w,x,y,z,side);
}","@Override public boolean shouldSideBeRendered(IBlockAccess w,int x,int y,int z,int side){
  Material mat=w.getBlock(x,y,z).getMaterial();
  if (mat == Material.glass || mat == AEGlassMaterial.instance) {
    if (w.getBlock(x,y,z).getRenderType() == this.getRenderType())     return false;
  }
  return super.shouldSideBeRendered(w,x,y,z,side);
}"
30552,"public BlockSpatialPylon(){
  super(BlockSpatialPylon.class,Material.glass);
  setfeature(EnumSet.of(AEFeature.SpatialIO));
  setTileEntiy(TileSpatialPylon.class);
}","public BlockSpatialPylon(){
  super(BlockSpatialPylon.class,AEGlassMaterial.instance);
  setfeature(EnumSet.of(AEFeature.SpatialIO));
  setTileEntiy(TileSpatialPylon.class);
}"
30553,"@Override public IAEItemStack injectItems(IAEItemStack input,Actionable mode,BaseActionSource src){
  if (mode == Actionable.SIMULATE)   return null;
  ItemStack failed=cs.insertItems(side,input.getItemStack());
  if (failed == null)   return null;
  input.setStackSize(failed.stackSize);
  return input;
}","@Override public IAEItemStack injectItems(IAEItemStack input,Actionable mode,BaseActionSource src){
  if (mode == Actionable.SIMULATE)   return null;
  ItemStack failed=cs.insertItems(input.getItemStack());
  if (failed == null)   return null;
  input.setStackSize(failed.stackSize);
  return input;
}"
30554,"@Override public IItemList getAvailableItems(IItemList out){
  for (  ItemStack is : cs.getContents(side)) {
    out.add(AEItemStack.create(is));
  }
  return out;
}","@Override public IItemList getAvailableItems(IItemList out){
  for (  ItemStack is : cs.getContents()) {
    out.add(AEItemStack.create(is));
  }
  return out;
}"
30555,"@Override public IAEItemStack extractItems(IAEItemStack request,Actionable mode,BaseActionSource src){
  if (mode == Actionable.SIMULATE) {
    int howMany=cs.getItemCount(side,request.getItemStack());
    return howMany > request.getStackSize() ? request : request.copy().setStackSize(howMany);
  }
  ItemStack Obtained=cs.extractItems(side,request.getItemStack());
  return AEItemStack.create(Obtained);
}","@Override public IAEItemStack extractItems(IAEItemStack request,Actionable mode,BaseActionSource src){
  if (mode == Actionable.SIMULATE) {
    int howMany=cs.getItemCount(request.getItemStack());
    return howMany > request.getStackSize() ? request : request.copy().setStackSize(howMany);
  }
  ItemStack Obtained=cs.extractItems(request.getItemStack(),(int)request.getStackSize());
  return AEItemStack.create(Obtained);
}"
30556,"@Override public ItemStack simulateSimilarRemove(int how_many,ItemStack filter,FuzzyMode fuzzyMode,IInventoryDestination dest){
  ItemStack target=null;
  for (  ItemStack is : cs.getContents(side)) {
    if (is != null) {
      if (is.stackSize > 0 && (filter == null || Platform.isSameItemFuzzy(filter,is,fuzzyMode))) {
        if (dest == null || dest.canInsert(is)) {
          target=is;
          break;
        }
      }
    }
  }
  if (target != null) {
    int cnt=cs.getItemCount(side,target);
    if (cnt == 0)     return null;
    if (cnt > how_many)     cnt=how_many;
    ItemStack c=target.copy();
    c.stackSize=cnt;
    return c;
  }
  return null;
}","@Override public ItemStack simulateSimilarRemove(int how_many,ItemStack filter,FuzzyMode fuzzyMode,IInventoryDestination dest){
  ItemStack target=null;
  for (  ItemStack is : cs.getContents()) {
    if (is != null) {
      if (is.stackSize > 0 && (filter == null || Platform.isSameItemFuzzy(filter,is,fuzzyMode))) {
        if (dest == null || dest.canInsert(is)) {
          target=is;
          break;
        }
      }
    }
  }
  if (target != null) {
    int cnt=cs.getItemCount(target);
    if (cnt == 0)     return null;
    if (cnt > how_many)     cnt=how_many;
    ItemStack c=target.copy();
    c.stackSize=cnt;
    return c;
  }
  return null;
}"
30557,"@Override public Iterator<ItemSlot> iterator(){
  return new StackToSlotIterator(cs.getContents(side).iterator());
}","@Override public Iterator<ItemSlot> iterator(){
  return new StackToSlotIterator(cs.getContents().iterator());
}"
30558,"@Override public ItemStack removeItems(int how_many,ItemStack Filter,IInventoryDestination dest){
  ItemStack target=null;
  for (  ItemStack is : cs.getContents(side)) {
    if (is != null) {
      if (is.stackSize > 0 && (Filter == null || Platform.isSameItem(Filter,is))) {
        if (dest == null || dest.canInsert(is)) {
          target=is;
          break;
        }
      }
    }
  }
  if (target != null) {
    ItemStack f=Platform.cloneItemStack(target);
    f.stackSize=how_many;
    return cs.extractItems(side,f);
  }
  return null;
}","@Override public ItemStack removeItems(int how_many,ItemStack Filter,IInventoryDestination dest){
  ItemStack target=null;
  for (  ItemStack is : cs.getContents()) {
    if (is != null) {
      if (is.stackSize > 0 && (Filter == null || Platform.isSameItem(Filter,is))) {
        if (dest == null || dest.canInsert(is)) {
          target=is;
          break;
        }
      }
    }
  }
  if (target != null) {
    ItemStack f=Platform.cloneItemStack(target);
    f.stackSize=how_many;
    return cs.extractItems(f,how_many);
  }
  return null;
}"
30559,"@Override public ItemStack simulateRemove(int how_many,ItemStack Filter,IInventoryDestination dest){
  ItemStack target=null;
  for (  ItemStack is : cs.getContents(side)) {
    if (is != null) {
      if (is.stackSize > 0 && (Filter == null || Platform.isSameItem(Filter,is))) {
        if (dest == null || dest.canInsert(is)) {
          target=is;
          break;
        }
      }
    }
  }
  if (target != null) {
    int cnt=cs.getItemCount(side,target);
    if (cnt == 0)     return null;
    if (cnt > how_many)     cnt=how_many;
    ItemStack c=target.copy();
    c.stackSize=cnt;
    return c;
  }
  return null;
}","@Override public ItemStack simulateRemove(int how_many,ItemStack Filter,IInventoryDestination dest){
  ItemStack target=null;
  for (  ItemStack is : cs.getContents()) {
    if (is != null) {
      if (is.stackSize > 0 && (Filter == null || Platform.isSameItem(Filter,is))) {
        if (dest == null || dest.canInsert(is)) {
          target=is;
          break;
        }
      }
    }
  }
  if (target != null) {
    int cnt=cs.getItemCount(target);
    if (cnt == 0)     return null;
    if (cnt > how_many)     cnt=how_many;
    ItemStack c=target.copy();
    c.stackSize=cnt;
    return c;
  }
  return null;
}"
30560,"@Override public ItemStack removeSimilarItems(int amount,ItemStack filter,FuzzyMode fuzzyMode,IInventoryDestination dest){
  ItemStack target=null;
  for (  ItemStack is : cs.getContents(side)) {
    if (is != null) {
      if (is.stackSize > 0 && (filter == null || Platform.isSameItemFuzzy(filter,is,fuzzyMode))) {
        if (dest == null || dest.canInsert(is)) {
          target=is;
          break;
        }
      }
    }
  }
  if (target != null) {
    ItemStack f=Platform.cloneItemStack(target);
    f.stackSize=amount;
    return cs.extractItems(side,f);
  }
  return null;
}","@Override public ItemStack removeSimilarItems(int amount,ItemStack filter,FuzzyMode fuzzyMode,IInventoryDestination dest){
  ItemStack target=null;
  for (  ItemStack is : cs.getContents()) {
    if (is != null) {
      if (is.stackSize > 0 && (filter == null || Platform.isSameItemFuzzy(filter,is,fuzzyMode))) {
        if (dest == null || dest.canInsert(is)) {
          target=is;
          break;
        }
      }
    }
  }
  if (target != null) {
    ItemStack f=Platform.cloneItemStack(target);
    f.stackSize=amount;
    return cs.extractItems(f,amount);
  }
  return null;
}"
30561,"@Override public ItemStack simulateAdd(ItemStack A){
  int items=cs.spaceForItem(side,A);
  ItemStack B=Platform.cloneItemStack(A);
  if (A.stackSize <= items)   return null;
  B.stackSize-=items;
  return B;
}","@Override public ItemStack simulateAdd(ItemStack A){
  int items=cs.getSpaceForItem(A);
  ItemStack B=Platform.cloneItemStack(A);
  if (A.stackSize <= items)   return null;
  B.stackSize-=items;
  return B;
}"
30562,"@Override public boolean containsItems(){
  return cs.getContents(side).size() > 0;
}","@Override public boolean containsItems(){
  return cs.getUniqueItems() > 0;
}"
30563,"@Override public ItemStack addItems(ItemStack A){
  return cs.insertItems(side,A);
}","@Override public ItemStack addItems(ItemStack A){
  return cs.insertItems(A);
}"
30564,"public void updateView(){
  view.clear();
  dsp.clear();
  view.ensureCapacity(list.size());
  dsp.ensureCapacity(list.size());
  Enum vmode=sortSrc.getSortDisplay();
  Enum mode=AEConfig.instance.settings.getSetting(Settings.SEARCH_MODE);
  if (mode == SearchBoxMode.NEI_AUTOSEARCH || mode == SearchBoxMode.NEI_MANUAL_SEARCH)   updateNEI(searchString);
  boolean terminalSearchToolTips=AEConfig.instance.settings.getSetting(Settings.SEARCH_TOOLTIPS) != YesNo.NO;
  boolean searchMod=false;
  if (searchString.startsWith(""String_Node_Str"")) {
    searchMod=true;
    searchString=searchString.substring(1);
  }
  Pattern m=null;
  try {
    m=Pattern.compile(searchString.toLowerCase(),Pattern.CASE_INSENSITIVE);
  }
 catch (  Throwable _) {
    try {
      m=Pattern.compile(Pattern.quote(searchString.toLowerCase()),Pattern.CASE_INSENSITIVE);
    }
 catch (    Throwable __) {
      return;
    }
  }
  boolean notDone=false;
  for (  IAEItemStack is : list) {
    if (myPartitionList != null) {
      if (!myPartitionList.isListed(is))       continue;
    }
    if (vmode == ViewItems.CRAFTABLE && !is.isCraftable())     continue;
    if (vmode == ViewItems.CRAFTABLE) {
      is=is.copy();
      is.setStackSize(0);
    }
    if (vmode == ViewItems.STORED && is.getStackSize() == 0)     continue;
    String dspName=searchMod ? Platform.getModId(is) : Platform.getItemDisplayName(is);
    notDone=true;
    if (m.matcher(dspName.toLowerCase()).find()) {
      view.add(is);
      notDone=false;
    }
    if (terminalSearchToolTips && notDone) {
      for (      Object lp : Platform.getTooltip(is))       if (lp instanceof String && m.matcher((String)lp).find()) {
        view.add(is);
        notDone=false;
        break;
      }
    }
  }
  Enum SortBy=sortSrc.getSortBy();
  Enum SortDir=sortSrc.getSortDir();
  ItemSorters.Direction=(appeng.api.config.SortDir)SortDir;
  ItemSorters.init();
  if (SortBy == SortOrder.MOD)   Collections.sort(view,ItemSorters.ConfigBased_SortByMod);
 else   if (SortBy == SortOrder.AMOUNT)   Collections.sort(view,ItemSorters.ConfigBased_SortBySize);
 else   if (SortBy == SortOrder.INVTWEAKS)   Collections.sort(view,ItemSorters.ConfigBased_SortByInvTweaks);
 else   Collections.sort(view,ItemSorters.ConfigBased_SortByName);
  for (  IAEItemStack is : view)   dsp.add(is.getItemStack());
}","public void updateView(){
  view.clear();
  dsp.clear();
  view.ensureCapacity(list.size());
  dsp.ensureCapacity(list.size());
  Enum vmode=sortSrc.getSortDisplay();
  Enum mode=AEConfig.instance.settings.getSetting(Settings.SEARCH_MODE);
  if (mode == SearchBoxMode.NEI_AUTOSEARCH || mode == SearchBoxMode.NEI_MANUAL_SEARCH)   updateNEI(searchString);
  innerSearch=searchString;
  boolean terminalSearchToolTips=AEConfig.instance.settings.getSetting(Settings.SEARCH_TOOLTIPS) != YesNo.NO;
  boolean searchMod=false;
  if (innerSearch.startsWith(""String_Node_Str"")) {
    searchMod=true;
    innerSearch=innerSearch.substring(1);
  }
  Pattern m=null;
  try {
    m=Pattern.compile(innerSearch.toLowerCase(),Pattern.CASE_INSENSITIVE);
  }
 catch (  Throwable _) {
    try {
      m=Pattern.compile(Pattern.quote(innerSearch.toLowerCase()),Pattern.CASE_INSENSITIVE);
    }
 catch (    Throwable __) {
      return;
    }
  }
  boolean notDone=false;
  for (  IAEItemStack is : list) {
    if (myPartitionList != null) {
      if (!myPartitionList.isListed(is))       continue;
    }
    if (vmode == ViewItems.CRAFTABLE && !is.isCraftable())     continue;
    if (vmode == ViewItems.CRAFTABLE) {
      is=is.copy();
      is.setStackSize(0);
    }
    if (vmode == ViewItems.STORED && is.getStackSize() == 0)     continue;
    String dspName=searchMod ? Platform.getModId(is) : Platform.getItemDisplayName(is);
    notDone=true;
    if (m.matcher(dspName.toLowerCase()).find()) {
      view.add(is);
      notDone=false;
    }
    if (terminalSearchToolTips && notDone) {
      for (      Object lp : Platform.getTooltip(is))       if (lp instanceof String && m.matcher((String)lp).find()) {
        view.add(is);
        notDone=false;
        break;
      }
    }
  }
  Enum SortBy=sortSrc.getSortBy();
  Enum SortDir=sortSrc.getSortDir();
  ItemSorters.Direction=(appeng.api.config.SortDir)SortDir;
  ItemSorters.init();
  if (SortBy == SortOrder.MOD)   Collections.sort(view,ItemSorters.ConfigBased_SortByMod);
 else   if (SortBy == SortOrder.AMOUNT)   Collections.sort(view,ItemSorters.ConfigBased_SortBySize);
 else   if (SortBy == SortOrder.INVTWEAKS)   Collections.sort(view,ItemSorters.ConfigBased_SortByInvTweaks);
 else   Collections.sort(view,ItemSorters.ConfigBased_SortByName);
  for (  IAEItemStack is : view)   dsp.add(is.getItemStack());
}"
30565,"private void updateNEI(String filter){
  try {
    if (NEIWord == null || !NEIWord.equals(filter)) {
      Class c=ReflectionHelper.getClass(getClass().getClassLoader(),""String_Node_Str"");
      Field fldSearchField=c.getField(""String_Node_Str"");
      Object searchField=fldSearchField.get(c);
      Method a=searchField.getClass().getMethod(""String_Node_Str"",String.class);
      Method b=searchField.getClass().getMethod(""String_Node_Str"",String.class);
      NEIWord=filter;
      a.invoke(searchField,filter);
      b.invoke(searchField,""String_Node_Str"");
    }
  }
 catch (  Throwable _) {
  }
}","private void updateNEI(String filter){
  try {
    if (NEIWord == null || !NEIWord.equals(filter)) {
      Class c=ReflectionHelper.getClass(getClass().getClassLoader(),""String_Node_Str"");
      Field fldSearchField=c.getField(""String_Node_Str"");
      Object searchField=fldSearchField.get(c);
      Method a=searchField.getClass().getMethod(""String_Node_Str"",String.class);
      Method b=searchField.getClass().getMethod(""String_Node_Str"",String.class);
      NEIWord=filter;
      a.invoke(searchField,new String(filter));
      b.invoke(searchField,""String_Node_Str"");
    }
  }
 catch (  Throwable _) {
  }
}"
30566,"public void renderParticle(Tessellator par1Tessellator,float par2,float par3,float par4,float par5,float par6,float par7){
  float f6=this.particleTextureIndex.getMinU();
  float f7=this.particleTextureIndex.getMaxU();
  float f8=this.particleTextureIndex.getMinV();
  float f9=this.particleTextureIndex.getMaxV();
  float f10=0.1F * this.particleScale;
  float f11=(float)(this.prevPosX + (this.posX - this.prevPosX) * (double)par2 - interpPosX);
  float f12=(float)(this.prevPosY + (this.posY - this.prevPosY) * (double)par2 - interpPosY);
  float f13=(float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)par2 - interpPosZ);
  float f14=1.0F;
  int blkX=MathHelper.floor_double(posX);
  int blkY=MathHelper.floor_double(posY);
  int blkZ=MathHelper.floor_double(posZ);
  if (blkX == startBlkX && blkY == startBlkY && blkZ == startBlkZ) {
    par1Tessellator.setColorRGBA_F(this.particleRed * f14,this.particleGreen * f14,this.particleBlue * f14,this.particleAlpha);
    par1Tessellator.addVertexWithUV((double)(f11 - par3 * f10 - par6 * f10),(double)(f12 - par4 * f10),(double)(f13 - par5 * f10 - par7 * f10),(double)f7,(double)f9);
    par1Tessellator.addVertexWithUV((double)(f11 - par3 * f10 + par6 * f10),(double)(f12 + par4 * f10),(double)(f13 - par5 * f10 + par7 * f10),(double)f7,(double)f8);
    par1Tessellator.addVertexWithUV((double)(f11 + par3 * f10 + par6 * f10),(double)(f12 + par4 * f10),(double)(f13 + par5 * f10 + par7 * f10),(double)f6,(double)f8);
    par1Tessellator.addVertexWithUV((double)(f11 + par3 * f10 - par6 * f10),(double)(f12 - par4 * f10),(double)(f13 + par5 * f10 - par7 * f10),(double)f6,(double)f9);
  }
}","public void renderParticle(Tessellator par1Tessellator,float partialTick,float x,float y,float z,float rx,float rz){
  if (partialTick < 0 || partialTick > 1)   return;
  float f6=this.particleTextureIndex.getMinU();
  float f7=this.particleTextureIndex.getMaxU();
  float f8=this.particleTextureIndex.getMinV();
  float f9=this.particleTextureIndex.getMaxV();
  float scale=0.1F * this.particleScale;
  float offx=(float)(this.prevPosX + (this.posX - this.prevPosX) * (double)partialTick);
  float offy=(float)(this.prevPosY + (this.posY - this.prevPosY) * (double)partialTick);
  float offz=(float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)partialTick);
  float f14=1.0F;
  int blkX=MathHelper.floor_double(offx);
  int blkY=MathHelper.floor_double(offy);
  int blkZ=MathHelper.floor_double(offz);
  if (blkX == startBlkX && blkY == startBlkY && blkZ == startBlkZ) {
    offx-=interpPosX;
    offy-=interpPosY;
    offz-=interpPosZ;
    par1Tessellator.setColorRGBA_F(this.particleRed * f14,this.particleGreen * f14,this.particleBlue * f14,this.particleAlpha);
    par1Tessellator.addVertexWithUV((double)(offx - x * scale - rx * scale),(double)(offy - y * scale),(double)(offz - z * scale - rz * scale),(double)f7,(double)f9);
    par1Tessellator.addVertexWithUV((double)(offx - x * scale + rx * scale),(double)(offy + y * scale),(double)(offz - z * scale + rz * scale),(double)f7,(double)f8);
    par1Tessellator.addVertexWithUV((double)(offx + x * scale + rx * scale),(double)(offy + y * scale),(double)(offz + z * scale + rz * scale),(double)f6,(double)f8);
    par1Tessellator.addVertexWithUV((double)(offx + x * scale - rx * scale),(double)(offy - y * scale),(double)(offz + z * scale - rz * scale),(double)f6,(double)f9);
  }
}"
30567,"@Override public void renderParticle(Tessellator tess,float l,float rX,float rY,float rZ,float rYZ,float rXY){
  float j=1.0f;
  tess.setColorRGBA_F(this.particleRed * j * 0.9f,this.particleGreen * j * 0.95f,this.particleBlue * j,this.particleAlpha);
  if (particleAge == 3) {
    regen();
  }
  double f6=this.particleTextureIndexX / 16.0;
  double f7=f6 + 0.0324375F;
  double f8=this.particleTextureIndexY / 16.0;
  double f9=f8 + 0.0324375F;
  f6=f7;
  f8=f9;
  double scale=0.02;
  double a[]=new double[3];
  double b[]=new double[3];
  double ox=0;
  double oy=0;
  double oz=0;
  EntityPlayer p=Minecraft.getMinecraft().thePlayer;
  double offX=-rZ;
  double offY=MathHelper.cos((float)(Math.PI / 2.0f + p.rotationPitch * 0.017453292F));
  double offZ=rX;
  for (int layer=0; layer < 2; layer++) {
    if (layer == 0) {
      scale=0.04;
      offX*=0.001;
      offY*=0.001;
      offZ*=0.001;
      tess.setColorRGBA_F(this.particleRed * j * 0.4f,this.particleGreen * j * 0.25f,this.particleBlue * j * 0.45f,this.particleAlpha);
    }
 else {
      offX=0;
      offY=0;
      offZ=0;
      scale=0.02;
      tess.setColorRGBA_F(this.particleRed * j * 0.9f,this.particleGreen * j * 0.65f,this.particleBlue * j * 0.85f,this.particleAlpha);
    }
    for (int cycle=0; cycle < 3; cycle++) {
      clear();
      double x=(this.prevPosX + (this.posX - this.prevPosX) * (double)l - interpPosX) - offX;
      double y=(this.prevPosY + (this.posY - this.prevPosY) * (double)l - interpPosY) - offY;
      double z=(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)l - interpPosZ) - offZ;
      for (int s=0; s < steps; s++) {
        double xN=x + Steps[s][0];
        double yN=y + Steps[s][1];
        double zN=z + Steps[s][2];
        double xD=xN - x;
        double yD=yN - y;
        double zD=zN - z;
        if (cycle == 0) {
          ox=(yD * 0) - (1 * zD);
          oy=(zD * 0) - (0 * xD);
          oz=(xD * 1) - (0 * yD);
        }
        if (cycle == 1) {
          ox=(yD * 1) - (0 * zD);
          oy=(zD * 0) - (1 * xD);
          oz=(xD * 0) - (0 * yD);
        }
        if (cycle == 2) {
          ox=(yD * 0) - (0 * zD);
          oy=(zD * 1) - (0 * xD);
          oz=(xD * 0) - (1 * yD);
        }
        double ss=Math.sqrt(ox * ox + oy * oy + oz * oz) / ((((double)steps - (double)s) / (double)steps) * scale);
        ox/=ss;
        oy/=ss;
        oz/=ss;
        a[0]=x + ox;
        a[1]=y + oy;
        a[2]=z + oz;
        b[0]=x;
        b[1]=y;
        b[2]=z;
        draw(tess,a,b,f6,f8);
        x=xN;
        y=yN;
        z=zN;
      }
    }
  }
  GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
  GL11.glDisable(GL11.GL_CULL_FACE);
  tess.draw();
  GL11.glPopAttrib();
  tess.startDrawingQuads();
}","@Override public void renderParticle(Tessellator tess,float l,float rX,float rY,float rZ,float rYZ,float rXY){
  float j=1.0f;
  tess.setColorRGBA_F(this.particleRed * j * 0.9f,this.particleGreen * j * 0.95f,this.particleBlue * j,this.particleAlpha);
  if (particleAge == 3) {
    regen();
  }
  double f6=this.particleTextureIndexX / 16.0;
  double f7=f6 + 0.0324375F;
  double f8=this.particleTextureIndexY / 16.0;
  double f9=f8 + 0.0324375F;
  f6=f7;
  f8=f9;
  double scale=0.02;
  double a[]=new double[3];
  double b[]=new double[3];
  double ox=0;
  double oy=0;
  double oz=0;
  EntityPlayer p=Minecraft.getMinecraft().thePlayer;
  double offX=-rZ;
  double offY=MathHelper.cos((float)(Math.PI / 2.0f + p.rotationPitch * 0.017453292F));
  double offZ=rX;
  for (int layer=0; layer < 2; layer++) {
    if (layer == 0) {
      scale=0.04;
      offX*=0.001;
      offY*=0.001;
      offZ*=0.001;
      tess.setColorRGBA_F(this.particleRed * j * 0.4f,this.particleGreen * j * 0.25f,this.particleBlue * j * 0.45f,this.particleAlpha);
    }
 else {
      offX=0;
      offY=0;
      offZ=0;
      scale=0.02;
      tess.setColorRGBA_F(this.particleRed * j * 0.9f,this.particleGreen * j * 0.65f,this.particleBlue * j * 0.85f,this.particleAlpha);
    }
    for (int cycle=0; cycle < 3; cycle++) {
      clear();
      double x=(this.prevPosX + (this.posX - this.prevPosX) * (double)l - interpPosX) - offX;
      double y=(this.prevPosY + (this.posY - this.prevPosY) * (double)l - interpPosY) - offY;
      double z=(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)l - interpPosZ) - offZ;
      for (int s=0; s < steps; s++) {
        double xN=x + Steps[s][0];
        double yN=y + Steps[s][1];
        double zN=z + Steps[s][2];
        double xD=xN - x;
        double yD=yN - y;
        double zD=zN - z;
        if (cycle == 0) {
          ox=(yD * 0) - (1 * zD);
          oy=(zD * 0) - (0 * xD);
          oz=(xD * 1) - (0 * yD);
        }
        if (cycle == 1) {
          ox=(yD * 1) - (0 * zD);
          oy=(zD * 0) - (1 * xD);
          oz=(xD * 0) - (0 * yD);
        }
        if (cycle == 2) {
          ox=(yD * 0) - (0 * zD);
          oy=(zD * 1) - (0 * xD);
          oz=(xD * 0) - (1 * yD);
        }
        double ss=Math.sqrt(ox * ox + oy * oy + oz * oz) / ((((double)steps - (double)s) / (double)steps) * scale);
        ox/=ss;
        oy/=ss;
        oz/=ss;
        a[0]=x + ox;
        a[1]=y + oy;
        a[2]=z + oz;
        b[0]=x;
        b[1]=y;
        b[2]=z;
        draw(tess,a,b,f6,f8);
        x=xN;
        y=yN;
        z=zN;
      }
    }
  }
}"
30568,"@Override public void renderParticle(Tessellator par1Tessellator,float par2,float par3,float par4,float par5,float par6,float par7){
  Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
  float f6=this.particleTextureIndex.getMinU();
  float f7=this.particleTextureIndex.getMaxU();
  float f8=this.particleTextureIndex.getMinV();
  float f9=this.particleTextureIndex.getMaxV();
  float f10=0.05F * this.particleScale;
  float f11=(float)(this.prevPosX + (this.posX - this.prevPosX) * (double)par2 - interpPosX);
  float f12=(float)(this.prevPosY + (this.posY - this.prevPosY) * (double)par2 - interpPosY);
  float f13=(float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)par2 - interpPosZ);
  float f14=1.0F;
  par1Tessellator.setColorRGBA_F(this.particleRed * f14,this.particleGreen * f14,this.particleBlue * f14,this.particleAlpha);
  par1Tessellator.addVertexWithUV((double)(f11 - par3 * f10 - par6 * f10),(double)(f12 - par4 * f10),(double)(f13 - par5 * f10 - par7 * f10),(double)f7,(double)f9);
  par1Tessellator.addVertexWithUV((double)(f11 - par3 * f10 + par6 * f10),(double)(f12 + par4 * f10),(double)(f13 - par5 * f10 + par7 * f10),(double)f7,(double)f8);
  par1Tessellator.addVertexWithUV((double)(f11 + par3 * f10 + par6 * f10),(double)(f12 + par4 * f10),(double)(f13 + par5 * f10 + par7 * f10),(double)f6,(double)f8);
  par1Tessellator.addVertexWithUV((double)(f11 + par3 * f10 - par6 * f10),(double)(f12 - par4 * f10),(double)(f13 + par5 * f10 - par7 * f10),(double)f6,(double)f9);
}","@Override public void renderParticle(Tessellator par1Tessellator,float par2,float par3,float par4,float par5,float par6,float par7){
  float f6=this.particleTextureIndex.getMinU();
  float f7=this.particleTextureIndex.getMaxU();
  float f8=this.particleTextureIndex.getMinV();
  float f9=this.particleTextureIndex.getMaxV();
  float f10=0.05F * this.particleScale;
  float f11=(float)(this.prevPosX + (this.posX - this.prevPosX) * (double)par2 - interpPosX);
  float f12=(float)(this.prevPosY + (this.posY - this.prevPosY) * (double)par2 - interpPosY);
  float f13=(float)(this.prevPosZ + (this.posZ - this.prevPosZ) * (double)par2 - interpPosZ);
  float f14=1.0F;
  par1Tessellator.setColorRGBA_F(this.particleRed * f14,this.particleGreen * f14,this.particleBlue * f14,this.particleAlpha);
  par1Tessellator.addVertexWithUV((double)(f11 - par3 * f10 - par6 * f10),(double)(f12 - par4 * f10),(double)(f13 - par5 * f10 - par7 * f10),(double)f7,(double)f9);
  par1Tessellator.addVertexWithUV((double)(f11 - par3 * f10 + par6 * f10),(double)(f12 + par4 * f10),(double)(f13 - par5 * f10 + par7 * f10),(double)f7,(double)f8);
  par1Tessellator.addVertexWithUV((double)(f11 + par3 * f10 + par6 * f10),(double)(f12 + par4 * f10),(double)(f13 + par5 * f10 + par7 * f10),(double)f6,(double)f8);
  par1Tessellator.addVertexWithUV((double)(f11 + par3 * f10 - par6 * f10),(double)(f12 - par4 * f10),(double)(f13 + par5 * f10 - par7 * f10),(double)f6,(double)f9);
}"
30569,"public boolean isActive(){
  return getCore().getActionableNode().isActive();
}","public boolean isActive(){
  TileCraftingTile core=getCore();
  if (core == null)   return false;
  IGridNode node=core.getActionableNode();
  if (node == null)   return false;
  return node.isActive();
}"
30570,"public IAEItemStack getLow(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack bottom=new AEItemStack(this);
  AEItemDef newDef=bottom.def=bottom.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=0;
    newDef.reHash();
    return bottom;
  }
  if (newDef.item.isDamageable()) {
    if (fuzzy == FuzzyMode.IGNORE_ALL) {
      newDef.dspDamage=0;
    }
 else {
      int breakpoint=fuzzy.calculateBreakPoint(def.maxDamage);
      newDef.dspDamage=breakpoint <= def.dspDamage ? breakpoint : 0;
    }
    newDef.damageValue=newDef.dspDamage;
  }
  newDef.tagCompound=AEItemDef.lowTag;
  newDef.reHash();
  return bottom;
}","public IAEItemStack getLow(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack bottom=new AEItemStack(this);
  AEItemDef newDef=bottom.def=bottom.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=0;
    newDef.reHash();
    return bottom;
  }
  if (newDef.item.isDamageable()) {
    if (fuzzy == FuzzyMode.IGNORE_ALL) {
      newDef.dspDamage=0;
    }
 else     if (fuzzy == FuzzyMode.PERCENT_99) {
      if (def.damageValue == 0)       newDef.dspDamage=0;
 else       newDef.dspDamage=1;
    }
 else {
      int breakpoint=fuzzy.calculateBreakPoint(def.maxDamage);
      newDef.dspDamage=breakpoint <= def.dspDamage ? breakpoint : 0;
    }
    newDef.damageValue=newDef.dspDamage;
  }
  newDef.tagCompound=AEItemDef.lowTag;
  newDef.reHash();
  return bottom;
}"
30571,"public IAEItemStack getHigh(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack top=new AEItemStack(this);
  AEItemDef newDef=top.def=top.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=Integer.MAX_VALUE;
    newDef.reHash();
    return top;
  }
  if (newDef.item.isDamageable()) {
    if (fuzzy == FuzzyMode.IGNORE_ALL) {
      newDef.dspDamage=def.maxDamage + 1;
    }
 else {
      int breakpoint=fuzzy.calculateBreakPoint(def.maxDamage);
      newDef.dspDamage=def.dspDamage < breakpoint ? breakpoint - 1 : def.maxDamage + 1;
    }
    newDef.damageValue=newDef.dspDamage;
  }
  newDef.tagCompound=AEItemDef.highTag;
  newDef.reHash();
  return top;
}","public IAEItemStack getHigh(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack top=new AEItemStack(this);
  AEItemDef newDef=top.def=top.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=Integer.MAX_VALUE;
    newDef.reHash();
    return top;
  }
  if (newDef.item.isDamageable()) {
    if (fuzzy == FuzzyMode.IGNORE_ALL) {
      newDef.dspDamage=def.maxDamage + 1;
    }
 else     if (fuzzy == FuzzyMode.PERCENT_99) {
      if (def.damageValue == 0)       newDef.dspDamage=0;
 else       newDef.dspDamage=def.maxDamage + 1;
    }
 else {
      int breakpoint=fuzzy.calculateBreakPoint(def.maxDamage);
      newDef.dspDamage=def.dspDamage < breakpoint ? breakpoint - 1 : def.maxDamage + 1;
    }
    newDef.damageValue=newDef.dspDamage;
  }
  newDef.tagCompound=AEItemDef.highTag;
  newDef.reHash();
  return top;
}"
30572,"public void selectFace(RenderBlocks renderer,ForgeDirection west,ForgeDirection up,ForgeDirection forward,int u1,int u2,int v1,int v2){
  v1=16 - v1;
  v2=16 - v2;
  double minX=(forward.offsetX > 0 ? 1 : 0) + mapFaceUV(west.offsetX,u1) + mapFaceUV(up.offsetX,v1);
  double minY=(forward.offsetY > 0 ? 1 : 0) + mapFaceUV(west.offsetY,u1) + mapFaceUV(up.offsetY,v1);
  double minZ=(forward.offsetZ > 0 ? 1 : 0) + mapFaceUV(west.offsetZ,u1) + mapFaceUV(up.offsetZ,v1);
  double maxX=(forward.offsetX > 0 ? 1 : 0) + mapFaceUV(west.offsetX,u2) + mapFaceUV(up.offsetX,v2);
  double maxY=(forward.offsetY > 0 ? 1 : 0) + mapFaceUV(west.offsetY,u2) + mapFaceUV(up.offsetY,v2);
  double maxZ=(forward.offsetZ > 0 ? 1 : 0) + mapFaceUV(west.offsetZ,u2) + mapFaceUV(up.offsetZ,v2);
  renderer.renderMinX=Math.max(0.0,Math.min(minX,maxX) - 0.001);
  renderer.renderMaxX=Math.min(1.0,Math.max(minX,maxX) + 0.001);
  renderer.renderMinY=Math.max(0.0,Math.min(minY,maxY) - 0.001);
  renderer.renderMaxY=Math.min(1.0,Math.max(minY,maxY) + 0.001);
  renderer.renderMinZ=Math.max(0.0,Math.min(minZ,maxZ) - 0.001);
  renderer.renderMaxZ=Math.min(1.0,Math.max(minZ,maxZ) + 0.001);
}","public void selectFace(RenderBlocks renderer,ForgeDirection west,ForgeDirection up,ForgeDirection forward,int u1,int u2,int v1,int v2){
  v1=16 - v1;
  v2=16 - v2;
  double minX=(forward.offsetX > 0 ? 1 : 0) + mapFaceUV(west.offsetX,u1) + mapFaceUV(up.offsetX,v1);
  double minY=(forward.offsetY > 0 ? 1 : 0) + mapFaceUV(west.offsetY,u1) + mapFaceUV(up.offsetY,v1);
  double minZ=(forward.offsetZ > 0 ? 1 : 0) + mapFaceUV(west.offsetZ,u1) + mapFaceUV(up.offsetZ,v1);
  double maxX=(forward.offsetX > 0 ? 1 : 0) + mapFaceUV(west.offsetX,u2) + mapFaceUV(up.offsetX,v2);
  double maxY=(forward.offsetY > 0 ? 1 : 0) + mapFaceUV(west.offsetY,u2) + mapFaceUV(up.offsetY,v2);
  double maxZ=(forward.offsetZ > 0 ? 1 : 0) + mapFaceUV(west.offsetZ,u2) + mapFaceUV(up.offsetZ,v2);
  renderer.renderMinX=Math.max(0.0,Math.min(minX,maxX) - (forward.offsetX != 0 ? 0 : 0.001));
  renderer.renderMaxX=Math.min(1.0,Math.max(minX,maxX) + (forward.offsetX != 0 ? 0 : 0.001));
  renderer.renderMinY=Math.max(0.0,Math.min(minY,maxY) - (forward.offsetY != 0 ? 0 : 0.001));
  renderer.renderMaxY=Math.min(1.0,Math.max(minY,maxY) + (forward.offsetY != 0 ? 0 : 0.001));
  renderer.renderMinZ=Math.max(0.0,Math.min(minZ,maxZ) - (forward.offsetZ != 0 ? 0 : 0.001));
  renderer.renderMaxZ=Math.min(1.0,Math.max(minZ,maxZ) + (forward.offsetZ != 0 ? 0 : 0.001));
}"
30573,"public TileCharger(){
  gridProxy.setValidSides(EnumSet.noneOf(ForgeDirection.class));
  gridProxy.setFlags(GridFlags.CANNOT_CARRY);
  internalMaxPower=1500;
  gridProxy.setIdlePowerUsage(0);
  addNewHandler(new TileChargerHandler());
}","public TileCharger(){
  gridProxy.setValidSides(EnumSet.noneOf(ForgeDirection.class));
  gridProxy.setFlags();
  internalMaxPower=1500;
  gridProxy.setIdlePowerUsage(0);
  addNewHandler(new TileChargerHandler());
}"
30574,"public TileQuartzGrowthAccelerator(){
  gridProxy.setValidSides(EnumSet.noneOf(ForgeDirection.class));
  gridProxy.setFlags(GridFlags.CANNOT_CARRY);
  gridProxy.setIdlePowerUsage(8);
  addNewHandler(new TileChargerHandler());
}","public TileQuartzGrowthAccelerator(){
  gridProxy.setValidSides(EnumSet.noneOf(ForgeDirection.class));
  gridProxy.setFlags();
  gridProxy.setIdlePowerUsage(8);
  addNewHandler(new TileChargerHandler());
}"
30575,"public TileVibrationChamber(){
  gridProxy.setIdlePowerUsage(0);
  gridProxy.setFlags(GridFlags.CANNOT_CARRY);
  addNewHandler(new TileVibrationChamberHandler());
}","public TileVibrationChamber(){
  gridProxy.setIdlePowerUsage(0);
  gridProxy.setFlags();
  addNewHandler(new TileVibrationChamberHandler());
}"
30576,"public static boolean place(EntityPlayer player,World world){
  MovingObjectPosition hit=RayTracer.reTrace(world,player);
  if (hit == null)   return false;
  BlockCoord pos=new BlockCoord(hit.blockX,hit.blockY,hit.blockZ).offset(hit.sideHit);
  ItemStack held=player.getHeldItem();
  TMultiPart part=null;
  Block blk=null;
  if (held == null)   return false;
  if (held.getItem() instanceof AEBaseItemBlock) {
    AEBaseItemBlock ib=(AEBaseItemBlock)held.getItem();
    blk=Block.getBlockFromItem(ib);
    part=PartRegistry.getPartByBlock(blk,hit.sideHit);
  }
  if (part == null)   return false;
  if (world.isRemote && !player.isSneaking()) {
    Vector3 f=new Vector3(hit.hitVec).add(-hit.blockX,-hit.blockY,-hit.blockZ);
    Block block=world.getBlock(hit.blockX,hit.blockY,hit.blockZ);
    if (block != null && !ignoreActivate(block) && block.onBlockActivated(world,hit.blockX,hit.blockY,hit.blockZ,player,hit.sideHit,(float)f.x,(float)f.y,(float)f.z)) {
      player.swingItem();
      PacketCustom.sendToServer(new C08PacketPlayerBlockPlacement(hit.blockX,hit.blockY,hit.blockZ,hit.sideHit,player.inventory.getCurrentItem(),(float)f.x,(float)f.y,(float)f.z));
      return false;
    }
  }
  TileMultipart tile=TileMultipart.getOrConvertTile(world,pos);
  if (tile == null || !tile.canAddPart(part))   return false;
  if (!world.isRemote) {
    TileMultipart.addPart(world,pos,part);
    world.playSoundEffect(pos.x + 0.5,pos.y + 0.5,pos.z + 0.5,blk.stepSound.func_150496_b(),(blk.stepSound.getVolume() + 1.0F) / 2.0F,blk.stepSound.getPitch() * 0.8F);
    if (!player.capabilities.isCreativeMode) {
      held.stackSize--;
      if (held.stackSize == 0) {
        player.inventory.mainInventory[player.inventory.currentItem]=null;
        MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(player,held));
      }
    }
  }
 else {
    player.swingItem();
    try {
      NetworkHandler.instance.sendToServer(new PacketMultiPart());
    }
 catch (    IOException e) {
      AELog.error(e);
    }
  }
  return true;
}","public static boolean place(EntityPlayer player,World world){
  MovingObjectPosition hit=RayTracer.reTrace(world,player);
  if (hit == null)   return false;
  BlockCoord pos=new BlockCoord(hit.blockX,hit.blockY,hit.blockZ).offset(hit.sideHit);
  ItemStack held=player.getHeldItem();
  TMultiPart part=null;
  Block blk=null;
  if (held == null)   return false;
  if (held.getItem() instanceof AEBaseItemBlock) {
    AEBaseItemBlock ib=(AEBaseItemBlock)held.getItem();
    blk=Block.getBlockFromItem(ib);
    part=PartRegistry.getPartByBlock(blk,hit.sideHit);
  }
  if (part == null)   return false;
  if (world.isRemote && !player.isSneaking()) {
    Vector3 f=new Vector3(hit.hitVec).add(-hit.blockX,-hit.blockY,-hit.blockZ);
    Block block=world.getBlock(hit.blockX,hit.blockY,hit.blockZ);
    if (block != null && !ignoreActivate(block) && block.onBlockActivated(world,hit.blockX,hit.blockY,hit.blockZ,player,hit.sideHit,(float)f.x,(float)f.y,(float)f.z)) {
      player.swingItem();
      PacketCustom.sendToServer(new C08PacketPlayerBlockPlacement(hit.blockX,hit.blockY,hit.blockZ,hit.sideHit,player.inventory.getCurrentItem(),(float)f.x,(float)f.y,(float)f.z));
      return true;
    }
  }
  TileMultipart tile=TileMultipart.getOrConvertTile(world,pos);
  if (tile == null || !tile.canAddPart(part))   return false;
  if (!world.isRemote) {
    TileMultipart.addPart(world,pos,part);
    world.playSoundEffect(pos.x + 0.5,pos.y + 0.5,pos.z + 0.5,blk.stepSound.func_150496_b(),(blk.stepSound.getVolume() + 1.0F) / 2.0F,blk.stepSound.getPitch() * 0.8F);
    if (!player.capabilities.isCreativeMode) {
      held.stackSize--;
      if (held.stackSize == 0) {
        player.inventory.mainInventory[player.inventory.currentItem]=null;
        MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(player,held));
      }
    }
  }
 else {
    player.swingItem();
    try {
      NetworkHandler.instance.sendToServer(new PacketMultiPart());
    }
 catch (    IOException e) {
      AELog.error(e);
    }
  }
  return true;
}"
30577,"@Override public void serverPacketData(INetworkInfo manager,AppEngPacket packet,EntityPlayer player){
  EntityPlayerMP pmp=(EntityPlayerMP)player;
  Container con=pmp.openContainer;
  if (con != null && con instanceof IContainerCraftingPacket) {
    IContainerCraftingPacket cct=(IContainerCraftingPacket)con;
    IGridNode node=cct.getNetworkNode();
    if (node != null) {
      IGrid grid=node.getGrid();
      if (grid == null)       return;
      IStorageGrid inv=grid.getCache(IStorageGrid.class);
      IEnergyGrid energy=grid.getCache(IEnergyGrid.class);
      ISecurityGrid security=grid.getCache(ISecurityGrid.class);
      IInventory craftMatrix=cct.getInventoryByName(""String_Node_Str"");
      Actionable realForFake=cct.useRealItems() ? Actionable.MODULATE : Actionable.SIMULATE;
      if (inv != null && recipe != null && security != null) {
        InventoryCrafting ic=new InventoryCrafting(new ContainerNull(),3,3);
        for (int x=0; x < 9; x++)         ic.setInventorySlotContents(x,recipe[x]);
        IRecipe r=Platform.findMatchingRecipe(ic,pmp.worldObj);
        if (r != null && security.hasPermission(player,SecurityPermissions.EXTRACT)) {
          ItemStack is=r.getCraftingResult(ic);
          if (is != null) {
            IMEMonitor<IAEItemStack> stor=inv.getItemInventory();
            IItemList all=stor.getStorageList();
            for (int x=0; x < craftMatrix.getSizeInventory(); x++) {
              ItemStack PatternItem=ic.getStackInSlot(x);
              ItemStack currentItem=craftMatrix.getStackInSlot(x);
              if (currentItem != null) {
                ic.setInventorySlotContents(x,currentItem);
                ItemStack newis=r.matches(ic,pmp.worldObj) ? r.getCraftingResult(ic) : null;
                ic.setInventorySlotContents(x,PatternItem);
                if (newis == null || !Platform.isSameItemPrecise(newis,is)) {
                  IAEItemStack in=AEItemStack.create(currentItem);
                  if (in != null) {
                    IAEItemStack out=realForFake == Actionable.SIMULATE ? null : Platform.poweredInsert(energy,stor,in,cct.getSource());
                    if (out != null)                     craftMatrix.setInventorySlotContents(x,out.getItemStack());
 else                     craftMatrix.setInventorySlotContents(x,null);
                    currentItem=craftMatrix.getStackInSlot(x);
                  }
                }
              }
              if (PatternItem != null && currentItem == null) {
                craftMatrix.setInventorySlotContents(x,Platform.extractItemsByRecipe(energy,cct.getSource(),stor,player.worldObj,r,is,ic,PatternItem,x,all,realForFake));
              }
            }
            con.onCraftMatrixChanged(craftMatrix);
          }
        }
      }
    }
  }
}","@Override public void serverPacketData(INetworkInfo manager,AppEngPacket packet,EntityPlayer player){
  EntityPlayerMP pmp=(EntityPlayerMP)player;
  Container con=pmp.openContainer;
  if (con != null && con instanceof IContainerCraftingPacket) {
    IContainerCraftingPacket cct=(IContainerCraftingPacket)con;
    IGridNode node=cct.getNetworkNode();
    if (node != null) {
      IGrid grid=node.getGrid();
      if (grid == null)       return;
      IStorageGrid inv=grid.getCache(IStorageGrid.class);
      IEnergyGrid energy=grid.getCache(IEnergyGrid.class);
      ISecurityGrid security=grid.getCache(ISecurityGrid.class);
      IInventory craftMatrix=cct.getInventoryByName(""String_Node_Str"");
      Actionable realForFake=cct.useRealItems() ? Actionable.MODULATE : Actionable.SIMULATE;
      if (inv != null && recipe != null && security != null) {
        InventoryCrafting ic=new InventoryCrafting(new ContainerNull(),3,3);
        for (int x=0; x < 9; x++) {
          if (recipe[x] != null && recipe[x].length > 0) {
            ic.setInventorySlotContents(x,recipe[x][0]);
          }
        }
        IRecipe r=Platform.findMatchingRecipe(ic,pmp.worldObj);
        if (r != null && security.hasPermission(player,SecurityPermissions.EXTRACT)) {
          ItemStack is=r.getCraftingResult(ic);
          if (is != null) {
            IMEMonitor<IAEItemStack> stor=inv.getItemInventory();
            IItemList all=stor.getStorageList();
            for (int x=0; x < craftMatrix.getSizeInventory(); x++) {
              ItemStack PatternItem=ic.getStackInSlot(x);
              ItemStack currentItem=craftMatrix.getStackInSlot(x);
              if (currentItem != null) {
                ic.setInventorySlotContents(x,currentItem);
                ItemStack newis=r.matches(ic,pmp.worldObj) ? r.getCraftingResult(ic) : null;
                ic.setInventorySlotContents(x,PatternItem);
                if (newis == null || !Platform.isSameItemPrecise(newis,is)) {
                  IAEItemStack in=AEItemStack.create(currentItem);
                  if (in != null) {
                    IAEItemStack out=realForFake == Actionable.SIMULATE ? null : Platform.poweredInsert(energy,stor,in,cct.getSource());
                    if (out != null)                     craftMatrix.setInventorySlotContents(x,out.getItemStack());
 else                     craftMatrix.setInventorySlotContents(x,null);
                    currentItem=craftMatrix.getStackInSlot(x);
                  }
                }
              }
              if (PatternItem != null && currentItem == null) {
                ItemStack whichItem=Platform.extractItemsByRecipe(energy,cct.getSource(),stor,player.worldObj,r,is,ic,PatternItem,x,all,realForFake);
                if (whichItem == null) {
                  for (int y=0; y < recipe[x].length; y++) {
                    IAEItemStack request=AEItemStack.create(recipe[x][y]);
                    if (request != null) {
                      request.setStackSize(1);
                      IAEItemStack out=Platform.poweredExtraction(energy,stor,request,cct.getSource());
                      if (out != null) {
                        whichItem=out.getItemStack();
                        break;
                      }
                    }
                  }
                }
                craftMatrix.setInventorySlotContents(x,whichItem);
              }
            }
            con.onCraftMatrixChanged(craftMatrix);
          }
        }
      }
    }
  }
}"
30578,"public void overlayRecipe(GuiContainer gui,List<PositionedStack> ingredients,boolean shift){
  try {
    NBTTagCompound recipe=new NBTTagCompound();
    if (gui instanceof GuiCraftingTerm || gui instanceof GuiPatternTerm) {
      for (int i=0; i < ingredients.size(); i++) {
        PositionedStack pstack=ingredients.get(i);
        int col=(pstack.relx - 25) / 18;
        int row=(pstack.rely - 6) / 18;
        if (pstack.item != null) {
          for (          Slot slot : (List<Slot>)gui.inventorySlots.inventorySlots) {
            if (slot instanceof SlotCraftingMatrix || slot instanceof SlotFakeCraftingMatrix) {
              Slot ctSlot=(Slot)slot;
              if (ctSlot.getSlotIndex() == col + row * 3) {
                NBTTagCompound inbt=new NBTTagCompound();
                pstack.item.writeToNBT(inbt);
                recipe.setTag(""String_Node_Str"" + ctSlot.getSlotIndex(),inbt);
                break;
              }
            }
          }
        }
      }
      NetworkHandler.instance.sendToServer(new PacketNEIRecipe(recipe));
    }
  }
 catch (  Exception err) {
  }
catch (  Error err) {
  }
}","public void overlayRecipe(GuiContainer gui,List<PositionedStack> ingredients,boolean shift){
  try {
    NBTTagCompound recipe=new NBTTagCompound();
    if (gui instanceof GuiCraftingTerm || gui instanceof GuiPatternTerm) {
      for (int i=0; i < ingredients.size(); i++) {
        PositionedStack pstack=ingredients.get(i);
        int col=(pstack.relx - 25) / 18;
        int row=(pstack.rely - 6) / 18;
        if (pstack.items != null && pstack.items.length > 0) {
          for (          Slot slot : (List<Slot>)gui.inventorySlots.inventorySlots) {
            if (slot instanceof SlotCraftingMatrix || slot instanceof SlotFakeCraftingMatrix) {
              Slot ctSlot=(Slot)slot;
              if (ctSlot.getSlotIndex() == col + row * 3) {
                NBTTagList ilist=new NBTTagList();
                for (int x=0; x < pstack.items.length; x++) {
                  NBTTagCompound inbt=new NBTTagCompound();
                  pstack.items[x].writeToNBT(inbt);
                  ilist.addtag(inbt);
                }
                recipe.setTag(""String_Node_Str"" + ctSlot.getSlotIndex(),ilist);
                break;
              }
            }
          }
        }
      }
      NetworkHandler.instance.sendToServer(new PacketNEIRecipe(recipe));
    }
  }
 catch (  Exception err) {
  }
catch (  Error err) {
  }
}"
30579,"public void Init(FMLInitializationEvent event){
  ItemMultiMaterial.instance.unduplicate();
  if (AEConfig.instance.isFeatureEnabled(AEFeature.CustomRecipes))   recipeHandler.parseRecipes(new ConfigLoader(AppEng.instance.getConfigPath()),""String_Node_Str"");
 else   recipeHandler.parseRecipes(new JarLoader(""String_Node_Str""),""String_Node_Str"");
  IPartHelper ph=AEApi.instance().partHelper();
  ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  if (AppEng.instance.isIntegrationEnabled(IntegrationType.IC2)) {
    ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
    ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  }
  if (AppEng.instance.isIntegrationEnabled(IntegrationType.MJ5)) {
    ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
    ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  }
  if (AppEng.instance.isIntegrationEnabled(IntegrationType.MJ6))   ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  if (AppEng.instance.isIntegrationEnabled(IntegrationType.RF))   ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  FMLCommonHandler.instance().bus().register(TickHandler.instance);
  MinecraftForge.EVENT_BUS.register(TickHandler.instance);
  PartPlacement pp=new PartPlacement();
  MinecraftForge.EVENT_BUS.register(pp);
  FMLCommonHandler.instance().bus().register(pp);
  IGridCacheRegistry gcr=AEApi.instance().registries().gridCache();
  gcr.registerGridCache(ITickManager.class,TickManagerCache.class);
  gcr.registerGridCache(IEnergyGrid.class,EnergyGridCache.class);
  gcr.registerGridCache(IPathingGrid.class,PathGridCache.class);
  gcr.registerGridCache(IStorageGrid.class,GridStorageCache.class);
  gcr.registerGridCache(P2PCache.class,P2PCache.class);
  gcr.registerGridCache(ISpatialCache.class,SpatialPylonCache.class);
  gcr.registerGridCache(ISecurityGrid.class,SecurityCache.class);
  gcr.registerGridCache(ICraftingGrid.class,CraftingGridCache.class);
  AEApi.instance().registries().externalStorage().addExternalStorageInterface(new AEExternalHandler());
  AEApi.instance().registries().cell().addCellHandler(new BasicCellHandler());
  AEApi.instance().registries().cell().addCellHandler(new CreativeCellHandler());
  AEApi.instance().registries().matterCannon().registerAmmo(AEApi.instance().materials().materialMatterBall.stack(1),32.0);
  ((P2PTunnelRegistry)AEApi.instance().registries().p2pTunnel()).configure();
  recipeHandler.injectRecipes();
  if (AEConfig.instance.isFeatureEnabled(AEFeature.enableDisassemblyCrafting))   CraftingManager.getInstance().getRecipeList().add(new DisassembleRecipe());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.enableFacadeCrafting))   CraftingManager.getInstance().getRecipeList().add(new FacadeRecipe());
}","public void Init(FMLInitializationEvent event){
  ItemMultiMaterial.instance.unduplicate();
  if (AEConfig.instance.isFeatureEnabled(AEFeature.CustomRecipes))   recipeHandler.parseRecipes(new ConfigLoader(AppEng.instance.getConfigPath()),""String_Node_Str"");
 else   recipeHandler.parseRecipes(new JarLoader(""String_Node_Str""),""String_Node_Str"");
  IPartHelper ph=AEApi.instance().partHelper();
  ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  if (AppEng.instance.isIntegrationEnabled(IntegrationType.IC2)) {
    ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
    ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  }
  if (AppEng.instance.isIntegrationEnabled(IntegrationType.MJ5)) {
    ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
    ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  }
  if (AppEng.instance.isIntegrationEnabled(IntegrationType.MJ6))   ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  if (AppEng.instance.isIntegrationEnabled(IntegrationType.RF))   ph.registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  FMLCommonHandler.instance().bus().register(TickHandler.instance);
  MinecraftForge.EVENT_BUS.register(TickHandler.instance);
  PartPlacement pp=new PartPlacement();
  MinecraftForge.EVENT_BUS.register(pp);
  FMLCommonHandler.instance().bus().register(pp);
  IGridCacheRegistry gcr=AEApi.instance().registries().gridCache();
  gcr.registerGridCache(ITickManager.class,TickManagerCache.class);
  gcr.registerGridCache(IEnergyGrid.class,EnergyGridCache.class);
  gcr.registerGridCache(IPathingGrid.class,PathGridCache.class);
  gcr.registerGridCache(IStorageGrid.class,GridStorageCache.class);
  gcr.registerGridCache(P2PCache.class,P2PCache.class);
  gcr.registerGridCache(ISpatialCache.class,SpatialPylonCache.class);
  gcr.registerGridCache(ISecurityGrid.class,SecurityCache.class);
  gcr.registerGridCache(ICraftingGrid.class,CraftingGridCache.class);
  AEApi.instance().registries().externalStorage().addExternalStorageInterface(new AEExternalHandler());
  AEApi.instance().registries().cell().addCellHandler(new BasicCellHandler());
  AEApi.instance().registries().cell().addCellHandler(new CreativeCellHandler());
  AEApi.instance().registries().matterCannon().registerAmmo(AEApi.instance().materials().materialMatterBall.stack(1),32.0);
  recipeHandler.injectRecipes();
  if (AEConfig.instance.isFeatureEnabled(AEFeature.enableDisassemblyCrafting))   CraftingManager.getInstance().getRecipeList().add(new DisassembleRecipe());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.enableFacadeCrafting))   CraftingManager.getInstance().getRecipeList().add(new FacadeRecipe());
}"
30580,"public void PostInit(FMLPostInitializationEvent event){
  registerSpatial(true);
  PlayerMessages.values();
  GuiText.values();
  Api.instance.partHelper.initFMPSupport();
  ((BlockCableBus)AEApi.instance().blocks().blockMultiPart.block()).setupTile();
  Upgrades.CRAFTING.registerItem(AEApi.instance().parts().partInterface.stack(1),1);
  Upgrades.CRAFTING.registerItem(AEApi.instance().blocks().blockInterface.stack(1),1);
  Upgrades.SPEED.registerItem(AEApi.instance().blocks().blockIOPort.stack(1),3);
  Upgrades.REDSTONE.registerItem(AEApi.instance().blocks().blockIOPort.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partLevelEmitter.stack(1),1);
  Upgrades.CRAFTING.registerItem(AEApi.instance().parts().partLevelEmitter.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partImportBus.stack(1),1);
  Upgrades.REDSTONE.registerItem(AEApi.instance().parts().partImportBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partImportBus.stack(1),2);
  Upgrades.SPEED.registerItem(AEApi.instance().parts().partImportBus.stack(1),4);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.REDSTONE.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partExportBus.stack(1),2);
  Upgrades.SPEED.registerItem(AEApi.instance().parts().partExportBus.stack(1),4);
  Upgrades.CRAFTING.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell1k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell1k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell4k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell4k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell16k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell16k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell64k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell64k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemPortableCell.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemPortableCell.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemViewCell.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemViewCell.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partStorageBus.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().parts().partStorageBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partStorageBus.stack(1),5);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partFormationPlane.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().parts().partFormationPlane.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partFormationPlane.stack(1),5);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemMassCannon.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemMassCannon.stack(1),1);
  Upgrades.SPEED.registerItem(AEApi.instance().items().itemMassCannon.stack(1),4);
  Upgrades.SPEED.registerItem(AEApi.instance().blocks().blockMolecularAssembler.stack(1),5);
  AEApi.instance().registries().wireless().registerWirelessHandler((IWirelessTermHandler)AEApi.instance().items().itemWirelessTerminal.item());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.ChestLoot)) {
    ChestGenHooks d=ChestGenHooks.getInfo(ChestGenHooks.MINESHAFT_CORRIDOR);
    d.addItem(new WeightedRandomChestContent(AEApi.instance().materials().materialCertusQuartzCrystal.stack(1),1,4,2));
    d.addItem(new WeightedRandomChestContent(AEApi.instance().materials().materialCertusQuartzDust.stack(1),1,4,2));
  }
  if (AEConfig.instance.isFeatureEnabled(AEFeature.VillagerTrading))   VillagerRegistry.instance().registerVillageTradeHandler(3,new AETrading());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.CertusQuartzWorldGen))   GameRegistry.registerWorldGenerator(new QuartzWorldGen(),0);
  if (AEConfig.instance.isFeatureEnabled(AEFeature.MeteoriteWorldGen))   GameRegistry.registerWorldGenerator(new MeteoriteWorldGen(),0);
  IMovableRegistry mr=AEApi.instance().registries().moveable();
  mr.blacklistBlock(net.minecraft.init.Blocks.bedrock);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityBeacon.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityBrewingStand.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityChest.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityCommandBlock.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityComparator.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityDaylightDetector.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityDispenser.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityDropper.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityEnchantmentTable.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityEnderChest.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityEndPortal.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntitySkull.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityFurnace.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityMobSpawner.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntitySign.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityPiston.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityFlowerPot.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityNote.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityHopper.class);
  mr.whiteListTileEntity(AEBaseTile.class);
  for (  WorldGenType type : WorldGenType.values()) {
    AEApi.instance().registries().worldgen().disableWorldGenForProviderID(type,StorageWorldProvider.class);
    AEApi.instance().registries().worldgen().disableWorldGenForDimension(type,1);
    AEApi.instance().registries().worldgen().disableWorldGenForDimension(type,-1);
  }
  OreDictionaryHandler.instance.bakeRecipes();
}","public void PostInit(FMLPostInitializationEvent event){
  registerSpatial(true);
  ((P2PTunnelRegistry)AEApi.instance().registries().p2pTunnel()).configure();
  PlayerMessages.values();
  GuiText.values();
  Api.instance.partHelper.initFMPSupport();
  ((BlockCableBus)AEApi.instance().blocks().blockMultiPart.block()).setupTile();
  Upgrades.CRAFTING.registerItem(AEApi.instance().parts().partInterface.stack(1),1);
  Upgrades.CRAFTING.registerItem(AEApi.instance().blocks().blockInterface.stack(1),1);
  Upgrades.SPEED.registerItem(AEApi.instance().blocks().blockIOPort.stack(1),3);
  Upgrades.REDSTONE.registerItem(AEApi.instance().blocks().blockIOPort.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partLevelEmitter.stack(1),1);
  Upgrades.CRAFTING.registerItem(AEApi.instance().parts().partLevelEmitter.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partImportBus.stack(1),1);
  Upgrades.REDSTONE.registerItem(AEApi.instance().parts().partImportBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partImportBus.stack(1),2);
  Upgrades.SPEED.registerItem(AEApi.instance().parts().partImportBus.stack(1),4);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.REDSTONE.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partExportBus.stack(1),2);
  Upgrades.SPEED.registerItem(AEApi.instance().parts().partExportBus.stack(1),4);
  Upgrades.CRAFTING.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell1k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell1k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell4k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell4k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell16k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell16k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell64k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell64k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemPortableCell.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemPortableCell.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemViewCell.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemViewCell.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partStorageBus.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().parts().partStorageBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partStorageBus.stack(1),5);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partFormationPlane.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().parts().partFormationPlane.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partFormationPlane.stack(1),5);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemMassCannon.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemMassCannon.stack(1),1);
  Upgrades.SPEED.registerItem(AEApi.instance().items().itemMassCannon.stack(1),4);
  Upgrades.SPEED.registerItem(AEApi.instance().blocks().blockMolecularAssembler.stack(1),5);
  AEApi.instance().registries().wireless().registerWirelessHandler((IWirelessTermHandler)AEApi.instance().items().itemWirelessTerminal.item());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.ChestLoot)) {
    ChestGenHooks d=ChestGenHooks.getInfo(ChestGenHooks.MINESHAFT_CORRIDOR);
    d.addItem(new WeightedRandomChestContent(AEApi.instance().materials().materialCertusQuartzCrystal.stack(1),1,4,2));
    d.addItem(new WeightedRandomChestContent(AEApi.instance().materials().materialCertusQuartzDust.stack(1),1,4,2));
  }
  if (AEConfig.instance.isFeatureEnabled(AEFeature.VillagerTrading))   VillagerRegistry.instance().registerVillageTradeHandler(3,new AETrading());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.CertusQuartzWorldGen))   GameRegistry.registerWorldGenerator(new QuartzWorldGen(),0);
  if (AEConfig.instance.isFeatureEnabled(AEFeature.MeteoriteWorldGen))   GameRegistry.registerWorldGenerator(new MeteoriteWorldGen(),0);
  IMovableRegistry mr=AEApi.instance().registries().moveable();
  mr.blacklistBlock(net.minecraft.init.Blocks.bedrock);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityBeacon.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityBrewingStand.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityChest.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityCommandBlock.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityComparator.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityDaylightDetector.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityDispenser.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityDropper.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityEnchantmentTable.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityEnderChest.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityEndPortal.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntitySkull.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityFurnace.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityMobSpawner.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntitySign.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityPiston.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityFlowerPot.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityNote.class);
  mr.whiteListTileEntity(net.minecraft.tileentity.TileEntityHopper.class);
  mr.whiteListTileEntity(AEBaseTile.class);
  for (  WorldGenType type : WorldGenType.values()) {
    AEApi.instance().registries().worldgen().disableWorldGenForProviderID(type,StorageWorldProvider.class);
    AEApi.instance().registries().worldgen().disableWorldGenForDimension(type,1);
    AEApi.instance().registries().worldgen().disableWorldGenForDimension(type,-1);
  }
  OreDictionaryHandler.instance.bakeRecipes();
}"
30581,"public void configure(){
  addNewAttunement(new ItemStack(Blocks.torch),TunnelType.LIGHT);
  addNewAttunement(new ItemStack(Blocks.glowstone),TunnelType.LIGHT);
  addNewAttunement(new ItemStack(Items.redstone),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Items.repeater),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.redstone_lamp),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.unpowered_comparator),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.powered_comparator),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.powered_repeater),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.unpowered_repeater),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.daylight_detector),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.redstone_wire),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.redstone_block),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.lever),TunnelType.REDSTONE);
  appeng.api.definitions.Blocks AEBlocks=AEApi.instance().blocks();
  Parts Parts=AEApi.instance().parts();
  addNewAttunement(AEBlocks.blockInterface.stack(1),TunnelType.ITEM);
  addNewAttunement(Parts.partInterface.stack(1),TunnelType.ITEM);
  addNewAttunement(Parts.partStorageBus.stack(1),TunnelType.ITEM);
  addNewAttunement(Parts.partImportBus.stack(1),TunnelType.ITEM);
  addNewAttunement(Parts.partExportBus.stack(1),TunnelType.ITEM);
  addNewAttunement(new ItemStack(Blocks.hopper),TunnelType.ITEM);
  addNewAttunement(new ItemStack(Blocks.chest),TunnelType.ITEM);
  addNewAttunement(new ItemStack(Blocks.trapped_chest),TunnelType.ITEM);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",0),TunnelType.ITEM);
  addNewAttunement(new ItemStack(Items.bucket),TunnelType.FLUID);
  addNewAttunement(new ItemStack(Items.lava_bucket),TunnelType.FLUID);
  addNewAttunement(new ItemStack(Items.milk_bucket),TunnelType.FLUID);
  addNewAttunement(new ItemStack(Items.water_bucket),TunnelType.FLUID);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",6),TunnelType.FLUID);
  for (  AEColor c : AEColor.values()) {
    addNewAttunement(Parts.partCableGlass.stack(c,1),TunnelType.ME);
    addNewAttunement(Parts.partCableCovered.stack(c,1),TunnelType.ME);
    addNewAttunement(Parts.partCableSmart.stack(c,1),TunnelType.ME);
    addNewAttunement(Parts.partCableDense.stack(c,1),TunnelType.ME);
  }
}","public void configure(){
  addNewAttunement(new ItemStack(Blocks.torch),TunnelType.LIGHT);
  addNewAttunement(new ItemStack(Blocks.glowstone),TunnelType.LIGHT);
  addNewAttunement(new ItemStack(Items.redstone),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Items.repeater),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.redstone_lamp),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.unpowered_comparator),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.powered_comparator),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.powered_repeater),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.unpowered_repeater),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.daylight_detector),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.redstone_wire),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.redstone_block),TunnelType.REDSTONE);
  addNewAttunement(new ItemStack(Blocks.lever),TunnelType.REDSTONE);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",OreDictionary.WILDCARD_VALUE),TunnelType.REDSTONE);
  appeng.api.definitions.Blocks AEBlocks=AEApi.instance().blocks();
  Parts Parts=AEApi.instance().parts();
  addNewAttunement(AEBlocks.blockInterface.stack(1),TunnelType.ITEM);
  addNewAttunement(Parts.partInterface.stack(1),TunnelType.ITEM);
  addNewAttunement(Parts.partStorageBus.stack(1),TunnelType.ITEM);
  addNewAttunement(Parts.partImportBus.stack(1),TunnelType.ITEM);
  addNewAttunement(Parts.partExportBus.stack(1),TunnelType.ITEM);
  addNewAttunement(new ItemStack(Blocks.hopper),TunnelType.ITEM);
  addNewAttunement(new ItemStack(Blocks.chest),TunnelType.ITEM);
  addNewAttunement(new ItemStack(Blocks.trapped_chest),TunnelType.ITEM);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",0),TunnelType.ITEM);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",9),TunnelType.ITEM);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",OreDictionary.WILDCARD_VALUE),TunnelType.ITEM);
  addNewAttunement(new ItemStack(Items.bucket),TunnelType.FLUID);
  addNewAttunement(new ItemStack(Items.lava_bucket),TunnelType.FLUID);
  addNewAttunement(new ItemStack(Items.milk_bucket),TunnelType.FLUID);
  addNewAttunement(new ItemStack(Items.water_bucket),TunnelType.FLUID);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",11),TunnelType.FLUID);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",4),TunnelType.FLUID);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",6),TunnelType.FLUID);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",OreDictionary.WILDCARD_VALUE),TunnelType.FLUID);
  addNewAttunement(getModItem(""String_Node_Str"",""String_Node_Str"",OreDictionary.WILDCARD_VALUE),TunnelType.FLUID);
  for (  AEColor c : AEColor.values()) {
    addNewAttunement(Parts.partCableGlass.stack(c,1),TunnelType.ME);
    addNewAttunement(Parts.partCableCovered.stack(c,1),TunnelType.ME);
    addNewAttunement(Parts.partCableSmart.stack(c,1),TunnelType.ME);
    addNewAttunement(Parts.partCableDense.stack(c,1),TunnelType.ME);
  }
}"
30582,"@Override public void Init(){
  IP2PTunnelRegistry reg=AEApi.instance().registries().p2pTunnel();
  ItemStack energyPipe=GameRegistry.findItemStack(""String_Node_Str"",""String_Node_Str"",1);
  if (energyPipe != null) {
    energyPipe.setItemDamage(12);
    reg.addNewAttunement(energyPipe,TunnelType.RF_POWER);
  }
  ItemStack energyConduit=GameRegistry.findItemStack(""String_Node_Str"",""String_Node_Str"",1);
  if (energyConduit != null) {
    energyConduit.setItemDamage(OreDictionary.WILDCARD_VALUE);
    reg.addNewAttunement(energyConduit,TunnelType.RF_POWER);
  }
  reg.addNewAttunement(GameRegistry.findItemStack(""String_Node_Str"",""String_Node_Str"",1),TunnelType.RF_POWER);
  reg.addNewAttunement(GameRegistry.findItemStack(""String_Node_Str"",""String_Node_Str"",1),TunnelType.RF_POWER);
}","@Override public void Init(){
}"
30583,"@Override public void PostInit(){
}","@Override public void PostInit(){
  RFStack(""String_Node_Str"",""String_Node_Str"",12);
  RFStack(""String_Node_Str"",""String_Node_Str"",11);
  RFStack(""String_Node_Str"",""String_Node_Str"",14);
  RFStack(""String_Node_Str"",""String_Node_Str"",OreDictionary.WILDCARD_VALUE);
  RFStack(""String_Node_Str"",""String_Node_Str"",OreDictionary.WILDCARD_VALUE);
  RFStack(""String_Node_Str"",""String_Node_Str"",OreDictionary.WILDCARD_VALUE);
  RFStack(""String_Node_Str"",""String_Node_Str"",OreDictionary.WILDCARD_VALUE);
  RFStack(""String_Node_Str"",""String_Node_Str"",0);
  RFStack(""String_Node_Str"",""String_Node_Str"",0);
}"
30584,"@Override public void renderFaceZNeg(Block par1Block,double par2,double par4,double par6,IIcon par8Icon){
  if (faces.contains(ForgeDirection.NORTH)) {
    if (!renderFaces.contains(ForgeDirection.NORTH))     return;
    if (isFacade) {
      Tessellator tessellator=Tessellator.instance;
      double d4=(double)par8Icon.getInterpolatedU(this.renderMinX * 16.0D);
      double d3=(double)par8Icon.getInterpolatedU(this.renderMaxX * 16.0D);
      double d5=(double)par8Icon.getInterpolatedV(16.0D - this.renderMaxY * 16.0D);
      double d6=(double)par8Icon.getInterpolatedV(16.0D - this.renderMinY * 16.0D);
      double d11=par2 + this.renderMinX;
      double d12=par2 + this.renderMaxX;
      double d13=par4 + this.renderMinY;
      double d14=par4 + this.renderMaxY;
      double d15=par6 + this.renderMinZ;
      if (this.enableAO) {
        partialLightingColoring(renderMaxY,1.0 - renderMinX);
        tessellator.addVertexWithUV(d11,d14,d15,d3,d5);
        partialLightingColoring(renderMaxY,1.0 - renderMaxX);
        tessellator.addVertexWithUV(d12,d14,d15,d4,d5);
        partialLightingColoring(renderMinY,1.0 - renderMaxX);
        tessellator.addVertexWithUV(d12,d13,d15,d4,d6);
        partialLightingColoring(renderMinY,1.0 - renderMinX);
        tessellator.addVertexWithUV(d11,d13,d15,d3,d6);
      }
 else {
        tessellator.addVertexWithUV(d11,d14,d15,d3,d5);
        tessellator.addVertexWithUV(d12,d14,d15,d4,d5);
        tessellator.addVertexWithUV(d12,d13,d15,d4,d6);
        tessellator.addVertexWithUV(d11,d13,d15,d3,d6);
      }
    }
 else     super.renderFaceZNeg(par1Block,par2,par4,par6,par8Icon);
  }
 else {
    lightState.isAO=enableAO;
    lightState.rZNeg=par8Icon;
    saveAO(lightState.aoZNeg,lightState.foZNeg);
    lightState.bZNeg=getCurrentBrightness();
  }
}","@Override public void renderFaceZNeg(Block par1Block,double par2,double par4,double par6,IIcon par8Icon){
  if (faces.contains(ForgeDirection.NORTH)) {
    if (!renderFaces.contains(ForgeDirection.NORTH))     return;
    if (isFacade) {
      Tessellator tessellator=Tessellator.instance;
      double d3=(double)par8Icon.getInterpolatedU(16.0D - this.renderMinX * 16.0D);
      double d4=(double)par8Icon.getInterpolatedU(16.0D - this.renderMaxX * 16.0D);
      double d5=(double)par8Icon.getInterpolatedV(16.0D - this.renderMaxY * 16.0D);
      double d6=(double)par8Icon.getInterpolatedV(16.0D - this.renderMinY * 16.0D);
      double d11=par2 + this.renderMinX;
      double d12=par2 + this.renderMaxX;
      double d13=par4 + this.renderMinY;
      double d14=par4 + this.renderMaxY;
      double d15=par6 + this.renderMinZ;
      if (this.enableAO) {
        partialLightingColoring(renderMaxY,1.0 - renderMinX);
        tessellator.addVertexWithUV(d11,d14,d15,d3,d5);
        partialLightingColoring(renderMaxY,1.0 - renderMaxX);
        tessellator.addVertexWithUV(d12,d14,d15,d4,d5);
        partialLightingColoring(renderMinY,1.0 - renderMaxX);
        tessellator.addVertexWithUV(d12,d13,d15,d4,d6);
        partialLightingColoring(renderMinY,1.0 - renderMinX);
        tessellator.addVertexWithUV(d11,d13,d15,d3,d6);
      }
 else {
        tessellator.addVertexWithUV(d11,d14,d15,d3,d5);
        tessellator.addVertexWithUV(d12,d14,d15,d4,d5);
        tessellator.addVertexWithUV(d12,d13,d15,d4,d6);
        tessellator.addVertexWithUV(d11,d13,d15,d3,d6);
      }
    }
 else     super.renderFaceZNeg(par1Block,par2,par4,par6,par8Icon);
  }
 else {
    lightState.isAO=enableAO;
    lightState.rZNeg=par8Icon;
    saveAO(lightState.aoZNeg,lightState.foZNeg);
    lightState.bZNeg=getCurrentBrightness();
  }
}"
30585,"@Override public void renderFaceXPos(Block par1Block,double par2,double par4,double par6,IIcon par8Icon){
  if (faces.contains(ForgeDirection.EAST)) {
    if (!renderFaces.contains(ForgeDirection.EAST))     return;
    if (isFacade) {
      Tessellator tessellator=Tessellator.instance;
      double d4=(double)par8Icon.getInterpolatedU(this.renderMinZ * 16.0D);
      double d3=(double)par8Icon.getInterpolatedU(this.renderMaxZ * 16.0D);
      double d5=(double)par8Icon.getInterpolatedV(16.0D - this.renderMaxY * 16.0D);
      double d6=(double)par8Icon.getInterpolatedV(16.0D - this.renderMinY * 16.0D);
      double d11=par2 + this.renderMaxX;
      double d12=par4 + this.renderMinY;
      double d13=par4 + this.renderMaxY;
      double d14=par6 + this.renderMinZ;
      double d15=par6 + this.renderMaxZ;
      if (this.enableAO) {
        partialLightingColoring(1.0 - renderMinY,renderMaxZ);
        tessellator.addVertexWithUV(d11,d12,d15,d4,d6);
        partialLightingColoring(1.0 - renderMinY,renderMinZ);
        tessellator.addVertexWithUV(d11,d12,d14,d3,d6);
        partialLightingColoring(1.0 - renderMaxY,renderMinZ);
        tessellator.addVertexWithUV(d11,d13,d14,d3,d5);
        partialLightingColoring(1.0 - renderMaxY,renderMaxZ);
        tessellator.addVertexWithUV(d11,d13,d15,d4,d5);
      }
 else {
        tessellator.addVertexWithUV(d11,d12,d15,d4,d6);
        tessellator.addVertexWithUV(d11,d12,d14,d3,d6);
        tessellator.addVertexWithUV(d11,d13,d14,d3,d5);
        tessellator.addVertexWithUV(d11,d13,d15,d4,d5);
      }
    }
 else     super.renderFaceXPos(par1Block,par2,par4,par6,par8Icon);
  }
 else {
    lightState.isAO=enableAO;
    lightState.rXPos=par8Icon;
    saveAO(lightState.aoXPos,lightState.foXPos);
    lightState.bXPos=getCurrentBrightness();
  }
}","@Override public void renderFaceXPos(Block par1Block,double par2,double par4,double par6,IIcon par8Icon){
  if (faces.contains(ForgeDirection.EAST)) {
    if (!renderFaces.contains(ForgeDirection.EAST))     return;
    if (isFacade) {
      Tessellator tessellator=Tessellator.instance;
      double d3=(double)par8Icon.getInterpolatedU(16.0D - this.renderMinZ * 16.0D);
      double d4=(double)par8Icon.getInterpolatedU(16.0D - this.renderMaxZ * 16.0D);
      double d5=(double)par8Icon.getInterpolatedV(16.0D - this.renderMaxY * 16.0D);
      double d6=(double)par8Icon.getInterpolatedV(16.0D - this.renderMinY * 16.0D);
      double d11=par2 + this.renderMaxX;
      double d12=par4 + this.renderMinY;
      double d13=par4 + this.renderMaxY;
      double d14=par6 + this.renderMinZ;
      double d15=par6 + this.renderMaxZ;
      if (this.enableAO) {
        partialLightingColoring(1.0 - renderMinY,renderMaxZ);
        tessellator.addVertexWithUV(d11,d12,d15,d4,d6);
        partialLightingColoring(1.0 - renderMinY,renderMinZ);
        tessellator.addVertexWithUV(d11,d12,d14,d3,d6);
        partialLightingColoring(1.0 - renderMaxY,renderMinZ);
        tessellator.addVertexWithUV(d11,d13,d14,d3,d5);
        partialLightingColoring(1.0 - renderMaxY,renderMaxZ);
        tessellator.addVertexWithUV(d11,d13,d15,d4,d5);
      }
 else {
        tessellator.addVertexWithUV(d11,d12,d15,d4,d6);
        tessellator.addVertexWithUV(d11,d12,d14,d3,d6);
        tessellator.addVertexWithUV(d11,d13,d14,d3,d5);
        tessellator.addVertexWithUV(d11,d13,d15,d4,d5);
      }
    }
 else     super.renderFaceXPos(par1Block,par2,par4,par6,par8Icon);
  }
 else {
    lightState.isAO=enableAO;
    lightState.rXPos=par8Icon;
    saveAO(lightState.aoXPos,lightState.foXPos);
    lightState.bXPos=getCurrentBrightness();
  }
}"
30586,"@Override public void generate(Random r,int chunkX,int chunkZ,World w,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  int sealevel=w.provider.getAverageGroundLevel() + 1;
  if (oreNormal == null || oreCharged == null)   return;
  double oreDepthMultiplier=AEConfig.instance.quartzOresClusterAmount * sealevel / 64;
  int scale=(int)Math.round(r.nextGaussian() * Math.sqrt(oreDepthMultiplier) + oreDepthMultiplier);
  for (int x=0; x < (r.nextBoolean() ? scale * 2 : scale) / 2; ++x) {
    boolean isCharged=r.nextFloat() > AEConfig.instance.spawnChargedChance;
    WorldGenMinable whichOre=isCharged ? oreCharged : oreNormal;
    if (WorldGenRegistry.instance.isWorldGenEnabled(isCharged ? WorldGenType.ChargedCertusQuartz : WorldGenType.CertusQuartz,w)) {
      int cx=chunkX * 16 + r.nextInt(22);
      int cy=r.nextInt(40 * sealevel / 64) + r.nextInt(22 * sealevel / 64) + 12 * sealevel / 64;
      int cz=chunkZ * 16 + r.nextInt(22);
      whichOre.generate(w,r,cx,cy,cz);
    }
  }
}","@Override public void generate(Random r,int chunkX,int chunkZ,World w,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  int sealevel=w.provider.getAverageGroundLevel() + 1;
  if (sealevel < 20) {
    int x=(chunkX << 4) + 8;
    int z=(chunkZ << 4) + 8;
    sealevel=w.getHeightValue(x,z);
  }
  if (oreNormal == null || oreCharged == null)   return;
  double oreDepthMultiplier=AEConfig.instance.quartzOresClusterAmount * sealevel / 64;
  int scale=(int)Math.round(r.nextGaussian() * Math.sqrt(oreDepthMultiplier) + oreDepthMultiplier);
  for (int x=0; x < (r.nextBoolean() ? scale * 2 : scale) / 2; ++x) {
    boolean isCharged=r.nextFloat() > AEConfig.instance.spawnChargedChance;
    WorldGenMinable whichOre=isCharged ? oreCharged : oreNormal;
    if (WorldGenRegistry.instance.isWorldGenEnabled(isCharged ? WorldGenType.ChargedCertusQuartz : WorldGenType.CertusQuartz,w)) {
      int cx=chunkX * 16 + r.nextInt(22);
      int cy=r.nextInt(40 * sealevel / 64) + r.nextInt(22 * sealevel / 64) + 12 * sealevel / 64;
      int cz=chunkZ * 16 + r.nextInt(22);
      whichOre.generate(w,r,cx,cy,cz);
    }
  }
}"
30587,"@Override public void renderFaceZNeg(Block par1Block,double par2,double par4,double par6,IIcon par8Icon){
  if (faces.contains(ForgeDirection.NORTH)) {
    if (!renderFaces.contains(ForgeDirection.NORTH))     return;
    if (isFacade) {
      Tessellator tessellator=Tessellator.instance;
      double d3=(double)par8Icon.getInterpolatedU(this.renderMinX * 16.0D);
      double d4=(double)par8Icon.getInterpolatedU(this.renderMaxX * 16.0D);
      double d5=(double)par8Icon.getInterpolatedV(16.0D - this.renderMaxY * 16.0D);
      double d6=(double)par8Icon.getInterpolatedV(16.0D - this.renderMinY * 16.0D);
      double d11=par2 + this.renderMinX;
      double d12=par2 + this.renderMaxX;
      double d13=par4 + this.renderMinY;
      double d14=par4 + this.renderMaxY;
      double d15=par6 + this.renderMinZ;
      if (this.enableAO) {
        partialLightingColoring(renderMaxY,1.0 - renderMinX);
        tessellator.addVertexWithUV(d11,d14,d15,d3,d5);
        partialLightingColoring(renderMaxY,1.0 - renderMaxX);
        tessellator.addVertexWithUV(d12,d14,d15,d4,d5);
        partialLightingColoring(renderMinY,1.0 - renderMaxX);
        tessellator.addVertexWithUV(d12,d13,d15,d4,d6);
        partialLightingColoring(renderMinY,1.0 - renderMinX);
        tessellator.addVertexWithUV(d11,d13,d15,d3,d6);
      }
 else {
        tessellator.addVertexWithUV(d11,d14,d15,d3,d5);
        tessellator.addVertexWithUV(d12,d14,d15,d4,d5);
        tessellator.addVertexWithUV(d12,d13,d15,d4,d6);
        tessellator.addVertexWithUV(d11,d13,d15,d3,d6);
      }
    }
 else     super.renderFaceZNeg(par1Block,par2,par4,par6,par8Icon);
  }
 else {
    lightState.isAO=enableAO;
    lightState.rZNeg=par8Icon;
    saveAO(lightState.aoZNeg,lightState.foZNeg);
    lightState.bZNeg=getCurrentBrightness();
  }
}","@Override public void renderFaceZNeg(Block par1Block,double par2,double par4,double par6,IIcon par8Icon){
  if (faces.contains(ForgeDirection.NORTH)) {
    if (!renderFaces.contains(ForgeDirection.NORTH))     return;
    if (isFacade) {
      Tessellator tessellator=Tessellator.instance;
      double d4=(double)par8Icon.getInterpolatedU(this.renderMinX * 16.0D);
      double d3=(double)par8Icon.getInterpolatedU(this.renderMaxX * 16.0D);
      double d5=(double)par8Icon.getInterpolatedV(16.0D - this.renderMaxY * 16.0D);
      double d6=(double)par8Icon.getInterpolatedV(16.0D - this.renderMinY * 16.0D);
      double d11=par2 + this.renderMinX;
      double d12=par2 + this.renderMaxX;
      double d13=par4 + this.renderMinY;
      double d14=par4 + this.renderMaxY;
      double d15=par6 + this.renderMinZ;
      if (this.enableAO) {
        partialLightingColoring(renderMaxY,1.0 - renderMinX);
        tessellator.addVertexWithUV(d11,d14,d15,d3,d5);
        partialLightingColoring(renderMaxY,1.0 - renderMaxX);
        tessellator.addVertexWithUV(d12,d14,d15,d4,d5);
        partialLightingColoring(renderMinY,1.0 - renderMaxX);
        tessellator.addVertexWithUV(d12,d13,d15,d4,d6);
        partialLightingColoring(renderMinY,1.0 - renderMinX);
        tessellator.addVertexWithUV(d11,d13,d15,d3,d6);
      }
 else {
        tessellator.addVertexWithUV(d11,d14,d15,d3,d5);
        tessellator.addVertexWithUV(d12,d14,d15,d4,d5);
        tessellator.addVertexWithUV(d12,d13,d15,d4,d6);
        tessellator.addVertexWithUV(d11,d13,d15,d3,d6);
      }
    }
 else     super.renderFaceZNeg(par1Block,par2,par4,par6,par8Icon);
  }
 else {
    lightState.isAO=enableAO;
    lightState.rZNeg=par8Icon;
    saveAO(lightState.aoZNeg,lightState.foZNeg);
    lightState.bZNeg=getCurrentBrightness();
  }
}"
30588,"@Override public void renderFaceXPos(Block par1Block,double par2,double par4,double par6,IIcon par8Icon){
  if (faces.contains(ForgeDirection.EAST)) {
    if (!renderFaces.contains(ForgeDirection.EAST))     return;
    if (isFacade) {
      Tessellator tessellator=Tessellator.instance;
      double d3=(double)par8Icon.getInterpolatedU(this.renderMinZ * 16.0D);
      double d4=(double)par8Icon.getInterpolatedU(this.renderMaxZ * 16.0D);
      double d5=(double)par8Icon.getInterpolatedV(16.0D - this.renderMaxY * 16.0D);
      double d6=(double)par8Icon.getInterpolatedV(16.0D - this.renderMinY * 16.0D);
      double d11=par2 + this.renderMaxX;
      double d12=par4 + this.renderMinY;
      double d13=par4 + this.renderMaxY;
      double d14=par6 + this.renderMinZ;
      double d15=par6 + this.renderMaxZ;
      if (this.enableAO) {
        partialLightingColoring(1.0 - renderMinY,renderMaxZ);
        tessellator.addVertexWithUV(d11,d12,d15,d4,d6);
        partialLightingColoring(1.0 - renderMinY,renderMinZ);
        tessellator.addVertexWithUV(d11,d12,d14,d3,d6);
        partialLightingColoring(1.0 - renderMaxY,renderMinZ);
        tessellator.addVertexWithUV(d11,d13,d14,d3,d5);
        partialLightingColoring(1.0 - renderMaxY,renderMaxZ);
        tessellator.addVertexWithUV(d11,d13,d15,d4,d5);
      }
 else {
        tessellator.addVertexWithUV(d11,d12,d15,d4,d6);
        tessellator.addVertexWithUV(d11,d12,d14,d3,d6);
        tessellator.addVertexWithUV(d11,d13,d14,d3,d5);
        tessellator.addVertexWithUV(d11,d13,d15,d4,d5);
      }
    }
 else     super.renderFaceXPos(par1Block,par2,par4,par6,par8Icon);
  }
 else {
    lightState.isAO=enableAO;
    lightState.rXPos=par8Icon;
    saveAO(lightState.aoXPos,lightState.foXPos);
    lightState.bXPos=getCurrentBrightness();
  }
}","@Override public void renderFaceXPos(Block par1Block,double par2,double par4,double par6,IIcon par8Icon){
  if (faces.contains(ForgeDirection.EAST)) {
    if (!renderFaces.contains(ForgeDirection.EAST))     return;
    if (isFacade) {
      Tessellator tessellator=Tessellator.instance;
      double d4=(double)par8Icon.getInterpolatedU(this.renderMinZ * 16.0D);
      double d3=(double)par8Icon.getInterpolatedU(this.renderMaxZ * 16.0D);
      double d5=(double)par8Icon.getInterpolatedV(16.0D - this.renderMaxY * 16.0D);
      double d6=(double)par8Icon.getInterpolatedV(16.0D - this.renderMinY * 16.0D);
      double d11=par2 + this.renderMaxX;
      double d12=par4 + this.renderMinY;
      double d13=par4 + this.renderMaxY;
      double d14=par6 + this.renderMinZ;
      double d15=par6 + this.renderMaxZ;
      if (this.enableAO) {
        partialLightingColoring(1.0 - renderMinY,renderMaxZ);
        tessellator.addVertexWithUV(d11,d12,d15,d4,d6);
        partialLightingColoring(1.0 - renderMinY,renderMinZ);
        tessellator.addVertexWithUV(d11,d12,d14,d3,d6);
        partialLightingColoring(1.0 - renderMaxY,renderMinZ);
        tessellator.addVertexWithUV(d11,d13,d14,d3,d5);
        partialLightingColoring(1.0 - renderMaxY,renderMaxZ);
        tessellator.addVertexWithUV(d11,d13,d15,d4,d5);
      }
 else {
        tessellator.addVertexWithUV(d11,d12,d15,d4,d6);
        tessellator.addVertexWithUV(d11,d12,d14,d3,d6);
        tessellator.addVertexWithUV(d11,d13,d14,d3,d5);
        tessellator.addVertexWithUV(d11,d13,d15,d4,d5);
      }
    }
 else     super.renderFaceXPos(par1Block,par2,par4,par6,par8Icon);
  }
 else {
    lightState.isAO=enableAO;
    lightState.rXPos=par8Icon;
    saveAO(lightState.aoXPos,lightState.foXPos);
    lightState.bXPos=getCurrentBrightness();
  }
}"
30589,"@Override public void readFromNBT(NBTTagCompound data){
  priority=data.getInteger(""String_Node_Str"");
}","@Override public void readFromNBT(NBTTagCompound data){
  isCached=false;
  priority=data.getInteger(""String_Node_Str"");
}"
30590,"@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removed,ItemStack added){
  isCached=false;
  updateState();
  try {
    gridProxy.getGrid().postEvent(new MENetworkCellArrayUpdate());
    IStorageGrid gs=gridProxy.getStorage();
    Platform.postChanges(gs,removed,added,mySrc);
  }
 catch (  GridAccessException e) {
  }
  markForUpdate();
}","@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removed,ItemStack added){
  if (isCached) {
    isCached=false;
    updateState();
  }
  try {
    gridProxy.getGrid().postEvent(new MENetworkCellArrayUpdate());
    IStorageGrid gs=gridProxy.getStorage();
    Platform.postChanges(gs,removed,added,mySrc);
  }
 catch (  GridAccessException e) {
  }
  markForUpdate();
}"
30591,"public void unduplicate(){
  for (  MaterialType mt : dmgToMaterial.values()) {
    if (mt.getOreName() != null) {
      ItemStack replacement=null;
      String names[]=mt.getOreName().split(""String_Node_Str"");
      for (      String name : names) {
        if (replacement != null)         break;
        ArrayList<ItemStack> options=OreDictionary.getOres(name);
        if (options != null && options.size() > 0) {
          for (          ItemStack is : options) {
            if (is != null && is.getItem() != null) {
              replacement=is.copy();
              break;
            }
          }
        }
      }
      if (replacement == null || AEConfig.instance.useAEVersion(mt)) {
        for (        String name : names)         OreDictionary.registerOre(name,mt.stack(1));
      }
 else {
        mt.itemInstance=replacement.getItem();
        mt.damageValue=replacement.getItemDamage();
      }
    }
  }
}","public void unduplicate(){
  for (  MaterialType mt : ImmutableSet.copyOf(dmgToMaterial.values())) {
    if (mt.getOreName() != null) {
      ItemStack replacement=null;
      String names[]=mt.getOreName().split(""String_Node_Str"");
      for (      String name : names) {
        if (replacement != null)         break;
        ArrayList<ItemStack> options=OreDictionary.getOres(name);
        if (options != null && options.size() > 0) {
          for (          ItemStack is : options) {
            if (is != null && is.getItem() != null) {
              replacement=is.copy();
              break;
            }
          }
        }
      }
      if (replacement == null || AEConfig.instance.useAEVersion(mt)) {
        for (        String name : names)         OreDictionary.registerOre(name,mt.stack(1));
      }
 else {
        if (mt.itemInstance == this)         dmgToMaterial.remove(mt.damageValue);
        mt.itemInstance=replacement.getItem();
        mt.damageValue=replacement.getItemDamage();
      }
    }
  }
}"
30592,"public String getTermName(){
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  if (((ICustomNameObject)iHost).hasCustomName())   return ((ICustomNameObject)iHost).getCustomName();
  EnumSet<ForgeDirection> possibleDirections=iHost.getTargets();
  for (  ForgeDirection s : possibleDirections) {
    Vec3 from=Vec3.createVectorHelper((double)tile.xCoord + 0.5,(double)tile.yCoord + 0.5,(double)tile.zCoord + 0.5);
    from=from.addVector(s.offsetX * 0.501,s.offsetY * 0.501,s.offsetZ * 0.501);
    Vec3 to=from.addVector(s.offsetX,s.offsetY,s.offsetZ);
    Block blk=w.getBlock(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    MovingObjectPosition mop=w.rayTraceBlocks(from,to,true);
    TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    if (te == null)     continue;
    if (te instanceof IInterfaceHost) {
      try {
        if (((IInterfaceHost)te).getInterfaceDuality().sameGrid(gridProxy.getGrid()))         continue;
      }
 catch (      GridAccessException e) {
        continue;
      }
    }
    Item item=Item.getItemFromBlock(blk);
    if (item == null) {
      return blk.getUnlocalizedName();
    }
    ItemStack what=new ItemStack(item,1,blk.getDamageValue(w,tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ));
    try {
      if (mop != null && !badBlocks.contains(blk)) {
        if (te instanceof ICraftingMachine || InventoryAdaptor.getAdaptor(te,s.getOpposite()) != null) {
          if (te instanceof IInventory && ((IInventory)te).getSizeInventory() == 0)           continue;
          if (te instanceof ISidedInventory) {
            int[] sides=((ISidedInventory)te).getAccessibleSlotsFromSide(s.getOpposite().ordinal());
            if (sides == null || sides.length == 0)             continue;
          }
          if (mop.blockX == te.xCoord && mop.blockY == te.yCoord && mop.blockZ == te.zCoord) {
            ItemStack g=blk.getPickBlock(mop,w,te.xCoord,te.yCoord,te.zCoord);
            if (g != null)             what=g;
          }
        }
      }
    }
 catch (    Throwable t) {
      badBlocks.add(blk);
    }
    if (what.getItem() != null)     return what.getUnlocalizedName();
  }
  return ""String_Node_Str"";
}","public String getTermName(){
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  if (((ICustomNameObject)iHost).hasCustomName())   return ((ICustomNameObject)iHost).getCustomName();
  EnumSet<ForgeDirection> possibleDirections=iHost.getTargets();
  for (  ForgeDirection s : possibleDirections) {
    Vec3 from=Vec3.createVectorHelper((double)tile.xCoord + 0.5,(double)tile.yCoord + 0.5,(double)tile.zCoord + 0.5);
    from=from.addVector(s.offsetX * 0.501,s.offsetY * 0.501,s.offsetZ * 0.501);
    Vec3 to=from.addVector(s.offsetX,s.offsetY,s.offsetZ);
    Block blk=w.getBlock(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    MovingObjectPosition mop=w.rayTraceBlocks(from,to,true);
    TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    if (te == null)     continue;
    if (te instanceof IInterfaceHost) {
      try {
        if (((IInterfaceHost)te).getInterfaceDuality().sameGrid(gridProxy.getGrid()))         continue;
      }
 catch (      GridAccessException e) {
        continue;
      }
    }
    Item item=Item.getItemFromBlock(blk);
    if (item == null) {
      return blk.getUnlocalizedName();
    }
    ItemStack what=new ItemStack(item,1,blk.getDamageValue(w,tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ));
    try {
      if (mop != null && !badBlocks.contains(blk)) {
        if (te instanceof ICraftingMachine || InventoryAdaptor.getAdaptor(te,s.getOpposite()) != null) {
          if (te instanceof IInventory && ((IInventory)te).getSizeInventory() == 0)           continue;
          if (te instanceof ISidedInventory) {
            int[] sides=((ISidedInventory)te).getAccessibleSlotsFromSide(s.getOpposite().ordinal());
            if (sides == null || sides.length == 0)             continue;
          }
          if (mop.blockX == te.xCoord && mop.blockY == te.yCoord && mop.blockZ == te.zCoord) {
            ItemStack g=blk.getPickBlock(mop,w,te.xCoord,te.yCoord,te.zCoord);
            if (g != null)             what=g;
          }
          if (what.getItem() != null)           return what.getUnlocalizedName();
        }
      }
    }
 catch (    Throwable t) {
      badBlocks.add(blk);
    }
  }
  return ""String_Node_Str"";
}"
30593,"private boolean diveList(NetworkInventoryHandler<T> networkInventoryHandler){
  LinkedList cDepth=getDepth();
  if (cDepth.contains(networkInventoryHandler))   return true;
  cDepth.push(this);
  return false;
}","private boolean diveList(NetworkInventoryHandler<T> networkInventoryHandler,Actionable type){
  LinkedList cDepth=getDepth(type);
  if (cDepth.contains(networkInventoryHandler))   return true;
  cDepth.push(this);
  return false;
}"
30594,"private LinkedList getDepth(){
  LinkedList s=depth.get();
  if (s == null)   depth.set(s=new LinkedList());
  return s;
}","private LinkedList getDepth(Actionable type){
  ThreadLocal<LinkedList> depth=type == Actionable.MODULATE ? depthMod : depthSim;
  LinkedList s=depth.get();
  if (s == null)   depth.set(s=new LinkedList());
  return s;
}"
30595,"private void surface(NetworkInventoryHandler<T> networkInventoryHandler){
  if (getDepth().pop() != this)   throw new RuntimeException(""String_Node_Str"");
}","private void surface(NetworkInventoryHandler<T> networkInventoryHandler,Actionable type){
  if (getDepth(type).pop() != this)   throw new RuntimeException(""String_Node_Str"");
}"
30596,"@Override public T extractItems(T request,Actionable mode,BaseActionSource src){
  if (diveList(this))   return null;
  if (testPermission(src,SecurityPermissions.EXTRACT)) {
    surface(this);
    return null;
  }
  Iterator<List<IMEInventoryHandler<T>>> i=prorityInventory.descendingMap().values().iterator();
  T output=request.copy();
  request=request.copy();
  output.setStackSize(0);
  long req=request.getStackSize();
  while (i.hasNext()) {
    List<IMEInventoryHandler<T>> invList=i.next();
    Iterator<IMEInventoryHandler<T>> ii=invList.iterator();
    while (ii.hasNext() && output.getStackSize() < req) {
      IMEInventoryHandler<T> inv=ii.next();
      request.setStackSize(req - output.getStackSize());
      output.add(inv.extractItems(request,mode,src));
    }
  }
  surface(this);
  if (output.getStackSize() <= 0)   return null;
  return output;
}","@Override public T extractItems(T request,Actionable mode,BaseActionSource src){
  if (diveList(this,mode))   return null;
  if (testPermission(src,SecurityPermissions.EXTRACT)) {
    surface(this,mode);
    return null;
  }
  Iterator<List<IMEInventoryHandler<T>>> i=prorityInventory.descendingMap().values().iterator();
  T output=request.copy();
  request=request.copy();
  output.setStackSize(0);
  long req=request.getStackSize();
  while (i.hasNext()) {
    List<IMEInventoryHandler<T>> invList=i.next();
    Iterator<IMEInventoryHandler<T>> ii=invList.iterator();
    while (ii.hasNext() && output.getStackSize() < req) {
      IMEInventoryHandler<T> inv=ii.next();
      request.setStackSize(req - output.getStackSize());
      output.add(inv.extractItems(request,mode,src));
    }
  }
  surface(this,mode);
  if (output.getStackSize() <= 0)   return null;
  return output;
}"
30597,"private boolean diveIteration(NetworkInventoryHandler<T> networkInventoryHandler){
  if (getDepth().isEmpty()) {
    currentPass++;
    myPass=currentPass;
  }
 else {
    if (currentPass == myPass)     return true;
 else     myPass=currentPass;
  }
  getDepth().push(this);
  return false;
}","private boolean diveIteration(NetworkInventoryHandler<T> networkInventoryHandler,Actionable type){
  LinkedList cDepth=getDepth(type);
  if (cDepth.isEmpty()) {
    currentPass++;
    myPass=currentPass;
  }
 else {
    if (currentPass == myPass)     return true;
 else     myPass=currentPass;
  }
  cDepth.push(this);
  return false;
}"
30598,"@Override public T injectItems(T input,Actionable type,BaseActionSource src){
  if (diveList(this))   return input;
  if (testPermission(src,SecurityPermissions.INJECT)) {
    surface(this);
    return input;
  }
  Iterator<List<IMEInventoryHandler<T>>> i=prorityInventory.values().iterator();
  while (i.hasNext()) {
    List<IMEInventoryHandler<T>> invList=i.next();
    Iterator<IMEInventoryHandler<T>> ii=invList.iterator();
    while (ii.hasNext() && input != null) {
      IMEInventoryHandler<T> inv=ii.next();
      if (inv.validForPass(1) && inv.canAccept(input) && (inv.isPrioritized(input) || inv.extractItems(input,Actionable.SIMULATE,src) != null))       input=inv.injectItems(input,type,src);
    }
    ii=invList.iterator();
    while (ii.hasNext() && input != null) {
      IMEInventoryHandler<T> inv=ii.next();
      if (inv.validForPass(2) && inv.canAccept(input))       input=inv.injectItems(input,type,src);
    }
  }
  surface(this);
  return input;
}","@Override public T injectItems(T input,Actionable type,BaseActionSource src){
  if (diveList(this,type))   return input;
  if (testPermission(src,SecurityPermissions.INJECT)) {
    surface(this,type);
    return input;
  }
  Iterator<List<IMEInventoryHandler<T>>> i=prorityInventory.values().iterator();
  while (i.hasNext()) {
    List<IMEInventoryHandler<T>> invList=i.next();
    Iterator<IMEInventoryHandler<T>> ii=invList.iterator();
    while (ii.hasNext() && input != null) {
      IMEInventoryHandler<T> inv=ii.next();
      if (inv.validForPass(1) && inv.canAccept(input) && (inv.isPrioritized(input) || inv.extractItems(input,Actionable.SIMULATE,src) != null))       input=inv.injectItems(input,type,src);
    }
    ii=invList.iterator();
    while (ii.hasNext() && input != null) {
      IMEInventoryHandler<T> inv=ii.next();
      if (inv.validForPass(2) && inv.canAccept(input))       input=inv.injectItems(input,type,src);
    }
  }
  surface(this,type);
  return input;
}"
30599,"@Override public IItemList<T> getAvailableItems(IItemList out){
  if (diveIteration(this))   return out;
  for (  List<IMEInventoryHandler<T>> i : prorityInventory.values())   for (  IMEInventoryHandler<T> j : i)   out=j.getAvailableItems(out);
  surface(this);
  return out;
}","@Override public IItemList<T> getAvailableItems(IItemList out){
  if (diveIteration(this,Actionable.SIMULATE))   return out;
  for (  List<IMEInventoryHandler<T>> i : prorityInventory.values())   for (  IMEInventoryHandler<T> j : i)   out=j.getAvailableItems(out);
  surface(this,Actionable.SIMULATE);
  return out;
}"
30600,"public static boolean place(ItemStack held,int x,int y,int z,int face,EntityPlayer player,World world,PlaceType pass,int depth){
  if (depth > 3)   return false;
  ForgeDirection side=ForgeDirection.getOrientation(face);
  if (held != null && Platform.isWrench(player,held,x,y,z) && player.isSneaking()) {
    Block block=world.getBlock(x,y,z);
    TileEntity tile=world.getTileEntity(x,y,z);
    IPartHost host=null;
    if (tile instanceof IPartHost)     host=(IPartHost)tile;
    if (host != null) {
      if (!world.isRemote) {
        LookDirection dir=Platform.getPlayerRay(player);
        MovingObjectPosition mop=block.collisionRayTrace(world,x,y,z,dir.a,dir.b);
        if (mop != null) {
          List<ItemStack> is=new LinkedList();
          SelectedPart sp=selectPart(player,host,mop.hitVec.addVector(-mop.blockX,-mop.blockY,-mop.blockZ));
          if (sp.part != null) {
            is.add(sp.part.getItemStack(PartItemStack.Wrench));
            sp.part.getDrops(is,true);
            host.removePart(sp.side,false);
          }
          if (sp.facade != null) {
            is.add(sp.facade.getItemStack());
            host.getFacadeContainer().removeFacade(host,sp.side);
            Platform.notifyBlocksOfNeighbors(world,x,y,z);
          }
          if (host.isEmpty())           host.cleanup();
          if (is != null && !is.isEmpty()) {
            Platform.spawnDrops(world,x,y,z,is);
          }
        }
      }
 else {
        player.swingItem();
        try {
          NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
        }
 catch (        IOException e) {
          AELog.error(e);
        }
      }
      return true;
    }
    return false;
  }
  TileEntity tile=world.getTileEntity(x,y,z);
  IPartHost host=null;
  if (tile instanceof IPartHost)   host=(IPartHost)tile;
  if (held != null) {
    IFacadePart fp=isFacade(held,side);
    if (fp != null) {
      if (host != null) {
        if (!world.isRemote) {
          if (host.getPart(ForgeDirection.UNKNOWN) == null)           return false;
          if (host.canAddPart(held,side)) {
            if (host.getFacadeContainer().addFacade(fp)) {
              host.markForUpdate();
              if (!player.capabilities.isCreativeMode) {
                held.stackSize--;
                if (held.stackSize == 0) {
                  player.inventory.mainInventory[player.inventory.currentItem]=null;
                  MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(player,held));
                }
              }
              return true;
            }
          }
        }
 else {
          player.swingItem();
          try {
            NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
            return true;
          }
 catch (          IOException e) {
            AELog.error(e);
          }
        }
      }
      return false;
    }
  }
  if (host == null && tile != null && AppEng.instance.isIntegrationEnabled(IntegrationType.FMP))   host=((IFMP)AppEng.instance.getIntegration(IntegrationType.FMP)).getOrCreateHost(tile);
{
    Block block=world.getBlock(x,y,z);
    if (host != null && player.isSneaking() && block != null) {
      LookDirection dir=Platform.getPlayerRay(player);
      MovingObjectPosition mop=block.collisionRayTrace(world,x,y,z,dir.a,dir.b);
      if (mop != null) {
        mop.hitVec=mop.hitVec.addVector(-mop.blockX,-mop.blockY,-mop.blockZ);
        SelectedPart sPart=selectPart(player,host,mop.hitVec);
        if (sPart != null && sPart.part != null)         if (sPart.part.onShiftActivate(player,mop.hitVec)) {
          if (world.isRemote) {
            try {
              NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
            }
 catch (            IOException e) {
              AELog.error(e);
            }
          }
          return true;
        }
      }
    }
  }
  if (held == null || !(held.getItem() instanceof IPartItem))   return false;
  int te_x=x;
  int te_y=y;
  int te_z=z;
  if (host == null && pass == PlaceType.PLACE_ITEM) {
    ItemStack is=AEApi.instance().blocks().blockMultiPart.stack(1);
    ItemBlock ib=(ItemBlock)is.getItem();
    ForgeDirection offset=ForgeDirection.UNKNOWN;
    Block blkID=world.getBlock(x,y,z);
    if (blkID != null && !blkID.isReplaceable(world,x,y,z)) {
      offset=side;
      if (Platform.isServer())       side=side.getOpposite();
    }
    te_x=x + offset.offsetX;
    te_y=y + offset.offsetY;
    te_z=z + offset.offsetZ;
    tile=world.getTileEntity(te_x,te_y,te_z);
    if (tile instanceof IPartHost)     host=(IPartHost)tile;
    if (host == null && tile != null && AppEng.instance.isIntegrationEnabled(IntegrationType.FMP))     host=((IFMP)AppEng.instance.getIntegration(IntegrationType.FMP)).getOrCreateHost(tile);
    if (host == null && AEApi.instance().blocks().blockMultiPart.block().canPlaceBlockAt(world,te_x,te_y,te_z) && ib.placeBlockAt(is,player,world,te_x,te_y,te_z,side.ordinal(),0.5f,0.5f,0.5f,0)) {
      if (!world.isRemote) {
        tile=world.getTileEntity(te_x,te_y,te_z);
        if (tile instanceof IPartHost)         host=(IPartHost)tile;
        pass=PlaceType.INTERACT_SECOND_PASS;
      }
 else {
        player.swingItem();
        try {
          NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
        }
 catch (        IOException e) {
          AELog.error(e);
        }
        return true;
      }
    }
 else     if (host != null && !host.canAddPart(held,side))     return false;
  }
  if (host == null)   return false;
  if (!host.canAddPart(held,side)) {
    if (pass == PlaceType.INTERACT_FIRST_PASS || pass == PlaceType.PLACE_ITEM) {
      ForgeDirection offset=side;
      te_x=x + offset.offsetX;
      te_y=y + offset.offsetY;
      te_z=z + offset.offsetZ;
      Block blkID=world.getBlock(te_x,te_y,te_z);
      tile=world.getTileEntity(te_x,te_y,te_z);
      if (tile != null && AppEng.instance.isIntegrationEnabled(IntegrationType.FMP))       host=((IFMP)AppEng.instance.getIntegration(IntegrationType.FMP)).getOrCreateHost(tile);
      if ((blkID == null || blkID.isReplaceable(world,te_x,te_y,te_z) || host != null) && offset != ForgeDirection.UNKNOWN)       return place(held,te_x,te_y,te_z,side.getOpposite().ordinal(),player,world,pass == PlaceType.INTERACT_FIRST_PASS ? PlaceType.INTERACT_SECOND_PASS : PlaceType.PLACE_ITEM,depth + 1);
    }
    return false;
  }
  if (!world.isRemote) {
    Block block=world.getBlock(x,y,z);
    LookDirection dir=Platform.getPlayerRay(player);
    MovingObjectPosition mop=block.collisionRayTrace(world,x,y,z,dir.a,dir.b);
    if (mop != null) {
      SelectedPart sp=selectPart(player,host,mop.hitVec.addVector(-mop.blockX,-mop.blockY,-mop.blockZ));
      if (sp.part != null) {
        if (!player.isSneaking() && sp.part.onActivate(player,mop.hitVec))         return false;
      }
    }
    ForgeDirection mySide=host.addPart(held,side,player);
    if (mySide != null) {
      SoundType ss=AEApi.instance().blocks().blockMultiPart.block().stepSound;
      world.playSoundEffect(0.5 + x,0.5 + y,0.5 + z,ss.func_150496_b(),(ss.getVolume() + 1.0F) / 2.0F,ss.getPitch() * 0.8F);
      if (!player.capabilities.isCreativeMode) {
        held.stackSize--;
        if (held.stackSize == 0) {
          player.inventory.mainInventory[player.inventory.currentItem]=null;
          MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(player,held));
        }
      }
    }
  }
 else {
    player.swingItem();
    try {
      NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
    }
 catch (    IOException e) {
      AELog.error(e);
    }
  }
  return true;
}","public static boolean place(ItemStack held,int x,int y,int z,int face,EntityPlayer player,World world,PlaceType pass,int depth){
  if (depth > 3)   return false;
  ForgeDirection side=ForgeDirection.getOrientation(face);
  if (held != null && Platform.isWrench(player,held,x,y,z) && player.isSneaking()) {
    Block block=world.getBlock(x,y,z);
    TileEntity tile=world.getTileEntity(x,y,z);
    IPartHost host=null;
    if (tile instanceof IPartHost)     host=(IPartHost)tile;
    if (host != null) {
      if (!world.isRemote) {
        LookDirection dir=Platform.getPlayerRay(player);
        MovingObjectPosition mop=block.collisionRayTrace(world,x,y,z,dir.a,dir.b);
        if (mop != null) {
          List<ItemStack> is=new LinkedList();
          SelectedPart sp=selectPart(player,host,mop.hitVec.addVector(-mop.blockX,-mop.blockY,-mop.blockZ));
          if (sp.part != null) {
            is.add(sp.part.getItemStack(PartItemStack.Wrench));
            sp.part.getDrops(is,true);
            host.removePart(sp.side,false);
          }
          if (sp.facade != null) {
            is.add(sp.facade.getItemStack());
            host.getFacadeContainer().removeFacade(host,sp.side);
            Platform.notifyBlocksOfNeighbors(world,x,y,z);
          }
          if (host.isEmpty())           host.cleanup();
          if (is != null && !is.isEmpty()) {
            Platform.spawnDrops(world,x,y,z,is);
          }
        }
      }
 else {
        player.swingItem();
        try {
          NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
        }
 catch (        IOException e) {
          AELog.error(e);
        }
      }
      return true;
    }
    return false;
  }
  TileEntity tile=world.getTileEntity(x,y,z);
  IPartHost host=null;
  if (tile instanceof IPartHost)   host=(IPartHost)tile;
  if (held != null) {
    IFacadePart fp=isFacade(held,side);
    if (fp != null) {
      if (host != null) {
        if (!world.isRemote) {
          if (host.getPart(ForgeDirection.UNKNOWN) == null)           return false;
          if (host.canAddPart(held,side)) {
            if (host.getFacadeContainer().addFacade(fp)) {
              host.markForUpdate();
              if (!player.capabilities.isCreativeMode) {
                held.stackSize--;
                if (held.stackSize == 0) {
                  player.inventory.mainInventory[player.inventory.currentItem]=null;
                  MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(player,held));
                }
              }
              return true;
            }
          }
        }
 else {
          player.swingItem();
          try {
            NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
            return true;
          }
 catch (          IOException e) {
            AELog.error(e);
          }
        }
      }
      return false;
    }
  }
  if (host == null && tile != null && AppEng.instance.isIntegrationEnabled(IntegrationType.FMP))   host=((IFMP)AppEng.instance.getIntegration(IntegrationType.FMP)).getOrCreateHost(tile);
  if (host == null && tile != null && AppEng.instance.isIntegrationEnabled(IntegrationType.ImmibisMicroblocks))   host=((IImmibisMicroblocks)AppEng.instance.getIntegration(IntegrationType.ImmibisMicroblocks)).getOrCreateHost(player,face,tile);
{
    Block block=world.getBlock(x,y,z);
    if (host != null && player.isSneaking() && block != null) {
      LookDirection dir=Platform.getPlayerRay(player);
      MovingObjectPosition mop=block.collisionRayTrace(world,x,y,z,dir.a,dir.b);
      if (mop != null) {
        mop.hitVec=mop.hitVec.addVector(-mop.blockX,-mop.blockY,-mop.blockZ);
        SelectedPart sPart=selectPart(player,host,mop.hitVec);
        if (sPart != null && sPart.part != null)         if (sPart.part.onShiftActivate(player,mop.hitVec)) {
          if (world.isRemote) {
            try {
              NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
            }
 catch (            IOException e) {
              AELog.error(e);
            }
          }
          return true;
        }
      }
    }
  }
  if (held == null || !(held.getItem() instanceof IPartItem))   return false;
  int te_x=x;
  int te_y=y;
  int te_z=z;
  if (host == null && pass == PlaceType.PLACE_ITEM) {
    ItemStack is=AEApi.instance().blocks().blockMultiPart.stack(1);
    ItemBlock ib=(ItemBlock)is.getItem();
    ForgeDirection offset=ForgeDirection.UNKNOWN;
    Block blkID=world.getBlock(x,y,z);
    if (blkID != null && !blkID.isReplaceable(world,x,y,z)) {
      offset=side;
      if (Platform.isServer())       side=side.getOpposite();
    }
    te_x=x + offset.offsetX;
    te_y=y + offset.offsetY;
    te_z=z + offset.offsetZ;
    tile=world.getTileEntity(te_x,te_y,te_z);
    if (tile instanceof IPartHost)     host=(IPartHost)tile;
    if (host == null && tile != null && AppEng.instance.isIntegrationEnabled(IntegrationType.FMP))     host=((IFMP)AppEng.instance.getIntegration(IntegrationType.FMP)).getOrCreateHost(tile);
    if (host == null && AEApi.instance().blocks().blockMultiPart.block().canPlaceBlockAt(world,te_x,te_y,te_z) && ib.placeBlockAt(is,player,world,te_x,te_y,te_z,side.ordinal(),0.5f,0.5f,0.5f,0)) {
      if (!world.isRemote) {
        tile=world.getTileEntity(te_x,te_y,te_z);
        if (tile instanceof IPartHost)         host=(IPartHost)tile;
        pass=PlaceType.INTERACT_SECOND_PASS;
      }
 else {
        player.swingItem();
        try {
          NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
        }
 catch (        IOException e) {
          AELog.error(e);
        }
        return true;
      }
    }
 else     if (host != null && !host.canAddPart(held,side))     return false;
  }
  if (host == null)   return false;
  if (!host.canAddPart(held,side)) {
    if (pass == PlaceType.INTERACT_FIRST_PASS || pass == PlaceType.PLACE_ITEM) {
      ForgeDirection offset=side;
      te_x=x + offset.offsetX;
      te_y=y + offset.offsetY;
      te_z=z + offset.offsetZ;
      Block blkID=world.getBlock(te_x,te_y,te_z);
      tile=world.getTileEntity(te_x,te_y,te_z);
      if (tile != null && AppEng.instance.isIntegrationEnabled(IntegrationType.FMP))       host=((IFMP)AppEng.instance.getIntegration(IntegrationType.FMP)).getOrCreateHost(tile);
      if ((blkID == null || blkID.isReplaceable(world,te_x,te_y,te_z) || host != null) && offset != ForgeDirection.UNKNOWN)       return place(held,te_x,te_y,te_z,side.getOpposite().ordinal(),player,world,pass == PlaceType.INTERACT_FIRST_PASS ? PlaceType.INTERACT_SECOND_PASS : PlaceType.PLACE_ITEM,depth + 1);
    }
    return false;
  }
  if (!world.isRemote) {
    Block block=world.getBlock(x,y,z);
    LookDirection dir=Platform.getPlayerRay(player);
    MovingObjectPosition mop=block.collisionRayTrace(world,x,y,z,dir.a,dir.b);
    if (mop != null) {
      SelectedPart sp=selectPart(player,host,mop.hitVec.addVector(-mop.blockX,-mop.blockY,-mop.blockZ));
      if (sp.part != null) {
        if (!player.isSneaking() && sp.part.onActivate(player,mop.hitVec))         return false;
      }
    }
    ForgeDirection mySide=host.addPart(held,side,player);
    if (mySide != null) {
      SoundType ss=AEApi.instance().blocks().blockMultiPart.block().stepSound;
      world.playSoundEffect(0.5 + x,0.5 + y,0.5 + z,ss.func_150496_b(),(ss.getVolume() + 1.0F) / 2.0F,ss.getPitch() * 0.8F);
      if (!player.capabilities.isCreativeMode) {
        held.stackSize--;
        if (held.stackSize == 0) {
          player.inventory.mainInventory[player.inventory.currentItem]=null;
          MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(player,held));
        }
      }
    }
  }
 else {
    player.swingItem();
    try {
      NetworkHandler.instance.sendToServer(new PacketPartPlacement(x,y,z,face));
    }
 catch (    IOException e) {
      AELog.error(e);
    }
  }
  return true;
}"
30601,"@Override public void cleanup(){
  getWorldObj().setBlock(xCoord,yCoord,zCoord,Platform.air);
}","@Override public void cleanup(){
  if (AppEng.instance.isIntegrationEnabled(IntegrationType.ImmibisMicroblocks)) {
    IImmibisMicroblocks imb=(IImmibisMicroblocks)AppEng.instance.getIntegration(IntegrationType.ImmibisMicroblocks);
    if (imb != null && imb.leaveParts(this))     return;
  }
  getWorldObj().setBlock(xCoord,yCoord,zCoord,Platform.air);
}"
30602,"public static void openGUI(EntityPlayer p,TileEntity tile,ForgeDirection side,GuiBridge type){
  if (isClient())   return;
  int x=(int)p.posX, y=(int)p.posY, z=(int)p.posZ;
  if (tile != null) {
    x=tile.xCoord;
    y=tile.yCoord;
    z=tile.zCoord;
  }
  if ((type.getType().isItem() && tile == null) || type.hasPermissions(tile,x,y,z,side,p)) {
    if (tile == null)     p.openGui(AppEng.instance,type.ordinal() << 3,p.getEntityWorld(),x,y,z);
 else     p.openGui(AppEng.instance,type.ordinal() << 3 | (side.ordinal()),tile.getWorldObj(),x,y,z);
  }
}","public static void openGUI(EntityPlayer p,TileEntity tile,ForgeDirection side,GuiBridge type){
  if (isClient())   return;
  int x=(int)p.posX, y=(int)p.posY, z=(int)p.posZ;
  if (tile != null) {
    x=tile.xCoord;
    y=tile.yCoord;
    z=tile.zCoord;
  }
  if ((type.getType().isItem() && tile == null) || type.hasPermissions(tile,x,y,z,side,p)) {
    if (tile == null)     p.openGui(AppEng.instance,type.ordinal() << 4 | (1 << 3),p.getEntityWorld(),x,y,z);
 else     p.openGui(AppEng.instance,type.ordinal() << 4 | (side.ordinal()),tile.getWorldObj(),x,y,z);
  }
}"
30603,"@Override public void updateSetting(IConfigManager manager,Enum setting,Enum newValue){
  for (  Enum e : settings.getSettings()) {
    if (e == setting) {
      String Category=e.getClass().getSimpleName();
      Property p=this.get(Category,e.name(),settings.getSetting(e).name(),getListComment(newValue));
      p.set(newValue.name());
    }
  }
  if (updateable)   save();
}","@Override public void updateSetting(IConfigManager manager,Enum setting,Enum newValue){
  for (  Enum e : settings.getSettings()) {
    if (e == setting) {
      String Category=""String_Node_Str"";
      Property p=this.get(Category,e.name(),settings.getSetting(e).name(),getListComment(newValue));
      p.set(newValue.name());
    }
  }
  if (updateable)   save();
}"
30604,"private void resetCache(boolean fullReset){
  if (host == null || host.getTile() == null || host.getTile().getWorldObj() == null)   return;
  IMEInventory<IAEItemStack> in=getInternalHandler();
  IItemList<IAEItemStack> before=AEApi.instance().storage().createItemList();
  if (in != null)   before=in.getAvailableItems(before);
  cached=false;
  if (fullReset)   handlerHash=0;
  IMEInventory<IAEItemStack> out=getInternalHandler();
  if (monitor != null)   monitor.onTick();
  IItemList<IAEItemStack> after=AEApi.instance().storage().createItemList();
  if (out != null)   after=out.getAvailableItems(after);
  Platform.postListChanges(before,after,this,mySrc);
}","private void resetCache(boolean fullReset){
  if (host == null || host.getTile() == null || host.getTile().getWorldObj() == null || host.getTile().getWorldObj().isRemote)   return;
  IMEInventory<IAEItemStack> in=getInternalHandler();
  IItemList<IAEItemStack> before=AEApi.instance().storage().createItemList();
  if (in != null)   before=in.getAvailableItems(before);
  cached=false;
  if (fullReset)   handlerHash=0;
  IMEInventory<IAEItemStack> out=getInternalHandler();
  if (monitor != null)   monitor.onTick();
  IItemList<IAEItemStack> after=AEApi.instance().storage().createItemList();
  if (out != null)   after=out.getAvailableItems(after);
  Platform.postListChanges(before,after,this,mySrc);
}"
30605,"@Override public void readFromNBT(NBTTagCompound data){
  if (data.hasKey(""String_Node_Str"")) {
    ItemStack myPat=ItemStack.loadItemStackFromNBT(data.getCompoundTag(""String_Node_Str""));
    if (myPat != null && myPat.getItem() instanceof ItemEncodedPattern) {
      World w=getWorldObj();
      ItemEncodedPattern iep=(ItemEncodedPattern)myPat.getItem();
      ICraftingPatternDetails ph=iep.getPatternForItem(myPat,w);
      if (ph != null && ph.isCraftable()) {
        forcePlan=true;
        myPlan=ph;
      }
    }
  }
  upgrades.readFromNBT(data,""String_Node_Str"");
  inv.readFromNBT(data,""String_Node_Str"");
  settings.readFromNBT(data);
  recalculatePlan();
}","@Override public void readFromNBT(NBTTagCompound data){
  if (data.hasKey(""String_Node_Str"")) {
    ItemStack myPat=ItemStack.loadItemStackFromNBT(data.getCompoundTag(""String_Node_Str""));
    if (myPat != null && myPat.getItem() instanceof ItemEncodedPattern) {
      World w=getWorldObj();
      ItemEncodedPattern iep=(ItemEncodedPattern)myPat.getItem();
      ICraftingPatternDetails ph=iep.getPatternForItem(myPat,w);
      if (ph != null && ph.isCraftable()) {
        forcePlan=true;
        myPlan=ph;
        pushDirection=ForgeDirection.getOrientation(data.getInteger(""String_Node_Str""));
      }
    }
  }
  upgrades.readFromNBT(data,""String_Node_Str"");
  inv.readFromNBT(data,""String_Node_Str"");
  settings.readFromNBT(data);
  recalculatePlan();
}"
30606,"@Override public TickRateModulation tickingRequest(IGridNode node,int TicksSinceLastCall){
  if (inv.getStackInSlot(9) != null) {
    pushOut(inv.getStackInSlot(9));
    ejectHeldItems();
    updateSleepyness();
    return isAwake ? TickRateModulation.IDLE : TickRateModulation.SLEEP;
  }
  if (myPlan == null) {
    updateSleepyness();
    return TickRateModulation.SLEEP;
  }
  if (reboot)   TicksSinceLastCall=1;
  reboot=false;
  int speed=10;
switch (upgrades.getInstalledUpgrades(Upgrades.SPEED)) {
case 0:
    progress+=userPower(TicksSinceLastCall,speed=10,1.0);
  break;
case 1:
progress+=userPower(TicksSinceLastCall,speed=13,1.3);
break;
case 2:
progress+=userPower(TicksSinceLastCall,speed=17,1.7);
break;
case 3:
progress+=userPower(TicksSinceLastCall,speed=20,2.0);
break;
case 4:
progress+=userPower(TicksSinceLastCall,speed=25,2.5);
break;
case 5:
progress+=userPower(TicksSinceLastCall,speed=50,5.0);
break;
}
if (progress >= 100) {
for (int x=0; x < craftingInv.getSizeInventory(); x++) craftingInv.setInventorySlotContents(x,inv.getStackInSlot(x));
progress=0;
ItemStack output=myPlan.getOutput(craftingInv,getWorldObj());
if (output != null) {
FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)getWorldObj()),output,craftingInv);
pushOut(output.copy());
for (int x=0; x < craftingInv.getSizeInventory(); x++) inv.setInventorySlotContents(x,Platform.getContainerItem(craftingInv.getStackInSlot(x)));
if (inv.getStackInSlot(10) == null) {
forcePlan=false;
myPlan=null;
}
ejectHeldItems();
try {
TargetPoint where=new TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,32);
IAEItemStack item=AEItemStack.create(output);
NetworkHandler.instance.sendToAllAround(new PacketAssemblerAnimation(xCoord,yCoord,zCoord,(byte)speed,item),where);
}
 catch (IOException e) {
}
updateSleepyness();
return isAwake ? TickRateModulation.IDLE : TickRateModulation.SLEEP;
}
}
return TickRateModulation.FASTER;
}","@Override public TickRateModulation tickingRequest(IGridNode node,int TicksSinceLastCall){
  if (inv.getStackInSlot(9) != null) {
    pushOut(inv.getStackInSlot(9));
    ejectHeldItems();
    updateSleepyness();
    return isAwake ? TickRateModulation.IDLE : TickRateModulation.SLEEP;
  }
  if (myPlan == null) {
    updateSleepyness();
    return TickRateModulation.SLEEP;
  }
  if (reboot)   TicksSinceLastCall=1;
  reboot=false;
  int speed=10;
switch (upgrades.getInstalledUpgrades(Upgrades.SPEED)) {
case 0:
    progress+=userPower(TicksSinceLastCall,speed=10,1.0);
  break;
case 1:
progress+=userPower(TicksSinceLastCall,speed=13,1.3);
break;
case 2:
progress+=userPower(TicksSinceLastCall,speed=17,1.7);
break;
case 3:
progress+=userPower(TicksSinceLastCall,speed=20,2.0);
break;
case 4:
progress+=userPower(TicksSinceLastCall,speed=25,2.5);
break;
case 5:
progress+=userPower(TicksSinceLastCall,speed=50,5.0);
break;
}
if (progress >= 100) {
for (int x=0; x < craftingInv.getSizeInventory(); x++) craftingInv.setInventorySlotContents(x,inv.getStackInSlot(x));
progress=0;
ItemStack output=myPlan.getOutput(craftingInv,getWorldObj());
if (output != null) {
FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)getWorldObj()),output,craftingInv);
pushOut(output.copy());
for (int x=0; x < craftingInv.getSizeInventory(); x++) inv.setInventorySlotContents(x,Platform.getContainerItem(craftingInv.getStackInSlot(x)));
if (inv.getStackInSlot(10) == null) {
forcePlan=false;
myPlan=null;
pushDirection=ForgeDirection.UNKNOWN;
}
ejectHeldItems();
try {
TargetPoint where=new TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,32);
IAEItemStack item=AEItemStack.create(output);
NetworkHandler.instance.sendToAllAround(new PacketAssemblerAnimation(xCoord,yCoord,zCoord,(byte)speed,item),where);
}
 catch (IOException e) {
}
updateSleepyness();
return isAwake ? TickRateModulation.IDLE : TickRateModulation.SLEEP;
}
}
return TickRateModulation.FASTER;
}"
30607,"@Override public void writeToNBT(NBTTagCompound data){
  if (forcePlan && myPlan != null) {
    ItemStack pattern=myPlan.getPattern();
    if (pattern != null) {
      NBTTagCompound pdata=new NBTTagCompound();
      pattern.writeToNBT(pdata);
      data.setTag(""String_Node_Str"",pdata);
    }
  }
  upgrades.writeToNBT(data,""String_Node_Str"");
  inv.writeToNBT(data,""String_Node_Str"");
  settings.writeToNBT(data);
}","@Override public void writeToNBT(NBTTagCompound data){
  if (forcePlan && myPlan != null) {
    ItemStack pattern=myPlan.getPattern();
    if (pattern != null) {
      NBTTagCompound pdata=new NBTTagCompound();
      pattern.writeToNBT(pdata);
      data.setTag(""String_Node_Str"",pdata);
      data.setInteger(""String_Node_Str"",pushDirection.ordinal());
    }
  }
  upgrades.writeToNBT(data,""String_Node_Str"");
  inv.writeToNBT(data,""String_Node_Str"");
  settings.writeToNBT(data);
}"
30608,"private void recalculatePlan(){
  reboot=true;
  if (forcePlan)   return;
  ItemStack is=inv.getStackInSlot(10);
  if (is != null && is.getItem() instanceof ItemEncodedPattern) {
    if (!Platform.isSameItem(is,myPattern)) {
      World w=getWorldObj();
      ItemEncodedPattern iep=(ItemEncodedPattern)is.getItem();
      ICraftingPatternDetails ph=iep.getPatternForItem(is,w);
      if (ph.isCraftable()) {
        progress=0;
        myPattern=is;
        myPlan=ph;
      }
    }
  }
 else {
    progress=0;
    forcePlan=false;
    myPlan=null;
    myPattern=null;
  }
  updateSleepyness();
}","private void recalculatePlan(){
  reboot=true;
  if (forcePlan)   return;
  ItemStack is=inv.getStackInSlot(10);
  if (is != null && is.getItem() instanceof ItemEncodedPattern) {
    if (!Platform.isSameItem(is,myPattern)) {
      World w=getWorldObj();
      ItemEncodedPattern iep=(ItemEncodedPattern)is.getItem();
      ICraftingPatternDetails ph=iep.getPatternForItem(is,w);
      if (ph.isCraftable()) {
        progress=0;
        myPattern=is;
        myPlan=ph;
      }
    }
  }
 else {
    progress=0;
    forcePlan=false;
    myPlan=null;
    myPattern=null;
    pushDirection=ForgeDirection.UNKNOWN;
  }
  updateSleepyness();
}"
30609,"public IAEItemStack request(MECraftingInventory inv,long l,BaseActionSource src) throws CraftBranchFailure, InterruptedException {
  job.handlepausing();
  List<IAEItemStack> thingsUsed=new LinkedList();
  what.setStackSize(l);
  if (slot >= 0 && parent != null && parent.details.isCraftable()) {
    for (    IAEItemStack fuzz : inv.getItemList().findFuzzy(what,FuzzyMode.IGNORE_ALL)) {
      if (parent.details.isValidItemForSlot(slot,fuzz.getItemStack(),world)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(l);
        IAEItemStack available=inv.extractItems(fuzz,Actionable.MODULATE,src);
        if (available != null) {
          if (!exhausted) {
            IAEItemStack is=job.checkUse(available);
            if (is != null) {
              thingsUsed.add(is.copy());
              used.add(is);
            }
          }
          bytes+=available.getStackSize();
          l-=available.getStackSize();
          if (l == 0)           return available;
        }
      }
    }
  }
 else {
    IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
    if (available != null) {
      if (!exhausted) {
        IAEItemStack is=job.checkUse(available);
        if (is != null) {
          thingsUsed.add(is.copy());
          used.add(is);
        }
      }
      bytes+=available.getStackSize();
      l-=available.getStackSize();
      if (l == 0)       return available;
    }
  }
  exhausted=true;
  if (nodes.size() == 1) {
    CraftingTreeProcess pro=nodes.get(0);
    while (pro.possible && l > 0) {
      pro.request(inv,pro.getTimes(l,pro.getAmountCrafted(what).getStackSize()),src);
      what.setStackSize(l);
      IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
      if (available != null) {
        bytes+=available.getStackSize();
        l-=available.getStackSize();
        if (l <= 0)         return available;
      }
 else       pro.possible=false;
    }
  }
 else   if (nodes.size() > 1) {
    for (    CraftingTreeProcess pro : nodes) {
      try {
        while (pro.possible && l > 0) {
          MECraftingInventory subInv=new MECraftingInventory(inv,true,true,true);
          pro.request(subInv,1,src);
          what.setStackSize(l);
          IAEItemStack available=subInv.extractItems(what,Actionable.MODULATE,src);
          if (available != null) {
            subInv.commit(src);
            bytes+=available.getStackSize();
            l-=available.getStackSize();
            if (l <= 0)             return available;
          }
 else           pro.possible=false;
        }
      }
 catch (      CraftBranchFailure fail) {
        pro.possible=true;
      }
    }
  }
  if (sim) {
    missing+=l;
    bytes+=l;
    IAEItemStack rv=what.copy();
    rv.setStackSize(l);
    return rv;
  }
  for (  IAEItemStack o : thingsUsed) {
    job.refund(o.copy());
    o.setStackSize(-o.getStackSize());
    used.add(o);
  }
  throw new CraftBranchFailure(what,l);
}","public IAEItemStack request(MECraftingInventory inv,long l,BaseActionSource src) throws CraftBranchFailure, InterruptedException {
  job.handlepausing();
  List<IAEItemStack> thingsUsed=new LinkedList();
  what.setStackSize(l);
  if (slot >= 0 && parent != null && parent.details.isCraftable()) {
    for (    IAEItemStack fuzz : inv.getItemList().findFuzzy(what,FuzzyMode.IGNORE_ALL)) {
      if (parent.details.isValidItemForSlot(slot,fuzz.getItemStack(),world)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(l);
        IAEItemStack available=inv.extractItems(fuzz,Actionable.MODULATE,src);
        if (available != null) {
          if (!exhausted) {
            IAEItemStack is=job.checkUse(available);
            if (is != null) {
              thingsUsed.add(is.copy());
              used.add(is);
            }
          }
          bytes+=available.getStackSize();
          l-=available.getStackSize();
          if (l == 0)           return available;
        }
      }
    }
  }
 else {
    IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
    if (available != null) {
      if (!exhausted) {
        IAEItemStack is=job.checkUse(available);
        if (is != null) {
          thingsUsed.add(is.copy());
          used.add(is);
        }
      }
      bytes+=available.getStackSize();
      l-=available.getStackSize();
      if (l == 0)       return available;
    }
  }
  exhausted=true;
  if (nodes.size() == 1) {
    CraftingTreeProcess pro=nodes.get(0);
    while (pro.possible && l > 0) {
      IAEItemStack madeWhat=pro.getAmountCrafted(what);
      pro.request(inv,pro.getTimes(l,madeWhat.getStackSize()),src);
      madeWhat.setStackSize(l);
      IAEItemStack available=inv.extractItems(madeWhat,Actionable.MODULATE,src);
      if (available != null) {
        bytes+=available.getStackSize();
        l-=available.getStackSize();
        if (l <= 0)         return available;
      }
 else       pro.possible=false;
    }
  }
 else   if (nodes.size() > 1) {
    for (    CraftingTreeProcess pro : nodes) {
      try {
        while (pro.possible && l > 0) {
          MECraftingInventory subInv=new MECraftingInventory(inv,true,true,true);
          pro.request(subInv,1,src);
          what.setStackSize(l);
          IAEItemStack available=subInv.extractItems(what,Actionable.MODULATE,src);
          if (available != null) {
            subInv.commit(src);
            bytes+=available.getStackSize();
            l-=available.getStackSize();
            if (l <= 0)             return available;
          }
 else           pro.possible=false;
        }
      }
 catch (      CraftBranchFailure fail) {
        pro.possible=true;
      }
    }
  }
  if (sim) {
    missing+=l;
    bytes+=l;
    IAEItemStack rv=what.copy();
    rv.setStackSize(l);
    return rv;
  }
  for (  IAEItemStack o : thingsUsed) {
    job.refund(o.copy());
    o.setStackSize(-o.getStackSize());
    used.add(o);
  }
  throw new CraftBranchFailure(what,l);
}"
30610,"public CraftingTreeNode(ICraftingGrid cc,CraftingJob job,IAEItemStack wat,CraftingTreeProcess par,int slot,int depth){
  what=wat;
  parent=par;
  this.slot=slot;
  this.world=job.getWorld();
  this.job=job;
  sim=false;
  for (  ICraftingPatternDetails details : cc.getCraftingFor(what)) {
    if (parent == null || parent.notRecurive(details))     nodes.add(new CraftingTreeProcess(cc,job,details,this,depth + 1,world));
  }
}","public CraftingTreeNode(ICraftingGrid cc,CraftingJob job,IAEItemStack wat,CraftingTreeProcess par,int slot,int depth){
  what=wat;
  parent=par;
  this.slot=slot;
  this.world=job.getWorld();
  this.job=job;
  sim=false;
  for (  ICraftingPatternDetails details : cc.getCraftingFor(what,parent == null ? null : parent.details,slot,world)) {
    if (parent == null || parent.notRecurive(details))     nodes.add(new CraftingTreeProcess(cc,job,details,this,depth + 1,world));
  }
}"
30611,"IAEItemStack getAmountCrafted(IAEItemStack what2){
  for (  IAEItemStack is : details.getCondencedOutputs()) {
    if (is.equals(what2)) {
      what2=what2.copy();
      what2.setStackSize(is.getStackSize());
      return what2;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","IAEItemStack getAmountCrafted(IAEItemStack what2){
  for (  IAEItemStack is : details.getCondencedOutputs()) {
    if (is.equals(what2)) {
      what2=what2.copy();
      what2.setStackSize(is.getStackSize());
      return what2;
    }
  }
  for (  IAEItemStack is : details.getCondencedOutputs()) {
    if (is.getItem() == what2.getItem() && (is.getItem().isDamageable() || is.getItemDamage() == what2.getItemDamage())) {
      what2=is.copy();
      what2.setStackSize(is.getStackSize());
      return what2;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}"
30612,"public ImmutableCollection<ICraftingPatternDetails> getCraftingFor(IAEItemStack what){
  ImmutableSet<ICraftingPatternDetails> res=craftableItems.get(what);
  if (res == null)   return ImmutableSet.of();
  return res;
}","@Override public ImmutableCollection<ICraftingPatternDetails> getCraftingFor(IAEItemStack whatToCraft,ICraftingPatternDetails details,int slotIndex,World world){
  ImmutableSet<ICraftingPatternDetails> res=craftableItems.get(whatToCraft);
  if (res == null) {
    if (details != null && details.isCraftable()) {
      for (      IAEItemStack ais : craftableItems.keySet()) {
        if (ais.getItem() == whatToCraft.getItem() && (!ais.getItem().getHasSubtypes() || ais.getItemDamage() == whatToCraft.getItemDamage())) {
          if (details.isValidItemForSlot(slotIndex,ais.getItemStack(),world)) {
            return craftableItems.get(ais);
          }
        }
      }
    }
    return ImmutableSet.of();
  }
  return res;
}"
30613,"public static ItemStack extractItemsByRecipe(IEnergySource energySrc,BaseActionSource mySrc,IMEMonitor<IAEItemStack> src,World w,IRecipe r,ItemStack output,InventoryCrafting ci,ItemStack providedTemplate,int slot,IItemList<IAEItemStack> aitems,Actionable realForFake){
  if (energySrc.extractAEPower(1,Actionable.SIMULATE,PowerMultiplier.CONFIG) > 0.9) {
    if (providedTemplate == null)     return null;
    AEItemStack ae_req=AEItemStack.create(providedTemplate);
    ae_req.setStackSize(1);
    IAEItemStack ae_ext=src.extractItems(ae_req,realForFake,mySrc);
    if (ae_ext != null) {
      ItemStack extracted=ae_ext.getItemStack();
      if (extracted != null) {
        energySrc.extractAEPower(1,realForFake,PowerMultiplier.CONFIG);
        return extracted;
      }
    }
    if (aitems != null && (ae_req.isOre() || providedTemplate.hasTagCompound() || providedTemplate.isItemStackDamageable())) {
      for (      IAEItemStack x : aitems) {
        ItemStack sh=x.getItemStack();
        if ((Platform.isSameItemType(providedTemplate,sh) || ae_req.sameOre(x)) && !Platform.isSameItem(sh,output)) {
          ItemStack cp=Platform.cloneItemStack(sh);
          cp.stackSize=1;
          ci.setInventorySlotContents(slot,cp);
          if (r.matches(ci,w) && Platform.isSameItem(r.getCraftingResult(ci),output)) {
            IAEItemStack ex=src.extractItems(AEItemStack.create(cp),realForFake,mySrc);
            if (ex != null) {
              energySrc.extractAEPower(1,realForFake,PowerMultiplier.CONFIG);
              return ex.getItemStack();
            }
          }
          ci.setInventorySlotContents(slot,providedTemplate);
        }
      }
    }
  }
  return null;
}","public static ItemStack extractItemsByRecipe(IEnergySource energySrc,BaseActionSource mySrc,IMEMonitor<IAEItemStack> src,World w,IRecipe r,ItemStack output,InventoryCrafting ci,ItemStack providedTemplate,int slot,IItemList<IAEItemStack> aitems,Actionable realForFake){
  if (energySrc.extractAEPower(1,Actionable.SIMULATE,PowerMultiplier.CONFIG) > 0.9) {
    if (providedTemplate == null)     return null;
    AEItemStack ae_req=AEItemStack.create(providedTemplate);
    ae_req.setStackSize(1);
    IAEItemStack ae_ext=src.extractItems(ae_req,realForFake,mySrc);
    if (ae_ext != null) {
      ItemStack extracted=ae_ext.getItemStack();
      if (extracted != null) {
        energySrc.extractAEPower(1,realForFake,PowerMultiplier.CONFIG);
        return extracted;
      }
    }
    if (aitems != null && (ae_req.isOre() || providedTemplate.hasTagCompound() || providedTemplate.isItemStackDamageable())) {
      for (      IAEItemStack x : aitems) {
        ItemStack sh=x.getItemStack();
        if ((Platform.isSameItemType(providedTemplate,sh) || ae_req.sameOre(x)) && !Platform.isSameItem(sh,output)) {
          ItemStack cp=Platform.cloneItemStack(sh);
          cp.stackSize=1;
          ci.setInventorySlotContents(slot,cp);
          if (r.matches(ci,w) && Platform.isSameItem(r.getCraftingResult(ci),output)) {
            IAEItemStack ax=x.copy();
            ax.setStackSize(1);
            IAEItemStack ex=src.extractItems(ax,realForFake,mySrc);
            if (ex != null) {
              energySrc.extractAEPower(1,realForFake,PowerMultiplier.CONFIG);
              return ex.getItemStack();
            }
          }
          ci.setInventorySlotContents(slot,providedTemplate);
        }
      }
    }
  }
  return null;
}"
30614,"@Override public void onUpdate(String field,Object oldValue,Object newValue){
  if (field.equals(""String_Node_Str"")) {
    getAndUpdateOutput();
    updateOrderOfOutputSlots();
  }
}","@Override public void onUpdate(String field,Object oldValue,Object newValue){
  super.onUpdate(field,oldValue,newValue);
  if (field.equals(""String_Node_Str"")) {
    getAndUpdateOutput();
    updateOrderOfOutputSlots();
  }
}"
30615,"@SideOnly(Side.CLIENT) public void renderCoveredConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isSmart=false;
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of.getOpposite())));
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent)   rh.setTexture(getGlassTexture(ccph.getColor()));
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.COVERED && ccph.getColor() != AEColor.Transparent) rh.setTexture(getCoveredTexture(ccph.getColor()));
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.SMART) {
isSmart=true;
rh.setTexture(getSmartTexture(getCableColor()));
}
 else rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
if (isSmart) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(getCableColor().blackVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(getCableColor().whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
}","@SideOnly(Side.CLIENT) public void renderCoveredConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isSmart=false;
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of)));
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent)   rh.setTexture(getGlassTexture(ccph.getColor()));
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.COVERED && ccph.getColor() != AEColor.Transparent) rh.setTexture(getCoveredTexture(ccph.getColor()));
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.SMART) {
isSmart=true;
rh.setTexture(getSmartTexture(getCableColor()));
}
 else rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
if (isSmart) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(getCableColor().blackVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(getCableColor().whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
}"
30616,"@SideOnly(Side.CLIENT) public void renderSmartConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isGlass=false;
  AEColor myColor=getCableColor();
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of,of.getOpposite())));
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent) {
    isGlass=true;
    rh.setTexture(getGlassTexture(myColor=ccph.getColor()));
  }
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of.getOpposite()) != AECableType.GLASS) {
    rh.setTexture(getSmartTexture(myColor));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (true) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(myColor.blackVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) != AECableType.GLASS && ccph.getColor() != AEColor.Transparent && ccph.getPart(of.getOpposite()) == null) rh.setTexture(getSmartTexture(myColor=ccph.getColor()));
 else rh.setTexture(getSmartTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
if (!isGlass) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(myColor.blackVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
}","@SideOnly(Side.CLIENT) public void renderSmartConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isGlass=false;
  AEColor myColor=getCableColor();
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of)));
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent) {
    isGlass=true;
    rh.setTexture(getGlassTexture(myColor=ccph.getColor()));
  }
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of.getOpposite()) != AECableType.GLASS) {
    rh.setTexture(getSmartTexture(myColor));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (true) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(myColor.blackVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) != AECableType.GLASS && ccph.getColor() != AEColor.Transparent && ccph.getPart(of.getOpposite()) == null) rh.setTexture(getSmartTexture(myColor=ccph.getColor()));
 else rh.setTexture(getSmartTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
if (!isGlass) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(myColor.blackVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
}"
30617,"private void pushItemsOut(EnumSet<ForgeDirection> possibleDirections){
  if (!hasItemsToSend())   return;
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  Iterator<ItemStack> i=waitingToSend.iterator();
  while (i.hasNext()) {
    ItemStack whatToSend=i.next();
    for (    ForgeDirection s : possibleDirections) {
      TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
      if (te == null)       continue;
      InventoryAdaptor ad=InventoryAdaptor.getAdaptor(te,s.getOpposite());
      if (ad != null) {
        whatToSend=ad.addItems(whatToSend);
        if (whatToSend == null)         break;
      }
    }
    if (whatToSend == null)     i.remove();
  }
  if (waitingToSend.isEmpty())   waitingToSend=null;
}","private void pushItemsOut(EnumSet<ForgeDirection> possibleDirections){
  if (!hasItemsToSend())   return;
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  Iterator<ItemStack> i=waitingToSend.iterator();
  while (i.hasNext()) {
    ItemStack whatToSend=i.next();
    for (    ForgeDirection s : possibleDirections) {
      TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
      if (te == null)       continue;
      InventoryAdaptor ad=InventoryAdaptor.getAdaptor(te,s.getOpposite());
      if (ad != null) {
        ItemStack Result=ad.addItems(whatToSend);
        if (Result == null)         whatToSend=null;
 else         whatToSend.stackSize-=whatToSend.stackSize - Result.stackSize;
        if (whatToSend == null)         break;
      }
    }
    if (whatToSend == null)     i.remove();
  }
  if (waitingToSend.isEmpty())   waitingToSend=null;
}"
30618,"public IAEItemStack getLow(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack bottom=new AEItemStack(this);
  AEItemDef newDef=bottom.def=bottom.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=0;
    newDef.reHash();
    return bottom;
  }
  if (newDef.item.isDamageable()) {
    if (fuzzy == FuzzyMode.IGNORE_ALL) {
      newDef.dspDamage=0;
    }
 else {
      int low=fuzzy.calculateBreakPoint(def.maxDamage);
      newDef.dspDamage=low < def.dspDamage ? low : 0;
    }
    newDef.damageValue=newDef.dspDamage;
  }
  newDef.tagCompound=AEItemDef.lowTag;
  newDef.reHash();
  return bottom;
}","public IAEItemStack getLow(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack bottom=new AEItemStack(this);
  AEItemDef newDef=bottom.def=bottom.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=0;
    newDef.reHash();
    return bottom;
  }
  if (newDef.item.isDamageable()) {
    if (fuzzy == FuzzyMode.IGNORE_ALL) {
      newDef.dspDamage=0;
    }
 else {
      int breakpoint=fuzzy.calculateBreakPoint(def.maxDamage);
      newDef.dspDamage=breakpoint < def.dspDamage ? breakpoint : 0;
    }
    newDef.damageValue=newDef.dspDamage;
  }
  newDef.tagCompound=AEItemDef.lowTag;
  newDef.reHash();
  return bottom;
}"
30619,"public IAEItemStack getHigh(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack top=new AEItemStack(this);
  AEItemDef newDef=top.def=top.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=Integer.MAX_VALUE;
    newDef.reHash();
    return top;
  }
  if (newDef.item.isDamageable()) {
    if (fuzzy == FuzzyMode.IGNORE_ALL) {
      newDef.dspDamage=def.maxDamage + 1;
    }
 else {
      int high=fuzzy.calculateBreakPoint(def.maxDamage) + 1;
      newDef.dspDamage=high > def.dspDamage ? high : def.maxDamage + 1;
    }
    newDef.damageValue=top.def.dspDamage;
  }
  newDef.tagCompound=AEItemDef.highTag;
  newDef.reHash();
  return top;
}","public IAEItemStack getHigh(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack top=new AEItemStack(this);
  AEItemDef newDef=top.def=top.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=Integer.MAX_VALUE;
    newDef.reHash();
    return top;
  }
  if (newDef.item.isDamageable()) {
    if (fuzzy == FuzzyMode.IGNORE_ALL) {
      newDef.dspDamage=def.maxDamage + 1;
    }
 else {
      int breakpoint=fuzzy.calculateBreakPoint(def.maxDamage);
      newDef.dspDamage=def.dspDamage < breakpoint ? breakpoint - 1 : def.maxDamage + 1;
    }
    newDef.damageValue=newDef.dspDamage;
  }
  newDef.tagCompound=AEItemDef.highTag;
  newDef.reHash();
  return top;
}"
30620,"protected void drawItem(int x,int y,ItemStack is){
  this.zLevel=100.0F;
  itemRender.zLevel=100.0F;
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  RenderHelper.enableGUIStandardItemLighting();
  itemRender.renderItemAndEffectIntoGUI(this.fontRendererObj,this.mc.renderEngine,is,x,y);
  GL11.glDisable(GL11.GL_LIGHTING);
  itemRender.zLevel=0.0F;
  this.zLevel=0.0F;
}","protected void drawItem(int x,int y,ItemStack is){
  this.zLevel=100.0F;
  itemRender.zLevel=100.0F;
  GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  RenderHelper.enableGUIStandardItemLighting();
  itemRender.renderItemAndEffectIntoGUI(this.fontRendererObj,this.mc.renderEngine,is,x,y);
  GL11.glPopAttrib();
  itemRender.zLevel=0.0F;
  this.zLevel=0.0F;
}"
30621,"public TileIOPort(){
  addNewHandler(new TileIOPortHandler());
  cm.registerSetting(Settings.REDSTONE_CONTROLLED,RedstoneMode.IGNORE);
  cm.registerSetting(Settings.FULLNESS_MODE,FullnessMode.EMPTY);
  cm.registerSetting(Settings.OPERATION_MODE,OperationMode.EMPTY);
}","public TileIOPort(){
  addNewHandler(new TileIOPortHandler());
  gridProxy.setFlags(GridFlags.REQUIRE_CHANNEL);
  cm.registerSetting(Settings.REDSTONE_CONTROLLED,RedstoneMode.IGNORE);
  cm.registerSetting(Settings.FULLNESS_MODE,FullnessMode.EMPTY);
  cm.registerSetting(Settings.OPERATION_MODE,OperationMode.EMPTY);
}"
30622,"/** 
 * Mostly from dimentional doors.. which mostly got it form X-Comp.
 * @param world
 * @param entity
 * @param link
 * @return
 */
public Entity teleportEntity(Entity entity,TelDestination link){
  WorldServer oldWorld, newWorld;
  EntityPlayerMP player;
  try {
    oldWorld=(WorldServer)entity.worldObj;
    newWorld=(WorldServer)link.dim;
    player=(entity instanceof EntityPlayerMP) ? (EntityPlayerMP)entity : null;
  }
 catch (  Throwable e) {
    return entity;
  }
  if (oldWorld == null)   return entity;
  if (newWorld == null)   return entity;
  if (entity.riddenByEntity != null) {
    return teleportEntity(entity.riddenByEntity,link);
  }
  Entity cart=entity.ridingEntity;
  if (cart != null) {
    entity.mountEntity(null);
    cart=teleportEntity(cart,link);
  }
  boolean difDest=newWorld != oldWorld;
  if (difDest) {
    if (player != null) {
      player.mcServer.getConfigurationManager().transferPlayerToDimension(player,link.dim.provider.dimensionId,new METeleporter(newWorld,link));
    }
 else {
      int entX=entity.chunkCoordX;
      int entZ=entity.chunkCoordZ;
      if ((entity.addedToChunk) && (oldWorld.getChunkProvider().chunkExists(entX,entZ))) {
        oldWorld.getChunkFromChunkCoords(entX,entZ).removeEntity(entity);
        oldWorld.getChunkFromChunkCoords(entX,entZ).isModified=true;
      }
      if (onEntityRemoved == null) {
        onEntityRemoved=ReflectionHelper.findMethod(WorldServer.class,oldWorld,new String[]{""String_Node_Str"",""String_Node_Str""},Entity.class);
      }
      if (onEntityRemoved != null) {
        try {
          onEntityRemoved.invoke(oldWorld,entity);
        }
 catch (        Throwable t) {
          AELog.error(t);
        }
      }
      if (player == null) {
        NBTTagCompound entityNBT=new NBTTagCompound();
        entity.posX=link.x;
        entity.posY=link.y;
        entity.posZ=link.z;
        entity.prevPosX=link.x;
        entity.prevPosY=link.y;
        entity.prevPosZ=link.z;
        entity.isDead=false;
        entity.writeToNBTOptional(entityNBT);
        entity.isDead=true;
        entity=EntityList.createEntityFromNBT(entityNBT,newWorld);
      }
      if (entity == null)       return entity;
      newWorld.spawnEntityInWorld(entity);
      entity.setWorld(newWorld);
    }
  }
  entity.worldObj.updateEntityWithOptionalForce(entity,false);
  if (cart != null) {
    if (player != null)     entity.worldObj.updateEntityWithOptionalForce(entity,true);
    entity.mountEntity(cart);
  }
  if (player != null) {
    WorldServer.class.cast(newWorld).getChunkProvider().loadChunk(MathHelper.floor_double(entity.posX) >> 4,MathHelper.floor_double(entity.posZ) >> 4);
  }
  return entity;
}","/** 
 * Mostly from dimentional doors.. which mostly got it form X-Comp.
 * @param world
 * @param entity
 * @param link
 * @return
 */
public Entity teleportEntity(Entity entity,TelDestination link){
  WorldServer oldWorld, newWorld;
  EntityPlayerMP player;
  try {
    oldWorld=(WorldServer)entity.worldObj;
    newWorld=(WorldServer)link.dim;
    player=(entity instanceof EntityPlayerMP) ? (EntityPlayerMP)entity : null;
  }
 catch (  Throwable e) {
    return entity;
  }
  if (oldWorld == null)   return entity;
  if (newWorld == null)   return entity;
  if (entity.riddenByEntity != null) {
    return teleportEntity(entity.riddenByEntity,link);
  }
  Entity cart=entity.ridingEntity;
  if (cart != null) {
    entity.mountEntity(null);
    cart=teleportEntity(cart,link);
  }
  Chunk myChunk=WorldServer.class.cast(newWorld).getChunkProvider().loadChunk(MathHelper.floor_double(link.x) >> 4,MathHelper.floor_double(link.z) >> 4);
  boolean difDest=newWorld != oldWorld;
  if (difDest) {
    if (player != null) {
      player.mcServer.getConfigurationManager().transferPlayerToDimension(player,link.dim.provider.dimensionId,new METeleporter(newWorld,link));
    }
 else {
      int entX=entity.chunkCoordX;
      int entZ=entity.chunkCoordZ;
      if ((entity.addedToChunk) && (oldWorld.getChunkProvider().chunkExists(entX,entZ))) {
        oldWorld.getChunkFromChunkCoords(entX,entZ).removeEntity(entity);
        oldWorld.getChunkFromChunkCoords(entX,entZ).isModified=true;
      }
      Entity newEntity=EntityList.createEntityByName(EntityList.getEntityString(entity),newWorld);
      if (newEntity != null) {
        entity.lastTickPosX=entity.prevPosX=entity.posX=link.x;
        entity.lastTickPosY=entity.prevPosY=entity.posY=link.y;
        entity.lastTickPosZ=entity.prevPosZ=entity.posZ=link.z;
        if (entity instanceof EntityHanging) {
          EntityHanging h=(EntityHanging)entity;
          h.field_146063_b+=link.xOff;
          h.field_146064_c+=link.yOff;
          h.field_146062_d+=link.zOff;
        }
        newEntity.copyDataFrom(entity,true);
        newEntity.dimension=newWorld.provider.dimensionId;
        newEntity.forceSpawn=true;
        entity.isDead=true;
        entity=newEntity;
      }
 else       return null;
      newWorld.spawnEntityInWorld(entity);
    }
  }
  entity.worldObj.updateEntityWithOptionalForce(entity,false);
  if (cart != null) {
    if (player != null)     entity.worldObj.updateEntityWithOptionalForce(entity,true);
    entity.mountEntity(cart);
  }
  return entity;
}"
30623,"TelDestination(World _dim,AxisAlignedBB srcBox,double _x,double _y,double _z){
  dim=_dim;
  x=Math.min(srcBox.maxX - 0.5,Math.max(srcBox.minX + 0.5,_x));
  y=Math.min(srcBox.maxY - 0.5,Math.max(srcBox.minY + 0.5,_y));
  z=Math.min(srcBox.maxZ - 0.5,Math.max(srcBox.minZ + 0.5,_z));
}","TelDestination(World _dim,AxisAlignedBB srcBox,double _x,double _y,double _z,int tileX,int tileY,int tileZ){
  dim=_dim;
  x=Math.min(srcBox.maxX - 0.5,Math.max(srcBox.minX + 0.5,_x + tileX));
  y=Math.min(srcBox.maxY - 0.5,Math.max(srcBox.minY + 0.5,_y + tileY));
  z=Math.min(srcBox.maxZ - 0.5,Math.max(srcBox.minZ + 0.5,_z + tileZ));
  xOff=tileX;
  yOff=tileY;
  zOff=tileZ;
}"
30624,"public void swapRegions(World src,World dst,int x,int y,int z,int i,int j,int k,int scaleX,int scaleY,int scaleZ){
  BlockMatrixFrame blkMF=(BlockMatrixFrame)AEApi.instance().blocks().blockMatrixFrame.block();
  transverseEdges(i - 1,j - 1,k - 1,i + scaleX + 1,j + scaleY + 1,k + scaleZ + 1,new WrapInMatrixFrame(blkMF,0,dst));
  AxisAlignedBB srcBox=AxisAlignedBB.getBoundingBox(x,y,z,x + scaleX + 1,y + scaleY + 1,z + scaleZ + 1);
  AxisAlignedBB dstBox=AxisAlignedBB.getBoundingBox(i,j,k,i + scaleX + 1,j + scaleY + 1,k + scaleZ + 1);
  CachedPlane cDst=new CachedPlane(dst,i,j,k,i + scaleX,j + scaleY,k + scaleZ);
  CachedPlane cSrc=new CachedPlane(src,x,y,z,x + scaleX,y + scaleY,z + scaleZ);
  cSrc.Swap(cDst);
  List<Entity> srcE=src.getEntitiesWithinAABB(Entity.class,srcBox);
  List<Entity> dstE=dst.getEntitiesWithinAABB(Entity.class,dstBox);
  for (  Entity e : dstE) {
    teleportEntity(e,new TelDestination(src,srcBox,e.posX - i + x,e.posY - j + y,e.posZ - k + z));
  }
  for (  Entity e : srcE) {
    teleportEntity(e,new TelDestination(dst,dstBox,e.posX - x + i,e.posY - y + j,e.posZ - z + k));
  }
  for (  WorldCoord wc : cDst.updates)   cDst.wrld.notifyBlockOfNeighborChange(wc.x,wc.y,wc.z,Platform.air);
  for (  WorldCoord wc : cSrc.updates)   cSrc.wrld.notifyBlockOfNeighborChange(wc.x,wc.y,wc.z,Platform.air);
  transverseEdges(x - 1,y - 1,z - 1,x + scaleX + 1,y + scaleY + 1,z + scaleZ + 1,new triggerUpdates(src));
  transverseEdges(i - 1,j - 1,k - 1,i + scaleX + 1,j + scaleY + 1,k + scaleZ + 1,new triggerUpdates(dst));
  transverseEdges(x,y,z,x + scaleX,y + scaleY,z + scaleZ,new triggerUpdates(src));
  transverseEdges(i,j,k,i + scaleX,j + scaleY,k + scaleZ,new triggerUpdates(dst));
}","public void swapRegions(World src,World dst,int x,int y,int z,int i,int j,int k,int scaleX,int scaleY,int scaleZ){
  BlockMatrixFrame blkMF=(BlockMatrixFrame)AEApi.instance().blocks().blockMatrixFrame.block();
  transverseEdges(i - 1,j - 1,k - 1,i + scaleX + 1,j + scaleY + 1,k + scaleZ + 1,new WrapInMatrixFrame(blkMF,0,dst));
  AxisAlignedBB srcBox=AxisAlignedBB.getBoundingBox(x,y,z,x + scaleX + 1,y + scaleY + 1,z + scaleZ + 1);
  AxisAlignedBB dstBox=AxisAlignedBB.getBoundingBox(i,j,k,i + scaleX + 1,j + scaleY + 1,k + scaleZ + 1);
  CachedPlane cDst=new CachedPlane(dst,i,j,k,i + scaleX,j + scaleY,k + scaleZ);
  CachedPlane cSrc=new CachedPlane(src,x,y,z,x + scaleX,y + scaleY,z + scaleZ);
  cSrc.Swap(cDst);
  List<Entity> srcE=src.getEntitiesWithinAABB(Entity.class,srcBox);
  List<Entity> dstE=dst.getEntitiesWithinAABB(Entity.class,dstBox);
  for (  Entity e : dstE) {
    teleportEntity(e,new TelDestination(src,srcBox,e.posX,e.posY,e.posZ,-i + x,-j + y,-k + z));
  }
  for (  Entity e : srcE) {
    teleportEntity(e,new TelDestination(dst,dstBox,e.posX,e.posY,e.posZ,-x + i,-y + j,-z + k));
  }
  for (  WorldCoord wc : cDst.updates)   cDst.wrld.notifyBlockOfNeighborChange(wc.x,wc.y,wc.z,Platform.air);
  for (  WorldCoord wc : cSrc.updates)   cSrc.wrld.notifyBlockOfNeighborChange(wc.x,wc.y,wc.z,Platform.air);
  transverseEdges(x - 1,y - 1,z - 1,x + scaleX + 1,y + scaleY + 1,z + scaleZ + 1,new triggerUpdates(src));
  transverseEdges(i - 1,j - 1,k - 1,i + scaleX + 1,j + scaleY + 1,k + scaleZ + 1,new triggerUpdates(dst));
  transverseEdges(x,y,z,x + scaleX,y + scaleY,z + scaleZ,new triggerUpdates(src));
  transverseEdges(i,j,k,i + scaleX,j + scaleY,k + scaleZ,new triggerUpdates(dst));
}"
30625,"List<PartP2PLiquids> getOutputs(Fluid input){
  List<PartP2PLiquids> outs=new LinkedList<PartP2PLiquids>();
  try {
    for (    PartP2PLiquids l : getOutputs()) {
      IFluidHandler targ=l.getTarget();
      if (targ != null) {
        if (targ.canFill(side.getOpposite(),input))         outs.add(l);
      }
    }
  }
 catch (  GridAccessException e) {
  }
  return outs;
}","List<PartP2PLiquids> getOutputs(Fluid input){
  List<PartP2PLiquids> outs=new LinkedList<PartP2PLiquids>();
  try {
    for (    PartP2PLiquids l : getOutputs()) {
      IFluidHandler targ=l.getTarget();
      if (targ != null) {
        if (targ.canFill(l.side.getOpposite(),input))         outs.add(l);
      }
    }
  }
 catch (  GridAccessException e) {
  }
  return outs;
}"
30626,"private void regenList(NBTTagCompound data){
  byId.clear();
  diList.clear();
  IActionHost host=getActionHost();
  if (host != null) {
    IGridNode agn=host.getActionableNode();
    if (agn.isActive()) {
      for (      IGridNode gn : g.getMachines(TileInterface.class)) {
        IInterfaceHost ih=(IInterfaceHost)gn.getMachine();
        DualityInterface dual=ih.getInterfaceDuality();
        diList.put(ih,new InvTracker(dual,dual.getPatterns(),dual.getTermName()));
      }
      for (      IGridNode gn : g.getMachines(PartInterface.class)) {
        IInterfaceHost ih=(IInterfaceHost)gn.getMachine();
        DualityInterface dual=ih.getInterfaceDuality();
        diList.put(ih,new InvTracker(dual,dual.getPatterns(),dual.getTermName()));
      }
    }
  }
  data.setBoolean(""String_Node_Str"",true);
  for (  Entry<IInterfaceHost,InvTracker> en : diList.entrySet()) {
    InvTracker inv=en.getValue();
    byId.put(inv.which,inv);
    addItems(data,inv,0,inv.server.getSizeInventory());
  }
}","private void regenList(NBTTagCompound data){
  byId.clear();
  diList.clear();
  IActionHost host=getActionHost();
  if (host != null) {
    IGridNode agn=host.getActionableNode();
    if (agn.isActive()) {
      for (      IGridNode gn : g.getMachines(TileInterface.class)) {
        IInterfaceHost ih=(IInterfaceHost)gn.getMachine();
        DualityInterface dual=ih.getInterfaceDuality();
        if (gn.isActive())         diList.put(ih,new InvTracker(dual,dual.getPatterns(),dual.getTermName()));
      }
      for (      IGridNode gn : g.getMachines(PartInterface.class)) {
        IInterfaceHost ih=(IInterfaceHost)gn.getMachine();
        DualityInterface dual=ih.getInterfaceDuality();
        if (gn.isActive())         diList.put(ih,new InvTracker(dual,dual.getPatterns(),dual.getTermName()));
      }
    }
  }
  data.setBoolean(""String_Node_Str"",true);
  for (  Entry<IInterfaceHost,InvTracker> en : diList.entrySet()) {
    InvTracker inv=en.getValue();
    byId.put(inv.which,inv);
    addItems(data,inv,0,inv.server.getSizeInventory());
  }
}"
30627,"public void startJob(){
  GuiBridge OriginalGui=null;
  IActionHost ah=getActionHost();
  if (ah instanceof WirelessTerminalGuiObject)   OriginalGui=GuiBridge.GUI_WIRELESS_TERM;
  if (ah instanceof PartTerminal)   OriginalGui=GuiBridge.GUI_ME;
  if (ah instanceof PartCraftingTerminal)   OriginalGui=GuiBridge.GUI_CRAFTING_TERMINAL;
  if (ah instanceof PartPatternTerminal)   OriginalGui=GuiBridge.GUI_PATTERN_TERMINAL;
  if (result != null && simulation == false) {
    ICraftingGrid cc=getGrid().getCache(ICraftingGrid.class);
    ICraftingLink g=cc.submitJob(result,null,selectedCpu == -1 ? null : cpus.get(selectedCpu).cpu,getActionSrc());
    autoStart=false;
    if (g != null && OriginalGui != null && openContext != null) {
      TileEntity te=openContext.w.getTileEntity(openContext.x,openContext.y,openContext.z);
      Platform.openGUI(invPlayer.player,te,openContext.side,OriginalGui);
    }
  }
}","public void startJob(){
  GuiBridge OriginalGui=null;
  IActionHost ah=getActionHost();
  if (ah instanceof WirelessTerminalGuiObject)   OriginalGui=GuiBridge.GUI_WIRELESS_TERM;
  if (ah instanceof PartTerminal)   OriginalGui=GuiBridge.GUI_ME;
  if (ah instanceof PartCraftingTerminal)   OriginalGui=GuiBridge.GUI_CRAFTING_TERMINAL;
  if (ah instanceof PartPatternTerminal)   OriginalGui=GuiBridge.GUI_PATTERN_TERMINAL;
  if (result != null && simulation == false) {
    ICraftingGrid cc=getGrid().getCache(ICraftingGrid.class);
    ICraftingLink g=cc.submitJob(result,null,selectedCpu == -1 ? null : cpus.get(selectedCpu).cpu,getActionSrc());
    autoStart=false;
    if (g != null && OriginalGui != null && openContext != null) {
      try {
        NetworkHandler.instance.sendTo(new PacketSwitchGuis(OriginalGui),(EntityPlayerMP)invPlayer.player);
      }
 catch (      IOException e) {
      }
      TileEntity te=openContext.w.getTileEntity(openContext.x,openContext.y,openContext.z);
      Platform.openGUI(invPlayer.player,te,openContext.side,OriginalGui);
    }
  }
}"
30628,"public PacketSwitchGuis(GuiBridge newGui) throws IOException {
  this.newGui=newGui;
  AEBaseGui.switchingGuis=true;
  ByteBuf data=Unpooled.buffer();
  data.writeInt(getPacketID());
  data.writeInt(newGui.ordinal());
  configureWrite(data);
}","public PacketSwitchGuis(GuiBridge newGui) throws IOException {
  this.newGui=newGui;
  if (Platform.isClient())   AEBaseGui.switchingGuis=true;
  ByteBuf data=Unpooled.buffer();
  data.writeInt(getPacketID());
  data.writeInt(newGui.ordinal());
  configureWrite(data);
}"
30629,"@Override public void add(T option){
  if (option.isCraftable()) {
    option=(T)option.copy();
    option.setCraftable(false);
  }
  target.add(option);
}","@Override public void add(T option){
  if (option != null && option.isCraftable()) {
    option=(T)option.copy();
    option.setCraftable(false);
  }
  target.add(option);
}"
30630,"private ItemStack findNextColor(ItemStack is,ItemStack anchor,int scrollOffset){
  ItemStack newColor=null;
  IMEInventory<IAEItemStack> inv=AEApi.instance().registries().cell().getCellInventory(is,StorageChannel.ITEMS);
  if (inv != null) {
    IItemList<IAEItemStack> itemList=inv.getAvailableItems(AEApi.instance().storage().createItemList());
    if (anchor == null) {
      IAEItemStack firstItem=itemList.getFirstItem();
      if (firstItem != null)       newColor=firstItem.getItemStack();
    }
 else {
      LinkedList<IAEItemStack> list=new LinkedList<IAEItemStack>();
      for (      IAEItemStack i : itemList)       list.add(i);
      ItemSorters.Direction=SortDir.ASCENDING;
      ItemSorters.init();
      Collections.sort(list,ItemSorters.ConfigBased_SortByName);
      if (list.size() <= 0)       return null;
      IAEItemStack where=list.getFirst();
      int cycles=1 + list.size();
      while (cycles > 0 && !where.equals(anchor)) {
        list.addLast(list.removeFirst());
        cycles--;
        where=list.getFirst();
      }
      if (scrollOffset > 0)       list.addLast(list.removeFirst());
      if (scrollOffset < 0)       list.addFirst(list.removeLast());
      return list.get(0).getItemStack();
    }
  }
  if (newColor != null)   setColor(is,newColor);
  return newColor;
}","private ItemStack findNextColor(ItemStack is,ItemStack anchor,int scrollOffset){
  ItemStack newColor=null;
  IMEInventory<IAEItemStack> inv=AEApi.instance().registries().cell().getCellInventory(is,StorageChannel.ITEMS);
  if (inv != null) {
    IItemList<IAEItemStack> itemList=inv.getAvailableItems(AEApi.instance().storage().createItemList());
    if (anchor == null) {
      IAEItemStack firstItem=itemList.getFirstItem();
      if (firstItem != null)       newColor=firstItem.getItemStack();
    }
 else {
      LinkedList<IAEItemStack> list=new LinkedList<IAEItemStack>();
      for (      IAEItemStack i : itemList)       list.add(i);
      Collections.sort(list,new Comparator<IAEItemStack>(){
        public int compare(        IAEItemStack a,        IAEItemStack b){
          return ItemSorters.compareInt(a.getItemDamage(),b.getItemDamage());
        }
      }
);
      if (list.size() <= 0)       return null;
      IAEItemStack where=list.getFirst();
      int cycles=1 + list.size();
      while (cycles > 0 && !where.equals(anchor)) {
        list.addLast(list.removeFirst());
        cycles--;
        where=list.getFirst();
      }
      if (scrollOffset > 0)       list.addLast(list.removeFirst());
      if (scrollOffset < 0)       list.addFirst(list.removeLast());
      return list.get(0).getItemStack();
    }
  }
  if (newColor != null)   setColor(is,newColor);
  return newColor;
}"
30631,"private boolean canCraft(ICraftingPatternDetails details,IAEItemStack[] condencedInputs){
  for (  IAEItemStack g : condencedInputs) {
    if (details.isCraftable()) {
      boolean found=false;
      for (      IAEItemStack fuzz : inventory.getItemList().findFuzzy(g,FuzzyMode.IGNORE_ALL)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(g.getStackSize());
        IAEItemStack ais=inventory.extractItems(fuzz,Actionable.SIMULATE,machineSrc);
        ItemStack is=ais == null ? null : ais.getItemStack();
        if (is != null && is.stackSize == g.getStackSize()) {
          found=true;
          break;
        }
      }
      if (!found)       return false;
    }
 else {
      IAEItemStack ais=inventory.extractItems(g.copy(),Actionable.SIMULATE,machineSrc);
      ItemStack is=ais == null ? null : ais.getItemStack();
      if (is == null || is.stackSize < g.getStackSize())       return false;
    }
  }
  return true;
}","private boolean canCraft(ICraftingPatternDetails details,IAEItemStack[] condencedInputs){
  for (  IAEItemStack g : condencedInputs) {
    if (details.isCraftable()) {
      boolean found=false;
      for (      IAEItemStack fuzz : inventory.getItemList().findFuzzy(g,FuzzyMode.IGNORE_ALL)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(g.getStackSize());
        IAEItemStack ais=inventory.extractItems(fuzz,Actionable.SIMULATE,machineSrc);
        ItemStack is=ais == null ? null : ais.getItemStack();
        if (is != null && is.stackSize == g.getStackSize()) {
          found=true;
          break;
        }
 else         if (is != null) {
          g=g.copy();
          g.decStackSize(is.stackSize);
        }
      }
      if (!found)       return false;
    }
 else {
      IAEItemStack ais=inventory.extractItems(g.copy(),Actionable.SIMULATE,machineSrc);
      ItemStack is=ais == null ? null : ais.getItemStack();
      if (is == null || is.stackSize < g.getStackSize())       return false;
    }
  }
  return true;
}"
30632,"@Override public void renderItemOverlayIntoGUI(FontRenderer par1FontRenderer,TextureManager par2RenderEngine,ItemStack is,int par4,int par5,String par6Str){
  if (is != null) {
    float ScaleFactor=AEConfig.instance.useTerminalUseLargeFont() ? 0.85f : 0.5f;
    float RScaleFactor=1.0f / ScaleFactor;
    int offset=AEConfig.instance.useTerminalUseLargeFont() ? 0 : -1;
    if (is.isItemDamaged()) {
      int k=(int)Math.round(13.0D - is.getItemDamageForDisplay() * 13.0D / is.getMaxDamage());
      int l=(int)Math.round(255.0D - is.getItemDamageForDisplay() * 255.0D / is.getMaxDamage());
      GL11.glDisable(GL11.GL_LIGHTING);
      GL11.glDisable(GL11.GL_DEPTH_TEST);
      GL11.glDisable(GL11.GL_TEXTURE_2D);
      GL11.glDisable(GL11.GL_BLEND);
      Tessellator tessellator=Tessellator.instance;
      int i1=255 - l << 16 | l << 8;
      int j1=(255 - l) / 4 << 16 | 16128;
      this.renderQuad(tessellator,par4 + 2,par5 + 13,13,2,0);
      this.renderQuad(tessellator,par4 + 2,par5 + 13,12,1,j1);
      this.renderQuad(tessellator,par4 + 2,par5 + 13,k,1,i1);
      GL11.glEnable(GL11.GL_TEXTURE_2D);
      GL11.glEnable(GL11.GL_LIGHTING);
      GL11.glEnable(GL11.GL_DEPTH_TEST);
      GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    }
    if (is.stackSize == 0) {
      String var6=AEConfig.instance.useTerminalUseLargeFont() ? ""String_Node_Str"" : ""String_Node_Str"";
      GL11.glDisable(GL11.GL_LIGHTING);
      GL11.glDisable(GL11.GL_DEPTH_TEST);
      GL11.glPushMatrix();
      GL11.glScaled(ScaleFactor,ScaleFactor,ScaleFactor);
      int X=(int)(((float)par4 + offset + 16.0f - par1FontRenderer.getStringWidth(var6) * ScaleFactor) * RScaleFactor);
      int Y=(int)(((float)par5 + offset + 16.0f - 7.0f * ScaleFactor) * RScaleFactor);
      par1FontRenderer.drawStringWithShadow(var6,X,Y,16777215);
      GL11.glPopMatrix();
      GL11.glEnable(GL11.GL_LIGHTING);
      GL11.glEnable(GL11.GL_DEPTH_TEST);
    }
    long amount=aestack != null ? aestack.getStackSize() : is.stackSize;
    if (amount > 999999999999L)     amount=999999999999L;
    if (amount != 0) {
      String var6=""String_Node_Str"" + Math.abs(amount);
      if (AEConfig.instance.useTerminalUseLargeFont()) {
        if (amount > 999999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 99999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 100000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 99999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 100000.0) + ""String_Node_Str"";
        }
 else         if (amount > 999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000.0) + ""String_Node_Str"";
        }
      }
 else {
        if (amount > 999999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 999999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 9999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000.0) + ""String_Node_Str"";
        }
      }
      GL11.glDisable(GL11.GL_LIGHTING);
      GL11.glDisable(GL11.GL_DEPTH_TEST);
      GL11.glPushMatrix();
      GL11.glScaled(ScaleFactor,ScaleFactor,ScaleFactor);
      int X=(int)(((float)par4 + offset + 16.0f - par1FontRenderer.getStringWidth(var6) * ScaleFactor) * RScaleFactor);
      int Y=(int)(((float)par5 + offset + 16.0f - 7.0f * ScaleFactor) * RScaleFactor);
      par1FontRenderer.drawStringWithShadow(var6,X,Y,16777215);
      GL11.glPopMatrix();
      GL11.glEnable(GL11.GL_LIGHTING);
      GL11.glEnable(GL11.GL_DEPTH_TEST);
    }
  }
}","@Override public void renderItemOverlayIntoGUI(FontRenderer par1FontRenderer,TextureManager par2RenderEngine,ItemStack is,int par4,int par5,String par6Str){
  if (is != null) {
    float ScaleFactor=AEConfig.instance.useTerminalUseLargeFont() ? 0.85f : 0.5f;
    float RScaleFactor=1.0f / ScaleFactor;
    int offset=AEConfig.instance.useTerminalUseLargeFont() ? 0 : -1;
    boolean unicodeFlag=par1FontRenderer.getUnicodeFlag();
    par1FontRenderer.setUnicodeFlag(false);
    if (is.isItemDamaged()) {
      int k=(int)Math.round(13.0D - is.getItemDamageForDisplay() * 13.0D / is.getMaxDamage());
      int l=(int)Math.round(255.0D - is.getItemDamageForDisplay() * 255.0D / is.getMaxDamage());
      GL11.glDisable(GL11.GL_LIGHTING);
      GL11.glDisable(GL11.GL_DEPTH_TEST);
      GL11.glDisable(GL11.GL_TEXTURE_2D);
      GL11.glDisable(GL11.GL_BLEND);
      Tessellator tessellator=Tessellator.instance;
      int i1=255 - l << 16 | l << 8;
      int j1=(255 - l) / 4 << 16 | 16128;
      this.renderQuad(tessellator,par4 + 2,par5 + 13,13,2,0);
      this.renderQuad(tessellator,par4 + 2,par5 + 13,12,1,j1);
      this.renderQuad(tessellator,par4 + 2,par5 + 13,k,1,i1);
      GL11.glEnable(GL11.GL_TEXTURE_2D);
      GL11.glEnable(GL11.GL_LIGHTING);
      GL11.glEnable(GL11.GL_DEPTH_TEST);
      GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
    }
    if (is.stackSize == 0) {
      String var6=AEConfig.instance.useTerminalUseLargeFont() ? ""String_Node_Str"" : ""String_Node_Str"";
      GL11.glDisable(GL11.GL_LIGHTING);
      GL11.glDisable(GL11.GL_DEPTH_TEST);
      GL11.glPushMatrix();
      GL11.glScaled(ScaleFactor,ScaleFactor,ScaleFactor);
      int X=(int)(((float)par4 + offset + 16.0f - par1FontRenderer.getStringWidth(var6) * ScaleFactor) * RScaleFactor);
      int Y=(int)(((float)par5 + offset + 16.0f - 7.0f * ScaleFactor) * RScaleFactor);
      par1FontRenderer.drawStringWithShadow(var6,X,Y,16777215);
      GL11.glPopMatrix();
      GL11.glEnable(GL11.GL_LIGHTING);
      GL11.glEnable(GL11.GL_DEPTH_TEST);
    }
    long amount=aestack != null ? aestack.getStackSize() : is.stackSize;
    if (amount > 999999999999L)     amount=999999999999L;
    if (amount != 0) {
      String var6=""String_Node_Str"" + Math.abs(amount);
      if (AEConfig.instance.useTerminalUseLargeFont()) {
        if (amount > 999999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 99999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 100000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 99999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 100000.0) + ""String_Node_Str"";
        }
 else         if (amount > 999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000.0) + ""String_Node_Str"";
        }
      }
 else {
        if (amount > 999999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 999999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 999999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000000.0) + ""String_Node_Str"";
        }
 else         if (amount > 9999) {
          var6=""String_Node_Str"" + (int)Math.floor(amount / 1000.0) + ""String_Node_Str"";
        }
      }
      GL11.glDisable(GL11.GL_LIGHTING);
      GL11.glDisable(GL11.GL_DEPTH_TEST);
      GL11.glPushMatrix();
      GL11.glScaled(ScaleFactor,ScaleFactor,ScaleFactor);
      int X=(int)(((float)par4 + offset + 16.0f - par1FontRenderer.getStringWidth(var6) * ScaleFactor) * RScaleFactor);
      int Y=(int)(((float)par5 + offset + 16.0f - 7.0f * ScaleFactor) * RScaleFactor);
      par1FontRenderer.drawStringWithShadow(var6,X,Y,16777215);
      GL11.glPopMatrix();
      GL11.glEnable(GL11.GL_LIGHTING);
      GL11.glEnable(GL11.GL_DEPTH_TEST);
    }
    par1FontRenderer.setUnicodeFlag(unicodeFlag);
  }
}"
30633,"@Override public boolean changeColor(AEColor newColor,EntityPlayer who){
  if (getCableColor() != newColor) {
    ItemStack newPart=null;
    if (getCableConnectionType() == AECableType.GLASS)     newPart=AEApi.instance().parts().partCableGlass.stack(newColor,1);
 else     if (getCableConnectionType() == AECableType.COVERED)     newPart=AEApi.instance().parts().partCableCovered.stack(newColor,1);
 else     if (getCableConnectionType() == AECableType.SMART)     newPart=AEApi.instance().parts().partCableSmart.stack(newColor,1);
 else     if (getCableConnectionType() == AECableType.DENSE)     newPart=AEApi.instance().parts().partCableDense.stack(newColor,1);
    boolean hasPermission=true;
    try {
      hasPermission=proxy.getSecurity().hasPermission(who,SecurityPermissions.BUILD);
    }
 catch (    GridAccessException e) {
    }
    if (newPart != null && hasPermission) {
      if (Platform.isClient())       return true;
      getHost().removePart(ForgeDirection.UNKNOWN,false);
      getHost().addPart(newPart,ForgeDirection.UNKNOWN,who);
      return true;
    }
  }
  return false;
}","@Override public boolean changeColor(AEColor newColor,EntityPlayer who){
  if (getCableColor() != newColor) {
    ItemStack newPart=null;
    if (getCableConnectionType() == AECableType.GLASS)     newPart=AEApi.instance().parts().partCableGlass.stack(newColor,1);
 else     if (getCableConnectionType() == AECableType.COVERED)     newPart=AEApi.instance().parts().partCableCovered.stack(newColor,1);
 else     if (getCableConnectionType() == AECableType.SMART)     newPart=AEApi.instance().parts().partCableSmart.stack(newColor,1);
 else     if (getCableConnectionType() == AECableType.DENSE)     newPart=AEApi.instance().parts().partCableDense.stack(newColor,1);
    boolean hasPermission=true;
    try {
      hasPermission=proxy.getSecurity().hasPermission(who,SecurityPermissions.BUILD);
    }
 catch (    GridAccessException e) {
    }
    if (newPart != null && hasPermission) {
      if (Platform.isClient())       return true;
      getHost().removePart(ForgeDirection.UNKNOWN,true);
      getHost().addPart(newPart,ForgeDirection.UNKNOWN,who);
      return true;
    }
  }
  return false;
}"
30634,"public CraftingJob(World w,IGrid grid,BaseActionSource actionSrc,IAEItemStack what,ICraftingCallback callback){
  world=wrapWorld(w);
  output=what.copy();
  storage=AEApi.instance().storage().createItemList();
  prophecies=new HashSet();
  this.actionSrc=actionSrc;
  this.callback=callback;
  ICraftingGrid cc=grid.getCache(ICraftingGrid.class);
  IStorageGrid sg=grid.getCache(IStorageGrid.class);
  original=new MECraftingInventory(sg.getItemInventory(),false,false,false);
  availableCheck=new MECraftingInventory(sg.getItemInventory(),false,false,false);
  tree=getCraftingTree(cc,what);
}","public CraftingJob(World w,IGrid grid,BaseActionSource actionSrc,IAEItemStack what,ICraftingCallback callback){
  world=wrapWorld(w);
  output=what.copy();
  storage=AEApi.instance().storage().createItemList();
  prophecies=new HashSet();
  this.actionSrc=actionSrc;
  this.callback=callback;
  ICraftingGrid cc=grid.getCache(ICraftingGrid.class);
  IStorageGrid sg=grid.getCache(IStorageGrid.class);
  original=new MECraftingInventory(sg.getItemInventory(),false,false,false);
  tree=getCraftingTree(cc,what);
  availableCheck=null;
}"
30635,"@Override public void run(){
  try {
    try {
      TickHandler.instance.registerCraftingSimulation(world,this);
      handlepausing();
      Stopwatch timer=Stopwatch.createStarted();
      MECraftingInventory meci=new MECraftingInventory(original,true,false,true);
      meci.ignore(output);
      tree.request(meci,output.getStackSize(),actionSrc);
      tree.dive(this);
      for (      String s : opsAndMultiplier.keySet()) {
        twoIntegers ti=opsAndMultiplier.get(s);
        AELog.crafting(s + ""String_Node_Str"" + ti.times+ ""String_Node_Str""+ (ti.perOp * ti.times));
      }
      AELog.crafting(""String_Node_Str"" + getByteTotal() + ""String_Node_Str""+ timer.elapsed(TimeUnit.MILLISECONDS)+ ""String_Node_Str"");
    }
 catch (    CraftBranchFailure e) {
      simulate=true;
      try {
        Stopwatch timer=Stopwatch.createStarted();
        MECraftingInventory meci=new MECraftingInventory(original,true,false,true);
        meci.ignore(output);
        tree.setSimulate();
        tree.request(meci,output.getStackSize(),actionSrc);
        tree.dive(this);
        for (        String s : opsAndMultiplier.keySet()) {
          twoIntegers ti=opsAndMultiplier.get(s);
          AELog.crafting(s + ""String_Node_Str"" + ti.times+ ""String_Node_Str""+ (ti.perOp * ti.times));
        }
        AELog.crafting(""String_Node_Str"" + getByteTotal() + ""String_Node_Str""+ timer.elapsed(TimeUnit.MILLISECONDS)+ ""String_Node_Str"");
      }
 catch (      CraftBranchFailure e1) {
        AELog.error(e1);
      }
catch (      CraftingCalculationFailure f) {
        AELog.error(f);
      }
catch (      InterruptedException e1) {
        AELog.crafting(""String_Node_Str"");
        finish();
        return;
      }
    }
catch (    CraftingCalculationFailure f) {
      AELog.error(f);
    }
catch (    InterruptedException e1) {
      AELog.crafting(""String_Node_Str"");
      finish();
      return;
    }
    log(""String_Node_Str"");
  }
 catch (  Throwable t) {
    finish();
    throw new RuntimeException(t);
  }
  finish();
}","@Override public void run(){
  try {
    try {
      TickHandler.instance.registerCraftingSimulation(world,this);
      handlepausing();
      Stopwatch timer=Stopwatch.createStarted();
      MECraftingInventory meci=new MECraftingInventory(original,true,false,true);
      meci.ignore(output);
      availableCheck=new MECraftingInventory(original,false,false,false);
      tree.request(meci,output.getStackSize(),actionSrc);
      tree.dive(this);
      for (      String s : opsAndMultiplier.keySet()) {
        twoIntegers ti=opsAndMultiplier.get(s);
        AELog.crafting(s + ""String_Node_Str"" + ti.times+ ""String_Node_Str""+ (ti.perOp * ti.times));
      }
      AELog.crafting(""String_Node_Str"" + getByteTotal() + ""String_Node_Str""+ timer.elapsed(TimeUnit.MILLISECONDS)+ ""String_Node_Str"");
    }
 catch (    CraftBranchFailure e) {
      simulate=true;
      try {
        Stopwatch timer=Stopwatch.createStarted();
        MECraftingInventory meci=new MECraftingInventory(original,true,false,true);
        meci.ignore(output);
        availableCheck=new MECraftingInventory(original,false,false,false);
        tree.setSimulate();
        tree.request(meci,output.getStackSize(),actionSrc);
        tree.dive(this);
        for (        String s : opsAndMultiplier.keySet()) {
          twoIntegers ti=opsAndMultiplier.get(s);
          AELog.crafting(s + ""String_Node_Str"" + ti.times+ ""String_Node_Str""+ (ti.perOp * ti.times));
        }
        AELog.crafting(""String_Node_Str"" + getByteTotal() + ""String_Node_Str""+ timer.elapsed(TimeUnit.MILLISECONDS)+ ""String_Node_Str"");
      }
 catch (      CraftBranchFailure e1) {
        AELog.error(e1);
      }
catch (      CraftingCalculationFailure f) {
        AELog.error(f);
      }
catch (      InterruptedException e1) {
        AELog.crafting(""String_Node_Str"");
        finish();
        return;
      }
    }
catch (    CraftingCalculationFailure f) {
      AELog.error(f);
    }
catch (    InterruptedException e1) {
      AELog.crafting(""String_Node_Str"");
      finish();
      return;
    }
    log(""String_Node_Str"");
  }
 catch (  Throwable t) {
    finish();
    throw new RuntimeException(t);
  }
  finish();
}"
30636,"public void finish(){
  if (callback != null)   callback.calculationComplete(this);
synchronized (monitor) {
    running=false;
    done=true;
    monitor.notify();
  }
}","public void finish(){
  if (callback != null)   callback.calculationComplete(this);
  availableCheck=null;
synchronized (monitor) {
    running=false;
    done=true;
    monitor.notify();
  }
}"
30637,"public IAEItemStack request(MECraftingInventory inv,long l,BaseActionSource src) throws CraftBranchFailure, InterruptedException {
  job.handlepausing();
  what.setStackSize(l);
  if (slot >= 0 && parent != null && parent.details.isCraftable()) {
    for (    IAEItemStack fuzz : inv.getItemList().findFuzzy(what,FuzzyMode.IGNORE_ALL)) {
      if (parent.details.isValidItemForSlot(slot,fuzz.getItemStack(),world)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(l);
        IAEItemStack available=inv.extractItems(fuzz,Actionable.MODULATE,src);
        if (available != null) {
          if (!exhausted)           used.add(job.checkUse(available));
          bytes+=available.getStackSize();
          l-=available.getStackSize();
          if (l == 0)           return available;
        }
      }
    }
  }
 else {
    IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
    if (available != null) {
      if (!exhausted)       used.add(job.checkUse(available));
      bytes+=available.getStackSize();
      l-=available.getStackSize();
      if (l == 0)       return available;
    }
  }
  exhausted=true;
  if (nodes.size() == 1) {
    CraftingTreeProcess pro=nodes.get(0);
    while (pro.possible && l > 0) {
      pro.request(inv,pro.getTimes(l,pro.getAmountCrafted(what).getStackSize()),src);
      what.setStackSize(l);
      IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
      if (available != null) {
        bytes+=available.getStackSize();
        l-=available.getStackSize();
        if (l <= 0)         return available;
      }
 else       pro.possible=false;
    }
  }
 else   if (nodes.size() > 1) {
    for (    CraftingTreeProcess pro : nodes) {
      try {
        while (pro.possible && l > 0) {
          MECraftingInventory subInv=new MECraftingInventory(inv);
          pro.request(subInv,1,src);
          subInv.commit(src);
          what.setStackSize(l);
          IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
          if (available != null) {
            bytes+=available.getStackSize();
            l-=available.getStackSize();
            if (l <= 0)             return available;
          }
 else           pro.possible=false;
        }
      }
 catch (      CraftBranchFailure fail) {
        pro.possible=true;
      }
    }
  }
  if (sim) {
    missing+=l;
    bytes+=l;
    return what;
  }
  throw new CraftBranchFailure(what,l);
}","public IAEItemStack request(MECraftingInventory inv,long l,BaseActionSource src) throws CraftBranchFailure, InterruptedException {
  job.handlepausing();
  what.setStackSize(l);
  if (slot >= 0 && parent != null && parent.details.isCraftable()) {
    for (    IAEItemStack fuzz : inv.getItemList().findFuzzy(what,FuzzyMode.IGNORE_ALL)) {
      if (parent.details.isValidItemForSlot(slot,fuzz.getItemStack(),world)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(l);
        IAEItemStack available=inv.extractItems(fuzz,Actionable.MODULATE,src);
        if (available != null) {
          if (!exhausted)           used.add(job.checkUse(available));
          bytes+=available.getStackSize();
          l-=available.getStackSize();
          if (l == 0)           return available;
        }
      }
    }
  }
 else {
    IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
    if (available != null) {
      if (!exhausted)       used.add(job.checkUse(available));
      bytes+=available.getStackSize();
      l-=available.getStackSize();
      if (l == 0)       return available;
    }
  }
  exhausted=true;
  if (nodes.size() == 1) {
    CraftingTreeProcess pro=nodes.get(0);
    while (pro.possible && l > 0) {
      pro.request(inv,pro.getTimes(l,pro.getAmountCrafted(what).getStackSize()),src);
      what.setStackSize(l);
      IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
      if (available != null) {
        bytes+=available.getStackSize();
        l-=available.getStackSize();
        if (l <= 0)         return available;
      }
 else       pro.possible=false;
    }
  }
 else   if (nodes.size() > 1) {
    for (    CraftingTreeProcess pro : nodes) {
      try {
        while (pro.possible && l > 0) {
          MECraftingInventory subInv=new MECraftingInventory(inv);
          pro.request(subInv,1,src);
          subInv.commit(src);
          what.setStackSize(l);
          IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
          if (available != null) {
            bytes+=available.getStackSize();
            l-=available.getStackSize();
            if (l <= 0)             return available;
          }
 else           pro.possible=false;
        }
      }
 catch (      CraftBranchFailure fail) {
        pro.possible=true;
      }
    }
  }
  if (sim) {
    missing+=l;
    bytes+=l;
    IAEItemStack rv=what.copy();
    rv.setStackSize(l);
    return rv;
  }
  throw new CraftBranchFailure(what,l);
}"
30638,"@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removed,ItemStack added){
  if (slot == 1) {
    icell=null;
    fcell=null;
    isCached=false;
    try {
      IStorageGrid gs=gridProxy.getStorage();
      Platform.postChanges(gs,removed,added,mySrc);
      gridProxy.getGrid().postEvent(new MENetworkCellArrayUpdate());
    }
 catch (    GridAccessException e) {
    }
    if (worldObj != null) {
      Platform.notifyBlocksOfNeighbors(worldObj,xCoord,yCoord,zCoord);
      markForUpdate();
    }
  }
}","@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removed,ItemStack added){
  if (slot == 1) {
    icell=null;
    fcell=null;
    isCached=false;
    try {
      gridProxy.getGrid().postEvent(new MENetworkCellArrayUpdate());
      IStorageGrid gs=gridProxy.getStorage();
      Platform.postChanges(gs,removed,added,mySrc);
    }
 catch (    GridAccessException e) {
    }
    if (worldObj != null) {
      Platform.notifyBlocksOfNeighbors(worldObj,xCoord,yCoord,zCoord);
      markForUpdate();
    }
  }
}"
30639,"@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removed,ItemStack added){
  isCached=false;
  updateState();
  try {
    IStorageGrid gs=gridProxy.getStorage();
    Platform.postChanges(gs,removed,added,mySrc);
    gridProxy.getGrid().postEvent(new MENetworkCellArrayUpdate());
  }
 catch (  GridAccessException e) {
  }
  markForUpdate();
}","@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removed,ItemStack added){
  isCached=false;
  updateState();
  try {
    gridProxy.getGrid().postEvent(new MENetworkCellArrayUpdate());
    IStorageGrid gs=gridProxy.getStorage();
    Platform.postChanges(gs,removed,added,mySrc);
  }
 catch (  GridAccessException e) {
  }
  markForUpdate();
}"
30640,"public IAEItemStack request(MECraftingInventory inv,long l,BaseActionSource src) throws CraftBranchFailure, InterruptedException {
  job.handlepausing();
  what.setStackSize(l);
  if (slot >= 0 && parent != null && parent.details.isCraftable()) {
    for (    IAEItemStack fuzz : inv.getItemList().findFuzzy(what,FuzzyMode.IGNORE_ALL)) {
      if (parent.details.isValidItemForSlot(slot,fuzz.getItemStack(),world)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(l);
        IAEItemStack available=inv.extractItems(fuzz,Actionable.MODULATE,src);
        if (available != null) {
          if (!exhausted)           used.add(job.checkUse(available));
          bytes+=available.getStackSize();
          l-=available.getStackSize();
          if (l == 0)           return available;
        }
      }
    }
  }
 else {
    IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
    if (available != null) {
      if (!exhausted)       used.add(job.checkUse(available));
      bytes+=available.getStackSize();
      l-=available.getStackSize();
      if (l == 0)       return available;
    }
  }
  exhausted=true;
  if (nodes.size() == 1) {
    CraftingTreeProcess pro=nodes.get(0);
    while (pro.possible && l > 0) {
      pro.request(inv,pro.getTimes(l,pro.getAmountCrafted(what).getStackSize()),src);
      what.setStackSize(l);
      IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
      if (available != null) {
        bytes+=available.getStackSize();
        l-=available.getStackSize();
        if (l <= 0)         return available;
      }
 else       pro.possible=false;
    }
  }
 else   if (nodes.size() > 1) {
    for (    CraftingTreeProcess pro : nodes) {
      try {
        while (pro.possible && l > 0) {
          MECraftingInventory subInv=new MECraftingInventory(inv);
          pro.request(subInv,1,src);
          subInv.commit(src);
          what.setStackSize(l);
          IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
          if (available != null) {
            bytes+=available.getStackSize();
            l-=available.getStackSize();
            if (l <= 0)             return available;
          }
 else           pro.possible=false;
        }
      }
 catch (      CraftBranchFailure fail) {
        pro.possible=true;
      }
    }
  }
  if (sim) {
    missing+=l;
    bytes+=l;
    IAEItemStack rv=what.copy();
    rv.setStackSize(l);
    return rv;
  }
  throw new CraftBranchFailure(what,l);
}","public IAEItemStack request(MECraftingInventory inv,long l,BaseActionSource src) throws CraftBranchFailure, InterruptedException {
  job.handlepausing();
  what.setStackSize(l);
  if (slot >= 0 && parent != null && parent.details.isCraftable()) {
    for (    IAEItemStack fuzz : inv.getItemList().findFuzzy(what,FuzzyMode.IGNORE_ALL)) {
      if (parent.details.isValidItemForSlot(slot,fuzz.getItemStack(),world)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(l);
        IAEItemStack available=inv.extractItems(fuzz,Actionable.MODULATE,src);
        if (available != null) {
          if (!exhausted)           used.add(job.checkUse(available));
          bytes+=available.getStackSize();
          l-=available.getStackSize();
          if (l == 0)           return available;
        }
      }
    }
  }
 else {
    IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
    if (available != null) {
      if (!exhausted)       used.add(job.checkUse(available));
      bytes+=available.getStackSize();
      l-=available.getStackSize();
      if (l == 0)       return available;
    }
  }
  exhausted=true;
  if (nodes.size() == 1) {
    CraftingTreeProcess pro=nodes.get(0);
    while (pro.possible && l > 0) {
      pro.request(inv,pro.getTimes(l,pro.getAmountCrafted(what).getStackSize()),src);
      what.setStackSize(l);
      IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
      if (available != null) {
        bytes+=available.getStackSize();
        l-=available.getStackSize();
        if (l <= 0)         return available;
      }
 else       pro.possible=false;
    }
  }
 else   if (nodes.size() > 1) {
    for (    CraftingTreeProcess pro : nodes) {
      try {
        while (pro.possible && l > 0) {
          MECraftingInventory subInv=new MECraftingInventory(inv,true,true,true);
          pro.request(subInv,1,src);
          subInv.commit(src);
          what.setStackSize(l);
          IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
          if (available != null) {
            bytes+=available.getStackSize();
            l-=available.getStackSize();
            if (l <= 0)             return available;
          }
 else           pro.possible=false;
        }
      }
 catch (      CraftBranchFailure fail) {
        pro.possible=true;
      }
    }
  }
  if (sim) {
    missing+=l;
    bytes+=l;
    IAEItemStack rv=what.copy();
    rv.setStackSize(l);
    return rv;
  }
  throw new CraftBranchFailure(what,l);
}"
30641,"private void updatePatterns(){
  for (  IAEItemStack out : craftableItems.keySet()) {
    out.reset();
    sg.postAlterationOfStoredItems(StorageChannel.ITEMS,out,new BaseActionSource());
  }
  craftingMethods.clear();
  craftableItems.clear();
  for (  ICraftingProvider cp : providers)   cp.provideCrafting(this);
  HashMap<IAEItemStack,Set<ICraftingPatternDetails>> tmpCraft=new HashMap();
  for (  ICraftingPatternDetails details : craftingMethods.keySet()) {
    for (    IAEItemStack out : details.getOutputs()) {
      out=out.copy();
      out.reset();
      out.setCraftable(true);
      Set<ICraftingPatternDetails> methods=tmpCraft.get(out);
      if (methods == null)       tmpCraft.put(out,methods=new TreeSet());
      methods.add(details);
      sg.postAlterationOfStoredItems(StorageChannel.ITEMS,out,new BaseActionSource());
    }
  }
  for (  Entry<IAEItemStack,Set<ICraftingPatternDetails>> e : tmpCraft.entrySet()) {
    craftableItems.put(e.getKey(),ImmutableSet.copyOf(e.getValue()));
  }
}","private void updatePatterns(){
  for (  IAEItemStack out : craftableItems.keySet()) {
    out.reset();
    sg.postAlterationOfStoredItems(StorageChannel.ITEMS,out,new BaseActionSource());
  }
  craftingMethods.clear();
  craftableItems.clear();
  for (  ICraftingProvider cp : providers)   cp.provideCrafting(this);
  HashMap<IAEItemStack,Set<ICraftingPatternDetails>> tmpCraft=new HashMap();
  for (  ICraftingPatternDetails details : craftingMethods.keySet()) {
    for (    IAEItemStack out : details.getOutputs()) {
      out=out.copy();
      out.reset();
      out.setCraftable(true);
      Set<ICraftingPatternDetails> methods=tmpCraft.get(out);
      if (methods == null)       tmpCraft.put(out,methods=new HashSet());
      methods.add(details);
      sg.postAlterationOfStoredItems(StorageChannel.ITEMS,out,new BaseActionSource());
    }
  }
  for (  Entry<IAEItemStack,Set<ICraftingPatternDetails>> e : tmpCraft.entrySet()) {
    craftableItems.put(e.getKey(),ImmutableSet.copyOf(e.getValue()));
  }
}"
30642,"public IAEItemStack request(MECraftingInventory inv,long l,BaseActionSource src) throws CraftBranchFailure, InterruptedException {
  job.handlepausing();
  what.setStackSize(l);
  if (slot >= 0 && parent != null && parent.details.isCraftable()) {
    for (    IAEItemStack fuzz : inv.getItemList().findFuzzy(what,FuzzyMode.IGNORE_ALL)) {
      if (parent.details.isValidItemForSlot(slot,fuzz.getItemStack(),world)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(l);
        IAEItemStack available=inv.extractItems(fuzz,Actionable.MODULATE,src);
        if (available != null) {
          if (!exhausted)           used.add(job.checkUse(available));
          bytes+=available.getStackSize();
          l-=available.getStackSize();
          if (l == 0)           return available;
        }
      }
    }
  }
 else {
    IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
    if (available != null) {
      if (!exhausted)       used.add(job.checkUse(available));
      bytes+=available.getStackSize();
      l-=available.getStackSize();
      if (l == 0)       return available;
    }
  }
  exhausted=true;
  if (nodes.size() == 1) {
    CraftingTreeProcess pro=nodes.get(0);
    while (pro.possible && l > 0) {
      pro.request(inv,pro.getTimes(l,pro.getAmountCrafted(what).getStackSize()),src);
      what.setStackSize(l);
      IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
      if (available != null) {
        bytes+=available.getStackSize();
        l-=available.getStackSize();
        if (l <= 0)         return available;
      }
 else       pro.possible=false;
    }
  }
 else   if (nodes.size() > 1) {
    for (    CraftingTreeProcess pro : nodes) {
      try {
        while (pro.possible && l > 0) {
          MECraftingInventory subInv=new MECraftingInventory(inv,true,true,true);
          pro.request(subInv,1,src);
          subInv.commit(src);
          what.setStackSize(l);
          IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
          if (available != null) {
            bytes+=available.getStackSize();
            l-=available.getStackSize();
            if (l <= 0)             return available;
          }
 else           pro.possible=false;
        }
      }
 catch (      CraftBranchFailure fail) {
        pro.possible=true;
      }
    }
  }
  if (sim) {
    missing+=l;
    bytes+=l;
    IAEItemStack rv=what.copy();
    rv.setStackSize(l);
    return rv;
  }
  throw new CraftBranchFailure(what,l);
}","public IAEItemStack request(MECraftingInventory inv,long l,BaseActionSource src) throws CraftBranchFailure, InterruptedException {
  job.handlepausing();
  List<IAEItemStack> thingsUsed=new LinkedList();
  what.setStackSize(l);
  if (slot >= 0 && parent != null && parent.details.isCraftable()) {
    for (    IAEItemStack fuzz : inv.getItemList().findFuzzy(what,FuzzyMode.IGNORE_ALL)) {
      if (parent.details.isValidItemForSlot(slot,fuzz.getItemStack(),world)) {
        fuzz=fuzz.copy();
        fuzz.setStackSize(l);
        IAEItemStack available=inv.extractItems(fuzz,Actionable.MODULATE,src);
        if (available != null) {
          if (!exhausted) {
            IAEItemStack is=job.checkUse(available);
            thingsUsed.add(is.copy());
            used.add(is);
          }
          bytes+=available.getStackSize();
          l-=available.getStackSize();
          if (l == 0)           return available;
        }
      }
    }
  }
 else {
    IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
    if (available != null) {
      if (!exhausted) {
        IAEItemStack is=job.checkUse(available);
        thingsUsed.add(is.copy());
        used.add(is);
      }
      bytes+=available.getStackSize();
      l-=available.getStackSize();
      if (l == 0)       return available;
    }
  }
  exhausted=true;
  if (nodes.size() == 1) {
    CraftingTreeProcess pro=nodes.get(0);
    while (pro.possible && l > 0) {
      pro.request(inv,pro.getTimes(l,pro.getAmountCrafted(what).getStackSize()),src);
      what.setStackSize(l);
      IAEItemStack available=inv.extractItems(what,Actionable.MODULATE,src);
      if (available != null) {
        bytes+=available.getStackSize();
        l-=available.getStackSize();
        if (l <= 0)         return available;
      }
 else       pro.possible=false;
    }
  }
 else   if (nodes.size() > 1) {
    for (    CraftingTreeProcess pro : nodes) {
      try {
        while (pro.possible && l > 0) {
          MECraftingInventory subInv=new MECraftingInventory(inv,true,true,true);
          pro.request(subInv,1,src);
          what.setStackSize(l);
          IAEItemStack available=subInv.extractItems(what,Actionable.MODULATE,src);
          if (available != null) {
            subInv.commit(src);
            bytes+=available.getStackSize();
            l-=available.getStackSize();
            if (l <= 0)             return available;
          }
 else           pro.possible=false;
        }
      }
 catch (      CraftBranchFailure fail) {
        pro.possible=true;
      }
    }
  }
  if (sim) {
    missing+=l;
    bytes+=l;
    IAEItemStack rv=what.copy();
    rv.setStackSize(l);
    return rv;
  }
  for (  IAEItemStack o : thingsUsed) {
    job.refund(o.copy());
    o.setStackSize(-o.getStackSize());
    used.add(o);
  }
  throw new CraftBranchFailure(what,l);
}"
30643,"public TunnelCollection<PartP2PTunnel> getOutputs(long freq,Class<? extends PartP2PTunnel> c){
  PartP2PTunnel in=inputs.get(freq);
  if (in == null)   return NullColl;
  return inputs.get(freq).getCollection(outputs.get(freq));
}","public TunnelCollection<PartP2PTunnel> getOutputs(long freq,Class<? extends PartP2PTunnel> c){
  PartP2PTunnel in=inputs.get(freq);
  if (in == null)   return NullColl;
  TunnelCollection<PartP2PTunnel> out=inputs.get(freq).getCollection(outputs.get(freq),c);
  if (out == null)   return NullColl;
  return out;
}"
30644,"public void updateFreq(PartP2PTunnel t,long NewFreq){
  outputs.remove(t.freq,t);
  inputs.remove(t.freq);
  t.freq=NewFreq;
  if (t.output)   outputs.put(t.freq,t);
 else   inputs.put(t.freq,t);
  updateTunnel(t.freq,t.output,true);
  updateTunnel(t.freq,!t.output,true);
}","public void updateFreq(PartP2PTunnel t,long NewFreq){
  if (outputs.containsValue(t))   outputs.remove(t.freq,t);
  if (inputs.containsValue(t))   inputs.remove(t.freq);
  t.freq=NewFreq;
  if (t.output)   outputs.put(t.freq,t);
 else   inputs.put(t.freq,t);
  updateTunnel(t.freq,t.output,true);
  updateTunnel(t.freq,!t.output,true);
}"
30645,"public TunnelCollection<T> getCollection(Collection<PartP2PTunnel> collection){
  type.setSource(collection);
  return type;
}","public TunnelCollection<T> getCollection(Collection<PartP2PTunnel> collection,Class<? extends PartP2PTunnel> c){
  if (type.matches(c)) {
    type.setSource(collection);
    return type;
  }
  return null;
}"
30646,"@Override public boolean onPartShiftActivate(EntityPlayer player,Vec3 pos){
  ItemStack is=player.inventory.getCurrentItem();
  if (is != null && is.getItem() instanceof IMemoryCard) {
    IMemoryCard mc=(IMemoryCard)is.getItem();
    NBTTagCompound data=new NBTTagCompound();
    long newFreq=freq;
    output=false;
    if (output || freq == 0) {
      newFreq=System.currentTimeMillis();
      try {
        proxy.getP2P().updateFreq(this,newFreq);
      }
 catch (      GridAccessException e) {
      }
    }
    onTunnelConfigChange();
    ItemStack p2pItem=getItemStack(PartItemStack.Wrench);
    String type=p2pItem.getUnlocalizedName();
    p2pItem.writeToNBT(data);
    data.setLong(""String_Node_Str"",freq);
    mc.setMemoryCardContents(is,type + ""String_Node_Str"",data);
    mc.notifyUser(player,MemoryCardMessages.SETTINGS_SAVED);
    return true;
  }
  return false;
}","@Override public boolean onPartShiftActivate(EntityPlayer player,Vec3 pos){
  ItemStack is=player.inventory.getCurrentItem();
  if (is != null && is.getItem() instanceof IMemoryCard) {
    IMemoryCard mc=(IMemoryCard)is.getItem();
    NBTTagCompound data=new NBTTagCompound();
    long newFreq=freq;
    boolean wasOutput=output;
    output=false;
    if (wasOutput || freq == 0)     newFreq=System.currentTimeMillis();
    try {
      proxy.getP2P().updateFreq(this,newFreq);
    }
 catch (    GridAccessException e) {
    }
    onTunnelConfigChange();
    ItemStack p2pItem=getItemStack(PartItemStack.Wrench);
    String type=p2pItem.getUnlocalizedName();
    p2pItem.writeToNBT(data);
    data.setLong(""String_Node_Str"",freq);
    mc.setMemoryCardContents(is,type + ""String_Node_Str"",data);
    mc.notifyUser(player,MemoryCardMessages.SETTINGS_SAVED);
    return true;
  }
  return false;
}"
30647,"public String getTermName(){
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  String name=((ICustomNameObject)iHost).getCustomName();
  if (name != null)   return name;
  EnumSet<ForgeDirection> possibleDirections=iHost.getTargets();
  for (  ForgeDirection s : possibleDirections) {
    Vec3 from=Vec3.createVectorHelper((double)tile.xCoord + 0.5,(double)tile.yCoord + 0.5,(double)tile.zCoord + 0.5);
    from=from.addVector(s.offsetX * 0.501,s.offsetY * 0.501,s.offsetZ * 0.501);
    Vec3 to=from.addVector(s.offsetX,s.offsetY,s.offsetZ);
    Block blk=w.getBlock(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    MovingObjectPosition mop=w.rayTraceBlocks(from,to,true);
    TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    if (te == null)     continue;
    if (te instanceof IInterfaceHost) {
      try {
        if (((IInterfaceHost)te).getInterfaceDuality().sameGrid(gridProxy.getGrid()))         continue;
      }
 catch (      GridAccessException e) {
        continue;
      }
    }
    Item item=Item.getItemFromBlock(blk);
    if (item == null) {
      return blk.getUnlocalizedName();
    }
    ItemStack what=new ItemStack(item,1,blk.getDamageValue(w,tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ));
    try {
      if (mop != null && !badBlocks.contains(blk)) {
        if (te instanceof ICraftingMachine || InventoryAdaptor.getAdaptor(te,s.getOpposite()) != null) {
          if (te instanceof IInventory && ((IInventory)te).getSizeInventory() == 0)           continue;
          if (te instanceof ISidedInventory && ((ISidedInventory)te).getAccessibleSlotsFromSide(s.getOpposite().ordinal()).length == 0)           continue;
          if (mop.blockX == te.xCoord && mop.blockY == te.yCoord && mop.blockZ == te.zCoord) {
            ItemStack g=blk.getPickBlock(mop,w,te.xCoord,te.yCoord,te.zCoord);
            if (g != null)             what=g;
          }
        }
      }
    }
 catch (    Throwable t) {
      badBlocks.add(blk);
    }
    if (what.getItem() != null)     return what.getUnlocalizedName();
  }
  return ""String_Node_Str"";
}","public String getTermName(){
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  if (((ICustomNameObject)iHost).hasCustomName())   return ((ICustomNameObject)iHost).getCustomName();
  EnumSet<ForgeDirection> possibleDirections=iHost.getTargets();
  for (  ForgeDirection s : possibleDirections) {
    Vec3 from=Vec3.createVectorHelper((double)tile.xCoord + 0.5,(double)tile.yCoord + 0.5,(double)tile.zCoord + 0.5);
    from=from.addVector(s.offsetX * 0.501,s.offsetY * 0.501,s.offsetZ * 0.501);
    Vec3 to=from.addVector(s.offsetX,s.offsetY,s.offsetZ);
    Block blk=w.getBlock(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    MovingObjectPosition mop=w.rayTraceBlocks(from,to,true);
    TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    if (te == null)     continue;
    if (te instanceof IInterfaceHost) {
      try {
        if (((IInterfaceHost)te).getInterfaceDuality().sameGrid(gridProxy.getGrid()))         continue;
      }
 catch (      GridAccessException e) {
        continue;
      }
    }
    Item item=Item.getItemFromBlock(blk);
    if (item == null) {
      return blk.getUnlocalizedName();
    }
    ItemStack what=new ItemStack(item,1,blk.getDamageValue(w,tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ));
    try {
      if (mop != null && !badBlocks.contains(blk)) {
        if (te instanceof ICraftingMachine || InventoryAdaptor.getAdaptor(te,s.getOpposite()) != null) {
          if (te instanceof IInventory && ((IInventory)te).getSizeInventory() == 0)           continue;
          if (te instanceof ISidedInventory && ((ISidedInventory)te).getAccessibleSlotsFromSide(s.getOpposite().ordinal()).length == 0)           continue;
          if (mop.blockX == te.xCoord && mop.blockY == te.yCoord && mop.blockZ == te.zCoord) {
            ItemStack g=blk.getPickBlock(mop,w,te.xCoord,te.yCoord,te.zCoord);
            if (g != null)             what=g;
          }
        }
      }
    }
 catch (    Throwable t) {
      badBlocks.add(blk);
    }
    if (what.getItem() != null)     return what.getUnlocalizedName();
  }
  return ""String_Node_Str"";
}"
30648,"public ToolQuartzAxe(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(Type,AEFeature.QuartzAxe),this,Type.name());
}","public ToolQuartzAxe(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(type=Type,AEFeature.QuartzAxe),this,Type.name());
}"
30649,"public ToolQuartzCuttingKnife(AEFeature type){
  super(ToolQuartzCuttingKnife.class,type.name());
  setfeature(EnumSet.of(type,AEFeature.QuartzKnife));
  setMaxDamage(50);
  setMaxStackSize(1);
}","public ToolQuartzCuttingKnife(AEFeature Type){
  super(ToolQuartzCuttingKnife.class,Type.name());
  setfeature(EnumSet.of(type=Type,AEFeature.QuartzKnife));
  setMaxDamage(50);
  setMaxStackSize(1);
}"
30650,"public ToolQuartzHoe(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(Type,AEFeature.QuartzHoe),this,Type.name());
}","public ToolQuartzHoe(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(type=Type,AEFeature.QuartzHoe),this,Type.name());
}"
30651,"public ToolQuartzPickaxe(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(Type,AEFeature.QuartzPickaxe),this,Type.name());
}","public ToolQuartzPickaxe(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(type=Type,AEFeature.QuartzPickaxe),this,Type.name());
}"
30652,"public ToolQuartzSpade(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(Type,AEFeature.QuartzSpade),this,Type.name());
}","public ToolQuartzSpade(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(type=Type,AEFeature.QuartzSpade),this,Type.name());
}"
30653,"public ToolQuartzSword(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(Type,AEFeature.QuartzSword),this,Type.name());
}","public ToolQuartzSword(AEFeature Type){
  super(ToolMaterial.IRON);
  feature=new AEFeatureHandler(EnumSet.of(type=Type,AEFeature.QuartzSword),this,Type.name());
}"
30654,"public int getStorageBytes(){
switch (worldObj.getBlockMetadata(xCoord,yCoord,zCoord) & 3) {
default :
case 0:
    return 1 * 1024;
case 1:
  return 4 * 1024;
case 2:
return 16 * 1024;
case 3:
return 64 * 1024;
}
}","public int getStorageBytes(){
  if (worldObj == null)   return 0;
switch (worldObj.getBlockMetadata(xCoord,yCoord,zCoord) & 3) {
default :
case 0:
    return 1 * 1024;
case 1:
  return 4 * 1024;
case 2:
return 16 * 1024;
case 3:
return 64 * 1024;
}
}"
30655,"public boolean isAccelerator(){
  return (worldObj.getBlockMetadata(xCoord,yCoord,zCoord) & 3) == 1;
}","public boolean isAccelerator(){
  if (worldObj == null)   return false;
  return (worldObj.getBlockMetadata(xCoord,yCoord,zCoord) & 3) == 1;
}"
30656,"@Override public void onReady(){
  super.onReady();
  updateMultiBlock();
}","@Override public void onReady(){
  super.onReady();
  gridProxy.setVisualRepresentation(getItemFromTile(this));
  updateMultiBlock();
}"
30657,"@Override public boolean onActivated(World w,int x,int y,int z,EntityPlayer p,int side,float hitX,float hitY,float hitZ){
  if (Platform.isClient())   return true;
  TileCraftingTile tg=getTileEntity(w,x,y,z);
  if (tg != null && !p.isSneaking() && tg.isFormed() && tg.isActive()) {
    Platform.openGUI(p,tg,ForgeDirection.getOrientation(side),GuiBridge.GUI_CRAFTING_CPU);
    return true;
  }
  return false;
}","@Override public boolean onActivated(World w,int x,int y,int z,EntityPlayer p,int side,float hitX,float hitY,float hitZ){
  TileCraftingTile tg=getTileEntity(w,x,y,z);
  if (tg != null && !p.isSneaking() && tg.isFormed() && tg.isActive()) {
    if (Platform.isClient())     return true;
    Platform.openGUI(p,tg,ForgeDirection.getOrientation(side),GuiBridge.GUI_CRAFTING_CPU);
    return true;
  }
  return false;
}"
30658,"private boolean handleCrafting(int x,InventoryAdaptor d,IAEItemStack itemStack){
  try {
    if (getInstalledUpgrades(Upgrades.CRAFTING) > 0 && itemStack != null) {
      return craftingTracker.handleCrafting(x,itemStack.getStackSize(),itemStack,d,getTile().getWorldObj(),gridProxy.getGrid(),gridProxy.getCrafting(),mySrc);
    }
  }
 catch (  GridAccessException e) {
  }
  return false;
}","private boolean handleCrafting(int x,InventoryAdaptor d,IAEItemStack itemStack){
  try {
    if (getInstalledUpgrades(Upgrades.CRAFTING) > 0 && itemStack != null) {
      return craftingTracker.handleCrafting(x,itemStack.getStackSize(),itemStack,d,iHost.getTileEntity().getWorldObj(),gridProxy.getGrid(),gridProxy.getCrafting(),mySrc);
    }
  }
 catch (  GridAccessException e) {
  }
  return false;
}"
30659,"private void pushItemsOut(EnumSet<ForgeDirection> possibleDirections){
  if (!hasItemsToSend())   return;
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  Iterator<ItemStack> i=waitingToSend.iterator();
  while (i.hasNext()) {
    ItemStack whatToSend=i.next();
    for (    ForgeDirection s : possibleDirections) {
      TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
      if (te == null)       continue;
      InventoryAdaptor ad=InventoryAdaptor.getAdaptor(te,s.getOpposite());
      if (ad != null) {
        whatToSend=ad.addItems(whatToSend);
        if (whatToSend == null)         break;
      }
    }
    if (whatToSend == null)     i.remove();
 else     whatToSend.stackSize=whatToSend.stackSize;
  }
  if (waitingToSend.isEmpty())   waitingToSend=null;
}","private void pushItemsOut(EnumSet<ForgeDirection> possibleDirections){
  if (!hasItemsToSend())   return;
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  Iterator<ItemStack> i=waitingToSend.iterator();
  while (i.hasNext()) {
    ItemStack whatToSend=i.next();
    for (    ForgeDirection s : possibleDirections) {
      TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
      if (te == null)       continue;
      InventoryAdaptor ad=InventoryAdaptor.getAdaptor(te,s.getOpposite());
      if (ad != null) {
        whatToSend=ad.addItems(whatToSend);
        if (whatToSend == null)         break;
      }
    }
    if (whatToSend == null)     i.remove();
  }
  if (waitingToSend.isEmpty())   waitingToSend=null;
}"
30660,"@Override public boolean pushPattern(ICraftingPatternDetails patternDetails,InventoryCrafting table){
  if (hasItemsToSend())   return false;
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  EnumSet<ForgeDirection> possibleDirections=iHost.getTargets();
  for (  ForgeDirection s : possibleDirections) {
    TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    if (te instanceof ICraftingMachine) {
      ICraftingMachine cm=(ICraftingMachine)te;
      if (cm.acceptsPlans()) {
        if (cm.pushPattern(patternDetails,table,s.getOpposite()))         return true;
        continue;
      }
    }
    InventoryAdaptor ad=InventoryAdaptor.getAdaptor(te,s.getOpposite());
    if (ad != null) {
      for (int x=0; x < table.getSizeInventory(); x++) {
        ItemStack is=table.getStackInSlot(x);
        if (is != null) {
          addToSendList(ad.addItems(is));
        }
      }
      pushItemsOut(possibleDirections);
      return true;
    }
  }
  return false;
}","@Override public boolean pushPattern(ICraftingPatternDetails patternDetails,InventoryCrafting table){
  if (hasItemsToSend())   return false;
  TileEntity tile=iHost.getTileEntity();
  World w=tile.getWorldObj();
  EnumSet<ForgeDirection> possibleDirections=iHost.getTargets();
  for (  ForgeDirection s : possibleDirections) {
    TileEntity te=w.getTileEntity(tile.xCoord + s.offsetX,tile.yCoord + s.offsetY,tile.zCoord + s.offsetZ);
    if (te instanceof ICraftingMachine) {
      ICraftingMachine cm=(ICraftingMachine)te;
      if (cm.acceptsPlans()) {
        if (cm.pushPattern(patternDetails,table,s.getOpposite()))         return true;
        continue;
      }
    }
    InventoryAdaptor ad=InventoryAdaptor.getAdaptor(te,s.getOpposite());
    if (ad != null) {
      if (acceptsItems(ad,table)) {
        for (int x=0; x < table.getSizeInventory(); x++) {
          ItemStack is=table.getStackInSlot(x);
          if (is != null) {
            addToSendList(ad.addItems(is));
          }
        }
        pushItemsOut(possibleDirections);
        return true;
      }
    }
  }
  return false;
}"
30661,"public void readFromNBT(NBTTagCompound data){
  this.waitingToSend=null;
  NBTTagList waitingList=data.getTagList(""String_Node_Str"",10);
  if (waitingList != null) {
    for (int x=0; x < waitingList.tagCount(); x++) {
      NBTTagCompound c=waitingList.getCompoundTagAt(x);
      if (c != null) {
        ItemStack is=ItemStack.loadItemStackFromNBT(c);
        addToSendList(is);
      }
    }
  }
  craftingTracker.readFromNBT(data);
  config.readFromNBT(data,""String_Node_Str"");
  patterns.readFromNBT(data,""String_Node_Str"");
  storage.readFromNBT(data,""String_Node_Str"");
  readConfig();
  updateCraftingList();
}","public void readFromNBT(NBTTagCompound data){
  this.waitingToSend=null;
  NBTTagList waitingList=data.getTagList(""String_Node_Str"",10);
  if (waitingList != null) {
    for (int x=0; x < waitingList.tagCount(); x++) {
      NBTTagCompound c=waitingList.getCompoundTagAt(x);
      if (c != null) {
        ItemStack is=ItemStack.loadItemStackFromNBT(c);
        addToSendList(is);
      }
    }
  }
  craftingTracker.readFromNBT(data);
  upgrades.readFromNBT(data,""String_Node_Str"");
  config.readFromNBT(data,""String_Node_Str"");
  patterns.readFromNBT(data,""String_Node_Str"");
  storage.readFromNBT(data,""String_Node_Str"");
  readConfig();
  updateCraftingList();
}"
30662,"public void writeToNBT(NBTTagCompound data){
  config.writeToNBT(data,""String_Node_Str"");
  patterns.writeToNBT(data,""String_Node_Str"");
  storage.writeToNBT(data,""String_Node_Str"");
  craftingTracker.writeToNBT(data);
  NBTTagList waitingToSend=new NBTTagList();
  if (this.waitingToSend != null) {
    for (    ItemStack is : this.waitingToSend) {
      NBTTagCompound item=new NBTTagCompound();
      is.writeToNBT(item);
      waitingToSend.appendTag(item);
    }
  }
  data.setTag(""String_Node_Str"",waitingToSend);
}","public void writeToNBT(NBTTagCompound data){
  config.writeToNBT(data,""String_Node_Str"");
  patterns.writeToNBT(data,""String_Node_Str"");
  storage.writeToNBT(data,""String_Node_Str"");
  upgrades.writeToNBT(data,""String_Node_Str"");
  craftingTracker.writeToNBT(data);
  NBTTagList waitingToSend=new NBTTagList();
  if (this.waitingToSend != null) {
    for (    ItemStack is : this.waitingToSend) {
      NBTTagCompound item=new NBTTagCompound();
      is.writeToNBT(item);
      waitingToSend.appendTag(item);
    }
  }
  data.setTag(""String_Node_Str"",waitingToSend);
}"
30663,"@Override public void registerIcons(IIconRegister icoRegister){
  for (  MaterialType mat : MaterialType.values()) {
    if (mat.damageValue != -1) {
      String tex=""String_Node_Str"" + nameOf(new ItemStack(this,1,mat.damageValue));
      mat.IIcon=icoRegister.registerIcon(tex);
    }
  }
}","@Override public void registerIcons(IIconRegister icoRegister){
  for (  MaterialType mat : MaterialType.values()) {
    if (mat.damageValue != -1 && mat != MaterialType.InvalidType) {
      String tex=""String_Node_Str"" + nameOf(new ItemStack(this,1,mat.damageValue));
      mat.IIcon=icoRegister.registerIcon(tex);
    }
  }
}"
30664,"@Override public TickRateModulation tickingRequest(IGridNode node,int TicksSinceLastCall){
  if (inv.getStackInSlot(9) != null) {
    pushOut(inv.getStackInSlot(9));
    ejectHeldItems();
    updateSleepyness();
    return isAwake ? TickRateModulation.SLEEP : TickRateModulation.IDLE;
  }
  if (myPlan == null) {
    updateSleepyness();
    return TickRateModulation.SLEEP;
  }
  if (reboot)   TicksSinceLastCall=1;
  reboot=false;
  int speed=10;
switch (upgrades.getInstalledUpgrades(Upgrades.SPEED)) {
case 0:
    progress+=userPower(TicksSinceLastCall,speed=10,1.0);
  break;
case 1:
progress+=userPower(TicksSinceLastCall,speed=13,1.3);
break;
case 2:
progress+=userPower(TicksSinceLastCall,speed=17,1.7);
break;
case 3:
progress+=userPower(TicksSinceLastCall,speed=20,2.0);
break;
case 4:
progress+=userPower(TicksSinceLastCall,speed=25,2.5);
break;
case 5:
progress+=userPower(TicksSinceLastCall,speed=50,5.0);
break;
}
if (progress >= 100) {
for (int x=0; x < craftingInv.getSizeInventory(); x++) craftingInv.setInventorySlotContents(x,inv.getStackInSlot(x));
progress=0;
ItemStack output=myPlan.getOutput(craftingInv,getWorldObj());
if (output != null) {
FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)getWorldObj()),output,craftingInv);
for (int x=0; x < craftingInv.getSizeInventory(); x++) inv.setInventorySlotContents(x,Platform.getContainerItem(craftingInv.getStackInSlot(x)));
pushOut(output.copy());
if (inv.getStackInSlot(10) == null) {
forcePlan=false;
myPlan=null;
}
ejectHeldItems();
try {
TargetPoint where=new TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,32);
IAEItemStack item=AEItemStack.create(output);
NetworkHandler.instance.sendToAllAround(new PacketAssemblerAnimation(xCoord,yCoord,zCoord,(byte)speed,item),where);
}
 catch (IOException e) {
}
updateSleepyness();
return isAwake ? TickRateModulation.SLEEP : TickRateModulation.IDLE;
}
}
return TickRateModulation.FASTER;
}","@Override public TickRateModulation tickingRequest(IGridNode node,int TicksSinceLastCall){
  if (inv.getStackInSlot(9) != null) {
    pushOut(inv.getStackInSlot(9));
    ejectHeldItems();
    updateSleepyness();
    return isAwake ? TickRateModulation.IDLE : TickRateModulation.SLEEP;
  }
  if (myPlan == null) {
    updateSleepyness();
    return TickRateModulation.SLEEP;
  }
  if (reboot)   TicksSinceLastCall=1;
  reboot=false;
  int speed=10;
switch (upgrades.getInstalledUpgrades(Upgrades.SPEED)) {
case 0:
    progress+=userPower(TicksSinceLastCall,speed=10,1.0);
  break;
case 1:
progress+=userPower(TicksSinceLastCall,speed=13,1.3);
break;
case 2:
progress+=userPower(TicksSinceLastCall,speed=17,1.7);
break;
case 3:
progress+=userPower(TicksSinceLastCall,speed=20,2.0);
break;
case 4:
progress+=userPower(TicksSinceLastCall,speed=25,2.5);
break;
case 5:
progress+=userPower(TicksSinceLastCall,speed=50,5.0);
break;
}
if (progress >= 100) {
for (int x=0; x < craftingInv.getSizeInventory(); x++) craftingInv.setInventorySlotContents(x,inv.getStackInSlot(x));
progress=0;
ItemStack output=myPlan.getOutput(craftingInv,getWorldObj());
if (output != null) {
FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)getWorldObj()),output,craftingInv);
pushOut(output.copy());
for (int x=0; x < craftingInv.getSizeInventory(); x++) inv.setInventorySlotContents(x,Platform.getContainerItem(craftingInv.getStackInSlot(x)));
if (inv.getStackInSlot(10) == null) {
forcePlan=false;
myPlan=null;
}
ejectHeldItems();
try {
TargetPoint where=new TargetPoint(worldObj.provider.dimensionId,xCoord,yCoord,zCoord,32);
IAEItemStack item=AEItemStack.create(output);
NetworkHandler.instance.sendToAllAround(new PacketAssemblerAnimation(xCoord,yCoord,zCoord,(byte)speed,item),where);
}
 catch (IOException e) {
}
updateSleepyness();
return isAwake ? TickRateModulation.IDLE : TickRateModulation.SLEEP;
}
}
return TickRateModulation.FASTER;
}"
30665,"@Override public void initGui(){
  super.initGui();
  cancel=new GuiButton(0,this.guiLeft + 163,this.guiTop + ySize - 25,50,20,GuiText.Cancel.getLocal());
  buttonList.add(cancel);
}","@Override public void initGui(){
  super.initGui();
  setScrollBar();
  cancel=new GuiButton(0,this.guiLeft + 163,this.guiTop + ySize - 25,50,20,GuiText.Cancel.getLocal());
  buttonList.add(cancel);
}"
30666,"@Override public boolean alertDevice(IGridNode node){
  TickTracker tt=alertable.get(node);
  if (tt == null)   return false;
  sleeping.remove(node);
  awake.put(node,tt);
  tt.lastTick=tt.lastTick - tt.request.maxTickRate;
  upcomingTicks.add(tt);
  return true;
}","@Override public boolean alertDevice(IGridNode node){
  TickTracker tt=alertable.get(node);
  if (tt == null)   return false;
  sleeping.remove(node);
  awake.put(node,tt);
  tt.lastTick=tt.lastTick - tt.request.maxTickRate;
  tt.current_rate=tt.request.minTickRate;
  upcomingTicks.remove(tt);
  upcomingTicks.add(tt);
  return true;
}"
30667,"public void notifyNeightbors(){
  TileEntity te=iHost.getTileEntity();
  if (te != null && te.getWorldObj() != null) {
  }
}","public void notifyNeightbors(){
  if (gridProxy.isActive()) {
    try {
      gridProxy.getTick().wakeDevice(gridProxy.getNode());
    }
 catch (    GridAccessException e) {
    }
  }
  TileEntity te=iHost.getTileEntity();
  if (te != null && te.getWorldObj() != null) {
  }
}"
30668,"public IAEStack injectItems(IAEStack input,Actionable type,BaseActionSource src){
  if (input instanceof IAEItemStack && type == Actionable.SIMULATE && false) {
    IAEItemStack what=(IAEItemStack)input.copy();
    IAEItemStack is=waitingFor.findPrecise(what);
    if (is != null && is.getStackSize() > 0) {
      if (is.getStackSize() >= what.getStackSize()) {
        if (finalOutput.equals(what)) {
          if (myLastLink != null)           return ((CraftingLink)myLastLink).injectItems((IAEItemStack)what,type);
          return what;
        }
        return null;
      }
      if (finalOutput.equals(what)) {
        if (myLastLink != null)         return ((CraftingLink)myLastLink).injectItems((IAEItemStack)what,type);
        return what;
      }
      IAEItemStack leftOver=what.copy();
      leftOver.decStackSize(is.getStackSize());
      return leftOver;
    }
  }
 else   if (input instanceof IAEItemStack && type == Actionable.MODULATE) {
    IAEItemStack what=(IAEItemStack)input;
    IAEItemStack is=waitingFor.findPrecise(what);
    if (is != null && is.getStackSize() > 0) {
      waiting=false;
      postChange((IAEItemStack)input,src);
      if (is.getStackSize() >= input.getStackSize()) {
        is.decStackSize(input.getStackSize());
        markDirty();
        if (finalOutput.equals(input)) {
          finalOutput.decStackSize(input.getStackSize());
          if (finalOutput.getStackSize() <= 0)           completeJob();
          if (myLastLink != null)           return ((CraftingLink)myLastLink).injectItems((IAEItemStack)input,type);
          return input;
        }
        return inventory.injectItems(what,type,src);
      }
      IAEItemStack insert=what.copy();
      insert.setStackSize(is.getStackSize());
      what.decStackSize(is.getStackSize());
      is.setStackSize(0);
      if (finalOutput.equals(input)) {
        finalOutput.decStackSize(input.getStackSize());
        if (finalOutput.getStackSize() <= 0)         completeJob();
        if (myLastLink != null)         return ((CraftingLink)myLastLink).injectItems((IAEItemStack)input,type);
        return input;
      }
      inventory.injectItems(insert,type,src);
      markDirty();
      return what;
    }
  }
  return input;
}","public IAEStack injectItems(IAEStack input,Actionable type,BaseActionSource src){
  if (input instanceof IAEItemStack && type == Actionable.SIMULATE) {
    IAEItemStack what=(IAEItemStack)input.copy();
    IAEItemStack is=waitingFor.findPrecise(what);
    if (is != null && is.getStackSize() > 0) {
      if (is.getStackSize() >= what.getStackSize()) {
        if (finalOutput.equals(what)) {
          if (myLastLink != null)           return ((CraftingLink)myLastLink).injectItems((IAEItemStack)what.copy(),type);
          return what;
        }
        return null;
      }
      IAEItemStack leftOver=what.copy();
      leftOver.decStackSize(is.getStackSize());
      IAEItemStack used=what.copy();
      used.setStackSize(is.getStackSize());
      if (finalOutput.equals(what)) {
        if (myLastLink != null) {
          leftOver.add(((CraftingLink)myLastLink).injectItems((IAEItemStack)used.copy(),type));
          return leftOver;
        }
        return what;
      }
      return leftOver;
    }
  }
 else   if (input instanceof IAEItemStack && type == Actionable.MODULATE) {
    IAEItemStack what=(IAEItemStack)input;
    IAEItemStack is=waitingFor.findPrecise(what);
    if (is != null && is.getStackSize() > 0) {
      waiting=false;
      postChange((IAEItemStack)input,src);
      if (is.getStackSize() >= input.getStackSize()) {
        is.decStackSize(input.getStackSize());
        markDirty();
        if (finalOutput.equals(input)) {
          finalOutput.decStackSize(input.getStackSize());
          if (finalOutput.getStackSize() <= 0)           completeJob();
          if (myLastLink != null)           return ((CraftingLink)myLastLink).injectItems((IAEItemStack)input,type);
          return input;
        }
        return inventory.injectItems(what,type,src);
      }
      IAEItemStack insert=what.copy();
      insert.setStackSize(is.getStackSize());
      what.decStackSize(is.getStackSize());
      is.setStackSize(0);
      if (finalOutput.equals(insert)) {
        finalOutput.decStackSize(insert.getStackSize());
        if (finalOutput.getStackSize() <= 0)         completeJob();
        if (myLastLink != null) {
          what.add(((CraftingLink)myLastLink).injectItems((IAEItemStack)insert.copy(),type));
          return what;
        }
        if (myLastLink != null)         return ((CraftingLink)myLastLink).injectItems((IAEItemStack)input,type);
        return input;
      }
      inventory.injectItems(insert,type,src);
      markDirty();
      return what;
    }
  }
  return input;
}"
30669,"public void updateCraftingLogic(IGrid grid,IEnergyGrid eg,CraftingGridCache cc){
  if (myLastLink != null) {
    if (myLastLink.isCanceled()) {
      myLastLink=null;
      cancel();
    }
  }
  if (isComplete) {
    if (inventory.getItemList().isEmpty())     return;
    storeItems();
    return;
  }
  waiting=false;
  if (waiting || tasks.isEmpty())   return;
  int remainingOperations=accelerator + 1 + 90;
  boolean didsomething=false;
  for (  Entry<ICraftingPatternDetails,TaskProgress> e : tasks.entrySet()) {
    if (e.getValue().value <= 0)     continue;
    ICraftingPatternDetails details=e.getKey();
    if (canCraft(details,details.getCondencedInputs())) {
      InventoryCrafting ic=null;
      for (      ICraftingMedium m : cc.getMediums(e.getKey())) {
        if (e.getValue().value <= 0)         continue;
        if (!m.isBusy()) {
          if (ic == null) {
            IAEItemStack[] input=details.getInputs();
            double sum=0;
            for (int x=0; x < input.length; x++) {
              if (input[x] != null)               sum+=input[x].getStackSize();
            }
            if (eg.extractAEPower(sum,Actionable.MODULATE,PowerMultiplier.CONFIG) < sum - 0.01)             continue;
            ic=new InventoryCrafting(new ContainerNull(),3,3);
            boolean found=false;
            for (int x=0; x < input.length; x++) {
              if (input[x] != null) {
                found=false;
                if (details.isCraftable()) {
                  for (                  IAEItemStack fuzz : inventory.getItemList().findFuzzy(input[x],FuzzyMode.IGNORE_ALL)) {
                    fuzz=fuzz.copy();
                    fuzz.setStackSize(input[x].getStackSize());
                    IAEItemStack ais=inventory.extractItems(fuzz,Actionable.MODULATE,machineSrc);
                    ItemStack is=ais == null ? null : ais.getItemStack();
                    if (is != null && details.isValidItemForSlot(x,is,getWorld())) {
                      postChange(AEItemStack.create(is),machineSrc);
                      ic.setInventorySlotContents(x,is);
                      found=true;
                      break;
                    }
                  }
                }
 else {
                  IAEItemStack ais=inventory.extractItems(input[x].copy(),Actionable.MODULATE,machineSrc);
                  ItemStack is=ais == null ? null : ais.getItemStack();
                  if (is != null) {
                    postChange(input[x],machineSrc);
                    ic.setInventorySlotContents(x,is);
                    found=true;
                    continue;
                  }
                }
                if (!found)                 break;
              }
            }
            if (!found) {
              for (int x=0; x < ic.getSizeInventory(); x++) {
                ItemStack is=ic.getStackInSlot(x);
                if (is != null)                 inventory.injectItems(AEItemStack.create(is),Actionable.MODULATE,machineSrc);
              }
              ic=null;
              break;
            }
          }
          if (m.pushPattern(details,ic)) {
            didsomething=true;
            remainingOperations--;
            for (            IAEItemStack out : details.getCondencedOutputs()) {
              postChange(out,machineSrc);
              waitingFor.add(out.copy());
            }
            if (details.isCraftable()) {
              FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)getWorld()),details.getOutput(ic,getWorld()),ic);
              for (int x=0; x < ic.getSizeInventory(); x++) {
                ItemStack output=Platform.getContainerItem(ic.getStackInSlot(x));
                if (output != null) {
                  IAEItemStack cItem=AEItemStack.create(output);
                  postChange(cItem,machineSrc);
                  waitingFor.add(cItem);
                }
              }
            }
            ic=null;
            markDirty();
            e.getValue().value--;
            if (e.getValue().value <= 0)             continue;
            if (remainingOperations == 0)             return;
          }
        }
      }
      if (ic != null) {
        for (int x=0; x < ic.getSizeInventory(); x++) {
          ItemStack is=ic.getStackInSlot(x);
          if (is != null) {
            inventory.injectItems(AEItemStack.create(is),Actionable.MODULATE,machineSrc);
          }
        }
      }
    }
  }
  if (remainingOperations > 0 && didsomething == false)   waiting=true;
}","public void updateCraftingLogic(IGrid grid,IEnergyGrid eg,CraftingGridCache cc){
  if (!getCore().isActive())   return;
  if (myLastLink != null) {
    if (myLastLink.isCanceled()) {
      myLastLink=null;
      cancel();
    }
  }
  if (isComplete) {
    if (inventory.getItemList().isEmpty())     return;
    storeItems();
    return;
  }
  waiting=false;
  if (waiting || tasks.isEmpty())   return;
  int remainingOperations=accelerator + 1 + 90;
  boolean didsomething=false;
  Iterator<Entry<ICraftingPatternDetails,TaskProgress>> i=tasks.entrySet().iterator();
  while (i.hasNext()) {
    Entry<ICraftingPatternDetails,TaskProgress> e=i.next();
    if (e.getValue().value <= 0) {
      i.remove();
      continue;
    }
    ICraftingPatternDetails details=e.getKey();
    if (canCraft(details,details.getCondencedInputs())) {
      InventoryCrafting ic=null;
      for (      ICraftingMedium m : cc.getMediums(e.getKey())) {
        if (e.getValue().value <= 0)         continue;
        if (!m.isBusy()) {
          if (ic == null) {
            IAEItemStack[] input=details.getInputs();
            double sum=0;
            for (int x=0; x < input.length; x++) {
              if (input[x] != null)               sum+=input[x].getStackSize();
            }
            if (eg.extractAEPower(sum,Actionable.MODULATE,PowerMultiplier.CONFIG) < sum - 0.01)             continue;
            ic=new InventoryCrafting(new ContainerNull(),3,3);
            boolean found=false;
            for (int x=0; x < input.length; x++) {
              if (input[x] != null) {
                found=false;
                if (details.isCraftable()) {
                  for (                  IAEItemStack fuzz : inventory.getItemList().findFuzzy(input[x],FuzzyMode.IGNORE_ALL)) {
                    fuzz=fuzz.copy();
                    fuzz.setStackSize(input[x].getStackSize());
                    IAEItemStack ais=inventory.extractItems(fuzz,Actionable.MODULATE,machineSrc);
                    ItemStack is=ais == null ? null : ais.getItemStack();
                    if (is != null && details.isValidItemForSlot(x,is,getWorld())) {
                      postChange(AEItemStack.create(is),machineSrc);
                      ic.setInventorySlotContents(x,is);
                      found=true;
                      break;
                    }
                  }
                }
 else {
                  IAEItemStack ais=inventory.extractItems(input[x].copy(),Actionable.MODULATE,machineSrc);
                  ItemStack is=ais == null ? null : ais.getItemStack();
                  if (is != null) {
                    postChange(input[x],machineSrc);
                    ic.setInventorySlotContents(x,is);
                    found=true;
                    continue;
                  }
                }
                if (!found)                 break;
              }
            }
            if (!found) {
              for (int x=0; x < ic.getSizeInventory(); x++) {
                ItemStack is=ic.getStackInSlot(x);
                if (is != null)                 inventory.injectItems(AEItemStack.create(is),Actionable.MODULATE,machineSrc);
              }
              ic=null;
              break;
            }
          }
          if (m.pushPattern(details,ic)) {
            didsomething=true;
            remainingOperations--;
            for (            IAEItemStack out : details.getCondencedOutputs()) {
              postChange(out,machineSrc);
              waitingFor.add(out.copy());
            }
            if (details.isCraftable()) {
              FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)getWorld()),details.getOutput(ic,getWorld()),ic);
              for (int x=0; x < ic.getSizeInventory(); x++) {
                ItemStack output=Platform.getContainerItem(ic.getStackInSlot(x));
                if (output != null) {
                  IAEItemStack cItem=AEItemStack.create(output);
                  postChange(cItem,machineSrc);
                  waitingFor.add(cItem);
                }
              }
            }
            ic=null;
            markDirty();
            e.getValue().value--;
            if (e.getValue().value <= 0)             continue;
            if (remainingOperations == 0)             return;
          }
        }
      }
      if (ic != null) {
        for (int x=0; x < ic.getSizeInventory(); x++) {
          ItemStack is=ic.getStackInSlot(x);
          if (is != null) {
            inventory.injectItems(AEItemStack.create(is),Actionable.MODULATE,machineSrc);
          }
        }
      }
    }
  }
  if (remainingOperations > 0 && didsomething == false)   waiting=true;
}"
30670,"@Override public IAEItemStack injectCratedItems(ICraftingLink link,IAEItemStack items,Actionable mode){
  InventoryAdaptor d=getHandler();
  try {
    if (proxy.isActive()) {
      IEnergyGrid energy=proxy.getEnergy();
      double power=items.getStackSize();
      if (energy.extractAEPower(power,mode,PowerMultiplier.CONFIG) > power - 0.01) {
        if (mode == Actionable.MODULATE)         return AEItemStack.create(d.addItems(items.getItemStack()));
        return AEItemStack.create(d.simulateAdd(items.getItemStack()));
      }
    }
  }
 catch (  GridAccessException e) {
    AELog.error(e);
  }
  return items;
}","@Override public IAEItemStack injectCratedItems(ICraftingLink link,IAEItemStack items,Actionable mode){
  InventoryAdaptor d=getHandler();
  try {
    if (d != null && proxy.isActive()) {
      IEnergyGrid energy=proxy.getEnergy();
      double power=items.getStackSize();
      if (energy.extractAEPower(power,mode,PowerMultiplier.CONFIG) > power - 0.01) {
        if (mode == Actionable.MODULATE)         return AEItemStack.create(d.addItems(items.getItemStack()));
        return AEItemStack.create(d.simulateAdd(items.getItemStack()));
      }
    }
  }
 catch (  GridAccessException e) {
    AELog.error(e);
  }
  return items;
}"
30671,"public IAEItemStack injectItems(IAEItemStack input){
  if (tie == null || tie.req == null || tie.req.req == null)   return input;
  return tie.req.req.injectCratedItems(tie.req,input);
}","public IAEItemStack injectItems(IAEItemStack input,Actionable mode){
  if (tie == null || tie.req == null || tie.req.req == null)   return input;
  return tie.req.req.injectCratedItems(tie.req,input,mode);
}"
30672,"@Override public TickRateModulation tickingRequest(IGridNode node,int TicksSinceLastCall){
  if (hasItemsToSend())   pushItemsOut(EnumSet.allOf(ForgeDirection.class));
  boolean couldDoWork=updateStorage();
  return hasWorkToDo() ? (couldDoWork ? TickRateModulation.URGENT : TickRateModulation.SLOWER) : TickRateModulation.SLEEP;
}","@Override public TickRateModulation tickingRequest(IGridNode node,int TicksSinceLastCall){
  if (!gridProxy.isActive())   return TickRateModulation.SLEEP;
  if (hasItemsToSend())   pushItemsOut(EnumSet.allOf(ForgeDirection.class));
  boolean couldDoWork=updateStorage();
  return hasWorkToDo() ? (couldDoWork ? TickRateModulation.URGENT : TickRateModulation.SLOWER) : TickRateModulation.SLEEP;
}"
30673,"public IAEStack injectItems(IAEStack input,Actionable type,BaseActionSource src){
  if (input instanceof IAEItemStack && type == Actionable.MODULATE) {
    IAEItemStack what=(IAEItemStack)input;
    IAEItemStack is=waitingFor.findPrecise(what);
    if (is != null && is.getStackSize() > 0) {
      waiting=false;
      postChange((IAEItemStack)input,src);
      if (is.getStackSize() >= input.getStackSize()) {
        is.decStackSize(input.getStackSize());
        markDirty();
        if (finalOutput.equals(input)) {
          finalOutput.decStackSize(input.getStackSize());
          if (finalOutput.getStackSize() <= 0)           completeJob();
          if (myLastLink != null)           return ((CraftingLink)myLastLink).injectItems((IAEItemStack)input);
          return input;
        }
        return inventory.injectItems(what,type,src);
      }
      IAEItemStack insert=what.copy();
      insert.setStackSize(is.getStackSize());
      what.decStackSize(is.getStackSize());
      is.setStackSize(0);
      if (finalOutput.equals(input)) {
        finalOutput.decStackSize(input.getStackSize());
        if (finalOutput.getStackSize() <= 0)         completeJob();
        if (myLastLink != null)         return ((CraftingLink)myLastLink).injectItems((IAEItemStack)input);
        return input;
      }
      inventory.injectItems(insert,type,src);
      markDirty();
      return what;
    }
  }
  return input;
}","public IAEStack injectItems(IAEStack input,Actionable type,BaseActionSource src){
  if (input instanceof IAEItemStack && type == Actionable.SIMULATE && false) {
    IAEItemStack what=(IAEItemStack)input.copy();
    IAEItemStack is=waitingFor.findPrecise(what);
    if (is != null && is.getStackSize() > 0) {
      if (is.getStackSize() >= what.getStackSize()) {
        if (finalOutput.equals(what)) {
          if (myLastLink != null)           return ((CraftingLink)myLastLink).injectItems((IAEItemStack)what,type);
          return what;
        }
        return null;
      }
      if (finalOutput.equals(what)) {
        if (myLastLink != null)         return ((CraftingLink)myLastLink).injectItems((IAEItemStack)what,type);
        return what;
      }
      IAEItemStack leftOver=what.copy();
      leftOver.decStackSize(is.getStackSize());
      return leftOver;
    }
  }
 else   if (input instanceof IAEItemStack && type == Actionable.MODULATE) {
    IAEItemStack what=(IAEItemStack)input;
    IAEItemStack is=waitingFor.findPrecise(what);
    if (is != null && is.getStackSize() > 0) {
      waiting=false;
      postChange((IAEItemStack)input,src);
      if (is.getStackSize() >= input.getStackSize()) {
        is.decStackSize(input.getStackSize());
        markDirty();
        if (finalOutput.equals(input)) {
          finalOutput.decStackSize(input.getStackSize());
          if (finalOutput.getStackSize() <= 0)           completeJob();
          if (myLastLink != null)           return ((CraftingLink)myLastLink).injectItems((IAEItemStack)input,type);
          return input;
        }
        return inventory.injectItems(what,type,src);
      }
      IAEItemStack insert=what.copy();
      insert.setStackSize(is.getStackSize());
      what.decStackSize(is.getStackSize());
      is.setStackSize(0);
      if (finalOutput.equals(input)) {
        finalOutput.decStackSize(input.getStackSize());
        if (finalOutput.getStackSize() <= 0)         completeJob();
        if (myLastLink != null)         return ((CraftingLink)myLastLink).injectItems((IAEItemStack)input,type);
        return input;
      }
      inventory.injectItems(insert,type,src);
      markDirty();
      return what;
    }
  }
  return input;
}"
30674,"public void updateCraftingLogic(IGrid grid,IEnergyGrid eg,CraftingGridCache cc){
  if (myLastLink != null) {
    if (myLastLink.isCanceled()) {
      myLastLink=null;
      cancel();
    }
  }
  if (isComplete) {
    if (inventory.getItemList().isEmpty())     return;
    storeItems();
    return;
  }
  waiting=false;
  if (waiting || tasks.isEmpty())   return;
  int remainingOperations=accelerator + 1 + 90;
  boolean didsomething=false;
  for (  Entry<ICraftingPatternDetails,TaskProgress> e : tasks.entrySet()) {
    if (e.getValue().value <= 0)     continue;
    ICraftingPatternDetails details=e.getKey();
    if (canCraft(details,details.getCondencedInputs())) {
      InventoryCrafting ic=null;
      for (      ICraftingMedium m : cc.getMediums(e.getKey())) {
        if (e.getValue().value <= 0)         continue;
        if (!m.isBusy()) {
          if (ic == null) {
            IAEItemStack[] input=details.getInputs();
            double sum=0;
            for (int x=0; x < input.length; x++) {
              if (input[x] != null)               sum+=input[x].getStackSize();
            }
            if (eg.extractAEPower(sum,Actionable.MODULATE,PowerMultiplier.CONFIG) < sum - 0.01)             continue;
            ic=new InventoryCrafting(new ContainerNull(),3,3);
            boolean found=false;
            for (int x=0; x < input.length; x++) {
              if (input[x] != null) {
                found=false;
                if (details.isCraftable()) {
                  for (                  IAEItemStack fuzz : inventory.getItemList().findFuzzy(input[x],FuzzyMode.IGNORE_ALL)) {
                    fuzz=fuzz.copy();
                    fuzz.setStackSize(input[x].getStackSize());
                    IAEItemStack ais=inventory.extractItems(fuzz,Actionable.MODULATE,machineSrc);
                    ItemStack is=ais == null ? null : ais.getItemStack();
                    if (is != null && details.isValidItemForSlot(x,is,getWorld())) {
                      postChange(input[x],machineSrc);
                      ic.setInventorySlotContents(x,is);
                      found=true;
                      break;
                    }
                  }
                }
 else {
                  IAEItemStack ais=inventory.extractItems(input[x].copy(),Actionable.MODULATE,machineSrc);
                  ItemStack is=ais == null ? null : ais.getItemStack();
                  if (is != null) {
                    postChange(input[x],machineSrc);
                    ic.setInventorySlotContents(x,is);
                    found=true;
                    continue;
                  }
                }
                if (!found)                 break;
              }
            }
            if (!found) {
              for (int x=0; x < ic.getSizeInventory(); x++) {
                ItemStack is=ic.getStackInSlot(x);
                if (is != null)                 inventory.injectItems(AEItemStack.create(is),Actionable.MODULATE,machineSrc);
              }
              ic=null;
              break;
            }
          }
          if (m.pushPattern(details,ic)) {
            didsomething=true;
            remainingOperations--;
            for (            IAEItemStack out : details.getCondencedOutputs()) {
              postChange(out,machineSrc);
              waitingFor.add(out.copy());
            }
            if (details.isCraftable()) {
              FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)getWorld()),details.getOutput(ic,getWorld()),ic);
              for (int x=0; x < ic.getSizeInventory(); x++) {
                ItemStack output=Platform.getContainerItem(ic.getStackInSlot(x));
                if (output != null) {
                  IAEItemStack cItem=AEItemStack.create(output);
                  postChange(cItem,machineSrc);
                  waitingFor.add(AEItemStack.create(cItem));
                }
              }
            }
            ic=null;
            markDirty();
            e.getValue().value--;
            if (e.getValue().value <= 0)             continue;
            if (remainingOperations == 0)             return;
          }
        }
      }
      if (ic != null) {
        for (int x=0; x < ic.getSizeInventory(); x++) {
          ItemStack is=ic.getStackInSlot(x);
          if (is != null) {
            inventory.injectItems(AEItemStack.create(is),Actionable.MODULATE,machineSrc);
          }
        }
      }
    }
  }
  if (remainingOperations > 0 && didsomething == false)   waiting=true;
}","public void updateCraftingLogic(IGrid grid,IEnergyGrid eg,CraftingGridCache cc){
  if (myLastLink != null) {
    if (myLastLink.isCanceled()) {
      myLastLink=null;
      cancel();
    }
  }
  if (isComplete) {
    if (inventory.getItemList().isEmpty())     return;
    storeItems();
    return;
  }
  waiting=false;
  if (waiting || tasks.isEmpty())   return;
  int remainingOperations=accelerator + 1 + 90;
  boolean didsomething=false;
  for (  Entry<ICraftingPatternDetails,TaskProgress> e : tasks.entrySet()) {
    if (e.getValue().value <= 0)     continue;
    ICraftingPatternDetails details=e.getKey();
    if (canCraft(details,details.getCondencedInputs())) {
      InventoryCrafting ic=null;
      for (      ICraftingMedium m : cc.getMediums(e.getKey())) {
        if (e.getValue().value <= 0)         continue;
        if (!m.isBusy()) {
          if (ic == null) {
            IAEItemStack[] input=details.getInputs();
            double sum=0;
            for (int x=0; x < input.length; x++) {
              if (input[x] != null)               sum+=input[x].getStackSize();
            }
            if (eg.extractAEPower(sum,Actionable.MODULATE,PowerMultiplier.CONFIG) < sum - 0.01)             continue;
            ic=new InventoryCrafting(new ContainerNull(),3,3);
            boolean found=false;
            for (int x=0; x < input.length; x++) {
              if (input[x] != null) {
                found=false;
                if (details.isCraftable()) {
                  for (                  IAEItemStack fuzz : inventory.getItemList().findFuzzy(input[x],FuzzyMode.IGNORE_ALL)) {
                    fuzz=fuzz.copy();
                    fuzz.setStackSize(input[x].getStackSize());
                    IAEItemStack ais=inventory.extractItems(fuzz,Actionable.MODULATE,machineSrc);
                    ItemStack is=ais == null ? null : ais.getItemStack();
                    if (is != null && details.isValidItemForSlot(x,is,getWorld())) {
                      postChange(AEItemStack.create(is),machineSrc);
                      ic.setInventorySlotContents(x,is);
                      found=true;
                      break;
                    }
                  }
                }
 else {
                  IAEItemStack ais=inventory.extractItems(input[x].copy(),Actionable.MODULATE,machineSrc);
                  ItemStack is=ais == null ? null : ais.getItemStack();
                  if (is != null) {
                    postChange(input[x],machineSrc);
                    ic.setInventorySlotContents(x,is);
                    found=true;
                    continue;
                  }
                }
                if (!found)                 break;
              }
            }
            if (!found) {
              for (int x=0; x < ic.getSizeInventory(); x++) {
                ItemStack is=ic.getStackInSlot(x);
                if (is != null)                 inventory.injectItems(AEItemStack.create(is),Actionable.MODULATE,machineSrc);
              }
              ic=null;
              break;
            }
          }
          if (m.pushPattern(details,ic)) {
            didsomething=true;
            remainingOperations--;
            for (            IAEItemStack out : details.getCondencedOutputs()) {
              postChange(out,machineSrc);
              waitingFor.add(out.copy());
            }
            if (details.isCraftable()) {
              FMLCommonHandler.instance().firePlayerCraftingEvent(Platform.getPlayer((WorldServer)getWorld()),details.getOutput(ic,getWorld()),ic);
              for (int x=0; x < ic.getSizeInventory(); x++) {
                ItemStack output=Platform.getContainerItem(ic.getStackInSlot(x));
                if (output != null) {
                  IAEItemStack cItem=AEItemStack.create(output);
                  postChange(cItem,machineSrc);
                  waitingFor.add(cItem);
                }
              }
            }
            ic=null;
            markDirty();
            e.getValue().value--;
            if (e.getValue().value <= 0)             continue;
            if (remainingOperations == 0)             return;
          }
        }
      }
      if (ic != null) {
        for (int x=0; x < ic.getSizeInventory(); x++) {
          ItemStack is=ic.getStackInSlot(x);
          if (is != null) {
            inventory.injectItems(AEItemStack.create(is),Actionable.MODULATE,machineSrc);
          }
        }
      }
    }
  }
  if (remainingOperations > 0 && didsomething == false)   waiting=true;
}"
30675,"private void completeJob(){
  if (myLastLink != null)   ((CraftingLink)myLastLink).markDone();
  AELog.info(""String_Node_Str"");
  isComplete=true;
}","private void completeJob(){
  if (myLastLink != null)   ((CraftingLink)myLastLink).markDone();
  AELog.crafting(""String_Node_Str"");
  isComplete=true;
}"
30676,"@Override public void initGui(){
  maxRows=getMaxRows();
  perRow=AEConfig.instance.getConfigManager().getSetting(Settings.TERMINAL_STYLE) != TerminalStyle.FULL ? 9 : 9 + ((width - standardSize) / 18);
  boolean hasNEI=AppEng.instance.isIntegrationEnabled(""String_Node_Str"");
  int NEI=hasNEI ? 4 : 0;
  int top=hasNEI ? 22 : 4;
  int magicNumber=114 + 1;
  int extraSpace=height - magicNumber - NEI- top- reservedSpace;
  rows=(int)Math.floor(extraSpace / 18);
  if (rows > maxRows) {
    top+=(rows - maxRows) * 18 / 2;
    rows=maxRows;
  }
  if (hasNEI)   rows--;
  if (rows < 3)   rows=3;
  meSlots.clear();
  for (int y=0; y < rows; y++) {
    for (int x=0; x < perRow; x++) {
      meSlots.add(new InternalSlotME(repo,x + y * perRow,xoffset + x * 18,18 + y * 18));
    }
  }
  if (AEConfig.instance.getConfigManager().getSetting(Settings.TERMINAL_STYLE) != TerminalStyle.FULL)   this.xSize=standardSize + ((perRow - 9) * 18);
 else   this.xSize=standardSize;
  super.initGui();
  this.ySize=magicNumber + rows * 18 + reservedSpace;
  this.guiTop=top;
  int offset=guiTop + 8;
  if (customSortOrder) {
    buttonList.add(SortByBox=new GuiImgButton(this.guiLeft - 18,offset,Settings.SORT_BY,configSrc.getSetting(Settings.SORT_BY)));
    offset+=20;
  }
  if (viewCell || this instanceof GuiWirelessTerm) {
    buttonList.add(ViewBox=new GuiImgButton(this.guiLeft - 18,offset,Settings.VIEW_MODE,configSrc.getSetting(Settings.VIEW_MODE)));
    offset+=20;
  }
  buttonList.add(SortDirBox=new GuiImgButton(this.guiLeft - 18,offset,Settings.SORT_DIRECTION,configSrc.getSetting(Settings.SORT_DIRECTION)));
  offset+=20;
  buttonList.add(searchBoxSettings=new GuiImgButton(this.guiLeft - 18,offset,Settings.SEARCH_MODE,AEConfig.instance.settings.getSetting(Settings.SEARCH_MODE)));
  offset+=20;
  if (!(this instanceof GuiMEPortableCell)) {
    buttonList.add(terminalStyleBox=new GuiImgButton(this.guiLeft - 18,offset,Settings.TERMINAL_STYLE,AEConfig.instance.settings.getSetting(Settings.TERMINAL_STYLE)));
  }
  searchField=new MEGuiTextField(fontRendererObj,this.guiLeft + Math.max(82,xoffset),this.guiTop + 6,89,fontRendererObj.FONT_HEIGHT);
  searchField.setEnableBackgroundDrawing(false);
  searchField.setMaxStringLength(25);
  searchField.setTextColor(0xFFFFFF);
  searchField.setVisible(true);
  Enum setting=AEConfig.instance.settings.getSetting(Settings.SEARCH_MODE);
  searchField.setFocused(SearchBoxMode.AUTOSEARCH == setting || SearchBoxMode.NEI_AUTOSEARCH == setting);
  if (isSubGui()) {
    searchField.setText(memoryText);
    repo.searchString=memoryText;
    repo.updateView();
    setScrollBar();
  }
  for (  Object s : inventorySlots.inventorySlots) {
    if (s instanceof AppEngSlot) {
      if (((AppEngSlot)s).xDisplayPosition < 197)       ((AppEngSlot)s).yDisplayPosition=((AppEngSlot)s).defY + ySize - 78 - 5;
    }
  }
}","@Override public void initGui(){
  maxRows=getMaxRows();
  perRow=AEConfig.instance.getConfigManager().getSetting(Settings.TERMINAL_STYLE) != TerminalStyle.FULL ? 9 : 9 + ((width - standardSize) / 18);
  boolean hasNEI=AppEng.instance.isIntegrationEnabled(""String_Node_Str"");
  int NEI=hasNEI ? 0 : 0;
  int top=hasNEI ? 22 : 0;
  int magicNumber=114 + 1;
  int extraSpace=height - magicNumber - NEI- top- reservedSpace;
  rows=(int)Math.floor(extraSpace / 18);
  if (rows > maxRows) {
    top+=(rows - maxRows) * 18 / 2;
    rows=maxRows;
  }
  if (hasNEI)   rows--;
  if (rows < 3)   rows=3;
  meSlots.clear();
  for (int y=0; y < rows; y++) {
    for (int x=0; x < perRow; x++) {
      meSlots.add(new InternalSlotME(repo,x + y * perRow,xoffset + x * 18,18 + y * 18));
    }
  }
  if (AEConfig.instance.getConfigManager().getSetting(Settings.TERMINAL_STYLE) != TerminalStyle.FULL)   this.xSize=standardSize + ((perRow - 9) * 18);
 else   this.xSize=standardSize;
  super.initGui();
  this.ySize=magicNumber + rows * 18 + reservedSpace;
  int unusedSpace=height - ySize;
  guiTop=(int)Math.floor((float)unusedSpace / (unusedSpace < 0 ? 3.8f : 2.0f));
  int offset=guiTop + 8;
  if (customSortOrder) {
    buttonList.add(SortByBox=new GuiImgButton(this.guiLeft - 18,offset,Settings.SORT_BY,configSrc.getSetting(Settings.SORT_BY)));
    offset+=20;
  }
  if (viewCell || this instanceof GuiWirelessTerm) {
    buttonList.add(ViewBox=new GuiImgButton(this.guiLeft - 18,offset,Settings.VIEW_MODE,configSrc.getSetting(Settings.VIEW_MODE)));
    offset+=20;
  }
  buttonList.add(SortDirBox=new GuiImgButton(this.guiLeft - 18,offset,Settings.SORT_DIRECTION,configSrc.getSetting(Settings.SORT_DIRECTION)));
  offset+=20;
  buttonList.add(searchBoxSettings=new GuiImgButton(this.guiLeft - 18,offset,Settings.SEARCH_MODE,AEConfig.instance.settings.getSetting(Settings.SEARCH_MODE)));
  offset+=20;
  if (!(this instanceof GuiMEPortableCell)) {
    buttonList.add(terminalStyleBox=new GuiImgButton(this.guiLeft - 18,offset,Settings.TERMINAL_STYLE,AEConfig.instance.settings.getSetting(Settings.TERMINAL_STYLE)));
  }
  searchField=new MEGuiTextField(fontRendererObj,this.guiLeft + Math.max(82,xoffset),this.guiTop + 6,89,fontRendererObj.FONT_HEIGHT);
  searchField.setEnableBackgroundDrawing(false);
  searchField.setMaxStringLength(25);
  searchField.setTextColor(0xFFFFFF);
  searchField.setVisible(true);
  Enum setting=AEConfig.instance.settings.getSetting(Settings.SEARCH_MODE);
  searchField.setFocused(SearchBoxMode.AUTOSEARCH == setting || SearchBoxMode.NEI_AUTOSEARCH == setting);
  if (isSubGui()) {
    searchField.setText(memoryText);
    repo.searchString=memoryText;
    repo.updateView();
    setScrollBar();
  }
  for (  Object s : inventorySlots.inventorySlots) {
    if (s instanceof AppEngSlot) {
      if (((AppEngSlot)s).xDisplayPosition < 197)       repositionSlot((AppEngSlot)s);
    }
  }
}"
30677,"public GuiPatternTerm(InventoryPlayer inventoryPlayer,ITerminalHost te){
  super(inventoryPlayer,te,new ContainerPatternTerm(inventoryPlayer,te));
  container=(ContainerPatternTerm)this.inventorySlots;
  reservedSpace=85;
}","public GuiPatternTerm(InventoryPlayer inventoryPlayer,ITerminalHost te){
  super(inventoryPlayer,te,new ContainerPatternTerm(inventoryPlayer,te));
  container=(ContainerPatternTerm)this.inventorySlots;
  reservedSpace=81;
}"
30678,"@Override public void initGui(){
  super.initGui();
  buttonList.add(tabCraftButton=new GuiTabButton(this.guiLeft + 173,this.guiTop + this.ySize - 179,new ItemStack(Blocks.crafting_table),GuiText.CraftingPattern.getLocal(),itemRender));
  buttonList.add(tabProcessButton=new GuiTabButton(this.guiLeft + 173,this.guiTop + this.ySize - 179,new ItemStack(Blocks.furnace),GuiText.ProcessingPattern.getLocal(),itemRender));
  buttonList.add(substitutionsBtn=new GuiImgButton(this.guiLeft + 84,this.guiTop + this.ySize - 163,Settings.ACTIONS,ActionItems.SUBSTITUTION));
  substitutionsBtn.halfSize=true;
  buttonList.add(clearBtn=new GuiImgButton(this.guiLeft + 74,this.guiTop + this.ySize - 163,Settings.ACTIONS,ActionItems.CLOSE));
  clearBtn.halfSize=true;
  buttonList.add(encodeBtn=new GuiImgButton(this.guiLeft + 147,this.guiTop + this.ySize - 144,Settings.ACTIONS,ActionItems.ENCODE));
}","@Override public void initGui(){
  super.initGui();
  buttonList.add(tabCraftButton=new GuiTabButton(this.guiLeft + 173,this.guiTop + this.ySize - 179,new ItemStack(Blocks.crafting_table),GuiText.CraftingPattern.getLocal(),itemRender));
  buttonList.add(tabProcessButton=new GuiTabButton(this.guiLeft + 173,this.guiTop + this.ySize - 179,new ItemStack(Blocks.furnace),GuiText.ProcessingPattern.getLocal(),itemRender));
  buttonList.add(substitutionsBtn=new GuiImgButton(this.guiLeft + 84,this.guiTop + this.ySize - 163,Settings.ACTIONS,ActionItems.SUBSTITUTION));
  substitutionsBtn.halfSize=true;
  buttonList.add(clearBtn=new GuiImgButton(this.guiLeft + 74,this.guiTop + this.ySize - 163,Settings.ACTIONS,ActionItems.CLOSE));
  clearBtn.halfSize=true;
  buttonList.add(encodeBtn=new GuiImgButton(this.guiLeft + 147,this.guiTop + this.ySize - 142,Settings.ACTIONS,ActionItems.ENCODE));
}"
30679,"@Override public void detectAndSendChanges(){
  super.detectAndSendChanges();
  if (Platform.isServer()) {
    if (craftingMode != ct.craftingMode) {
      craftingMode=ct.craftingMode;
      updateOrderOfOutputSlots();
    }
  }
}","@Override public void detectAndSendChanges(){
  super.detectAndSendChanges();
  if (Platform.isServer()) {
    if (craftingMode != ct.isCraftingRecipe()) {
      craftingMode=ct.isCraftingRecipe();
      updateOrderOfOutputSlots();
    }
  }
}"
30680,"@Override public boolean isSlotEnabled(int idx){
  if (idx == 1)   return Platform.isServer() ? ct.craftingMode == false : craftingMode == false;
  if (idx == 2)   return Platform.isServer() ? ct.craftingMode == true : craftingMode == true;
  return false;
}","@Override public boolean isSlotEnabled(int idx){
  if (idx == 1)   return Platform.isServer() ? ct.isCraftingRecipe() == false : craftingMode == false;
  if (idx == 2)   return Platform.isServer() ? ct.isCraftingRecipe() == true : craftingMode == true;
  return false;
}"
30681,"@Override public void serverPacketData(INetworkInfo manager,AppEngPacket packet,EntityPlayer player){
  Container c=player.openContainer;
  if (Name.equals(""String_Node_Str"") && player.getHeldItem() != null && player.getHeldItem().getItem() instanceof IMouseWheelItem) {
    ItemStack is=player.getHeldItem();
    IMouseWheelItem si=(IMouseWheelItem)is.getItem();
    si.onWheel(is,Value.equals(""String_Node_Str""));
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerCraftConfirm) {
    ContainerCraftConfirm qk=(ContainerCraftConfirm)c;
    qk.startJob();
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerCraftingCPU) {
    ContainerCraftingCPU qk=(ContainerCraftingCPU)c;
    qk.cancelCrafting();
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerQuartzKnife) {
    ContainerQuartzKnife qk=(ContainerQuartzKnife)c;
    qk.setName(Value);
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerSecurity) {
    ContainerSecurity sc=(ContainerSecurity)c;
    sc.toggleSetting(Value,player);
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerPriority) {
    ContainerPriority pc=(ContainerPriority)c;
    pc.setPriority(Integer.parseInt(Value),player);
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerLevelEmitter) {
    ContainerLevelEmitter lvc=(ContainerLevelEmitter)c;
    lvc.setLevel(Long.parseLong(Value),player);
    return;
  }
 else   if (Name.startsWith(""String_Node_Str"") && c instanceof ContainerPatternTerm) {
    ContainerPatternTerm cpt=(ContainerPatternTerm)c;
    if (Name.equals(""String_Node_Str"")) {
      cpt.ct.craftingMode=Value.equals(""String_Node_Str"");
    }
 else     if (Name.equals(""String_Node_Str"")) {
      cpt.encode();
    }
 else     if (Name.equals(""String_Node_Str"")) {
      cpt.clear();
    }
  }
 else   if (Name.startsWith(""String_Node_Str"") && c instanceof ContainerStorageBus) {
    ContainerStorageBus ccw=(ContainerStorageBus)c;
    if (Name.equals(""String_Node_Str"")) {
      if (Value.equals(""String_Node_Str"")) {
        ccw.partition();
      }
 else       if (Value.equals(""String_Node_Str"")) {
        ccw.clear();
      }
    }
  }
 else   if (Name.startsWith(""String_Node_Str"") && c instanceof ContainerCellWorkbench) {
    ContainerCellWorkbench ccw=(ContainerCellWorkbench)c;
    if (Name.equals(""String_Node_Str"")) {
      if (Value.equals(""String_Node_Str"")) {
        ccw.nextCopyMode();
      }
 else       if (Value.equals(""String_Node_Str"")) {
        ccw.partition();
      }
 else       if (Value.equals(""String_Node_Str"")) {
        ccw.clear();
      }
    }
 else     if (Name.equals(""String_Node_Str"")) {
      ccw.setFuzzy(FuzzyMode.valueOf(Value));
    }
  }
 else   if (c instanceof IConfigureableObject) {
    IConfigManager cm=((IConfigureableObject)c).getConfigManager();
    for (    Enum e : cm.getSettings()) {
      if (e.name().equals(Name)) {
        Enum def=cm.getSetting(e);
        try {
          cm.putSetting(e,Enum.valueOf(def.getClass(),Value));
        }
 catch (        IllegalArgumentException err) {
        }
        break;
      }
    }
  }
}","@Override public void serverPacketData(INetworkInfo manager,AppEngPacket packet,EntityPlayer player){
  Container c=player.openContainer;
  if (Name.equals(""String_Node_Str"") && player.getHeldItem() != null && player.getHeldItem().getItem() instanceof IMouseWheelItem) {
    ItemStack is=player.getHeldItem();
    IMouseWheelItem si=(IMouseWheelItem)is.getItem();
    si.onWheel(is,Value.equals(""String_Node_Str""));
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerCraftConfirm) {
    ContainerCraftConfirm qk=(ContainerCraftConfirm)c;
    qk.startJob();
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerCraftingCPU) {
    ContainerCraftingCPU qk=(ContainerCraftingCPU)c;
    qk.cancelCrafting();
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerQuartzKnife) {
    ContainerQuartzKnife qk=(ContainerQuartzKnife)c;
    qk.setName(Value);
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerSecurity) {
    ContainerSecurity sc=(ContainerSecurity)c;
    sc.toggleSetting(Value,player);
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerPriority) {
    ContainerPriority pc=(ContainerPriority)c;
    pc.setPriority(Integer.parseInt(Value),player);
    return;
  }
 else   if (Name.equals(""String_Node_Str"") && c instanceof ContainerLevelEmitter) {
    ContainerLevelEmitter lvc=(ContainerLevelEmitter)c;
    lvc.setLevel(Long.parseLong(Value),player);
    return;
  }
 else   if (Name.startsWith(""String_Node_Str"") && c instanceof ContainerPatternTerm) {
    ContainerPatternTerm cpt=(ContainerPatternTerm)c;
    if (Name.equals(""String_Node_Str"")) {
      cpt.ct.setCraftingRecipe(Value.equals(""String_Node_Str""));
    }
 else     if (Name.equals(""String_Node_Str"")) {
      cpt.encode();
    }
 else     if (Name.equals(""String_Node_Str"")) {
      cpt.clear();
    }
  }
 else   if (Name.startsWith(""String_Node_Str"") && c instanceof ContainerStorageBus) {
    ContainerStorageBus ccw=(ContainerStorageBus)c;
    if (Name.equals(""String_Node_Str"")) {
      if (Value.equals(""String_Node_Str"")) {
        ccw.partition();
      }
 else       if (Value.equals(""String_Node_Str"")) {
        ccw.clear();
      }
    }
  }
 else   if (Name.startsWith(""String_Node_Str"") && c instanceof ContainerCellWorkbench) {
    ContainerCellWorkbench ccw=(ContainerCellWorkbench)c;
    if (Name.equals(""String_Node_Str"")) {
      if (Value.equals(""String_Node_Str"")) {
        ccw.nextCopyMode();
      }
 else       if (Value.equals(""String_Node_Str"")) {
        ccw.partition();
      }
 else       if (Value.equals(""String_Node_Str"")) {
        ccw.clear();
      }
    }
 else     if (Name.equals(""String_Node_Str"")) {
      ccw.setFuzzy(FuzzyMode.valueOf(Value));
    }
  }
 else   if (c instanceof IConfigureableObject) {
    IConfigManager cm=((IConfigureableObject)c).getConfigManager();
    for (    Enum e : cm.getSettings()) {
      if (e.name().equals(Name)) {
        Enum def=cm.getSetting(e);
        try {
          cm.putSetting(e,Enum.valueOf(def.getClass(),Value));
        }
 catch (        IllegalArgumentException err) {
        }
        break;
      }
    }
  }
}"
30682,"@Override public void readFromNBT(NBTTagCompound data){
  super.readFromNBT(data);
  craftingMode=data.getBoolean(""String_Node_Str"");
  pattern.readFromNBT(data,""String_Node_Str"");
  output.readFromNBT(data,""String_Node_Str"");
  crafting.readFromNBT(data,""String_Node_Str"");
}","@Override public void readFromNBT(NBTTagCompound data){
  super.readFromNBT(data);
  setCraftingRecipe(data.getBoolean(""String_Node_Str""));
  pattern.readFromNBT(data,""String_Node_Str"");
  output.readFromNBT(data,""String_Node_Str"");
  crafting.readFromNBT(data,""String_Node_Str"");
}"
30683,"@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removedStack,ItemStack newStack){
  host.markForSave();
}","@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removedStack,ItemStack newStack){
  if (inv == pattern && slot == 1) {
    ItemStack is=pattern.getStackInSlot(1);
    if (is != null && is.getItem() instanceof ICraftingPatternItem) {
      ICraftingPatternItem pattern=(ICraftingPatternItem)is.getItem();
      ICraftingPatternDetails details=pattern.getPatternForItem(is,this.getHost().getTile().getWorldObj());
      if (details != null) {
        setCraftingRecipe(details.isCraftable());
        for (int x=0; x < crafting.getSizeInventory() && x < details.getInputs().length; x++) {
          IAEItemStack aeis=details.getInputs()[x];
          crafting.setInventorySlotContents(x,aeis == null ? null : aeis.getItemStack());
        }
        for (int x=0; x < output.getSizeInventory() && x < details.getOutputs().length; x++) {
          IAEItemStack aeis=details.getOutputs()[x];
          output.setInventorySlotContents(x,aeis == null ? null : aeis.getItemStack());
        }
      }
    }
  }
 else   if (inv == crafting) {
    fixCraftingRecipes();
  }
  host.markForSave();
}"
30684,"@Override public void writeToNBT(NBTTagCompound data){
  super.writeToNBT(data);
  data.setBoolean(""String_Node_Str"",craftingMode);
  pattern.writeToNBT(data,""String_Node_Str"");
  output.writeToNBT(data,""String_Node_Str"");
  crafting.writeToNBT(data,""String_Node_Str"");
}","@Override public void writeToNBT(NBTTagCompound data){
  super.writeToNBT(data);
  data.setBoolean(""String_Node_Str"",isCraftingRecipe());
  pattern.writeToNBT(data,""String_Node_Str"");
  output.writeToNBT(data,""String_Node_Str"");
  crafting.writeToNBT(data,""String_Node_Str"");
}"
30685,"@Override public ItemStack onItemRightClick(ItemStack item,World w,EntityPlayer p){
  if (this.getAECurrentPower(item) > 1600) {
    int shots=1;
    CellUpgrades cu=(CellUpgrades)getUpgradesInventory(item);
    if (cu != null)     shots+=cu.getInstalledUpgrades(Upgrades.SPEED);
    IMEInventory inv=AEApi.instance().registries().cell().getCellInventory(item,StorageChannel.ITEMS);
    if (inv != null) {
      IItemList itemList=inv.getAvailableItems(AEApi.instance().storage().createItemList());
      IAEStack aeammo=itemList.getFirstItem();
      if (aeammo instanceof IAEItemStack) {
        shots=Math.min(shots,(int)aeammo.getStackSize());
        for (int sh=0; sh < shots; sh++) {
          extractAEPower(item,1600);
          if (Platform.isClient())           return item;
          aeammo.setStackSize(1);
          ItemStack ammo=((IAEItemStack)aeammo).getItemStack();
          if (ammo == null)           return item;
          ammo.stackSize=1;
          aeammo=inv.extractItems(aeammo,Actionable.MODULATE,new PlayerSource(p,null));
          if (aeammo == null)           return item;
          float f=1.0F;
          float f1=p.prevRotationPitch + (p.rotationPitch - p.prevRotationPitch) * f;
          float f2=p.prevRotationYaw + (p.rotationYaw - p.prevRotationYaw) * f;
          double d0=p.prevPosX + (p.posX - p.prevPosX) * (double)f;
          double d1=p.prevPosY + (p.posY - p.prevPosY) * (double)f + 1.62D - (double)p.yOffset;
          double d2=p.prevPosZ + (p.posZ - p.prevPosZ) * (double)f;
          Vec3 vec3=Vec3.createVectorHelper(d0,d1,d2);
          float f3=MathHelper.cos(-f2 * 0.017453292F - (float)Math.PI);
          float f4=MathHelper.sin(-f2 * 0.017453292F - (float)Math.PI);
          float f5=-MathHelper.cos(-f1 * 0.017453292F);
          float f6=MathHelper.sin(-f1 * 0.017453292F);
          float f7=f4 * f5;
          float f8=f3 * f5;
          double d3=32.0D;
          Vec3 vec31=vec3.addVector((double)f7 * d3,(double)f6 * d3,(double)f8 * d3);
          Vec3 direction=vec3.createVectorHelper((double)f7 * d3,(double)f6 * d3,(double)f8 * d3);
          float penitration=AEApi.instance().registries().matterCannon().getPenetration(ammo);
          if (penitration <= 0) {
            ItemStack type=((IAEItemStack)aeammo).getItemStack();
            if (type.getItem() instanceof ItemBlock) {
            }
 else             if (type.getItem() instanceof ItemPaintBall) {
            }
            return item;
          }
 else {
            standardAmmo(penitration,w,p,vec3,vec31,direction,d0,d1,d2);
          }
        }
      }
 else {
        if (Platform.isServer())         p.addChatMessage(PlayerMessages.AmmoDepleted.get());
        return item;
      }
    }
  }
  return item;
}","@Override public ItemStack onItemRightClick(ItemStack item,World w,EntityPlayer p){
  if (this.getAECurrentPower(item) > 1600) {
    int shots=1;
    CellUpgrades cu=(CellUpgrades)getUpgradesInventory(item);
    if (cu != null)     shots+=cu.getInstalledUpgrades(Upgrades.SPEED);
    IMEInventory inv=AEApi.instance().registries().cell().getCellInventory(item,StorageChannel.ITEMS);
    if (inv != null) {
      IItemList itemList=inv.getAvailableItems(AEApi.instance().storage().createItemList());
      IAEStack aeammo=itemList.getFirstItem();
      if (aeammo instanceof IAEItemStack) {
        shots=Math.min(shots,(int)aeammo.getStackSize());
        for (int sh=0; sh < shots; sh++) {
          extractAEPower(item,1600);
          if (Platform.isClient())           return item;
          aeammo.setStackSize(1);
          ItemStack ammo=((IAEItemStack)aeammo).getItemStack();
          if (ammo == null)           return item;
          ammo.stackSize=1;
          aeammo=inv.extractItems(aeammo,Actionable.MODULATE,new PlayerSource(p,null));
          if (aeammo == null)           return item;
          float f=1.0F;
          float f1=p.prevRotationPitch + (p.rotationPitch - p.prevRotationPitch) * f;
          float f2=p.prevRotationYaw + (p.rotationYaw - p.prevRotationYaw) * f;
          double d0=p.prevPosX + (p.posX - p.prevPosX) * (double)f;
          double d1=p.prevPosY + (p.posY - p.prevPosY) * (double)f + 1.62D - (double)p.yOffset;
          double d2=p.prevPosZ + (p.posZ - p.prevPosZ) * (double)f;
          Vec3 vec3=Vec3.createVectorHelper(d0,d1,d2);
          float f3=MathHelper.cos(-f2 * 0.017453292F - (float)Math.PI);
          float f4=MathHelper.sin(-f2 * 0.017453292F - (float)Math.PI);
          float f5=-MathHelper.cos(-f1 * 0.017453292F);
          float f6=MathHelper.sin(-f1 * 0.017453292F);
          float f7=f4 * f5;
          float f8=f3 * f5;
          double d3=32.0D;
          Vec3 vec31=vec3.addVector((double)f7 * d3,(double)f6 * d3,(double)f8 * d3);
          Vec3 direction=Vec3.createVectorHelper((double)f7 * d3,(double)f6 * d3,(double)f8 * d3);
          float penitration=AEApi.instance().registries().matterCannon().getPenetration(ammo);
          if (penitration <= 0) {
            ItemStack type=((IAEItemStack)aeammo).getItemStack();
            if (type.getItem() instanceof ItemBlock) {
            }
 else             if (type.getItem() instanceof ItemPaintBall) {
            }
            return item;
          }
 else {
            standardAmmo(penitration,w,p,vec3,vec31,direction,d0,d1,d2);
          }
        }
      }
 else {
        if (Platform.isServer())         p.addChatMessage(PlayerMessages.AmmoDepleted.get());
        return item;
      }
    }
  }
  return item;
}"
30686,"public boolean isAccelerator(){
  return worldObj.getBlockMetadata(xCoord,yCoord,zCoord) == 1;
}","public boolean isAccelerator(){
  return (worldObj.getBlockMetadata(xCoord,yCoord,zCoord) & 3) == 1;
}"
30687,"public void gridChanged(){
  try {
    items.setInternal(gridProxy.getStorage().getItemInventory());
    fluids.setInternal(gridProxy.getStorage().getFluidInventory());
  }
 catch (  GridAccessException gae) {
    items.setInternal(new NullInventory());
    fluids.setInternal(new NullInventory());
  }
  TileEntity te=iHost.getTileEntity();
  te.getWorldObj().notifyBlocksOfNeighborChange(te.xCoord,te.yCoord,te.zCoord,Platform.air);
}","public void gridChanged(){
  try {
    items.setInternal(gridProxy.getStorage().getItemInventory());
    fluids.setInternal(gridProxy.getStorage().getFluidInventory());
  }
 catch (  GridAccessException gae) {
    items.setInternal(new NullInventory());
    fluids.setInternal(new NullInventory());
  }
  notifyNeightbors();
}"
30688,"private void readConfig(){
  boolean hadConfig=hasConfig;
  hasConfig=false;
  for (  ItemStack p : config) {
    if (p != null) {
      hasConfig=true;
      break;
    }
  }
  boolean had=hasWorkToDo();
  for (int x=0; x < 8; x++)   updatePlan(x);
  boolean has=hasWorkToDo();
  if (had != has) {
    try {
      if (has)       gridProxy.getTick().alertDevice(gridProxy.getNode());
 else       gridProxy.getTick().sleepDevice(gridProxy.getNode());
    }
 catch (    GridAccessException e) {
    }
  }
  TileEntity te=iHost.getTileEntity();
  if (hadConfig != hasConfig && te != null && te.getWorldObj() != null) {
    te.getWorldObj().notifyBlocksOfNeighborChange(te.xCoord,te.yCoord,te.zCoord,Platform.air);
  }
}","private void readConfig(){
  boolean hadConfig=hasConfig;
  hasConfig=false;
  for (  ItemStack p : config) {
    if (p != null) {
      hasConfig=true;
      break;
    }
  }
  boolean had=hasWorkToDo();
  for (int x=0; x < 8; x++)   updatePlan(x);
  boolean has=hasWorkToDo();
  if (had != has) {
    try {
      if (has)       gridProxy.getTick().alertDevice(gridProxy.getNode());
 else       gridProxy.getTick().sleepDevice(gridProxy.getNode());
    }
 catch (    GridAccessException e) {
    }
  }
  notifyNeightbors();
}"
30689,"public void gridChanged(){
  try {
    items.setInternal(gridProxy.getStorage().getItemInventory());
    fluids.setInternal(gridProxy.getStorage().getFluidInventory());
  }
 catch (  GridAccessException gae) {
    items.setInternal(new NullInventory());
    fluids.setInternal(new NullInventory());
  }
  TileEntity te=iHost.getTileEntity();
  te.getWorldObj().notifyBlocksOfNeighborChange(te.xCoord,te.yCoord,te.zCoord,Platform.air);
}","public void gridChanged(){
  try {
    items.setInternal(gridProxy.getStorage().getItemInventory());
    fluids.setInternal(gridProxy.getStorage().getFluidInventory());
  }
 catch (  GridAccessException gae) {
    items.setInternal(new NullInventory());
    fluids.setInternal(new NullInventory());
  }
  notifyNeightbors();
}"
30690,"private void readConfig(){
  boolean hadConfig=hasConfig;
  hasConfig=false;
  for (  ItemStack p : config) {
    if (p != null) {
      hasConfig=true;
      break;
    }
  }
  boolean had=hasWorkToDo();
  for (int x=0; x < 8; x++)   updatePlan(x);
  boolean has=hasWorkToDo();
  if (had != has) {
    try {
      if (has)       gridProxy.getTick().alertDevice(gridProxy.getNode());
 else       gridProxy.getTick().sleepDevice(gridProxy.getNode());
    }
 catch (    GridAccessException e) {
    }
  }
  TileEntity te=iHost.getTileEntity();
  if (hadConfig != hasConfig && te != null && te.getWorldObj() != null) {
    te.getWorldObj().notifyBlocksOfNeighborChange(te.xCoord,te.yCoord,te.zCoord,Platform.air);
  }
}","private void readConfig(){
  boolean hadConfig=hasConfig;
  hasConfig=false;
  for (  ItemStack p : config) {
    if (p != null) {
      hasConfig=true;
      break;
    }
  }
  boolean had=hasWorkToDo();
  for (int x=0; x < 8; x++)   updatePlan(x);
  boolean has=hasWorkToDo();
  if (had != has) {
    try {
      if (has)       gridProxy.getTick().alertDevice(gridProxy.getNode());
 else       gridProxy.getTick().sleepDevice(gridProxy.getNode());
    }
 catch (    GridAccessException e) {
    }
  }
  notifyNeightbors();
}"
30691,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (player.isSneaking()) {
    if (Platform.isClient())     return false;
    InventoryPlayer pinv=player.inventory;
    IMEInventory<IAEItemStack> inv=AEApi.instance().registries().cell().getCellInventory(stack,StorageChannel.ITEMS);
    if (inv != null && pinv.getCurrentItem() == stack) {
      InventoryAdaptor ia=InventoryAdaptor.getAdaptor(pinv,ForgeDirection.UNKNOWN);
      IItemList<IAEItemStack> list=inv.getAvailableItems(StorageChannel.ITEMS.createList());
      if (list.isEmpty() && ia != null) {
        pinv.setInventorySlotContents(pinv.currentItem,null);
        ItemStack extraA=ia.addItems(AEApi.instance().materials().materialEmptyStorageCell.stack(1));
        ItemStack extraB=ia.addItems(component.stack(1));
        if (extraA != null)         player.dropPlayerItemWithRandomChoice(extraA,false);
        if (extraB != null)         player.dropPlayerItemWithRandomChoice(extraB,false);
        return true;
      }
    }
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (player.isSneaking()) {
    if (Platform.isClient())     return false;
    InventoryPlayer pinv=player.inventory;
    IMEInventory<IAEItemStack> inv=AEApi.instance().registries().cell().getCellInventory(stack,StorageChannel.ITEMS);
    if (inv != null && pinv.getCurrentItem() == stack) {
      InventoryAdaptor ia=InventoryAdaptor.getAdaptor(player,ForgeDirection.UNKNOWN);
      IItemList<IAEItemStack> list=inv.getAvailableItems(StorageChannel.ITEMS.createList());
      if (list.isEmpty() && ia != null) {
        pinv.setInventorySlotContents(pinv.currentItem,null);
        ItemStack extraB=ia.addItems(component.stack(1));
        ItemStack extraA=ia.addItems(AEApi.instance().materials().materialEmptyStorageCell.stack(1));
        if (extraA != null)         player.dropPlayerItemWithRandomChoice(extraA,false);
        if (extraB != null)         player.dropPlayerItemWithRandomChoice(extraB,false);
        if (player.inventoryContainer != null)         player.inventoryContainer.detectAndSendChanges();
        return true;
      }
    }
  }
  return false;
}"
30692,"@Override protected boolean checkHotbarKeys(int p_146983_1_){
  Slot theSlot;
  try {
    theSlot=ObfuscationReflectionHelper.getPrivateValue(GuiContainer.class,this,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Throwable t) {
    return false;
  }
  if (this.mc.thePlayer.inventory.getItemStack() == null && theSlot != null) {
    for (int j=0; j < 9; ++j) {
      if (p_146983_1_ == this.mc.gameSettings.keyBindsHotbar[j].getKeyCode()) {
        if (theSlot.getSlotStackLimit() == 64) {
          this.handleMouseClick(theSlot,theSlot.slotNumber,j,2);
          return true;
        }
 else {
          try {
            for (            Slot s : (List<Slot>)inventorySlots.inventorySlots) {
              if (s.getSlotIndex() == j && s.inventory == ((AEBaseContainer)inventorySlots).getPlayerInv()) {
                NetworkHandler.instance.sendToServer(new PacketSwapSlots(s.slotNumber,theSlot.slotNumber));
                return true;
              }
            }
          }
 catch (          IOException e) {
            AELog.error(e);
          }
        }
      }
    }
  }
  return false;
}","@Override protected boolean checkHotbarKeys(int p_146983_1_){
  Slot theSlot;
  try {
    theSlot=ObfuscationReflectionHelper.getPrivateValue(GuiContainer.class,this,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Throwable t) {
    return false;
  }
  if (this.mc.thePlayer.inventory.getItemStack() == null && theSlot != null) {
    for (int j=0; j < 9; ++j) {
      if (p_146983_1_ == this.mc.gameSettings.keyBindsHotbar[j].getKeyCode()) {
        for (        Slot s : (List<Slot>)inventorySlots.inventorySlots) {
          if (s.getSlotIndex() == j && s.inventory == ((AEBaseContainer)inventorySlots).getPlayerInv()) {
            if (!s.canTakeStack(((AEBaseContainer)inventorySlots).getPlayerInv().player)) {
              return false;
            }
          }
        }
        if (theSlot.getSlotStackLimit() == 64) {
          this.handleMouseClick(theSlot,theSlot.slotNumber,j,2);
          return true;
        }
 else {
          try {
            for (            Slot s : (List<Slot>)inventorySlots.inventorySlots) {
              if (s.getSlotIndex() == j && s.inventory == ((AEBaseContainer)inventorySlots).getPlayerInv()) {
                NetworkHandler.instance.sendToServer(new PacketSwapSlots(s.slotNumber,theSlot.slotNumber));
                return true;
              }
            }
          }
 catch (          IOException e) {
            AELog.error(e);
          }
        }
      }
    }
  }
  return false;
}"
30693,"@Override public void partChanged(){
  if (tile() instanceof TIInventoryTile)   ((TIInventoryTile)tile()).rebuildSlotMap();
  if (world() != null)   world().notifyBlocksOfNeighborChange(x(),y(),z(),Platform.air);
}","@Override public void partChanged(){
  notifyNeighbors();
}"
30694,"@Override public void addNode(IGridNode node,IGridHost machine){
  if (machine instanceof PartP2PTunnel) {
    if (machine instanceof PartP2PTunnelME) {
      if (!node.hasFlag(GridFlags.REQUIRE_CHANNEL))       return;
    }
    PartP2PTunnel t=(PartP2PTunnel)machine;
    if (t.output)     outputs.put(t.freq,t);
 else     inputs.put(t.freq,t);
    updateTunnel(t.freq,!t.output);
  }
}","@Override public void addNode(IGridNode node,IGridHost machine){
  if (machine instanceof PartP2PTunnel) {
    if (machine instanceof PartP2PTunnelME) {
      if (!node.hasFlag(GridFlags.REQUIRE_CHANNEL))       return;
    }
    PartP2PTunnel t=(PartP2PTunnel)machine;
    if (t.output)     outputs.put(t.freq,t);
 else     inputs.put(t.freq,t);
    updateTunnel(t.freq,!t.output,false);
  }
}"
30695,"public void updateFreq(PartP2PTunnel t,long NewFreq){
  outputs.remove(t.freq,t);
  inputs.remove(t.freq);
  t.freq=NewFreq;
  if (t.output)   outputs.put(t.freq,t);
 else   inputs.put(t.freq,t);
  updateTunnel(t.freq,t.output);
  updateTunnel(t.freq,!t.output);
}","public void updateFreq(PartP2PTunnel t,long NewFreq){
  outputs.remove(t.freq,t);
  inputs.remove(t.freq);
  t.freq=NewFreq;
  if (t.output)   outputs.put(t.freq,t);
 else   inputs.put(t.freq,t);
  updateTunnel(t.freq,t.output,true);
  updateTunnel(t.freq,!t.output,true);
}"
30696,"private void updateTunnel(long freq,boolean updateOutputs){
  for (  PartP2PTunnel p : outputs.get(freq))   p.onChange();
  PartP2PTunnel in=inputs.get(freq);
  if (in != null)   in.onChange();
}","private void updateTunnel(long freq,boolean updateOutputs,boolean configChange){
  for (  PartP2PTunnel p : outputs.get(freq)) {
    if (configChange)     p.onTunnelConfigChange();
    p.onTunnelNetworkChange();
  }
  PartP2PTunnel in=inputs.get(freq);
  if (in != null) {
    if (configChange)     in.onTunnelConfigChange();
    in.onTunnelNetworkChange();
  }
}"
30697,"@Override public void removeNode(IGridNode node,IGridHost machine){
  if (machine instanceof PartP2PTunnel) {
    if (machine instanceof PartP2PTunnelME) {
      if (!node.hasFlag(GridFlags.REQUIRE_CHANNEL))       return;
    }
    PartP2PTunnel t=(PartP2PTunnel)machine;
    if (t.output)     outputs.remove(t.freq,t);
 else     inputs.remove(t.freq);
    updateTunnel(t.freq,!t.output);
  }
}","@Override public void removeNode(IGridNode node,IGridHost machine){
  if (machine instanceof PartP2PTunnel) {
    if (machine instanceof PartP2PTunnelME) {
      if (!node.hasFlag(GridFlags.REQUIRE_CHANNEL))       return;
    }
    PartP2PTunnel t=(PartP2PTunnel)machine;
    if (t.output)     outputs.remove(t.freq,t);
 else     inputs.remove(t.freq);
    updateTunnel(t.freq,!t.output,false);
  }
}"
30698,"public void addToWorld(){
  if (inWorld)   return;
  inWorld=true;
  TileEntity te=getTile();
  hasRedstone=te.getWorldObj().isBlockIndirectlyGettingPowered(te.xCoord,te.yCoord,te.zCoord);
  for (int x=6; x >= 0; x--) {
    ForgeDirection s=ForgeDirection.getOrientation(x);
    IPart part=getPart(s);
    if (part != null) {
      part.setPartHostInfo(s,this,te);
      part.addToWorld();
      if (s != ForgeDirection.UNKNOWN) {
        IGridNode sn=part.getGridNode();
        if (sn != null) {
          IPart center=getPart(ForgeDirection.UNKNOWN);
          if (center != null) {
            IGridNode cn=center.getGridNode();
            if (cn != null) {
              try {
                AEApi.instance().createGridConnection(cn,sn);
              }
 catch (              FailedConnection e) {
              }
            }
          }
        }
      }
    }
  }
}","public void addToWorld(){
  if (inWorld)   return;
  inWorld=true;
  TileEntity te=getTile();
  hasRedstone=te.getWorldObj().isBlockIndirectlyGettingPowered(te.xCoord,te.yCoord,te.zCoord);
  for (int x=6; x >= 0; x--) {
    ForgeDirection s=ForgeDirection.getOrientation(x);
    IPart part=getPart(s);
    if (part != null) {
      part.setPartHostInfo(s,this,te);
      part.addToWorld();
      if (s != ForgeDirection.UNKNOWN) {
        IGridNode sn=part.getGridNode();
        if (sn != null) {
          IPart center=getPart(ForgeDirection.UNKNOWN);
          if (center != null) {
            IGridNode cn=center.getGridNode();
            if (cn != null) {
              try {
                AEApi.instance().createGridConnection(cn,sn);
              }
 catch (              FailedConnection e) {
              }
            }
          }
        }
      }
    }
  }
  partChanged();
}"
30699,"public void removeFromWorld(){
  if (!inWorld)   return;
  inWorld=false;
  for (  ForgeDirection s : ForgeDirection.values()) {
    IPart part=getPart(s);
    if (part != null)     part.removeFromWorld();
  }
}","public void removeFromWorld(){
  if (!inWorld)   return;
  inWorld=false;
  for (  ForgeDirection s : ForgeDirection.values()) {
    IPart part=getPart(s);
    if (part != null)     part.removeFromWorld();
  }
  partChanged();
}"
30700,"final private void addToENet(){
  if (getEnergySinkWorld() == null)   return;
  removeFromENet();
  if (!isInIC2() && Platform.isServer()) {
    getLayerFlags().add(LayerFlags.IC2_ENET);
    MinecraftForge.EVENT_BUS.post(new ic2.api.energy.event.EnergyTileLoadEvent((IEnergySink)getEnergySinkTile()));
  }
}","final private void addToENet(){
  if (getEnergySinkWorld() == null)   return;
  removeFromENet();
  if (!isInIC2() && Platform.isServer() && isTileValid()) {
    getLayerFlags().add(LayerFlags.IC2_ENET);
    MinecraftForge.EVENT_BUS.post(new ic2.api.energy.event.EnergyTileLoadEvent((IEnergySink)getEnergySinkTile()));
  }
}"
30701,"final private boolean interestedInIC2(){
  int interested=0;
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    IPart part=getPart(dir);
    if (part instanceof IEnergyTile) {
      interested++;
    }
  }
  return interested == 1;
}","final private boolean interestedInIC2(){
  if (!((IPartHost)this).isInWorld())   return false;
  int interested=0;
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    IPart part=getPart(dir);
    if (part instanceof IEnergyTile) {
      interested++;
    }
  }
  return interested == 1;
}"
30702,"final private void addToENet(){
  if (getEnergySourceWorld() == null)   return;
  removeFromENet();
  if (!isInIC2() && Platform.isServer()) {
    getLayerFlags().add(LayerFlags.IC2_ENET);
    MinecraftForge.EVENT_BUS.post(new ic2.api.energy.event.EnergyTileLoadEvent((IEnergySink)getEnergySourceTile()));
  }
}","final private void addToENet(){
  if (getEnergySourceWorld() == null)   return;
  removeFromENet();
  if (!isInIC2() && Platform.isServer() && isTileValid()) {
    getLayerFlags().add(LayerFlags.IC2_ENET);
    MinecraftForge.EVENT_BUS.post(new ic2.api.energy.event.EnergyTileLoadEvent((IEnergySink)getEnergySourceTile()));
  }
}"
30703,"final private boolean interestedInIC2(){
  int interested=0;
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    IPart part=getPart(dir);
    if (part instanceof IEnergyTile) {
      interested++;
    }
  }
  return interested == 1;
}","final private boolean interestedInIC2(){
  if (!((IPartHost)this).isInWorld())   return false;
  int interested=0;
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    IPart part=getPart(dir);
    if (part instanceof IEnergyTile) {
      interested++;
    }
  }
  return interested == 1;
}"
30704,"@MENetworkEventSubscribe public void changeStateA(MENetworkBootingStatusChange bs){
  if (!output) {
    cachedInv=null;
    int olderSize=oldSize;
    oldSize=getDest().getSizeInventory();
    if (olderSize != oldSize) {
      getHost().partChanged();
      tile.getWorldObj().notifyBlocksOfNeighborChange(tile.xCoord,tile.yCoord,tile.zCoord,Platform.air);
    }
  }
}","@MENetworkEventSubscribe public void changeStateA(MENetworkBootingStatusChange bs){
  if (!output) {
    cachedInv=null;
    int olderSize=oldSize;
    oldSize=getDest().getSizeInventory();
    if (olderSize != oldSize) {
      getHost().notifyNeighbors();
    }
  }
}"
30705,"@MENetworkEventSubscribe public void changeStateB(MENetworkChannelsChanged bs){
  if (!output) {
    cachedInv=null;
    int olderSize=oldSize;
    oldSize=getDest().getSizeInventory();
    if (olderSize != oldSize) {
      getHost().partChanged();
      tile.getWorldObj().notifyBlocksOfNeighborChange(tile.xCoord,tile.yCoord,tile.zCoord,Platform.air);
    }
  }
}","@MENetworkEventSubscribe public void changeStateB(MENetworkChannelsChanged bs){
  if (!output) {
    cachedInv=null;
    int olderSize=oldSize;
    oldSize=getDest().getSizeInventory();
    if (olderSize != oldSize) {
      getHost().notifyNeighbors();
    }
  }
}"
30706,"@Override public void onNeighborChanged(){
  cachedInv=null;
  PartP2PItems input=getInput();
  if (input != null && output)   input.onChange();
}","@Override public void onNeighborChanged(){
  cachedInv=null;
  PartP2PItems input=getInput();
  if (input != null && output)   input.onTunnelNetworkChange();
}"
30707,"@Override public void onNeighborChanged(){
  cachedTank=null;
  if (output) {
    PartP2PLiquids in=getInput();
    if (in != null)     in.onChange();
  }
}","@Override public void onNeighborChanged(){
  cachedTank=null;
  if (output) {
    PartP2PLiquids in=getInput();
    if (in != null)     in.onTunnelNetworkChange();
  }
}"
30708,"@Override public boolean onPartActivate(EntityPlayer player,Vec3 pos){
  ItemStack is=player.inventory.getCurrentItem();
  TunnelType tt=AEApi.instance().registries().p2pTunnel().getTunnelTypeByItem(is);
  if (is != null && is.getItem() instanceof IMemoryCard) {
    IMemoryCard mc=(IMemoryCard)is.getItem();
    NBTTagCompound data=mc.getData(is);
    ItemStack newType=ItemStack.loadItemStackFromNBT(data);
    long freq=data.getLong(""String_Node_Str"");
    if (newType != null) {
      if (newType.getItem() instanceof IPartItem) {
        IPart testPart=((IPartItem)newType.getItem()).createPartFromItemStack(newType);
        if (testPart instanceof PartP2PTunnel) {
          getHost().removePart(side,true);
          ForgeDirection dir=getHost().addPart(newType,side,player);
          IPart newBus=getHost().getPart(dir);
          if (newBus instanceof PartP2PTunnel) {
            PartP2PTunnel newTunnel=(PartP2PTunnel)newBus;
            newTunnel.output=true;
            try {
              P2PCache p2p=newTunnel.proxy.getP2P();
              p2p.updateFreq(newTunnel,freq);
            }
 catch (            GridAccessException e) {
            }
            newTunnel.onChange();
          }
          mc.notifyUser(player,MemoryCardMessages.SETTINGS_LOADED);
          return true;
        }
      }
    }
    mc.notifyUser(player,MemoryCardMessages.INVALID_MACHINE);
  }
 else   if (tt != null) {
    ItemStack newType=null;
switch (tt) {
case RF_POWER:
      newType=AEApi.instance().parts().partP2PTunnelRF.stack(1);
    break;
case BC_POWER:
  newType=AEApi.instance().parts().partP2PTunnelMJ.stack(1);
break;
case FLUID:
newType=AEApi.instance().parts().partP2PTunnelLiquids.stack(1);
break;
case IC2_POWER:
newType=AEApi.instance().parts().partP2PTunnelEU.stack(1);
break;
case ITEM:
newType=AEApi.instance().parts().partP2PTunnelItems.stack(1);
break;
case ME:
newType=AEApi.instance().parts().partP2PTunnelME.stack(1);
break;
case REDSTONE:
newType=AEApi.instance().parts().partP2PTunnelRedstone.stack(1);
break;
}
if (newType != null && !Platform.isSameItem(newType,this.is)) {
boolean oldOutput=output;
long myFreq=freq;
getHost().removePart(side,false);
ForgeDirection dir=getHost().addPart(newType,side,player);
IPart newBus=getHost().getPart(dir);
if (newBus instanceof PartP2PTunnel) {
PartP2PTunnel newTunnel=(PartP2PTunnel)newBus;
newTunnel.output=oldOutput;
newTunnel.onChange();
try {
P2PCache p2p=newTunnel.proxy.getP2P();
p2p.updateFreq(newTunnel,myFreq);
}
 catch (GridAccessException e) {
}
}
tile.getWorldObj().notifyBlocksOfNeighborChange(tile.xCoord,tile.yCoord,tile.zCoord,Platform.air);
return true;
}
}
return false;
}","@Override public boolean onPartActivate(EntityPlayer player,Vec3 pos){
  ItemStack is=player.inventory.getCurrentItem();
  TunnelType tt=AEApi.instance().registries().p2pTunnel().getTunnelTypeByItem(is);
  if (is != null && is.getItem() instanceof IMemoryCard) {
    IMemoryCard mc=(IMemoryCard)is.getItem();
    NBTTagCompound data=mc.getData(is);
    ItemStack newType=ItemStack.loadItemStackFromNBT(data);
    long freq=data.getLong(""String_Node_Str"");
    if (newType != null) {
      if (newType.getItem() instanceof IPartItem) {
        IPart testPart=((IPartItem)newType.getItem()).createPartFromItemStack(newType);
        if (testPart instanceof PartP2PTunnel) {
          getHost().removePart(side,true);
          ForgeDirection dir=getHost().addPart(newType,side,player);
          IPart newBus=getHost().getPart(dir);
          if (newBus instanceof PartP2PTunnel) {
            PartP2PTunnel newTunnel=(PartP2PTunnel)newBus;
            newTunnel.output=true;
            try {
              P2PCache p2p=newTunnel.proxy.getP2P();
              p2p.updateFreq(newTunnel,freq);
            }
 catch (            GridAccessException e) {
            }
            newTunnel.onTunnelNetworkChange();
          }
          mc.notifyUser(player,MemoryCardMessages.SETTINGS_LOADED);
          return true;
        }
      }
    }
    mc.notifyUser(player,MemoryCardMessages.INVALID_MACHINE);
  }
 else   if (tt != null) {
    ItemStack newType=null;
switch (tt) {
case RF_POWER:
      newType=AEApi.instance().parts().partP2PTunnelRF.stack(1);
    break;
case BC_POWER:
  newType=AEApi.instance().parts().partP2PTunnelMJ.stack(1);
break;
case FLUID:
newType=AEApi.instance().parts().partP2PTunnelLiquids.stack(1);
break;
case IC2_POWER:
newType=AEApi.instance().parts().partP2PTunnelEU.stack(1);
break;
case ITEM:
newType=AEApi.instance().parts().partP2PTunnelItems.stack(1);
break;
case ME:
newType=AEApi.instance().parts().partP2PTunnelME.stack(1);
break;
case REDSTONE:
newType=AEApi.instance().parts().partP2PTunnelRedstone.stack(1);
break;
}
if (newType != null && !Platform.isSameItem(newType,this.is)) {
boolean oldOutput=output;
long myFreq=freq;
getHost().removePart(side,false);
ForgeDirection dir=getHost().addPart(newType,side,player);
IPart newBus=getHost().getPart(dir);
if (newBus instanceof PartP2PTunnel) {
PartP2PTunnel newTunnel=(PartP2PTunnel)newBus;
newTunnel.output=oldOutput;
newTunnel.onTunnelNetworkChange();
try {
P2PCache p2p=newTunnel.proxy.getP2P();
p2p.updateFreq(newTunnel,myFreq);
}
 catch (GridAccessException e) {
}
}
tile.getWorldObj().notifyBlocksOfNeighborChange(tile.xCoord,tile.yCoord,tile.zCoord,Platform.air);
return true;
}
}
return false;
}"
30709,"@Override public boolean onPartShiftActivate(EntityPlayer player,Vec3 pos){
  ItemStack is=player.inventory.getCurrentItem();
  if (is != null && is.getItem() instanceof IMemoryCard) {
    IMemoryCard mc=(IMemoryCard)is.getItem();
    NBTTagCompound data=new NBTTagCompound();
    long newFreq=freq;
    output=false;
    if (output || freq == 0) {
      newFreq=System.currentTimeMillis();
      try {
        proxy.getP2P().updateFreq(this,newFreq);
      }
 catch (      GridAccessException e) {
      }
    }
    onChange();
    ItemStack p2pItem=getItemStack(PartItemStack.Wrench);
    String type=p2pItem.getUnlocalizedName();
    p2pItem.writeToNBT(data);
    data.setLong(""String_Node_Str"",freq);
    mc.setMemoryCardContents(is,type + ""String_Node_Str"",data);
    mc.notifyUser(player,MemoryCardMessages.SETTINGS_SAVED);
    return true;
  }
  return false;
}","@Override public boolean onPartShiftActivate(EntityPlayer player,Vec3 pos){
  ItemStack is=player.inventory.getCurrentItem();
  if (is != null && is.getItem() instanceof IMemoryCard) {
    IMemoryCard mc=(IMemoryCard)is.getItem();
    NBTTagCompound data=new NBTTagCompound();
    long newFreq=freq;
    output=false;
    if (output || freq == 0) {
      newFreq=System.currentTimeMillis();
      try {
        proxy.getP2P().updateFreq(this,newFreq);
      }
 catch (      GridAccessException e) {
      }
    }
    onTunnelConfigChange();
    ItemStack p2pItem=getItemStack(PartItemStack.Wrench);
    String type=p2pItem.getUnlocalizedName();
    p2pItem.writeToNBT(data);
    data.setLong(""String_Node_Str"",freq);
    mc.setMemoryCardContents(is,type + ""String_Node_Str"",data);
    mc.notifyUser(player,MemoryCardMessages.SETTINGS_SAVED);
    return true;
  }
  return false;
}"
30710,"@Override public Object resolveItemByName(String nameSpace,String itemName){
  if (nameSpace.equals(AppEng.modid)) {
    if (itemName.equals(""String_Node_Str"")) {
      return new ResolverResultSet(""String_Node_Str"",AEApi.instance().parts().partCableGlass.allStacks(1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      return cableItem(AEApi.instance().parts().partCableGlass,itemName.substring(itemName.indexOf(""String_Node_Str"") + 1));
    }
    if (itemName.equals(""String_Node_Str"")) {
      return new ResolverResultSet(""String_Node_Str"",AEApi.instance().parts().partCableCovered.allStacks(1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      return cableItem(AEApi.instance().parts().partCableCovered,itemName.substring(itemName.indexOf(""String_Node_Str"") + 1));
    }
    if (itemName.equals(""String_Node_Str"")) {
      return new ResolverResultSet(""String_Node_Str"",AEApi.instance().parts().partCableSmart.allStacks(1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      return cableItem(AEApi.instance().parts().partCableSmart,itemName.substring(itemName.indexOf(""String_Node_Str"") + 1));
    }
    if (itemName.equals(""String_Node_Str"")) {
      return new ResolverResultSet(""String_Node_Str"",AEApi.instance().parts().partCableDense.allStacks(1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      return cableItem(AEApi.instance().parts().partCableDense,itemName.substring(itemName.indexOf(""String_Node_Str"") + 1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      if (itemName.equalsIgnoreCase(""String_Node_Str""))       return new ResolverResult(""String_Node_Str"",ItemCrystalSeed.Certus);
      if (itemName.equalsIgnoreCase(""String_Node_Str""))       return new ResolverResult(""String_Node_Str"",ItemCrystalSeed.Nether);
      if (itemName.equalsIgnoreCase(""String_Node_Str""))       return new ResolverResult(""String_Node_Str"",ItemCrystalSeed.Fluix);
      return null;
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      String materialName=itemName.substring(itemName.indexOf(""String_Node_Str"") + 1);
      MaterialType mt=MaterialType.valueOf(materialName);
      if (mt.damageValue >= 0)       return new ResolverResult(""String_Node_Str"",mt.damageValue);
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      String partName=itemName.substring(itemName.indexOf(""String_Node_Str"") + 1);
      PartType pt=PartType.valueOf(partName);
      int dVal=ItemMultiPart.instance.getDamageByType(pt);
      if (dVal >= 0)       return new ResolverResult(""String_Node_Str"",dVal);
    }
  }
  return null;
}","@Override public Object resolveItemByName(String nameSpace,String itemName){
  if (nameSpace.equals(AppEng.modid)) {
    if (itemName.equals(""String_Node_Str"")) {
      return new ResolverResultSet(""String_Node_Str"",AEApi.instance().parts().partCableGlass.allStacks(1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      return cableItem(AEApi.instance().parts().partCableGlass,itemName.substring(itemName.indexOf(""String_Node_Str"") + 1));
    }
    if (itemName.equals(""String_Node_Str"")) {
      return new ResolverResultSet(""String_Node_Str"",AEApi.instance().parts().partCableCovered.allStacks(1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      return cableItem(AEApi.instance().parts().partCableCovered,itemName.substring(itemName.indexOf(""String_Node_Str"") + 1));
    }
    if (itemName.equals(""String_Node_Str"")) {
      return new ResolverResultSet(""String_Node_Str"",AEApi.instance().parts().partCableSmart.allStacks(1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      return cableItem(AEApi.instance().parts().partCableSmart,itemName.substring(itemName.indexOf(""String_Node_Str"") + 1));
    }
    if (itemName.equals(""String_Node_Str"")) {
      return new ResolverResultSet(""String_Node_Str"",AEApi.instance().parts().partCableDense.allStacks(1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      return cableItem(AEApi.instance().parts().partCableDense,itemName.substring(itemName.indexOf(""String_Node_Str"") + 1));
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      if (itemName.equalsIgnoreCase(""String_Node_Str""))       return new ResolverResult(""String_Node_Str"",ItemCrystalSeed.Certus);
      if (itemName.equalsIgnoreCase(""String_Node_Str""))       return new ResolverResult(""String_Node_Str"",ItemCrystalSeed.Nether);
      if (itemName.equalsIgnoreCase(""String_Node_Str""))       return new ResolverResult(""String_Node_Str"",ItemCrystalSeed.Fluix);
      return null;
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      String materialName=itemName.substring(itemName.indexOf(""String_Node_Str"") + 1);
      MaterialType mt=MaterialType.valueOf(materialName);
      if (mt.damageValue >= 0 && mt.isRegistered())       return new ResolverResult(""String_Node_Str"",mt.damageValue);
    }
    if (itemName.startsWith(""String_Node_Str"")) {
      String partName=itemName.substring(itemName.indexOf(""String_Node_Str"") + 1);
      PartType pt=PartType.valueOf(partName);
      int dVal=ItemMultiPart.instance.getDamageByType(pt);
      if (dVal >= 0)       return new ResolverResult(""String_Node_Str"",dVal);
    }
  }
  return null;
}"
30711,"@Override protected void handleMouseClick(Slot slot,int slotIdx,int ctrlDown,int key){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (slot instanceof SlotFake) {
    InventoryAction action=null;
    action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,null);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (slot instanceof SlotCraftingTerm) {
    if (key == 6)     return;
    InventoryAction action=null;
    if (key == 1)     action=InventoryAction.CRAFT_SHIFT;
 else     action=ctrlDown == 1 ? InventoryAction.CRAFT_STACK : InventoryAction.CRAFT_ITEM;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,null);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
    IAEItemStack stack=null;
    if (slot instanceof SlotME)     stack=((SlotME)slot).getAEStack();
    try {
      int slotNum=inventorySlots.inventorySlots.size();
      if (!(slot instanceof SlotME) && slot != null)       slotNum=slot.slotNumber;
      ((AEBaseContainer)inventorySlots).setTargetStack(stack);
      PacketInventoryAction p=new PacketInventoryAction(InventoryAction.MOVE_REGION,slotNum,null);
      NetworkHandler.instance.sendToServer(p);
    }
 catch (    IOException e) {
      AELog.error(e);
    }
    return;
  }
  if (slot instanceof SlotME) {
    InventoryAction action=null;
    IAEItemStack stack=null;
switch (key) {
case 0:
      action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    stack=((SlotME)slot).getAEStack();
  break;
case 1:
action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
stack=((SlotME)slot).getAEStack();
break;
case 3:
if (player.capabilities.isCreativeMode) {
IAEItemStack slotItem=((SlotME)slot).getAEStack();
if (slotItem != null) {
action=InventoryAction.CREATIVE_DUPLICATE;
stack=slotItem;
}
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
((AEBaseContainer)inventorySlots).setTargetStack(stack);
PacketInventoryAction p=new PacketInventoryAction(action,inventorySlots.inventorySlots.size(),null);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
super.handleMouseClick(slot,slotIdx,ctrlDown,key);
}","@Override protected void handleMouseClick(Slot slot,int slotIdx,int ctrlDown,int key){
  EntityPlayer player=Minecraft.getMinecraft().thePlayer;
  if (slot instanceof SlotFake) {
    InventoryAction action=null;
    action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,null);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (slot instanceof SlotCraftingTerm) {
    if (key == 6)     return;
    InventoryAction action=null;
    if (key == 1)     action=InventoryAction.CRAFT_SHIFT;
 else     action=ctrlDown == 1 ? InventoryAction.CRAFT_STACK : InventoryAction.CRAFT_ITEM;
    if (action != null) {
      try {
        PacketInventoryAction p=new PacketInventoryAction(action,slotIdx,null);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
    }
    return;
  }
  if (Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
    if (enableSpaceClicking()) {
      IAEItemStack stack=null;
      if (slot instanceof SlotME)       stack=((SlotME)slot).getAEStack();
      try {
        int slotNum=inventorySlots.inventorySlots.size();
        if (!(slot instanceof SlotME) && slot != null)         slotNum=slot.slotNumber;
        ((AEBaseContainer)inventorySlots).setTargetStack(stack);
        PacketInventoryAction p=new PacketInventoryAction(InventoryAction.MOVE_REGION,slotNum,null);
        NetworkHandler.instance.sendToServer(p);
      }
 catch (      IOException e) {
        AELog.error(e);
      }
      return;
    }
  }
  if (slot instanceof SlotME) {
    InventoryAction action=null;
    IAEItemStack stack=null;
switch (key) {
case 0:
      action=ctrlDown == 1 ? InventoryAction.SPLIT_OR_PLACESINGLE : InventoryAction.PICKUP_OR_SETDOWN;
    stack=((SlotME)slot).getAEStack();
  break;
case 1:
action=ctrlDown == 1 ? InventoryAction.PICKUP_SINGLE : InventoryAction.SHIFT_CLICK;
stack=((SlotME)slot).getAEStack();
break;
case 3:
if (player.capabilities.isCreativeMode) {
IAEItemStack slotItem=((SlotME)slot).getAEStack();
if (slotItem != null) {
action=InventoryAction.CREATIVE_DUPLICATE;
stack=slotItem;
}
}
break;
default :
case 4:
case 6:
}
if (action != null) {
try {
((AEBaseContainer)inventorySlots).setTargetStack(stack);
PacketInventoryAction p=new PacketInventoryAction(action,inventorySlots.inventorySlots.size(),null);
NetworkHandler.instance.sendToServer(p);
}
 catch (IOException e) {
AELog.error(e);
}
}
return;
}
super.handleMouseClick(slot,slotIdx,ctrlDown,key);
}"
30712,"@Override public void Init(){
}","@Override public void Init(){
  api=(InvTweaksAPI)Loader.instance().getIndexedModList().get(""String_Node_Str"").getMod();
}"
30713,"public ASMIntegration(){
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",null,""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",null,""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",null,""String_Node_Str"");
  integrationModules.add(IntegrationSide.CLIENT,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",null,""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.CLIENT,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.CLIENT,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.CLIENT,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.CLIENT,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","public ASMIntegration(){
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",null,""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",null,""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",null,""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",null,""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.CLIENT,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.CLIENT,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.CLIENT,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.CLIENT,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  integrationModules.add(IntegrationSide.BOTH,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}"
30714,"public void updateView(){
  view.clear();
  dsp.clear();
  view.ensureCapacity(list.size());
  dsp.ensureCapacity(list.size());
  Enum mode=AEConfig.instance.settings.getSetting(Settings.SEARCH_MODE);
  if (mode == SearchBoxMode.NEI_AUTOSEARCH || mode == SearchBoxMode.NEI_MANUAL_SEARCH)   updateNEI(searchString);
  boolean terminalSearchToolTips=AEConfig.instance.settings.getSetting(Settings.SEARCH_TOOLTIPS) != YesNo.NO;
  Pattern m=null;
  try {
    m=Pattern.compile(searchString.toLowerCase(),Pattern.CASE_INSENSITIVE);
  }
 catch (  Throwable _) {
    try {
      m=Pattern.compile(Pattern.quote(searchString.toLowerCase()),Pattern.CASE_INSENSITIVE);
    }
 catch (    Throwable __) {
      return;
    }
  }
  boolean notDone=false;
  for (  IAEItemStack is : list) {
    if (myPartitionList != null) {
      if (!myPartitionList.isListed(is))       continue;
    }
    String dspName=Platform.getItemDisplayName(is);
    notDone=true;
    if (m.matcher(dspName).find()) {
      view.add(is);
      notDone=false;
    }
    if (terminalSearchToolTips && notDone) {
      for (      Object lp : Platform.getTooltip(is))       if (lp instanceof String && m.matcher((String)lp).find()) {
        view.add(is);
        notDone=false;
        break;
      }
    }
  }
  Enum SortBy=sortSrc.getSortBy();
  Enum SortDir=sortSrc.getSortDir();
  ItemSorters.Direction=(appeng.api.config.SortDir)SortDir;
  ItemSorters.init();
  if (SortBy == SortOrder.AMOUNT)   Collections.sort(view,ItemSorters.ConfigBased_SortBySize);
 else   if (SortBy == SortOrder.INVTWEAKS)   Collections.sort(view,ItemSorters.ConfigBased_SortByInvTweaks);
 else   Collections.sort(view,ItemSorters.ConfigBased_SortByName);
  for (  IAEItemStack is : view)   dsp.add(is.getItemStack());
}","public void updateView(){
  view.clear();
  dsp.clear();
  view.ensureCapacity(list.size());
  dsp.ensureCapacity(list.size());
  Enum mode=AEConfig.instance.settings.getSetting(Settings.SEARCH_MODE);
  if (mode == SearchBoxMode.NEI_AUTOSEARCH || mode == SearchBoxMode.NEI_MANUAL_SEARCH)   updateNEI(searchString);
  boolean terminalSearchToolTips=AEConfig.instance.settings.getSetting(Settings.SEARCH_TOOLTIPS) != YesNo.NO;
  Pattern m=null;
  try {
    m=Pattern.compile(searchString.toLowerCase(),Pattern.CASE_INSENSITIVE);
  }
 catch (  Throwable _) {
    try {
      m=Pattern.compile(Pattern.quote(searchString.toLowerCase()),Pattern.CASE_INSENSITIVE);
    }
 catch (    Throwable __) {
      return;
    }
  }
  boolean notDone=false;
  for (  IAEItemStack is : list) {
    if (myPartitionList != null) {
      if (!myPartitionList.isListed(is))       continue;
    }
    String dspName=Platform.getItemDisplayName(is);
    notDone=true;
    if (m.matcher(dspName.toLowerCase()).find()) {
      view.add(is);
      notDone=false;
    }
    if (terminalSearchToolTips && notDone) {
      for (      Object lp : Platform.getTooltip(is))       if (lp instanceof String && m.matcher((String)lp).find()) {
        view.add(is);
        notDone=false;
        break;
      }
    }
  }
  Enum SortBy=sortSrc.getSortBy();
  Enum SortDir=sortSrc.getSortDir();
  ItemSorters.Direction=(appeng.api.config.SortDir)SortDir;
  ItemSorters.init();
  if (SortBy == SortOrder.AMOUNT)   Collections.sort(view,ItemSorters.ConfigBased_SortBySize);
 else   if (SortBy == SortOrder.INVTWEAKS)   Collections.sort(view,ItemSorters.ConfigBased_SortByInvTweaks);
 else   Collections.sort(view,ItemSorters.ConfigBased_SortByName);
  for (  IAEItemStack is : view)   dsp.add(is.getItemStack());
}"
30715,"public Class<? extends GuiContainer> getGuiClass(){
  return GuiInscriber.class;
}","public Class<? extends GuiContainer> getGuiClass(){
  return GuiGrinder.class;
}"
30716,"public OreRefrence isOre(ItemStack ItemStack){
  ItemRef ir=new ItemRef(ItemStack);
  OreResult or=refrences.get(ir);
  if (or == null) {
    or=new OreResult();
    refrences.put(ir,or);
    OreRefrence ref=new OreRefrence();
    Collection<Integer> ores=ref.getOres();
    Collection<ItemStack> set=ref.getEquivilients();
    Collection<IAEItemStack> aeset=ref.getAEEquivilients();
    for (    String ore : OreDictionary.getOreNames()) {
      boolean add=false;
      for (      ItemStack oreItem : OreDictionary.getOres(ore)) {
        if (OreDictionary.itemMatches(oreItem,ItemStack,false)) {
          add=true;
          set.add(oreItem.copy());
        }
      }
      if (add)       ores.add(OreDictionary.getOreID(ore));
    }
    if (!set.isEmpty()) {
      or.oreValue=ref;
      for (      ItemStack is : set)       aeset.add(AEItemStack.create(is));
    }
  }
  return or.oreValue;
}","public OreRefrence isOre(ItemStack ItemStack){
  ItemRef ir=new ItemRef(ItemStack);
  OreResult or=refrences.get(ir);
  if (or == null) {
    or=new OreResult();
    refrences.put(ir,or);
    OreRefrence ref=new OreRefrence();
    Collection<Integer> ores=ref.getOres();
    Collection<ItemStack> set=ref.getEquivilients();
    Collection<IAEItemStack> aeset=ref.getAEEquivilients();
    for (    String ore : OreDictionary.getOreNames()) {
      boolean add=false;
      for (      ItemStack oreItem : OreDictionary.getOres(ore)) {
        if (OreDictionary.itemMatches(oreItem,ItemStack,false)) {
          add=true;
          break;
        }
      }
      if (add) {
        for (        ItemStack oreItem : OreDictionary.getOres(ore))         set.add(oreItem.copy());
        ores.add(OreDictionary.getOreID(ore));
      }
    }
    if (!set.isEmpty()) {
      or.oreValue=ref;
      for (      ItemStack is : set)       aeset.add(AEItemStack.create(is));
    }
  }
  return or.oreValue;
}"
30717,"@Override public String[] getASMTransformerClass(){
  return new String[]{""String_Node_Str"",""String_Node_Str""};
}","@Override public String[] getASMTransformerClass(){
  return new String[]{""String_Node_Str""};
}"
30718,"@Override public void setInventorySlotContents(int var1,ItemStack var2){
  if (var2 == null)   makePlate();
}","@Override public void setInventorySlotContents(int var1,ItemStack var2){
  if (var2 == null && Platform.isServer())   makePlate();
}"
30719,"public ItemStackSrc createPart(PartType mat,Enum varient){
  try {
    ItemStack is=new ItemStack(this);
    mat.getPart().getConstructor(ItemStack.class).newInstance(is);
  }
 catch (  Throwable e) {
    return null;
  }
  int varID=varient == null ? 0 : varient.ordinal();
  for (  PartTypeIst p : dmgToPart.values()) {
    if (p.part == mat && p.varient == varID)     throw new RuntimeException(""String_Node_Str"");
  }
  boolean enabled=true;
  for (  AEFeature f : mat.getFeature())   enabled=enabled && AEConfig.instance.isFeatureEnabled(f);
  if (enabled) {
    int newPartNum=mat.baseDamage + varID;
    ItemStackSrc output=new ItemStackSrc(this,newPartNum);
    PartTypeIst pti=new PartTypeIst();
    pti.part=mat;
    pti.varient=varID;
    if (dmgToPart.get(newPartNum) == null) {
      dmgToPart.put(newPartNum,pti);
      return output;
    }
 else     throw new RuntimeException(""String_Node_Str"");
  }
  return null;
}","public ItemStackSrc createPart(PartType mat,Enum varient){
  try {
    ItemStack is=new ItemStack(this);
    mat.getPart().getConstructor(ItemStack.class).newInstance(is);
  }
 catch (  Throwable e) {
    AELog.integration(e);
    return null;
  }
  int varID=varient == null ? 0 : varient.ordinal();
  for (  PartTypeIst p : dmgToPart.values()) {
    if (p.part == mat && p.varient == varID)     throw new RuntimeException(""String_Node_Str"");
  }
  boolean enabled=true;
  for (  AEFeature f : mat.getFeature())   enabled=enabled && AEConfig.instance.isFeatureEnabled(f);
  if (enabled) {
    int newPartNum=mat.baseDamage + varID;
    ItemStackSrc output=new ItemStackSrc(this,newPartNum);
    PartTypeIst pti=new PartTypeIst();
    pti.part=mat;
    pti.varient=varID;
    if (dmgToPart.get(newPartNum) == null) {
      dmgToPart.put(newPartNum,pti);
      return output;
    }
 else     throw new RuntimeException(""String_Node_Str"");
  }
  return null;
}"
30720,"public void readClass(Class listAs,Class c){
  if (readClasses.contains(c))   return;
  readClasses.add(c);
  for (  Method m : c.getMethods()) {
    MENetworkEventSubscribe s=m.getAnnotation(MENetworkEventSubscribe.class);
    if (s != null) {
      Class types[]=m.getParameterTypes();
      if (types.length == 1) {
        if (MENetworkEvent.class.isAssignableFrom(types[0])) {
          Hashtable<Class,MENetworkEventInfo> classEvents=events.get(types[0]);
          if (classEvents == null)           events.put(types[0],classEvents=new Hashtable());
          MENetworkEventInfo thisEvent=classEvents.get(listAs);
          if (thisEvent == null)           thisEvent=new MENetworkEventInfo();
          thisEvent.Add(types[0],c,m);
          classEvents.put(listAs,thisEvent);
        }
 else         throw new RuntimeException(""String_Node_Str"" + m.getName() + ""String_Node_Str"");
      }
 else       throw new RuntimeException(""String_Node_Str"" + m.getName() + ""String_Node_Str"");
    }
  }
}","public void readClass(Class listAs,Class c){
  if (readClasses.contains(c))   return;
  readClasses.add(c);
  try {
    for (    Method m : c.getMethods()) {
      MENetworkEventSubscribe s=m.getAnnotation(MENetworkEventSubscribe.class);
      if (s != null) {
        Class types[]=m.getParameterTypes();
        if (types.length == 1) {
          if (MENetworkEvent.class.isAssignableFrom(types[0])) {
            Hashtable<Class,MENetworkEventInfo> classEvents=events.get(types[0]);
            if (classEvents == null)             events.put(types[0],classEvents=new Hashtable());
            MENetworkEventInfo thisEvent=classEvents.get(listAs);
            if (thisEvent == null)             thisEvent=new MENetworkEventInfo();
            thisEvent.Add(types[0],c,m);
            classEvents.put(listAs,thisEvent);
          }
 else           throw new RuntimeException(""String_Node_Str"" + m.getName() + ""String_Node_Str"");
        }
 else         throw new RuntimeException(""String_Node_Str"" + m.getName() + ""String_Node_Str"");
      }
    }
  }
 catch (  Throwable t) {
    throw new RuntimeException(""String_Node_Str"" + c.getName() + ""String_Node_Str"",t);
  }
}"
30721,"public ItemStackSrc createPart(OldPartType mat,Enum varient){
  try {
    ItemStack is=new ItemStack(this);
    mat.getPart().getConstructor(ItemStack.class).newInstance(is);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    return null;
  }
  String name=varient == null ? mat.name() : mat.name() + ""String_Node_Str"" + varient.name();
  int varID=varient == null ? 0 : varient.ordinal();
  for (  OldPartTypeIst p : dmgToPart.values()) {
    if (p.part == mat && p.varient == varID)     throw new RuntimeException(""String_Node_Str"");
  }
  boolean enabled=true;
  for (  AEFeature f : mat.getFeature())   enabled=enabled && AEConfig.instance.isFeatureEnabled(f);
  if (enabled) {
    int newPartNum=AEConfig.instance.get(""String_Node_Str"",name,AEConfig.instance.getFreePart(mat.ordinal() * 32 + varID)).getInt();
    ItemStackSrc output=new ItemStackSrc(this,newPartNum);
    OldPartTypeIst pti=new OldPartTypeIst();
    pti.part=mat;
    pti.varient=varID;
    dmgToPart.put(newPartNum,pti);
    return output;
  }
  return null;
}","public ItemStackSrc createPart(OldPartType mat,Enum varient){
  try {
    ItemStack is=new ItemStack(this);
    mat.getPart().getConstructor(ItemStack.class).newInstance(is);
  }
 catch (  Throwable e) {
    AELog.integration(e);
    return null;
  }
  String name=varient == null ? mat.name() : mat.name() + ""String_Node_Str"" + varient.name();
  int varID=varient == null ? 0 : varient.ordinal();
  for (  OldPartTypeIst p : dmgToPart.values()) {
    if (p.part == mat && p.varient == varID)     throw new RuntimeException(""String_Node_Str"");
  }
  boolean enabled=true;
  for (  AEFeature f : mat.getFeature())   enabled=enabled && AEConfig.instance.isFeatureEnabled(f);
  if (enabled) {
    int newPartNum=AEConfig.instance.get(""String_Node_Str"",name,AEConfig.instance.getFreePart(mat.ordinal() * 32 + varID)).getInt();
    ItemStackSrc output=new ItemStackSrc(this,newPartNum);
    OldPartTypeIst pti=new OldPartTypeIst();
    pti.part=mat;
    pti.varient=varID;
    dmgToPart.put(newPartNum,pti);
    return output;
  }
  return null;
}"
30722,"public static IAEItemStack loadItemStackFromPacket(ByteBuf data) throws IOException {
  byte mask=data.readByte();
  byte StackType=(byte)((mask & 0x0C) >> 2);
  byte CountReqType=(byte)((mask & 0x30) >> 4);
  boolean isCraftable=(mask & 0x40) > 0;
  boolean hasTagCompound=(mask & 0x80) > 0;
  NBTTagCompound d=new NBTTagCompound();
  d.setShort(""String_Node_Str"",data.readShort());
  d.setShort(""String_Node_Str"",data.readShort());
  d.setByte(""String_Node_Str"",(byte)0);
  if (hasTagCompound) {
    int len=data.readInt();
    byte[] bd=new byte[len];
    data.readBytes(bd);
    DataInput di=ByteStreams.newDataInput(bd);
    d.setTag(""String_Node_Str"",CompressedStreamTools.read(di));
  }
  long stackSize=getPacketValue(StackType,data);
  long countRequestable=getPacketValue(CountReqType,data);
  ItemStack itemstack=ItemStack.loadItemStackFromNBT(d);
  if (itemstack == null)   return null;
  AEItemStack aeis=AEItemStack.create(itemstack);
  aeis.stackSize=stackSize;
  aeis.setCountRequestable(countRequestable);
  aeis.setCraftable(isCraftable);
  return aeis;
}","public static IAEItemStack loadItemStackFromPacket(ByteBuf data) throws IOException {
  byte mask=data.readByte();
  byte StackType=(byte)((mask & 0x0C) >> 2);
  byte CountReqType=(byte)((mask & 0x30) >> 4);
  boolean isCraftable=(mask & 0x40) > 0;
  boolean hasTagCompound=(mask & 0x80) > 0;
  NBTTagCompound d=new NBTTagCompound();
  d.setShort(""String_Node_Str"",data.readShort());
  d.setShort(""String_Node_Str"",data.readShort());
  d.setByte(""String_Node_Str"",(byte)0);
  if (hasTagCompound) {
    int len=data.readInt();
    byte[] bd=new byte[len];
    data.readBytes(bd);
    ByteArrayInputStream di=new ByteArrayInputStream(bd);
    d.setTag(""String_Node_Str"",CompressedStreamTools.read(new DataInputStream(di)));
  }
  long stackSize=getPacketValue(StackType,data);
  long countRequestable=getPacketValue(CountReqType,data);
  ItemStack itemstack=ItemStack.loadItemStackFromNBT(d);
  if (itemstack == null)   return null;
  AEItemStack aeis=AEItemStack.create(itemstack);
  aeis.stackSize=stackSize;
  aeis.setCountRequestable(countRequestable);
  aeis.setCraftable(isCraftable);
  return aeis;
}"
30723,"List<PartP2PLiquids> getOutputs(Fluid input){
  List<PartP2PLiquids> outs=new LinkedList<PartP2PLiquids>();
  try {
    for (    PartP2PLiquids l : getOutputs()) {
      IFluidHandler targ=getTarget();
      if (targ != null) {
        if (targ.canFill(side.getOpposite(),input))         outs.add(l);
      }
    }
  }
 catch (  GridAccessException e) {
  }
  return outs;
}","List<PartP2PLiquids> getOutputs(Fluid input){
  List<PartP2PLiquids> outs=new LinkedList<PartP2PLiquids>();
  try {
    for (    PartP2PLiquids l : getOutputs()) {
      IFluidHandler targ=l.getTarget();
      if (targ != null) {
        if (targ.canFill(side.getOpposite(),input))         outs.add(l);
      }
    }
  }
 catch (  GridAccessException e) {
  }
  return outs;
}"
30724,"IFluidHandler getTarget(){
  if (cachedTank != null)   return cachedTank;
  TileEntity te=tile.getWorldObj().getTileEntity(tile.xCoord + side.offsetX,tile.yCoord + side.offsetY,tile.zCoord + side.offsetZ);
  if (te instanceof IFluidHandler)   return cachedTank=(IFluidHandler)te;
  return null;
}","IFluidHandler getTarget(){
  if (!proxy.isActive())   return null;
  if (cachedTank != null)   return cachedTank;
  TileEntity te=tile.getWorldObj().getTileEntity(tile.xCoord + side.offsetX,tile.yCoord + side.offsetY,tile.zCoord + side.offsetZ);
  if (te instanceof IFluidHandler)   return cachedTank=(IFluidHandler)te;
  return null;
}"
30725,"@SideOnly(Side.CLIENT) public void renderCoveredConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isSmart=false;
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of,of.getOpposite())));
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent)   rh.setTexture(getGlassTexture(ccph.getColor()));
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.COVERED && ccph.getColor() != AEColor.Transparent) rh.setTexture(getCoveredTexture(ccph.getColor()));
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.SMART) {
isSmart=true;
rh.setTexture(getSmartTexture(getCableColor()));
}
 else rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
if (isSmart) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(getCableColor().mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(getCableColor().whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
}","@SideOnly(Side.CLIENT) public void renderCoveredConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isSmart=false;
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of.getOpposite())));
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent)   rh.setTexture(getGlassTexture(ccph.getColor()));
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.COVERED && ccph.getColor() != AEColor.Transparent) rh.setTexture(getCoveredTexture(ccph.getColor()));
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.SMART) {
isSmart=true;
rh.setTexture(getSmartTexture(getCableColor()));
}
 else rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
if (isSmart) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
Tessellator.instance.setColorOpaque_I(getCableColor().mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
Tessellator.instance.setColorOpaque_I(getCableColor().whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,rh,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
}"
30726,"@SideOnly(Side.CLIENT) public void rendereGlassConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost gh=te instanceof IGridHost ? (IGridHost)te : null;
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of,of.getOpposite())));
  if (gh != null && ccph != null && gh.getCableConnectionType(of) == AECableType.GLASS && ccph.getColor() != AEColor.Transparent && ccph.getPart(of.getOpposite()) == null)   rh.setTexture(getTexture(ccph.getColor()));
 else   if (ccph == null && gh != null && gh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else rh.setTexture(getTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,6,10);
break;
case EAST:
rh.setBounds(10,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,6);
break;
case SOUTH:
rh.setBounds(6,6,10,10,10,16);
break;
case UP:
rh.setBounds(6,10,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,6,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
}","@SideOnly(Side.CLIENT) public void rendereGlassConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost gh=te instanceof IGridHost ? (IGridHost)te : null;
  rh.setFacesToRender(EnumSet.complementOf(EnumSet.of(of)));
  if (gh != null && ccph != null && gh.getCableConnectionType(of) == AECableType.GLASS && ccph.getColor() != AEColor.Transparent && ccph.getPart(of.getOpposite()) == null)   rh.setTexture(getTexture(ccph.getColor()));
 else   if (ccph == null && gh != null && gh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else rh.setTexture(getTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,6,10);
break;
case EAST:
rh.setBounds(10,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,6);
break;
case SOUTH:
rh.setBounds(6,6,10,10,10,16);
break;
case UP:
rh.setBounds(6,10,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,6,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setFacesToRender(EnumSet.allOf(ForgeDirection.class));
}"
30727,"public void drawSlot(Slot s){
  if (s instanceof SlotME) {
    RenderItem pIR=itemRender;
    itemRender=aeri;
    try {
      this.zLevel=100.0F;
      itemRender.zLevel=100.0F;
      if (!isPowered()) {
        GL11.glDisable(GL11.GL_LIGHTING);
        super.drawRect(s.xDisplayPosition,s.yDisplayPosition,16 + s.xDisplayPosition,16 + s.yDisplayPosition,0x66111111);
        GL11.glEnable(GL11.GL_LIGHTING);
      }
      this.zLevel=0.0F;
      itemRender.zLevel=0.0F;
      if (s instanceof SlotME)       aeri.aestack=((SlotME)s).getAEStack();
 else       aeri.aestack=null;
      safeDrawSlot(s);
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + err.toString());
      if (Platform.isDrawing(Tessellator.instance))       Tessellator.instance.draw();
    }
    itemRender=pIR;
    return;
  }
 else {
    try {
      ItemStack is=s.getStack();
      if (s instanceof AppEngSlot && (((AppEngSlot)s).renderIconWithItem() || is == null) && (((AppEngSlot)s).isEnabled())) {
        AppEngSlot aes=(AppEngSlot)s;
        if (aes.getIcon() >= 0) {
          bindTexture(""String_Node_Str"");
          GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
          Tessellator tessellator=Tessellator.instance;
          try {
            int uv_y=(int)Math.floor(aes.getIcon() / 16);
            int uv_x=aes.getIcon() - uv_y * 16;
            GL11.glEnable(GL11.GL_BLEND);
            GL11.glDisable(GL11.GL_LIGHTING);
            GL11.glEnable(GL11.GL_TEXTURE_2D);
            GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
            GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
            float par1=aes.xDisplayPosition;
            float par2=aes.yDisplayPosition;
            float par3=uv_x * 16;
            float par4=uv_y * 16;
            float par5=16;
            float par6=16;
            float f=0.00390625F;
            float f1=0.00390625F;
            tessellator.startDrawingQuads();
            tessellator.setColorRGBA_F(1.0f,1.0f,1.0f,aes.getOpacityOfIcon());
            tessellator.addVertexWithUV((double)(par1 + 0),(double)(par2 + par6),(double)this.zLevel,(double)((float)(par3 + 0) * f),(double)((float)(par4 + par6) * f1));
            tessellator.addVertexWithUV((double)(par1 + par5),(double)(par2 + par6),(double)this.zLevel,(double)((float)(par3 + par5) * f),(double)((float)(par4 + par6) * f1));
            tessellator.addVertexWithUV((double)(par1 + par5),(double)(par2 + 0),(double)this.zLevel,(double)((float)(par3 + par5) * f),(double)((float)(par4 + 0) * f1));
            tessellator.addVertexWithUV((double)(par1 + 0),(double)(par2 + 0),(double)this.zLevel,(double)((float)(par3 + 0) * f),(double)((float)(par4 + 0) * f1));
            tessellator.setColorRGBA_F(1.0f,1.0f,1.0f,1.0f);
            tessellator.draw();
          }
 catch (          Exception err) {
            if (Platform.isDrawing(tessellator))             tessellator.draw();
          }
          GL11.glPopAttrib();
        }
      }
      if (is != null && s instanceof AppEngSlot) {
        if (((AppEngSlot)s).isValid == hasCalculatedValidness.NotAvailable) {
          boolean isValid=s.isItemValid(is) || s instanceof SlotOutput || s instanceof AppEngCraftingSlot|| s instanceof SlotDisabled|| s instanceof SlotInaccessable|| s instanceof SlotFake|| s instanceof SlotRestrictedInput;
          if (isValid && s instanceof SlotRestrictedInput) {
            try {
              isValid=((SlotRestrictedInput)s).isValid(is,this.mc.theWorld);
            }
 catch (            Exception err) {
              AELog.error(err);
            }
          }
          ((AppEngSlot)s).isValid=isValid ? hasCalculatedValidness.Valid : hasCalculatedValidness.Invalid;
        }
        if (((AppEngSlot)s).isValid == hasCalculatedValidness.Invalid) {
          this.zLevel=100.0F;
          itemRender.zLevel=100.0F;
          GL11.glDisable(GL11.GL_LIGHTING);
          super.drawRect(s.xDisplayPosition,s.yDisplayPosition,16 + s.xDisplayPosition,16 + s.yDisplayPosition,0x66ff6666);
          GL11.glEnable(GL11.GL_LIGHTING);
          this.zLevel=0.0F;
          itemRender.zLevel=0.0F;
        }
      }
      if (s instanceof AppEngSlot) {
        ((AppEngSlot)s).isDisplay=true;
        safeDrawSlot(s);
      }
 else       safeDrawSlot(s);
      return;
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + err.toString());
    }
  }
  safeDrawSlot(s);
}","public void drawSlot(Slot s){
  if (s instanceof SlotME) {
    RenderItem pIR=setItemRender(aeri);
    try {
      this.zLevel=100.0F;
      itemRender.zLevel=100.0F;
      if (!isPowered()) {
        GL11.glDisable(GL11.GL_LIGHTING);
        super.drawRect(s.xDisplayPosition,s.yDisplayPosition,16 + s.xDisplayPosition,16 + s.yDisplayPosition,0x66111111);
        GL11.glEnable(GL11.GL_LIGHTING);
      }
      this.zLevel=0.0F;
      itemRender.zLevel=0.0F;
      if (s instanceof SlotME)       aeri.aestack=((SlotME)s).getAEStack();
 else       aeri.aestack=null;
      safeDrawSlot(s);
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + err.toString());
      if (Platform.isDrawing(Tessellator.instance))       Tessellator.instance.draw();
    }
    setItemRender(pIR);
    return;
  }
 else {
    try {
      ItemStack is=s.getStack();
      if (s instanceof AppEngSlot && (((AppEngSlot)s).renderIconWithItem() || is == null) && (((AppEngSlot)s).isEnabled())) {
        AppEngSlot aes=(AppEngSlot)s;
        if (aes.getIcon() >= 0) {
          bindTexture(""String_Node_Str"");
          GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
          Tessellator tessellator=Tessellator.instance;
          try {
            int uv_y=(int)Math.floor(aes.getIcon() / 16);
            int uv_x=aes.getIcon() - uv_y * 16;
            GL11.glEnable(GL11.GL_BLEND);
            GL11.glDisable(GL11.GL_LIGHTING);
            GL11.glEnable(GL11.GL_TEXTURE_2D);
            GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
            GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
            float par1=aes.xDisplayPosition;
            float par2=aes.yDisplayPosition;
            float par3=uv_x * 16;
            float par4=uv_y * 16;
            float par5=16;
            float par6=16;
            float f=0.00390625F;
            float f1=0.00390625F;
            tessellator.startDrawingQuads();
            tessellator.setColorRGBA_F(1.0f,1.0f,1.0f,aes.getOpacityOfIcon());
            tessellator.addVertexWithUV((double)(par1 + 0),(double)(par2 + par6),(double)this.zLevel,(double)((float)(par3 + 0) * f),(double)((float)(par4 + par6) * f1));
            tessellator.addVertexWithUV((double)(par1 + par5),(double)(par2 + par6),(double)this.zLevel,(double)((float)(par3 + par5) * f),(double)((float)(par4 + par6) * f1));
            tessellator.addVertexWithUV((double)(par1 + par5),(double)(par2 + 0),(double)this.zLevel,(double)((float)(par3 + par5) * f),(double)((float)(par4 + 0) * f1));
            tessellator.addVertexWithUV((double)(par1 + 0),(double)(par2 + 0),(double)this.zLevel,(double)((float)(par3 + 0) * f),(double)((float)(par4 + 0) * f1));
            tessellator.setColorRGBA_F(1.0f,1.0f,1.0f,1.0f);
            tessellator.draw();
          }
 catch (          Exception err) {
            if (Platform.isDrawing(tessellator))             tessellator.draw();
          }
          GL11.glPopAttrib();
        }
      }
      if (is != null && s instanceof AppEngSlot) {
        if (((AppEngSlot)s).isValid == hasCalculatedValidness.NotAvailable) {
          boolean isValid=s.isItemValid(is) || s instanceof SlotOutput || s instanceof AppEngCraftingSlot|| s instanceof SlotDisabled|| s instanceof SlotInaccessable|| s instanceof SlotFake|| s instanceof SlotRestrictedInput;
          if (isValid && s instanceof SlotRestrictedInput) {
            try {
              isValid=((SlotRestrictedInput)s).isValid(is,this.mc.theWorld);
            }
 catch (            Exception err) {
              AELog.error(err);
            }
          }
          ((AppEngSlot)s).isValid=isValid ? hasCalculatedValidness.Valid : hasCalculatedValidness.Invalid;
        }
        if (((AppEngSlot)s).isValid == hasCalculatedValidness.Invalid) {
          this.zLevel=100.0F;
          itemRender.zLevel=100.0F;
          GL11.glDisable(GL11.GL_LIGHTING);
          super.drawRect(s.xDisplayPosition,s.yDisplayPosition,16 + s.xDisplayPosition,16 + s.yDisplayPosition,0x66ff6666);
          GL11.glEnable(GL11.GL_LIGHTING);
          this.zLevel=0.0F;
          itemRender.zLevel=0.0F;
        }
      }
      if (s instanceof AppEngSlot) {
        ((AppEngSlot)s).isDisplay=true;
        safeDrawSlot(s);
      }
 else       safeDrawSlot(s);
      return;
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + err.toString());
    }
  }
  safeDrawSlot(s);
}"
30728,"@Override public void Init() throws Throwable {
  Method registerRecipeHandler=API.getDeclaredMethod(""String_Node_Str"",new Class[]{codechicken.nei.recipe.ICraftingHandler.class});
  Method registerUsageHandler=API.getDeclaredMethod(""String_Node_Str"",new Class[]{codechicken.nei.recipe.IUsageHandler.class});
  registerRecipeHandler.invoke(API,new NEIAEShapedRecipeHandler());
  registerUsageHandler.invoke(API,new NEIAEShapedRecipeHandler());
  registerRecipeHandler.invoke(API,new NEIAEShapelessRecipeHandler());
  registerUsageHandler.invoke(API,new NEIAEShapelessRecipeHandler());
}","@Override public void Init() throws Throwable {
  registerRecipeHandler=API.getDeclaredMethod(""String_Node_Str"",new Class[]{codechicken.nei.recipe.ICraftingHandler.class});
  registerUsageHandler=API.getDeclaredMethod(""String_Node_Str"",new Class[]{codechicken.nei.recipe.IUsageHandler.class});
  registerRecipeHandler(new NEIAEShapedRecipeHandler());
  registerRecipeHandler(new NEIAEShapelessRecipeHandler());
  registerRecipeHandler(new NEIInscriberRecipeHandler());
  Method registerGuiOverlay=API.getDeclaredMethod(""String_Node_Str"",new Class[]{Class.class,String.class,int.class,int.class});
  Class IOverlayHandler=Class.forName(""String_Node_Str"");
  Class DefaultOverlayHandler=NEICraftingHandler.class;
  Method registerGuiOverlayHandler=API.getDeclaredMethod(""String_Node_Str"",new Class[]{Class.class,IOverlayHandler,String.class});
  registerGuiOverlay.invoke(API,GuiCraftingTerm.class,""String_Node_Str"",6,75);
  Constructor DefaultOverlayHandlerConstructor=DefaultOverlayHandler.getConstructor(new Class[]{int.class,int.class});
  registerGuiOverlayHandler.invoke(API,GuiCraftingTerm.class,DefaultOverlayHandlerConstructor.newInstance(6,75),""String_Node_Str"");
}"
30729,"@Override public void onUpdateTick(){
  currentTick++;
  while (!upcomingTicks.isEmpty()) {
    TickTracker tt=upcomingTicks.peek();
    int diff=(int)(currentTick - tt.lastTick);
    if (diff >= tt.current_rate) {
      upcomingTicks.poll();
      TickRateModulation mod=tt.gt.tickingRequest(tt.node,diff);
switch (mod) {
case FASTER:
        tt.setRate(tt.current_rate - 1);
      break;
case IDLE:
    tt.setRate(tt.request.maxTickRate);
  break;
case SAME:
break;
case SLEEP:
sleepDevice(tt.node);
break;
case SLOWER:
tt.setRate(tt.current_rate + 1);
break;
case URGENT:
tt.setRate(0);
break;
default :
break;
}
if (awake.containsKey(tt.node)) addToQueue(tt);
}
 else return;
}
}","@Override public void onUpdateTick(){
  currentTick++;
  while (!upcomingTicks.isEmpty()) {
    TickTracker tt=upcomingTicks.peek();
    int diff=(int)(currentTick - tt.lastTick);
    if (diff >= tt.current_rate) {
      upcomingTicks.poll();
      TickRateModulation mod=tt.gt.tickingRequest(tt.node,diff);
switch (mod) {
case FASTER:
        tt.setRate(tt.current_rate - 2);
      break;
case IDLE:
    tt.setRate(tt.request.maxTickRate);
  break;
case SAME:
break;
case SLEEP:
sleepDevice(tt.node);
break;
case SLOWER:
tt.setRate(tt.current_rate + 1);
break;
case URGENT:
tt.setRate(0);
break;
default :
break;
}
if (awake.containsKey(tt.node)) addToQueue(tt);
}
 else return;
}
}"
30730,"private boolean importStuff(InventoryAdaptor myAdaptor,IAEItemStack whatToImport,IMEMonitor<IAEItemStack> inv,IEnergySource energy,FuzzyMode fzMode){
  if (itemToSend > 64)   itemToSend=64;
  ItemStack newItems;
  if (getInstalledUpgrades(Upgrades.FUZZY) > 0)   newItems=myAdaptor.removeSimilarItems(itemToSend,whatToImport == null ? null : whatToImport.getItemStack(),fzMode,configDest(inv));
 else   newItems=myAdaptor.removeItems(itemToSend,whatToImport == null ? null : whatToImport.getItemStack(),configDest(inv));
  if (newItems != null) {
    newItems.stackSize=(int)(Math.min(newItems.stackSize,energy.extractAEPower(newItems.stackSize,Actionable.SIMULATE,PowerMultiplier.CONFIG)) + 0.01);
    itemToSend-=newItems.stackSize;
    if (lastItemChecked == null || !lastItemChecked.isSameType(newItems))     lastItemChecked=AEApi.instance().storage().createItemStack(newItems);
 else     lastItemChecked.setStackSize(newItems.stackSize);
    IAEItemStack failed=Platform.poweredInsert(energy,destination,lastItemChecked,mySrc);
    if (failed != null) {
      myAdaptor.addItems(failed.getItemStack());
      return true;
    }
 else     worked=true;
  }
 else   return true;
  return false;
}","private boolean importStuff(InventoryAdaptor myAdaptor,IAEItemStack whatToImport,IMEMonitor<IAEItemStack> inv,IEnergySource energy,FuzzyMode fzMode){
  int toSend=this.itemToSend;
  if (toSend > 64)   toSend=64;
  ItemStack newItems;
  if (getInstalledUpgrades(Upgrades.FUZZY) > 0)   newItems=myAdaptor.removeSimilarItems(toSend,whatToImport == null ? null : whatToImport.getItemStack(),fzMode,configDest(inv));
 else   newItems=myAdaptor.removeItems(toSend,whatToImport == null ? null : whatToImport.getItemStack(),configDest(inv));
  if (newItems != null) {
    newItems.stackSize=(int)(Math.min(newItems.stackSize,energy.extractAEPower(newItems.stackSize,Actionable.SIMULATE,PowerMultiplier.CONFIG)) + 0.01);
    itemToSend-=newItems.stackSize;
    if (lastItemChecked == null || !lastItemChecked.isSameType(newItems))     lastItemChecked=AEApi.instance().storage().createItemStack(newItems);
 else     lastItemChecked.setStackSize(newItems.stackSize);
    IAEItemStack failed=Platform.poweredInsert(energy,destination,lastItemChecked,mySrc);
    if (failed != null) {
      myAdaptor.addItems(failed.getItemStack());
      return true;
    }
 else     worked=true;
  }
 else   return true;
  return false;
}"
30731,"private void visitorConnection(IGridVisitor g,LinkedList<GridNode> nextRun,LinkedList<IGridConnection> nextConnections){
  if (g.visitNode(this)) {
    for (    IGridConnection gc : getConnections()) {
      GridNode gn=(GridNode)gc.getOtherSide(this);
      GridConnection gcc=(GridConnection)gc;
      if (gcc.visitorIterationNumber != currentVisitorIterationNumber) {
        gcc.visitorIterationNumber=currentChannelsIterationNumber;
        nextConnections.add(gc);
      }
      if (currentVisitorIterationNumber == gn.visitorIterationNumber)       continue;
      gn.visitorIterationNumber=currentVisitorIterationNumber;
      nextRun.add(gn);
    }
  }
}","private void visitorConnection(Object tracker,IGridVisitor g,LinkedList<GridNode> nextRun,LinkedList<IGridConnection> nextConnections){
  if (g.visitNode(this)) {
    for (    IGridConnection gc : getConnections()) {
      GridNode gn=(GridNode)gc.getOtherSide(this);
      GridConnection gcc=(GridConnection)gc;
      if (gcc.visitorIterationNumber != tracker) {
        gcc.visitorIterationNumber=tracker;
        nextConnections.add(gc);
      }
      if (tracker == gn.visitorIterationNumber)       continue;
      gn.visitorIterationNumber=tracker;
      nextRun.add(gn);
    }
  }
}"
30732,"private void visitorNode(IGridVisitor g,LinkedList<GridNode> nextRun){
  if (g.visitNode(this)) {
    for (    IGridConnection gc : getConnections()) {
      GridNode gn=(GridNode)gc.getOtherSide(this);
      if (currentVisitorIterationNumber == gn.visitorIterationNumber)       continue;
      gn.visitorIterationNumber=currentVisitorIterationNumber;
      nextRun.add(gn);
    }
  }
}","private void visitorNode(Object tracker,IGridVisitor g,LinkedList<GridNode> nextRun){
  if (g.visitNode(this)) {
    for (    IGridConnection gc : getConnections()) {
      GridNode gn=(GridNode)gc.getOtherSide(this);
      if (tracker == gn.visitorIterationNumber)       continue;
      gn.visitorIterationNumber=tracker;
      nextRun.add(gn);
    }
  }
}"
30733,"@Override public void beginVisition(IGridVisitor g){
  currentVisitorIterationNumber++;
  LinkedList<GridNode> nextRun=new LinkedList();
  nextRun.add(this);
  visitorIterationNumber=currentVisitorIterationNumber;
  if (g instanceof IGridConnecitonVisitor) {
    LinkedList<IGridConnection> nextConn=new LinkedList();
    IGridConnecitonVisitor gcv=(IGridConnecitonVisitor)g;
    while (!nextRun.isEmpty()) {
      while (!nextConn.isEmpty())       gcv.visitConnection(nextConn.poll());
      LinkedList<GridNode> thisRun=nextRun;
      nextRun=new LinkedList();
      for (      GridNode n : thisRun)       n.visitorConnection(g,nextRun,nextConn);
    }
  }
 else {
    while (!nextRun.isEmpty()) {
      LinkedList<GridNode> thisRun=nextRun;
      nextRun=new LinkedList();
      for (      GridNode n : thisRun)       n.visitorNode(g,nextRun);
    }
  }
}","@Override public void beginVisition(IGridVisitor g){
  Object tracker=new Object();
  LinkedList<GridNode> nextRun=new LinkedList();
  nextRun.add(this);
  visitorIterationNumber=tracker;
  if (g instanceof IGridConnecitonVisitor) {
    LinkedList<IGridConnection> nextConn=new LinkedList();
    IGridConnecitonVisitor gcv=(IGridConnecitonVisitor)g;
    while (!nextRun.isEmpty()) {
      while (!nextConn.isEmpty())       gcv.visitConnection(nextConn.poll());
      LinkedList<GridNode> thisRun=nextRun;
      nextRun=new LinkedList();
      for (      GridNode n : thisRun)       n.visitorConnection(tracker,g,nextRun,nextConn);
    }
  }
 else {
    while (!nextRun.isEmpty()) {
      LinkedList<GridNode> thisRun=nextRun;
      nextRun=new LinkedList();
      for (      GridNode n : thisRun)       n.visitorNode(tracker,g,nextRun);
    }
  }
}"
30734,"@Override public void onUpdateTick(){
  if (recalculateControllerNextTick) {
    recalcController();
  }
  if (updateNetwork) {
    if (!booting)     myGrid.postEvent(new MENetworkBootingStatusChange());
    booting=true;
    updateNetwork=false;
    instance++;
    if (controllerState == ControllerState.NO_CONTROLLER) {
      int requiredChannels=calculateRequiredChanels();
      int used=requiredChannels;
      if (requiredChannels > 8)       used=0;
      int nodes=myGrid.getNodes().size();
      ticksUntilReady=20 + (nodes / 10);
      channelsByBlocks=nodes * used;
      channelPowerUsage=(double)channelsByBlocks / 128.0;
      myGrid.getPivot().beginVisition(new AdHocChannelUpdater(used));
    }
 else     if (controllerState == ControllerState.CONTROLLER_CONFLICT) {
      ticksUntilReady=20;
      myGrid.getPivot().beginVisition(new AdHocChannelUpdater(0));
    }
 else {
      int nodes=myGrid.getNodes().size();
      ticksUntilReady=20 + (nodes / 10);
      closedList=new HashSet();
      semiOpen=new HashSet();
      for (      IGridNode node : myGrid.getMachines(TileController.class)) {
        closedList.add((IPathItem)node);
        for (        IGridConnection gcc : node.getConnections()) {
          GridConnection gc=(GridConnection)gcc;
          if (!(gc.getOtherSide(node).getMachine() instanceof TileController)) {
            List open=new LinkedList();
            closedList.add(gc);
            open.add(gc);
            gc.setControllerRoute((GridNode)node,true);
            active.add(new PathSegment(this,open,semiOpen,closedList));
          }
        }
      }
    }
  }
  if (!active.isEmpty() || ticksUntilReady > 0) {
    Iterator<PathSegment> i=active.iterator();
    while (i.hasNext()) {
      PathSegment pat=i.next();
      if (pat.step()) {
        pat.isDead=true;
        i.remove();
      }
    }
    ticksUntilReady--;
    if (active.isEmpty() && ticksUntilReady <= 0) {
      if (controllerState == ControllerState.CONTROLLER_ONLINE) {
        for (        TileController tc : controllers) {
          tc.getGridNode(ForgeDirection.UNKNOWN).beginVisition(new ControllerChannelUpdater());
          break;
        }
      }
      booting=false;
      channelPowerUsage=(double)channelsByBlocks / 128.0;
      myGrid.postEvent(new MENetworkBootingStatusChange());
    }
  }
}","@Override public void onUpdateTick(){
  if (recalculateControllerNextTick) {
    recalcController();
  }
  if (updateNetwork) {
    if (!booting)     myGrid.postEvent(new MENetworkBootingStatusChange());
    booting=true;
    updateNetwork=false;
    instance++;
    if (controllerState == ControllerState.NO_CONTROLLER) {
      int requiredChannels=calculateRequiredChanels();
      int used=requiredChannels;
      if (requiredChannels > 8)       used=0;
      int nodes=myGrid.getNodes().size();
      ticksUntilReady=20 + Math.max(0,nodes / 100 - 20);
      channelsByBlocks=nodes * used;
      channelPowerUsage=(double)channelsByBlocks / 128.0;
      myGrid.getPivot().beginVisition(new AdHocChannelUpdater(used));
    }
 else     if (controllerState == ControllerState.CONTROLLER_CONFLICT) {
      ticksUntilReady=20;
      myGrid.getPivot().beginVisition(new AdHocChannelUpdater(0));
    }
 else {
      int nodes=myGrid.getNodes().size();
      ticksUntilReady=20 + Math.max(0,nodes / 100 - 20);
      closedList=new HashSet();
      semiOpen=new HashSet();
      for (      IGridNode node : myGrid.getMachines(TileController.class)) {
        closedList.add((IPathItem)node);
        for (        IGridConnection gcc : node.getConnections()) {
          GridConnection gc=(GridConnection)gcc;
          if (!(gc.getOtherSide(node).getMachine() instanceof TileController)) {
            List open=new LinkedList();
            closedList.add(gc);
            open.add(gc);
            gc.setControllerRoute((GridNode)node,true);
            active.add(new PathSegment(this,open,semiOpen,closedList));
          }
        }
      }
    }
  }
  if (!active.isEmpty() || ticksUntilReady > 0) {
    Iterator<PathSegment> i=active.iterator();
    while (i.hasNext()) {
      PathSegment pat=i.next();
      if (pat.step()) {
        pat.isDead=true;
        i.remove();
      }
    }
    ticksUntilReady--;
    if (active.isEmpty() && ticksUntilReady <= 0) {
      if (controllerState == ControllerState.CONTROLLER_ONLINE) {
        for (        TileController tc : controllers) {
          tc.getGridNode(ForgeDirection.UNKNOWN).beginVisition(new ControllerChannelUpdater());
          break;
        }
      }
      booting=false;
      channelPowerUsage=(double)channelsByBlocks / 128.0;
      myGrid.postEvent(new MENetworkBootingStatusChange());
    }
  }
}"
30735,"@Override public void onUpdateTick(){
  if (!interests.isEmpty()) {
    double oldPower=lastStoredPower;
    lastStoredPower=getStoredPower();
    EnergyThreshold low=new EnergyThreshold(Math.min(oldPower,lastStoredPower),null);
    EnergyThreshold high=new EnergyThreshold(Math.max(oldPower,lastStoredPower),null);
    for (    EnergyThreshold th : interests.subSet(low,true,high,true)) {
      ((EnergyWatcher)th.watcher).post(this);
    }
  }
  avgDrainPerTick*=(AvgLength - 1) / AvgLength;
  avgInjectionPerTick*=(AvgLength - 1) / AvgLength;
  avgDrainPerTick+=tickDrainPerTick / AvgLength;
  avgInjectionPerTick+=tickInjectionPerTick / AvgLength;
  tickDrainPerTick=0;
  tickInjectionPerTick=0;
  double drained=extractAEPower(getIdlePowerUsage(),Actionable.MODULATE,PowerMultiplier.CONFIG);
  boolean currentlyHasPower=drained >= drainPerTick - 0.1;
  if (currentlyHasPower == hasPower)   ticksSinceHasPowerChange++;
 else   ticksSinceHasPowerChange=0;
  hasPower=currentlyHasPower;
  if (hasPower && ticksSinceHasPowerChange > 30)   publicPowerState(true,myGrid);
 else   if (!hasPower)   publicPowerState(false,myGrid);
  availableTicksSinceUpdate++;
}","@Override public void onUpdateTick(){
  if (!interests.isEmpty()) {
    double oldPower=lastStoredPower;
    lastStoredPower=getStoredPower();
    EnergyThreshold low=new EnergyThreshold(Math.min(oldPower,lastStoredPower),null);
    EnergyThreshold high=new EnergyThreshold(Math.max(oldPower,lastStoredPower),null);
    for (    EnergyThreshold th : interests.subSet(low,true,high,true)) {
      ((EnergyWatcher)th.watcher).post(this);
    }
  }
  avgDrainPerTick*=(AvgLength - 1) / AvgLength;
  avgInjectionPerTick*=(AvgLength - 1) / AvgLength;
  avgDrainPerTick+=tickDrainPerTick / AvgLength;
  avgInjectionPerTick+=tickInjectionPerTick / AvgLength;
  tickDrainPerTick=0;
  tickInjectionPerTick=0;
  double drained=extractAEPower(getIdlePowerUsage(),Actionable.MODULATE,PowerMultiplier.CONFIG);
  boolean currentlyHasPower=drained >= drainPerTick - 0.001;
  if (currentlyHasPower == hasPower)   ticksSinceHasPowerChange++;
 else   ticksSinceHasPowerChange=0;
  hasPower=currentlyHasPower;
  if (hasPower && ticksSinceHasPowerChange > 30)   publicPowerState(true,myGrid);
 else   if (!hasPower)   publicPowerState(false,myGrid);
  availableTicksSinceUpdate++;
}"
30736,"@Override public void updateSetting(IConfigManager manager,Enum setting,Enum newValue){
  for (  Enum e : settings.getSettings()) {
    String Category=e.getClass().getSimpleName();
    this.get(Category,e.name(),settings.getSetting(e).name());
  }
  save();
}","@Override public void updateSetting(IConfigManager manager,Enum setting,Enum newValue){
  for (  Enum e : settings.getSettings()) {
    if (e == setting) {
      String Category=e.getClass().getSimpleName();
      Property p=this.get(Category,e.name(),settings.getSetting(e).name());
      p.set(newValue.name());
    }
  }
  save();
}"
30737,"public AEConfig(String path){
  super(new File(path + ""String_Node_Str""));
  final double DEFAULT_BC_EXCHANGE=5.0;
  final double DEFAULT_IC2_EXCHANGE=2.0;
  final double DEFAULT_RTC_EXCHANGE=1.0 / 11256.0;
  final double DEFAULT_RF_EXCHANGE=0.5;
  PowerUnits.MJ.conversionRatio=get(""String_Node_Str"",""String_Node_Str"",DEFAULT_BC_EXCHANGE).getDouble(DEFAULT_BC_EXCHANGE);
  PowerUnits.EU.conversionRatio=get(""String_Node_Str"",""String_Node_Str"",DEFAULT_IC2_EXCHANGE).getDouble(DEFAULT_IC2_EXCHANGE);
  PowerUnits.WA.conversionRatio=get(""String_Node_Str"",""String_Node_Str"",DEFAULT_RTC_EXCHANGE).getDouble(DEFAULT_RTC_EXCHANGE);
  PowerUnits.RF.conversionRatio=get(""String_Node_Str"",""String_Node_Str"",DEFAULT_RF_EXCHANGE).getDouble(DEFAULT_RF_EXCHANGE);
  double usageEffective=get(""String_Node_Str"",""String_Node_Str"",1.0).getDouble(1.0);
  PowerMultiplier.CONFIG.multiplier=Math.max(0.01,usageEffective);
  CondenserOuput.MATTER_BALLS.requiredPower=get(""String_Node_Str"",""String_Node_Str"",256).getInt(256);
  CondenserOuput.SINGULARITY.requiredPower=get(""String_Node_Str"",""String_Node_Str"",256000).getInt(256000);
  grinderOres=get(""String_Node_Str"",""String_Node_Str"",grinderOres).getStringList();
  oreDoublePercentage=get(""String_Node_Str"",""String_Node_Str"",oreDoublePercentage).getDouble(oreDoublePercentage);
  enableEffects=get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  useLargeFonts=get(""String_Node_Str"",""String_Node_Str"",false).getBoolean(false);
  settings.registerSetting(Settings.SEARCH_TOOLTIPS,YesNo.YES);
  settings.registerSetting(Settings.TERMINAL_STYLE,TerminalStyle.TALL);
  settings.registerSetting(Settings.SEARCH_MODE,SearchBoxMode.AUTOSEARCH);
  spawnChargedChance=(float)(1.0 - get(""String_Node_Str"",""String_Node_Str"",1.0 - spawnChargedChance).getDouble(1.0 - spawnChargedChance));
  minMeteoriteDistance=get(""String_Node_Str"",""String_Node_Str"",minMeteoriteDistance).getInt(minMeteoriteDistance);
  quartzOresPerCluster=get(""String_Node_Str"",""String_Node_Str"",quartzOresPerCluster).getInt(quartzOresPerCluster);
  minMeteoriteDistanceSq=minMeteoriteDistance * minMeteoriteDistance;
  WirelessBaseCost=get(""String_Node_Str"",""String_Node_Str"",WirelessBaseCost).getDouble(WirelessBaseCost);
  WirelessCostMultiplier=get(""String_Node_Str"",""String_Node_Str"",WirelessCostMultiplier).getDouble(WirelessCostMultiplier);
  WirelessBaseRange=get(""String_Node_Str"",""String_Node_Str"",WirelessBaseRange).getDouble(WirelessBaseRange);
  WirelessBoosterRangeMultiplier=get(""String_Node_Str"",""String_Node_Str"",WirelessBoosterRangeMultiplier).getDouble(WirelessBoosterRangeMultiplier);
  WirelessBoosterExp=get(""String_Node_Str"",""String_Node_Str"",WirelessBoosterExp).getDouble(WirelessBoosterExp);
  WirelessTerminalDrainMultiplier=get(""String_Node_Str"",""String_Node_Str"",WirelessTerminalDrainMultiplier).getDouble(WirelessTerminalDrainMultiplier);
  wireless_battery=get(""String_Node_Str"",""String_Node_Str"",wireless_battery).getInt(wireless_battery);
  staff_battery=get(""String_Node_Str"",""String_Node_Str"",staff_battery).getInt(staff_battery);
  manipulator_battery=get(""String_Node_Str"",""String_Node_Str"",manipulator_battery).getInt(manipulator_battery);
  portablecell_battery=get(""String_Node_Str"",""String_Node_Str"",portablecell_battery).getInt(portablecell_battery);
  mattercannon_battery=get(""String_Node_Str"",""String_Node_Str"",mattercannon_battery).getInt(mattercannon_battery);
  for (  AEFeature feature : AEFeature.values()) {
    if (feature.isVisible()) {
      if (get(""String_Node_Str"" + feature.getCategory(),feature.name(),feature.defaultVaue()).getBoolean(feature.defaultVaue()))       featureFlags.add(feature);
    }
 else     featureFlags.add(feature);
  }
  if (featureFlags.contains(AEFeature.WebsiteRecipes))   featureFlags.add(AEFeature.DuplicateItems);
  for (  Enum e : settings.getSettings()) {
    String Category=e.getClass().getSimpleName();
    this.get(Category,e.name(),settings.getSetting(e).name());
  }
  try {
    selectedPowerUnit=PowerUnits.valueOf(get(""String_Node_Str"",""String_Node_Str"",selectedPowerUnit.name()).getString());
  }
 catch (  Throwable t) {
    selectedPowerUnit=PowerUnits.AE;
  }
  for (  TickRates tr : TickRates.values()) {
    tr.Load(this);
  }
  if (isFeatureEnabled(AEFeature.SpatialIO)) {
    storageBiomeID=get(""String_Node_Str"",""String_Node_Str"",storageBiomeID).getInt(storageBiomeID);
    storageProviderID=get(""String_Node_Str"",""String_Node_Str"",storageProviderID).getInt(storageProviderID);
  }
  if (isFeatureEnabled(AEFeature.VersionChecker)) {
    try {
      latestVersion=get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString();
      latestTimeStamp=Long.parseLong(get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
    }
 catch (    NumberFormatException err) {
      latestTimeStamp=0;
    }
  }
}","public AEConfig(String path){
  super(new File(path + ""String_Node_Str""));
  final double DEFAULT_BC_EXCHANGE=5.0;
  final double DEFAULT_IC2_EXCHANGE=2.0;
  final double DEFAULT_RTC_EXCHANGE=1.0 / 11256.0;
  final double DEFAULT_RF_EXCHANGE=0.5;
  PowerUnits.MJ.conversionRatio=get(""String_Node_Str"",""String_Node_Str"",DEFAULT_BC_EXCHANGE).getDouble(DEFAULT_BC_EXCHANGE);
  PowerUnits.EU.conversionRatio=get(""String_Node_Str"",""String_Node_Str"",DEFAULT_IC2_EXCHANGE).getDouble(DEFAULT_IC2_EXCHANGE);
  PowerUnits.WA.conversionRatio=get(""String_Node_Str"",""String_Node_Str"",DEFAULT_RTC_EXCHANGE).getDouble(DEFAULT_RTC_EXCHANGE);
  PowerUnits.RF.conversionRatio=get(""String_Node_Str"",""String_Node_Str"",DEFAULT_RF_EXCHANGE).getDouble(DEFAULT_RF_EXCHANGE);
  double usageEffective=get(""String_Node_Str"",""String_Node_Str"",1.0).getDouble(1.0);
  PowerMultiplier.CONFIG.multiplier=Math.max(0.01,usageEffective);
  CondenserOuput.MATTER_BALLS.requiredPower=get(""String_Node_Str"",""String_Node_Str"",256).getInt(256);
  CondenserOuput.SINGULARITY.requiredPower=get(""String_Node_Str"",""String_Node_Str"",256000).getInt(256000);
  grinderOres=get(""String_Node_Str"",""String_Node_Str"",grinderOres).getStringList();
  oreDoublePercentage=get(""String_Node_Str"",""String_Node_Str"",oreDoublePercentage).getDouble(oreDoublePercentage);
  enableEffects=get(""String_Node_Str"",""String_Node_Str"",true).getBoolean(true);
  useLargeFonts=get(""String_Node_Str"",""String_Node_Str"",false).getBoolean(false);
  settings.registerSetting(Settings.SEARCH_TOOLTIPS,YesNo.YES);
  settings.registerSetting(Settings.TERMINAL_STYLE,TerminalStyle.TALL);
  settings.registerSetting(Settings.SEARCH_MODE,SearchBoxMode.AUTOSEARCH);
  spawnChargedChance=(float)(1.0 - get(""String_Node_Str"",""String_Node_Str"",1.0 - spawnChargedChance).getDouble(1.0 - spawnChargedChance));
  minMeteoriteDistance=get(""String_Node_Str"",""String_Node_Str"",minMeteoriteDistance).getInt(minMeteoriteDistance);
  quartzOresPerCluster=get(""String_Node_Str"",""String_Node_Str"",quartzOresPerCluster).getInt(quartzOresPerCluster);
  minMeteoriteDistanceSq=minMeteoriteDistance * minMeteoriteDistance;
  WirelessBaseCost=get(""String_Node_Str"",""String_Node_Str"",WirelessBaseCost).getDouble(WirelessBaseCost);
  WirelessCostMultiplier=get(""String_Node_Str"",""String_Node_Str"",WirelessCostMultiplier).getDouble(WirelessCostMultiplier);
  WirelessBaseRange=get(""String_Node_Str"",""String_Node_Str"",WirelessBaseRange).getDouble(WirelessBaseRange);
  WirelessBoosterRangeMultiplier=get(""String_Node_Str"",""String_Node_Str"",WirelessBoosterRangeMultiplier).getDouble(WirelessBoosterRangeMultiplier);
  WirelessBoosterExp=get(""String_Node_Str"",""String_Node_Str"",WirelessBoosterExp).getDouble(WirelessBoosterExp);
  WirelessTerminalDrainMultiplier=get(""String_Node_Str"",""String_Node_Str"",WirelessTerminalDrainMultiplier).getDouble(WirelessTerminalDrainMultiplier);
  wireless_battery=get(""String_Node_Str"",""String_Node_Str"",wireless_battery).getInt(wireless_battery);
  staff_battery=get(""String_Node_Str"",""String_Node_Str"",staff_battery).getInt(staff_battery);
  manipulator_battery=get(""String_Node_Str"",""String_Node_Str"",manipulator_battery).getInt(manipulator_battery);
  portablecell_battery=get(""String_Node_Str"",""String_Node_Str"",portablecell_battery).getInt(portablecell_battery);
  mattercannon_battery=get(""String_Node_Str"",""String_Node_Str"",mattercannon_battery).getInt(mattercannon_battery);
  for (  AEFeature feature : AEFeature.values()) {
    if (feature.isVisible()) {
      if (get(""String_Node_Str"" + feature.getCategory(),feature.name(),feature.defaultVaue()).getBoolean(feature.defaultVaue()))       featureFlags.add(feature);
    }
 else     featureFlags.add(feature);
  }
  if (featureFlags.contains(AEFeature.WebsiteRecipes))   featureFlags.add(AEFeature.DuplicateItems);
  for (  Enum e : settings.getSettings()) {
    String Category=e.getClass().getSimpleName();
    Enum value=settings.getSetting(e);
    Property p=this.get(Category,e.name(),value.name());
    try {
      value=Enum.valueOf(value.getClass(),p.getString());
    }
 catch (    IllegalArgumentException er) {
      AELog.info(""String_Node_Str"" + p.getString() + ""String_Node_Str""+ e.name()+ ""String_Node_Str""+ value.name()+ ""String_Node_Str"");
    }
    settings.putSetting(e,value);
  }
  try {
    selectedPowerUnit=PowerUnits.valueOf(get(""String_Node_Str"",""String_Node_Str"",selectedPowerUnit.name()).getString());
  }
 catch (  Throwable t) {
    selectedPowerUnit=PowerUnits.AE;
  }
  for (  TickRates tr : TickRates.values()) {
    tr.Load(this);
  }
  if (isFeatureEnabled(AEFeature.SpatialIO)) {
    storageBiomeID=get(""String_Node_Str"",""String_Node_Str"",storageBiomeID).getInt(storageBiomeID);
    storageProviderID=get(""String_Node_Str"",""String_Node_Str"",storageProviderID).getInt(storageProviderID);
  }
  if (isFeatureEnabled(AEFeature.VersionChecker)) {
    try {
      latestVersion=get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString();
      latestTimeStamp=Long.parseLong(get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").getString());
    }
 catch (    NumberFormatException err) {
      latestTimeStamp=0;
    }
  }
}"
30738,"@Override public boolean renderInWorld(AEBaseBlock blk,IBlockAccess world,int x,int y,int z,RenderBlocks renderer){
  boolean xx=world.getTileEntity(x - 1,y,z) instanceof TileController && world.getTileEntity(x + 1,y,z) instanceof TileController;
  boolean yy=world.getTileEntity(x,y - 1,z) instanceof TileController && world.getTileEntity(x,y + 1,z) instanceof TileController;
  boolean zz=world.getTileEntity(x,y,z - 1) instanceof TileController && world.getTileEntity(x,y,z + 1) instanceof TileController;
  int meta=world.getBlockMetadata(x,y,z);
  boolean hasPower=meta > 0;
  boolean isConflict=meta == 2;
  ExtraTextures lights=null;
  if (xx && !yy && !zz) {
    if (hasPower) {
      blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumnPowered.getIcon());
      if (isConflict)       lights=ExtraTextures.BlockControllerColumnConflict;
 else       lights=ExtraTextures.BlockControllerColumnLights;
    }
 else     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumn.getIcon());
    renderer.uvRotateEast=1;
    renderer.uvRotateWest=1;
    renderer.uvRotateTop=1;
    renderer.uvRotateBottom=1;
  }
 else   if (!xx && yy && !zz) {
    if (hasPower) {
      blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumnPowered.getIcon());
      if (isConflict)       lights=ExtraTextures.BlockControllerColumnConflict;
 else       lights=ExtraTextures.BlockControllerColumnLights;
    }
 else     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumn.getIcon());
    renderer.uvRotateEast=0;
    renderer.uvRotateNorth=0;
  }
 else   if (!xx && !yy && zz) {
    if (hasPower) {
      blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumnPowered.getIcon());
      if (isConflict)       lights=ExtraTextures.BlockControllerColumnConflict;
 else       lights=ExtraTextures.BlockControllerColumnLights;
    }
 else     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumn.getIcon());
    renderer.uvRotateNorth=1;
    renderer.uvRotateSouth=1;
    renderer.uvRotateTop=0;
  }
 else   if ((xx ? 1 : 0) + (yy ? 1 : 0) + (zz ? 1 : 0) >= 2) {
    int v=(Math.abs(x) + Math.abs(y) + Math.abs(z)) % 2;
    renderer.uvRotateEast=renderer.uvRotateBottom=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
    if (v == 0)     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerInsideA.getIcon());
 else     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerInsideB.getIcon());
  }
 else {
    if (hasPower) {
      blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerPowered.getIcon());
      if (isConflict)       lights=ExtraTextures.BlockControllerConflict;
 else       lights=ExtraTextures.BlockControllerLights;
    }
 else     blk.getRendererInstance().setTemporaryRenderIcon(null);
  }
  boolean out=renderer.renderStandardBlock(blk,x,y,z);
  if (lights != null) {
    Tessellator.instance.setColorOpaque_F(1.0f,1.0f,1.0f);
    Tessellator.instance.setBrightness(14 << 20 | 14 << 4);
    renderer.renderFaceXNeg(blk,x,y,z,lights.getIcon());
    renderer.renderFaceXPos(blk,x,y,z,lights.getIcon());
    renderer.renderFaceYNeg(blk,x,y,z,lights.getIcon());
    renderer.renderFaceYPos(blk,x,y,z,lights.getIcon());
    renderer.renderFaceZNeg(blk,x,y,z,lights.getIcon());
    renderer.renderFaceZPos(blk,x,y,z,lights.getIcon());
  }
  blk.getRendererInstance().setTemporaryRenderIcon(null);
  renderer.uvRotateEast=renderer.uvRotateBottom=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
  return out;
}","@Override public boolean renderInWorld(AEBaseBlock blk,IBlockAccess world,int x,int y,int z,RenderBlocks renderer){
  boolean xx=getTileEntity(world,x - 1,y,z) instanceof TileController && getTileEntity(world,x + 1,y,z) instanceof TileController;
  boolean yy=getTileEntity(world,x,y - 1,z) instanceof TileController && getTileEntity(world,x,y + 1,z) instanceof TileController;
  boolean zz=getTileEntity(world,x,y,z - 1) instanceof TileController && getTileEntity(world,x,y,z + 1) instanceof TileController;
  int meta=world.getBlockMetadata(x,y,z);
  boolean hasPower=meta > 0;
  boolean isConflict=meta == 2;
  ExtraTextures lights=null;
  if (xx && !yy && !zz) {
    if (hasPower) {
      blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumnPowered.getIcon());
      if (isConflict)       lights=ExtraTextures.BlockControllerColumnConflict;
 else       lights=ExtraTextures.BlockControllerColumnLights;
    }
 else     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumn.getIcon());
    renderer.uvRotateEast=1;
    renderer.uvRotateWest=1;
    renderer.uvRotateTop=1;
    renderer.uvRotateBottom=1;
  }
 else   if (!xx && yy && !zz) {
    if (hasPower) {
      blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumnPowered.getIcon());
      if (isConflict)       lights=ExtraTextures.BlockControllerColumnConflict;
 else       lights=ExtraTextures.BlockControllerColumnLights;
    }
 else     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumn.getIcon());
    renderer.uvRotateEast=0;
    renderer.uvRotateNorth=0;
  }
 else   if (!xx && !yy && zz) {
    if (hasPower) {
      blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumnPowered.getIcon());
      if (isConflict)       lights=ExtraTextures.BlockControllerColumnConflict;
 else       lights=ExtraTextures.BlockControllerColumnLights;
    }
 else     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerColumn.getIcon());
    renderer.uvRotateNorth=1;
    renderer.uvRotateSouth=1;
    renderer.uvRotateTop=0;
  }
 else   if ((xx ? 1 : 0) + (yy ? 1 : 0) + (zz ? 1 : 0) >= 2) {
    int v=(Math.abs(x) + Math.abs(y) + Math.abs(z)) % 2;
    renderer.uvRotateEast=renderer.uvRotateBottom=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
    if (v == 0)     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerInsideA.getIcon());
 else     blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerInsideB.getIcon());
  }
 else {
    if (hasPower) {
      blk.getRendererInstance().setTemporaryRenderIcon(ExtraTextures.BlockControllerPowered.getIcon());
      if (isConflict)       lights=ExtraTextures.BlockControllerConflict;
 else       lights=ExtraTextures.BlockControllerLights;
    }
 else     blk.getRendererInstance().setTemporaryRenderIcon(null);
  }
  boolean out=renderer.renderStandardBlock(blk,x,y,z);
  if (lights != null) {
    Tessellator.instance.setColorOpaque_F(1.0f,1.0f,1.0f);
    Tessellator.instance.setBrightness(14 << 20 | 14 << 4);
    renderer.renderFaceXNeg(blk,x,y,z,lights.getIcon());
    renderer.renderFaceXPos(blk,x,y,z,lights.getIcon());
    renderer.renderFaceYNeg(blk,x,y,z,lights.getIcon());
    renderer.renderFaceYPos(blk,x,y,z,lights.getIcon());
    renderer.renderFaceZNeg(blk,x,y,z,lights.getIcon());
    renderer.renderFaceZPos(blk,x,y,z,lights.getIcon());
  }
  blk.getRendererInstance().setTemporaryRenderIcon(null);
  renderer.uvRotateEast=renderer.uvRotateBottom=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
  return out;
}"
30739,"@Override public TickingRequest getTickingRequest(IGridNode node){
  return new TickingRequest(TickRates.METunnel.min,TickRates.METunnel.max,output,false);
}","@Override public TickingRequest getTickingRequest(IGridNode node){
  return new TickingRequest(TickRates.METunnel.min,TickRates.METunnel.max,true,false);
}"
30740,"@Override public void renderInventory(AEBaseBlock blk,ItemStack is,RenderBlocks renderer,ItemRenderType type,Object[] obj){
  GL11.glEnable(32826);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  ResourceLocation loc=new ResourceLocation(""String_Node_Str"",""String_Node_Str"");
  Minecraft.getMinecraft().getTextureManager().bindTexture(loc);
  if (type == ItemRenderType.ENTITY) {
    GL11.glRotatef(-90.0f,0.0f,0.0f,1.0f);
    GL11.glScalef(1.0F,-1F,-1F);
    GL11.glScalef(2.5f,2.5f,2.5f);
    GL11.glTranslatef(-0.25F,-1.65F,-0.19F);
  }
 else {
    if (type == ItemRenderType.EQUIPPED_FIRST_PERSON)     GL11.glRotatef(15.3f,0.0f,0.0f,1.0f);
    GL11.glScalef(1.0F,-1F,-1F);
    GL11.glScalef(2.5f,2.5f,2.5f);
    if (type == ItemRenderType.EQUIPPED_FIRST_PERSON)     GL11.glTranslatef(0.3F,-1.65F,-0.19F);
 else     GL11.glTranslatef(0.2F,-1.65F,-0.19F);
  }
  long now=System.currentTimeMillis();
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON || type == ItemRenderType.INVENTORY || type == ItemRenderType.EQUIPPED) {
    EntityPlayer p=Minecraft.getMinecraft().thePlayer;
    if (type == ItemRenderType.EQUIPPED) {
      p=(EntityPlayer)obj[1];
      p.rotationYaw=p.renderYawOffset;
    }
    int x=(int)p.posX;
    int y=(int)p.posY;
    int z=(int)p.posZ;
    CompassResult cr=CompassManager.instance.getCompassDirection(0,x,y,z);
    for (int i=0; i < 3; i++)     for (int j=0; j < 3; j++)     CompassManager.instance.getCompassDirection(0,x + i - 1,y,z + j - 1);
    if (cr.hasResult) {
      if (cr.spin) {
        now=now % 100000;
        model.renderAll(((float)now / 50000.0f) * (float)Math.PI * 500.0f);
      }
 else {
        if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
          float offRads=p.rotationYaw / 180.0f * (float)Math.PI;
          float adjustment=(float)Math.PI * 0.74f;
          model.renderAll((float)flipidiy(cr.rad + offRads + adjustment));
        }
 else {
          float offRads=p.rotationYaw / 180.0f * (float)Math.PI;
          float adjustment=(float)Math.PI * -0.74f;
          model.renderAll((float)flipidiy(cr.rad + offRads + adjustment));
        }
      }
    }
 else {
      now=now % 1000000;
      model.renderAll(((float)now / 500000.0f) * (float)Math.PI * 500.0f);
    }
  }
 else {
    now=now % 100000;
    model.renderAll(((float)now / 50000.0f) * (float)Math.PI * 500.0f);
  }
  GL11.glDisable(32826);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
}","@Override public void renderInventory(AEBaseBlock blk,ItemStack is,RenderBlocks renderer,ItemRenderType type,Object[] obj){
  GL11.glEnable(32826);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  ResourceLocation loc=new ResourceLocation(""String_Node_Str"",""String_Node_Str"");
  Minecraft.getMinecraft().getTextureManager().bindTexture(loc);
  if (type == ItemRenderType.ENTITY) {
    GL11.glRotatef(-90.0f,0.0f,0.0f,1.0f);
    GL11.glScalef(1.0F,-1F,-1F);
    GL11.glScalef(2.5f,2.5f,2.5f);
    GL11.glTranslatef(-0.25F,-1.65F,-0.19F);
  }
 else {
    if (type == ItemRenderType.EQUIPPED_FIRST_PERSON)     GL11.glRotatef(15.3f,0.0f,0.0f,1.0f);
    GL11.glScalef(1.0F,-1F,-1F);
    GL11.glScalef(2.5f,2.5f,2.5f);
    if (type == ItemRenderType.EQUIPPED_FIRST_PERSON)     GL11.glTranslatef(0.3F,-1.65F,-0.19F);
 else     GL11.glTranslatef(0.2F,-1.65F,-0.19F);
  }
  long now=System.currentTimeMillis();
  if (type == ItemRenderType.EQUIPPED_FIRST_PERSON || type == ItemRenderType.INVENTORY || type == ItemRenderType.EQUIPPED) {
    EntityPlayer p=Minecraft.getMinecraft().thePlayer;
    float rYaw=p.rotationYaw;
    if (type == ItemRenderType.EQUIPPED) {
      p=(EntityPlayer)obj[1];
      rYaw=p.renderYawOffset;
    }
    int x=(int)p.posX;
    int y=(int)p.posY;
    int z=(int)p.posZ;
    CompassResult cr=CompassManager.instance.getCompassDirection(0,x,y,z);
    for (int i=0; i < 3; i++)     for (int j=0; j < 3; j++)     CompassManager.instance.getCompassDirection(0,x + i - 1,y,z + j - 1);
    if (cr.hasResult) {
      if (cr.spin) {
        now=now % 100000;
        model.renderAll(((float)now / 50000.0f) * (float)Math.PI * 500.0f);
      }
 else {
        if (type == ItemRenderType.EQUIPPED_FIRST_PERSON) {
          float offRads=rYaw / 180.0f * (float)Math.PI;
          float adjustment=(float)Math.PI * 0.74f;
          model.renderAll((float)flipidiy(cr.rad + offRads + adjustment));
        }
 else {
          float offRads=rYaw / 180.0f * (float)Math.PI;
          float adjustment=(float)Math.PI * -0.74f;
          model.renderAll((float)flipidiy(cr.rad + offRads + adjustment));
        }
      }
    }
 else {
      now=now % 1000000;
      model.renderAll(((float)now / 500000.0f) * (float)Math.PI * 500.0f);
    }
  }
 else {
    now=now % 100000;
    model.renderAll(((float)now / 50000.0f) * (float)Math.PI * 500.0f);
  }
  GL11.glDisable(32826);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
}"
30741,"@EventHandler void Init(FMLInitializationEvent event){
  AELog.info(""String_Node_Str"");
  Registration.instance.Init(event);
  integrationModules.init();
  AELog.info(""String_Node_Str"");
}","@EventHandler void Init(FMLInitializationEvent event){
  Stopwatch star=Stopwatch.createStarted();
  AELog.info(""String_Node_Str"");
  Registration.instance.Init(event);
  integrationModules.init();
  AELog.info(""String_Node_Str"" + star.elapsed(TimeUnit.MILLISECONDS) + ""String_Node_Str"");
}"
30742,"@EventHandler void PostInit(FMLPostInitializationEvent event){
  AELog.info(""String_Node_Str"");
  Registration.instance.PostInit(event);
  integrationModules.postinit();
  AEConfig.instance.save();
  NetworkRegistry.INSTANCE.registerGuiHandler(this,GuiBridge.GUI_Handler);
  NetworkHandler.instance=new NetworkHandler(""String_Node_Str"");
  AELog.info(""String_Node_Str"");
}","@EventHandler void PostInit(FMLPostInitializationEvent event){
  Stopwatch star=Stopwatch.createStarted();
  AELog.info(""String_Node_Str"");
  Registration.instance.PostInit(event);
  integrationModules.postinit();
  AEConfig.instance.save();
  NetworkRegistry.INSTANCE.registerGuiHandler(this,GuiBridge.GUI_Handler);
  NetworkHandler.instance=new NetworkHandler(""String_Node_Str"");
  AELog.info(""String_Node_Str"" + star.elapsed(TimeUnit.MILLISECONDS) + ""String_Node_Str"");
}"
30743,"@EventHandler void PreInit(FMLPreInitializationEvent event){
  configPath=event.getModConfigurationDirectory().getPath() + File.separator + ""String_Node_Str""+ File.separator;
  AEConfig.instance=new AEConfig(configPath);
  FacadeConfig.instance=new FacadeConfig(configPath);
  AELog.info(""String_Node_Str"");
  if (Platform.isClient()) {
    CreativeTab.init();
    CreativeTabFacade.init();
    CommonHelper.proxy.init();
  }
  Registration.instance.PreInit(event);
  if (AEConfig.instance.isFeatureEnabled(AEFeature.Profiler)) {
    AELog.info(""String_Node_Str"");
    startService(""String_Node_Str"",(new Thread(Profiler.instance=new Profiler())));
  }
  if (AEConfig.instance.isFeatureEnabled(AEFeature.VersionChecker)) {
    AELog.info(""String_Node_Str"");
    startService(""String_Node_Str"",new Thread(VersionChecker.instance=new VersionChecker()));
  }
  AELog.info(""String_Node_Str"");
}","@EventHandler void PreInit(FMLPreInitializationEvent event){
  Stopwatch star=Stopwatch.createStarted();
  configPath=event.getModConfigurationDirectory().getPath() + File.separator + ""String_Node_Str""+ File.separator;
  AEConfig.instance=new AEConfig(configPath);
  FacadeConfig.instance=new FacadeConfig(configPath);
  AELog.info(""String_Node_Str"");
  if (Platform.isClient()) {
    CreativeTab.init();
    CreativeTabFacade.init();
    CommonHelper.proxy.init();
  }
  Registration.instance.PreInit(event);
  if (AEConfig.instance.isFeatureEnabled(AEFeature.Profiler)) {
    AELog.info(""String_Node_Str"");
    startService(""String_Node_Str"",(new Thread(Profiler.instance=new Profiler())));
  }
  if (AEConfig.instance.isFeatureEnabled(AEFeature.VersionChecker)) {
    AELog.info(""String_Node_Str"");
    startService(""String_Node_Str"",new Thread(VersionChecker.instance=new VersionChecker()));
  }
  AELog.info(""String_Node_Str"" + star.elapsed(TimeUnit.MILLISECONDS) + ""String_Node_Str"");
}"
30744,"public TileInscriberHandler(){
  super(TileEventType.TICK,TileEventType.WORLD_NBT,TileEventType.NETWORK);
}","public TileInscriberHandler(){
  super(TileEventType.WORLD_NBT,TileEventType.NETWORK);
}"
30745,"public InscriberRecipe getTask(){
  ItemStack PlateA=getStackInSlot(0);
  ItemStack PlateB=getStackInSlot(1);
  boolean isNameA=AEApi.instance().materials().materialNamePress.sameAs(PlateA);
  boolean isNameB=AEApi.instance().materials().materialNamePress.sameAs(PlateB);
  if ((isNameA || isNameB) && (isNameA || PlateA == null) && (isNameB || PlateB == null)) {
    ItemStack renamedItem=getStackInSlot(2);
    if (renamedItem != null) {
      String name=""String_Node_Str"";
      if (PlateA != null) {
        NBTTagCompound tag=Platform.openNbtData(PlateA);
        name+=tag.getString(""String_Node_Str"");
      }
      if (PlateB != null) {
        NBTTagCompound tag=Platform.openNbtData(PlateB);
        if (name.length() > 0)         name+=""String_Node_Str"";
        name+=tag.getString(""String_Node_Str"");
      }
      ItemStack startingItem=renamedItem.copy();
      renamedItem=renamedItem.copy();
      NBTTagCompound tag=Platform.openNbtData(renamedItem);
      NBTTagCompound display=tag.getCompoundTag(""String_Node_Str"");
      tag.setTag(""String_Node_Str"",display);
      if (name.length() > 0)       display.setString(""String_Node_Str"",name);
 else       display.removeTag(""String_Node_Str"");
      return new InscriberRecipe(new ItemStack[]{startingItem},PlateA,PlateB,renamedItem,false);
    }
  }
  for (  InscriberRecipe i : Inscribe.recipes) {
    boolean matchA=(PlateA == null && i.plateA == null) || (Platform.isSameItemPrecise(PlateA,i.plateA)) && (PlateB == null && i.plateB == null) | (Platform.isSameItemPrecise(PlateB,i.plateB));
    boolean matchB=(PlateB == null && i.plateA == null) || (Platform.isSameItemPrecise(PlateB,i.plateA)) && (PlateA == null && i.plateB == null) | (Platform.isSameItemPrecise(PlateA,i.plateB));
    if (matchA || matchB) {
      for (      ItemStack opion : i.imprintable) {
        if (Platform.isSameItemPrecise(opion,getStackInSlot(2)))         return i;
      }
    }
  }
  return null;
}","public InscriberRecipe getTask(){
  ItemStack PlateA=getStackInSlot(0);
  ItemStack PlateB=getStackInSlot(1);
  ItemStack renamedItem=getStackInSlot(2);
  if (PlateA != null && PlateA.stackSize > 1)   return null;
  if (PlateB != null && PlateB.stackSize > 1)   return null;
  if (renamedItem != null && renamedItem.stackSize > 1)   return null;
  boolean isNameA=AEApi.instance().materials().materialNamePress.sameAs(PlateA);
  boolean isNameB=AEApi.instance().materials().materialNamePress.sameAs(PlateB);
  if ((isNameA || isNameB) && (isNameA || PlateA == null) && (isNameB || PlateB == null)) {
    if (renamedItem != null) {
      String name=""String_Node_Str"";
      if (PlateA != null) {
        NBTTagCompound tag=Platform.openNbtData(PlateA);
        name+=tag.getString(""String_Node_Str"");
      }
      if (PlateB != null) {
        NBTTagCompound tag=Platform.openNbtData(PlateB);
        if (name.length() > 0)         name+=""String_Node_Str"";
        name+=tag.getString(""String_Node_Str"");
      }
      ItemStack startingItem=renamedItem.copy();
      renamedItem=renamedItem.copy();
      NBTTagCompound tag=Platform.openNbtData(renamedItem);
      NBTTagCompound display=tag.getCompoundTag(""String_Node_Str"");
      tag.setTag(""String_Node_Str"",display);
      if (name.length() > 0)       display.setString(""String_Node_Str"",name);
 else       display.removeTag(""String_Node_Str"");
      return new InscriberRecipe(new ItemStack[]{startingItem},PlateA,PlateB,renamedItem,false);
    }
  }
  for (  InscriberRecipe i : Inscribe.recipes) {
    boolean matchA=(PlateA == null && i.plateA == null) || (Platform.isSameItemPrecise(PlateA,i.plateA)) && (PlateB == null && i.plateB == null) | (Platform.isSameItemPrecise(PlateB,i.plateB));
    boolean matchB=(PlateB == null && i.plateA == null) || (Platform.isSameItemPrecise(PlateB,i.plateA)) && (PlateA == null && i.plateB == null) | (Platform.isSameItemPrecise(PlateA,i.plateB));
    if (matchA || matchB) {
      for (      ItemStack opion : i.imprintable) {
        if (Platform.isSameItemPrecise(opion,getStackInSlot(2)))         return i;
      }
    }
  }
  return null;
}"
30746,"@Override public void addNode(IGridNode node,IGridHost machine){
  if (machine instanceof IEnergyGridProvider)   gproviders.add((IEnergyGridProvider)machine);
  GridNode gnode=(GridNode)node;
  IGridBlock gb=gnode.getGridBlock();
  gnode.previousDraw=gb.getIdlePowerUsage();
  drainPerTick+=gnode.previousDraw;
  if (machine instanceof IAEPowerStorage) {
    IAEPowerStorage ps=(IAEPowerStorage)machine;
    if (ps.isAEPublicPowerStorage()) {
      double max=ps.getAEMaxPower();
      double current=ps.getAECurrentPower();
      if (current > 0 && ps.getPowerFlow() != AccessRestriction.WRITE) {
        globalMaxPower+=ps.getAEMaxPower();
        globalAvailablePower+=((IAEPowerStorage)machine).getAECurrentPower();
        providers.add(ps);
      }
      if (current < max && ps.getPowerFlow() != AccessRestriction.READ)       requesters.add(ps);
    }
  }
  if (machine instanceof IEnergyWatcherHost) {
    IEnergyWatcherHost swh=(IEnergyWatcherHost)machine;
    EnergyWatcher iw=new EnergyWatcher(this,(IEnergyWatcherHost)swh);
    watchers.put(node,iw);
    swh.updateWatcher(iw);
  }
  myGrid.postEventTo(node,new MENetworkPowerStatusChange());
}","@Override public void addNode(IGridNode node,IGridHost machine){
  if (machine instanceof IEnergyGridProvider)   gproviders.add((IEnergyGridProvider)machine);
  GridNode gnode=(GridNode)node;
  IGridBlock gb=gnode.getGridBlock();
  gnode.previousDraw=gb.getIdlePowerUsage();
  drainPerTick+=gnode.previousDraw;
  if (machine instanceof IAEPowerStorage) {
    IAEPowerStorage ps=(IAEPowerStorage)machine;
    if (ps.isAEPublicPowerStorage()) {
      double max=ps.getAEMaxPower();
      double current=ps.getAECurrentPower();
      if (ps.getPowerFlow() != AccessRestriction.WRITE) {
        globalMaxPower+=ps.getAEMaxPower();
      }
      if (current > 0 && ps.getPowerFlow() != AccessRestriction.WRITE) {
        globalAvailablePower+=current;
        providers.add(ps);
      }
      if (current < max && ps.getPowerFlow() != AccessRestriction.READ)       requesters.add(ps);
    }
  }
  if (machine instanceof IEnergyWatcherHost) {
    IEnergyWatcherHost swh=(IEnergyWatcherHost)machine;
    EnergyWatcher iw=new EnergyWatcher(this,(IEnergyWatcherHost)swh);
    watchers.put(node,iw);
    swh.updateWatcher(iw);
  }
  myGrid.postEventTo(node,new MENetworkPowerStatusChange());
}"
30747,"@Override public boolean onActivated(World w,int x,int y,int z,EntityPlayer p,int side,float hitX,float hitY,float hitZ){
  TileChest tg=getTileEntity(w,x,y,z);
  if (tg != null && !p.isSneaking()) {
    if (Platform.isClient())     return true;
    if (side != tg.getUp().ordinal()) {
      Platform.openGUI(p,tg,ForgeDirection.getOrientation(side),GuiBridge.GUI_CHEST);
    }
 else     if (tg.isPowered()) {
      ItemStack cell=tg.getStackInSlot(1);
      if (cell != null) {
        ICellHandler ch=AEApi.instance().registries().cell().getHander(cell);
        tg.openGui(p,ch,cell,side);
      }
 else       p.addChatMessage(PlayerMessages.ChestCannotReadStorageCell.get());
    }
 else     p.addChatMessage(PlayerMessages.MachineNotPowered.get());
    return true;
  }
  return false;
}","@Override public boolean onActivated(World w,int x,int y,int z,EntityPlayer p,int side,float hitX,float hitY,float hitZ){
  TileChest tg=getTileEntity(w,x,y,z);
  if (tg != null && !p.isSneaking()) {
    if (Platform.isClient())     return true;
    if (side != tg.getUp().ordinal()) {
      Platform.openGUI(p,tg,ForgeDirection.getOrientation(side),GuiBridge.GUI_CHEST);
    }
 else     if (tg.isPowered()) {
      ItemStack cell=tg.getStackInSlot(1);
      if (cell != null) {
        ICellHandler ch=AEApi.instance().registries().cell().getHandler(cell);
        tg.openGui(p,ch,cell,side);
      }
 else       p.addChatMessage(PlayerMessages.ChestCannotReadStorageCell.get());
    }
 else     p.addChatMessage(PlayerMessages.MachineNotPowered.get());
    return true;
  }
  return false;
}"
30748,"@Override public boolean renderInWorld(AEBaseBlock imb,IBlockAccess world,int x,int y,int z,RenderBlocks renderer){
  TileChest sp=imb.getTileEntity(world,x,y,z);
  renderer.setRenderBounds(0,0,0,1,1,1);
  ForgeDirection up=sp.getUp();
  ForgeDirection forward=sp.getForward();
  ForgeDirection west=Platform.crossProduct(forward,up);
  preRenderInWorld(imb,world,x,y,z,renderer);
  int stat=sp.getCellStatus(0);
  boolean result=renderer.renderStandardBlock(imb,x,y,z);
  selectFace(renderer,west,up,forward,5,16 - 5,9,12);
  int offsetU=-4;
  int offsetV=8;
  if (stat == 0)   offsetV=3;
  int b=world.getLightBrightnessForSkyBlocks(x + forward.offsetX,y + forward.offsetY,z + forward.offsetZ,0);
  Tessellator.instance.setBrightness(b);
  Tessellator.instance.setColorOpaque_I(0xffffff);
  FlipableIcon fico=new FlipableIcon(new OffsetIcon(ExtraTextures.MEStorageCellTextures.getIcon(),offsetU,offsetV));
  if (forward == ForgeDirection.EAST && (up == ForgeDirection.NORTH || up == ForgeDirection.SOUTH))   fico.setFlip(true,false);
 else   if (forward == ForgeDirection.NORTH && up == ForgeDirection.EAST)   fico.setFlip(false,true);
 else   if (forward == ForgeDirection.NORTH && up == ForgeDirection.WEST)   fico.setFlip(true,false);
 else   if (forward == ForgeDirection.DOWN && up == ForgeDirection.EAST)   fico.setFlip(false,true);
 else   if (forward == ForgeDirection.DOWN)   fico.setFlip(true,false);
 else   if (forward == ForgeDirection.EAST && up == ForgeDirection.UP)   fico.setFlip(true,false);
 else   if (forward == ForgeDirection.NORTH && up == ForgeDirection.UP)   fico.setFlip(true,false);
  renderFace(x,y,z,imb,fico,renderer,forward);
  if (stat != 0) {
    b=0;
    if (sp.isPowered()) {
      b=15 << 20 | 15 << 4;
    }
    Tessellator.instance.setBrightness(b);
    if (stat == 1)     Tessellator.instance.setColorOpaque_I(0x00ff00);
    if (stat == 2)     Tessellator.instance.setColorOpaque_I(0xffaa00);
    if (stat == 3)     Tessellator.instance.setColorOpaque_I(0xff0000);
    selectFace(renderer,west,up,forward,9,10,11,12);
    renderFace(x,y,z,imb,ExtraTextures.White.getIcon(),renderer,forward);
  }
  b=world.getLightBrightnessForSkyBlocks(x + up.offsetX,y + up.offsetY,z + up.offsetZ,0);
  if (sp.isPowered()) {
    b=15 << 20 | 15 << 4;
  }
  Tessellator.instance.setBrightness(b);
  Tessellator.instance.setColorOpaque_I(0xffffff);
  renderer.setRenderBounds(0,0,0,1,1,1);
  ICellHandler ch=AEApi.instance().registries().cell().getHander(sp.getStorageType());
  IIcon ico=ch == null ? null : ch.getTopTexture();
  renderFace(x,y,z,imb,ico == null ? ExtraTextures.MEChest.getIcon() : ico,renderer,up);
  renderer.overrideBlockTexture=null;
  postRenderInWorld(renderer);
  return result;
}","@Override public boolean renderInWorld(AEBaseBlock imb,IBlockAccess world,int x,int y,int z,RenderBlocks renderer){
  TileChest sp=imb.getTileEntity(world,x,y,z);
  renderer.setRenderBounds(0,0,0,1,1,1);
  ForgeDirection up=sp.getUp();
  ForgeDirection forward=sp.getForward();
  ForgeDirection west=Platform.crossProduct(forward,up);
  preRenderInWorld(imb,world,x,y,z,renderer);
  int stat=sp.getCellStatus(0);
  boolean result=renderer.renderStandardBlock(imb,x,y,z);
  selectFace(renderer,west,up,forward,5,16 - 5,9,12);
  int offsetU=-4;
  int offsetV=8;
  if (stat == 0)   offsetV=3;
  int b=world.getLightBrightnessForSkyBlocks(x + forward.offsetX,y + forward.offsetY,z + forward.offsetZ,0);
  Tessellator.instance.setBrightness(b);
  Tessellator.instance.setColorOpaque_I(0xffffff);
  FlipableIcon fico=new FlipableIcon(new OffsetIcon(ExtraTextures.MEStorageCellTextures.getIcon(),offsetU,offsetV));
  if (forward == ForgeDirection.EAST && (up == ForgeDirection.NORTH || up == ForgeDirection.SOUTH))   fico.setFlip(true,false);
 else   if (forward == ForgeDirection.NORTH && up == ForgeDirection.EAST)   fico.setFlip(false,true);
 else   if (forward == ForgeDirection.NORTH && up == ForgeDirection.WEST)   fico.setFlip(true,false);
 else   if (forward == ForgeDirection.DOWN && up == ForgeDirection.EAST)   fico.setFlip(false,true);
 else   if (forward == ForgeDirection.DOWN)   fico.setFlip(true,false);
 else   if (forward == ForgeDirection.EAST && up == ForgeDirection.UP)   fico.setFlip(true,false);
 else   if (forward == ForgeDirection.NORTH && up == ForgeDirection.UP)   fico.setFlip(true,false);
  renderFace(x,y,z,imb,fico,renderer,forward);
  if (stat != 0) {
    b=0;
    if (sp.isPowered()) {
      b=15 << 20 | 15 << 4;
    }
    Tessellator.instance.setBrightness(b);
    if (stat == 1)     Tessellator.instance.setColorOpaque_I(0x00ff00);
    if (stat == 2)     Tessellator.instance.setColorOpaque_I(0xffaa00);
    if (stat == 3)     Tessellator.instance.setColorOpaque_I(0xff0000);
    selectFace(renderer,west,up,forward,9,10,11,12);
    renderFace(x,y,z,imb,ExtraTextures.White.getIcon(),renderer,forward);
  }
  b=world.getLightBrightnessForSkyBlocks(x + up.offsetX,y + up.offsetY,z + up.offsetZ,0);
  if (sp.isPowered()) {
    b=15 << 20 | 15 << 4;
  }
  Tessellator.instance.setBrightness(b);
  Tessellator.instance.setColorOpaque_I(0xffffff);
  renderer.setRenderBounds(0,0,0,1,1,1);
  ICellHandler ch=AEApi.instance().registries().cell().getHandler(sp.getStorageType());
  IIcon ico=ch == null ? null : ch.getTopTexture();
  renderFace(x,y,z,imb,ico == null ? ExtraTextures.MEChest.getIcon() : ico,renderer,up);
  renderer.overrideBlockTexture=null;
  postRenderInWorld(renderer);
  return result;
}"
30749,"public IMEInventoryHandler getHandler(StorageChannel channel) throws ChestNoHandler {
  if (!isCached) {
    icell=null;
    fcell=null;
    ItemStack is=inv.getStackInSlot(1);
    if (is != null) {
      isCached=true;
      cellHandler=AEApi.instance().registries().cell().getHander(is);
      if (cellHandler != null) {
        double power=1.0;
        IMEInventoryHandler<IAEItemStack> itemCell=cellHandler.getCellInventory(is,StorageChannel.ITEMS);
        IMEInventoryHandler<IAEFluidStack> fluidCell=cellHandler.getCellInventory(is,StorageChannel.FLUIDS);
        if (itemCell != null)         power+=cellHandler.cellIdleDrain(is,itemCell);
 else         if (fluidCell != null)         power+=cellHandler.cellIdleDrain(is,fluidCell);
        gridProxy.setIdlePowerUsage(power);
        icell=wrap(itemCell);
        fcell=wrap(fluidCell);
      }
    }
  }
switch (channel) {
case FLUIDS:
    if (fcell == null)     throw noHandler;
  return fcell;
case ITEMS:
if (icell == null) throw noHandler;
return icell;
default :
}
return null;
}","public IMEInventoryHandler getHandler(StorageChannel channel) throws ChestNoHandler {
  if (!isCached) {
    icell=null;
    fcell=null;
    ItemStack is=inv.getStackInSlot(1);
    if (is != null) {
      isCached=true;
      cellHandler=AEApi.instance().registries().cell().getHandler(is);
      if (cellHandler != null) {
        double power=1.0;
        IMEInventoryHandler<IAEItemStack> itemCell=cellHandler.getCellInventory(is,StorageChannel.ITEMS);
        IMEInventoryHandler<IAEFluidStack> fluidCell=cellHandler.getCellInventory(is,StorageChannel.FLUIDS);
        if (itemCell != null)         power+=cellHandler.cellIdleDrain(is,itemCell);
 else         if (fluidCell != null)         power+=cellHandler.cellIdleDrain(is,fluidCell);
        gridProxy.setIdlePowerUsage(power);
        icell=wrap(itemCell);
        fcell=wrap(fluidCell);
      }
    }
  }
switch (channel) {
case FLUIDS:
    if (fcell == null)     throw noHandler;
  return fcell;
case ITEMS:
if (icell == null) throw noHandler;
return icell;
default :
}
return null;
}"
30750,"@Override public int getCellStatus(int slot){
  if (Platform.isClient())   return (state >> (slot * 3)) & 3;
  ItemStack cell=inv.getStackInSlot(1);
  ICellHandler ch=AEApi.instance().registries().cell().getHander(cell);
  if (ch != null) {
    try {
      IMEInventoryHandler handler=getHandler(StorageChannel.ITEMS);
      if (ch != null && handler instanceof ChestMonitorHandler)       return ch.getStatusForCell(cell,((ChestMonitorHandler)handler).getInternalHandler());
    }
 catch (    ChestNoHandler e) {
    }
    try {
      IMEInventoryHandler handler=getHandler(StorageChannel.FLUIDS);
      if (ch != null && handler instanceof ChestMonitorHandler)       return ch.getStatusForCell(cell,((ChestMonitorHandler)handler).getInternalHandler());
    }
 catch (    ChestNoHandler e) {
    }
  }
  return 0;
}","@Override public int getCellStatus(int slot){
  if (Platform.isClient())   return (state >> (slot * 3)) & 3;
  ItemStack cell=inv.getStackInSlot(1);
  ICellHandler ch=AEApi.instance().registries().cell().getHandler(cell);
  if (ch != null) {
    try {
      IMEInventoryHandler handler=getHandler(StorageChannel.ITEMS);
      if (ch != null && handler instanceof ChestMonitorHandler)       return ch.getStatusForCell(cell,((ChestMonitorHandler)handler).getInternalHandler());
    }
 catch (    ChestNoHandler e) {
    }
    try {
      IMEInventoryHandler handler=getHandler(StorageChannel.FLUIDS);
      if (ch != null && handler instanceof ChestMonitorHandler)       return ch.getStatusForCell(cell,((ChestMonitorHandler)handler).getInternalHandler());
    }
 catch (    ChestNoHandler e) {
    }
  }
  return 0;
}"
30751,"public void updateState(){
  if (!isCached) {
    items=new LinkedList();
    fluids=new LinkedList();
    double power=2.0;
    for (int x=0; x < inv.getSizeInventory(); x++) {
      ItemStack is=inv.getStackInSlot(x);
      invBySlot[x]=null;
      handlersBySlot[x]=null;
      if (is != null) {
        handlersBySlot[x]=AEApi.instance().registries().cell().getHander(is);
        if (handlersBySlot[x] != null) {
          IMEInventoryHandler cell=handlersBySlot[x].getCellInventory(is,StorageChannel.ITEMS);
          if (cell != null) {
            power+=handlersBySlot[x].cellIdleDrain(is,cell);
            DriveWatcher<IAEItemStack> ih=new DriveWatcher(cell,is,handlersBySlot[x],this);
            ih.myPriority=priority;
            invBySlot[x]=ih;
            items.add(ih);
          }
 else {
            cell=handlersBySlot[x].getCellInventory(is,StorageChannel.FLUIDS);
            if (cell != null) {
              power+=handlersBySlot[x].cellIdleDrain(is,cell);
              DriveWatcher<IAEItemStack> ih=new DriveWatcher(cell,is,handlersBySlot[x],this);
              ih.myPriority=priority;
              invBySlot[x]=ih;
              fluids.add(ih);
            }
          }
        }
      }
    }
    gridProxy.setIdlePowerUsage(power);
    isCached=true;
  }
}","public void updateState(){
  if (!isCached) {
    items=new LinkedList();
    fluids=new LinkedList();
    double power=2.0;
    for (int x=0; x < inv.getSizeInventory(); x++) {
      ItemStack is=inv.getStackInSlot(x);
      invBySlot[x]=null;
      handlersBySlot[x]=null;
      if (is != null) {
        handlersBySlot[x]=AEApi.instance().registries().cell().getHandler(is);
        if (handlersBySlot[x] != null) {
          IMEInventoryHandler cell=handlersBySlot[x].getCellInventory(is,StorageChannel.ITEMS);
          if (cell != null) {
            power+=handlersBySlot[x].cellIdleDrain(is,cell);
            DriveWatcher<IAEItemStack> ih=new DriveWatcher(cell,is,handlersBySlot[x],this);
            ih.myPriority=priority;
            invBySlot[x]=ih;
            items.add(ih);
          }
 else {
            cell=handlersBySlot[x].getCellInventory(is,StorageChannel.FLUIDS);
            if (cell != null) {
              power+=handlersBySlot[x].cellIdleDrain(is,cell);
              DriveWatcher<IAEItemStack> ih=new DriveWatcher(cell,is,handlersBySlot[x],this);
              ih.myPriority=priority;
              invBySlot[x]=ih;
              fluids.add(ih);
            }
          }
        }
      }
    }
    gridProxy.setIdlePowerUsage(power);
    isCached=true;
  }
}"
30752,"@EventHandler public void serverStarting(FMLServerStartingEvent evt){
  WorldSettings.getInstance().init();
  evt.registerServerCommand(new AECommand(evt.getServer()));
}","@EventHandler public void serverStarting(FMLServerStartingEvent evt){
  evt.registerServerCommand(new AECommand(evt.getServer()));
}"
30753,"@Override public void generate(Random r,int chunkX,int chunkZ,World w,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (r.nextFloat() > 0.9) {
    int x=r.nextInt(16) + (chunkX << 4);
    int z=r.nextInt(16) + (chunkZ << 4);
    myGen obj=new myGen();
    Future<?> future=WorldSettings.getInstance().getCompass().getCompassDirection(new DimensionalCoord(w,x,128,z),70,obj);
    try {
      future.get();
      if (obj.distance > AEConfig.instance.minMeteoriteDistanceSq) {
        int depth=180 + r.nextInt(20);
        for (int trys=0; trys < 20; trys++) {
          MeteoritePlacer mp=new MeteoritePlacer();
          if (mp.spawnMeteorite(w,x,depth,z))           return;
          depth-=15;
          if (depth < 40)           return;
        }
      }
    }
 catch (    InterruptedException e) {
      AELog.error(e);
    }
catch (    ExecutionException e) {
      AELog.error(e);
    }
  }
}","@Override public void generate(Random r,int chunkX,int chunkZ,World w,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
  if (r.nextFloat() > 0.9) {
    int x=r.nextInt(16) + (chunkX << 4);
    int z=r.nextInt(16) + (chunkZ << 4);
    myGen obj=new myGen();
    Future<?> future=WorldSettings.getInstance().getCompass().getCompassDirection(new DimensionalCoord(w,x,128,z),70,obj);
    try {
      future.get();
      if (obj.distance > AEConfig.instance.minMeteoriteDistanceSq) {
        int depth=180 + r.nextInt(20);
        for (int trys=0; trys < 20; trys++) {
          MeteoritePlacer mp=new MeteoritePlacer();
          if (mp.spawnMeteorite(w,x,depth,z))           return;
          depth-=15;
          if (depth < 40)           return;
        }
      }
    }
 catch (    Throwable e) {
      AELog.error(e);
    }
  }
}"
30754,"@Override protected boolean checkHotbarKeys(int p_146983_1_){
  Slot theSlot=ReflectionHelper.getPrivateValue(GuiContainer.class,this,""String_Node_Str"");
  if (this.mc.thePlayer.inventory.getItemStack() == null && theSlot != null) {
    for (int j=0; j < 9; ++j) {
      if (p_146983_1_ == this.mc.gameSettings.keyBindsHotbar[j].getKeyCode()) {
        if (theSlot.getSlotStackLimit() == 64) {
          this.handleMouseClick(theSlot,theSlot.slotNumber,j,2);
          return true;
        }
 else {
          try {
            for (            Slot s : (List<Slot>)inventorySlots.inventorySlots) {
              if (s.getSlotIndex() == j && s.inventory == ((AEBaseContainer)inventorySlots).getPlayerInv()) {
                NetworkHandler.instance.sendToServer(new PacketSwapSlots(s.slotNumber,theSlot.slotNumber));
                return true;
              }
            }
          }
 catch (          IOException e) {
            AELog.error(e);
          }
        }
      }
    }
  }
  return false;
}","@Override protected boolean checkHotbarKeys(int p_146983_1_){
  Slot theSlot;
  try {
    theSlot=ObfuscationReflectionHelper.getPrivateValue(GuiContainer.class,this,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Throwable t) {
    return false;
  }
  if (this.mc.thePlayer.inventory.getItemStack() == null && theSlot != null) {
    for (int j=0; j < 9; ++j) {
      if (p_146983_1_ == this.mc.gameSettings.keyBindsHotbar[j].getKeyCode()) {
        if (theSlot.getSlotStackLimit() == 64) {
          this.handleMouseClick(theSlot,theSlot.slotNumber,j,2);
          return true;
        }
 else {
          try {
            for (            Slot s : (List<Slot>)inventorySlots.inventorySlots) {
              if (s.getSlotIndex() == j && s.inventory == ((AEBaseContainer)inventorySlots).getPlayerInv()) {
                NetworkHandler.instance.sendToServer(new PacketSwapSlots(s.slotNumber,theSlot.slotNumber));
                return true;
              }
            }
          }
 catch (          IOException e) {
            AELog.error(e);
          }
        }
      }
    }
  }
  return false;
}"
30755,"@Override public boolean isLadder(EntityLivingBase entity){
  return mySide.offsetY == 0;
}","@Override public boolean isLadder(EntityLivingBase entity){
  return mySide.offsetY == 0 && entity.isCollidedHorizontally;
}"
30756,"@Override public boolean isDamaged(ItemStack stack){
  if (stack.getItemDamage() % 200 == 0)   return false;
  return true;
}","@Override public boolean isDamaged(ItemStack stack){
  return false;
}"
30757,"@Override public boolean onItemUseFirst(ItemStack is,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block b=world.getBlock(x,y,z);
  if (b != null && !player.isSneaking()) {
    if (b.rotateBlock(world,x,y,z,ForgeDirection.getOrientation(side))) {
      player.swingItem();
      return !world.isRemote;
    }
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack is,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  Block b=world.getBlock(x,y,z);
  if (b != null && !player.isSneaking()) {
    ForgeDirection mySide=ForgeDirection.getOrientation(side);
    if (b.rotateBlock(world,x,y,z,mySide)) {
      b.onNeighborBlockChange(world,x,y,z,Platform.air);
      player.swingItem();
      return !world.isRemote;
    }
  }
  return false;
}"
30758,"@MENetworkEventSubscribe public void updateChannels(MENetworkChannelsChanged chann){
  boolean currentActive=proxy.isActive();
  if (wasActive != currentActive) {
    wasActive=currentActive;
    try {
      proxy.getGrid().postEvent(new MENetworkCellArrayUpdate());
    }
 catch (    GridAccessException e) {
    }
  }
}","@MENetworkEventSubscribe public void updateChannels(MENetworkChannelsChanged chann){
  updateStatus();
}"
30759,"private void eatFuel(){
  ItemStack is=getStackInSlot(0);
  if (is != null) {
    int newBurnTime=TileEntityFurnace.getItemBurnTime(is);
    if (newBurnTime > 0 && is.stackSize > 0) {
      burnTime+=newBurnTime;
      maxBurnTime=burnTime;
      is.stackSize--;
      if (is.stackSize <= 0)       setInventorySlotContents(0,null);
 else       setInventorySlotContents(0,is);
    }
  }
  if (burnTime > 0) {
    try {
      gridProxy.getTick().wakeDevice(gridProxy.getNode());
    }
 catch (    GridAccessException e) {
    }
  }
  if ((!isOn && burnTime > 0) || (isOn && burnTime <= 0)) {
    isOn=burnTime > 0;
    markForUpdate();
  }
}","private void eatFuel(){
  ItemStack is=getStackInSlot(0);
  if (is != null) {
    int newBurnTime=TileEntityFurnace.getItemBurnTime(is);
    if (newBurnTime > 0 && is.stackSize > 0) {
      burnTime+=newBurnTime;
      maxBurnTime=burnTime;
      is.stackSize--;
      if (is.stackSize <= 0) {
        ItemStack container=null;
        if (is.getItem().hasContainerItem(is))         container=is.getItem().getContainerItem(is);
        setInventorySlotContents(0,container);
      }
 else       setInventorySlotContents(0,is);
    }
  }
  if (burnTime > 0) {
    try {
      gridProxy.getTick().wakeDevice(gridProxy.getNode());
    }
 catch (    GridAccessException e) {
    }
  }
  if ((!isOn && burnTime > 0) || (isOn && burnTime <= 0)) {
    isOn=burnTime > 0;
    markForUpdate();
  }
}"
30760,"@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removed,ItemStack added){
  if (burnTime <= 0) {
    eatFuel();
    if (burnTime > 0) {
      try {
        gridProxy.getTick().wakeDevice(gridProxy.getNode());
      }
 catch (      GridAccessException e) {
      }
    }
  }
}","@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removed,ItemStack added){
  if (burnTime <= 0) {
    if (canEatFuel()) {
      try {
        gridProxy.getTick().wakeDevice(gridProxy.getNode());
      }
 catch (      GridAccessException e) {
      }
    }
  }
}"
30761,"public static int NBTOrderlessHash(NBTBase A){
  int hash=0;
  byte id=A.getId();
  hash+=id;
switch (id) {
case 10:
{
      NBTTagCompound ctA=(NBTTagCompound)A;
      Set<String> cA=ctA.func_150296_c();
      Iterator<String> i=cA.iterator();
      while (i.hasNext()) {
        String name=i.next();
        hash+=NBTOrderlessHash(ctA.getTag(name));
      }
      return hash;
    }
case 9:
{
    NBTTagList lA=(NBTTagList)A;
    hash+=9 * lA.tagCount();
    List<NBTBase> l=tagList(lA);
    for (int x=0; x < l.size(); x++) {
      hash+=NBTOrderlessHash(l.get(x));
    }
    return hash;
  }
case 1:
return hash + ((NBTTagByte)A).func_150290_f();
case 4:
return hash + (int)((NBTTagLong)A).func_150291_c();
case 8:
return hash + ((NBTTagString)A).func_150285_a_().hashCode();
case 6:
return hash + (int)((NBTTagDouble)A).func_150286_g();
case 5:
return hash + (int)((NBTTagFloat)A).func_150288_h();
case 3:
return hash + ((NBTTagInt)A).func_150287_d();
default :
return hash;
}
}","public static int NBTOrderlessHash(NBTBase A){
  int hash=0;
  byte id=A.getId();
  hash+=id;
switch (id) {
case 10:
{
      NBTTagCompound ctA=(NBTTagCompound)A;
      Set<String> cA=ctA.func_150296_c();
      Iterator<String> i=cA.iterator();
      while (i.hasNext()) {
        String name=i.next();
        hash+=name.hashCode() ^ NBTOrderlessHash(ctA.getTag(name));
      }
      return hash;
    }
case 9:
{
    NBTTagList lA=(NBTTagList)A;
    hash+=9 * lA.tagCount();
    List<NBTBase> l=tagList(lA);
    for (int x=0; x < l.size(); x++) {
      hash+=((Integer)x).hashCode() ^ NBTOrderlessHash(l.get(x));
    }
    return hash;
  }
case 1:
return hash + ((NBTTagByte)A).func_150290_f();
case 4:
return hash + (int)((NBTTagLong)A).func_150291_c();
case 8:
return hash + ((NBTTagString)A).func_150285_a_().hashCode();
case 6:
return hash + (int)((NBTTagDouble)A).func_150286_g();
case 5:
return hash + (int)((NBTTagFloat)A).func_150288_h();
case 3:
return hash + ((NBTTagInt)A).func_150287_d();
default :
return hash;
}
}"
30762,"@Override public int compareTo(AEItemStack b){
  int id=def.item.hashCode() - b.def.item.hashCode();
  int dv=def.damageValue - b.def.damageValue;
  int dspv=def.dspDamage - b.def.dspDamage;
  return id == 0 ? (dv == 0 ? (dspv == 0 ? ((def.tagCompound == null ? 0 : def.tagCompound.getHash()) - (b.def.tagCompound == null ? 0 : b.def.tagCompound.getHash())) : dspv) : dv) : id;
}","@Override public int compareTo(AEItemStack b){
  int id=compare(def.item.hashCode(),b.def.item.hashCode());
  int dv=compare(def.damageValue,b.def.damageValue);
  int dspv=compare(def.dspDamage,b.def.dspDamage);
  return id == 0 ? (dv == 0 ? (dspv == 0 ? compareNBT(b.def) : dspv) : dv) : id;
}"
30763,"public IAEItemStack getLow(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack bottom=new AEItemStack(this);
  AEItemDef newDef=bottom.def=bottom.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=0;
    newDef.reHash();
    return bottom;
  }
  if (fuzzy == FuzzyMode.IGNORE_ALL) {
    newDef.dspDamage=0;
  }
 else {
    int low=fuzzy.calculateBreakPoint(def.maxDamage);
    newDef.dspDamage=low < def.dspDamage ? low : 0;
  }
  if (newDef.item.isDamageable())   newDef.damageValue=newDef.dspDamage;
  newDef.reHash();
  return bottom;
}","public IAEItemStack getLow(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack bottom=new AEItemStack(this);
  AEItemDef newDef=bottom.def=bottom.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=0;
    newDef.reHash();
    return bottom;
  }
  if (fuzzy == FuzzyMode.IGNORE_ALL) {
    newDef.dspDamage=0;
  }
 else {
    int low=fuzzy.calculateBreakPoint(def.maxDamage);
    newDef.dspDamage=low < def.dspDamage ? low : 0;
  }
  if (newDef.item.isDamageable())   newDef.damageValue=newDef.dspDamage;
  newDef.tagCompound=newDef.lowTag;
  newDef.reHash();
  return bottom;
}"
30764,"public IAEItemStack getHigh(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack top=new AEItemStack(this);
  AEItemDef newDef=top.def=top.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=Integer.MAX_VALUE;
    newDef.reHash();
    return top;
  }
  if (fuzzy == FuzzyMode.IGNORE_ALL) {
    newDef.dspDamage=def.maxDamage + 1;
  }
 else {
    int high=fuzzy.calculateBreakPoint(def.maxDamage) + 1;
    newDef.dspDamage=high > def.dspDamage ? high : def.maxDamage + 1;
  }
  if (newDef.item.isDamageable())   newDef.damageValue=top.def.dspDamage;
  newDef.reHash();
  return top;
}","public IAEItemStack getHigh(FuzzyMode fuzzy,boolean ignoreMeta){
  AEItemStack top=new AEItemStack(this);
  AEItemDef newDef=top.def=top.def.copy();
  if (ignoreMeta) {
    newDef.dspDamage=newDef.damageValue=Integer.MAX_VALUE;
    newDef.reHash();
    return top;
  }
  if (fuzzy == FuzzyMode.IGNORE_ALL) {
    newDef.dspDamage=def.maxDamage + 1;
  }
 else {
    int high=fuzzy.calculateBreakPoint(def.maxDamage) + 1;
    newDef.dspDamage=high > def.dspDamage ? high : def.maxDamage + 1;
  }
  if (newDef.item.isDamageable())   newDef.damageValue=top.def.dspDamage;
  newDef.tagCompound=newDef.highTag;
  newDef.reHash();
  return top;
}"
30765,"public boolean matches(Item itemid2,int meta2,int orderlessHash){
  return itemid2 == itemid && meta == meta2 && hash == orderlessHash;
}","public boolean matches(Item itemid2,int meta2,int orderlessHash){
  return itemid2 == item && meta == meta2 && hash == orderlessHash;
}"
30766,"private AESharedNBT(Item itemID,int damageValue){
  super();
  itemid=itemID;
  meta=damageValue;
}","public AESharedNBT(int fakeValue){
  super();
  item=null;
  meta=0;
  hash=fakeValue;
}"
30767,"@Override public ItemStack transferStackInSlot(EntityPlayer p,int idx){
  if (Platform.isClient())   return null;
  boolean hasMETiles=false;
  for (  Object is : this.inventorySlots) {
    if (is instanceof InternalSlotME) {
      hasMETiles=true;
      break;
    }
  }
  if (hasMETiles && Platform.isClient()) {
    return null;
  }
  ItemStack tis=null;
  AppEngSlot clickSlot=(AppEngSlot)this.inventorySlots.get(idx);
  if (clickSlot instanceof SlotDisabled || clickSlot instanceof SlotInaccessable)   return null;
  if (clickSlot != null && clickSlot.getHasStack()) {
    tis=clickSlot.getStack();
    if (tis == null)     return null;
    List<Slot> selectedSlots=new ArrayList<Slot>();
    if (clickSlot.isPlayerSide()) {
      tis=shiftStoreItem(tis);
      for (int x=0; x < this.inventorySlots.size(); x++) {
        AppEngSlot cs=(AppEngSlot)this.inventorySlots.get(x);
        if (!(cs.isPlayerSide()) && !(cs instanceof SlotFake) && !(cs instanceof SlotCraftingMatrix)) {
          if (cs.isItemValid(tis))           selectedSlots.add(cs);
        }
      }
    }
 else {
      for (int x=0; x < this.inventorySlots.size(); x++) {
        AppEngSlot cs=(AppEngSlot)this.inventorySlots.get(x);
        if ((cs.isPlayerSide()) && !(cs instanceof SlotFake) && !(cs instanceof SlotCraftingMatrix)) {
          if (cs.isItemValid(tis))           selectedSlots.add(cs);
        }
      }
    }
    if (selectedSlots.isEmpty() && clickSlot.isPlayerSide()) {
      if (tis != null) {
        for (int x=0; x < this.inventorySlots.size(); x++) {
          AppEngSlot cs=(AppEngSlot)this.inventorySlots.get(x);
          ItemStack dest=cs.getStack();
          if (!(cs.isPlayerSide()) && cs instanceof SlotFake) {
            if (Platform.isSameItem(dest,tis))             return null;
 else             if (dest == null) {
              cs.putStack(tis != null ? tis.copy() : null);
              cs.onSlotChanged();
              updateSlot(cs);
              return null;
            }
          }
        }
      }
    }
    if (tis != null) {
      for (      Slot d : selectedSlots) {
        if (d instanceof SlotDisabled || d instanceof SlotME)         continue;
        if (d.isItemValid(tis) && tis != null) {
          if (d.getHasStack()) {
            ItemStack t=d.getStack();
            if (tis != null && Platform.isSameItem(tis,t)) {
              int maxSize=t.getMaxStackSize();
              if (maxSize > d.getSlotStackLimit())               maxSize=d.getSlotStackLimit();
              int placeAble=maxSize - t.stackSize;
              if (tis.stackSize < placeAble) {
                placeAble=tis.stackSize;
              }
              t.stackSize+=placeAble;
              tis.stackSize-=placeAble;
              if (tis.stackSize <= 0) {
                clickSlot.putStack(null);
                d.onSlotChanged();
                updateSlot(clickSlot);
                updateSlot(d);
                return null;
              }
 else               updateSlot(d);
            }
          }
        }
      }
      for (      Slot d : selectedSlots) {
        if (d instanceof SlotDisabled || d instanceof SlotME)         continue;
        if (d.isItemValid(tis) && tis != null) {
          if (d.getHasStack()) {
            ItemStack t=d.getStack();
            if (tis != null && Platform.isSameItem(t,tis)) {
              int maxSize=t.getMaxStackSize();
              if (d.getSlotStackLimit() < maxSize)               maxSize=d.getSlotStackLimit();
              int placeAble=maxSize - t.stackSize;
              if (tis.stackSize < placeAble) {
                placeAble=tis.stackSize;
              }
              t.stackSize+=placeAble;
              tis.stackSize-=placeAble;
              if (tis.stackSize <= 0) {
                clickSlot.putStack(null);
                d.onSlotChanged();
                updateSlot(clickSlot);
                updateSlot(d);
                return null;
              }
 else               updateSlot(d);
            }
          }
 else {
            int maxSize=tis.getMaxStackSize();
            if (maxSize > d.getSlotStackLimit())             maxSize=d.getSlotStackLimit();
            ItemStack tmp=tis.copy();
            if (tmp.stackSize > maxSize)             tmp.stackSize=maxSize;
            tis.stackSize-=tmp.stackSize;
            d.putStack(tmp);
            if (tis.stackSize <= 0) {
              clickSlot.putStack(null);
              d.onSlotChanged();
              updateSlot(clickSlot);
              updateSlot(d);
              return null;
            }
 else             updateSlot(d);
          }
        }
      }
    }
    clickSlot.putStack(tis != null ? tis.copy() : null);
  }
  updateSlot(clickSlot);
  return null;
}","@Override public ItemStack transferStackInSlot(EntityPlayer p,int idx){
  if (Platform.isClient())   return null;
  boolean hasMETiles=false;
  for (  Object is : this.inventorySlots) {
    if (is instanceof InternalSlotME) {
      hasMETiles=true;
      break;
    }
  }
  if (hasMETiles && Platform.isClient()) {
    return null;
  }
  ItemStack tis=null;
  AppEngSlot clickSlot=(AppEngSlot)this.inventorySlots.get(idx);
  if (clickSlot instanceof SlotDisabled || clickSlot instanceof SlotInaccessable)   return null;
  if (clickSlot != null && clickSlot.getHasStack()) {
    tis=clickSlot.getStack();
    if (tis == null)     return null;
    List<Slot> selectedSlots=new ArrayList<Slot>();
    if (clickSlot.isPlayerSide()) {
      tis=shiftStoreItem(tis);
      for (int x=0; x < this.inventorySlots.size(); x++) {
        AppEngSlot cs=(AppEngSlot)this.inventorySlots.get(x);
        if (!(cs.isPlayerSide()) && !(cs instanceof SlotFake) && !(cs instanceof SlotCraftingMatrix)) {
          if (cs.isItemValid(tis))           selectedSlots.add(cs);
        }
      }
    }
 else {
      for (int x=0; x < this.inventorySlots.size(); x++) {
        AppEngSlot cs=(AppEngSlot)this.inventorySlots.get(x);
        if ((cs.isPlayerSide()) && !(cs instanceof SlotFake) && !(cs instanceof SlotCraftingMatrix)) {
          if (cs.isItemValid(tis))           selectedSlots.add(cs);
        }
      }
    }
    if (selectedSlots.isEmpty() && clickSlot.isPlayerSide()) {
      if (tis != null) {
        for (int x=0; x < this.inventorySlots.size(); x++) {
          AppEngSlot cs=(AppEngSlot)this.inventorySlots.get(x);
          ItemStack dest=cs.getStack();
          if (!(cs.isPlayerSide()) && cs instanceof SlotFake) {
            if (Platform.isSameItemPrecise(dest,tis))             return null;
 else             if (dest == null) {
              cs.putStack(tis != null ? tis.copy() : null);
              cs.onSlotChanged();
              updateSlot(cs);
              return null;
            }
          }
        }
      }
    }
    if (tis != null) {
      for (      Slot d : selectedSlots) {
        if (d instanceof SlotDisabled || d instanceof SlotME)         continue;
        if (d.isItemValid(tis) && tis != null) {
          if (d.getHasStack()) {
            ItemStack t=d.getStack();
            if (tis != null && Platform.isSameItemPrecise(tis,t)) {
              int maxSize=t.getMaxStackSize();
              if (maxSize > d.getSlotStackLimit())               maxSize=d.getSlotStackLimit();
              int placeAble=maxSize - t.stackSize;
              if (tis.stackSize < placeAble) {
                placeAble=tis.stackSize;
              }
              t.stackSize+=placeAble;
              tis.stackSize-=placeAble;
              if (tis.stackSize <= 0) {
                clickSlot.putStack(null);
                d.onSlotChanged();
                updateSlot(clickSlot);
                updateSlot(d);
                return null;
              }
 else               updateSlot(d);
            }
          }
        }
      }
      for (      Slot d : selectedSlots) {
        if (d instanceof SlotDisabled || d instanceof SlotME)         continue;
        if (d.isItemValid(tis) && tis != null) {
          if (d.getHasStack()) {
            ItemStack t=d.getStack();
            if (tis != null && Platform.isSameItemPrecise(t,tis)) {
              int maxSize=t.getMaxStackSize();
              if (d.getSlotStackLimit() < maxSize)               maxSize=d.getSlotStackLimit();
              int placeAble=maxSize - t.stackSize;
              if (tis.stackSize < placeAble) {
                placeAble=tis.stackSize;
              }
              t.stackSize+=placeAble;
              tis.stackSize-=placeAble;
              if (tis.stackSize <= 0) {
                clickSlot.putStack(null);
                d.onSlotChanged();
                updateSlot(clickSlot);
                updateSlot(d);
                return null;
              }
 else               updateSlot(d);
            }
          }
 else {
            int maxSize=tis.getMaxStackSize();
            if (maxSize > d.getSlotStackLimit())             maxSize=d.getSlotStackLimit();
            ItemStack tmp=tis.copy();
            if (tmp.stackSize > maxSize)             tmp.stackSize=maxSize;
            tis.stackSize-=tmp.stackSize;
            d.putStack(tmp);
            if (tis.stackSize <= 0) {
              clickSlot.putStack(null);
              d.onSlotChanged();
              updateSlot(clickSlot);
              updateSlot(d);
              return null;
            }
 else             updateSlot(d);
          }
        }
      }
    }
    clickSlot.putStack(tis != null ? tis.copy() : null);
  }
  updateSlot(clickSlot);
  return null;
}"
30768,"public void doAction(EntityPlayerMP player,InventoryAction action,int slot,IAEItemStack slotItem){
  if (slot >= 0 && slot < inventorySlots.size()) {
    Slot s=getSlot(slot);
    if (s instanceof SlotCraftingTerm) {
switch (action) {
case CRAFT_SHIFT:
case CRAFT_ITEM:
case CRAFT_STACK:
        ((SlotCraftingTerm)s).doClick(action,player);
      updateHeld(player);
default :
  }
}
if (s instanceof SlotFake) {
  ItemStack hand=player.inventory.getItemStack();
switch (action) {
case PICKUP_OR_SETDOWN:
    if (hand == null)     s.putStack(null);
 else     s.putStack(hand.copy());
  break;
case SPLIT_OR_PLACESINGLE:
ItemStack is=s.getStack();
if (is != null) {
if (hand == null) is.stackSize--;
 else if (hand.isItemEqual(is)) is.stackSize=Math.min(is.getMaxStackSize(),is.stackSize + 1);
 else {
  is=hand.copy();
  is.stackSize=1;
}
s.putStack(is);
}
 else if (hand != null) {
is=hand.copy();
is.stackSize=1;
s.putStack(is);
}
break;
case CREATIVE_DUPLICATE:
case MOVE_REGION:
case SHIFT_CLICK:
default :
break;
}
}
if (action == InventoryAction.MOVE_REGION) {
List<Slot> from=new LinkedList();
for (Object j : inventorySlots) {
if (j instanceof Slot && j.getClass() == s.getClass()) from.add((Slot)j);
}
for (Slot fr : from) transferStackInSlot(player,fr.slotNumber);
}
return;
}
switch (action) {
case SHIFT_CLICK:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player.inventory,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
}
break;
case PICKUP_SINGLE:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
int liftQty=1;
ItemStack isg=player.inventory.getItemStack();
if (isg != null) {
if (isg.stackSize >= isg.getMaxStackSize()) liftQty=0;
if (!Platform.isSameItem(slotItem.getItemStack(),isg)) liftQty=0;
}
if (liftQty > 0) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
InventoryAdaptor ia=new AdaptorPlayerHand(player);
ItemStack fail=ia.addItems(ais.getItemStack());
if (fail != null) cellInv.injectItems(ais,Actionable.MODULATE,mySrc);
updateHeld(player);
}
}
break;
case PICKUP_OR_SETDOWN:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(ais.getItemStack().getMaxStackSize());
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
break;
case SPLIT_OR_PLACESINGLE:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
long stackSize=Math.min(ais.getItemStack().getMaxStackSize(),ais.getStackSize());
ais.setStackSize((stackSize + 1) >> 1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais.setStackSize(1);
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais == null) {
ItemStack is=player.inventory.getItemStack();
is.stackSize--;
if (is.stackSize <= 0) player.inventory.setItemStack(null);
updateHeld(player);
}
}
break;
case CREATIVE_DUPLICATE:
if (player.capabilities.isCreativeMode && slotItem != null) {
ItemStack is=slotItem.getItemStack();
is.stackSize=is.getMaxStackSize();
player.inventory.setItemStack(is);
updateHeld(player);
}
break;
case MOVE_REGION:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
for (int slotNum=0; slotNum < player.inventory.getSizeInventory(); slotNum++) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player.inventory,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
 else return;
}
}
break;
default :
break;
}
}","public void doAction(EntityPlayerMP player,InventoryAction action,int slot,IAEItemStack slotItem){
  if (slot >= 0 && slot < inventorySlots.size()) {
    Slot s=getSlot(slot);
    if (s instanceof SlotCraftingTerm) {
switch (action) {
case CRAFT_SHIFT:
case CRAFT_ITEM:
case CRAFT_STACK:
        ((SlotCraftingTerm)s).doClick(action,player);
      updateHeld(player);
default :
  }
}
if (s instanceof SlotFake) {
  ItemStack hand=player.inventory.getItemStack();
switch (action) {
case PICKUP_OR_SETDOWN:
    if (hand == null)     s.putStack(null);
 else     s.putStack(hand.copy());
  break;
case SPLIT_OR_PLACESINGLE:
ItemStack is=s.getStack();
if (is != null) {
if (hand == null) is.stackSize--;
 else if (hand.isItemEqual(is)) is.stackSize=Math.min(is.getMaxStackSize(),is.stackSize + 1);
 else {
  is=hand.copy();
  is.stackSize=1;
}
s.putStack(is);
}
 else if (hand != null) {
is=hand.copy();
is.stackSize=1;
s.putStack(is);
}
break;
case CREATIVE_DUPLICATE:
case MOVE_REGION:
case SHIFT_CLICK:
default :
break;
}
}
if (action == InventoryAction.MOVE_REGION) {
List<Slot> from=new LinkedList();
for (Object j : inventorySlots) {
if (j instanceof Slot && j.getClass() == s.getClass()) from.add((Slot)j);
}
for (Slot fr : from) transferStackInSlot(player,fr.slotNumber);
}
return;
}
switch (action) {
case SHIFT_CLICK:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
}
break;
case PICKUP_SINGLE:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
int liftQty=1;
ItemStack isg=player.inventory.getItemStack();
if (isg != null) {
if (isg.stackSize >= isg.getMaxStackSize()) liftQty=0;
if (!Platform.isSameItemPrecise(slotItem.getItemStack(),isg)) liftQty=0;
}
if (liftQty > 0) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
InventoryAdaptor ia=new AdaptorPlayerHand(player);
ItemStack fail=ia.addItems(ais.getItemStack());
if (fail != null) cellInv.injectItems(ais,Actionable.MODULATE,mySrc);
updateHeld(player);
}
}
break;
case PICKUP_OR_SETDOWN:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(ais.getItemStack().getMaxStackSize());
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
break;
case SPLIT_OR_PLACESINGLE:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
long stackSize=Math.min(ais.getItemStack().getMaxStackSize(),ais.getStackSize());
ais.setStackSize((stackSize + 1) >> 1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais.setStackSize(1);
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais == null) {
ItemStack is=player.inventory.getItemStack();
is.stackSize--;
if (is.stackSize <= 0) player.inventory.setItemStack(null);
updateHeld(player);
}
}
break;
case CREATIVE_DUPLICATE:
if (player.capabilities.isCreativeMode && slotItem != null) {
ItemStack is=slotItem.getItemStack();
is.stackSize=is.getMaxStackSize();
player.inventory.setItemStack(is);
updateHeld(player);
}
break;
case MOVE_REGION:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
int playerInv=9 * 4;
for (int slotNum=0; slotNum < playerInv; slotNum++) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
 else return;
}
}
break;
default :
break;
}
}"
30769,"@Override public double getStoredPower(){
  if (availableTicksSinceUpdate > 90)   refreshPower();
  return globalAvailablePower;
}","@Override public double getStoredPower(){
  if (availableTicksSinceUpdate > 90)   refreshPower();
  return Math.max(0.0,globalAvailablePower);
}"
30770,"@Override public void removeNode(IGridNode node,IGridHost machine){
  if (machine instanceof IEnergyGridProvider)   gproviders.remove(machine);
  GridNode gnode=(GridNode)node;
  drainPerTick-=gnode.previousDraw;
  if (machine instanceof IAEPowerStorage) {
    IAEPowerStorage ps=(IAEPowerStorage)machine;
    if (ps.getPowerFlow() != AccessRestriction.WRITE)     globalAvailablePower-=ps.getAECurrentPower();
    if (lastProvider == machine)     lastProvider=null;
    if (lastRequestor == machine)     lastRequestor=null;
    globalMaxPower-=ps.getAEMaxPower();
    providers.remove(machine);
    requesters.remove(machine);
  }
  if (machine instanceof IStackWatcherHost) {
    IEnergyWatcher myWatcher=watchers.get(machine);
    if (myWatcher != null) {
      myWatcher.clear();
      watchers.remove(machine);
    }
  }
}","@Override public void removeNode(IGridNode node,IGridHost machine){
  if (machine instanceof IEnergyGridProvider)   gproviders.remove(machine);
  GridNode gnode=(GridNode)node;
  drainPerTick-=gnode.previousDraw;
  if (machine instanceof IAEPowerStorage) {
    IAEPowerStorage ps=(IAEPowerStorage)machine;
    if (ps.isAEPublicPowerStorage()) {
      if (ps.getPowerFlow() != AccessRestriction.WRITE)       globalAvailablePower-=ps.getAECurrentPower();
      if (lastProvider == machine)       lastProvider=null;
      if (lastRequestor == machine)       lastRequestor=null;
      globalMaxPower-=ps.getAEMaxPower();
      providers.remove(machine);
      requesters.remove(machine);
    }
  }
  if (machine instanceof IStackWatcherHost) {
    IEnergyWatcher myWatcher=watchers.get(machine);
    if (myWatcher != null) {
      myWatcher.clear();
      watchers.remove(machine);
    }
  }
}"
30771,"public TileEnergyAcceptor(){
  gridProxy.setIdlePowerUsage(1.0 / 16.0);
  addNewHandler(new TilePowerRelayHandler());
}","public TileEnergyAcceptor(){
  gridProxy.setIdlePowerUsage(0.0);
  addNewHandler(new TilePowerRelayHandler());
  internalMaxPower=100;
}"
30772,"@Override public void Tick(){
  if (internalCurrentPower > 0) {
    try {
      IEnergyGrid eg=gridProxy.getEnergy();
      double powerRequested=internalCurrentPower - eg.injectPower(internalCurrentPower,Actionable.SIMULATE);
      if (powerRequested > 0) {
        internalCurrentPower+=eg.injectPower(extractAEPower(powerRequested,Actionable.MODULATE,PowerMultiplier.ONE),Actionable.MODULATE);
      }
    }
 catch (    GridAccessException e) {
    }
  }
}","@Override public void Tick(){
  if (internalCurrentPower > 0) {
    try {
      IEnergyGrid eg=gridProxy.getEnergy();
      double powerRequested=internalCurrentPower - eg.injectPower(internalCurrentPower,Actionable.SIMULATE);
      if (powerRequested > 0) {
        eg.injectPower(extractAEPower(powerRequested,Actionable.MODULATE,PowerMultiplier.ONE),Actionable.MODULATE);
      }
    }
 catch (    GridAccessException e) {
    }
  }
}"
30773,"private void put(World w,int i,int j,int k,Block skystone,int meta){
  if (w.getBlock(i,j,k) == Blocks.bedrock)   return;
  w.setBlock(i,j,k,skystone,meta,3);
}","private void put(World w,int i,int j,int k,Block blk,int meta){
  if (w.getBlock(i,j,k) == Blocks.bedrock)   return;
  w.setBlock(i,j,k,blk,meta,3);
}"
30774,"private void placeMetor(World w,int x,int y,int z){
  for (int i=x - 8; i < x + 8; i++)   for (int j=y - 8; j < y + 8; j++)   for (int k=z - 8; k < z + 8; k++) {
    double dx=i - x;
    double dy=j - y;
    double dz=k - z;
    if (dx * dx * 0.7 + dy * dy * (j > y ? 1.4 : 0.8) + dz * dz * 0.7 < sizeOfMetorite)     put(w,i,j,k,skystone);
  }
  put(w,x,y,z,skychest);
}","private void placeMetor(World w,int x,int y,int z){
  for (int i=x - 8; i < x + 8; i++)   for (int j=y - 8; j < y + 8; j++)   for (int k=z - 8; k < z + 8; k++) {
    double dx=i - x;
    double dy=j - y;
    double dz=k - z;
    if (dx * dx * 0.7 + dy * dy * (j > y ? 1.4 : 0.8) + dz * dz * 0.7 < sizeOfMetorite)     put(w,i,j,k,skystone);
  }
  put(w,x,y,z,skychest);
  TileEntity te=w.getTileEntity(x,y,z);
  if (te instanceof IInventory) {
switch ((int)(Math.random() * 1000) % 4) {
case 0:
      ((IInventory)te).setInventorySlotContents(0,AEApi.instance().materials().materialCalcProcessorPress.stack(1));
    break;
case 1:
  ((IInventory)te).setInventorySlotContents(0,AEApi.instance().materials().materialEngProcessorPress.stack(1));
break;
case 2:
((IInventory)te).setInventorySlotContents(0,AEApi.instance().materials().materialLogicProcessorPress.stack(1));
break;
case 3:
((IInventory)te).setInventorySlotContents(0,AEApi.instance().materials().materialSiliconPress.stack(1));
break;
default :
}
switch ((int)(Math.random() * 1000) % 3) {
case 0:
((IInventory)te).setInventorySlotContents(1,AEApi.instance().blocks().blockSkyStone.stack((int)(Math.random() * 12) + 1));
break;
case 1:
((IInventory)te).setInventorySlotContents(1,AEApi.instance().materials().materialIronNugget.stack((int)(Math.random() * 12) + 1));
break;
case 2:
((IInventory)te).setInventorySlotContents(1,new ItemStack(net.minecraft.init.Items.gold_nugget,(int)(Math.random() * 12) + 1));
break;
}
}
}"
30775,"@Override public ForgeDirection getUp(){
  return up;
}","@Override public ForgeDirection getUp(){
  if (up == ForgeDirection.UNKNOWN)   return ForgeDirection.UP;
  return up;
}"
30776,"@Override public ForgeDirection getForward(){
  return forward;
}","@Override public ForgeDirection getForward(){
  if (forward == ForgeDirection.UNKNOWN)   return ForgeDirection.SOUTH;
  return forward;
}"
30777,"public BlockCharger(){
  super(BlockCharger.class,Material.iron);
  setfeature(EnumSet.of(AEFeature.Core));
  setTileEntiy(TileCharger.class);
  setLightOpacity(2);
  isFullSize=false;
  isOpaque=false;
}","public BlockCharger(){
  super(BlockCharger.class,Material.iron);
  setfeature(EnumSet.of(AEFeature.Core));
  setTileEntiy(TileCharger.class);
  setLightOpacity(2);
  isFullSize=isOpaque=false;
}"
30778,"public void reset(IGrid grid){
  int reqX=0;
  int reqY=0;
  int reqZ=0;
  int requirePylongBlocks=1;
  double minPower=0;
  double maxPower=0;
  clusters=new HashMap();
  ioPorts=new LinkedList();
  for (  IGridNode gm : grid.getMachines(TileSpatialIOPort.class)) {
    ioPorts.add((TileSpatialIOPort)gm.getMachine());
  }
  IReadOnlyCollection<IGridNode> set=grid.getMachines(TileSpatialPylon.class);
  for (  IGridNode gm : set) {
    if (gm.isActive()) {
      SpatialPylonCluster c=((TileSpatialPylon)gm.getMachine()).getCluster();
      if (c != null)       clusters.put(c,c);
    }
  }
  captureMax=null;
  captureMin=null;
  isValid=true;
  int pylonBlocks=0;
  for (  SpatialPylonCluster cl : clusters.values()) {
    if (captureMax == null)     captureMax=cl.max.copy();
    if (captureMin == null)     captureMin=cl.min.copy();
    pylonBlocks+=cl.tileCount();
    captureMin.x=Math.min(captureMin.x,cl.min.x);
    captureMin.y=Math.min(captureMin.y,cl.min.y);
    captureMin.z=Math.min(captureMin.z,cl.min.z);
    captureMax.x=Math.max(captureMax.x,cl.max.x);
    captureMax.y=Math.max(captureMax.y,cl.max.y);
    captureMax.z=Math.max(captureMax.z,cl.max.z);
  }
  if (hasRegion()) {
    isValid=captureMax.x - captureMin.x > 1 && captureMax.y - captureMin.y > 1 && captureMax.z - captureMin.z > 1;
    for (    SpatialPylonCluster cl : clusters.values()) {
switch (cl.currentAxis) {
case X:
        isValid=isValid && ((captureMax.y == cl.min.y || captureMin.y == cl.max.y) || (captureMax.z == cl.min.z || captureMin.z == cl.max.z)) && ((captureMax.y == cl.max.y || captureMin.y == cl.min.y) || (captureMax.z == cl.max.z || captureMin.z == cl.min.z));
      break;
case Y:
    isValid=isValid && ((captureMax.x == cl.min.x || captureMin.x == cl.max.x) || (captureMax.z == cl.min.z || captureMin.z == cl.max.z)) && ((captureMax.x == cl.max.x || captureMin.x == cl.min.x) || (captureMax.z == cl.max.z || captureMin.z == cl.min.z));
  break;
case Z:
isValid=isValid && ((captureMax.y == cl.min.y || captureMin.y == cl.max.y) || (captureMax.x == cl.min.x || captureMin.x == cl.max.x)) && ((captureMax.y == cl.max.y || captureMin.y == cl.min.y) || (captureMax.x == cl.max.x || captureMin.x == cl.min.x));
break;
case UNFORMED:
isValid=false;
break;
}
}
reqX=captureMax.x - captureMin.x;
reqY=captureMax.y - captureMin.y;
reqZ=captureMax.z - captureMin.z;
requirePylongBlocks=((reqX * reqZ + reqX * reqY + reqY * reqZ) * 3) / 5;
effiency=(double)pylonBlocks / (double)requirePylongBlocks;
if (effiency > 1.0) effiency=1.0;
if (effiency < 0.0) effiency=0.0;
minPower=(double)reqX * (double)reqY * reqZ* AEConfig.instance.spatialPowerMultiplier;
maxPower=Math.pow(minPower,AEConfig.instance.spatialPowerScaler);
}
double affective_effiency=Math.pow(effiency,0.25);
powerRequired=(long)(affective_effiency * minPower + (1.0 - affective_effiency) * maxPower);
for (SpatialPylonCluster cl : clusters.values()) {
boolean myWasValid=cl.isValid;
cl.isValid=isValid;
if (myWasValid != isValid) cl.updateStatus(false);
}
}","public void reset(IGrid grid){
  int reqX=0;
  int reqY=0;
  int reqZ=0;
  int requirePylongBlocks=1;
  double minPower=0;
  double maxPower=0;
  clusters=new HashMap();
  ioPorts=new LinkedList();
  for (  IGridNode gm : grid.getMachines(TileSpatialIOPort.class)) {
    ioPorts.add((TileSpatialIOPort)gm.getMachine());
  }
  IReadOnlyCollection<IGridNode> set=grid.getMachines(TileSpatialPylon.class);
  for (  IGridNode gm : set) {
    if (gm.meetsChannelRequirements()) {
      SpatialPylonCluster c=((TileSpatialPylon)gm.getMachine()).getCluster();
      if (c != null)       clusters.put(c,c);
    }
  }
  captureMax=null;
  captureMin=null;
  isValid=true;
  int pylonBlocks=0;
  for (  SpatialPylonCluster cl : clusters.values()) {
    if (captureMax == null)     captureMax=cl.max.copy();
    if (captureMin == null)     captureMin=cl.min.copy();
    pylonBlocks+=cl.tileCount();
    captureMin.x=Math.min(captureMin.x,cl.min.x);
    captureMin.y=Math.min(captureMin.y,cl.min.y);
    captureMin.z=Math.min(captureMin.z,cl.min.z);
    captureMax.x=Math.max(captureMax.x,cl.max.x);
    captureMax.y=Math.max(captureMax.y,cl.max.y);
    captureMax.z=Math.max(captureMax.z,cl.max.z);
  }
  if (hasRegion()) {
    isValid=captureMax.x - captureMin.x > 1 && captureMax.y - captureMin.y > 1 && captureMax.z - captureMin.z > 1;
    for (    SpatialPylonCluster cl : clusters.values()) {
switch (cl.currentAxis) {
case X:
        isValid=isValid && ((captureMax.y == cl.min.y || captureMin.y == cl.max.y) || (captureMax.z == cl.min.z || captureMin.z == cl.max.z)) && ((captureMax.y == cl.max.y || captureMin.y == cl.min.y) || (captureMax.z == cl.max.z || captureMin.z == cl.min.z));
      break;
case Y:
    isValid=isValid && ((captureMax.x == cl.min.x || captureMin.x == cl.max.x) || (captureMax.z == cl.min.z || captureMin.z == cl.max.z)) && ((captureMax.x == cl.max.x || captureMin.x == cl.min.x) || (captureMax.z == cl.max.z || captureMin.z == cl.min.z));
  break;
case Z:
isValid=isValid && ((captureMax.y == cl.min.y || captureMin.y == cl.max.y) || (captureMax.x == cl.min.x || captureMin.x == cl.max.x)) && ((captureMax.y == cl.max.y || captureMin.y == cl.min.y) || (captureMax.x == cl.max.x || captureMin.x == cl.min.x));
break;
case UNFORMED:
isValid=false;
break;
}
}
reqX=captureMax.x - captureMin.x;
reqY=captureMax.y - captureMin.y;
reqZ=captureMax.z - captureMin.z;
requirePylongBlocks=((reqX * reqZ + reqX * reqY + reqY * reqZ) * 3) / 5;
effiency=(double)pylonBlocks / (double)requirePylongBlocks;
if (effiency > 1.0) effiency=1.0;
if (effiency < 0.0) effiency=0.0;
minPower=(double)reqX * (double)reqY * reqZ* AEConfig.instance.spatialPowerMultiplier;
maxPower=Math.pow(minPower,AEConfig.instance.spatialPowerScaler);
}
double affective_effiency=Math.pow(effiency,0.25);
powerRequired=(long)(affective_effiency * minPower + (1.0 - affective_effiency) * maxPower);
for (SpatialPylonCluster cl : clusters.values()) {
boolean myWasValid=cl.isValid;
cl.isValid=isValid;
if (myWasValid != isValid) cl.updateStatus(false);
}
}"
30779,"@Override public void renderTile(AEBaseBlock block,AEBaseTile tile,Tessellator tess,double x,double y,double z,float partialTick,RenderBlocks renderer){
  if (!(tile instanceof TileSkyChest))   return;
  TileSkyChest skyChest=(TileSkyChest)tile;
  if (!skyChest.hasWorldObj())   return;
  GL11.glEnable(32826);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  ResourceLocation loc;
  if (tile.blockMetadata == 1)   loc=new ResourceLocation(""String_Node_Str"",""String_Node_Str"");
 else   loc=new ResourceLocation(""String_Node_Str"",""String_Node_Str"");
  Minecraft.getMinecraft().getTextureManager().bindTexture(loc);
  this.applyTESRRotation(x,y,z,skyChest.getForward(),skyChest.getUp());
  GL11.glScalef(1.0F,-1F,-1F);
  GL11.glTranslatef(-0.0F,-1.0F,-1.0F);
  long now=System.currentTimeMillis();
  long distnace=now - skyChest.lastEvent;
  if (skyChest.playerOpen > 0)   skyChest.lidAngle+=distnace * 0.0001;
 else   skyChest.lidAngle-=distnace * 0.0001;
  if (skyChest.lidAngle > 0.5f)   skyChest.lidAngle=0.5f;
  if (skyChest.lidAngle < 0.0f)   skyChest.lidAngle=0.0f;
  float lidangle=skyChest.lidAngle;
  lidangle=1.0F - lidangle;
  lidangle=1.0F - lidangle * lidangle * lidangle;
  model.chestLid.offsetY=-(0.9f / 16.0f);
  model.chestLid.rotateAngleX=-((lidangle * 3.141593F) / 2.0F);
  model.renderAll();
  GL11.glDisable(32826);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
}","@Override public void renderTile(AEBaseBlock block,AEBaseTile tile,Tessellator tess,double x,double y,double z,float partialTick,RenderBlocks renderer){
  if (!(tile instanceof TileSkyChest))   return;
  TileSkyChest skyChest=(TileSkyChest)tile;
  if (!skyChest.hasWorldObj())   return;
  GL11.glEnable(32826);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  ResourceLocation loc;
  if (tile.getWorldObj().getBlockMetadata(tile.xCoord,tile.yCoord,tile.zCoord) == 1)   loc=new ResourceLocation(""String_Node_Str"",""String_Node_Str"");
 else   loc=new ResourceLocation(""String_Node_Str"",""String_Node_Str"");
  Minecraft.getMinecraft().getTextureManager().bindTexture(loc);
  this.applyTESRRotation(x,y,z,skyChest.getForward(),skyChest.getUp());
  GL11.glScalef(1.0F,-1F,-1F);
  GL11.glTranslatef(-0.0F,-1.0F,-1.0F);
  long now=System.currentTimeMillis();
  long distnace=now - skyChest.lastEvent;
  if (skyChest.playerOpen > 0)   skyChest.lidAngle+=distnace * 0.0001;
 else   skyChest.lidAngle-=distnace * 0.0001;
  if (skyChest.lidAngle > 0.5f)   skyChest.lidAngle=0.5f;
  if (skyChest.lidAngle < 0.0f)   skyChest.lidAngle=0.0f;
  float lidangle=skyChest.lidAngle;
  lidangle=1.0F - lidangle;
  lidangle=1.0F - lidangle * lidangle * lidangle;
  model.chestLid.offsetY=-(0.9f / 16.0f);
  model.chestLid.rotateAngleX=-((lidangle * 3.141593F) / 2.0F);
  model.renderAll();
  GL11.glDisable(32826);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
}"
30780,"@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removedStack,ItemStack newStack){
}","@Override public void onChangeInventory(IInventory inv,int slot,InvOperation mc,ItemStack removedStack,ItemStack newStack){
  host.markForSave();
}"
30781,"@Override public void parseRecipes(IRecipeLoader loader,String path){
  try {
    BufferedReader reader=null;
    try {
      reader=loader.getFile(path);
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + path);
      AELog.error(err);
      return;
    }
    boolean inQuote=false;
    boolean inComment=false;
    String token=""String_Node_Str"";
    int line=0;
    int val=-1;
    while ((val=reader.read()) != -1) {
      char c=(char)val;
      if (c == '\n')       line++;
      if (inComment) {
        if (c == '\n' || c == '\r')         inComment=false;
      }
 else       if (inQuote) {
switch (c) {
case '""':
          inQuote=!inQuote;
        break;
default :
      token=token + c;
  }
}
 else {
switch (c) {
case '""':
    inQuote=!inQuote;
  break;
case ',':
if (token.length() > 0) {
  tokens.add(token);
  tokens.add(""String_Node_Str"");
}
token=""String_Node_Str"";
break;
case '=':
processTokens(loader,path,line);
if (token.length() > 0) tokens.add(token);
token=""String_Node_Str"";
break;
case '#':
inComment=true;
case '\n':
case '\t':
case '\r':
case ' ':
if (token.length() > 0) tokens.add(token);
token=""String_Node_Str"";
break;
default :
token=token + c;
}
}
}
reader.close();
processTokens(loader,path,line);
}
 catch (Throwable e) {
AELog.error(e);
if (data.crash) throw new RuntimeException(e);
}
}","@Override public void parseRecipes(IRecipeLoader loader,String path){
  try {
    BufferedReader reader=null;
    try {
      reader=loader.getFile(path);
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + path);
      if (data.exceptions)       AELog.error(err);
      return;
    }
    boolean inQuote=false;
    boolean inComment=false;
    String token=""String_Node_Str"";
    int line=0;
    int val=-1;
    while ((val=reader.read()) != -1) {
      char c=(char)val;
      if (c == '\n')       line++;
      if (inComment) {
        if (c == '\n' || c == '\r')         inComment=false;
      }
 else       if (inQuote) {
switch (c) {
case '""':
          inQuote=!inQuote;
        break;
default :
      token=token + c;
  }
}
 else {
switch (c) {
case '""':
    inQuote=!inQuote;
  break;
case ',':
if (token.length() > 0) {
  tokens.add(token);
  tokens.add(""String_Node_Str"");
}
token=""String_Node_Str"";
break;
case '=':
processTokens(loader,path,line);
if (token.length() > 0) tokens.add(token);
token=""String_Node_Str"";
break;
case '#':
inComment=true;
case '\n':
case '\t':
case '\r':
case ' ':
if (token.length() > 0) tokens.add(token);
token=""String_Node_Str"";
break;
default :
token=token + c;
}
}
}
reader.close();
processTokens(loader,path,line);
}
 catch (Throwable e) {
AELog.error(e);
if (data.crash) throw new RuntimeException(e);
}
}"
30782,"private void processTokens(IRecipeLoader loader,String file,int line) throws RecipeError {
  try {
    IRecipeHandlerRegistry cr=AEApi.instance().registries().recipes();
    if (tokens.isEmpty())     return;
    int split=tokens.indexOf(""String_Node_Str"");
    if (split != -1) {
      String operation=tokens.remove(0).toLowerCase();
      if (operation.equals(""String_Node_Str"")) {
        if (tokens.size() == 3 && tokens.indexOf(""String_Node_Str"") == 1)         data.aliases.put(tokens.get(0),tokens.get(2));
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"")) {
        List<String> pre=tokens.subList(0,split - 1);
        List<String> post=tokens.subList(split,tokens.size());
        List<List<IIngredient>> inputs=parseLines(pre);
        if (inputs.size() == 1 && inputs.get(0).size() > 0 && post.size() == 1) {
          data.groups.put(post.get(0),new GroupIngredient(post.get(0),inputs.get(0)));
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"")) {
        List<String> pre=tokens.subList(0,split - 1);
        List<String> post=tokens.subList(split,tokens.size());
        List<List<IIngredient>> inputs=parseLines(pre);
        if (inputs.size() == 1 && inputs.get(0).size() > 0 && post.size() == 1) {
          ICraftHandler ch=new OreRegistration(inputs.get(0),post.get(0));
          addCrafting(ch);
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else {
        List<String> pre=tokens.subList(0,split - 1);
        List<String> post=tokens.subList(split,tokens.size());
        List<List<IIngredient>> inputs=parseLines(pre);
        List<List<IIngredient>> outputs=parseLines(post);
        ICraftHandler ch=cr.getCraftHandlerFor(operation);
        if (ch != null) {
          ch.setup(inputs,outputs);
          addCrafting(ch);
        }
 else         throw new RecipeError(""String_Node_Str"" + operation);
      }
    }
 else {
      String operation=tokens.remove(0).toLowerCase();
      if (operation.equals(""String_Node_Str"") && (tokens.get(0).equals(""String_Node_Str"") || tokens.get(0).equals(""String_Node_Str""))) {
        if (tokens.size() == 1) {
          data.exceptions=tokens.get(0).equals(""String_Node_Str"");
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"") && (tokens.get(0).equals(""String_Node_Str"") || tokens.get(0).equals(""String_Node_Str""))) {
        if (tokens.size() == 1) {
          data.crash=tokens.get(0).equals(""String_Node_Str"");
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"")) {
        if (tokens.size() == 1 && (tokens.get(0).equals(""String_Node_Str"") || tokens.get(0).equals(""String_Node_Str""))) {
          data.erroronmissing=tokens.get(0).equals(""String_Node_Str"");
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"")) {
        if (tokens.size() == 1)         (new RecipeHandler(this)).parseRecipes(loader,tokens.get(0));
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       throw new RecipeError(operation + ""String_Node_Str"" + tokens.toString()+ ""String_Node_Str"");
    }
  }
 catch (  RecipeError e) {
    AELog.warning(""String_Node_Str"" + line + ""String_Node_Str""+ file+ ""String_Node_Str""+ tokens.toString());
    if (data.exceptions)     AELog.error(e);
    if (data.crash)     throw e;
  }
  tokens.clear();
}","private void processTokens(IRecipeLoader loader,String file,int line) throws RecipeError {
  try {
    IRecipeHandlerRegistry cr=AEApi.instance().registries().recipes();
    if (tokens.isEmpty())     return;
    int split=tokens.indexOf(""String_Node_Str"");
    if (split != -1) {
      String operation=tokens.remove(0).toLowerCase();
      if (operation.equals(""String_Node_Str"")) {
        if (tokens.size() == 3 && tokens.indexOf(""String_Node_Str"") == 1)         data.aliases.put(tokens.get(0),tokens.get(2));
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"")) {
        List<String> pre=tokens.subList(0,split - 1);
        List<String> post=tokens.subList(split,tokens.size());
        List<List<IIngredient>> inputs=parseLines(pre);
        if (inputs.size() == 1 && inputs.get(0).size() > 0 && post.size() == 1) {
          data.groups.put(post.get(0),new GroupIngredient(post.get(0),inputs.get(0)));
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"")) {
        List<String> pre=tokens.subList(0,split - 1);
        List<String> post=tokens.subList(split,tokens.size());
        List<List<IIngredient>> inputs=parseLines(pre);
        if (inputs.size() == 1 && inputs.get(0).size() > 0 && post.size() == 1) {
          ICraftHandler ch=new OreRegistration(inputs.get(0),post.get(0));
          addCrafting(ch);
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else {
        List<String> pre=tokens.subList(0,split - 1);
        List<String> post=tokens.subList(split,tokens.size());
        List<List<IIngredient>> inputs=parseLines(pre);
        List<List<IIngredient>> outputs=parseLines(post);
        ICraftHandler ch=cr.getCraftHandlerFor(operation);
        if (ch != null) {
          ch.setup(inputs,outputs);
          addCrafting(ch);
        }
 else         throw new RecipeError(""String_Node_Str"" + operation);
      }
    }
 else {
      String operation=tokens.remove(0).toLowerCase();
      if (operation.equals(""String_Node_Str"") && (tokens.get(0).equals(""String_Node_Str"") || tokens.get(0).equals(""String_Node_Str""))) {
        if (tokens.size() == 1) {
          data.exceptions=tokens.get(0).equals(""String_Node_Str"");
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"") && (tokens.get(0).equals(""String_Node_Str"") || tokens.get(0).equals(""String_Node_Str""))) {
        if (tokens.size() == 1) {
          data.crash=tokens.get(0).equals(""String_Node_Str"");
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"")) {
        if (tokens.size() == 1 && (tokens.get(0).equals(""String_Node_Str"") || tokens.get(0).equals(""String_Node_Str""))) {
          data.erroronmissing=tokens.get(0).equals(""String_Node_Str"");
        }
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       if (operation.equals(""String_Node_Str"")) {
        if (tokens.size() == 1)         (new RecipeHandler(this)).parseRecipes(loader,tokens.get(0));
 else         throw new RecipeError(""String_Node_Str"");
      }
 else       throw new RecipeError(operation + ""String_Node_Str"" + tokens.toString()+ ""String_Node_Str"");
    }
  }
 catch (  RecipeError e) {
    AELog.warning(""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ line+ ""String_Node_Str""+ file+ ""String_Node_Str""+ tokens.toString());
    if (data.exceptions)     AELog.error(e);
    if (data.crash)     throw e;
  }
  tokens.clear();
}"
30783,"@Override public void markForSave(){
  markDirty();
}","@Override public void markForSave(){
  super.markDirty();
}"
30784,"@Override public void registerBlockIcons(IIconRegister iconRegistry){
  return;
}","@Override public void registerBlockIcons(IIconRegister iconRegistry){
  registerNoIcons();
}"
30785,"@Override public void registerBlockIcons(IIconRegister iconRegistry){
  return;
}","@Override public void registerBlockIcons(IIconRegister iconRegistry){
  registerNoIcons();
}"
30786,"@Override public void PostInit(){
  registerPowerP2P();
  registerItemP2P();
  registerLiquidsP2P();
}","@Override public void PostInit(){
  registerPowerP2P();
  registerItemP2P();
  Blocks b=AEApi.instance().blocks();
  addFacade(b.blockFluix.stack(1));
  addFacade(b.blockQuartz.stack(1));
  addFacade(b.blockQuartzChiseled.stack(1));
  addFacade(b.blockQuartzPiller.stack(1));
  registerLiquidsP2P();
}"
30787,"@Override public void readFromNBT(NBTTagCompound data){
  priority=data.getInteger(""String_Node_Str"");
}","@Override public void readFromNBT(NBTTagCompound data){
  config.readFromNBT(data);
  priority=data.getInteger(""String_Node_Str"");
}"
30788,"@Override public void writeToNBT(NBTTagCompound data){
  data.setInteger(""String_Node_Str"",priority);
}","@Override public void writeToNBT(NBTTagCompound data){
  config.writeToNBT(data);
  data.setInteger(""String_Node_Str"",priority);
}"
30789,"public TileChest(){
  gridProxy.setFlags(GridFlags.REQUIRE_CHANNEL);
  addNewHandler(new invManger());
  internalPublicPowerStorage=true;
  internalPowerFlow=AccessRestriction.WRITE;
}","public TileChest(){
  gridProxy.setFlags(GridFlags.REQUIRE_CHANNEL);
  addNewHandler(new invManger());
  config.registerSetting(Settings.SORT_BY,SortOrder.NAME);
  config.registerSetting(Settings.VIEW_MODE,ViewItems.ALL);
  config.registerSetting(Settings.SORT_DIRECTION,SortDir.ASCENDING);
  internalPublicPowerStorage=true;
  internalPowerFlow=AccessRestriction.WRITE;
}"
30790,"public void PostInit(FMLPostInitializationEvent event){
  PlayerMessages.values();
  GuiText.values();
  Api.instance.partHelper.initFMPSupport();
  ((BlockCableBus)AEApi.instance().blocks().blockMultiPart.block()).setupTile();
  Upgrades.SPEED.registerItem(AEApi.instance().blocks().blockIOPort.stack(1),3);
  Upgrades.REDSTONE.registerItem(AEApi.instance().blocks().blockIOPort.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partLevelEmitter.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partImportBus.stack(1),1);
  Upgrades.REDSTONE.registerItem(AEApi.instance().parts().partImportBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partImportBus.stack(1),2);
  Upgrades.SPEED.registerItem(AEApi.instance().parts().partImportBus.stack(1),4);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.REDSTONE.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partExportBus.stack(1),2);
  Upgrades.SPEED.registerItem(AEApi.instance().parts().partExportBus.stack(1),4);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell1k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell1k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell4k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell4k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell16k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell16k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell64k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell64k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemPortableCell.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemPortableCell.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partStorageBus.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().parts().partStorageBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partStorageBus.stack(1),5);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemMassCannon.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemMassCannon.stack(1),1);
  Upgrades.SPEED.registerItem(AEApi.instance().items().itemMassCannon.stack(1),4);
  AEApi.instance().registries().wireless().registerWirelessHandler((IWirelessTermHandler)AEApi.instance().items().itemWirelessTerminal.item());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.ChestLoot)) {
    ChestGenHooks d=ChestGenHooks.getInfo(ChestGenHooks.MINESHAFT_CORRIDOR);
    d.addItem(new WeightedRandomChestContent(AEApi.instance().materials().materialCertusQuartzCrystal.stack(1),1,4,2));
    d.addItem(new WeightedRandomChestContent(AEApi.instance().materials().materialCertusQuartzDust.stack(1),1,4,2));
  }
  if (AEConfig.instance.isFeatureEnabled(AEFeature.VillagerTrading))   VillagerRegistry.instance().registerVillageTradeHandler(3,new AETrading());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.CertusQuartzWorldGen))   GameRegistry.registerWorldGenerator(new QuartzWorldGen(),0);
  recipeHandler.registerHandlers();
}","public void PostInit(FMLPostInitializationEvent event){
  PlayerMessages.values();
  GuiText.values();
  Api.instance.partHelper.initFMPSupport();
  ((BlockCableBus)AEApi.instance().blocks().blockMultiPart.block()).setupTile();
  Upgrades.SPEED.registerItem(AEApi.instance().blocks().blockIOPort.stack(1),3);
  Upgrades.REDSTONE.registerItem(AEApi.instance().blocks().blockIOPort.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partLevelEmitter.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partImportBus.stack(1),1);
  Upgrades.REDSTONE.registerItem(AEApi.instance().parts().partImportBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partImportBus.stack(1),2);
  Upgrades.SPEED.registerItem(AEApi.instance().parts().partImportBus.stack(1),4);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.REDSTONE.registerItem(AEApi.instance().parts().partExportBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partExportBus.stack(1),2);
  Upgrades.SPEED.registerItem(AEApi.instance().parts().partExportBus.stack(1),4);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell1k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell1k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell4k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell4k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell16k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell16k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemCell64k.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemCell64k.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemPortableCell.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemPortableCell.stack(1),1);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partStorageBus.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().parts().partStorageBus.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partStorageBus.stack(1),5);
  Upgrades.FUZZY.registerItem(AEApi.instance().parts().partFormationPlane.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().parts().partFormationPlane.stack(1),1);
  Upgrades.CAPACITY.registerItem(AEApi.instance().parts().partFormationPlane.stack(1),5);
  Upgrades.FUZZY.registerItem(AEApi.instance().items().itemMassCannon.stack(1),1);
  Upgrades.INVERTER.registerItem(AEApi.instance().items().itemMassCannon.stack(1),1);
  Upgrades.SPEED.registerItem(AEApi.instance().items().itemMassCannon.stack(1),4);
  AEApi.instance().registries().wireless().registerWirelessHandler((IWirelessTermHandler)AEApi.instance().items().itemWirelessTerminal.item());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.ChestLoot)) {
    ChestGenHooks d=ChestGenHooks.getInfo(ChestGenHooks.MINESHAFT_CORRIDOR);
    d.addItem(new WeightedRandomChestContent(AEApi.instance().materials().materialCertusQuartzCrystal.stack(1),1,4,2));
    d.addItem(new WeightedRandomChestContent(AEApi.instance().materials().materialCertusQuartzDust.stack(1),1,4,2));
  }
  if (AEConfig.instance.isFeatureEnabled(AEFeature.VillagerTrading))   VillagerRegistry.instance().registerVillageTradeHandler(3,new AETrading());
  if (AEConfig.instance.isFeatureEnabled(AEFeature.CertusQuartzWorldGen))   GameRegistry.registerWorldGenerator(new QuartzWorldGen(),0);
  recipeHandler.registerHandlers();
}"
30791,"@Override public void initGui(){
  super.initGui();
  buttonList.add(plus1=new GuiButton(0,this.guiLeft + 20,this.guiTop + 32,22,20,""String_Node_Str""));
  buttonList.add(plus10=new GuiButton(0,this.guiLeft + 48,this.guiTop + 32,28,20,""String_Node_Str""));
  buttonList.add(plus100=new GuiButton(0,this.guiLeft + 82,this.guiTop + 32,32,20,""String_Node_Str""));
  buttonList.add(plus1000=new GuiButton(0,this.guiLeft + 120,this.guiTop + 32,38,20,""String_Node_Str""));
  buttonList.add(minus1=new GuiButton(0,this.guiLeft + 20,this.guiTop + 69,22,20,""String_Node_Str""));
  buttonList.add(minus10=new GuiButton(0,this.guiLeft + 48,this.guiTop + 69,28,20,""String_Node_Str""));
  buttonList.add(minus100=new GuiButton(0,this.guiLeft + 82,this.guiTop + 69,32,20,""String_Node_Str""));
  buttonList.add(minus1000=new GuiButton(0,this.guiLeft + 120,this.guiTop + 69,38,20,""String_Node_Str""));
  ItemStack myIcon=null;
  Object target=((AEBaseContainer)inventorySlots).getTarget();
  if (target instanceof PartStorageBus) {
    myIcon=AEApi.instance().parts().partStorageBus.stack(1);
    OriginalGui=GuiBridge.GUI_STORAGEBUS;
  }
  if (target instanceof TileDrive) {
    myIcon=AEApi.instance().blocks().blockDrive.stack(1);
    OriginalGui=GuiBridge.GUI_DRIVE;
  }
  if (target instanceof TileChest) {
    myIcon=AEApi.instance().blocks().blockChest.stack(1);
    OriginalGui=GuiBridge.GUI_CHEST;
  }
  if (OriginalGui != null)   buttonList.add(originalGuiBtn=new GuiTabButton(this.guiLeft + 154,this.guiTop,myIcon,myIcon.getDisplayName(),itemRender));
  priority=new GuiTextField(fontRendererObj,this.guiLeft + 62,this.guiTop + 57,59,fontRendererObj.FONT_HEIGHT);
  priority.setEnableBackgroundDrawing(false);
  priority.setMaxStringLength(16);
  priority.setTextColor(0xFFFFFF);
  priority.setVisible(true);
  priority.setFocused(true);
  ((ContainerPriority)inventorySlots).setTextField(priority);
}","@Override public void initGui(){
  super.initGui();
  buttonList.add(plus1=new GuiButton(0,this.guiLeft + 20,this.guiTop + 32,22,20,""String_Node_Str""));
  buttonList.add(plus10=new GuiButton(0,this.guiLeft + 48,this.guiTop + 32,28,20,""String_Node_Str""));
  buttonList.add(plus100=new GuiButton(0,this.guiLeft + 82,this.guiTop + 32,32,20,""String_Node_Str""));
  buttonList.add(plus1000=new GuiButton(0,this.guiLeft + 120,this.guiTop + 32,38,20,""String_Node_Str""));
  buttonList.add(minus1=new GuiButton(0,this.guiLeft + 20,this.guiTop + 69,22,20,""String_Node_Str""));
  buttonList.add(minus10=new GuiButton(0,this.guiLeft + 48,this.guiTop + 69,28,20,""String_Node_Str""));
  buttonList.add(minus100=new GuiButton(0,this.guiLeft + 82,this.guiTop + 69,32,20,""String_Node_Str""));
  buttonList.add(minus1000=new GuiButton(0,this.guiLeft + 120,this.guiTop + 69,38,20,""String_Node_Str""));
  ItemStack myIcon=null;
  Object target=((AEBaseContainer)inventorySlots).getTarget();
  if (target instanceof PartStorageBus) {
    myIcon=AEApi.instance().parts().partStorageBus.stack(1);
    OriginalGui=GuiBridge.GUI_STORAGEBUS;
  }
  if (target instanceof PartFormationPlane) {
    myIcon=AEApi.instance().parts().partFormationPlane.stack(1);
    OriginalGui=GuiBridge.GUI_FPLANE;
  }
  if (target instanceof TileDrive) {
    myIcon=AEApi.instance().blocks().blockDrive.stack(1);
    OriginalGui=GuiBridge.GUI_DRIVE;
  }
  if (target instanceof TileChest) {
    myIcon=AEApi.instance().blocks().blockChest.stack(1);
    OriginalGui=GuiBridge.GUI_CHEST;
  }
  if (OriginalGui != null)   buttonList.add(originalGuiBtn=new GuiTabButton(this.guiLeft + 154,this.guiTop,myIcon,myIcon.getDisplayName(),itemRender));
  priority=new GuiTextField(fontRendererObj,this.guiLeft + 62,this.guiTop + 57,59,fontRendererObj.FONT_HEIGHT);
  priority.setEnableBackgroundDrawing(false);
  priority.setMaxStringLength(16);
  priority.setTextColor(0xFFFFFF);
  priority.setVisible(true);
  priority.setFocused(true);
  ((ContainerPriority)inventorySlots).setTextField(priority);
}"
30792,"@Override public void Init(){
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  AEApi.instance().registries().externalStorage().addExternalStorageInterface(new BCPipeHandler());
}","@Override public void Init(){
  TestClass(IPipeConnection.class);
  TestClass(ItemFacade.class);
  TestClass(IToolWrench.class);
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  AEApi.instance().registries().externalStorage().addExternalStorageInterface(new BCPipeHandler());
}"
30793,"@Override public void Init(){
}","@Override public void Init(){
  TestClass(IDeepStorageUnit.class);
}"
30794,"@Override public void Init() throws Throwable {
  if (((Object)this) instanceof MJPerdition) {
  }
}","@Override public void Init() throws Throwable {
  TestClass(MJPerdition.class);
}"
30795,"@Override public IItemList<IAEItemStack> getAvailableItems(IItemList out){
  return out;
}","@Override public IItemList<IAEItemStack> getAvailableItems(IItemList<IAEItemStack> out){
  return out;
}"
30796,"@Override public IItemList<IAEItemStack> getAvailableItems(IItemList out){
  ItemStack is=dsu.getStoredItemType();
  if (is != null) {
    out.add(AEItemStack.create(is));
  }
  return out;
}","@Override public IItemList<IAEItemStack> getAvailableItems(IItemList<IAEItemStack> out){
  ItemStack is=dsu.getStoredItemType();
  if (is != null) {
    out.add(AEItemStack.create(is));
  }
  return out;
}"
30797,"@Override public IExternalStorageHandler getHandler(TileEntity te,ForgeDirection d,StorageChannel chan){
  for (  IExternalStorageHandler x : Handlers) {
    if (x.canHandle(te,d,chan))     return x;
  }
  return null;
}","@Override public IExternalStorageHandler getHandler(TileEntity te,ForgeDirection d,StorageChannel chan){
  for (  IExternalStorageHandler x : Handlers) {
    if (x.canHandle(te,d,chan))     return x;
  }
  if (lastHandler.canHandle(te,d,chan))   return lastHandler;
  return null;
}"
30798,"public boolean readFromStream(ByteBuf out) throws IOException {
  int facadeSides=out.readByte();
  int ids[]=new int[2];
  for (int x=0; x < facades.length; x++) {
    ForgeDirection side=ForgeDirection.getOrientation(x);
    int ix=(1 << x);
    if ((facadeSides & ix) == ix) {
      ids[0]=out.readInt();
      ids[1]=out.readInt();
      boolean isBC=ids[0] < 0;
      ids[0]=Math.abs(ids[0]);
      if (isBC && AppEng.instance.isIntegrationEnabled(""String_Node_Str"")) {
        IBC bc=(IBC)AppEng.instance.getIntegration(""String_Node_Str"");
        facades[x]=bc.createFacadePart(ids,side);
      }
 else       if (!isBC) {
        ItemFacade ifa=(ItemFacade)AEApi.instance().items().itemFacade.item();
        ItemStack facade=ifa.createFromInts(ids);
        if (facade != null)         facades[x]=ifa.createPartFromItemStack(facade,side);
      }
    }
 else     facades[x]=null;
  }
  return false;
}","public boolean readFromStream(ByteBuf out) throws IOException {
  int facadeSides=out.readByte();
  int ids[]=new int[2];
  for (int x=0; x < facades.length; x++) {
    ForgeDirection side=ForgeDirection.getOrientation(x);
    int ix=(1 << x);
    if ((facadeSides & ix) == ix) {
      ids[0]=out.readInt();
      ids[1]=out.readInt();
      boolean isBC=ids[0] < 0;
      ids[0]=Math.abs(ids[0]);
      if (isBC && AppEng.instance.isIntegrationEnabled(""String_Node_Str"")) {
        IBC bc=(IBC)AppEng.instance.getIntegration(""String_Node_Str"");
        facades[x]=bc.createFacadePart((Block)Block.blockRegistry.getObjectById(ids[0]),ids[1],side);
      }
 else       if (!isBC) {
        ItemFacade ifa=(ItemFacade)AEApi.instance().items().itemFacade.item();
        ItemStack facade=ifa.createFromInts(ids);
        if (facade != null)         facades[x]=ifa.createPartFromItemStack(facade,side);
      }
    }
 else     facades[x]=null;
  }
  return false;
}"
30799,BaseBCperdition createPerdition(BuildCraft buildCraft);,BaseMJperdition createPerdition(BuildCraft buildCraft);
30800,"@Override public boolean canHandle(TileEntity te,ForgeDirection d,StorageChannel channel){
  if (channel == StorageChannel.ITEMS && te instanceof ITileStorageMonitorable)   return true;
  if (channel == StorageChannel.ITEMS && te instanceof IInventory)   return true;
  return te instanceof TileCondenser;
}","@Override public boolean canHandle(TileEntity te,ForgeDirection d,StorageChannel channel){
  if (channel == StorageChannel.ITEMS && te instanceof ITileStorageMonitorable)   return true;
  return te instanceof TileCondenser;
}"
30801,"@Override public IMEInventory getInventory(TileEntity te,ForgeDirection d,StorageChannel channel){
  if (te instanceof TileCondenser) {
    if (channel == StorageChannel.ITEMS)     return new VoidItemInventory((TileCondenser)te);
 else     return new VoidFluidInventory((TileCondenser)te);
  }
  if (te instanceof ITileStorageMonitorable) {
    ITileStorageMonitorable iface=(ITileStorageMonitorable)te;
    IStorageMonitorable sm=iface.getMonitorable(d);
    if (channel == StorageChannel.ITEMS && sm != null) {
      IMEInventory<IAEItemStack> ii=sm.getItemInventory();
      if (ii != null)       return ii;
    }
    if (channel == StorageChannel.FLUIDS && sm != null) {
      IMEInventory<IAEFluidStack> fi=sm.getFluidInventory();
      if (fi != null)       return fi;
    }
  }
  if (channel == StorageChannel.ITEMS && te instanceof IInventory) {
    return new MEMonitorIInventory((IInventory)te,d);
  }
  return null;
}","@Override public IMEInventory getInventory(TileEntity te,ForgeDirection d,StorageChannel channel){
  if (te instanceof TileCondenser) {
    if (channel == StorageChannel.ITEMS)     return new VoidItemInventory((TileCondenser)te);
 else     return new VoidFluidInventory((TileCondenser)te);
  }
  if (te instanceof ITileStorageMonitorable) {
    ITileStorageMonitorable iface=(ITileStorageMonitorable)te;
    IStorageMonitorable sm=iface.getMonitorable(d);
    if (channel == StorageChannel.ITEMS && sm != null) {
      IMEInventory<IAEItemStack> ii=sm.getItemInventory();
      if (ii != null)       return ii;
    }
    if (channel == StorageChannel.FLUIDS && sm != null) {
      IMEInventory<IAEFluidStack> fi=sm.getFluidInventory();
      if (fi != null)       return fi;
    }
  }
  return null;
}"
30802,"@Override public TickRateModulation tickingRequest(IGridNode node,int TicksSinceLastCall){
  if (!output && proxy.isActive()) {
    float totalRequiredPower=0.0f;
    TunnelCollection<PartP2PBCPower> tunnelset;
    try {
      tunnelset=getOutputs();
    }
 catch (    GridAccessException e) {
      return TickRateModulation.IDLE;
    }
    for (    PartP2PBCPower o : tunnelset) {
      IPowerReceptor target=o.getPowerTarget();
      if (target != null) {
        PowerReceiver tp=target.getPowerReceiver(side.getOpposite());
        if (tp != null) {
          float howmuch=tp.powerRequest();
          if (howmuch > tp.getMaxEnergyReceived())           howmuch=tp.getMaxEnergyReceived();
          if (howmuch > 0.01 && howmuch > tp.getMinEnergyReceived()) {
            totalRequiredPower+=howmuch;
          }
        }
      }
    }
    if (totalRequiredPower < 0.1)     return TickRateModulation.SLOWER;
    float currentTotal=pp.getEnergyStored();
    if (currentTotal < 0.01)     return TickRateModulation.SLOWER;
    for (    PartP2PBCPower o : tunnelset) {
      IPowerReceptor target=o.getPowerTarget();
      if (target != null) {
        PowerReceiver tp=target.getPowerReceiver(side.getOpposite());
        if (tp != null) {
          float howmuch=tp.powerRequest();
          if (howmuch > tp.getMaxEnergyReceived())           howmuch=tp.getMaxEnergyReceived();
          if (howmuch > 0.01 && howmuch > tp.getMinEnergyReceived()) {
            float toPull=currentTotal * (howmuch / totalRequiredPower);
            float pulled=pp.useEnergy(0,toPull,true);
            QueueTunnelDrain(PowerUnits.MJ,pulled * AEConfig.TunnelPowerLoss);
            tp.receiveEnergy(Type.PIPE,pulled,o.side.getOpposite());
          }
        }
      }
    }
    return TickRateModulation.FASTER;
  }
  return TickRateModulation.SLOWER;
}","@Override public TickRateModulation tickingRequest(IGridNode node,int TicksSinceLastCall){
  if (!output && proxy.isActive()) {
    float totalRequiredPower=0.0f;
    TunnelCollection<PartP2PBCPower> tunnelset;
    try {
      tunnelset=getOutputs();
    }
 catch (    GridAccessException e) {
      return TickRateModulation.IDLE;
    }
    for (    PartP2PBCPower o : tunnelset) {
      IPowerReceptor target=o.getPowerTarget();
      if (target != null) {
        PowerReceiver tp=target.getPowerReceiver(side.getOpposite());
        if (tp != null) {
          double howmuch=tp.powerRequest();
          if (howmuch > tp.getMaxEnergyReceived())           howmuch=tp.getMaxEnergyReceived();
          if (howmuch > 0.01 && howmuch > tp.getMinEnergyReceived()) {
            totalRequiredPower+=howmuch;
          }
        }
      }
    }
    if (totalRequiredPower < 0.1)     return TickRateModulation.SLOWER;
    double currentTotal=pp.getEnergyStored();
    if (currentTotal < 0.01)     return TickRateModulation.SLOWER;
    for (    PartP2PBCPower o : tunnelset) {
      IPowerReceptor target=o.getPowerTarget();
      if (target != null) {
        PowerReceiver tp=target.getPowerReceiver(side.getOpposite());
        if (tp != null) {
          double howmuch=tp.powerRequest();
          if (howmuch > tp.getMaxEnergyReceived())           howmuch=tp.getMaxEnergyReceived();
          if (howmuch > 0.01 && howmuch > tp.getMinEnergyReceived()) {
            double toPull=currentTotal * (howmuch / totalRequiredPower);
            double pulled=pp.useEnergy(0,toPull,true);
            QueueTunnelDrain(PowerUnits.MJ,pulled * AEConfig.TunnelPowerLoss);
            tp.receiveEnergy(Type.PIPE,pulled,o.side.getOpposite());
          }
        }
      }
    }
    return TickRateModulation.FASTER;
  }
  return TickRateModulation.SLOWER;
}"
30803,"protected void QueueTunnelDrain(PowerUnits mj,float f){
}","protected void QueueTunnelDrain(PowerUnits mj,double f){
}"
30804,"public void drawSlot(Slot s){
  if (s instanceof SlotME) {
    RenderItem pIR=itemRender;
    itemRender=aeri;
    try {
      this.zLevel=100.0F;
      itemRender.zLevel=100.0F;
      if (!isPowered()) {
        GL11.glDisable(GL11.GL_LIGHTING);
        super.drawRect(s.xDisplayPosition,s.yDisplayPosition,16 + s.xDisplayPosition,16 + s.yDisplayPosition,0x66111111);
        GL11.glEnable(GL11.GL_LIGHTING);
      }
      this.zLevel=0.0F;
      itemRender.zLevel=0.0F;
      if (s instanceof SlotME)       aeri.aestack=((SlotME)s).getAEStack();
 else       aeri.aestack=null;
      safeDrawSlot(s);
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + err.toString());
      if (Platform.isDrawing(Tessellator.instance))       Tessellator.instance.draw();
    }
    itemRender=pIR;
    return;
  }
 else {
    try {
      ItemStack is=s.getStack();
      if (s instanceof AppEngSlot && (((AppEngSlot)s).renderIconWithItem() || is == null) && (((AppEngSlot)s).isEnabled())) {
        AppEngSlot aes=(AppEngSlot)s;
        if (aes.getIcon() >= 0) {
          bindTexture(""String_Node_Str"");
          GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
          Tessellator tessellator=Tessellator.instance;
          try {
            int uv_y=(int)Math.floor(aes.getIcon() / 16);
            int uv_x=aes.getIcon() - uv_y * 16;
            GL11.glEnable(GL11.GL_BLEND);
            GL11.glDisable(GL11.GL_LIGHTING);
            GL11.glEnable(GL11.GL_TEXTURE_2D);
            GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
            GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
            float par1=aes.xDisplayPosition;
            float par2=aes.yDisplayPosition;
            float par3=uv_x * 16;
            float par4=uv_y * 16;
            float par5=16;
            float par6=16;
            float f=0.00390625F;
            float f1=0.00390625F;
            tessellator.startDrawingQuads();
            tessellator.setColorRGBA_F(1.0f,1.0f,1.0f,aes.getOpacityOfIcon());
            tessellator.addVertexWithUV((double)(par1 + 0),(double)(par2 + par6),(double)this.zLevel,(double)((float)(par3 + 0) * f),(double)((float)(par4 + par6) * f1));
            tessellator.addVertexWithUV((double)(par1 + par5),(double)(par2 + par6),(double)this.zLevel,(double)((float)(par3 + par5) * f),(double)((float)(par4 + par6) * f1));
            tessellator.addVertexWithUV((double)(par1 + par5),(double)(par2 + 0),(double)this.zLevel,(double)((float)(par3 + par5) * f),(double)((float)(par4 + 0) * f1));
            tessellator.addVertexWithUV((double)(par1 + 0),(double)(par2 + 0),(double)this.zLevel,(double)((float)(par3 + 0) * f),(double)((float)(par4 + 0) * f1));
            tessellator.setColorRGBA_F(1.0f,1.0f,1.0f,1.0f);
            tessellator.draw();
          }
 catch (          Exception err) {
            if (Platform.isDrawing(tessellator))             tessellator.draw();
          }
          GL11.glPopAttrib();
        }
      }
      if (is != null && s instanceof AppEngSlot) {
        if (((AppEngSlot)s).isValid == hasCalculatedValidness.NotAvailable) {
          boolean isValid=s.isItemValid(is) || s instanceof SlotOutput || s instanceof AppEngCraftingSlot|| s instanceof SlotDisabled|| s instanceof SlotInaccessable|| s instanceof SlotFake;
          if (isValid && s instanceof SlotRestrictedInput) {
            try {
              isValid=((SlotRestrictedInput)s).isValid(is,this.mc.theWorld);
            }
 catch (            Exception err) {
              AELog.error(err);
            }
          }
          ((AppEngSlot)s).isValid=isValid ? hasCalculatedValidness.Valid : hasCalculatedValidness.Invalid;
        }
        if (((AppEngSlot)s).isValid == hasCalculatedValidness.Invalid) {
          this.zLevel=100.0F;
          itemRender.zLevel=100.0F;
          GL11.glDisable(GL11.GL_LIGHTING);
          super.drawRect(s.xDisplayPosition,s.yDisplayPosition,16 + s.xDisplayPosition,16 + s.yDisplayPosition,0x66ff6666);
          GL11.glEnable(GL11.GL_LIGHTING);
          this.zLevel=0.0F;
          itemRender.zLevel=0.0F;
        }
      }
      if (s instanceof AppEngSlot) {
        ((AppEngSlot)s).isDisplay=true;
        safeDrawSlot(s);
      }
 else       safeDrawSlot(s);
      return;
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + err.toString());
    }
  }
  safeDrawSlot(s);
}","public void drawSlot(Slot s){
  if (s instanceof SlotME) {
    RenderItem pIR=itemRender;
    itemRender=aeri;
    try {
      this.zLevel=100.0F;
      itemRender.zLevel=100.0F;
      if (!isPowered()) {
        GL11.glDisable(GL11.GL_LIGHTING);
        super.drawRect(s.xDisplayPosition,s.yDisplayPosition,16 + s.xDisplayPosition,16 + s.yDisplayPosition,0x66111111);
        GL11.glEnable(GL11.GL_LIGHTING);
      }
      this.zLevel=0.0F;
      itemRender.zLevel=0.0F;
      if (s instanceof SlotME)       aeri.aestack=((SlotME)s).getAEStack();
 else       aeri.aestack=null;
      safeDrawSlot(s);
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + err.toString());
      if (Platform.isDrawing(Tessellator.instance))       Tessellator.instance.draw();
    }
    itemRender=pIR;
    return;
  }
 else {
    try {
      ItemStack is=s.getStack();
      if (s instanceof AppEngSlot && (((AppEngSlot)s).renderIconWithItem() || is == null) && (((AppEngSlot)s).isEnabled())) {
        AppEngSlot aes=(AppEngSlot)s;
        if (aes.getIcon() >= 0) {
          bindTexture(""String_Node_Str"");
          GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);
          Tessellator tessellator=Tessellator.instance;
          try {
            int uv_y=(int)Math.floor(aes.getIcon() / 16);
            int uv_x=aes.getIcon() - uv_y * 16;
            GL11.glEnable(GL11.GL_BLEND);
            GL11.glDisable(GL11.GL_LIGHTING);
            GL11.glEnable(GL11.GL_TEXTURE_2D);
            GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
            GL11.glColor4f(1.0f,1.0f,1.0f,1.0f);
            float par1=aes.xDisplayPosition;
            float par2=aes.yDisplayPosition;
            float par3=uv_x * 16;
            float par4=uv_y * 16;
            float par5=16;
            float par6=16;
            float f=0.00390625F;
            float f1=0.00390625F;
            tessellator.startDrawingQuads();
            tessellator.setColorRGBA_F(1.0f,1.0f,1.0f,aes.getOpacityOfIcon());
            tessellator.addVertexWithUV((double)(par1 + 0),(double)(par2 + par6),(double)this.zLevel,(double)((float)(par3 + 0) * f),(double)((float)(par4 + par6) * f1));
            tessellator.addVertexWithUV((double)(par1 + par5),(double)(par2 + par6),(double)this.zLevel,(double)((float)(par3 + par5) * f),(double)((float)(par4 + par6) * f1));
            tessellator.addVertexWithUV((double)(par1 + par5),(double)(par2 + 0),(double)this.zLevel,(double)((float)(par3 + par5) * f),(double)((float)(par4 + 0) * f1));
            tessellator.addVertexWithUV((double)(par1 + 0),(double)(par2 + 0),(double)this.zLevel,(double)((float)(par3 + 0) * f),(double)((float)(par4 + 0) * f1));
            tessellator.setColorRGBA_F(1.0f,1.0f,1.0f,1.0f);
            tessellator.draw();
          }
 catch (          Exception err) {
            if (Platform.isDrawing(tessellator))             tessellator.draw();
          }
          GL11.glPopAttrib();
        }
      }
      if (is != null && s instanceof AppEngSlot) {
        if (((AppEngSlot)s).isValid == hasCalculatedValidness.NotAvailable) {
          boolean isValid=s.isItemValid(is) || s instanceof SlotOutput || s instanceof AppEngCraftingSlot|| s instanceof SlotDisabled|| s instanceof SlotInaccessable|| s instanceof SlotFake|| s.inventory instanceof UpgradeInventory;
          if (isValid && s instanceof SlotRestrictedInput) {
            try {
              isValid=((SlotRestrictedInput)s).isValid(is,this.mc.theWorld);
            }
 catch (            Exception err) {
              AELog.error(err);
            }
          }
          ((AppEngSlot)s).isValid=isValid ? hasCalculatedValidness.Valid : hasCalculatedValidness.Invalid;
        }
        if (((AppEngSlot)s).isValid == hasCalculatedValidness.Invalid) {
          this.zLevel=100.0F;
          itemRender.zLevel=100.0F;
          GL11.glDisable(GL11.GL_LIGHTING);
          super.drawRect(s.xDisplayPosition,s.yDisplayPosition,16 + s.xDisplayPosition,16 + s.yDisplayPosition,0x66ff6666);
          GL11.glEnable(GL11.GL_LIGHTING);
          this.zLevel=0.0F;
          itemRender.zLevel=0.0F;
        }
      }
      if (s instanceof AppEngSlot) {
        ((AppEngSlot)s).isDisplay=true;
        safeDrawSlot(s);
      }
 else       safeDrawSlot(s);
      return;
    }
 catch (    Exception err) {
      AELog.warning(""String_Node_Str"" + err.toString());
    }
  }
  safeDrawSlot(s);
}"
30805,"@Override public boolean isItemValid(ItemStack i){
  if (i == null)   return false;
  if (i.getItem() == null)   return false;
  if (!inventory.isItemValidForSlot(this.getSlotIndex(),i) && !(inventory instanceof UpgradeInventory))   return false;
  IAppEngApi api=AEApi.instance();
switch (which) {
case VALID_ENCODED_PATTERN_W_OUPUT:
case ENCODED_PATTERN_W_OUTPUT:
case ENCODED_PATTERN:
{
      ICraftingPatternMAC pattern=i.getItem() instanceof ICraftingPatternItem ? ((ICraftingPatternItem)i.getItem()).getPatternForItem(i) : null;
      if (pattern != null)       return pattern.isEncoded();
      return false;
    }
case BLANK_PATTERN:
{
    ICraftingPatternMAC pattern=i.getItem() instanceof ICraftingPatternItem ? ((ICraftingPatternItem)i.getItem()).getPatternForItem(i) : null;
    if (pattern != null)     return !pattern.isEncoded();
    return false;
  }
case ORE:
return appeng.api.AEApi.instance().registries().grinder().getRecipeForInput(i) != null;
case FUEL:
return TileEntityFurnace.getItemBurnTime(i) > 0;
case POWERED_TOOL:
return Platform.isChargeable(i);
case QE_SINGULARTIY:
return api.materials().materialQESingularity.sameAs(i);
case RANGE_BOOSTER:
return api.materials().materialWirelessBooster.sameAs(i);
case SPATIAL_STORAGE_CELLS:
return i.getItem() instanceof ISpatialStorageCell && ((ISpatialStorageCell)i.getItem()).isSpatialStorage(i);
case STORAGE_CELLS:
return AEApi.instance().registries().cell().isCellHandled(i);
case WORKBENCH_CELL:
return i != null && i.getItem() instanceof ICellWorkbenchItem && ((ICellWorkbenchItem)i.getItem()).isEditable(i);
case STORAGE_COMPONENT:
boolean isComp=i.getItem() instanceof IStorageComponent && ((IStorageComponent)i.getItem()).isStorageComponent(i);
return isComp;
case TRASH:
if (AEApi.instance().registries().cell().isCellHandled(i)) return false;
if (i.getItem() instanceof IStorageComponent && ((IStorageComponent)i.getItem()).isStorageComponent(i)) return false;
return true;
case WIRELESS_TERMINAL:
return AEApi.instance().registries().wireless().isWirelessTerminal(i);
case BIOMETRIC_CARD:
return i.getItem() instanceof IBiometricCard;
case UPGRADES:
return i.getItem() instanceof IUpgradeModule && ((IUpgradeModule)i.getItem()).getType(i) != null;
default :
break;
}
return false;
}","@Override public boolean isItemValid(ItemStack i){
  if (i == null)   return false;
  if (i.getItem() == null)   return false;
  if (!inventory.isItemValidForSlot(this.getSlotIndex(),i))   return false;
  IAppEngApi api=AEApi.instance();
switch (which) {
case VALID_ENCODED_PATTERN_W_OUPUT:
case ENCODED_PATTERN_W_OUTPUT:
case ENCODED_PATTERN:
{
      ICraftingPatternMAC pattern=i.getItem() instanceof ICraftingPatternItem ? ((ICraftingPatternItem)i.getItem()).getPatternForItem(i) : null;
      if (pattern != null)       return pattern.isEncoded();
      return false;
    }
case BLANK_PATTERN:
{
    ICraftingPatternMAC pattern=i.getItem() instanceof ICraftingPatternItem ? ((ICraftingPatternItem)i.getItem()).getPatternForItem(i) : null;
    if (pattern != null)     return !pattern.isEncoded();
    return false;
  }
case ORE:
return appeng.api.AEApi.instance().registries().grinder().getRecipeForInput(i) != null;
case FUEL:
return TileEntityFurnace.getItemBurnTime(i) > 0;
case POWERED_TOOL:
return Platform.isChargeable(i);
case QE_SINGULARTIY:
return api.materials().materialQESingularity.sameAs(i);
case RANGE_BOOSTER:
return api.materials().materialWirelessBooster.sameAs(i);
case SPATIAL_STORAGE_CELLS:
return i.getItem() instanceof ISpatialStorageCell && ((ISpatialStorageCell)i.getItem()).isSpatialStorage(i);
case STORAGE_CELLS:
return AEApi.instance().registries().cell().isCellHandled(i);
case WORKBENCH_CELL:
return i != null && i.getItem() instanceof ICellWorkbenchItem && ((ICellWorkbenchItem)i.getItem()).isEditable(i);
case STORAGE_COMPONENT:
boolean isComp=i.getItem() instanceof IStorageComponent && ((IStorageComponent)i.getItem()).isStorageComponent(i);
return isComp;
case TRASH:
if (AEApi.instance().registries().cell().isCellHandled(i)) return false;
if (i.getItem() instanceof IStorageComponent && ((IStorageComponent)i.getItem()).isStorageComponent(i)) return false;
return true;
case WIRELESS_TERMINAL:
return AEApi.instance().registries().wireless().isWirelessTerminal(i);
case BIOMETRIC_CARD:
return i.getItem() instanceof IBiometricCard;
case UPGRADES:
return i.getItem() instanceof IUpgradeModule && ((IUpgradeModule)i.getItem()).getType(i) != null;
default :
break;
}
return false;
}"
30806,"protected void setTileEntiy(Class<? extends TileEntity> c){
  AEBaseTile.registerTileItem(c,new ItemStack(this));
  GameRegistry.registerTileEntity(tileEntityType=c,FeatureFullname);
}","protected void setTileEntiy(Class<? extends TileEntity> c){
  AEBaseTile.registerTileItem(c,new ItemStackSrc(this,0));
  GameRegistry.registerTileEntity(tileEntityType=c,FeatureFullname);
}"
30807,"@Override public void detectAndSendChanges(){
  delay++;
  if (Platform.isServer() && delay > 15 && network != null) {
    delay=0;
    IEnergyGrid eg=network.getCache(IEnergyGrid.class);
    if (eg != null) {
      avgAddition=(long)(100.0 * eg.getAvgPowerInjection());
      powerUsage=(long)(100.0 * eg.getAvgPowerUsage());
      lo_avgAddition=(int)(avgAddition & 0xffffffffL);
      hi_avgAddition=(int)(avgAddition >> 32L);
      lo_powerUsage=(int)(powerUsage & 0xffffffffL);
      hi_powerUsage=(int)(powerUsage >> 32L);
      for (      Object c : this.crafters) {
        ICrafting icrafting=(ICrafting)c;
        icrafting.sendProgressBarUpdate(this,0,(int)lo_avgAddition);
        icrafting.sendProgressBarUpdate(this,1,(int)hi_avgAddition);
        icrafting.sendProgressBarUpdate(this,2,(int)lo_powerUsage);
        icrafting.sendProgressBarUpdate(this,3,(int)hi_powerUsage);
      }
    }
    PacketMEInventoryUpdate piu;
    try {
      piu=new PacketMEInventoryUpdate();
      for (      Class<? extends IGridHost> machineClass : network.getMachinesClasses()) {
        IItemList<IAEItemStack> list=AEApi.instance().storage().createItemList();
        for (        IGridNode machine : network.getMachines(machineClass)) {
          IGridBlock blk=machine.getGridBlock();
          ItemStack is=blk.getMachineRepresentation();
          if (is != null) {
            IAEItemStack ais=AEItemStack.create(is);
            ais.setStackSize(1);
            ais.setCountRequestable((long)(blk.getIdlePowerUsage() * 100.0));
            list.add(ais);
          }
        }
        for (        IAEItemStack ais : list)         piu.appendItem(ais);
      }
      for (      Object c : this.crafters) {
        if (c instanceof EntityPlayer)         NetworkHandler.instance.sendTo(piu,(EntityPlayerMP)c);
      }
    }
 catch (    IOException e) {
    }
  }
  super.detectAndSendChanges();
}","@Override public void detectAndSendChanges(){
  delay++;
  if (Platform.isServer() && delay > 15 && network != null) {
    delay=0;
    IEnergyGrid eg=network.getCache(IEnergyGrid.class);
    if (eg != null) {
      avgAddition=(long)(100.0 * eg.getAvgPowerInjection());
      powerUsage=(long)(100.0 * eg.getAvgPowerUsage());
      lo_avgAddition=(int)(avgAddition & 0xffffffffL);
      hi_avgAddition=(int)(avgAddition >> 32L);
      lo_powerUsage=(int)(powerUsage & 0xffffffffL);
      hi_powerUsage=(int)(powerUsage >> 32L);
      for (      Object c : this.crafters) {
        ICrafting icrafting=(ICrafting)c;
        icrafting.sendProgressBarUpdate(this,0,(int)lo_avgAddition);
        icrafting.sendProgressBarUpdate(this,1,(int)hi_avgAddition);
        icrafting.sendProgressBarUpdate(this,2,(int)lo_powerUsage);
        icrafting.sendProgressBarUpdate(this,3,(int)hi_powerUsage);
      }
    }
    PacketMEInventoryUpdate piu;
    try {
      piu=new PacketMEInventoryUpdate();
      for (      Class<? extends IGridHost> machineClass : network.getMachinesClasses()) {
        IItemList<IAEItemStack> list=AEApi.instance().storage().createItemList();
        for (        IGridNode machine : network.getMachines(machineClass)) {
          IGridBlock blk=machine.getGridBlock();
          ItemStack is=blk.getMachineRepresentation();
          if (is != null && is.getItem() != null) {
            IAEItemStack ais=AEItemStack.create(is);
            ais.setStackSize(1);
            ais.setCountRequestable((long)(blk.getIdlePowerUsage() * 100.0));
            list.add(ais);
          }
        }
        for (        IAEItemStack ais : list)         piu.appendItem(ais);
      }
      for (      Object c : this.crafters) {
        if (c instanceof EntityPlayer)         NetworkHandler.instance.sendTo(piu,(EntityPlayerMP)c);
      }
    }
 catch (    IOException e) {
    }
  }
  super.detectAndSendChanges();
}"
30808,"public void PreInit(FMLPreInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(OreDictionaryHandler.instance);
  Items items=appeng.core.Api.instance.items();
  Materials materials=appeng.core.Api.instance.materials();
  Parts parts=appeng.core.Api.instance.parts();
  Blocks blocks=appeng.core.Api.instance.blocks();
  AEItemDefinition materialItem=(AEFeatureHandler)addFeature(ItemMaterial.class);
  Class materialClass=materials.getClass();
  for (  MaterialType mat : MaterialType.values()) {
    try {
      Field f=materialClass.getField(""String_Node_Str"" + mat.name());
      ItemStack is=((ItemMaterial)materialItem.item()).createMaterial(mat);
      if (is != null)       f.set(materials,new DamagedItemDefinition(is));
 else       f.set(materials,new NullItemDefinition());
    }
 catch (    Throwable err) {
      AELog.severe(""String_Node_Str"" + mat.name());
      throw new RuntimeException(err);
    }
  }
  AEItemDefinition partItem=(AEFeatureHandler)addFeature(ItemPart.class);
  Class partClass=parts.getClass();
  for (  PartType type : PartType.values()) {
    try {
      Field f=partClass.getField(""String_Node_Str"" + type.name());
      Enum varients[]=type.getVarients();
      if (varients == null) {
        ItemStack is=((ItemPart)partItem.item()).createPart(type,null);
        if (is != null)         f.set(parts,new DamagedItemDefinition(is));
 else         f.set(parts,new NullItemDefinition());
      }
 else {
        if (varients[0] instanceof AEColor) {
          ColoredItemDefinition def=new ColoredItemDefinition();
          for (          Enum v : varients) {
            ItemStack is=((ItemPart)partItem.item()).createPart(type,v);
            if (is != null)             def.add((AEColor)v,is);
          }
          f.set(parts,def);
        }
      }
    }
 catch (    Throwable err) {
      AELog.severe(""String_Node_Str"" + type.name());
      throw new RuntimeException(err);
    }
  }
  blocks.blockMultiPart=addFeature(BlockCableBus.class);
  blocks.blockQuartzOre=addFeature(OreQuartz.class);
  blocks.blockQuartzOreCharged=addFeature(OreQuartzCharged.class);
  blocks.blockMatrixFrame=addFeature(BlockMatrixFrame.class);
  blocks.blockQuartz=addFeature(BlockQuartz.class);
  blocks.blockFluix=addFeature(BlockFluix.class);
  blocks.blockQuartzGlass=addFeature(BlockQuartzGlass.class);
  blocks.blockQuartzVibrantGlass=addFeature(BlockQuartzLamp.class);
  blocks.blockQuartzPiller=addFeature(BlockQuartzPillar.class);
  blocks.blockQuartzChiseled=addFeature(BlockQuartzChiseled.class);
  blocks.blockQuartzTorch=addFeature(BlockQuartzTorch.class);
  blocks.blockCharger=addFeature(BlockCharger.class);
  blocks.blockGrindStone=addFeature(BlockGrinder.class);
  blocks.blockCrankHandle=addFeature(BlockCrank.class);
  blocks.blockWireless=addFeature(BlockWireless.class);
  blocks.blockTinyTNT=addFeature(BlockTinyTNT.class);
  blocks.blockQuantumRing=addFeature(BlockQuantumRing.class);
  blocks.blockQuantumLink=addFeature(BlockQuantumLinkChamber.class);
  blocks.blockSpatialPylon=addFeature(BlockSpatialPylon.class);
  blocks.blockSpatialIOPort=addFeature(BlockSpatialIOPort.class);
  blocks.blockController=addFeature(BlockController.class);
  blocks.blockDrive=addFeature(BlockDrive.class);
  blocks.blockChest=addFeature(BlockChest.class);
  blocks.blockInterface=addFeature(BlockInterface.class);
  blocks.blockCellWorkbench=addFeature(BlockCellWorkbench.class);
  blocks.blockIOPort=addFeature(BlockIOPort.class);
  blocks.blockCondenser=addFeature(BlockCondenser.class);
  blocks.blockEnergyAcceptor=addFeature(BlockEnergyAcceptor.class);
  blocks.blockVibrationChamber=addFeature(BlockVibrationChamber.class);
  blocks.blockEnergyCell=addFeature(BlockEnergyCell.class);
  blocks.blockEnergyCellDense=addFeature(BlockDenseEnergyCell.class);
  blocks.blockEnergyCellCreative=addFeature(BlockCreativeEnergyCell.class);
  blocks.blockSecurity=addFeature(BlockSecurity.class);
  items.itemCellCreative=addFeature(ItemCreativeStorageCell.class);
  items.itemCell1k=addFeature(ItemBasicStorageCell.class,MaterialType.Cell1kPart,1);
  items.itemCell4k=addFeature(ItemBasicStorageCell.class,MaterialType.Cell4kPart,4);
  items.itemCell16k=addFeature(ItemBasicStorageCell.class,MaterialType.Cell16kPart,16);
  items.itemCell64k=addFeature(ItemBasicStorageCell.class,MaterialType.Cell64kPart,64);
  items.itemSpatialCell2=addFeature(ItemSpatialStorageCell.class,MaterialType.Cell2SpatialPart,2);
  items.itemSpatialCell16=addFeature(ItemSpatialStorageCell.class,MaterialType.Cell16SpatialPart,16);
  items.itemSpatialCell128=addFeature(ItemSpatialStorageCell.class,MaterialType.Cell128SpatialPart,128);
  items.itemCertusQuartzKnife=addFeature(ToolQuartzCuttingKnife.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzWrench=addFeature(ToolQuartzWrench.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzAxe=addFeature(ToolQuartzAxe.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzHoe=addFeature(ToolQuartzHoe.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzPick=addFeature(ToolQuartzPickaxe.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzShovel=addFeature(ToolQuartzSpade.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzSword=addFeature(ToolQuartzSword.class,AEFeature.CertusQuartzTools);
  items.itemNetherQuartzKnife=addFeature(ToolQuartzCuttingKnife.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzWrench=addFeature(ToolQuartzWrench.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzAxe=addFeature(ToolQuartzAxe.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzHoe=addFeature(ToolQuartzHoe.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzPick=addFeature(ToolQuartzPickaxe.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzShovel=addFeature(ToolQuartzSpade.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzSword=addFeature(ToolQuartzSword.class,AEFeature.NetherQuartzTools);
  items.itemMassCannon=addFeature(ToolMassCannon.class);
  items.itemMemoryCard=addFeature(ToolMemoryCard.class);
  items.itemChargedStaff=addFeature(ToolChargedStaff.class);
  items.itemEntropyManipulator=addFeature(ToolEntropyManipulator.class);
  items.itemWirelessTerminal=addFeature(ToolWirelessTerminal.class);
  items.itemNetworkTool=addFeature(ToolNetworkTool.class);
  items.itemPortableCell=addFeature(ToolPortableCell.class);
  items.itemBiometricCard=addFeature(ToolBiometricCard.class);
  items.itemFacade=addFeature(ItemFacade.class);
  addFeature(ToolDebugCard.class);
  addFeature(ToolReplicatorCard.class);
  addFeature(BlockItemGen.class);
  addFeature(BlockChunkloader.class);
}","public void PreInit(FMLPreInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(OreDictionaryHandler.instance);
  Items items=appeng.core.Api.instance.items();
  Materials materials=appeng.core.Api.instance.materials();
  Parts parts=appeng.core.Api.instance.parts();
  Blocks blocks=appeng.core.Api.instance.blocks();
  AEItemDefinition materialItem=(AEFeatureHandler)addFeature(ItemMaterial.class);
  Class materialClass=materials.getClass();
  for (  MaterialType mat : MaterialType.values()) {
    try {
      Field f=materialClass.getField(""String_Node_Str"" + mat.name());
      ItemStackSrc is=((ItemMaterial)materialItem.item()).createMaterial(mat);
      if (is != null)       f.set(materials,new DamagedItemDefinition(is));
 else       f.set(materials,new NullItemDefinition());
    }
 catch (    Throwable err) {
      AELog.severe(""String_Node_Str"" + mat.name());
      throw new RuntimeException(err);
    }
  }
  AEItemDefinition partItem=(AEFeatureHandler)addFeature(ItemPart.class);
  Class partClass=parts.getClass();
  for (  PartType type : PartType.values()) {
    try {
      Field f=partClass.getField(""String_Node_Str"" + type.name());
      Enum varients[]=type.getVarients();
      if (varients == null) {
        ItemStackSrc is=((ItemPart)partItem.item()).createPart(type,null);
        if (is != null)         f.set(parts,new DamagedItemDefinition(is));
 else         f.set(parts,new NullItemDefinition());
      }
 else {
        if (varients[0] instanceof AEColor) {
          ColoredItemDefinition def=new ColoredItemDefinition();
          for (          Enum v : varients) {
            ItemStackSrc is=((ItemPart)partItem.item()).createPart(type,v);
            if (is != null)             def.add((AEColor)v,is);
          }
          f.set(parts,def);
        }
      }
    }
 catch (    Throwable err) {
      AELog.severe(""String_Node_Str"" + type.name());
      throw new RuntimeException(err);
    }
  }
  blocks.blockMultiPart=addFeature(BlockCableBus.class);
  blocks.blockQuartzOre=addFeature(OreQuartz.class);
  blocks.blockQuartzOreCharged=addFeature(OreQuartzCharged.class);
  blocks.blockMatrixFrame=addFeature(BlockMatrixFrame.class);
  blocks.blockQuartz=addFeature(BlockQuartz.class);
  blocks.blockFluix=addFeature(BlockFluix.class);
  blocks.blockQuartzGlass=addFeature(BlockQuartzGlass.class);
  blocks.blockQuartzVibrantGlass=addFeature(BlockQuartzLamp.class);
  blocks.blockQuartzPiller=addFeature(BlockQuartzPillar.class);
  blocks.blockQuartzChiseled=addFeature(BlockQuartzChiseled.class);
  blocks.blockQuartzTorch=addFeature(BlockQuartzTorch.class);
  blocks.blockCharger=addFeature(BlockCharger.class);
  blocks.blockGrindStone=addFeature(BlockGrinder.class);
  blocks.blockCrankHandle=addFeature(BlockCrank.class);
  blocks.blockWireless=addFeature(BlockWireless.class);
  blocks.blockTinyTNT=addFeature(BlockTinyTNT.class);
  blocks.blockQuantumRing=addFeature(BlockQuantumRing.class);
  blocks.blockQuantumLink=addFeature(BlockQuantumLinkChamber.class);
  blocks.blockSpatialPylon=addFeature(BlockSpatialPylon.class);
  blocks.blockSpatialIOPort=addFeature(BlockSpatialIOPort.class);
  blocks.blockController=addFeature(BlockController.class);
  blocks.blockDrive=addFeature(BlockDrive.class);
  blocks.blockChest=addFeature(BlockChest.class);
  blocks.blockInterface=addFeature(BlockInterface.class);
  blocks.blockCellWorkbench=addFeature(BlockCellWorkbench.class);
  blocks.blockIOPort=addFeature(BlockIOPort.class);
  blocks.blockCondenser=addFeature(BlockCondenser.class);
  blocks.blockEnergyAcceptor=addFeature(BlockEnergyAcceptor.class);
  blocks.blockVibrationChamber=addFeature(BlockVibrationChamber.class);
  blocks.blockEnergyCell=addFeature(BlockEnergyCell.class);
  blocks.blockEnergyCellDense=addFeature(BlockDenseEnergyCell.class);
  blocks.blockEnergyCellCreative=addFeature(BlockCreativeEnergyCell.class);
  blocks.blockSecurity=addFeature(BlockSecurity.class);
  items.itemCellCreative=addFeature(ItemCreativeStorageCell.class);
  items.itemCell1k=addFeature(ItemBasicStorageCell.class,MaterialType.Cell1kPart,1);
  items.itemCell4k=addFeature(ItemBasicStorageCell.class,MaterialType.Cell4kPart,4);
  items.itemCell16k=addFeature(ItemBasicStorageCell.class,MaterialType.Cell16kPart,16);
  items.itemCell64k=addFeature(ItemBasicStorageCell.class,MaterialType.Cell64kPart,64);
  items.itemSpatialCell2=addFeature(ItemSpatialStorageCell.class,MaterialType.Cell2SpatialPart,2);
  items.itemSpatialCell16=addFeature(ItemSpatialStorageCell.class,MaterialType.Cell16SpatialPart,16);
  items.itemSpatialCell128=addFeature(ItemSpatialStorageCell.class,MaterialType.Cell128SpatialPart,128);
  items.itemCertusQuartzKnife=addFeature(ToolQuartzCuttingKnife.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzWrench=addFeature(ToolQuartzWrench.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzAxe=addFeature(ToolQuartzAxe.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzHoe=addFeature(ToolQuartzHoe.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzPick=addFeature(ToolQuartzPickaxe.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzShovel=addFeature(ToolQuartzSpade.class,AEFeature.CertusQuartzTools);
  items.itemCertusQuartzSword=addFeature(ToolQuartzSword.class,AEFeature.CertusQuartzTools);
  items.itemNetherQuartzKnife=addFeature(ToolQuartzCuttingKnife.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzWrench=addFeature(ToolQuartzWrench.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzAxe=addFeature(ToolQuartzAxe.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzHoe=addFeature(ToolQuartzHoe.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzPick=addFeature(ToolQuartzPickaxe.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzShovel=addFeature(ToolQuartzSpade.class,AEFeature.NetherQuartzTools);
  items.itemNetherQuartzSword=addFeature(ToolQuartzSword.class,AEFeature.NetherQuartzTools);
  items.itemMassCannon=addFeature(ToolMassCannon.class);
  items.itemMemoryCard=addFeature(ToolMemoryCard.class);
  items.itemChargedStaff=addFeature(ToolChargedStaff.class);
  items.itemEntropyManipulator=addFeature(ToolEntropyManipulator.class);
  items.itemWirelessTerminal=addFeature(ToolWirelessTerminal.class);
  items.itemNetworkTool=addFeature(ToolNetworkTool.class);
  items.itemPortableCell=addFeature(ToolPortableCell.class);
  items.itemBiometricCard=addFeature(ToolBiometricCard.class);
  items.itemFacade=addFeature(ItemFacade.class);
  addFeature(ToolDebugCard.class);
  addFeature(ToolReplicatorCard.class);
  addFeature(BlockItemGen.class);
  addFeature(BlockChunkloader.class);
}"
30809,"public void add(AEColor v,ItemStack is){
  colors[v.ordinal()]=is;
}","public void add(AEColor v,ItemStackSrc is){
  colors[v.ordinal()]=is;
}"
30810,"@Override public Item item(AEColor color){
  ItemStack is=colors[color.ordinal()];
  if (is == null)   return null;
  return is.getItem();
}","@Override public Item item(AEColor color){
  ItemStackSrc is=colors[color.ordinal()];
  if (is == null)   return null;
  return is.item;
}"
30811,"@Override public ItemStack stack(AEColor color,int stackSize){
  ItemStack is=colors[color.ordinal()];
  if (is == null)   return null;
  return new ItemStack(is.getItem(),stackSize,is.getItemDamage());
}","@Override public ItemStack stack(AEColor color,int stackSize){
  ItemStackSrc is=colors[color.ordinal()];
  if (is == null)   return null;
  return is.stack(stackSize);
}"
30812,"@Override public boolean sameAs(AEColor color,ItemStack comparableItem){
  ItemStack is=colors[color.ordinal()];
  if (comparableItem == null)   return false;
  return comparableItem.getItem() == is.getItem() && comparableItem.getItemDamage() == is.getItemDamage();
}","@Override public boolean sameAs(AEColor color,ItemStack comparableItem){
  ItemStackSrc is=colors[color.ordinal()];
  if (comparableItem == null)   return false;
  return comparableItem.getItem() == is.item && comparableItem.getItemDamage() == is.damage;
}"
30813,"public DamagedItemDefinition(ItemStack is){
  if (is == null) {
    baseItem=null;
    damage=-1;
  }
 else {
    baseItem=is.getItem();
    damage=is.getItemDamage();
  }
}","public DamagedItemDefinition(ItemStackSrc is){
  if (is == null) {
    baseItem=null;
    damage=-1;
  }
 else {
    baseItem=is.item;
    damage=is.damage;
  }
}"
30814,"public ItemStack createMaterial(MaterialType mat){
  String name=mat.name();
  if (mat.damageValue == -1) {
    boolean enabled=true;
    for (    AEFeature f : mat.getFeature())     enabled=enabled && AEConfig.instance.isFeatureEnabled(f);
    if (enabled) {
      int newMaterialNum=AEConfig.instance.get(""String_Node_Str"",name,AEConfig.instance.getFreeMaterial()).getInt();
      mat.damageValue=newMaterialNum;
      ItemStack output=new ItemStack(this,1,newMaterialNum);
      output.setItemDamage(newMaterialNum);
      dmgToMaterial.put(newMaterialNum,mat);
      if (mat.getOreName() != null)       OreDictionary.registerOre(mat.getOreName(),output);
      return output;
    }
    return null;
  }
 else   throw new RuntimeException(""String_Node_Str"");
}","public ItemStackSrc createMaterial(MaterialType mat){
  String name=mat.name();
  if (mat.damageValue == -1) {
    boolean enabled=true;
    for (    AEFeature f : mat.getFeature())     enabled=enabled && AEConfig.instance.isFeatureEnabled(f);
    if (enabled) {
      int newMaterialNum=AEConfig.instance.get(""String_Node_Str"",name,AEConfig.instance.getFreeMaterial()).getInt();
      mat.damageValue=newMaterialNum;
      ItemStackSrc output=new ItemStackSrc(this,newMaterialNum);
      dmgToMaterial.put(newMaterialNum,mat);
      if (mat.getOreName() != null)       OreDictionary.registerOre(mat.getOreName(),output.stack(1));
      return output;
    }
    return null;
  }
 else   throw new RuntimeException(""String_Node_Str"");
}"
30815,"public ItemStack createPart(PartType mat,Enum varient){
  try {
    ItemStack is=new ItemStack(this);
    mat.getPart().getConstructor(ItemStack.class).newInstance(is);
  }
 catch (  Throwable e) {
    return null;
  }
  String name=varient == null ? mat.name() : mat.name() + ""String_Node_Str"" + varient.name();
  int varID=varient == null ? 0 : varient.ordinal();
  for (  PartTypeIst p : dmgToPart.values()) {
    if (p.part == mat && p.varient == varID)     throw new RuntimeException(""String_Node_Str"");
  }
  boolean enabled=true;
  for (  AEFeature f : mat.getFeature())   enabled=enabled && AEConfig.instance.isFeatureEnabled(f);
  if (enabled) {
    int newPartNum=AEConfig.instance.get(""String_Node_Str"",name,AEConfig.instance.getFreePart()).getInt();
    ItemStack output=new ItemStack(this);
    output.setItemDamage(newPartNum);
    PartTypeIst pti=new PartTypeIst();
    pti.part=mat;
    pti.varient=varID;
    dmgToPart.put(newPartNum,pti);
    return output;
  }
  return null;
}","public ItemStackSrc createPart(PartType mat,Enum varient){
  try {
    ItemStack is=new ItemStack(this);
    mat.getPart().getConstructor(ItemStack.class).newInstance(is);
  }
 catch (  Throwable e) {
    return null;
  }
  String name=varient == null ? mat.name() : mat.name() + ""String_Node_Str"" + varient.name();
  int varID=varient == null ? 0 : varient.ordinal();
  for (  PartTypeIst p : dmgToPart.values()) {
    if (p.part == mat && p.varient == varID)     throw new RuntimeException(""String_Node_Str"");
  }
  boolean enabled=true;
  for (  AEFeature f : mat.getFeature())   enabled=enabled && AEConfig.instance.isFeatureEnabled(f);
  if (enabled) {
    int newPartNum=AEConfig.instance.get(""String_Node_Str"",name,AEConfig.instance.getFreePart()).getInt();
    ItemStackSrc output=new ItemStackSrc(this,newPartNum);
    PartTypeIst pti=new PartTypeIst();
    pti.part=mat;
    pti.varient=varID;
    dmgToPart.put(newPartNum,pti);
    return output;
  }
  return null;
}"
30816,"static public void registerTileItem(Class c,ItemStack wat){
  myItem.put(c,wat);
}","static public void registerTileItem(Class c,ItemStackSrc wat){
  myItem.put(c,wat);
}"
30817,"protected ItemStack getItemFromTile(Object obj){
  return myItem.get(obj.getClass());
}","protected ItemStack getItemFromTile(Object obj){
  ItemStackSrc src=myItem.get(obj.getClass());
  if (src == null)   return null;
  return src.stack(1);
}"
30818,"public PacketValueConfig(String Name,String Value) throws IOException {
  this.Name=Name;
  this.Value=Value;
  ByteBuf data=Unpooled.buffer();
  data.writeInt(getPacketID());
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(bos);
  data.writeBytes(Name.getBytes());
  data.writeBytes(Value.getBytes());
  dos.close();
  data.writeBytes(bos.toByteArray());
  configureWrite(data);
}","public PacketValueConfig(String Name,String Value) throws IOException {
  this.Name=Name;
  this.Value=Value;
  ByteBuf data=Unpooled.buffer();
  data.writeInt(getPacketID());
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(bos);
  dos.writeUTF(Name);
  dos.writeUTF(Value);
  data.writeBytes(bos.toByteArray());
  configureWrite(data);
}"
30819,"public void doAction(EntityPlayerMP player,InventoryAction action,int slot,IAEItemStack slotItem){
  if (slot >= 0 && slot < inventorySlots.size()) {
    Slot s=getSlot(slot);
    if (s instanceof SlotCraftingTerm) {
switch (action) {
case CRAFT_SHIFT:
case CRAFT_ITEM:
case CRAFT_STACK:
        ((SlotCraftingTerm)s).doClick(action,player);
default :
    }
  }
  if (s instanceof SlotFake) {
    ItemStack hand=player.inventory.getItemStack();
switch (action) {
case PICKUP_OR_SETDOWN:
      if (hand == null)       s.putStack(null);
 else       s.putStack(hand.copy());
    break;
case SPLIT_OR_PLACESINGLE:
  ItemStack is=s.getStack();
if (is != null) {
  if (hand == null)   is.stackSize--;
 else   if (hand.isItemEqual(is))   is.stackSize=Math.min(is.getMaxStackSize(),is.stackSize + 1);
 else {
    is=hand.copy();
    is.stackSize=1;
  }
  s.putStack(is);
}
 else if (hand != null) {
  is=hand.copy();
  is.stackSize=1;
  s.putStack(is);
}
break;
case CREATIVE_DUPLICATE:
case MOVE_REGION:
case SHIFT_CLICK:
default :
break;
}
}
return;
}
switch (action) {
case SHIFT_CLICK:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player.inventory,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
}
break;
case PICKUP_SINGLE:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
int liftQty=1;
ItemStack isg=player.inventory.getItemStack();
if (isg != null) {
if (isg.stackSize >= isg.getMaxStackSize()) liftQty=0;
if (!Platform.isSameItem(slotItem.getItemStack(),isg)) liftQty=0;
}
if (liftQty > 0) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
InventoryAdaptor ia=new AdaptorPlayerHand(player);
ItemStack fail=ia.addItems(ais.getItemStack());
if (fail != null) cellInv.injectItems(ais,Actionable.MODULATE,mySrc);
player.updateHeldItem();
}
}
break;
case PICKUP_OR_SETDOWN:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(ais.getItemStack().getMaxStackSize());
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
player.updateHeldItem();
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
player.updateHeldItem();
}
break;
case SPLIT_OR_PLACESINGLE:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
long stackSize=Math.min(ais.getItemStack().getMaxStackSize(),ais.getStackSize());
ais.setStackSize((stackSize + 1) >> 1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
player.updateHeldItem();
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais.setStackSize(1);
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais == null) {
ItemStack is=player.inventory.getItemStack();
is.stackSize--;
if (is.stackSize <= 0) player.inventory.setItemStack(null);
player.updateHeldItem();
}
}
break;
case CREATIVE_DUPLICATE:
if (player.capabilities.isCreativeMode && slotItem != null) {
ItemStack is=slotItem.getItemStack();
is.stackSize=is.getMaxStackSize();
player.inventory.setItemStack(is);
player.updateHeldItem();
}
break;
case MOVE_REGION:
break;
default :
break;
}
}","public void doAction(EntityPlayerMP player,InventoryAction action,int slot,IAEItemStack slotItem){
  if (slot >= 0 && slot < inventorySlots.size()) {
    Slot s=getSlot(slot);
    if (s instanceof SlotCraftingTerm) {
switch (action) {
case CRAFT_SHIFT:
case CRAFT_ITEM:
case CRAFT_STACK:
        ((SlotCraftingTerm)s).doClick(action,player);
default :
    }
  }
  if (s instanceof SlotFake) {
    ItemStack hand=player.inventory.getItemStack();
switch (action) {
case PICKUP_OR_SETDOWN:
      if (hand == null)       s.putStack(null);
 else       s.putStack(hand.copy());
    break;
case SPLIT_OR_PLACESINGLE:
  ItemStack is=s.getStack();
if (is != null) {
  if (hand == null)   is.stackSize--;
 else   if (hand.isItemEqual(is))   is.stackSize=Math.min(is.getMaxStackSize(),is.stackSize + 1);
 else {
    is=hand.copy();
    is.stackSize=1;
  }
  s.putStack(is);
}
 else if (hand != null) {
  is=hand.copy();
  is.stackSize=1;
  s.putStack(is);
}
break;
case CREATIVE_DUPLICATE:
case MOVE_REGION:
case SHIFT_CLICK:
default :
break;
}
}
return;
}
switch (action) {
case SHIFT_CLICK:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ItemStack myItem=ais.getItemStack();
ais.setStackSize(myItem.getMaxStackSize());
InventoryAdaptor adp=InventoryAdaptor.getAdaptor(player.inventory,ForgeDirection.UNKNOWN);
myItem.stackSize=(int)ais.getStackSize();
myItem=adp.simulateAdd(myItem);
if (myItem != null) ais.setStackSize(ais.getStackSize() - myItem.stackSize);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) adp.addItems(ais.getItemStack());
}
break;
case PICKUP_SINGLE:
if (powerSrc == null || cellInv == null) return;
if (slotItem != null) {
int liftQty=1;
ItemStack isg=player.inventory.getItemStack();
if (isg != null) {
if (isg.stackSize >= isg.getMaxStackSize()) liftQty=0;
if (!Platform.isSameItem(slotItem.getItemStack(),isg)) liftQty=0;
}
if (liftQty > 0) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
InventoryAdaptor ia=new AdaptorPlayerHand(player);
ItemStack fail=ia.addItems(ais.getItemStack());
if (fail != null) cellInv.injectItems(ais,Actionable.MODULATE,mySrc);
updateHeld(player);
}
}
break;
case PICKUP_OR_SETDOWN:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
ais.setStackSize(ais.getItemStack().getMaxStackSize());
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
break;
case SPLIT_OR_PLACESINGLE:
if (powerSrc == null || cellInv == null) return;
if (player.inventory.getItemStack() == null) {
if (slotItem != null) {
IAEItemStack ais=slotItem.copy();
long stackSize=Math.min(ais.getItemStack().getMaxStackSize(),ais.getStackSize());
ais.setStackSize((stackSize + 1) >> 1);
ais=Platform.poweredExtraction(powerSrc,cellInv,ais,mySrc);
if (ais != null) player.inventory.setItemStack(ais.getItemStack());
 else player.inventory.setItemStack(null);
updateHeld(player);
}
}
 else {
IAEItemStack ais=AEApi.instance().storage().createItemStack(player.inventory.getItemStack());
ais.setStackSize(1);
ais=Platform.poweredInsert(powerSrc,cellInv,ais,mySrc);
if (ais == null) {
ItemStack is=player.inventory.getItemStack();
is.stackSize--;
if (is.stackSize <= 0) player.inventory.setItemStack(null);
updateHeld(player);
}
}
break;
case CREATIVE_DUPLICATE:
if (player.capabilities.isCreativeMode && slotItem != null) {
ItemStack is=slotItem.getItemStack();
is.stackSize=is.getMaxStackSize();
player.inventory.setItemStack(is);
updateHeld(player);
}
break;
case MOVE_REGION:
break;
default :
break;
}
}"
30820,"@SideOnly(Side.CLIENT) public void renderCoveredConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isSmart=false;
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null)   rh.setTexture(getGlassTexture(ccph.getColor()));
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.COVERED && ccph.getColor() != AEColor.Transparent) rh.setTexture(getCoveredTexture(ccph.getColor()));
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.SMART) {
isSmart=true;
rh.setTexture(getSmartTexture(getCableColor()));
}
 else rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (isSmart) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(getCableColor().mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(getCableColor().whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
}","@SideOnly(Side.CLIENT) public void renderCoveredConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isSmart=false;
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent)   rh.setTexture(getGlassTexture(ccph.getColor()));
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of) != AECableType.GLASS) {
    rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.COVERED && ccph.getColor() != AEColor.Transparent) rh.setTexture(getCoveredTexture(ccph.getColor()));
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) == AECableType.SMART) {
isSmart=true;
rh.setTexture(getSmartTexture(getCableColor()));
}
 else rh.setTexture(getCoveredTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (isSmart) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(getCableColor().mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(getCableColor().whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
}"
30821,"@SideOnly(Side.CLIENT) public void renderSmartConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isGlass=false;
  AEColor myColor=getCableColor();
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null) {
    isGlass=true;
    rh.setTexture(getGlassTexture(myColor=ccph.getColor()));
  }
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of.getOpposite()) != AECableType.GLASS) {
    rh.setTexture(getSmartTexture(myColor));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (true) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(myColor.mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) != AECableType.GLASS && ccph.getColor() != AEColor.Transparent && ccph.getPart(of.getOpposite()) == null) rh.setTexture(getSmartTexture(myColor=ccph.getColor()));
 else rh.setTexture(getSmartTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (!isGlass) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(myColor.mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
}","@SideOnly(Side.CLIENT) public void renderSmartConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.getWorldObj().getTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isGlass=false;
  AEColor myColor=getCableColor();
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null && ccph.getColor() != AEColor.Transparent) {
    isGlass=true;
    rh.setTexture(getGlassTexture(myColor=ccph.getColor()));
  }
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of.getOpposite()) != AECableType.GLASS) {
    rh.setTexture(getSmartTexture(myColor));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (true) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(myColor.mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) != AECableType.GLASS && ccph.getColor() != AEColor.Transparent && ccph.getPart(of.getOpposite()) == null) rh.setTexture(getSmartTexture(myColor=ccph.getColor()));
 else rh.setTexture(getSmartTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (!isGlass) {
setSmartConnectionRotations(of,renderer);
IIcon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
IIcon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(myColor.mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
}"
30822,"@Override protected void keyTyped(char character,int key){
  if (!this.checkHotbarKeys(key)) {
    if (searchField.textboxKeyTyped(character,key)) {
      repo.searchString=this.searchField.getText();
      repo.updateView();
    }
 else {
      super.keyTyped(character,key);
    }
  }
}","@Override protected void keyTyped(char character,int key){
  if (!this.checkHotbarKeys(key)) {
    if (searchField.textboxKeyTyped(character,key)) {
      repo.searchString=this.searchField.getText();
      repo.updateView();
      setScrollBar();
    }
 else {
      super.keyTyped(character,key);
    }
  }
}"
30823,"@Override public void addCraftingToCrafters(ICrafting c){
  super.addCraftingToCrafters(c);
  if (Platform.isServer() && c instanceof Player && monitor != null) {
    try {
      PacketMEInventoryUpdate piu=new PacketMEInventoryUpdate();
      IItemList<IAEItemStack> monitorCache=monitor.getStorageList();
      for (      IAEItemStack send : monitorCache) {
        if (piu.getLength() > 20000) {
          Packet p=piu.getPacket();
          PacketDispatcher.sendPacketToPlayer(p,(Player)c);
          piu=new PacketMEInventoryUpdate();
        }
        piu.appendItem(send);
      }
      Packet p=piu.getPacket();
      PacketDispatcher.sendPacketToPlayer(p,(Player)c);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override public void addCraftingToCrafters(ICrafting c){
  super.addCraftingToCrafters(c);
  if (Platform.isServer() && c instanceof Player && monitor != null) {
    try {
      PacketMEInventoryUpdate piu=new PacketMEInventoryUpdate();
      IItemList<IAEItemStack> monitorCache=monitor.getStorageList();
      for (      IAEItemStack send : monitorCache) {
        try {
          piu.appendItem(send);
        }
 catch (        BufferOverflowException boe) {
          Packet p=piu.getPacket();
          PacketDispatcher.sendPacketToPlayer(p,(Player)c);
          piu=new PacketMEInventoryUpdate();
          piu.appendItem(send);
        }
      }
      Packet p=piu.getPacket();
      PacketDispatcher.sendPacketToPlayer(p,(Player)c);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}"
30824,"@Override public Packet250CustomPayload getPacket(){
  isChunkDataPacket=false;
  configureWrite(bytes.toByteArray());
  return super.getPacket();
}","@Override public Packet250CustomPayload getPacket(){
  isChunkDataPacket=false;
  byte[] dataOut=new byte[lastSize];
  System.arraycopy(bytes.toByteArray(),0,dataOut,0,lastSize);
  configureWrite(dataOut);
  return super.getPacket();
}"
30825,"public void appendItem(IAEItemStack is) throws IOException {
  is.writeToPacket(data);
  empty=false;
}","public void appendItem(IAEItemStack is) throws IOException, BufferOverflowException {
  is.writeToPacket(data);
  empty=false;
  if (bytes.size() > 20000)   throw new BufferOverflowException();
 else   lastSize=bytes.size();
}"
30826,"@Override public void renderStatic(int x,int y,int z,IPartRenderHelper instance2,RenderBlocks renderer,IFacadeContainer fc,AxisAlignedBB busBounds,boolean renderStilt){
  if (facade != null) {
    BusRenderHelper instance=(BusRenderHelper)instance2;
    try {
      ItemStack randomItem=getTexture();
      if (renderStilt && busBounds == null) {
        if (renderer instanceof RenderBlocksWorkaround) {
          RenderBlocksWorkaround rbw=(RenderBlocksWorkaround)renderer;
          rbw.isFacade=false;
          rbw.calculations=true;
        }
        Icon myIcon=null;
        if (isBC()) {
          IBC bc=(IBC)AppEng.instance.getIntegration(""String_Node_Str"");
          myIcon=bc.getFacadeTexture();
        }
        if (myIcon == null)         myIcon=facade.getIconIndex();
        instance.setTexture(myIcon);
        if (isBC())         instance.setBounds(6,6,10,10,10,15);
 else         instance.setBounds(7,7,10,9,9,15);
        instance.renderBlock(x,y,z,renderer);
        instance.setTexture(null);
      }
      if (randomItem != null) {
        if (randomItem.getItem() instanceof ItemBlock) {
          ItemBlock ib=(ItemBlock)randomItem.getItem();
          Block blk=Block.blocksList[ib.getBlockID()];
          try {
            int color=ib.getColorFromItemStack(randomItem,0);
            Tessellator.instance.setColorOpaque_I(color);
          }
 catch (          Throwable error) {
          }
          renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
          instance.setBounds(0,0,16 - getFacadeThickness(),16,16,16);
          instance.prepareBounds(renderer);
          if (renderer instanceof RenderBlocksWorkaround) {
            RenderBlocksWorkaround rbw=(RenderBlocksWorkaround)renderer;
            rbw.isFacade=true;
            rbw.calculations=true;
            rbw.faces=EnumSet.noneOf(ForgeDirection.class);
            rbw.renderStandardBlock(blk,x,y,z);
            rbw.calculations=false;
            rbw.faces=EnumSet.allOf(ForgeDirection.class);
            ((RenderBlocksWorkaround)renderer).setTexture(blk.getIcon(side.ordinal(),ib.getMetadata(randomItem.getItemDamage())));
          }
 else {
            instance.setTexture(blk.getIcon(side.ordinal(),ib.getMetadata(randomItem.getItemDamage())));
          }
          if (busBounds == null) {
            if (side == ForgeDirection.UP || side == ForgeDirection.DOWN) {
              instance.renderBlockCurrentBounds(x,y,z,renderer);
            }
 else             if (side == ForgeDirection.NORTH || side == ForgeDirection.SOUTH) {
              if (fc.getFacade(ForgeDirection.UP) != null)               renderer.renderMaxY-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.DOWN) != null)               renderer.renderMinY+=getFacadeThickness() / 16.0;
              instance.renderBlockCurrentBounds(x,y,z,renderer);
            }
 else {
              if (fc.getFacade(ForgeDirection.UP) != null)               renderer.renderMaxY-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.DOWN) != null)               renderer.renderMinY+=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.SOUTH) != null)               renderer.renderMaxZ-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.NORTH) != null)               renderer.renderMinZ+=getFacadeThickness() / 16.0;
              instance.renderBlockCurrentBounds(x,y,z,renderer);
            }
          }
 else {
            if (side == ForgeDirection.UP || side == ForgeDirection.DOWN) {
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,busBounds.maxZ,1.0,1.0,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,0.0,1.0,1.0,busBounds.minZ);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,busBounds.minZ,busBounds.minX,1.0,busBounds.maxZ);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,busBounds.maxX,0.0,busBounds.minZ,1.0,1.0,busBounds.maxZ);
            }
 else             if (side == ForgeDirection.NORTH || side == ForgeDirection.SOUTH) {
              if (fc.getFacade(ForgeDirection.UP) != null)               renderer.renderMaxY-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.DOWN) != null)               renderer.renderMinY+=getFacadeThickness() / 16.0;
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,busBounds.maxX,0.0,0.0,1.0,1.0,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,0.0,busBounds.minX,1.0,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,busBounds.minX,0.0,0.0,busBounds.maxX,busBounds.minY,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,busBounds.minX,busBounds.maxY,0.0,busBounds.maxX,1.0,1.0);
            }
 else {
              if (fc.getFacade(ForgeDirection.UP) != null)               renderer.renderMaxY-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.DOWN) != null)               renderer.renderMinY+=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.SOUTH) != null)               renderer.renderMaxZ-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.NORTH) != null)               renderer.renderMinZ+=getFacadeThickness() / 16.0;
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,busBounds.maxZ,1.0,1.0,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,0.0,1.0,1.0,busBounds.minZ);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,busBounds.minZ,1.0,busBounds.minY,busBounds.maxZ);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,busBounds.maxY,busBounds.minZ,1.0,1.0,busBounds.maxZ);
            }
          }
          instance.setTexture(null);
          Tessellator.instance.setColorOpaque_F(1,1,1);
          return;
        }
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
    return;
  }
}","@Override @SideOnly(Side.CLIENT) public void renderStatic(int x,int y,int z,IPartRenderHelper instance2,RenderBlocks renderer,IFacadeContainer fc,AxisAlignedBB busBounds,boolean renderStilt){
  if (facade != null) {
    BusRenderHelper instance=(BusRenderHelper)instance2;
    try {
      ItemStack randomItem=getTexture();
      if (renderStilt && busBounds == null) {
        if (renderer instanceof RenderBlocksWorkaround) {
          RenderBlocksWorkaround rbw=(RenderBlocksWorkaround)renderer;
          rbw.isFacade=false;
          rbw.calculations=true;
        }
        Icon myIcon=null;
        if (isBC()) {
          IBC bc=(IBC)AppEng.instance.getIntegration(""String_Node_Str"");
          myIcon=bc.getFacadeTexture();
        }
        if (myIcon == null)         myIcon=facade.getIconIndex();
        instance.setTexture(myIcon);
        if (isBC())         instance.setBounds(6,6,10,10,10,15);
 else         instance.setBounds(7,7,10,9,9,15);
        instance.renderBlock(x,y,z,renderer);
        instance.setTexture(null);
      }
      if (randomItem != null) {
        if (randomItem.getItem() instanceof ItemBlock) {
          ItemBlock ib=(ItemBlock)randomItem.getItem();
          Block blk=Block.blocksList[ib.getBlockID()];
          try {
            int color=ib.getColorFromItemStack(randomItem,0);
            Tessellator.instance.setColorOpaque_I(color);
          }
 catch (          Throwable error) {
          }
          renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
          instance.setBounds(0,0,16 - getFacadeThickness(),16,16,16);
          instance.prepareBounds(renderer);
          if (renderer instanceof RenderBlocksWorkaround) {
            RenderBlocksWorkaround rbw=(RenderBlocksWorkaround)renderer;
            rbw.isFacade=true;
            rbw.calculations=true;
            rbw.faces=EnumSet.noneOf(ForgeDirection.class);
            rbw.renderStandardBlock(blk,x,y,z);
            rbw.calculations=false;
            rbw.faces=EnumSet.allOf(ForgeDirection.class);
            ((RenderBlocksWorkaround)renderer).setTexture(blk.getIcon(side.ordinal(),ib.getMetadata(randomItem.getItemDamage())));
          }
 else {
            instance.setTexture(blk.getIcon(side.ordinal(),ib.getMetadata(randomItem.getItemDamage())));
          }
          if (busBounds == null) {
            if (side == ForgeDirection.UP || side == ForgeDirection.DOWN) {
              instance.renderBlockCurrentBounds(x,y,z,renderer);
            }
 else             if (side == ForgeDirection.NORTH || side == ForgeDirection.SOUTH) {
              if (fc.getFacade(ForgeDirection.UP) != null)               renderer.renderMaxY-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.DOWN) != null)               renderer.renderMinY+=getFacadeThickness() / 16.0;
              instance.renderBlockCurrentBounds(x,y,z,renderer);
            }
 else {
              if (fc.getFacade(ForgeDirection.UP) != null)               renderer.renderMaxY-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.DOWN) != null)               renderer.renderMinY+=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.SOUTH) != null)               renderer.renderMaxZ-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.NORTH) != null)               renderer.renderMinZ+=getFacadeThickness() / 16.0;
              instance.renderBlockCurrentBounds(x,y,z,renderer);
            }
          }
 else {
            if (side == ForgeDirection.UP || side == ForgeDirection.DOWN) {
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,busBounds.maxZ,1.0,1.0,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,0.0,1.0,1.0,busBounds.minZ);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,busBounds.minZ,busBounds.minX,1.0,busBounds.maxZ);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,busBounds.maxX,0.0,busBounds.minZ,1.0,1.0,busBounds.maxZ);
            }
 else             if (side == ForgeDirection.NORTH || side == ForgeDirection.SOUTH) {
              if (fc.getFacade(ForgeDirection.UP) != null)               renderer.renderMaxY-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.DOWN) != null)               renderer.renderMinY+=getFacadeThickness() / 16.0;
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,busBounds.maxX,0.0,0.0,1.0,1.0,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,0.0,busBounds.minX,1.0,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,busBounds.minX,0.0,0.0,busBounds.maxX,busBounds.minY,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,busBounds.minX,busBounds.maxY,0.0,busBounds.maxX,1.0,1.0);
            }
 else {
              if (fc.getFacade(ForgeDirection.UP) != null)               renderer.renderMaxY-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.DOWN) != null)               renderer.renderMinY+=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.SOUTH) != null)               renderer.renderMaxZ-=getFacadeThickness() / 16.0;
              if (fc.getFacade(ForgeDirection.NORTH) != null)               renderer.renderMinZ+=getFacadeThickness() / 16.0;
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,busBounds.maxZ,1.0,1.0,1.0);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,0.0,1.0,1.0,busBounds.minZ);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,0.0,busBounds.minZ,1.0,busBounds.minY,busBounds.maxZ);
              renderSegmentBlockCurrentBounds(instance,x,y,z,renderer,0.0,busBounds.maxY,busBounds.minZ,1.0,1.0,busBounds.maxZ);
            }
          }
          instance.setTexture(null);
          Tessellator.instance.setColorOpaque_F(1,1,1);
          return;
        }
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
    return;
  }
}"
30827,"private void renderSegmentBlockCurrentBounds(BusRenderHelper instance,int x,int y,int z,RenderBlocks renderer,double minX,double minY,double minZ,double maxX,double maxY,double maxZ){
  double oldMinX=renderer.renderMinX;
  double oldMinY=renderer.renderMinY;
  double oldMinZ=renderer.renderMinZ;
  double oldMaxX=renderer.renderMaxX;
  double oldMaxY=renderer.renderMaxY;
  double oldMaxZ=renderer.renderMaxZ;
  renderer.renderMinX=Math.max(renderer.renderMinX,minX);
  renderer.renderMinY=Math.max(renderer.renderMinY,minY);
  renderer.renderMinZ=Math.max(renderer.renderMinZ,minZ);
  renderer.renderMaxX=Math.min(renderer.renderMaxX,maxX);
  renderer.renderMaxY=Math.min(renderer.renderMaxY,maxY);
  renderer.renderMaxZ=Math.min(renderer.renderMaxZ,maxZ);
  if (renderer.renderMaxX - renderer.renderMinX >= 1.0 / 16.0 && renderer.renderMaxY - renderer.renderMinY >= 1.0 / 16.0 && renderer.renderMaxZ - renderer.renderMinZ >= 1.0 / 16.0) {
    instance.renderBlockCurrentBounds(x,y,z,renderer);
  }
  renderer.renderMinX=oldMinX;
  renderer.renderMinY=oldMinY;
  renderer.renderMinZ=oldMinZ;
  renderer.renderMaxX=oldMaxX;
  renderer.renderMaxY=oldMaxY;
  renderer.renderMaxZ=oldMaxZ;
}","@SideOnly(Side.CLIENT) private void renderSegmentBlockCurrentBounds(BusRenderHelper instance,int x,int y,int z,RenderBlocks renderer,double minX,double minY,double minZ,double maxX,double maxY,double maxZ){
  double oldMinX=renderer.renderMinX;
  double oldMinY=renderer.renderMinY;
  double oldMinZ=renderer.renderMinZ;
  double oldMaxX=renderer.renderMaxX;
  double oldMaxY=renderer.renderMaxY;
  double oldMaxZ=renderer.renderMaxZ;
  renderer.renderMinX=Math.max(renderer.renderMinX,minX);
  renderer.renderMinY=Math.max(renderer.renderMinY,minY);
  renderer.renderMinZ=Math.max(renderer.renderMinZ,minZ);
  renderer.renderMaxX=Math.min(renderer.renderMaxX,maxX);
  renderer.renderMaxY=Math.min(renderer.renderMaxY,maxY);
  renderer.renderMaxZ=Math.min(renderer.renderMaxZ,maxZ);
  if (renderer.renderMaxX - renderer.renderMinX >= 1.0 / 16.0 && renderer.renderMaxY - renderer.renderMinY >= 1.0 / 16.0 && renderer.renderMaxZ - renderer.renderMinZ >= 1.0 / 16.0) {
    instance.renderBlockCurrentBounds(x,y,z,renderer);
  }
  renderer.renderMinX=oldMinX;
  renderer.renderMinY=oldMinY;
  renderer.renderMinZ=oldMinZ;
  renderer.renderMaxX=oldMaxX;
  renderer.renderMaxY=oldMaxY;
  renderer.renderMaxZ=oldMaxZ;
}"
30828,"@Override public void renderInventory(IPartRenderHelper instance,RenderBlocks renderer){
  if (facade != null) {
    IFacadeItem fi=(IFacadeItem)facade.getItem();
    try {
      ItemStack randomItem=fi.getTextureItem(facade);
      instance.setTexture(facade.getIconIndex());
      instance.setBounds(7,7,4,9,9,14);
      instance.renderInventoryBox(renderer);
      instance.setTexture(null);
      if (randomItem != null) {
        if (randomItem.getItem() instanceof ItemBlock) {
          ItemBlock ib=(ItemBlock)randomItem.getItem();
          Block blk=Block.blocksList[ib.getBlockID()];
          try {
            int color=ib.getColorFromItemStack(randomItem,0);
            float r=(color >> 16 & 0xff) / 255F;
            float g=(color >> 8 & 0xff) / 255F;
            float b=(color & 0xff) / 255F;
            GL11.glColor4f(r,g,b,1.0F);
          }
 catch (          Throwable error) {
          }
          GL11.glColor4f(1,1,1,1.0F);
          Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
          Tessellator.instance.setColorOpaque_F(1,1,1);
          instance.setTexture(blk.getIcon(side.ordinal(),ib.getMetadata(randomItem.getItemDamage())));
          instance.setBounds(0,0,14,16,16,16);
          instance.renderInventoryBox(renderer);
          instance.setTexture(null);
          GL11.glColor4f(1.0f,1.0f,1.0f,1.0F);
          return;
        }
      }
    }
 catch (    Throwable t) {
    }
    return;
  }
}","@Override @SideOnly(Side.CLIENT) public void renderInventory(IPartRenderHelper instance,RenderBlocks renderer){
  if (facade != null) {
    IFacadeItem fi=(IFacadeItem)facade.getItem();
    try {
      ItemStack randomItem=fi.getTextureItem(facade);
      instance.setTexture(facade.getIconIndex());
      instance.setBounds(7,7,4,9,9,14);
      instance.renderInventoryBox(renderer);
      instance.setTexture(null);
      if (randomItem != null) {
        if (randomItem.getItem() instanceof ItemBlock) {
          ItemBlock ib=(ItemBlock)randomItem.getItem();
          Block blk=Block.blocksList[ib.getBlockID()];
          try {
            int color=ib.getColorFromItemStack(randomItem,0);
            float r=(color >> 16 & 0xff) / 255F;
            float g=(color >> 8 & 0xff) / 255F;
            float b=(color & 0xff) / 255F;
            GL11.glColor4f(r,g,b,1.0F);
          }
 catch (          Throwable error) {
          }
          GL11.glColor4f(1,1,1,1.0F);
          Tessellator.instance.setBrightness(15 << 20 | 15 << 4);
          Tessellator.instance.setColorOpaque_F(1,1,1);
          instance.setTexture(blk.getIcon(side.ordinal(),ib.getMetadata(randomItem.getItemDamage())));
          instance.setBounds(0,0,14,16,16,16);
          instance.renderInventoryBox(renderer);
          instance.setTexture(null);
          GL11.glColor4f(1.0f,1.0f,1.0f,1.0F);
          return;
        }
      }
    }
 catch (    Throwable t) {
    }
    return;
  }
}"
30829,"@SuppressWarnings(""String_Node_Str"") @Override public IItemList<IAEItemStack> getAvailableItems(IItemList out){
  if (itemStorage != null)   return itemStorage.getAvailableItems(out);
  return out;
}","@Override public IItemList<IAEItemStack> getAvailableItems(IItemList out){
  if (itemStorage != null)   return itemStorage.getAvailableItems(out);
  return out;
}"
30830,"@Override public boolean onActivate(EntityPlayer player,Vec3 pos){
  ItemStack is=player.inventory.getCurrentItem();
  TunnelType tt=AEApi.instance().registries().p2pTunnel().getTunnelTypeByItem(is);
  if (is != null && is.getItem() instanceof IMemoryCard) {
    IMemoryCard mc=(IMemoryCard)is.getItem();
    NBTTagCompound data=mc.getData(is);
    ItemStack newType=ItemStack.loadItemStackFromNBT(data);
    long freq=data.getLong(""String_Node_Str"");
    if (newType != null) {
      if (newType.getItem() instanceof IPartItem) {
        IPart testPart=((IPartItem)newType.getItem()).createPartFromItemStack(newType);
        if (testPart instanceof PartP2PTunnel) {
          getHost().removePart(side,true);
          ForgeDirection dir=getHost().addPart(newType,side,player);
          IPart newBus=getHost().getPart(dir);
          if (newBus instanceof PartP2PTunnel) {
            PartP2PTunnel newTunnel=(PartP2PTunnel)newBus;
            newTunnel.output=true;
            newTunnel.onChange();
            try {
              P2PCache p2p=newTunnel.proxy.getP2P();
              p2p.updateFreq(newTunnel,freq);
            }
 catch (            GridAccessException e) {
            }
          }
          mc.notifyUser(player,MemoryCardMessages.SETTINGS_LOADED);
          return true;
        }
      }
    }
    mc.notifyUser(player,MemoryCardMessages.INVALID_MACHINE);
  }
 else   if (tt != null) {
    ItemStack newType=null;
switch (tt) {
case BC_POWER:
      newType=AEApi.instance().parts().partP2PTunnelMJ.stack(1);
    break;
case FLUID:
  newType=AEApi.instance().parts().partP2PTunnelLiquids.stack(1);
break;
case IC2_POWER:
newType=AEApi.instance().parts().partP2PTunnelEU.stack(1);
break;
case ITEM:
newType=AEApi.instance().parts().partP2PTunnelItems.stack(1);
break;
case ME:
newType=AEApi.instance().parts().partP2PTunnelME.stack(1);
break;
case REDSTONE:
newType=AEApi.instance().parts().partP2PTunnelRedstone.stack(1);
break;
}
if (newType != null && !Platform.isSameItem(newType,this.is)) {
boolean oldOutput=output;
long myFreq=freq;
getHost().removePart(side,false);
ForgeDirection dir=getHost().addPart(newType,side,player);
IPart newBus=getHost().getPart(dir);
if (newBus instanceof PartP2PTunnel) {
PartP2PTunnel newTunnel=(PartP2PTunnel)newBus;
newTunnel.output=oldOutput;
newTunnel.onChange();
try {
P2PCache p2p=newTunnel.proxy.getP2P();
p2p.updateFreq(newTunnel,myFreq);
}
 catch (GridAccessException e) {
}
}
return true;
}
}
return false;
}","@Override public boolean onActivate(EntityPlayer player,Vec3 pos){
  ItemStack is=player.inventory.getCurrentItem();
  TunnelType tt=AEApi.instance().registries().p2pTunnel().getTunnelTypeByItem(is);
  if (is != null && is.getItem() instanceof IMemoryCard) {
    IMemoryCard mc=(IMemoryCard)is.getItem();
    NBTTagCompound data=mc.getData(is);
    ItemStack newType=ItemStack.loadItemStackFromNBT(data);
    long freq=data.getLong(""String_Node_Str"");
    if (newType != null) {
      if (newType.getItem() instanceof IPartItem) {
        IPart testPart=((IPartItem)newType.getItem()).createPartFromItemStack(newType);
        if (testPart instanceof PartP2PTunnel) {
          getHost().removePart(side,true);
          ForgeDirection dir=getHost().addPart(newType,side,player);
          IPart newBus=getHost().getPart(dir);
          if (newBus instanceof PartP2PTunnel) {
            PartP2PTunnel newTunnel=(PartP2PTunnel)newBus;
            newTunnel.output=true;
            try {
              P2PCache p2p=newTunnel.proxy.getP2P();
              p2p.updateFreq(newTunnel,freq);
            }
 catch (            GridAccessException e) {
            }
            newTunnel.onChange();
          }
          mc.notifyUser(player,MemoryCardMessages.SETTINGS_LOADED);
          return true;
        }
      }
    }
    mc.notifyUser(player,MemoryCardMessages.INVALID_MACHINE);
  }
 else   if (tt != null) {
    ItemStack newType=null;
switch (tt) {
case BC_POWER:
      newType=AEApi.instance().parts().partP2PTunnelMJ.stack(1);
    break;
case FLUID:
  newType=AEApi.instance().parts().partP2PTunnelLiquids.stack(1);
break;
case IC2_POWER:
newType=AEApi.instance().parts().partP2PTunnelEU.stack(1);
break;
case ITEM:
newType=AEApi.instance().parts().partP2PTunnelItems.stack(1);
break;
case ME:
newType=AEApi.instance().parts().partP2PTunnelME.stack(1);
break;
case REDSTONE:
newType=AEApi.instance().parts().partP2PTunnelRedstone.stack(1);
break;
}
if (newType != null && !Platform.isSameItem(newType,this.is)) {
boolean oldOutput=output;
long myFreq=freq;
getHost().removePart(side,false);
ForgeDirection dir=getHost().addPart(newType,side,player);
IPart newBus=getHost().getPart(dir);
if (newBus instanceof PartP2PTunnel) {
PartP2PTunnel newTunnel=(PartP2PTunnel)newBus;
newTunnel.output=oldOutput;
newTunnel.onChange();
try {
P2PCache p2p=newTunnel.proxy.getP2P();
p2p.updateFreq(newTunnel,myFreq);
}
 catch (GridAccessException e) {
}
}
tile.worldObj.notifyBlocksOfNeighborChange(tile.xCoord,tile.yCoord,tile.zCoord,0);
return true;
}
}
return false;
}"
30831,"@Override public double extractAEPower(double amt,Actionable mode,Set<IEnergyGrid> seen){
  if (!seen.add(this))   return 0;
  double extractedPower=extra;
  if (mode == Actionable.SIMULATE) {
    extractedPower+=simulateExtract(extractedPower,amt);
    return extractedPower;
  }
 else   extractedPower+=doExtract(extractedPower,amt);
  if (extractedPower > amt) {
    extra=extractedPower - amt;
    globalAvailablePower-=amt;
    return amt;
  }
  if (extractedPower < amt) {
    Iterator<IEnergyGridProvider> i=gproviders.iterator();
    while (extractedPower < amt && i.hasNext())     extractedPower+=i.next().extractAEPower(amt - extractedPower,mode,seen);
  }
  globalAvailablePower-=extractedPower;
  return extractedPower;
}","@Override public double extractAEPower(double amt,Actionable mode,Set<IEnergyGrid> seen){
  if (!seen.add(this))   return 0;
  double extractedPower=extra;
  if (mode == Actionable.SIMULATE) {
    extractedPower+=simulateExtract(extractedPower,amt);
    if (extractedPower < amt) {
      Iterator<IEnergyGridProvider> i=gproviders.iterator();
      while (extractedPower < amt && i.hasNext())       extractedPower+=i.next().extractAEPower(amt - extractedPower,mode,seen);
    }
    return extractedPower;
  }
 else   extractedPower+=doExtract(extractedPower,amt);
  if (extractedPower > amt) {
    extra=extractedPower - amt;
    globalAvailablePower-=amt;
    return amt;
  }
  if (extractedPower < amt) {
    Iterator<IEnergyGridProvider> i=gproviders.iterator();
    while (extractedPower < amt && i.hasNext())     extractedPower+=i.next().extractAEPower(amt - extractedPower,mode,seen);
  }
  globalAvailablePower-=extractedPower;
  return extractedPower;
}"
30832,"@Override public void onSlotChanged(){
  super.onSlotChanged();
  isValid=hasCalculatedValidness.NotAvailable;
}","@Override public void onSlotChanged(){
  if (inventory instanceof AppEngInternalInventory)   ((AppEngInternalInventory)inventory).onInventoryChanged(getSlotIndex());
 else   super.onSlotChanged();
  isValid=hasCalculatedValidness.NotAvailable;
}"
30833,"public void onInventoryChanged(){
}","public void onInventoryChanged(){
  for (int slot=0; slot < storage.getSizeInventory(); slot++)   onChangeInventory(storage,slot,InvOperation.onInventoryChanged,null,null);
}"
30834,"@Override public void onInventoryChanged(){
  if (te != null && eventsEnabled()) {
    te.onChangeInventory(this,-1,InvOperation.onInventoryChanged,null,null);
  }
}","public void onInventoryChanged(int slotIndex){
  if (te != null && eventsEnabled()) {
    te.onChangeInventory(this,slotIndex,InvOperation.onInventoryChanged,null,null);
  }
}"
30835,"public static boolean isSameItemPrecise(ItemStack is,ItemStack filter){
  return isSameItem(is,filter);
}","public static boolean isSameItemPrecise(ItemStack is,ItemStack filter){
  return isSameItem(is,filter) && sameStackStags(is,filter);
}"
30836,"@Override public void onChange(){
  cachedInv=null;
  int olderSize=oldSize;
  oldSize=getDest().getSizeInventory();
  if (olderSize != oldSize) {
    getHost().PartChanged();
    tile.worldObj.notifyBlocksOfNeighborChange(tile.xCoord,tile.yCoord,tile.zCoord,0);
  }
}","@Override public void onChange(){
  if (!output) {
    cachedInv=null;
    int olderSize=oldSize;
    oldSize=getDest().getSizeInventory();
    if (olderSize != oldSize) {
      getHost().PartChanged();
      tile.worldObj.notifyBlocksOfNeighborChange(tile.xCoord,tile.yCoord,tile.zCoord,0);
    }
  }
 else {
    PartP2PItems input=getInput();
    if (input != null)     input.onChange();
  }
}"
30837,"public void Init(FMLInitializationEvent event){
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",IEnergySink.class);
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",ISidedInventory.class);
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",IPowerEmitter.class);
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",IPowerReceptor.class);
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",IFluidHandler.class);
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",ITileStorageMonitorable.class);
  TickRegistry.registerTickHandler(TickHandler.instance,Side.SERVER);
  TickRegistry.registerTickHandler(TickHandler.instance,Side.CLIENT);
  MinecraftForge.EVENT_BUS.register(TickHandler.instance);
  MinecraftForge.EVENT_BUS.register(new PartPlacement());
  AEApi.instance().registries().gridCache().registerGridCache(ITickManager.class,TickManagerCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(IEnergyGrid.class,EnergyGridCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(IPathingGrid.class,PathGridCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(IStorageGrid.class,GridStorageCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(P2PCache.class,P2PCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(ISpatialCache.class,SpatialPylonCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(ISecurityGrid.class,SecurityCache.class);
  AEApi.instance().registries().externalStorage().addExternalStorageInterface(new AEExternalHandler());
  AEApi.instance().registries().cell().addCellHandler(new BasicCellHandler());
  AEApi.instance().registries().cell().addCellHandler(new CreativeCellHandler());
  AEApi.instance().registries().matterCannon().registerAmmo(AEApi.instance().materials().materialMatterBall.stack(1),32.0);
  ((P2PTunnelRegistry)AEApi.instance().registries().p2pTunnel()).configure();
  NetworkRegistry.instance().registerGuiHandler(AppEng.instance,GuiBridge.GUI_Handler);
}","public void Init(FMLInitializationEvent event){
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  TickRegistry.registerTickHandler(TickHandler.instance,Side.SERVER);
  TickRegistry.registerTickHandler(TickHandler.instance,Side.CLIENT);
  MinecraftForge.EVENT_BUS.register(TickHandler.instance);
  MinecraftForge.EVENT_BUS.register(new PartPlacement());
  AEApi.instance().registries().gridCache().registerGridCache(ITickManager.class,TickManagerCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(IEnergyGrid.class,EnergyGridCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(IPathingGrid.class,PathGridCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(IStorageGrid.class,GridStorageCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(P2PCache.class,P2PCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(ISpatialCache.class,SpatialPylonCache.class);
  AEApi.instance().registries().gridCache().registerGridCache(ISecurityGrid.class,SecurityCache.class);
  AEApi.instance().registries().externalStorage().addExternalStorageInterface(new AEExternalHandler());
  AEApi.instance().registries().cell().addCellHandler(new BasicCellHandler());
  AEApi.instance().registries().cell().addCellHandler(new CreativeCellHandler());
  AEApi.instance().registries().matterCannon().registerAmmo(AEApi.instance().materials().materialMatterBall.stack(1),32.0);
  ((P2PTunnelRegistry)AEApi.instance().registries().p2pTunnel()).configure();
  NetworkRegistry.instance().registerGuiHandler(AppEng.instance,GuiBridge.GUI_Handler);
}"
30838,"@Override public boolean registerNewLayer(String layer,Class<?> layerInterface){
  if (interfaces2Layer.get(layerInterface) == null) {
    desc.add(layerInterface.getName());
    interfaces2Layer.put(layerInterface,layer);
  }
 else   AELog.info(""String_Node_Str"" + layer + ""String_Node_Str""+ layerInterface.getName()+ ""String_Node_Str"");
  return false;
}","@Override public boolean registerNewLayer(String layer,String layerInterface){
  try {
    if (interfaces2Layer.get(layerInterface) == null) {
      interfaces2Layer.put(Class.forName(layerInterface),layer);
      desc.add(layerInterface);
      return true;
    }
 else     AELog.info(""String_Node_Str"" + layer + ""String_Node_Str""+ layerInterface+ ""String_Node_Str"");
  }
 catch (  Throwable t) {
  }
  return false;
}"
30839,"@Override public void Init(){
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",IPipeConnection.class);
  AEApi.instance().registries().externalStorage().addExternalStorageInterface(new BCPipeHandler());
}","@Override public void Init(){
  AEApi.instance().partHelper().registerNewLayer(""String_Node_Str"",""String_Node_Str"");
  AEApi.instance().registries().externalStorage().addExternalStorageInterface(new BCPipeHandler());
}"
30840,"private void updateTunnel(long freq,boolean updateOutputs){
  if (updateOutputs) {
    for (    PartP2PTunnel p : outputs.values())     p.onChange();
  }
 else {
    for (    PartP2PTunnel p : inputs.values())     p.onChange();
  }
}","private void updateTunnel(long freq,boolean updateOutputs){
  for (  PartP2PTunnel p : outputs.get(freq))   p.onChange();
  PartP2PTunnel in=inputs.get(freq);
  if (in != null)   in.onChange();
}"
30841,"public FacadePart(ItemStack facade,ForgeDirection side){
  if (facade == null)   throw new RuntimeException(""String_Node_Str"");
  facade.stackSize=1;
  this.facade=facade;
  this.side=side;
}","public FacadePart(ItemStack facade,ForgeDirection side){
  if (facade == null)   throw new RuntimeException(""String_Node_Str"");
  this.facade=facade.copy();
  this.facade.stackSize=1;
  this.side=side;
}"
30842,"private int getMaxInstalled(Upgrades u){
  Integer max=null;
  for (  ItemStack is : u.getSupported().keySet()) {
    if (is.getItem() == itemorblock) {
      max=u.getSupported().get(is);
      break;
    }
 else     if (is.getItem() instanceof ItemBlock && Block.blocksList[((ItemBlock)is.getItem()).getBlockID()] == itemorblock) {
      max=u.getSupported().get(is);
      break;
    }
  }
  if (max == null)   return 0;
  return max;
}","private int getMaxInstalled(Upgrades u){
  Integer max=null;
  for (  ItemStack is : u.getSupported().keySet()) {
    if (is.getItem() == itemorblock) {
      max=u.getSupported().get(is);
      break;
    }
 else     if (is.getItem() instanceof ItemBlock && Block.blocksList[((ItemBlock)is.getItem()).getBlockID()] == itemorblock) {
      max=u.getSupported().get(is);
      break;
    }
 else     if (itemorblock instanceof ItemStack && Platform.isSameItem((ItemStack)itemorblock,is)) {
      max=u.getSupported().get(is);
      break;
    }
  }
  if (max == null)   return 0;
  return max;
}"
30843,"public void readClass(Class listAs,Class c){
  if (readClasses.contains(c))   return;
  readClasses.add(c);
  for (  Method m : c.getMethods()) {
    MENetworkEventSubscribe s=m.getAnnotation(MENetworkEventSubscribe.class);
    if (s != null) {
      Class types[]=m.getParameterTypes();
      if (types.length == 1) {
        if (MENetworkEvent.class.isAssignableFrom(types[0])) {
          Hashtable<Class,MENetworkEventInfo> classEvents=events.get(types[0]);
          if (classEvents == null)           events.put(types[0],classEvents=new Hashtable());
          classEvents.put(listAs,new MENetworkEventInfo(types[0],c,m));
        }
 else         throw new RuntimeException(""String_Node_Str"" + m.getName() + ""String_Node_Str"");
      }
 else       throw new RuntimeException(""String_Node_Str"" + m.getName() + ""String_Node_Str"");
    }
  }
}","public void readClass(Class listAs,Class c){
  if (readClasses.contains(c))   return;
  readClasses.add(c);
  for (  Method m : c.getMethods()) {
    MENetworkEventSubscribe s=m.getAnnotation(MENetworkEventSubscribe.class);
    if (s != null) {
      Class types[]=m.getParameterTypes();
      if (types.length == 1) {
        if (MENetworkEvent.class.isAssignableFrom(types[0])) {
          Hashtable<Class,MENetworkEventInfo> classEvents=events.get(types[0]);
          if (classEvents == null)           events.put(types[0],classEvents=new Hashtable());
          MENetworkEventInfo thisEvent=classEvents.get(listAs);
          if (thisEvent == null)           thisEvent=new MENetworkEventInfo();
          thisEvent.Add(types[0],c,m);
          classEvents.put(listAs,thisEvent);
        }
 else         throw new RuntimeException(""String_Node_Str"" + m.getName() + ""String_Node_Str"");
      }
 else       throw new RuntimeException(""String_Node_Str"" + m.getName() + ""String_Node_Str"");
    }
  }
}"
30844,"public void invoke(Object obj,MENetworkEvent e) throws NetworkEventDone {
  try {
    objMethod.invoke(obj,e);
  }
 catch (  Throwable e1) {
    FMLLog.severe(""String_Node_Str"");
    FMLLog.severe(""String_Node_Str"" + obj.getClass().getName());
    FMLLog.severe(""String_Node_Str"" + obj.toString());
    e1.printStackTrace();
    throw new RuntimeException(e1);
  }
  if (e.isCanceled())   throw new NetworkEventDone();
}","public void invoke(Object obj,MENetworkEvent e) throws NetworkEventDone {
  for (  EventMethod em : methods)   em.invoke(obj,e);
}"
30845,"public void renderSmartConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.worldObj.getBlockTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isGlass=false;
  AEColor myColor=getCableColor();
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null) {
    isGlass=true;
    rh.setTexture(getGlassTexture(myColor=ccph.getColor()));
  }
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of.getOpposite()) != AECableType.GLASS) {
    rh.setTexture(getSmartTexture(myColor));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (true) {
setSmartConnectionRotations(of,renderer);
Icon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
Icon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(myColor.mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) != AECableType.GLASS && ccph.getColor() != AEColor.Transparent) rh.setTexture(getSmartTexture(myColor=ccph.getColor()));
 else rh.setTexture(getSmartTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (!isGlass) {
setSmartConnectionRotations(of,renderer);
Icon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
Icon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(myColor.mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
}","public void renderSmartConection(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer,int channels,ForgeDirection of){
  TileEntity te=this.tile.worldObj.getBlockTileEntity(x + of.offsetX,y + of.offsetY,z + of.offsetZ);
  IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
  IGridHost ghh=te instanceof IGridHost ? (IGridHost)te : null;
  boolean isGlass=false;
  AEColor myColor=getCableColor();
  if (ghh != null && ccph != null && ghh.getCableConnectionType(of.getOpposite()) == AECableType.GLASS && ccph.getPart(of.getOpposite()) == null) {
    isGlass=true;
    rh.setTexture(getGlassTexture(myColor=ccph.getColor()));
  }
 else   if (ccph == null && ghh != null && ghh.getCableConnectionType(of.getOpposite()) != AECableType.GLASS) {
    rh.setTexture(getSmartTexture(myColor));
switch (of) {
case DOWN:
      rh.setBounds(5,0,5,11,4,11);
    break;
case EAST:
  rh.setBounds(12,5,5,16,11,11);
break;
case NORTH:
rh.setBounds(5,5,0,11,11,4);
break;
case SOUTH:
rh.setBounds(5,5,12,11,11,16);
break;
case UP:
rh.setBounds(5,12,5,11,16,11);
break;
case WEST:
rh.setBounds(0,5,5,4,11,11);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (true) {
setSmartConnectionRotations(of,renderer);
Icon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
Icon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
if (of == ForgeDirection.EAST || of == ForgeDirection.WEST) {
AEBaseBlock blk=(AEBaseBlock)rh.getBlock();
FlipableIcon ico=blk.getRendererInstance().getTexture(ForgeDirection.EAST);
ico.setFlip(false,true);
}
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(myColor.mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
rh.setTexture(getTexture(getCableColor()));
}
 else if (ghh != null && ccph != null && ghh.getCableConnectionType(of) != AECableType.GLASS && ccph.getColor() != AEColor.Transparent && ccph.getPart(of.getOpposite()) == null) rh.setTexture(getSmartTexture(myColor=ccph.getColor()));
 else rh.setTexture(getSmartTexture(getCableColor()));
switch (of) {
case DOWN:
rh.setBounds(6,0,6,10,5,10);
break;
case EAST:
rh.setBounds(11,6,6,16,10,10);
break;
case NORTH:
rh.setBounds(6,6,0,10,10,5);
break;
case SOUTH:
rh.setBounds(6,6,11,10,10,16);
break;
case UP:
rh.setBounds(6,11,6,10,16,10);
break;
case WEST:
rh.setBounds(0,6,6,5,10,10);
break;
default :
return;
}
rh.renderBlock(x,y,z,renderer);
if (!isGlass) {
setSmartConnectionRotations(of,renderer);
Icon defa=new TaughtIcon(getChannelTex(channels,false).getIcon(),-0.2f);
Icon defb=new TaughtIcon(getChannelTex(channels,true).getIcon(),-0.2f);
Tessellator.instance.setBrightness(15 << 20 | 15 << 5);
Tessellator.instance.setColorOpaque_I(myColor.mediumVariant);
rh.setTexture(defa,defa,defa,defa,defa,defa);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
Tessellator.instance.setColorOpaque_I(myColor.whiteVariant);
rh.setTexture(defb,defb,defb,defb,defb,defb);
renderAllFaces((AEBaseBlock)rh.getBlock(),x,y,z,renderer);
renderer.uvRotateBottom=renderer.uvRotateEast=renderer.uvRotateNorth=renderer.uvRotateSouth=renderer.uvRotateTop=renderer.uvRotateWest=0;
}
}"
30846,"@Override public void renderStatic(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer){
  boolean useCovered=false;
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    IPart p=getHost().getPart(dir);
    if (p != null && p instanceof IGridHost) {
      IGridHost igh=(IGridHost)p;
      AECableType type=igh.getCableConnectionType(dir.getOpposite());
      if (type == AECableType.COVERED || type == AECableType.SMART) {
        useCovered=true;
        break;
      }
    }
  }
  if (useCovered) {
    rh.setTexture(getCoveredTexture(getCableColor()));
  }
 else {
    rh.setTexture(getTexture(getCableColor()));
  }
  IPartHost ph=getHost();
  for (  ForgeDirection of : EnumSet.complementOf(connections)) {
    IPart bp=ph.getPart(of);
    if (bp instanceof IGridHost) {
      int len=bp.cableConnectionRenderTo();
      if (len < 8) {
switch (of) {
case DOWN:
          rh.setBounds(6,len,6,10,6,10);
        break;
case EAST:
      rh.setBounds(10,6,6,16 - len,10,10);
    break;
case NORTH:
  rh.setBounds(6,6,len,10,10,6);
break;
case SOUTH:
rh.setBounds(6,6,10,10,10,16 - len);
break;
case UP:
rh.setBounds(6,10,6,10,16 - len,10);
break;
case WEST:
rh.setBounds(len,6,6,6,10,10);
break;
default :
continue;
}
rh.renderBlock(x,y,z,renderer);
}
}
}
if (connections.size() != 2 || !nonLinear(connections) || useCovered) {
if (useCovered) {
rh.setBounds(5,5,5,11,11,11);
rh.renderBlock(x,y,z,renderer);
}
 else {
rh.setBounds(6,6,6,10,10,10);
rh.renderBlock(x,y,z,renderer);
}
for (ForgeDirection of : connections) {
rendereGlassConection(x,y,z,rh,renderer,of);
}
}
 else {
Icon def=getTexture(getCableColor());
rh.setTexture(def);
for (ForgeDirection of : connections) {
switch (of) {
case DOWN:
case UP:
renderer.setRenderBounds(6 / 16.0,0,6 / 16.0,10 / 16.0,16 / 16.0,10 / 16.0);
break;
case EAST:
case WEST:
renderer.uvRotateEast=renderer.uvRotateWest=1;
renderer.uvRotateBottom=renderer.uvRotateTop=1;
renderer.setRenderBounds(0,6 / 16.0,6 / 16.0,16 / 16.0,10 / 16.0,10 / 16.0);
break;
case NORTH:
case SOUTH:
renderer.uvRotateNorth=renderer.uvRotateSouth=1;
renderer.setRenderBounds(6 / 16.0,6 / 16.0,0,10 / 16.0,10 / 16.0,16 / 16.0);
break;
default :
continue;
}
}
renderer.renderStandardBlock(rh.getBlock(),x,y,z);
}
rh.setTexture(null);
}","@Override public void renderStatic(int x,int y,int z,IPartRenderHelper rh,RenderBlocks renderer){
  boolean useCovered=false;
  boolean requireDetailed=false;
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    IPart p=getHost().getPart(dir);
    if (p != null && p instanceof IGridHost) {
      IGridHost igh=(IGridHost)p;
      AECableType type=igh.getCableConnectionType(dir.getOpposite());
      if (type == AECableType.COVERED || type == AECableType.SMART) {
        useCovered=true;
        break;
      }
    }
 else     if (connections.contains(dir)) {
      TileEntity te=this.tile.worldObj.getBlockTileEntity(x + dir.offsetX,y + dir.offsetY,z + dir.offsetZ);
      IPartHost ccph=te instanceof IPartHost ? (IPartHost)te : null;
      IGridHost gh=te instanceof IGridHost ? (IGridHost)te : null;
      if (ccph == null && gh != null && gh.getCableConnectionType(dir) != AECableType.GLASS)       requireDetailed=true;
    }
  }
  if (useCovered) {
    rh.setTexture(getCoveredTexture(getCableColor()));
  }
 else {
    rh.setTexture(getTexture(getCableColor()));
  }
  IPartHost ph=getHost();
  for (  ForgeDirection of : EnumSet.complementOf(connections)) {
    IPart bp=ph.getPart(of);
    if (bp instanceof IGridHost) {
      int len=bp.cableConnectionRenderTo();
      if (len < 8) {
switch (of) {
case DOWN:
          rh.setBounds(6,len,6,10,6,10);
        break;
case EAST:
      rh.setBounds(10,6,6,16 - len,10,10);
    break;
case NORTH:
  rh.setBounds(6,6,len,10,10,6);
break;
case SOUTH:
rh.setBounds(6,6,10,10,10,16 - len);
break;
case UP:
rh.setBounds(6,10,6,10,16 - len,10);
break;
case WEST:
rh.setBounds(len,6,6,6,10,10);
break;
default :
continue;
}
rh.renderBlock(x,y,z,renderer);
}
}
}
if (connections.size() != 2 || !nonLinear(connections) || useCovered || requireDetailed) {
if (useCovered) {
rh.setBounds(5,5,5,11,11,11);
rh.renderBlock(x,y,z,renderer);
}
 else {
rh.setBounds(6,6,6,10,10,10);
rh.renderBlock(x,y,z,renderer);
}
for (ForgeDirection of : connections) {
rendereGlassConection(x,y,z,rh,renderer,of);
}
}
 else {
Icon def=getTexture(getCableColor());
rh.setTexture(def);
for (ForgeDirection of : connections) {
switch (of) {
case DOWN:
case UP:
renderer.setRenderBounds(6 / 16.0,0,6 / 16.0,10 / 16.0,16 / 16.0,10 / 16.0);
break;
case EAST:
case WEST:
renderer.uvRotateEast=renderer.uvRotateWest=1;
renderer.uvRotateBottom=renderer.uvRotateTop=1;
renderer.setRenderBounds(0,6 / 16.0,6 / 16.0,16 / 16.0,10 / 16.0,10 / 16.0);
break;
case NORTH:
case SOUTH:
renderer.uvRotateNorth=renderer.uvRotateSouth=1;
renderer.setRenderBounds(6 / 16.0,6 / 16.0,0,10 / 16.0,10 / 16.0,16 / 16.0);
break;
default :
continue;
}
}
renderer.renderStandardBlock(rh.getBlock(),x,y,z);
}
rh.setTexture(null);
}"
30847,"public static int generateTileHash(TileEntity target){
  if (target == null)   return 0;
  int hash=target.hashCode();
  if (target instanceof IInventory)   hash^=((IInventory)target).getSizeInventory();
  if (target instanceof ISidedInventory) {
    for (    ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
      int offset=0;
      for (      Integer Side : ((ISidedInventory)target).getAccessibleSlotsFromSide(dir.ordinal())) {
        hash^=Side << (offset++ % 20);
      }
    }
  }
  return hash;
}","public static int generateTileHash(TileEntity target){
  if (target == null)   return 0;
  int hash=target.hashCode();
  if (target instanceof TileEntityChest) {
    TileEntityChest targ=(TileEntityChest)target;
    targ.checkForAdjacentChests();
    if (targ.adjacentChestZNeg != null)     hash^=targ.adjacentChestZNeg.hashCode();
 else     if (targ.adjacentChestZPosition != null)     hash^=targ.adjacentChestZPosition.hashCode();
 else     if (targ.adjacentChestXPos != null)     hash^=targ.adjacentChestXPos.hashCode();
 else     if (targ.adjacentChestXNeg != null)     hash^=targ.adjacentChestXNeg.hashCode();
  }
 else   if (target instanceof IInventory) {
    hash^=((IInventory)target).getSizeInventory();
    if (target instanceof ISidedInventory) {
      for (      ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
        int offset=0;
        for (        Integer Side : ((ISidedInventory)target).getAccessibleSlotsFromSide(dir.ordinal())) {
          hash^=Side << (offset++ % 20);
        }
      }
    }
  }
  return hash;
}"
30848,"@Override public int compareTo(TickTracker t){
  return (int)((host.getCurrentTick() - lastTick) + current_rate);
}","@Override public int compareTo(TickTracker t){
  int nextTick=(int)((lastTick - host.getCurrentTick()) + current_rate);
  int ts_nextTick=(int)((t.lastTick - host.getCurrentTick()) + t.current_rate);
  return nextTick - ts_nextTick;
}"
30849,"/** 
 * save all settings using config manager.
 * @param tagCompound
 */
@Override public void writeToNBT(NBTTagCompound tagCompound){
  for (  Enum e : Settings.keySet()) {
    tagCompound.setString(e.name(),e.name());
  }
}","/** 
 * save all settings using config manager.
 * @param tagCompound
 */
@Override public void writeToNBT(NBTTagCompound tagCompound){
  for (  Enum e : Settings.keySet()) {
    tagCompound.setString(e.name(),Settings.get(e).toString());
  }
}"
30850,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_do_login);
  serverDetails=PreferenceManager.getDefaultSharedPreferences(this);
  serverip=serverDetails.getString(""String_Node_Str"",null);
  serverport=serverDetails.getString(""String_Node_Str"",null);
  if (serverip != null && serverport != null) {
    Intent data=getIntent();
    username=data.getStringExtra(""String_Node_Str"");
    password=data.getStringExtra(""String_Node_Str"");
    new RequestTask().execute(""String_Node_Str"");
  }
 else {
    Intent setupServerdetails=new Intent(this,FilePrefActivity.class);
    startActivity(setupServerdetails);
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_do_login);
  finish();
  serverDetails=PreferenceManager.getDefaultSharedPreferences(this);
  serverip=serverDetails.getString(""String_Node_Str"",null);
  serverport=serverDetails.getString(""String_Node_Str"",null);
  if (serverip != null && serverport != null) {
    Intent data=getIntent();
    username=data.getStringExtra(""String_Node_Str"");
    password=data.getStringExtra(""String_Node_Str"");
    new RequestTask().execute(""String_Node_Str"");
  }
 else {
    Intent setupServerdetails=new Intent(this,FilePrefActivity.class);
    startActivity(setupServerdetails);
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}"
30851,"protected void setPreferences(){
  String serverportSaved=edit_serverport.getText().toString();
  String serveripSaved=edit_serverip.getText().toString();
  String IP_PATTERN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  Pattern p=Pattern.compile(IP_PATTERN);
  Matcher m=p.matcher(serveripSaved);
  if (serveripSaved != null && m.matches()) {
    String PORT_PATTERN=""String_Node_Str"";
    Pattern p2=Pattern.compile(PORT_PATTERN);
    Matcher m2=p2.matcher(serverportSaved);
    if (serverportSaved != null && m2.matches()) {
      editor.putString(""String_Node_Str"",serveripSaved);
      editor.putString(""String_Node_Str"",serverportSaved);
      editor.commit();
      Intent backtoLogin=new Intent(this,LoginActivity.class);
      startActivity(backtoLogin);
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
      finish();
    }
 else {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
 else {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","protected void setPreferences(){
  String serverportSaved=edit_serverport.getText().toString();
  String serveripSaved=edit_serverip.getText().toString();
  String IP_PATTERN=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  Pattern p=Pattern.compile(IP_PATTERN);
  Matcher m=p.matcher(serveripSaved);
  if (serveripSaved != null && m.matches()) {
    String PORT_PATTERN=""String_Node_Str"";
    Pattern p2=Pattern.compile(PORT_PATTERN);
    Matcher m2=p2.matcher(serverportSaved);
    if (serverportSaved != null && m2.matches()) {
      editor.putString(""String_Node_Str"",serveripSaved);
      editor.putString(""String_Node_Str"",serverportSaved);
      editor.commit();
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
      finish();
    }
 else {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
 else {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}"
30852,"private static Control findNextFilter(){
  if (lastFocusedIndex != -1) {
    Control lastFocused=FILTERS.get(lastFocusedIndex);
    if (!lastFocused.isFocused()) {
      return lastFocused;
    }
  }
  int focused=findCurrentFilter();
  if (focused == -1) {
    focused=0;
  }
 else {
    int iterations=0;
    while (iterations < FILTERS.size()) {
      iterations++;
      focused++;
      if (focused >= FILTERS.size()) {
        focused=0;
      }
      boolean isFocusable=FILTERS.get(focused).getScene() != null;
      if (isFocusable)       break;
    }
  }
  return FILTERS.get(focused);
}","private static Control findNextFilter(){
  if (lastFocusedIndex != -1) {
    Control lastFocused=FILTERS.get(lastFocusedIndex);
    if (!lastFocused.isFocused() && lastFocused.isVisible() && lastFocused.getScene() != null) {
      return lastFocused;
    }
  }
  int focused=findCurrentFilter();
  if (focused == -1) {
    focused=0;
  }
  int iterations=0;
  while (iterations < FILTERS.size()) {
    iterations++;
    focused++;
    if (focused >= FILTERS.size()) {
      focused=0;
    }
    boolean isFocusable=FILTERS.get(focused).getScene() != null;
    if (isFocusable)     break;
  }
  return FILTERS.get(focused);
}"
30853,"public void stopAllTraces() throws IOException, OtpErlangException {
  sendRPC(""String_Node_Str"",""String_Node_Str"",list());
  receiveRPC();
}","public synchronized void stopAllTraces() throws IOException, OtpErlangException {
  sendRPC(""String_Node_Str"",""String_Node_Str"",list());
  receiveRPC();
}"
30854,"public OtpErlangList dictToPropslist(OtpErlangObject dict) throws IOException, OtpErlangException {
  sendRPC(""String_Node_Str"",""String_Node_Str"",list(dict));
  return (OtpErlangList)receiveRPC(5000);
}","public synchronized OtpErlangList dictToPropslist(OtpErlangObject dict) throws IOException, OtpErlangException {
  sendRPC(""String_Node_Str"",""String_Node_Str"",list(dict));
  return (OtpErlangList)receiveRPC(5000);
}"
30855,"private void removeErrorLoggerHandler() throws IOException, OtpErlangException {
  OtpErlangList args=OtpUtil.list(mbox.self());
  sendRPC(""String_Node_Str"",""String_Node_Str"",OtpUtil.list(ERLYBERLY_ATOM,args));
  receiveRPC();
}","private synchronized void removeErrorLoggerHandler() throws IOException, OtpErlangException {
  OtpErlangList args=OtpUtil.list(mbox.self());
  sendRPC(""String_Node_Str"",""String_Node_Str"",OtpUtil.list(ERLYBERLY_ATOM,args));
  receiveRPC();
}"
30856,"private void addErrorLoggerHandler() throws IOException, OtpErlangException {
  OtpErlangList args=OtpUtil.list(mbox.self());
  sendRPC(""String_Node_Str"",""String_Node_Str"",OtpUtil.list(ERLYBERLY_ATOM,args));
  receiveRPC();
}","private synchronized void addErrorLoggerHandler() throws IOException, OtpErlangException {
  OtpErlangList args=OtpUtil.list(mbox.self());
  sendRPC(""String_Node_Str"",""String_Node_Str"",OtpUtil.list(ERLYBERLY_ATOM,args));
  receiveRPC();
}"
30857,"public void complete(HashMap<Object,Object> resultMap){
  tracePropsToString=null;
  Object e=resultMap.get(EXCEPTION_FROM_ATOM);
  Object r=resultMap.get(RESULT_ATOM);
  Object ts=resultMap.get(TIMESTAMP_RETURN_ATOM);
  if (e != null)   map.put(EXCEPTION_FROM_ATOM,e);
  if (r != null) {
    map.put(RESULT_ATOM,r);
    String resultString=ErlyBerly.getTermFormatter().toString((OtpErlangObject)r);
    result.set(resultString);
  }
  if (ts != null)   map.put(TIMESTAMP_RETURN_ATOM,ts);
  duration.set(durationFromMap());
  Platform.runLater(() -> {
    summary.set(toString());
    complete.set(true);
  }
);
}","public void complete(HashMap<Object,Object> resultMap){
  tracePropsToString=null;
  Object e=resultMap.get(EXCEPTION_FROM_ATOM);
  Object ts=resultMap.get(TIMESTAMP_RETURN_ATOM);
  if (e != null) {
    map.put(EXCEPTION_FROM_ATOM,e);
  }
  Object r=getResultFromMap();
  if (r != null) {
    map.put(RESULT_ATOM,r);
    String resultString=ErlyBerly.getTermFormatter().toString((OtpErlangObject)r);
    result.set(resultString);
  }
  if (ts != null)   map.put(TIMESTAMP_RETURN_ATOM,ts);
  duration.set(durationFromMap());
  Platform.runLater(() -> {
    summary.set(toString());
    complete.set(true);
  }
);
}"
30858,"private static Control findNextFilter(){
  if (lastFocusedIndex != -1) {
    Control lastFocused=filters.get(lastFocusedIndex);
    if (!lastFocused.isFocused()) {
      return lastFocused;
    }
  }
  int focused=findCurrentFilter();
  if (focused == -1) {
    focused=0;
  }
 else {
    focused++;
    if (focused >= filters.size()) {
      focused=0;
    }
  }
  return filters.get(focused);
}","private static Control findNextFilter(){
  if (lastFocusedIndex != -1) {
    Control lastFocused=filters.get(lastFocusedIndex);
    if (!lastFocused.isFocused()) {
      return lastFocused;
    }
  }
  int focused=findCurrentFilter();
  if (focused == -1) {
    focused=0;
  }
 else {
    int iterations=0;
    while (iterations < filters.size()) {
      iterations++;
      focused++;
      if (focused >= filters.size()) {
        focused=0;
      }
      boolean isFocusable=filters.get(focused).getScene() != null;
      if (isFocusable)       break;
    }
  }
  return filters.get(focused);
}"
30859,"private void loadRemoteErlyberly() throws IOException, OtpErlangException {
  sendRPC(""String_Node_Str"",""String_Node_Str"",list(atom(""String_Node_Str""),new OtpErlangString(ERLYBERLY_BEAM_PATH),new OtpErlangBinary(loadBeamFile())));
  OtpErlangObject result=receiveRPC();
  if (result instanceof OtpErlangTuple) {
    OtpErlangObject e0=((OtpErlangTuple)result).elementAt(0);
    if (!MODULE_ATOM.equals(e0)) {
      throw new RuntimeException(""String_Node_Str"" + result);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + result);
  }
}","private void loadRemoteErlyberly() throws IOException, OtpErlangException {
  OtpErlangBinary otpErlangBinary=new OtpErlangBinary(loadBeamFile());
  System.out.println(""String_Node_Str"" + otpErlangBinary.size());
  sendRPC(""String_Node_Str"",""String_Node_Str"",list(atom(""String_Node_Str""),new OtpErlangString(ERLYBERLY_BEAM_PATH),otpErlangBinary));
  OtpErlangObject result=receiveRPC();
  if (result instanceof OtpErlangTuple) {
    OtpErlangObject e0=((OtpErlangTuple)result).elementAt(0);
    if (!MODULE_ATOM.equals(e0)) {
      throw new RuntimeException(""String_Node_Str"" + result);
    }
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + result);
  }
}"
30860,"private static byte[] loadBeamFile() throws IOException {
  InputStream resourceAsStream=OtpUtil.class.getResourceAsStream(ERLYBERLY_BEAM_PATH);
  byte[] b=new byte[BEAM_SIZE_LIMIT];
  int read=resourceAsStream.read(b);
  if (read >= BEAM_SIZE_LIMIT) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return b;
}","private static byte[] loadBeamFile() throws IOException {
  InputStream resourceAsStream=OtpUtil.class.getResourceAsStream(ERLYBERLY_BEAM_PATH);
  byte[] b=new byte[BEAM_SIZE_LIMIT];
  int total=0;
  int read=0;
  do {
    total+=read;
    read=resourceAsStream.read(b,total,BEAM_SIZE_LIMIT - total);
  }
 while (read != -1);
  if (total >= BEAM_SIZE_LIMIT) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return Arrays.copyOf(b,total);
}"
30861,"@Override protected void updateItem(T item,boolean empty){
  super.updateItem(item,empty);
  getGraphic().setVisible(!empty);
  if (controller != null) {
    controller.updateItem(item,empty);
  }
}","@Override protected void updateItem(T item,boolean empty){
  super.updateItem(item,empty);
  if (item == null || empty) {
    setGraphic(null);
    setText(null);
  }
 else {
    setGraphic(aControl);
    setText(null);
  }
  if (controller != null) {
    controller.updateItem(item,empty);
  }
}"
30862,"public FXTreeCell(CellController<T> aController,Parent aControl){
  controller=aController;
  setGraphic(aControl);
}","public FXTreeCell(CellController<T> aController,Parent aControl){
  controller=aController;
  this.aControl=aControl;
}"
30863,"protected void sendError(MessageInfo mi,RTMPCommand command,Object object,Object information){
  AMFPacket response=new AMFPacket();
  response.writeString(""String_Node_Str"");
  response.writeNumber(command.getTxid());
  response.writeMixed(null);
  response.writeMixed(null);
  context.writeCommand(mi.chunkStreamID,response);
}","protected void sendError(MessageInfo mi,RTMPCommand command,Object object,Object information){
  AMFPacket response=new AMFPacket();
  response.writeString(""String_Node_Str"");
  response.writeNumber(command.getTxid());
  response.writeMixed(object);
  response.writeMixed(information);
  context.writeCommand(mi.chunkStreamID,response);
}"
30864,"private void testAnimCircleIndicator(){
  mAnimCircleIndicator=(InfiniteIndicator)findViewById(R.id.infinite_anim_circle);
  IndicatorConfiguration configuration=new IndicatorConfiguration.Builder().imageLoader(new UILoader()).isStopWhileTouch(true).onPageChangeListener(this).onPageClickListener(this).direction(LEFT).position(IndicatorConfiguration.IndicatorPosition.Center).build();
  mAnimCircleIndicator.init(configuration);
  mAnimCircleIndicator.notifyDataChange(pageViews);
  mAnimCircleIndicator.setCurrentItem(3);
}","private void testAnimCircleIndicator(){
  mAnimCircleIndicator=(InfiniteIndicator)findViewById(R.id.infinite_anim_circle);
  IndicatorConfiguration configuration=new IndicatorConfiguration.Builder().imageLoader(new UILoader()).isStopWhileTouch(true).isLoop(false).onPageChangeListener(this).onPageClickListener(this).direction(LEFT).position(IndicatorConfiguration.IndicatorPosition.Center).build();
  mAnimCircleIndicator.init(configuration);
  mAnimCircleIndicator.notifyDataChange(pageViews);
  mAnimCircleIndicator.setCurrentItem(2);
}"
30865,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_my);
  RadioGroup rg=(RadioGroup)findViewById(R.id.radio_group);
  rg.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    RadioGroup group,    int checkedId){
switch (checkedId) {
case R.id.theme_flavored_material:
        mTheme=-1;
      break;
case R.id.theme_material:
    mTheme=R.style.Theme_AlertDialogPro_Material;
  break;
case R.id.theme_material_light:
mTheme=R.style.Theme_AlertDialogPro_Material_Light;
break;
case R.id.theme_holo:
mTheme=R.style.Theme_AlertDialogPro_Holo;
break;
case R.id.theme_holo_light:
mTheme=R.style.Theme_AlertDialogPro_Holo_Light;
break;
case R.id.theme_native:
mTheme=NATIVE_THEME;
break;
}
}
}
);
findViewById(R.id.showMessage).setOnClickListener(this);
findViewById(R.id.showProgress).setOnClickListener(this);
findViewById(R.id.showProgressHorizontal).setOnClickListener(this);
findViewById(R.id.showList).setOnClickListener(this);
findViewById(R.id.showMultiChoiceList).setOnClickListener(this);
findViewById(R.id.showSingleChoiceList).setOnClickListener(this);
findViewById(R.id.showCustomView).setOnClickListener(this);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_my);
  RadioGroup rg=(RadioGroup)findViewById(R.id.radio_group);
  rg.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    RadioGroup group,    int checkedId){
switch (checkedId) {
case R.id.theme_flavored_material:
        mTheme=-1;
      break;
case R.id.theme_material:
    mTheme=R.style.Theme_AlertDialogPro_Material;
  break;
case R.id.theme_material_light:
mTheme=R.style.Theme_AlertDialogPro_Material_Light;
break;
case R.id.theme_holo:
mTheme=R.style.Theme_AlertDialogPro_Holo;
break;
case R.id.theme_holo_light:
mTheme=R.style.Theme_AlertDialogPro_Holo_Light;
break;
case R.id.theme_native:
mTheme=NATIVE_THEME;
break;
}
}
}
);
findViewById(R.id.showMessage).setOnClickListener(this);
findViewById(R.id.showLongMessage).setOnClickListener(this);
findViewById(R.id.showProgress).setOnClickListener(this);
findViewById(R.id.showProgressHorizontal).setOnClickListener(this);
findViewById(R.id.showList).setOnClickListener(this);
findViewById(R.id.showMultiChoiceList).setOnClickListener(this);
findViewById(R.id.showSingleChoiceList).setOnClickListener(this);
findViewById(R.id.showCustomView).setOnClickListener(this);
}"
30866,"@Override public void setPadding(int left,int top,int right,int bottom){
  super.setPadding(left,top,right,bottom);
  mBasePadding=getPaddingLeftField();
}","@Override public void setPadding(int left,int top,int right,int bottom){
  super.setPadding(left,top,right,bottom);
  setBasePadding(isCheckMarkAtStart());
  updatePadding();
}"
30867,"/** 
 * Set the checkmark to a given Drawable. This will be drawn when   {@link #isChecked()} is true.
 * @param d The Drawable to use for the checkmark.
 */
public void setCheckMarkDrawable(Drawable d){
  if (mCheckMarkDrawable != null) {
    mCheckMarkDrawable.setCallback(null);
    unscheduleDrawable(mCheckMarkDrawable);
  }
  if (d != null) {
    d.setCallback(this);
    d.setVisible(getVisibility() == VISIBLE,false);
    d.setState(CHECKED_STATE_SET);
    setMinHeight(d.getIntrinsicHeight());
    mCheckMarkWidth=d.getIntrinsicWidth();
    mBasePadding=getPaddingLeftField();
    setPaddingLeftField(mCheckMarkWidth + mBasePadding);
    d.setState(getDrawableState());
  }
  mCheckMarkDrawable=d;
  requestLayout();
}","/** 
 * Set the checkmark to a given Drawable. This will be drawn when   {@link #isChecked()} is true.
 * @param d The Drawable to use for the checkmark.
 */
public void setCheckMarkDrawable(Drawable d){
  if (mCheckMarkDrawable != null) {
    mCheckMarkDrawable.setCallback(null);
    unscheduleDrawable(mCheckMarkDrawable);
  }
  if (d != null) {
    d.setCallback(this);
    d.setVisible(getVisibility() == VISIBLE,false);
    d.setState(CHECKED_STATE_SET);
    setMinHeight(d.getIntrinsicHeight());
    mCheckMarkWidth=d.getIntrinsicWidth();
    d.setState(getDrawableState());
  }
 else {
    mCheckMarkWidth=0;
  }
  mCheckMarkDrawable=d;
  updatePadding();
}"
30868,"private void updatePadding(){
  invokeResetPaddingToInitialValues();
  int newPadding=(mCheckMarkDrawable != null) ? mCheckMarkWidth + mBasePadding : mBasePadding;
  if (isCheckMarkAtStart()) {
    mNeedRequestlayout|=(getPaddingLeftField() != newPadding);
    setPaddingLeftField(newPadding);
  }
 else {
    mNeedRequestlayout|=(getPaddingRightField() != newPadding);
    setPaddingRightFeild(newPadding);
  }
  if (mNeedRequestlayout) {
    requestLayout();
    mNeedRequestlayout=false;
  }
}","private void updatePadding(){
  int newPadding=(mCheckMarkDrawable != null) ? mCheckMarkWidth + mBasePadding : mBasePadding;
  if (isCheckMarkAtStart()) {
    mNeedRequestlayout|=(getPaddingLeftField() != newPadding);
    setPaddingLeftField(newPadding);
  }
 else {
    mNeedRequestlayout|=(getPaddingRightField() != newPadding);
    setPaddingRightFeild(newPadding);
  }
  if (mNeedRequestlayout) {
    requestLayout();
    mNeedRequestlayout=false;
  }
}"
30869,"@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) @Override public void onRtlPropertiesChanged(int layoutDirection){
  super.onRtlPropertiesChanged(layoutDirection);
  updatePadding();
}","@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1) @Override public void onRtlPropertiesChanged(int layoutDirection){
  super.onRtlPropertiesChanged(layoutDirection);
  invokeResetPaddingToInitialValues();
  setBasePadding(isCheckMarkAtStart());
  updatePadding();
}"
30870,"public CheckedTextViewCompat(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  final TintTypedArray a=TintTypedArray.obtainStyledAttributes(context,attrs,CHECKED_TEXT_VIEW_ATTRS,defStyle,0);
  final boolean checked=a.getBoolean(0,false);
  setChecked(checked);
  final Drawable d=a.getDrawable(1);
  if (d != null) {
    setCheckMarkDrawable(d);
  }
  a.recycle();
  mTintManager=a.getTintManager();
}","public CheckedTextViewCompat(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  setBasePadding(isCheckMarkAtStart());
  final TintTypedArray a=TintTypedArray.obtainStyledAttributes(context,attrs,CHECKED_TEXT_VIEW_ATTRS,defStyle,0);
  final boolean checked=a.getBoolean(0,false);
  setChecked(checked);
  final Drawable d=a.getDrawable(1);
  if (d != null) {
    setCheckMarkDrawable(d);
  }
  a.recycle();
  mTintManager=a.getTintManager();
}"
30871,"public CheckedTextViewCompat(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  TintTypedArray a=TintTypedArray.obtainStyledAttributes(context,attrs,CHECKED_TEXT_VIEW_ATTRS,defStyle,0);
  Drawable d=a.getDrawable(0);
  if (d != null) {
    setCheckMarkDrawable(d);
  }
  boolean checked=a.getBoolean(1,false);
  setChecked(checked);
  a.recycle();
  mTintManager=a.getTintManager();
}","public CheckedTextViewCompat(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  final TintTypedArray a=TintTypedArray.obtainStyledAttributes(context,attrs,CHECKED_TEXT_VIEW_ATTRS,defStyle,0);
  final boolean checked=a.getBoolean(0,false);
  setChecked(checked);
  final Drawable d=a.getDrawable(1);
  if (d != null) {
    setCheckMarkDrawable(d);
  }
  a.recycle();
  mTintManager=a.getTintManager();
}"
30872,"public KeySpec getKey(){
  return new KeySpec(generateKey(ARGUMENT_KEY_PREFIX,name),key);
}","public KeySpec getKey(){
  return key;
}"
30873,"public BundleFieldBinding(AnnotationType annotationType,String name,TypeMirror type,String bundleType,String key,boolean needsToBeCast,boolean canHaveDefault,boolean required){
  this.annotationType=annotationType;
  this.name=name;
  this.type=type;
  this.bundleType=bundleType;
  this.needsToBeCast=needsToBeCast;
  this.key=key;
  this.canHaveDefault=canHaveDefault;
  this.required=required;
}","public BundleFieldBinding(AnnotationType annotationType,String name,TypeMirror type,String bundleType,KeySpec key,boolean needsToBeCast,boolean canHaveDefault,boolean required){
  this.annotationType=annotationType;
  this.name=name;
  this.type=type;
  this.bundleType=bundleType;
  this.needsToBeCast=needsToBeCast;
  this.key=key;
  this.canHaveDefault=canHaveDefault;
  this.required=required;
}"
30874,"public KeySpec getKey(){
  return new KeySpec(generateKey(KEY_PREFIX,name),key);
}","public KeySpec getKey(){
  return key;
}"
30875,"public IntentFieldBinding(String name,TypeMirror type,String intentType,String key,Boolean needsToBeCast,boolean hasDefault,boolean required){
  this.name=name;
  this.type=type;
  this.intentType=intentType;
  this.key=key;
  this.needsToBeCast=needsToBeCast;
  this.hasDefault=hasDefault;
  this.required=required;
  this.arrayList=false;
}","public IntentFieldBinding(String name,TypeMirror type,String intentType,KeySpec key,Boolean needsToBeCast,boolean hasDefault,boolean required){
  this.name=name;
  this.type=type;
  this.intentType=intentType;
  this.key=key;
  this.needsToBeCast=needsToBeCast;
  this.hasDefault=hasDefault;
  this.required=required;
  this.arrayList=false;
}"
30876,"@Override public int compareTo(KeySpec o){
  int i=name.compareTo(o.name);
  if (i == 0) {
    return value.compareTo(o.value);
  }
  return i;
}","@Override public int compareTo(KeySpec o){
  int i;
  if (name == null) {
    if (o.name != null) {
      i=-1;
    }
 else {
      i=0;
    }
  }
 else   if (o.name == null) {
    i=1;
  }
 else {
    i=name.compareTo(o.name);
  }
  if (i == 0) {
    return value.compareTo(o.value);
  }
  return i;
}"
30877,"private void generateKeys(TypeSpec.Builder classBuilder){
  Set<KeySpec> keys=new TreeSet<KeySpec>();
  for (  MethodBinding method : methods) {
    keys.addAll(method.getKeys());
  }
  for (  KeySpec key : keys) {
    classBuilder.addField(FieldSpec.builder(String.class,key.getName(),PUBLIC,STATIC,FINAL).initializer(""String_Node_Str"",key.getValue()).build());
  }
}","private void generateKeys(TypeSpec.Builder classBuilder){
  Set<KeySpec> keys=new TreeSet<KeySpec>();
  for (  MethodBinding method : methods) {
    keys.addAll(method.getKeys());
  }
  for (  KeySpec key : keys) {
    if (StringUtils.isNotBlank(key.getName())) {
      classBuilder.addField(FieldSpec.builder(String.class,key.getName(),PUBLIC,STATIC,FINAL).initializer(""String_Node_Str"",key.getValue()).build());
    }
  }
}"
30878,"private String getKey(Element element,String keyPrefix){
  Key key=element.getAnnotation(Key.class);
  if (key != null) {
    return key.value();
  }
  return generateKey(keyPrefix,element.getSimpleName().toString());
}","private KeySpec getKey(Element element,String keyPrefix){
  Key key=element.getAnnotation(Key.class);
  if (key != null) {
    return new KeySpec(null,key.value());
  }
  String genKey=generateKey(keyPrefix,element.getSimpleName().toString());
  return new KeySpec(genKey,genKey);
}"
30879,"private IntentFieldBinding getIntentFieldBinding(Element element) throws InvalidTypeException {
  TypeMirror type=element.asType();
  if (type instanceof TypeVariable) {
    type=((TypeVariable)type).getUpperBound();
  }
  String name=element.getSimpleName().toString();
  String intentType=typeUtil.getIntentType(type);
  boolean arrayList=isIntentArrayList(intentType);
  String key=getKey(element,EXTRA_KEY_PREFIX);
  return new IntentFieldBinding(name,type,intentType,key,arrayList);
}","private IntentFieldBinding getIntentFieldBinding(Element element) throws InvalidTypeException {
  TypeMirror type=element.asType();
  if (type instanceof TypeVariable) {
    type=((TypeVariable)type).getUpperBound();
  }
  String name=element.getSimpleName().toString();
  String intentType=typeUtil.getIntentType(type);
  boolean arrayList=isIntentArrayList(intentType);
  KeySpec key=getKey(element,EXTRA_KEY_PREFIX);
  return new IntentFieldBinding(name,type,intentType,key,arrayList);
}"
30880,"private BundleFieldBinding getBundleFieldBinding(Element element) throws InvalidTypeException {
  TypeMirror type=element.asType();
  if (type instanceof TypeVariable) {
    type=((TypeVariable)type).getUpperBound();
  }
  String name=element.getSimpleName().toString();
  String bundleType=typeUtil.getBundleType(type);
  String key=getKey(element,ARG_KEY_PREFIX);
  return new BundleFieldBinding(name,type,bundleType,key);
}","private BundleFieldBinding getBundleFieldBinding(Element element) throws InvalidTypeException {
  TypeMirror type=element.asType();
  if (type instanceof TypeVariable) {
    type=((TypeVariable)type).getUpperBound();
  }
  String name=element.getSimpleName().toString();
  String bundleType=typeUtil.getBundleType(type);
  KeySpec key=getKey(element,ARG_KEY_PREFIX);
  return new BundleFieldBinding(name,type,bundleType,key);
}"
30881,"@Override public MethodSpec generateMethodSpec(TypeUtil typeUtil){
  String returnVarName=getReturnVarName(RETURN_VAR_NAME_ROOT);
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(name).addAnnotation(Override.class).addModifiers(PUBLIC).returns(ClassName.get(typeUtil.bundleType)).addStatement(""String_Node_Str"",ClassName.get(typeUtil.bundleType),returnVarName,ClassName.get(typeUtil.bundleType));
  for (  BundleFieldBinding fieldBinding : fields) {
    methodBuilder.addParameter(ClassName.get(fieldBinding.getType()),fieldBinding.getName());
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,fieldBinding.getBundleType(),fieldBinding.getKey().getName(),fieldBinding.getName());
  }
  methodBuilder.addStatement(""String_Node_Str"",returnVarName);
  return methodBuilder.build();
}","@Override public MethodSpec generateMethodSpec(TypeUtil typeUtil){
  String returnVarName=getReturnVarName(RETURN_VAR_NAME_ROOT);
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(name).addAnnotation(Override.class).addModifiers(PUBLIC).returns(ClassName.get(typeUtil.bundleType)).addStatement(""String_Node_Str"",ClassName.get(typeUtil.bundleType),returnVarName,ClassName.get(typeUtil.bundleType));
  for (  BundleFieldBinding fieldBinding : fields) {
    methodBuilder.addParameter(ClassName.get(fieldBinding.getType()),fieldBinding.getName());
    String keyValue;
    String stmt=""String_Node_Str"";
    KeySpec key=fieldBinding.getKey();
    if (StringUtils.isBlank(key.getName())) {
      keyValue=key.getValue();
      stmt=stmt.concat(""String_Node_Str"");
    }
 else {
      keyValue=key.getName();
      stmt=stmt.concat(""String_Node_Str"");
    }
    stmt=stmt.concat(""String_Node_Str"");
    methodBuilder.addStatement(stmt,returnVarName,fieldBinding.getBundleType(),keyValue,fieldBinding.getName());
  }
  methodBuilder.addStatement(""String_Node_Str"",returnVarName);
  return methodBuilder.build();
}"
30882,"@Override public MethodSpec generateMethodSpec(TypeUtil typeUtil){
  String returnVarName=getReturnVarName(RETURN_VAR_NAME_ROOT);
  String argsVarName=getReturnVarName(ARGS_VAR_NAME_ROOT);
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(name).addAnnotation(Override.class).addModifiers(PUBLIC).returns(ClassName.get(returnType)).addStatement(""String_Node_Str"",ClassName.get(returnType),returnVarName,ClassName.get(returnType));
  if (!fields.isEmpty()) {
    methodBuilder.addStatement(""String_Node_Str"",ClassName.get(typeUtil.bundleType),argsVarName,ClassName.get(typeUtil.bundleType));
  }
  for (  BundleFieldBinding fieldBinding : fields) {
    methodBuilder.addParameter(ClassName.get(fieldBinding.getType()),fieldBinding.getName());
    methodBuilder.addStatement(""String_Node_Str"",argsVarName,fieldBinding.getBundleType(),fieldBinding.getKey().getName(),fieldBinding.getName());
  }
  if (!fields.isEmpty()) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,argsVarName);
  }
  methodBuilder.addStatement(""String_Node_Str"",returnVarName);
  return methodBuilder.build();
}","@Override public MethodSpec generateMethodSpec(TypeUtil typeUtil){
  String returnVarName=getReturnVarName(RETURN_VAR_NAME_ROOT);
  String argsVarName=getReturnVarName(ARGS_VAR_NAME_ROOT);
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(name).addAnnotation(Override.class).addModifiers(PUBLIC).returns(ClassName.get(returnType)).addStatement(""String_Node_Str"",ClassName.get(returnType),returnVarName,ClassName.get(returnType));
  if (!fields.isEmpty()) {
    methodBuilder.addStatement(""String_Node_Str"",ClassName.get(typeUtil.bundleType),argsVarName,ClassName.get(typeUtil.bundleType));
  }
  for (  BundleFieldBinding fieldBinding : fields) {
    methodBuilder.addParameter(ClassName.get(fieldBinding.getType()),fieldBinding.getName());
    String keyValue;
    String stmt=""String_Node_Str"";
    KeySpec key=fieldBinding.getKey();
    if (StringUtils.isBlank(key.getName())) {
      keyValue=key.getValue();
      stmt=stmt.concat(""String_Node_Str"");
    }
 else {
      keyValue=key.getName();
      stmt=stmt.concat(""String_Node_Str"");
    }
    stmt=stmt.concat(""String_Node_Str"");
    methodBuilder.addStatement(stmt,argsVarName,fieldBinding.getBundleType(),keyValue,fieldBinding.getName());
  }
  if (!fields.isEmpty()) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,argsVarName);
  }
  methodBuilder.addStatement(""String_Node_Str"",returnVarName);
  return methodBuilder.build();
}"
30883,"@Override public MethodSpec generateMethodSpec(TypeUtil typeUtil){
  String returnVarName=getReturnVarName(RETURN_VAR_NAME_ROOT);
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(name).addAnnotation(Override.class).addModifiers(PUBLIC).returns(ClassName.get(typeUtil.intentType)).addStatement(""String_Node_Str"",ClassName.get(typeUtil.intentType),returnVarName,ClassName.get(typeUtil.intentType));
  if (action != null) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,action);
  }
  addDataAndOrType(methodBuilder,returnVarName,typeUtil);
  if (className != null) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,ClassName.get(className));
  }
  if (flags != null) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,flags);
  }
  for (  String category : categories) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,category);
  }
  for (  IntentFieldBinding fieldBinding : fields) {
    methodBuilder.addParameter(ClassName.get(fieldBinding.getType()),fieldBinding.getName());
    if (StringUtils.equals(fieldBinding.getName(),dataParam)) {
      continue;
    }
    if (fieldBinding.isArrayList()) {
      methodBuilder.addStatement(""String_Node_Str"",returnVarName,fieldBinding.getIntentType(),fieldBinding.getKey().getName(),fieldBinding.getName());
    }
 else {
      methodBuilder.addStatement(""String_Node_Str"",returnVarName,fieldBinding.getKey().getName(),fieldBinding.getName());
    }
  }
  methodBuilder.addStatement(""String_Node_Str"",returnVarName);
  return methodBuilder.build();
}","@Override public MethodSpec generateMethodSpec(TypeUtil typeUtil){
  String returnVarName=getReturnVarName(RETURN_VAR_NAME_ROOT);
  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(name).addAnnotation(Override.class).addModifiers(PUBLIC).returns(ClassName.get(typeUtil.intentType)).addStatement(""String_Node_Str"",ClassName.get(typeUtil.intentType),returnVarName,ClassName.get(typeUtil.intentType));
  if (action != null) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,action);
  }
  addDataAndOrType(methodBuilder,returnVarName,typeUtil);
  if (className != null) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,ClassName.get(className));
  }
  if (flags != null) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,flags);
  }
  for (  String category : categories) {
    methodBuilder.addStatement(""String_Node_Str"",returnVarName,category);
  }
  for (  IntentFieldBinding fieldBinding : fields) {
    methodBuilder.addParameter(ClassName.get(fieldBinding.getType()),fieldBinding.getName());
    if (StringUtils.equals(fieldBinding.getName(),dataParam)) {
      continue;
    }
    String stmt=""String_Node_Str"";
    if (fieldBinding.isArrayList()) {
      stmt=stmt.concat(""String_Node_Str"");
    }
 else {
      stmt=stmt.concat(""String_Node_Str"");
    }
    String keyValue;
    KeySpec key=fieldBinding.getKey();
    if (StringUtils.isBlank(key.getName())) {
      keyValue=key.getValue();
      stmt=stmt.concat(""String_Node_Str"");
    }
 else {
      keyValue=key.getName();
      stmt=stmt.concat(""String_Node_Str"");
    }
    stmt=stmt.concat(""String_Node_Str"");
    if (fieldBinding.isArrayList()) {
      methodBuilder.addStatement(stmt,returnVarName,fieldBinding.getIntentType(),keyValue,fieldBinding.getName());
    }
 else {
      methodBuilder.addStatement(stmt,returnVarName,keyValue,fieldBinding.getName());
    }
  }
  methodBuilder.addStatement(""String_Node_Str"",returnVarName);
  return methodBuilder.build();
}"
30884,"private void parseSaveState(Element element,Map<TypeElement,BundleInjectionAdapterGenerator> targetClassMap,Set<String> erasedTargetNames) throws ClassNotFoundException, InvalidTypeException {
  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();
  TypeMirror type=element.asType();
  if (type instanceof TypeVariable) {
    TypeVariable typeVariable=(TypeVariable)type;
    type=typeVariable.getUpperBound();
  }
  validateNotRequiredArguments(element);
  validateForCodeGeneration(SaveState.class,element);
  validateBindingPackage(SaveState.class,element);
  String name=element.getSimpleName().toString();
  String bundleType=typeUtil.getBundleType(type);
  NotRequired notRequired=element.getAnnotation(NotRequired.class);
  boolean required=notRequired == null;
  int minSdk=Build.VERSION_CODES.FROYO;
  if (!required) {
    minSdk=notRequired.value();
  }
  boolean canHaveDefault=!required && canHaveDefault(type,minSdk);
  boolean needsToBeCast=typeUtil.needToCastBundleType(type);
  BundleInjectionAdapterGenerator bundleInjectionAdapterGenerator=getOrCreateTargetClass(targetClassMap,enclosingElement);
  BundleFieldBinding binding=new BundleFieldBinding(SAVE_STATE,name,type,bundleType,generateKey(SAVE_STATE_KEY_PREFIX,name),needsToBeCast,canHaveDefault,required);
  bundleInjectionAdapterGenerator.addField(binding);
  erasedTargetNames.add(enclosingElement.toString());
}","private void parseSaveState(Element element,Map<TypeElement,BundleInjectionAdapterGenerator> targetClassMap,Set<String> erasedTargetNames) throws ClassNotFoundException, InvalidTypeException {
  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();
  TypeMirror type=element.asType();
  if (type instanceof TypeVariable) {
    TypeVariable typeVariable=(TypeVariable)type;
    type=typeVariable.getUpperBound();
  }
  validateNotRequiredArguments(element);
  validateForCodeGeneration(SaveState.class,element);
  validateBindingPackage(SaveState.class,element);
  String name=element.getSimpleName().toString();
  String bundleType=typeUtil.getBundleType(type);
  NotRequired notRequired=element.getAnnotation(NotRequired.class);
  boolean required=notRequired == null;
  int minSdk=Build.VERSION_CODES.FROYO;
  if (!required) {
    minSdk=notRequired.value();
  }
  boolean canHaveDefault=!required && canHaveDefault(type,minSdk);
  boolean needsToBeCast=typeUtil.needToCastBundleType(type);
  BundleInjectionAdapterGenerator bundleInjectionAdapterGenerator=getOrCreateTargetClass(targetClassMap,enclosingElement);
  BundleFieldBinding binding=new BundleFieldBinding(SAVE_STATE,name,type,bundleType,new KeySpec(null,generateKey(SAVE_STATE_KEY_PREFIX,name)),needsToBeCast,canHaveDefault,required);
  bundleInjectionAdapterGenerator.addField(binding);
  erasedTargetNames.add(enclosingElement.toString());
}"
30885,"private String getKey(Element element){
  if (isDefaultAnnotationElement(element,InjectArgument.class.getName(),""String_Node_Str"")) {
    return generateKey(BundleFieldBinding.ARGUMENT_KEY_PREFIX,element.getSimpleName().toString());
  }
  return element.getAnnotation(InjectArgument.class).value();
}","private KeySpec getKey(Element element){
  if (isDefaultAnnotationElement(element,InjectArgument.class.getName(),""String_Node_Str"")) {
    return new KeySpec(null,generateKey(BundleFieldBinding.ARGUMENT_KEY_PREFIX,element.getSimpleName().toString()));
  }
  return new KeySpec(null,element.getAnnotation(InjectArgument.class).value());
}"
30886,"private void parseInjectAnnotation(Element element,Map<TypeElement,BundleInjectionAdapterGenerator> targetClassMap,Set<String> erasedTargetNames) throws InvalidTypeException {
  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();
  TypeMirror type=element.asType();
  if (element instanceof TypeVariable) {
    TypeVariable typeVariable=(TypeVariable)type;
    type=typeVariable.getUpperBound();
  }
  validateNotRequiredArguments(element);
  validateForCodeGeneration(InjectArgument.class,element);
  validateBindingPackage(InjectArgument.class,element);
  String name=element.getSimpleName().toString();
  String bundleType=typeUtil.getBundleType(type);
  String key=getKey(element);
  NotRequired notRequired=element.getAnnotation(NotRequired.class);
  boolean required=notRequired == null;
  int minSdk=Build.VERSION_CODES.FROYO;
  if (!required) {
    minSdk=notRequired.value();
  }
  boolean canHaveDefault=!required && canHaveDefault(type,minSdk);
  boolean needsToBeCast=typeUtil.needToCastBundleType(type);
  BundleInjectionAdapterGenerator bundleInjectionAdapterGenerator=getOrCreateTargetClass(targetClassMap,enclosingElement);
  BundleFieldBinding binding=new BundleFieldBinding(BundleFieldBinding.AnnotationType.ARGUMENT,name,type,bundleType,key,needsToBeCast,canHaveDefault,required);
  bundleInjectionAdapterGenerator.orRequired(required);
  bundleInjectionAdapterGenerator.addField(binding);
  erasedTargetNames.add(enclosingElement.toString());
}","private void parseInjectAnnotation(Element element,Map<TypeElement,BundleInjectionAdapterGenerator> targetClassMap,Set<String> erasedTargetNames) throws InvalidTypeException {
  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();
  TypeMirror type=element.asType();
  if (element instanceof TypeVariable) {
    TypeVariable typeVariable=(TypeVariable)type;
    type=typeVariable.getUpperBound();
  }
  validateNotRequiredArguments(element);
  validateForCodeGeneration(InjectArgument.class,element);
  validateBindingPackage(InjectArgument.class,element);
  String name=element.getSimpleName().toString();
  String bundleType=typeUtil.getBundleType(type);
  KeySpec key=getKey(element);
  NotRequired notRequired=element.getAnnotation(NotRequired.class);
  boolean required=notRequired == null;
  int minSdk=Build.VERSION_CODES.FROYO;
  if (!required) {
    minSdk=notRequired.value();
  }
  boolean canHaveDefault=!required && canHaveDefault(type,minSdk);
  boolean needsToBeCast=typeUtil.needToCastBundleType(type);
  BundleInjectionAdapterGenerator bundleInjectionAdapterGenerator=getOrCreateTargetClass(targetClassMap,enclosingElement);
  BundleFieldBinding binding=new BundleFieldBinding(BundleFieldBinding.AnnotationType.ARGUMENT,name,type,bundleType,key,needsToBeCast,canHaveDefault,required);
  bundleInjectionAdapterGenerator.orRequired(required);
  bundleInjectionAdapterGenerator.addField(binding);
  erasedTargetNames.add(enclosingElement.toString());
}"
30887,"private void parseInjectExtra(Element element,Map<TypeElement,IntentInjectionAdapterGenerator> targetClassMap,Set<String> erasedTargetNames) throws InvalidTypeException {
  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();
  TypeMirror type=element.asType();
  if (type instanceof TypeVariable) {
    TypeVariable typeVariable=(TypeVariable)type;
    type=typeVariable.getUpperBound();
  }
  validateNotRequiredArguments(element);
  validateForCodeGeneration(InjectExtra.class,element);
  validateBindingPackage(InjectExtra.class,element);
  String name=element.getSimpleName().toString();
  String intentType=typeUtil.getIntentType(type);
  String key=getKey(element);
  boolean required=element.getAnnotation(NotRequired.class) == null;
  boolean hasDefault=typeUtil.isPrimitive(type);
  boolean needsToBeCast=typeUtil.needToCastIntentType(type);
  IntentInjectionAdapterGenerator intentInjectionAdapterGenerator=getOrCreateTargetClass(targetClassMap,enclosingElement);
  IntentFieldBinding binding=new IntentFieldBinding(name,type,intentType,key,needsToBeCast,hasDefault,required);
  intentInjectionAdapterGenerator.addField(binding);
  erasedTargetNames.add(enclosingElement.toString());
}","private void parseInjectExtra(Element element,Map<TypeElement,IntentInjectionAdapterGenerator> targetClassMap,Set<String> erasedTargetNames) throws InvalidTypeException {
  TypeElement enclosingElement=(TypeElement)element.getEnclosingElement();
  TypeMirror type=element.asType();
  if (type instanceof TypeVariable) {
    TypeVariable typeVariable=(TypeVariable)type;
    type=typeVariable.getUpperBound();
  }
  validateNotRequiredArguments(element);
  validateForCodeGeneration(InjectExtra.class,element);
  validateBindingPackage(InjectExtra.class,element);
  String name=element.getSimpleName().toString();
  String intentType=typeUtil.getIntentType(type);
  KeySpec key=getKey(element);
  boolean required=element.getAnnotation(NotRequired.class) == null;
  boolean hasDefault=typeUtil.isPrimitive(type);
  boolean needsToBeCast=typeUtil.needToCastIntentType(type);
  IntentInjectionAdapterGenerator intentInjectionAdapterGenerator=getOrCreateTargetClass(targetClassMap,enclosingElement);
  IntentFieldBinding binding=new IntentFieldBinding(name,type,intentType,key,needsToBeCast,hasDefault,required);
  intentInjectionAdapterGenerator.addField(binding);
  erasedTargetNames.add(enclosingElement.toString());
}"
30888,"private String getKey(Element element){
  if (isDefaultAnnotationElement(element,InjectExtra.class.getName(),""String_Node_Str"")) {
    return generateKey(IntentFieldBinding.KEY_PREFIX,element.getSimpleName().toString());
  }
  return element.getAnnotation(InjectExtra.class).value();
}","private KeySpec getKey(Element element){
  if (isDefaultAnnotationElement(element,InjectExtra.class.getName(),""String_Node_Str"")) {
    return new KeySpec(null,generateKey(IntentFieldBinding.KEY_PREFIX,element.getSimpleName().toString()));
  }
  return new KeySpec(null,element.getAnnotation(InjectExtra.class).value());
}"
30889,"@IntentBuilder(action=Intent.ACTION_DEFAULT) Intent getIntent(int extra,@Key(Intent.EXTRA_TEXT) String text);",@IntentBuilder(action=Intent.ACTION_DEFAULT) Intent getIntent(String text);
30890,@FragmentBuilder ParentFragment getFragment(int parentArg);,"@FragmentBuilder Fragment getFragment(@Key(""String_Node_Str"") int arg,int arg2);"
30891,"@BundleBuilder Bundle getBundle(int arg,@Key(""String_Node_Str"") int test);","@BundleBuilder Bundle getBundle(@Key(""String_Node_Str"") int arg);"
30892,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState == null) {
    fragment=ChildFragment.newInstance();
    fragment.setArguments(args);
    getSupportFragmentManager().beginTransaction().replace(R.id.container,fragment).commit();
  }
 else {
    fragment=(ChildFragment)getSupportFragmentManager().findFragmentById(R.id.container);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState == null) {
    fragment=GrandchildFragment.newInstance();
    fragment.setArguments(args);
    getSupportFragmentManager().beginTransaction().replace(R.id.container,fragment).commit();
  }
 else {
    fragment=(GrandchildFragment)getSupportFragmentManager().findFragmentById(R.id.container);
  }
}"
30893,"@Test public void testInheritance() throws Exception {
  Random random=new Random(42);
  Bundle args=new Bundle();
  int parentArg=random.nextInt();
  int childArg=random.nextInt();
  args.putInt(ChildFragment.CHILD_ARG,childArg);
  args.putInt(ParentFragment.PARENT_ARG,parentArg);
  Intent intent=new Intent(Robolectric.application,ChildActivity.class);
  int parentExtra=random.nextInt();
  int childExtra=random.nextInt();
  intent.putExtra(ParentActivity.PARENT_EXTRA,parentExtra);
  intent.putExtra(ChildActivity.CHILD_EXTRA,childExtra);
  intent.putExtra(ChildActivity.FRAGMENT_ARGS,args);
  ActivityController<ChildActivity> initialController=Robolectric.buildActivity(ChildActivity.class).withIntent(intent).create();
  ChildActivity originalActivity=initialController.start().restart().visible().get();
  assertEquals(childExtra,originalActivity.childExtra);
  assertEquals(parentExtra,originalActivity.parentExtra);
  assertEquals(childArg,originalActivity.fragment.childArg);
  assertEquals(parentArg,originalActivity.fragment.parentArg);
  originalActivity.paInt=random.nextInt();
  originalActivity.caInt=random.nextInt();
  originalActivity.fragment.pfInt=random.nextInt();
  originalActivity.fragment.cfInt=random.nextInt();
  Bundle saveState=new Bundle();
  initialController.saveInstanceState(saveState);
  Bundle copyArgs=new Bundle();
  copyArgs.putInt(ChildFragment.CHILD_ARG,random.nextInt() - childArg);
  copyArgs.putInt(ParentFragment.PARENT_ARG,random.nextInt() - parentArg);
  Intent copyIntent=new Intent(Robolectric.application,ChildActivity.class);
  copyIntent.putExtra(ParentActivity.PARENT_EXTRA,random.nextInt() - parentExtra);
  copyIntent.putExtra(ChildActivity.CHILD_EXTRA,random.nextInt() - childExtra);
  copyIntent.putExtra(ChildActivity.FRAGMENT_ARGS,copyArgs);
  ActivityController<ChildActivity> secondaryController=Robolectric.buildActivity(ChildActivity.class).withIntent(copyIntent).create(saveState);
  ChildActivity copyActivity=secondaryController.start().restart().visible().get();
  assertEquals(originalActivity.caInt,copyActivity.caInt);
  assertEquals(originalActivity.paInt,copyActivity.paInt);
  assertEquals(originalActivity.fragment.cfInt,copyActivity.fragment.cfInt);
  assertEquals(originalActivity.fragment.pfInt,copyActivity.fragment.pfInt);
}","@Test public void testInheritance() throws Exception {
  Random random=new Random(42);
  Bundle args=new Bundle();
  int parentArg=random.nextInt();
  int childArg=random.nextInt();
  args.putInt(ChildFragment.CHILD_ARG,childArg);
  args.putInt(ParentFragment.PARENT_ARG,parentArg);
  Intent intent=new Intent(Robolectric.application,GrandchildActivity.class);
  int parentExtra=random.nextInt();
  int childExtra=random.nextInt();
  intent.putExtra(ParentActivity.PARENT_EXTRA,parentExtra);
  intent.putExtra(ChildActivity.CHILD_EXTRA,childExtra);
  intent.putExtra(ChildActivity.FRAGMENT_ARGS,args);
  ActivityController<GrandchildActivity> initialController=Robolectric.buildActivity(GrandchildActivity.class).withIntent(intent).create();
  GrandchildActivity originalActivity=initialController.start().restart().visible().get();
  assertEquals(childExtra,originalActivity.childExtra);
  assertEquals(parentExtra,originalActivity.parentExtra);
  assertEquals(childArg,originalActivity.fragment.childArg);
  assertEquals(parentArg,originalActivity.fragment.parentArg);
  originalActivity.paInt=random.nextInt();
  originalActivity.caInt=random.nextInt();
  originalActivity.fragment.pfInt=random.nextInt();
  originalActivity.fragment.cfInt=random.nextInt();
  Bundle saveState=new Bundle();
  initialController.saveInstanceState(saveState);
  Bundle copyArgs=new Bundle();
  copyArgs.putInt(ChildFragment.CHILD_ARG,random.nextInt() - childArg);
  copyArgs.putInt(ParentFragment.PARENT_ARG,random.nextInt() - parentArg);
  Intent copyIntent=new Intent(Robolectric.application,GrandchildActivity.class);
  copyIntent.putExtra(ParentActivity.PARENT_EXTRA,random.nextInt() - parentExtra);
  copyIntent.putExtra(ChildActivity.CHILD_EXTRA,random.nextInt() - childExtra);
  copyIntent.putExtra(ChildActivity.FRAGMENT_ARGS,copyArgs);
  ActivityController<GrandchildActivity> secondaryController=Robolectric.buildActivity(GrandchildActivity.class).withIntent(copyIntent).create(saveState);
  GrandchildActivity copyActivity=secondaryController.start().restart().visible().get();
  assertEquals(originalActivity.caInt,copyActivity.caInt);
  assertEquals(originalActivity.paInt,copyActivity.paInt);
  assertEquals(originalActivity.fragment.cfInt,copyActivity.fragment.cfInt);
  assertEquals(originalActivity.fragment.pfInt,copyActivity.fragment.pfInt);
}"
30894,"/** 
 * Restore annotated fields in the specified   {@code target} from the {@link Bundle}.
 * @param target Target class to restore fields
 * @param bundle Bundle to restore field values.
 */
public static <T>void restoreInstanceState(T target,Bundle bundle){
  @SuppressWarnings(""String_Node_Str"") BundleBinding<T> binding=(BundleBinding<T>)getBundleBinding(target.getClass().getClassLoader(),target.getClass().getName());
  if (binding != null) {
    binding.restoreInstanceState(target,bundle);
  }
}","/** 
 * Restore annotated fields in the specified   {@code target} from the {@link Bundle}.
 * @param target Target class to restore fields
 * @param bundle Bundle to restore field values.
 */
public static <T>void restoreInstanceState(T target,Bundle bundle){
  @SuppressWarnings(""String_Node_Str"") BundleBinding<T> binding=(BundleBinding<T>)getBundleBinding(target.getClass().getClassLoader(),target.getClass());
  if (binding != null) {
    binding.restoreInstanceState(target,bundle);
  }
}"
30895,"private static IntentBinding<?> getIntentBinding(ClassLoader classLoader,String className){
  Class<?> adapterClass=loadClass(classLoader,className.concat(INTENT_ADAPTER_SUFFIX));
  if (!adapterClass.equals(Void.class)) {
    if (debug) {
      Log.d(TAG,""String_Node_Str"" + className);
    }
    try {
      @SuppressWarnings(""String_Node_Str"") Constructor<IntentBinding<?>> constructor=(Constructor<IntentBinding<?>>)adapterClass.getConstructor();
      return constructor.newInstance();
    }
 catch (    NoSuchMethodException e) {
      throw new IllegalStateException(""String_Node_Str"" + className);
    }
catch (    InvocationTargetException e) {
      throw new IllegalStateException(""String_Node_Str"" + className,e);
    }
catch (    InstantiationException e) {
      throw new IllegalStateException(""String_Node_Str"" + className,e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalStateException(""String_Node_Str"" + className,e);
    }
  }
  if (debug) {
    Log.w(TAG,""String_Node_Str"" + className);
  }
  return null;
}","private static IntentBinding<?> getIntentBinding(ClassLoader classLoader,Class cls){
  String clsName=cls.getName();
  if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {
    if (debug) {
      Log.d(TAG,""String_Node_Str"");
    }
    return null;
  }
  Class<?> adapterClass=loadClass(classLoader,clsName.concat(INTENT_ADAPTER_SUFFIX));
  if (!adapterClass.equals(Void.class)) {
    if (debug) {
      Log.d(TAG,""String_Node_Str"" + clsName);
    }
    try {
      @SuppressWarnings(""String_Node_Str"") Constructor<IntentBinding<?>> constructor=(Constructor<IntentBinding<?>>)adapterClass.getConstructor();
      return constructor.newInstance();
    }
 catch (    NoSuchMethodException e) {
      throw new IllegalStateException(""String_Node_Str"" + clsName);
    }
catch (    InvocationTargetException e) {
      throw new IllegalStateException(""String_Node_Str"" + clsName,e);
    }
catch (    InstantiationException e) {
      throw new IllegalStateException(""String_Node_Str"" + clsName,e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalStateException(""String_Node_Str"" + clsName,e);
    }
  }
  if (debug) {
    Log.d(TAG,String.format(""String_Node_Str"",clsName,cls.getSuperclass().getName()));
  }
  return getIntentBinding(classLoader,cls.getSuperclass());
}"
30896,"/** 
 * Inject annotated fields in the specified   {@code target} from the {@link android.content.Intent}.
 * @param target Target object to inject the extras.
 * @param intent Intent containing the extras.
 */
public static <T>void injectExtras(T target,Intent intent){
  @SuppressWarnings(""String_Node_Str"") IntentBinding<T> binding=(IntentBinding<T>)getIntentBinding(target.getClass().getClassLoader(),target.getClass().getName());
  if (binding != null) {
    binding.injectExtras(target,intent);
  }
}","/** 
 * Inject annotated fields in the specified   {@code target} from the {@link android.content.Intent}.
 * @param target Target object to inject the extras.
 * @param intent Intent containing the extras.
 */
public static <T>void injectExtras(T target,Intent intent){
  @SuppressWarnings(""String_Node_Str"") IntentBinding<T> binding=(IntentBinding<T>)getIntentBinding(target.getClass().getClassLoader(),target.getClass());
  if (binding != null) {
    binding.injectExtras(target,intent);
  }
}"
30897,"private static BundleBinding<?> getBundleBinding(ClassLoader classLoader,String className){
  Class<?> adapterClass=loadClass(classLoader,className.concat(BUNDLE_ADAPTER_SUFFIX));
  if (!adapterClass.equals(Void.class)) {
    if (debug) {
      Log.d(TAG,""String_Node_Str"" + className);
    }
    try {
      @SuppressWarnings(""String_Node_Str"") Constructor<BundleBinding<?>> constructor=(Constructor<BundleBinding<?>>)adapterClass.getConstructor();
      return constructor.newInstance();
    }
 catch (    NoSuchMethodException e) {
      throw new IllegalStateException(""String_Node_Str"" + className);
    }
catch (    InvocationTargetException e) {
      throw new IllegalStateException(""String_Node_Str"" + className,e);
    }
catch (    InstantiationException e) {
      throw new IllegalStateException(""String_Node_Str"" + className,e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalStateException(""String_Node_Str"" + className,e);
    }
  }
  if (debug) {
    Log.w(TAG,""String_Node_Str"" + className);
  }
  return null;
}","private static BundleBinding<?> getBundleBinding(ClassLoader classLoader,Class<?> cls){
  String clsName=cls.getName();
  if (clsName.startsWith(ANDROID_PREFIX) || clsName.startsWith(JAVA_PREFIX)) {
    if (debug) {
      Log.d(TAG,""String_Node_Str"");
    }
    return null;
  }
  Class<?> adapterClass=loadClass(classLoader,clsName.concat(BUNDLE_ADAPTER_SUFFIX));
  if (!adapterClass.equals(Void.class)) {
    if (debug) {
      Log.d(TAG,""String_Node_Str"" + clsName);
    }
    try {
      @SuppressWarnings(""String_Node_Str"") Constructor<BundleBinding<?>> constructor=(Constructor<BundleBinding<?>>)adapterClass.getConstructor();
      return constructor.newInstance();
    }
 catch (    NoSuchMethodException e) {
      throw new IllegalStateException(""String_Node_Str"" + clsName);
    }
catch (    InvocationTargetException e) {
      throw new IllegalStateException(""String_Node_Str"" + clsName,e);
    }
catch (    InstantiationException e) {
      throw new IllegalStateException(""String_Node_Str"" + clsName,e);
    }
catch (    IllegalAccessException e) {
      throw new IllegalStateException(""String_Node_Str"" + clsName,e);
    }
  }
  if (debug) {
    Log.d(TAG,String.format(""String_Node_Str"",clsName,cls.getSuperclass().getName()));
  }
  return getBundleBinding(classLoader,cls.getSuperclass());
}"
30898,"/** 
 * Save annotated fields in the specified   {@code target} to the {@link Bundle}.
 * @param target Target class for field saving.
 * @param bundle Bundle to save the field values.
 */
public static <T>void saveInstanceState(T target,Bundle bundle){
  @SuppressWarnings(""String_Node_Str"") BundleBinding<T> binding=(BundleBinding<T>)getBundleBinding(target.getClass().getClassLoader(),target.getClass().getName());
  if (binding != null) {
    binding.saveInstanceState(target,bundle);
  }
}","/** 
 * Save annotated fields in the specified   {@code target} to the {@link Bundle}.
 * @param target Target class for field saving.
 * @param bundle Bundle to save the field values.
 */
public static <T>void saveInstanceState(T target,Bundle bundle){
  @SuppressWarnings(""String_Node_Str"") BundleBinding<T> binding=(BundleBinding<T>)getBundleBinding(target.getClass().getClassLoader(),target.getClass());
  if (binding != null) {
    binding.saveInstanceState(target,bundle);
  }
}"
30899,"/** 
 * Inject annotated fields in the specified   {@code target} from the {@link android.os.Bundle}.
 * @param target Target object for inject arguments
 * @param bundle Bundle containing arguments;
 */
public static <T>void injectArguments(T target,Bundle bundle){
  @SuppressWarnings(""String_Node_Str"") BundleBinding<T> binding=(BundleBinding<T>)getBundleBinding(target.getClass().getClassLoader(),target.getClass().getName());
  if (binding != null) {
    binding.injectArguments(target,bundle);
  }
}","/** 
 * Inject annotated fields in the specified   {@code target} from the {@link android.os.Bundle}.
 * @param target Target object for inject arguments
 * @param bundle Bundle containing arguments;
 */
public static <T>void injectArguments(T target,Bundle bundle){
  @SuppressWarnings(""String_Node_Str"") BundleBinding<T> binding=(BundleBinding<T>)getBundleBinding(target.getClass().getClassLoader(),target.getClass());
  if (binding != null) {
    binding.injectArguments(target,bundle);
  }
}"
30900,"/** 
 * Replace the first item in the list that the provided predicate returns true for with the provided item. If no matching item is found, add the provided item into the list. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeAddOrReplace(@NotNull final T value,@NotNull final ReplacePredicateFunc<T> predicateFunc){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            int indexOfItemToReplace=-1;
            for (int i=0; i < originalList.size(); i++) {
              if (predicateFunc.shouldReplace(originalList.get(i))) {
                indexOfItemToReplace=i;
                break;
              }
            }
            int modifiedListSize=indexOfItemToReplace == -1 ? originalList.size() + 1 : originalList.size();
            List<T> modifiedList=new ArrayList<T>(modifiedListSize);
            modifiedList.addAll(originalList);
            if (indexOfItemToReplace == -1) {
              modifiedList.add(value);
            }
 else {
              modifiedList.remove(indexOfItemToReplace);
              modifiedList.add(indexOfItemToReplace,value);
            }
            converter.write(modifiedList,type,file);
            subscriber.onSuccess(modifiedList);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}","/** 
 * Replace the first item in the list that the provided predicate returns true for with the provided item. If no matching item is found, add the provided item into the list. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeAddOrReplace(@NotNull final T value,@NotNull final ReplacePredicateFunc<T> predicateFunc){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    final SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            int indexOfItemToReplace=-1;
            for (int i=0; i < originalList.size(); i++) {
              if (predicateFunc.shouldReplace(originalList.get(i))) {
                indexOfItemToReplace=i;
                break;
              }
            }
            int modifiedListSize=indexOfItemToReplace == -1 ? originalList.size() + 1 : originalList.size();
            List<T> modifiedList=new ArrayList<T>(modifiedListSize);
            modifiedList.addAll(originalList);
            if (indexOfItemToReplace == -1) {
              modifiedList.add(value);
            }
 else {
              modifiedList.remove(indexOfItemToReplace);
              modifiedList.add(indexOfItemToReplace,value);
            }
            converter.write(modifiedList,type,file);
            subscriber.onSuccess(modifiedList);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}"
30901,"/** 
 * Replace the first item in the list that the provided predicate returns true for. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeReplace(@NotNull final T value,@NotNull final ReplacePredicateFunc<T> predicateFunc){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            int indexOfItemToReplace=-1;
            for (int i=0; i < originalList.size(); i++) {
              if (predicateFunc.shouldReplace(originalList.get(i))) {
                indexOfItemToReplace=i;
                break;
              }
            }
            List<T> modifiedList=new ArrayList<T>(originalList);
            if (indexOfItemToReplace != -1) {
              modifiedList.remove(indexOfItemToReplace);
              modifiedList.add(indexOfItemToReplace,value);
            }
            converter.write(modifiedList,type,file);
            subscriber.onSuccess(modifiedList);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}","/** 
 * Replace the first item in the list that the provided predicate returns true for. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeReplace(@NotNull final T value,@NotNull final ReplacePredicateFunc<T> predicateFunc){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    final SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            int indexOfItemToReplace=-1;
            for (int i=0; i < originalList.size(); i++) {
              if (predicateFunc.shouldReplace(originalList.get(i))) {
                indexOfItemToReplace=i;
                break;
              }
            }
            List<T> modifiedList=new ArrayList<T>(originalList);
            if (indexOfItemToReplace != -1) {
              modifiedList.remove(indexOfItemToReplace);
              modifiedList.add(indexOfItemToReplace,value);
            }
            converter.write(modifiedList,type,file);
            subscriber.onSuccess(modifiedList);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}"
30902,"/** 
 * Remove an item from the stored list by index and observe the operation. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeRemoveFromList(final int position){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            List<T> modifiedList=new ArrayList<T>(originalList);
            modifiedList.remove(position);
            converter.write(modifiedList,type,file);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}","/** 
 * Remove an item from the stored list by index and observe the operation. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeRemoveFromList(final int position){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    final SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            List<T> modifiedList=new ArrayList<T>(originalList);
            modifiedList.remove(position);
            converter.write(modifiedList,type,file);
            subscriber.onSuccess(modifiedList);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}"
30903,"/** 
 * Replace the first item in the list that the provided predicate returns true for with the provided item. If no matching item is found, add the provided item into the list. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeAddOrReplace(@NotNull final T value,@NotNull final ReplacePredicateFunc<T> predicateFunc){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            int indexOfItemToReplace=-1;
            for (int i=0; i < originalList.size(); i++) {
              if (predicateFunc.shouldReplace(originalList.get(i))) {
                indexOfItemToReplace=i;
                break;
              }
            }
            int modifiedListSize=indexOfItemToReplace == -1 ? originalList.size() + 1 : originalList.size();
            List<T> modifiedList=new ArrayList<T>(modifiedListSize);
            modifiedList.addAll(originalList);
            if (indexOfItemToReplace == -1) {
              modifiedList.add(value);
            }
 else {
              modifiedList.remove(indexOfItemToReplace);
              modifiedList.add(indexOfItemToReplace,value);
            }
            converter.write(modifiedList,type,file);
            subscriber.onSuccess(modifiedList);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}","/** 
 * Replace the first item in the list that the provided predicate returns true for with the provided item. If no matching item is found, add the provided item into the list. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeAddOrReplace(@NotNull final T value,@NotNull final ReplacePredicateFunc<T> predicateFunc){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    final SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            int indexOfItemToReplace=-1;
            for (int i=0; i < originalList.size(); i++) {
              if (predicateFunc.shouldReplace(originalList.get(i))) {
                indexOfItemToReplace=i;
                break;
              }
            }
            int modifiedListSize=indexOfItemToReplace == -1 ? originalList.size() + 1 : originalList.size();
            List<T> modifiedList=new ArrayList<T>(modifiedListSize);
            modifiedList.addAll(originalList);
            if (indexOfItemToReplace == -1) {
              modifiedList.add(value);
            }
 else {
              modifiedList.remove(indexOfItemToReplace);
              modifiedList.add(indexOfItemToReplace,value);
            }
            converter.write(modifiedList,type,file);
            subscriber.onSuccess(modifiedList);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}"
30904,"/** 
 * Replace the first item in the list that the provided predicate returns true for. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeReplace(@NotNull final T value,@NotNull final ReplacePredicateFunc<T> predicateFunc){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            int indexOfItemToReplace=-1;
            for (int i=0; i < originalList.size(); i++) {
              if (predicateFunc.shouldReplace(originalList.get(i))) {
                indexOfItemToReplace=i;
                break;
              }
            }
            List<T> modifiedList=new ArrayList<T>(originalList);
            if (indexOfItemToReplace != -1) {
              modifiedList.remove(indexOfItemToReplace);
              modifiedList.add(indexOfItemToReplace,value);
            }
            converter.write(modifiedList,type,file);
            subscriber.onSuccess(modifiedList);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}","/** 
 * Replace the first item in the list that the provided predicate returns true for. <p> The   {@link Scheduler} used for this operation will be the one specified in{@link Builder#schedulingWith(Scheduler) schedulingWith()}.
 */
@NotNull public Single<List<T>> observeReplace(@NotNull final T value,@NotNull final ReplacePredicateFunc<T> predicateFunc){
  return Single.create(new Single.OnSubscribe<List<T>>(){
    @Override public void call(    final SingleSubscriber<? super List<T>> subscriber){
      try {
        if (!file.exists())         throw new IOException(""String_Node_Str"");
        runInWriteLock(readWriteLock,new Runnable(){
          @Override public void run(){
            List<T> originalList=converter.read(file,type);
            if (originalList == null)             originalList=Collections.emptyList();
            int indexOfItemToReplace=-1;
            for (int i=0; i < originalList.size(); i++) {
              if (predicateFunc.shouldReplace(originalList.get(i))) {
                indexOfItemToReplace=i;
                break;
              }
            }
            List<T> modifiedList=new ArrayList<T>(originalList);
            if (indexOfItemToReplace != -1) {
              modifiedList.remove(indexOfItemToReplace);
              modifiedList.add(indexOfItemToReplace,value);
            }
            converter.write(modifiedList,type,file);
            subscriber.onSuccess(modifiedList);
            updateSubject.onNext(modifiedList);
          }
        }
);
      }
 catch (      Exception e) {
        subscriber.onError(e);
      }
    }
  }
).subscribeOn(scheduler);
}"
30905,"private static void runInWriteLock(ReentrantReadWriteLock readWriteLock,Runnable runnable){
  Lock readLock=readWriteLock.readLock();
  int readCount=readWriteLock.getWriteHoldCount() == 0 ? readWriteLock.getReadHoldCount() : 0;
  for (int i=0; i < readCount; i++) {
    readLock.unlock();
  }
  Lock writeLock=readWriteLock.writeLock();
  writeLock.lock();
  try {
    runnable.run();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    for (int i=0; i < readCount; i++) {
      readLock.lock();
      writeLock.unlock();
    }
  }
}","private static void runInWriteLock(ReentrantReadWriteLock readWriteLock,Runnable runnable){
  Lock readLock=readWriteLock.readLock();
  int readCount=readWriteLock.getWriteHoldCount() == 0 ? readWriteLock.getReadHoldCount() : 0;
  for (int i=0; i < readCount; i++) {
    readLock.unlock();
  }
  Lock writeLock=readWriteLock.writeLock();
  writeLock.lock();
  try {
    runnable.run();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    for (int i=0; i < readCount; i++) {
      readLock.lock();
    }
    writeLock.unlock();
  }
}"
30906,"@Override public void run(){
  try {
    prepareInternal();
    if (mCurrentState == State.PREPARED) {
      mEventHandler.sendEmptyMessage(MEDIA_PREPARED);
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
  }
}","@Override public void run(){
  try {
    prepareInternal();
    if (mCurrentState == State.PREPARED) {
      mEventHandler.sendEmptyMessage(MEDIA_PREPARED);
    }
  }
 catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
  }
catch (  IllegalArgumentException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
  }
}"
30907,"/** 
 * @see android.media.MediaPlayer#prepareAsync()
 */
public void prepareAsync() throws IllegalStateException {
  if (mCurrentState != State.INITIALIZED && mCurrentState != State.STOPPED) {
    throw new IllegalStateException();
  }
  mCurrentState=State.PREPARING;
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        prepareInternal();
        if (mCurrentState == State.PREPARED) {
          mEventHandler.sendEmptyMessage(MEDIA_PREPARED);
        }
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
      }
catch (      IllegalStateException e) {
        Log.e(TAG,""String_Node_Str"",e);
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
      }
    }
  }
).start();
}","/** 
 * @see android.media.MediaPlayer#prepareAsync()
 */
public void prepareAsync() throws IllegalStateException {
  if (mCurrentState != State.INITIALIZED && mCurrentState != State.STOPPED) {
    throw new IllegalStateException();
  }
  mCurrentState=State.PREPARING;
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        prepareInternal();
        if (mCurrentState == State.PREPARED) {
          mEventHandler.sendEmptyMessage(MEDIA_PREPARED);
        }
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
      }
catch (      IllegalStateException e) {
        Log.e(TAG,""String_Node_Str"",e);
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
      }
catch (      IllegalArgumentException e) {
        Log.e(TAG,""String_Node_Str"",e);
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
      }
    }
  }
).start();
}"
30908,"/** 
 * Sets the playback speed. Can be used for fast forward and slow motion. The speed must not be negative. speed 0.5 = half speed / slow motion speed 2.0 = double speed / fast forward speed 0.0 equals to pause
 * @param speed the playback speed to set
 * @throws IllegalArgumentException if the speed is < 0
 */
public void setPlaybackSpeed(float speed){
  if (speed < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTimeBase.setSpeed(speed);
  mTimeBase.startAt(mCurrentPosition);
}","/** 
 * Sets the playback speed. Can be used for fast forward and slow motion. The speed must not be negative. speed 0.5 = half speed / slow motion speed 2.0 = double speed / fast forward speed 0.0 equals to pause
 * @param speed the playback speed to set
 * @throws IllegalArgumentException if the speed is negative
 */
public void setPlaybackSpeed(float speed){
  if (speed < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mTimeBase.setSpeed(speed);
  mTimeBase.startAt(mCurrentPosition);
}"
30909,"/** 
 * Sets the playback speed. Can be used for fast forward and slow motion. The speed must not be negative. speed 0.5 = half speed / slow motion speed 2.0 = double speed / fast forward speed 0.0 equals to pause
 * @param speed the playback speed to set
 * @throws IllegalArgumentException if the speed is < 0
 */
public void setPlaybackSpeed(float speed){
  if (speed < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (isInPlaybackState()) {
    mPlayer.setPlaybackSpeed(speed);
  }
  mPlaybackSpeedWhenPrepared=speed;
}","/** 
 * Sets the playback speed. Can be used for fast forward and slow motion. The speed must not be negative. speed 0.5 = half speed / slow motion speed 2.0 = double speed / fast forward speed 0.0 equals to pause
 * @param speed the playback speed to set
 * @throws IllegalArgumentException if the speed is negative
 */
public void setPlaybackSpeed(float speed){
  if (speed < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (isInPlaybackState()) {
    mPlayer.setPlaybackSpeed(speed);
  }
  mPlaybackSpeedWhenPrepared=speed;
}"
30910,"/** 
 * Sets the size of the segment cache. On Android < 21, the size must be set before setting the data source (which is when the cache is created), else an exception will be thrown. From Android 21 Lollipop onward, the cache can be dynamically resized at any time. Segments that are larger than the cache size will not be cached. Setting a very small cache size or zero cache size effectively disables caching.
 * @param sizeInBytes the size of the segment cache in bytes
 * @throws IllegalStateException on Android < 21 if the data source has already been set
 */
public void setCacheSize(int sizeInBytes){
  mUsedCacheSize=sizeInBytes;
  if (mUsedCache != null) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      mUsedCache.resize(sizeInBytes == 0 ? 1 : sizeInBytes);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
}","/** 
 * Sets the size of the segment cache. On Android before API 21, the size must be set before setting the data source (which is when the cache is created), else an exception will be thrown. From Android 21 Lollipop onward, the cache can be dynamically resized at any time. Segments that are larger than the cache size will not be cached. Setting a very small cache size or zero cache size effectively disables caching.
 * @param sizeInBytes the size of the segment cache in bytes
 * @throws IllegalStateException on Android before API 21 if the data source has already been set
 */
public void setCacheSize(int sizeInBytes){
  mUsedCacheSize=sizeInBytes;
  if (mUsedCache != null) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      mUsedCache.resize(sizeInBytes == 0 ? 1 : sizeInBytes);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
}"
30911,"private Representation readRepresentation(MPD mpd,Period period,AdaptationSet adaptationSet,Uri baseUrl,XmlPullParser parser,SegmentTemplate segmentTemplate) throws XmlPullParserException, IOException, DashParserException {
  Representation representation=new Representation();
  representation.id=getAttributeValue(parser,""String_Node_Str"");
  representation.codec=getAttributeValue(parser,""String_Node_Str"");
  representation.mimeType=getAttributeValue(parser,""String_Node_Str"",adaptationSet.mimeType);
  if (representation.mimeType.startsWith(""String_Node_Str"")) {
    representation.width=getAttributeValueInt(parser,""String_Node_Str"");
    representation.height=getAttributeValueInt(parser,""String_Node_Str"");
    representation.sar=getAttributeValueRatio(parser,""String_Node_Str"");
  }
  representation.bandwidth=getAttributeValueInt(parser,""String_Node_Str"");
  int type=0;
  while ((type=parser.next()) >= 0) {
    String tagName=parser.getName();
    if (type == XmlPullParser.START_TAG) {
      if (tagName.equals(""String_Node_Str"")) {
        String sourceURL=getAttributeValue(parser,""String_Node_Str"");
        String range=getAttributeValue(parser,""String_Node_Str"");
        sourceURL=sourceURL != null ? extendUrl(baseUrl,sourceURL).toString() : baseUrl.toString();
        representation.initSegment=new Segment(sourceURL,range);
        Log.d(TAG,""String_Node_Str"" + representation.initSegment.toString());
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        long timescale=getAttributeValueLong(parser,""String_Node_Str"",1);
        long duration=getAttributeValueLong(parser,""String_Node_Str"");
        representation.segmentDurationUs=(long)(((double)duration / timescale) * 1000000d);
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        String media=getAttributeValue(parser,""String_Node_Str"");
        String mediaRange=getAttributeValue(parser,""String_Node_Str"");
        String indexRange=getAttributeValue(parser,""String_Node_Str"");
        media=media != null ? extendUrl(baseUrl,media).toString() : baseUrl.toString();
        representation.segments.add(new Segment(media,mediaRange));
        if (indexRange != null) {
          Log.v(TAG,""String_Node_Str"");
        }
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        String indexRange=getAttributeValue(parser,""String_Node_Str"");
        if (indexRange != null) {
          throw new DashParserException(""String_Node_Str"");
        }
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        segmentTemplate=readSegmentTemplate(parser,baseUrl,segmentTemplate);
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        baseUrl=extendUrl(baseUrl,parser.nextText());
        Log.d(TAG,""String_Node_Str"" + baseUrl);
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        throw new DashParserException(""String_Node_Str"");
      }
    }
 else     if (type == XmlPullParser.END_TAG) {
      if (tagName.equals(""String_Node_Str"")) {
        if (!representation.segments.isEmpty()) {
        }
 else         if (segmentTemplate != null) {
          if (segmentTemplate.hasTimeline()) {
            if (segmentTemplate.timeline.size() > 1) {
              throw new DashParserException(""String_Node_Str"");
            }
            SegmentTemplate.SegmentTimelineEntry current, previous, next;
            for (int i=0; i < segmentTemplate.timeline.size(); i++) {
              current=segmentTemplate.timeline.get(i);
              next=i < segmentTemplate.timeline.size() - 1 ? segmentTemplate.timeline.get(i + 1) : null;
              int repeat=current.r;
              if (repeat < 0) {
                long duration=next != null ? next.t - current.t : calculateTimescaleTime(mpd.mediaPresentationDurationUs,segmentTemplate.timescale) - current.t;
                repeat=(int)(duration / current.d) - 1;
              }
              representation.segmentDurationUs=calculateUs(current.d,segmentTemplate.timescale);
              String processedInitUrl=processMediaUrl(segmentTemplate.init,representation.id,null,representation.bandwidth,null);
              representation.initSegment=new Segment(processedInitUrl);
              long time=current.t;
              for (int number=segmentTemplate.startNumber; number < repeat + 1; number++) {
                String processedMediaUrl=processMediaUrl(segmentTemplate.media,representation.id,number,representation.bandwidth,time);
                representation.segments.add(new Segment(processedMediaUrl));
                time+=current.d;
              }
            }
          }
 else {
            representation.segmentDurationUs=segmentTemplate.calculateDurationUs();
            int numSegments=(int)Math.ceil((double)mpd.mediaPresentationDurationUs / representation.segmentDurationUs);
            if (mpd.isDynamic) {
              Date now=new Date();
              Calendar calendar=Calendar.getInstance();
              calendar.setTime(now);
              calendar.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
              now=calendar.getTime();
              long availabilityDeltaTimeUs=(now.getTime() - mpd.availabilityStartTime.getTime()) * 1000;
              availabilityDeltaTimeUs-=period.startUs;
              availabilityDeltaTimeUs-=segmentTemplate.presentationTimeOffsetUs;
              availabilityDeltaTimeUs-=Math.max(mpd.minBufferTimeUs,10 * 1000000L);
              availabilityDeltaTimeUs-=mpd.suggestedPresentationDelayUs;
              segmentTemplate.startNumber+=(int)(availabilityDeltaTimeUs / representation.segmentDurationUs);
            }
            String processedInitUrl=processMediaUrl(segmentTemplate.init,representation.id,null,representation.bandwidth,null);
            representation.initSegment=new Segment(processedInitUrl);
            for (int i=segmentTemplate.startNumber; i < segmentTemplate.startNumber + numSegments; i++) {
              String processedMediaUrl=processMediaUrl(segmentTemplate.media,representation.id,i,representation.bandwidth,null);
              representation.segments.add(new Segment(processedMediaUrl));
            }
          }
        }
 else {
          if (representation.mimeType != null && representation.mimeType.startsWith(""String_Node_Str"")) {
            Log.i(TAG,""String_Node_Str"");
          }
 else {
            throw new DashParserException(""String_Node_Str"");
          }
        }
        Log.d(TAG,representation.toString());
        return representation;
      }
    }
  }
  throw new DashParserException(""String_Node_Str"");
}","private Representation readRepresentation(MPD mpd,Period period,AdaptationSet adaptationSet,Uri baseUrl,XmlPullParser parser,SegmentTemplate segmentTemplate) throws XmlPullParserException, IOException, DashParserException {
  Representation representation=new Representation();
  representation.id=getAttributeValue(parser,""String_Node_Str"");
  representation.codec=getAttributeValue(parser,""String_Node_Str"");
  representation.mimeType=getAttributeValue(parser,""String_Node_Str"",adaptationSet.mimeType);
  if (representation.mimeType.startsWith(""String_Node_Str"")) {
    representation.width=getAttributeValueInt(parser,""String_Node_Str"");
    representation.height=getAttributeValueInt(parser,""String_Node_Str"");
    representation.sar=getAttributeValueRatio(parser,""String_Node_Str"");
  }
  representation.bandwidth=getAttributeValueInt(parser,""String_Node_Str"");
  int type=0;
  while ((type=parser.next()) >= 0) {
    String tagName=parser.getName();
    if (type == XmlPullParser.START_TAG) {
      if (tagName.equals(""String_Node_Str"")) {
        String sourceURL=getAttributeValue(parser,""String_Node_Str"");
        String range=getAttributeValue(parser,""String_Node_Str"");
        sourceURL=sourceURL != null ? extendUrl(baseUrl,sourceURL).toString() : baseUrl.toString();
        representation.initSegment=new Segment(sourceURL,range);
        Log.d(TAG,""String_Node_Str"" + representation.initSegment.toString());
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        long timescale=getAttributeValueLong(parser,""String_Node_Str"",1);
        long duration=getAttributeValueLong(parser,""String_Node_Str"");
        representation.segmentDurationUs=(long)(((double)duration / timescale) * 1000000d);
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        String media=getAttributeValue(parser,""String_Node_Str"");
        String mediaRange=getAttributeValue(parser,""String_Node_Str"");
        String indexRange=getAttributeValue(parser,""String_Node_Str"");
        media=media != null ? extendUrl(baseUrl,media).toString() : baseUrl.toString();
        representation.segments.add(new Segment(media,mediaRange));
        if (indexRange != null) {
          Log.v(TAG,""String_Node_Str"");
        }
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        String indexRange=getAttributeValue(parser,""String_Node_Str"");
        if (indexRange != null) {
          throw new DashParserException(""String_Node_Str"");
        }
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        segmentTemplate=readSegmentTemplate(parser,baseUrl,segmentTemplate);
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        baseUrl=extendUrl(baseUrl,parser.nextText());
        Log.d(TAG,""String_Node_Str"" + baseUrl);
      }
 else       if (tagName.equals(""String_Node_Str"")) {
        throw new DashParserException(""String_Node_Str"");
      }
    }
 else     if (type == XmlPullParser.END_TAG) {
      if (tagName.equals(""String_Node_Str"")) {
        if (!representation.segments.isEmpty()) {
        }
 else         if (segmentTemplate != null) {
          if (segmentTemplate.hasTimeline()) {
            if (segmentTemplate.timeline.size() > 1) {
              throw new DashParserException(""String_Node_Str"");
            }
            SegmentTemplate.SegmentTimelineEntry current, previous, next;
            for (int i=0; i < segmentTemplate.timeline.size(); i++) {
              current=segmentTemplate.timeline.get(i);
              next=i < segmentTemplate.timeline.size() - 1 ? segmentTemplate.timeline.get(i + 1) : null;
              int repeat=current.r;
              if (repeat < 0) {
                long duration=next != null ? next.t - current.t : calculateTimescaleTime(mpd.mediaPresentationDurationUs,segmentTemplate.timescale) - current.t;
                repeat=(int)(duration / current.d) - 1;
              }
              representation.segmentDurationUs=calculateUs(current.d,segmentTemplate.timescale);
              String processedInitUrl=processMediaUrl(segmentTemplate.init,representation.id,null,representation.bandwidth,null);
              representation.initSegment=new Segment(processedInitUrl);
              long time=current.t;
              for (int number=segmentTemplate.startNumber; number < repeat + 1; number++) {
                String processedMediaUrl=processMediaUrl(segmentTemplate.media,representation.id,number,representation.bandwidth,time);
                representation.segments.add(new Segment(processedMediaUrl));
                time+=current.d;
              }
            }
          }
 else {
            representation.segmentDurationUs=segmentTemplate.calculateDurationUs();
            int numSegments=(int)Math.ceil((double)mpd.mediaPresentationDurationUs / representation.segmentDurationUs);
            int dynamicStartNumberOffset=0;
            if (mpd.isDynamic) {
              Date now=new Date();
              Calendar calendar=Calendar.getInstance();
              calendar.setTime(now);
              calendar.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
              now=calendar.getTime();
              long availabilityDeltaTimeUs=(now.getTime() - mpd.availabilityStartTime.getTime()) * 1000;
              availabilityDeltaTimeUs-=period.startUs;
              availabilityDeltaTimeUs-=segmentTemplate.presentationTimeOffsetUs;
              availabilityDeltaTimeUs-=Math.max(mpd.minBufferTimeUs,10 * 1000000L);
              availabilityDeltaTimeUs-=mpd.suggestedPresentationDelayUs;
              dynamicStartNumberOffset=(int)(availabilityDeltaTimeUs / representation.segmentDurationUs);
            }
            String processedInitUrl=processMediaUrl(segmentTemplate.init,representation.id,null,representation.bandwidth,null);
            representation.initSegment=new Segment(processedInitUrl);
            for (int i=segmentTemplate.startNumber + dynamicStartNumberOffset; i < segmentTemplate.startNumber + dynamicStartNumberOffset + numSegments; i++) {
              String processedMediaUrl=processMediaUrl(segmentTemplate.media,representation.id,i,representation.bandwidth,null);
              representation.segments.add(new Segment(processedMediaUrl));
            }
          }
        }
 else {
          if (representation.mimeType != null && representation.mimeType.startsWith(""String_Node_Str"")) {
            Log.i(TAG,""String_Node_Str"");
          }
 else {
            throw new DashParserException(""String_Node_Str"");
          }
        }
        Log.d(TAG,representation.toString());
        return representation;
      }
    }
  }
  throw new DashParserException(""String_Node_Str"");
}"
30912,"private void seekInternal(long usec) throws IOException, InterruptedException {
  if (mAudioPlayback != null)   mAudioPlayback.pause(true);
  mDecoder.seekTo(mSeekMode,usec);
  mTimeBase.startAt(mDecoder.getCurrentDecodingPTS());
  boolean newSeekWaiting=mHandler.hasMessages(PLAYBACK_SEEK);
  if (newSeekWaiting) {
    mDecoder.dismissFrames();
  }
 else {
    mDecoder.renderFrames();
  }
  if (!newSeekWaiting) {
    mCurrentPosition=mDecoder.getCurrentDecodingPTS();
    mSeeking=false;
    mEventHandler.sendEmptyMessage(MEDIA_SEEK_COMPLETE);
    if (!mPaused) {
      playInternal();
    }
  }
}","private void seekInternal(long usec) throws IOException, InterruptedException {
  if (mVideoFrameInfo != null) {
    mDecoder.getVideoDecoder().dismissFrame(mVideoFrameInfo);
    mVideoFrameInfo=null;
  }
  if (mAudioPlayback != null)   mAudioPlayback.pause(true);
  mDecoder.seekTo(mSeekMode,usec);
  mTimeBase.startAt(mDecoder.getCurrentDecodingPTS());
  boolean newSeekWaiting=mHandler.hasMessages(PLAYBACK_SEEK);
  if (newSeekWaiting) {
    mDecoder.dismissFrames();
  }
 else {
    mDecoder.renderFrames();
  }
  if (!newSeekWaiting) {
    mCurrentPosition=mDecoder.getCurrentDecodingPTS();
    mSeeking=false;
    mEventHandler.sendEmptyMessage(MEDIA_SEEK_COMPLETE);
    if (!mPaused) {
      playInternal();
    }
  }
}"
30913,"/** 
 * Dismisses the current frame. This only works if the decoder holds a current frame, e.g. after a seek.
 */
public void dismissFrame(){
  dismissFrame(mCurrentFrameInfo);
}","/** 
 * Dismisses the current frame. This only works if the decoder holds a current frame, e.g. after a seek.
 */
public void dismissFrame(){
  if (mCurrentFrameInfo != null)   dismissFrame(mCurrentFrameInfo);
}"
30914,"private void openVideo(){
  if (mSource == null || mVideoSurface == null) {
    return;
  }
  release();
  mPlayer=new MediaPlayer();
  mPlayer.setSurface(mVideoSurface);
  mPlayer.setOnPreparedListener(mPreparedListener);
  mPlayer.setOnVideoSizeChangedListener(mSizeChangedListener);
  mPlayer.setOnSeekListener(mSeekListener);
  mPlayer.setOnSeekCompleteListener(mSeekCompleteListener);
  mPlayer.setOnCompletionListener(mCompletionListener);
  mPlayer.setOnErrorListener(mErrorListener);
  mPlayer.setOnInfoListener(mInfoListener);
  new AsyncTask<Void,Void,Void>(){
    private IOException mException;
    @Override protected Void doInBackground(    Void... params){
      try {
        mPlayer.setDataSource(mSource);
        mPlayer.prepareAsync();
        Log.d(TAG,""String_Node_Str"");
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        mException=e;
      }
      return null;
    }
    @Override protected void onPostExecute(    Void aVoid){
      if (mException != null) {
        mErrorListener.onError(mPlayer,MediaPlayer.MEDIA_ERROR_UNKNOWN,0);
      }
    }
  }
.execute();
}","private void openVideo(){
  if (mSource == null || mVideoSurface == null) {
    return;
  }
  release();
  mPlayer=new MediaPlayer();
  mPlayer.setSurface(mVideoSurface);
  mPlayer.setOnPreparedListener(mPreparedListener);
  mPlayer.setOnVideoSizeChangedListener(mSizeChangedListener);
  mPlayer.setOnSeekListener(mSeekListener);
  mPlayer.setOnSeekCompleteListener(mSeekCompleteListener);
  mPlayer.setOnCompletionListener(mCompletionListener);
  mPlayer.setOnErrorListener(mErrorListener);
  mPlayer.setOnInfoListener(mInfoListener);
  final Handler exceptionHandler=new Handler(new Handler.Callback(){
    @Override public boolean handleMessage(    Message msg){
      mErrorListener.onError(mPlayer,MediaPlayer.MEDIA_ERROR_UNKNOWN,0);
      return true;
    }
  }
);
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        mPlayer.setDataSource(mSource);
        mPlayer.prepareAsync();
        Log.d(TAG,""String_Node_Str"");
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        exceptionHandler.sendEmptyMessage(0);
      }
    }
  }
).start();
}"
30915,"/** 
 * @see android.media.MediaPlayer#prepareAsync()
 */
public void prepareAsync() throws IllegalStateException {
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      try {
        prepare();
        mEventHandler.sendEmptyMessage(MEDIA_PREPARED);
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
      }
      return null;
    }
  }
.execute();
}","/** 
 * @see android.media.MediaPlayer#prepareAsync()
 */
public void prepareAsync() throws IllegalStateException {
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        prepare();
        mEventHandler.sendEmptyMessage(MEDIA_PREPARED);
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
      }
    }
  }
).start();
}"
30916,"private void openVideo(){
  if (mSource == null || mSurfaceHolder == null) {
    return;
  }
  release();
  mPlayer=new MediaPlayer();
  mPlayer.setDisplay(mSurfaceHolder);
  mPlayer.setScreenOnWhilePlaying(true);
  mPlayer.setOnPreparedListener(mPreparedListener);
  mPlayer.setOnSeekListener(mSeekListener);
  mPlayer.setOnSeekCompleteListener(mSeekCompleteListener);
  mPlayer.setOnCompletionListener(mCompletionListener);
  mPlayer.setOnVideoSizeChangedListener(mSizeChangedListener);
  mPlayer.setOnErrorListener(mErrorListener);
  mPlayer.setOnInfoListener(mInfoListener);
  mPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);
  new AsyncTask<Void,Void,Void>(){
    private IOException mException;
    @Override protected Void doInBackground(    Void... params){
      try {
        mPlayer.setDataSource(mSource);
        mPlayer.prepareAsync();
        Log.d(TAG,""String_Node_Str"");
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        mException=e;
      }
      return null;
    }
    @Override protected void onPostExecute(    Void aVoid){
      if (mException != null) {
        mErrorListener.onError(mPlayer,MediaPlayer.MEDIA_ERROR_UNKNOWN,0);
      }
    }
  }
.execute();
}","private void openVideo(){
  if (mSource == null || mSurfaceHolder == null) {
    return;
  }
  release();
  mPlayer=new MediaPlayer();
  mPlayer.setDisplay(mSurfaceHolder);
  mPlayer.setScreenOnWhilePlaying(true);
  mPlayer.setOnPreparedListener(mPreparedListener);
  mPlayer.setOnSeekListener(mSeekListener);
  mPlayer.setOnSeekCompleteListener(mSeekCompleteListener);
  mPlayer.setOnCompletionListener(mCompletionListener);
  mPlayer.setOnVideoSizeChangedListener(mSizeChangedListener);
  mPlayer.setOnErrorListener(mErrorListener);
  mPlayer.setOnInfoListener(mInfoListener);
  mPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);
  final Handler exceptionHandler=new Handler(new Handler.Callback(){
    @Override public boolean handleMessage(    Message msg){
      mErrorListener.onError(mPlayer,MediaPlayer.MEDIA_ERROR_UNKNOWN,0);
      return true;
    }
  }
);
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        mPlayer.setDataSource(mSource);
        mPlayer.prepareAsync();
        Log.d(TAG,""String_Node_Str"");
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"",e);
        exceptionHandler.sendEmptyMessage(0);
      }
    }
  }
).start();
}"
30917,"/** 
 * This API method in the Android MediaPlayer is hidden, but may be unhidden in the future. Here it can already be used.
 * @see android.media.MediaPlayer#setVolume(float)
 */
public void setVolume(float volume){
  setVolume(volume,volume);
}","/** 
 * This API method in the Android MediaPlayer is hidden, but may be unhidden in the future. Here it can already be used. see android.media.MediaPlayer#setVolume(float)
 */
public void setVolume(float volume){
  setVolume(volume,volume);
}"
30918,"private boolean isPlaying(){
  return mAudioTrack.getPlayState() == AudioTrack.PLAYSTATE_PLAYING;
}","public boolean isPlaying(){
  return mAudioTrack.getPlayState() == AudioTrack.PLAYSTATE_PLAYING;
}"
30919,"@Override public void run(){
  try {
    Decoder.VideoFrameInfo videoFrameInfo;
    if (mAudioPlayback != null)     mAudioPlayback.play();
    while ((videoFrameInfo=mDecoder.decodeFrame(false)) != null) {
      if (mPaused && !mSeekPrepare) {
        if (mAudioPlayback != null)         mAudioPlayback.pause();
synchronized (this) {
          while (mPaused && !mSeekPrepare) {
            this.wait();
          }
        }
        if (mAudioPlayback != null)         mAudioPlayback.play();
        mTimeBase.startAt(videoFrameInfo.presentationTimeUs);
      }
      if (mBuffering) {
        mBuffering=false;
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_BUFFERING_END,0));
      }
      while (mSeekPrepare) {
        mSeekPrepare=false;
        mCurrentPosition=mSeekTargetTime;
        mDecoder.releaseFrame(videoFrameInfo,false);
        if (mAudioPlayback != null)         mAudioPlayback.flush();
        videoFrameInfo=mDecoder.seekTo(mSeekMode,mSeekTargetTime);
        mTimeBase.startAt(videoFrameInfo.presentationTimeUs);
        mCurrentPosition=videoFrameInfo.presentationTimeUs;
        if (!mSeekPrepare) {
          mEventHandler.sendEmptyMessage(MEDIA_SEEK_COMPLETE);
        }
      }
      mCurrentPosition=videoFrameInfo.presentationTimeUs;
      long waitingTime=mTimeBase.getOffsetFrom(videoFrameInfo.presentationTimeUs);
      if (mAudioPlayback != null) {
        long audioOffsetUs=mAudioPlayback.getLastPresentationTimeUs() - mCurrentPosition;
        long audioOffsetCorrectionUs=10000;
        if (audioOffsetUs > audioOffsetCorrectionUs) {
          waitingTime-=audioOffsetCorrectionUs;
        }
 else         if (audioOffsetUs < -audioOffsetCorrectionUs) {
          waitingTime+=audioOffsetCorrectionUs;
        }
        mAudioPlayback.setPlaybackSpeed((float)mTimeBase.getSpeed());
      }
      long cachedDuration=mVideoExtractor.getCachedDuration();
      if (cachedDuration != -1) {
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_BUFFERING_UPDATE,(int)(100d / mVideoFormat.getLong(MediaFormat.KEY_DURATION) * (mCurrentPosition + cachedDuration)),0));
      }
      if (waitingTime > 5000) {
        Thread.sleep(waitingTime / 1000);
      }
 else       if (waitingTime < 0) {
        Log.d(TAG,""String_Node_Str"" + waitingTime);
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_VIDEO_TRACK_LAGGING,0));
        mTimeBase.startAt(videoFrameInfo.presentationTimeUs);
      }
      if (videoFrameInfo.representationChanged) {
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_SET_VIDEO_SIZE,videoFrameInfo.width,videoFrameInfo.height));
      }
      boolean videoOutputEos=videoFrameInfo.endOfStream;
      mDecoder.releaseFrame(videoFrameInfo,true);
      if (mRenderingStarted) {
        mRenderingStarted=false;
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_VIDEO_RENDERING_START,0));
      }
      if (videoOutputEos) {
        mEventHandler.sendEmptyMessage(MEDIA_PLAYBACK_COMPLETE);
        mPaused=!mLooping;
synchronized (this) {
          if (mAudioPlayback != null)           mAudioPlayback.pause();
          while (mPaused) {
            this.wait();
          }
          if (mAudioPlayback != null)           mAudioPlayback.play();
          if (!mSeekPrepare) {
            videoFrameInfo=mDecoder.seekTo(SeekMode.FAST,0);
            mDecoder.releaseFrame(videoFrameInfo,true);
          }
        }
      }
    }
  }
 catch (  InterruptedException e) {
    Log.d(TAG,""String_Node_Str"");
    interrupt();
    if (mIsStopping) {
      mIsStopping=false;
    }
 else {
      mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
    }
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
  }
  if (mDecoder != null)   mDecoder.release();
  if (mAudioPlayback != null)   mAudioPlayback.stopAndRelease();
  if (mAudioExtractor != null & mAudioExtractor != mVideoExtractor) {
    mAudioExtractor.release();
  }
  mVideoExtractor.release();
  Log.d(TAG,""String_Node_Str"");
}","@Override public void run(){
  try {
    Decoder.VideoFrameInfo videoFrameInfo;
    while ((videoFrameInfo=mDecoder.decodeFrame(false)) != null) {
      if (mPaused && !mSeekPrepare) {
        if (mAudioPlayback != null)         mAudioPlayback.pause();
synchronized (this) {
          while (mPaused && !mSeekPrepare) {
            this.wait();
          }
        }
        mTimeBase.startAt(videoFrameInfo.presentationTimeUs);
      }
      if (mAudioPlayback != null && !mAudioPlayback.isPlaying() && !mPaused && !mSeekPrepare) {
        mAudioPlayback.play();
      }
      if (mBuffering) {
        mBuffering=false;
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_BUFFERING_END,0));
      }
      while (mSeekPrepare) {
        mSeekPrepare=false;
        mCurrentPosition=mSeekTargetTime;
        mDecoder.releaseFrame(videoFrameInfo,false);
        if (mAudioPlayback != null)         mAudioPlayback.pause(true);
        videoFrameInfo=mDecoder.seekTo(mSeekMode,mSeekTargetTime);
        mTimeBase.startAt(videoFrameInfo.presentationTimeUs);
        mCurrentPosition=videoFrameInfo.presentationTimeUs;
        if (!mSeekPrepare) {
          mEventHandler.sendEmptyMessage(MEDIA_SEEK_COMPLETE);
        }
      }
      mCurrentPosition=videoFrameInfo.presentationTimeUs;
      long waitingTime=mTimeBase.getOffsetFrom(videoFrameInfo.presentationTimeUs);
      if (mAudioPlayback != null) {
        long audioOffsetUs=mAudioPlayback.getLastPresentationTimeUs() - mCurrentPosition;
        long audioOffsetCorrectionUs=10000;
        if (audioOffsetUs > audioOffsetCorrectionUs) {
          waitingTime-=audioOffsetCorrectionUs;
        }
 else         if (audioOffsetUs < -audioOffsetCorrectionUs) {
          waitingTime+=audioOffsetCorrectionUs;
        }
        mAudioPlayback.setPlaybackSpeed((float)mTimeBase.getSpeed());
      }
      long cachedDuration=mVideoExtractor.getCachedDuration();
      if (cachedDuration != -1) {
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_BUFFERING_UPDATE,(int)(100d / mVideoFormat.getLong(MediaFormat.KEY_DURATION) * (mCurrentPosition + cachedDuration)),0));
      }
      if (waitingTime > 5000) {
        Thread.sleep(waitingTime / 1000);
      }
 else       if (waitingTime < 0) {
        Log.d(TAG,""String_Node_Str"" + waitingTime);
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_VIDEO_TRACK_LAGGING,0));
        mTimeBase.startAt(videoFrameInfo.presentationTimeUs);
      }
      if (videoFrameInfo.representationChanged) {
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_SET_VIDEO_SIZE,videoFrameInfo.width,videoFrameInfo.height));
      }
      boolean videoOutputEos=videoFrameInfo.endOfStream;
      mDecoder.releaseFrame(videoFrameInfo,true);
      if (mRenderingStarted) {
        mRenderingStarted=false;
        mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_VIDEO_RENDERING_START,0));
      }
      if (videoOutputEos) {
        mEventHandler.sendEmptyMessage(MEDIA_PLAYBACK_COMPLETE);
        mPaused=!mLooping;
synchronized (this) {
          if (mAudioPlayback != null)           mAudioPlayback.pause();
          while (mPaused) {
            this.wait();
          }
          if (mAudioPlayback != null)           mAudioPlayback.play();
          if (!mSeekPrepare) {
            videoFrameInfo=mDecoder.seekTo(SeekMode.FAST,0);
            mDecoder.releaseFrame(videoFrameInfo,true);
          }
        }
      }
    }
  }
 catch (  InterruptedException e) {
    Log.d(TAG,""String_Node_Str"");
    interrupt();
    if (mIsStopping) {
      mIsStopping=false;
    }
 else {
      mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
    }
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
  }
  if (mDecoder != null)   mDecoder.release();
  if (mAudioPlayback != null)   mAudioPlayback.stopAndRelease();
  if (mAudioExtractor != null & mAudioExtractor != mVideoExtractor) {
    mAudioExtractor.release();
  }
  mVideoExtractor.release();
  Log.d(TAG,""String_Node_Str"");
}"
30920,"public void stop(){
  if (mPlaybackThread != null) {
    mPlaybackThread.release();
    mPlaybackThread.quitSafely();
    mPlaybackThread=null;
  }
  stayAwake(false);
}","public void stop(){
  if (mPlaybackThread != null) {
    mPlaybackThread.release();
    mPlaybackThread.quitSafelyCompat();
    mPlaybackThread=null;
  }
  stayAwake(false);
}"
30921,"@Override public void run(){
  try {
    mVideoCodec=MediaCodec.createDecoderByType(mVideoFormat.getString(MediaFormat.KEY_MIME));
    mVideoCodec.configure(mVideoFormat,mSurface,null,0);
    mVideoCodec.start();
    mVideoCodecInputBuffers=mVideoCodec.getInputBuffers();
    mVideoCodecOutputBuffers=mVideoCodec.getOutputBuffers();
    mVideoInfo=new MediaCodec.BufferInfo();
    mVideoInputEos=false;
    mVideoOutputEos=false;
    if (mAudioFormat != null) {
      mAudioCodec=MediaCodec.createDecoderByType(mAudioFormat.getString(MediaFormat.KEY_MIME));
      mAudioCodec.configure(mAudioFormat,null,null,0);
      mAudioCodec.start();
      mAudioCodecInputBuffers=mAudioCodec.getInputBuffers();
      mAudioCodecOutputBuffers=mAudioCodec.getOutputBuffers();
      mAudioInfo=new MediaCodec.BufferInfo();
      mAudioInputEos=false;
      mAudioOutputEos=false;
      mAudioPlayback=new AudioPlayback();
      mAudioPlayback.setAudioSessionId(mAudioSessionId);
      mAudioPlayback.init(mAudioFormat);
      mAudioSessionId=mAudioPlayback.getAudioSessionId();
    }
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_SET_VIDEO_SIZE,getVideoWidth(),getVideoHeight()));
    mBuffering=false;
    boolean preparing=true;
    int frameSkipCount=0;
    long lastPTS=0;
    mTimeBase.startAt(mVideoMinPTS);
    while (!mVideoOutputEos) {
      if (mPaused && !mSeekPrepare && !mSeeking&& !preparing) {
        if (mAudioPlayback != null)         mAudioPlayback.pause();
synchronized (this) {
          while (mPaused && !mSeekPrepare && !mSeeking) {
            this.wait();
          }
        }
        if (mAudioPlayback != null)         mAudioPlayback.play();
        mTimeBase.startAt(mVideoInfo.presentationTimeUs);
      }
      if (mSeekPrepare) {
        Log.d(TAG,""String_Node_Str"" + mSeekTargetTime);
        Log.d(TAG,""String_Node_Str"" + mCurrentPosition);
        Log.d(TAG,""String_Node_Str"" + mVideoExtractor.getSampleTime());
        mVideoExtractor.seekTo(mSeekTargetTime,MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
        mCurrentPosition=mSeekTargetTime;
        Log.d(TAG,""String_Node_Str"" + mVideoExtractor.getSampleTime());
        mVideoCodec.flush();
        if (mAudioFormat != null)         mAudioCodec.flush();
        if (mVideoExtractor.hasTrackFormatChanged()) {
          reinitCodecs();
          mRepresentationChanged=true;
        }
        mSeekPrepare=false;
        mSeeking=true;
        if (mSeekMode == SeekMode.FAST_EXACT) {
          long in;
          long out;
          do {
            in=mSeekTargetTime;
            out=fastSeek(in);
          }
 while (in != mSeekTargetTime);
          mSeekTargetTime=out;
          mSeekPrepare=false;
        }
      }
      if (!mVideoInputEos && !mRepresentationChanging) {
        queueMediaSampleToCodec(mSeeking);
      }
      lastPTS=mVideoInfo.presentationTimeUs;
      int res=mVideoCodec.dequeueOutputBuffer(mVideoInfo,mTimeOutUs);
      mVideoOutputEos=res >= 0 && (mVideoInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0;
      if (mVideoOutputEos && mRepresentationChanging) {
        reinitCodecs();
        mVideoOutputEos=false;
        mRepresentationChanging=false;
        mRepresentationChanged=true;
      }
 else       if (res >= 0) {
        int outputBufIndex=res;
        boolean render=true;
        if (mSeeking) {
          if (mVideoOutputEos) {
            mSeekTargetTime=mVideoInfo.presentationTimeUs;
          }
          long presentationTimeMs=mVideoInfo.presentationTimeUs / 1000;
          long seekTargetTimeMs=mSeekTargetTime / 1000;
          if ((mSeekMode == SeekMode.PRECISE || mSeekMode == SeekMode.EXACT) && presentationTimeMs < seekTargetTimeMs) {
            render=false;
            if (frameSkipCount == 0) {
              Log.d(TAG,""String_Node_Str"");
            }
            frameSkipCount++;
          }
 else {
            Log.d(TAG,""String_Node_Str"" + mVideoInfo.presentationTimeUs);
            Log.d(TAG,""String_Node_Str"" + frameSkipCount + ""String_Node_Str"");
            frameSkipCount=0;
            if (mSeekMode == SeekMode.EXACT && presentationTimeMs > seekTargetTimeMs) {
              Log.d(TAG,""String_Node_Str"" + lastPTS);
              render=false;
              seekTo(lastPTS);
            }
 else {
              if (presentationTimeMs == seekTargetTimeMs) {
                Log.d(TAG,""String_Node_Str"");
              }
              if (mSeekMode == SeekMode.FAST_EXACT && mVideoInfo.presentationTimeUs < mSeekTargetTime) {
                Log.d(TAG,""String_Node_Str"");
              }
 else {
                mTimeBase.startAt(mVideoInfo.presentationTimeUs);
                mCurrentPosition=mVideoInfo.presentationTimeUs;
                mSeeking=false;
                if (mAudioExtractor != null) {
                  mAudioExtractor.seekTo(mVideoInfo.presentationTimeUs,MediaExtractor.SEEK_TO_CLOSEST_SYNC);
                  mAudioPlayback.flush();
                }
                mEventHandler.sendEmptyMessage(MEDIA_SEEK_COMPLETE);
              }
            }
          }
        }
 else {
          mCurrentPosition=mVideoInfo.presentationTimeUs;
          long waitingTime=mTimeBase.getOffsetFrom(mVideoInfo.presentationTimeUs);
          if (mAudioFormat != null) {
            long audioOffsetUs=mAudioPlayback.getLastPresentationTimeUs() - mCurrentPosition;
            long audioOffsetCorrectionUs=10000;
            if (audioOffsetUs > audioOffsetCorrectionUs) {
              waitingTime-=audioOffsetCorrectionUs;
            }
 else             if (audioOffsetUs < -audioOffsetCorrectionUs) {
              waitingTime+=audioOffsetCorrectionUs;
            }
            mAudioPlayback.setPlaybackSpeed((float)mTimeBase.getSpeed());
          }
          long cachedDuration=mVideoExtractor.getCachedDuration();
          if (cachedDuration != -1) {
            mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_BUFFERING_UPDATE,(int)(100d / mVideoFormat.getLong(MediaFormat.KEY_DURATION) * (mCurrentPosition + cachedDuration)),0));
          }
          if (waitingTime > 5000) {
            Thread.sleep(waitingTime / 1000);
          }
 else           if (!preparing && waitingTime < 0) {
            mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_VIDEO_TRACK_LAGGING,0));
            mTimeBase.startAt(mVideoInfo.presentationTimeUs);
          }
        }
        if (mBuffering) {
          mBuffering=false;
          mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_BUFFERING_END,0));
        }
        if (mRepresentationChanged && render) {
          mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_SET_VIDEO_SIZE,getVideoWidth(),getVideoHeight()));
          mRepresentationChanged=false;
        }
        mVideoCodec.releaseOutputBuffer(outputBufIndex,render);
        if (mAudioFormat != null & mAudioExtractor != null && !mSeeking && !mPaused) {
          long start=SystemClock.elapsedRealtime();
          while (mAudioPlayback.getBufferTimeUs() < 100000) {
            if (queueAudioSampleToCodec(mAudioExtractor)) {
              decodeAudioSample();
            }
 else {
              break;
            }
          }
        }
        if (preparing) {
          mEventHandler.sendEmptyMessage(MEDIA_PREPARED);
          preparing=false;
          mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_VIDEO_RENDERING_START,0));
        }
        if (mVideoOutputEos) {
          Log.d(TAG,""String_Node_Str"");
          mEventHandler.sendEmptyMessage(MEDIA_PLAYBACK_COMPLETE);
          mPaused=true;
synchronized (this) {
            if (mAudioPlayback != null)             mAudioPlayback.pause();
            while (mPaused && !mSeeking && !mSeekPrepare) {
              this.wait();
            }
            if (mAudioPlayback != null)             mAudioPlayback.play();
            mVideoInputEos=false;
            mVideoOutputEos=false;
            mAudioInputEos=false;
            mAudioOutputEos=false;
            if (!mSeeking && !mSeekPrepare) {
              seekTo(0);
            }
          }
        }
      }
 else       if (res == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
        mVideoCodecOutputBuffers=mVideoCodec.getOutputBuffers();
        Log.d(TAG,""String_Node_Str"");
      }
 else       if (res == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
        MediaFormat oformat=mVideoCodec.getOutputFormat();
        Log.d(TAG,""String_Node_Str"" + oformat);
      }
 else       if (res == MediaCodec.INFO_TRY_AGAIN_LATER) {
        Log.d(TAG,""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    Log.d(TAG,""String_Node_Str"");
    interrupt();
    if (mIsStopping) {
      mIsStopping=false;
    }
 else {
      mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
    }
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
  }
  if (mAudioPlayback != null)   mAudioPlayback.stopAndRelease();
  mVideoCodec.stop();
  mVideoCodec.release();
  if (mAudioFormat != null) {
    mAudioCodec.stop();
    mAudioCodec.release();
  }
  mVideoExtractor.release();
  Log.d(TAG,""String_Node_Str"");
}","@Override public void run(){
  try {
    mVideoCodec=MediaCodec.createDecoderByType(mVideoFormat.getString(MediaFormat.KEY_MIME));
    mVideoCodec.configure(mVideoFormat,mSurface,null,0);
    mVideoCodec.start();
    mVideoCodecInputBuffers=mVideoCodec.getInputBuffers();
    mVideoCodecOutputBuffers=mVideoCodec.getOutputBuffers();
    mVideoInfo=new MediaCodec.BufferInfo();
    mVideoInputEos=false;
    mVideoOutputEos=false;
    if (mAudioFormat != null) {
      mAudioCodec=MediaCodec.createDecoderByType(mAudioFormat.getString(MediaFormat.KEY_MIME));
      mAudioCodec.configure(mAudioFormat,null,null,0);
      mAudioCodec.start();
      mAudioCodecInputBuffers=mAudioCodec.getInputBuffers();
      mAudioCodecOutputBuffers=mAudioCodec.getOutputBuffers();
      mAudioInfo=new MediaCodec.BufferInfo();
      mAudioInputEos=false;
      mAudioOutputEos=false;
      mAudioPlayback=new AudioPlayback();
      mAudioPlayback.setAudioSessionId(mAudioSessionId);
      mAudioPlayback.init(mAudioFormat);
      mAudioSessionId=mAudioPlayback.getAudioSessionId();
    }
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_SET_VIDEO_SIZE,getVideoWidth(),getVideoHeight()));
    mBuffering=false;
    boolean preparing=true;
    int frameSkipCount=0;
    long lastPTS=0;
    mTimeBase.startAt(mVideoMinPTS);
    while (!mVideoOutputEos) {
      if (mPaused && !mSeekPrepare && !mSeeking&& !preparing) {
        if (mAudioPlayback != null)         mAudioPlayback.pause();
synchronized (this) {
          while (mPaused && !mSeekPrepare && !mSeeking) {
            this.wait();
          }
        }
        if (mAudioPlayback != null)         mAudioPlayback.play();
        mTimeBase.startAt(mVideoInfo.presentationTimeUs);
      }
      while (mSeekPrepare) {
        mSeekPrepare=false;
        mSeeking=true;
        Log.d(TAG,""String_Node_Str"" + mSeekTargetTime);
        Log.d(TAG,""String_Node_Str"" + mCurrentPosition);
        Log.d(TAG,""String_Node_Str"" + mVideoExtractor.getSampleTime());
        mVideoExtractor.seekTo(mSeekTargetTime,MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
        mCurrentPosition=mSeekTargetTime;
        Log.d(TAG,""String_Node_Str"" + mVideoExtractor.getSampleTime());
        if (mSeekPrepare) {
          continue;
        }
        mVideoCodec.flush();
        if (mAudioFormat != null)         mAudioCodec.flush();
        if (mVideoExtractor.hasTrackFormatChanged()) {
          reinitCodecs();
          mRepresentationChanged=true;
        }
        if (mSeekMode == SeekMode.FAST_EXACT) {
          long in;
          long out;
          do {
            in=mSeekTargetTime;
            out=fastSeek(in);
          }
 while (in != mSeekTargetTime);
          mSeekTargetTime=out;
          mSeekPrepare=false;
        }
      }
      if (!mVideoInputEos && !mRepresentationChanging) {
        queueMediaSampleToCodec(mSeeking);
      }
      lastPTS=mVideoInfo.presentationTimeUs;
      int res=mVideoCodec.dequeueOutputBuffer(mVideoInfo,mTimeOutUs);
      mVideoOutputEos=res >= 0 && (mVideoInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0;
      if (mVideoOutputEos && mRepresentationChanging) {
        reinitCodecs();
        mVideoOutputEos=false;
        mRepresentationChanging=false;
        mRepresentationChanged=true;
      }
 else       if (res >= 0) {
        int outputBufIndex=res;
        boolean render=true;
        if (mSeeking) {
          if (mVideoOutputEos) {
            mSeekTargetTime=mVideoInfo.presentationTimeUs;
          }
          long presentationTimeMs=mVideoInfo.presentationTimeUs / 1000;
          long seekTargetTimeMs=mSeekTargetTime / 1000;
          if ((mSeekMode == SeekMode.PRECISE || mSeekMode == SeekMode.EXACT) && presentationTimeMs < seekTargetTimeMs) {
            render=false;
            if (frameSkipCount == 0) {
              Log.d(TAG,""String_Node_Str"");
            }
            frameSkipCount++;
          }
 else {
            Log.d(TAG,""String_Node_Str"" + mVideoInfo.presentationTimeUs);
            Log.d(TAG,""String_Node_Str"" + frameSkipCount + ""String_Node_Str"");
            frameSkipCount=0;
            if (mSeekMode == SeekMode.EXACT && presentationTimeMs > seekTargetTimeMs) {
              Log.d(TAG,""String_Node_Str"" + lastPTS);
              render=false;
              seekTo(lastPTS);
            }
 else {
              if (presentationTimeMs == seekTargetTimeMs) {
                Log.d(TAG,""String_Node_Str"");
              }
              if (mSeekMode == SeekMode.FAST_EXACT && mVideoInfo.presentationTimeUs < mSeekTargetTime) {
                Log.d(TAG,""String_Node_Str"");
              }
 else {
                mTimeBase.startAt(mVideoInfo.presentationTimeUs);
                mCurrentPosition=mVideoInfo.presentationTimeUs;
                mSeeking=false;
                if (mAudioExtractor != null) {
                  mAudioExtractor.seekTo(mVideoInfo.presentationTimeUs,MediaExtractor.SEEK_TO_CLOSEST_SYNC);
                  mAudioPlayback.flush();
                }
                mEventHandler.sendEmptyMessage(MEDIA_SEEK_COMPLETE);
              }
            }
          }
        }
 else {
          mCurrentPosition=mVideoInfo.presentationTimeUs;
          long waitingTime=mTimeBase.getOffsetFrom(mVideoInfo.presentationTimeUs);
          if (mAudioFormat != null) {
            long audioOffsetUs=mAudioPlayback.getLastPresentationTimeUs() - mCurrentPosition;
            long audioOffsetCorrectionUs=10000;
            if (audioOffsetUs > audioOffsetCorrectionUs) {
              waitingTime-=audioOffsetCorrectionUs;
            }
 else             if (audioOffsetUs < -audioOffsetCorrectionUs) {
              waitingTime+=audioOffsetCorrectionUs;
            }
            mAudioPlayback.setPlaybackSpeed((float)mTimeBase.getSpeed());
          }
          long cachedDuration=mVideoExtractor.getCachedDuration();
          if (cachedDuration != -1) {
            mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_BUFFERING_UPDATE,(int)(100d / mVideoFormat.getLong(MediaFormat.KEY_DURATION) * (mCurrentPosition + cachedDuration)),0));
          }
          if (waitingTime > 5000) {
            Thread.sleep(waitingTime / 1000);
          }
 else           if (!preparing && waitingTime < 0) {
            mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_VIDEO_TRACK_LAGGING,0));
            mTimeBase.startAt(mVideoInfo.presentationTimeUs);
          }
        }
        if (mBuffering) {
          mBuffering=false;
          mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_BUFFERING_END,0));
        }
        if (mRepresentationChanged && render) {
          mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_SET_VIDEO_SIZE,getVideoWidth(),getVideoHeight()));
          mRepresentationChanged=false;
        }
        mVideoCodec.releaseOutputBuffer(outputBufIndex,render);
        if (mAudioFormat != null & mAudioExtractor != null && !mSeeking && !mPaused) {
          long start=SystemClock.elapsedRealtime();
          while (mAudioPlayback.getBufferTimeUs() < 100000) {
            if (queueAudioSampleToCodec(mAudioExtractor)) {
              decodeAudioSample();
            }
 else {
              break;
            }
          }
        }
        if (preparing) {
          mEventHandler.sendEmptyMessage(MEDIA_PREPARED);
          preparing=false;
          mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_INFO,MEDIA_INFO_VIDEO_RENDERING_START,0));
        }
        if (mVideoOutputEos) {
          Log.d(TAG,""String_Node_Str"");
          mEventHandler.sendEmptyMessage(MEDIA_PLAYBACK_COMPLETE);
          mPaused=true;
synchronized (this) {
            if (mAudioPlayback != null)             mAudioPlayback.pause();
            while (mPaused && !mSeeking && !mSeekPrepare) {
              this.wait();
            }
            if (mAudioPlayback != null)             mAudioPlayback.play();
            mVideoInputEos=false;
            mVideoOutputEos=false;
            mAudioInputEos=false;
            mAudioOutputEos=false;
            if (!mSeeking && !mSeekPrepare) {
              seekTo(0);
            }
          }
        }
      }
 else       if (res == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
        mVideoCodecOutputBuffers=mVideoCodec.getOutputBuffers();
        Log.d(TAG,""String_Node_Str"");
      }
 else       if (res == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
        MediaFormat oformat=mVideoCodec.getOutputFormat();
        Log.d(TAG,""String_Node_Str"" + oformat);
      }
 else       if (res == MediaCodec.INFO_TRY_AGAIN_LATER) {
        Log.d(TAG,""String_Node_Str"");
      }
    }
  }
 catch (  InterruptedException e) {
    Log.d(TAG,""String_Node_Str"");
    interrupt();
    if (mIsStopping) {
      mIsStopping=false;
    }
 else {
      mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
    }
  }
catch (  IllegalStateException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,0));
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
    mEventHandler.sendMessage(mEventHandler.obtainMessage(MEDIA_ERROR,MEDIA_ERROR_UNKNOWN,MEDIA_ERROR_IO));
  }
  if (mAudioPlayback != null)   mAudioPlayback.stopAndRelease();
  mVideoCodec.stop();
  mVideoCodec.release();
  if (mAudioFormat != null) {
    mAudioCodec.stop();
    mAudioCodec.release();
  }
  mVideoExtractor.release();
  Log.d(TAG,""String_Node_Str"");
}"
30922,"/** 
 * This method is a VERY UGLY HACK. The QRMarker shaders have their sampler width & height hardcoded as constants, and for the preprocessFragmentShaderCode function to replace them correctly, they need to be known in advance. Passing them in the constructor does not work because the super() call, which in turn calls preprocessFragmentShaderCode, needs to come first, before class variables can be set.
 */
public static void setTextureSizeHack(int width,int height){
  sSamplerWidth=width;
  sSamplerHeight=height;
}","/** 
 * This method is a VERY UGLY HACK. The QRMarker shaders have their sampler width and height hardcoded as constants, and for the preprocessFragmentShaderCode function to replace them correctly, they need to be known in advance. Passing them in the constructor does not work because the super() call, which in turn calls preprocessFragmentShaderCode, needs to come first, before class variables can be set.
 */
public static void setTextureSizeHack(int width,int height){
  sSamplerWidth=width;
  sSamplerHeight=height;
}"
30923,"/** 
 * @see android.widget.VideoView#setVideoURI(android.net.Uri, Map<String, String>)
 * @param uri
 * @param headers
 * @deprecated only for compatibility with Android API
 */
@Deprecated public void setVideoURI(Uri uri,Map<String,String> headers){
  setVideoSource(new UriSource(getContext(),uri,headers));
}","/** 
 * @see android.widget.VideoView#setVideoURI(android.net.Uri,Map)
 * @param uri
 * @param headers
 * @deprecated only for compatibility with Android API
 */
@Deprecated public void setVideoURI(Uri uri,Map<String,String> headers){
  setVideoSource(new UriSource(getContext(),uri,headers));
}"
30924,"/** 
 * @see android.widget.VideoView#setVideoURI(android.net.Uri, Map<String, String>)
 * @param uri
 * @param headers
 * @deprecated only for compatibility with Android API
 */
@Deprecated public void setVideoURI(Uri uri,Map<String,String> headers){
  setVideoSource(new UriSource(getContext(),uri,headers));
}","/** 
 * @see android.widget.VideoView#setVideoURI(android.net.Uri,Map)
 * @param uri
 * @param headers
 * @deprecated only for compatibility with Android API
 */
@Deprecated public void setVideoURI(Uri uri,Map<String,String> headers){
  setVideoSource(new UriSource(getContext(),uri,headers));
}"
30925,"private boolean doMenuActionEffect(MenuItem item){
  if (item.getGroupId() == R.id.action_list_effects) {
    selectEffect(item.getItemId());
    return true;
  }
  return false;
}","private boolean doMenuActionEffect(MenuItem item){
  if (item.getGroupId() == R.id.action_list_effects) {
    return selectEffect(item.getItemId());
  }
  return false;
}"
30926,"public void selectEffect(int index){
  Effect effect=mEffects.get(index);
  if (!GLUtils.HAS_FLOAT_FRAMEBUFFER_SUPPORT && (effect instanceof FlowAbsEffect || effect instanceof FlowAbsSubEffect)) {
    Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 else {
    mSelectedEffect=effect;
    mGLView.selectEffect(index);
  }
}","public boolean selectEffect(int index){
  Effect effect=mEffects.get(index);
  if (!GLUtils.HAS_FLOAT_FRAMEBUFFER_SUPPORT && (effect instanceof FlowAbsEffect || effect instanceof FlowAbsSubEffect)) {
    Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return false;
  }
 else {
    mSelectedEffect=effect;
    mGLView.selectEffect(index);
    return true;
  }
}"
30927,"@Provides @ApplicationScope OkHttpClient provideOkHttpClient(Application app){
  return DataModule.createOkHttpClient(app);
}","@Provides @ApplicationScope OkHttpClient provideOkHttpClient(Application app){
  return DataModule.createOkHttpClient(app).build();
}"
30928,"@Provides @ApplicationScope Picasso providePicasso(Application app,OkHttpClient client){
  return new Picasso.Builder(app).downloader(new OkHttpDownloader(client)).listener(new Picasso.Listener(){
    @Override public void onImageLoadFailed(    Picasso picasso,    Uri uri,    Exception e){
      Timber.e(e,""String_Node_Str"",uri);
    }
  }
).build();
}","@Provides @ApplicationScope Picasso providePicasso(Application app,OkHttpClient client){
  return new Picasso.Builder(app).downloader(new OkHttp3Downloader(client)).listener(new Picasso.Listener(){
    @Override public void onImageLoadFailed(    Picasso picasso,    Uri uri,    Exception e){
      Timber.e(e,""String_Node_Str"",uri);
    }
  }
).build();
}"
30929,"@Provides @ApplicationScope @Named(""String_Node_Str"") OkHttpClient provideApiClient(OkHttpClient client,ApiHeaders apiHeaders){
  client=ApiModule.createApiClient(client,apiHeaders);
  return client;
}","@Provides @ApplicationScope @Named(""String_Node_Str"") OkHttpClient provideApiClient(OkHttpClient client,ApiHeaders apiHeaders){
  return ApiModule.createApiClient(client,apiHeaders).build();
}"
30930,"@Provides @ApplicationScope HttpUrl provideHttpUrl(){
  return HttpUrl.parse(ApiModule.PRODUCTION_API_URL);
}","@Provides @ApplicationScope HttpUrl provideHttpUrl(){
  return HttpUrl.parse(ApiModule.PRODUCTION_API_URL.toString());
}"
30931,"@Override public void colorButton(int id,int bgColor,int tintColor){
  ImageButton buttonView=(ImageButton)findViewById(id);
  GradientDrawable bgShape=(GradientDrawable)buttonView.getBackground();
  bgShape.setColor(bgColor);
}","@Override public void colorButton(int id,int bgColor,int tintColor){
  ImageButton buttonView=(ImageButton)findViewById(id);
  StateListDrawable bg=new StateListDrawable();
  ShapeDrawable normal=new ShapeDrawable(new OvalShape());
  normal.getPaint().setColor(bgColor);
  ShapeDrawable pressed=new ShapeDrawable(new OvalShape());
  pressed.getPaint().setColor(tintColor);
  bg.addState(new int[]{android.R.attr.state_pressed},pressed);
  bg.addState(new int[]{},normal);
  Utils.setBackgroundCompat(buttonView,bg);
}"
30932,"@Override public void setupEnterAnimation(){
  spotlight.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onGlobalLayout(){
      View button=findViewById(R.id.info);
      spotlight.setMaskX(button.getRight() - (button.getWidth() / 2));
      spotlight.setMaskY(button.getBottom() - (button.getHeight() / 2));
      runEnterAnimation();
      Utils.removeOnGlobalLayoutListener(spotlight,this);
    }
  }
);
}","@Override public void setupEnterAnimation(){
  spotlight.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onGlobalLayout(){
      View button=findViewById(R.id.info);
      spotlight.setMaskX(button.getRight() - (button.getWidth() / 2));
      spotlight.setMaskY(button.getBottom() - (button.getHeight() / 2));
      runEnterAnimation();
      Utils.removeOnGlobalLayoutListenerCompat(spotlight,this);
    }
  }
);
}"
30933,"@SuppressWarnings(""String_Node_Str"") @Override public void onGlobalLayout(){
  View button=findViewById(R.id.info);
  spotlight.setMaskX(button.getRight() - (button.getWidth() / 2));
  spotlight.setMaskY(button.getBottom() - (button.getHeight() / 2));
  runEnterAnimation();
  Utils.removeOnGlobalLayoutListener(spotlight,this);
}","@SuppressWarnings(""String_Node_Str"") @Override public void onGlobalLayout(){
  View button=findViewById(R.id.info);
  spotlight.setMaskX(button.getRight() - (button.getWidth() / 2));
  spotlight.setMaskY(button.getBottom() - (button.getHeight() / 2));
  runEnterAnimation();
  Utils.removeOnGlobalLayoutListenerCompat(spotlight,this);
}"
30934,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  getSupportActionBar().setHomeButtonEnabled(false);
  final View parent=findViewById(R.id.parent);
  parent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      Utils.removeOnGlobalLayoutListener(parent,this);
      setImageBitmap((ImageView)findViewById(R.id.card_photo_1).findViewById(R.id.photo),R.drawable.photo1);
      setImageBitmap((ImageView)findViewById(R.id.card_photo_2).findViewById(R.id.photo),R.drawable.photo2);
      setImageBitmap((ImageView)findViewById(R.id.card_photo_3).findViewById(R.id.photo),R.drawable.photo3);
      setImageBitmap((ImageView)findViewById(R.id.card_photo_4).findViewById(R.id.photo),R.drawable.photo4);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  getSupportActionBar().setHomeButtonEnabled(false);
  final View parent=findViewById(R.id.parent);
  parent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      Utils.removeOnGlobalLayoutListenerCompat(parent,this);
      setImageBitmap((ImageView)findViewById(R.id.card_photo_1).findViewById(R.id.photo),R.drawable.photo1);
      setImageBitmap((ImageView)findViewById(R.id.card_photo_2).findViewById(R.id.photo),R.drawable.photo2);
      setImageBitmap((ImageView)findViewById(R.id.card_photo_3).findViewById(R.id.photo),R.drawable.photo3);
      setImageBitmap((ImageView)findViewById(R.id.card_photo_4).findViewById(R.id.photo),R.drawable.photo4);
    }
  }
);
}"
30935,"@Override public void onGlobalLayout(){
  Utils.removeOnGlobalLayoutListener(parent,this);
  setImageBitmap((ImageView)findViewById(R.id.card_photo_1).findViewById(R.id.photo),R.drawable.photo1);
  setImageBitmap((ImageView)findViewById(R.id.card_photo_2).findViewById(R.id.photo),R.drawable.photo2);
  setImageBitmap((ImageView)findViewById(R.id.card_photo_3).findViewById(R.id.photo),R.drawable.photo3);
  setImageBitmap((ImageView)findViewById(R.id.card_photo_4).findViewById(R.id.photo),R.drawable.photo4);
}","@Override public void onGlobalLayout(){
  Utils.removeOnGlobalLayoutListenerCompat(parent,this);
  setImageBitmap((ImageView)findViewById(R.id.card_photo_1).findViewById(R.id.photo),R.drawable.photo1);
  setImageBitmap((ImageView)findViewById(R.id.card_photo_2).findViewById(R.id.photo),R.drawable.photo2);
  setImageBitmap((ImageView)findViewById(R.id.card_photo_3).findViewById(R.id.photo),R.drawable.photo3);
  setImageBitmap((ImageView)findViewById(R.id.card_photo_4).findViewById(R.id.photo),R.drawable.photo4);
}"
30936,"@SuppressWarnings(""String_Node_Str"") @Override public void onGlobalLayout(){
  createShader();
  setMaskScale(1.0f);
  if (mCallback != null) {
    mCallback.onSetupAnimation(SpotlightView.this);
  }
  Utils.removeOnGlobalLayoutListener(SpotlightView.this,this);
}","@SuppressWarnings(""String_Node_Str"") @Override public void onGlobalLayout(){
  createShader();
  setMaskScale(1.0f);
  if (mCallback != null) {
    mCallback.onSetupAnimation(SpotlightView.this);
  }
  Utils.removeOnGlobalLayoutListenerCompat(SpotlightView.this,this);
}"
30937,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onGlobalLayout(){
      createShader();
      setMaskScale(1.0f);
      if (mCallback != null) {
        mCallback.onSetupAnimation(SpotlightView.this);
      }
      Utils.removeOnGlobalLayoutListener(SpotlightView.this,this);
    }
  }
);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void onGlobalLayout(){
      createShader();
      setMaskScale(1.0f);
      if (mCallback != null) {
        mCallback.onSetupAnimation(SpotlightView.this);
      }
      Utils.removeOnGlobalLayoutListenerCompat(SpotlightView.this,this);
    }
  }
);
}"
30938,"public String infoClass(int id){
  Course course=courses.get(id);
  if (course == null) {
    return ""String_Node_Str"" + id + ""String_Node_Str"";
  }
  if (course.students.isEmpty()) {
    return ""String_Node_Str"" + id + ""String_Node_Str"";
  }
  StringBuilder studList=new StringBuilder();
  for (  Integer student : course.students) {
    studList.append(student + ""String_Node_Str"");
  }
  studList.deleteCharAt(studList.length() - 1);
  return ""String_Node_Str"" + id + ""String_Node_Str""+ studList.toString();
}","public static String infoClass(int id){
  Course course=courses.get(id);
  if (course == null) {
    return ""String_Node_Str"" + id + ""String_Node_Str"";
  }
  if (course.students.isEmpty()) {
    return ""String_Node_Str"" + id + ""String_Node_Str"";
  }
  StringBuilder studList=new StringBuilder();
  for (  Integer student : course.students) {
    studList.append(student + ""String_Node_Str"");
  }
  studList.deleteCharAt(studList.length() - 1);
  return ""String_Node_Str"" + id + ""String_Node_Str""+ studList.toString();
}"
30939,"public String addStudent(int id,int capacity,int start,int end){
  if (students.containsKey(id)) {
    return ""String_Node_Str"" + id;
  }
  Student student=new Student();
  HashSet<Integer> timeSlots=student.timeSlots;
  for (int i=start; i <= end; i++) {
    timeSlots.add(i);
  }
  return ""String_Node_Str"" + id;
}","public static String addStudent(int id,int capacity,int start,int end){
  if (students.containsKey(id)) {
    return ""String_Node_Str"" + id;
  }
  Student student=new Student(capacity,start,end);
  students.put(id,student);
  return ""String_Node_Str"" + id;
}"
30940,"public String unenrollStudent(int studentId,int classId){
  String errorString=""String_Node_Str"" + studentId + ""String_Node_Str""+ classId+ ""String_Node_Str"";
  if (!students.containsKey(studentId) || !courses.containsKey(classId)) {
    return errorString;
  }
  Student student=students.get(studentId);
  Course course=courses.get(classId);
  if (!student.courses.contains(classId)) {
    student.courses.remove(classId);
    student.timeSlots.add(course.time);
    course.students.remove(studentId);
    course.remainCapacity++;
  }
  return ""String_Node_Str"" + classId + ""String_Node_Str""+ course.remainCapacity;
}","public String unenrollStudent(int studentId,int classId){
  String errorString=""String_Node_Str"" + studentId + ""String_Node_Str""+ classId+ ""String_Node_Str"";
  if (!students.containsKey(studentId) || !courses.containsKey(classId)) {
    return errorString;
  }
  Student student=students.get(studentId);
  Course course=courses.get(classId);
  if (student.courses.contains(classId)) {
    student.courses.remove(classId);
    student.takeTimeSlots.remove(course.time);
    student.capacity++;
    course.students.remove(studentId);
    course.remainCapacity++;
  }
 else {
    return errorString;
  }
  return ""String_Node_Str"" + classId + ""String_Node_Str""+ course.remainCapacity;
}"
30941,"public String infoStudent(int id){
  if (!students.containsKey(id)) {
    return ""String_Node_Str"" + id + ""String_Node_Str"";
  }
  Student student=students.get(id);
  StringBuilder courseList=new StringBuilder();
  for (  Integer courseId : student.courses) {
    courseList.append(courseId + ""String_Node_Str"");
  }
  courseList.deleteCharAt(courseList.length() - 1);
  return ""String_Node_Str"" + id + ""String_Node_Str""+ courseList.toString();
}","public static String infoStudent(int id){
  if (!students.containsKey(id)) {
    return ""String_Node_Str"" + id + ""String_Node_Str"";
  }
  Student student=students.get(id);
  StringBuilder courseList=new StringBuilder();
  for (  Integer courseId : student.courses) {
    courseList.append(courseId + ""String_Node_Str"");
  }
  if (courseList.length() == 0) {
    return ""String_Node_Str"" + id + ""String_Node_Str"";
  }
  courseList.deleteCharAt(courseList.length() - 1);
  return ""String_Node_Str"" + id + ""String_Node_Str""+ courseList.toString();
}"
30942,"public String removeClass(int id){
  if (!courses.containsKey(id)) {
    return ""String_Node_Str"" + id;
  }
  Course course=courses.get(id);
  for (  Integer stuId : course.students) {
    Student student=students.get(stuId);
    if (student != null) {
      student.courses.remove(id);
      student.timeSlots.remove(course.time);
    }
  }
  courses.remove(id);
  return ""String_Node_Str"" + id;
}","public static String removeClass(int id){
  if (!courses.containsKey(id)) {
    return ""String_Node_Str"" + id;
  }
  Course course=courses.get(id);
  for (  Integer stuId : course.students) {
    Student student=students.get(stuId);
    if (student != null) {
      student.courses.remove(id);
      student.takeTimeSlots.remove(course.time);
      student.capacity++;
    }
  }
  courses.remove(id);
  return ""String_Node_Str"" + id;
}"
30943,"public String removeStudent(int id){
  if (!students.containsKey(id)) {
    return ""String_Node_Str"" + id;
  }
  Student student=students.get(id);
  for (  Integer courseId : student.courses) {
    Course course=courses.get(courseId);
    if (course != null) {
      course.students.remove(id);
      course.remainCapacity++;
    }
  }
  students.remove(id);
  return ""String_Node_Str"" + id;
}","public static String removeStudent(int id){
  if (!students.containsKey(id)) {
    return ""String_Node_Str"" + id;
  }
  Student student=students.get(id);
  for (  Integer courseId : student.courses) {
    Course course=courses.get(courseId);
    if (course != null) {
      course.students.remove(id);
      course.remainCapacity++;
    }
  }
  students.remove(id);
  return ""String_Node_Str"" + id;
}"
30944,"public Student(){
  super();
}","public Student(int capacity,int startTime,int endTime){
  super();
  this.capacity=capacity;
  this.startTime=startTime;
  this.endTime=endTime;
}"
30945,"public String enrollStudent(int studentId,int classId){
  String errorString=""String_Node_Str"" + studentId + ""String_Node_Str""+ classId+ ""String_Node_Str"";
  if (!students.containsKey(studentId) || !courses.containsKey(classId)) {
    return errorString;
  }
  Student student=students.get(studentId);
  Course course=courses.get(classId);
  if (student.courses.contains(classId) || student.timeSlots.size() == 0 || course.remainCapacity <= 0 || !student.timeSlots.contains(course.time)) {
    return errorString;
  }
  course.remainCapacity--;
  student.timeSlots.remove(course.time);
  return ""String_Node_Str"" + classId + ""String_Node_Str""+ course.remainCapacity;
}","public static String enrollStudent(int studentId,int classId){
  String errorString=""String_Node_Str"" + studentId + ""String_Node_Str""+ classId+ ""String_Node_Str"";
  if (!students.containsKey(studentId) || !courses.containsKey(classId)) {
    return errorString;
  }
  Student student=students.get(studentId);
  Course course=courses.get(classId);
  if (course.remainCapacity <= 0) {
    return ""String_Node_Str"" + classId + ""String_Node_Str"";
  }
  if (student.courses.contains(classId) || student.capacity == 0 || student.takeTimeSlots.contains(course.time) || (course.time < student.startTime && course.time > student.endTime)) {
    return errorString;
  }
  course.remainCapacity--;
  course.students.add(studentId);
  student.takeTimeSlots.add(course.time);
  student.courses.add(classId);
  student.capacity--;
  return ""String_Node_Str"" + classId + ""String_Node_Str""+ course.remainCapacity;
}"
30946,"public static ArrayList<Integer> findEqual(int[] input){
  ArrayList<Integer> ret=new ArrayList<Integer>();
  int l=0;
  int r=input.length - 1;
  while (l < r - 1) {
    int mid=l + (r - l) / 2;
    if (input[mid] >= mid) {
      r=mid;
    }
 else {
      l=mid;
    }
  }
  int leftBound=l == input[l] ? l : r;
  l=0;
  r=input.length - 1;
  while (l < r - 1) {
    int mid=l + (r - l) / 2;
    if (input[mid] <= mid) {
      l=mid;
    }
 else {
      r=mid;
    }
  }
  int rightBound=r == input[l] ? r : l;
  for (int i=leftBound; i <= rightBound; i++) {
    ret.add(i);
  }
  return ret;
}","public static ArrayList<Integer> findEqual(int[] input){
  ArrayList<Integer> ret=new ArrayList<Integer>();
  int l=0;
  int r=input.length - 1;
  while (l < r - 1) {
    int mid=l + (r - l) / 2;
    if (input[mid] >= mid) {
      r=mid;
    }
 else {
      l=mid;
    }
  }
  int leftBound=l == input[l] ? l : r;
  l=0;
  r=input.length - 1;
  while (l < r - 1) {
    int mid=l + (r - l) / 2;
    if (input[mid] <= mid) {
      l=mid;
    }
 else {
      r=mid;
    }
  }
  int rightBound=r == input[r] ? r : l;
  for (int i=leftBound; i <= rightBound; i++) {
    ret.add(i);
  }
  return ret;
}"
30947,"public static void main(String[] str){
  int[] input={-4,-3,-2,-1,3,4,6,7,9,10,11,12};
  System.out.println(findEqual(input));
}","public static void main(String[] str){
  int[] input={-4,-3,-2,-1,3,4,6,7,9,10,11,12};
  System.out.println(findEqual(input));
  int[] input2={-4,-3,-2,-1,3,4,6,7,8,9,10,11};
  System.out.println(findEqual(input2));
}"
30948,"private void setupBitcoinSyncNotification(){
  balance.setStyle(""String_Node_Str"");
  TorClient torClient=Main.bitcoin.getPeers().getTorClient();
  if (torClient != null) {
    SimpleDoubleProperty torProgress=new SimpleDoubleProperty(-1);
    String torMsg=tr(""String_Node_Str"");
    syncItem=Main.instance.notificationBar.displayNewItem(torMsg,torProgress);
    torClient.addInitializationListener(new TorInitializationListener(){
      @Override public void initializationProgress(      String message,      int percent){
        Platform.runLater(() -> {
          syncItem.label.set(torMsg + ""String_Node_Str"" + message);
          torProgress.set(percent / 100.0);
        }
);
      }
      @Override public void initializationCompleted(){
        Platform.runLater(() -> {
          syncItem.cancel();
          showBitcoinSyncMessage();
        }
);
      }
    }
);
  }
  bitcoinUIModel.syncProgressProperty().addListener(x -> {
    double progress=bitcoinUIModel.syncProgressProperty().get();
    if (progress >= 1.0) {
      if (syncItem != null) {
        GuiUtils.runOnGuiThreadAfter(500,() -> {
          syncItem.cancel();
          syncItem=null;
          balance.setStyle(""String_Node_Str"");
        }
);
      }
    }
 else     if (syncItem == null && progress < 1.0) {
      showBitcoinSyncMessage();
    }
  }
);
}","private void setupBitcoinSyncNotification(){
  balance.setStyle(""String_Node_Str"");
  TorClient torClient=Main.bitcoin.getPeers().getTorClient();
  if (torClient != null) {
    SimpleDoubleProperty torProgress=new SimpleDoubleProperty(-1);
    String torMsg=tr(""String_Node_Str"");
    syncItem=Main.instance.notificationBar.displayNewItem(torMsg,torProgress);
    torClient.addInitializationListener(new TorInitializationListener(){
      @Override public void initializationProgress(      String message,      int percent){
        Platform.runLater(() -> {
          syncItem.label.set(torMsg + ""String_Node_Str"" + message);
          torProgress.set(percent / 100.0);
        }
);
      }
      @Override public void initializationCompleted(){
        Platform.runLater(() -> {
          syncItem.cancel();
          showBitcoinSyncMessage();
        }
);
      }
    }
);
  }
  bitcoinUIModel.syncProgressProperty().addListener(x -> {
    double progress=bitcoinUIModel.syncProgressProperty().get();
    if (progress >= 1.0) {
      if (syncItem != null) {
        GuiUtils.runOnGuiThreadAfter(500,() -> {
          syncItem.cancel();
          syncItem=null;
          balance.setStyle(""String_Node_Str"");
        }
);
      }
    }
 else     if (syncItem == null && progress > 0.0 && progress < 1.0) {
      showBitcoinSyncMessage();
    }
  }
);
}"
30949,"@SuppressWarnings(""String_Node_Str"") @Override public void deserializeWalletExtension(Wallet containingWallet,byte[] data) throws Exception {
  wallet=(PledgingWallet)containingWallet;
  LHWalletProtos.Extension ext=LHWalletProtos.Extension.parseFrom(data);
  log.info(""String_Node_Str"",ext.getPledgesCount());
  Map<TransactionOutput,LHProtos.Pledge> contractOuts=new HashMap<>();
  for (  LHProtos.Pledge pledge : ext.getPledgesList()) {
    final List<ByteString> txns=pledge.getTransactionsList();
    Transaction tx=new Transaction(wallet.params,txns.get(txns.size() - 1).toByteArray());
    if (tx.getInputs().size() != 1) {
      log.error(""String_Node_Str"",tx);
      continue;
    }
    final TransactionOutPoint op=tx.getInput(0).getOutpoint();
    final Transaction transaction=wallet.transactions.get(op.getHash());
    checkNotNull(transaction);
    TransactionOutput output=transaction.getOutput((int)op.getIndex());
    checkNotNull(output);
    contractOuts.put(tx.getOutput(0),pledge);
    log.info(""String_Node_Str"",LHUtils.hashFromPledge(pledge));
    wallet.pledges.put(output,pledge);
  }
  for (  LHProtos.Project project : ext.getProjectsList()) {
    Project p=new Project(project);
    LHProtos.Pledge pledgeForProject=contractOuts.get(p.getOutputs().get(0));
    wallet.projects.put(p,pledgeForProject);
  }
  for (  LHProtos.Pledge pledge : ext.getRevokedPledgesList()) {
    wallet.revokedPledges.put(hashFromPledge(pledge),pledge);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void deserializeWalletExtension(Wallet containingWallet,byte[] data) throws Exception {
  wallet=(PledgingWallet)containingWallet;
  LHWalletProtos.Extension ext=LHWalletProtos.Extension.parseFrom(data);
  log.info(""String_Node_Str"",ext.getPledgesCount());
  Map<TransactionOutput,LHProtos.Pledge> contractOuts=new HashMap<>();
  for (  LHProtos.Pledge pledge : ext.getPledgesList()) {
    final List<ByteString> txns=pledge.getTransactionsList();
    Transaction pledgeTx=new Transaction(wallet.params,txns.get(txns.size() - 1).toByteArray());
    if (pledgeTx.getInputs().size() != 1) {
      log.error(""String_Node_Str"",pledgeTx);
      continue;
    }
    final TransactionOutPoint op=pledgeTx.getInput(0).getOutpoint();
    final Transaction transaction=wallet.transactions.get(op.getHash());
    checkNotNull(transaction);
    TransactionOutput output=transaction.getOutput((int)op.getIndex());
    checkNotNull(output);
    contractOuts.put(pledgeTx.getOutput(0).duplicateDetached(),pledge);
    log.info(""String_Node_Str"",LHUtils.hashFromPledge(pledge));
    wallet.pledges.put(output,pledge);
  }
  for (  LHProtos.Project project : ext.getProjectsList()) {
    Project p=new Project(project);
    TransactionOutput output=p.getOutputs().get(0).duplicateDetached();
    LHProtos.Pledge pledgeForProject=contractOuts.get(output);
    wallet.projects.put(p,pledgeForProject);
  }
  for (  LHProtos.Pledge pledge : ext.getRevokedPledgesList()) {
    wallet.revokedPledges.put(hashFromPledge(pledge),pledge);
  }
}"
30950,"private PledgingWallet roundtripWallet(PledgingWallet wallet) throws UnreadableWalletException {
  final Protos.Wallet proto=wallet.serialize();
  System.err.println(proto);
  return PledgingWallet.deserialize(proto);
}","private PledgingWallet roundtripWallet(PledgingWallet wallet) throws UnreadableWalletException {
  return PledgingWallet.deserialize(wallet.serialize());
}"
30951,"@FXML public void saveClicked(){
  Platform.runLater(() -> {
    boolean savingPledge=pledge != null;
    log.info(""String_Node_Str"",savingPledge ? ""String_Node_Str"" : ""String_Node_Str"");
    FileChooser chooser=new FileChooser();
    chooser.setTitle(savingPledge ? tr(""String_Node_Str"") : tr(""String_Node_Str""));
    chooser.setInitialFileName(getFileName());
    GuiUtils.platformFiddleChooser(chooser);
    File file=chooser.showSaveDialog(Main.instance.mainStage);
    if (file == null) {
      log.info(""String_Node_Str"");
      return;
    }
    Message data=savingPledge ? pledge.getData() : project.getProto();
    log.info(""String_Node_Str"",pledge != null ? ""String_Node_Str"" : ""String_Node_Str"",file);
    try (OutputStream outputStream=new FileOutputStream(file)){
      data.writeTo(outputStream);
      if (savingPledge) {
        pledge.commit(true);
      }
 else       if (!maybeShowServerGuidance())       overlayUI.done();
    }
 catch (    IOException e) {
      GuiUtils.informationalAlert(tr(""String_Node_Str""),e.getLocalizedMessage());
    }
  }
);
}","@FXML public void saveClicked(){
  Platform.runLater(() -> {
    boolean savingPledge=pledge != null;
    log.info(""String_Node_Str"",savingPledge ? ""String_Node_Str"" : ""String_Node_Str"");
    FileChooser chooser=new FileChooser();
    chooser.setTitle(savingPledge ? tr(""String_Node_Str"") : tr(""String_Node_Str""));
    chooser.setInitialFileName(getFileName());
    GuiUtils.platformFiddleChooser(chooser);
    File file=chooser.showSaveDialog(Main.instance.mainStage);
    if (file == null) {
      log.info(""String_Node_Str"");
      return;
    }
    Message data=savingPledge ? pledge.getData() : project.getProto();
    log.info(""String_Node_Str"",pledge != null ? ""String_Node_Str"" : ""String_Node_Str"",file);
    try (OutputStream outputStream=new FileOutputStream(file)){
      data.writeTo(outputStream);
      if (savingPledge) {
        pledge.commit(true);
      }
 else       if (maybeShowServerGuidance()) {
        return;
      }
      overlayUI.done();
    }
 catch (    IOException e) {
      GuiUtils.informationalAlert(tr(""String_Node_Str""),e.getLocalizedMessage());
    }
  }
);
}"
30952,"private void revoke(@Nullable KeyParameter aesKey){
  try {
    PledgingWallet.Revocation revocation=Main.wallet.revokePledge(pledgeToRevoke,aesKey);
    progressBar.setProgress(-1);
    revocation.tx.getConfidence().addEventListener((conf,reason) -> {
      progressBar.setProgress(conf.numBroadcastPeers() / (double)Main.bitcoin.peerGroup().getMinBroadcastConnections());
    }
,Platform::runLater);
    Futures.addCallback(revocation.broadcastFuture,new FutureCallback<Transaction>(){
      @Override public void onSuccess(      @Nullable Transaction result){
        onSuccess.run();
        overlayUI.done();
      }
      @Override public void onFailure(      Throwable t){
        CrashWindow.open(t);
        overlayUI.done();
      }
    }
,Platform::runLater);
  }
 catch (  InsufficientMoneyException e) {
    log.error(""String_Node_Str"",e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  }
}","private void revoke(@Nullable KeyParameter aesKey){
  try {
    PledgingWallet.Revocation revocation=Main.wallet.revokePledge(pledgeToRevoke,aesKey);
    progressBar.setProgress(-1);
    revocation.broadcast.setProgressCallback(progressBar::setProgress,Platform::runLater);
    Futures.addCallback(revocation.broadcast.future(),new FutureCallback<Transaction>(){
      @Override public void onSuccess(      @Nullable Transaction result){
        onSuccess.run();
        overlayUI.done();
      }
      @Override public void onFailure(      Throwable t){
        informationalAlert(""String_Node_Str"",""String_Node_Str"",t);
        log.error(""String_Node_Str"",t);
        overlayUI.done();
      }
    }
,Platform::runLater);
  }
 catch (  InsufficientMoneyException e) {
    log.error(""String_Node_Str"",e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  }
}"
30953,"@Override public void onFailure(Throwable t){
  CrashWindow.open(t);
  overlayUI.done();
}","@Override public void onFailure(Throwable t){
  informationalAlert(""String_Node_Str"",""String_Node_Str"",t);
  log.error(""String_Node_Str"",t);
  overlayUI.done();
}"
30954,"private void broadcastClaim(Set<LHProtos.Pledge> pledges,@Nullable KeyParameter key){
  try {
    PledgingWallet.CompletionProgress progress=Main.wallet.completeContractWithFee(projectToClaim,pledges,key);
    double total=Main.bitcoin.peerGroup().getMinBroadcastConnections();
    progress.peersSeen=seen -> {
      if (seen == -1) {
        Platform.runLater(onSuccess::run);
      }
 else {
        progressBar.setProgress(seen / total);
      }
    }
;
    progress.txFuture.handleAsync((t,ex) -> {
      if (ex != null) {
        informationalAlert(""String_Node_Str"",""String_Node_Str"",ex);
      }
 else {
        onSuccess.run();
      }
      overlayUI.done();
      return null;
    }
,Platform::runLater);
  }
 catch (  Ex.ValueMismatch e) {
    log.error(""String_Node_Str"" + e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",Coin.valueOf(e.byAmount).toFriendlyString());
    overlayUI.done();
  }
catch (  InsufficientMoneyException e) {
    log.error(""String_Node_Str"",e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
    overlayUI.done();
  }
}","private void broadcastClaim(Set<LHProtos.Pledge> pledges,@Nullable KeyParameter key){
  try {
    Main.wallet.completeContractWithFee(projectToClaim,pledges,key,(val) -> {
      progressBar.setProgress(val);
      if (val >= 1.0)       overlayUI.done();
    }
,(ex) -> {
      overlayUI.done();
      informationalAlert(""String_Node_Str"",""String_Node_Str"",ex);
    }
,Platform::runLater);
  }
 catch (  Ex.ValueMismatch e) {
    log.error(""String_Node_Str"" + e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",Coin.valueOf(e.byAmount).toFriendlyString());
    overlayUI.done();
  }
catch (  InsufficientMoneyException e) {
    log.error(""String_Node_Str"",e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
    overlayUI.done();
  }
}"
30955,"private boolean checkClaimConfidence(Transaction transaction,TransactionConfidence conf,Project project){
  executor.checkOnThread();
switch (conf.getConfidenceType()) {
case PENDING:
    int seenBy=conf.numBroadcastPeers();
  int minBroadcastConnections=regularP2P.getMinBroadcastConnections();
log.info(""String_Node_Str"",seenBy,minBroadcastConnections);
if (seenBy < minBroadcastConnections) break;
case BUILDING:
if (conf.getDepthInBlocks() > 3) return true;
if (diskManager.getProjectState(project).state != ProjectState.CLAIMED) {
log.info(""String_Node_Str"");
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,transaction.getHash()));
}
break;
case DEAD:
log.warn(""String_Node_Str"",conf.getOverridingTransaction());
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.ERROR,null));
break;
case UNKNOWN:
break;
}
return false;
}","private boolean checkClaimConfidence(Transaction transaction,TransactionConfidence conf,Project project){
  executor.checkOnThread();
switch (conf.getConfidenceType()) {
case PENDING:
    int seenBy=conf.numBroadcastPeers();
  int numConnected=regularP2P.getConnectedPeers().size();
int numToBroadcastTo=(int)Math.max(1,Math.round(Math.ceil(numConnected / 2.0)));
int numWaitingFor=(int)Math.ceil((numConnected - numToBroadcastTo) / 2.0);
log.info(""String_Node_Str"",seenBy,numWaitingFor);
if (seenBy < numWaitingFor) break;
case BUILDING:
if (conf.getDepthInBlocks() > 3) return true;
if (diskManager.getProjectState(project).state != ProjectState.CLAIMED) {
log.info(""String_Node_Str"");
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,transaction.getHash()));
}
break;
case DEAD:
log.warn(""String_Node_Str"",conf.getOverridingTransaction());
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.ERROR,null));
break;
case UNKNOWN:
break;
}
return false;
}"
30956,"private CompletableFuture<LHProtos.Pledge> broadcastDependenciesOf(LHProtos.Pledge pledge){
  checkArgument(pledge.getTransactionsCount() > 1);
  CompletableFuture<LHProtos.Pledge> result=new CompletableFuture<>();
  log.info(""String_Node_Str"",pledge.getTransactionsCount() - 1);
  executor.executeASAP(() -> {
    try {
      List<ByteString> txnBytes=pledge.getTransactionsList().subList(0,pledge.getTransactionsCount() - 1);
      if (txnBytes.size() > 5) {
        log.error(""String_Node_Str"");
        result.completeExceptionally(new Ex.TooManyDependencies(txnBytes.size()));
      }
 else {
        log.info(""String_Node_Str"",txnBytes.size());
        for (        ByteString txnByte : txnBytes) {
          Transaction tx=new Transaction(wallet.getParams(),txnByte.toByteArray());
          log.info(""String_Node_Str"",tx.getHash());
          regularP2P.broadcastTransaction(tx).get(30,TimeUnit.SECONDS);
        }
        result.complete(pledge);
      }
    }
 catch (    InterruptedException|TimeoutException|ExecutionException|ProtocolException e) {
      result.completeExceptionally(e);
    }
  }
);
  return result;
}","private CompletableFuture<LHProtos.Pledge> broadcastDependenciesOf(LHProtos.Pledge pledge){
  checkArgument(pledge.getTransactionsCount() > 1);
  CompletableFuture<LHProtos.Pledge> result=new CompletableFuture<>();
  log.info(""String_Node_Str"",pledge.getTransactionsCount() - 1);
  executor.executeASAP(() -> {
    try {
      List<ByteString> txnBytes=pledge.getTransactionsList().subList(0,pledge.getTransactionsCount() - 1);
      if (txnBytes.size() > 5) {
        log.error(""String_Node_Str"");
        result.completeExceptionally(new Ex.TooManyDependencies(txnBytes.size()));
      }
 else {
        log.info(""String_Node_Str"",txnBytes.size());
        for (        ByteString txnByte : txnBytes) {
          Transaction tx=new Transaction(wallet.getParams(),txnByte.toByteArray());
          log.info(""String_Node_Str"",tx.getHash());
          regularP2P.broadcastTransaction(tx).future().get(30,TimeUnit.SECONDS);
        }
        result.complete(pledge);
      }
    }
 catch (    InterruptedException|TimeoutException|ExecutionException|ProtocolException e) {
      result.completeExceptionally(e);
    }
  }
);
  return result;
}"
30957,"@Override public void onFailure(Throwable t){
  log.error(""String_Node_Str"",t);
}","@Override public void onFailure(Throwable t){
  log.error(""String_Node_Str"",t);
  callbackExecutor.execute(() -> error.accept(t));
}"
30958,"public Revocation(ListenableFuture<Transaction> broadcastFuture,Transaction tx){
  this.broadcastFuture=broadcastFuture;
  this.tx=tx;
}","public Revocation(TransactionBroadcast broadcast,Transaction tx){
  this.broadcast=broadcast;
  this.tx=tx;
}"
30959,"/** 
 * Given a pledge protobuf, double spends the stub so the pledge can no longer be claimed. The pledge is removed from the wallet once the double spend propagates successfully.
 * @throws org.bitcoinj.core.InsufficientMoneyException if we can't afford to revoke.
 */
public Revocation revokePledge(LHProtos.Pledge proto,@Nullable KeyParameter aesKey) throws InsufficientMoneyException {
  TransactionOutput stub;
synchronized (this) {
    stub=pledges.inverse().get(proto);
  }
  checkArgument(stub != null,""String_Node_Str"",proto);
  Transaction revocation=new Transaction(params);
  revocation.addInput(stub);
  revocation.addOutput(stub.getValue().subtract(Transaction.REFERENCE_DEFAULT_MIN_TX_FEE),freshReceiveKey().toAddress(params));
  SendRequest request=SendRequest.forTx(revocation);
  request.aesKey=aesKey;
  completeTx(request);
synchronized (this) {
    revokeInProgress.add(request.tx);
  }
  log.info(""String_Node_Str"",stub.getValue());
  log.info(""String_Node_Str"",stub);
  log.info(""String_Node_Str"",revocation);
  final ListenableFuture<Transaction> future=vTransactionBroadcaster.broadcastTransaction(revocation);
  Futures.addCallback(future,new FutureCallback<Transaction>(){
    @Override public void onSuccess(    @Nullable Transaction result){
      log.info(""String_Node_Str"",hashFromPledge(proto));
      log.info(""String_Node_Str"",proto.getTransactionsCount());
      updateForRevoke(result,proto,stub);
      saveNow();
      for (      ListenerRegistration<OnRevokeHandler> handler : onRevokeHandlers) {
        handler.executor.execute(() -> handler.listener.onRevoke(proto));
      }
      lock.lock();
      try {
        maybeQueueOnWalletChanged();
      }
  finally {
        lock.unlock();
      }
    }
    @Override public void onFailure(    Throwable t){
      log.error(""String_Node_Str"",t);
    }
  }
);
  return new Revocation(future,revocation);
}","/** 
 * Given a pledge protobuf, double spends the stub so the pledge can no longer be claimed. The pledge is removed from the wallet once the double spend propagates successfully.
 * @throws org.bitcoinj.core.InsufficientMoneyException if we can't afford to revoke.
 */
public Revocation revokePledge(LHProtos.Pledge proto,@Nullable KeyParameter aesKey) throws InsufficientMoneyException {
  TransactionOutput stub;
synchronized (this) {
    stub=pledges.inverse().get(proto);
  }
  checkArgument(stub != null,""String_Node_Str"",proto);
  Transaction revocation=new Transaction(params);
  revocation.addInput(stub);
  revocation.addOutput(stub.getValue().subtract(Transaction.REFERENCE_DEFAULT_MIN_TX_FEE),freshReceiveKey().toAddress(params));
  SendRequest request=SendRequest.forTx(revocation);
  request.aesKey=aesKey;
  completeTx(request);
synchronized (this) {
    revokeInProgress.add(request.tx);
  }
  log.info(""String_Node_Str"",stub.getValue());
  log.info(""String_Node_Str"",stub);
  log.info(""String_Node_Str"",revocation);
  TransactionBroadcast broadcast=vTransactionBroadcaster.broadcastTransaction(revocation);
  Futures.addCallback(broadcast.future(),new FutureCallback<Transaction>(){
    @Override public void onSuccess(    @Nullable Transaction result){
      log.info(""String_Node_Str"",hashFromPledge(proto));
      log.info(""String_Node_Str"",proto.getTransactionsCount());
      updateForRevoke(result,proto,stub);
      saveNow();
      for (      ListenerRegistration<OnRevokeHandler> handler : onRevokeHandlers) {
        handler.executor.execute(() -> handler.listener.onRevoke(proto));
      }
      lock.lock();
      try {
        maybeQueueOnWalletChanged();
      }
  finally {
        lock.unlock();
      }
    }
    @Override public void onFailure(    Throwable t){
      log.error(""String_Node_Str"",t);
    }
  }
);
  return new Revocation(broadcast,revocation);
}"
30960,"/** 
 * Runs completeContract to get a feeless contract, then attaches an extra input of size MIN_FEE, potentially creating and broadcasting a tx to create an output of the right size first (as we cannot add change outputs to an assurance contract). The returned future completes once both dependency and contract are broadcast OK.
 */
public CompletionProgress completeContractWithFee(Project project,Set<LHProtos.Pledge> pledges,@Nullable KeyParameter aesKey) throws InsufficientMoneyException {
  final Coin feeSize=Transaction.REFERENCE_DEFAULT_MIN_TX_FEE.multiply(2);
  log.info(""String_Node_Str"");
  CompletionProgress progress=new CompletionProgress();
  TransactionConfidence.Listener broadcastListener=new TransactionConfidence.Listener(){
    private Set<PeerAddress> addrs=new HashSet<>();
    @Override public void onConfidenceChanged(    TransactionConfidence conf,    ChangeReason reason){
      if (reason == TransactionConfidence.Listener.ChangeReason.SEEN_PEERS) {
        addrs.addAll(Sets.newHashSet(conf.getBroadcastBy()));
        progress.setPeersSeen(addrs.size());
      }
 else       if (reason == ChangeReason.TYPE) {
        progress.setPeersSeen(-1);
      }
    }
  }
;
  Transaction contract=project.completeContract(pledges);
  Wallet.SendRequest request=Wallet.SendRequest.to(freshReceiveKey().toAddress(params),feeSize);
  request.aesKey=aesKey;
  Wallet.SendResult result=sendCoins(vTransactionBroadcaster,request);
  ListenableFuture<Transaction> future=Futures.transform(result.broadcastComplete,(AsyncFunction<Transaction,Transaction>)tx -> {
    log.info(""String_Node_Str"");
    TransactionOutput feeOut=tx.getOutputs().stream().filter(output -> output.getValue().equals(feeSize)).findAny().get();
    contract.addInput(feeOut);
    SendRequest req=SendRequest.forTx(contract);
    req.aesKey=aesKey;
    signTransaction(req);
    log.info(""String_Node_Str"",contract);
    contract.getConfidence().addEventListener(broadcastListener);
    return vTransactionBroadcaster.broadcastTransaction(contract);
  }
);
  result.tx.getConfidence().addEventListener(broadcastListener);
  progress.txFuture=convertFuture(future);
  return progress;
}","/** 
 * Runs completeContract to get a feeless contract, then attaches an extra input of size MIN_FEE, potentially creating and broadcasting a tx to create an output of the right size first (as we cannot add change outputs to an assurance contract). The returned future completes once both dependency and contract are broadcast OK.
 */
public void completeContractWithFee(Project project,Set<LHProtos.Pledge> pledges,@Nullable KeyParameter aesKey,TransactionBroadcast.ProgressCallback progress,Consumer<Throwable> error,Executor callbackExecutor) throws InsufficientMoneyException {
  final Coin feeSize=Transaction.REFERENCE_DEFAULT_MIN_TX_FEE.multiply(2);
  log.info(""String_Node_Str"");
  Transaction contract=project.completeContract(pledges);
  Wallet.SendRequest request=Wallet.SendRequest.to(freshReceiveKey().toAddress(params),feeSize);
  request.aesKey=aesKey;
  Wallet.SendResult result=sendCoins(vTransactionBroadcaster,request);
  TransactionBroadcast.ProgressCallback mergingCallback=new TransactionBroadcast.ProgressCallback(){
    double total, last;
    @Override public void onBroadcastProgress(    double val){
      if (val < last)       last=0.0;
      total+=val - last;
      last=val;
      progress.onBroadcastProgress(total / 2.0);
    }
  }
;
  result.broadcast.setProgressCallback(mergingCallback,callbackExecutor);
  Futures.addCallback(result.broadcastComplete,new FutureCallback<Transaction>(){
    @Override public void onSuccess(    @Nullable Transaction tx){
      log.info(""String_Node_Str"");
      TransactionOutput feeOut=tx.getOutputs().stream().filter(output -> output.getValue().equals(feeSize)).findAny().get();
      contract.addInput(feeOut);
      SendRequest req=SendRequest.forTx(contract);
      req.aesKey=aesKey;
      signTransaction(req);
      log.info(""String_Node_Str"",contract);
      TransactionBroadcast broadcast=vTransactionBroadcaster.broadcastTransaction(contract);
      broadcast.setProgressCallback(mergingCallback,callbackExecutor);
      Futures.addCallback(broadcast.future(),new FutureCallback<Transaction>(){
        @Override public void onSuccess(        @Nullable Transaction result){
          log.info(""String_Node_Str"");
        }
        @Override public void onFailure(        Throwable t){
          log.error(""String_Node_Str"",t);
          error.accept(t);
        }
      }
,callbackExecutor);
    }
    @Override public void onFailure(    Throwable t){
      log.error(""String_Node_Str"",t);
      callbackExecutor.execute(() -> error.accept(t));
    }
  }
);
}"
30961,"@Override public void onSuccess(@Nullable Transaction result){
  log.info(""String_Node_Str"",hashFromPledge(proto));
  log.info(""String_Node_Str"",proto.getTransactionsCount());
  updateForRevoke(result,proto,stub);
  saveNow();
  for (  ListenerRegistration<OnRevokeHandler> handler : onRevokeHandlers) {
    handler.executor.execute(() -> handler.listener.onRevoke(proto));
  }
  lock.lock();
  try {
    maybeQueueOnWalletChanged();
  }
  finally {
    lock.unlock();
  }
}","@Override public void onSuccess(@Nullable Transaction result){
  log.info(""String_Node_Str"");
}"
30962,"private void setImageTo(ByteString bytes){
  coverImageView.setEffect(null);
  final Image image=new Image(bytes.newInput(),Project.COVER_IMAGE_WIDTH,Project.COVER_IMAGE_HEIGHT,true,true);
  Exception exception=image.getException();
  if (exception == null) {
    try {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      BufferedImage im=SwingFXUtils.fromFXImage(image,null);
      if (System.getProperty(""String_Node_Str"").equals(""String_Node_Str""))       ImageIO.write(im,""String_Node_Str"",baos);
 else       ImageIO.write(im,""String_Node_Str"",baos);
      byte[] bits=baos.toByteArray();
      model.image.set(ByteString.copyFrom(bits));
      coverImageView.setImage(image);
    }
 catch (    IOException e) {
      exception=e;
    }
  }
  if (exception != null)   log.error(""String_Node_Str"",exception);
}","private void setImageTo(ByteString bytes){
  coverImageView.setEffect(null);
  final Image image=new Image(bytes.newInput(),Project.COVER_IMAGE_WIDTH,Project.COVER_IMAGE_HEIGHT,true,true);
  Exception exception=image.getException();
  if (exception == null) {
    try {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      BufferedImage im=SwingFXUtils.fromFXImage(image,null);
      String ver=System.getProperty(""String_Node_Str"");
      if (ver.equals(""String_Node_Str"") || ver.equals(""String_Node_Str""))       ImageIO.write(im,""String_Node_Str"",baos);
 else       ImageIO.write(im,""String_Node_Str"",baos);
      byte[] bits=baos.toByteArray();
      model.image.set(ByteString.copyFrom(bits));
      coverImageView.setImage(image);
    }
 catch (    IOException e) {
      exception=e;
    }
  }
  if (exception != null)   log.error(""String_Node_Str"",exception);
}"
30963,"@FXML public void nextClicked(ActionEvent event){
  Platform.runLater(() -> {
    if (!editing && Files.exists(AppDirectory.dir().resolve(Project.getSuggestedFileName(model.title.get())))) {
      informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
    AddProjectTypeWindow.open(model,editing);
  }
);
}","@FXML public void nextClicked(ActionEvent event){
  Platform.runLater(() -> {
    if (!editing && Files.exists(AppDirectory.dir().resolve(Project.getSuggestedFileName(model.title.get())))) {
      informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
    Main.instance.prefs.setContactAddress(model.email.get());
    AddProjectTypeWindow.open(model,editing);
  }
);
}"
30964,"private void setupFor(ProjectModel model,boolean editing){
  this.model=model;
  this.editing=editing;
  setupMarkdownPreviewLink();
  addressEdit.setText(model.address.get());
  titleEdit.setText(model.title.get());
  String savedContact=Main.instance.prefs.getContactAddress();
  if (savedContact != null)   emailEdit.setText(savedContact);
  descriptionEdit.setText(model.memo.get());
  Coin goalCoin=Coin.valueOf(model.goalAmount.get());
  if (goalCoin.value != 1) {
    goalAmountEdit.setText(goalCoin.toPlainString());
  }
  if (editing)   minPledgeEdit.setText(model.getMinPledgeAmount().toPlainString());
 else   minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  if (model.image.get() == null) {
    setupDefaultCoverImage();
  }
 else {
    InputStream stream=model.image.get().newInput();
    coverImageView.setImage(new Image(stream));
    uncheck(stream::close);
  }
  this.model.title.bind(titleEdit.textProperty());
  this.model.email.bind(emailEdit.textProperty());
  this.model.memo.bind(descriptionEdit.textProperty());
  coverPhotoSiteLink.setText(COVERPHOTO_SITE);
  ValidationLink goalValid=new ValidationLink(goalAmountEdit,str -> !LHUtils.didThrow(() -> valueOrThrow(str)));
  goalAmountEdit.textProperty().addListener((obj,prev,cur) -> {
    if (goalValid.isValid.get())     this.model.goalAmount.set(valueOrThrow(cur).value);
  }
);
  model.minPledgeAmountProperty().addListener(o -> {
    minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  }
);
  ValidationLink minPledgeValue=new ValidationLink(minPledgeEdit,str -> {
    if (str.isEmpty())     return true;
    Coin coin=valueOrNull(str);
    if (coin == null)     return false;
    Coin amount=model.getMinPledgeAmount();
    return coin.equals(amount) || (coin.isGreaterThan(amount) && coin.isLessThan(Coin.valueOf(this.model.goalAmount.get())));
  }
);
  minPledgeEdit.textProperty().addListener((obj,prev,cur) -> {
    if (minPledgeValue.isValid.get()) {
      if (cur.trim().equals(""String_Node_Str""))       model.resetMinPledgeAmount();
 else       model.setMinPledgeAmount(valueOrThrow(cur));
    }
  }
);
  ValidationLink addressValid=new ValidationLink(addressEdit,str -> !didThrow(() -> new Address(Main.params,str)));
  addressEdit.textProperty().addListener((obj,prev,cur) -> {
    if (addressValid.isValid.get())     this.model.address.set(cur);
  }
);
  ValidationLink emailLink=new ValidationLink(emailEdit,str -> str.matches(""String_Node_Str""));
  ValidationLink.autoDisableButton(nextButton,goalValid,new ValidationLink(titleEdit,str -> !str.isEmpty()),minPledgeValue,addressValid,emailLink);
  roundCorners(coverImageView,10);
  Label maxPledgesWarning=new Label(String.format(""String_Node_Str"",ProjectModel.MAX_NUM_INPUTS));
  maxPledgesWarning.setStyle(""String_Node_Str"");
  maxPledgesPopOver=new PopOver(maxPledgesWarning);
  maxPledgesPopOver.setDetachable(false);
  maxPledgesPopOver.setArrowLocation(PopOver.ArrowLocation.BOTTOM_CENTER);
  minPledgeEdit.focusedProperty().addListener(o -> {
    if (minPledgeEdit.isFocused())     maxPledgesPopOver.show(minPledgeEdit);
 else     maxPledgesPopOver.hide();
  }
);
}","private void setupFor(ProjectModel model,boolean editing){
  this.model=model;
  this.editing=editing;
  setupMarkdownPreviewLink();
  addressEdit.setText(model.address.get());
  titleEdit.setText(model.title.get());
  emailEdit.setText(model.email.get());
  if (emailEdit.getText().isEmpty()) {
    String savedContact=Main.instance.prefs.getContactAddress();
    if (savedContact != null)     emailEdit.setText(savedContact);
  }
  descriptionEdit.setText(model.memo.get());
  Coin goalCoin=Coin.valueOf(model.goalAmount.get());
  if (goalCoin.value != 1) {
    goalAmountEdit.setText(goalCoin.toPlainString());
  }
  if (editing)   minPledgeEdit.setText(model.getMinPledgeAmount().toPlainString());
 else   minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  if (model.image.get() == null) {
    setupDefaultCoverImage();
  }
 else {
    InputStream stream=model.image.get().newInput();
    coverImageView.setImage(new Image(stream));
    uncheck(stream::close);
  }
  this.model.title.bind(titleEdit.textProperty());
  this.model.email.bind(emailEdit.textProperty());
  this.model.memo.bind(descriptionEdit.textProperty());
  coverPhotoSiteLink.setText(COVERPHOTO_SITE);
  ValidationLink goalValid=new ValidationLink(goalAmountEdit,str -> !LHUtils.didThrow(() -> valueOrThrow(str)));
  goalAmountEdit.textProperty().addListener((obj,prev,cur) -> {
    if (goalValid.isValid.get())     this.model.goalAmount.set(valueOrThrow(cur).value);
  }
);
  model.minPledgeAmountProperty().addListener(o -> {
    minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  }
);
  ValidationLink minPledgeValue=new ValidationLink(minPledgeEdit,str -> {
    if (str.isEmpty())     return true;
    Coin coin=valueOrNull(str);
    if (coin == null)     return false;
    Coin amount=model.getMinPledgeAmount();
    return coin.equals(amount) || (coin.isGreaterThan(amount) && coin.isLessThan(Coin.valueOf(this.model.goalAmount.get())));
  }
);
  minPledgeEdit.textProperty().addListener((obj,prev,cur) -> {
    if (minPledgeValue.isValid.get()) {
      if (cur.trim().equals(""String_Node_Str""))       model.resetMinPledgeAmount();
 else       model.setMinPledgeAmount(valueOrThrow(cur));
    }
  }
);
  ValidationLink addressValid=new ValidationLink(addressEdit,str -> !didThrow(() -> new Address(Main.params,str)));
  addressEdit.textProperty().addListener((obj,prev,cur) -> {
    if (addressValid.isValid.get())     this.model.address.set(cur);
  }
);
  ValidationLink emailLink=new ValidationLink(emailEdit,str -> str.matches(""String_Node_Str""));
  ValidationLink.autoDisableButton(nextButton,goalValid,new ValidationLink(titleEdit,str -> !str.isEmpty()),minPledgeValue,addressValid,emailLink);
  roundCorners(coverImageView,10);
  Label maxPledgesWarning=new Label(String.format(""String_Node_Str"",ProjectModel.MAX_NUM_INPUTS));
  maxPledgesWarning.setStyle(""String_Node_Str"");
  maxPledgesPopOver=new PopOver(maxPledgesWarning);
  maxPledgesPopOver.setDetachable(false);
  maxPledgesPopOver.setArrowLocation(PopOver.ArrowLocation.BOTTOM_CENTER);
  minPledgeEdit.focusedProperty().addListener(o -> {
    if (minPledgeEdit.isFocused())     maxPledgesPopOver.show(minPledgeEdit);
 else     maxPledgesPopOver.hide();
  }
);
}"
30965,"/** 
 * Returns a human-readable email for the project. 
 */
public String getEmail(){
  return projectReq.getExtraDetails().getEmail();
}","/** 
 * Returns a human-readable email for the project or the empty string if missing. 
 */
public String getEmail(){
  return projectReq.getExtraDetails().getEmail();
}"
30966,"private void broadcastClaim(Set<LHProtos.Pledge> pledges,@Nullable KeyParameter key){
  try {
    PledgingWallet.CompletionProgress progress=Main.wallet.completeContractWithFee(projectToClaim,pledges,key);
    double total=Main.bitcoin.peerGroup().getMinBroadcastConnections() * 2;
    progress.peersSeen=seen -> {
      if (seen == -1) {
        Platform.runLater(onSuccess::run);
      }
 else {
        progressBar.setProgress(seen / total);
      }
    }
;
    progress.txFuture.handleAsync((t,ex) -> {
      if (ex != null) {
        informationalAlert(""String_Node_Str"",""String_Node_Str"",ex);
      }
 else {
        onSuccess.run();
      }
      overlayUI.done();
      return null;
    }
,Platform::runLater);
  }
 catch (  Ex.ValueMismatch e) {
    log.error(""String_Node_Str"" + e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",Coin.valueOf(e.byAmount).toFriendlyString());
    overlayUI.done();
  }
catch (  InsufficientMoneyException e) {
    log.error(""String_Node_Str"",e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
    overlayUI.done();
  }
}","private void broadcastClaim(Set<LHProtos.Pledge> pledges,@Nullable KeyParameter key){
  try {
    PledgingWallet.CompletionProgress progress=Main.wallet.completeContractWithFee(projectToClaim,pledges,key);
    double total=Main.bitcoin.peerGroup().getMinBroadcastConnections();
    progress.peersSeen=seen -> {
      if (seen == -1) {
        Platform.runLater(onSuccess::run);
      }
 else {
        progressBar.setProgress(seen / total);
      }
    }
;
    progress.txFuture.handleAsync((t,ex) -> {
      if (ex != null) {
        informationalAlert(""String_Node_Str"",""String_Node_Str"",ex);
      }
 else {
        onSuccess.run();
      }
      overlayUI.done();
      return null;
    }
,Platform::runLater);
  }
 catch (  Ex.ValueMismatch e) {
    log.error(""String_Node_Str"" + e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",Coin.valueOf(e.byAmount).toFriendlyString());
    overlayUI.done();
  }
catch (  InsufficientMoneyException e) {
    log.error(""String_Node_Str"",e);
    informationalAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
    overlayUI.done();
  }
}"
30967,"private void diskPledgesChanged(SetChangeListener.Change<? extends LHProtos.Pledge> change,Project project){
  executor.checkOnThread();
  if (change.wasRemoved()) {
    LHProtos.Pledge walletPledge=wallet.getPledgeFor(project);
    LHProtos.Pledge removedPledge=change.getElementRemoved();
    if (walletPledge != null && walletPledge.equals(removedPledge)) {
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
      openPledges.get(project).remove(removedPledge);
      getClaimedPledgesFor(project).remove(removedPledge);
      if (checkStatuses.get(project).error != null)       checkPledgesAgainstP2PNetwork(project,openPledges.get(project));
    }
  }
  if (change.wasAdded()) {
    final LHProtos.Pledge added=change.getElementAdded();
    if (isPledgeKnown(added)) {
      log.info(""String_Node_Str"",LHUtils.hashFromPledge(added));
    }
 else {
      log.info(""String_Node_Str"",project);
      jitteredExecute(() -> checkPledgeAgainstP2PNetwork(project,added),TX_PROPAGATION_TIME_SECS);
    }
  }
}","private void diskPledgesChanged(SetChangeListener.Change<? extends LHProtos.Pledge> change,Project project){
  executor.checkOnThread();
  if (change.wasRemoved()) {
    LHProtos.Pledge walletPledge=wallet.getPledgeFor(project);
    LHProtos.Pledge removedPledge=change.getElementRemoved();
    if (walletPledge != null && walletPledge.equals(removedPledge)) {
      log.info(""String_Node_Str"");
    }
 else {
      log.info(""String_Node_Str"");
      openPledges.get(project).remove(removedPledge);
      getClaimedPledgesFor(project).remove(removedPledge);
      CheckStatus status=checkStatuses.get(project);
      if (status != null && status.error != null)       checkPledgesAgainstP2PNetwork(project,openPledges.get(project));
    }
  }
  if (change.wasAdded()) {
    final LHProtos.Pledge added=change.getElementAdded();
    if (isPledgeKnown(added)) {
      log.info(""String_Node_Str"",LHUtils.hashFromPledge(added));
    }
 else {
      log.info(""String_Node_Str"",project);
      jitteredExecute(() -> checkPledgeAgainstP2PNetwork(project,added),TX_PROPAGATION_TIME_SECS);
    }
  }
}"
30968,"@FXML public void imageSelectorClicked(MouseEvent event){
  log.info(""String_Node_Str"");
  FileChooser chooser=new FileChooser();
  chooser.setTitle(""String_Node_Str"");
  chooser.getExtensionFilters().setAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  platformFiddleChooser(chooser);
  File result=chooser.showOpenDialog(Main.instance.mainStage);
  if (result == null)   return;
  setImageTo(unchecked(() -> result.toURI().toURL()));
}","@FXML public void imageSelectorClicked(MouseEvent event){
  log.info(""String_Node_Str"");
  FileChooser chooser=new FileChooser();
  chooser.setTitle(""String_Node_Str"");
  chooser.getExtensionFilters().setAll(new FileChooser.ExtensionFilter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  platformFiddleChooser(chooser);
  Path prevPath=Main.instance.prefs.getCoverPhotoFolder();
  if (prevPath != null)   chooser.setInitialDirectory(prevPath.toFile());
  File result=chooser.showOpenDialog(Main.instance.mainStage);
  if (result == null)   return;
  Main.instance.prefs.setCoverPhotoFolder(result.toPath().getParent());
  setImageTo(unchecked(() -> result.toURI().toURL()));
}"
30969,"private void setupFor(ProjectModel model,boolean editing){
  this.model=model;
  this.editing=editing;
  addressEdit.setText(model.address.get());
  titleEdit.setText(model.title.get());
  descriptionEdit.setText(model.memo.get());
  Coin goalCoin=Coin.valueOf(model.goalAmount.get());
  if (goalCoin.value != 1) {
    goalAmountEdit.setText(goalCoin.toPlainString());
  }
  minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  if (model.image.get() == null) {
    setupDefaultCoverImage();
  }
 else {
    InputStream stream=model.image.get().newInput();
    coverImageView.setImage(new Image(stream));
    uncheck(stream::close);
  }
  this.model.title.bind(titleEdit.textProperty());
  this.model.memo.bind(descriptionEdit.textProperty());
  this.model.address.bind(addressEdit.textProperty());
  coverPhotoSiteLink.setText(COVERPHOTO_SITE);
  ValidationLink goalValid=new ValidationLink(goalAmountEdit,str -> !LHUtils.didThrow(() -> valueOrThrow(str)));
  goalAmountEdit.textProperty().addListener((obj,prev,cur) -> {
    if (goalValid.isValid.get())     this.model.goalAmount.set(valueOrThrow(cur).value);
  }
);
  model.minPledgeAmountProperty().addListener(o -> {
    minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  }
);
  ValidationLink minPledgeValue=new ValidationLink(minPledgeEdit,str -> {
    if (str.isEmpty())     return true;
    Coin coin=valueOrNull(str);
    if (coin == null)     return false;
    Coin amount=model.getMinPledgeAmount();
    return coin.equals(amount) || (coin.isGreaterThan(amount) && coin.isLessThan(Coin.valueOf(this.model.goalAmount.get())));
  }
);
  ValidationLink.autoDisableButton(nextButton,goalValid,new ValidationLink(titleEdit,str -> !str.isEmpty()),minPledgeValue);
  roundCorners(coverImageView,10);
  Label maxPledgesWarning=new Label(String.format(""String_Node_Str"",ProjectModel.MAX_NUM_INPUTS));
  maxPledgesWarning.setStyle(""String_Node_Str"");
  maxPledgesPopOver=new PopOver(maxPledgesWarning);
  maxPledgesPopOver.setDetachable(false);
  maxPledgesPopOver.setArrowLocation(PopOver.ArrowLocation.BOTTOM_CENTER);
  minPledgeEdit.focusedProperty().addListener(o -> {
    if (minPledgeEdit.isFocused())     maxPledgesPopOver.show(minPledgeEdit);
 else     maxPledgesPopOver.hide();
  }
);
}","private void setupFor(ProjectModel model,boolean editing){
  this.model=model;
  this.editing=editing;
  addressEdit.setText(model.address.get());
  titleEdit.setText(model.title.get());
  descriptionEdit.setText(model.memo.get());
  Coin goalCoin=Coin.valueOf(model.goalAmount.get());
  if (goalCoin.value != 1) {
    goalAmountEdit.setText(goalCoin.toPlainString());
  }
  minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  if (model.image.get() == null) {
    setupDefaultCoverImage();
  }
 else {
    InputStream stream=model.image.get().newInput();
    coverImageView.setImage(new Image(stream));
    uncheck(stream::close);
  }
  this.model.title.bind(titleEdit.textProperty());
  this.model.memo.bind(descriptionEdit.textProperty());
  coverPhotoSiteLink.setText(COVERPHOTO_SITE);
  ValidationLink goalValid=new ValidationLink(goalAmountEdit,str -> !LHUtils.didThrow(() -> valueOrThrow(str)));
  goalAmountEdit.textProperty().addListener((obj,prev,cur) -> {
    if (goalValid.isValid.get())     this.model.goalAmount.set(valueOrThrow(cur).value);
  }
);
  model.minPledgeAmountProperty().addListener(o -> {
    minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  }
);
  ValidationLink minPledgeValue=new ValidationLink(minPledgeEdit,str -> {
    if (str.isEmpty())     return true;
    Coin coin=valueOrNull(str);
    if (coin == null)     return false;
    Coin amount=model.getMinPledgeAmount();
    return coin.equals(amount) || (coin.isGreaterThan(amount) && coin.isLessThan(Coin.valueOf(this.model.goalAmount.get())));
  }
);
  ValidationLink addressValid=new ValidationLink(addressEdit,str -> !didThrow(() -> new Address(Main.params,str)));
  addressEdit.textProperty().addListener((obj,prev,cur) -> {
    if (addressValid.isValid.get())     this.model.address.set(cur);
  }
);
  ValidationLink.autoDisableButton(nextButton,goalValid,new ValidationLink(titleEdit,str -> !str.isEmpty()),minPledgeValue,addressValid);
  roundCorners(coverImageView,10);
  Label maxPledgesWarning=new Label(String.format(""String_Node_Str"",ProjectModel.MAX_NUM_INPUTS));
  maxPledgesWarning.setStyle(""String_Node_Str"");
  maxPledgesPopOver=new PopOver(maxPledgesWarning);
  maxPledgesPopOver.setDetachable(false);
  maxPledgesPopOver.setArrowLocation(PopOver.ArrowLocation.BOTTOM_CENTER);
  minPledgeEdit.focusedProperty().addListener(o -> {
    if (minPledgeEdit.isFocused())     maxPledgesPopOver.show(minPledgeEdit);
 else     maxPledgesPopOver.hide();
  }
);
}"
30970,"private void download(HttpExchange httpExchange,Project project,DownloadFormat format) throws IOException, SignatureException {
  if (format == DownloadFormat.LIGHTHOUSE_PROJECT) {
    log.info(""String_Node_Str"");
    byte[] bits=project.getProto().toByteArray();
    httpExchange.getResponseHeaders().add(""String_Node_Str"",LHUtils.PROJECT_MIME_TYPE);
    httpExchange.sendResponseHeaders(HTTP_OK,bits.length);
    httpExchange.getResponseBody().write(bits);
    httpExchange.close();
    return;
  }
  LHProtos.ProjectStatus.Builder status=LHProtos.ProjectStatus.newBuilder();
  status.setId(project.getID());
  status.setTimestamp(Instant.now().getEpochSecond());
  Map<String,String> params;
  String queryParams=httpExchange.getRequestURI().getRawQuery();
  if (queryParams != null && !queryParams.isEmpty()) {
    params=Splitter.on('&').trimResults().withKeyValueSeparator('=').split(queryParams);
  }
 else {
    params=new HashMap<>();
  }
  boolean authenticated=false;
  String signature=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (signature != null && message != null) {
    signature=URLDecoder.decode(signature,""String_Node_Str"");
    message=URLDecoder.decode(message,""String_Node_Str"");
    log.info(""String_Node_Str"");
    project.authenticateOwner(message,signature);
    log.info(""String_Node_Str"");
    authenticated=true;
  }
  long totalPledged=0;
  PledgeGroup pledgeGroup=getPledgesFor(project);
  for (  LHProtos.Pledge pledge : pledgeGroup.open) {
    if (authenticated) {
      status.addPledges(pledge);
    }
 else {
      Sha256Hash origHash=LHUtils.hashFromPledge(pledge);
      LHProtos.Pledge.Builder scrubbedPledge=pledge.toBuilder().clearTransactions();
      LHProtos.PledgeDetails.Builder details=scrubbedPledge.getPledgeDetailsBuilder();
      details.setOrigHash(ByteString.copyFrom(origHash.getBytes()));
      details.clearContactAddress();
      status.addPledges(scrubbedPledge);
    }
    totalPledged+=pledge.getPledgeDetails().getTotalInputValue();
  }
  if (!pledgeGroup.claimed.isEmpty())   checkState(pledgeGroup.open.isEmpty());
  status.addAllPledges(pledgeGroup.claimed);
  LighthouseBackend.ProjectStateInfo info=projectStates.get(project.getID());
  if (info.claimedBy != null) {
    status.setClaimedBy(ByteString.copyFrom(info.claimedBy.getBytes()));
  }
  status.setValuePledgedSoFar(totalPledged);
  final LHProtos.ProjectStatus proto=status.build();
  byte[] bits;
switch (format) {
case PBUF:
    bits=proto.toByteArray();
  break;
case JSON:
bits=JsonFormat.printToString(proto).getBytes(Charsets.UTF_8);
break;
case HTML:
bits=HtmlFormat.printToString(proto).getBytes(Charsets.UTF_8);
break;
case XML:
bits=XmlFormat.printToString(proto).getBytes(Charsets.UTF_8);
break;
default :
throw new AssertionError();
}
httpExchange.sendResponseHeaders(HTTP_OK,bits.length);
httpExchange.getResponseBody().write(bits);
httpExchange.close();
}","private void download(HttpExchange httpExchange,Project project,DownloadFormat format) throws IOException, SignatureException {
  if (format == DownloadFormat.LIGHTHOUSE_PROJECT) {
    log.info(""String_Node_Str"");
    byte[] bits=project.getProto().toByteArray();
    httpExchange.getResponseHeaders().add(""String_Node_Str"",LHUtils.PROJECT_MIME_TYPE);
    httpExchange.sendResponseHeaders(HTTP_OK,bits.length);
    httpExchange.getResponseBody().write(bits);
    httpExchange.close();
    return;
  }
  LHProtos.ProjectStatus.Builder status=LHProtos.ProjectStatus.newBuilder();
  status.setId(project.getID());
  status.setTimestamp(Instant.now().getEpochSecond());
  Map<String,String> params;
  String queryParams=httpExchange.getRequestURI().getRawQuery();
  if (queryParams != null && !queryParams.isEmpty()) {
    params=Splitter.on('&').trimResults().withKeyValueSeparator('=').split(queryParams);
  }
 else {
    params=new HashMap<>();
  }
  boolean authenticated=false;
  String signature=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (signature != null && message != null) {
    signature=URLDecoder.decode(signature,""String_Node_Str"");
    message=URLDecoder.decode(message,""String_Node_Str"");
    log.info(""String_Node_Str"");
    project.authenticateOwner(message,signature);
    log.info(""String_Node_Str"");
    authenticated=true;
  }
  PledgeGroup pledgeGroup=getPledgesFor(project);
  long totalPledged=addPledgesToStatus(status,authenticated,pledgeGroup.open);
  if (!pledgeGroup.claimed.isEmpty())   checkState(pledgeGroup.open.isEmpty());
  addPledgesToStatus(status,authenticated,pledgeGroup.claimed);
  LighthouseBackend.ProjectStateInfo info=projectStates.get(project.getID());
  if (info.claimedBy != null) {
    status.setClaimedBy(ByteString.copyFrom(info.claimedBy.getBytes()));
  }
  status.setValuePledgedSoFar(totalPledged);
  final LHProtos.ProjectStatus proto=status.build();
  byte[] bits;
switch (format) {
case PBUF:
    bits=proto.toByteArray();
  break;
case JSON:
bits=JsonFormat.printToString(proto).getBytes(Charsets.UTF_8);
break;
case HTML:
bits=HtmlFormat.printToString(proto).getBytes(Charsets.UTF_8);
break;
case XML:
bits=XmlFormat.printToString(proto).getBytes(Charsets.UTF_8);
break;
default :
throw new AssertionError();
}
httpExchange.sendResponseHeaders(HTTP_OK,bits.length);
httpExchange.getResponseBody().write(bits);
httpExchange.close();
}"
30971,"public LighthouseBackend(Mode mode,PeerGroup regularP2P,PeerGroup xtP2P,AbstractBlockChain chain,PledgingWallet wallet,DiskManager diskManager,AffinityExecutor.ServiceAffinityExecutor executor){
  this.diskManager=diskManager;
  this.executor=executor;
  this.regularP2P=regularP2P;
  this.xtP2P=xtP2P;
  this.openPledges=new HashMap<>();
  this.claimedPledges=new HashMap<>();
  this.wallet=wallet;
  this.mode=mode;
  this.checkStatuses=FXCollections.observableHashMap();
  this.projectsByUrlPath=new HashMap<>();
  if (wallet.getParams() == RegTestParams.get()) {
    setMinPeersForUTXOQuery(1);
    setMaxJitterSeconds(1);
  }
  diskManager.observeProjects(this::onDiskProjectAdded);
  executor.execute(() -> {
    chain.addListener(this,executor);
    for (    LHProtos.Pledge pledge : wallet.getPledges()) {
      Project project=diskManager.getProjectById(pledge.getPledgeDetails().getProjectId());
      if (project != null) {
        getOpenPledgesFor(project).add(pledge);
      }
 else {
        log.error(""String_Node_Str"",pledge.getPledgeDetails().getProjectId());
      }
    }
    wallet.addOnPledgeHandler((project,pledge) -> {
      log.info(""String_Node_Str"",pledge);
      final ObservableSet<LHProtos.Pledge> pledgesFor=getOpenPledgesFor(project);
      pledgesFor.add(pledge);
    }
,executor);
    wallet.addOnRevokeHandler(pledge -> {
      Project project=diskManager.getProjectById(pledge.getPledgeDetails().getProjectId());
      if (project != null) {
        getOpenPledgesFor(project).remove(pledge);
      }
 else {
        log.error(""String_Node_Str"",pledge.getPledgeDetails().getProjectId());
      }
    }
,executor);
    wallet.addEventListener(new AbstractWalletEventListener(){
      @Override public void onCoinsReceived(      Wallet wallet,      Transaction tx,      Coin prevBalance,      Coin newBalance){
        checkPossibleClaimTX(tx);
      }
    }
,executor);
    for (    Transaction tx : wallet.getTransactions(false)) {
      Project project=diskManager.getProjectFromClaim(tx);
      if (project != null) {
        log.info(""String_Node_Str"",tx.getHash());
        addClaimConfidenceListener(executor,tx,project);
        movePledgesFromOpenToClaimed(tx,project);
      }
    }
    installBloomFilterProvider();
    refreshBloomFilter();
    log.info(""String_Node_Str"");
    initialized.complete(true);
  }
);
}","public LighthouseBackend(Mode mode,PeerGroup regularP2P,PeerGroup xtP2P,AbstractBlockChain chain,PledgingWallet wallet,DiskManager diskManager,AffinityExecutor.ServiceAffinityExecutor executor){
  this.diskManager=diskManager;
  this.executor=executor;
  this.regularP2P=regularP2P;
  this.xtP2P=xtP2P;
  this.openPledges=new HashMap<>();
  this.claimedPledges=new HashMap<>();
  this.wallet=wallet;
  this.mode=mode;
  this.checkStatuses=FXCollections.observableHashMap();
  this.projectsByUrlPath=new HashMap<>();
  if (wallet.getParams() == RegTestParams.get()) {
    setMinPeersForUTXOQuery(1);
    setMaxJitterSeconds(1);
  }
  diskManager.observeProjects(this::onDiskProjectAdded);
  executor.execute(() -> {
    chain.addListener(this,executor);
    for (    LHProtos.Pledge pledge : wallet.getPledges()) {
      Project project=diskManager.getProjectById(pledge.getPledgeDetails().getProjectId());
      if (project != null) {
        getOpenPledgesFor(project).add(pledge);
      }
 else {
        log.error(""String_Node_Str"",pledge.getPledgeDetails().getProjectId());
      }
    }
    wallet.addOnPledgeHandler((project,pledge) -> {
      final ObservableSet<LHProtos.Pledge> pledgesFor=getOpenPledgesFor(project);
      pledgesFor.add(pledge);
    }
,executor);
    wallet.addOnRevokeHandler(pledge -> {
      Project project=diskManager.getProjectById(pledge.getPledgeDetails().getProjectId());
      if (project != null) {
        getOpenPledgesFor(project).remove(pledge);
      }
 else {
        log.error(""String_Node_Str"",pledge.getPledgeDetails().getProjectId());
      }
    }
,executor);
    wallet.addEventListener(new AbstractWalletEventListener(){
      @Override public void onCoinsReceived(      Wallet wallet,      Transaction tx,      Coin prevBalance,      Coin newBalance){
        checkPossibleClaimTX(tx);
      }
    }
,executor);
    for (    Transaction tx : wallet.getTransactions(false)) {
      Project project=diskManager.getProjectFromClaim(tx);
      if (project != null) {
        log.info(""String_Node_Str"",tx.getHash());
        addClaimConfidenceListener(executor,tx,project);
        movePledgesFromOpenToClaimed(tx,project);
      }
    }
    installBloomFilterProvider();
    refreshBloomFilter();
    log.info(""String_Node_Str"");
    initialized.complete(true);
  }
);
}"
30972,"@Override public void start(Stage stage) throws Exception {
  Thread.currentThread().setContextClassLoader(Main.class.getClassLoader());
  instance=this;
  Project.GET_STATUS_USER_AGENT=APP_NAME + ""String_Node_Str"" + VERSION;
  AppDirectory.initAppDir(APP_NAME);
  unadjustedAppDir=AppDirectory.dir();
  List<Path> filesToOpen=new ArrayList<>();
  if (!parseCommandLineArgs() || FileOpenRequests.requestFileOpen(getParameters(),filesToOpen)) {
    Platform.exit();
    return;
  }
  setupLogging();
  log.info(""String_Node_Str"",APP_NAME,VERSION,LHUtils.nowAsString());
  log.info(""String_Node_Str"",AppDirectory.dir(),Runtime.getRuntime().availableProcessors());
  log.info(""String_Node_Str"",String.join(""String_Node_Str"",getParameters().getRaw()));
  CrashFX.setup();
  reached(""String_Node_Str"");
  prefs=new UserPrefs();
  initGUI(stage);
  stage.show();
  Runnable setup=() -> {
    uncheck(() -> initBitcoin(null));
    loadMainWindow();
    if (isMac()) {
      FileOpenRequests.handleMacFileOpenRequests();
    }
 else {
      for (      Path path : filesToOpen) {
        Platform.runLater(() -> {
          Main.instance.mainWindow.handleOpenedFile(path.toFile());
        }
);
      }
    }
  }
;
  runOnGuiThreadAfter(300,setup);
}","@Override public void start(Stage stage) throws Exception {
  Thread.currentThread().setContextClassLoader(Main.class.getClassLoader());
  instance=this;
  Project.GET_STATUS_USER_AGENT=APP_NAME + ""String_Node_Str"" + VERSION;
  AppDirectory.initAppDir(APP_NAME);
  unadjustedAppDir=AppDirectory.dir();
  List<Path> filesToOpen=new ArrayList<>();
  if (!parseCommandLineArgs() || FileOpenRequests.requestFileOpen(getParameters(),filesToOpen)) {
    Platform.exit();
    return;
  }
  setupLogging();
  log.info(""String_Node_Str"",APP_NAME,VERSION,LHUtils.nowAsString());
  log.info(""String_Node_Str"",AppDirectory.dir(),Runtime.getRuntime().availableProcessors());
  log.info(""String_Node_Str"",String.join(""String_Node_Str"",getParameters().getRaw()));
  CrashFX.setup();
  reached(""String_Node_Str"");
  prefs=new UserPrefs();
  initGUI(stage);
  stage.show();
  Runnable setup=() -> {
    uncheck(() -> initBitcoin(null));
    loadMainWindow();
    if (isMac()) {
      FileOpenRequests.handleMacFileOpenRequests();
    }
 else {
      for (      Path path : filesToOpen) {
        Platform.runLater(() -> {
          Main.instance.mainWindow.handleOpenedFile(path.toFile());
        }
);
      }
    }
    runOnGuiThreadAfter(500,WalletSetPasswordController::estimateKeyDerivationTime);
  }
;
  runOnGuiThreadAfter(300,setup);
}"
30973,"@FXML void confirmClicked(ActionEvent event){
  String password=pass1.getText();
  if (password.isEmpty() || password.length() < 4) {
    informationalAlert(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final KeyCrypterScrypt keyCrypter=(KeyCrypterScrypt)Main.bitcoin.wallet().getKeyCrypter();
  checkNotNull(keyCrypter);
  KeyDerivationTasks tasks=new KeyDerivationTasks(keyCrypter,password,getTargetTime()){
    @Override protected void onFinish(    KeyParameter aesKey){
      super.onFinish(aesKey);
      checkGuiThread();
      if (Main.bitcoin.wallet().checkAESKey(aesKey)) {
        WalletPasswordController.this.aesKey.set(aesKey);
      }
 else {
        log.warn(""String_Node_Str"");
        fadeOut(progressMeter);
        fadeIn(widgetBox);
        fadeIn(buttonsBox);
        informationalAlert(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
;
  progressMeter.progressProperty().bind(tasks.progress);
  tasks.start();
  fadeIn(progressMeter);
  fadeOut(widgetBox);
  fadeOut(buttonsBox);
}","@FXML void confirmClicked(ActionEvent event){
  String password=pass1.getText();
  if (password.isEmpty() || password.length() < 4) {
    informationalAlert(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final KeyCrypterScrypt keyCrypter=(KeyCrypterScrypt)Main.bitcoin.wallet().getKeyCrypter();
  checkNotNull(keyCrypter);
  KeyDerivationTasks tasks=new KeyDerivationTasks(keyCrypter,password,getTargetTime()){
    @Override protected void onFinish(    KeyParameter aesKey,    int timeTakenMsec){
      checkGuiThread();
      if (Main.bitcoin.wallet().checkAESKey(aesKey)) {
        WalletPasswordController.this.aesKey.set(aesKey);
      }
 else {
        log.warn(""String_Node_Str"");
        fadeOut(progressMeter);
        fadeIn(widgetBox);
        fadeIn(buttonsBox);
        informationalAlert(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
;
  progressMeter.progressProperty().bind(tasks.progress);
  tasks.start();
  fadeIn(progressMeter);
  fadeOut(widgetBox);
  fadeOut(buttonsBox);
}"
30974,"@Override protected void onFinish(KeyParameter aesKey){
  super.onFinish(aesKey);
  checkGuiThread();
  if (Main.bitcoin.wallet().checkAESKey(aesKey)) {
    WalletPasswordController.this.aesKey.set(aesKey);
  }
 else {
    log.warn(""String_Node_Str"");
    fadeOut(progressMeter);
    fadeIn(widgetBox);
    fadeIn(buttonsBox);
    informationalAlert(""String_Node_Str"",""String_Node_Str"");
  }
}","@Override protected void onFinish(KeyParameter aesKey,int timeTakenMsec){
  checkGuiThread();
  if (Main.bitcoin.wallet().checkAESKey(aesKey)) {
    WalletPasswordController.this.aesKey.set(aesKey);
  }
 else {
    log.warn(""String_Node_Str"");
    fadeOut(progressMeter);
    fadeIn(widgetBox);
    fadeIn(buttonsBox);
    informationalAlert(""String_Node_Str"",""String_Node_Str"");
  }
}"
30975,"@FXML public void setPasswordClicked(ActionEvent event){
  if (!pass1.getText().equals(pass2.getText())) {
    informationalAlert(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String password=pass1.getText();
  if (password.length() < 4) {
    informationalAlert(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  fadeIn(progressMeter);
  fadeOut(widgetGrid);
  fadeOut(explanationLabel);
  fadeOut(buttonHBox);
  log.info(""String_Node_Str"");
  IdealPasswordParameters params=new IdealPasswordParameters(password);
  KeyCrypterScrypt scrypt=new KeyCrypterScrypt(params.realIterations);
  WalletPasswordController.setTargetTime(params.realTargetTime);
  KeyDerivationTasks tasks=new KeyDerivationTasks(scrypt,password,params.realTargetTime){
    @Override protected void onFinish(    KeyParameter aesKey){
      Main.bitcoin.wallet().encrypt(scrypt,aesKey);
      informationalAlert(""String_Node_Str"",""String_Node_Str"");
      overlayUI.done();
    }
  }
;
  progressMeter.progressProperty().bind(tasks.progress);
  tasks.start();
}","@FXML public void setPasswordClicked(ActionEvent event){
  if (!pass1.getText().equals(pass2.getText())) {
    informationalAlert(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String password=pass1.getText();
  if (password.length() < 4) {
    informationalAlert(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  fadeIn(progressMeter);
  fadeOut(widgetGrid);
  fadeOut(explanationLabel);
  fadeOut(buttonHBox);
  KeyCrypterScrypt scrypt=new KeyCrypterScrypt(SCRYPT_PARAMETERS);
  KeyDerivationTasks tasks=new KeyDerivationTasks(scrypt,password,estimatedKeyDerivationTime){
    @Override protected void onFinish(    KeyParameter aesKey,    int timeTakenMsec){
      WalletPasswordController.setTargetTime(Duration.ofMillis(timeTakenMsec));
      log.info(""String_Node_Str"");
      Main.bitcoin.wallet().encrypt(scrypt,aesKey);
      log.info(""String_Node_Str"");
      informationalAlert(""String_Node_Str"",""String_Node_Str"");
      overlayUI.done();
    }
  }
;
  progressMeter.progressProperty().bind(tasks.progress);
  tasks.start();
}"
30976,"@Override protected void onFinish(KeyParameter aesKey){
  Main.bitcoin.wallet().encrypt(scrypt,aesKey);
  informationalAlert(""String_Node_Str"",""String_Node_Str"");
  overlayUI.done();
}","@Override protected void onFinish(KeyParameter aesKey,int timeTakenMsec){
  WalletPasswordController.setTargetTime(Duration.ofMillis(timeTakenMsec));
  log.info(""String_Node_Str"");
  Main.bitcoin.wallet().encrypt(scrypt,aesKey);
  log.info(""String_Node_Str"");
  informationalAlert(""String_Node_Str"",""String_Node_Str"");
  overlayUI.done();
}"
30977,"@Override protected Void call() throws Exception {
  long startTime=System.currentTimeMillis();
  long curTime;
  long targetTimeMillis=targetTime.toMillis();
  while ((curTime=System.currentTimeMillis()) < startTime + targetTimeMillis) {
    double progress=(curTime - startTime) / (double)targetTimeMillis;
    updateProgress(progress,1.0);
    Uninterruptibles.sleepUninterruptibly(20,TimeUnit.MILLISECONDS);
  }
  updateProgress(1.0,1.0);
  aesKey=keyDerivationTask.get();
  return null;
}","@Override protected Void call() throws Exception {
  if (targetTime != null) {
    long startTime=System.currentTimeMillis();
    long curTime;
    long targetTimeMillis=targetTime.toMillis();
    while ((curTime=System.currentTimeMillis()) < startTime + targetTimeMillis) {
      double progress=(curTime - startTime) / (double)targetTimeMillis;
      updateProgress(progress,1.0);
      Uninterruptibles.sleepUninterruptibly(20,TimeUnit.MILLISECONDS);
    }
    updateProgress(1.0,1.0);
  }
 else {
    updateProgress(-1,-1);
  }
  aesKey=keyDerivationTask.get();
  return null;
}"
30978,"public KeyDerivationTasks(KeyCrypterScrypt scrypt,String password,Duration targetTime){
  keyDerivationTask=new Task<KeyParameter>(){
    @Override protected KeyParameter call() throws Exception {
      try {
        return scrypt.deriveKey(password);
      }
 catch (      Throwable e) {
        e.printStackTrace();
        throw e;
      }
 finally {
        log.info(""String_Node_Str"");
      }
    }
  }
;
  progressTask=new Task<Void>(){
    private KeyParameter aesKey;
    @Override protected Void call() throws Exception {
      long startTime=System.currentTimeMillis();
      long curTime;
      long targetTimeMillis=targetTime.toMillis();
      while ((curTime=System.currentTimeMillis()) < startTime + targetTimeMillis) {
        double progress=(curTime - startTime) / (double)targetTimeMillis;
        updateProgress(progress,1.0);
        Uninterruptibles.sleepUninterruptibly(20,TimeUnit.MILLISECONDS);
      }
      updateProgress(1.0,1.0);
      aesKey=keyDerivationTask.get();
      return null;
    }
    @Override protected void succeeded(){
      checkGuiThread();
      onFinish(aesKey);
    }
  }
;
  progress=progressTask.progressProperty();
}","public KeyDerivationTasks(KeyCrypterScrypt scrypt,String password,@Nullable Duration targetTime){
  keyDerivationTask=new Task<KeyParameter>(){
    @Override protected KeyParameter call() throws Exception {
      long start=System.currentTimeMillis();
      try {
        log.info(""String_Node_Str"");
        KeyParameter result=scrypt.deriveKey(password);
        timeTakenMsec=(int)(System.currentTimeMillis() - start);
        log.info(""String_Node_Str"",timeTakenMsec);
        return result;
      }
 catch (      Throwable e) {
        log.error(""String_Node_Str"",e);
        throw e;
      }
    }
  }
;
  progressTask=new Task<Void>(){
    private KeyParameter aesKey;
    @Override protected Void call() throws Exception {
      if (targetTime != null) {
        long startTime=System.currentTimeMillis();
        long curTime;
        long targetTimeMillis=targetTime.toMillis();
        while ((curTime=System.currentTimeMillis()) < startTime + targetTimeMillis) {
          double progress=(curTime - startTime) / (double)targetTimeMillis;
          updateProgress(progress,1.0);
          Uninterruptibles.sleepUninterruptibly(20,TimeUnit.MILLISECONDS);
        }
        updateProgress(1.0,1.0);
      }
 else {
        updateProgress(-1,-1);
      }
      aesKey=keyDerivationTask.get();
      return null;
    }
    @Override protected void succeeded(){
      checkGuiThread();
      onFinish(aesKey,timeTakenMsec);
    }
  }
;
  progress=progressTask.progressProperty();
}"
30979,"protected void onFinish(KeyParameter aesKey){
}","protected void onFinish(KeyParameter aesKey,int timeTakenMsec){
}"
30980,"@Override protected void succeeded(){
  checkGuiThread();
  onFinish(aesKey);
}","@Override protected void succeeded(){
  checkGuiThread();
  onFinish(aesKey,timeTakenMsec);
}"
30981,"public ProjectModel(LHProtos.ProjectDetails.Builder liveProto){
  this.proto=liveProto;
  final LHProtos.Project.Builder wrapper=LHProtos.Project.newBuilder().setSerializedPaymentDetails(liveProto.build().toByteString());
  Project project=unchecked(() -> new Project(wrapper.build()));
  title.set(project.getTitle());
  memo.set(project.getMemo());
  goalAmount.set(project.getGoalAmount().value);
  minPledgeAmount.set(recalculateMinPledgeAmount(goalAmount.longValue()));
  if (liveProto.hasPaymentUrl()) {
    String host=LHUtils.validateServerPath(liveProto.getPaymentUrl());
    if (host == null)     throw new IllegalArgumentException(""String_Node_Str"" + liveProto.getPaymentUrl());
    serverName.set(host);
  }
  InvalidationListener pathSetter=o -> {
    final String name=serverName.get();
    if (name == null || name.isEmpty())     proto.clearPaymentUrl();
 else     proto.setPaymentUrl(LHUtils.makeServerPath(name,LHUtils.titleToUrlString(title.get())));
  }
;
  serverName.addListener(pathSetter);
  title.addListener(o -> {
    proto.getExtraDetailsBuilder().setTitle(title.get());
    pathSetter.invalidated(null);
  }
);
  memo.addListener(o -> proto.setMemo(memo.get()));
  goalAmount.addListener(o -> {
    long value=goalAmount.longValue();
    minPledgeAmount.set(recalculateMinPledgeAmount(value));
    proto.getOutputsBuilder(0).setAmount(value);
  }
);
  minPledgeAmount.addListener(o -> proto.getExtraDetailsBuilder().setMinPledgeSize(minPledgeAmountProperty().get()));
  TransactionOutput output=project.getOutputs().get(0);
  Address addr=output.getAddressFromP2PKHScript(project.getParams());
  if (addr == null)   addr=output.getAddressFromP2SH(project.getParams());
  if (addr == null)   throw new IllegalArgumentException(""String_Node_Str"" + output);
  address.set(addr.toString());
  address.addListener(o -> {
    try {
      Address addr2=new Address(project.getParams(),address.get());
      proto.getOutputsBuilder(0).setScript(ByteString.copyFrom(ScriptBuilder.createOutputScript(addr2).getProgram()));
    }
 catch (    AddressFormatException e) {
    }
  }
);
  if (proto.getExtraDetailsBuilder().hasCoverImage())   image.set(proto.getExtraDetailsBuilder().getCoverImage());
  image.addListener(o -> {
    proto.getExtraDetailsBuilder().setCoverImage(image.get());
  }
);
}","public ProjectModel(LHProtos.ProjectDetails.Builder liveProto){
  this.proto=liveProto;
  final LHProtos.Project.Builder wrapper=LHProtos.Project.newBuilder().setSerializedPaymentDetails(liveProto.build().toByteString());
  Project project=unchecked(() -> new Project(wrapper.build()));
  title.set(project.getTitle());
  memo.set(project.getMemo());
  goalAmount.set(project.getGoalAmount().value);
  if (liveProto.getExtraDetails().hasMinPledgeSize())   minPledgeAmount.set(project.getMinPledgeAmount().value);
 else   minPledgeAmount.set(recalculateMinPledgeAmount(goalAmount.longValue()));
  if (liveProto.hasPaymentUrl()) {
    String host=LHUtils.validateServerPath(liveProto.getPaymentUrl());
    if (host == null)     throw new IllegalArgumentException(""String_Node_Str"" + liveProto.getPaymentUrl());
    serverName.set(host);
  }
  InvalidationListener pathSetter=o -> {
    final String name=serverName.get();
    if (name == null || name.isEmpty())     proto.clearPaymentUrl();
 else     proto.setPaymentUrl(LHUtils.makeServerPath(name,LHUtils.titleToUrlString(title.get())));
  }
;
  serverName.addListener(pathSetter);
  title.addListener(o -> {
    proto.getExtraDetailsBuilder().setTitle(title.get());
    pathSetter.invalidated(null);
  }
);
  memo.addListener(o -> proto.setMemo(memo.get()));
  goalAmount.addListener(o -> {
    long value=goalAmount.longValue();
    minPledgeAmount.set(recalculateMinPledgeAmount(value));
    proto.getOutputsBuilder(0).setAmount(value);
  }
);
  minPledgeAmount.addListener(o -> proto.getExtraDetailsBuilder().setMinPledgeSize(minPledgeAmountProperty().get()));
  TransactionOutput output=project.getOutputs().get(0);
  Address addr=output.getAddressFromP2PKHScript(project.getParams());
  if (addr == null)   addr=output.getAddressFromP2SH(project.getParams());
  if (addr == null)   throw new IllegalArgumentException(""String_Node_Str"" + output);
  address.set(addr.toString());
  address.addListener(o -> {
    try {
      Address addr2=new Address(project.getParams(),address.get());
      proto.getOutputsBuilder(0).setScript(ByteString.copyFrom(ScriptBuilder.createOutputScript(addr2).getProgram()));
    }
 catch (    AddressFormatException e) {
    }
  }
);
  if (proto.getExtraDetailsBuilder().hasCoverImage())   image.set(proto.getExtraDetailsBuilder().getCoverImage());
  image.addListener(o -> {
    proto.getExtraDetailsBuilder().setCoverImage(image.get());
  }
);
}"
30982,"private void setupFor(ProjectModel model,boolean editing){
  this.model=model;
  this.editing=editing;
  addressEdit.setText(model.address.get());
  titleEdit.setText(model.title.get());
  descriptionEdit.setText(model.memo.get());
  Coin goalCoin=Coin.valueOf(model.goalAmount.get());
  if (goalCoin.value != 1) {
    goalAmountEdit.setText(goalCoin.toPlainString());
  }
  minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  if (model.image.get() == null) {
    setupDefaultCoverImage();
  }
 else {
    InputStream stream=model.image.get().newInput();
    coverImageView.setImage(new Image(stream));
    uncheck(stream::close);
  }
  this.model.title.bind(titleEdit.textProperty());
  this.model.memo.bind(descriptionEdit.textProperty());
  coverPhotoSiteLink.setText(COVERPHOTO_SITE);
  ValidationLink goalValid=new ValidationLink(goalAmountEdit,str -> !LHUtils.didThrow(() -> valueOrThrow(str)));
  goalAmountEdit.textProperty().addListener((obj,prev,cur) -> {
    if (goalValid.isValid.get())     this.model.goalAmount.set(valueOrThrow(cur).value);
  }
);
  model.minPledgeAmountProperty().addListener(o -> {
    minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  }
);
  ValidationLink minPledgeValue=new ValidationLink(minPledgeEdit,str -> {
    if (str.isEmpty())     return true;
    Coin coin=valueOrNull(str);
    if (coin == null)     return false;
    Coin amount=model.getMinPledgeAmount();
    return coin.equals(amount) || (coin.isGreaterThan(amount) && coin.isLessThan(Coin.valueOf(this.model.goalAmount.get())));
  }
);
  ValidationLink addressValid=new ValidationLink(addressEdit,str -> !didThrow(() -> new Address(Main.params,str)));
  addressEdit.textProperty().addListener((obj,prev,cur) -> {
    if (addressValid.isValid.get())     this.model.address.set(cur);
  }
);
  ValidationLink.autoDisableButton(nextButton,goalValid,new ValidationLink(titleEdit,str -> !str.isEmpty()),minPledgeValue,addressValid);
  roundCorners(coverImageView,10);
  Label maxPledgesWarning=new Label(String.format(""String_Node_Str"",ProjectModel.MAX_NUM_INPUTS));
  maxPledgesWarning.setStyle(""String_Node_Str"");
  maxPledgesPopOver=new PopOver(maxPledgesWarning);
  maxPledgesPopOver.setDetachable(false);
  maxPledgesPopOver.setArrowLocation(PopOver.ArrowLocation.BOTTOM_CENTER);
  minPledgeEdit.focusedProperty().addListener(o -> {
    if (minPledgeEdit.isFocused())     maxPledgesPopOver.show(minPledgeEdit);
 else     maxPledgesPopOver.hide();
  }
);
}","private void setupFor(ProjectModel model,boolean editing){
  this.model=model;
  this.editing=editing;
  addressEdit.setText(model.address.get());
  titleEdit.setText(model.title.get());
  descriptionEdit.setText(model.memo.get());
  Coin goalCoin=Coin.valueOf(model.goalAmount.get());
  if (goalCoin.value != 1) {
    goalAmountEdit.setText(goalCoin.toPlainString());
  }
  if (editing)   minPledgeEdit.setText(model.getMinPledgeAmount().toPlainString());
 else   minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  if (model.image.get() == null) {
    setupDefaultCoverImage();
  }
 else {
    InputStream stream=model.image.get().newInput();
    coverImageView.setImage(new Image(stream));
    uncheck(stream::close);
  }
  this.model.title.bind(titleEdit.textProperty());
  this.model.memo.bind(descriptionEdit.textProperty());
  coverPhotoSiteLink.setText(COVERPHOTO_SITE);
  ValidationLink goalValid=new ValidationLink(goalAmountEdit,str -> !LHUtils.didThrow(() -> valueOrThrow(str)));
  goalAmountEdit.textProperty().addListener((obj,prev,cur) -> {
    if (goalValid.isValid.get())     this.model.goalAmount.set(valueOrThrow(cur).value);
  }
);
  model.minPledgeAmountProperty().addListener(o -> {
    minPledgeEdit.setPromptText(model.getMinPledgeAmount().toPlainString());
  }
);
  ValidationLink minPledgeValue=new ValidationLink(minPledgeEdit,str -> {
    if (str.isEmpty())     return true;
    Coin coin=valueOrNull(str);
    if (coin == null)     return false;
    Coin amount=model.getMinPledgeAmount();
    return coin.equals(amount) || (coin.isGreaterThan(amount) && coin.isLessThan(Coin.valueOf(this.model.goalAmount.get())));
  }
);
  minPledgeEdit.textProperty().addListener((obj,prev,cur) -> {
    if (minPledgeValue.isValid.get()) {
      if (cur.trim().equals(""String_Node_Str""))       model.resetMinPledgeAmount();
 else       model.setMinPledgeAmount(valueOrThrow(cur));
    }
  }
);
  ValidationLink addressValid=new ValidationLink(addressEdit,str -> !didThrow(() -> new Address(Main.params,str)));
  addressEdit.textProperty().addListener((obj,prev,cur) -> {
    if (addressValid.isValid.get())     this.model.address.set(cur);
  }
);
  ValidationLink.autoDisableButton(nextButton,goalValid,new ValidationLink(titleEdit,str -> !str.isEmpty()),minPledgeValue,addressValid);
  roundCorners(coverImageView,10);
  Label maxPledgesWarning=new Label(String.format(""String_Node_Str"",ProjectModel.MAX_NUM_INPUTS));
  maxPledgesWarning.setStyle(""String_Node_Str"");
  maxPledgesPopOver=new PopOver(maxPledgesWarning);
  maxPledgesPopOver.setDetachable(false);
  maxPledgesPopOver.setArrowLocation(PopOver.ArrowLocation.BOTTOM_CENTER);
  minPledgeEdit.focusedProperty().addListener(o -> {
    if (minPledgeEdit.isFocused())     maxPledgesPopOver.show(minPledgeEdit);
 else     maxPledgesPopOver.hide();
  }
);
}"
30983,"@Test public void projectAddedWithServer() throws Exception {
  projectModel.serverName.set(""String_Node_Str"");
  project=projectModel.getProject();
  final LHProtos.Pledge scrubbedPledge=makeScrubbedPledge();
  ObservableList<Project> projects=backend.mirrorProjects(gate);
  assertEquals(0,projects.size());
  writeProjectToDisk();
  assertEquals(0,projects.size());
  gate.waitAndRun();
  assertEquals(1,projects.size());
  final Project project1=projects.iterator().next();
  assertEquals(""String_Node_Str"",project1.getTitle());
  ObservableSet<LHProtos.Pledge> pledges=backend.mirrorOpenPledges(project1,gate);
  gate.waitAndRun();
  HttpExchange exchange=httpReqs.take();
  sendServerStatus(exchange,scrubbedPledge);
  pledges.addListener((SetChangeListener<LHProtos.Pledge>)c -> {
    assertTrue(c.wasAdded());
  }
);
  gate.waitAndRun();
  assertEquals(1,pledges.size());
  assertEquals(Coin.COIN.value,pledges.iterator().next().getTotalInputValue());
}","@Test public void projectAddedWithServer() throws Exception {
  projectModel.serverName.set(""String_Node_Str"");
  project=projectModel.getProject();
  final LHProtos.Pledge scrubbedPledge=makeScrubbedPledge(Coin.COIN);
  ObservableList<Project> projects=backend.mirrorProjects(gate);
  assertEquals(0,projects.size());
  writeProjectToDisk();
  assertEquals(0,projects.size());
  gate.waitAndRun();
  assertEquals(1,projects.size());
  final Project project1=projects.iterator().next();
  assertEquals(""String_Node_Str"",project1.getTitle());
  ObservableSet<LHProtos.Pledge> pledges=backend.mirrorOpenPledges(project1,gate);
  gate.waitAndRun();
  HttpExchange exchange=httpReqs.take();
  sendServerStatus(exchange,scrubbedPledge);
  pledges.addListener((SetChangeListener<LHProtos.Pledge>)c -> {
    assertTrue(c.wasAdded());
  }
);
  gate.waitAndRun();
  assertEquals(1,pledges.size());
  assertEquals(Coin.COIN.value,pledges.iterator().next().getTotalInputValue());
}"
30984,"@Test public void serverPledgeSync() throws Exception {
  projectModel.serverName.set(""String_Node_Str"");
  project=projectModel.getProject();
  ObservableSet<LHProtos.Pledge> openPledges=backend.mirrorOpenPledges(project,gate);
  final LHProtos.Pledge scrubbedPledge=makeScrubbedPledge();
  writeProjectToDisk();
  gate.waitAndRun();
  HttpExchange exchange=httpReqs.take();
  sendServerStatus(exchange,scrubbedPledge);
  gate.waitAndRun();
  assertEquals(1,openPledges.size());
  backend.refreshProjectStatusFromServer(project);
  gate.waitAndRun();
  sendServerStatus(httpReqs.take());
  gate.waitAndRun();
  assertEquals(0,openPledges.size());
}","@Test public void serverPledgeSync() throws Exception {
  Utils.setMockClock();
  projectModel.serverName.set(""String_Node_Str"");
  project=projectModel.getProject();
  ObservableSet<LHProtos.Pledge> openPledges=backend.mirrorOpenPledges(project,gate);
  ObservableSet<LHProtos.Pledge> claimedPledges=backend.mirrorClaimedPledges(project,gate);
  final LHProtos.Pledge scrubbedPledge=makeScrubbedPledge(Coin.COIN);
  writeProjectToDisk();
  gate.waitAndRun();
  HttpExchange exchange=httpReqs.take();
  sendServerStatus(exchange,scrubbedPledge);
  gate.waitAndRun();
  assertEquals(1,openPledges.size());
  assertEquals(0,claimedPledges.size());
  backend.refreshProjectStatusFromServer(project);
  gate.waitAndRun();
  sendServerStatus(httpReqs.take());
  gate.waitAndRun();
  assertEquals(0,openPledges.size());
  assertEquals(0,claimedPledges.size());
  Utils.rollMockClock(60);
  LHProtos.Pledge scrubbedPledge2=makeScrubbedPledge(Coin.COIN.divide(2));
  Utils.rollMockClock(60);
  LHProtos.Pledge scrubbedPledge3=makeScrubbedPledge(Coin.COIN.divide(2));
  backend.refreshProjectStatusFromServer(project);
  gate.waitAndRun();
  sendServerStatus(httpReqs.take(),scrubbedPledge2,scrubbedPledge3);
  gate.waitAndRun();
  gate.waitAndRun();
  assertEquals(2,openPledges.size());
  assertEquals(0,claimedPledges.size());
  backend.refreshProjectStatusFromServer(project);
  gate.waitAndRun();
  LHProtos.ProjectStatus.Builder status=LHProtos.ProjectStatus.newBuilder();
  status.setId(project.getID());
  status.setTimestamp(Instant.now().getEpochSecond());
  status.setValuePledgedSoFar(Coin.COIN.value);
  status.addPledges(scrubbedPledge2);
  status.addPledges(scrubbedPledge3);
  status.setClaimedBy(ByteString.copyFrom(Sha256Hash.ZERO_HASH.getBytes()));
  byte[] bits=status.build().toByteArray();
  exchange=httpReqs.take();
  exchange.sendResponseHeaders(HTTP_OK,bits.length);
  exchange.getResponseBody().write(bits);
  exchange.close();
  for (int i=0; i < 4; i++)   gate.waitAndRun();
  assertEquals(0,openPledges.size());
  assertEquals(2,claimedPledges.size());
}"
30985,"@Test public void serverCheckStatus() throws Exception {
  projectModel.serverName.set(""String_Node_Str"");
  project=projectModel.getProject();
  final LHProtos.Pledge scrubbedPledge=makeScrubbedPledge();
  ObservableMap<Project,LighthouseBackend.CheckStatus> statuses=backend.mirrorCheckStatuses(gate);
  assertEquals(0,statuses.size());
  writeProjectToDisk();
  gate.waitAndRun();
  assertEquals(1,statuses.size());
  assertNotNull(statuses.get(project));
  assertTrue(statuses.get(project).inProgress);
  assertNull(statuses.get(project).error);
  gate.waitAndRun();
  HttpExchange exchange=httpReqs.take();
  exchange.sendResponseHeaders(404,-1);
  gate.waitAndRun();
  assertEquals(1,statuses.size());
  assertFalse(statuses.get(project).inProgress);
  final Throwable error=statuses.get(project).error;
  assertNotNull(error);
  assertEquals(java.io.FileNotFoundException.class,error.getClass());
  backend.refreshProjectStatusFromServer(project);
  gate.waitAndRun();
  assertEquals(1,statuses.size());
  assertTrue(statuses.get(project).inProgress);
  gate.waitAndRun();
  exchange=httpReqs.take();
  sendServerStatus(exchange,scrubbedPledge);
  gate.waitAndRun();
  assertEquals(0,statuses.size());
}","@Test public void serverCheckStatus() throws Exception {
  projectModel.serverName.set(""String_Node_Str"");
  project=projectModel.getProject();
  final LHProtos.Pledge scrubbedPledge=makeScrubbedPledge(Coin.COIN);
  ObservableMap<Project,LighthouseBackend.CheckStatus> statuses=backend.mirrorCheckStatuses(gate);
  assertEquals(0,statuses.size());
  writeProjectToDisk();
  gate.waitAndRun();
  assertEquals(1,statuses.size());
  assertNotNull(statuses.get(project));
  assertTrue(statuses.get(project).inProgress);
  assertNull(statuses.get(project).error);
  gate.waitAndRun();
  HttpExchange exchange=httpReqs.take();
  exchange.sendResponseHeaders(404,-1);
  gate.waitAndRun();
  assertEquals(1,statuses.size());
  assertFalse(statuses.get(project).inProgress);
  final Throwable error=statuses.get(project).error;
  assertNotNull(error);
  assertEquals(java.io.FileNotFoundException.class,error.getClass());
  backend.refreshProjectStatusFromServer(project);
  gate.waitAndRun();
  assertEquals(1,statuses.size());
  assertTrue(statuses.get(project).inProgress);
  gate.waitAndRun();
  exchange=httpReqs.take();
  sendServerStatus(exchange,scrubbedPledge);
  gate.waitAndRun();
  assertEquals(0,statuses.size());
}"
30986,"private LHProtos.Pledge makeScrubbedPledge(){
  final LHProtos.Pledge pledge=LHProtos.Pledge.newBuilder().setTotalInputValue(Coin.COIN.value).setProjectId(project.getID()).setTimestamp(Utils.currentTimeSeconds()).addTransactions(ByteString.copyFromUtf8(""String_Node_Str"")).setPledgeDetails(LHProtos.PledgeDetails.newBuilder().build()).build();
  final Sha256Hash origHash=Sha256Hash.create(pledge.toByteArray());
  return pledge.toBuilder().clearTransactions().setOrigHash(ByteString.copyFrom(origHash.getBytes())).build();
}","private LHProtos.Pledge makeScrubbedPledge(Coin pledgedCoin){
  final LHProtos.Pledge pledge=LHProtos.Pledge.newBuilder().setTotalInputValue(pledgedCoin.value).setProjectId(project.getID()).setTimestamp(Utils.currentTimeSeconds()).addTransactions(ByteString.copyFromUtf8(""String_Node_Str"")).setPledgeDetails(LHProtos.PledgeDetails.newBuilder().build()).build();
  final Sha256Hash origHash=Sha256Hash.create(pledge.toByteArray());
  return pledge.toBuilder().clearTransactions().setOrigHash(ByteString.copyFrom(origHash.getBytes())).build();
}"
30987,"private boolean checkClaimConfidence(Transaction transaction,TransactionConfidence conf,Project project){
switch (conf.getConfidenceType()) {
case PENDING:
    int seenBy=conf.numBroadcastPeers();
  log.info(""String_Node_Str"",seenBy);
if (seenBy < peerGroup.getMinBroadcastConnections()) break;
case BUILDING:
if (conf.getDepthInBlocks() > 3) return true;
log.info(""String_Node_Str"");
if (project.getPaymentURL() == null || mode == Mode.SERVER) movePledgesFromOpenToClaimed(transaction,project);
 else refreshProjectStatusFromServer(project);
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,transaction.getHash()));
break;
case DEAD:
log.warn(""String_Node_Str"",conf.getOverridingTransaction());
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.ERROR,null));
break;
case UNKNOWN:
break;
}
return false;
}","private boolean checkClaimConfidence(Transaction transaction,TransactionConfidence conf,Project project){
  executor.checkOnThread();
switch (conf.getConfidenceType()) {
case PENDING:
    int seenBy=conf.numBroadcastPeers();
  log.info(""String_Node_Str"",seenBy);
if (seenBy < peerGroup.getMinBroadcastConnections()) break;
case BUILDING:
if (conf.getDepthInBlocks() > 3) return true;
if (diskManager.getProjectState(project).state != ProjectState.CLAIMED) {
log.info(""String_Node_Str"");
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,transaction.getHash()));
if (project.getPaymentURL() == null || mode == Mode.SERVER) {
movePledgesFromOpenToClaimed(transaction,project);
}
 else {
jitteredServerRequery(project);
}
}
break;
case DEAD:
log.warn(""String_Node_Str"",conf.getOverridingTransaction());
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.ERROR,null));
break;
case UNKNOWN:
break;
}
return false;
}"
30988,"private CompletableFuture<LHProtos.Pledge> checkPledgeAgainstP2PNetwork(Project project,LHProtos.Pledge pledge){
  return checkPledgesAgainstP2PNetwork(project,FXCollections.observableSet(pledge),false).thenApply(results -> {
    if (results.isEmpty())     return null;
 else     return results.iterator().next();
  }
);
}","private void checkPledgeAgainstP2PNetwork(Project project,LHProtos.Pledge pledge){
  checkPledgesAgainstP2PNetwork(project,FXCollections.observableSet(pledge),false);
}"
30989,"private void doUTXOLookupsForPledges(Project project,ObservableSet<LHProtos.Pledge> pledges,List<Peer> peers,boolean checkingAllPledges,CompletableFuture<Set<LHProtos.Pledge>> result){
  executor.checkOnThread();
  try {
    log.info(""String_Node_Str"",peers.size());
    PeerUTXOMultiplexor multiplexor=new PeerUTXOMultiplexor(peers);
    BatchingUTXOSource utxoSource=new BatchingUTXOSource(multiplexor);
    List<CompletableFuture<LHProtos.Pledge>> futures=new ArrayList<>(pledges.size());
    for (    LHProtos.Pledge pledge : pledges)     futures.add(project.verifyPledge(utxoSource,pledge));
    try {
      utxoSource.run();
      futureOfFutures(futures).get(10,TimeUnit.SECONDS);
    }
 catch (    TimeoutException e) {
    }
    Set<TransactionOutPoint> allOutpoints=checkingAllPledges ? new HashSet<>() : getAllPledgedOutPointsFor(project);
    List<LHProtos.Pledge> verifiedPledges=new ArrayList<>(futures.size());
    for (    CompletableFuture<LHProtos.Pledge> future : futures) {
      if (!future.isDone()) {
        log.warn(""String_Node_Str"",future);
        continue;
      }
      try {
        LHProtos.Pledge pledge=future.get();
        Transaction tx=project.fastSanityCheck(pledge);
        for (        TransactionInput input : tx.getInputs()) {
          if (allOutpoints.contains(input.getOutpoint()))           throw new ExecutionException(new VerificationException.DuplicatedOutPoint());
          allOutpoints.add(input.getOutpoint());
        }
        verifiedPledges.add(pledge);
      }
 catch (      ExecutionException e) {
        if (!(getRootCause(e) instanceof Ex.UnknownUTXO))         throw e;
      }
    }
    log.info(""String_Node_Str"",verifiedPledges.size(),pledges.size());
    syncPledges(project,pledges,verifiedPledges);
    refreshBloomFilter();
    markAsCheckDone(project);
    result.complete(new HashSet<>(verifiedPledges));
  }
 catch (  InterruptedException|ExecutionException e) {
    log.error(""String_Node_Str"",e);
    markAsErrored(project,e);
    result.completeExceptionally(e);
  }
}","private void doUTXOLookupsForPledges(Project project,ObservableSet<LHProtos.Pledge> pledges,List<Peer> peers,boolean checkingAllPledges,CompletableFuture<Set<LHProtos.Pledge>> result){
  executor.checkOnThread();
  try {
    log.info(""String_Node_Str"",peers.size(),checkingAllPledges ? ""String_Node_Str"" : ""String_Node_Str"");
    PeerUTXOMultiplexor multiplexor=new PeerUTXOMultiplexor(peers);
    BatchingUTXOSource utxoSource=new BatchingUTXOSource(multiplexor);
    List<CompletableFuture<LHProtos.Pledge>> futures=new ArrayList<>(pledges.size());
    for (    LHProtos.Pledge pledge : pledges)     futures.add(project.verifyPledge(utxoSource,pledge));
    try {
      utxoSource.run();
      futureOfFutures(futures).get(10,TimeUnit.SECONDS);
    }
 catch (    TimeoutException e) {
    }
    Set<TransactionOutPoint> allOutpoints=checkingAllPledges ? new HashSet<>() : getAllPledgedOutPointsFor(project);
    List<LHProtos.Pledge> verifiedPledges=new ArrayList<>(futures.size());
    for (    CompletableFuture<LHProtos.Pledge> future : futures) {
      if (!future.isDone()) {
        log.warn(""String_Node_Str"",future);
        continue;
      }
      try {
        LHProtos.Pledge pledge=future.get();
        Transaction tx=project.fastSanityCheck(pledge);
        for (        TransactionInput input : tx.getInputs()) {
          if (allOutpoints.contains(input.getOutpoint()))           throw new ExecutionException(new VerificationException.DuplicatedOutPoint());
          allOutpoints.add(input.getOutpoint());
        }
        verifiedPledges.add(pledge);
      }
 catch (      ExecutionException e) {
        if (!(getRootCause(e) instanceof Ex.UnknownUTXO))         throw e;
      }
    }
    log.info(""String_Node_Str"",verifiedPledges.size(),pledges.size());
    syncPledges(project,pledges,verifiedPledges);
    refreshBloomFilter();
    markAsCheckDone(project);
    result.complete(new HashSet<>(verifiedPledges));
  }
 catch (  InterruptedException|ExecutionException e) {
    log.error(""String_Node_Str"",e);
    markAsErrored(project,e);
    result.completeExceptionally(e);
  }
}"
30990,"/** 
 * Invokes a manual refresh by going back to the server. Can be called from any thread. 
 */
public CompletableFuture<LHProtos.ProjectStatus> refreshProjectStatusFromServer(Project project,@Nullable KeyParameter aesKey){
  checkState(mode == Mode.CLIENT);
  CompletableFuture<LHProtos.ProjectStatus> future=new CompletableFuture<>();
  executor.execute(() -> {
    markAsInProgress(project);
    project.getStatus(wallet,aesKey).whenCompleteAsync((status,ex) -> {
      if (ex != null) {
        markAsErrored(project,ex);
        future.completeExceptionally(ex);
      }
 else {
        try {
          log.info(""String_Node_Str"",status);
          syncPledges(project,new HashSet<>(status.getPledgesList()),status.getPledgesList());
          if (status.hasClaimedBy() && diskManager.getProjectState(project).state != ProjectState.CLAIMED) {
            diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,new Sha256Hash(status.getClaimedBy().toByteArray())));
          }
          markAsCheckDone(project);
          future.complete(status);
        }
 catch (        Throwable t) {
          future.completeExceptionally(t);
        }
      }
    }
,executor);
  }
);
  return future;
}","/** 
 * Invokes a manual refresh by going back to the server. Can be called from any thread. 
 */
public CompletableFuture<LHProtos.ProjectStatus> refreshProjectStatusFromServer(Project project,@Nullable KeyParameter aesKey){
  checkState(mode == Mode.CLIENT);
  CompletableFuture<LHProtos.ProjectStatus> future=new CompletableFuture<>();
  executor.execute(() -> {
    markAsInProgress(project);
    project.getStatus(wallet,aesKey).whenCompleteAsync((status,ex) -> {
      if (ex != null) {
        markAsErrored(project,ex);
        future.completeExceptionally(ex);
      }
 else {
        try {
          log.info(""String_Node_Str"",status);
          executor.checkOnThread();
          if (status.hasClaimedBy()) {
            if (diskManager.getProjectState(project).state != ProjectState.CLAIMED) {
              diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,new Sha256Hash(status.getClaimedBy().toByteArray())));
            }
            ObservableSet<LHProtos.Pledge> curOpenPledges=getOpenPledgesFor(project);
            ObservableSet<LHProtos.Pledge> curClaimedPledges=getClaimedPledgesFor(project);
            log.info(""String_Node_Str"",curOpenPledges.size(),curClaimedPledges.size());
            curClaimedPledges.clear();
            curClaimedPledges.addAll(status.getPledgesList());
            curOpenPledges.clear();
          }
 else {
            syncPledges(project,new HashSet<>(status.getPledgesList()),status.getPledgesList());
          }
          markAsCheckDone(project);
          future.complete(status);
          log.info(""String_Node_Str"");
        }
 catch (        Throwable t) {
          log.error(""String_Node_Str"",t);
          future.completeExceptionally(t);
        }
      }
    }
,executor);
  }
);
  return future;
}"
30991,"private void updateExistingProject(int index,Project newProject,Project prevProject){
  projectsVBox.getChildren().set(projectsVBox.getChildren().size() - 2 - index,buildProjectWidget(newProject));
  if (inProjectView.get() && projectView.getProject().equals(prevProject)) {
    projectView.setProject(newProject);
  }
}","private void updateExistingProject(int index,Project newProject,Project prevProject){
  log.info(""String_Node_Str"",index);
  projectsVBox.getChildren().set(projectsVBox.getChildren().size() - 2 - index,buildProjectWidget(newProject));
  if (inProjectView.get() && projectView.getProject().equals(prevProject)) {
    projectView.setProject(newProject);
  }
}"
30992,"public void initialize(){
  AwesomeDude.setIcon(emptyWalletBtn,AwesomeIcon.SIGN_OUT,""String_Node_Str"",ContentDisplay.LEFT);
  Tooltip.install(emptyWalletBtn,new Tooltip(""String_Node_Str""));
  AwesomeDude.setIcon(setupWalletBtn,AwesomeIcon.LOCK,""String_Node_Str"",ContentDisplay.LEFT);
  Tooltip.install(setupWalletBtn,new Tooltip(""String_Node_Str""));
  AwesomeDude.setIcon(addProjectIcon,AwesomeIcon.FILE_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(backButton,AwesomeIcon.ARROW_CIRCLE_LEFT,""String_Node_Str"");
  animatedBind(topBoxLeftArea,topBoxLeftArea.translateXProperty(),when(inProjectView).then(0).otherwise(-45),Interpolator.EASE_OUT);
  AwesomeDude.setIcon(menuBtn,AwesomeIcon.BARS);
  contentStack.getChildren().remove(projectViewContainer);
  contentStack.getChildren().remove(overviewVbox);
  switchView(Views.OVERVIEW);
  if (!Main.instance.waitForInit())   return;
  projects=Main.backend.mirrorProjects(UI_THREAD);
  projectStates=Main.backend.mirrorProjectStates(UI_THREAD);
  checkStates=Main.backend.mirrorCheckStatuses(UI_THREAD);
  for (  Project project : projects)   projectsVBox.getChildren().add(0,buildProjectWidget(project));
  projects.addListener((ListChangeListener<Project>)change -> {
    while (change.next()) {
      if (change.wasReplaced()) {
        updateExistingProject(change.getFrom(),change.getAddedSubList().get(0),change.getRemoved().get(0));
      }
 else       if (change.wasAdded()) {
        slideInNewProject(change.getAddedSubList().get(0));
      }
 else       if (change.wasRemoved()) {
        log.warn(""String_Node_Str"",change);
      }
    }
  }
);
}","public void initialize(){
  AwesomeDude.setIcon(emptyWalletBtn,AwesomeIcon.SIGN_OUT,""String_Node_Str"",ContentDisplay.LEFT);
  Tooltip.install(emptyWalletBtn,new Tooltip(""String_Node_Str""));
  AwesomeDude.setIcon(setupWalletBtn,AwesomeIcon.LOCK,""String_Node_Str"",ContentDisplay.LEFT);
  Tooltip.install(setupWalletBtn,new Tooltip(""String_Node_Str""));
  AwesomeDude.setIcon(addProjectIcon,AwesomeIcon.FILE_ALT,""String_Node_Str"");
  AwesomeDude.setIcon(backButton,AwesomeIcon.ARROW_CIRCLE_LEFT,""String_Node_Str"");
  animatedBind(topBoxLeftArea,topBoxLeftArea.translateXProperty(),when(inProjectView).then(0).otherwise(-45),Interpolator.EASE_OUT);
  AwesomeDude.setIcon(menuBtn,AwesomeIcon.BARS);
  contentStack.getChildren().remove(projectViewContainer);
  contentStack.getChildren().remove(overviewVbox);
  switchView(Views.OVERVIEW);
  if (!Main.instance.waitForInit())   return;
  projects=Main.backend.mirrorProjects(UI_THREAD);
  projectStates=Main.backend.mirrorProjectStates(UI_THREAD);
  checkStates=Main.backend.mirrorCheckStatuses(UI_THREAD);
  for (  Project project : projects)   projectsVBox.getChildren().add(0,buildProjectWidget(project));
  projects.addListener((ListChangeListener<Project>)change -> {
    while (change.next()) {
      if (change.wasReplaced()) {
        updateExistingProject(change.getFrom(),change.getAddedSubList().get(0),change.getRemoved().get(0));
      }
 else       if (change.wasAdded()) {
        slideInNewProject(change.getAddedSubList().get(0));
      }
 else       if (change.wasRemoved()) {
        log.warn(""String_Node_Str"",change);
        projectsVBox.getChildren().remove(projectsVBox.getChildren().size() - 2 - change.getFrom());
      }
    }
  }
);
}"
30993,"public void importProjectFrom(Path file) throws IOException {
  checkState(Files.isRegularFile(file));
  Path destPath=AppDirectory.dir().resolve(file.getFileName());
  Path tmpPath=Paths.get(destPath + ""String_Node_Str"");
  Files.copy(file,tmpPath,StandardCopyOption.REPLACE_EXISTING);
  Files.move(tmpPath,destPath,StandardCopyOption.REPLACE_EXISTING);
  Runnable runnable=() -> watchDirectoryForPledges(file.getParent());
  executor.executeIn(Duration.ofSeconds(3),runnable);
}","public void importProjectFrom(Path file) throws IOException {
  checkState(Files.isRegularFile(file));
  Path destPath=AppDirectory.dir().resolve(file.getFileName());
  if (Files.exists(destPath)) {
    Sha256Hash theirHash=Sha256Hash.hashFileContents(file.toFile());
    Sha256Hash ourHash=Sha256Hash.hashFileContents(destPath.toFile());
    if (theirHash.equals(ourHash)) {
      log.info(""String_Node_Str"");
      return;
    }
  }
  Path tmpPath=Paths.get(destPath + ""String_Node_Str"");
  Files.copy(file,tmpPath,StandardCopyOption.REPLACE_EXISTING);
  Files.move(tmpPath,destPath,StandardCopyOption.REPLACE_EXISTING);
  Runnable runnable=() -> watchDirectoryForPledges(file.getParent());
  executor.executeIn(Duration.ofSeconds(3),runnable);
}"
30994,"private boolean checkClaimConfidence(Transaction t,Project project){
switch (t.getConfidence().getConfidenceType()) {
case PENDING:
    int seenBy=t.getConfidence().numBroadcastPeers();
  log.info(""String_Node_Str"",seenBy);
if (seenBy < peerGroup.getMinBroadcastConnections() || wallet.getParams().equals(RegTestParams.get())) break;
case BUILDING:
log.info(""String_Node_Str"");
if (t.getConfidence().getDepthInBlocks() > 3) return true;
if (project.getPaymentURL() == null) movePledgesFromOpenToClaimed(t,project);
 else refreshProjectStatusFromServer(project);
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,t.getHash()));
break;
case DEAD:
log.warn(""String_Node_Str"",t.getConfidence().getOverridingTransaction());
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.ERROR,null));
break;
case UNKNOWN:
break;
}
return false;
}","private boolean checkClaimConfidence(Transaction t,Project project){
switch (t.getConfidence().getConfidenceType()) {
case PENDING:
    int seenBy=t.getConfidence().numBroadcastPeers();
  log.info(""String_Node_Str"",seenBy);
if (seenBy < peerGroup.getMinBroadcastConnections() || wallet.getParams().equals(RegTestParams.get())) break;
case BUILDING:
if (t.getConfidence().getDepthInBlocks() > 3) return true;
log.info(""String_Node_Str"");
if (project.getPaymentURL() == null || mode == Mode.SERVER) movePledgesFromOpenToClaimed(t,project);
 else refreshProjectStatusFromServer(project);
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,t.getHash()));
break;
case DEAD:
log.warn(""String_Node_Str"",t.getConfidence().getOverridingTransaction());
diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.ERROR,null));
break;
case UNKNOWN:
break;
}
return false;
}"
30995,"private CompletableFuture<Void> lookupPledgesFromServer(Project project){
  CompletableFuture<Void> future=new CompletableFuture<>();
  executor.execute(() -> {
    markAsInProgress(project);
    project.getStatus(wallet,null).whenCompleteAsync((status,ex) -> {
      if (ex != null) {
        markAsErrored(project,ex);
        future.completeExceptionally(ex);
      }
 else {
        log.info(""String_Node_Str"",status);
        syncPledges(project,new HashSet<>(status.getPledgesList()),status.getPledgesList());
        if (status.hasClaimedBy() && diskManager.getProjectState(project).state != ProjectState.CLAIMED) {
          diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,new Sha256Hash(status.getClaimedBy().toByteArray())));
        }
        markAsCheckDone(project);
        future.complete(null);
      }
    }
,executor);
  }
);
  return future;
}","private CompletableFuture<Void> lookupPledgesFromServer(Project project){
  checkState(mode == Mode.CLIENT);
  CompletableFuture<Void> future=new CompletableFuture<>();
  executor.execute(() -> {
    markAsInProgress(project);
    project.getStatus(wallet,null).whenCompleteAsync((status,ex) -> {
      if (ex != null) {
        markAsErrored(project,ex);
        future.completeExceptionally(ex);
      }
 else {
        log.info(""String_Node_Str"",status);
        syncPledges(project,new HashSet<>(status.getPledgesList()),status.getPledgesList());
        if (status.hasClaimedBy() && diskManager.getProjectState(project).state != ProjectState.CLAIMED) {
          diskManager.setProjectState(project,new ProjectStateInfo(ProjectState.CLAIMED,new Sha256Hash(status.getClaimedBy().toByteArray())));
        }
        markAsCheckDone(project);
        future.complete(null);
      }
    }
,executor);
  }
);
  return future;
}"
30996,"private void updateForProject(){
  pieChart.getData().clear();
  pledgesList.getItems().clear();
  final Project p=project.get();
  projectTitle.setText(p.getTitle());
  goalAmountLabel.setText(String.format(goalAmountFormatStr,p.getGoalAmount().toPlainString()));
  description.getChildren().setAll(new Text(project.get().getMemo()));
  pledgesListVBox.visibleProperty().bind(not(isEmpty(pledgesList.getItems())));
  noPledgesLabel.visibleProperty().bind(isEmpty(pledgesList.getItems()));
  Image img=new Image(p.getCoverImage().newInput());
  if (img.getException() != null)   Throwables.propagate(img.getException());
  BackgroundSize cover=new BackgroundSize(BackgroundSize.AUTO,BackgroundSize.AUTO,false,false,false,true);
  BackgroundImage bimg=new BackgroundImage(img,BackgroundRepeat.NO_REPEAT,BackgroundRepeat.NO_REPEAT,BackgroundPosition.DEFAULT,cover);
  coverImage.setBackground(new Background(bimg));
  emptySlice=new PieChart.Data(""String_Node_Str"",0);
  if (bindings != null)   bindings.unbind();
  bindings=new UIBindings();
  emptySlice.getNode().setVisible(false);
  checkForMyPledge(p);
  editButton.setVisible(Main.wallet.isProjectMine(p));
  if (p.getPaymentURL() != null) {
    Platform.runLater(() -> {
      Main.instance.scene.getAccelerators().put(KeyCombination.keyCombination(""String_Node_Str""),() -> Main.backend.refreshProjectStatusFromServer(p));
    }
);
  }
}","private void updateForProject(){
  pieChart.getData().clear();
  pledgesList.getItems().clear();
  final Project p=project.get();
  projectTitle.setText(p.getTitle());
  goalAmountLabel.setText(String.format(goalAmountFormatStr,p.getGoalAmount().toPlainString()));
  description.getChildren().setAll(new Text(project.get().getMemo()));
  pledgesListVBox.visibleProperty().bind(not(isEmpty(pledgesList.getItems())));
  noPledgesLabel.visibleProperty().bind(isEmpty(pledgesList.getItems()));
  Image img=new Image(p.getCoverImage().newInput());
  if (img.getException() != null)   Throwables.propagate(img.getException());
  BackgroundSize cover=new BackgroundSize(BackgroundSize.AUTO,BackgroundSize.AUTO,false,false,false,true);
  BackgroundImage bimg=new BackgroundImage(img,BackgroundRepeat.NO_REPEAT,BackgroundRepeat.NO_REPEAT,BackgroundPosition.DEFAULT,cover);
  coverImage.setBackground(new Background(bimg));
  emptySlice=new PieChart.Data(""String_Node_Str"",0);
  if (bindings != null)   bindings.unbind();
  bindings=new UIBindings();
  emptySlice.getNode().setVisible(false);
  checkForMyPledge(p);
  editButton.setVisible(Main.wallet.isProjectMine(p));
  Main.wallet.addOnRevokeHandler(pledge -> setModeFor(p,pledgedValue.get()),Platform::runLater);
  if (p.getPaymentURL() != null) {
    Platform.runLater(() -> {
      Main.instance.scene.getAccelerators().put(KeyCombination.keyCombination(""String_Node_Str""),() -> Main.backend.refreshProjectStatusFromServer(p));
    }
);
  }
}"
30997,"private synchronized void updateForRevoke(Sha256Hash hash,Transaction tx,LHProtos.Pledge proto,TransactionOutput stub){
  revokeInProgress.remove(tx);
  revokedPledges.put(hash,proto);
  pledges.remove(stub);
  projects.inverse().remove(proto);
}","private synchronized void updateForRevoke(Transaction tx,LHProtos.Pledge proto,TransactionOutput stub){
  revokeInProgress.remove(tx);
  revokedPledges.put(LHUtils.hashFromPledge(proto),proto);
  pledges.remove(stub);
  projects.inverse().remove(proto);
}"
30998,"@Override protected void queueOnCoinsSent(Transaction tx,Coin prevBalance,Coin newBalance){
  super.queueOnCoinsSent(tx,prevBalance,newBalance);
synchronized (this) {
    for (    Map.Entry<TransactionOutput,LHProtos.Pledge> entry : pledges.entrySet()) {
      TransactionInput spentBy=entry.getKey().getSpentBy();
      if (spentBy != null && tx.equals(spentBy.getParentTransaction())) {
        if (!revokeInProgress.contains(tx)) {
          log.info(""String_Node_Str"");
          LHProtos.Pledge pledge=entry.getValue();
          Project project=projects.inverse().get(pledge);
          checkNotNull(project);
          if (compareOutputsStructurally(tx,project)) {
            log.info(""String_Node_Str"");
            for (            ListenerRegistration<OnClaimHandler> handler : onClaimedHandlers) {
              handler.executor.execute(() -> handler.listener.onClaim(pledge,tx));
            }
          }
 else {
            log.warn(""String_Node_Str"");
          }
        }
      }
    }
  }
}","@Override protected void queueOnCoinsSent(Transaction tx,Coin prevBalance,Coin newBalance){
  super.queueOnCoinsSent(tx,prevBalance,newBalance);
synchronized (this) {
    for (    Map.Entry<TransactionOutput,LHProtos.Pledge> entry : new HashSet<>(pledges.entrySet())) {
      TransactionInput spentBy=entry.getKey().getSpentBy();
      if (spentBy != null && tx.equals(spentBy.getParentTransaction())) {
        if (!revokeInProgress.contains(tx)) {
          log.info(""String_Node_Str"");
          LHProtos.Pledge pledge=entry.getValue();
          Project project=projects.inverse().get(pledge);
          checkNotNull(project);
          if (compareOutputsStructurally(tx,project)) {
            log.info(""String_Node_Str"");
            for (            ListenerRegistration<OnClaimHandler> handler : onClaimedHandlers) {
              handler.executor.execute(() -> handler.listener.onClaim(pledge,tx));
            }
          }
 else {
            log.warn(""String_Node_Str"");
            updateForRevoke(tx,pledge,entry.getKey());
            for (            ListenerRegistration<OnRevokeHandler> handler : onRevokeHandlers) {
              handler.executor.execute(() -> handler.listener.onRevoke(pledge));
            }
            saveNow();
          }
        }
      }
    }
  }
}"
30999,"/** 
 * Given a pledge protobuf, double spends the stub so the pledge can no longer be claimed. The pledge is removed from the wallet once the double spend propagates successfully.
 * @throws org.bitcoinj.core.InsufficientMoneyException if we can't afford to revoke.
 */
public Revocation revokePledge(LHProtos.Pledge proto,@Nullable KeyParameter aesKey) throws InsufficientMoneyException {
  TransactionOutput stub;
synchronized (this) {
    stub=pledges.inverse().get(proto);
  }
  checkArgument(stub != null,""String_Node_Str"",proto);
  Transaction revocation=new Transaction(params);
  revocation.addInput(stub);
  revocation.addOutput(stub.getValue().subtract(Transaction.REFERENCE_DEFAULT_MIN_TX_FEE),freshReceiveKey().toAddress(params));
  SendRequest request=SendRequest.forTx(revocation);
  request.aesKey=aesKey;
  completeTx(request);
synchronized (this) {
    revokeInProgress.add(request.tx);
  }
  log.info(""String_Node_Str"",stub.getValue());
  log.info(""String_Node_Str"",stub);
  log.info(""String_Node_Str"",revocation);
  final ListenableFuture<Transaction> future=vTransactionBroadcaster.broadcastTransaction(revocation);
  Futures.addCallback(future,new FutureCallback<Transaction>(){
    @Override public void onSuccess(    @Nullable Transaction result){
      final Sha256Hash hash=hashFromPledge(proto);
      log.info(""String_Node_Str"",hash);
      log.info(""String_Node_Str"",proto.getTransactionsCount());
      updateForRevoke(hash,result,proto,stub);
      saveNow();
      for (      ListenerRegistration<OnRevokeHandler> handler : onRevokeHandlers) {
        handler.executor.execute(() -> handler.listener.onRevoke(proto));
      }
      lock.lock();
      try {
        maybeQueueOnWalletChanged();
      }
  finally {
        lock.unlock();
      }
    }
    @Override public void onFailure(    Throwable t){
      log.error(""String_Node_Str"",t);
    }
  }
);
  return new Revocation(future,revocation);
}","/** 
 * Given a pledge protobuf, double spends the stub so the pledge can no longer be claimed. The pledge is removed from the wallet once the double spend propagates successfully.
 * @throws org.bitcoinj.core.InsufficientMoneyException if we can't afford to revoke.
 */
public Revocation revokePledge(LHProtos.Pledge proto,@Nullable KeyParameter aesKey) throws InsufficientMoneyException {
  TransactionOutput stub;
synchronized (this) {
    stub=pledges.inverse().get(proto);
  }
  checkArgument(stub != null,""String_Node_Str"",proto);
  Transaction revocation=new Transaction(params);
  revocation.addInput(stub);
  revocation.addOutput(stub.getValue().subtract(Transaction.REFERENCE_DEFAULT_MIN_TX_FEE),freshReceiveKey().toAddress(params));
  SendRequest request=SendRequest.forTx(revocation);
  request.aesKey=aesKey;
  completeTx(request);
synchronized (this) {
    revokeInProgress.add(request.tx);
  }
  log.info(""String_Node_Str"",stub.getValue());
  log.info(""String_Node_Str"",stub);
  log.info(""String_Node_Str"",revocation);
  final ListenableFuture<Transaction> future=vTransactionBroadcaster.broadcastTransaction(revocation);
  Futures.addCallback(future,new FutureCallback<Transaction>(){
    @Override public void onSuccess(    @Nullable Transaction result){
      log.info(""String_Node_Str"",hashFromPledge(proto));
      log.info(""String_Node_Str"",proto.getTransactionsCount());
      updateForRevoke(result,proto,stub);
      saveNow();
      for (      ListenerRegistration<OnRevokeHandler> handler : onRevokeHandlers) {
        handler.executor.execute(() -> handler.listener.onRevoke(proto));
      }
      lock.lock();
      try {
        maybeQueueOnWalletChanged();
      }
  finally {
        lock.unlock();
      }
    }
    @Override public void onFailure(    Throwable t){
      log.error(""String_Node_Str"",t);
    }
  }
);
  return new Revocation(future,revocation);
}"
31000,"@Override public void onSuccess(@Nullable Transaction result){
  final Sha256Hash hash=hashFromPledge(proto);
  log.info(""String_Node_Str"",hash);
  log.info(""String_Node_Str"",proto.getTransactionsCount());
  updateForRevoke(hash,result,proto,stub);
  saveNow();
  for (  ListenerRegistration<OnRevokeHandler> handler : onRevokeHandlers) {
    handler.executor.execute(() -> handler.listener.onRevoke(proto));
  }
  lock.lock();
  try {
    maybeQueueOnWalletChanged();
  }
  finally {
    lock.unlock();
  }
}","@Override public void onSuccess(@Nullable Transaction result){
  log.info(""String_Node_Str"",hashFromPledge(proto));
  log.info(""String_Node_Str"",proto.getTransactionsCount());
  updateForRevoke(result,proto,stub);
  saveNow();
  for (  ListenerRegistration<OnRevokeHandler> handler : onRevokeHandlers) {
    handler.executor.execute(() -> handler.listener.onRevoke(proto));
  }
  lock.lock();
  try {
    maybeQueueOnWalletChanged();
  }
  finally {
    lock.unlock();
  }
}"
